import{S as L$t,i as x$t,s as $$t,e as a,k as l,w as F,t as o,M as k$t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as S$t,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as HVr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function R$t(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,wA,_f,je,We,hi,yn,AA,Ln,xn,yA,pi,$n,LA,_i,uf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),wA=o(")."),_f=l(),je=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),AA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),yA=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),LA=o(` attribute is set to the same class you use when registering the model (here
`),_i=a("code"),uf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Q$=s(p);m=r(Q$,"NewModelConfig"),Q$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ui=s(d);h=r(ui,"PretrainedConfig"),ui.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var H$=s(fi);pf=r(H$,"model_type"),H$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var U$=s(mi);gi=r(U$,'"new-model"'),U$.forEach(t),wA=r(Ae,")."),Ae.forEach(t),_f=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),AA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var J$=s(Ln);xn=r(J$,"PreTrainedModel"),J$.forEach(t),yA=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),LA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),_i=n(Eo,"CODE",{});var Y$=s(_i);uf=r(Y$,"NewModelConfig"),Y$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,rt),e(g,mi),e(mi,gi),e(g,wA),b(Qe,_f,Ae),b(Qe,je,Ae),e(je,We),e(je,hi),e(hi,yn),e(je,AA),e(je,Ln),e(Ln,xn),e(je,yA),e(je,pi),e(pi,$n),e(je,LA),e(je,_i),e(_i,uf),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(_f),Qe&&t(je)}}}function P$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I$t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function N$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q$t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function j$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ekt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function okt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function akt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function skt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ikt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ckt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _kt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ukt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ekt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ckt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Akt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ykt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $kt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Skt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ikt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Okt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ukt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ykt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ESt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ASt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ySt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $St(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,wA,_f,je,We,hi,yn,AA,Ln,xn,yA,pi,$n,LA,_i,uf,Ca,Qe,Ae,Q$,ui,H$,U$,Eo,wa,J$,bf,Y$,uOe,sqe,bi,vf,coe,xA,bOe,foe,vOe,lqe,kn,FOe,moe,TOe,MOe,goe,EOe,COe,iqe,$A,dqe,K$,wOe,cqe,Ff,fqe,vi,Tf,hoe,kA,AOe,poe,yOe,mqe,Co,SA,LOe,RA,xOe,Z$,$Oe,kOe,SOe,PA,ROe,_oe,POe,BOe,IOe,Er,BA,NOe,uoe,qOe,jOe,Fi,DOe,boe,GOe,OOe,voe,VOe,XOe,zOe,A,Mf,Foe,WOe,QOe,ek,HOe,UOe,JOe,Ef,Toe,YOe,KOe,ok,ZOe,eVe,oVe,Cf,Moe,rVe,tVe,rk,aVe,nVe,sVe,wf,Eoe,lVe,iVe,tk,dVe,cVe,fVe,Af,Coe,mVe,gVe,ak,hVe,pVe,_Ve,yf,woe,uVe,bVe,nk,vVe,FVe,TVe,Lf,Aoe,MVe,EVe,sk,CVe,wVe,AVe,xf,yoe,yVe,LVe,lk,xVe,$Ve,kVe,$f,Loe,SVe,RVe,ik,PVe,BVe,IVe,kf,xoe,NVe,qVe,dk,jVe,DVe,GVe,Sf,$oe,OVe,VVe,ck,XVe,zVe,WVe,Rf,koe,QVe,HVe,fk,UVe,JVe,YVe,Pf,Soe,KVe,ZVe,mk,eXe,oXe,rXe,Bf,Roe,tXe,aXe,gk,nXe,sXe,lXe,If,Poe,iXe,dXe,hk,cXe,fXe,mXe,Nf,Boe,gXe,hXe,pk,pXe,_Xe,uXe,qf,Ioe,bXe,vXe,_k,FXe,TXe,MXe,jf,Noe,EXe,CXe,uk,wXe,AXe,yXe,Df,qoe,LXe,xXe,bk,$Xe,kXe,SXe,Gf,joe,RXe,PXe,vk,BXe,IXe,NXe,Of,Doe,qXe,jXe,Fk,DXe,GXe,OXe,Vf,Goe,VXe,XXe,Tk,zXe,WXe,QXe,Xf,Ooe,HXe,UXe,Mk,JXe,YXe,KXe,zf,Voe,ZXe,eze,Ek,oze,rze,tze,Wf,Xoe,aze,nze,Ck,sze,lze,ize,Qf,zoe,dze,cze,wk,fze,mze,gze,Hf,Woe,hze,pze,Ak,_ze,uze,bze,Uf,Qoe,vze,Fze,yk,Tze,Mze,Eze,Jf,Hoe,Cze,wze,Lk,Aze,yze,Lze,Yf,Uoe,xze,$ze,xk,kze,Sze,Rze,Kf,Joe,Pze,Bze,$k,Ize,Nze,qze,Zf,Yoe,jze,Dze,kk,Gze,Oze,Vze,em,Koe,Xze,zze,Sk,Wze,Qze,Hze,om,Zoe,Uze,Jze,Rk,Yze,Kze,Zze,rm,ere,eWe,oWe,Pk,rWe,tWe,aWe,tm,ore,nWe,sWe,Bk,lWe,iWe,dWe,am,rre,cWe,fWe,Ik,mWe,gWe,hWe,nm,tre,pWe,_We,Nk,uWe,bWe,vWe,sm,are,FWe,TWe,qk,MWe,EWe,CWe,lm,nre,wWe,AWe,jk,yWe,LWe,xWe,im,sre,$We,kWe,Dk,SWe,RWe,PWe,dm,lre,BWe,IWe,Gk,NWe,qWe,jWe,cm,ire,DWe,GWe,Ok,OWe,VWe,XWe,fm,dre,zWe,WWe,Vk,QWe,HWe,UWe,mm,cre,JWe,YWe,Xk,KWe,ZWe,eQe,gm,fre,oQe,rQe,zk,tQe,aQe,nQe,hm,mre,sQe,lQe,Wk,iQe,dQe,cQe,pm,gre,fQe,mQe,Qk,gQe,hQe,pQe,_m,hre,_Qe,uQe,Hk,bQe,vQe,FQe,um,pre,TQe,MQe,Uk,EQe,CQe,wQe,bm,_re,AQe,yQe,Jk,LQe,xQe,$Qe,vm,ure,kQe,SQe,Yk,RQe,PQe,BQe,Fm,bre,IQe,NQe,Kk,qQe,jQe,DQe,Tm,vre,GQe,OQe,Zk,VQe,XQe,zQe,Mm,Fre,WQe,QQe,eS,HQe,UQe,JQe,Em,Tre,YQe,KQe,oS,ZQe,eHe,oHe,Cm,Mre,rHe,tHe,rS,aHe,nHe,sHe,wm,Ere,lHe,iHe,tS,dHe,cHe,fHe,Am,Cre,mHe,gHe,aS,hHe,pHe,_He,ym,wre,uHe,bHe,nS,vHe,FHe,THe,Lm,Are,MHe,EHe,sS,CHe,wHe,AHe,xm,yre,yHe,LHe,lS,xHe,$He,kHe,$m,Lre,SHe,RHe,iS,PHe,BHe,IHe,km,xre,NHe,qHe,dS,jHe,DHe,GHe,Sm,$re,OHe,VHe,cS,XHe,zHe,WHe,Rm,kre,QHe,HHe,fS,UHe,JHe,YHe,Pm,Sre,KHe,ZHe,mS,eUe,oUe,rUe,Bm,Rre,tUe,aUe,gS,nUe,sUe,lUe,Im,Pre,iUe,dUe,hS,cUe,fUe,mUe,Nm,Bre,gUe,hUe,pS,pUe,_Ue,uUe,qm,Ire,bUe,vUe,_S,FUe,TUe,MUe,jm,Nre,EUe,CUe,uS,wUe,AUe,yUe,Dm,qre,LUe,xUe,bS,$Ue,kUe,SUe,Gm,jre,RUe,PUe,vS,BUe,IUe,NUe,Om,Dre,qUe,jUe,FS,DUe,GUe,OUe,Vm,Gre,VUe,XUe,TS,zUe,WUe,QUe,Xm,Ore,HUe,UUe,MS,JUe,YUe,KUe,zm,Vre,ZUe,eJe,ES,oJe,rJe,tJe,Wm,Xre,aJe,nJe,CS,sJe,lJe,iJe,Qm,zre,dJe,cJe,wS,fJe,mJe,gJe,Hm,Wre,hJe,pJe,AS,_Je,uJe,bJe,Um,Qre,vJe,FJe,yS,TJe,MJe,EJe,Jm,Hre,CJe,wJe,LS,AJe,yJe,LJe,Ym,Ure,xJe,$Je,xS,kJe,SJe,RJe,Km,Jre,PJe,BJe,$S,IJe,NJe,qJe,Zm,Yre,jJe,DJe,kS,GJe,OJe,VJe,eg,Kre,XJe,zJe,SS,WJe,QJe,HJe,og,Zre,UJe,JJe,RS,YJe,KJe,ZJe,rg,ete,eYe,oYe,PS,rYe,tYe,aYe,tg,ote,nYe,sYe,BS,lYe,iYe,dYe,ag,rte,cYe,fYe,IS,mYe,gYe,hYe,ng,tte,pYe,_Ye,NS,uYe,bYe,vYe,sg,ate,FYe,TYe,qS,MYe,EYe,CYe,lg,nte,wYe,AYe,jS,yYe,LYe,xYe,ig,ste,$Ye,kYe,DS,SYe,RYe,PYe,dg,lte,BYe,IYe,GS,NYe,qYe,jYe,cg,ite,DYe,GYe,OS,OYe,VYe,XYe,fg,dte,zYe,WYe,VS,QYe,HYe,UYe,mg,cte,JYe,YYe,XS,KYe,ZYe,eKe,gg,fte,oKe,rKe,zS,tKe,aKe,nKe,hg,mte,sKe,lKe,WS,iKe,dKe,cKe,pg,gte,fKe,mKe,QS,gKe,hKe,pKe,_g,hte,_Ke,uKe,HS,bKe,vKe,FKe,ug,pte,TKe,MKe,US,EKe,CKe,wKe,bg,_te,AKe,yKe,JS,LKe,xKe,$Ke,vg,ute,kKe,SKe,YS,RKe,PKe,BKe,Fg,bte,IKe,NKe,KS,qKe,jKe,DKe,Tg,vte,GKe,OKe,ZS,VKe,XKe,zKe,Mg,Fte,WKe,QKe,eR,HKe,UKe,JKe,Eg,Tte,YKe,KKe,oR,ZKe,eZe,oZe,Cg,rZe,wg,IA,tZe,Mte,aZe,gqe,Ti,Ag,Ete,NA,nZe,Cte,sZe,hqe,wo,qA,lZe,jA,iZe,rR,dZe,cZe,fZe,DA,mZe,wte,gZe,hZe,pZe,Cr,GA,_Ze,Ate,uZe,bZe,Aa,vZe,yte,FZe,TZe,Lte,MZe,EZe,xte,CZe,wZe,AZe,k,Sn,$te,yZe,LZe,tR,xZe,$Ze,aR,kZe,SZe,RZe,Rn,kte,PZe,BZe,nR,IZe,NZe,sR,qZe,jZe,DZe,Pn,Ste,GZe,OZe,lR,VZe,XZe,iR,zZe,WZe,QZe,yg,Rte,HZe,UZe,dR,JZe,YZe,KZe,Bn,Pte,ZZe,eeo,cR,oeo,reo,fR,teo,aeo,neo,Lg,Bte,seo,leo,mR,ieo,deo,ceo,xg,Ite,feo,meo,gR,geo,heo,peo,$g,Nte,_eo,ueo,hR,beo,veo,Feo,In,qte,Teo,Meo,pR,Eeo,Ceo,_R,weo,Aeo,yeo,Nn,jte,Leo,xeo,uR,$eo,keo,bR,Seo,Reo,Peo,qn,Dte,Beo,Ieo,vR,Neo,qeo,FR,jeo,Deo,Geo,kg,Gte,Oeo,Veo,TR,Xeo,zeo,Weo,Sg,Ote,Qeo,Heo,MR,Ueo,Jeo,Yeo,jn,Vte,Keo,Zeo,ER,eoo,ooo,CR,roo,too,aoo,Rg,Xte,noo,soo,wR,loo,ioo,doo,Dn,zte,coo,foo,AR,moo,goo,yR,hoo,poo,_oo,Gn,Wte,uoo,boo,LR,voo,Foo,xR,Too,Moo,Eoo,On,Qte,Coo,woo,$R,Aoo,yoo,kR,Loo,xoo,$oo,Pg,Hte,koo,Soo,SR,Roo,Poo,Boo,Vn,Ute,Ioo,Noo,RR,qoo,joo,PR,Doo,Goo,Ooo,Xn,Jte,Voo,Xoo,BR,zoo,Woo,IR,Qoo,Hoo,Uoo,zn,Yte,Joo,Yoo,NR,Koo,Zoo,qR,ero,oro,rro,Wn,Kte,tro,aro,jR,nro,sro,DR,lro,iro,dro,Qn,Zte,cro,fro,GR,mro,gro,OR,hro,pro,_ro,Hn,eae,uro,bro,VR,vro,Fro,XR,Tro,Mro,Ero,Bg,oae,Cro,wro,zR,Aro,yro,Lro,Un,rae,xro,$ro,WR,kro,Sro,QR,Rro,Pro,Bro,Ig,tae,Iro,Nro,HR,qro,jro,Dro,Jn,aae,Gro,Oro,UR,Vro,Xro,JR,zro,Wro,Qro,Yn,nae,Hro,Uro,YR,Jro,Yro,KR,Kro,Zro,eto,Kn,sae,oto,rto,ZR,tto,ato,eP,nto,sto,lto,Ng,lae,ito,dto,oP,cto,fto,mto,Zn,iae,gto,hto,rP,pto,_to,tP,uto,bto,vto,es,dae,Fto,Tto,aP,Mto,Eto,nP,Cto,wto,Ato,qg,cae,yto,Lto,sP,xto,$to,kto,os,fae,Sto,Rto,lP,Pto,Bto,iP,Ito,Nto,qto,rs,mae,jto,Dto,dP,Gto,Oto,cP,Vto,Xto,zto,ts,gae,Wto,Qto,fP,Hto,Uto,mP,Jto,Yto,Kto,as,hae,Zto,eao,gP,oao,rao,hP,tao,aao,nao,ns,pae,sao,lao,pP,iao,dao,_P,cao,fao,mao,ss,_ae,gao,hao,uP,pao,_ao,bP,uao,bao,vao,ls,uae,Fao,Tao,vP,Mao,Eao,FP,Cao,wao,Aao,jg,bae,yao,Lao,TP,xao,$ao,kao,is,vae,Sao,Rao,MP,Pao,Bao,EP,Iao,Nao,qao,Dg,Fae,jao,Dao,CP,Gao,Oao,Vao,Gg,Tae,Xao,zao,wP,Wao,Qao,Hao,ds,Mae,Uao,Jao,AP,Yao,Kao,yP,Zao,eno,ono,cs,Eae,rno,tno,LP,ano,nno,xP,sno,lno,ino,fs,Cae,dno,cno,$P,fno,mno,kP,gno,hno,pno,Og,wae,_no,uno,SP,bno,vno,Fno,ms,Aae,Tno,Mno,RP,Eno,Cno,PP,wno,Ano,yno,gs,yae,Lno,xno,BP,$no,kno,IP,Sno,Rno,Pno,hs,Lae,Bno,Ino,NP,Nno,qno,qP,jno,Dno,Gno,ps,xae,Ono,Vno,jP,Xno,zno,DP,Wno,Qno,Hno,_s,$ae,Uno,Jno,GP,Yno,Kno,OP,Zno,eso,oso,Vg,kae,rso,tso,VP,aso,nso,sso,us,Sae,lso,iso,XP,dso,cso,zP,fso,mso,gso,Xg,Rae,hso,pso,WP,_so,uso,bso,zg,Pae,vso,Fso,QP,Tso,Mso,Eso,Wg,Bae,Cso,wso,HP,Aso,yso,Lso,Qg,Iae,xso,$so,UP,kso,Sso,Rso,bs,Nae,Pso,Bso,JP,Iso,Nso,YP,qso,jso,Dso,Hg,qae,Gso,Oso,KP,Vso,Xso,zso,vs,jae,Wso,Qso,ZP,Hso,Uso,eB,Jso,Yso,Kso,Fs,Dae,Zso,elo,oB,olo,rlo,rB,tlo,alo,nlo,Ts,Gae,slo,llo,tB,ilo,dlo,aB,clo,flo,mlo,Ms,Oae,glo,hlo,nB,plo,_lo,sB,ulo,blo,vlo,Es,Vae,Flo,Tlo,lB,Mlo,Elo,iB,Clo,wlo,Alo,Cs,Xae,ylo,Llo,dB,xlo,$lo,cB,klo,Slo,Rlo,Ug,zae,Plo,Blo,fB,Ilo,Nlo,qlo,Jg,Wae,jlo,Dlo,mB,Glo,Olo,Vlo,ws,Qae,Xlo,zlo,gB,Wlo,Qlo,hB,Hlo,Ulo,Jlo,As,Hae,Ylo,Klo,pB,Zlo,eio,_B,oio,rio,tio,ys,Uae,aio,nio,uB,sio,lio,bB,iio,dio,cio,Yg,Jae,fio,mio,vB,gio,hio,pio,Kg,Yae,_io,uio,FB,bio,vio,Fio,Zg,Kae,Tio,Mio,TB,Eio,Cio,wio,Ls,Zae,Aio,yio,MB,Lio,xio,EB,$io,kio,Sio,eh,ene,Rio,Pio,CB,Bio,Iio,Nio,oh,one,qio,jio,wB,Dio,Gio,Oio,rh,rne,Vio,Xio,AB,zio,Wio,Qio,xs,tne,Hio,Uio,yB,Jio,Yio,LB,Kio,Zio,edo,th,ane,odo,rdo,xB,tdo,ado,ndo,ah,nne,sdo,ldo,$B,ido,ddo,cdo,$s,sne,fdo,mdo,kB,gdo,hdo,SB,pdo,_do,udo,ks,lne,bdo,vdo,RB,Fdo,Tdo,PB,Mdo,Edo,Cdo,Ss,ine,wdo,Ado,BB,ydo,Ldo,IB,xdo,$do,kdo,Rs,dne,Sdo,Rdo,NB,Pdo,Bdo,qB,Ido,Ndo,qdo,nh,jdo,sh,OA,Ddo,cne,Gdo,pqe,Mi,lh,fne,VA,Odo,mne,Vdo,_qe,Ao,XA,Xdo,zA,zdo,jB,Wdo,Qdo,Hdo,WA,Udo,gne,Jdo,Ydo,Kdo,He,QA,Zdo,hne,eco,oco,ya,rco,pne,tco,aco,_ne,nco,sco,une,lco,ico,dco,Y,ih,bne,cco,fco,DB,mco,gco,hco,dh,vne,pco,_co,GB,uco,bco,vco,ch,Fne,Fco,Tco,OB,Mco,Eco,Cco,fh,Tne,wco,Aco,VB,yco,Lco,xco,mh,Mne,$co,kco,XB,Sco,Rco,Pco,gh,Ene,Bco,Ico,zB,Nco,qco,jco,hh,Cne,Dco,Gco,WB,Oco,Vco,Xco,ph,wne,zco,Wco,QB,Qco,Hco,Uco,_h,Ane,Jco,Yco,HB,Kco,Zco,efo,uh,yne,ofo,rfo,UB,tfo,afo,nfo,bh,Lne,sfo,lfo,JB,ifo,dfo,cfo,vh,xne,ffo,mfo,YB,gfo,hfo,pfo,Fh,$ne,_fo,ufo,KB,bfo,vfo,Ffo,Th,kne,Tfo,Mfo,ZB,Efo,Cfo,wfo,Mh,Sne,Afo,yfo,eI,Lfo,xfo,$fo,Eh,Rne,kfo,Sfo,oI,Rfo,Pfo,Bfo,Ch,Pne,Ifo,Nfo,rI,qfo,jfo,Dfo,wh,Bne,Gfo,Ofo,tI,Vfo,Xfo,zfo,Ah,Ine,Wfo,Qfo,aI,Hfo,Ufo,Jfo,yh,Nne,Yfo,Kfo,nI,Zfo,emo,omo,Lh,qne,rmo,tmo,sI,amo,nmo,smo,xh,jne,lmo,imo,lI,dmo,cmo,fmo,$h,Dne,mmo,gmo,iI,hmo,pmo,_mo,kh,Gne,umo,bmo,dI,vmo,Fmo,Tmo,Sh,One,Mmo,Emo,cI,Cmo,wmo,Amo,Rh,Vne,ymo,Lmo,fI,xmo,$mo,kmo,Ph,Xne,Smo,Rmo,mI,Pmo,Bmo,Imo,Bh,zne,Nmo,qmo,gI,jmo,Dmo,Gmo,Ih,Wne,Omo,Vmo,hI,Xmo,zmo,Wmo,Nh,Qmo,qh,Hmo,jh,HA,Umo,Qne,Jmo,uqe,Ei,Dh,Hne,UA,Ymo,Une,Kmo,bqe,yo,JA,Zmo,YA,ego,pI,ogo,rgo,tgo,KA,ago,Jne,ngo,sgo,lgo,Ue,ZA,igo,Yne,dgo,cgo,Ci,fgo,Kne,mgo,ggo,Zne,hgo,pgo,_go,he,Gh,ese,ugo,bgo,_I,vgo,Fgo,Tgo,Oh,ose,Mgo,Ego,rse,Cgo,wgo,Ago,Vh,tse,ygo,Lgo,uI,xgo,$go,kgo,Xh,ase,Sgo,Rgo,bI,Pgo,Bgo,Igo,zh,nse,Ngo,qgo,vI,jgo,Dgo,Ggo,Wh,sse,Ogo,Vgo,FI,Xgo,zgo,Wgo,Qh,lse,Qgo,Hgo,TI,Ugo,Jgo,Ygo,Hh,ise,Kgo,Zgo,MI,eho,oho,rho,Uh,dse,tho,aho,EI,nho,sho,lho,Jh,cse,iho,dho,CI,cho,fho,mho,Yh,fse,gho,hho,wI,pho,_ho,uho,Kh,mse,bho,vho,AI,Fho,Tho,Mho,Zh,gse,Eho,Cho,yI,who,Aho,yho,ep,hse,Lho,xho,LI,$ho,kho,Sho,op,pse,Rho,Pho,xI,Bho,Iho,Nho,rp,_se,qho,jho,$I,Dho,Gho,Oho,tp,use,Vho,Xho,kI,zho,Who,Qho,ap,Hho,np,Uho,sp,ey,Jho,bse,Yho,vqe,wi,lp,vse,oy,Kho,Fse,Zho,Fqe,Lo,ry,epo,Ai,opo,SI,rpo,tpo,RI,apo,npo,spo,ty,lpo,Tse,ipo,dpo,cpo,tt,ay,fpo,Mse,mpo,gpo,yi,hpo,Ese,ppo,_po,PI,upo,bpo,vpo,ip,Fpo,Je,ny,Tpo,Cse,Mpo,Epo,La,Cpo,wse,wpo,Apo,Ase,ypo,Lpo,yse,xpo,$po,kpo,x,dp,Lse,Spo,Rpo,BI,Ppo,Bpo,Ipo,cp,xse,Npo,qpo,II,jpo,Dpo,Gpo,fp,$se,Opo,Vpo,NI,Xpo,zpo,Wpo,mp,kse,Qpo,Hpo,qI,Upo,Jpo,Ypo,gp,Sse,Kpo,Zpo,jI,e_o,o_o,r_o,hp,Rse,t_o,a_o,DI,n_o,s_o,l_o,pp,Pse,i_o,d_o,GI,c_o,f_o,m_o,_p,Bse,g_o,h_o,OI,p_o,__o,u_o,up,Ise,b_o,v_o,VI,F_o,T_o,M_o,bp,Nse,E_o,C_o,XI,w_o,A_o,y_o,vp,qse,L_o,x_o,zI,$_o,k_o,S_o,Fp,jse,R_o,P_o,WI,B_o,I_o,N_o,Tp,Dse,q_o,j_o,QI,D_o,G_o,O_o,Mp,Gse,V_o,X_o,HI,z_o,W_o,Q_o,Ep,Ose,H_o,U_o,UI,J_o,Y_o,K_o,Cp,Vse,Z_o,euo,JI,ouo,ruo,tuo,wp,Xse,auo,nuo,YI,suo,luo,iuo,Ap,zse,duo,cuo,KI,fuo,muo,guo,yp,Wse,huo,puo,ZI,_uo,uuo,buo,Lp,Qse,vuo,Fuo,eN,Tuo,Muo,Euo,xp,Hse,Cuo,wuo,oN,Auo,yuo,Luo,$p,Use,xuo,$uo,rN,kuo,Suo,Ruo,kp,Jse,Puo,Buo,tN,Iuo,Nuo,quo,Sp,Yse,juo,Duo,aN,Guo,Ouo,Vuo,Rp,Kse,Xuo,zuo,nN,Wuo,Quo,Huo,Pp,Zse,Uuo,Juo,sN,Yuo,Kuo,Zuo,Bp,ele,e2o,o2o,lN,r2o,t2o,a2o,Ip,ole,n2o,s2o,iN,l2o,i2o,d2o,Np,rle,c2o,f2o,dN,m2o,g2o,h2o,qp,tle,p2o,_2o,cN,u2o,b2o,v2o,jp,ale,F2o,T2o,fN,M2o,E2o,C2o,Dp,nle,w2o,A2o,mN,y2o,L2o,x2o,Gp,sle,$2o,k2o,gN,S2o,R2o,P2o,Ps,lle,B2o,I2o,hN,N2o,q2o,pN,j2o,D2o,G2o,Op,ile,O2o,V2o,_N,X2o,z2o,W2o,Vp,dle,Q2o,H2o,uN,U2o,J2o,Y2o,Xp,cle,K2o,Z2o,bN,e1o,o1o,r1o,zp,fle,t1o,a1o,vN,n1o,s1o,l1o,Wp,mle,i1o,d1o,FN,c1o,f1o,m1o,Qp,gle,g1o,h1o,TN,p1o,_1o,u1o,Hp,hle,b1o,v1o,MN,F1o,T1o,M1o,Up,ple,E1o,C1o,EN,w1o,A1o,y1o,Jp,_le,L1o,x1o,CN,$1o,k1o,S1o,Yp,ule,R1o,P1o,wN,B1o,I1o,N1o,Kp,ble,q1o,j1o,AN,D1o,G1o,O1o,Zp,vle,V1o,X1o,yN,z1o,W1o,Q1o,e_,Fle,H1o,U1o,LN,J1o,Y1o,K1o,o_,Tle,Z1o,ebo,xN,obo,rbo,tbo,r_,Mle,abo,nbo,$N,sbo,lbo,ibo,t_,Ele,dbo,cbo,kN,fbo,mbo,gbo,a_,Cle,hbo,pbo,SN,_bo,ubo,bbo,n_,wle,vbo,Fbo,RN,Tbo,Mbo,Ebo,s_,Ale,Cbo,wbo,PN,Abo,ybo,Lbo,l_,yle,xbo,$bo,BN,kbo,Sbo,Rbo,i_,Lle,Pbo,Bbo,IN,Ibo,Nbo,qbo,d_,xle,jbo,Dbo,NN,Gbo,Obo,Vbo,c_,$le,Xbo,zbo,qN,Wbo,Qbo,Hbo,f_,kle,Ubo,Jbo,jN,Ybo,Kbo,Zbo,m_,Sle,evo,ovo,DN,rvo,tvo,avo,g_,Rle,nvo,svo,GN,lvo,ivo,dvo,h_,Ple,cvo,fvo,ON,mvo,gvo,hvo,p_,Ble,pvo,_vo,VN,uvo,bvo,vvo,__,Ile,Fvo,Tvo,XN,Mvo,Evo,Cvo,u_,Nle,wvo,Avo,zN,yvo,Lvo,xvo,b_,qle,$vo,kvo,WN,Svo,Rvo,Pvo,v_,jle,Bvo,Ivo,QN,Nvo,qvo,jvo,F_,Dle,Dvo,Gvo,HN,Ovo,Vvo,Xvo,T_,Gle,zvo,Wvo,UN,Qvo,Hvo,Uvo,M_,Ole,Jvo,Yvo,JN,Kvo,Zvo,e3o,E_,Vle,o3o,r3o,YN,t3o,a3o,n3o,C_,Xle,s3o,l3o,KN,i3o,d3o,c3o,w_,zle,f3o,m3o,ZN,g3o,h3o,p3o,A_,Wle,_3o,u3o,eq,b3o,v3o,F3o,y_,Qle,T3o,M3o,oq,E3o,C3o,w3o,L_,Hle,A3o,y3o,rq,L3o,x3o,$3o,x_,Ule,k3o,S3o,tq,R3o,P3o,B3o,$_,Jle,I3o,N3o,aq,q3o,j3o,D3o,k_,Yle,G3o,O3o,nq,V3o,X3o,z3o,S_,Kle,W3o,Q3o,sq,H3o,U3o,J3o,R_,Zle,Y3o,K3o,lq,Z3o,e0o,o0o,P_,eie,r0o,t0o,iq,a0o,n0o,s0o,B_,oie,l0o,i0o,dq,d0o,c0o,f0o,I_,rie,m0o,g0o,cq,h0o,p0o,_0o,N_,tie,u0o,b0o,fq,v0o,F0o,T0o,q_,aie,M0o,E0o,mq,C0o,w0o,A0o,j_,nie,y0o,L0o,gq,x0o,$0o,k0o,D_,sie,S0o,R0o,hq,P0o,B0o,I0o,G_,lie,N0o,q0o,pq,j0o,D0o,G0o,O_,iie,O0o,V0o,_q,X0o,z0o,W0o,V_,die,Q0o,H0o,uq,U0o,J0o,Y0o,X_,cie,K0o,Z0o,bq,eFo,oFo,rFo,z_,fie,tFo,aFo,vq,nFo,sFo,lFo,W_,mie,iFo,dFo,Fq,cFo,fFo,mFo,Q_,gie,gFo,hFo,Tq,pFo,_Fo,uFo,H_,hie,bFo,vFo,Mq,FFo,TFo,MFo,U_,pie,EFo,CFo,Eq,wFo,AFo,yFo,J_,_ie,LFo,xFo,Cq,$Fo,kFo,SFo,Y_,uie,RFo,PFo,wq,BFo,IFo,NFo,K_,bie,qFo,jFo,Aq,DFo,GFo,OFo,Z_,vie,VFo,XFo,yq,zFo,WFo,QFo,eu,Fie,HFo,UFo,Lq,JFo,YFo,KFo,ou,Tie,ZFo,eTo,xq,oTo,rTo,tTo,ru,Mie,aTo,nTo,$q,sTo,lTo,iTo,tu,dTo,Eie,cTo,fTo,Cie,mTo,gTo,au,Tqe,Li,nu,wie,sy,hTo,Aie,pTo,Mqe,xo,ly,_To,xi,uTo,kq,bTo,vTo,Sq,FTo,TTo,MTo,iy,ETo,yie,CTo,wTo,ATo,at,dy,yTo,Lie,LTo,xTo,$i,$To,xie,kTo,STo,Rq,RTo,PTo,BTo,su,ITo,Ye,cy,NTo,$ie,qTo,jTo,xa,DTo,kie,GTo,OTo,Sie,VTo,XTo,Rie,zTo,WTo,QTo,G,lu,Pie,HTo,UTo,Pq,JTo,YTo,KTo,iu,Bie,ZTo,e7o,Bq,o7o,r7o,t7o,du,Iie,a7o,n7o,Iq,s7o,l7o,i7o,cu,Nie,d7o,c7o,Nq,f7o,m7o,g7o,fu,qie,h7o,p7o,qq,_7o,u7o,b7o,mu,jie,v7o,F7o,jq,T7o,M7o,E7o,gu,Die,C7o,w7o,Dq,A7o,y7o,L7o,hu,Gie,x7o,$7o,Gq,k7o,S7o,R7o,pu,Oie,P7o,B7o,Oq,I7o,N7o,q7o,_u,Vie,j7o,D7o,Vq,G7o,O7o,V7o,uu,Xie,X7o,z7o,Xq,W7o,Q7o,H7o,bu,zie,U7o,J7o,zq,Y7o,K7o,Z7o,vu,Wie,eMo,oMo,Wq,rMo,tMo,aMo,Fu,Qie,nMo,sMo,Qq,lMo,iMo,dMo,Tu,Hie,cMo,fMo,Hq,mMo,gMo,hMo,Mu,Uie,pMo,_Mo,Uq,uMo,bMo,vMo,Eu,Jie,FMo,TMo,Jq,MMo,EMo,CMo,Cu,Yie,wMo,AMo,Yq,yMo,LMo,xMo,wu,Kie,$Mo,kMo,Kq,SMo,RMo,PMo,Au,Zie,BMo,IMo,Zq,NMo,qMo,jMo,yu,ede,DMo,GMo,ej,OMo,VMo,XMo,Lu,ode,zMo,WMo,oj,QMo,HMo,UMo,xu,rde,JMo,YMo,rj,KMo,ZMo,e4o,$u,tde,o4o,r4o,tj,t4o,a4o,n4o,ku,ade,s4o,l4o,aj,i4o,d4o,c4o,Su,nde,f4o,m4o,nj,g4o,h4o,p4o,Ru,sde,_4o,u4o,sj,b4o,v4o,F4o,Pu,lde,T4o,M4o,lj,E4o,C4o,w4o,Bu,ide,A4o,y4o,ij,L4o,x4o,$4o,Iu,dde,k4o,S4o,dj,R4o,P4o,B4o,Nu,cde,I4o,N4o,cj,q4o,j4o,D4o,qu,fde,G4o,O4o,fj,V4o,X4o,z4o,ju,mde,W4o,Q4o,mj,H4o,U4o,J4o,Du,gde,Y4o,K4o,gj,Z4o,eEo,oEo,Gu,hde,rEo,tEo,hj,aEo,nEo,sEo,Ou,pde,lEo,iEo,pj,dEo,cEo,fEo,Vu,_de,mEo,gEo,_j,hEo,pEo,_Eo,Xu,ude,uEo,bEo,uj,vEo,FEo,TEo,zu,bde,MEo,EEo,bj,CEo,wEo,AEo,Wu,vde,yEo,LEo,vj,xEo,$Eo,kEo,Qu,Fde,SEo,REo,Fj,PEo,BEo,IEo,Hu,Tde,NEo,qEo,Tj,jEo,DEo,GEo,Uu,OEo,Mde,VEo,XEo,Ede,zEo,WEo,Ju,Eqe,ki,Yu,Cde,fy,QEo,wde,HEo,Cqe,$o,my,UEo,Si,JEo,Mj,YEo,KEo,Ej,ZEo,eCo,oCo,gy,rCo,Ade,tCo,aCo,nCo,nt,hy,sCo,yde,lCo,iCo,Ri,dCo,Lde,cCo,fCo,Cj,mCo,gCo,hCo,Ku,pCo,Ke,py,_Co,xde,uCo,bCo,$a,vCo,$de,FCo,TCo,kde,MCo,ECo,Sde,CCo,wCo,ACo,z,Zu,Rde,yCo,LCo,wj,xCo,$Co,kCo,e2,Pde,SCo,RCo,Aj,PCo,BCo,ICo,o2,Bde,NCo,qCo,yj,jCo,DCo,GCo,r2,Ide,OCo,VCo,Lj,XCo,zCo,WCo,t2,Nde,QCo,HCo,xj,UCo,JCo,YCo,a2,qde,KCo,ZCo,$j,e5o,o5o,r5o,n2,jde,t5o,a5o,kj,n5o,s5o,l5o,s2,Dde,i5o,d5o,Sj,c5o,f5o,m5o,l2,Gde,g5o,h5o,Rj,p5o,_5o,u5o,i2,Ode,b5o,v5o,Pj,F5o,T5o,M5o,d2,Vde,E5o,C5o,Bj,w5o,A5o,y5o,c2,Xde,L5o,x5o,Ij,$5o,k5o,S5o,f2,zde,R5o,P5o,Nj,B5o,I5o,N5o,m2,Wde,q5o,j5o,qj,D5o,G5o,O5o,g2,Qde,V5o,X5o,jj,z5o,W5o,Q5o,h2,Hde,H5o,U5o,Dj,J5o,Y5o,K5o,p2,Ude,Z5o,ewo,Gj,owo,rwo,two,_2,Jde,awo,nwo,Oj,swo,lwo,iwo,u2,Yde,dwo,cwo,Vj,fwo,mwo,gwo,b2,Kde,hwo,pwo,Xj,_wo,uwo,bwo,v2,Zde,vwo,Fwo,zj,Two,Mwo,Ewo,F2,ece,Cwo,wwo,Wj,Awo,ywo,Lwo,T2,oce,xwo,$wo,Qj,kwo,Swo,Rwo,M2,rce,Pwo,Bwo,Hj,Iwo,Nwo,qwo,E2,tce,jwo,Dwo,Uj,Gwo,Owo,Vwo,C2,ace,Xwo,zwo,Jj,Wwo,Qwo,Hwo,w2,nce,Uwo,Jwo,Yj,Ywo,Kwo,Zwo,A2,sce,e6o,o6o,Kj,r6o,t6o,a6o,y2,lce,n6o,s6o,Zj,l6o,i6o,d6o,L2,ice,c6o,f6o,eD,m6o,g6o,h6o,x2,dce,p6o,_6o,oD,u6o,b6o,v6o,$2,cce,F6o,T6o,rD,M6o,E6o,C6o,k2,fce,w6o,A6o,tD,y6o,L6o,x6o,S2,mce,$6o,k6o,aD,S6o,R6o,P6o,R2,gce,B6o,I6o,nD,N6o,q6o,j6o,P2,hce,D6o,G6o,sD,O6o,V6o,X6o,B2,pce,z6o,W6o,lD,Q6o,H6o,U6o,I2,J6o,_ce,Y6o,K6o,uce,Z6o,eAo,N2,wqe,Pi,q2,bce,_y,oAo,vce,rAo,Aqe,ko,uy,tAo,Bi,aAo,iD,nAo,sAo,dD,lAo,iAo,dAo,by,cAo,Fce,fAo,mAo,gAo,st,vy,hAo,Tce,pAo,_Ao,Ii,uAo,Mce,bAo,vAo,cD,FAo,TAo,MAo,j2,EAo,Ze,Fy,CAo,Ece,wAo,AAo,ka,yAo,Cce,LAo,xAo,wce,$Ao,kAo,Ace,SAo,RAo,PAo,Q,D2,yce,BAo,IAo,fD,NAo,qAo,jAo,G2,Lce,DAo,GAo,mD,OAo,VAo,XAo,O2,xce,zAo,WAo,gD,QAo,HAo,UAo,V2,$ce,JAo,YAo,hD,KAo,ZAo,eyo,X2,kce,oyo,ryo,pD,tyo,ayo,nyo,z2,Sce,syo,lyo,_D,iyo,dyo,cyo,W2,Rce,fyo,myo,uD,gyo,hyo,pyo,Q2,Pce,_yo,uyo,bD,byo,vyo,Fyo,H2,Bce,Tyo,Myo,vD,Eyo,Cyo,wyo,U2,Ice,Ayo,yyo,FD,Lyo,xyo,$yo,J2,Nce,kyo,Syo,TD,Ryo,Pyo,Byo,Y2,qce,Iyo,Nyo,MD,qyo,jyo,Dyo,K2,jce,Gyo,Oyo,ED,Vyo,Xyo,zyo,Z2,Dce,Wyo,Qyo,CD,Hyo,Uyo,Jyo,e1,Gce,Yyo,Kyo,wD,Zyo,eLo,oLo,o1,Oce,rLo,tLo,AD,aLo,nLo,sLo,r1,Vce,lLo,iLo,yD,dLo,cLo,fLo,t1,Xce,mLo,gLo,LD,hLo,pLo,_Lo,a1,zce,uLo,bLo,xD,vLo,FLo,TLo,n1,Wce,MLo,ELo,$D,CLo,wLo,ALo,s1,Qce,yLo,LLo,kD,xLo,$Lo,kLo,l1,Hce,SLo,RLo,SD,PLo,BLo,ILo,i1,Uce,NLo,qLo,RD,jLo,DLo,GLo,d1,Jce,OLo,VLo,PD,XLo,zLo,WLo,c1,Yce,QLo,HLo,BD,ULo,JLo,YLo,f1,Kce,KLo,ZLo,ID,e8o,o8o,r8o,m1,Zce,t8o,a8o,ND,n8o,s8o,l8o,g1,efe,i8o,d8o,qD,c8o,f8o,m8o,h1,ofe,g8o,h8o,jD,p8o,_8o,u8o,p1,rfe,b8o,v8o,DD,F8o,T8o,M8o,_1,tfe,E8o,C8o,afe,w8o,A8o,y8o,u1,nfe,L8o,x8o,GD,$8o,k8o,S8o,b1,sfe,R8o,P8o,OD,B8o,I8o,N8o,v1,lfe,q8o,j8o,VD,D8o,G8o,O8o,F1,ife,V8o,X8o,XD,z8o,W8o,Q8o,T1,H8o,dfe,U8o,J8o,cfe,Y8o,K8o,M1,yqe,Ni,E1,ffe,Ty,Z8o,mfe,e9o,Lqe,So,My,o9o,qi,r9o,zD,t9o,a9o,WD,n9o,s9o,l9o,Ey,i9o,gfe,d9o,c9o,f9o,lt,Cy,m9o,hfe,g9o,h9o,ji,p9o,pfe,_9o,u9o,QD,b9o,v9o,F9o,C1,T9o,eo,wy,M9o,_fe,E9o,C9o,Sa,w9o,ufe,A9o,y9o,bfe,L9o,x9o,vfe,$9o,k9o,S9o,_e,w1,Ffe,R9o,P9o,HD,B9o,I9o,N9o,A1,Tfe,q9o,j9o,UD,D9o,G9o,O9o,y1,Mfe,V9o,X9o,JD,z9o,W9o,Q9o,L1,Efe,H9o,U9o,YD,J9o,Y9o,K9o,x1,Cfe,Z9o,exo,KD,oxo,rxo,txo,$1,wfe,axo,nxo,ZD,sxo,lxo,ixo,k1,Afe,dxo,cxo,eG,fxo,mxo,gxo,S1,yfe,hxo,pxo,oG,_xo,uxo,bxo,R1,Lfe,vxo,Fxo,rG,Txo,Mxo,Exo,P1,xfe,Cxo,wxo,tG,Axo,yxo,Lxo,B1,$fe,xxo,$xo,aG,kxo,Sxo,Rxo,I1,kfe,Pxo,Bxo,nG,Ixo,Nxo,qxo,N1,Sfe,jxo,Dxo,sG,Gxo,Oxo,Vxo,q1,Rfe,Xxo,zxo,lG,Wxo,Qxo,Hxo,j1,Pfe,Uxo,Jxo,iG,Yxo,Kxo,Zxo,D1,Bfe,e$o,o$o,dG,r$o,t$o,a$o,G1,n$o,Ife,s$o,l$o,Nfe,i$o,d$o,O1,xqe,Di,V1,qfe,Ay,c$o,jfe,f$o,$qe,Ro,yy,m$o,Gi,g$o,cG,h$o,p$o,fG,_$o,u$o,b$o,Ly,v$o,Dfe,F$o,T$o,M$o,it,xy,E$o,Gfe,C$o,w$o,Oi,A$o,Ofe,y$o,L$o,mG,x$o,$$o,k$o,X1,S$o,oo,$y,R$o,Vfe,P$o,B$o,Ra,I$o,Xfe,N$o,q$o,zfe,j$o,D$o,Wfe,G$o,O$o,V$o,N,z1,Qfe,X$o,z$o,gG,W$o,Q$o,H$o,W1,Hfe,U$o,J$o,hG,Y$o,K$o,Z$o,Q1,Ufe,eko,oko,pG,rko,tko,ako,H1,Jfe,nko,sko,_G,lko,iko,dko,U1,Yfe,cko,fko,uG,mko,gko,hko,J1,Kfe,pko,_ko,bG,uko,bko,vko,Y1,Zfe,Fko,Tko,vG,Mko,Eko,Cko,K1,eme,wko,Ako,FG,yko,Lko,xko,Z1,ome,$ko,kko,TG,Sko,Rko,Pko,eb,rme,Bko,Iko,MG,Nko,qko,jko,ob,tme,Dko,Gko,EG,Oko,Vko,Xko,rb,ame,zko,Wko,CG,Qko,Hko,Uko,tb,nme,Jko,Yko,wG,Kko,Zko,eSo,ab,sme,oSo,rSo,AG,tSo,aSo,nSo,nb,lme,sSo,lSo,yG,iSo,dSo,cSo,sb,ime,fSo,mSo,LG,gSo,hSo,pSo,lb,dme,_So,uSo,xG,bSo,vSo,FSo,ib,cme,TSo,MSo,$G,ESo,CSo,wSo,db,fme,ASo,ySo,kG,LSo,xSo,$So,cb,mme,kSo,SSo,SG,RSo,PSo,BSo,fb,gme,ISo,NSo,RG,qSo,jSo,DSo,mb,hme,GSo,OSo,PG,VSo,XSo,zSo,gb,pme,WSo,QSo,BG,HSo,USo,JSo,hb,_me,YSo,KSo,IG,ZSo,eRo,oRo,pb,ume,rRo,tRo,NG,aRo,nRo,sRo,_b,bme,lRo,iRo,qG,dRo,cRo,fRo,ub,vme,mRo,gRo,jG,hRo,pRo,_Ro,bb,Fme,uRo,bRo,DG,vRo,FRo,TRo,vb,Tme,MRo,ERo,GG,CRo,wRo,ARo,Fb,Mme,yRo,LRo,OG,xRo,$Ro,kRo,Tb,Eme,SRo,RRo,VG,PRo,BRo,IRo,Mb,Cme,NRo,qRo,XG,jRo,DRo,GRo,Eb,wme,ORo,VRo,zG,XRo,zRo,WRo,Cb,Ame,QRo,HRo,WG,URo,JRo,YRo,wb,yme,KRo,ZRo,QG,ePo,oPo,rPo,Ab,Lme,tPo,aPo,HG,nPo,sPo,lPo,yb,xme,iPo,dPo,UG,cPo,fPo,mPo,Lb,$me,gPo,hPo,JG,pPo,_Po,uPo,xb,kme,bPo,vPo,YG,FPo,TPo,MPo,$b,Sme,EPo,CPo,KG,wPo,APo,yPo,kb,Rme,LPo,xPo,ZG,$Po,kPo,SPo,Sb,Pme,RPo,PPo,eO,BPo,IPo,NPo,Rb,Bme,qPo,jPo,oO,DPo,GPo,OPo,Pb,Ime,VPo,XPo,rO,zPo,WPo,QPo,Bb,Nme,HPo,UPo,tO,JPo,YPo,KPo,Ib,qme,ZPo,eBo,aO,oBo,rBo,tBo,Nb,jme,aBo,nBo,nO,sBo,lBo,iBo,qb,dBo,Dme,cBo,fBo,Gme,mBo,gBo,jb,kqe,Vi,Db,Ome,ky,hBo,Vme,pBo,Sqe,Po,Sy,_Bo,Xi,uBo,sO,bBo,vBo,lO,FBo,TBo,MBo,Ry,EBo,Xme,CBo,wBo,ABo,dt,Py,yBo,zme,LBo,xBo,zi,$Bo,Wme,kBo,SBo,iO,RBo,PBo,BBo,Gb,IBo,ro,By,NBo,Qme,qBo,jBo,Pa,DBo,Hme,GBo,OBo,Ume,VBo,XBo,Jme,zBo,WBo,QBo,K,Ob,Yme,HBo,UBo,dO,JBo,YBo,KBo,Vb,Kme,ZBo,eIo,cO,oIo,rIo,tIo,Xb,Zme,aIo,nIo,fO,sIo,lIo,iIo,zb,ege,dIo,cIo,mO,fIo,mIo,gIo,Wb,oge,hIo,pIo,gO,_Io,uIo,bIo,Qb,rge,vIo,FIo,hO,TIo,MIo,EIo,Hb,tge,CIo,wIo,pO,AIo,yIo,LIo,Ub,age,xIo,$Io,_O,kIo,SIo,RIo,Jb,nge,PIo,BIo,uO,IIo,NIo,qIo,Yb,sge,jIo,DIo,bO,GIo,OIo,VIo,Kb,lge,XIo,zIo,vO,WIo,QIo,HIo,Zb,ige,UIo,JIo,FO,YIo,KIo,ZIo,ev,dge,eNo,oNo,TO,rNo,tNo,aNo,ov,cge,nNo,sNo,MO,lNo,iNo,dNo,rv,fge,cNo,fNo,EO,mNo,gNo,hNo,tv,mge,pNo,_No,CO,uNo,bNo,vNo,av,gge,FNo,TNo,wO,MNo,ENo,CNo,nv,hge,wNo,ANo,AO,yNo,LNo,xNo,sv,pge,$No,kNo,yO,SNo,RNo,PNo,lv,_ge,BNo,INo,LO,NNo,qNo,jNo,iv,uge,DNo,GNo,xO,ONo,VNo,XNo,dv,bge,zNo,WNo,$O,QNo,HNo,UNo,cv,vge,JNo,YNo,kO,KNo,ZNo,eqo,fv,Fge,oqo,rqo,SO,tqo,aqo,nqo,mv,Tge,sqo,lqo,RO,iqo,dqo,cqo,gv,Mge,fqo,mqo,PO,gqo,hqo,pqo,hv,Ege,_qo,uqo,BO,bqo,vqo,Fqo,pv,Cge,Tqo,Mqo,IO,Eqo,Cqo,wqo,_v,wge,Aqo,yqo,NO,Lqo,xqo,$qo,uv,kqo,Age,Sqo,Rqo,yge,Pqo,Bqo,bv,Rqe,Wi,vv,Lge,Iy,Iqo,xge,Nqo,Pqe,Bo,Ny,qqo,Qi,jqo,qO,Dqo,Gqo,jO,Oqo,Vqo,Xqo,qy,zqo,$ge,Wqo,Qqo,Hqo,ct,jy,Uqo,kge,Jqo,Yqo,Hi,Kqo,Sge,Zqo,ejo,DO,ojo,rjo,tjo,Fv,ajo,to,Dy,njo,Rge,sjo,ljo,Ba,ijo,Pge,djo,cjo,Bge,fjo,mjo,Ige,gjo,hjo,pjo,Yr,Tv,Nge,_jo,ujo,GO,bjo,vjo,Fjo,Mv,qge,Tjo,Mjo,OO,Ejo,Cjo,wjo,Ev,jge,Ajo,yjo,VO,Ljo,xjo,$jo,Cv,Dge,kjo,Sjo,XO,Rjo,Pjo,Bjo,wv,Gge,Ijo,Njo,zO,qjo,jjo,Djo,Av,Gjo,Oge,Ojo,Vjo,Vge,Xjo,zjo,yv,Bqe,Ui,Lv,Xge,Gy,Wjo,zge,Qjo,Iqe,Io,Oy,Hjo,Ji,Ujo,WO,Jjo,Yjo,QO,Kjo,Zjo,eDo,Vy,oDo,Wge,rDo,tDo,aDo,ft,Xy,nDo,Qge,sDo,lDo,Yi,iDo,Hge,dDo,cDo,HO,fDo,mDo,gDo,xv,hDo,ao,zy,pDo,Uge,_Do,uDo,Ia,bDo,Jge,vDo,FDo,Yge,TDo,MDo,Kge,EDo,CDo,wDo,H,$v,Zge,ADo,yDo,UO,LDo,xDo,$Do,kv,ehe,kDo,SDo,JO,RDo,PDo,BDo,Sv,ohe,IDo,NDo,YO,qDo,jDo,DDo,Rv,rhe,GDo,ODo,KO,VDo,XDo,zDo,Pv,the,WDo,QDo,ZO,HDo,UDo,JDo,Bv,ahe,YDo,KDo,eV,ZDo,eGo,oGo,Iv,nhe,rGo,tGo,oV,aGo,nGo,sGo,Nv,she,lGo,iGo,rV,dGo,cGo,fGo,qv,lhe,mGo,gGo,tV,hGo,pGo,_Go,jv,ihe,uGo,bGo,aV,vGo,FGo,TGo,Dv,dhe,MGo,EGo,nV,CGo,wGo,AGo,Gv,che,yGo,LGo,sV,xGo,$Go,kGo,Ov,fhe,SGo,RGo,lV,PGo,BGo,IGo,Vv,mhe,NGo,qGo,iV,jGo,DGo,GGo,Xv,ghe,OGo,VGo,dV,XGo,zGo,WGo,zv,hhe,QGo,HGo,cV,UGo,JGo,YGo,Wv,phe,KGo,ZGo,fV,eOo,oOo,rOo,Qv,_he,tOo,aOo,mV,nOo,sOo,lOo,Hv,uhe,iOo,dOo,gV,cOo,fOo,mOo,Uv,bhe,gOo,hOo,hV,pOo,_Oo,uOo,Jv,vhe,bOo,vOo,pV,FOo,TOo,MOo,Yv,Fhe,EOo,COo,_V,wOo,AOo,yOo,Kv,The,LOo,xOo,uV,$Oo,kOo,SOo,Zv,Mhe,ROo,POo,bV,BOo,IOo,NOo,e3,Ehe,qOo,jOo,vV,DOo,GOo,OOo,o3,Che,VOo,XOo,FV,zOo,WOo,QOo,r3,whe,HOo,UOo,TV,JOo,YOo,KOo,t3,Ahe,ZOo,eVo,MV,oVo,rVo,tVo,a3,yhe,aVo,nVo,EV,sVo,lVo,iVo,n3,Lhe,dVo,cVo,CV,fVo,mVo,gVo,s3,xhe,hVo,pVo,wV,_Vo,uVo,bVo,l3,$he,vVo,FVo,AV,TVo,MVo,EVo,i3,khe,CVo,wVo,yV,AVo,yVo,LVo,d3,She,xVo,$Vo,LV,kVo,SVo,RVo,c3,PVo,Rhe,BVo,IVo,Phe,NVo,qVo,f3,Nqe,Ki,m3,Bhe,Wy,jVo,Ihe,DVo,qqe,No,Qy,GVo,Zi,OVo,xV,VVo,XVo,$V,zVo,WVo,QVo,Hy,HVo,Nhe,UVo,JVo,YVo,mt,Uy,KVo,qhe,ZVo,eXo,ed,oXo,jhe,rXo,tXo,kV,aXo,nXo,sXo,g3,lXo,no,Jy,iXo,Dhe,dXo,cXo,Na,fXo,Ghe,mXo,gXo,Ohe,hXo,pXo,Vhe,_Xo,uXo,bXo,V,h3,Xhe,vXo,FXo,SV,TXo,MXo,EXo,p3,zhe,CXo,wXo,RV,AXo,yXo,LXo,_3,Whe,xXo,$Xo,PV,kXo,SXo,RXo,u3,Qhe,PXo,BXo,BV,IXo,NXo,qXo,b3,Hhe,jXo,DXo,IV,GXo,OXo,VXo,v3,Uhe,XXo,zXo,NV,WXo,QXo,HXo,F3,Jhe,UXo,JXo,qV,YXo,KXo,ZXo,T3,Yhe,ezo,ozo,jV,rzo,tzo,azo,M3,Khe,nzo,szo,DV,lzo,izo,dzo,E3,Zhe,czo,fzo,GV,mzo,gzo,hzo,C3,epe,pzo,_zo,OV,uzo,bzo,vzo,w3,ope,Fzo,Tzo,VV,Mzo,Ezo,Czo,A3,rpe,wzo,Azo,XV,yzo,Lzo,xzo,y3,tpe,$zo,kzo,zV,Szo,Rzo,Pzo,L3,ape,Bzo,Izo,WV,Nzo,qzo,jzo,x3,npe,Dzo,Gzo,QV,Ozo,Vzo,Xzo,$3,spe,zzo,Wzo,HV,Qzo,Hzo,Uzo,k3,lpe,Jzo,Yzo,UV,Kzo,Zzo,eWo,S3,ipe,oWo,rWo,JV,tWo,aWo,nWo,R3,dpe,sWo,lWo,YV,iWo,dWo,cWo,P3,cpe,fWo,mWo,KV,gWo,hWo,pWo,B3,fpe,_Wo,uWo,ZV,bWo,vWo,FWo,I3,mpe,TWo,MWo,eX,EWo,CWo,wWo,N3,gpe,AWo,yWo,oX,LWo,xWo,$Wo,q3,hpe,kWo,SWo,rX,RWo,PWo,BWo,j3,ppe,IWo,NWo,tX,qWo,jWo,DWo,D3,_pe,GWo,OWo,aX,VWo,XWo,zWo,G3,upe,WWo,QWo,nX,HWo,UWo,JWo,O3,bpe,YWo,KWo,sX,ZWo,eQo,oQo,V3,vpe,rQo,tQo,lX,aQo,nQo,sQo,X3,Fpe,lQo,iQo,iX,dQo,cQo,fQo,z3,Tpe,mQo,gQo,dX,hQo,pQo,_Qo,W3,Mpe,uQo,bQo,cX,vQo,FQo,TQo,Q3,Epe,MQo,EQo,fX,CQo,wQo,AQo,H3,Cpe,yQo,LQo,mX,xQo,$Qo,kQo,U3,wpe,SQo,RQo,gX,PQo,BQo,IQo,J3,Ape,NQo,qQo,hX,jQo,DQo,GQo,Y3,ype,OQo,VQo,pX,XQo,zQo,WQo,K3,Lpe,QQo,HQo,_X,UQo,JQo,YQo,Z3,xpe,KQo,ZQo,uX,eHo,oHo,rHo,e0,tHo,$pe,aHo,nHo,kpe,sHo,lHo,o0,jqe,od,r0,Spe,Yy,iHo,Rpe,dHo,Dqe,qo,Ky,cHo,rd,fHo,bX,mHo,gHo,vX,hHo,pHo,_Ho,Zy,uHo,Ppe,bHo,vHo,FHo,gt,eL,THo,Bpe,MHo,EHo,td,CHo,Ipe,wHo,AHo,FX,yHo,LHo,xHo,t0,$Ho,so,oL,kHo,Npe,SHo,RHo,qa,PHo,qpe,BHo,IHo,jpe,NHo,qHo,Dpe,jHo,DHo,GHo,Gpe,a0,Ope,OHo,VHo,TX,XHo,zHo,WHo,n0,QHo,Vpe,HHo,UHo,Xpe,JHo,YHo,s0,Gqe,ad,l0,zpe,rL,KHo,Wpe,ZHo,Oqe,jo,tL,eUo,nd,oUo,MX,rUo,tUo,EX,aUo,nUo,sUo,aL,lUo,Qpe,iUo,dUo,cUo,ht,nL,fUo,Hpe,mUo,gUo,sd,hUo,Upe,pUo,_Uo,CX,uUo,bUo,vUo,i0,FUo,lo,sL,TUo,Jpe,MUo,EUo,ja,CUo,Ype,wUo,AUo,Kpe,yUo,LUo,Zpe,xUo,$Uo,kUo,Fe,d0,e_e,SUo,RUo,wX,PUo,BUo,IUo,c0,o_e,NUo,qUo,AX,jUo,DUo,GUo,f0,r_e,OUo,VUo,yX,XUo,zUo,WUo,m0,t_e,QUo,HUo,LX,UUo,JUo,YUo,Bs,a_e,KUo,ZUo,xX,eJo,oJo,$X,rJo,tJo,aJo,g0,n_e,nJo,sJo,kX,lJo,iJo,dJo,pt,s_e,cJo,fJo,SX,mJo,gJo,RX,hJo,pJo,PX,_Jo,uJo,bJo,h0,l_e,vJo,FJo,BX,TJo,MJo,EJo,p0,i_e,CJo,wJo,IX,AJo,yJo,LJo,_0,d_e,xJo,$Jo,NX,kJo,SJo,RJo,u0,c_e,PJo,BJo,qX,IJo,NJo,qJo,b0,f_e,jJo,DJo,jX,GJo,OJo,VJo,v0,m_e,XJo,zJo,DX,WJo,QJo,HJo,F0,g_e,UJo,JJo,GX,YJo,KJo,ZJo,T0,eYo,h_e,oYo,rYo,p_e,tYo,aYo,M0,Vqe,ld,E0,__e,lL,nYo,u_e,sYo,Xqe,Do,iL,lYo,id,iYo,OX,dYo,cYo,VX,fYo,mYo,gYo,dL,hYo,b_e,pYo,_Yo,uYo,_t,cL,bYo,v_e,vYo,FYo,dd,TYo,F_e,MYo,EYo,XX,CYo,wYo,AYo,C0,yYo,io,fL,LYo,T_e,xYo,$Yo,Da,kYo,M_e,SYo,RYo,E_e,PYo,BYo,C_e,IYo,NYo,qYo,w_e,w0,A_e,jYo,DYo,zX,GYo,OYo,VYo,A0,XYo,y_e,zYo,WYo,L_e,QYo,HYo,y0,zqe,cd,L0,x_e,mL,UYo,$_e,JYo,Wqe,Go,gL,YYo,fd,KYo,WX,ZYo,eKo,QX,oKo,rKo,tKo,hL,aKo,k_e,nKo,sKo,lKo,ut,pL,iKo,S_e,dKo,cKo,md,fKo,R_e,mKo,gKo,HX,hKo,pKo,_Ko,x0,uKo,co,_L,bKo,P_e,vKo,FKo,Ga,TKo,B_e,MKo,EKo,I_e,CKo,wKo,N_e,AKo,yKo,LKo,ke,$0,q_e,xKo,$Ko,UX,kKo,SKo,RKo,k0,j_e,PKo,BKo,JX,IKo,NKo,qKo,S0,D_e,jKo,DKo,YX,GKo,OKo,VKo,R0,G_e,XKo,zKo,KX,WKo,QKo,HKo,P0,O_e,UKo,JKo,ZX,YKo,KKo,ZKo,B0,V_e,eZo,oZo,ez,rZo,tZo,aZo,I0,X_e,nZo,sZo,oz,lZo,iZo,dZo,N0,z_e,cZo,fZo,rz,mZo,gZo,hZo,q0,W_e,pZo,_Zo,tz,uZo,bZo,vZo,j0,FZo,Q_e,TZo,MZo,H_e,EZo,CZo,D0,Qqe,gd,G0,U_e,uL,wZo,J_e,AZo,Hqe,Oo,bL,yZo,hd,LZo,az,xZo,$Zo,nz,kZo,SZo,RZo,vL,PZo,Y_e,BZo,IZo,NZo,bt,FL,qZo,K_e,jZo,DZo,pd,GZo,Z_e,OZo,VZo,sz,XZo,zZo,WZo,O0,QZo,fo,TL,HZo,eue,UZo,JZo,Oa,YZo,oue,KZo,ZZo,rue,eer,oer,tue,rer,ter,aer,Kr,V0,aue,ner,ser,lz,ler,ier,der,X0,nue,cer,fer,iz,mer,ger,her,z0,sue,per,_er,dz,uer,ber,ver,W0,lue,Fer,Ter,cz,Mer,Eer,Cer,Q0,iue,wer,Aer,fz,yer,Ler,xer,H0,$er,due,ker,Ser,cue,Rer,Per,U0,Uqe,_d,J0,fue,ML,Ber,mue,Ier,Jqe,Vo,EL,Ner,ud,qer,mz,jer,Der,gz,Ger,Oer,Ver,CL,Xer,gue,zer,Wer,Qer,vt,wL,Her,hue,Uer,Jer,bd,Yer,pue,Ker,Zer,hz,eor,oor,ror,Y0,tor,mo,AL,aor,_ue,nor,sor,Va,lor,uue,ior,dor,bue,cor,mor,vue,gor,hor,por,Se,K0,Fue,_or,uor,pz,bor,vor,For,Z0,Tue,Tor,Mor,_z,Eor,Cor,wor,eF,Mue,Aor,yor,uz,Lor,xor,$or,oF,Eue,kor,Sor,bz,Ror,Por,Bor,rF,Cue,Ior,Nor,vz,qor,jor,Dor,tF,wue,Gor,Oor,Fz,Vor,Xor,zor,aF,Aue,Wor,Qor,Tz,Hor,Uor,Jor,nF,yue,Yor,Kor,Mz,Zor,err,orr,sF,Lue,rrr,trr,Ez,arr,nrr,srr,lF,lrr,xue,irr,drr,$ue,crr,frr,iF,Yqe,vd,dF,kue,yL,mrr,Sue,grr,Kqe,Xo,LL,hrr,Fd,prr,Cz,_rr,urr,wz,brr,vrr,Frr,xL,Trr,Rue,Mrr,Err,Crr,Ft,$L,wrr,Pue,Arr,yrr,Td,Lrr,Bue,xrr,$rr,Az,krr,Srr,Rrr,cF,Prr,go,kL,Brr,Iue,Irr,Nrr,Xa,qrr,Nue,jrr,Drr,que,Grr,Orr,jue,Vrr,Xrr,zrr,SL,fF,Due,Wrr,Qrr,yz,Hrr,Urr,Jrr,mF,Gue,Yrr,Krr,Lz,Zrr,etr,otr,gF,rtr,Oue,ttr,atr,Vue,ntr,str,hF,Zqe,Md,pF,Xue,RL,ltr,zue,itr,eje,zo,PL,dtr,Ed,ctr,xz,ftr,mtr,$z,gtr,htr,ptr,BL,_tr,Wue,utr,btr,vtr,Tt,IL,Ftr,Que,Ttr,Mtr,Cd,Etr,Hue,Ctr,wtr,kz,Atr,ytr,Ltr,_F,xtr,ho,NL,$tr,Uue,ktr,Str,za,Rtr,Jue,Ptr,Btr,Yue,Itr,Ntr,Kue,qtr,jtr,Dtr,Zr,uF,Zue,Gtr,Otr,Sz,Vtr,Xtr,ztr,bF,e2e,Wtr,Qtr,Rz,Htr,Utr,Jtr,vF,o2e,Ytr,Ktr,Pz,Ztr,ear,oar,FF,r2e,rar,tar,Bz,aar,nar,sar,TF,t2e,lar,iar,Iz,dar,car,far,MF,mar,a2e,gar,har,n2e,par,_ar,EF,oje,wd,CF,s2e,qL,uar,l2e,bar,rje,Wo,jL,Far,Ad,Tar,Nz,Mar,Ear,qz,Car,war,Aar,DL,yar,i2e,Lar,xar,$ar,Mt,GL,kar,d2e,Sar,Rar,yd,Par,c2e,Bar,Iar,jz,Nar,qar,jar,wF,Dar,po,OL,Gar,f2e,Oar,Var,Wa,Xar,m2e,zar,War,g2e,Qar,Har,h2e,Uar,Jar,Yar,Ld,AF,p2e,Kar,Zar,Dz,enr,onr,rnr,yF,_2e,tnr,anr,Gz,nnr,snr,lnr,LF,u2e,inr,dnr,Oz,cnr,fnr,mnr,xF,gnr,b2e,hnr,pnr,v2e,_nr,unr,$F,tje,xd,kF,F2e,VL,bnr,T2e,vnr,aje,Qo,XL,Fnr,$d,Tnr,Vz,Mnr,Enr,Xz,Cnr,wnr,Anr,zL,ynr,M2e,Lnr,xnr,$nr,Et,WL,knr,E2e,Snr,Rnr,kd,Pnr,C2e,Bnr,Inr,zz,Nnr,qnr,jnr,SF,Dnr,_o,QL,Gnr,w2e,Onr,Vnr,Qa,Xnr,A2e,znr,Wnr,y2e,Qnr,Hnr,L2e,Unr,Jnr,Ynr,HL,RF,x2e,Knr,Znr,Wz,esr,osr,rsr,PF,$2e,tsr,asr,Qz,nsr,ssr,lsr,BF,isr,k2e,dsr,csr,S2e,fsr,msr,IF,nje,Sd,NF,R2e,UL,gsr,P2e,hsr,sje,Ho,JL,psr,Rd,_sr,Hz,usr,bsr,Uz,vsr,Fsr,Tsr,YL,Msr,B2e,Esr,Csr,wsr,Ct,KL,Asr,I2e,ysr,Lsr,Pd,xsr,N2e,$sr,ksr,Jz,Ssr,Rsr,Psr,qF,Bsr,uo,ZL,Isr,q2e,Nsr,qsr,Ha,jsr,j2e,Dsr,Gsr,D2e,Osr,Vsr,G2e,Xsr,zsr,Wsr,O2e,jF,V2e,Qsr,Hsr,Yz,Usr,Jsr,Ysr,DF,Ksr,X2e,Zsr,elr,z2e,olr,rlr,GF,lje,Bd,OF,W2e,e8,tlr,Q2e,alr,ije,Uo,o8,nlr,Id,slr,Kz,llr,ilr,Zz,dlr,clr,flr,r8,mlr,H2e,glr,hlr,plr,wt,t8,_lr,U2e,ulr,blr,Nd,vlr,J2e,Flr,Tlr,eW,Mlr,Elr,Clr,VF,wlr,bo,a8,Alr,Y2e,ylr,Llr,Ua,xlr,K2e,$lr,klr,Z2e,Slr,Rlr,e1e,Plr,Blr,Ilr,Ja,XF,o1e,Nlr,qlr,oW,jlr,Dlr,Glr,zF,r1e,Olr,Vlr,rW,Xlr,zlr,Wlr,WF,t1e,Qlr,Hlr,tW,Ulr,Jlr,Ylr,QF,a1e,Klr,Zlr,aW,eir,oir,rir,HF,tir,n1e,air,nir,s1e,sir,lir,UF,dje,qd,JF,l1e,n8,iir,i1e,dir,cje,Jo,s8,cir,jd,fir,nW,mir,gir,sW,hir,pir,_ir,l8,uir,d1e,bir,vir,Fir,At,i8,Tir,c1e,Mir,Eir,Dd,Cir,f1e,wir,Air,lW,yir,Lir,xir,YF,$ir,vo,d8,kir,m1e,Sir,Rir,Ya,Pir,g1e,Bir,Iir,h1e,Nir,qir,p1e,jir,Dir,Gir,_1e,KF,u1e,Oir,Vir,iW,Xir,zir,Wir,ZF,Qir,b1e,Hir,Uir,v1e,Jir,Yir,eT,fje,Gd,oT,F1e,c8,Kir,T1e,Zir,mje,Yo,f8,edr,Od,odr,dW,rdr,tdr,cW,adr,ndr,sdr,m8,ldr,M1e,idr,ddr,cdr,yt,g8,fdr,E1e,mdr,gdr,Vd,hdr,C1e,pdr,_dr,fW,udr,bdr,vdr,rT,Fdr,wr,h8,Tdr,w1e,Mdr,Edr,Ka,Cdr,A1e,wdr,Adr,y1e,ydr,Ldr,L1e,xdr,$dr,kdr,q,tT,x1e,Sdr,Rdr,mW,Pdr,Bdr,Idr,aT,$1e,Ndr,qdr,gW,jdr,Ddr,Gdr,nT,k1e,Odr,Vdr,hW,Xdr,zdr,Wdr,sT,S1e,Qdr,Hdr,pW,Udr,Jdr,Ydr,lT,R1e,Kdr,Zdr,_W,ecr,ocr,rcr,iT,P1e,tcr,acr,uW,ncr,scr,lcr,dT,B1e,icr,dcr,bW,ccr,fcr,mcr,cT,I1e,gcr,hcr,vW,pcr,_cr,ucr,fT,N1e,bcr,vcr,FW,Fcr,Tcr,Mcr,mT,q1e,Ecr,Ccr,TW,wcr,Acr,ycr,gT,j1e,Lcr,xcr,MW,$cr,kcr,Scr,hT,D1e,Rcr,Pcr,EW,Bcr,Icr,Ncr,pT,G1e,qcr,jcr,CW,Dcr,Gcr,Ocr,_T,O1e,Vcr,Xcr,wW,zcr,Wcr,Qcr,uT,V1e,Hcr,Ucr,AW,Jcr,Ycr,Kcr,bT,X1e,Zcr,efr,yW,ofr,rfr,tfr,vT,z1e,afr,nfr,LW,sfr,lfr,ifr,Is,W1e,dfr,cfr,xW,ffr,mfr,$W,gfr,hfr,pfr,FT,Q1e,_fr,ufr,kW,bfr,vfr,Ffr,TT,H1e,Tfr,Mfr,SW,Efr,Cfr,wfr,MT,U1e,Afr,yfr,RW,Lfr,xfr,$fr,ET,J1e,kfr,Sfr,PW,Rfr,Pfr,Bfr,CT,Y1e,Ifr,Nfr,BW,qfr,jfr,Dfr,wT,K1e,Gfr,Ofr,IW,Vfr,Xfr,zfr,AT,Z1e,Wfr,Qfr,NW,Hfr,Ufr,Jfr,yT,ebe,Yfr,Kfr,qW,Zfr,emr,omr,LT,obe,rmr,tmr,jW,amr,nmr,smr,xT,rbe,lmr,imr,DW,dmr,cmr,fmr,$T,tbe,mmr,gmr,GW,hmr,pmr,_mr,kT,abe,umr,bmr,OW,vmr,Fmr,Tmr,ST,nbe,Mmr,Emr,VW,Cmr,wmr,Amr,RT,sbe,ymr,Lmr,XW,xmr,$mr,kmr,PT,lbe,Smr,Rmr,zW,Pmr,Bmr,Imr,BT,ibe,Nmr,qmr,WW,jmr,Dmr,Gmr,IT,dbe,Omr,Vmr,QW,Xmr,zmr,Wmr,NT,cbe,Qmr,Hmr,HW,Umr,Jmr,Ymr,qT,fbe,Kmr,Zmr,UW,egr,ogr,rgr,jT,mbe,tgr,agr,JW,ngr,sgr,lgr,DT,gbe,igr,dgr,YW,cgr,fgr,mgr,GT,hbe,ggr,hgr,KW,pgr,_gr,ugr,OT,pbe,bgr,vgr,ZW,Fgr,Tgr,Mgr,VT,_be,Egr,Cgr,eQ,wgr,Agr,ygr,XT,ube,Lgr,xgr,oQ,$gr,kgr,Sgr,zT,bbe,Rgr,Pgr,rQ,Bgr,Igr,Ngr,WT,vbe,qgr,jgr,tQ,Dgr,Ggr,Ogr,QT,Fbe,Vgr,Xgr,aQ,zgr,Wgr,Qgr,HT,gje,Xd,UT,Tbe,p8,Hgr,Mbe,Ugr,hje,Ko,_8,Jgr,zd,Ygr,nQ,Kgr,Zgr,sQ,ehr,ohr,rhr,u8,thr,Ebe,ahr,nhr,shr,Lt,b8,lhr,Cbe,ihr,dhr,Wd,chr,wbe,fhr,mhr,lQ,ghr,hhr,phr,JT,_hr,Ar,v8,uhr,Abe,bhr,vhr,Za,Fhr,ybe,Thr,Mhr,Lbe,Ehr,Chr,xbe,whr,Ahr,yhr,se,YT,$be,Lhr,xhr,iQ,$hr,khr,Shr,KT,kbe,Rhr,Phr,dQ,Bhr,Ihr,Nhr,ZT,Sbe,qhr,jhr,cQ,Dhr,Ghr,Ohr,e7,Rbe,Vhr,Xhr,fQ,zhr,Whr,Qhr,o7,Pbe,Hhr,Uhr,mQ,Jhr,Yhr,Khr,r7,Bbe,Zhr,epr,gQ,opr,rpr,tpr,t7,Ibe,apr,npr,hQ,spr,lpr,ipr,a7,Nbe,dpr,cpr,pQ,fpr,mpr,gpr,n7,qbe,hpr,ppr,_Q,_pr,upr,bpr,s7,jbe,vpr,Fpr,uQ,Tpr,Mpr,Epr,l7,Dbe,Cpr,wpr,bQ,Apr,ypr,Lpr,i7,Gbe,xpr,$pr,vQ,kpr,Spr,Rpr,d7,Obe,Ppr,Bpr,FQ,Ipr,Npr,qpr,c7,Vbe,jpr,Dpr,TQ,Gpr,Opr,Vpr,f7,Xbe,Xpr,zpr,MQ,Wpr,Qpr,Hpr,m7,zbe,Upr,Jpr,EQ,Ypr,Kpr,Zpr,g7,Wbe,e_r,o_r,CQ,r_r,t_r,a_r,h7,Qbe,n_r,s_r,wQ,l_r,i_r,d_r,p7,Hbe,c_r,f_r,AQ,m_r,g_r,h_r,_7,Ube,p_r,__r,yQ,u_r,b_r,v_r,u7,Jbe,F_r,T_r,LQ,M_r,E_r,C_r,b7,Ybe,w_r,A_r,xQ,y_r,L_r,x_r,v7,Kbe,$_r,k_r,$Q,S_r,R_r,P_r,F7,pje,Qd,T7,Zbe,F8,B_r,eve,I_r,_je,Zo,T8,N_r,Hd,q_r,kQ,j_r,D_r,SQ,G_r,O_r,V_r,M8,X_r,ove,z_r,W_r,Q_r,xt,E8,H_r,rve,U_r,J_r,Ud,Y_r,tve,K_r,Z_r,RQ,eur,our,rur,M7,tur,yr,C8,aur,ave,nur,sur,en,lur,nve,iur,dur,sve,cur,fur,lve,mur,gur,hur,Me,E7,ive,pur,_ur,PQ,uur,bur,vur,C7,dve,Fur,Tur,BQ,Mur,Eur,Cur,w7,cve,wur,Aur,IQ,yur,Lur,xur,A7,fve,$ur,kur,NQ,Sur,Rur,Pur,y7,mve,Bur,Iur,qQ,Nur,qur,jur,L7,gve,Dur,Gur,jQ,Our,Vur,Xur,x7,hve,zur,Wur,DQ,Qur,Hur,Uur,$7,pve,Jur,Yur,GQ,Kur,Zur,e2r,k7,_ve,o2r,r2r,OQ,t2r,a2r,n2r,S7,uve,s2r,l2r,VQ,i2r,d2r,c2r,R7,bve,f2r,m2r,XQ,g2r,h2r,p2r,P7,vve,_2r,u2r,zQ,b2r,v2r,F2r,B7,uje,Jd,I7,Fve,w8,T2r,Tve,M2r,bje,er,A8,E2r,Yd,C2r,WQ,w2r,A2r,QQ,y2r,L2r,x2r,y8,$2r,Mve,k2r,S2r,R2r,$t,L8,P2r,Eve,B2r,I2r,Kd,N2r,Cve,q2r,j2r,HQ,D2r,G2r,O2r,N7,V2r,Lr,x8,X2r,wve,z2r,W2r,on,Q2r,Ave,H2r,U2r,yve,J2r,Y2r,Lve,K2r,Z2r,e1r,rn,q7,xve,o1r,r1r,UQ,t1r,a1r,n1r,j7,$ve,s1r,l1r,JQ,i1r,d1r,c1r,D7,kve,f1r,m1r,YQ,g1r,h1r,p1r,G7,Sve,_1r,u1r,KQ,b1r,v1r,F1r,O7,vje,Zd,V7,Rve,$8,T1r,Pve,M1r,Fje,or,k8,E1r,ec,C1r,ZQ,w1r,A1r,eH,y1r,L1r,x1r,S8,$1r,Bve,k1r,S1r,R1r,kt,R8,P1r,Ive,B1r,I1r,oc,N1r,Nve,q1r,j1r,oH,D1r,G1r,O1r,X7,V1r,xr,P8,X1r,qve,z1r,W1r,tn,Q1r,jve,H1r,U1r,Dve,J1r,Y1r,Gve,K1r,Z1r,ebr,ie,z7,Ove,obr,rbr,rH,tbr,abr,nbr,W7,Vve,sbr,lbr,tH,ibr,dbr,cbr,Q7,Xve,fbr,mbr,aH,gbr,hbr,pbr,H7,zve,_br,ubr,nH,bbr,vbr,Fbr,U7,Wve,Tbr,Mbr,sH,Ebr,Cbr,wbr,J7,Qve,Abr,ybr,lH,Lbr,xbr,$br,Y7,Hve,kbr,Sbr,iH,Rbr,Pbr,Bbr,K7,Uve,Ibr,Nbr,dH,qbr,jbr,Dbr,Z7,Jve,Gbr,Obr,cH,Vbr,Xbr,zbr,eM,Yve,Wbr,Qbr,fH,Hbr,Ubr,Jbr,oM,Kve,Ybr,Kbr,mH,Zbr,evr,ovr,rM,Zve,rvr,tvr,gH,avr,nvr,svr,tM,e3e,lvr,ivr,hH,dvr,cvr,fvr,aM,o3e,mvr,gvr,pH,hvr,pvr,_vr,nM,r3e,uvr,bvr,_H,vvr,Fvr,Tvr,sM,t3e,Mvr,Evr,uH,Cvr,wvr,Avr,lM,a3e,yvr,Lvr,bH,xvr,$vr,kvr,iM,n3e,Svr,Rvr,vH,Pvr,Bvr,Ivr,dM,s3e,Nvr,qvr,FH,jvr,Dvr,Gvr,cM,l3e,Ovr,Vvr,TH,Xvr,zvr,Wvr,fM,Tje,rc,mM,i3e,B8,Qvr,d3e,Hvr,Mje,rr,I8,Uvr,tc,Jvr,MH,Yvr,Kvr,EH,Zvr,e3r,o3r,N8,r3r,c3e,t3r,a3r,n3r,St,q8,s3r,f3e,l3r,i3r,ac,d3r,m3e,c3r,f3r,CH,m3r,g3r,h3r,gM,p3r,$r,j8,_3r,g3e,u3r,b3r,an,v3r,h3e,F3r,T3r,p3e,M3r,E3r,_3e,C3r,w3r,A3r,ye,hM,u3e,y3r,L3r,wH,x3r,$3r,k3r,pM,b3e,S3r,R3r,AH,P3r,B3r,I3r,_M,v3e,N3r,q3r,yH,j3r,D3r,G3r,uM,F3e,O3r,V3r,LH,X3r,z3r,W3r,bM,T3e,Q3r,H3r,xH,U3r,J3r,Y3r,vM,M3e,K3r,Z3r,$H,e0r,o0r,r0r,FM,E3e,t0r,a0r,kH,n0r,s0r,l0r,TM,C3e,i0r,d0r,SH,c0r,f0r,m0r,MM,w3e,g0r,h0r,RH,p0r,_0r,u0r,EM,A3e,b0r,v0r,PH,F0r,T0r,M0r,CM,Eje,nc,wM,y3e,D8,E0r,L3e,C0r,Cje,tr,G8,w0r,sc,A0r,BH,y0r,L0r,IH,x0r,$0r,k0r,O8,S0r,x3e,R0r,P0r,B0r,Rt,V8,I0r,$3e,N0r,q0r,lc,j0r,k3e,D0r,G0r,NH,O0r,V0r,X0r,AM,z0r,kr,X8,W0r,S3e,Q0r,H0r,nn,U0r,R3e,J0r,Y0r,P3e,K0r,Z0r,B3e,eFr,oFr,rFr,oe,yM,I3e,tFr,aFr,qH,nFr,sFr,lFr,LM,N3e,iFr,dFr,jH,cFr,fFr,mFr,xM,q3e,gFr,hFr,DH,pFr,_Fr,uFr,$M,j3e,bFr,vFr,GH,FFr,TFr,MFr,kM,D3e,EFr,CFr,OH,wFr,AFr,yFr,SM,G3e,LFr,xFr,VH,$Fr,kFr,SFr,RM,O3e,RFr,PFr,XH,BFr,IFr,NFr,PM,V3e,qFr,jFr,zH,DFr,GFr,OFr,BM,X3e,VFr,XFr,WH,zFr,WFr,QFr,IM,z3e,HFr,UFr,QH,JFr,YFr,KFr,NM,W3e,ZFr,eTr,HH,oTr,rTr,tTr,qM,Q3e,aTr,nTr,UH,sTr,lTr,iTr,jM,H3e,dTr,cTr,JH,fTr,mTr,gTr,DM,U3e,hTr,pTr,YH,_Tr,uTr,bTr,GM,J3e,vTr,FTr,KH,TTr,MTr,ETr,OM,Y3e,CTr,wTr,ZH,ATr,yTr,LTr,VM,K3e,xTr,$Tr,eU,kTr,STr,RTr,XM,Z3e,PTr,BTr,oU,ITr,NTr,qTr,zM,e0e,jTr,DTr,rU,GTr,OTr,VTr,WM,o0e,XTr,zTr,tU,WTr,QTr,HTr,QM,r0e,UTr,JTr,aU,YTr,KTr,ZTr,HM,t0e,e7r,o7r,nU,r7r,t7r,a7r,UM,a0e,n7r,s7r,sU,l7r,i7r,d7r,JM,n0e,c7r,f7r,lU,m7r,g7r,h7r,YM,s0e,p7r,_7r,iU,u7r,b7r,v7r,KM,l0e,F7r,T7r,dU,M7r,E7r,C7r,ZM,wje,ic,e4,i0e,z8,w7r,d0e,A7r,Aje,ar,W8,y7r,dc,L7r,cU,x7r,$7r,fU,k7r,S7r,R7r,Q8,P7r,c0e,B7r,I7r,N7r,Pt,H8,q7r,f0e,j7r,D7r,cc,G7r,m0e,O7r,V7r,mU,X7r,z7r,W7r,o4,Q7r,Sr,U8,H7r,g0e,U7r,J7r,sn,Y7r,h0e,K7r,Z7r,p0e,eMr,oMr,_0e,rMr,tMr,aMr,pe,r4,u0e,nMr,sMr,gU,lMr,iMr,dMr,t4,b0e,cMr,fMr,hU,mMr,gMr,hMr,a4,v0e,pMr,_Mr,pU,uMr,bMr,vMr,n4,F0e,FMr,TMr,_U,MMr,EMr,CMr,s4,T0e,wMr,AMr,uU,yMr,LMr,xMr,l4,M0e,$Mr,kMr,bU,SMr,RMr,PMr,i4,E0e,BMr,IMr,vU,NMr,qMr,jMr,d4,C0e,DMr,GMr,FU,OMr,VMr,XMr,c4,w0e,zMr,WMr,TU,QMr,HMr,UMr,f4,A0e,JMr,YMr,MU,KMr,ZMr,e4r,m4,y0e,o4r,r4r,EU,t4r,a4r,n4r,g4,L0e,s4r,l4r,CU,i4r,d4r,c4r,h4,x0e,f4r,m4r,wU,g4r,h4r,p4r,p4,$0e,_4r,u4r,AU,b4r,v4r,F4r,_4,k0e,T4r,M4r,yU,E4r,C4r,w4r,u4,S0e,A4r,y4r,LU,L4r,x4r,$4r,b4,R0e,k4r,S4r,xU,R4r,P4r,B4r,v4,yje,fc,F4,P0e,J8,I4r,B0e,N4r,Lje,nr,Y8,q4r,mc,j4r,$U,D4r,G4r,kU,O4r,V4r,X4r,K8,z4r,I0e,W4r,Q4r,H4r,Bt,Z8,U4r,N0e,J4r,Y4r,gc,K4r,q0e,Z4r,eEr,SU,oEr,rEr,tEr,T4,aEr,Rr,e9,nEr,j0e,sEr,lEr,ln,iEr,D0e,dEr,cEr,G0e,fEr,mEr,O0e,gEr,hEr,pEr,o9,M4,V0e,_Er,uEr,RU,bEr,vEr,FEr,E4,X0e,TEr,MEr,PU,EEr,CEr,wEr,C4,xje,hc,w4,z0e,r9,AEr,W0e,yEr,$je,sr,t9,LEr,pc,xEr,BU,$Er,kEr,IU,SEr,REr,PEr,a9,BEr,Q0e,IEr,NEr,qEr,It,n9,jEr,H0e,DEr,GEr,_c,OEr,U0e,VEr,XEr,NU,zEr,WEr,QEr,A4,HEr,Pr,s9,UEr,J0e,JEr,YEr,dn,KEr,Y0e,ZEr,eCr,K0e,oCr,rCr,Z0e,tCr,aCr,nCr,eFe,y4,oFe,sCr,lCr,qU,iCr,dCr,cCr,L4,kje,uc,x4,rFe,l9,fCr,tFe,mCr,Sje,lr,i9,gCr,bc,hCr,jU,pCr,_Cr,DU,uCr,bCr,vCr,d9,FCr,aFe,TCr,MCr,ECr,Nt,c9,CCr,nFe,wCr,ACr,vc,yCr,sFe,LCr,xCr,GU,$Cr,kCr,SCr,$4,RCr,Br,f9,PCr,lFe,BCr,ICr,cn,NCr,iFe,qCr,jCr,dFe,DCr,GCr,cFe,OCr,VCr,XCr,de,k4,fFe,zCr,WCr,OU,QCr,HCr,UCr,S4,mFe,JCr,YCr,VU,KCr,ZCr,e5r,R4,gFe,o5r,r5r,XU,t5r,a5r,n5r,P4,hFe,s5r,l5r,zU,i5r,d5r,c5r,B4,pFe,f5r,m5r,WU,g5r,h5r,p5r,I4,_Fe,_5r,u5r,QU,b5r,v5r,F5r,N4,uFe,T5r,M5r,HU,E5r,C5r,w5r,q4,bFe,A5r,y5r,UU,L5r,x5r,$5r,j4,vFe,k5r,S5r,JU,R5r,P5r,B5r,D4,FFe,I5r,N5r,YU,q5r,j5r,D5r,G4,TFe,G5r,O5r,KU,V5r,X5r,z5r,O4,MFe,W5r,Q5r,ZU,H5r,U5r,J5r,V4,EFe,Y5r,K5r,eJ,Z5r,ewr,owr,X4,CFe,rwr,twr,oJ,awr,nwr,swr,z4,wFe,lwr,iwr,rJ,dwr,cwr,fwr,W4,AFe,mwr,gwr,tJ,hwr,pwr,_wr,Q4,yFe,uwr,bwr,aJ,vwr,Fwr,Twr,H4,LFe,Mwr,Ewr,nJ,Cwr,wwr,Awr,U4,xFe,ywr,Lwr,sJ,xwr,$wr,kwr,J4,$Fe,Swr,Rwr,lJ,Pwr,Bwr,Iwr,Y4,Rje,Fc,K4,kFe,m9,Nwr,SFe,qwr,Pje,ir,g9,jwr,Tc,Dwr,iJ,Gwr,Owr,dJ,Vwr,Xwr,zwr,h9,Wwr,RFe,Qwr,Hwr,Uwr,qt,p9,Jwr,PFe,Ywr,Kwr,Mc,Zwr,BFe,e6r,o6r,cJ,r6r,t6r,a6r,Z4,n6r,Ir,_9,s6r,IFe,l6r,i6r,fn,d6r,NFe,c6r,f6r,qFe,m6r,g6r,jFe,h6r,p6r,_6r,ce,eE,DFe,u6r,b6r,fJ,v6r,F6r,T6r,oE,GFe,M6r,E6r,mJ,C6r,w6r,A6r,rE,OFe,y6r,L6r,gJ,x6r,$6r,k6r,tE,VFe,S6r,R6r,hJ,P6r,B6r,I6r,aE,XFe,N6r,q6r,pJ,j6r,D6r,G6r,nE,zFe,O6r,V6r,_J,X6r,z6r,W6r,sE,WFe,Q6r,H6r,uJ,U6r,J6r,Y6r,lE,QFe,K6r,Z6r,bJ,eAr,oAr,rAr,iE,HFe,tAr,aAr,vJ,nAr,sAr,lAr,dE,UFe,iAr,dAr,FJ,cAr,fAr,mAr,cE,JFe,gAr,hAr,TJ,pAr,_Ar,uAr,fE,YFe,bAr,vAr,MJ,FAr,TAr,MAr,mE,KFe,EAr,CAr,EJ,wAr,AAr,yAr,gE,ZFe,LAr,xAr,CJ,$Ar,kAr,SAr,hE,eTe,RAr,PAr,wJ,BAr,IAr,NAr,pE,oTe,qAr,jAr,AJ,DAr,GAr,OAr,_E,rTe,VAr,XAr,yJ,zAr,WAr,QAr,uE,tTe,HAr,UAr,LJ,JAr,YAr,KAr,bE,aTe,ZAr,eyr,xJ,oyr,ryr,tyr,vE,nTe,ayr,nyr,$J,syr,lyr,iyr,FE,Bje,Ec,TE,sTe,u9,dyr,lTe,cyr,Ije,dr,b9,fyr,Cc,myr,kJ,gyr,hyr,SJ,pyr,_yr,uyr,v9,byr,iTe,vyr,Fyr,Tyr,jt,F9,Myr,dTe,Eyr,Cyr,wc,wyr,cTe,Ayr,yyr,RJ,Lyr,xyr,$yr,ME,kyr,Nr,T9,Syr,fTe,Ryr,Pyr,mn,Byr,mTe,Iyr,Nyr,gTe,qyr,jyr,hTe,Dyr,Gyr,Oyr,pTe,EE,_Te,Vyr,Xyr,PJ,zyr,Wyr,Qyr,CE,Nje,Ac,wE,uTe,M9,Hyr,bTe,Uyr,qje,cr,E9,Jyr,yc,Yyr,BJ,Kyr,Zyr,IJ,eLr,oLr,rLr,C9,tLr,vTe,aLr,nLr,sLr,Dt,w9,lLr,FTe,iLr,dLr,Lc,cLr,TTe,fLr,mLr,NJ,gLr,hLr,pLr,AE,_Lr,qr,A9,uLr,MTe,bLr,vLr,gn,FLr,ETe,TLr,MLr,CTe,ELr,CLr,wTe,wLr,ALr,yLr,ATe,yE,yTe,LLr,xLr,qJ,$Lr,kLr,SLr,LE,jje,xc,xE,LTe,y9,RLr,xTe,PLr,Dje,fr,L9,BLr,$c,ILr,jJ,NLr,qLr,DJ,jLr,DLr,GLr,x9,OLr,$Te,VLr,XLr,zLr,Gt,$9,WLr,kTe,QLr,HLr,kc,ULr,STe,JLr,YLr,GJ,KLr,ZLr,e8r,$E,o8r,jr,k9,r8r,RTe,t8r,a8r,hn,n8r,PTe,s8r,l8r,BTe,i8r,d8r,ITe,c8r,f8r,m8r,te,kE,NTe,g8r,h8r,OJ,p8r,_8r,u8r,SE,qTe,b8r,v8r,VJ,F8r,T8r,M8r,RE,jTe,E8r,C8r,XJ,w8r,A8r,y8r,PE,DTe,L8r,x8r,zJ,$8r,k8r,S8r,BE,GTe,R8r,P8r,WJ,B8r,I8r,N8r,IE,OTe,q8r,j8r,QJ,D8r,G8r,O8r,NE,VTe,V8r,X8r,HJ,z8r,W8r,Q8r,qE,XTe,H8r,U8r,UJ,J8r,Y8r,K8r,jE,zTe,Z8r,e9r,JJ,o9r,r9r,t9r,DE,WTe,a9r,n9r,YJ,s9r,l9r,i9r,GE,QTe,d9r,c9r,KJ,f9r,m9r,g9r,OE,HTe,h9r,p9r,ZJ,_9r,u9r,b9r,VE,UTe,v9r,F9r,eY,T9r,M9r,E9r,XE,JTe,C9r,w9r,oY,A9r,y9r,L9r,zE,YTe,x9r,$9r,rY,k9r,S9r,R9r,WE,KTe,P9r,B9r,tY,I9r,N9r,q9r,QE,ZTe,j9r,D9r,aY,G9r,O9r,V9r,HE,e7e,X9r,z9r,nY,W9r,Q9r,H9r,UE,o7e,U9r,J9r,sY,Y9r,K9r,Z9r,JE,r7e,exr,oxr,lY,rxr,txr,axr,YE,t7e,nxr,sxr,iY,lxr,ixr,dxr,KE,a7e,cxr,fxr,dY,mxr,gxr,hxr,ZE,n7e,pxr,_xr,cY,uxr,bxr,vxr,eC,s7e,Fxr,Txr,fY,Mxr,Exr,Cxr,oC,l7e,wxr,Axr,mY,yxr,Lxr,xxr,rC,Gje,Sc,tC,i7e,S9,$xr,d7e,kxr,Oje,mr,R9,Sxr,Rc,Rxr,gY,Pxr,Bxr,hY,Ixr,Nxr,qxr,P9,jxr,c7e,Dxr,Gxr,Oxr,Ot,B9,Vxr,f7e,Xxr,zxr,Pc,Wxr,m7e,Qxr,Hxr,pY,Uxr,Jxr,Yxr,aC,Kxr,Dr,I9,Zxr,g7e,e$r,o$r,pn,r$r,h7e,t$r,a$r,p7e,n$r,s$r,_7e,l$r,i$r,d$r,Re,nC,u7e,c$r,f$r,_Y,m$r,g$r,h$r,sC,b7e,p$r,_$r,uY,u$r,b$r,v$r,lC,v7e,F$r,T$r,bY,M$r,E$r,C$r,iC,F7e,w$r,A$r,vY,y$r,L$r,x$r,dC,T7e,$$r,k$r,FY,S$r,R$r,P$r,cC,M7e,B$r,I$r,TY,N$r,q$r,j$r,fC,E7e,D$r,G$r,MY,O$r,V$r,X$r,mC,C7e,z$r,W$r,EY,Q$r,H$r,U$r,gC,w7e,J$r,Y$r,CY,K$r,Z$r,ekr,hC,Vje,Bc,pC,A7e,N9,okr,y7e,rkr,Xje,gr,q9,tkr,Ic,akr,wY,nkr,skr,AY,lkr,ikr,dkr,j9,ckr,L7e,fkr,mkr,gkr,Vt,D9,hkr,x7e,pkr,_kr,Nc,ukr,$7e,bkr,vkr,yY,Fkr,Tkr,Mkr,_C,Ekr,Gr,G9,Ckr,k7e,wkr,Akr,_n,ykr,S7e,Lkr,xkr,R7e,$kr,kkr,P7e,Skr,Rkr,Pkr,Ee,uC,B7e,Bkr,Ikr,LY,Nkr,qkr,jkr,bC,I7e,Dkr,Gkr,xY,Okr,Vkr,Xkr,vC,N7e,zkr,Wkr,$Y,Qkr,Hkr,Ukr,FC,q7e,Jkr,Ykr,kY,Kkr,Zkr,eSr,TC,j7e,oSr,rSr,SY,tSr,aSr,nSr,MC,D7e,sSr,lSr,RY,iSr,dSr,cSr,EC,G7e,fSr,mSr,PY,gSr,hSr,pSr,CC,O7e,_Sr,uSr,BY,bSr,vSr,FSr,wC,V7e,TSr,MSr,IY,ESr,CSr,wSr,AC,X7e,ASr,ySr,NY,LSr,xSr,$Sr,yC,z7e,kSr,SSr,qY,RSr,PSr,BSr,LC,W7e,ISr,NSr,jY,qSr,jSr,DSr,xC,zje,qc,$C,Q7e,O9,GSr,H7e,OSr,Wje,hr,V9,VSr,jc,XSr,DY,zSr,WSr,GY,QSr,HSr,USr,X9,JSr,U7e,YSr,KSr,ZSr,Xt,z9,eRr,J7e,oRr,rRr,Dc,tRr,Y7e,aRr,nRr,OY,sRr,lRr,iRr,kC,dRr,Or,W9,cRr,K7e,fRr,mRr,un,gRr,Z7e,hRr,pRr,eMe,_Rr,uRr,oMe,bRr,vRr,FRr,Le,SC,rMe,TRr,MRr,VY,ERr,CRr,wRr,RC,tMe,ARr,yRr,XY,LRr,xRr,$Rr,PC,aMe,kRr,SRr,zY,RRr,PRr,BRr,BC,nMe,IRr,NRr,WY,qRr,jRr,DRr,IC,sMe,GRr,ORr,QY,VRr,XRr,zRr,NC,lMe,WRr,QRr,HY,HRr,URr,JRr,qC,iMe,YRr,KRr,UY,ZRr,ePr,oPr,jC,dMe,rPr,tPr,JY,aPr,nPr,sPr,DC,cMe,lPr,iPr,YY,dPr,cPr,fPr,GC,fMe,mPr,gPr,KY,hPr,pPr,_Pr,OC,Qje,Gc,VC,mMe,Q9,uPr,gMe,bPr,Hje,pr,H9,vPr,Oc,FPr,ZY,TPr,MPr,eK,EPr,CPr,wPr,U9,APr,hMe,yPr,LPr,xPr,zt,J9,$Pr,pMe,kPr,SPr,Vc,RPr,_Me,PPr,BPr,oK,IPr,NPr,qPr,XC,jPr,Vr,Y9,DPr,uMe,GPr,OPr,bn,VPr,bMe,XPr,zPr,vMe,WPr,QPr,FMe,HPr,UPr,JPr,Pe,zC,TMe,YPr,KPr,rK,ZPr,eBr,oBr,WC,MMe,rBr,tBr,tK,aBr,nBr,sBr,QC,EMe,lBr,iBr,aK,dBr,cBr,fBr,HC,CMe,mBr,gBr,nK,hBr,pBr,_Br,UC,wMe,uBr,bBr,sK,vBr,FBr,TBr,JC,AMe,MBr,EBr,lK,CBr,wBr,ABr,YC,yMe,yBr,LBr,iK,xBr,$Br,kBr,KC,LMe,SBr,RBr,dK,PBr,BBr,IBr,ZC,xMe,NBr,qBr,cK,jBr,DBr,GBr,e5,Uje,Xc,o5,$Me,K9,OBr,kMe,VBr,Jje,_r,Z9,XBr,zc,zBr,fK,WBr,QBr,mK,HBr,UBr,JBr,ex,YBr,SMe,KBr,ZBr,eIr,Wt,ox,oIr,RMe,rIr,tIr,Wc,aIr,PMe,nIr,sIr,gK,lIr,iIr,dIr,r5,cIr,Xr,rx,fIr,BMe,mIr,gIr,vn,hIr,IMe,pIr,_Ir,NMe,uIr,bIr,qMe,vIr,FIr,TIr,xe,t5,jMe,MIr,EIr,hK,CIr,wIr,AIr,a5,DMe,yIr,LIr,pK,xIr,$Ir,kIr,n5,GMe,SIr,RIr,_K,PIr,BIr,IIr,s5,OMe,NIr,qIr,uK,jIr,DIr,GIr,l5,VMe,OIr,VIr,bK,XIr,zIr,WIr,i5,XMe,QIr,HIr,vK,UIr,JIr,YIr,d5,zMe,KIr,ZIr,FK,eNr,oNr,rNr,c5,WMe,tNr,aNr,TK,nNr,sNr,lNr,f5,QMe,iNr,dNr,MK,cNr,fNr,mNr,m5,HMe,gNr,hNr,EK,pNr,_Nr,uNr,g5,Yje,Qc,h5,UMe,tx,bNr,JMe,vNr,Kje,ur,ax,FNr,Hc,TNr,CK,MNr,ENr,wK,CNr,wNr,ANr,nx,yNr,YMe,LNr,xNr,$Nr,Qt,sx,kNr,KMe,SNr,RNr,Uc,PNr,ZMe,BNr,INr,AK,NNr,qNr,jNr,p5,DNr,zr,lx,GNr,e4e,ONr,VNr,Fn,XNr,o4e,zNr,WNr,r4e,QNr,HNr,t4e,UNr,JNr,YNr,$e,_5,a4e,KNr,ZNr,yK,eqr,oqr,rqr,u5,n4e,tqr,aqr,LK,nqr,sqr,lqr,b5,s4e,iqr,dqr,xK,cqr,fqr,mqr,v5,l4e,gqr,hqr,$K,pqr,_qr,uqr,F5,i4e,bqr,vqr,kK,Fqr,Tqr,Mqr,T5,d4e,Eqr,Cqr,SK,wqr,Aqr,yqr,M5,c4e,Lqr,xqr,RK,$qr,kqr,Sqr,E5,f4e,Rqr,Pqr,PK,Bqr,Iqr,Nqr,C5,m4e,qqr,jqr,BK,Dqr,Gqr,Oqr,w5,g4e,Vqr,Xqr,IK,zqr,Wqr,Qqr,A5,Zje,Jc,y5,h4e,ix,Hqr,p4e,Uqr,eDe,br,dx,Jqr,Yc,Yqr,NK,Kqr,Zqr,qK,ejr,ojr,rjr,cx,tjr,_4e,ajr,njr,sjr,Ht,fx,ljr,u4e,ijr,djr,Kc,cjr,b4e,fjr,mjr,jK,gjr,hjr,pjr,L5,_jr,Wr,mx,ujr,v4e,bjr,vjr,Tn,Fjr,F4e,Tjr,Mjr,T4e,Ejr,Cjr,M4e,wjr,Ajr,yjr,De,x5,E4e,Ljr,xjr,DK,$jr,kjr,Sjr,$5,C4e,Rjr,Pjr,GK,Bjr,Ijr,Njr,k5,w4e,qjr,jjr,OK,Djr,Gjr,Ojr,S5,A4e,Vjr,Xjr,VK,zjr,Wjr,Qjr,R5,y4e,Hjr,Ujr,XK,Jjr,Yjr,Kjr,P5,L4e,Zjr,eDr,zK,oDr,rDr,tDr,B5,x4e,aDr,nDr,WK,sDr,lDr,iDr,I5,$4e,dDr,cDr,QK,fDr,mDr,gDr,N5,oDe,Zc,q5,k4e,gx,hDr,S4e,pDr,rDe,vr,hx,_Dr,ef,uDr,HK,bDr,vDr,UK,FDr,TDr,MDr,px,EDr,R4e,CDr,wDr,ADr,Ut,_x,yDr,P4e,LDr,xDr,of,$Dr,B4e,kDr,SDr,JK,RDr,PDr,BDr,j5,IDr,Qr,ux,NDr,I4e,qDr,jDr,Mn,DDr,N4e,GDr,ODr,q4e,VDr,XDr,j4e,zDr,WDr,QDr,Ge,D5,D4e,HDr,UDr,YK,JDr,YDr,KDr,G5,G4e,ZDr,eGr,KK,oGr,rGr,tGr,O5,O4e,aGr,nGr,ZK,sGr,lGr,iGr,V5,V4e,dGr,cGr,eZ,fGr,mGr,gGr,X5,X4e,hGr,pGr,oZ,_Gr,uGr,bGr,z5,z4e,vGr,FGr,rZ,TGr,MGr,EGr,W5,W4e,CGr,wGr,tZ,AGr,yGr,LGr,Q5,Q4e,xGr,$Gr,aZ,kGr,SGr,RGr,H5,tDe,rf,U5,H4e,bx,PGr,U4e,BGr,aDe,Fr,vx,IGr,tf,NGr,nZ,qGr,jGr,sZ,DGr,GGr,OGr,Fx,VGr,J4e,XGr,zGr,WGr,Jt,Tx,QGr,Y4e,HGr,UGr,af,JGr,K4e,YGr,KGr,lZ,ZGr,eOr,oOr,J5,rOr,Hr,Mx,tOr,Z4e,aOr,nOr,En,sOr,eEe,lOr,iOr,oEe,dOr,cOr,rEe,fOr,mOr,gOr,tEe,Y5,aEe,hOr,pOr,iZ,_Or,uOr,bOr,K5,nDe,nf,Z5,nEe,Ex,vOr,sEe,FOr,sDe,Tr,Cx,TOr,sf,MOr,dZ,EOr,COr,cZ,wOr,AOr,yOr,wx,LOr,lEe,xOr,$Or,kOr,Yt,Ax,SOr,iEe,ROr,POr,lf,BOr,dEe,IOr,NOr,fZ,qOr,jOr,DOr,ew,GOr,Ur,yx,OOr,cEe,VOr,XOr,Cn,zOr,fEe,WOr,QOr,mEe,HOr,UOr,gEe,JOr,YOr,KOr,Lx,ow,hEe,ZOr,eVr,mZ,oVr,rVr,tVr,rw,pEe,aVr,nVr,gZ,sVr,lVr,iVr,tw,lDe,df,aw,_Ee,xx,dVr,uEe,cVr,iDe,Mr,$x,fVr,cf,mVr,hZ,gVr,hVr,pZ,pVr,_Vr,uVr,kx,bVr,bEe,vVr,FVr,TVr,Kt,Sx,MVr,vEe,EVr,CVr,ff,wVr,FEe,AVr,yVr,_Z,LVr,xVr,$Vr,nw,kVr,Jr,Rx,SVr,TEe,RVr,PVr,wn,BVr,MEe,IVr,NVr,EEe,qVr,jVr,CEe,DVr,GVr,OVr,wEe,sw,AEe,VVr,XVr,uZ,zVr,WVr,QVr,lw,dDe;return d=new re({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),xA=new re({}),$A=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new HVr({props:{warning:!0,$$slots:{default:[R$t]},$$scope:{ctx:L}}}),kA=new re({}),SA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/configuration_auto.py#L587"}}),BA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/configuration_auto.py#L610"}}),Cg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[P$t]},$$scope:{ctx:L}}}),IA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/configuration_auto.py#L733"}}),NA=new re({}),qA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/tokenization_auto.py#L390"}}),GA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17302/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/tokenization_auto.py#L404"}}),nh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[B$t]},$$scope:{ctx:L}}}),OA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/tokenization_auto.py#L603"}}),VA=new re({}),XA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),QA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17302/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/feature_extraction_auto.py#L204"}}),Nh=new HVr({props:{$$slots:{default:[I$t]},$$scope:{ctx:L}}}),qh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[N$t]},$$scope:{ctx:L}}}),HA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/feature_extraction_auto.py#L331"}}),UA=new re({}),JA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/processing_auto.py#L88"}}),ZA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/processing_auto.py#L102"}}),ap=new HVr({props:{$$slots:{default:[q$t]},$$scope:{ctx:L}}}),np=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[j$t]},$$scope:{ctx:L}}}),ey=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/processing_auto.py#L255"}}),oy=new re({}),ry=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_auto.py#L745"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/emformer#transformers.EmformerConfig">EmformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/emformer#transformers.EmformerModel">EmformerModel</a> (Emformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),ip=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[D$t]},$$scope:{ctx:L}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),au=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[G$t]},$$scope:{ctx:L}}}),sy=new re({}),ly=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_auto.py#L752"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),su=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[O$t]},$$scope:{ctx:L}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),Ju=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[V$t]},$$scope:{ctx:L}}}),fy=new re({}),my=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_auto.py#L767"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),Ku=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[X$t]},$$scope:{ctx:L}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),N2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[z$t]},$$scope:{ctx:L}}}),_y=new re({}),uy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_auto.py#L774"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),j2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[W$t]},$$scope:{ctx:L}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),M1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Q$t]},$$scope:{ctx:L}}}),Ty=new re({}),My=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_auto.py#L781"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),C1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[H$t]},$$scope:{ctx:L}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),O1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[U$t]},$$scope:{ctx:L}}}),Ay=new re({}),yy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_auto.py#L790"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),X1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[J$t]},$$scope:{ctx:L}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),jb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Y$t]},$$scope:{ctx:L}}}),ky=new re({}),Sy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_auto.py#L824"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),Gb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[K$t]},$$scope:{ctx:L}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),bv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Z$t]},$$scope:{ctx:L}}}),Iy=new re({}),Ny=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_auto.py#L831"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),Fv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[ekt]},$$scope:{ctx:L}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),yv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[okt]},$$scope:{ctx:L}}}),Gy=new re({}),Oy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_auto.py#L817"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),xv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[rkt]},$$scope:{ctx:L}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),f3=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[tkt]},$$scope:{ctx:L}}}),Wy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_auto.py#L799"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),g3=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[akt]},$$scope:{ctx:L}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),o0=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[nkt]},$$scope:{ctx:L}}}),Yy=new re({}),Ky=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_auto.py#L806"}}),eL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),t0=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[skt]},$$scope:{ctx:L}}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),s0=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[lkt]},$$scope:{ctx:L}}}),rL=new re({}),tL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_auto.py#L840"}}),nL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17302/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17302/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17302/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),i0=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[ikt]},$$scope:{ctx:L}}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),M0=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[dkt]},$$scope:{ctx:L}}}),lL=new re({}),iL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_auto.py#L879"}}),cL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),C0=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[ckt]},$$scope:{ctx:L}}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),y0=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[fkt]},$$scope:{ctx:L}}}),mL=new re({}),gL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_auto.py#L886"}}),pL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),x0=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[mkt]},$$scope:{ctx:L}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),D0=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[gkt]},$$scope:{ctx:L}}}),uL=new re({}),bL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_auto.py#L909"}}),FL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),O0=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[hkt]},$$scope:{ctx:L}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),U0=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[pkt]},$$scope:{ctx:L}}}),ML=new re({}),EL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_auto.py#L893"}}),wL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),Y0=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[_kt]},$$scope:{ctx:L}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),iF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[ukt]},$$scope:{ctx:L}}}),yL=new re({}),LL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_auto.py#L900"}}),$L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),cF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[bkt]},$$scope:{ctx:L}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),hF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[vkt]},$$scope:{ctx:L}}}),RL=new re({}),PL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_auto.py#L918"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),_F=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Fkt]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),EF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Tkt]},$$scope:{ctx:L}}}),qL=new re({}),jL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_auto.py#L925"}}),GL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),wF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Mkt]},$$scope:{ctx:L}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),$F=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Ekt]},$$scope:{ctx:L}}}),VL=new re({}),XL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_auto.py#L872"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),SF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Ckt]},$$scope:{ctx:L}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),IF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[wkt]},$$scope:{ctx:L}}}),UL=new re({}),JL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_auto.py#L847"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),qF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Akt]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),GF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[ykt]},$$scope:{ctx:L}}}),e8=new re({}),o8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_auto.py#L854"}}),t8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),VF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Lkt]},$$scope:{ctx:L}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),UF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[xkt]},$$scope:{ctx:L}}}),n8=new re({}),s8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_auto.py#L863"}}),i8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),YF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[$kt]},$$scope:{ctx:L}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),eT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[kkt]},$$scope:{ctx:L}}}),c8=new re({}),f8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),g8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),rT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Skt]},$$scope:{ctx:L}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Rkt]},$$scope:{ctx:L}}}),p8=new re({}),_8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),b8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Pkt]},$$scope:{ctx:L}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),F7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Bkt]},$$scope:{ctx:L}}}),F8=new re({}),T8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),E8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),M7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Ikt]},$$scope:{ctx:L}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),B7=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Nkt]},$$scope:{ctx:L}}}),w8=new re({}),A8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),L8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),N7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[qkt]},$$scope:{ctx:L}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),O7=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[jkt]},$$scope:{ctx:L}}}),$8=new re({}),k8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),R8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),X7=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Dkt]},$$scope:{ctx:L}}}),P8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),fM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Gkt]},$$scope:{ctx:L}}}),B8=new re({}),I8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),gM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Okt]},$$scope:{ctx:L}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),CM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Vkt]},$$scope:{ctx:L}}}),D8=new re({}),G8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),V8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),AM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Xkt]},$$scope:{ctx:L}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),ZM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[zkt]},$$scope:{ctx:L}}}),z8=new re({}),W8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),H8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),o4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Wkt]},$$scope:{ctx:L}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),v4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Qkt]},$$scope:{ctx:L}}}),J8=new re({}),Y8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),T4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Hkt]},$$scope:{ctx:L}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),C4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),r9=new re({}),t9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),n9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),A4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),L4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Ykt]},$$scope:{ctx:L}}}),l9=new re({}),i9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),c9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),$4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Kkt]},$$scope:{ctx:L}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),Y4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Zkt]},$$scope:{ctx:L}}}),m9=new re({}),g9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),p9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),Z4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[eSt]},$$scope:{ctx:L}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),FE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[oSt]},$$scope:{ctx:L}}}),u9=new re({}),b9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),F9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),ME=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[rSt]},$$scope:{ctx:L}}}),T9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),CE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),M9=new re({}),E9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),w9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),AE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),A9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),LE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[nSt]},$$scope:{ctx:L}}}),y9=new re({}),L9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),$9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),$E=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),k9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),S9=new re({}),R9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),B9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[iSt]},$$scope:{ctx:L}}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[dSt]},$$scope:{ctx:L}}}),N9=new re({}),q9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),D9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[cSt]},$$scope:{ctx:L}}}),G9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),xC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[fSt]},$$scope:{ctx:L}}}),O9=new re({}),V9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),kC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[mSt]},$$scope:{ctx:L}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),OC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[gSt]},$$scope:{ctx:L}}}),Q9=new re({}),H9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),J9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),XC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[hSt]},$$scope:{ctx:L}}}),Y9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[pSt]},$$scope:{ctx:L}}}),K9=new re({}),Z9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[_St]},$$scope:{ctx:L}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),g5=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[uSt]},$$scope:{ctx:L}}}),tx=new re({}),ax=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),p5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[bSt]},$$scope:{ctx:L}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),A5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[vSt]},$$scope:{ctx:L}}}),ix=new re({}),dx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),L5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[FSt]},$$scope:{ctx:L}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),N5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[TSt]},$$scope:{ctx:L}}}),gx=new re({}),hx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),_x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),j5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[MSt]},$$scope:{ctx:L}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),H5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ESt]},$$scope:{ctx:L}}}),bx=new re({}),vx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),J5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[CSt]},$$scope:{ctx:L}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),K5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[wSt]},$$scope:{ctx:L}}}),Ex=new re({}),Cx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17302/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),ew=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[ASt]},$$scope:{ctx:L}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ySt]},$$scope:{ctx:L}}}),xx=new re({}),$x=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17302/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17302/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L389"}}),nw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[LSt]},$$scope:{ctx:L}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17302/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17302/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17302/src/transformers/models/auto/auto_factory.py#L417"}}),lw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[xSt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),wA=o("from_pretrained()"),_f=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),AA=o("AutoConfig"),Ln=o(", "),xn=a("a"),yA=o("AutoModel"),pi=o(`, and
`),$n=a("a"),LA=o("AutoTokenizer"),_i=o(" will directly create a class of the relevant architecture. For instance"),uf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),Q$=o("will create a model that is an instance of "),ui=a("a"),H$=o("BertModel"),U$=o("."),Eo=l(),wa=a("p"),J$=o("There is one class of "),bf=a("code"),Y$=o("AutoModel"),uOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),sqe=l(),bi=a("h2"),vf=a("a"),coe=a("span"),F(xA.$$.fragment),bOe=l(),foe=a("span"),vOe=o("Extending the Auto Classes"),lqe=l(),kn=a("p"),FOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),moe=a("code"),TOe=o("NewModel"),MOe=o(", make sure you have a "),goe=a("code"),EOe=o("NewModelConfig"),COe=o(` then you can add those to the auto
classes like this:`),iqe=l(),F($A.$$.fragment),dqe=l(),K$=a("p"),wOe=o("You will then be able to use the auto classes like you would usually do!"),cqe=l(),F(Ff.$$.fragment),fqe=l(),vi=a("h2"),Tf=a("a"),hoe=a("span"),F(kA.$$.fragment),AOe=l(),poe=a("span"),yOe=o("AutoConfig"),mqe=l(),Co=a("div"),F(SA.$$.fragment),LOe=l(),RA=a("p"),xOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Z$=a("a"),$Oe=o("from_pretrained()"),kOe=o(" class method."),SOe=l(),PA=a("p"),ROe=o("This class cannot be instantiated directly using "),_oe=a("code"),POe=o("__init__()"),BOe=o(" (throws an error)."),IOe=l(),Er=a("div"),F(BA.$$.fragment),NOe=l(),uoe=a("p"),qOe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),jOe=l(),Fi=a("p"),DOe=o("The configuration class to instantiate is selected based on the "),boe=a("code"),GOe=o("model_type"),OOe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),voe=a("code"),VOe=o("pretrained_model_name_or_path"),XOe=o(":"),zOe=l(),A=a("ul"),Mf=a("li"),Foe=a("strong"),WOe=o("albert"),QOe=o(" \u2014 "),ek=a("a"),HOe=o("AlbertConfig"),UOe=o(" (ALBERT model)"),JOe=l(),Ef=a("li"),Toe=a("strong"),YOe=o("bart"),KOe=o(" \u2014 "),ok=a("a"),ZOe=o("BartConfig"),eVe=o(" (BART model)"),oVe=l(),Cf=a("li"),Moe=a("strong"),rVe=o("beit"),tVe=o(" \u2014 "),rk=a("a"),aVe=o("BeitConfig"),nVe=o(" (BEiT model)"),sVe=l(),wf=a("li"),Eoe=a("strong"),lVe=o("bert"),iVe=o(" \u2014 "),tk=a("a"),dVe=o("BertConfig"),cVe=o(" (BERT model)"),fVe=l(),Af=a("li"),Coe=a("strong"),mVe=o("bert-generation"),gVe=o(" \u2014 "),ak=a("a"),hVe=o("BertGenerationConfig"),pVe=o(" (Bert Generation model)"),_Ve=l(),yf=a("li"),woe=a("strong"),uVe=o("big_bird"),bVe=o(" \u2014 "),nk=a("a"),vVe=o("BigBirdConfig"),FVe=o(" (BigBird model)"),TVe=l(),Lf=a("li"),Aoe=a("strong"),MVe=o("bigbird_pegasus"),EVe=o(" \u2014 "),sk=a("a"),CVe=o("BigBirdPegasusConfig"),wVe=o(" (BigBirdPegasus model)"),AVe=l(),xf=a("li"),yoe=a("strong"),yVe=o("blenderbot"),LVe=o(" \u2014 "),lk=a("a"),xVe=o("BlenderbotConfig"),$Ve=o(" (Blenderbot model)"),kVe=l(),$f=a("li"),Loe=a("strong"),SVe=o("blenderbot-small"),RVe=o(" \u2014 "),ik=a("a"),PVe=o("BlenderbotSmallConfig"),BVe=o(" (BlenderbotSmall model)"),IVe=l(),kf=a("li"),xoe=a("strong"),NVe=o("camembert"),qVe=o(" \u2014 "),dk=a("a"),jVe=o("CamembertConfig"),DVe=o(" (CamemBERT model)"),GVe=l(),Sf=a("li"),$oe=a("strong"),OVe=o("canine"),VVe=o(" \u2014 "),ck=a("a"),XVe=o("CanineConfig"),zVe=o(" (Canine model)"),WVe=l(),Rf=a("li"),koe=a("strong"),QVe=o("clip"),HVe=o(" \u2014 "),fk=a("a"),UVe=o("CLIPConfig"),JVe=o(" (CLIP model)"),YVe=l(),Pf=a("li"),Soe=a("strong"),KVe=o("convbert"),ZVe=o(" \u2014 "),mk=a("a"),eXe=o("ConvBertConfig"),oXe=o(" (ConvBERT model)"),rXe=l(),Bf=a("li"),Roe=a("strong"),tXe=o("convnext"),aXe=o(" \u2014 "),gk=a("a"),nXe=o("ConvNextConfig"),sXe=o(" (ConvNext model)"),lXe=l(),If=a("li"),Poe=a("strong"),iXe=o("ctrl"),dXe=o(" \u2014 "),hk=a("a"),cXe=o("CTRLConfig"),fXe=o(" (CTRL model)"),mXe=l(),Nf=a("li"),Boe=a("strong"),gXe=o("cvt"),hXe=o(" \u2014 "),pk=a("a"),pXe=o("CvtConfig"),_Xe=o(" (CvT model)"),uXe=l(),qf=a("li"),Ioe=a("strong"),bXe=o("data2vec-audio"),vXe=o(" \u2014 "),_k=a("a"),FXe=o("Data2VecAudioConfig"),TXe=o(" (Data2VecAudio model)"),MXe=l(),jf=a("li"),Noe=a("strong"),EXe=o("data2vec-text"),CXe=o(" \u2014 "),uk=a("a"),wXe=o("Data2VecTextConfig"),AXe=o(" (Data2VecText model)"),yXe=l(),Df=a("li"),qoe=a("strong"),LXe=o("data2vec-vision"),xXe=o(" \u2014 "),bk=a("a"),$Xe=o("Data2VecVisionConfig"),kXe=o(" (Data2VecVision model)"),SXe=l(),Gf=a("li"),joe=a("strong"),RXe=o("deberta"),PXe=o(" \u2014 "),vk=a("a"),BXe=o("DebertaConfig"),IXe=o(" (DeBERTa model)"),NXe=l(),Of=a("li"),Doe=a("strong"),qXe=o("deberta-v2"),jXe=o(" \u2014 "),Fk=a("a"),DXe=o("DebertaV2Config"),GXe=o(" (DeBERTa-v2 model)"),OXe=l(),Vf=a("li"),Goe=a("strong"),VXe=o("decision_transformer"),XXe=o(" \u2014 "),Tk=a("a"),zXe=o("DecisionTransformerConfig"),WXe=o(" (Decision Transformer model)"),QXe=l(),Xf=a("li"),Ooe=a("strong"),HXe=o("deit"),UXe=o(" \u2014 "),Mk=a("a"),JXe=o("DeiTConfig"),YXe=o(" (DeiT model)"),KXe=l(),zf=a("li"),Voe=a("strong"),ZXe=o("detr"),eze=o(" \u2014 "),Ek=a("a"),oze=o("DetrConfig"),rze=o(" (DETR model)"),tze=l(),Wf=a("li"),Xoe=a("strong"),aze=o("distilbert"),nze=o(" \u2014 "),Ck=a("a"),sze=o("DistilBertConfig"),lze=o(" (DistilBERT model)"),ize=l(),Qf=a("li"),zoe=a("strong"),dze=o("dpr"),cze=o(" \u2014 "),wk=a("a"),fze=o("DPRConfig"),mze=o(" (DPR model)"),gze=l(),Hf=a("li"),Woe=a("strong"),hze=o("dpt"),pze=o(" \u2014 "),Ak=a("a"),_ze=o("DPTConfig"),uze=o(" (DPT model)"),bze=l(),Uf=a("li"),Qoe=a("strong"),vze=o("electra"),Fze=o(" \u2014 "),yk=a("a"),Tze=o("ElectraConfig"),Mze=o(" (ELECTRA model)"),Eze=l(),Jf=a("li"),Hoe=a("strong"),Cze=o("emformer"),wze=o(" \u2014 "),Lk=a("a"),Aze=o("EmformerConfig"),yze=o(" (Emformer model)"),Lze=l(),Yf=a("li"),Uoe=a("strong"),xze=o("encoder-decoder"),$ze=o(" \u2014 "),xk=a("a"),kze=o("EncoderDecoderConfig"),Sze=o(" (Encoder decoder model)"),Rze=l(),Kf=a("li"),Joe=a("strong"),Pze=o("flaubert"),Bze=o(" \u2014 "),$k=a("a"),Ize=o("FlaubertConfig"),Nze=o(" (FlauBERT model)"),qze=l(),Zf=a("li"),Yoe=a("strong"),jze=o("flava"),Dze=o(" \u2014 "),kk=a("a"),Gze=o("FlavaConfig"),Oze=o(" (Flava model)"),Vze=l(),em=a("li"),Koe=a("strong"),Xze=o("fnet"),zze=o(" \u2014 "),Sk=a("a"),Wze=o("FNetConfig"),Qze=o(" (FNet model)"),Hze=l(),om=a("li"),Zoe=a("strong"),Uze=o("fsmt"),Jze=o(" \u2014 "),Rk=a("a"),Yze=o("FSMTConfig"),Kze=o(" (FairSeq Machine-Translation model)"),Zze=l(),rm=a("li"),ere=a("strong"),eWe=o("funnel"),oWe=o(" \u2014 "),Pk=a("a"),rWe=o("FunnelConfig"),tWe=o(" (Funnel Transformer model)"),aWe=l(),tm=a("li"),ore=a("strong"),nWe=o("glpn"),sWe=o(" \u2014 "),Bk=a("a"),lWe=o("GLPNConfig"),iWe=o(" (GLPN model)"),dWe=l(),am=a("li"),rre=a("strong"),cWe=o("gpt2"),fWe=o(" \u2014 "),Ik=a("a"),mWe=o("GPT2Config"),gWe=o(" (OpenAI GPT-2 model)"),hWe=l(),nm=a("li"),tre=a("strong"),pWe=o("gpt_neo"),_We=o(" \u2014 "),Nk=a("a"),uWe=o("GPTNeoConfig"),bWe=o(" (GPT Neo model)"),vWe=l(),sm=a("li"),are=a("strong"),FWe=o("gpt_neox"),TWe=o(" \u2014 "),qk=a("a"),MWe=o("GPTNeoXConfig"),EWe=o(" (GPT NeoX model)"),CWe=l(),lm=a("li"),nre=a("strong"),wWe=o("gptj"),AWe=o(" \u2014 "),jk=a("a"),yWe=o("GPTJConfig"),LWe=o(" (GPT-J model)"),xWe=l(),im=a("li"),sre=a("strong"),$We=o("hubert"),kWe=o(" \u2014 "),Dk=a("a"),SWe=o("HubertConfig"),RWe=o(" (Hubert model)"),PWe=l(),dm=a("li"),lre=a("strong"),BWe=o("ibert"),IWe=o(" \u2014 "),Gk=a("a"),NWe=o("IBertConfig"),qWe=o(" (I-BERT model)"),jWe=l(),cm=a("li"),ire=a("strong"),DWe=o("imagegpt"),GWe=o(" \u2014 "),Ok=a("a"),OWe=o("ImageGPTConfig"),VWe=o(" (ImageGPT model)"),XWe=l(),fm=a("li"),dre=a("strong"),zWe=o("layoutlm"),WWe=o(" \u2014 "),Vk=a("a"),QWe=o("LayoutLMConfig"),HWe=o(" (LayoutLM model)"),UWe=l(),mm=a("li"),cre=a("strong"),JWe=o("layoutlmv2"),YWe=o(" \u2014 "),Xk=a("a"),KWe=o("LayoutLMv2Config"),ZWe=o(" (LayoutLMv2 model)"),eQe=l(),gm=a("li"),fre=a("strong"),oQe=o("layoutlmv3"),rQe=o(" \u2014 "),zk=a("a"),tQe=o("LayoutLMv3Config"),aQe=o(" (LayoutLMv3 model)"),nQe=l(),hm=a("li"),mre=a("strong"),sQe=o("led"),lQe=o(" \u2014 "),Wk=a("a"),iQe=o("LEDConfig"),dQe=o(" (LED model)"),cQe=l(),pm=a("li"),gre=a("strong"),fQe=o("longformer"),mQe=o(" \u2014 "),Qk=a("a"),gQe=o("LongformerConfig"),hQe=o(" (Longformer model)"),pQe=l(),_m=a("li"),hre=a("strong"),_Qe=o("luke"),uQe=o(" \u2014 "),Hk=a("a"),bQe=o("LukeConfig"),vQe=o(" (LUKE model)"),FQe=l(),um=a("li"),pre=a("strong"),TQe=o("lxmert"),MQe=o(" \u2014 "),Uk=a("a"),EQe=o("LxmertConfig"),CQe=o(" (LXMERT model)"),wQe=l(),bm=a("li"),_re=a("strong"),AQe=o("m2m_100"),yQe=o(" \u2014 "),Jk=a("a"),LQe=o("M2M100Config"),xQe=o(" (M2M100 model)"),$Qe=l(),vm=a("li"),ure=a("strong"),kQe=o("marian"),SQe=o(" \u2014 "),Yk=a("a"),RQe=o("MarianConfig"),PQe=o(" (Marian model)"),BQe=l(),Fm=a("li"),bre=a("strong"),IQe=o("maskformer"),NQe=o(" \u2014 "),Kk=a("a"),qQe=o("MaskFormerConfig"),jQe=o(" (MaskFormer model)"),DQe=l(),Tm=a("li"),vre=a("strong"),GQe=o("mbart"),OQe=o(" \u2014 "),Zk=a("a"),VQe=o("MBartConfig"),XQe=o(" (mBART model)"),zQe=l(),Mm=a("li"),Fre=a("strong"),WQe=o("megatron-bert"),QQe=o(" \u2014 "),eS=a("a"),HQe=o("MegatronBertConfig"),UQe=o(" (MegatronBert model)"),JQe=l(),Em=a("li"),Tre=a("strong"),YQe=o("mobilebert"),KQe=o(" \u2014 "),oS=a("a"),ZQe=o("MobileBertConfig"),eHe=o(" (MobileBERT model)"),oHe=l(),Cm=a("li"),Mre=a("strong"),rHe=o("mpnet"),tHe=o(" \u2014 "),rS=a("a"),aHe=o("MPNetConfig"),nHe=o(" (MPNet model)"),sHe=l(),wm=a("li"),Ere=a("strong"),lHe=o("mt5"),iHe=o(" \u2014 "),tS=a("a"),dHe=o("MT5Config"),cHe=o(" (mT5 model)"),fHe=l(),Am=a("li"),Cre=a("strong"),mHe=o("nystromformer"),gHe=o(" \u2014 "),aS=a("a"),hHe=o("NystromformerConfig"),pHe=o(" (Nystromformer model)"),_He=l(),ym=a("li"),wre=a("strong"),uHe=o("openai-gpt"),bHe=o(" \u2014 "),nS=a("a"),vHe=o("OpenAIGPTConfig"),FHe=o(" (OpenAI GPT model)"),THe=l(),Lm=a("li"),Are=a("strong"),MHe=o("opt"),EHe=o(" \u2014 "),sS=a("a"),CHe=o("OPTConfig"),wHe=o(" (OPT model)"),AHe=l(),xm=a("li"),yre=a("strong"),yHe=o("pegasus"),LHe=o(" \u2014 "),lS=a("a"),xHe=o("PegasusConfig"),$He=o(" (Pegasus model)"),kHe=l(),$m=a("li"),Lre=a("strong"),SHe=o("perceiver"),RHe=o(" \u2014 "),iS=a("a"),PHe=o("PerceiverConfig"),BHe=o(" (Perceiver model)"),IHe=l(),km=a("li"),xre=a("strong"),NHe=o("plbart"),qHe=o(" \u2014 "),dS=a("a"),jHe=o("PLBartConfig"),DHe=o(" (PLBart model)"),GHe=l(),Sm=a("li"),$re=a("strong"),OHe=o("poolformer"),VHe=o(" \u2014 "),cS=a("a"),XHe=o("PoolFormerConfig"),zHe=o(" (PoolFormer model)"),WHe=l(),Rm=a("li"),kre=a("strong"),QHe=o("prophetnet"),HHe=o(" \u2014 "),fS=a("a"),UHe=o("ProphetNetConfig"),JHe=o(" (ProphetNet model)"),YHe=l(),Pm=a("li"),Sre=a("strong"),KHe=o("qdqbert"),ZHe=o(" \u2014 "),mS=a("a"),eUe=o("QDQBertConfig"),oUe=o(" (QDQBert model)"),rUe=l(),Bm=a("li"),Rre=a("strong"),tUe=o("rag"),aUe=o(" \u2014 "),gS=a("a"),nUe=o("RagConfig"),sUe=o(" (RAG model)"),lUe=l(),Im=a("li"),Pre=a("strong"),iUe=o("realm"),dUe=o(" \u2014 "),hS=a("a"),cUe=o("RealmConfig"),fUe=o(" (Realm model)"),mUe=l(),Nm=a("li"),Bre=a("strong"),gUe=o("reformer"),hUe=o(" \u2014 "),pS=a("a"),pUe=o("ReformerConfig"),_Ue=o(" (Reformer model)"),uUe=l(),qm=a("li"),Ire=a("strong"),bUe=o("regnet"),vUe=o(" \u2014 "),_S=a("a"),FUe=o("RegNetConfig"),TUe=o(" (RegNet model)"),MUe=l(),jm=a("li"),Nre=a("strong"),EUe=o("rembert"),CUe=o(" \u2014 "),uS=a("a"),wUe=o("RemBertConfig"),AUe=o(" (RemBERT model)"),yUe=l(),Dm=a("li"),qre=a("strong"),LUe=o("resnet"),xUe=o(" \u2014 "),bS=a("a"),$Ue=o("ResNetConfig"),kUe=o(" (ResNet model)"),SUe=l(),Gm=a("li"),jre=a("strong"),RUe=o("retribert"),PUe=o(" \u2014 "),vS=a("a"),BUe=o("RetriBertConfig"),IUe=o(" (RetriBERT model)"),NUe=l(),Om=a("li"),Dre=a("strong"),qUe=o("roberta"),jUe=o(" \u2014 "),FS=a("a"),DUe=o("RobertaConfig"),GUe=o(" (RoBERTa model)"),OUe=l(),Vm=a("li"),Gre=a("strong"),VUe=o("roformer"),XUe=o(" \u2014 "),TS=a("a"),zUe=o("RoFormerConfig"),WUe=o(" (RoFormer model)"),QUe=l(),Xm=a("li"),Ore=a("strong"),HUe=o("segformer"),UUe=o(" \u2014 "),MS=a("a"),JUe=o("SegformerConfig"),YUe=o(" (SegFormer model)"),KUe=l(),zm=a("li"),Vre=a("strong"),ZUe=o("sew"),eJe=o(" \u2014 "),ES=a("a"),oJe=o("SEWConfig"),rJe=o(" (SEW model)"),tJe=l(),Wm=a("li"),Xre=a("strong"),aJe=o("sew-d"),nJe=o(" \u2014 "),CS=a("a"),sJe=o("SEWDConfig"),lJe=o(" (SEW-D model)"),iJe=l(),Qm=a("li"),zre=a("strong"),dJe=o("speech-encoder-decoder"),cJe=o(" \u2014 "),wS=a("a"),fJe=o("SpeechEncoderDecoderConfig"),mJe=o(" (Speech Encoder decoder model)"),gJe=l(),Hm=a("li"),Wre=a("strong"),hJe=o("speech_to_text"),pJe=o(" \u2014 "),AS=a("a"),_Je=o("Speech2TextConfig"),uJe=o(" (Speech2Text model)"),bJe=l(),Um=a("li"),Qre=a("strong"),vJe=o("speech_to_text_2"),FJe=o(" \u2014 "),yS=a("a"),TJe=o("Speech2Text2Config"),MJe=o(" (Speech2Text2 model)"),EJe=l(),Jm=a("li"),Hre=a("strong"),CJe=o("splinter"),wJe=o(" \u2014 "),LS=a("a"),AJe=o("SplinterConfig"),yJe=o(" (Splinter model)"),LJe=l(),Ym=a("li"),Ure=a("strong"),xJe=o("squeezebert"),$Je=o(" \u2014 "),xS=a("a"),kJe=o("SqueezeBertConfig"),SJe=o(" (SqueezeBERT model)"),RJe=l(),Km=a("li"),Jre=a("strong"),PJe=o("swin"),BJe=o(" \u2014 "),$S=a("a"),IJe=o("SwinConfig"),NJe=o(" (Swin model)"),qJe=l(),Zm=a("li"),Yre=a("strong"),jJe=o("t5"),DJe=o(" \u2014 "),kS=a("a"),GJe=o("T5Config"),OJe=o(" (T5 model)"),VJe=l(),eg=a("li"),Kre=a("strong"),XJe=o("tapas"),zJe=o(" \u2014 "),SS=a("a"),WJe=o("TapasConfig"),QJe=o(" (TAPAS model)"),HJe=l(),og=a("li"),Zre=a("strong"),UJe=o("trajectory_transformer"),JJe=o(" \u2014 "),RS=a("a"),YJe=o("TrajectoryTransformerConfig"),KJe=o(" (Trajectory Transformer model)"),ZJe=l(),rg=a("li"),ete=a("strong"),eYe=o("transfo-xl"),oYe=o(" \u2014 "),PS=a("a"),rYe=o("TransfoXLConfig"),tYe=o(" (Transformer-XL model)"),aYe=l(),tg=a("li"),ote=a("strong"),nYe=o("trocr"),sYe=o(" \u2014 "),BS=a("a"),lYe=o("TrOCRConfig"),iYe=o(" (TrOCR model)"),dYe=l(),ag=a("li"),rte=a("strong"),cYe=o("unispeech"),fYe=o(" \u2014 "),IS=a("a"),mYe=o("UniSpeechConfig"),gYe=o(" (UniSpeech model)"),hYe=l(),ng=a("li"),tte=a("strong"),pYe=o("unispeech-sat"),_Ye=o(" \u2014 "),NS=a("a"),uYe=o("UniSpeechSatConfig"),bYe=o(" (UniSpeechSat model)"),vYe=l(),sg=a("li"),ate=a("strong"),FYe=o("van"),TYe=o(" \u2014 "),qS=a("a"),MYe=o("VanConfig"),EYe=o(" (VAN model)"),CYe=l(),lg=a("li"),nte=a("strong"),wYe=o("vilt"),AYe=o(" \u2014 "),jS=a("a"),yYe=o("ViltConfig"),LYe=o(" (ViLT model)"),xYe=l(),ig=a("li"),ste=a("strong"),$Ye=o("vision-encoder-decoder"),kYe=o(" \u2014 "),DS=a("a"),SYe=o("VisionEncoderDecoderConfig"),RYe=o(" (Vision Encoder decoder model)"),PYe=l(),dg=a("li"),lte=a("strong"),BYe=o("vision-text-dual-encoder"),IYe=o(" \u2014 "),GS=a("a"),NYe=o("VisionTextDualEncoderConfig"),qYe=o(" (VisionTextDualEncoder model)"),jYe=l(),cg=a("li"),ite=a("strong"),DYe=o("visual_bert"),GYe=o(" \u2014 "),OS=a("a"),OYe=o("VisualBertConfig"),VYe=o(" (VisualBert model)"),XYe=l(),fg=a("li"),dte=a("strong"),zYe=o("vit"),WYe=o(" \u2014 "),VS=a("a"),QYe=o("ViTConfig"),HYe=o(" (ViT model)"),UYe=l(),mg=a("li"),cte=a("strong"),JYe=o("vit_mae"),YYe=o(" \u2014 "),XS=a("a"),KYe=o("ViTMAEConfig"),ZYe=o(" (ViTMAE model)"),eKe=l(),gg=a("li"),fte=a("strong"),oKe=o("wav2vec2"),rKe=o(" \u2014 "),zS=a("a"),tKe=o("Wav2Vec2Config"),aKe=o(" (Wav2Vec2 model)"),nKe=l(),hg=a("li"),mte=a("strong"),sKe=o("wav2vec2-conformer"),lKe=o(" \u2014 "),WS=a("a"),iKe=o("Wav2Vec2ConformerConfig"),dKe=o(" (Wav2Vec2-Conformer model)"),cKe=l(),pg=a("li"),gte=a("strong"),fKe=o("wavlm"),mKe=o(" \u2014 "),QS=a("a"),gKe=o("WavLMConfig"),hKe=o(" (WavLM model)"),pKe=l(),_g=a("li"),hte=a("strong"),_Ke=o("xglm"),uKe=o(" \u2014 "),HS=a("a"),bKe=o("XGLMConfig"),vKe=o(" (XGLM model)"),FKe=l(),ug=a("li"),pte=a("strong"),TKe=o("xlm"),MKe=o(" \u2014 "),US=a("a"),EKe=o("XLMConfig"),CKe=o(" (XLM model)"),wKe=l(),bg=a("li"),_te=a("strong"),AKe=o("xlm-prophetnet"),yKe=o(" \u2014 "),JS=a("a"),LKe=o("XLMProphetNetConfig"),xKe=o(" (XLMProphetNet model)"),$Ke=l(),vg=a("li"),ute=a("strong"),kKe=o("xlm-roberta"),SKe=o(" \u2014 "),YS=a("a"),RKe=o("XLMRobertaConfig"),PKe=o(" (XLM-RoBERTa model)"),BKe=l(),Fg=a("li"),bte=a("strong"),IKe=o("xlm-roberta-xl"),NKe=o(" \u2014 "),KS=a("a"),qKe=o("XLMRobertaXLConfig"),jKe=o(" (XLM-RoBERTa-XL model)"),DKe=l(),Tg=a("li"),vte=a("strong"),GKe=o("xlnet"),OKe=o(" \u2014 "),ZS=a("a"),VKe=o("XLNetConfig"),XKe=o(" (XLNet model)"),zKe=l(),Mg=a("li"),Fte=a("strong"),WKe=o("yolos"),QKe=o(" \u2014 "),eR=a("a"),HKe=o("YolosConfig"),UKe=o(" (YOLOS model)"),JKe=l(),Eg=a("li"),Tte=a("strong"),YKe=o("yoso"),KKe=o(" \u2014 "),oR=a("a"),ZKe=o("YosoConfig"),eZe=o(" (YOSO model)"),oZe=l(),F(Cg.$$.fragment),rZe=l(),wg=a("div"),F(IA.$$.fragment),tZe=l(),Mte=a("p"),aZe=o("Register a new configuration for this class."),gqe=l(),Ti=a("h2"),Ag=a("a"),Ete=a("span"),F(NA.$$.fragment),nZe=l(),Cte=a("span"),sZe=o("AutoTokenizer"),hqe=l(),wo=a("div"),F(qA.$$.fragment),lZe=l(),jA=a("p"),iZe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),rR=a("a"),dZe=o("AutoTokenizer.from_pretrained()"),cZe=o(" class method."),fZe=l(),DA=a("p"),mZe=o("This class cannot be instantiated directly using "),wte=a("code"),gZe=o("__init__()"),hZe=o(" (throws an error)."),pZe=l(),Cr=a("div"),F(GA.$$.fragment),_Ze=l(),Ate=a("p"),uZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),bZe=l(),Aa=a("p"),vZe=o("The tokenizer class to instantiate is selected based on the "),yte=a("code"),FZe=o("model_type"),TZe=o(` property of the config object (either
passed as an argument or loaded from `),Lte=a("code"),MZe=o("pretrained_model_name_or_path"),EZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xte=a("code"),CZe=o("pretrained_model_name_or_path"),wZe=o(":"),AZe=l(),k=a("ul"),Sn=a("li"),$te=a("strong"),yZe=o("albert"),LZe=o(" \u2014 "),tR=a("a"),xZe=o("AlbertTokenizer"),$Ze=o(" or "),aR=a("a"),kZe=o("AlbertTokenizerFast"),SZe=o(" (ALBERT model)"),RZe=l(),Rn=a("li"),kte=a("strong"),PZe=o("bart"),BZe=o(" \u2014 "),nR=a("a"),IZe=o("BartTokenizer"),NZe=o(" or "),sR=a("a"),qZe=o("BartTokenizerFast"),jZe=o(" (BART model)"),DZe=l(),Pn=a("li"),Ste=a("strong"),GZe=o("barthez"),OZe=o(" \u2014 "),lR=a("a"),VZe=o("BarthezTokenizer"),XZe=o(" or "),iR=a("a"),zZe=o("BarthezTokenizerFast"),WZe=o(" (BARThez model)"),QZe=l(),yg=a("li"),Rte=a("strong"),HZe=o("bartpho"),UZe=o(" \u2014 "),dR=a("a"),JZe=o("BartphoTokenizer"),YZe=o(" (BARTpho model)"),KZe=l(),Bn=a("li"),Pte=a("strong"),ZZe=o("bert"),eeo=o(" \u2014 "),cR=a("a"),oeo=o("BertTokenizer"),reo=o(" or "),fR=a("a"),teo=o("BertTokenizerFast"),aeo=o(" (BERT model)"),neo=l(),Lg=a("li"),Bte=a("strong"),seo=o("bert-generation"),leo=o(" \u2014 "),mR=a("a"),ieo=o("BertGenerationTokenizer"),deo=o(" (Bert Generation model)"),ceo=l(),xg=a("li"),Ite=a("strong"),feo=o("bert-japanese"),meo=o(" \u2014 "),gR=a("a"),geo=o("BertJapaneseTokenizer"),heo=o(" (BertJapanese model)"),peo=l(),$g=a("li"),Nte=a("strong"),_eo=o("bertweet"),ueo=o(" \u2014 "),hR=a("a"),beo=o("BertweetTokenizer"),veo=o(" (Bertweet model)"),Feo=l(),In=a("li"),qte=a("strong"),Teo=o("big_bird"),Meo=o(" \u2014 "),pR=a("a"),Eeo=o("BigBirdTokenizer"),Ceo=o(" or "),_R=a("a"),weo=o("BigBirdTokenizerFast"),Aeo=o(" (BigBird model)"),yeo=l(),Nn=a("li"),jte=a("strong"),Leo=o("bigbird_pegasus"),xeo=o(" \u2014 "),uR=a("a"),$eo=o("PegasusTokenizer"),keo=o(" or "),bR=a("a"),Seo=o("PegasusTokenizerFast"),Reo=o(" (BigBirdPegasus model)"),Peo=l(),qn=a("li"),Dte=a("strong"),Beo=o("blenderbot"),Ieo=o(" \u2014 "),vR=a("a"),Neo=o("BlenderbotTokenizer"),qeo=o(" or "),FR=a("a"),jeo=o("BlenderbotTokenizerFast"),Deo=o(" (Blenderbot model)"),Geo=l(),kg=a("li"),Gte=a("strong"),Oeo=o("blenderbot-small"),Veo=o(" \u2014 "),TR=a("a"),Xeo=o("BlenderbotSmallTokenizer"),zeo=o(" (BlenderbotSmall model)"),Weo=l(),Sg=a("li"),Ote=a("strong"),Qeo=o("byt5"),Heo=o(" \u2014 "),MR=a("a"),Ueo=o("ByT5Tokenizer"),Jeo=o(" (ByT5 model)"),Yeo=l(),jn=a("li"),Vte=a("strong"),Keo=o("camembert"),Zeo=o(" \u2014 "),ER=a("a"),eoo=o("CamembertTokenizer"),ooo=o(" or "),CR=a("a"),roo=o("CamembertTokenizerFast"),too=o(" (CamemBERT model)"),aoo=l(),Rg=a("li"),Xte=a("strong"),noo=o("canine"),soo=o(" \u2014 "),wR=a("a"),loo=o("CanineTokenizer"),ioo=o(" (Canine model)"),doo=l(),Dn=a("li"),zte=a("strong"),coo=o("clip"),foo=o(" \u2014 "),AR=a("a"),moo=o("CLIPTokenizer"),goo=o(" or "),yR=a("a"),hoo=o("CLIPTokenizerFast"),poo=o(" (CLIP model)"),_oo=l(),Gn=a("li"),Wte=a("strong"),uoo=o("convbert"),boo=o(" \u2014 "),LR=a("a"),voo=o("ConvBertTokenizer"),Foo=o(" or "),xR=a("a"),Too=o("ConvBertTokenizerFast"),Moo=o(" (ConvBERT model)"),Eoo=l(),On=a("li"),Qte=a("strong"),Coo=o("cpm"),woo=o(" \u2014 "),$R=a("a"),Aoo=o("CpmTokenizer"),yoo=o(" or "),kR=a("a"),Loo=o("CpmTokenizerFast"),xoo=o(" (CPM model)"),$oo=l(),Pg=a("li"),Hte=a("strong"),koo=o("ctrl"),Soo=o(" \u2014 "),SR=a("a"),Roo=o("CTRLTokenizer"),Poo=o(" (CTRL model)"),Boo=l(),Vn=a("li"),Ute=a("strong"),Ioo=o("data2vec-text"),Noo=o(" \u2014 "),RR=a("a"),qoo=o("RobertaTokenizer"),joo=o(" or "),PR=a("a"),Doo=o("RobertaTokenizerFast"),Goo=o(" (Data2VecText model)"),Ooo=l(),Xn=a("li"),Jte=a("strong"),Voo=o("deberta"),Xoo=o(" \u2014 "),BR=a("a"),zoo=o("DebertaTokenizer"),Woo=o(" or "),IR=a("a"),Qoo=o("DebertaTokenizerFast"),Hoo=o(" (DeBERTa model)"),Uoo=l(),zn=a("li"),Yte=a("strong"),Joo=o("deberta-v2"),Yoo=o(" \u2014 "),NR=a("a"),Koo=o("DebertaV2Tokenizer"),Zoo=o(" or "),qR=a("a"),ero=o("DebertaV2TokenizerFast"),oro=o(" (DeBERTa-v2 model)"),rro=l(),Wn=a("li"),Kte=a("strong"),tro=o("distilbert"),aro=o(" \u2014 "),jR=a("a"),nro=o("DistilBertTokenizer"),sro=o(" or "),DR=a("a"),lro=o("DistilBertTokenizerFast"),iro=o(" (DistilBERT model)"),dro=l(),Qn=a("li"),Zte=a("strong"),cro=o("dpr"),fro=o(" \u2014 "),GR=a("a"),mro=o("DPRQuestionEncoderTokenizer"),gro=o(" or "),OR=a("a"),hro=o("DPRQuestionEncoderTokenizerFast"),pro=o(" (DPR model)"),_ro=l(),Hn=a("li"),eae=a("strong"),uro=o("electra"),bro=o(" \u2014 "),VR=a("a"),vro=o("ElectraTokenizer"),Fro=o(" or "),XR=a("a"),Tro=o("ElectraTokenizerFast"),Mro=o(" (ELECTRA model)"),Ero=l(),Bg=a("li"),oae=a("strong"),Cro=o("flaubert"),wro=o(" \u2014 "),zR=a("a"),Aro=o("FlaubertTokenizer"),yro=o(" (FlauBERT model)"),Lro=l(),Un=a("li"),rae=a("strong"),xro=o("fnet"),$ro=o(" \u2014 "),WR=a("a"),kro=o("FNetTokenizer"),Sro=o(" or "),QR=a("a"),Rro=o("FNetTokenizerFast"),Pro=o(" (FNet model)"),Bro=l(),Ig=a("li"),tae=a("strong"),Iro=o("fsmt"),Nro=o(" \u2014 "),HR=a("a"),qro=o("FSMTTokenizer"),jro=o(" (FairSeq Machine-Translation model)"),Dro=l(),Jn=a("li"),aae=a("strong"),Gro=o("funnel"),Oro=o(" \u2014 "),UR=a("a"),Vro=o("FunnelTokenizer"),Xro=o(" or "),JR=a("a"),zro=o("FunnelTokenizerFast"),Wro=o(" (Funnel Transformer model)"),Qro=l(),Yn=a("li"),nae=a("strong"),Hro=o("gpt2"),Uro=o(" \u2014 "),YR=a("a"),Jro=o("GPT2Tokenizer"),Yro=o(" or "),KR=a("a"),Kro=o("GPT2TokenizerFast"),Zro=o(" (OpenAI GPT-2 model)"),eto=l(),Kn=a("li"),sae=a("strong"),oto=o("gpt_neo"),rto=o(" \u2014 "),ZR=a("a"),tto=o("GPT2Tokenizer"),ato=o(" or "),eP=a("a"),nto=o("GPT2TokenizerFast"),sto=o(" (GPT Neo model)"),lto=l(),Ng=a("li"),lae=a("strong"),ito=o("gpt_neox"),dto=o(" \u2014 "),oP=a("a"),cto=o("GPTNeoXTokenizerFast"),fto=o(" (GPT NeoX model)"),mto=l(),Zn=a("li"),iae=a("strong"),gto=o("gptj"),hto=o(" \u2014 "),rP=a("a"),pto=o("GPT2Tokenizer"),_to=o(" or "),tP=a("a"),uto=o("GPT2TokenizerFast"),bto=o(" (GPT-J model)"),vto=l(),es=a("li"),dae=a("strong"),Fto=o("herbert"),Tto=o(" \u2014 "),aP=a("a"),Mto=o("HerbertTokenizer"),Eto=o(" or "),nP=a("a"),Cto=o("HerbertTokenizerFast"),wto=o(" (HerBERT model)"),Ato=l(),qg=a("li"),cae=a("strong"),yto=o("hubert"),Lto=o(" \u2014 "),sP=a("a"),xto=o("Wav2Vec2CTCTokenizer"),$to=o(" (Hubert model)"),kto=l(),os=a("li"),fae=a("strong"),Sto=o("ibert"),Rto=o(" \u2014 "),lP=a("a"),Pto=o("RobertaTokenizer"),Bto=o(" or "),iP=a("a"),Ito=o("RobertaTokenizerFast"),Nto=o(" (I-BERT model)"),qto=l(),rs=a("li"),mae=a("strong"),jto=o("layoutlm"),Dto=o(" \u2014 "),dP=a("a"),Gto=o("LayoutLMTokenizer"),Oto=o(" or "),cP=a("a"),Vto=o("LayoutLMTokenizerFast"),Xto=o(" (LayoutLM model)"),zto=l(),ts=a("li"),gae=a("strong"),Wto=o("layoutlmv2"),Qto=o(" \u2014 "),fP=a("a"),Hto=o("LayoutLMv2Tokenizer"),Uto=o(" or "),mP=a("a"),Jto=o("LayoutLMv2TokenizerFast"),Yto=o(" (LayoutLMv2 model)"),Kto=l(),as=a("li"),hae=a("strong"),Zto=o("layoutlmv3"),eao=o(" \u2014 "),gP=a("a"),oao=o("LayoutLMv3Tokenizer"),rao=o(" or "),hP=a("a"),tao=o("LayoutLMv3TokenizerFast"),aao=o(" (LayoutLMv3 model)"),nao=l(),ns=a("li"),pae=a("strong"),sao=o("layoutxlm"),lao=o(" \u2014 "),pP=a("a"),iao=o("LayoutXLMTokenizer"),dao=o(" or "),_P=a("a"),cao=o("LayoutXLMTokenizerFast"),fao=o(" (LayoutXLM model)"),mao=l(),ss=a("li"),_ae=a("strong"),gao=o("led"),hao=o(" \u2014 "),uP=a("a"),pao=o("LEDTokenizer"),_ao=o(" or "),bP=a("a"),uao=o("LEDTokenizerFast"),bao=o(" (LED model)"),vao=l(),ls=a("li"),uae=a("strong"),Fao=o("longformer"),Tao=o(" \u2014 "),vP=a("a"),Mao=o("LongformerTokenizer"),Eao=o(" or "),FP=a("a"),Cao=o("LongformerTokenizerFast"),wao=o(" (Longformer model)"),Aao=l(),jg=a("li"),bae=a("strong"),yao=o("luke"),Lao=o(" \u2014 "),TP=a("a"),xao=o("LukeTokenizer"),$ao=o(" (LUKE model)"),kao=l(),is=a("li"),vae=a("strong"),Sao=o("lxmert"),Rao=o(" \u2014 "),MP=a("a"),Pao=o("LxmertTokenizer"),Bao=o(" or "),EP=a("a"),Iao=o("LxmertTokenizerFast"),Nao=o(" (LXMERT model)"),qao=l(),Dg=a("li"),Fae=a("strong"),jao=o("m2m_100"),Dao=o(" \u2014 "),CP=a("a"),Gao=o("M2M100Tokenizer"),Oao=o(" (M2M100 model)"),Vao=l(),Gg=a("li"),Tae=a("strong"),Xao=o("marian"),zao=o(" \u2014 "),wP=a("a"),Wao=o("MarianTokenizer"),Qao=o(" (Marian model)"),Hao=l(),ds=a("li"),Mae=a("strong"),Uao=o("mbart"),Jao=o(" \u2014 "),AP=a("a"),Yao=o("MBartTokenizer"),Kao=o(" or "),yP=a("a"),Zao=o("MBartTokenizerFast"),eno=o(" (mBART model)"),ono=l(),cs=a("li"),Eae=a("strong"),rno=o("mbart50"),tno=o(" \u2014 "),LP=a("a"),ano=o("MBart50Tokenizer"),nno=o(" or "),xP=a("a"),sno=o("MBart50TokenizerFast"),lno=o(" (mBART-50 model)"),ino=l(),fs=a("li"),Cae=a("strong"),dno=o("megatron-bert"),cno=o(" \u2014 "),$P=a("a"),fno=o("BertTokenizer"),mno=o(" or "),kP=a("a"),gno=o("BertTokenizerFast"),hno=o(" (MegatronBert model)"),pno=l(),Og=a("li"),wae=a("strong"),_no=o("mluke"),uno=o(" \u2014 "),SP=a("a"),bno=o("MLukeTokenizer"),vno=o(" (mLUKE model)"),Fno=l(),ms=a("li"),Aae=a("strong"),Tno=o("mobilebert"),Mno=o(" \u2014 "),RP=a("a"),Eno=o("MobileBertTokenizer"),Cno=o(" or "),PP=a("a"),wno=o("MobileBertTokenizerFast"),Ano=o(" (MobileBERT model)"),yno=l(),gs=a("li"),yae=a("strong"),Lno=o("mpnet"),xno=o(" \u2014 "),BP=a("a"),$no=o("MPNetTokenizer"),kno=o(" or "),IP=a("a"),Sno=o("MPNetTokenizerFast"),Rno=o(" (MPNet model)"),Pno=l(),hs=a("li"),Lae=a("strong"),Bno=o("mt5"),Ino=o(" \u2014 "),NP=a("a"),Nno=o("MT5Tokenizer"),qno=o(" or "),qP=a("a"),jno=o("MT5TokenizerFast"),Dno=o(" (mT5 model)"),Gno=l(),ps=a("li"),xae=a("strong"),Ono=o("nystromformer"),Vno=o(" \u2014 "),jP=a("a"),Xno=o("AlbertTokenizer"),zno=o(" or "),DP=a("a"),Wno=o("AlbertTokenizerFast"),Qno=o(" (Nystromformer model)"),Hno=l(),_s=a("li"),$ae=a("strong"),Uno=o("openai-gpt"),Jno=o(" \u2014 "),GP=a("a"),Yno=o("OpenAIGPTTokenizer"),Kno=o(" or "),OP=a("a"),Zno=o("OpenAIGPTTokenizerFast"),eso=o(" (OpenAI GPT model)"),oso=l(),Vg=a("li"),kae=a("strong"),rso=o("opt"),tso=o(" \u2014 "),VP=a("a"),aso=o("GPT2Tokenizer"),nso=o(" (OPT model)"),sso=l(),us=a("li"),Sae=a("strong"),lso=o("pegasus"),iso=o(" \u2014 "),XP=a("a"),dso=o("PegasusTokenizer"),cso=o(" or "),zP=a("a"),fso=o("PegasusTokenizerFast"),mso=o(" (Pegasus model)"),gso=l(),Xg=a("li"),Rae=a("strong"),hso=o("perceiver"),pso=o(" \u2014 "),WP=a("a"),_so=o("PerceiverTokenizer"),uso=o(" (Perceiver model)"),bso=l(),zg=a("li"),Pae=a("strong"),vso=o("phobert"),Fso=o(" \u2014 "),QP=a("a"),Tso=o("PhobertTokenizer"),Mso=o(" (PhoBERT model)"),Eso=l(),Wg=a("li"),Bae=a("strong"),Cso=o("plbart"),wso=o(" \u2014 "),HP=a("a"),Aso=o("PLBartTokenizer"),yso=o(" (PLBart model)"),Lso=l(),Qg=a("li"),Iae=a("strong"),xso=o("prophetnet"),$so=o(" \u2014 "),UP=a("a"),kso=o("ProphetNetTokenizer"),Sso=o(" (ProphetNet model)"),Rso=l(),bs=a("li"),Nae=a("strong"),Pso=o("qdqbert"),Bso=o(" \u2014 "),JP=a("a"),Iso=o("BertTokenizer"),Nso=o(" or "),YP=a("a"),qso=o("BertTokenizerFast"),jso=o(" (QDQBert model)"),Dso=l(),Hg=a("li"),qae=a("strong"),Gso=o("rag"),Oso=o(" \u2014 "),KP=a("a"),Vso=o("RagTokenizer"),Xso=o(" (RAG model)"),zso=l(),vs=a("li"),jae=a("strong"),Wso=o("realm"),Qso=o(" \u2014 "),ZP=a("a"),Hso=o("RealmTokenizer"),Uso=o(" or "),eB=a("a"),Jso=o("RealmTokenizerFast"),Yso=o(" (Realm model)"),Kso=l(),Fs=a("li"),Dae=a("strong"),Zso=o("reformer"),elo=o(" \u2014 "),oB=a("a"),olo=o("ReformerTokenizer"),rlo=o(" or "),rB=a("a"),tlo=o("ReformerTokenizerFast"),alo=o(" (Reformer model)"),nlo=l(),Ts=a("li"),Gae=a("strong"),slo=o("rembert"),llo=o(" \u2014 "),tB=a("a"),ilo=o("RemBertTokenizer"),dlo=o(" or "),aB=a("a"),clo=o("RemBertTokenizerFast"),flo=o(" (RemBERT model)"),mlo=l(),Ms=a("li"),Oae=a("strong"),glo=o("retribert"),hlo=o(" \u2014 "),nB=a("a"),plo=o("RetriBertTokenizer"),_lo=o(" or "),sB=a("a"),ulo=o("RetriBertTokenizerFast"),blo=o(" (RetriBERT model)"),vlo=l(),Es=a("li"),Vae=a("strong"),Flo=o("roberta"),Tlo=o(" \u2014 "),lB=a("a"),Mlo=o("RobertaTokenizer"),Elo=o(" or "),iB=a("a"),Clo=o("RobertaTokenizerFast"),wlo=o(" (RoBERTa model)"),Alo=l(),Cs=a("li"),Xae=a("strong"),ylo=o("roformer"),Llo=o(" \u2014 "),dB=a("a"),xlo=o("RoFormerTokenizer"),$lo=o(" or "),cB=a("a"),klo=o("RoFormerTokenizerFast"),Slo=o(" (RoFormer model)"),Rlo=l(),Ug=a("li"),zae=a("strong"),Plo=o("speech_to_text"),Blo=o(" \u2014 "),fB=a("a"),Ilo=o("Speech2TextTokenizer"),Nlo=o(" (Speech2Text model)"),qlo=l(),Jg=a("li"),Wae=a("strong"),jlo=o("speech_to_text_2"),Dlo=o(" \u2014 "),mB=a("a"),Glo=o("Speech2Text2Tokenizer"),Olo=o(" (Speech2Text2 model)"),Vlo=l(),ws=a("li"),Qae=a("strong"),Xlo=o("splinter"),zlo=o(" \u2014 "),gB=a("a"),Wlo=o("SplinterTokenizer"),Qlo=o(" or "),hB=a("a"),Hlo=o("SplinterTokenizerFast"),Ulo=o(" (Splinter model)"),Jlo=l(),As=a("li"),Hae=a("strong"),Ylo=o("squeezebert"),Klo=o(" \u2014 "),pB=a("a"),Zlo=o("SqueezeBertTokenizer"),eio=o(" or "),_B=a("a"),oio=o("SqueezeBertTokenizerFast"),rio=o(" (SqueezeBERT model)"),tio=l(),ys=a("li"),Uae=a("strong"),aio=o("t5"),nio=o(" \u2014 "),uB=a("a"),sio=o("T5Tokenizer"),lio=o(" or "),bB=a("a"),iio=o("T5TokenizerFast"),dio=o(" (T5 model)"),cio=l(),Yg=a("li"),Jae=a("strong"),fio=o("tapas"),mio=o(" \u2014 "),vB=a("a"),gio=o("TapasTokenizer"),hio=o(" (TAPAS model)"),pio=l(),Kg=a("li"),Yae=a("strong"),_io=o("tapex"),uio=o(" \u2014 "),FB=a("a"),bio=o("TapexTokenizer"),vio=o(" (TAPEX model)"),Fio=l(),Zg=a("li"),Kae=a("strong"),Tio=o("transfo-xl"),Mio=o(" \u2014 "),TB=a("a"),Eio=o("TransfoXLTokenizer"),Cio=o(" (Transformer-XL model)"),wio=l(),Ls=a("li"),Zae=a("strong"),Aio=o("visual_bert"),yio=o(" \u2014 "),MB=a("a"),Lio=o("BertTokenizer"),xio=o(" or "),EB=a("a"),$io=o("BertTokenizerFast"),kio=o(" (VisualBert model)"),Sio=l(),eh=a("li"),ene=a("strong"),Rio=o("wav2vec2"),Pio=o(" \u2014 "),CB=a("a"),Bio=o("Wav2Vec2CTCTokenizer"),Iio=o(" (Wav2Vec2 model)"),Nio=l(),oh=a("li"),one=a("strong"),qio=o("wav2vec2-conformer"),jio=o(" \u2014 "),wB=a("a"),Dio=o("Wav2Vec2CTCTokenizer"),Gio=o(" (Wav2Vec2-Conformer model)"),Oio=l(),rh=a("li"),rne=a("strong"),Vio=o("wav2vec2_phoneme"),Xio=o(" \u2014 "),AB=a("a"),zio=o("Wav2Vec2PhonemeCTCTokenizer"),Wio=o(" (Wav2Vec2Phoneme model)"),Qio=l(),xs=a("li"),tne=a("strong"),Hio=o("xglm"),Uio=o(" \u2014 "),yB=a("a"),Jio=o("XGLMTokenizer"),Yio=o(" or "),LB=a("a"),Kio=o("XGLMTokenizerFast"),Zio=o(" (XGLM model)"),edo=l(),th=a("li"),ane=a("strong"),odo=o("xlm"),rdo=o(" \u2014 "),xB=a("a"),tdo=o("XLMTokenizer"),ado=o(" (XLM model)"),ndo=l(),ah=a("li"),nne=a("strong"),sdo=o("xlm-prophetnet"),ldo=o(" \u2014 "),$B=a("a"),ido=o("XLMProphetNetTokenizer"),ddo=o(" (XLMProphetNet model)"),cdo=l(),$s=a("li"),sne=a("strong"),fdo=o("xlm-roberta"),mdo=o(" \u2014 "),kB=a("a"),gdo=o("XLMRobertaTokenizer"),hdo=o(" or "),SB=a("a"),pdo=o("XLMRobertaTokenizerFast"),_do=o(" (XLM-RoBERTa model)"),udo=l(),ks=a("li"),lne=a("strong"),bdo=o("xlm-roberta-xl"),vdo=o(" \u2014 "),RB=a("a"),Fdo=o("RobertaTokenizer"),Tdo=o(" or "),PB=a("a"),Mdo=o("RobertaTokenizerFast"),Edo=o(" (XLM-RoBERTa-XL model)"),Cdo=l(),Ss=a("li"),ine=a("strong"),wdo=o("xlnet"),Ado=o(" \u2014 "),BB=a("a"),ydo=o("XLNetTokenizer"),Ldo=o(" or "),IB=a("a"),xdo=o("XLNetTokenizerFast"),$do=o(" (XLNet model)"),kdo=l(),Rs=a("li"),dne=a("strong"),Sdo=o("yoso"),Rdo=o(" \u2014 "),NB=a("a"),Pdo=o("AlbertTokenizer"),Bdo=o(" or "),qB=a("a"),Ido=o("AlbertTokenizerFast"),Ndo=o(" (YOSO model)"),qdo=l(),F(nh.$$.fragment),jdo=l(),sh=a("div"),F(OA.$$.fragment),Ddo=l(),cne=a("p"),Gdo=o("Register a new tokenizer in this mapping."),pqe=l(),Mi=a("h2"),lh=a("a"),fne=a("span"),F(VA.$$.fragment),Odo=l(),mne=a("span"),Vdo=o("AutoFeatureExtractor"),_qe=l(),Ao=a("div"),F(XA.$$.fragment),Xdo=l(),zA=a("p"),zdo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),jB=a("a"),Wdo=o("AutoFeatureExtractor.from_pretrained()"),Qdo=o(" class method."),Hdo=l(),WA=a("p"),Udo=o("This class cannot be instantiated directly using "),gne=a("code"),Jdo=o("__init__()"),Ydo=o(" (throws an error)."),Kdo=l(),He=a("div"),F(QA.$$.fragment),Zdo=l(),hne=a("p"),eco=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),oco=l(),ya=a("p"),rco=o("The feature extractor class to instantiate is selected based on the "),pne=a("code"),tco=o("model_type"),aco=o(` property of the config object
(either passed as an argument or loaded from `),_ne=a("code"),nco=o("pretrained_model_name_or_path"),sco=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),une=a("code"),lco=o("pretrained_model_name_or_path"),ico=o(":"),dco=l(),Y=a("ul"),ih=a("li"),bne=a("strong"),cco=o("beit"),fco=o(" \u2014 "),DB=a("a"),mco=o("BeitFeatureExtractor"),gco=o(" (BEiT model)"),hco=l(),dh=a("li"),vne=a("strong"),pco=o("clip"),_co=o(" \u2014 "),GB=a("a"),uco=o("CLIPFeatureExtractor"),bco=o(" (CLIP model)"),vco=l(),ch=a("li"),Fne=a("strong"),Fco=o("convnext"),Tco=o(" \u2014 "),OB=a("a"),Mco=o("ConvNextFeatureExtractor"),Eco=o(" (ConvNext model)"),Cco=l(),fh=a("li"),Tne=a("strong"),wco=o("cvt"),Aco=o(" \u2014 "),VB=a("a"),yco=o("ConvNextFeatureExtractor"),Lco=o(" (CvT model)"),xco=l(),mh=a("li"),Mne=a("strong"),$co=o("data2vec-audio"),kco=o(" \u2014 "),XB=a("a"),Sco=o("Wav2Vec2FeatureExtractor"),Rco=o(" (Data2VecAudio model)"),Pco=l(),gh=a("li"),Ene=a("strong"),Bco=o("data2vec-vision"),Ico=o(" \u2014 "),zB=a("a"),Nco=o("BeitFeatureExtractor"),qco=o(" (Data2VecVision model)"),jco=l(),hh=a("li"),Cne=a("strong"),Dco=o("deit"),Gco=o(" \u2014 "),WB=a("a"),Oco=o("DeiTFeatureExtractor"),Vco=o(" (DeiT model)"),Xco=l(),ph=a("li"),wne=a("strong"),zco=o("detr"),Wco=o(" \u2014 "),QB=a("a"),Qco=o("DetrFeatureExtractor"),Hco=o(" (DETR model)"),Uco=l(),_h=a("li"),Ane=a("strong"),Jco=o("dpt"),Yco=o(" \u2014 "),HB=a("a"),Kco=o("DPTFeatureExtractor"),Zco=o(" (DPT model)"),efo=l(),uh=a("li"),yne=a("strong"),ofo=o("flava"),rfo=o(" \u2014 "),UB=a("a"),tfo=o("FlavaFeatureExtractor"),afo=o(" (Flava model)"),nfo=l(),bh=a("li"),Lne=a("strong"),sfo=o("glpn"),lfo=o(" \u2014 "),JB=a("a"),ifo=o("GLPNFeatureExtractor"),dfo=o(" (GLPN model)"),cfo=l(),vh=a("li"),xne=a("strong"),ffo=o("hubert"),mfo=o(" \u2014 "),YB=a("a"),gfo=o("Wav2Vec2FeatureExtractor"),hfo=o(" (Hubert model)"),pfo=l(),Fh=a("li"),$ne=a("strong"),_fo=o("imagegpt"),ufo=o(" \u2014 "),KB=a("a"),bfo=o("ImageGPTFeatureExtractor"),vfo=o(" (ImageGPT model)"),Ffo=l(),Th=a("li"),kne=a("strong"),Tfo=o("layoutlmv2"),Mfo=o(" \u2014 "),ZB=a("a"),Efo=o("LayoutLMv2FeatureExtractor"),Cfo=o(" (LayoutLMv2 model)"),wfo=l(),Mh=a("li"),Sne=a("strong"),Afo=o("layoutlmv3"),yfo=o(" \u2014 "),eI=a("a"),Lfo=o("LayoutLMv3FeatureExtractor"),xfo=o(" (LayoutLMv3 model)"),$fo=l(),Eh=a("li"),Rne=a("strong"),kfo=o("maskformer"),Sfo=o(" \u2014 "),oI=a("a"),Rfo=o("MaskFormerFeatureExtractor"),Pfo=o(" (MaskFormer model)"),Bfo=l(),Ch=a("li"),Pne=a("strong"),Ifo=o("perceiver"),Nfo=o(" \u2014 "),rI=a("a"),qfo=o("PerceiverFeatureExtractor"),jfo=o(" (Perceiver model)"),Dfo=l(),wh=a("li"),Bne=a("strong"),Gfo=o("poolformer"),Ofo=o(" \u2014 "),tI=a("a"),Vfo=o("PoolFormerFeatureExtractor"),Xfo=o(" (PoolFormer model)"),zfo=l(),Ah=a("li"),Ine=a("strong"),Wfo=o("regnet"),Qfo=o(" \u2014 "),aI=a("a"),Hfo=o("ConvNextFeatureExtractor"),Ufo=o(" (RegNet model)"),Jfo=l(),yh=a("li"),Nne=a("strong"),Yfo=o("resnet"),Kfo=o(" \u2014 "),nI=a("a"),Zfo=o("ConvNextFeatureExtractor"),emo=o(" (ResNet model)"),omo=l(),Lh=a("li"),qne=a("strong"),rmo=o("segformer"),tmo=o(" \u2014 "),sI=a("a"),amo=o("SegformerFeatureExtractor"),nmo=o(" (SegFormer model)"),smo=l(),xh=a("li"),jne=a("strong"),lmo=o("speech_to_text"),imo=o(" \u2014 "),lI=a("a"),dmo=o("Speech2TextFeatureExtractor"),cmo=o(" (Speech2Text model)"),fmo=l(),$h=a("li"),Dne=a("strong"),mmo=o("swin"),gmo=o(" \u2014 "),iI=a("a"),hmo=o("ViTFeatureExtractor"),pmo=o(" (Swin model)"),_mo=l(),kh=a("li"),Gne=a("strong"),umo=o("van"),bmo=o(" \u2014 "),dI=a("a"),vmo=o("ConvNextFeatureExtractor"),Fmo=o(" (VAN model)"),Tmo=l(),Sh=a("li"),One=a("strong"),Mmo=o("vit"),Emo=o(" \u2014 "),cI=a("a"),Cmo=o("ViTFeatureExtractor"),wmo=o(" (ViT model)"),Amo=l(),Rh=a("li"),Vne=a("strong"),ymo=o("vit_mae"),Lmo=o(" \u2014 "),fI=a("a"),xmo=o("ViTFeatureExtractor"),$mo=o(" (ViTMAE model)"),kmo=l(),Ph=a("li"),Xne=a("strong"),Smo=o("wav2vec2"),Rmo=o(" \u2014 "),mI=a("a"),Pmo=o("Wav2Vec2FeatureExtractor"),Bmo=o(" (Wav2Vec2 model)"),Imo=l(),Bh=a("li"),zne=a("strong"),Nmo=o("wav2vec2-conformer"),qmo=o(" \u2014 "),gI=a("a"),jmo=o("Wav2Vec2FeatureExtractor"),Dmo=o(" (Wav2Vec2-Conformer model)"),Gmo=l(),Ih=a("li"),Wne=a("strong"),Omo=o("yolos"),Vmo=o(" \u2014 "),hI=a("a"),Xmo=o("YolosFeatureExtractor"),zmo=o(" (YOLOS model)"),Wmo=l(),F(Nh.$$.fragment),Qmo=l(),F(qh.$$.fragment),Hmo=l(),jh=a("div"),F(HA.$$.fragment),Umo=l(),Qne=a("p"),Jmo=o("Register a new feature extractor for this class."),uqe=l(),Ei=a("h2"),Dh=a("a"),Hne=a("span"),F(UA.$$.fragment),Ymo=l(),Une=a("span"),Kmo=o("AutoProcessor"),bqe=l(),yo=a("div"),F(JA.$$.fragment),Zmo=l(),YA=a("p"),ego=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),pI=a("a"),ogo=o("AutoProcessor.from_pretrained()"),rgo=o(" class method."),tgo=l(),KA=a("p"),ago=o("This class cannot be instantiated directly using "),Jne=a("code"),ngo=o("__init__()"),sgo=o(" (throws an error)."),lgo=l(),Ue=a("div"),F(ZA.$$.fragment),igo=l(),Yne=a("p"),dgo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),cgo=l(),Ci=a("p"),fgo=o("The processor class to instantiate is selected based on the "),Kne=a("code"),mgo=o("model_type"),ggo=o(` property of the config object (either
passed as an argument or loaded from `),Zne=a("code"),hgo=o("pretrained_model_name_or_path"),pgo=o(" if possible):"),_go=l(),he=a("ul"),Gh=a("li"),ese=a("strong"),ugo=o("clip"),bgo=o(" \u2014 "),_I=a("a"),vgo=o("CLIPProcessor"),Fgo=o(" (CLIP model)"),Tgo=l(),Oh=a("li"),ose=a("strong"),Mgo=o("flava"),Ego=o(" \u2014 "),rse=a("code"),Cgo=o("FLAVAProcessor"),wgo=o(" (Flava model)"),Ago=l(),Vh=a("li"),tse=a("strong"),ygo=o("layoutlmv2"),Lgo=o(" \u2014 "),uI=a("a"),xgo=o("LayoutLMv2Processor"),$go=o(" (LayoutLMv2 model)"),kgo=l(),Xh=a("li"),ase=a("strong"),Sgo=o("layoutlmv3"),Rgo=o(" \u2014 "),bI=a("a"),Pgo=o("LayoutLMv3Processor"),Bgo=o(" (LayoutLMv3 model)"),Igo=l(),zh=a("li"),nse=a("strong"),Ngo=o("layoutxlm"),qgo=o(" \u2014 "),vI=a("a"),jgo=o("LayoutXLMProcessor"),Dgo=o(" (LayoutXLM model)"),Ggo=l(),Wh=a("li"),sse=a("strong"),Ogo=o("sew"),Vgo=o(" \u2014 "),FI=a("a"),Xgo=o("Wav2Vec2Processor"),zgo=o(" (SEW model)"),Wgo=l(),Qh=a("li"),lse=a("strong"),Qgo=o("sew-d"),Hgo=o(" \u2014 "),TI=a("a"),Ugo=o("Wav2Vec2Processor"),Jgo=o(" (SEW-D model)"),Ygo=l(),Hh=a("li"),ise=a("strong"),Kgo=o("speech_to_text"),Zgo=o(" \u2014 "),MI=a("a"),eho=o("Speech2TextProcessor"),oho=o(" (Speech2Text model)"),rho=l(),Uh=a("li"),dse=a("strong"),tho=o("speech_to_text_2"),aho=o(" \u2014 "),EI=a("a"),nho=o("Speech2Text2Processor"),sho=o(" (Speech2Text2 model)"),lho=l(),Jh=a("li"),cse=a("strong"),iho=o("trocr"),dho=o(" \u2014 "),CI=a("a"),cho=o("TrOCRProcessor"),fho=o(" (TrOCR model)"),mho=l(),Yh=a("li"),fse=a("strong"),gho=o("unispeech"),hho=o(" \u2014 "),wI=a("a"),pho=o("Wav2Vec2Processor"),_ho=o(" (UniSpeech model)"),uho=l(),Kh=a("li"),mse=a("strong"),bho=o("unispeech-sat"),vho=o(" \u2014 "),AI=a("a"),Fho=o("Wav2Vec2Processor"),Tho=o(" (UniSpeechSat model)"),Mho=l(),Zh=a("li"),gse=a("strong"),Eho=o("vilt"),Cho=o(" \u2014 "),yI=a("a"),who=o("ViltProcessor"),Aho=o(" (ViLT model)"),yho=l(),ep=a("li"),hse=a("strong"),Lho=o("vision-text-dual-encoder"),xho=o(" \u2014 "),LI=a("a"),$ho=o("VisionTextDualEncoderProcessor"),kho=o(" (VisionTextDualEncoder model)"),Sho=l(),op=a("li"),pse=a("strong"),Rho=o("wav2vec2"),Pho=o(" \u2014 "),xI=a("a"),Bho=o("Wav2Vec2Processor"),Iho=o(" (Wav2Vec2 model)"),Nho=l(),rp=a("li"),_se=a("strong"),qho=o("wav2vec2-conformer"),jho=o(" \u2014 "),$I=a("a"),Dho=o("Wav2Vec2Processor"),Gho=o(" (Wav2Vec2-Conformer model)"),Oho=l(),tp=a("li"),use=a("strong"),Vho=o("wavlm"),Xho=o(" \u2014 "),kI=a("a"),zho=o("Wav2Vec2Processor"),Who=o(" (WavLM model)"),Qho=l(),F(ap.$$.fragment),Hho=l(),F(np.$$.fragment),Uho=l(),sp=a("div"),F(ey.$$.fragment),Jho=l(),bse=a("p"),Yho=o("Register a new processor for this class."),vqe=l(),wi=a("h2"),lp=a("a"),vse=a("span"),F(oy.$$.fragment),Kho=l(),Fse=a("span"),Zho=o("AutoModel"),Fqe=l(),Lo=a("div"),F(ry.$$.fragment),epo=l(),Ai=a("p"),opo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SI=a("a"),rpo=o("from_pretrained()"),tpo=o(" class method or the "),RI=a("a"),apo=o("from_config()"),npo=o(` class
method.`),spo=l(),ty=a("p"),lpo=o("This class cannot be instantiated directly using "),Tse=a("code"),ipo=o("__init__()"),dpo=o(" (throws an error)."),cpo=l(),tt=a("div"),F(ay.$$.fragment),fpo=l(),Mse=a("p"),mpo=o("Instantiates one of the base model classes of the library from a configuration."),gpo=l(),yi=a("p"),hpo=o(`Note:
Loading a model from its configuration file does `),Ese=a("strong"),ppo=o("not"),_po=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PI=a("a"),upo=o("from_pretrained()"),bpo=o(" to load the model weights."),vpo=l(),F(ip.$$.fragment),Fpo=l(),Je=a("div"),F(ny.$$.fragment),Tpo=l(),Cse=a("p"),Mpo=o("Instantiate one of the base model classes of the library from a pretrained model."),Epo=l(),La=a("p"),Cpo=o("The model class to instantiate is selected based on the "),wse=a("code"),wpo=o("model_type"),Apo=o(` property of the config object (either
passed as an argument or loaded from `),Ase=a("code"),ypo=o("pretrained_model_name_or_path"),Lpo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yse=a("code"),xpo=o("pretrained_model_name_or_path"),$po=o(":"),kpo=l(),x=a("ul"),dp=a("li"),Lse=a("strong"),Spo=o("albert"),Rpo=o(" \u2014 "),BI=a("a"),Ppo=o("AlbertModel"),Bpo=o(" (ALBERT model)"),Ipo=l(),cp=a("li"),xse=a("strong"),Npo=o("bart"),qpo=o(" \u2014 "),II=a("a"),jpo=o("BartModel"),Dpo=o(" (BART model)"),Gpo=l(),fp=a("li"),$se=a("strong"),Opo=o("beit"),Vpo=o(" \u2014 "),NI=a("a"),Xpo=o("BeitModel"),zpo=o(" (BEiT model)"),Wpo=l(),mp=a("li"),kse=a("strong"),Qpo=o("bert"),Hpo=o(" \u2014 "),qI=a("a"),Upo=o("BertModel"),Jpo=o(" (BERT model)"),Ypo=l(),gp=a("li"),Sse=a("strong"),Kpo=o("bert-generation"),Zpo=o(" \u2014 "),jI=a("a"),e_o=o("BertGenerationEncoder"),o_o=o(" (Bert Generation model)"),r_o=l(),hp=a("li"),Rse=a("strong"),t_o=o("big_bird"),a_o=o(" \u2014 "),DI=a("a"),n_o=o("BigBirdModel"),s_o=o(" (BigBird model)"),l_o=l(),pp=a("li"),Pse=a("strong"),i_o=o("bigbird_pegasus"),d_o=o(" \u2014 "),GI=a("a"),c_o=o("BigBirdPegasusModel"),f_o=o(" (BigBirdPegasus model)"),m_o=l(),_p=a("li"),Bse=a("strong"),g_o=o("blenderbot"),h_o=o(" \u2014 "),OI=a("a"),p_o=o("BlenderbotModel"),__o=o(" (Blenderbot model)"),u_o=l(),up=a("li"),Ise=a("strong"),b_o=o("blenderbot-small"),v_o=o(" \u2014 "),VI=a("a"),F_o=o("BlenderbotSmallModel"),T_o=o(" (BlenderbotSmall model)"),M_o=l(),bp=a("li"),Nse=a("strong"),E_o=o("camembert"),C_o=o(" \u2014 "),XI=a("a"),w_o=o("CamembertModel"),A_o=o(" (CamemBERT model)"),y_o=l(),vp=a("li"),qse=a("strong"),L_o=o("canine"),x_o=o(" \u2014 "),zI=a("a"),$_o=o("CanineModel"),k_o=o(" (Canine model)"),S_o=l(),Fp=a("li"),jse=a("strong"),R_o=o("clip"),P_o=o(" \u2014 "),WI=a("a"),B_o=o("CLIPModel"),I_o=o(" (CLIP model)"),N_o=l(),Tp=a("li"),Dse=a("strong"),q_o=o("convbert"),j_o=o(" \u2014 "),QI=a("a"),D_o=o("ConvBertModel"),G_o=o(" (ConvBERT model)"),O_o=l(),Mp=a("li"),Gse=a("strong"),V_o=o("convnext"),X_o=o(" \u2014 "),HI=a("a"),z_o=o("ConvNextModel"),W_o=o(" (ConvNext model)"),Q_o=l(),Ep=a("li"),Ose=a("strong"),H_o=o("ctrl"),U_o=o(" \u2014 "),UI=a("a"),J_o=o("CTRLModel"),Y_o=o(" (CTRL model)"),K_o=l(),Cp=a("li"),Vse=a("strong"),Z_o=o("cvt"),euo=o(" \u2014 "),JI=a("a"),ouo=o("CvtModel"),ruo=o(" (CvT model)"),tuo=l(),wp=a("li"),Xse=a("strong"),auo=o("data2vec-audio"),nuo=o(" \u2014 "),YI=a("a"),suo=o("Data2VecAudioModel"),luo=o(" (Data2VecAudio model)"),iuo=l(),Ap=a("li"),zse=a("strong"),duo=o("data2vec-text"),cuo=o(" \u2014 "),KI=a("a"),fuo=o("Data2VecTextModel"),muo=o(" (Data2VecText model)"),guo=l(),yp=a("li"),Wse=a("strong"),huo=o("data2vec-vision"),puo=o(" \u2014 "),ZI=a("a"),_uo=o("Data2VecVisionModel"),uuo=o(" (Data2VecVision model)"),buo=l(),Lp=a("li"),Qse=a("strong"),vuo=o("deberta"),Fuo=o(" \u2014 "),eN=a("a"),Tuo=o("DebertaModel"),Muo=o(" (DeBERTa model)"),Euo=l(),xp=a("li"),Hse=a("strong"),Cuo=o("deberta-v2"),wuo=o(" \u2014 "),oN=a("a"),Auo=o("DebertaV2Model"),yuo=o(" (DeBERTa-v2 model)"),Luo=l(),$p=a("li"),Use=a("strong"),xuo=o("decision_transformer"),$uo=o(" \u2014 "),rN=a("a"),kuo=o("DecisionTransformerModel"),Suo=o(" (Decision Transformer model)"),Ruo=l(),kp=a("li"),Jse=a("strong"),Puo=o("deit"),Buo=o(" \u2014 "),tN=a("a"),Iuo=o("DeiTModel"),Nuo=o(" (DeiT model)"),quo=l(),Sp=a("li"),Yse=a("strong"),juo=o("detr"),Duo=o(" \u2014 "),aN=a("a"),Guo=o("DetrModel"),Ouo=o(" (DETR model)"),Vuo=l(),Rp=a("li"),Kse=a("strong"),Xuo=o("distilbert"),zuo=o(" \u2014 "),nN=a("a"),Wuo=o("DistilBertModel"),Quo=o(" (DistilBERT model)"),Huo=l(),Pp=a("li"),Zse=a("strong"),Uuo=o("dpr"),Juo=o(" \u2014 "),sN=a("a"),Yuo=o("DPRQuestionEncoder"),Kuo=o(" (DPR model)"),Zuo=l(),Bp=a("li"),ele=a("strong"),e2o=o("dpt"),o2o=o(" \u2014 "),lN=a("a"),r2o=o("DPTModel"),t2o=o(" (DPT model)"),a2o=l(),Ip=a("li"),ole=a("strong"),n2o=o("electra"),s2o=o(" \u2014 "),iN=a("a"),l2o=o("ElectraModel"),i2o=o(" (ELECTRA model)"),d2o=l(),Np=a("li"),rle=a("strong"),c2o=o("emformer"),f2o=o(" \u2014 "),dN=a("a"),m2o=o("EmformerModel"),g2o=o(" (Emformer model)"),h2o=l(),qp=a("li"),tle=a("strong"),p2o=o("flaubert"),_2o=o(" \u2014 "),cN=a("a"),u2o=o("FlaubertModel"),b2o=o(" (FlauBERT model)"),v2o=l(),jp=a("li"),ale=a("strong"),F2o=o("flava"),T2o=o(" \u2014 "),fN=a("a"),M2o=o("FlavaModel"),E2o=o(" (Flava model)"),C2o=l(),Dp=a("li"),nle=a("strong"),w2o=o("fnet"),A2o=o(" \u2014 "),mN=a("a"),y2o=o("FNetModel"),L2o=o(" (FNet model)"),x2o=l(),Gp=a("li"),sle=a("strong"),$2o=o("fsmt"),k2o=o(" \u2014 "),gN=a("a"),S2o=o("FSMTModel"),R2o=o(" (FairSeq Machine-Translation model)"),P2o=l(),Ps=a("li"),lle=a("strong"),B2o=o("funnel"),I2o=o(" \u2014 "),hN=a("a"),N2o=o("FunnelModel"),q2o=o(" or "),pN=a("a"),j2o=o("FunnelBaseModel"),D2o=o(" (Funnel Transformer model)"),G2o=l(),Op=a("li"),ile=a("strong"),O2o=o("glpn"),V2o=o(" \u2014 "),_N=a("a"),X2o=o("GLPNModel"),z2o=o(" (GLPN model)"),W2o=l(),Vp=a("li"),dle=a("strong"),Q2o=o("gpt2"),H2o=o(" \u2014 "),uN=a("a"),U2o=o("GPT2Model"),J2o=o(" (OpenAI GPT-2 model)"),Y2o=l(),Xp=a("li"),cle=a("strong"),K2o=o("gpt_neo"),Z2o=o(" \u2014 "),bN=a("a"),e1o=o("GPTNeoModel"),o1o=o(" (GPT Neo model)"),r1o=l(),zp=a("li"),fle=a("strong"),t1o=o("gpt_neox"),a1o=o(" \u2014 "),vN=a("a"),n1o=o("GPTNeoXModel"),s1o=o(" (GPT NeoX model)"),l1o=l(),Wp=a("li"),mle=a("strong"),i1o=o("gptj"),d1o=o(" \u2014 "),FN=a("a"),c1o=o("GPTJModel"),f1o=o(" (GPT-J model)"),m1o=l(),Qp=a("li"),gle=a("strong"),g1o=o("hubert"),h1o=o(" \u2014 "),TN=a("a"),p1o=o("HubertModel"),_1o=o(" (Hubert model)"),u1o=l(),Hp=a("li"),hle=a("strong"),b1o=o("ibert"),v1o=o(" \u2014 "),MN=a("a"),F1o=o("IBertModel"),T1o=o(" (I-BERT model)"),M1o=l(),Up=a("li"),ple=a("strong"),E1o=o("imagegpt"),C1o=o(" \u2014 "),EN=a("a"),w1o=o("ImageGPTModel"),A1o=o(" (ImageGPT model)"),y1o=l(),Jp=a("li"),_le=a("strong"),L1o=o("layoutlm"),x1o=o(" \u2014 "),CN=a("a"),$1o=o("LayoutLMModel"),k1o=o(" (LayoutLM model)"),S1o=l(),Yp=a("li"),ule=a("strong"),R1o=o("layoutlmv2"),P1o=o(" \u2014 "),wN=a("a"),B1o=o("LayoutLMv2Model"),I1o=o(" (LayoutLMv2 model)"),N1o=l(),Kp=a("li"),ble=a("strong"),q1o=o("layoutlmv3"),j1o=o(" \u2014 "),AN=a("a"),D1o=o("LayoutLMv3Model"),G1o=o(" (LayoutLMv3 model)"),O1o=l(),Zp=a("li"),vle=a("strong"),V1o=o("led"),X1o=o(" \u2014 "),yN=a("a"),z1o=o("LEDModel"),W1o=o(" (LED model)"),Q1o=l(),e_=a("li"),Fle=a("strong"),H1o=o("longformer"),U1o=o(" \u2014 "),LN=a("a"),J1o=o("LongformerModel"),Y1o=o(" (Longformer model)"),K1o=l(),o_=a("li"),Tle=a("strong"),Z1o=o("luke"),ebo=o(" \u2014 "),xN=a("a"),obo=o("LukeModel"),rbo=o(" (LUKE model)"),tbo=l(),r_=a("li"),Mle=a("strong"),abo=o("lxmert"),nbo=o(" \u2014 "),$N=a("a"),sbo=o("LxmertModel"),lbo=o(" (LXMERT model)"),ibo=l(),t_=a("li"),Ele=a("strong"),dbo=o("m2m_100"),cbo=o(" \u2014 "),kN=a("a"),fbo=o("M2M100Model"),mbo=o(" (M2M100 model)"),gbo=l(),a_=a("li"),Cle=a("strong"),hbo=o("marian"),pbo=o(" \u2014 "),SN=a("a"),_bo=o("MarianModel"),ubo=o(" (Marian model)"),bbo=l(),n_=a("li"),wle=a("strong"),vbo=o("maskformer"),Fbo=o(" \u2014 "),RN=a("a"),Tbo=o("MaskFormerModel"),Mbo=o(" (MaskFormer model)"),Ebo=l(),s_=a("li"),Ale=a("strong"),Cbo=o("mbart"),wbo=o(" \u2014 "),PN=a("a"),Abo=o("MBartModel"),ybo=o(" (mBART model)"),Lbo=l(),l_=a("li"),yle=a("strong"),xbo=o("megatron-bert"),$bo=o(" \u2014 "),BN=a("a"),kbo=o("MegatronBertModel"),Sbo=o(" (MegatronBert model)"),Rbo=l(),i_=a("li"),Lle=a("strong"),Pbo=o("mobilebert"),Bbo=o(" \u2014 "),IN=a("a"),Ibo=o("MobileBertModel"),Nbo=o(" (MobileBERT model)"),qbo=l(),d_=a("li"),xle=a("strong"),jbo=o("mpnet"),Dbo=o(" \u2014 "),NN=a("a"),Gbo=o("MPNetModel"),Obo=o(" (MPNet model)"),Vbo=l(),c_=a("li"),$le=a("strong"),Xbo=o("mt5"),zbo=o(" \u2014 "),qN=a("a"),Wbo=o("MT5Model"),Qbo=o(" (mT5 model)"),Hbo=l(),f_=a("li"),kle=a("strong"),Ubo=o("nystromformer"),Jbo=o(" \u2014 "),jN=a("a"),Ybo=o("NystromformerModel"),Kbo=o(" (Nystromformer model)"),Zbo=l(),m_=a("li"),Sle=a("strong"),evo=o("openai-gpt"),ovo=o(" \u2014 "),DN=a("a"),rvo=o("OpenAIGPTModel"),tvo=o(" (OpenAI GPT model)"),avo=l(),g_=a("li"),Rle=a("strong"),nvo=o("opt"),svo=o(" \u2014 "),GN=a("a"),lvo=o("OPTModel"),ivo=o(" (OPT model)"),dvo=l(),h_=a("li"),Ple=a("strong"),cvo=o("pegasus"),fvo=o(" \u2014 "),ON=a("a"),mvo=o("PegasusModel"),gvo=o(" (Pegasus model)"),hvo=l(),p_=a("li"),Ble=a("strong"),pvo=o("perceiver"),_vo=o(" \u2014 "),VN=a("a"),uvo=o("PerceiverModel"),bvo=o(" (Perceiver model)"),vvo=l(),__=a("li"),Ile=a("strong"),Fvo=o("plbart"),Tvo=o(" \u2014 "),XN=a("a"),Mvo=o("PLBartModel"),Evo=o(" (PLBart model)"),Cvo=l(),u_=a("li"),Nle=a("strong"),wvo=o("poolformer"),Avo=o(" \u2014 "),zN=a("a"),yvo=o("PoolFormerModel"),Lvo=o(" (PoolFormer model)"),xvo=l(),b_=a("li"),qle=a("strong"),$vo=o("prophetnet"),kvo=o(" \u2014 "),WN=a("a"),Svo=o("ProphetNetModel"),Rvo=o(" (ProphetNet model)"),Pvo=l(),v_=a("li"),jle=a("strong"),Bvo=o("qdqbert"),Ivo=o(" \u2014 "),QN=a("a"),Nvo=o("QDQBertModel"),qvo=o(" (QDQBert model)"),jvo=l(),F_=a("li"),Dle=a("strong"),Dvo=o("reformer"),Gvo=o(" \u2014 "),HN=a("a"),Ovo=o("ReformerModel"),Vvo=o(" (Reformer model)"),Xvo=l(),T_=a("li"),Gle=a("strong"),zvo=o("regnet"),Wvo=o(" \u2014 "),UN=a("a"),Qvo=o("RegNetModel"),Hvo=o(" (RegNet model)"),Uvo=l(),M_=a("li"),Ole=a("strong"),Jvo=o("rembert"),Yvo=o(" \u2014 "),JN=a("a"),Kvo=o("RemBertModel"),Zvo=o(" (RemBERT model)"),e3o=l(),E_=a("li"),Vle=a("strong"),o3o=o("resnet"),r3o=o(" \u2014 "),YN=a("a"),t3o=o("ResNetModel"),a3o=o(" (ResNet model)"),n3o=l(),C_=a("li"),Xle=a("strong"),s3o=o("retribert"),l3o=o(" \u2014 "),KN=a("a"),i3o=o("RetriBertModel"),d3o=o(" (RetriBERT model)"),c3o=l(),w_=a("li"),zle=a("strong"),f3o=o("roberta"),m3o=o(" \u2014 "),ZN=a("a"),g3o=o("RobertaModel"),h3o=o(" (RoBERTa model)"),p3o=l(),A_=a("li"),Wle=a("strong"),_3o=o("roformer"),u3o=o(" \u2014 "),eq=a("a"),b3o=o("RoFormerModel"),v3o=o(" (RoFormer model)"),F3o=l(),y_=a("li"),Qle=a("strong"),T3o=o("segformer"),M3o=o(" \u2014 "),oq=a("a"),E3o=o("SegformerModel"),C3o=o(" (SegFormer model)"),w3o=l(),L_=a("li"),Hle=a("strong"),A3o=o("sew"),y3o=o(" \u2014 "),rq=a("a"),L3o=o("SEWModel"),x3o=o(" (SEW model)"),$3o=l(),x_=a("li"),Ule=a("strong"),k3o=o("sew-d"),S3o=o(" \u2014 "),tq=a("a"),R3o=o("SEWDModel"),P3o=o(" (SEW-D model)"),B3o=l(),$_=a("li"),Jle=a("strong"),I3o=o("speech_to_text"),N3o=o(" \u2014 "),aq=a("a"),q3o=o("Speech2TextModel"),j3o=o(" (Speech2Text model)"),D3o=l(),k_=a("li"),Yle=a("strong"),G3o=o("splinter"),O3o=o(" \u2014 "),nq=a("a"),V3o=o("SplinterModel"),X3o=o(" (Splinter model)"),z3o=l(),S_=a("li"),Kle=a("strong"),W3o=o("squeezebert"),Q3o=o(" \u2014 "),sq=a("a"),H3o=o("SqueezeBertModel"),U3o=o(" (SqueezeBERT model)"),J3o=l(),R_=a("li"),Zle=a("strong"),Y3o=o("swin"),K3o=o(" \u2014 "),lq=a("a"),Z3o=o("SwinModel"),e0o=o(" (Swin model)"),o0o=l(),P_=a("li"),eie=a("strong"),r0o=o("t5"),t0o=o(" \u2014 "),iq=a("a"),a0o=o("T5Model"),n0o=o(" (T5 model)"),s0o=l(),B_=a("li"),oie=a("strong"),l0o=o("tapas"),i0o=o(" \u2014 "),dq=a("a"),d0o=o("TapasModel"),c0o=o(" (TAPAS model)"),f0o=l(),I_=a("li"),rie=a("strong"),m0o=o("trajectory_transformer"),g0o=o(" \u2014 "),cq=a("a"),h0o=o("TrajectoryTransformerModel"),p0o=o(" (Trajectory Transformer model)"),_0o=l(),N_=a("li"),tie=a("strong"),u0o=o("transfo-xl"),b0o=o(" \u2014 "),fq=a("a"),v0o=o("TransfoXLModel"),F0o=o(" (Transformer-XL model)"),T0o=l(),q_=a("li"),aie=a("strong"),M0o=o("unispeech"),E0o=o(" \u2014 "),mq=a("a"),C0o=o("UniSpeechModel"),w0o=o(" (UniSpeech model)"),A0o=l(),j_=a("li"),nie=a("strong"),y0o=o("unispeech-sat"),L0o=o(" \u2014 "),gq=a("a"),x0o=o("UniSpeechSatModel"),$0o=o(" (UniSpeechSat model)"),k0o=l(),D_=a("li"),sie=a("strong"),S0o=o("van"),R0o=o(" \u2014 "),hq=a("a"),P0o=o("VanModel"),B0o=o(" (VAN model)"),I0o=l(),G_=a("li"),lie=a("strong"),N0o=o("vilt"),q0o=o(" \u2014 "),pq=a("a"),j0o=o("ViltModel"),D0o=o(" (ViLT model)"),G0o=l(),O_=a("li"),iie=a("strong"),O0o=o("vision-text-dual-encoder"),V0o=o(" \u2014 "),_q=a("a"),X0o=o("VisionTextDualEncoderModel"),z0o=o(" (VisionTextDualEncoder model)"),W0o=l(),V_=a("li"),die=a("strong"),Q0o=o("visual_bert"),H0o=o(" \u2014 "),uq=a("a"),U0o=o("VisualBertModel"),J0o=o(" (VisualBert model)"),Y0o=l(),X_=a("li"),cie=a("strong"),K0o=o("vit"),Z0o=o(" \u2014 "),bq=a("a"),eFo=o("ViTModel"),oFo=o(" (ViT model)"),rFo=l(),z_=a("li"),fie=a("strong"),tFo=o("vit_mae"),aFo=o(" \u2014 "),vq=a("a"),nFo=o("ViTMAEModel"),sFo=o(" (ViTMAE model)"),lFo=l(),W_=a("li"),mie=a("strong"),iFo=o("wav2vec2"),dFo=o(" \u2014 "),Fq=a("a"),cFo=o("Wav2Vec2Model"),fFo=o(" (Wav2Vec2 model)"),mFo=l(),Q_=a("li"),gie=a("strong"),gFo=o("wav2vec2-conformer"),hFo=o(" \u2014 "),Tq=a("a"),pFo=o("Wav2Vec2ConformerModel"),_Fo=o(" (Wav2Vec2-Conformer model)"),uFo=l(),H_=a("li"),hie=a("strong"),bFo=o("wavlm"),vFo=o(" \u2014 "),Mq=a("a"),FFo=o("WavLMModel"),TFo=o(" (WavLM model)"),MFo=l(),U_=a("li"),pie=a("strong"),EFo=o("xglm"),CFo=o(" \u2014 "),Eq=a("a"),wFo=o("XGLMModel"),AFo=o(" (XGLM model)"),yFo=l(),J_=a("li"),_ie=a("strong"),LFo=o("xlm"),xFo=o(" \u2014 "),Cq=a("a"),$Fo=o("XLMModel"),kFo=o(" (XLM model)"),SFo=l(),Y_=a("li"),uie=a("strong"),RFo=o("xlm-prophetnet"),PFo=o(" \u2014 "),wq=a("a"),BFo=o("XLMProphetNetModel"),IFo=o(" (XLMProphetNet model)"),NFo=l(),K_=a("li"),bie=a("strong"),qFo=o("xlm-roberta"),jFo=o(" \u2014 "),Aq=a("a"),DFo=o("XLMRobertaModel"),GFo=o(" (XLM-RoBERTa model)"),OFo=l(),Z_=a("li"),vie=a("strong"),VFo=o("xlm-roberta-xl"),XFo=o(" \u2014 "),yq=a("a"),zFo=o("XLMRobertaXLModel"),WFo=o(" (XLM-RoBERTa-XL model)"),QFo=l(),eu=a("li"),Fie=a("strong"),HFo=o("xlnet"),UFo=o(" \u2014 "),Lq=a("a"),JFo=o("XLNetModel"),YFo=o(" (XLNet model)"),KFo=l(),ou=a("li"),Tie=a("strong"),ZFo=o("yolos"),eTo=o(" \u2014 "),xq=a("a"),oTo=o("YolosModel"),rTo=o(" (YOLOS model)"),tTo=l(),ru=a("li"),Mie=a("strong"),aTo=o("yoso"),nTo=o(" \u2014 "),$q=a("a"),sTo=o("YosoModel"),lTo=o(" (YOSO model)"),iTo=l(),tu=a("p"),dTo=o("The model is set in evaluation mode by default using "),Eie=a("code"),cTo=o("model.eval()"),fTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cie=a("code"),mTo=o("model.train()"),gTo=l(),F(au.$$.fragment),Tqe=l(),Li=a("h2"),nu=a("a"),wie=a("span"),F(sy.$$.fragment),hTo=l(),Aie=a("span"),pTo=o("AutoModelForPreTraining"),Mqe=l(),xo=a("div"),F(ly.$$.fragment),_To=l(),xi=a("p"),uTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kq=a("a"),bTo=o("from_pretrained()"),vTo=o(" class method or the "),Sq=a("a"),FTo=o("from_config()"),TTo=o(` class
method.`),MTo=l(),iy=a("p"),ETo=o("This class cannot be instantiated directly using "),yie=a("code"),CTo=o("__init__()"),wTo=o(" (throws an error)."),ATo=l(),at=a("div"),F(dy.$$.fragment),yTo=l(),Lie=a("p"),LTo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xTo=l(),$i=a("p"),$To=o(`Note:
Loading a model from its configuration file does `),xie=a("strong"),kTo=o("not"),STo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rq=a("a"),RTo=o("from_pretrained()"),PTo=o(" to load the model weights."),BTo=l(),F(su.$$.fragment),ITo=l(),Ye=a("div"),F(cy.$$.fragment),NTo=l(),$ie=a("p"),qTo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jTo=l(),xa=a("p"),DTo=o("The model class to instantiate is selected based on the "),kie=a("code"),GTo=o("model_type"),OTo=o(` property of the config object (either
passed as an argument or loaded from `),Sie=a("code"),VTo=o("pretrained_model_name_or_path"),XTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rie=a("code"),zTo=o("pretrained_model_name_or_path"),WTo=o(":"),QTo=l(),G=a("ul"),lu=a("li"),Pie=a("strong"),HTo=o("albert"),UTo=o(" \u2014 "),Pq=a("a"),JTo=o("AlbertForPreTraining"),YTo=o(" (ALBERT model)"),KTo=l(),iu=a("li"),Bie=a("strong"),ZTo=o("bart"),e7o=o(" \u2014 "),Bq=a("a"),o7o=o("BartForConditionalGeneration"),r7o=o(" (BART model)"),t7o=l(),du=a("li"),Iie=a("strong"),a7o=o("bert"),n7o=o(" \u2014 "),Iq=a("a"),s7o=o("BertForPreTraining"),l7o=o(" (BERT model)"),i7o=l(),cu=a("li"),Nie=a("strong"),d7o=o("big_bird"),c7o=o(" \u2014 "),Nq=a("a"),f7o=o("BigBirdForPreTraining"),m7o=o(" (BigBird model)"),g7o=l(),fu=a("li"),qie=a("strong"),h7o=o("camembert"),p7o=o(" \u2014 "),qq=a("a"),_7o=o("CamembertForMaskedLM"),u7o=o(" (CamemBERT model)"),b7o=l(),mu=a("li"),jie=a("strong"),v7o=o("ctrl"),F7o=o(" \u2014 "),jq=a("a"),T7o=o("CTRLLMHeadModel"),M7o=o(" (CTRL model)"),E7o=l(),gu=a("li"),Die=a("strong"),C7o=o("data2vec-text"),w7o=o(" \u2014 "),Dq=a("a"),A7o=o("Data2VecTextForMaskedLM"),y7o=o(" (Data2VecText model)"),L7o=l(),hu=a("li"),Gie=a("strong"),x7o=o("deberta"),$7o=o(" \u2014 "),Gq=a("a"),k7o=o("DebertaForMaskedLM"),S7o=o(" (DeBERTa model)"),R7o=l(),pu=a("li"),Oie=a("strong"),P7o=o("deberta-v2"),B7o=o(" \u2014 "),Oq=a("a"),I7o=o("DebertaV2ForMaskedLM"),N7o=o(" (DeBERTa-v2 model)"),q7o=l(),_u=a("li"),Vie=a("strong"),j7o=o("distilbert"),D7o=o(" \u2014 "),Vq=a("a"),G7o=o("DistilBertForMaskedLM"),O7o=o(" (DistilBERT model)"),V7o=l(),uu=a("li"),Xie=a("strong"),X7o=o("electra"),z7o=o(" \u2014 "),Xq=a("a"),W7o=o("ElectraForPreTraining"),Q7o=o(" (ELECTRA model)"),H7o=l(),bu=a("li"),zie=a("strong"),U7o=o("flaubert"),J7o=o(" \u2014 "),zq=a("a"),Y7o=o("FlaubertWithLMHeadModel"),K7o=o(" (FlauBERT model)"),Z7o=l(),vu=a("li"),Wie=a("strong"),eMo=o("flava"),oMo=o(" \u2014 "),Wq=a("a"),rMo=o("FlavaForPreTraining"),tMo=o(" (Flava model)"),aMo=l(),Fu=a("li"),Qie=a("strong"),nMo=o("fnet"),sMo=o(" \u2014 "),Qq=a("a"),lMo=o("FNetForPreTraining"),iMo=o(" (FNet model)"),dMo=l(),Tu=a("li"),Hie=a("strong"),cMo=o("fsmt"),fMo=o(" \u2014 "),Hq=a("a"),mMo=o("FSMTForConditionalGeneration"),gMo=o(" (FairSeq Machine-Translation model)"),hMo=l(),Mu=a("li"),Uie=a("strong"),pMo=o("funnel"),_Mo=o(" \u2014 "),Uq=a("a"),uMo=o("FunnelForPreTraining"),bMo=o(" (Funnel Transformer model)"),vMo=l(),Eu=a("li"),Jie=a("strong"),FMo=o("gpt2"),TMo=o(" \u2014 "),Jq=a("a"),MMo=o("GPT2LMHeadModel"),EMo=o(" (OpenAI GPT-2 model)"),CMo=l(),Cu=a("li"),Yie=a("strong"),wMo=o("ibert"),AMo=o(" \u2014 "),Yq=a("a"),yMo=o("IBertForMaskedLM"),LMo=o(" (I-BERT model)"),xMo=l(),wu=a("li"),Kie=a("strong"),$Mo=o("layoutlm"),kMo=o(" \u2014 "),Kq=a("a"),SMo=o("LayoutLMForMaskedLM"),RMo=o(" (LayoutLM model)"),PMo=l(),Au=a("li"),Zie=a("strong"),BMo=o("longformer"),IMo=o(" \u2014 "),Zq=a("a"),NMo=o("LongformerForMaskedLM"),qMo=o(" (Longformer model)"),jMo=l(),yu=a("li"),ede=a("strong"),DMo=o("lxmert"),GMo=o(" \u2014 "),ej=a("a"),OMo=o("LxmertForPreTraining"),VMo=o(" (LXMERT model)"),XMo=l(),Lu=a("li"),ode=a("strong"),zMo=o("megatron-bert"),WMo=o(" \u2014 "),oj=a("a"),QMo=o("MegatronBertForPreTraining"),HMo=o(" (MegatronBert model)"),UMo=l(),xu=a("li"),rde=a("strong"),JMo=o("mobilebert"),YMo=o(" \u2014 "),rj=a("a"),KMo=o("MobileBertForPreTraining"),ZMo=o(" (MobileBERT model)"),e4o=l(),$u=a("li"),tde=a("strong"),o4o=o("mpnet"),r4o=o(" \u2014 "),tj=a("a"),t4o=o("MPNetForMaskedLM"),a4o=o(" (MPNet model)"),n4o=l(),ku=a("li"),ade=a("strong"),s4o=o("openai-gpt"),l4o=o(" \u2014 "),aj=a("a"),i4o=o("OpenAIGPTLMHeadModel"),d4o=o(" (OpenAI GPT model)"),c4o=l(),Su=a("li"),nde=a("strong"),f4o=o("retribert"),m4o=o(" \u2014 "),nj=a("a"),g4o=o("RetriBertModel"),h4o=o(" (RetriBERT model)"),p4o=l(),Ru=a("li"),sde=a("strong"),_4o=o("roberta"),u4o=o(" \u2014 "),sj=a("a"),b4o=o("RobertaForMaskedLM"),v4o=o(" (RoBERTa model)"),F4o=l(),Pu=a("li"),lde=a("strong"),T4o=o("splinter"),M4o=o(" \u2014 "),lj=a("a"),E4o=o("SplinterForPreTraining"),C4o=o(" (Splinter model)"),w4o=l(),Bu=a("li"),ide=a("strong"),A4o=o("squeezebert"),y4o=o(" \u2014 "),ij=a("a"),L4o=o("SqueezeBertForMaskedLM"),x4o=o(" (SqueezeBERT model)"),$4o=l(),Iu=a("li"),dde=a("strong"),k4o=o("t5"),S4o=o(" \u2014 "),dj=a("a"),R4o=o("T5ForConditionalGeneration"),P4o=o(" (T5 model)"),B4o=l(),Nu=a("li"),cde=a("strong"),I4o=o("tapas"),N4o=o(" \u2014 "),cj=a("a"),q4o=o("TapasForMaskedLM"),j4o=o(" (TAPAS model)"),D4o=l(),qu=a("li"),fde=a("strong"),G4o=o("transfo-xl"),O4o=o(" \u2014 "),fj=a("a"),V4o=o("TransfoXLLMHeadModel"),X4o=o(" (Transformer-XL model)"),z4o=l(),ju=a("li"),mde=a("strong"),W4o=o("unispeech"),Q4o=o(" \u2014 "),mj=a("a"),H4o=o("UniSpeechForPreTraining"),U4o=o(" (UniSpeech model)"),J4o=l(),Du=a("li"),gde=a("strong"),Y4o=o("unispeech-sat"),K4o=o(" \u2014 "),gj=a("a"),Z4o=o("UniSpeechSatForPreTraining"),eEo=o(" (UniSpeechSat model)"),oEo=l(),Gu=a("li"),hde=a("strong"),rEo=o("visual_bert"),tEo=o(" \u2014 "),hj=a("a"),aEo=o("VisualBertForPreTraining"),nEo=o(" (VisualBert model)"),sEo=l(),Ou=a("li"),pde=a("strong"),lEo=o("vit_mae"),iEo=o(" \u2014 "),pj=a("a"),dEo=o("ViTMAEForPreTraining"),cEo=o(" (ViTMAE model)"),fEo=l(),Vu=a("li"),_de=a("strong"),mEo=o("wav2vec2"),gEo=o(" \u2014 "),_j=a("a"),hEo=o("Wav2Vec2ForPreTraining"),pEo=o(" (Wav2Vec2 model)"),_Eo=l(),Xu=a("li"),ude=a("strong"),uEo=o("wav2vec2-conformer"),bEo=o(" \u2014 "),uj=a("a"),vEo=o("Wav2Vec2ConformerForPreTraining"),FEo=o(" (Wav2Vec2-Conformer model)"),TEo=l(),zu=a("li"),bde=a("strong"),MEo=o("xlm"),EEo=o(" \u2014 "),bj=a("a"),CEo=o("XLMWithLMHeadModel"),wEo=o(" (XLM model)"),AEo=l(),Wu=a("li"),vde=a("strong"),yEo=o("xlm-roberta"),LEo=o(" \u2014 "),vj=a("a"),xEo=o("XLMRobertaForMaskedLM"),$Eo=o(" (XLM-RoBERTa model)"),kEo=l(),Qu=a("li"),Fde=a("strong"),SEo=o("xlm-roberta-xl"),REo=o(" \u2014 "),Fj=a("a"),PEo=o("XLMRobertaXLForMaskedLM"),BEo=o(" (XLM-RoBERTa-XL model)"),IEo=l(),Hu=a("li"),Tde=a("strong"),NEo=o("xlnet"),qEo=o(" \u2014 "),Tj=a("a"),jEo=o("XLNetLMHeadModel"),DEo=o(" (XLNet model)"),GEo=l(),Uu=a("p"),OEo=o("The model is set in evaluation mode by default using "),Mde=a("code"),VEo=o("model.eval()"),XEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ede=a("code"),zEo=o("model.train()"),WEo=l(),F(Ju.$$.fragment),Eqe=l(),ki=a("h2"),Yu=a("a"),Cde=a("span"),F(fy.$$.fragment),QEo=l(),wde=a("span"),HEo=o("AutoModelForCausalLM"),Cqe=l(),$o=a("div"),F(my.$$.fragment),UEo=l(),Si=a("p"),JEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Mj=a("a"),YEo=o("from_pretrained()"),KEo=o(" class method or the "),Ej=a("a"),ZEo=o("from_config()"),eCo=o(` class
method.`),oCo=l(),gy=a("p"),rCo=o("This class cannot be instantiated directly using "),Ade=a("code"),tCo=o("__init__()"),aCo=o(" (throws an error)."),nCo=l(),nt=a("div"),F(hy.$$.fragment),sCo=l(),yde=a("p"),lCo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iCo=l(),Ri=a("p"),dCo=o(`Note:
Loading a model from its configuration file does `),Lde=a("strong"),cCo=o("not"),fCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=a("a"),mCo=o("from_pretrained()"),gCo=o(" to load the model weights."),hCo=l(),F(Ku.$$.fragment),pCo=l(),Ke=a("div"),F(py.$$.fragment),_Co=l(),xde=a("p"),uCo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),bCo=l(),$a=a("p"),vCo=o("The model class to instantiate is selected based on the "),$de=a("code"),FCo=o("model_type"),TCo=o(` property of the config object (either
passed as an argument or loaded from `),kde=a("code"),MCo=o("pretrained_model_name_or_path"),ECo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sde=a("code"),CCo=o("pretrained_model_name_or_path"),wCo=o(":"),ACo=l(),z=a("ul"),Zu=a("li"),Rde=a("strong"),yCo=o("bart"),LCo=o(" \u2014 "),wj=a("a"),xCo=o("BartForCausalLM"),$Co=o(" (BART model)"),kCo=l(),e2=a("li"),Pde=a("strong"),SCo=o("bert"),RCo=o(" \u2014 "),Aj=a("a"),PCo=o("BertLMHeadModel"),BCo=o(" (BERT model)"),ICo=l(),o2=a("li"),Bde=a("strong"),NCo=o("bert-generation"),qCo=o(" \u2014 "),yj=a("a"),jCo=o("BertGenerationDecoder"),DCo=o(" (Bert Generation model)"),GCo=l(),r2=a("li"),Ide=a("strong"),OCo=o("big_bird"),VCo=o(" \u2014 "),Lj=a("a"),XCo=o("BigBirdForCausalLM"),zCo=o(" (BigBird model)"),WCo=l(),t2=a("li"),Nde=a("strong"),QCo=o("bigbird_pegasus"),HCo=o(" \u2014 "),xj=a("a"),UCo=o("BigBirdPegasusForCausalLM"),JCo=o(" (BigBirdPegasus model)"),YCo=l(),a2=a("li"),qde=a("strong"),KCo=o("blenderbot"),ZCo=o(" \u2014 "),$j=a("a"),e5o=o("BlenderbotForCausalLM"),o5o=o(" (Blenderbot model)"),r5o=l(),n2=a("li"),jde=a("strong"),t5o=o("blenderbot-small"),a5o=o(" \u2014 "),kj=a("a"),n5o=o("BlenderbotSmallForCausalLM"),s5o=o(" (BlenderbotSmall model)"),l5o=l(),s2=a("li"),Dde=a("strong"),i5o=o("camembert"),d5o=o(" \u2014 "),Sj=a("a"),c5o=o("CamembertForCausalLM"),f5o=o(" (CamemBERT model)"),m5o=l(),l2=a("li"),Gde=a("strong"),g5o=o("ctrl"),h5o=o(" \u2014 "),Rj=a("a"),p5o=o("CTRLLMHeadModel"),_5o=o(" (CTRL model)"),u5o=l(),i2=a("li"),Ode=a("strong"),b5o=o("data2vec-text"),v5o=o(" \u2014 "),Pj=a("a"),F5o=o("Data2VecTextForCausalLM"),T5o=o(" (Data2VecText model)"),M5o=l(),d2=a("li"),Vde=a("strong"),E5o=o("electra"),C5o=o(" \u2014 "),Bj=a("a"),w5o=o("ElectraForCausalLM"),A5o=o(" (ELECTRA model)"),y5o=l(),c2=a("li"),Xde=a("strong"),L5o=o("gpt2"),x5o=o(" \u2014 "),Ij=a("a"),$5o=o("GPT2LMHeadModel"),k5o=o(" (OpenAI GPT-2 model)"),S5o=l(),f2=a("li"),zde=a("strong"),R5o=o("gpt_neo"),P5o=o(" \u2014 "),Nj=a("a"),B5o=o("GPTNeoForCausalLM"),I5o=o(" (GPT Neo model)"),N5o=l(),m2=a("li"),Wde=a("strong"),q5o=o("gpt_neox"),j5o=o(" \u2014 "),qj=a("a"),D5o=o("GPTNeoXForCausalLM"),G5o=o(" (GPT NeoX model)"),O5o=l(),g2=a("li"),Qde=a("strong"),V5o=o("gptj"),X5o=o(" \u2014 "),jj=a("a"),z5o=o("GPTJForCausalLM"),W5o=o(" (GPT-J model)"),Q5o=l(),h2=a("li"),Hde=a("strong"),H5o=o("marian"),U5o=o(" \u2014 "),Dj=a("a"),J5o=o("MarianForCausalLM"),Y5o=o(" (Marian model)"),K5o=l(),p2=a("li"),Ude=a("strong"),Z5o=o("mbart"),ewo=o(" \u2014 "),Gj=a("a"),owo=o("MBartForCausalLM"),rwo=o(" (mBART model)"),two=l(),_2=a("li"),Jde=a("strong"),awo=o("megatron-bert"),nwo=o(" \u2014 "),Oj=a("a"),swo=o("MegatronBertForCausalLM"),lwo=o(" (MegatronBert model)"),iwo=l(),u2=a("li"),Yde=a("strong"),dwo=o("openai-gpt"),cwo=o(" \u2014 "),Vj=a("a"),fwo=o("OpenAIGPTLMHeadModel"),mwo=o(" (OpenAI GPT model)"),gwo=l(),b2=a("li"),Kde=a("strong"),hwo=o("opt"),pwo=o(" \u2014 "),Xj=a("a"),_wo=o("OPTForCausalLM"),uwo=o(" (OPT model)"),bwo=l(),v2=a("li"),Zde=a("strong"),vwo=o("pegasus"),Fwo=o(" \u2014 "),zj=a("a"),Two=o("PegasusForCausalLM"),Mwo=o(" (Pegasus model)"),Ewo=l(),F2=a("li"),ece=a("strong"),Cwo=o("plbart"),wwo=o(" \u2014 "),Wj=a("a"),Awo=o("PLBartForCausalLM"),ywo=o(" (PLBart model)"),Lwo=l(),T2=a("li"),oce=a("strong"),xwo=o("prophetnet"),$wo=o(" \u2014 "),Qj=a("a"),kwo=o("ProphetNetForCausalLM"),Swo=o(" (ProphetNet model)"),Rwo=l(),M2=a("li"),rce=a("strong"),Pwo=o("qdqbert"),Bwo=o(" \u2014 "),Hj=a("a"),Iwo=o("QDQBertLMHeadModel"),Nwo=o(" (QDQBert model)"),qwo=l(),E2=a("li"),tce=a("strong"),jwo=o("reformer"),Dwo=o(" \u2014 "),Uj=a("a"),Gwo=o("ReformerModelWithLMHead"),Owo=o(" (Reformer model)"),Vwo=l(),C2=a("li"),ace=a("strong"),Xwo=o("rembert"),zwo=o(" \u2014 "),Jj=a("a"),Wwo=o("RemBertForCausalLM"),Qwo=o(" (RemBERT model)"),Hwo=l(),w2=a("li"),nce=a("strong"),Uwo=o("roberta"),Jwo=o(" \u2014 "),Yj=a("a"),Ywo=o("RobertaForCausalLM"),Kwo=o(" (RoBERTa model)"),Zwo=l(),A2=a("li"),sce=a("strong"),e6o=o("roformer"),o6o=o(" \u2014 "),Kj=a("a"),r6o=o("RoFormerForCausalLM"),t6o=o(" (RoFormer model)"),a6o=l(),y2=a("li"),lce=a("strong"),n6o=o("speech_to_text_2"),s6o=o(" \u2014 "),Zj=a("a"),l6o=o("Speech2Text2ForCausalLM"),i6o=o(" (Speech2Text2 model)"),d6o=l(),L2=a("li"),ice=a("strong"),c6o=o("transfo-xl"),f6o=o(" \u2014 "),eD=a("a"),m6o=o("TransfoXLLMHeadModel"),g6o=o(" (Transformer-XL model)"),h6o=l(),x2=a("li"),dce=a("strong"),p6o=o("trocr"),_6o=o(" \u2014 "),oD=a("a"),u6o=o("TrOCRForCausalLM"),b6o=o(" (TrOCR model)"),v6o=l(),$2=a("li"),cce=a("strong"),F6o=o("xglm"),T6o=o(" \u2014 "),rD=a("a"),M6o=o("XGLMForCausalLM"),E6o=o(" (XGLM model)"),C6o=l(),k2=a("li"),fce=a("strong"),w6o=o("xlm"),A6o=o(" \u2014 "),tD=a("a"),y6o=o("XLMWithLMHeadModel"),L6o=o(" (XLM model)"),x6o=l(),S2=a("li"),mce=a("strong"),$6o=o("xlm-prophetnet"),k6o=o(" \u2014 "),aD=a("a"),S6o=o("XLMProphetNetForCausalLM"),R6o=o(" (XLMProphetNet model)"),P6o=l(),R2=a("li"),gce=a("strong"),B6o=o("xlm-roberta"),I6o=o(" \u2014 "),nD=a("a"),N6o=o("XLMRobertaForCausalLM"),q6o=o(" (XLM-RoBERTa model)"),j6o=l(),P2=a("li"),hce=a("strong"),D6o=o("xlm-roberta-xl"),G6o=o(" \u2014 "),sD=a("a"),O6o=o("XLMRobertaXLForCausalLM"),V6o=o(" (XLM-RoBERTa-XL model)"),X6o=l(),B2=a("li"),pce=a("strong"),z6o=o("xlnet"),W6o=o(" \u2014 "),lD=a("a"),Q6o=o("XLNetLMHeadModel"),H6o=o(" (XLNet model)"),U6o=l(),I2=a("p"),J6o=o("The model is set in evaluation mode by default using "),_ce=a("code"),Y6o=o("model.eval()"),K6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uce=a("code"),Z6o=o("model.train()"),eAo=l(),F(N2.$$.fragment),wqe=l(),Pi=a("h2"),q2=a("a"),bce=a("span"),F(_y.$$.fragment),oAo=l(),vce=a("span"),rAo=o("AutoModelForMaskedLM"),Aqe=l(),ko=a("div"),F(uy.$$.fragment),tAo=l(),Bi=a("p"),aAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iD=a("a"),nAo=o("from_pretrained()"),sAo=o(" class method or the "),dD=a("a"),lAo=o("from_config()"),iAo=o(` class
method.`),dAo=l(),by=a("p"),cAo=o("This class cannot be instantiated directly using "),Fce=a("code"),fAo=o("__init__()"),mAo=o(" (throws an error)."),gAo=l(),st=a("div"),F(vy.$$.fragment),hAo=l(),Tce=a("p"),pAo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Ao=l(),Ii=a("p"),uAo=o(`Note:
Loading a model from its configuration file does `),Mce=a("strong"),bAo=o("not"),vAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cD=a("a"),FAo=o("from_pretrained()"),TAo=o(" to load the model weights."),MAo=l(),F(j2.$$.fragment),EAo=l(),Ze=a("div"),F(Fy.$$.fragment),CAo=l(),Ece=a("p"),wAo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),AAo=l(),ka=a("p"),yAo=o("The model class to instantiate is selected based on the "),Cce=a("code"),LAo=o("model_type"),xAo=o(` property of the config object (either
passed as an argument or loaded from `),wce=a("code"),$Ao=o("pretrained_model_name_or_path"),kAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ace=a("code"),SAo=o("pretrained_model_name_or_path"),RAo=o(":"),PAo=l(),Q=a("ul"),D2=a("li"),yce=a("strong"),BAo=o("albert"),IAo=o(" \u2014 "),fD=a("a"),NAo=o("AlbertForMaskedLM"),qAo=o(" (ALBERT model)"),jAo=l(),G2=a("li"),Lce=a("strong"),DAo=o("bart"),GAo=o(" \u2014 "),mD=a("a"),OAo=o("BartForConditionalGeneration"),VAo=o(" (BART model)"),XAo=l(),O2=a("li"),xce=a("strong"),zAo=o("bert"),WAo=o(" \u2014 "),gD=a("a"),QAo=o("BertForMaskedLM"),HAo=o(" (BERT model)"),UAo=l(),V2=a("li"),$ce=a("strong"),JAo=o("big_bird"),YAo=o(" \u2014 "),hD=a("a"),KAo=o("BigBirdForMaskedLM"),ZAo=o(" (BigBird model)"),eyo=l(),X2=a("li"),kce=a("strong"),oyo=o("camembert"),ryo=o(" \u2014 "),pD=a("a"),tyo=o("CamembertForMaskedLM"),ayo=o(" (CamemBERT model)"),nyo=l(),z2=a("li"),Sce=a("strong"),syo=o("convbert"),lyo=o(" \u2014 "),_D=a("a"),iyo=o("ConvBertForMaskedLM"),dyo=o(" (ConvBERT model)"),cyo=l(),W2=a("li"),Rce=a("strong"),fyo=o("data2vec-text"),myo=o(" \u2014 "),uD=a("a"),gyo=o("Data2VecTextForMaskedLM"),hyo=o(" (Data2VecText model)"),pyo=l(),Q2=a("li"),Pce=a("strong"),_yo=o("deberta"),uyo=o(" \u2014 "),bD=a("a"),byo=o("DebertaForMaskedLM"),vyo=o(" (DeBERTa model)"),Fyo=l(),H2=a("li"),Bce=a("strong"),Tyo=o("deberta-v2"),Myo=o(" \u2014 "),vD=a("a"),Eyo=o("DebertaV2ForMaskedLM"),Cyo=o(" (DeBERTa-v2 model)"),wyo=l(),U2=a("li"),Ice=a("strong"),Ayo=o("distilbert"),yyo=o(" \u2014 "),FD=a("a"),Lyo=o("DistilBertForMaskedLM"),xyo=o(" (DistilBERT model)"),$yo=l(),J2=a("li"),Nce=a("strong"),kyo=o("electra"),Syo=o(" \u2014 "),TD=a("a"),Ryo=o("ElectraForMaskedLM"),Pyo=o(" (ELECTRA model)"),Byo=l(),Y2=a("li"),qce=a("strong"),Iyo=o("flaubert"),Nyo=o(" \u2014 "),MD=a("a"),qyo=o("FlaubertWithLMHeadModel"),jyo=o(" (FlauBERT model)"),Dyo=l(),K2=a("li"),jce=a("strong"),Gyo=o("fnet"),Oyo=o(" \u2014 "),ED=a("a"),Vyo=o("FNetForMaskedLM"),Xyo=o(" (FNet model)"),zyo=l(),Z2=a("li"),Dce=a("strong"),Wyo=o("funnel"),Qyo=o(" \u2014 "),CD=a("a"),Hyo=o("FunnelForMaskedLM"),Uyo=o(" (Funnel Transformer model)"),Jyo=l(),e1=a("li"),Gce=a("strong"),Yyo=o("ibert"),Kyo=o(" \u2014 "),wD=a("a"),Zyo=o("IBertForMaskedLM"),eLo=o(" (I-BERT model)"),oLo=l(),o1=a("li"),Oce=a("strong"),rLo=o("layoutlm"),tLo=o(" \u2014 "),AD=a("a"),aLo=o("LayoutLMForMaskedLM"),nLo=o(" (LayoutLM model)"),sLo=l(),r1=a("li"),Vce=a("strong"),lLo=o("longformer"),iLo=o(" \u2014 "),yD=a("a"),dLo=o("LongformerForMaskedLM"),cLo=o(" (Longformer model)"),fLo=l(),t1=a("li"),Xce=a("strong"),mLo=o("mbart"),gLo=o(" \u2014 "),LD=a("a"),hLo=o("MBartForConditionalGeneration"),pLo=o(" (mBART model)"),_Lo=l(),a1=a("li"),zce=a("strong"),uLo=o("megatron-bert"),bLo=o(" \u2014 "),xD=a("a"),vLo=o("MegatronBertForMaskedLM"),FLo=o(" (MegatronBert model)"),TLo=l(),n1=a("li"),Wce=a("strong"),MLo=o("mobilebert"),ELo=o(" \u2014 "),$D=a("a"),CLo=o("MobileBertForMaskedLM"),wLo=o(" (MobileBERT model)"),ALo=l(),s1=a("li"),Qce=a("strong"),yLo=o("mpnet"),LLo=o(" \u2014 "),kD=a("a"),xLo=o("MPNetForMaskedLM"),$Lo=o(" (MPNet model)"),kLo=l(),l1=a("li"),Hce=a("strong"),SLo=o("nystromformer"),RLo=o(" \u2014 "),SD=a("a"),PLo=o("NystromformerForMaskedLM"),BLo=o(" (Nystromformer model)"),ILo=l(),i1=a("li"),Uce=a("strong"),NLo=o("perceiver"),qLo=o(" \u2014 "),RD=a("a"),jLo=o("PerceiverForMaskedLM"),DLo=o(" (Perceiver model)"),GLo=l(),d1=a("li"),Jce=a("strong"),OLo=o("qdqbert"),VLo=o(" \u2014 "),PD=a("a"),XLo=o("QDQBertForMaskedLM"),zLo=o(" (QDQBert model)"),WLo=l(),c1=a("li"),Yce=a("strong"),QLo=o("reformer"),HLo=o(" \u2014 "),BD=a("a"),ULo=o("ReformerForMaskedLM"),JLo=o(" (Reformer model)"),YLo=l(),f1=a("li"),Kce=a("strong"),KLo=o("rembert"),ZLo=o(" \u2014 "),ID=a("a"),e8o=o("RemBertForMaskedLM"),o8o=o(" (RemBERT model)"),r8o=l(),m1=a("li"),Zce=a("strong"),t8o=o("roberta"),a8o=o(" \u2014 "),ND=a("a"),n8o=o("RobertaForMaskedLM"),s8o=o(" (RoBERTa model)"),l8o=l(),g1=a("li"),efe=a("strong"),i8o=o("roformer"),d8o=o(" \u2014 "),qD=a("a"),c8o=o("RoFormerForMaskedLM"),f8o=o(" (RoFormer model)"),m8o=l(),h1=a("li"),ofe=a("strong"),g8o=o("squeezebert"),h8o=o(" \u2014 "),jD=a("a"),p8o=o("SqueezeBertForMaskedLM"),_8o=o(" (SqueezeBERT model)"),u8o=l(),p1=a("li"),rfe=a("strong"),b8o=o("tapas"),v8o=o(" \u2014 "),DD=a("a"),F8o=o("TapasForMaskedLM"),T8o=o(" (TAPAS model)"),M8o=l(),_1=a("li"),tfe=a("strong"),E8o=o("wav2vec2"),C8o=o(" \u2014 "),afe=a("code"),w8o=o("Wav2Vec2ForMaskedLM"),A8o=o(" (Wav2Vec2 model)"),y8o=l(),u1=a("li"),nfe=a("strong"),L8o=o("xlm"),x8o=o(" \u2014 "),GD=a("a"),$8o=o("XLMWithLMHeadModel"),k8o=o(" (XLM model)"),S8o=l(),b1=a("li"),sfe=a("strong"),R8o=o("xlm-roberta"),P8o=o(" \u2014 "),OD=a("a"),B8o=o("XLMRobertaForMaskedLM"),I8o=o(" (XLM-RoBERTa model)"),N8o=l(),v1=a("li"),lfe=a("strong"),q8o=o("xlm-roberta-xl"),j8o=o(" \u2014 "),VD=a("a"),D8o=o("XLMRobertaXLForMaskedLM"),G8o=o(" (XLM-RoBERTa-XL model)"),O8o=l(),F1=a("li"),ife=a("strong"),V8o=o("yoso"),X8o=o(" \u2014 "),XD=a("a"),z8o=o("YosoForMaskedLM"),W8o=o(" (YOSO model)"),Q8o=l(),T1=a("p"),H8o=o("The model is set in evaluation mode by default using "),dfe=a("code"),U8o=o("model.eval()"),J8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cfe=a("code"),Y8o=o("model.train()"),K8o=l(),F(M1.$$.fragment),yqe=l(),Ni=a("h2"),E1=a("a"),ffe=a("span"),F(Ty.$$.fragment),Z8o=l(),mfe=a("span"),e9o=o("AutoModelForSeq2SeqLM"),Lqe=l(),So=a("div"),F(My.$$.fragment),o9o=l(),qi=a("p"),r9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zD=a("a"),t9o=o("from_pretrained()"),a9o=o(" class method or the "),WD=a("a"),n9o=o("from_config()"),s9o=o(` class
method.`),l9o=l(),Ey=a("p"),i9o=o("This class cannot be instantiated directly using "),gfe=a("code"),d9o=o("__init__()"),c9o=o(" (throws an error)."),f9o=l(),lt=a("div"),F(Cy.$$.fragment),m9o=l(),hfe=a("p"),g9o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),h9o=l(),ji=a("p"),p9o=o(`Note:
Loading a model from its configuration file does `),pfe=a("strong"),_9o=o("not"),u9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QD=a("a"),b9o=o("from_pretrained()"),v9o=o(" to load the model weights."),F9o=l(),F(C1.$$.fragment),T9o=l(),eo=a("div"),F(wy.$$.fragment),M9o=l(),_fe=a("p"),E9o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),C9o=l(),Sa=a("p"),w9o=o("The model class to instantiate is selected based on the "),ufe=a("code"),A9o=o("model_type"),y9o=o(` property of the config object (either
passed as an argument or loaded from `),bfe=a("code"),L9o=o("pretrained_model_name_or_path"),x9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vfe=a("code"),$9o=o("pretrained_model_name_or_path"),k9o=o(":"),S9o=l(),_e=a("ul"),w1=a("li"),Ffe=a("strong"),R9o=o("bart"),P9o=o(" \u2014 "),HD=a("a"),B9o=o("BartForConditionalGeneration"),I9o=o(" (BART model)"),N9o=l(),A1=a("li"),Tfe=a("strong"),q9o=o("bigbird_pegasus"),j9o=o(" \u2014 "),UD=a("a"),D9o=o("BigBirdPegasusForConditionalGeneration"),G9o=o(" (BigBirdPegasus model)"),O9o=l(),y1=a("li"),Mfe=a("strong"),V9o=o("blenderbot"),X9o=o(" \u2014 "),JD=a("a"),z9o=o("BlenderbotForConditionalGeneration"),W9o=o(" (Blenderbot model)"),Q9o=l(),L1=a("li"),Efe=a("strong"),H9o=o("blenderbot-small"),U9o=o(" \u2014 "),YD=a("a"),J9o=o("BlenderbotSmallForConditionalGeneration"),Y9o=o(" (BlenderbotSmall model)"),K9o=l(),x1=a("li"),Cfe=a("strong"),Z9o=o("encoder-decoder"),exo=o(" \u2014 "),KD=a("a"),oxo=o("EncoderDecoderModel"),rxo=o(" (Encoder decoder model)"),txo=l(),$1=a("li"),wfe=a("strong"),axo=o("fsmt"),nxo=o(" \u2014 "),ZD=a("a"),sxo=o("FSMTForConditionalGeneration"),lxo=o(" (FairSeq Machine-Translation model)"),ixo=l(),k1=a("li"),Afe=a("strong"),dxo=o("led"),cxo=o(" \u2014 "),eG=a("a"),fxo=o("LEDForConditionalGeneration"),mxo=o(" (LED model)"),gxo=l(),S1=a("li"),yfe=a("strong"),hxo=o("m2m_100"),pxo=o(" \u2014 "),oG=a("a"),_xo=o("M2M100ForConditionalGeneration"),uxo=o(" (M2M100 model)"),bxo=l(),R1=a("li"),Lfe=a("strong"),vxo=o("marian"),Fxo=o(" \u2014 "),rG=a("a"),Txo=o("MarianMTModel"),Mxo=o(" (Marian model)"),Exo=l(),P1=a("li"),xfe=a("strong"),Cxo=o("mbart"),wxo=o(" \u2014 "),tG=a("a"),Axo=o("MBartForConditionalGeneration"),yxo=o(" (mBART model)"),Lxo=l(),B1=a("li"),$fe=a("strong"),xxo=o("mt5"),$xo=o(" \u2014 "),aG=a("a"),kxo=o("MT5ForConditionalGeneration"),Sxo=o(" (mT5 model)"),Rxo=l(),I1=a("li"),kfe=a("strong"),Pxo=o("pegasus"),Bxo=o(" \u2014 "),nG=a("a"),Ixo=o("PegasusForConditionalGeneration"),Nxo=o(" (Pegasus model)"),qxo=l(),N1=a("li"),Sfe=a("strong"),jxo=o("plbart"),Dxo=o(" \u2014 "),sG=a("a"),Gxo=o("PLBartForConditionalGeneration"),Oxo=o(" (PLBart model)"),Vxo=l(),q1=a("li"),Rfe=a("strong"),Xxo=o("prophetnet"),zxo=o(" \u2014 "),lG=a("a"),Wxo=o("ProphetNetForConditionalGeneration"),Qxo=o(" (ProphetNet model)"),Hxo=l(),j1=a("li"),Pfe=a("strong"),Uxo=o("t5"),Jxo=o(" \u2014 "),iG=a("a"),Yxo=o("T5ForConditionalGeneration"),Kxo=o(" (T5 model)"),Zxo=l(),D1=a("li"),Bfe=a("strong"),e$o=o("xlm-prophetnet"),o$o=o(" \u2014 "),dG=a("a"),r$o=o("XLMProphetNetForConditionalGeneration"),t$o=o(" (XLMProphetNet model)"),a$o=l(),G1=a("p"),n$o=o("The model is set in evaluation mode by default using "),Ife=a("code"),s$o=o("model.eval()"),l$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nfe=a("code"),i$o=o("model.train()"),d$o=l(),F(O1.$$.fragment),xqe=l(),Di=a("h2"),V1=a("a"),qfe=a("span"),F(Ay.$$.fragment),c$o=l(),jfe=a("span"),f$o=o("AutoModelForSequenceClassification"),$qe=l(),Ro=a("div"),F(yy.$$.fragment),m$o=l(),Gi=a("p"),g$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cG=a("a"),h$o=o("from_pretrained()"),p$o=o(" class method or the "),fG=a("a"),_$o=o("from_config()"),u$o=o(` class
method.`),b$o=l(),Ly=a("p"),v$o=o("This class cannot be instantiated directly using "),Dfe=a("code"),F$o=o("__init__()"),T$o=o(" (throws an error)."),M$o=l(),it=a("div"),F(xy.$$.fragment),E$o=l(),Gfe=a("p"),C$o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),w$o=l(),Oi=a("p"),A$o=o(`Note:
Loading a model from its configuration file does `),Ofe=a("strong"),y$o=o("not"),L$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mG=a("a"),x$o=o("from_pretrained()"),$$o=o(" to load the model weights."),k$o=l(),F(X1.$$.fragment),S$o=l(),oo=a("div"),F($y.$$.fragment),R$o=l(),Vfe=a("p"),P$o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),B$o=l(),Ra=a("p"),I$o=o("The model class to instantiate is selected based on the "),Xfe=a("code"),N$o=o("model_type"),q$o=o(` property of the config object (either
passed as an argument or loaded from `),zfe=a("code"),j$o=o("pretrained_model_name_or_path"),D$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wfe=a("code"),G$o=o("pretrained_model_name_or_path"),O$o=o(":"),V$o=l(),N=a("ul"),z1=a("li"),Qfe=a("strong"),X$o=o("albert"),z$o=o(" \u2014 "),gG=a("a"),W$o=o("AlbertForSequenceClassification"),Q$o=o(" (ALBERT model)"),H$o=l(),W1=a("li"),Hfe=a("strong"),U$o=o("bart"),J$o=o(" \u2014 "),hG=a("a"),Y$o=o("BartForSequenceClassification"),K$o=o(" (BART model)"),Z$o=l(),Q1=a("li"),Ufe=a("strong"),eko=o("bert"),oko=o(" \u2014 "),pG=a("a"),rko=o("BertForSequenceClassification"),tko=o(" (BERT model)"),ako=l(),H1=a("li"),Jfe=a("strong"),nko=o("big_bird"),sko=o(" \u2014 "),_G=a("a"),lko=o("BigBirdForSequenceClassification"),iko=o(" (BigBird model)"),dko=l(),U1=a("li"),Yfe=a("strong"),cko=o("bigbird_pegasus"),fko=o(" \u2014 "),uG=a("a"),mko=o("BigBirdPegasusForSequenceClassification"),gko=o(" (BigBirdPegasus model)"),hko=l(),J1=a("li"),Kfe=a("strong"),pko=o("camembert"),_ko=o(" \u2014 "),bG=a("a"),uko=o("CamembertForSequenceClassification"),bko=o(" (CamemBERT model)"),vko=l(),Y1=a("li"),Zfe=a("strong"),Fko=o("canine"),Tko=o(" \u2014 "),vG=a("a"),Mko=o("CanineForSequenceClassification"),Eko=o(" (Canine model)"),Cko=l(),K1=a("li"),eme=a("strong"),wko=o("convbert"),Ako=o(" \u2014 "),FG=a("a"),yko=o("ConvBertForSequenceClassification"),Lko=o(" (ConvBERT model)"),xko=l(),Z1=a("li"),ome=a("strong"),$ko=o("ctrl"),kko=o(" \u2014 "),TG=a("a"),Sko=o("CTRLForSequenceClassification"),Rko=o(" (CTRL model)"),Pko=l(),eb=a("li"),rme=a("strong"),Bko=o("data2vec-text"),Iko=o(" \u2014 "),MG=a("a"),Nko=o("Data2VecTextForSequenceClassification"),qko=o(" (Data2VecText model)"),jko=l(),ob=a("li"),tme=a("strong"),Dko=o("deberta"),Gko=o(" \u2014 "),EG=a("a"),Oko=o("DebertaForSequenceClassification"),Vko=o(" (DeBERTa model)"),Xko=l(),rb=a("li"),ame=a("strong"),zko=o("deberta-v2"),Wko=o(" \u2014 "),CG=a("a"),Qko=o("DebertaV2ForSequenceClassification"),Hko=o(" (DeBERTa-v2 model)"),Uko=l(),tb=a("li"),nme=a("strong"),Jko=o("distilbert"),Yko=o(" \u2014 "),wG=a("a"),Kko=o("DistilBertForSequenceClassification"),Zko=o(" (DistilBERT model)"),eSo=l(),ab=a("li"),sme=a("strong"),oSo=o("electra"),rSo=o(" \u2014 "),AG=a("a"),tSo=o("ElectraForSequenceClassification"),aSo=o(" (ELECTRA model)"),nSo=l(),nb=a("li"),lme=a("strong"),sSo=o("flaubert"),lSo=o(" \u2014 "),yG=a("a"),iSo=o("FlaubertForSequenceClassification"),dSo=o(" (FlauBERT model)"),cSo=l(),sb=a("li"),ime=a("strong"),fSo=o("fnet"),mSo=o(" \u2014 "),LG=a("a"),gSo=o("FNetForSequenceClassification"),hSo=o(" (FNet model)"),pSo=l(),lb=a("li"),dme=a("strong"),_So=o("funnel"),uSo=o(" \u2014 "),xG=a("a"),bSo=o("FunnelForSequenceClassification"),vSo=o(" (Funnel Transformer model)"),FSo=l(),ib=a("li"),cme=a("strong"),TSo=o("gpt2"),MSo=o(" \u2014 "),$G=a("a"),ESo=o("GPT2ForSequenceClassification"),CSo=o(" (OpenAI GPT-2 model)"),wSo=l(),db=a("li"),fme=a("strong"),ASo=o("gpt_neo"),ySo=o(" \u2014 "),kG=a("a"),LSo=o("GPTNeoForSequenceClassification"),xSo=o(" (GPT Neo model)"),$So=l(),cb=a("li"),mme=a("strong"),kSo=o("gptj"),SSo=o(" \u2014 "),SG=a("a"),RSo=o("GPTJForSequenceClassification"),PSo=o(" (GPT-J model)"),BSo=l(),fb=a("li"),gme=a("strong"),ISo=o("ibert"),NSo=o(" \u2014 "),RG=a("a"),qSo=o("IBertForSequenceClassification"),jSo=o(" (I-BERT model)"),DSo=l(),mb=a("li"),hme=a("strong"),GSo=o("layoutlm"),OSo=o(" \u2014 "),PG=a("a"),VSo=o("LayoutLMForSequenceClassification"),XSo=o(" (LayoutLM model)"),zSo=l(),gb=a("li"),pme=a("strong"),WSo=o("layoutlmv2"),QSo=o(" \u2014 "),BG=a("a"),HSo=o("LayoutLMv2ForSequenceClassification"),USo=o(" (LayoutLMv2 model)"),JSo=l(),hb=a("li"),_me=a("strong"),YSo=o("layoutlmv3"),KSo=o(" \u2014 "),IG=a("a"),ZSo=o("LayoutLMv3ForSequenceClassification"),eRo=o(" (LayoutLMv3 model)"),oRo=l(),pb=a("li"),ume=a("strong"),rRo=o("led"),tRo=o(" \u2014 "),NG=a("a"),aRo=o("LEDForSequenceClassification"),nRo=o(" (LED model)"),sRo=l(),_b=a("li"),bme=a("strong"),lRo=o("longformer"),iRo=o(" \u2014 "),qG=a("a"),dRo=o("LongformerForSequenceClassification"),cRo=o(" (Longformer model)"),fRo=l(),ub=a("li"),vme=a("strong"),mRo=o("mbart"),gRo=o(" \u2014 "),jG=a("a"),hRo=o("MBartForSequenceClassification"),pRo=o(" (mBART model)"),_Ro=l(),bb=a("li"),Fme=a("strong"),uRo=o("megatron-bert"),bRo=o(" \u2014 "),DG=a("a"),vRo=o("MegatronBertForSequenceClassification"),FRo=o(" (MegatronBert model)"),TRo=l(),vb=a("li"),Tme=a("strong"),MRo=o("mobilebert"),ERo=o(" \u2014 "),GG=a("a"),CRo=o("MobileBertForSequenceClassification"),wRo=o(" (MobileBERT model)"),ARo=l(),Fb=a("li"),Mme=a("strong"),yRo=o("mpnet"),LRo=o(" \u2014 "),OG=a("a"),xRo=o("MPNetForSequenceClassification"),$Ro=o(" (MPNet model)"),kRo=l(),Tb=a("li"),Eme=a("strong"),SRo=o("nystromformer"),RRo=o(" \u2014 "),VG=a("a"),PRo=o("NystromformerForSequenceClassification"),BRo=o(" (Nystromformer model)"),IRo=l(),Mb=a("li"),Cme=a("strong"),NRo=o("openai-gpt"),qRo=o(" \u2014 "),XG=a("a"),jRo=o("OpenAIGPTForSequenceClassification"),DRo=o(" (OpenAI GPT model)"),GRo=l(),Eb=a("li"),wme=a("strong"),ORo=o("perceiver"),VRo=o(" \u2014 "),zG=a("a"),XRo=o("PerceiverForSequenceClassification"),zRo=o(" (Perceiver model)"),WRo=l(),Cb=a("li"),Ame=a("strong"),QRo=o("plbart"),HRo=o(" \u2014 "),WG=a("a"),URo=o("PLBartForSequenceClassification"),JRo=o(" (PLBart model)"),YRo=l(),wb=a("li"),yme=a("strong"),KRo=o("qdqbert"),ZRo=o(" \u2014 "),QG=a("a"),ePo=o("QDQBertForSequenceClassification"),oPo=o(" (QDQBert model)"),rPo=l(),Ab=a("li"),Lme=a("strong"),tPo=o("reformer"),aPo=o(" \u2014 "),HG=a("a"),nPo=o("ReformerForSequenceClassification"),sPo=o(" (Reformer model)"),lPo=l(),yb=a("li"),xme=a("strong"),iPo=o("rembert"),dPo=o(" \u2014 "),UG=a("a"),cPo=o("RemBertForSequenceClassification"),fPo=o(" (RemBERT model)"),mPo=l(),Lb=a("li"),$me=a("strong"),gPo=o("roberta"),hPo=o(" \u2014 "),JG=a("a"),pPo=o("RobertaForSequenceClassification"),_Po=o(" (RoBERTa model)"),uPo=l(),xb=a("li"),kme=a("strong"),bPo=o("roformer"),vPo=o(" \u2014 "),YG=a("a"),FPo=o("RoFormerForSequenceClassification"),TPo=o(" (RoFormer model)"),MPo=l(),$b=a("li"),Sme=a("strong"),EPo=o("squeezebert"),CPo=o(" \u2014 "),KG=a("a"),wPo=o("SqueezeBertForSequenceClassification"),APo=o(" (SqueezeBERT model)"),yPo=l(),kb=a("li"),Rme=a("strong"),LPo=o("tapas"),xPo=o(" \u2014 "),ZG=a("a"),$Po=o("TapasForSequenceClassification"),kPo=o(" (TAPAS model)"),SPo=l(),Sb=a("li"),Pme=a("strong"),RPo=o("transfo-xl"),PPo=o(" \u2014 "),eO=a("a"),BPo=o("TransfoXLForSequenceClassification"),IPo=o(" (Transformer-XL model)"),NPo=l(),Rb=a("li"),Bme=a("strong"),qPo=o("xlm"),jPo=o(" \u2014 "),oO=a("a"),DPo=o("XLMForSequenceClassification"),GPo=o(" (XLM model)"),OPo=l(),Pb=a("li"),Ime=a("strong"),VPo=o("xlm-roberta"),XPo=o(" \u2014 "),rO=a("a"),zPo=o("XLMRobertaForSequenceClassification"),WPo=o(" (XLM-RoBERTa model)"),QPo=l(),Bb=a("li"),Nme=a("strong"),HPo=o("xlm-roberta-xl"),UPo=o(" \u2014 "),tO=a("a"),JPo=o("XLMRobertaXLForSequenceClassification"),YPo=o(" (XLM-RoBERTa-XL model)"),KPo=l(),Ib=a("li"),qme=a("strong"),ZPo=o("xlnet"),eBo=o(" \u2014 "),aO=a("a"),oBo=o("XLNetForSequenceClassification"),rBo=o(" (XLNet model)"),tBo=l(),Nb=a("li"),jme=a("strong"),aBo=o("yoso"),nBo=o(" \u2014 "),nO=a("a"),sBo=o("YosoForSequenceClassification"),lBo=o(" (YOSO model)"),iBo=l(),qb=a("p"),dBo=o("The model is set in evaluation mode by default using "),Dme=a("code"),cBo=o("model.eval()"),fBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gme=a("code"),mBo=o("model.train()"),gBo=l(),F(jb.$$.fragment),kqe=l(),Vi=a("h2"),Db=a("a"),Ome=a("span"),F(ky.$$.fragment),hBo=l(),Vme=a("span"),pBo=o("AutoModelForMultipleChoice"),Sqe=l(),Po=a("div"),F(Sy.$$.fragment),_Bo=l(),Xi=a("p"),uBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sO=a("a"),bBo=o("from_pretrained()"),vBo=o(" class method or the "),lO=a("a"),FBo=o("from_config()"),TBo=o(` class
method.`),MBo=l(),Ry=a("p"),EBo=o("This class cannot be instantiated directly using "),Xme=a("code"),CBo=o("__init__()"),wBo=o(" (throws an error)."),ABo=l(),dt=a("div"),F(Py.$$.fragment),yBo=l(),zme=a("p"),LBo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xBo=l(),zi=a("p"),$Bo=o(`Note:
Loading a model from its configuration file does `),Wme=a("strong"),kBo=o("not"),SBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=a("a"),RBo=o("from_pretrained()"),PBo=o(" to load the model weights."),BBo=l(),F(Gb.$$.fragment),IBo=l(),ro=a("div"),F(By.$$.fragment),NBo=l(),Qme=a("p"),qBo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jBo=l(),Pa=a("p"),DBo=o("The model class to instantiate is selected based on the "),Hme=a("code"),GBo=o("model_type"),OBo=o(` property of the config object (either
passed as an argument or loaded from `),Ume=a("code"),VBo=o("pretrained_model_name_or_path"),XBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jme=a("code"),zBo=o("pretrained_model_name_or_path"),WBo=o(":"),QBo=l(),K=a("ul"),Ob=a("li"),Yme=a("strong"),HBo=o("albert"),UBo=o(" \u2014 "),dO=a("a"),JBo=o("AlbertForMultipleChoice"),YBo=o(" (ALBERT model)"),KBo=l(),Vb=a("li"),Kme=a("strong"),ZBo=o("bert"),eIo=o(" \u2014 "),cO=a("a"),oIo=o("BertForMultipleChoice"),rIo=o(" (BERT model)"),tIo=l(),Xb=a("li"),Zme=a("strong"),aIo=o("big_bird"),nIo=o(" \u2014 "),fO=a("a"),sIo=o("BigBirdForMultipleChoice"),lIo=o(" (BigBird model)"),iIo=l(),zb=a("li"),ege=a("strong"),dIo=o("camembert"),cIo=o(" \u2014 "),mO=a("a"),fIo=o("CamembertForMultipleChoice"),mIo=o(" (CamemBERT model)"),gIo=l(),Wb=a("li"),oge=a("strong"),hIo=o("canine"),pIo=o(" \u2014 "),gO=a("a"),_Io=o("CanineForMultipleChoice"),uIo=o(" (Canine model)"),bIo=l(),Qb=a("li"),rge=a("strong"),vIo=o("convbert"),FIo=o(" \u2014 "),hO=a("a"),TIo=o("ConvBertForMultipleChoice"),MIo=o(" (ConvBERT model)"),EIo=l(),Hb=a("li"),tge=a("strong"),CIo=o("data2vec-text"),wIo=o(" \u2014 "),pO=a("a"),AIo=o("Data2VecTextForMultipleChoice"),yIo=o(" (Data2VecText model)"),LIo=l(),Ub=a("li"),age=a("strong"),xIo=o("deberta-v2"),$Io=o(" \u2014 "),_O=a("a"),kIo=o("DebertaV2ForMultipleChoice"),SIo=o(" (DeBERTa-v2 model)"),RIo=l(),Jb=a("li"),nge=a("strong"),PIo=o("distilbert"),BIo=o(" \u2014 "),uO=a("a"),IIo=o("DistilBertForMultipleChoice"),NIo=o(" (DistilBERT model)"),qIo=l(),Yb=a("li"),sge=a("strong"),jIo=o("electra"),DIo=o(" \u2014 "),bO=a("a"),GIo=o("ElectraForMultipleChoice"),OIo=o(" (ELECTRA model)"),VIo=l(),Kb=a("li"),lge=a("strong"),XIo=o("flaubert"),zIo=o(" \u2014 "),vO=a("a"),WIo=o("FlaubertForMultipleChoice"),QIo=o(" (FlauBERT model)"),HIo=l(),Zb=a("li"),ige=a("strong"),UIo=o("fnet"),JIo=o(" \u2014 "),FO=a("a"),YIo=o("FNetForMultipleChoice"),KIo=o(" (FNet model)"),ZIo=l(),ev=a("li"),dge=a("strong"),eNo=o("funnel"),oNo=o(" \u2014 "),TO=a("a"),rNo=o("FunnelForMultipleChoice"),tNo=o(" (Funnel Transformer model)"),aNo=l(),ov=a("li"),cge=a("strong"),nNo=o("ibert"),sNo=o(" \u2014 "),MO=a("a"),lNo=o("IBertForMultipleChoice"),iNo=o(" (I-BERT model)"),dNo=l(),rv=a("li"),fge=a("strong"),cNo=o("longformer"),fNo=o(" \u2014 "),EO=a("a"),mNo=o("LongformerForMultipleChoice"),gNo=o(" (Longformer model)"),hNo=l(),tv=a("li"),mge=a("strong"),pNo=o("megatron-bert"),_No=o(" \u2014 "),CO=a("a"),uNo=o("MegatronBertForMultipleChoice"),bNo=o(" (MegatronBert model)"),vNo=l(),av=a("li"),gge=a("strong"),FNo=o("mobilebert"),TNo=o(" \u2014 "),wO=a("a"),MNo=o("MobileBertForMultipleChoice"),ENo=o(" (MobileBERT model)"),CNo=l(),nv=a("li"),hge=a("strong"),wNo=o("mpnet"),ANo=o(" \u2014 "),AO=a("a"),yNo=o("MPNetForMultipleChoice"),LNo=o(" (MPNet model)"),xNo=l(),sv=a("li"),pge=a("strong"),$No=o("nystromformer"),kNo=o(" \u2014 "),yO=a("a"),SNo=o("NystromformerForMultipleChoice"),RNo=o(" (Nystromformer model)"),PNo=l(),lv=a("li"),_ge=a("strong"),BNo=o("qdqbert"),INo=o(" \u2014 "),LO=a("a"),NNo=o("QDQBertForMultipleChoice"),qNo=o(" (QDQBert model)"),jNo=l(),iv=a("li"),uge=a("strong"),DNo=o("rembert"),GNo=o(" \u2014 "),xO=a("a"),ONo=o("RemBertForMultipleChoice"),VNo=o(" (RemBERT model)"),XNo=l(),dv=a("li"),bge=a("strong"),zNo=o("roberta"),WNo=o(" \u2014 "),$O=a("a"),QNo=o("RobertaForMultipleChoice"),HNo=o(" (RoBERTa model)"),UNo=l(),cv=a("li"),vge=a("strong"),JNo=o("roformer"),YNo=o(" \u2014 "),kO=a("a"),KNo=o("RoFormerForMultipleChoice"),ZNo=o(" (RoFormer model)"),eqo=l(),fv=a("li"),Fge=a("strong"),oqo=o("squeezebert"),rqo=o(" \u2014 "),SO=a("a"),tqo=o("SqueezeBertForMultipleChoice"),aqo=o(" (SqueezeBERT model)"),nqo=l(),mv=a("li"),Tge=a("strong"),sqo=o("xlm"),lqo=o(" \u2014 "),RO=a("a"),iqo=o("XLMForMultipleChoice"),dqo=o(" (XLM model)"),cqo=l(),gv=a("li"),Mge=a("strong"),fqo=o("xlm-roberta"),mqo=o(" \u2014 "),PO=a("a"),gqo=o("XLMRobertaForMultipleChoice"),hqo=o(" (XLM-RoBERTa model)"),pqo=l(),hv=a("li"),Ege=a("strong"),_qo=o("xlm-roberta-xl"),uqo=o(" \u2014 "),BO=a("a"),bqo=o("XLMRobertaXLForMultipleChoice"),vqo=o(" (XLM-RoBERTa-XL model)"),Fqo=l(),pv=a("li"),Cge=a("strong"),Tqo=o("xlnet"),Mqo=o(" \u2014 "),IO=a("a"),Eqo=o("XLNetForMultipleChoice"),Cqo=o(" (XLNet model)"),wqo=l(),_v=a("li"),wge=a("strong"),Aqo=o("yoso"),yqo=o(" \u2014 "),NO=a("a"),Lqo=o("YosoForMultipleChoice"),xqo=o(" (YOSO model)"),$qo=l(),uv=a("p"),kqo=o("The model is set in evaluation mode by default using "),Age=a("code"),Sqo=o("model.eval()"),Rqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yge=a("code"),Pqo=o("model.train()"),Bqo=l(),F(bv.$$.fragment),Rqe=l(),Wi=a("h2"),vv=a("a"),Lge=a("span"),F(Iy.$$.fragment),Iqo=l(),xge=a("span"),Nqo=o("AutoModelForNextSentencePrediction"),Pqe=l(),Bo=a("div"),F(Ny.$$.fragment),qqo=l(),Qi=a("p"),jqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qO=a("a"),Dqo=o("from_pretrained()"),Gqo=o(" class method or the "),jO=a("a"),Oqo=o("from_config()"),Vqo=o(` class
method.`),Xqo=l(),qy=a("p"),zqo=o("This class cannot be instantiated directly using "),$ge=a("code"),Wqo=o("__init__()"),Qqo=o(" (throws an error)."),Hqo=l(),ct=a("div"),F(jy.$$.fragment),Uqo=l(),kge=a("p"),Jqo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Yqo=l(),Hi=a("p"),Kqo=o(`Note:
Loading a model from its configuration file does `),Sge=a("strong"),Zqo=o("not"),ejo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=a("a"),ojo=o("from_pretrained()"),rjo=o(" to load the model weights."),tjo=l(),F(Fv.$$.fragment),ajo=l(),to=a("div"),F(Dy.$$.fragment),njo=l(),Rge=a("p"),sjo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ljo=l(),Ba=a("p"),ijo=o("The model class to instantiate is selected based on the "),Pge=a("code"),djo=o("model_type"),cjo=o(` property of the config object (either
passed as an argument or loaded from `),Bge=a("code"),fjo=o("pretrained_model_name_or_path"),mjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ige=a("code"),gjo=o("pretrained_model_name_or_path"),hjo=o(":"),pjo=l(),Yr=a("ul"),Tv=a("li"),Nge=a("strong"),_jo=o("bert"),ujo=o(" \u2014 "),GO=a("a"),bjo=o("BertForNextSentencePrediction"),vjo=o(" (BERT model)"),Fjo=l(),Mv=a("li"),qge=a("strong"),Tjo=o("fnet"),Mjo=o(" \u2014 "),OO=a("a"),Ejo=o("FNetForNextSentencePrediction"),Cjo=o(" (FNet model)"),wjo=l(),Ev=a("li"),jge=a("strong"),Ajo=o("megatron-bert"),yjo=o(" \u2014 "),VO=a("a"),Ljo=o("MegatronBertForNextSentencePrediction"),xjo=o(" (MegatronBert model)"),$jo=l(),Cv=a("li"),Dge=a("strong"),kjo=o("mobilebert"),Sjo=o(" \u2014 "),XO=a("a"),Rjo=o("MobileBertForNextSentencePrediction"),Pjo=o(" (MobileBERT model)"),Bjo=l(),wv=a("li"),Gge=a("strong"),Ijo=o("qdqbert"),Njo=o(" \u2014 "),zO=a("a"),qjo=o("QDQBertForNextSentencePrediction"),jjo=o(" (QDQBert model)"),Djo=l(),Av=a("p"),Gjo=o("The model is set in evaluation mode by default using "),Oge=a("code"),Ojo=o("model.eval()"),Vjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vge=a("code"),Xjo=o("model.train()"),zjo=l(),F(yv.$$.fragment),Bqe=l(),Ui=a("h2"),Lv=a("a"),Xge=a("span"),F(Gy.$$.fragment),Wjo=l(),zge=a("span"),Qjo=o("AutoModelForTokenClassification"),Iqe=l(),Io=a("div"),F(Oy.$$.fragment),Hjo=l(),Ji=a("p"),Ujo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),WO=a("a"),Jjo=o("from_pretrained()"),Yjo=o(" class method or the "),QO=a("a"),Kjo=o("from_config()"),Zjo=o(` class
method.`),eDo=l(),Vy=a("p"),oDo=o("This class cannot be instantiated directly using "),Wge=a("code"),rDo=o("__init__()"),tDo=o(" (throws an error)."),aDo=l(),ft=a("div"),F(Xy.$$.fragment),nDo=l(),Qge=a("p"),sDo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),lDo=l(),Yi=a("p"),iDo=o(`Note:
Loading a model from its configuration file does `),Hge=a("strong"),dDo=o("not"),cDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=a("a"),fDo=o("from_pretrained()"),mDo=o(" to load the model weights."),gDo=l(),F(xv.$$.fragment),hDo=l(),ao=a("div"),F(zy.$$.fragment),pDo=l(),Uge=a("p"),_Do=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uDo=l(),Ia=a("p"),bDo=o("The model class to instantiate is selected based on the "),Jge=a("code"),vDo=o("model_type"),FDo=o(` property of the config object (either
passed as an argument or loaded from `),Yge=a("code"),TDo=o("pretrained_model_name_or_path"),MDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kge=a("code"),EDo=o("pretrained_model_name_or_path"),CDo=o(":"),wDo=l(),H=a("ul"),$v=a("li"),Zge=a("strong"),ADo=o("albert"),yDo=o(" \u2014 "),UO=a("a"),LDo=o("AlbertForTokenClassification"),xDo=o(" (ALBERT model)"),$Do=l(),kv=a("li"),ehe=a("strong"),kDo=o("bert"),SDo=o(" \u2014 "),JO=a("a"),RDo=o("BertForTokenClassification"),PDo=o(" (BERT model)"),BDo=l(),Sv=a("li"),ohe=a("strong"),IDo=o("big_bird"),NDo=o(" \u2014 "),YO=a("a"),qDo=o("BigBirdForTokenClassification"),jDo=o(" (BigBird model)"),DDo=l(),Rv=a("li"),rhe=a("strong"),GDo=o("camembert"),ODo=o(" \u2014 "),KO=a("a"),VDo=o("CamembertForTokenClassification"),XDo=o(" (CamemBERT model)"),zDo=l(),Pv=a("li"),the=a("strong"),WDo=o("canine"),QDo=o(" \u2014 "),ZO=a("a"),HDo=o("CanineForTokenClassification"),UDo=o(" (Canine model)"),JDo=l(),Bv=a("li"),ahe=a("strong"),YDo=o("convbert"),KDo=o(" \u2014 "),eV=a("a"),ZDo=o("ConvBertForTokenClassification"),eGo=o(" (ConvBERT model)"),oGo=l(),Iv=a("li"),nhe=a("strong"),rGo=o("data2vec-text"),tGo=o(" \u2014 "),oV=a("a"),aGo=o("Data2VecTextForTokenClassification"),nGo=o(" (Data2VecText model)"),sGo=l(),Nv=a("li"),she=a("strong"),lGo=o("deberta"),iGo=o(" \u2014 "),rV=a("a"),dGo=o("DebertaForTokenClassification"),cGo=o(" (DeBERTa model)"),fGo=l(),qv=a("li"),lhe=a("strong"),mGo=o("deberta-v2"),gGo=o(" \u2014 "),tV=a("a"),hGo=o("DebertaV2ForTokenClassification"),pGo=o(" (DeBERTa-v2 model)"),_Go=l(),jv=a("li"),ihe=a("strong"),uGo=o("distilbert"),bGo=o(" \u2014 "),aV=a("a"),vGo=o("DistilBertForTokenClassification"),FGo=o(" (DistilBERT model)"),TGo=l(),Dv=a("li"),dhe=a("strong"),MGo=o("electra"),EGo=o(" \u2014 "),nV=a("a"),CGo=o("ElectraForTokenClassification"),wGo=o(" (ELECTRA model)"),AGo=l(),Gv=a("li"),che=a("strong"),yGo=o("flaubert"),LGo=o(" \u2014 "),sV=a("a"),xGo=o("FlaubertForTokenClassification"),$Go=o(" (FlauBERT model)"),kGo=l(),Ov=a("li"),fhe=a("strong"),SGo=o("fnet"),RGo=o(" \u2014 "),lV=a("a"),PGo=o("FNetForTokenClassification"),BGo=o(" (FNet model)"),IGo=l(),Vv=a("li"),mhe=a("strong"),NGo=o("funnel"),qGo=o(" \u2014 "),iV=a("a"),jGo=o("FunnelForTokenClassification"),DGo=o(" (Funnel Transformer model)"),GGo=l(),Xv=a("li"),ghe=a("strong"),OGo=o("gpt2"),VGo=o(" \u2014 "),dV=a("a"),XGo=o("GPT2ForTokenClassification"),zGo=o(" (OpenAI GPT-2 model)"),WGo=l(),zv=a("li"),hhe=a("strong"),QGo=o("ibert"),HGo=o(" \u2014 "),cV=a("a"),UGo=o("IBertForTokenClassification"),JGo=o(" (I-BERT model)"),YGo=l(),Wv=a("li"),phe=a("strong"),KGo=o("layoutlm"),ZGo=o(" \u2014 "),fV=a("a"),eOo=o("LayoutLMForTokenClassification"),oOo=o(" (LayoutLM model)"),rOo=l(),Qv=a("li"),_he=a("strong"),tOo=o("layoutlmv2"),aOo=o(" \u2014 "),mV=a("a"),nOo=o("LayoutLMv2ForTokenClassification"),sOo=o(" (LayoutLMv2 model)"),lOo=l(),Hv=a("li"),uhe=a("strong"),iOo=o("layoutlmv3"),dOo=o(" \u2014 "),gV=a("a"),cOo=o("LayoutLMv3ForTokenClassification"),fOo=o(" (LayoutLMv3 model)"),mOo=l(),Uv=a("li"),bhe=a("strong"),gOo=o("longformer"),hOo=o(" \u2014 "),hV=a("a"),pOo=o("LongformerForTokenClassification"),_Oo=o(" (Longformer model)"),uOo=l(),Jv=a("li"),vhe=a("strong"),bOo=o("megatron-bert"),vOo=o(" \u2014 "),pV=a("a"),FOo=o("MegatronBertForTokenClassification"),TOo=o(" (MegatronBert model)"),MOo=l(),Yv=a("li"),Fhe=a("strong"),EOo=o("mobilebert"),COo=o(" \u2014 "),_V=a("a"),wOo=o("MobileBertForTokenClassification"),AOo=o(" (MobileBERT model)"),yOo=l(),Kv=a("li"),The=a("strong"),LOo=o("mpnet"),xOo=o(" \u2014 "),uV=a("a"),$Oo=o("MPNetForTokenClassification"),kOo=o(" (MPNet model)"),SOo=l(),Zv=a("li"),Mhe=a("strong"),ROo=o("nystromformer"),POo=o(" \u2014 "),bV=a("a"),BOo=o("NystromformerForTokenClassification"),IOo=o(" (Nystromformer model)"),NOo=l(),e3=a("li"),Ehe=a("strong"),qOo=o("qdqbert"),jOo=o(" \u2014 "),vV=a("a"),DOo=o("QDQBertForTokenClassification"),GOo=o(" (QDQBert model)"),OOo=l(),o3=a("li"),Che=a("strong"),VOo=o("rembert"),XOo=o(" \u2014 "),FV=a("a"),zOo=o("RemBertForTokenClassification"),WOo=o(" (RemBERT model)"),QOo=l(),r3=a("li"),whe=a("strong"),HOo=o("roberta"),UOo=o(" \u2014 "),TV=a("a"),JOo=o("RobertaForTokenClassification"),YOo=o(" (RoBERTa model)"),KOo=l(),t3=a("li"),Ahe=a("strong"),ZOo=o("roformer"),eVo=o(" \u2014 "),MV=a("a"),oVo=o("RoFormerForTokenClassification"),rVo=o(" (RoFormer model)"),tVo=l(),a3=a("li"),yhe=a("strong"),aVo=o("squeezebert"),nVo=o(" \u2014 "),EV=a("a"),sVo=o("SqueezeBertForTokenClassification"),lVo=o(" (SqueezeBERT model)"),iVo=l(),n3=a("li"),Lhe=a("strong"),dVo=o("xlm"),cVo=o(" \u2014 "),CV=a("a"),fVo=o("XLMForTokenClassification"),mVo=o(" (XLM model)"),gVo=l(),s3=a("li"),xhe=a("strong"),hVo=o("xlm-roberta"),pVo=o(" \u2014 "),wV=a("a"),_Vo=o("XLMRobertaForTokenClassification"),uVo=o(" (XLM-RoBERTa model)"),bVo=l(),l3=a("li"),$he=a("strong"),vVo=o("xlm-roberta-xl"),FVo=o(" \u2014 "),AV=a("a"),TVo=o("XLMRobertaXLForTokenClassification"),MVo=o(" (XLM-RoBERTa-XL model)"),EVo=l(),i3=a("li"),khe=a("strong"),CVo=o("xlnet"),wVo=o(" \u2014 "),yV=a("a"),AVo=o("XLNetForTokenClassification"),yVo=o(" (XLNet model)"),LVo=l(),d3=a("li"),She=a("strong"),xVo=o("yoso"),$Vo=o(" \u2014 "),LV=a("a"),kVo=o("YosoForTokenClassification"),SVo=o(" (YOSO model)"),RVo=l(),c3=a("p"),PVo=o("The model is set in evaluation mode by default using "),Rhe=a("code"),BVo=o("model.eval()"),IVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Phe=a("code"),NVo=o("model.train()"),qVo=l(),F(f3.$$.fragment),Nqe=l(),Ki=a("h2"),m3=a("a"),Bhe=a("span"),F(Wy.$$.fragment),jVo=l(),Ihe=a("span"),DVo=o("AutoModelForQuestionAnswering"),qqe=l(),No=a("div"),F(Qy.$$.fragment),GVo=l(),Zi=a("p"),OVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xV=a("a"),VVo=o("from_pretrained()"),XVo=o(" class method or the "),$V=a("a"),zVo=o("from_config()"),WVo=o(` class
method.`),QVo=l(),Hy=a("p"),HVo=o("This class cannot be instantiated directly using "),Nhe=a("code"),UVo=o("__init__()"),JVo=o(" (throws an error)."),YVo=l(),mt=a("div"),F(Uy.$$.fragment),KVo=l(),qhe=a("p"),ZVo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),eXo=l(),ed=a("p"),oXo=o(`Note:
Loading a model from its configuration file does `),jhe=a("strong"),rXo=o("not"),tXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=a("a"),aXo=o("from_pretrained()"),nXo=o(" to load the model weights."),sXo=l(),F(g3.$$.fragment),lXo=l(),no=a("div"),F(Jy.$$.fragment),iXo=l(),Dhe=a("p"),dXo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),cXo=l(),Na=a("p"),fXo=o("The model class to instantiate is selected based on the "),Ghe=a("code"),mXo=o("model_type"),gXo=o(` property of the config object (either
passed as an argument or loaded from `),Ohe=a("code"),hXo=o("pretrained_model_name_or_path"),pXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vhe=a("code"),_Xo=o("pretrained_model_name_or_path"),uXo=o(":"),bXo=l(),V=a("ul"),h3=a("li"),Xhe=a("strong"),vXo=o("albert"),FXo=o(" \u2014 "),SV=a("a"),TXo=o("AlbertForQuestionAnswering"),MXo=o(" (ALBERT model)"),EXo=l(),p3=a("li"),zhe=a("strong"),CXo=o("bart"),wXo=o(" \u2014 "),RV=a("a"),AXo=o("BartForQuestionAnswering"),yXo=o(" (BART model)"),LXo=l(),_3=a("li"),Whe=a("strong"),xXo=o("bert"),$Xo=o(" \u2014 "),PV=a("a"),kXo=o("BertForQuestionAnswering"),SXo=o(" (BERT model)"),RXo=l(),u3=a("li"),Qhe=a("strong"),PXo=o("big_bird"),BXo=o(" \u2014 "),BV=a("a"),IXo=o("BigBirdForQuestionAnswering"),NXo=o(" (BigBird model)"),qXo=l(),b3=a("li"),Hhe=a("strong"),jXo=o("bigbird_pegasus"),DXo=o(" \u2014 "),IV=a("a"),GXo=o("BigBirdPegasusForQuestionAnswering"),OXo=o(" (BigBirdPegasus model)"),VXo=l(),v3=a("li"),Uhe=a("strong"),XXo=o("camembert"),zXo=o(" \u2014 "),NV=a("a"),WXo=o("CamembertForQuestionAnswering"),QXo=o(" (CamemBERT model)"),HXo=l(),F3=a("li"),Jhe=a("strong"),UXo=o("canine"),JXo=o(" \u2014 "),qV=a("a"),YXo=o("CanineForQuestionAnswering"),KXo=o(" (Canine model)"),ZXo=l(),T3=a("li"),Yhe=a("strong"),ezo=o("convbert"),ozo=o(" \u2014 "),jV=a("a"),rzo=o("ConvBertForQuestionAnswering"),tzo=o(" (ConvBERT model)"),azo=l(),M3=a("li"),Khe=a("strong"),nzo=o("data2vec-text"),szo=o(" \u2014 "),DV=a("a"),lzo=o("Data2VecTextForQuestionAnswering"),izo=o(" (Data2VecText model)"),dzo=l(),E3=a("li"),Zhe=a("strong"),czo=o("deberta"),fzo=o(" \u2014 "),GV=a("a"),mzo=o("DebertaForQuestionAnswering"),gzo=o(" (DeBERTa model)"),hzo=l(),C3=a("li"),epe=a("strong"),pzo=o("deberta-v2"),_zo=o(" \u2014 "),OV=a("a"),uzo=o("DebertaV2ForQuestionAnswering"),bzo=o(" (DeBERTa-v2 model)"),vzo=l(),w3=a("li"),ope=a("strong"),Fzo=o("distilbert"),Tzo=o(" \u2014 "),VV=a("a"),Mzo=o("DistilBertForQuestionAnswering"),Ezo=o(" (DistilBERT model)"),Czo=l(),A3=a("li"),rpe=a("strong"),wzo=o("electra"),Azo=o(" \u2014 "),XV=a("a"),yzo=o("ElectraForQuestionAnswering"),Lzo=o(" (ELECTRA model)"),xzo=l(),y3=a("li"),tpe=a("strong"),$zo=o("flaubert"),kzo=o(" \u2014 "),zV=a("a"),Szo=o("FlaubertForQuestionAnsweringSimple"),Rzo=o(" (FlauBERT model)"),Pzo=l(),L3=a("li"),ape=a("strong"),Bzo=o("fnet"),Izo=o(" \u2014 "),WV=a("a"),Nzo=o("FNetForQuestionAnswering"),qzo=o(" (FNet model)"),jzo=l(),x3=a("li"),npe=a("strong"),Dzo=o("funnel"),Gzo=o(" \u2014 "),QV=a("a"),Ozo=o("FunnelForQuestionAnswering"),Vzo=o(" (Funnel Transformer model)"),Xzo=l(),$3=a("li"),spe=a("strong"),zzo=o("gptj"),Wzo=o(" \u2014 "),HV=a("a"),Qzo=o("GPTJForQuestionAnswering"),Hzo=o(" (GPT-J model)"),Uzo=l(),k3=a("li"),lpe=a("strong"),Jzo=o("ibert"),Yzo=o(" \u2014 "),UV=a("a"),Kzo=o("IBertForQuestionAnswering"),Zzo=o(" (I-BERT model)"),eWo=l(),S3=a("li"),ipe=a("strong"),oWo=o("layoutlmv2"),rWo=o(" \u2014 "),JV=a("a"),tWo=o("LayoutLMv2ForQuestionAnswering"),aWo=o(" (LayoutLMv2 model)"),nWo=l(),R3=a("li"),dpe=a("strong"),sWo=o("layoutlmv3"),lWo=o(" \u2014 "),YV=a("a"),iWo=o("LayoutLMv3ForQuestionAnswering"),dWo=o(" (LayoutLMv3 model)"),cWo=l(),P3=a("li"),cpe=a("strong"),fWo=o("led"),mWo=o(" \u2014 "),KV=a("a"),gWo=o("LEDForQuestionAnswering"),hWo=o(" (LED model)"),pWo=l(),B3=a("li"),fpe=a("strong"),_Wo=o("longformer"),uWo=o(" \u2014 "),ZV=a("a"),bWo=o("LongformerForQuestionAnswering"),vWo=o(" (Longformer model)"),FWo=l(),I3=a("li"),mpe=a("strong"),TWo=o("lxmert"),MWo=o(" \u2014 "),eX=a("a"),EWo=o("LxmertForQuestionAnswering"),CWo=o(" (LXMERT model)"),wWo=l(),N3=a("li"),gpe=a("strong"),AWo=o("mbart"),yWo=o(" \u2014 "),oX=a("a"),LWo=o("MBartForQuestionAnswering"),xWo=o(" (mBART model)"),$Wo=l(),q3=a("li"),hpe=a("strong"),kWo=o("megatron-bert"),SWo=o(" \u2014 "),rX=a("a"),RWo=o("MegatronBertForQuestionAnswering"),PWo=o(" (MegatronBert model)"),BWo=l(),j3=a("li"),ppe=a("strong"),IWo=o("mobilebert"),NWo=o(" \u2014 "),tX=a("a"),qWo=o("MobileBertForQuestionAnswering"),jWo=o(" (MobileBERT model)"),DWo=l(),D3=a("li"),_pe=a("strong"),GWo=o("mpnet"),OWo=o(" \u2014 "),aX=a("a"),VWo=o("MPNetForQuestionAnswering"),XWo=o(" (MPNet model)"),zWo=l(),G3=a("li"),upe=a("strong"),WWo=o("nystromformer"),QWo=o(" \u2014 "),nX=a("a"),HWo=o("NystromformerForQuestionAnswering"),UWo=o(" (Nystromformer model)"),JWo=l(),O3=a("li"),bpe=a("strong"),YWo=o("qdqbert"),KWo=o(" \u2014 "),sX=a("a"),ZWo=o("QDQBertForQuestionAnswering"),eQo=o(" (QDQBert model)"),oQo=l(),V3=a("li"),vpe=a("strong"),rQo=o("reformer"),tQo=o(" \u2014 "),lX=a("a"),aQo=o("ReformerForQuestionAnswering"),nQo=o(" (Reformer model)"),sQo=l(),X3=a("li"),Fpe=a("strong"),lQo=o("rembert"),iQo=o(" \u2014 "),iX=a("a"),dQo=o("RemBertForQuestionAnswering"),cQo=o(" (RemBERT model)"),fQo=l(),z3=a("li"),Tpe=a("strong"),mQo=o("roberta"),gQo=o(" \u2014 "),dX=a("a"),hQo=o("RobertaForQuestionAnswering"),pQo=o(" (RoBERTa model)"),_Qo=l(),W3=a("li"),Mpe=a("strong"),uQo=o("roformer"),bQo=o(" \u2014 "),cX=a("a"),vQo=o("RoFormerForQuestionAnswering"),FQo=o(" (RoFormer model)"),TQo=l(),Q3=a("li"),Epe=a("strong"),MQo=o("splinter"),EQo=o(" \u2014 "),fX=a("a"),CQo=o("SplinterForQuestionAnswering"),wQo=o(" (Splinter model)"),AQo=l(),H3=a("li"),Cpe=a("strong"),yQo=o("squeezebert"),LQo=o(" \u2014 "),mX=a("a"),xQo=o("SqueezeBertForQuestionAnswering"),$Qo=o(" (SqueezeBERT model)"),kQo=l(),U3=a("li"),wpe=a("strong"),SQo=o("xlm"),RQo=o(" \u2014 "),gX=a("a"),PQo=o("XLMForQuestionAnsweringSimple"),BQo=o(" (XLM model)"),IQo=l(),J3=a("li"),Ape=a("strong"),NQo=o("xlm-roberta"),qQo=o(" \u2014 "),hX=a("a"),jQo=o("XLMRobertaForQuestionAnswering"),DQo=o(" (XLM-RoBERTa model)"),GQo=l(),Y3=a("li"),ype=a("strong"),OQo=o("xlm-roberta-xl"),VQo=o(" \u2014 "),pX=a("a"),XQo=o("XLMRobertaXLForQuestionAnswering"),zQo=o(" (XLM-RoBERTa-XL model)"),WQo=l(),K3=a("li"),Lpe=a("strong"),QQo=o("xlnet"),HQo=o(" \u2014 "),_X=a("a"),UQo=o("XLNetForQuestionAnsweringSimple"),JQo=o(" (XLNet model)"),YQo=l(),Z3=a("li"),xpe=a("strong"),KQo=o("yoso"),ZQo=o(" \u2014 "),uX=a("a"),eHo=o("YosoForQuestionAnswering"),oHo=o(" (YOSO model)"),rHo=l(),e0=a("p"),tHo=o("The model is set in evaluation mode by default using "),$pe=a("code"),aHo=o("model.eval()"),nHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kpe=a("code"),sHo=o("model.train()"),lHo=l(),F(o0.$$.fragment),jqe=l(),od=a("h2"),r0=a("a"),Spe=a("span"),F(Yy.$$.fragment),iHo=l(),Rpe=a("span"),dHo=o("AutoModelForTableQuestionAnswering"),Dqe=l(),qo=a("div"),F(Ky.$$.fragment),cHo=l(),rd=a("p"),fHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bX=a("a"),mHo=o("from_pretrained()"),gHo=o(" class method or the "),vX=a("a"),hHo=o("from_config()"),pHo=o(` class
method.`),_Ho=l(),Zy=a("p"),uHo=o("This class cannot be instantiated directly using "),Ppe=a("code"),bHo=o("__init__()"),vHo=o(" (throws an error)."),FHo=l(),gt=a("div"),F(eL.$$.fragment),THo=l(),Bpe=a("p"),MHo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),EHo=l(),td=a("p"),CHo=o(`Note:
Loading a model from its configuration file does `),Ipe=a("strong"),wHo=o("not"),AHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=a("a"),yHo=o("from_pretrained()"),LHo=o(" to load the model weights."),xHo=l(),F(t0.$$.fragment),$Ho=l(),so=a("div"),F(oL.$$.fragment),kHo=l(),Npe=a("p"),SHo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),RHo=l(),qa=a("p"),PHo=o("The model class to instantiate is selected based on the "),qpe=a("code"),BHo=o("model_type"),IHo=o(` property of the config object (either
passed as an argument or loaded from `),jpe=a("code"),NHo=o("pretrained_model_name_or_path"),qHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=a("code"),jHo=o("pretrained_model_name_or_path"),DHo=o(":"),GHo=l(),Gpe=a("ul"),a0=a("li"),Ope=a("strong"),OHo=o("tapas"),VHo=o(" \u2014 "),TX=a("a"),XHo=o("TapasForQuestionAnswering"),zHo=o(" (TAPAS model)"),WHo=l(),n0=a("p"),QHo=o("The model is set in evaluation mode by default using "),Vpe=a("code"),HHo=o("model.eval()"),UHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=a("code"),JHo=o("model.train()"),YHo=l(),F(s0.$$.fragment),Gqe=l(),ad=a("h2"),l0=a("a"),zpe=a("span"),F(rL.$$.fragment),KHo=l(),Wpe=a("span"),ZHo=o("AutoModelForImageClassification"),Oqe=l(),jo=a("div"),F(tL.$$.fragment),eUo=l(),nd=a("p"),oUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),MX=a("a"),rUo=o("from_pretrained()"),tUo=o(" class method or the "),EX=a("a"),aUo=o("from_config()"),nUo=o(` class
method.`),sUo=l(),aL=a("p"),lUo=o("This class cannot be instantiated directly using "),Qpe=a("code"),iUo=o("__init__()"),dUo=o(" (throws an error)."),cUo=l(),ht=a("div"),F(nL.$$.fragment),fUo=l(),Hpe=a("p"),mUo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gUo=l(),sd=a("p"),hUo=o(`Note:
Loading a model from its configuration file does `),Upe=a("strong"),pUo=o("not"),_Uo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=a("a"),uUo=o("from_pretrained()"),bUo=o(" to load the model weights."),vUo=l(),F(i0.$$.fragment),FUo=l(),lo=a("div"),F(sL.$$.fragment),TUo=l(),Jpe=a("p"),MUo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),EUo=l(),ja=a("p"),CUo=o("The model class to instantiate is selected based on the "),Ype=a("code"),wUo=o("model_type"),AUo=o(` property of the config object (either
passed as an argument or loaded from `),Kpe=a("code"),yUo=o("pretrained_model_name_or_path"),LUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=a("code"),xUo=o("pretrained_model_name_or_path"),$Uo=o(":"),kUo=l(),Fe=a("ul"),d0=a("li"),e_e=a("strong"),SUo=o("beit"),RUo=o(" \u2014 "),wX=a("a"),PUo=o("BeitForImageClassification"),BUo=o(" (BEiT model)"),IUo=l(),c0=a("li"),o_e=a("strong"),NUo=o("convnext"),qUo=o(" \u2014 "),AX=a("a"),jUo=o("ConvNextForImageClassification"),DUo=o(" (ConvNext model)"),GUo=l(),f0=a("li"),r_e=a("strong"),OUo=o("cvt"),VUo=o(" \u2014 "),yX=a("a"),XUo=o("CvtForImageClassification"),zUo=o(" (CvT model)"),WUo=l(),m0=a("li"),t_e=a("strong"),QUo=o("data2vec-vision"),HUo=o(" \u2014 "),LX=a("a"),UUo=o("Data2VecVisionForImageClassification"),JUo=o(" (Data2VecVision model)"),YUo=l(),Bs=a("li"),a_e=a("strong"),KUo=o("deit"),ZUo=o(" \u2014 "),xX=a("a"),eJo=o("DeiTForImageClassification"),oJo=o(" or "),$X=a("a"),rJo=o("DeiTForImageClassificationWithTeacher"),tJo=o(" (DeiT model)"),aJo=l(),g0=a("li"),n_e=a("strong"),nJo=o("imagegpt"),sJo=o(" \u2014 "),kX=a("a"),lJo=o("ImageGPTForImageClassification"),iJo=o(" (ImageGPT model)"),dJo=l(),pt=a("li"),s_e=a("strong"),cJo=o("perceiver"),fJo=o(" \u2014 "),SX=a("a"),mJo=o("PerceiverForImageClassificationLearned"),gJo=o(" or "),RX=a("a"),hJo=o("PerceiverForImageClassificationFourier"),pJo=o(" or "),PX=a("a"),_Jo=o("PerceiverForImageClassificationConvProcessing"),uJo=o(" (Perceiver model)"),bJo=l(),h0=a("li"),l_e=a("strong"),vJo=o("poolformer"),FJo=o(" \u2014 "),BX=a("a"),TJo=o("PoolFormerForImageClassification"),MJo=o(" (PoolFormer model)"),EJo=l(),p0=a("li"),i_e=a("strong"),CJo=o("regnet"),wJo=o(" \u2014 "),IX=a("a"),AJo=o("RegNetForImageClassification"),yJo=o(" (RegNet model)"),LJo=l(),_0=a("li"),d_e=a("strong"),xJo=o("resnet"),$Jo=o(" \u2014 "),NX=a("a"),kJo=o("ResNetForImageClassification"),SJo=o(" (ResNet model)"),RJo=l(),u0=a("li"),c_e=a("strong"),PJo=o("segformer"),BJo=o(" \u2014 "),qX=a("a"),IJo=o("SegformerForImageClassification"),NJo=o(" (SegFormer model)"),qJo=l(),b0=a("li"),f_e=a("strong"),jJo=o("swin"),DJo=o(" \u2014 "),jX=a("a"),GJo=o("SwinForImageClassification"),OJo=o(" (Swin model)"),VJo=l(),v0=a("li"),m_e=a("strong"),XJo=o("van"),zJo=o(" \u2014 "),DX=a("a"),WJo=o("VanForImageClassification"),QJo=o(" (VAN model)"),HJo=l(),F0=a("li"),g_e=a("strong"),UJo=o("vit"),JJo=o(" \u2014 "),GX=a("a"),YJo=o("ViTForImageClassification"),KJo=o(" (ViT model)"),ZJo=l(),T0=a("p"),eYo=o("The model is set in evaluation mode by default using "),h_e=a("code"),oYo=o("model.eval()"),rYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p_e=a("code"),tYo=o("model.train()"),aYo=l(),F(M0.$$.fragment),Vqe=l(),ld=a("h2"),E0=a("a"),__e=a("span"),F(lL.$$.fragment),nYo=l(),u_e=a("span"),sYo=o("AutoModelForVision2Seq"),Xqe=l(),Do=a("div"),F(iL.$$.fragment),lYo=l(),id=a("p"),iYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OX=a("a"),dYo=o("from_pretrained()"),cYo=o(" class method or the "),VX=a("a"),fYo=o("from_config()"),mYo=o(` class
method.`),gYo=l(),dL=a("p"),hYo=o("This class cannot be instantiated directly using "),b_e=a("code"),pYo=o("__init__()"),_Yo=o(" (throws an error)."),uYo=l(),_t=a("div"),F(cL.$$.fragment),bYo=l(),v_e=a("p"),vYo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),FYo=l(),dd=a("p"),TYo=o(`Note:
Loading a model from its configuration file does `),F_e=a("strong"),MYo=o("not"),EYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),CYo=o("from_pretrained()"),wYo=o(" to load the model weights."),AYo=l(),F(C0.$$.fragment),yYo=l(),io=a("div"),F(fL.$$.fragment),LYo=l(),T_e=a("p"),xYo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$Yo=l(),Da=a("p"),kYo=o("The model class to instantiate is selected based on the "),M_e=a("code"),SYo=o("model_type"),RYo=o(` property of the config object (either
passed as an argument or loaded from `),E_e=a("code"),PYo=o("pretrained_model_name_or_path"),BYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=a("code"),IYo=o("pretrained_model_name_or_path"),NYo=o(":"),qYo=l(),w_e=a("ul"),w0=a("li"),A_e=a("strong"),jYo=o("vision-encoder-decoder"),DYo=o(" \u2014 "),zX=a("a"),GYo=o("VisionEncoderDecoderModel"),OYo=o(" (Vision Encoder decoder model)"),VYo=l(),A0=a("p"),XYo=o("The model is set in evaluation mode by default using "),y_e=a("code"),zYo=o("model.eval()"),WYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L_e=a("code"),QYo=o("model.train()"),HYo=l(),F(y0.$$.fragment),zqe=l(),cd=a("h2"),L0=a("a"),x_e=a("span"),F(mL.$$.fragment),UYo=l(),$_e=a("span"),JYo=o("AutoModelForAudioClassification"),Wqe=l(),Go=a("div"),F(gL.$$.fragment),YYo=l(),fd=a("p"),KYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),WX=a("a"),ZYo=o("from_pretrained()"),eKo=o(" class method or the "),QX=a("a"),oKo=o("from_config()"),rKo=o(` class
method.`),tKo=l(),hL=a("p"),aKo=o("This class cannot be instantiated directly using "),k_e=a("code"),nKo=o("__init__()"),sKo=o(" (throws an error)."),lKo=l(),ut=a("div"),F(pL.$$.fragment),iKo=l(),S_e=a("p"),dKo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),cKo=l(),md=a("p"),fKo=o(`Note:
Loading a model from its configuration file does `),R_e=a("strong"),mKo=o("not"),gKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=a("a"),hKo=o("from_pretrained()"),pKo=o(" to load the model weights."),_Ko=l(),F(x0.$$.fragment),uKo=l(),co=a("div"),F(_L.$$.fragment),bKo=l(),P_e=a("p"),vKo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),FKo=l(),Ga=a("p"),TKo=o("The model class to instantiate is selected based on the "),B_e=a("code"),MKo=o("model_type"),EKo=o(` property of the config object (either
passed as an argument or loaded from `),I_e=a("code"),CKo=o("pretrained_model_name_or_path"),wKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N_e=a("code"),AKo=o("pretrained_model_name_or_path"),yKo=o(":"),LKo=l(),ke=a("ul"),$0=a("li"),q_e=a("strong"),xKo=o("data2vec-audio"),$Ko=o(" \u2014 "),UX=a("a"),kKo=o("Data2VecAudioForSequenceClassification"),SKo=o(" (Data2VecAudio model)"),RKo=l(),k0=a("li"),j_e=a("strong"),PKo=o("hubert"),BKo=o(" \u2014 "),JX=a("a"),IKo=o("HubertForSequenceClassification"),NKo=o(" (Hubert model)"),qKo=l(),S0=a("li"),D_e=a("strong"),jKo=o("sew"),DKo=o(" \u2014 "),YX=a("a"),GKo=o("SEWForSequenceClassification"),OKo=o(" (SEW model)"),VKo=l(),R0=a("li"),G_e=a("strong"),XKo=o("sew-d"),zKo=o(" \u2014 "),KX=a("a"),WKo=o("SEWDForSequenceClassification"),QKo=o(" (SEW-D model)"),HKo=l(),P0=a("li"),O_e=a("strong"),UKo=o("unispeech"),JKo=o(" \u2014 "),ZX=a("a"),YKo=o("UniSpeechForSequenceClassification"),KKo=o(" (UniSpeech model)"),ZKo=l(),B0=a("li"),V_e=a("strong"),eZo=o("unispeech-sat"),oZo=o(" \u2014 "),ez=a("a"),rZo=o("UniSpeechSatForSequenceClassification"),tZo=o(" (UniSpeechSat model)"),aZo=l(),I0=a("li"),X_e=a("strong"),nZo=o("wav2vec2"),sZo=o(" \u2014 "),oz=a("a"),lZo=o("Wav2Vec2ForSequenceClassification"),iZo=o(" (Wav2Vec2 model)"),dZo=l(),N0=a("li"),z_e=a("strong"),cZo=o("wav2vec2-conformer"),fZo=o(" \u2014 "),rz=a("a"),mZo=o("Wav2Vec2ConformerForSequenceClassification"),gZo=o(" (Wav2Vec2-Conformer model)"),hZo=l(),q0=a("li"),W_e=a("strong"),pZo=o("wavlm"),_Zo=o(" \u2014 "),tz=a("a"),uZo=o("WavLMForSequenceClassification"),bZo=o(" (WavLM model)"),vZo=l(),j0=a("p"),FZo=o("The model is set in evaluation mode by default using "),Q_e=a("code"),TZo=o("model.eval()"),MZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H_e=a("code"),EZo=o("model.train()"),CZo=l(),F(D0.$$.fragment),Qqe=l(),gd=a("h2"),G0=a("a"),U_e=a("span"),F(uL.$$.fragment),wZo=l(),J_e=a("span"),AZo=o("AutoModelForAudioFrameClassification"),Hqe=l(),Oo=a("div"),F(bL.$$.fragment),yZo=l(),hd=a("p"),LZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),az=a("a"),xZo=o("from_pretrained()"),$Zo=o(" class method or the "),nz=a("a"),kZo=o("from_config()"),SZo=o(` class
method.`),RZo=l(),vL=a("p"),PZo=o("This class cannot be instantiated directly using "),Y_e=a("code"),BZo=o("__init__()"),IZo=o(" (throws an error)."),NZo=l(),bt=a("div"),F(FL.$$.fragment),qZo=l(),K_e=a("p"),jZo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),DZo=l(),pd=a("p"),GZo=o(`Note:
Loading a model from its configuration file does `),Z_e=a("strong"),OZo=o("not"),VZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=a("a"),XZo=o("from_pretrained()"),zZo=o(" to load the model weights."),WZo=l(),F(O0.$$.fragment),QZo=l(),fo=a("div"),F(TL.$$.fragment),HZo=l(),eue=a("p"),UZo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),JZo=l(),Oa=a("p"),YZo=o("The model class to instantiate is selected based on the "),oue=a("code"),KZo=o("model_type"),ZZo=o(` property of the config object (either
passed as an argument or loaded from `),rue=a("code"),eer=o("pretrained_model_name_or_path"),oer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=a("code"),rer=o("pretrained_model_name_or_path"),ter=o(":"),aer=l(),Kr=a("ul"),V0=a("li"),aue=a("strong"),ner=o("data2vec-audio"),ser=o(" \u2014 "),lz=a("a"),ler=o("Data2VecAudioForAudioFrameClassification"),ier=o(" (Data2VecAudio model)"),der=l(),X0=a("li"),nue=a("strong"),cer=o("unispeech-sat"),fer=o(" \u2014 "),iz=a("a"),mer=o("UniSpeechSatForAudioFrameClassification"),ger=o(" (UniSpeechSat model)"),her=l(),z0=a("li"),sue=a("strong"),per=o("wav2vec2"),_er=o(" \u2014 "),dz=a("a"),uer=o("Wav2Vec2ForAudioFrameClassification"),ber=o(" (Wav2Vec2 model)"),ver=l(),W0=a("li"),lue=a("strong"),Fer=o("wav2vec2-conformer"),Ter=o(" \u2014 "),cz=a("a"),Mer=o("Wav2Vec2ConformerForAudioFrameClassification"),Eer=o(" (Wav2Vec2-Conformer model)"),Cer=l(),Q0=a("li"),iue=a("strong"),wer=o("wavlm"),Aer=o(" \u2014 "),fz=a("a"),yer=o("WavLMForAudioFrameClassification"),Ler=o(" (WavLM model)"),xer=l(),H0=a("p"),$er=o("The model is set in evaluation mode by default using "),due=a("code"),ker=o("model.eval()"),Ser=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=a("code"),Rer=o("model.train()"),Per=l(),F(U0.$$.fragment),Uqe=l(),_d=a("h2"),J0=a("a"),fue=a("span"),F(ML.$$.fragment),Ber=l(),mue=a("span"),Ier=o("AutoModelForCTC"),Jqe=l(),Vo=a("div"),F(EL.$$.fragment),Ner=l(),ud=a("p"),qer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mz=a("a"),jer=o("from_pretrained()"),Der=o(" class method or the "),gz=a("a"),Ger=o("from_config()"),Oer=o(` class
method.`),Ver=l(),CL=a("p"),Xer=o("This class cannot be instantiated directly using "),gue=a("code"),zer=o("__init__()"),Wer=o(" (throws an error)."),Qer=l(),vt=a("div"),F(wL.$$.fragment),Her=l(),hue=a("p"),Uer=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Jer=l(),bd=a("p"),Yer=o(`Note:
Loading a model from its configuration file does `),pue=a("strong"),Ker=o("not"),Zer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=a("a"),eor=o("from_pretrained()"),oor=o(" to load the model weights."),ror=l(),F(Y0.$$.fragment),tor=l(),mo=a("div"),F(AL.$$.fragment),aor=l(),_ue=a("p"),nor=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),sor=l(),Va=a("p"),lor=o("The model class to instantiate is selected based on the "),uue=a("code"),ior=o("model_type"),dor=o(` property of the config object (either
passed as an argument or loaded from `),bue=a("code"),cor=o("pretrained_model_name_or_path"),mor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=a("code"),gor=o("pretrained_model_name_or_path"),hor=o(":"),por=l(),Se=a("ul"),K0=a("li"),Fue=a("strong"),_or=o("data2vec-audio"),uor=o(" \u2014 "),pz=a("a"),bor=o("Data2VecAudioForCTC"),vor=o(" (Data2VecAudio model)"),For=l(),Z0=a("li"),Tue=a("strong"),Tor=o("hubert"),Mor=o(" \u2014 "),_z=a("a"),Eor=o("HubertForCTC"),Cor=o(" (Hubert model)"),wor=l(),eF=a("li"),Mue=a("strong"),Aor=o("sew"),yor=o(" \u2014 "),uz=a("a"),Lor=o("SEWForCTC"),xor=o(" (SEW model)"),$or=l(),oF=a("li"),Eue=a("strong"),kor=o("sew-d"),Sor=o(" \u2014 "),bz=a("a"),Ror=o("SEWDForCTC"),Por=o(" (SEW-D model)"),Bor=l(),rF=a("li"),Cue=a("strong"),Ior=o("unispeech"),Nor=o(" \u2014 "),vz=a("a"),qor=o("UniSpeechForCTC"),jor=o(" (UniSpeech model)"),Dor=l(),tF=a("li"),wue=a("strong"),Gor=o("unispeech-sat"),Oor=o(" \u2014 "),Fz=a("a"),Vor=o("UniSpeechSatForCTC"),Xor=o(" (UniSpeechSat model)"),zor=l(),aF=a("li"),Aue=a("strong"),Wor=o("wav2vec2"),Qor=o(" \u2014 "),Tz=a("a"),Hor=o("Wav2Vec2ForCTC"),Uor=o(" (Wav2Vec2 model)"),Jor=l(),nF=a("li"),yue=a("strong"),Yor=o("wav2vec2-conformer"),Kor=o(" \u2014 "),Mz=a("a"),Zor=o("Wav2Vec2ConformerForCTC"),err=o(" (Wav2Vec2-Conformer model)"),orr=l(),sF=a("li"),Lue=a("strong"),rrr=o("wavlm"),trr=o(" \u2014 "),Ez=a("a"),arr=o("WavLMForCTC"),nrr=o(" (WavLM model)"),srr=l(),lF=a("p"),lrr=o("The model is set in evaluation mode by default using "),xue=a("code"),irr=o("model.eval()"),drr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ue=a("code"),crr=o("model.train()"),frr=l(),F(iF.$$.fragment),Yqe=l(),vd=a("h2"),dF=a("a"),kue=a("span"),F(yL.$$.fragment),mrr=l(),Sue=a("span"),grr=o("AutoModelForSpeechSeq2Seq"),Kqe=l(),Xo=a("div"),F(LL.$$.fragment),hrr=l(),Fd=a("p"),prr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Cz=a("a"),_rr=o("from_pretrained()"),urr=o(" class method or the "),wz=a("a"),brr=o("from_config()"),vrr=o(` class
method.`),Frr=l(),xL=a("p"),Trr=o("This class cannot be instantiated directly using "),Rue=a("code"),Mrr=o("__init__()"),Err=o(" (throws an error)."),Crr=l(),Ft=a("div"),F($L.$$.fragment),wrr=l(),Pue=a("p"),Arr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),yrr=l(),Td=a("p"),Lrr=o(`Note:
Loading a model from its configuration file does `),Bue=a("strong"),xrr=o("not"),$rr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=a("a"),krr=o("from_pretrained()"),Srr=o(" to load the model weights."),Rrr=l(),F(cF.$$.fragment),Prr=l(),go=a("div"),F(kL.$$.fragment),Brr=l(),Iue=a("p"),Irr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Nrr=l(),Xa=a("p"),qrr=o("The model class to instantiate is selected based on the "),Nue=a("code"),jrr=o("model_type"),Drr=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),Grr=o("pretrained_model_name_or_path"),Orr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=a("code"),Vrr=o("pretrained_model_name_or_path"),Xrr=o(":"),zrr=l(),SL=a("ul"),fF=a("li"),Due=a("strong"),Wrr=o("speech-encoder-decoder"),Qrr=o(" \u2014 "),yz=a("a"),Hrr=o("SpeechEncoderDecoderModel"),Urr=o(" (Speech Encoder decoder model)"),Jrr=l(),mF=a("li"),Gue=a("strong"),Yrr=o("speech_to_text"),Krr=o(" \u2014 "),Lz=a("a"),Zrr=o("Speech2TextForConditionalGeneration"),etr=o(" (Speech2Text model)"),otr=l(),gF=a("p"),rtr=o("The model is set in evaluation mode by default using "),Oue=a("code"),ttr=o("model.eval()"),atr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=a("code"),ntr=o("model.train()"),str=l(),F(hF.$$.fragment),Zqe=l(),Md=a("h2"),pF=a("a"),Xue=a("span"),F(RL.$$.fragment),ltr=l(),zue=a("span"),itr=o("AutoModelForAudioXVector"),eje=l(),zo=a("div"),F(PL.$$.fragment),dtr=l(),Ed=a("p"),ctr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),xz=a("a"),ftr=o("from_pretrained()"),mtr=o(" class method or the "),$z=a("a"),gtr=o("from_config()"),htr=o(` class
method.`),ptr=l(),BL=a("p"),_tr=o("This class cannot be instantiated directly using "),Wue=a("code"),utr=o("__init__()"),btr=o(" (throws an error)."),vtr=l(),Tt=a("div"),F(IL.$$.fragment),Ftr=l(),Que=a("p"),Ttr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Mtr=l(),Cd=a("p"),Etr=o(`Note:
Loading a model from its configuration file does `),Hue=a("strong"),Ctr=o("not"),wtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=a("a"),Atr=o("from_pretrained()"),ytr=o(" to load the model weights."),Ltr=l(),F(_F.$$.fragment),xtr=l(),ho=a("div"),F(NL.$$.fragment),$tr=l(),Uue=a("p"),ktr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Str=l(),za=a("p"),Rtr=o("The model class to instantiate is selected based on the "),Jue=a("code"),Ptr=o("model_type"),Btr=o(` property of the config object (either
passed as an argument or loaded from `),Yue=a("code"),Itr=o("pretrained_model_name_or_path"),Ntr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=a("code"),qtr=o("pretrained_model_name_or_path"),jtr=o(":"),Dtr=l(),Zr=a("ul"),uF=a("li"),Zue=a("strong"),Gtr=o("data2vec-audio"),Otr=o(" \u2014 "),Sz=a("a"),Vtr=o("Data2VecAudioForXVector"),Xtr=o(" (Data2VecAudio model)"),ztr=l(),bF=a("li"),e2e=a("strong"),Wtr=o("unispeech-sat"),Qtr=o(" \u2014 "),Rz=a("a"),Htr=o("UniSpeechSatForXVector"),Utr=o(" (UniSpeechSat model)"),Jtr=l(),vF=a("li"),o2e=a("strong"),Ytr=o("wav2vec2"),Ktr=o(" \u2014 "),Pz=a("a"),Ztr=o("Wav2Vec2ForXVector"),ear=o(" (Wav2Vec2 model)"),oar=l(),FF=a("li"),r2e=a("strong"),rar=o("wav2vec2-conformer"),tar=o(" \u2014 "),Bz=a("a"),aar=o("Wav2Vec2ConformerForXVector"),nar=o(" (Wav2Vec2-Conformer model)"),sar=l(),TF=a("li"),t2e=a("strong"),lar=o("wavlm"),iar=o(" \u2014 "),Iz=a("a"),dar=o("WavLMForXVector"),car=o(" (WavLM model)"),far=l(),MF=a("p"),mar=o("The model is set in evaluation mode by default using "),a2e=a("code"),gar=o("model.eval()"),har=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n2e=a("code"),par=o("model.train()"),_ar=l(),F(EF.$$.fragment),oje=l(),wd=a("h2"),CF=a("a"),s2e=a("span"),F(qL.$$.fragment),uar=l(),l2e=a("span"),bar=o("AutoModelForMaskedImageModeling"),rje=l(),Wo=a("div"),F(jL.$$.fragment),Far=l(),Ad=a("p"),Tar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Nz=a("a"),Mar=o("from_pretrained()"),Ear=o(" class method or the "),qz=a("a"),Car=o("from_config()"),war=o(` class
method.`),Aar=l(),DL=a("p"),yar=o("This class cannot be instantiated directly using "),i2e=a("code"),Lar=o("__init__()"),xar=o(" (throws an error)."),$ar=l(),Mt=a("div"),F(GL.$$.fragment),kar=l(),d2e=a("p"),Sar=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Rar=l(),yd=a("p"),Par=o(`Note:
Loading a model from its configuration file does `),c2e=a("strong"),Bar=o("not"),Iar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=a("a"),Nar=o("from_pretrained()"),qar=o(" to load the model weights."),jar=l(),F(wF.$$.fragment),Dar=l(),po=a("div"),F(OL.$$.fragment),Gar=l(),f2e=a("p"),Oar=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Var=l(),Wa=a("p"),Xar=o("The model class to instantiate is selected based on the "),m2e=a("code"),zar=o("model_type"),War=o(` property of the config object (either
passed as an argument or loaded from `),g2e=a("code"),Qar=o("pretrained_model_name_or_path"),Har=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h2e=a("code"),Uar=o("pretrained_model_name_or_path"),Jar=o(":"),Yar=l(),Ld=a("ul"),AF=a("li"),p2e=a("strong"),Kar=o("deit"),Zar=o(" \u2014 "),Dz=a("a"),enr=o("DeiTForMaskedImageModeling"),onr=o(" (DeiT model)"),rnr=l(),yF=a("li"),_2e=a("strong"),tnr=o("swin"),anr=o(" \u2014 "),Gz=a("a"),nnr=o("SwinForMaskedImageModeling"),snr=o(" (Swin model)"),lnr=l(),LF=a("li"),u2e=a("strong"),inr=o("vit"),dnr=o(" \u2014 "),Oz=a("a"),cnr=o("ViTForMaskedImageModeling"),fnr=o(" (ViT model)"),mnr=l(),xF=a("p"),gnr=o("The model is set in evaluation mode by default using "),b2e=a("code"),hnr=o("model.eval()"),pnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v2e=a("code"),_nr=o("model.train()"),unr=l(),F($F.$$.fragment),tje=l(),xd=a("h2"),kF=a("a"),F2e=a("span"),F(VL.$$.fragment),bnr=l(),T2e=a("span"),vnr=o("AutoModelForObjectDetection"),aje=l(),Qo=a("div"),F(XL.$$.fragment),Fnr=l(),$d=a("p"),Tnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Vz=a("a"),Mnr=o("from_pretrained()"),Enr=o(" class method or the "),Xz=a("a"),Cnr=o("from_config()"),wnr=o(` class
method.`),Anr=l(),zL=a("p"),ynr=o("This class cannot be instantiated directly using "),M2e=a("code"),Lnr=o("__init__()"),xnr=o(" (throws an error)."),$nr=l(),Et=a("div"),F(WL.$$.fragment),knr=l(),E2e=a("p"),Snr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Rnr=l(),kd=a("p"),Pnr=o(`Note:
Loading a model from its configuration file does `),C2e=a("strong"),Bnr=o("not"),Inr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=a("a"),Nnr=o("from_pretrained()"),qnr=o(" to load the model weights."),jnr=l(),F(SF.$$.fragment),Dnr=l(),_o=a("div"),F(QL.$$.fragment),Gnr=l(),w2e=a("p"),Onr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Vnr=l(),Qa=a("p"),Xnr=o("The model class to instantiate is selected based on the "),A2e=a("code"),znr=o("model_type"),Wnr=o(` property of the config object (either
passed as an argument or loaded from `),y2e=a("code"),Qnr=o("pretrained_model_name_or_path"),Hnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=a("code"),Unr=o("pretrained_model_name_or_path"),Jnr=o(":"),Ynr=l(),HL=a("ul"),RF=a("li"),x2e=a("strong"),Knr=o("detr"),Znr=o(" \u2014 "),Wz=a("a"),esr=o("DetrForObjectDetection"),osr=o(" (DETR model)"),rsr=l(),PF=a("li"),$2e=a("strong"),tsr=o("yolos"),asr=o(" \u2014 "),Qz=a("a"),nsr=o("YolosForObjectDetection"),ssr=o(" (YOLOS model)"),lsr=l(),BF=a("p"),isr=o("The model is set in evaluation mode by default using "),k2e=a("code"),dsr=o("model.eval()"),csr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S2e=a("code"),fsr=o("model.train()"),msr=l(),F(IF.$$.fragment),nje=l(),Sd=a("h2"),NF=a("a"),R2e=a("span"),F(UL.$$.fragment),gsr=l(),P2e=a("span"),hsr=o("AutoModelForImageSegmentation"),sje=l(),Ho=a("div"),F(JL.$$.fragment),psr=l(),Rd=a("p"),_sr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Hz=a("a"),usr=o("from_pretrained()"),bsr=o(" class method or the "),Uz=a("a"),vsr=o("from_config()"),Fsr=o(` class
method.`),Tsr=l(),YL=a("p"),Msr=o("This class cannot be instantiated directly using "),B2e=a("code"),Esr=o("__init__()"),Csr=o(" (throws an error)."),wsr=l(),Ct=a("div"),F(KL.$$.fragment),Asr=l(),I2e=a("p"),ysr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Lsr=l(),Pd=a("p"),xsr=o(`Note:
Loading a model from its configuration file does `),N2e=a("strong"),$sr=o("not"),ksr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),Ssr=o("from_pretrained()"),Rsr=o(" to load the model weights."),Psr=l(),F(qF.$$.fragment),Bsr=l(),uo=a("div"),F(ZL.$$.fragment),Isr=l(),q2e=a("p"),Nsr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),qsr=l(),Ha=a("p"),jsr=o("The model class to instantiate is selected based on the "),j2e=a("code"),Dsr=o("model_type"),Gsr=o(` property of the config object (either
passed as an argument or loaded from `),D2e=a("code"),Osr=o("pretrained_model_name_or_path"),Vsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G2e=a("code"),Xsr=o("pretrained_model_name_or_path"),zsr=o(":"),Wsr=l(),O2e=a("ul"),jF=a("li"),V2e=a("strong"),Qsr=o("detr"),Hsr=o(" \u2014 "),Yz=a("a"),Usr=o("DetrForSegmentation"),Jsr=o(" (DETR model)"),Ysr=l(),DF=a("p"),Ksr=o("The model is set in evaluation mode by default using "),X2e=a("code"),Zsr=o("model.eval()"),elr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z2e=a("code"),olr=o("model.train()"),rlr=l(),F(GF.$$.fragment),lje=l(),Bd=a("h2"),OF=a("a"),W2e=a("span"),F(e8.$$.fragment),tlr=l(),Q2e=a("span"),alr=o("AutoModelForSemanticSegmentation"),ije=l(),Uo=a("div"),F(o8.$$.fragment),nlr=l(),Id=a("p"),slr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Kz=a("a"),llr=o("from_pretrained()"),ilr=o(" class method or the "),Zz=a("a"),dlr=o("from_config()"),clr=o(` class
method.`),flr=l(),r8=a("p"),mlr=o("This class cannot be instantiated directly using "),H2e=a("code"),glr=o("__init__()"),hlr=o(" (throws an error)."),plr=l(),wt=a("div"),F(t8.$$.fragment),_lr=l(),U2e=a("p"),ulr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),blr=l(),Nd=a("p"),vlr=o(`Note:
Loading a model from its configuration file does `),J2e=a("strong"),Flr=o("not"),Tlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=a("a"),Mlr=o("from_pretrained()"),Elr=o(" to load the model weights."),Clr=l(),F(VF.$$.fragment),wlr=l(),bo=a("div"),F(a8.$$.fragment),Alr=l(),Y2e=a("p"),ylr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Llr=l(),Ua=a("p"),xlr=o("The model class to instantiate is selected based on the "),K2e=a("code"),$lr=o("model_type"),klr=o(` property of the config object (either
passed as an argument or loaded from `),Z2e=a("code"),Slr=o("pretrained_model_name_or_path"),Rlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=a("code"),Plr=o("pretrained_model_name_or_path"),Blr=o(":"),Ilr=l(),Ja=a("ul"),XF=a("li"),o1e=a("strong"),Nlr=o("beit"),qlr=o(" \u2014 "),oW=a("a"),jlr=o("BeitForSemanticSegmentation"),Dlr=o(" (BEiT model)"),Glr=l(),zF=a("li"),r1e=a("strong"),Olr=o("data2vec-vision"),Vlr=o(" \u2014 "),rW=a("a"),Xlr=o("Data2VecVisionForSemanticSegmentation"),zlr=o(" (Data2VecVision model)"),Wlr=l(),WF=a("li"),t1e=a("strong"),Qlr=o("dpt"),Hlr=o(" \u2014 "),tW=a("a"),Ulr=o("DPTForSemanticSegmentation"),Jlr=o(" (DPT model)"),Ylr=l(),QF=a("li"),a1e=a("strong"),Klr=o("segformer"),Zlr=o(" \u2014 "),aW=a("a"),eir=o("SegformerForSemanticSegmentation"),oir=o(" (SegFormer model)"),rir=l(),HF=a("p"),tir=o("The model is set in evaluation mode by default using "),n1e=a("code"),air=o("model.eval()"),nir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s1e=a("code"),sir=o("model.train()"),lir=l(),F(UF.$$.fragment),dje=l(),qd=a("h2"),JF=a("a"),l1e=a("span"),F(n8.$$.fragment),iir=l(),i1e=a("span"),dir=o("AutoModelForInstanceSegmentation"),cje=l(),Jo=a("div"),F(s8.$$.fragment),cir=l(),jd=a("p"),fir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),nW=a("a"),mir=o("from_pretrained()"),gir=o(" class method or the "),sW=a("a"),hir=o("from_config()"),pir=o(` class
method.`),_ir=l(),l8=a("p"),uir=o("This class cannot be instantiated directly using "),d1e=a("code"),bir=o("__init__()"),vir=o(" (throws an error)."),Fir=l(),At=a("div"),F(i8.$$.fragment),Tir=l(),c1e=a("p"),Mir=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Eir=l(),Dd=a("p"),Cir=o(`Note:
Loading a model from its configuration file does `),f1e=a("strong"),wir=o("not"),Air=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),yir=o("from_pretrained()"),Lir=o(" to load the model weights."),xir=l(),F(YF.$$.fragment),$ir=l(),vo=a("div"),F(d8.$$.fragment),kir=l(),m1e=a("p"),Sir=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Rir=l(),Ya=a("p"),Pir=o("The model class to instantiate is selected based on the "),g1e=a("code"),Bir=o("model_type"),Iir=o(` property of the config object (either
passed as an argument or loaded from `),h1e=a("code"),Nir=o("pretrained_model_name_or_path"),qir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p1e=a("code"),jir=o("pretrained_model_name_or_path"),Dir=o(":"),Gir=l(),_1e=a("ul"),KF=a("li"),u1e=a("strong"),Oir=o("maskformer"),Vir=o(" \u2014 "),iW=a("a"),Xir=o("MaskFormerForInstanceSegmentation"),zir=o(" (MaskFormer model)"),Wir=l(),ZF=a("p"),Qir=o("The model is set in evaluation mode by default using "),b1e=a("code"),Hir=o("model.eval()"),Uir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v1e=a("code"),Jir=o("model.train()"),Yir=l(),F(eT.$$.fragment),fje=l(),Gd=a("h2"),oT=a("a"),F1e=a("span"),F(c8.$$.fragment),Kir=l(),T1e=a("span"),Zir=o("TFAutoModel"),mje=l(),Yo=a("div"),F(f8.$$.fragment),edr=l(),Od=a("p"),odr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dW=a("a"),rdr=o("from_pretrained()"),tdr=o(" class method or the "),cW=a("a"),adr=o("from_config()"),ndr=o(` class
method.`),sdr=l(),m8=a("p"),ldr=o("This class cannot be instantiated directly using "),M1e=a("code"),idr=o("__init__()"),ddr=o(" (throws an error)."),cdr=l(),yt=a("div"),F(g8.$$.fragment),fdr=l(),E1e=a("p"),mdr=o("Instantiates one of the base model classes of the library from a configuration."),gdr=l(),Vd=a("p"),hdr=o(`Note:
Loading a model from its configuration file does `),C1e=a("strong"),pdr=o("not"),_dr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),udr=o("from_pretrained()"),bdr=o(" to load the model weights."),vdr=l(),F(rT.$$.fragment),Fdr=l(),wr=a("div"),F(h8.$$.fragment),Tdr=l(),w1e=a("p"),Mdr=o("Instantiate one of the base model classes of the library from a pretrained model."),Edr=l(),Ka=a("p"),Cdr=o("The model class to instantiate is selected based on the "),A1e=a("code"),wdr=o("model_type"),Adr=o(` property of the config object (either
passed as an argument or loaded from `),y1e=a("code"),ydr=o("pretrained_model_name_or_path"),Ldr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=a("code"),xdr=o("pretrained_model_name_or_path"),$dr=o(":"),kdr=l(),q=a("ul"),tT=a("li"),x1e=a("strong"),Sdr=o("albert"),Rdr=o(" \u2014 "),mW=a("a"),Pdr=o("TFAlbertModel"),Bdr=o(" (ALBERT model)"),Idr=l(),aT=a("li"),$1e=a("strong"),Ndr=o("bart"),qdr=o(" \u2014 "),gW=a("a"),jdr=o("TFBartModel"),Ddr=o(" (BART model)"),Gdr=l(),nT=a("li"),k1e=a("strong"),Odr=o("bert"),Vdr=o(" \u2014 "),hW=a("a"),Xdr=o("TFBertModel"),zdr=o(" (BERT model)"),Wdr=l(),sT=a("li"),S1e=a("strong"),Qdr=o("blenderbot"),Hdr=o(" \u2014 "),pW=a("a"),Udr=o("TFBlenderbotModel"),Jdr=o(" (Blenderbot model)"),Ydr=l(),lT=a("li"),R1e=a("strong"),Kdr=o("blenderbot-small"),Zdr=o(" \u2014 "),_W=a("a"),ecr=o("TFBlenderbotSmallModel"),ocr=o(" (BlenderbotSmall model)"),rcr=l(),iT=a("li"),P1e=a("strong"),tcr=o("camembert"),acr=o(" \u2014 "),uW=a("a"),ncr=o("TFCamembertModel"),scr=o(" (CamemBERT model)"),lcr=l(),dT=a("li"),B1e=a("strong"),icr=o("clip"),dcr=o(" \u2014 "),bW=a("a"),ccr=o("TFCLIPModel"),fcr=o(" (CLIP model)"),mcr=l(),cT=a("li"),I1e=a("strong"),gcr=o("convbert"),hcr=o(" \u2014 "),vW=a("a"),pcr=o("TFConvBertModel"),_cr=o(" (ConvBERT model)"),ucr=l(),fT=a("li"),N1e=a("strong"),bcr=o("convnext"),vcr=o(" \u2014 "),FW=a("a"),Fcr=o("TFConvNextModel"),Tcr=o(" (ConvNext model)"),Mcr=l(),mT=a("li"),q1e=a("strong"),Ecr=o("ctrl"),Ccr=o(" \u2014 "),TW=a("a"),wcr=o("TFCTRLModel"),Acr=o(" (CTRL model)"),ycr=l(),gT=a("li"),j1e=a("strong"),Lcr=o("data2vec-vision"),xcr=o(" \u2014 "),MW=a("a"),$cr=o("TFData2VecVisionModel"),kcr=o(" (Data2VecVision model)"),Scr=l(),hT=a("li"),D1e=a("strong"),Rcr=o("deberta"),Pcr=o(" \u2014 "),EW=a("a"),Bcr=o("TFDebertaModel"),Icr=o(" (DeBERTa model)"),Ncr=l(),pT=a("li"),G1e=a("strong"),qcr=o("deberta-v2"),jcr=o(" \u2014 "),CW=a("a"),Dcr=o("TFDebertaV2Model"),Gcr=o(" (DeBERTa-v2 model)"),Ocr=l(),_T=a("li"),O1e=a("strong"),Vcr=o("distilbert"),Xcr=o(" \u2014 "),wW=a("a"),zcr=o("TFDistilBertModel"),Wcr=o(" (DistilBERT model)"),Qcr=l(),uT=a("li"),V1e=a("strong"),Hcr=o("dpr"),Ucr=o(" \u2014 "),AW=a("a"),Jcr=o("TFDPRQuestionEncoder"),Ycr=o(" (DPR model)"),Kcr=l(),bT=a("li"),X1e=a("strong"),Zcr=o("electra"),efr=o(" \u2014 "),yW=a("a"),ofr=o("TFElectraModel"),rfr=o(" (ELECTRA model)"),tfr=l(),vT=a("li"),z1e=a("strong"),afr=o("flaubert"),nfr=o(" \u2014 "),LW=a("a"),sfr=o("TFFlaubertModel"),lfr=o(" (FlauBERT model)"),ifr=l(),Is=a("li"),W1e=a("strong"),dfr=o("funnel"),cfr=o(" \u2014 "),xW=a("a"),ffr=o("TFFunnelModel"),mfr=o(" or "),$W=a("a"),gfr=o("TFFunnelBaseModel"),hfr=o(" (Funnel Transformer model)"),pfr=l(),FT=a("li"),Q1e=a("strong"),_fr=o("gpt2"),ufr=o(" \u2014 "),kW=a("a"),bfr=o("TFGPT2Model"),vfr=o(" (OpenAI GPT-2 model)"),Ffr=l(),TT=a("li"),H1e=a("strong"),Tfr=o("gptj"),Mfr=o(" \u2014 "),SW=a("a"),Efr=o("TFGPTJModel"),Cfr=o(" (GPT-J model)"),wfr=l(),MT=a("li"),U1e=a("strong"),Afr=o("hubert"),yfr=o(" \u2014 "),RW=a("a"),Lfr=o("TFHubertModel"),xfr=o(" (Hubert model)"),$fr=l(),ET=a("li"),J1e=a("strong"),kfr=o("layoutlm"),Sfr=o(" \u2014 "),PW=a("a"),Rfr=o("TFLayoutLMModel"),Pfr=o(" (LayoutLM model)"),Bfr=l(),CT=a("li"),Y1e=a("strong"),Ifr=o("led"),Nfr=o(" \u2014 "),BW=a("a"),qfr=o("TFLEDModel"),jfr=o(" (LED model)"),Dfr=l(),wT=a("li"),K1e=a("strong"),Gfr=o("longformer"),Ofr=o(" \u2014 "),IW=a("a"),Vfr=o("TFLongformerModel"),Xfr=o(" (Longformer model)"),zfr=l(),AT=a("li"),Z1e=a("strong"),Wfr=o("lxmert"),Qfr=o(" \u2014 "),NW=a("a"),Hfr=o("TFLxmertModel"),Ufr=o(" (LXMERT model)"),Jfr=l(),yT=a("li"),ebe=a("strong"),Yfr=o("marian"),Kfr=o(" \u2014 "),qW=a("a"),Zfr=o("TFMarianModel"),emr=o(" (Marian model)"),omr=l(),LT=a("li"),obe=a("strong"),rmr=o("mbart"),tmr=o(" \u2014 "),jW=a("a"),amr=o("TFMBartModel"),nmr=o(" (mBART model)"),smr=l(),xT=a("li"),rbe=a("strong"),lmr=o("mobilebert"),imr=o(" \u2014 "),DW=a("a"),dmr=o("TFMobileBertModel"),cmr=o(" (MobileBERT model)"),fmr=l(),$T=a("li"),tbe=a("strong"),mmr=o("mpnet"),gmr=o(" \u2014 "),GW=a("a"),hmr=o("TFMPNetModel"),pmr=o(" (MPNet model)"),_mr=l(),kT=a("li"),abe=a("strong"),umr=o("mt5"),bmr=o(" \u2014 "),OW=a("a"),vmr=o("TFMT5Model"),Fmr=o(" (mT5 model)"),Tmr=l(),ST=a("li"),nbe=a("strong"),Mmr=o("openai-gpt"),Emr=o(" \u2014 "),VW=a("a"),Cmr=o("TFOpenAIGPTModel"),wmr=o(" (OpenAI GPT model)"),Amr=l(),RT=a("li"),sbe=a("strong"),ymr=o("pegasus"),Lmr=o(" \u2014 "),XW=a("a"),xmr=o("TFPegasusModel"),$mr=o(" (Pegasus model)"),kmr=l(),PT=a("li"),lbe=a("strong"),Smr=o("rembert"),Rmr=o(" \u2014 "),zW=a("a"),Pmr=o("TFRemBertModel"),Bmr=o(" (RemBERT model)"),Imr=l(),BT=a("li"),ibe=a("strong"),Nmr=o("roberta"),qmr=o(" \u2014 "),WW=a("a"),jmr=o("TFRobertaModel"),Dmr=o(" (RoBERTa model)"),Gmr=l(),IT=a("li"),dbe=a("strong"),Omr=o("roformer"),Vmr=o(" \u2014 "),QW=a("a"),Xmr=o("TFRoFormerModel"),zmr=o(" (RoFormer model)"),Wmr=l(),NT=a("li"),cbe=a("strong"),Qmr=o("speech_to_text"),Hmr=o(" \u2014 "),HW=a("a"),Umr=o("TFSpeech2TextModel"),Jmr=o(" (Speech2Text model)"),Ymr=l(),qT=a("li"),fbe=a("strong"),Kmr=o("swin"),Zmr=o(" \u2014 "),UW=a("a"),egr=o("TFSwinModel"),ogr=o(" (Swin model)"),rgr=l(),jT=a("li"),mbe=a("strong"),tgr=o("t5"),agr=o(" \u2014 "),JW=a("a"),ngr=o("TFT5Model"),sgr=o(" (T5 model)"),lgr=l(),DT=a("li"),gbe=a("strong"),igr=o("tapas"),dgr=o(" \u2014 "),YW=a("a"),cgr=o("TFTapasModel"),fgr=o(" (TAPAS model)"),mgr=l(),GT=a("li"),hbe=a("strong"),ggr=o("transfo-xl"),hgr=o(" \u2014 "),KW=a("a"),pgr=o("TFTransfoXLModel"),_gr=o(" (Transformer-XL model)"),ugr=l(),OT=a("li"),pbe=a("strong"),bgr=o("vit"),vgr=o(" \u2014 "),ZW=a("a"),Fgr=o("TFViTModel"),Tgr=o(" (ViT model)"),Mgr=l(),VT=a("li"),_be=a("strong"),Egr=o("vit_mae"),Cgr=o(" \u2014 "),eQ=a("a"),wgr=o("TFViTMAEModel"),Agr=o(" (ViTMAE model)"),ygr=l(),XT=a("li"),ube=a("strong"),Lgr=o("wav2vec2"),xgr=o(" \u2014 "),oQ=a("a"),$gr=o("TFWav2Vec2Model"),kgr=o(" (Wav2Vec2 model)"),Sgr=l(),zT=a("li"),bbe=a("strong"),Rgr=o("xlm"),Pgr=o(" \u2014 "),rQ=a("a"),Bgr=o("TFXLMModel"),Igr=o(" (XLM model)"),Ngr=l(),WT=a("li"),vbe=a("strong"),qgr=o("xlm-roberta"),jgr=o(" \u2014 "),tQ=a("a"),Dgr=o("TFXLMRobertaModel"),Ggr=o(" (XLM-RoBERTa model)"),Ogr=l(),QT=a("li"),Fbe=a("strong"),Vgr=o("xlnet"),Xgr=o(" \u2014 "),aQ=a("a"),zgr=o("TFXLNetModel"),Wgr=o(" (XLNet model)"),Qgr=l(),F(HT.$$.fragment),gje=l(),Xd=a("h2"),UT=a("a"),Tbe=a("span"),F(p8.$$.fragment),Hgr=l(),Mbe=a("span"),Ugr=o("TFAutoModelForPreTraining"),hje=l(),Ko=a("div"),F(_8.$$.fragment),Jgr=l(),zd=a("p"),Ygr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nQ=a("a"),Kgr=o("from_pretrained()"),Zgr=o(" class method or the "),sQ=a("a"),ehr=o("from_config()"),ohr=o(` class
method.`),rhr=l(),u8=a("p"),thr=o("This class cannot be instantiated directly using "),Ebe=a("code"),ahr=o("__init__()"),nhr=o(" (throws an error)."),shr=l(),Lt=a("div"),F(b8.$$.fragment),lhr=l(),Cbe=a("p"),ihr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dhr=l(),Wd=a("p"),chr=o(`Note:
Loading a model from its configuration file does `),wbe=a("strong"),fhr=o("not"),mhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=a("a"),ghr=o("from_pretrained()"),hhr=o(" to load the model weights."),phr=l(),F(JT.$$.fragment),_hr=l(),Ar=a("div"),F(v8.$$.fragment),uhr=l(),Abe=a("p"),bhr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),vhr=l(),Za=a("p"),Fhr=o("The model class to instantiate is selected based on the "),ybe=a("code"),Thr=o("model_type"),Mhr=o(` property of the config object (either
passed as an argument or loaded from `),Lbe=a("code"),Ehr=o("pretrained_model_name_or_path"),Chr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=a("code"),whr=o("pretrained_model_name_or_path"),Ahr=o(":"),yhr=l(),se=a("ul"),YT=a("li"),$be=a("strong"),Lhr=o("albert"),xhr=o(" \u2014 "),iQ=a("a"),$hr=o("TFAlbertForPreTraining"),khr=o(" (ALBERT model)"),Shr=l(),KT=a("li"),kbe=a("strong"),Rhr=o("bart"),Phr=o(" \u2014 "),dQ=a("a"),Bhr=o("TFBartForConditionalGeneration"),Ihr=o(" (BART model)"),Nhr=l(),ZT=a("li"),Sbe=a("strong"),qhr=o("bert"),jhr=o(" \u2014 "),cQ=a("a"),Dhr=o("TFBertForPreTraining"),Ghr=o(" (BERT model)"),Ohr=l(),e7=a("li"),Rbe=a("strong"),Vhr=o("camembert"),Xhr=o(" \u2014 "),fQ=a("a"),zhr=o("TFCamembertForMaskedLM"),Whr=o(" (CamemBERT model)"),Qhr=l(),o7=a("li"),Pbe=a("strong"),Hhr=o("ctrl"),Uhr=o(" \u2014 "),mQ=a("a"),Jhr=o("TFCTRLLMHeadModel"),Yhr=o(" (CTRL model)"),Khr=l(),r7=a("li"),Bbe=a("strong"),Zhr=o("distilbert"),epr=o(" \u2014 "),gQ=a("a"),opr=o("TFDistilBertForMaskedLM"),rpr=o(" (DistilBERT model)"),tpr=l(),t7=a("li"),Ibe=a("strong"),apr=o("electra"),npr=o(" \u2014 "),hQ=a("a"),spr=o("TFElectraForPreTraining"),lpr=o(" (ELECTRA model)"),ipr=l(),a7=a("li"),Nbe=a("strong"),dpr=o("flaubert"),cpr=o(" \u2014 "),pQ=a("a"),fpr=o("TFFlaubertWithLMHeadModel"),mpr=o(" (FlauBERT model)"),gpr=l(),n7=a("li"),qbe=a("strong"),hpr=o("funnel"),ppr=o(" \u2014 "),_Q=a("a"),_pr=o("TFFunnelForPreTraining"),upr=o(" (Funnel Transformer model)"),bpr=l(),s7=a("li"),jbe=a("strong"),vpr=o("gpt2"),Fpr=o(" \u2014 "),uQ=a("a"),Tpr=o("TFGPT2LMHeadModel"),Mpr=o(" (OpenAI GPT-2 model)"),Epr=l(),l7=a("li"),Dbe=a("strong"),Cpr=o("layoutlm"),wpr=o(" \u2014 "),bQ=a("a"),Apr=o("TFLayoutLMForMaskedLM"),ypr=o(" (LayoutLM model)"),Lpr=l(),i7=a("li"),Gbe=a("strong"),xpr=o("lxmert"),$pr=o(" \u2014 "),vQ=a("a"),kpr=o("TFLxmertForPreTraining"),Spr=o(" (LXMERT model)"),Rpr=l(),d7=a("li"),Obe=a("strong"),Ppr=o("mobilebert"),Bpr=o(" \u2014 "),FQ=a("a"),Ipr=o("TFMobileBertForPreTraining"),Npr=o(" (MobileBERT model)"),qpr=l(),c7=a("li"),Vbe=a("strong"),jpr=o("mpnet"),Dpr=o(" \u2014 "),TQ=a("a"),Gpr=o("TFMPNetForMaskedLM"),Opr=o(" (MPNet model)"),Vpr=l(),f7=a("li"),Xbe=a("strong"),Xpr=o("openai-gpt"),zpr=o(" \u2014 "),MQ=a("a"),Wpr=o("TFOpenAIGPTLMHeadModel"),Qpr=o(" (OpenAI GPT model)"),Hpr=l(),m7=a("li"),zbe=a("strong"),Upr=o("roberta"),Jpr=o(" \u2014 "),EQ=a("a"),Ypr=o("TFRobertaForMaskedLM"),Kpr=o(" (RoBERTa model)"),Zpr=l(),g7=a("li"),Wbe=a("strong"),e_r=o("t5"),o_r=o(" \u2014 "),CQ=a("a"),r_r=o("TFT5ForConditionalGeneration"),t_r=o(" (T5 model)"),a_r=l(),h7=a("li"),Qbe=a("strong"),n_r=o("tapas"),s_r=o(" \u2014 "),wQ=a("a"),l_r=o("TFTapasForMaskedLM"),i_r=o(" (TAPAS model)"),d_r=l(),p7=a("li"),Hbe=a("strong"),c_r=o("transfo-xl"),f_r=o(" \u2014 "),AQ=a("a"),m_r=o("TFTransfoXLLMHeadModel"),g_r=o(" (Transformer-XL model)"),h_r=l(),_7=a("li"),Ube=a("strong"),p_r=o("vit_mae"),__r=o(" \u2014 "),yQ=a("a"),u_r=o("TFViTMAEForPreTraining"),b_r=o(" (ViTMAE model)"),v_r=l(),u7=a("li"),Jbe=a("strong"),F_r=o("xlm"),T_r=o(" \u2014 "),LQ=a("a"),M_r=o("TFXLMWithLMHeadModel"),E_r=o(" (XLM model)"),C_r=l(),b7=a("li"),Ybe=a("strong"),w_r=o("xlm-roberta"),A_r=o(" \u2014 "),xQ=a("a"),y_r=o("TFXLMRobertaForMaskedLM"),L_r=o(" (XLM-RoBERTa model)"),x_r=l(),v7=a("li"),Kbe=a("strong"),$_r=o("xlnet"),k_r=o(" \u2014 "),$Q=a("a"),S_r=o("TFXLNetLMHeadModel"),R_r=o(" (XLNet model)"),P_r=l(),F(F7.$$.fragment),pje=l(),Qd=a("h2"),T7=a("a"),Zbe=a("span"),F(F8.$$.fragment),B_r=l(),eve=a("span"),I_r=o("TFAutoModelForCausalLM"),_je=l(),Zo=a("div"),F(T8.$$.fragment),N_r=l(),Hd=a("p"),q_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kQ=a("a"),j_r=o("from_pretrained()"),D_r=o(" class method or the "),SQ=a("a"),G_r=o("from_config()"),O_r=o(` class
method.`),V_r=l(),M8=a("p"),X_r=o("This class cannot be instantiated directly using "),ove=a("code"),z_r=o("__init__()"),W_r=o(" (throws an error)."),Q_r=l(),xt=a("div"),F(E8.$$.fragment),H_r=l(),rve=a("p"),U_r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),J_r=l(),Ud=a("p"),Y_r=o(`Note:
Loading a model from its configuration file does `),tve=a("strong"),K_r=o("not"),Z_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=a("a"),eur=o("from_pretrained()"),our=o(" to load the model weights."),rur=l(),F(M7.$$.fragment),tur=l(),yr=a("div"),F(C8.$$.fragment),aur=l(),ave=a("p"),nur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),sur=l(),en=a("p"),lur=o("The model class to instantiate is selected based on the "),nve=a("code"),iur=o("model_type"),dur=o(` property of the config object (either
passed as an argument or loaded from `),sve=a("code"),cur=o("pretrained_model_name_or_path"),fur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=a("code"),mur=o("pretrained_model_name_or_path"),gur=o(":"),hur=l(),Me=a("ul"),E7=a("li"),ive=a("strong"),pur=o("bert"),_ur=o(" \u2014 "),PQ=a("a"),uur=o("TFBertLMHeadModel"),bur=o(" (BERT model)"),vur=l(),C7=a("li"),dve=a("strong"),Fur=o("camembert"),Tur=o(" \u2014 "),BQ=a("a"),Mur=o("TFCamembertForCausalLM"),Eur=o(" (CamemBERT model)"),Cur=l(),w7=a("li"),cve=a("strong"),wur=o("ctrl"),Aur=o(" \u2014 "),IQ=a("a"),yur=o("TFCTRLLMHeadModel"),Lur=o(" (CTRL model)"),xur=l(),A7=a("li"),fve=a("strong"),$ur=o("gpt2"),kur=o(" \u2014 "),NQ=a("a"),Sur=o("TFGPT2LMHeadModel"),Rur=o(" (OpenAI GPT-2 model)"),Pur=l(),y7=a("li"),mve=a("strong"),Bur=o("gptj"),Iur=o(" \u2014 "),qQ=a("a"),Nur=o("TFGPTJForCausalLM"),qur=o(" (GPT-J model)"),jur=l(),L7=a("li"),gve=a("strong"),Dur=o("openai-gpt"),Gur=o(" \u2014 "),jQ=a("a"),Our=o("TFOpenAIGPTLMHeadModel"),Vur=o(" (OpenAI GPT model)"),Xur=l(),x7=a("li"),hve=a("strong"),zur=o("rembert"),Wur=o(" \u2014 "),DQ=a("a"),Qur=o("TFRemBertForCausalLM"),Hur=o(" (RemBERT model)"),Uur=l(),$7=a("li"),pve=a("strong"),Jur=o("roberta"),Yur=o(" \u2014 "),GQ=a("a"),Kur=o("TFRobertaForCausalLM"),Zur=o(" (RoBERTa model)"),e2r=l(),k7=a("li"),_ve=a("strong"),o2r=o("roformer"),r2r=o(" \u2014 "),OQ=a("a"),t2r=o("TFRoFormerForCausalLM"),a2r=o(" (RoFormer model)"),n2r=l(),S7=a("li"),uve=a("strong"),s2r=o("transfo-xl"),l2r=o(" \u2014 "),VQ=a("a"),i2r=o("TFTransfoXLLMHeadModel"),d2r=o(" (Transformer-XL model)"),c2r=l(),R7=a("li"),bve=a("strong"),f2r=o("xlm"),m2r=o(" \u2014 "),XQ=a("a"),g2r=o("TFXLMWithLMHeadModel"),h2r=o(" (XLM model)"),p2r=l(),P7=a("li"),vve=a("strong"),_2r=o("xlnet"),u2r=o(" \u2014 "),zQ=a("a"),b2r=o("TFXLNetLMHeadModel"),v2r=o(" (XLNet model)"),F2r=l(),F(B7.$$.fragment),uje=l(),Jd=a("h2"),I7=a("a"),Fve=a("span"),F(w8.$$.fragment),T2r=l(),Tve=a("span"),M2r=o("TFAutoModelForImageClassification"),bje=l(),er=a("div"),F(A8.$$.fragment),E2r=l(),Yd=a("p"),C2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WQ=a("a"),w2r=o("from_pretrained()"),A2r=o(" class method or the "),QQ=a("a"),y2r=o("from_config()"),L2r=o(` class
method.`),x2r=l(),y8=a("p"),$2r=o("This class cannot be instantiated directly using "),Mve=a("code"),k2r=o("__init__()"),S2r=o(" (throws an error)."),R2r=l(),$t=a("div"),F(L8.$$.fragment),P2r=l(),Eve=a("p"),B2r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),I2r=l(),Kd=a("p"),N2r=o(`Note:
Loading a model from its configuration file does `),Cve=a("strong"),q2r=o("not"),j2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=a("a"),D2r=o("from_pretrained()"),G2r=o(" to load the model weights."),O2r=l(),F(N7.$$.fragment),V2r=l(),Lr=a("div"),F(x8.$$.fragment),X2r=l(),wve=a("p"),z2r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),W2r=l(),on=a("p"),Q2r=o("The model class to instantiate is selected based on the "),Ave=a("code"),H2r=o("model_type"),U2r=o(` property of the config object (either
passed as an argument or loaded from `),yve=a("code"),J2r=o("pretrained_model_name_or_path"),Y2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=a("code"),K2r=o("pretrained_model_name_or_path"),Z2r=o(":"),e1r=l(),rn=a("ul"),q7=a("li"),xve=a("strong"),o1r=o("convnext"),r1r=o(" \u2014 "),UQ=a("a"),t1r=o("TFConvNextForImageClassification"),a1r=o(" (ConvNext model)"),n1r=l(),j7=a("li"),$ve=a("strong"),s1r=o("data2vec-vision"),l1r=o(" \u2014 "),JQ=a("a"),i1r=o("TFData2VecVisionForImageClassification"),d1r=o(" (Data2VecVision model)"),c1r=l(),D7=a("li"),kve=a("strong"),f1r=o("swin"),m1r=o(" \u2014 "),YQ=a("a"),g1r=o("TFSwinForImageClassification"),h1r=o(" (Swin model)"),p1r=l(),G7=a("li"),Sve=a("strong"),_1r=o("vit"),u1r=o(" \u2014 "),KQ=a("a"),b1r=o("TFViTForImageClassification"),v1r=o(" (ViT model)"),F1r=l(),F(O7.$$.fragment),vje=l(),Zd=a("h2"),V7=a("a"),Rve=a("span"),F($8.$$.fragment),T1r=l(),Pve=a("span"),M1r=o("TFAutoModelForMaskedLM"),Fje=l(),or=a("div"),F(k8.$$.fragment),E1r=l(),ec=a("p"),C1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ZQ=a("a"),w1r=o("from_pretrained()"),A1r=o(" class method or the "),eH=a("a"),y1r=o("from_config()"),L1r=o(` class
method.`),x1r=l(),S8=a("p"),$1r=o("This class cannot be instantiated directly using "),Bve=a("code"),k1r=o("__init__()"),S1r=o(" (throws an error)."),R1r=l(),kt=a("div"),F(R8.$$.fragment),P1r=l(),Ive=a("p"),B1r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),I1r=l(),oc=a("p"),N1r=o(`Note:
Loading a model from its configuration file does `),Nve=a("strong"),q1r=o("not"),j1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=a("a"),D1r=o("from_pretrained()"),G1r=o(" to load the model weights."),O1r=l(),F(X7.$$.fragment),V1r=l(),xr=a("div"),F(P8.$$.fragment),X1r=l(),qve=a("p"),z1r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),W1r=l(),tn=a("p"),Q1r=o("The model class to instantiate is selected based on the "),jve=a("code"),H1r=o("model_type"),U1r=o(` property of the config object (either
passed as an argument or loaded from `),Dve=a("code"),J1r=o("pretrained_model_name_or_path"),Y1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=a("code"),K1r=o("pretrained_model_name_or_path"),Z1r=o(":"),ebr=l(),ie=a("ul"),z7=a("li"),Ove=a("strong"),obr=o("albert"),rbr=o(" \u2014 "),rH=a("a"),tbr=o("TFAlbertForMaskedLM"),abr=o(" (ALBERT model)"),nbr=l(),W7=a("li"),Vve=a("strong"),sbr=o("bert"),lbr=o(" \u2014 "),tH=a("a"),ibr=o("TFBertForMaskedLM"),dbr=o(" (BERT model)"),cbr=l(),Q7=a("li"),Xve=a("strong"),fbr=o("camembert"),mbr=o(" \u2014 "),aH=a("a"),gbr=o("TFCamembertForMaskedLM"),hbr=o(" (CamemBERT model)"),pbr=l(),H7=a("li"),zve=a("strong"),_br=o("convbert"),ubr=o(" \u2014 "),nH=a("a"),bbr=o("TFConvBertForMaskedLM"),vbr=o(" (ConvBERT model)"),Fbr=l(),U7=a("li"),Wve=a("strong"),Tbr=o("deberta"),Mbr=o(" \u2014 "),sH=a("a"),Ebr=o("TFDebertaForMaskedLM"),Cbr=o(" (DeBERTa model)"),wbr=l(),J7=a("li"),Qve=a("strong"),Abr=o("deberta-v2"),ybr=o(" \u2014 "),lH=a("a"),Lbr=o("TFDebertaV2ForMaskedLM"),xbr=o(" (DeBERTa-v2 model)"),$br=l(),Y7=a("li"),Hve=a("strong"),kbr=o("distilbert"),Sbr=o(" \u2014 "),iH=a("a"),Rbr=o("TFDistilBertForMaskedLM"),Pbr=o(" (DistilBERT model)"),Bbr=l(),K7=a("li"),Uve=a("strong"),Ibr=o("electra"),Nbr=o(" \u2014 "),dH=a("a"),qbr=o("TFElectraForMaskedLM"),jbr=o(" (ELECTRA model)"),Dbr=l(),Z7=a("li"),Jve=a("strong"),Gbr=o("flaubert"),Obr=o(" \u2014 "),cH=a("a"),Vbr=o("TFFlaubertWithLMHeadModel"),Xbr=o(" (FlauBERT model)"),zbr=l(),eM=a("li"),Yve=a("strong"),Wbr=o("funnel"),Qbr=o(" \u2014 "),fH=a("a"),Hbr=o("TFFunnelForMaskedLM"),Ubr=o(" (Funnel Transformer model)"),Jbr=l(),oM=a("li"),Kve=a("strong"),Ybr=o("layoutlm"),Kbr=o(" \u2014 "),mH=a("a"),Zbr=o("TFLayoutLMForMaskedLM"),evr=o(" (LayoutLM model)"),ovr=l(),rM=a("li"),Zve=a("strong"),rvr=o("longformer"),tvr=o(" \u2014 "),gH=a("a"),avr=o("TFLongformerForMaskedLM"),nvr=o(" (Longformer model)"),svr=l(),tM=a("li"),e3e=a("strong"),lvr=o("mobilebert"),ivr=o(" \u2014 "),hH=a("a"),dvr=o("TFMobileBertForMaskedLM"),cvr=o(" (MobileBERT model)"),fvr=l(),aM=a("li"),o3e=a("strong"),mvr=o("mpnet"),gvr=o(" \u2014 "),pH=a("a"),hvr=o("TFMPNetForMaskedLM"),pvr=o(" (MPNet model)"),_vr=l(),nM=a("li"),r3e=a("strong"),uvr=o("rembert"),bvr=o(" \u2014 "),_H=a("a"),vvr=o("TFRemBertForMaskedLM"),Fvr=o(" (RemBERT model)"),Tvr=l(),sM=a("li"),t3e=a("strong"),Mvr=o("roberta"),Evr=o(" \u2014 "),uH=a("a"),Cvr=o("TFRobertaForMaskedLM"),wvr=o(" (RoBERTa model)"),Avr=l(),lM=a("li"),a3e=a("strong"),yvr=o("roformer"),Lvr=o(" \u2014 "),bH=a("a"),xvr=o("TFRoFormerForMaskedLM"),$vr=o(" (RoFormer model)"),kvr=l(),iM=a("li"),n3e=a("strong"),Svr=o("tapas"),Rvr=o(" \u2014 "),vH=a("a"),Pvr=o("TFTapasForMaskedLM"),Bvr=o(" (TAPAS model)"),Ivr=l(),dM=a("li"),s3e=a("strong"),Nvr=o("xlm"),qvr=o(" \u2014 "),FH=a("a"),jvr=o("TFXLMWithLMHeadModel"),Dvr=o(" (XLM model)"),Gvr=l(),cM=a("li"),l3e=a("strong"),Ovr=o("xlm-roberta"),Vvr=o(" \u2014 "),TH=a("a"),Xvr=o("TFXLMRobertaForMaskedLM"),zvr=o(" (XLM-RoBERTa model)"),Wvr=l(),F(fM.$$.fragment),Tje=l(),rc=a("h2"),mM=a("a"),i3e=a("span"),F(B8.$$.fragment),Qvr=l(),d3e=a("span"),Hvr=o("TFAutoModelForSeq2SeqLM"),Mje=l(),rr=a("div"),F(I8.$$.fragment),Uvr=l(),tc=a("p"),Jvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),MH=a("a"),Yvr=o("from_pretrained()"),Kvr=o(" class method or the "),EH=a("a"),Zvr=o("from_config()"),e3r=o(` class
method.`),o3r=l(),N8=a("p"),r3r=o("This class cannot be instantiated directly using "),c3e=a("code"),t3r=o("__init__()"),a3r=o(" (throws an error)."),n3r=l(),St=a("div"),F(q8.$$.fragment),s3r=l(),f3e=a("p"),l3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),i3r=l(),ac=a("p"),d3r=o(`Note:
Loading a model from its configuration file does `),m3e=a("strong"),c3r=o("not"),f3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=a("a"),m3r=o("from_pretrained()"),g3r=o(" to load the model weights."),h3r=l(),F(gM.$$.fragment),p3r=l(),$r=a("div"),F(j8.$$.fragment),_3r=l(),g3e=a("p"),u3r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),b3r=l(),an=a("p"),v3r=o("The model class to instantiate is selected based on the "),h3e=a("code"),F3r=o("model_type"),T3r=o(` property of the config object (either
passed as an argument or loaded from `),p3e=a("code"),M3r=o("pretrained_model_name_or_path"),E3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_3e=a("code"),C3r=o("pretrained_model_name_or_path"),w3r=o(":"),A3r=l(),ye=a("ul"),hM=a("li"),u3e=a("strong"),y3r=o("bart"),L3r=o(" \u2014 "),wH=a("a"),x3r=o("TFBartForConditionalGeneration"),$3r=o(" (BART model)"),k3r=l(),pM=a("li"),b3e=a("strong"),S3r=o("blenderbot"),R3r=o(" \u2014 "),AH=a("a"),P3r=o("TFBlenderbotForConditionalGeneration"),B3r=o(" (Blenderbot model)"),I3r=l(),_M=a("li"),v3e=a("strong"),N3r=o("blenderbot-small"),q3r=o(" \u2014 "),yH=a("a"),j3r=o("TFBlenderbotSmallForConditionalGeneration"),D3r=o(" (BlenderbotSmall model)"),G3r=l(),uM=a("li"),F3e=a("strong"),O3r=o("encoder-decoder"),V3r=o(" \u2014 "),LH=a("a"),X3r=o("TFEncoderDecoderModel"),z3r=o(" (Encoder decoder model)"),W3r=l(),bM=a("li"),T3e=a("strong"),Q3r=o("led"),H3r=o(" \u2014 "),xH=a("a"),U3r=o("TFLEDForConditionalGeneration"),J3r=o(" (LED model)"),Y3r=l(),vM=a("li"),M3e=a("strong"),K3r=o("marian"),Z3r=o(" \u2014 "),$H=a("a"),e0r=o("TFMarianMTModel"),o0r=o(" (Marian model)"),r0r=l(),FM=a("li"),E3e=a("strong"),t0r=o("mbart"),a0r=o(" \u2014 "),kH=a("a"),n0r=o("TFMBartForConditionalGeneration"),s0r=o(" (mBART model)"),l0r=l(),TM=a("li"),C3e=a("strong"),i0r=o("mt5"),d0r=o(" \u2014 "),SH=a("a"),c0r=o("TFMT5ForConditionalGeneration"),f0r=o(" (mT5 model)"),m0r=l(),MM=a("li"),w3e=a("strong"),g0r=o("pegasus"),h0r=o(" \u2014 "),RH=a("a"),p0r=o("TFPegasusForConditionalGeneration"),_0r=o(" (Pegasus model)"),u0r=l(),EM=a("li"),A3e=a("strong"),b0r=o("t5"),v0r=o(" \u2014 "),PH=a("a"),F0r=o("TFT5ForConditionalGeneration"),T0r=o(" (T5 model)"),M0r=l(),F(CM.$$.fragment),Eje=l(),nc=a("h2"),wM=a("a"),y3e=a("span"),F(D8.$$.fragment),E0r=l(),L3e=a("span"),C0r=o("TFAutoModelForSequenceClassification"),Cje=l(),tr=a("div"),F(G8.$$.fragment),w0r=l(),sc=a("p"),A0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BH=a("a"),y0r=o("from_pretrained()"),L0r=o(" class method or the "),IH=a("a"),x0r=o("from_config()"),$0r=o(` class
method.`),k0r=l(),O8=a("p"),S0r=o("This class cannot be instantiated directly using "),x3e=a("code"),R0r=o("__init__()"),P0r=o(" (throws an error)."),B0r=l(),Rt=a("div"),F(V8.$$.fragment),I0r=l(),$3e=a("p"),N0r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),q0r=l(),lc=a("p"),j0r=o(`Note:
Loading a model from its configuration file does `),k3e=a("strong"),D0r=o("not"),G0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),O0r=o("from_pretrained()"),V0r=o(" to load the model weights."),X0r=l(),F(AM.$$.fragment),z0r=l(),kr=a("div"),F(X8.$$.fragment),W0r=l(),S3e=a("p"),Q0r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),H0r=l(),nn=a("p"),U0r=o("The model class to instantiate is selected based on the "),R3e=a("code"),J0r=o("model_type"),Y0r=o(` property of the config object (either
passed as an argument or loaded from `),P3e=a("code"),K0r=o("pretrained_model_name_or_path"),Z0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=a("code"),eFr=o("pretrained_model_name_or_path"),oFr=o(":"),rFr=l(),oe=a("ul"),yM=a("li"),I3e=a("strong"),tFr=o("albert"),aFr=o(" \u2014 "),qH=a("a"),nFr=o("TFAlbertForSequenceClassification"),sFr=o(" (ALBERT model)"),lFr=l(),LM=a("li"),N3e=a("strong"),iFr=o("bert"),dFr=o(" \u2014 "),jH=a("a"),cFr=o("TFBertForSequenceClassification"),fFr=o(" (BERT model)"),mFr=l(),xM=a("li"),q3e=a("strong"),gFr=o("camembert"),hFr=o(" \u2014 "),DH=a("a"),pFr=o("TFCamembertForSequenceClassification"),_Fr=o(" (CamemBERT model)"),uFr=l(),$M=a("li"),j3e=a("strong"),bFr=o("convbert"),vFr=o(" \u2014 "),GH=a("a"),FFr=o("TFConvBertForSequenceClassification"),TFr=o(" (ConvBERT model)"),MFr=l(),kM=a("li"),D3e=a("strong"),EFr=o("ctrl"),CFr=o(" \u2014 "),OH=a("a"),wFr=o("TFCTRLForSequenceClassification"),AFr=o(" (CTRL model)"),yFr=l(),SM=a("li"),G3e=a("strong"),LFr=o("deberta"),xFr=o(" \u2014 "),VH=a("a"),$Fr=o("TFDebertaForSequenceClassification"),kFr=o(" (DeBERTa model)"),SFr=l(),RM=a("li"),O3e=a("strong"),RFr=o("deberta-v2"),PFr=o(" \u2014 "),XH=a("a"),BFr=o("TFDebertaV2ForSequenceClassification"),IFr=o(" (DeBERTa-v2 model)"),NFr=l(),PM=a("li"),V3e=a("strong"),qFr=o("distilbert"),jFr=o(" \u2014 "),zH=a("a"),DFr=o("TFDistilBertForSequenceClassification"),GFr=o(" (DistilBERT model)"),OFr=l(),BM=a("li"),X3e=a("strong"),VFr=o("electra"),XFr=o(" \u2014 "),WH=a("a"),zFr=o("TFElectraForSequenceClassification"),WFr=o(" (ELECTRA model)"),QFr=l(),IM=a("li"),z3e=a("strong"),HFr=o("flaubert"),UFr=o(" \u2014 "),QH=a("a"),JFr=o("TFFlaubertForSequenceClassification"),YFr=o(" (FlauBERT model)"),KFr=l(),NM=a("li"),W3e=a("strong"),ZFr=o("funnel"),eTr=o(" \u2014 "),HH=a("a"),oTr=o("TFFunnelForSequenceClassification"),rTr=o(" (Funnel Transformer model)"),tTr=l(),qM=a("li"),Q3e=a("strong"),aTr=o("gpt2"),nTr=o(" \u2014 "),UH=a("a"),sTr=o("TFGPT2ForSequenceClassification"),lTr=o(" (OpenAI GPT-2 model)"),iTr=l(),jM=a("li"),H3e=a("strong"),dTr=o("gptj"),cTr=o(" \u2014 "),JH=a("a"),fTr=o("TFGPTJForSequenceClassification"),mTr=o(" (GPT-J model)"),gTr=l(),DM=a("li"),U3e=a("strong"),hTr=o("layoutlm"),pTr=o(" \u2014 "),YH=a("a"),_Tr=o("TFLayoutLMForSequenceClassification"),uTr=o(" (LayoutLM model)"),bTr=l(),GM=a("li"),J3e=a("strong"),vTr=o("longformer"),FTr=o(" \u2014 "),KH=a("a"),TTr=o("TFLongformerForSequenceClassification"),MTr=o(" (Longformer model)"),ETr=l(),OM=a("li"),Y3e=a("strong"),CTr=o("mobilebert"),wTr=o(" \u2014 "),ZH=a("a"),ATr=o("TFMobileBertForSequenceClassification"),yTr=o(" (MobileBERT model)"),LTr=l(),VM=a("li"),K3e=a("strong"),xTr=o("mpnet"),$Tr=o(" \u2014 "),eU=a("a"),kTr=o("TFMPNetForSequenceClassification"),STr=o(" (MPNet model)"),RTr=l(),XM=a("li"),Z3e=a("strong"),PTr=o("openai-gpt"),BTr=o(" \u2014 "),oU=a("a"),ITr=o("TFOpenAIGPTForSequenceClassification"),NTr=o(" (OpenAI GPT model)"),qTr=l(),zM=a("li"),e0e=a("strong"),jTr=o("rembert"),DTr=o(" \u2014 "),rU=a("a"),GTr=o("TFRemBertForSequenceClassification"),OTr=o(" (RemBERT model)"),VTr=l(),WM=a("li"),o0e=a("strong"),XTr=o("roberta"),zTr=o(" \u2014 "),tU=a("a"),WTr=o("TFRobertaForSequenceClassification"),QTr=o(" (RoBERTa model)"),HTr=l(),QM=a("li"),r0e=a("strong"),UTr=o("roformer"),JTr=o(" \u2014 "),aU=a("a"),YTr=o("TFRoFormerForSequenceClassification"),KTr=o(" (RoFormer model)"),ZTr=l(),HM=a("li"),t0e=a("strong"),e7r=o("tapas"),o7r=o(" \u2014 "),nU=a("a"),r7r=o("TFTapasForSequenceClassification"),t7r=o(" (TAPAS model)"),a7r=l(),UM=a("li"),a0e=a("strong"),n7r=o("transfo-xl"),s7r=o(" \u2014 "),sU=a("a"),l7r=o("TFTransfoXLForSequenceClassification"),i7r=o(" (Transformer-XL model)"),d7r=l(),JM=a("li"),n0e=a("strong"),c7r=o("xlm"),f7r=o(" \u2014 "),lU=a("a"),m7r=o("TFXLMForSequenceClassification"),g7r=o(" (XLM model)"),h7r=l(),YM=a("li"),s0e=a("strong"),p7r=o("xlm-roberta"),_7r=o(" \u2014 "),iU=a("a"),u7r=o("TFXLMRobertaForSequenceClassification"),b7r=o(" (XLM-RoBERTa model)"),v7r=l(),KM=a("li"),l0e=a("strong"),F7r=o("xlnet"),T7r=o(" \u2014 "),dU=a("a"),M7r=o("TFXLNetForSequenceClassification"),E7r=o(" (XLNet model)"),C7r=l(),F(ZM.$$.fragment),wje=l(),ic=a("h2"),e4=a("a"),i0e=a("span"),F(z8.$$.fragment),w7r=l(),d0e=a("span"),A7r=o("TFAutoModelForMultipleChoice"),Aje=l(),ar=a("div"),F(W8.$$.fragment),y7r=l(),dc=a("p"),L7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cU=a("a"),x7r=o("from_pretrained()"),$7r=o(" class method or the "),fU=a("a"),k7r=o("from_config()"),S7r=o(` class
method.`),R7r=l(),Q8=a("p"),P7r=o("This class cannot be instantiated directly using "),c0e=a("code"),B7r=o("__init__()"),I7r=o(" (throws an error)."),N7r=l(),Pt=a("div"),F(H8.$$.fragment),q7r=l(),f0e=a("p"),j7r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),D7r=l(),cc=a("p"),G7r=o(`Note:
Loading a model from its configuration file does `),m0e=a("strong"),O7r=o("not"),V7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=a("a"),X7r=o("from_pretrained()"),z7r=o(" to load the model weights."),W7r=l(),F(o4.$$.fragment),Q7r=l(),Sr=a("div"),F(U8.$$.fragment),H7r=l(),g0e=a("p"),U7r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),J7r=l(),sn=a("p"),Y7r=o("The model class to instantiate is selected based on the "),h0e=a("code"),K7r=o("model_type"),Z7r=o(` property of the config object (either
passed as an argument or loaded from `),p0e=a("code"),eMr=o("pretrained_model_name_or_path"),oMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_0e=a("code"),rMr=o("pretrained_model_name_or_path"),tMr=o(":"),aMr=l(),pe=a("ul"),r4=a("li"),u0e=a("strong"),nMr=o("albert"),sMr=o(" \u2014 "),gU=a("a"),lMr=o("TFAlbertForMultipleChoice"),iMr=o(" (ALBERT model)"),dMr=l(),t4=a("li"),b0e=a("strong"),cMr=o("bert"),fMr=o(" \u2014 "),hU=a("a"),mMr=o("TFBertForMultipleChoice"),gMr=o(" (BERT model)"),hMr=l(),a4=a("li"),v0e=a("strong"),pMr=o("camembert"),_Mr=o(" \u2014 "),pU=a("a"),uMr=o("TFCamembertForMultipleChoice"),bMr=o(" (CamemBERT model)"),vMr=l(),n4=a("li"),F0e=a("strong"),FMr=o("convbert"),TMr=o(" \u2014 "),_U=a("a"),MMr=o("TFConvBertForMultipleChoice"),EMr=o(" (ConvBERT model)"),CMr=l(),s4=a("li"),T0e=a("strong"),wMr=o("distilbert"),AMr=o(" \u2014 "),uU=a("a"),yMr=o("TFDistilBertForMultipleChoice"),LMr=o(" (DistilBERT model)"),xMr=l(),l4=a("li"),M0e=a("strong"),$Mr=o("electra"),kMr=o(" \u2014 "),bU=a("a"),SMr=o("TFElectraForMultipleChoice"),RMr=o(" (ELECTRA model)"),PMr=l(),i4=a("li"),E0e=a("strong"),BMr=o("flaubert"),IMr=o(" \u2014 "),vU=a("a"),NMr=o("TFFlaubertForMultipleChoice"),qMr=o(" (FlauBERT model)"),jMr=l(),d4=a("li"),C0e=a("strong"),DMr=o("funnel"),GMr=o(" \u2014 "),FU=a("a"),OMr=o("TFFunnelForMultipleChoice"),VMr=o(" (Funnel Transformer model)"),XMr=l(),c4=a("li"),w0e=a("strong"),zMr=o("longformer"),WMr=o(" \u2014 "),TU=a("a"),QMr=o("TFLongformerForMultipleChoice"),HMr=o(" (Longformer model)"),UMr=l(),f4=a("li"),A0e=a("strong"),JMr=o("mobilebert"),YMr=o(" \u2014 "),MU=a("a"),KMr=o("TFMobileBertForMultipleChoice"),ZMr=o(" (MobileBERT model)"),e4r=l(),m4=a("li"),y0e=a("strong"),o4r=o("mpnet"),r4r=o(" \u2014 "),EU=a("a"),t4r=o("TFMPNetForMultipleChoice"),a4r=o(" (MPNet model)"),n4r=l(),g4=a("li"),L0e=a("strong"),s4r=o("rembert"),l4r=o(" \u2014 "),CU=a("a"),i4r=o("TFRemBertForMultipleChoice"),d4r=o(" (RemBERT model)"),c4r=l(),h4=a("li"),x0e=a("strong"),f4r=o("roberta"),m4r=o(" \u2014 "),wU=a("a"),g4r=o("TFRobertaForMultipleChoice"),h4r=o(" (RoBERTa model)"),p4r=l(),p4=a("li"),$0e=a("strong"),_4r=o("roformer"),u4r=o(" \u2014 "),AU=a("a"),b4r=o("TFRoFormerForMultipleChoice"),v4r=o(" (RoFormer model)"),F4r=l(),_4=a("li"),k0e=a("strong"),T4r=o("xlm"),M4r=o(" \u2014 "),yU=a("a"),E4r=o("TFXLMForMultipleChoice"),C4r=o(" (XLM model)"),w4r=l(),u4=a("li"),S0e=a("strong"),A4r=o("xlm-roberta"),y4r=o(" \u2014 "),LU=a("a"),L4r=o("TFXLMRobertaForMultipleChoice"),x4r=o(" (XLM-RoBERTa model)"),$4r=l(),b4=a("li"),R0e=a("strong"),k4r=o("xlnet"),S4r=o(" \u2014 "),xU=a("a"),R4r=o("TFXLNetForMultipleChoice"),P4r=o(" (XLNet model)"),B4r=l(),F(v4.$$.fragment),yje=l(),fc=a("h2"),F4=a("a"),P0e=a("span"),F(J8.$$.fragment),I4r=l(),B0e=a("span"),N4r=o("TFAutoModelForNextSentencePrediction"),Lje=l(),nr=a("div"),F(Y8.$$.fragment),q4r=l(),mc=a("p"),j4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$U=a("a"),D4r=o("from_pretrained()"),G4r=o(" class method or the "),kU=a("a"),O4r=o("from_config()"),V4r=o(` class
method.`),X4r=l(),K8=a("p"),z4r=o("This class cannot be instantiated directly using "),I0e=a("code"),W4r=o("__init__()"),Q4r=o(" (throws an error)."),H4r=l(),Bt=a("div"),F(Z8.$$.fragment),U4r=l(),N0e=a("p"),J4r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Y4r=l(),gc=a("p"),K4r=o(`Note:
Loading a model from its configuration file does `),q0e=a("strong"),Z4r=o("not"),eEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=a("a"),oEr=o("from_pretrained()"),rEr=o(" to load the model weights."),tEr=l(),F(T4.$$.fragment),aEr=l(),Rr=a("div"),F(e9.$$.fragment),nEr=l(),j0e=a("p"),sEr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lEr=l(),ln=a("p"),iEr=o("The model class to instantiate is selected based on the "),D0e=a("code"),dEr=o("model_type"),cEr=o(` property of the config object (either
passed as an argument or loaded from `),G0e=a("code"),fEr=o("pretrained_model_name_or_path"),mEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O0e=a("code"),gEr=o("pretrained_model_name_or_path"),hEr=o(":"),pEr=l(),o9=a("ul"),M4=a("li"),V0e=a("strong"),_Er=o("bert"),uEr=o(" \u2014 "),RU=a("a"),bEr=o("TFBertForNextSentencePrediction"),vEr=o(" (BERT model)"),FEr=l(),E4=a("li"),X0e=a("strong"),TEr=o("mobilebert"),MEr=o(" \u2014 "),PU=a("a"),EEr=o("TFMobileBertForNextSentencePrediction"),CEr=o(" (MobileBERT model)"),wEr=l(),F(C4.$$.fragment),xje=l(),hc=a("h2"),w4=a("a"),z0e=a("span"),F(r9.$$.fragment),AEr=l(),W0e=a("span"),yEr=o("TFAutoModelForTableQuestionAnswering"),$je=l(),sr=a("div"),F(t9.$$.fragment),LEr=l(),pc=a("p"),xEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BU=a("a"),$Er=o("from_pretrained()"),kEr=o(" class method or the "),IU=a("a"),SEr=o("from_config()"),REr=o(` class
method.`),PEr=l(),a9=a("p"),BEr=o("This class cannot be instantiated directly using "),Q0e=a("code"),IEr=o("__init__()"),NEr=o(" (throws an error)."),qEr=l(),It=a("div"),F(n9.$$.fragment),jEr=l(),H0e=a("p"),DEr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),GEr=l(),_c=a("p"),OEr=o(`Note:
Loading a model from its configuration file does `),U0e=a("strong"),VEr=o("not"),XEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=a("a"),zEr=o("from_pretrained()"),WEr=o(" to load the model weights."),QEr=l(),F(A4.$$.fragment),HEr=l(),Pr=a("div"),F(s9.$$.fragment),UEr=l(),J0e=a("p"),JEr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),YEr=l(),dn=a("p"),KEr=o("The model class to instantiate is selected based on the "),Y0e=a("code"),ZEr=o("model_type"),eCr=o(` property of the config object (either
passed as an argument or loaded from `),K0e=a("code"),oCr=o("pretrained_model_name_or_path"),rCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=a("code"),tCr=o("pretrained_model_name_or_path"),aCr=o(":"),nCr=l(),eFe=a("ul"),y4=a("li"),oFe=a("strong"),sCr=o("tapas"),lCr=o(" \u2014 "),qU=a("a"),iCr=o("TFTapasForQuestionAnswering"),dCr=o(" (TAPAS model)"),cCr=l(),F(L4.$$.fragment),kje=l(),uc=a("h2"),x4=a("a"),rFe=a("span"),F(l9.$$.fragment),fCr=l(),tFe=a("span"),mCr=o("TFAutoModelForTokenClassification"),Sje=l(),lr=a("div"),F(i9.$$.fragment),gCr=l(),bc=a("p"),hCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jU=a("a"),pCr=o("from_pretrained()"),_Cr=o(" class method or the "),DU=a("a"),uCr=o("from_config()"),bCr=o(` class
method.`),vCr=l(),d9=a("p"),FCr=o("This class cannot be instantiated directly using "),aFe=a("code"),TCr=o("__init__()"),MCr=o(" (throws an error)."),ECr=l(),Nt=a("div"),F(c9.$$.fragment),CCr=l(),nFe=a("p"),wCr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ACr=l(),vc=a("p"),yCr=o(`Note:
Loading a model from its configuration file does `),sFe=a("strong"),LCr=o("not"),xCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=a("a"),$Cr=o("from_pretrained()"),kCr=o(" to load the model weights."),SCr=l(),F($4.$$.fragment),RCr=l(),Br=a("div"),F(f9.$$.fragment),PCr=l(),lFe=a("p"),BCr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ICr=l(),cn=a("p"),NCr=o("The model class to instantiate is selected based on the "),iFe=a("code"),qCr=o("model_type"),jCr=o(` property of the config object (either
passed as an argument or loaded from `),dFe=a("code"),DCr=o("pretrained_model_name_or_path"),GCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=a("code"),OCr=o("pretrained_model_name_or_path"),VCr=o(":"),XCr=l(),de=a("ul"),k4=a("li"),fFe=a("strong"),zCr=o("albert"),WCr=o(" \u2014 "),OU=a("a"),QCr=o("TFAlbertForTokenClassification"),HCr=o(" (ALBERT model)"),UCr=l(),S4=a("li"),mFe=a("strong"),JCr=o("bert"),YCr=o(" \u2014 "),VU=a("a"),KCr=o("TFBertForTokenClassification"),ZCr=o(" (BERT model)"),e5r=l(),R4=a("li"),gFe=a("strong"),o5r=o("camembert"),r5r=o(" \u2014 "),XU=a("a"),t5r=o("TFCamembertForTokenClassification"),a5r=o(" (CamemBERT model)"),n5r=l(),P4=a("li"),hFe=a("strong"),s5r=o("convbert"),l5r=o(" \u2014 "),zU=a("a"),i5r=o("TFConvBertForTokenClassification"),d5r=o(" (ConvBERT model)"),c5r=l(),B4=a("li"),pFe=a("strong"),f5r=o("deberta"),m5r=o(" \u2014 "),WU=a("a"),g5r=o("TFDebertaForTokenClassification"),h5r=o(" (DeBERTa model)"),p5r=l(),I4=a("li"),_Fe=a("strong"),_5r=o("deberta-v2"),u5r=o(" \u2014 "),QU=a("a"),b5r=o("TFDebertaV2ForTokenClassification"),v5r=o(" (DeBERTa-v2 model)"),F5r=l(),N4=a("li"),uFe=a("strong"),T5r=o("distilbert"),M5r=o(" \u2014 "),HU=a("a"),E5r=o("TFDistilBertForTokenClassification"),C5r=o(" (DistilBERT model)"),w5r=l(),q4=a("li"),bFe=a("strong"),A5r=o("electra"),y5r=o(" \u2014 "),UU=a("a"),L5r=o("TFElectraForTokenClassification"),x5r=o(" (ELECTRA model)"),$5r=l(),j4=a("li"),vFe=a("strong"),k5r=o("flaubert"),S5r=o(" \u2014 "),JU=a("a"),R5r=o("TFFlaubertForTokenClassification"),P5r=o(" (FlauBERT model)"),B5r=l(),D4=a("li"),FFe=a("strong"),I5r=o("funnel"),N5r=o(" \u2014 "),YU=a("a"),q5r=o("TFFunnelForTokenClassification"),j5r=o(" (Funnel Transformer model)"),D5r=l(),G4=a("li"),TFe=a("strong"),G5r=o("layoutlm"),O5r=o(" \u2014 "),KU=a("a"),V5r=o("TFLayoutLMForTokenClassification"),X5r=o(" (LayoutLM model)"),z5r=l(),O4=a("li"),MFe=a("strong"),W5r=o("longformer"),Q5r=o(" \u2014 "),ZU=a("a"),H5r=o("TFLongformerForTokenClassification"),U5r=o(" (Longformer model)"),J5r=l(),V4=a("li"),EFe=a("strong"),Y5r=o("mobilebert"),K5r=o(" \u2014 "),eJ=a("a"),Z5r=o("TFMobileBertForTokenClassification"),ewr=o(" (MobileBERT model)"),owr=l(),X4=a("li"),CFe=a("strong"),rwr=o("mpnet"),twr=o(" \u2014 "),oJ=a("a"),awr=o("TFMPNetForTokenClassification"),nwr=o(" (MPNet model)"),swr=l(),z4=a("li"),wFe=a("strong"),lwr=o("rembert"),iwr=o(" \u2014 "),rJ=a("a"),dwr=o("TFRemBertForTokenClassification"),cwr=o(" (RemBERT model)"),fwr=l(),W4=a("li"),AFe=a("strong"),mwr=o("roberta"),gwr=o(" \u2014 "),tJ=a("a"),hwr=o("TFRobertaForTokenClassification"),pwr=o(" (RoBERTa model)"),_wr=l(),Q4=a("li"),yFe=a("strong"),uwr=o("roformer"),bwr=o(" \u2014 "),aJ=a("a"),vwr=o("TFRoFormerForTokenClassification"),Fwr=o(" (RoFormer model)"),Twr=l(),H4=a("li"),LFe=a("strong"),Mwr=o("xlm"),Ewr=o(" \u2014 "),nJ=a("a"),Cwr=o("TFXLMForTokenClassification"),wwr=o(" (XLM model)"),Awr=l(),U4=a("li"),xFe=a("strong"),ywr=o("xlm-roberta"),Lwr=o(" \u2014 "),sJ=a("a"),xwr=o("TFXLMRobertaForTokenClassification"),$wr=o(" (XLM-RoBERTa model)"),kwr=l(),J4=a("li"),$Fe=a("strong"),Swr=o("xlnet"),Rwr=o(" \u2014 "),lJ=a("a"),Pwr=o("TFXLNetForTokenClassification"),Bwr=o(" (XLNet model)"),Iwr=l(),F(Y4.$$.fragment),Rje=l(),Fc=a("h2"),K4=a("a"),kFe=a("span"),F(m9.$$.fragment),Nwr=l(),SFe=a("span"),qwr=o("TFAutoModelForQuestionAnswering"),Pje=l(),ir=a("div"),F(g9.$$.fragment),jwr=l(),Tc=a("p"),Dwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iJ=a("a"),Gwr=o("from_pretrained()"),Owr=o(" class method or the "),dJ=a("a"),Vwr=o("from_config()"),Xwr=o(` class
method.`),zwr=l(),h9=a("p"),Wwr=o("This class cannot be instantiated directly using "),RFe=a("code"),Qwr=o("__init__()"),Hwr=o(" (throws an error)."),Uwr=l(),qt=a("div"),F(p9.$$.fragment),Jwr=l(),PFe=a("p"),Ywr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Kwr=l(),Mc=a("p"),Zwr=o(`Note:
Loading a model from its configuration file does `),BFe=a("strong"),e6r=o("not"),o6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=a("a"),r6r=o("from_pretrained()"),t6r=o(" to load the model weights."),a6r=l(),F(Z4.$$.fragment),n6r=l(),Ir=a("div"),F(_9.$$.fragment),s6r=l(),IFe=a("p"),l6r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),i6r=l(),fn=a("p"),d6r=o("The model class to instantiate is selected based on the "),NFe=a("code"),c6r=o("model_type"),f6r=o(` property of the config object (either
passed as an argument or loaded from `),qFe=a("code"),m6r=o("pretrained_model_name_or_path"),g6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=a("code"),h6r=o("pretrained_model_name_or_path"),p6r=o(":"),_6r=l(),ce=a("ul"),eE=a("li"),DFe=a("strong"),u6r=o("albert"),b6r=o(" \u2014 "),fJ=a("a"),v6r=o("TFAlbertForQuestionAnswering"),F6r=o(" (ALBERT model)"),T6r=l(),oE=a("li"),GFe=a("strong"),M6r=o("bert"),E6r=o(" \u2014 "),mJ=a("a"),C6r=o("TFBertForQuestionAnswering"),w6r=o(" (BERT model)"),A6r=l(),rE=a("li"),OFe=a("strong"),y6r=o("camembert"),L6r=o(" \u2014 "),gJ=a("a"),x6r=o("TFCamembertForQuestionAnswering"),$6r=o(" (CamemBERT model)"),k6r=l(),tE=a("li"),VFe=a("strong"),S6r=o("convbert"),R6r=o(" \u2014 "),hJ=a("a"),P6r=o("TFConvBertForQuestionAnswering"),B6r=o(" (ConvBERT model)"),I6r=l(),aE=a("li"),XFe=a("strong"),N6r=o("deberta"),q6r=o(" \u2014 "),pJ=a("a"),j6r=o("TFDebertaForQuestionAnswering"),D6r=o(" (DeBERTa model)"),G6r=l(),nE=a("li"),zFe=a("strong"),O6r=o("deberta-v2"),V6r=o(" \u2014 "),_J=a("a"),X6r=o("TFDebertaV2ForQuestionAnswering"),z6r=o(" (DeBERTa-v2 model)"),W6r=l(),sE=a("li"),WFe=a("strong"),Q6r=o("distilbert"),H6r=o(" \u2014 "),uJ=a("a"),U6r=o("TFDistilBertForQuestionAnswering"),J6r=o(" (DistilBERT model)"),Y6r=l(),lE=a("li"),QFe=a("strong"),K6r=o("electra"),Z6r=o(" \u2014 "),bJ=a("a"),eAr=o("TFElectraForQuestionAnswering"),oAr=o(" (ELECTRA model)"),rAr=l(),iE=a("li"),HFe=a("strong"),tAr=o("flaubert"),aAr=o(" \u2014 "),vJ=a("a"),nAr=o("TFFlaubertForQuestionAnsweringSimple"),sAr=o(" (FlauBERT model)"),lAr=l(),dE=a("li"),UFe=a("strong"),iAr=o("funnel"),dAr=o(" \u2014 "),FJ=a("a"),cAr=o("TFFunnelForQuestionAnswering"),fAr=o(" (Funnel Transformer model)"),mAr=l(),cE=a("li"),JFe=a("strong"),gAr=o("gptj"),hAr=o(" \u2014 "),TJ=a("a"),pAr=o("TFGPTJForQuestionAnswering"),_Ar=o(" (GPT-J model)"),uAr=l(),fE=a("li"),YFe=a("strong"),bAr=o("longformer"),vAr=o(" \u2014 "),MJ=a("a"),FAr=o("TFLongformerForQuestionAnswering"),TAr=o(" (Longformer model)"),MAr=l(),mE=a("li"),KFe=a("strong"),EAr=o("mobilebert"),CAr=o(" \u2014 "),EJ=a("a"),wAr=o("TFMobileBertForQuestionAnswering"),AAr=o(" (MobileBERT model)"),yAr=l(),gE=a("li"),ZFe=a("strong"),LAr=o("mpnet"),xAr=o(" \u2014 "),CJ=a("a"),$Ar=o("TFMPNetForQuestionAnswering"),kAr=o(" (MPNet model)"),SAr=l(),hE=a("li"),eTe=a("strong"),RAr=o("rembert"),PAr=o(" \u2014 "),wJ=a("a"),BAr=o("TFRemBertForQuestionAnswering"),IAr=o(" (RemBERT model)"),NAr=l(),pE=a("li"),oTe=a("strong"),qAr=o("roberta"),jAr=o(" \u2014 "),AJ=a("a"),DAr=o("TFRobertaForQuestionAnswering"),GAr=o(" (RoBERTa model)"),OAr=l(),_E=a("li"),rTe=a("strong"),VAr=o("roformer"),XAr=o(" \u2014 "),yJ=a("a"),zAr=o("TFRoFormerForQuestionAnswering"),WAr=o(" (RoFormer model)"),QAr=l(),uE=a("li"),tTe=a("strong"),HAr=o("xlm"),UAr=o(" \u2014 "),LJ=a("a"),JAr=o("TFXLMForQuestionAnsweringSimple"),YAr=o(" (XLM model)"),KAr=l(),bE=a("li"),aTe=a("strong"),ZAr=o("xlm-roberta"),eyr=o(" \u2014 "),xJ=a("a"),oyr=o("TFXLMRobertaForQuestionAnswering"),ryr=o(" (XLM-RoBERTa model)"),tyr=l(),vE=a("li"),nTe=a("strong"),ayr=o("xlnet"),nyr=o(" \u2014 "),$J=a("a"),syr=o("TFXLNetForQuestionAnsweringSimple"),lyr=o(" (XLNet model)"),iyr=l(),F(FE.$$.fragment),Bje=l(),Ec=a("h2"),TE=a("a"),sTe=a("span"),F(u9.$$.fragment),dyr=l(),lTe=a("span"),cyr=o("TFAutoModelForVision2Seq"),Ije=l(),dr=a("div"),F(b9.$$.fragment),fyr=l(),Cc=a("p"),myr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kJ=a("a"),gyr=o("from_pretrained()"),hyr=o(" class method or the "),SJ=a("a"),pyr=o("from_config()"),_yr=o(` class
method.`),uyr=l(),v9=a("p"),byr=o("This class cannot be instantiated directly using "),iTe=a("code"),vyr=o("__init__()"),Fyr=o(" (throws an error)."),Tyr=l(),jt=a("div"),F(F9.$$.fragment),Myr=l(),dTe=a("p"),Eyr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Cyr=l(),wc=a("p"),wyr=o(`Note:
Loading a model from its configuration file does `),cTe=a("strong"),Ayr=o("not"),yyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=a("a"),Lyr=o("from_pretrained()"),xyr=o(" to load the model weights."),$yr=l(),F(ME.$$.fragment),kyr=l(),Nr=a("div"),F(T9.$$.fragment),Syr=l(),fTe=a("p"),Ryr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Pyr=l(),mn=a("p"),Byr=o("The model class to instantiate is selected based on the "),mTe=a("code"),Iyr=o("model_type"),Nyr=o(` property of the config object (either
passed as an argument or loaded from `),gTe=a("code"),qyr=o("pretrained_model_name_or_path"),jyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hTe=a("code"),Dyr=o("pretrained_model_name_or_path"),Gyr=o(":"),Oyr=l(),pTe=a("ul"),EE=a("li"),_Te=a("strong"),Vyr=o("vision-encoder-decoder"),Xyr=o(" \u2014 "),PJ=a("a"),zyr=o("TFVisionEncoderDecoderModel"),Wyr=o(" (Vision Encoder decoder model)"),Qyr=l(),F(CE.$$.fragment),Nje=l(),Ac=a("h2"),wE=a("a"),uTe=a("span"),F(M9.$$.fragment),Hyr=l(),bTe=a("span"),Uyr=o("TFAutoModelForSpeechSeq2Seq"),qje=l(),cr=a("div"),F(E9.$$.fragment),Jyr=l(),yc=a("p"),Yyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BJ=a("a"),Kyr=o("from_pretrained()"),Zyr=o(" class method or the "),IJ=a("a"),eLr=o("from_config()"),oLr=o(` class
method.`),rLr=l(),C9=a("p"),tLr=o("This class cannot be instantiated directly using "),vTe=a("code"),aLr=o("__init__()"),nLr=o(" (throws an error)."),sLr=l(),Dt=a("div"),F(w9.$$.fragment),lLr=l(),FTe=a("p"),iLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),dLr=l(),Lc=a("p"),cLr=o(`Note:
Loading a model from its configuration file does `),TTe=a("strong"),fLr=o("not"),mLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=a("a"),gLr=o("from_pretrained()"),hLr=o(" to load the model weights."),pLr=l(),F(AE.$$.fragment),_Lr=l(),qr=a("div"),F(A9.$$.fragment),uLr=l(),MTe=a("p"),bLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vLr=l(),gn=a("p"),FLr=o("The model class to instantiate is selected based on the "),ETe=a("code"),TLr=o("model_type"),MLr=o(` property of the config object (either
passed as an argument or loaded from `),CTe=a("code"),ELr=o("pretrained_model_name_or_path"),CLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=a("code"),wLr=o("pretrained_model_name_or_path"),ALr=o(":"),yLr=l(),ATe=a("ul"),yE=a("li"),yTe=a("strong"),LLr=o("speech_to_text"),xLr=o(" \u2014 "),qJ=a("a"),$Lr=o("TFSpeech2TextForConditionalGeneration"),kLr=o(" (Speech2Text model)"),SLr=l(),F(LE.$$.fragment),jje=l(),xc=a("h2"),xE=a("a"),LTe=a("span"),F(y9.$$.fragment),RLr=l(),xTe=a("span"),PLr=o("FlaxAutoModel"),Dje=l(),fr=a("div"),F(L9.$$.fragment),BLr=l(),$c=a("p"),ILr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jJ=a("a"),NLr=o("from_pretrained()"),qLr=o(" class method or the "),DJ=a("a"),jLr=o("from_config()"),DLr=o(` class
method.`),GLr=l(),x9=a("p"),OLr=o("This class cannot be instantiated directly using "),$Te=a("code"),VLr=o("__init__()"),XLr=o(" (throws an error)."),zLr=l(),Gt=a("div"),F($9.$$.fragment),WLr=l(),kTe=a("p"),QLr=o("Instantiates one of the base model classes of the library from a configuration."),HLr=l(),kc=a("p"),ULr=o(`Note:
Loading a model from its configuration file does `),STe=a("strong"),JLr=o("not"),YLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=a("a"),KLr=o("from_pretrained()"),ZLr=o(" to load the model weights."),e8r=l(),F($E.$$.fragment),o8r=l(),jr=a("div"),F(k9.$$.fragment),r8r=l(),RTe=a("p"),t8r=o("Instantiate one of the base model classes of the library from a pretrained model."),a8r=l(),hn=a("p"),n8r=o("The model class to instantiate is selected based on the "),PTe=a("code"),s8r=o("model_type"),l8r=o(` property of the config object (either
passed as an argument or loaded from `),BTe=a("code"),i8r=o("pretrained_model_name_or_path"),d8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ITe=a("code"),c8r=o("pretrained_model_name_or_path"),f8r=o(":"),m8r=l(),te=a("ul"),kE=a("li"),NTe=a("strong"),g8r=o("albert"),h8r=o(" \u2014 "),OJ=a("a"),p8r=o("FlaxAlbertModel"),_8r=o(" (ALBERT model)"),u8r=l(),SE=a("li"),qTe=a("strong"),b8r=o("bart"),v8r=o(" \u2014 "),VJ=a("a"),F8r=o("FlaxBartModel"),T8r=o(" (BART model)"),M8r=l(),RE=a("li"),jTe=a("strong"),E8r=o("beit"),C8r=o(" \u2014 "),XJ=a("a"),w8r=o("FlaxBeitModel"),A8r=o(" (BEiT model)"),y8r=l(),PE=a("li"),DTe=a("strong"),L8r=o("bert"),x8r=o(" \u2014 "),zJ=a("a"),$8r=o("FlaxBertModel"),k8r=o(" (BERT model)"),S8r=l(),BE=a("li"),GTe=a("strong"),R8r=o("big_bird"),P8r=o(" \u2014 "),WJ=a("a"),B8r=o("FlaxBigBirdModel"),I8r=o(" (BigBird model)"),N8r=l(),IE=a("li"),OTe=a("strong"),q8r=o("blenderbot"),j8r=o(" \u2014 "),QJ=a("a"),D8r=o("FlaxBlenderbotModel"),G8r=o(" (Blenderbot model)"),O8r=l(),NE=a("li"),VTe=a("strong"),V8r=o("blenderbot-small"),X8r=o(" \u2014 "),HJ=a("a"),z8r=o("FlaxBlenderbotSmallModel"),W8r=o(" (BlenderbotSmall model)"),Q8r=l(),qE=a("li"),XTe=a("strong"),H8r=o("clip"),U8r=o(" \u2014 "),UJ=a("a"),J8r=o("FlaxCLIPModel"),Y8r=o(" (CLIP model)"),K8r=l(),jE=a("li"),zTe=a("strong"),Z8r=o("distilbert"),e9r=o(" \u2014 "),JJ=a("a"),o9r=o("FlaxDistilBertModel"),r9r=o(" (DistilBERT model)"),t9r=l(),DE=a("li"),WTe=a("strong"),a9r=o("electra"),n9r=o(" \u2014 "),YJ=a("a"),s9r=o("FlaxElectraModel"),l9r=o(" (ELECTRA model)"),i9r=l(),GE=a("li"),QTe=a("strong"),d9r=o("gpt2"),c9r=o(" \u2014 "),KJ=a("a"),f9r=o("FlaxGPT2Model"),m9r=o(" (OpenAI GPT-2 model)"),g9r=l(),OE=a("li"),HTe=a("strong"),h9r=o("gpt_neo"),p9r=o(" \u2014 "),ZJ=a("a"),_9r=o("FlaxGPTNeoModel"),u9r=o(" (GPT Neo model)"),b9r=l(),VE=a("li"),UTe=a("strong"),v9r=o("gptj"),F9r=o(" \u2014 "),eY=a("a"),T9r=o("FlaxGPTJModel"),M9r=o(" (GPT-J model)"),E9r=l(),XE=a("li"),JTe=a("strong"),C9r=o("marian"),w9r=o(" \u2014 "),oY=a("a"),A9r=o("FlaxMarianModel"),y9r=o(" (Marian model)"),L9r=l(),zE=a("li"),YTe=a("strong"),x9r=o("mbart"),$9r=o(" \u2014 "),rY=a("a"),k9r=o("FlaxMBartModel"),S9r=o(" (mBART model)"),R9r=l(),WE=a("li"),KTe=a("strong"),P9r=o("mt5"),B9r=o(" \u2014 "),tY=a("a"),I9r=o("FlaxMT5Model"),N9r=o(" (mT5 model)"),q9r=l(),QE=a("li"),ZTe=a("strong"),j9r=o("pegasus"),D9r=o(" \u2014 "),aY=a("a"),G9r=o("FlaxPegasusModel"),O9r=o(" (Pegasus model)"),V9r=l(),HE=a("li"),e7e=a("strong"),X9r=o("roberta"),z9r=o(" \u2014 "),nY=a("a"),W9r=o("FlaxRobertaModel"),Q9r=o(" (RoBERTa model)"),H9r=l(),UE=a("li"),o7e=a("strong"),U9r=o("roformer"),J9r=o(" \u2014 "),sY=a("a"),Y9r=o("FlaxRoFormerModel"),K9r=o(" (RoFormer model)"),Z9r=l(),JE=a("li"),r7e=a("strong"),exr=o("t5"),oxr=o(" \u2014 "),lY=a("a"),rxr=o("FlaxT5Model"),txr=o(" (T5 model)"),axr=l(),YE=a("li"),t7e=a("strong"),nxr=o("vision-text-dual-encoder"),sxr=o(" \u2014 "),iY=a("a"),lxr=o("FlaxVisionTextDualEncoderModel"),ixr=o(" (VisionTextDualEncoder model)"),dxr=l(),KE=a("li"),a7e=a("strong"),cxr=o("vit"),fxr=o(" \u2014 "),dY=a("a"),mxr=o("FlaxViTModel"),gxr=o(" (ViT model)"),hxr=l(),ZE=a("li"),n7e=a("strong"),pxr=o("wav2vec2"),_xr=o(" \u2014 "),cY=a("a"),uxr=o("FlaxWav2Vec2Model"),bxr=o(" (Wav2Vec2 model)"),vxr=l(),eC=a("li"),s7e=a("strong"),Fxr=o("xglm"),Txr=o(" \u2014 "),fY=a("a"),Mxr=o("FlaxXGLMModel"),Exr=o(" (XGLM model)"),Cxr=l(),oC=a("li"),l7e=a("strong"),wxr=o("xlm-roberta"),Axr=o(" \u2014 "),mY=a("a"),yxr=o("FlaxXLMRobertaModel"),Lxr=o(" (XLM-RoBERTa model)"),xxr=l(),F(rC.$$.fragment),Gje=l(),Sc=a("h2"),tC=a("a"),i7e=a("span"),F(S9.$$.fragment),$xr=l(),d7e=a("span"),kxr=o("FlaxAutoModelForCausalLM"),Oje=l(),mr=a("div"),F(R9.$$.fragment),Sxr=l(),Rc=a("p"),Rxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gY=a("a"),Pxr=o("from_pretrained()"),Bxr=o(" class method or the "),hY=a("a"),Ixr=o("from_config()"),Nxr=o(` class
method.`),qxr=l(),P9=a("p"),jxr=o("This class cannot be instantiated directly using "),c7e=a("code"),Dxr=o("__init__()"),Gxr=o(" (throws an error)."),Oxr=l(),Ot=a("div"),F(B9.$$.fragment),Vxr=l(),f7e=a("p"),Xxr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zxr=l(),Pc=a("p"),Wxr=o(`Note:
Loading a model from its configuration file does `),m7e=a("strong"),Qxr=o("not"),Hxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=a("a"),Uxr=o("from_pretrained()"),Jxr=o(" to load the model weights."),Yxr=l(),F(aC.$$.fragment),Kxr=l(),Dr=a("div"),F(I9.$$.fragment),Zxr=l(),g7e=a("p"),e$r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),o$r=l(),pn=a("p"),r$r=o("The model class to instantiate is selected based on the "),h7e=a("code"),t$r=o("model_type"),a$r=o(` property of the config object (either
passed as an argument or loaded from `),p7e=a("code"),n$r=o("pretrained_model_name_or_path"),s$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_7e=a("code"),l$r=o("pretrained_model_name_or_path"),i$r=o(":"),d$r=l(),Re=a("ul"),nC=a("li"),u7e=a("strong"),c$r=o("bart"),f$r=o(" \u2014 "),_Y=a("a"),m$r=o("FlaxBartForCausalLM"),g$r=o(" (BART model)"),h$r=l(),sC=a("li"),b7e=a("strong"),p$r=o("bert"),_$r=o(" \u2014 "),uY=a("a"),u$r=o("FlaxBertForCausalLM"),b$r=o(" (BERT model)"),v$r=l(),lC=a("li"),v7e=a("strong"),F$r=o("big_bird"),T$r=o(" \u2014 "),bY=a("a"),M$r=o("FlaxBigBirdForCausalLM"),E$r=o(" (BigBird model)"),C$r=l(),iC=a("li"),F7e=a("strong"),w$r=o("electra"),A$r=o(" \u2014 "),vY=a("a"),y$r=o("FlaxElectraForCausalLM"),L$r=o(" (ELECTRA model)"),x$r=l(),dC=a("li"),T7e=a("strong"),$$r=o("gpt2"),k$r=o(" \u2014 "),FY=a("a"),S$r=o("FlaxGPT2LMHeadModel"),R$r=o(" (OpenAI GPT-2 model)"),P$r=l(),cC=a("li"),M7e=a("strong"),B$r=o("gpt_neo"),I$r=o(" \u2014 "),TY=a("a"),N$r=o("FlaxGPTNeoForCausalLM"),q$r=o(" (GPT Neo model)"),j$r=l(),fC=a("li"),E7e=a("strong"),D$r=o("gptj"),G$r=o(" \u2014 "),MY=a("a"),O$r=o("FlaxGPTJForCausalLM"),V$r=o(" (GPT-J model)"),X$r=l(),mC=a("li"),C7e=a("strong"),z$r=o("roberta"),W$r=o(" \u2014 "),EY=a("a"),Q$r=o("FlaxRobertaForCausalLM"),H$r=o(" (RoBERTa model)"),U$r=l(),gC=a("li"),w7e=a("strong"),J$r=o("xglm"),Y$r=o(" \u2014 "),CY=a("a"),K$r=o("FlaxXGLMForCausalLM"),Z$r=o(" (XGLM model)"),ekr=l(),F(hC.$$.fragment),Vje=l(),Bc=a("h2"),pC=a("a"),A7e=a("span"),F(N9.$$.fragment),okr=l(),y7e=a("span"),rkr=o("FlaxAutoModelForPreTraining"),Xje=l(),gr=a("div"),F(q9.$$.fragment),tkr=l(),Ic=a("p"),akr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wY=a("a"),nkr=o("from_pretrained()"),skr=o(" class method or the "),AY=a("a"),lkr=o("from_config()"),ikr=o(` class
method.`),dkr=l(),j9=a("p"),ckr=o("This class cannot be instantiated directly using "),L7e=a("code"),fkr=o("__init__()"),mkr=o(" (throws an error)."),gkr=l(),Vt=a("div"),F(D9.$$.fragment),hkr=l(),x7e=a("p"),pkr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_kr=l(),Nc=a("p"),ukr=o(`Note:
Loading a model from its configuration file does `),$7e=a("strong"),bkr=o("not"),vkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=a("a"),Fkr=o("from_pretrained()"),Tkr=o(" to load the model weights."),Mkr=l(),F(_C.$$.fragment),Ekr=l(),Gr=a("div"),F(G9.$$.fragment),Ckr=l(),k7e=a("p"),wkr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Akr=l(),_n=a("p"),ykr=o("The model class to instantiate is selected based on the "),S7e=a("code"),Lkr=o("model_type"),xkr=o(` property of the config object (either
passed as an argument or loaded from `),R7e=a("code"),$kr=o("pretrained_model_name_or_path"),kkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P7e=a("code"),Skr=o("pretrained_model_name_or_path"),Rkr=o(":"),Pkr=l(),Ee=a("ul"),uC=a("li"),B7e=a("strong"),Bkr=o("albert"),Ikr=o(" \u2014 "),LY=a("a"),Nkr=o("FlaxAlbertForPreTraining"),qkr=o(" (ALBERT model)"),jkr=l(),bC=a("li"),I7e=a("strong"),Dkr=o("bart"),Gkr=o(" \u2014 "),xY=a("a"),Okr=o("FlaxBartForConditionalGeneration"),Vkr=o(" (BART model)"),Xkr=l(),vC=a("li"),N7e=a("strong"),zkr=o("bert"),Wkr=o(" \u2014 "),$Y=a("a"),Qkr=o("FlaxBertForPreTraining"),Hkr=o(" (BERT model)"),Ukr=l(),FC=a("li"),q7e=a("strong"),Jkr=o("big_bird"),Ykr=o(" \u2014 "),kY=a("a"),Kkr=o("FlaxBigBirdForPreTraining"),Zkr=o(" (BigBird model)"),eSr=l(),TC=a("li"),j7e=a("strong"),oSr=o("electra"),rSr=o(" \u2014 "),SY=a("a"),tSr=o("FlaxElectraForPreTraining"),aSr=o(" (ELECTRA model)"),nSr=l(),MC=a("li"),D7e=a("strong"),sSr=o("mbart"),lSr=o(" \u2014 "),RY=a("a"),iSr=o("FlaxMBartForConditionalGeneration"),dSr=o(" (mBART model)"),cSr=l(),EC=a("li"),G7e=a("strong"),fSr=o("mt5"),mSr=o(" \u2014 "),PY=a("a"),gSr=o("FlaxMT5ForConditionalGeneration"),hSr=o(" (mT5 model)"),pSr=l(),CC=a("li"),O7e=a("strong"),_Sr=o("roberta"),uSr=o(" \u2014 "),BY=a("a"),bSr=o("FlaxRobertaForMaskedLM"),vSr=o(" (RoBERTa model)"),FSr=l(),wC=a("li"),V7e=a("strong"),TSr=o("roformer"),MSr=o(" \u2014 "),IY=a("a"),ESr=o("FlaxRoFormerForMaskedLM"),CSr=o(" (RoFormer model)"),wSr=l(),AC=a("li"),X7e=a("strong"),ASr=o("t5"),ySr=o(" \u2014 "),NY=a("a"),LSr=o("FlaxT5ForConditionalGeneration"),xSr=o(" (T5 model)"),$Sr=l(),yC=a("li"),z7e=a("strong"),kSr=o("wav2vec2"),SSr=o(" \u2014 "),qY=a("a"),RSr=o("FlaxWav2Vec2ForPreTraining"),PSr=o(" (Wav2Vec2 model)"),BSr=l(),LC=a("li"),W7e=a("strong"),ISr=o("xlm-roberta"),NSr=o(" \u2014 "),jY=a("a"),qSr=o("FlaxXLMRobertaForMaskedLM"),jSr=o(" (XLM-RoBERTa model)"),DSr=l(),F(xC.$$.fragment),zje=l(),qc=a("h2"),$C=a("a"),Q7e=a("span"),F(O9.$$.fragment),GSr=l(),H7e=a("span"),OSr=o("FlaxAutoModelForMaskedLM"),Wje=l(),hr=a("div"),F(V9.$$.fragment),VSr=l(),jc=a("p"),XSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),DY=a("a"),zSr=o("from_pretrained()"),WSr=o(" class method or the "),GY=a("a"),QSr=o("from_config()"),HSr=o(` class
method.`),USr=l(),X9=a("p"),JSr=o("This class cannot be instantiated directly using "),U7e=a("code"),YSr=o("__init__()"),KSr=o(" (throws an error)."),ZSr=l(),Xt=a("div"),F(z9.$$.fragment),eRr=l(),J7e=a("p"),oRr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rRr=l(),Dc=a("p"),tRr=o(`Note:
Loading a model from its configuration file does `),Y7e=a("strong"),aRr=o("not"),nRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=a("a"),sRr=o("from_pretrained()"),lRr=o(" to load the model weights."),iRr=l(),F(kC.$$.fragment),dRr=l(),Or=a("div"),F(W9.$$.fragment),cRr=l(),K7e=a("p"),fRr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mRr=l(),un=a("p"),gRr=o("The model class to instantiate is selected based on the "),Z7e=a("code"),hRr=o("model_type"),pRr=o(` property of the config object (either
passed as an argument or loaded from `),eMe=a("code"),_Rr=o("pretrained_model_name_or_path"),uRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oMe=a("code"),bRr=o("pretrained_model_name_or_path"),vRr=o(":"),FRr=l(),Le=a("ul"),SC=a("li"),rMe=a("strong"),TRr=o("albert"),MRr=o(" \u2014 "),VY=a("a"),ERr=o("FlaxAlbertForMaskedLM"),CRr=o(" (ALBERT model)"),wRr=l(),RC=a("li"),tMe=a("strong"),ARr=o("bart"),yRr=o(" \u2014 "),XY=a("a"),LRr=o("FlaxBartForConditionalGeneration"),xRr=o(" (BART model)"),$Rr=l(),PC=a("li"),aMe=a("strong"),kRr=o("bert"),SRr=o(" \u2014 "),zY=a("a"),RRr=o("FlaxBertForMaskedLM"),PRr=o(" (BERT model)"),BRr=l(),BC=a("li"),nMe=a("strong"),IRr=o("big_bird"),NRr=o(" \u2014 "),WY=a("a"),qRr=o("FlaxBigBirdForMaskedLM"),jRr=o(" (BigBird model)"),DRr=l(),IC=a("li"),sMe=a("strong"),GRr=o("distilbert"),ORr=o(" \u2014 "),QY=a("a"),VRr=o("FlaxDistilBertForMaskedLM"),XRr=o(" (DistilBERT model)"),zRr=l(),NC=a("li"),lMe=a("strong"),WRr=o("electra"),QRr=o(" \u2014 "),HY=a("a"),HRr=o("FlaxElectraForMaskedLM"),URr=o(" (ELECTRA model)"),JRr=l(),qC=a("li"),iMe=a("strong"),YRr=o("mbart"),KRr=o(" \u2014 "),UY=a("a"),ZRr=o("FlaxMBartForConditionalGeneration"),ePr=o(" (mBART model)"),oPr=l(),jC=a("li"),dMe=a("strong"),rPr=o("roberta"),tPr=o(" \u2014 "),JY=a("a"),aPr=o("FlaxRobertaForMaskedLM"),nPr=o(" (RoBERTa model)"),sPr=l(),DC=a("li"),cMe=a("strong"),lPr=o("roformer"),iPr=o(" \u2014 "),YY=a("a"),dPr=o("FlaxRoFormerForMaskedLM"),cPr=o(" (RoFormer model)"),fPr=l(),GC=a("li"),fMe=a("strong"),mPr=o("xlm-roberta"),gPr=o(" \u2014 "),KY=a("a"),hPr=o("FlaxXLMRobertaForMaskedLM"),pPr=o(" (XLM-RoBERTa model)"),_Pr=l(),F(OC.$$.fragment),Qje=l(),Gc=a("h2"),VC=a("a"),mMe=a("span"),F(Q9.$$.fragment),uPr=l(),gMe=a("span"),bPr=o("FlaxAutoModelForSeq2SeqLM"),Hje=l(),pr=a("div"),F(H9.$$.fragment),vPr=l(),Oc=a("p"),FPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZY=a("a"),TPr=o("from_pretrained()"),MPr=o(" class method or the "),eK=a("a"),EPr=o("from_config()"),CPr=o(` class
method.`),wPr=l(),U9=a("p"),APr=o("This class cannot be instantiated directly using "),hMe=a("code"),yPr=o("__init__()"),LPr=o(" (throws an error)."),xPr=l(),zt=a("div"),F(J9.$$.fragment),$Pr=l(),pMe=a("p"),kPr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),SPr=l(),Vc=a("p"),RPr=o(`Note:
Loading a model from its configuration file does `),_Me=a("strong"),PPr=o("not"),BPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=a("a"),IPr=o("from_pretrained()"),NPr=o(" to load the model weights."),qPr=l(),F(XC.$$.fragment),jPr=l(),Vr=a("div"),F(Y9.$$.fragment),DPr=l(),uMe=a("p"),GPr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),OPr=l(),bn=a("p"),VPr=o("The model class to instantiate is selected based on the "),bMe=a("code"),XPr=o("model_type"),zPr=o(` property of the config object (either
passed as an argument or loaded from `),vMe=a("code"),WPr=o("pretrained_model_name_or_path"),QPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FMe=a("code"),HPr=o("pretrained_model_name_or_path"),UPr=o(":"),JPr=l(),Pe=a("ul"),zC=a("li"),TMe=a("strong"),YPr=o("bart"),KPr=o(" \u2014 "),rK=a("a"),ZPr=o("FlaxBartForConditionalGeneration"),eBr=o(" (BART model)"),oBr=l(),WC=a("li"),MMe=a("strong"),rBr=o("blenderbot"),tBr=o(" \u2014 "),tK=a("a"),aBr=o("FlaxBlenderbotForConditionalGeneration"),nBr=o(" (Blenderbot model)"),sBr=l(),QC=a("li"),EMe=a("strong"),lBr=o("blenderbot-small"),iBr=o(" \u2014 "),aK=a("a"),dBr=o("FlaxBlenderbotSmallForConditionalGeneration"),cBr=o(" (BlenderbotSmall model)"),fBr=l(),HC=a("li"),CMe=a("strong"),mBr=o("encoder-decoder"),gBr=o(" \u2014 "),nK=a("a"),hBr=o("FlaxEncoderDecoderModel"),pBr=o(" (Encoder decoder model)"),_Br=l(),UC=a("li"),wMe=a("strong"),uBr=o("marian"),bBr=o(" \u2014 "),sK=a("a"),vBr=o("FlaxMarianMTModel"),FBr=o(" (Marian model)"),TBr=l(),JC=a("li"),AMe=a("strong"),MBr=o("mbart"),EBr=o(" \u2014 "),lK=a("a"),CBr=o("FlaxMBartForConditionalGeneration"),wBr=o(" (mBART model)"),ABr=l(),YC=a("li"),yMe=a("strong"),yBr=o("mt5"),LBr=o(" \u2014 "),iK=a("a"),xBr=o("FlaxMT5ForConditionalGeneration"),$Br=o(" (mT5 model)"),kBr=l(),KC=a("li"),LMe=a("strong"),SBr=o("pegasus"),RBr=o(" \u2014 "),dK=a("a"),PBr=o("FlaxPegasusForConditionalGeneration"),BBr=o(" (Pegasus model)"),IBr=l(),ZC=a("li"),xMe=a("strong"),NBr=o("t5"),qBr=o(" \u2014 "),cK=a("a"),jBr=o("FlaxT5ForConditionalGeneration"),DBr=o(" (T5 model)"),GBr=l(),F(e5.$$.fragment),Uje=l(),Xc=a("h2"),o5=a("a"),$Me=a("span"),F(K9.$$.fragment),OBr=l(),kMe=a("span"),VBr=o("FlaxAutoModelForSequenceClassification"),Jje=l(),_r=a("div"),F(Z9.$$.fragment),XBr=l(),zc=a("p"),zBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fK=a("a"),WBr=o("from_pretrained()"),QBr=o(" class method or the "),mK=a("a"),HBr=o("from_config()"),UBr=o(` class
method.`),JBr=l(),ex=a("p"),YBr=o("This class cannot be instantiated directly using "),SMe=a("code"),KBr=o("__init__()"),ZBr=o(" (throws an error)."),eIr=l(),Wt=a("div"),F(ox.$$.fragment),oIr=l(),RMe=a("p"),rIr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tIr=l(),Wc=a("p"),aIr=o(`Note:
Loading a model from its configuration file does `),PMe=a("strong"),nIr=o("not"),sIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=a("a"),lIr=o("from_pretrained()"),iIr=o(" to load the model weights."),dIr=l(),F(r5.$$.fragment),cIr=l(),Xr=a("div"),F(rx.$$.fragment),fIr=l(),BMe=a("p"),mIr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gIr=l(),vn=a("p"),hIr=o("The model class to instantiate is selected based on the "),IMe=a("code"),pIr=o("model_type"),_Ir=o(` property of the config object (either
passed as an argument or loaded from `),NMe=a("code"),uIr=o("pretrained_model_name_or_path"),bIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qMe=a("code"),vIr=o("pretrained_model_name_or_path"),FIr=o(":"),TIr=l(),xe=a("ul"),t5=a("li"),jMe=a("strong"),MIr=o("albert"),EIr=o(" \u2014 "),hK=a("a"),CIr=o("FlaxAlbertForSequenceClassification"),wIr=o(" (ALBERT model)"),AIr=l(),a5=a("li"),DMe=a("strong"),yIr=o("bart"),LIr=o(" \u2014 "),pK=a("a"),xIr=o("FlaxBartForSequenceClassification"),$Ir=o(" (BART model)"),kIr=l(),n5=a("li"),GMe=a("strong"),SIr=o("bert"),RIr=o(" \u2014 "),_K=a("a"),PIr=o("FlaxBertForSequenceClassification"),BIr=o(" (BERT model)"),IIr=l(),s5=a("li"),OMe=a("strong"),NIr=o("big_bird"),qIr=o(" \u2014 "),uK=a("a"),jIr=o("FlaxBigBirdForSequenceClassification"),DIr=o(" (BigBird model)"),GIr=l(),l5=a("li"),VMe=a("strong"),OIr=o("distilbert"),VIr=o(" \u2014 "),bK=a("a"),XIr=o("FlaxDistilBertForSequenceClassification"),zIr=o(" (DistilBERT model)"),WIr=l(),i5=a("li"),XMe=a("strong"),QIr=o("electra"),HIr=o(" \u2014 "),vK=a("a"),UIr=o("FlaxElectraForSequenceClassification"),JIr=o(" (ELECTRA model)"),YIr=l(),d5=a("li"),zMe=a("strong"),KIr=o("mbart"),ZIr=o(" \u2014 "),FK=a("a"),eNr=o("FlaxMBartForSequenceClassification"),oNr=o(" (mBART model)"),rNr=l(),c5=a("li"),WMe=a("strong"),tNr=o("roberta"),aNr=o(" \u2014 "),TK=a("a"),nNr=o("FlaxRobertaForSequenceClassification"),sNr=o(" (RoBERTa model)"),lNr=l(),f5=a("li"),QMe=a("strong"),iNr=o("roformer"),dNr=o(" \u2014 "),MK=a("a"),cNr=o("FlaxRoFormerForSequenceClassification"),fNr=o(" (RoFormer model)"),mNr=l(),m5=a("li"),HMe=a("strong"),gNr=o("xlm-roberta"),hNr=o(" \u2014 "),EK=a("a"),pNr=o("FlaxXLMRobertaForSequenceClassification"),_Nr=o(" (XLM-RoBERTa model)"),uNr=l(),F(g5.$$.fragment),Yje=l(),Qc=a("h2"),h5=a("a"),UMe=a("span"),F(tx.$$.fragment),bNr=l(),JMe=a("span"),vNr=o("FlaxAutoModelForQuestionAnswering"),Kje=l(),ur=a("div"),F(ax.$$.fragment),FNr=l(),Hc=a("p"),TNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CK=a("a"),MNr=o("from_pretrained()"),ENr=o(" class method or the "),wK=a("a"),CNr=o("from_config()"),wNr=o(` class
method.`),ANr=l(),nx=a("p"),yNr=o("This class cannot be instantiated directly using "),YMe=a("code"),LNr=o("__init__()"),xNr=o(" (throws an error)."),$Nr=l(),Qt=a("div"),F(sx.$$.fragment),kNr=l(),KMe=a("p"),SNr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RNr=l(),Uc=a("p"),PNr=o(`Note:
Loading a model from its configuration file does `),ZMe=a("strong"),BNr=o("not"),INr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=a("a"),NNr=o("from_pretrained()"),qNr=o(" to load the model weights."),jNr=l(),F(p5.$$.fragment),DNr=l(),zr=a("div"),F(lx.$$.fragment),GNr=l(),e4e=a("p"),ONr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),VNr=l(),Fn=a("p"),XNr=o("The model class to instantiate is selected based on the "),o4e=a("code"),zNr=o("model_type"),WNr=o(` property of the config object (either
passed as an argument or loaded from `),r4e=a("code"),QNr=o("pretrained_model_name_or_path"),HNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t4e=a("code"),UNr=o("pretrained_model_name_or_path"),JNr=o(":"),YNr=l(),$e=a("ul"),_5=a("li"),a4e=a("strong"),KNr=o("albert"),ZNr=o(" \u2014 "),yK=a("a"),eqr=o("FlaxAlbertForQuestionAnswering"),oqr=o(" (ALBERT model)"),rqr=l(),u5=a("li"),n4e=a("strong"),tqr=o("bart"),aqr=o(" \u2014 "),LK=a("a"),nqr=o("FlaxBartForQuestionAnswering"),sqr=o(" (BART model)"),lqr=l(),b5=a("li"),s4e=a("strong"),iqr=o("bert"),dqr=o(" \u2014 "),xK=a("a"),cqr=o("FlaxBertForQuestionAnswering"),fqr=o(" (BERT model)"),mqr=l(),v5=a("li"),l4e=a("strong"),gqr=o("big_bird"),hqr=o(" \u2014 "),$K=a("a"),pqr=o("FlaxBigBirdForQuestionAnswering"),_qr=o(" (BigBird model)"),uqr=l(),F5=a("li"),i4e=a("strong"),bqr=o("distilbert"),vqr=o(" \u2014 "),kK=a("a"),Fqr=o("FlaxDistilBertForQuestionAnswering"),Tqr=o(" (DistilBERT model)"),Mqr=l(),T5=a("li"),d4e=a("strong"),Eqr=o("electra"),Cqr=o(" \u2014 "),SK=a("a"),wqr=o("FlaxElectraForQuestionAnswering"),Aqr=o(" (ELECTRA model)"),yqr=l(),M5=a("li"),c4e=a("strong"),Lqr=o("mbart"),xqr=o(" \u2014 "),RK=a("a"),$qr=o("FlaxMBartForQuestionAnswering"),kqr=o(" (mBART model)"),Sqr=l(),E5=a("li"),f4e=a("strong"),Rqr=o("roberta"),Pqr=o(" \u2014 "),PK=a("a"),Bqr=o("FlaxRobertaForQuestionAnswering"),Iqr=o(" (RoBERTa model)"),Nqr=l(),C5=a("li"),m4e=a("strong"),qqr=o("roformer"),jqr=o(" \u2014 "),BK=a("a"),Dqr=o("FlaxRoFormerForQuestionAnswering"),Gqr=o(" (RoFormer model)"),Oqr=l(),w5=a("li"),g4e=a("strong"),Vqr=o("xlm-roberta"),Xqr=o(" \u2014 "),IK=a("a"),zqr=o("FlaxXLMRobertaForQuestionAnswering"),Wqr=o(" (XLM-RoBERTa model)"),Qqr=l(),F(A5.$$.fragment),Zje=l(),Jc=a("h2"),y5=a("a"),h4e=a("span"),F(ix.$$.fragment),Hqr=l(),p4e=a("span"),Uqr=o("FlaxAutoModelForTokenClassification"),eDe=l(),br=a("div"),F(dx.$$.fragment),Jqr=l(),Yc=a("p"),Yqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NK=a("a"),Kqr=o("from_pretrained()"),Zqr=o(" class method or the "),qK=a("a"),ejr=o("from_config()"),ojr=o(` class
method.`),rjr=l(),cx=a("p"),tjr=o("This class cannot be instantiated directly using "),_4e=a("code"),ajr=o("__init__()"),njr=o(" (throws an error)."),sjr=l(),Ht=a("div"),F(fx.$$.fragment),ljr=l(),u4e=a("p"),ijr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),djr=l(),Kc=a("p"),cjr=o(`Note:
Loading a model from its configuration file does `),b4e=a("strong"),fjr=o("not"),mjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),gjr=o("from_pretrained()"),hjr=o(" to load the model weights."),pjr=l(),F(L5.$$.fragment),_jr=l(),Wr=a("div"),F(mx.$$.fragment),ujr=l(),v4e=a("p"),bjr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vjr=l(),Tn=a("p"),Fjr=o("The model class to instantiate is selected based on the "),F4e=a("code"),Tjr=o("model_type"),Mjr=o(` property of the config object (either
passed as an argument or loaded from `),T4e=a("code"),Ejr=o("pretrained_model_name_or_path"),Cjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M4e=a("code"),wjr=o("pretrained_model_name_or_path"),Ajr=o(":"),yjr=l(),De=a("ul"),x5=a("li"),E4e=a("strong"),Ljr=o("albert"),xjr=o(" \u2014 "),DK=a("a"),$jr=o("FlaxAlbertForTokenClassification"),kjr=o(" (ALBERT model)"),Sjr=l(),$5=a("li"),C4e=a("strong"),Rjr=o("bert"),Pjr=o(" \u2014 "),GK=a("a"),Bjr=o("FlaxBertForTokenClassification"),Ijr=o(" (BERT model)"),Njr=l(),k5=a("li"),w4e=a("strong"),qjr=o("big_bird"),jjr=o(" \u2014 "),OK=a("a"),Djr=o("FlaxBigBirdForTokenClassification"),Gjr=o(" (BigBird model)"),Ojr=l(),S5=a("li"),A4e=a("strong"),Vjr=o("distilbert"),Xjr=o(" \u2014 "),VK=a("a"),zjr=o("FlaxDistilBertForTokenClassification"),Wjr=o(" (DistilBERT model)"),Qjr=l(),R5=a("li"),y4e=a("strong"),Hjr=o("electra"),Ujr=o(" \u2014 "),XK=a("a"),Jjr=o("FlaxElectraForTokenClassification"),Yjr=o(" (ELECTRA model)"),Kjr=l(),P5=a("li"),L4e=a("strong"),Zjr=o("roberta"),eDr=o(" \u2014 "),zK=a("a"),oDr=o("FlaxRobertaForTokenClassification"),rDr=o(" (RoBERTa model)"),tDr=l(),B5=a("li"),x4e=a("strong"),aDr=o("roformer"),nDr=o(" \u2014 "),WK=a("a"),sDr=o("FlaxRoFormerForTokenClassification"),lDr=o(" (RoFormer model)"),iDr=l(),I5=a("li"),$4e=a("strong"),dDr=o("xlm-roberta"),cDr=o(" \u2014 "),QK=a("a"),fDr=o("FlaxXLMRobertaForTokenClassification"),mDr=o(" (XLM-RoBERTa model)"),gDr=l(),F(N5.$$.fragment),oDe=l(),Zc=a("h2"),q5=a("a"),k4e=a("span"),F(gx.$$.fragment),hDr=l(),S4e=a("span"),pDr=o("FlaxAutoModelForMultipleChoice"),rDe=l(),vr=a("div"),F(hx.$$.fragment),_Dr=l(),ef=a("p"),uDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HK=a("a"),bDr=o("from_pretrained()"),vDr=o(" class method or the "),UK=a("a"),FDr=o("from_config()"),TDr=o(` class
method.`),MDr=l(),px=a("p"),EDr=o("This class cannot be instantiated directly using "),R4e=a("code"),CDr=o("__init__()"),wDr=o(" (throws an error)."),ADr=l(),Ut=a("div"),F(_x.$$.fragment),yDr=l(),P4e=a("p"),LDr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xDr=l(),of=a("p"),$Dr=o(`Note:
Loading a model from its configuration file does `),B4e=a("strong"),kDr=o("not"),SDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=a("a"),RDr=o("from_pretrained()"),PDr=o(" to load the model weights."),BDr=l(),F(j5.$$.fragment),IDr=l(),Qr=a("div"),F(ux.$$.fragment),NDr=l(),I4e=a("p"),qDr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jDr=l(),Mn=a("p"),DDr=o("The model class to instantiate is selected based on the "),N4e=a("code"),GDr=o("model_type"),ODr=o(` property of the config object (either
passed as an argument or loaded from `),q4e=a("code"),VDr=o("pretrained_model_name_or_path"),XDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j4e=a("code"),zDr=o("pretrained_model_name_or_path"),WDr=o(":"),QDr=l(),Ge=a("ul"),D5=a("li"),D4e=a("strong"),HDr=o("albert"),UDr=o(" \u2014 "),YK=a("a"),JDr=o("FlaxAlbertForMultipleChoice"),YDr=o(" (ALBERT model)"),KDr=l(),G5=a("li"),G4e=a("strong"),ZDr=o("bert"),eGr=o(" \u2014 "),KK=a("a"),oGr=o("FlaxBertForMultipleChoice"),rGr=o(" (BERT model)"),tGr=l(),O5=a("li"),O4e=a("strong"),aGr=o("big_bird"),nGr=o(" \u2014 "),ZK=a("a"),sGr=o("FlaxBigBirdForMultipleChoice"),lGr=o(" (BigBird model)"),iGr=l(),V5=a("li"),V4e=a("strong"),dGr=o("distilbert"),cGr=o(" \u2014 "),eZ=a("a"),fGr=o("FlaxDistilBertForMultipleChoice"),mGr=o(" (DistilBERT model)"),gGr=l(),X5=a("li"),X4e=a("strong"),hGr=o("electra"),pGr=o(" \u2014 "),oZ=a("a"),_Gr=o("FlaxElectraForMultipleChoice"),uGr=o(" (ELECTRA model)"),bGr=l(),z5=a("li"),z4e=a("strong"),vGr=o("roberta"),FGr=o(" \u2014 "),rZ=a("a"),TGr=o("FlaxRobertaForMultipleChoice"),MGr=o(" (RoBERTa model)"),EGr=l(),W5=a("li"),W4e=a("strong"),CGr=o("roformer"),wGr=o(" \u2014 "),tZ=a("a"),AGr=o("FlaxRoFormerForMultipleChoice"),yGr=o(" (RoFormer model)"),LGr=l(),Q5=a("li"),Q4e=a("strong"),xGr=o("xlm-roberta"),$Gr=o(" \u2014 "),aZ=a("a"),kGr=o("FlaxXLMRobertaForMultipleChoice"),SGr=o(" (XLM-RoBERTa model)"),RGr=l(),F(H5.$$.fragment),tDe=l(),rf=a("h2"),U5=a("a"),H4e=a("span"),F(bx.$$.fragment),PGr=l(),U4e=a("span"),BGr=o("FlaxAutoModelForNextSentencePrediction"),aDe=l(),Fr=a("div"),F(vx.$$.fragment),IGr=l(),tf=a("p"),NGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),nZ=a("a"),qGr=o("from_pretrained()"),jGr=o(" class method or the "),sZ=a("a"),DGr=o("from_config()"),GGr=o(` class
method.`),OGr=l(),Fx=a("p"),VGr=o("This class cannot be instantiated directly using "),J4e=a("code"),XGr=o("__init__()"),zGr=o(" (throws an error)."),WGr=l(),Jt=a("div"),F(Tx.$$.fragment),QGr=l(),Y4e=a("p"),HGr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),UGr=l(),af=a("p"),JGr=o(`Note:
Loading a model from its configuration file does `),K4e=a("strong"),YGr=o("not"),KGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=a("a"),ZGr=o("from_pretrained()"),eOr=o(" to load the model weights."),oOr=l(),F(J5.$$.fragment),rOr=l(),Hr=a("div"),F(Mx.$$.fragment),tOr=l(),Z4e=a("p"),aOr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nOr=l(),En=a("p"),sOr=o("The model class to instantiate is selected based on the "),eEe=a("code"),lOr=o("model_type"),iOr=o(` property of the config object (either
passed as an argument or loaded from `),oEe=a("code"),dOr=o("pretrained_model_name_or_path"),cOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rEe=a("code"),fOr=o("pretrained_model_name_or_path"),mOr=o(":"),gOr=l(),tEe=a("ul"),Y5=a("li"),aEe=a("strong"),hOr=o("bert"),pOr=o(" \u2014 "),iZ=a("a"),_Or=o("FlaxBertForNextSentencePrediction"),uOr=o(" (BERT model)"),bOr=l(),F(K5.$$.fragment),nDe=l(),nf=a("h2"),Z5=a("a"),nEe=a("span"),F(Ex.$$.fragment),vOr=l(),sEe=a("span"),FOr=o("FlaxAutoModelForImageClassification"),sDe=l(),Tr=a("div"),F(Cx.$$.fragment),TOr=l(),sf=a("p"),MOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dZ=a("a"),EOr=o("from_pretrained()"),COr=o(" class method or the "),cZ=a("a"),wOr=o("from_config()"),AOr=o(` class
method.`),yOr=l(),wx=a("p"),LOr=o("This class cannot be instantiated directly using "),lEe=a("code"),xOr=o("__init__()"),$Or=o(" (throws an error)."),kOr=l(),Yt=a("div"),F(Ax.$$.fragment),SOr=l(),iEe=a("p"),ROr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),POr=l(),lf=a("p"),BOr=o(`Note:
Loading a model from its configuration file does `),dEe=a("strong"),IOr=o("not"),NOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=a("a"),qOr=o("from_pretrained()"),jOr=o(" to load the model weights."),DOr=l(),F(ew.$$.fragment),GOr=l(),Ur=a("div"),F(yx.$$.fragment),OOr=l(),cEe=a("p"),VOr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),XOr=l(),Cn=a("p"),zOr=o("The model class to instantiate is selected based on the "),fEe=a("code"),WOr=o("model_type"),QOr=o(` property of the config object (either
passed as an argument or loaded from `),mEe=a("code"),HOr=o("pretrained_model_name_or_path"),UOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gEe=a("code"),JOr=o("pretrained_model_name_or_path"),YOr=o(":"),KOr=l(),Lx=a("ul"),ow=a("li"),hEe=a("strong"),ZOr=o("beit"),eVr=o(" \u2014 "),mZ=a("a"),oVr=o("FlaxBeitForImageClassification"),rVr=o(" (BEiT model)"),tVr=l(),rw=a("li"),pEe=a("strong"),aVr=o("vit"),nVr=o(" \u2014 "),gZ=a("a"),sVr=o("FlaxViTForImageClassification"),lVr=o(" (ViT model)"),iVr=l(),F(tw.$$.fragment),lDe=l(),df=a("h2"),aw=a("a"),_Ee=a("span"),F(xx.$$.fragment),dVr=l(),uEe=a("span"),cVr=o("FlaxAutoModelForVision2Seq"),iDe=l(),Mr=a("div"),F($x.$$.fragment),fVr=l(),cf=a("p"),mVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hZ=a("a"),gVr=o("from_pretrained()"),hVr=o(" class method or the "),pZ=a("a"),pVr=o("from_config()"),_Vr=o(` class
method.`),uVr=l(),kx=a("p"),bVr=o("This class cannot be instantiated directly using "),bEe=a("code"),vVr=o("__init__()"),FVr=o(" (throws an error)."),TVr=l(),Kt=a("div"),F(Sx.$$.fragment),MVr=l(),vEe=a("p"),EVr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),CVr=l(),ff=a("p"),wVr=o(`Note:
Loading a model from its configuration file does `),FEe=a("strong"),AVr=o("not"),yVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=a("a"),LVr=o("from_pretrained()"),xVr=o(" to load the model weights."),$Vr=l(),F(nw.$$.fragment),kVr=l(),Jr=a("div"),F(Rx.$$.fragment),SVr=l(),TEe=a("p"),RVr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),PVr=l(),wn=a("p"),BVr=o("The model class to instantiate is selected based on the "),MEe=a("code"),IVr=o("model_type"),NVr=o(` property of the config object (either
passed as an argument or loaded from `),EEe=a("code"),qVr=o("pretrained_model_name_or_path"),jVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CEe=a("code"),DVr=o("pretrained_model_name_or_path"),GVr=o(":"),OVr=l(),wEe=a("ul"),sw=a("li"),AEe=a("strong"),VVr=o("vision-encoder-decoder"),XVr=o(" \u2014 "),uZ=a("a"),zVr=o("FlaxVisionEncoderDecoderModel"),WVr=o(" (Vision Encoder decoder model)"),QVr=l(),F(lw.$$.fragment),this.h()},l(f){const u=k$t('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Px=s(p);m=n(Px,"A",{id:!0,class:!0,href:!0});var yEe=s(m);_=n(yEe,"SPAN",{});var LEe=s(_);T(d.$$.fragment,LEe),LEe.forEach(t),yEe.forEach(t),h=i(Px),Mo=n(Px,"SPAN",{});var xEe=s(Mo);fi=r(xEe,"Auto Classes"),xEe.forEach(t),Px.forEach(t),pf=i(f),rt=n(f,"P",{});var Bx=s(rt);mi=r(Bx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(Bx,"CODE",{});var $Ee=s(gi);wA=r($Ee,"from_pretrained()"),$Ee.forEach(t),_f=r(Bx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Bx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var kEe=s(yn);AA=r(kEe,"AutoConfig"),kEe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var SEe=s(xn);yA=r(SEe,"AutoModel"),SEe.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var REe=s($n);LA=r(REe,"AutoTokenizer"),REe.forEach(t),_i=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),uf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Ix=s(Ae);Q$=r(Ix,"will create a model that is an instance of "),ui=n(Ix,"A",{href:!0});var PEe=s(ui);H$=r(PEe,"BertModel"),PEe.forEach(t),U$=r(Ix,"."),Ix.forEach(t),Eo=i(f),wa=n(f,"P",{});var Nx=s(wa);J$=r(Nx,"There is one class of "),bf=n(Nx,"CODE",{});var BEe=s(bf);Y$=r(BEe,"AutoModel"),BEe.forEach(t),uOe=r(Nx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Nx.forEach(t),sqe=i(f),bi=n(f,"H2",{class:!0});var qx=s(bi);vf=n(qx,"A",{id:!0,class:!0,href:!0});var IEe=s(vf);coe=n(IEe,"SPAN",{});var NEe=s(coe);T(xA.$$.fragment,NEe),NEe.forEach(t),IEe.forEach(t),bOe=i(qx),foe=n(qx,"SPAN",{});var qEe=s(foe);vOe=r(qEe,"Extending the Auto Classes"),qEe.forEach(t),qx.forEach(t),lqe=i(f),kn=n(f,"P",{});var mf=s(kn);FOe=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),moe=n(mf,"CODE",{});var jEe=s(moe);TOe=r(jEe,"NewModel"),jEe.forEach(t),MOe=r(mf,", make sure you have a "),goe=n(mf,"CODE",{});var DEe=s(goe);EOe=r(DEe,"NewModelConfig"),DEe.forEach(t),COe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),iqe=i(f),T($A.$$.fragment,f),dqe=i(f),K$=n(f,"P",{});var GEe=s(K$);wOe=r(GEe,"You will then be able to use the auto classes like you would usually do!"),GEe.forEach(t),cqe=i(f),T(Ff.$$.fragment,f),fqe=i(f),vi=n(f,"H2",{class:!0});var jx=s(vi);Tf=n(jx,"A",{id:!0,class:!0,href:!0});var OEe=s(Tf);hoe=n(OEe,"SPAN",{});var VEe=s(hoe);T(kA.$$.fragment,VEe),VEe.forEach(t),OEe.forEach(t),AOe=i(jx),poe=n(jx,"SPAN",{});var XEe=s(poe);yOe=r(XEe,"AutoConfig"),XEe.forEach(t),jx.forEach(t),mqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(SA.$$.fragment,et),LOe=i(et),RA=n(et,"P",{});var Dx=s(RA);xOe=r(Dx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Z$=n(Dx,"A",{href:!0});var zEe=s(Z$);$Oe=r(zEe,"from_pretrained()"),zEe.forEach(t),kOe=r(Dx," class method."),Dx.forEach(t),SOe=i(et),PA=n(et,"P",{});var Gx=s(PA);ROe=r(Gx,"This class cannot be instantiated directly using "),_oe=n(Gx,"CODE",{});var WEe=s(_oe);POe=r(WEe,"__init__()"),WEe.forEach(t),BOe=r(Gx," (throws an error)."),Gx.forEach(t),IOe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(BA.$$.fragment,ot),NOe=i(ot),uoe=n(ot,"P",{});var QEe=s(uoe);qOe=r(QEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),QEe.forEach(t),jOe=i(ot),Fi=n(ot,"P",{});var gf=s(Fi);DOe=r(gf,"The configuration class to instantiate is selected based on the "),boe=n(gf,"CODE",{});var HEe=s(boe);GOe=r(HEe,"model_type"),HEe.forEach(t),OOe=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),voe=n(gf,"CODE",{});var UEe=s(voe);VOe=r(UEe,"pretrained_model_name_or_path"),UEe.forEach(t),XOe=r(gf,":"),gf.forEach(t),zOe=i(ot),A=n(ot,"UL",{});var y=s(A);Mf=n(y,"LI",{});var iw=s(Mf);Foe=n(iw,"STRONG",{});var JEe=s(Foe);WOe=r(JEe,"albert"),JEe.forEach(t),QOe=r(iw," \u2014 "),ek=n(iw,"A",{href:!0});var YEe=s(ek);HOe=r(YEe,"AlbertConfig"),YEe.forEach(t),UOe=r(iw," (ALBERT model)"),iw.forEach(t),JOe=i(y),Ef=n(y,"LI",{});var dw=s(Ef);Toe=n(dw,"STRONG",{});var KEe=s(Toe);YOe=r(KEe,"bart"),KEe.forEach(t),KOe=r(dw," \u2014 "),ok=n(dw,"A",{href:!0});var ZEe=s(ok);ZOe=r(ZEe,"BartConfig"),ZEe.forEach(t),eVe=r(dw," (BART model)"),dw.forEach(t),oVe=i(y),Cf=n(y,"LI",{});var cw=s(Cf);Moe=n(cw,"STRONG",{});var eCe=s(Moe);rVe=r(eCe,"beit"),eCe.forEach(t),tVe=r(cw," \u2014 "),rk=n(cw,"A",{href:!0});var oCe=s(rk);aVe=r(oCe,"BeitConfig"),oCe.forEach(t),nVe=r(cw," (BEiT model)"),cw.forEach(t),sVe=i(y),wf=n(y,"LI",{});var fw=s(wf);Eoe=n(fw,"STRONG",{});var rCe=s(Eoe);lVe=r(rCe,"bert"),rCe.forEach(t),iVe=r(fw," \u2014 "),tk=n(fw,"A",{href:!0});var tCe=s(tk);dVe=r(tCe,"BertConfig"),tCe.forEach(t),cVe=r(fw," (BERT model)"),fw.forEach(t),fVe=i(y),Af=n(y,"LI",{});var mw=s(Af);Coe=n(mw,"STRONG",{});var aCe=s(Coe);mVe=r(aCe,"bert-generation"),aCe.forEach(t),gVe=r(mw," \u2014 "),ak=n(mw,"A",{href:!0});var nCe=s(ak);hVe=r(nCe,"BertGenerationConfig"),nCe.forEach(t),pVe=r(mw," (Bert Generation model)"),mw.forEach(t),_Ve=i(y),yf=n(y,"LI",{});var gw=s(yf);woe=n(gw,"STRONG",{});var sCe=s(woe);uVe=r(sCe,"big_bird"),sCe.forEach(t),bVe=r(gw," \u2014 "),nk=n(gw,"A",{href:!0});var lCe=s(nk);vVe=r(lCe,"BigBirdConfig"),lCe.forEach(t),FVe=r(gw," (BigBird model)"),gw.forEach(t),TVe=i(y),Lf=n(y,"LI",{});var hw=s(Lf);Aoe=n(hw,"STRONG",{});var iCe=s(Aoe);MVe=r(iCe,"bigbird_pegasus"),iCe.forEach(t),EVe=r(hw," \u2014 "),sk=n(hw,"A",{href:!0});var dCe=s(sk);CVe=r(dCe,"BigBirdPegasusConfig"),dCe.forEach(t),wVe=r(hw," (BigBirdPegasus model)"),hw.forEach(t),AVe=i(y),xf=n(y,"LI",{});var pw=s(xf);yoe=n(pw,"STRONG",{});var cCe=s(yoe);yVe=r(cCe,"blenderbot"),cCe.forEach(t),LVe=r(pw," \u2014 "),lk=n(pw,"A",{href:!0});var fCe=s(lk);xVe=r(fCe,"BlenderbotConfig"),fCe.forEach(t),$Ve=r(pw," (Blenderbot model)"),pw.forEach(t),kVe=i(y),$f=n(y,"LI",{});var _w=s($f);Loe=n(_w,"STRONG",{});var mCe=s(Loe);SVe=r(mCe,"blenderbot-small"),mCe.forEach(t),RVe=r(_w," \u2014 "),ik=n(_w,"A",{href:!0});var gCe=s(ik);PVe=r(gCe,"BlenderbotSmallConfig"),gCe.forEach(t),BVe=r(_w," (BlenderbotSmall model)"),_w.forEach(t),IVe=i(y),kf=n(y,"LI",{});var uw=s(kf);xoe=n(uw,"STRONG",{});var hCe=s(xoe);NVe=r(hCe,"camembert"),hCe.forEach(t),qVe=r(uw," \u2014 "),dk=n(uw,"A",{href:!0});var pCe=s(dk);jVe=r(pCe,"CamembertConfig"),pCe.forEach(t),DVe=r(uw," (CamemBERT model)"),uw.forEach(t),GVe=i(y),Sf=n(y,"LI",{});var bw=s(Sf);$oe=n(bw,"STRONG",{});var _Ce=s($oe);OVe=r(_Ce,"canine"),_Ce.forEach(t),VVe=r(bw," \u2014 "),ck=n(bw,"A",{href:!0});var uCe=s(ck);XVe=r(uCe,"CanineConfig"),uCe.forEach(t),zVe=r(bw," (Canine model)"),bw.forEach(t),WVe=i(y),Rf=n(y,"LI",{});var vw=s(Rf);koe=n(vw,"STRONG",{});var bCe=s(koe);QVe=r(bCe,"clip"),bCe.forEach(t),HVe=r(vw," \u2014 "),fk=n(vw,"A",{href:!0});var vCe=s(fk);UVe=r(vCe,"CLIPConfig"),vCe.forEach(t),JVe=r(vw," (CLIP model)"),vw.forEach(t),YVe=i(y),Pf=n(y,"LI",{});var Fw=s(Pf);Soe=n(Fw,"STRONG",{});var FCe=s(Soe);KVe=r(FCe,"convbert"),FCe.forEach(t),ZVe=r(Fw," \u2014 "),mk=n(Fw,"A",{href:!0});var TCe=s(mk);eXe=r(TCe,"ConvBertConfig"),TCe.forEach(t),oXe=r(Fw," (ConvBERT model)"),Fw.forEach(t),rXe=i(y),Bf=n(y,"LI",{});var Tw=s(Bf);Roe=n(Tw,"STRONG",{});var MCe=s(Roe);tXe=r(MCe,"convnext"),MCe.forEach(t),aXe=r(Tw," \u2014 "),gk=n(Tw,"A",{href:!0});var ECe=s(gk);nXe=r(ECe,"ConvNextConfig"),ECe.forEach(t),sXe=r(Tw," (ConvNext model)"),Tw.forEach(t),lXe=i(y),If=n(y,"LI",{});var Mw=s(If);Poe=n(Mw,"STRONG",{});var CCe=s(Poe);iXe=r(CCe,"ctrl"),CCe.forEach(t),dXe=r(Mw," \u2014 "),hk=n(Mw,"A",{href:!0});var wCe=s(hk);cXe=r(wCe,"CTRLConfig"),wCe.forEach(t),fXe=r(Mw," (CTRL model)"),Mw.forEach(t),mXe=i(y),Nf=n(y,"LI",{});var Ew=s(Nf);Boe=n(Ew,"STRONG",{});var ACe=s(Boe);gXe=r(ACe,"cvt"),ACe.forEach(t),hXe=r(Ew," \u2014 "),pk=n(Ew,"A",{href:!0});var yCe=s(pk);pXe=r(yCe,"CvtConfig"),yCe.forEach(t),_Xe=r(Ew," (CvT model)"),Ew.forEach(t),uXe=i(y),qf=n(y,"LI",{});var Cw=s(qf);Ioe=n(Cw,"STRONG",{});var LCe=s(Ioe);bXe=r(LCe,"data2vec-audio"),LCe.forEach(t),vXe=r(Cw," \u2014 "),_k=n(Cw,"A",{href:!0});var xCe=s(_k);FXe=r(xCe,"Data2VecAudioConfig"),xCe.forEach(t),TXe=r(Cw," (Data2VecAudio model)"),Cw.forEach(t),MXe=i(y),jf=n(y,"LI",{});var ww=s(jf);Noe=n(ww,"STRONG",{});var $Ce=s(Noe);EXe=r($Ce,"data2vec-text"),$Ce.forEach(t),CXe=r(ww," \u2014 "),uk=n(ww,"A",{href:!0});var kCe=s(uk);wXe=r(kCe,"Data2VecTextConfig"),kCe.forEach(t),AXe=r(ww," (Data2VecText model)"),ww.forEach(t),yXe=i(y),Df=n(y,"LI",{});var Aw=s(Df);qoe=n(Aw,"STRONG",{});var SCe=s(qoe);LXe=r(SCe,"data2vec-vision"),SCe.forEach(t),xXe=r(Aw," \u2014 "),bk=n(Aw,"A",{href:!0});var RCe=s(bk);$Xe=r(RCe,"Data2VecVisionConfig"),RCe.forEach(t),kXe=r(Aw," (Data2VecVision model)"),Aw.forEach(t),SXe=i(y),Gf=n(y,"LI",{});var yw=s(Gf);joe=n(yw,"STRONG",{});var PCe=s(joe);RXe=r(PCe,"deberta"),PCe.forEach(t),PXe=r(yw," \u2014 "),vk=n(yw,"A",{href:!0});var BCe=s(vk);BXe=r(BCe,"DebertaConfig"),BCe.forEach(t),IXe=r(yw," (DeBERTa model)"),yw.forEach(t),NXe=i(y),Of=n(y,"LI",{});var Lw=s(Of);Doe=n(Lw,"STRONG",{});var ICe=s(Doe);qXe=r(ICe,"deberta-v2"),ICe.forEach(t),jXe=r(Lw," \u2014 "),Fk=n(Lw,"A",{href:!0});var NCe=s(Fk);DXe=r(NCe,"DebertaV2Config"),NCe.forEach(t),GXe=r(Lw," (DeBERTa-v2 model)"),Lw.forEach(t),OXe=i(y),Vf=n(y,"LI",{});var xw=s(Vf);Goe=n(xw,"STRONG",{});var qCe=s(Goe);VXe=r(qCe,"decision_transformer"),qCe.forEach(t),XXe=r(xw," \u2014 "),Tk=n(xw,"A",{href:!0});var jCe=s(Tk);zXe=r(jCe,"DecisionTransformerConfig"),jCe.forEach(t),WXe=r(xw," (Decision Transformer model)"),xw.forEach(t),QXe=i(y),Xf=n(y,"LI",{});var $w=s(Xf);Ooe=n($w,"STRONG",{});var DCe=s(Ooe);HXe=r(DCe,"deit"),DCe.forEach(t),UXe=r($w," \u2014 "),Mk=n($w,"A",{href:!0});var UVr=s(Mk);JXe=r(UVr,"DeiTConfig"),UVr.forEach(t),YXe=r($w," (DeiT model)"),$w.forEach(t),KXe=i(y),zf=n(y,"LI",{});var GCe=s(zf);Voe=n(GCe,"STRONG",{});var JVr=s(Voe);ZXe=r(JVr,"detr"),JVr.forEach(t),eze=r(GCe," \u2014 "),Ek=n(GCe,"A",{href:!0});var YVr=s(Ek);oze=r(YVr,"DetrConfig"),YVr.forEach(t),rze=r(GCe," (DETR model)"),GCe.forEach(t),tze=i(y),Wf=n(y,"LI",{});var OCe=s(Wf);Xoe=n(OCe,"STRONG",{});var KVr=s(Xoe);aze=r(KVr,"distilbert"),KVr.forEach(t),nze=r(OCe," \u2014 "),Ck=n(OCe,"A",{href:!0});var ZVr=s(Ck);sze=r(ZVr,"DistilBertConfig"),ZVr.forEach(t),lze=r(OCe," (DistilBERT model)"),OCe.forEach(t),ize=i(y),Qf=n(y,"LI",{});var VCe=s(Qf);zoe=n(VCe,"STRONG",{});var eXr=s(zoe);dze=r(eXr,"dpr"),eXr.forEach(t),cze=r(VCe," \u2014 "),wk=n(VCe,"A",{href:!0});var oXr=s(wk);fze=r(oXr,"DPRConfig"),oXr.forEach(t),mze=r(VCe," (DPR model)"),VCe.forEach(t),gze=i(y),Hf=n(y,"LI",{});var XCe=s(Hf);Woe=n(XCe,"STRONG",{});var rXr=s(Woe);hze=r(rXr,"dpt"),rXr.forEach(t),pze=r(XCe," \u2014 "),Ak=n(XCe,"A",{href:!0});var tXr=s(Ak);_ze=r(tXr,"DPTConfig"),tXr.forEach(t),uze=r(XCe," (DPT model)"),XCe.forEach(t),bze=i(y),Uf=n(y,"LI",{});var zCe=s(Uf);Qoe=n(zCe,"STRONG",{});var aXr=s(Qoe);vze=r(aXr,"electra"),aXr.forEach(t),Fze=r(zCe," \u2014 "),yk=n(zCe,"A",{href:!0});var nXr=s(yk);Tze=r(nXr,"ElectraConfig"),nXr.forEach(t),Mze=r(zCe," (ELECTRA model)"),zCe.forEach(t),Eze=i(y),Jf=n(y,"LI",{});var WCe=s(Jf);Hoe=n(WCe,"STRONG",{});var sXr=s(Hoe);Cze=r(sXr,"emformer"),sXr.forEach(t),wze=r(WCe," \u2014 "),Lk=n(WCe,"A",{href:!0});var lXr=s(Lk);Aze=r(lXr,"EmformerConfig"),lXr.forEach(t),yze=r(WCe," (Emformer model)"),WCe.forEach(t),Lze=i(y),Yf=n(y,"LI",{});var QCe=s(Yf);Uoe=n(QCe,"STRONG",{});var iXr=s(Uoe);xze=r(iXr,"encoder-decoder"),iXr.forEach(t),$ze=r(QCe," \u2014 "),xk=n(QCe,"A",{href:!0});var dXr=s(xk);kze=r(dXr,"EncoderDecoderConfig"),dXr.forEach(t),Sze=r(QCe," (Encoder decoder model)"),QCe.forEach(t),Rze=i(y),Kf=n(y,"LI",{});var HCe=s(Kf);Joe=n(HCe,"STRONG",{});var cXr=s(Joe);Pze=r(cXr,"flaubert"),cXr.forEach(t),Bze=r(HCe," \u2014 "),$k=n(HCe,"A",{href:!0});var fXr=s($k);Ize=r(fXr,"FlaubertConfig"),fXr.forEach(t),Nze=r(HCe," (FlauBERT model)"),HCe.forEach(t),qze=i(y),Zf=n(y,"LI",{});var UCe=s(Zf);Yoe=n(UCe,"STRONG",{});var mXr=s(Yoe);jze=r(mXr,"flava"),mXr.forEach(t),Dze=r(UCe," \u2014 "),kk=n(UCe,"A",{href:!0});var gXr=s(kk);Gze=r(gXr,"FlavaConfig"),gXr.forEach(t),Oze=r(UCe," (Flava model)"),UCe.forEach(t),Vze=i(y),em=n(y,"LI",{});var JCe=s(em);Koe=n(JCe,"STRONG",{});var hXr=s(Koe);Xze=r(hXr,"fnet"),hXr.forEach(t),zze=r(JCe," \u2014 "),Sk=n(JCe,"A",{href:!0});var pXr=s(Sk);Wze=r(pXr,"FNetConfig"),pXr.forEach(t),Qze=r(JCe," (FNet model)"),JCe.forEach(t),Hze=i(y),om=n(y,"LI",{});var YCe=s(om);Zoe=n(YCe,"STRONG",{});var _Xr=s(Zoe);Uze=r(_Xr,"fsmt"),_Xr.forEach(t),Jze=r(YCe," \u2014 "),Rk=n(YCe,"A",{href:!0});var uXr=s(Rk);Yze=r(uXr,"FSMTConfig"),uXr.forEach(t),Kze=r(YCe," (FairSeq Machine-Translation model)"),YCe.forEach(t),Zze=i(y),rm=n(y,"LI",{});var KCe=s(rm);ere=n(KCe,"STRONG",{});var bXr=s(ere);eWe=r(bXr,"funnel"),bXr.forEach(t),oWe=r(KCe," \u2014 "),Pk=n(KCe,"A",{href:!0});var vXr=s(Pk);rWe=r(vXr,"FunnelConfig"),vXr.forEach(t),tWe=r(KCe," (Funnel Transformer model)"),KCe.forEach(t),aWe=i(y),tm=n(y,"LI",{});var ZCe=s(tm);ore=n(ZCe,"STRONG",{});var FXr=s(ore);nWe=r(FXr,"glpn"),FXr.forEach(t),sWe=r(ZCe," \u2014 "),Bk=n(ZCe,"A",{href:!0});var TXr=s(Bk);lWe=r(TXr,"GLPNConfig"),TXr.forEach(t),iWe=r(ZCe," (GLPN model)"),ZCe.forEach(t),dWe=i(y),am=n(y,"LI",{});var e5e=s(am);rre=n(e5e,"STRONG",{});var MXr=s(rre);cWe=r(MXr,"gpt2"),MXr.forEach(t),fWe=r(e5e," \u2014 "),Ik=n(e5e,"A",{href:!0});var EXr=s(Ik);mWe=r(EXr,"GPT2Config"),EXr.forEach(t),gWe=r(e5e," (OpenAI GPT-2 model)"),e5e.forEach(t),hWe=i(y),nm=n(y,"LI",{});var o5e=s(nm);tre=n(o5e,"STRONG",{});var CXr=s(tre);pWe=r(CXr,"gpt_neo"),CXr.forEach(t),_We=r(o5e," \u2014 "),Nk=n(o5e,"A",{href:!0});var wXr=s(Nk);uWe=r(wXr,"GPTNeoConfig"),wXr.forEach(t),bWe=r(o5e," (GPT Neo model)"),o5e.forEach(t),vWe=i(y),sm=n(y,"LI",{});var r5e=s(sm);are=n(r5e,"STRONG",{});var AXr=s(are);FWe=r(AXr,"gpt_neox"),AXr.forEach(t),TWe=r(r5e," \u2014 "),qk=n(r5e,"A",{href:!0});var yXr=s(qk);MWe=r(yXr,"GPTNeoXConfig"),yXr.forEach(t),EWe=r(r5e," (GPT NeoX model)"),r5e.forEach(t),CWe=i(y),lm=n(y,"LI",{});var t5e=s(lm);nre=n(t5e,"STRONG",{});var LXr=s(nre);wWe=r(LXr,"gptj"),LXr.forEach(t),AWe=r(t5e," \u2014 "),jk=n(t5e,"A",{href:!0});var xXr=s(jk);yWe=r(xXr,"GPTJConfig"),xXr.forEach(t),LWe=r(t5e," (GPT-J model)"),t5e.forEach(t),xWe=i(y),im=n(y,"LI",{});var a5e=s(im);sre=n(a5e,"STRONG",{});var $Xr=s(sre);$We=r($Xr,"hubert"),$Xr.forEach(t),kWe=r(a5e," \u2014 "),Dk=n(a5e,"A",{href:!0});var kXr=s(Dk);SWe=r(kXr,"HubertConfig"),kXr.forEach(t),RWe=r(a5e," (Hubert model)"),a5e.forEach(t),PWe=i(y),dm=n(y,"LI",{});var n5e=s(dm);lre=n(n5e,"STRONG",{});var SXr=s(lre);BWe=r(SXr,"ibert"),SXr.forEach(t),IWe=r(n5e," \u2014 "),Gk=n(n5e,"A",{href:!0});var RXr=s(Gk);NWe=r(RXr,"IBertConfig"),RXr.forEach(t),qWe=r(n5e," (I-BERT model)"),n5e.forEach(t),jWe=i(y),cm=n(y,"LI",{});var s5e=s(cm);ire=n(s5e,"STRONG",{});var PXr=s(ire);DWe=r(PXr,"imagegpt"),PXr.forEach(t),GWe=r(s5e," \u2014 "),Ok=n(s5e,"A",{href:!0});var BXr=s(Ok);OWe=r(BXr,"ImageGPTConfig"),BXr.forEach(t),VWe=r(s5e," (ImageGPT model)"),s5e.forEach(t),XWe=i(y),fm=n(y,"LI",{});var l5e=s(fm);dre=n(l5e,"STRONG",{});var IXr=s(dre);zWe=r(IXr,"layoutlm"),IXr.forEach(t),WWe=r(l5e," \u2014 "),Vk=n(l5e,"A",{href:!0});var NXr=s(Vk);QWe=r(NXr,"LayoutLMConfig"),NXr.forEach(t),HWe=r(l5e," (LayoutLM model)"),l5e.forEach(t),UWe=i(y),mm=n(y,"LI",{});var i5e=s(mm);cre=n(i5e,"STRONG",{});var qXr=s(cre);JWe=r(qXr,"layoutlmv2"),qXr.forEach(t),YWe=r(i5e," \u2014 "),Xk=n(i5e,"A",{href:!0});var jXr=s(Xk);KWe=r(jXr,"LayoutLMv2Config"),jXr.forEach(t),ZWe=r(i5e," (LayoutLMv2 model)"),i5e.forEach(t),eQe=i(y),gm=n(y,"LI",{});var d5e=s(gm);fre=n(d5e,"STRONG",{});var DXr=s(fre);oQe=r(DXr,"layoutlmv3"),DXr.forEach(t),rQe=r(d5e," \u2014 "),zk=n(d5e,"A",{href:!0});var GXr=s(zk);tQe=r(GXr,"LayoutLMv3Config"),GXr.forEach(t),aQe=r(d5e," (LayoutLMv3 model)"),d5e.forEach(t),nQe=i(y),hm=n(y,"LI",{});var c5e=s(hm);mre=n(c5e,"STRONG",{});var OXr=s(mre);sQe=r(OXr,"led"),OXr.forEach(t),lQe=r(c5e," \u2014 "),Wk=n(c5e,"A",{href:!0});var VXr=s(Wk);iQe=r(VXr,"LEDConfig"),VXr.forEach(t),dQe=r(c5e," (LED model)"),c5e.forEach(t),cQe=i(y),pm=n(y,"LI",{});var f5e=s(pm);gre=n(f5e,"STRONG",{});var XXr=s(gre);fQe=r(XXr,"longformer"),XXr.forEach(t),mQe=r(f5e," \u2014 "),Qk=n(f5e,"A",{href:!0});var zXr=s(Qk);gQe=r(zXr,"LongformerConfig"),zXr.forEach(t),hQe=r(f5e," (Longformer model)"),f5e.forEach(t),pQe=i(y),_m=n(y,"LI",{});var m5e=s(_m);hre=n(m5e,"STRONG",{});var WXr=s(hre);_Qe=r(WXr,"luke"),WXr.forEach(t),uQe=r(m5e," \u2014 "),Hk=n(m5e,"A",{href:!0});var QXr=s(Hk);bQe=r(QXr,"LukeConfig"),QXr.forEach(t),vQe=r(m5e," (LUKE model)"),m5e.forEach(t),FQe=i(y),um=n(y,"LI",{});var g5e=s(um);pre=n(g5e,"STRONG",{});var HXr=s(pre);TQe=r(HXr,"lxmert"),HXr.forEach(t),MQe=r(g5e," \u2014 "),Uk=n(g5e,"A",{href:!0});var UXr=s(Uk);EQe=r(UXr,"LxmertConfig"),UXr.forEach(t),CQe=r(g5e," (LXMERT model)"),g5e.forEach(t),wQe=i(y),bm=n(y,"LI",{});var h5e=s(bm);_re=n(h5e,"STRONG",{});var JXr=s(_re);AQe=r(JXr,"m2m_100"),JXr.forEach(t),yQe=r(h5e," \u2014 "),Jk=n(h5e,"A",{href:!0});var YXr=s(Jk);LQe=r(YXr,"M2M100Config"),YXr.forEach(t),xQe=r(h5e," (M2M100 model)"),h5e.forEach(t),$Qe=i(y),vm=n(y,"LI",{});var p5e=s(vm);ure=n(p5e,"STRONG",{});var KXr=s(ure);kQe=r(KXr,"marian"),KXr.forEach(t),SQe=r(p5e," \u2014 "),Yk=n(p5e,"A",{href:!0});var ZXr=s(Yk);RQe=r(ZXr,"MarianConfig"),ZXr.forEach(t),PQe=r(p5e," (Marian model)"),p5e.forEach(t),BQe=i(y),Fm=n(y,"LI",{});var _5e=s(Fm);bre=n(_5e,"STRONG",{});var ezr=s(bre);IQe=r(ezr,"maskformer"),ezr.forEach(t),NQe=r(_5e," \u2014 "),Kk=n(_5e,"A",{href:!0});var ozr=s(Kk);qQe=r(ozr,"MaskFormerConfig"),ozr.forEach(t),jQe=r(_5e," (MaskFormer model)"),_5e.forEach(t),DQe=i(y),Tm=n(y,"LI",{});var u5e=s(Tm);vre=n(u5e,"STRONG",{});var rzr=s(vre);GQe=r(rzr,"mbart"),rzr.forEach(t),OQe=r(u5e," \u2014 "),Zk=n(u5e,"A",{href:!0});var tzr=s(Zk);VQe=r(tzr,"MBartConfig"),tzr.forEach(t),XQe=r(u5e," (mBART model)"),u5e.forEach(t),zQe=i(y),Mm=n(y,"LI",{});var b5e=s(Mm);Fre=n(b5e,"STRONG",{});var azr=s(Fre);WQe=r(azr,"megatron-bert"),azr.forEach(t),QQe=r(b5e," \u2014 "),eS=n(b5e,"A",{href:!0});var nzr=s(eS);HQe=r(nzr,"MegatronBertConfig"),nzr.forEach(t),UQe=r(b5e," (MegatronBert model)"),b5e.forEach(t),JQe=i(y),Em=n(y,"LI",{});var v5e=s(Em);Tre=n(v5e,"STRONG",{});var szr=s(Tre);YQe=r(szr,"mobilebert"),szr.forEach(t),KQe=r(v5e," \u2014 "),oS=n(v5e,"A",{href:!0});var lzr=s(oS);ZQe=r(lzr,"MobileBertConfig"),lzr.forEach(t),eHe=r(v5e," (MobileBERT model)"),v5e.forEach(t),oHe=i(y),Cm=n(y,"LI",{});var F5e=s(Cm);Mre=n(F5e,"STRONG",{});var izr=s(Mre);rHe=r(izr,"mpnet"),izr.forEach(t),tHe=r(F5e," \u2014 "),rS=n(F5e,"A",{href:!0});var dzr=s(rS);aHe=r(dzr,"MPNetConfig"),dzr.forEach(t),nHe=r(F5e," (MPNet model)"),F5e.forEach(t),sHe=i(y),wm=n(y,"LI",{});var T5e=s(wm);Ere=n(T5e,"STRONG",{});var czr=s(Ere);lHe=r(czr,"mt5"),czr.forEach(t),iHe=r(T5e," \u2014 "),tS=n(T5e,"A",{href:!0});var fzr=s(tS);dHe=r(fzr,"MT5Config"),fzr.forEach(t),cHe=r(T5e," (mT5 model)"),T5e.forEach(t),fHe=i(y),Am=n(y,"LI",{});var M5e=s(Am);Cre=n(M5e,"STRONG",{});var mzr=s(Cre);mHe=r(mzr,"nystromformer"),mzr.forEach(t),gHe=r(M5e," \u2014 "),aS=n(M5e,"A",{href:!0});var gzr=s(aS);hHe=r(gzr,"NystromformerConfig"),gzr.forEach(t),pHe=r(M5e," (Nystromformer model)"),M5e.forEach(t),_He=i(y),ym=n(y,"LI",{});var E5e=s(ym);wre=n(E5e,"STRONG",{});var hzr=s(wre);uHe=r(hzr,"openai-gpt"),hzr.forEach(t),bHe=r(E5e," \u2014 "),nS=n(E5e,"A",{href:!0});var pzr=s(nS);vHe=r(pzr,"OpenAIGPTConfig"),pzr.forEach(t),FHe=r(E5e," (OpenAI GPT model)"),E5e.forEach(t),THe=i(y),Lm=n(y,"LI",{});var C5e=s(Lm);Are=n(C5e,"STRONG",{});var _zr=s(Are);MHe=r(_zr,"opt"),_zr.forEach(t),EHe=r(C5e," \u2014 "),sS=n(C5e,"A",{href:!0});var uzr=s(sS);CHe=r(uzr,"OPTConfig"),uzr.forEach(t),wHe=r(C5e," (OPT model)"),C5e.forEach(t),AHe=i(y),xm=n(y,"LI",{});var w5e=s(xm);yre=n(w5e,"STRONG",{});var bzr=s(yre);yHe=r(bzr,"pegasus"),bzr.forEach(t),LHe=r(w5e," \u2014 "),lS=n(w5e,"A",{href:!0});var vzr=s(lS);xHe=r(vzr,"PegasusConfig"),vzr.forEach(t),$He=r(w5e," (Pegasus model)"),w5e.forEach(t),kHe=i(y),$m=n(y,"LI",{});var A5e=s($m);Lre=n(A5e,"STRONG",{});var Fzr=s(Lre);SHe=r(Fzr,"perceiver"),Fzr.forEach(t),RHe=r(A5e," \u2014 "),iS=n(A5e,"A",{href:!0});var Tzr=s(iS);PHe=r(Tzr,"PerceiverConfig"),Tzr.forEach(t),BHe=r(A5e," (Perceiver model)"),A5e.forEach(t),IHe=i(y),km=n(y,"LI",{});var y5e=s(km);xre=n(y5e,"STRONG",{});var Mzr=s(xre);NHe=r(Mzr,"plbart"),Mzr.forEach(t),qHe=r(y5e," \u2014 "),dS=n(y5e,"A",{href:!0});var Ezr=s(dS);jHe=r(Ezr,"PLBartConfig"),Ezr.forEach(t),DHe=r(y5e," (PLBart model)"),y5e.forEach(t),GHe=i(y),Sm=n(y,"LI",{});var L5e=s(Sm);$re=n(L5e,"STRONG",{});var Czr=s($re);OHe=r(Czr,"poolformer"),Czr.forEach(t),VHe=r(L5e," \u2014 "),cS=n(L5e,"A",{href:!0});var wzr=s(cS);XHe=r(wzr,"PoolFormerConfig"),wzr.forEach(t),zHe=r(L5e," (PoolFormer model)"),L5e.forEach(t),WHe=i(y),Rm=n(y,"LI",{});var x5e=s(Rm);kre=n(x5e,"STRONG",{});var Azr=s(kre);QHe=r(Azr,"prophetnet"),Azr.forEach(t),HHe=r(x5e," \u2014 "),fS=n(x5e,"A",{href:!0});var yzr=s(fS);UHe=r(yzr,"ProphetNetConfig"),yzr.forEach(t),JHe=r(x5e," (ProphetNet model)"),x5e.forEach(t),YHe=i(y),Pm=n(y,"LI",{});var $5e=s(Pm);Sre=n($5e,"STRONG",{});var Lzr=s(Sre);KHe=r(Lzr,"qdqbert"),Lzr.forEach(t),ZHe=r($5e," \u2014 "),mS=n($5e,"A",{href:!0});var xzr=s(mS);eUe=r(xzr,"QDQBertConfig"),xzr.forEach(t),oUe=r($5e," (QDQBert model)"),$5e.forEach(t),rUe=i(y),Bm=n(y,"LI",{});var k5e=s(Bm);Rre=n(k5e,"STRONG",{});var $zr=s(Rre);tUe=r($zr,"rag"),$zr.forEach(t),aUe=r(k5e," \u2014 "),gS=n(k5e,"A",{href:!0});var kzr=s(gS);nUe=r(kzr,"RagConfig"),kzr.forEach(t),sUe=r(k5e," (RAG model)"),k5e.forEach(t),lUe=i(y),Im=n(y,"LI",{});var S5e=s(Im);Pre=n(S5e,"STRONG",{});var Szr=s(Pre);iUe=r(Szr,"realm"),Szr.forEach(t),dUe=r(S5e," \u2014 "),hS=n(S5e,"A",{href:!0});var Rzr=s(hS);cUe=r(Rzr,"RealmConfig"),Rzr.forEach(t),fUe=r(S5e," (Realm model)"),S5e.forEach(t),mUe=i(y),Nm=n(y,"LI",{});var R5e=s(Nm);Bre=n(R5e,"STRONG",{});var Pzr=s(Bre);gUe=r(Pzr,"reformer"),Pzr.forEach(t),hUe=r(R5e," \u2014 "),pS=n(R5e,"A",{href:!0});var Bzr=s(pS);pUe=r(Bzr,"ReformerConfig"),Bzr.forEach(t),_Ue=r(R5e," (Reformer model)"),R5e.forEach(t),uUe=i(y),qm=n(y,"LI",{});var P5e=s(qm);Ire=n(P5e,"STRONG",{});var Izr=s(Ire);bUe=r(Izr,"regnet"),Izr.forEach(t),vUe=r(P5e," \u2014 "),_S=n(P5e,"A",{href:!0});var Nzr=s(_S);FUe=r(Nzr,"RegNetConfig"),Nzr.forEach(t),TUe=r(P5e," (RegNet model)"),P5e.forEach(t),MUe=i(y),jm=n(y,"LI",{});var B5e=s(jm);Nre=n(B5e,"STRONG",{});var qzr=s(Nre);EUe=r(qzr,"rembert"),qzr.forEach(t),CUe=r(B5e," \u2014 "),uS=n(B5e,"A",{href:!0});var jzr=s(uS);wUe=r(jzr,"RemBertConfig"),jzr.forEach(t),AUe=r(B5e," (RemBERT model)"),B5e.forEach(t),yUe=i(y),Dm=n(y,"LI",{});var I5e=s(Dm);qre=n(I5e,"STRONG",{});var Dzr=s(qre);LUe=r(Dzr,"resnet"),Dzr.forEach(t),xUe=r(I5e," \u2014 "),bS=n(I5e,"A",{href:!0});var Gzr=s(bS);$Ue=r(Gzr,"ResNetConfig"),Gzr.forEach(t),kUe=r(I5e," (ResNet model)"),I5e.forEach(t),SUe=i(y),Gm=n(y,"LI",{});var N5e=s(Gm);jre=n(N5e,"STRONG",{});var Ozr=s(jre);RUe=r(Ozr,"retribert"),Ozr.forEach(t),PUe=r(N5e," \u2014 "),vS=n(N5e,"A",{href:!0});var Vzr=s(vS);BUe=r(Vzr,"RetriBertConfig"),Vzr.forEach(t),IUe=r(N5e," (RetriBERT model)"),N5e.forEach(t),NUe=i(y),Om=n(y,"LI",{});var q5e=s(Om);Dre=n(q5e,"STRONG",{});var Xzr=s(Dre);qUe=r(Xzr,"roberta"),Xzr.forEach(t),jUe=r(q5e," \u2014 "),FS=n(q5e,"A",{href:!0});var zzr=s(FS);DUe=r(zzr,"RobertaConfig"),zzr.forEach(t),GUe=r(q5e," (RoBERTa model)"),q5e.forEach(t),OUe=i(y),Vm=n(y,"LI",{});var j5e=s(Vm);Gre=n(j5e,"STRONG",{});var Wzr=s(Gre);VUe=r(Wzr,"roformer"),Wzr.forEach(t),XUe=r(j5e," \u2014 "),TS=n(j5e,"A",{href:!0});var Qzr=s(TS);zUe=r(Qzr,"RoFormerConfig"),Qzr.forEach(t),WUe=r(j5e," (RoFormer model)"),j5e.forEach(t),QUe=i(y),Xm=n(y,"LI",{});var D5e=s(Xm);Ore=n(D5e,"STRONG",{});var Hzr=s(Ore);HUe=r(Hzr,"segformer"),Hzr.forEach(t),UUe=r(D5e," \u2014 "),MS=n(D5e,"A",{href:!0});var Uzr=s(MS);JUe=r(Uzr,"SegformerConfig"),Uzr.forEach(t),YUe=r(D5e," (SegFormer model)"),D5e.forEach(t),KUe=i(y),zm=n(y,"LI",{});var G5e=s(zm);Vre=n(G5e,"STRONG",{});var Jzr=s(Vre);ZUe=r(Jzr,"sew"),Jzr.forEach(t),eJe=r(G5e," \u2014 "),ES=n(G5e,"A",{href:!0});var Yzr=s(ES);oJe=r(Yzr,"SEWConfig"),Yzr.forEach(t),rJe=r(G5e," (SEW model)"),G5e.forEach(t),tJe=i(y),Wm=n(y,"LI",{});var O5e=s(Wm);Xre=n(O5e,"STRONG",{});var Kzr=s(Xre);aJe=r(Kzr,"sew-d"),Kzr.forEach(t),nJe=r(O5e," \u2014 "),CS=n(O5e,"A",{href:!0});var Zzr=s(CS);sJe=r(Zzr,"SEWDConfig"),Zzr.forEach(t),lJe=r(O5e," (SEW-D model)"),O5e.forEach(t),iJe=i(y),Qm=n(y,"LI",{});var V5e=s(Qm);zre=n(V5e,"STRONG",{});var eWr=s(zre);dJe=r(eWr,"speech-encoder-decoder"),eWr.forEach(t),cJe=r(V5e," \u2014 "),wS=n(V5e,"A",{href:!0});var oWr=s(wS);fJe=r(oWr,"SpeechEncoderDecoderConfig"),oWr.forEach(t),mJe=r(V5e," (Speech Encoder decoder model)"),V5e.forEach(t),gJe=i(y),Hm=n(y,"LI",{});var X5e=s(Hm);Wre=n(X5e,"STRONG",{});var rWr=s(Wre);hJe=r(rWr,"speech_to_text"),rWr.forEach(t),pJe=r(X5e," \u2014 "),AS=n(X5e,"A",{href:!0});var tWr=s(AS);_Je=r(tWr,"Speech2TextConfig"),tWr.forEach(t),uJe=r(X5e," (Speech2Text model)"),X5e.forEach(t),bJe=i(y),Um=n(y,"LI",{});var z5e=s(Um);Qre=n(z5e,"STRONG",{});var aWr=s(Qre);vJe=r(aWr,"speech_to_text_2"),aWr.forEach(t),FJe=r(z5e," \u2014 "),yS=n(z5e,"A",{href:!0});var nWr=s(yS);TJe=r(nWr,"Speech2Text2Config"),nWr.forEach(t),MJe=r(z5e," (Speech2Text2 model)"),z5e.forEach(t),EJe=i(y),Jm=n(y,"LI",{});var W5e=s(Jm);Hre=n(W5e,"STRONG",{});var sWr=s(Hre);CJe=r(sWr,"splinter"),sWr.forEach(t),wJe=r(W5e," \u2014 "),LS=n(W5e,"A",{href:!0});var lWr=s(LS);AJe=r(lWr,"SplinterConfig"),lWr.forEach(t),yJe=r(W5e," (Splinter model)"),W5e.forEach(t),LJe=i(y),Ym=n(y,"LI",{});var Q5e=s(Ym);Ure=n(Q5e,"STRONG",{});var iWr=s(Ure);xJe=r(iWr,"squeezebert"),iWr.forEach(t),$Je=r(Q5e," \u2014 "),xS=n(Q5e,"A",{href:!0});var dWr=s(xS);kJe=r(dWr,"SqueezeBertConfig"),dWr.forEach(t),SJe=r(Q5e," (SqueezeBERT model)"),Q5e.forEach(t),RJe=i(y),Km=n(y,"LI",{});var H5e=s(Km);Jre=n(H5e,"STRONG",{});var cWr=s(Jre);PJe=r(cWr,"swin"),cWr.forEach(t),BJe=r(H5e," \u2014 "),$S=n(H5e,"A",{href:!0});var fWr=s($S);IJe=r(fWr,"SwinConfig"),fWr.forEach(t),NJe=r(H5e," (Swin model)"),H5e.forEach(t),qJe=i(y),Zm=n(y,"LI",{});var U5e=s(Zm);Yre=n(U5e,"STRONG",{});var mWr=s(Yre);jJe=r(mWr,"t5"),mWr.forEach(t),DJe=r(U5e," \u2014 "),kS=n(U5e,"A",{href:!0});var gWr=s(kS);GJe=r(gWr,"T5Config"),gWr.forEach(t),OJe=r(U5e," (T5 model)"),U5e.forEach(t),VJe=i(y),eg=n(y,"LI",{});var J5e=s(eg);Kre=n(J5e,"STRONG",{});var hWr=s(Kre);XJe=r(hWr,"tapas"),hWr.forEach(t),zJe=r(J5e," \u2014 "),SS=n(J5e,"A",{href:!0});var pWr=s(SS);WJe=r(pWr,"TapasConfig"),pWr.forEach(t),QJe=r(J5e," (TAPAS model)"),J5e.forEach(t),HJe=i(y),og=n(y,"LI",{});var Y5e=s(og);Zre=n(Y5e,"STRONG",{});var _Wr=s(Zre);UJe=r(_Wr,"trajectory_transformer"),_Wr.forEach(t),JJe=r(Y5e," \u2014 "),RS=n(Y5e,"A",{href:!0});var uWr=s(RS);YJe=r(uWr,"TrajectoryTransformerConfig"),uWr.forEach(t),KJe=r(Y5e," (Trajectory Transformer model)"),Y5e.forEach(t),ZJe=i(y),rg=n(y,"LI",{});var K5e=s(rg);ete=n(K5e,"STRONG",{});var bWr=s(ete);eYe=r(bWr,"transfo-xl"),bWr.forEach(t),oYe=r(K5e," \u2014 "),PS=n(K5e,"A",{href:!0});var vWr=s(PS);rYe=r(vWr,"TransfoXLConfig"),vWr.forEach(t),tYe=r(K5e," (Transformer-XL model)"),K5e.forEach(t),aYe=i(y),tg=n(y,"LI",{});var Z5e=s(tg);ote=n(Z5e,"STRONG",{});var FWr=s(ote);nYe=r(FWr,"trocr"),FWr.forEach(t),sYe=r(Z5e," \u2014 "),BS=n(Z5e,"A",{href:!0});var TWr=s(BS);lYe=r(TWr,"TrOCRConfig"),TWr.forEach(t),iYe=r(Z5e," (TrOCR model)"),Z5e.forEach(t),dYe=i(y),ag=n(y,"LI",{});var ewe=s(ag);rte=n(ewe,"STRONG",{});var MWr=s(rte);cYe=r(MWr,"unispeech"),MWr.forEach(t),fYe=r(ewe," \u2014 "),IS=n(ewe,"A",{href:!0});var EWr=s(IS);mYe=r(EWr,"UniSpeechConfig"),EWr.forEach(t),gYe=r(ewe," (UniSpeech model)"),ewe.forEach(t),hYe=i(y),ng=n(y,"LI",{});var owe=s(ng);tte=n(owe,"STRONG",{});var CWr=s(tte);pYe=r(CWr,"unispeech-sat"),CWr.forEach(t),_Ye=r(owe," \u2014 "),NS=n(owe,"A",{href:!0});var wWr=s(NS);uYe=r(wWr,"UniSpeechSatConfig"),wWr.forEach(t),bYe=r(owe," (UniSpeechSat model)"),owe.forEach(t),vYe=i(y),sg=n(y,"LI",{});var rwe=s(sg);ate=n(rwe,"STRONG",{});var AWr=s(ate);FYe=r(AWr,"van"),AWr.forEach(t),TYe=r(rwe," \u2014 "),qS=n(rwe,"A",{href:!0});var yWr=s(qS);MYe=r(yWr,"VanConfig"),yWr.forEach(t),EYe=r(rwe," (VAN model)"),rwe.forEach(t),CYe=i(y),lg=n(y,"LI",{});var twe=s(lg);nte=n(twe,"STRONG",{});var LWr=s(nte);wYe=r(LWr,"vilt"),LWr.forEach(t),AYe=r(twe," \u2014 "),jS=n(twe,"A",{href:!0});var xWr=s(jS);yYe=r(xWr,"ViltConfig"),xWr.forEach(t),LYe=r(twe," (ViLT model)"),twe.forEach(t),xYe=i(y),ig=n(y,"LI",{});var awe=s(ig);ste=n(awe,"STRONG",{});var $Wr=s(ste);$Ye=r($Wr,"vision-encoder-decoder"),$Wr.forEach(t),kYe=r(awe," \u2014 "),DS=n(awe,"A",{href:!0});var kWr=s(DS);SYe=r(kWr,"VisionEncoderDecoderConfig"),kWr.forEach(t),RYe=r(awe," (Vision Encoder decoder model)"),awe.forEach(t),PYe=i(y),dg=n(y,"LI",{});var nwe=s(dg);lte=n(nwe,"STRONG",{});var SWr=s(lte);BYe=r(SWr,"vision-text-dual-encoder"),SWr.forEach(t),IYe=r(nwe," \u2014 "),GS=n(nwe,"A",{href:!0});var RWr=s(GS);NYe=r(RWr,"VisionTextDualEncoderConfig"),RWr.forEach(t),qYe=r(nwe," (VisionTextDualEncoder model)"),nwe.forEach(t),jYe=i(y),cg=n(y,"LI",{});var swe=s(cg);ite=n(swe,"STRONG",{});var PWr=s(ite);DYe=r(PWr,"visual_bert"),PWr.forEach(t),GYe=r(swe," \u2014 "),OS=n(swe,"A",{href:!0});var BWr=s(OS);OYe=r(BWr,"VisualBertConfig"),BWr.forEach(t),VYe=r(swe," (VisualBert model)"),swe.forEach(t),XYe=i(y),fg=n(y,"LI",{});var lwe=s(fg);dte=n(lwe,"STRONG",{});var IWr=s(dte);zYe=r(IWr,"vit"),IWr.forEach(t),WYe=r(lwe," \u2014 "),VS=n(lwe,"A",{href:!0});var NWr=s(VS);QYe=r(NWr,"ViTConfig"),NWr.forEach(t),HYe=r(lwe," (ViT model)"),lwe.forEach(t),UYe=i(y),mg=n(y,"LI",{});var iwe=s(mg);cte=n(iwe,"STRONG",{});var qWr=s(cte);JYe=r(qWr,"vit_mae"),qWr.forEach(t),YYe=r(iwe," \u2014 "),XS=n(iwe,"A",{href:!0});var jWr=s(XS);KYe=r(jWr,"ViTMAEConfig"),jWr.forEach(t),ZYe=r(iwe," (ViTMAE model)"),iwe.forEach(t),eKe=i(y),gg=n(y,"LI",{});var dwe=s(gg);fte=n(dwe,"STRONG",{});var DWr=s(fte);oKe=r(DWr,"wav2vec2"),DWr.forEach(t),rKe=r(dwe," \u2014 "),zS=n(dwe,"A",{href:!0});var GWr=s(zS);tKe=r(GWr,"Wav2Vec2Config"),GWr.forEach(t),aKe=r(dwe," (Wav2Vec2 model)"),dwe.forEach(t),nKe=i(y),hg=n(y,"LI",{});var cwe=s(hg);mte=n(cwe,"STRONG",{});var OWr=s(mte);sKe=r(OWr,"wav2vec2-conformer"),OWr.forEach(t),lKe=r(cwe," \u2014 "),WS=n(cwe,"A",{href:!0});var VWr=s(WS);iKe=r(VWr,"Wav2Vec2ConformerConfig"),VWr.forEach(t),dKe=r(cwe," (Wav2Vec2-Conformer model)"),cwe.forEach(t),cKe=i(y),pg=n(y,"LI",{});var fwe=s(pg);gte=n(fwe,"STRONG",{});var XWr=s(gte);fKe=r(XWr,"wavlm"),XWr.forEach(t),mKe=r(fwe," \u2014 "),QS=n(fwe,"A",{href:!0});var zWr=s(QS);gKe=r(zWr,"WavLMConfig"),zWr.forEach(t),hKe=r(fwe," (WavLM model)"),fwe.forEach(t),pKe=i(y),_g=n(y,"LI",{});var mwe=s(_g);hte=n(mwe,"STRONG",{});var WWr=s(hte);_Ke=r(WWr,"xglm"),WWr.forEach(t),uKe=r(mwe," \u2014 "),HS=n(mwe,"A",{href:!0});var QWr=s(HS);bKe=r(QWr,"XGLMConfig"),QWr.forEach(t),vKe=r(mwe," (XGLM model)"),mwe.forEach(t),FKe=i(y),ug=n(y,"LI",{});var gwe=s(ug);pte=n(gwe,"STRONG",{});var HWr=s(pte);TKe=r(HWr,"xlm"),HWr.forEach(t),MKe=r(gwe," \u2014 "),US=n(gwe,"A",{href:!0});var UWr=s(US);EKe=r(UWr,"XLMConfig"),UWr.forEach(t),CKe=r(gwe," (XLM model)"),gwe.forEach(t),wKe=i(y),bg=n(y,"LI",{});var hwe=s(bg);_te=n(hwe,"STRONG",{});var JWr=s(_te);AKe=r(JWr,"xlm-prophetnet"),JWr.forEach(t),yKe=r(hwe," \u2014 "),JS=n(hwe,"A",{href:!0});var YWr=s(JS);LKe=r(YWr,"XLMProphetNetConfig"),YWr.forEach(t),xKe=r(hwe," (XLMProphetNet model)"),hwe.forEach(t),$Ke=i(y),vg=n(y,"LI",{});var pwe=s(vg);ute=n(pwe,"STRONG",{});var KWr=s(ute);kKe=r(KWr,"xlm-roberta"),KWr.forEach(t),SKe=r(pwe," \u2014 "),YS=n(pwe,"A",{href:!0});var ZWr=s(YS);RKe=r(ZWr,"XLMRobertaConfig"),ZWr.forEach(t),PKe=r(pwe," (XLM-RoBERTa model)"),pwe.forEach(t),BKe=i(y),Fg=n(y,"LI",{});var _we=s(Fg);bte=n(_we,"STRONG",{});var eQr=s(bte);IKe=r(eQr,"xlm-roberta-xl"),eQr.forEach(t),NKe=r(_we," \u2014 "),KS=n(_we,"A",{href:!0});var oQr=s(KS);qKe=r(oQr,"XLMRobertaXLConfig"),oQr.forEach(t),jKe=r(_we," (XLM-RoBERTa-XL model)"),_we.forEach(t),DKe=i(y),Tg=n(y,"LI",{});var uwe=s(Tg);vte=n(uwe,"STRONG",{});var rQr=s(vte);GKe=r(rQr,"xlnet"),rQr.forEach(t),OKe=r(uwe," \u2014 "),ZS=n(uwe,"A",{href:!0});var tQr=s(ZS);VKe=r(tQr,"XLNetConfig"),tQr.forEach(t),XKe=r(uwe," (XLNet model)"),uwe.forEach(t),zKe=i(y),Mg=n(y,"LI",{});var bwe=s(Mg);Fte=n(bwe,"STRONG",{});var aQr=s(Fte);WKe=r(aQr,"yolos"),aQr.forEach(t),QKe=r(bwe," \u2014 "),eR=n(bwe,"A",{href:!0});var nQr=s(eR);HKe=r(nQr,"YolosConfig"),nQr.forEach(t),UKe=r(bwe," (YOLOS model)"),bwe.forEach(t),JKe=i(y),Eg=n(y,"LI",{});var vwe=s(Eg);Tte=n(vwe,"STRONG",{});var sQr=s(Tte);YKe=r(sQr,"yoso"),sQr.forEach(t),KKe=r(vwe," \u2014 "),oR=n(vwe,"A",{href:!0});var lQr=s(oR);ZKe=r(lQr,"YosoConfig"),lQr.forEach(t),eZe=r(vwe," (YOSO model)"),vwe.forEach(t),y.forEach(t),oZe=i(ot),T(Cg.$$.fragment,ot),ot.forEach(t),rZe=i(et),wg=n(et,"DIV",{class:!0});var cDe=s(wg);T(IA.$$.fragment,cDe),tZe=i(cDe),Mte=n(cDe,"P",{});var iQr=s(Mte);aZe=r(iQr,"Register a new configuration for this class."),iQr.forEach(t),cDe.forEach(t),et.forEach(t),gqe=i(f),Ti=n(f,"H2",{class:!0});var fDe=s(Ti);Ag=n(fDe,"A",{id:!0,class:!0,href:!0});var dQr=s(Ag);Ete=n(dQr,"SPAN",{});var cQr=s(Ete);T(NA.$$.fragment,cQr),cQr.forEach(t),dQr.forEach(t),nZe=i(fDe),Cte=n(fDe,"SPAN",{});var fQr=s(Cte);sZe=r(fQr,"AutoTokenizer"),fQr.forEach(t),fDe.forEach(t),hqe=i(f),wo=n(f,"DIV",{class:!0});var Ns=s(wo);T(qA.$$.fragment,Ns),lZe=i(Ns),jA=n(Ns,"P",{});var mDe=s(jA);iZe=r(mDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),rR=n(mDe,"A",{href:!0});var mQr=s(rR);dZe=r(mQr,"AutoTokenizer.from_pretrained()"),mQr.forEach(t),cZe=r(mDe," class method."),mDe.forEach(t),fZe=i(Ns),DA=n(Ns,"P",{});var gDe=s(DA);mZe=r(gDe,"This class cannot be instantiated directly using "),wte=n(gDe,"CODE",{});var gQr=s(wte);gZe=r(gQr,"__init__()"),gQr.forEach(t),hZe=r(gDe," (throws an error)."),gDe.forEach(t),pZe=i(Ns),Cr=n(Ns,"DIV",{class:!0});var qs=s(Cr);T(GA.$$.fragment,qs),_Ze=i(qs),Ate=n(qs,"P",{});var hQr=s(Ate);uZe=r(hQr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),hQr.forEach(t),bZe=i(qs),Aa=n(qs,"P",{});var kw=s(Aa);vZe=r(kw,"The tokenizer class to instantiate is selected based on the "),yte=n(kw,"CODE",{});var pQr=s(yte);FZe=r(pQr,"model_type"),pQr.forEach(t),TZe=r(kw,` property of the config object (either
passed as an argument or loaded from `),Lte=n(kw,"CODE",{});var _Qr=s(Lte);MZe=r(_Qr,"pretrained_model_name_or_path"),_Qr.forEach(t),EZe=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xte=n(kw,"CODE",{});var uQr=s(xte);CZe=r(uQr,"pretrained_model_name_or_path"),uQr.forEach(t),wZe=r(kw,":"),kw.forEach(t),AZe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Ox=s(Sn);$te=n(Ox,"STRONG",{});var bQr=s($te);yZe=r(bQr,"albert"),bQr.forEach(t),LZe=r(Ox," \u2014 "),tR=n(Ox,"A",{href:!0});var vQr=s(tR);xZe=r(vQr,"AlbertTokenizer"),vQr.forEach(t),$Ze=r(Ox," or "),aR=n(Ox,"A",{href:!0});var FQr=s(aR);kZe=r(FQr,"AlbertTokenizerFast"),FQr.forEach(t),SZe=r(Ox," (ALBERT model)"),Ox.forEach(t),RZe=i(S),Rn=n(S,"LI",{});var Vx=s(Rn);kte=n(Vx,"STRONG",{});var TQr=s(kte);PZe=r(TQr,"bart"),TQr.forEach(t),BZe=r(Vx," \u2014 "),nR=n(Vx,"A",{href:!0});var MQr=s(nR);IZe=r(MQr,"BartTokenizer"),MQr.forEach(t),NZe=r(Vx," or "),sR=n(Vx,"A",{href:!0});var EQr=s(sR);qZe=r(EQr,"BartTokenizerFast"),EQr.forEach(t),jZe=r(Vx," (BART model)"),Vx.forEach(t),DZe=i(S),Pn=n(S,"LI",{});var Xx=s(Pn);Ste=n(Xx,"STRONG",{});var CQr=s(Ste);GZe=r(CQr,"barthez"),CQr.forEach(t),OZe=r(Xx," \u2014 "),lR=n(Xx,"A",{href:!0});var wQr=s(lR);VZe=r(wQr,"BarthezTokenizer"),wQr.forEach(t),XZe=r(Xx," or "),iR=n(Xx,"A",{href:!0});var AQr=s(iR);zZe=r(AQr,"BarthezTokenizerFast"),AQr.forEach(t),WZe=r(Xx," (BARThez model)"),Xx.forEach(t),QZe=i(S),yg=n(S,"LI",{});var Fwe=s(yg);Rte=n(Fwe,"STRONG",{});var yQr=s(Rte);HZe=r(yQr,"bartpho"),yQr.forEach(t),UZe=r(Fwe," \u2014 "),dR=n(Fwe,"A",{href:!0});var LQr=s(dR);JZe=r(LQr,"BartphoTokenizer"),LQr.forEach(t),YZe=r(Fwe," (BARTpho model)"),Fwe.forEach(t),KZe=i(S),Bn=n(S,"LI",{});var zx=s(Bn);Pte=n(zx,"STRONG",{});var xQr=s(Pte);ZZe=r(xQr,"bert"),xQr.forEach(t),eeo=r(zx," \u2014 "),cR=n(zx,"A",{href:!0});var $Qr=s(cR);oeo=r($Qr,"BertTokenizer"),$Qr.forEach(t),reo=r(zx," or "),fR=n(zx,"A",{href:!0});var kQr=s(fR);teo=r(kQr,"BertTokenizerFast"),kQr.forEach(t),aeo=r(zx," (BERT model)"),zx.forEach(t),neo=i(S),Lg=n(S,"LI",{});var Twe=s(Lg);Bte=n(Twe,"STRONG",{});var SQr=s(Bte);seo=r(SQr,"bert-generation"),SQr.forEach(t),leo=r(Twe," \u2014 "),mR=n(Twe,"A",{href:!0});var RQr=s(mR);ieo=r(RQr,"BertGenerationTokenizer"),RQr.forEach(t),deo=r(Twe," (Bert Generation model)"),Twe.forEach(t),ceo=i(S),xg=n(S,"LI",{});var Mwe=s(xg);Ite=n(Mwe,"STRONG",{});var PQr=s(Ite);feo=r(PQr,"bert-japanese"),PQr.forEach(t),meo=r(Mwe," \u2014 "),gR=n(Mwe,"A",{href:!0});var BQr=s(gR);geo=r(BQr,"BertJapaneseTokenizer"),BQr.forEach(t),heo=r(Mwe," (BertJapanese model)"),Mwe.forEach(t),peo=i(S),$g=n(S,"LI",{});var Ewe=s($g);Nte=n(Ewe,"STRONG",{});var IQr=s(Nte);_eo=r(IQr,"bertweet"),IQr.forEach(t),ueo=r(Ewe," \u2014 "),hR=n(Ewe,"A",{href:!0});var NQr=s(hR);beo=r(NQr,"BertweetTokenizer"),NQr.forEach(t),veo=r(Ewe," (Bertweet model)"),Ewe.forEach(t),Feo=i(S),In=n(S,"LI",{});var Wx=s(In);qte=n(Wx,"STRONG",{});var qQr=s(qte);Teo=r(qQr,"big_bird"),qQr.forEach(t),Meo=r(Wx," \u2014 "),pR=n(Wx,"A",{href:!0});var jQr=s(pR);Eeo=r(jQr,"BigBirdTokenizer"),jQr.forEach(t),Ceo=r(Wx," or "),_R=n(Wx,"A",{href:!0});var DQr=s(_R);weo=r(DQr,"BigBirdTokenizerFast"),DQr.forEach(t),Aeo=r(Wx," (BigBird model)"),Wx.forEach(t),yeo=i(S),Nn=n(S,"LI",{});var Qx=s(Nn);jte=n(Qx,"STRONG",{});var GQr=s(jte);Leo=r(GQr,"bigbird_pegasus"),GQr.forEach(t),xeo=r(Qx," \u2014 "),uR=n(Qx,"A",{href:!0});var OQr=s(uR);$eo=r(OQr,"PegasusTokenizer"),OQr.forEach(t),keo=r(Qx," or "),bR=n(Qx,"A",{href:!0});var VQr=s(bR);Seo=r(VQr,"PegasusTokenizerFast"),VQr.forEach(t),Reo=r(Qx," (BigBirdPegasus model)"),Qx.forEach(t),Peo=i(S),qn=n(S,"LI",{});var Hx=s(qn);Dte=n(Hx,"STRONG",{});var XQr=s(Dte);Beo=r(XQr,"blenderbot"),XQr.forEach(t),Ieo=r(Hx," \u2014 "),vR=n(Hx,"A",{href:!0});var zQr=s(vR);Neo=r(zQr,"BlenderbotTokenizer"),zQr.forEach(t),qeo=r(Hx," or "),FR=n(Hx,"A",{href:!0});var WQr=s(FR);jeo=r(WQr,"BlenderbotTokenizerFast"),WQr.forEach(t),Deo=r(Hx," (Blenderbot model)"),Hx.forEach(t),Geo=i(S),kg=n(S,"LI",{});var Cwe=s(kg);Gte=n(Cwe,"STRONG",{});var QQr=s(Gte);Oeo=r(QQr,"blenderbot-small"),QQr.forEach(t),Veo=r(Cwe," \u2014 "),TR=n(Cwe,"A",{href:!0});var HQr=s(TR);Xeo=r(HQr,"BlenderbotSmallTokenizer"),HQr.forEach(t),zeo=r(Cwe," (BlenderbotSmall model)"),Cwe.forEach(t),Weo=i(S),Sg=n(S,"LI",{});var wwe=s(Sg);Ote=n(wwe,"STRONG",{});var UQr=s(Ote);Qeo=r(UQr,"byt5"),UQr.forEach(t),Heo=r(wwe," \u2014 "),MR=n(wwe,"A",{href:!0});var JQr=s(MR);Ueo=r(JQr,"ByT5Tokenizer"),JQr.forEach(t),Jeo=r(wwe," (ByT5 model)"),wwe.forEach(t),Yeo=i(S),jn=n(S,"LI",{});var Ux=s(jn);Vte=n(Ux,"STRONG",{});var YQr=s(Vte);Keo=r(YQr,"camembert"),YQr.forEach(t),Zeo=r(Ux," \u2014 "),ER=n(Ux,"A",{href:!0});var KQr=s(ER);eoo=r(KQr,"CamembertTokenizer"),KQr.forEach(t),ooo=r(Ux," or "),CR=n(Ux,"A",{href:!0});var ZQr=s(CR);roo=r(ZQr,"CamembertTokenizerFast"),ZQr.forEach(t),too=r(Ux," (CamemBERT model)"),Ux.forEach(t),aoo=i(S),Rg=n(S,"LI",{});var Awe=s(Rg);Xte=n(Awe,"STRONG",{});var eHr=s(Xte);noo=r(eHr,"canine"),eHr.forEach(t),soo=r(Awe," \u2014 "),wR=n(Awe,"A",{href:!0});var oHr=s(wR);loo=r(oHr,"CanineTokenizer"),oHr.forEach(t),ioo=r(Awe," (Canine model)"),Awe.forEach(t),doo=i(S),Dn=n(S,"LI",{});var Jx=s(Dn);zte=n(Jx,"STRONG",{});var rHr=s(zte);coo=r(rHr,"clip"),rHr.forEach(t),foo=r(Jx," \u2014 "),AR=n(Jx,"A",{href:!0});var tHr=s(AR);moo=r(tHr,"CLIPTokenizer"),tHr.forEach(t),goo=r(Jx," or "),yR=n(Jx,"A",{href:!0});var aHr=s(yR);hoo=r(aHr,"CLIPTokenizerFast"),aHr.forEach(t),poo=r(Jx," (CLIP model)"),Jx.forEach(t),_oo=i(S),Gn=n(S,"LI",{});var Yx=s(Gn);Wte=n(Yx,"STRONG",{});var nHr=s(Wte);uoo=r(nHr,"convbert"),nHr.forEach(t),boo=r(Yx," \u2014 "),LR=n(Yx,"A",{href:!0});var sHr=s(LR);voo=r(sHr,"ConvBertTokenizer"),sHr.forEach(t),Foo=r(Yx," or "),xR=n(Yx,"A",{href:!0});var lHr=s(xR);Too=r(lHr,"ConvBertTokenizerFast"),lHr.forEach(t),Moo=r(Yx," (ConvBERT model)"),Yx.forEach(t),Eoo=i(S),On=n(S,"LI",{});var Kx=s(On);Qte=n(Kx,"STRONG",{});var iHr=s(Qte);Coo=r(iHr,"cpm"),iHr.forEach(t),woo=r(Kx," \u2014 "),$R=n(Kx,"A",{href:!0});var dHr=s($R);Aoo=r(dHr,"CpmTokenizer"),dHr.forEach(t),yoo=r(Kx," or "),kR=n(Kx,"A",{href:!0});var cHr=s(kR);Loo=r(cHr,"CpmTokenizerFast"),cHr.forEach(t),xoo=r(Kx," (CPM model)"),Kx.forEach(t),$oo=i(S),Pg=n(S,"LI",{});var ywe=s(Pg);Hte=n(ywe,"STRONG",{});var fHr=s(Hte);koo=r(fHr,"ctrl"),fHr.forEach(t),Soo=r(ywe," \u2014 "),SR=n(ywe,"A",{href:!0});var mHr=s(SR);Roo=r(mHr,"CTRLTokenizer"),mHr.forEach(t),Poo=r(ywe," (CTRL model)"),ywe.forEach(t),Boo=i(S),Vn=n(S,"LI",{});var Zx=s(Vn);Ute=n(Zx,"STRONG",{});var gHr=s(Ute);Ioo=r(gHr,"data2vec-text"),gHr.forEach(t),Noo=r(Zx," \u2014 "),RR=n(Zx,"A",{href:!0});var hHr=s(RR);qoo=r(hHr,"RobertaTokenizer"),hHr.forEach(t),joo=r(Zx," or "),PR=n(Zx,"A",{href:!0});var pHr=s(PR);Doo=r(pHr,"RobertaTokenizerFast"),pHr.forEach(t),Goo=r(Zx," (Data2VecText model)"),Zx.forEach(t),Ooo=i(S),Xn=n(S,"LI",{});var e$=s(Xn);Jte=n(e$,"STRONG",{});var _Hr=s(Jte);Voo=r(_Hr,"deberta"),_Hr.forEach(t),Xoo=r(e$," \u2014 "),BR=n(e$,"A",{href:!0});var uHr=s(BR);zoo=r(uHr,"DebertaTokenizer"),uHr.forEach(t),Woo=r(e$," or "),IR=n(e$,"A",{href:!0});var bHr=s(IR);Qoo=r(bHr,"DebertaTokenizerFast"),bHr.forEach(t),Hoo=r(e$," (DeBERTa model)"),e$.forEach(t),Uoo=i(S),zn=n(S,"LI",{});var o$=s(zn);Yte=n(o$,"STRONG",{});var vHr=s(Yte);Joo=r(vHr,"deberta-v2"),vHr.forEach(t),Yoo=r(o$," \u2014 "),NR=n(o$,"A",{href:!0});var FHr=s(NR);Koo=r(FHr,"DebertaV2Tokenizer"),FHr.forEach(t),Zoo=r(o$," or "),qR=n(o$,"A",{href:!0});var THr=s(qR);ero=r(THr,"DebertaV2TokenizerFast"),THr.forEach(t),oro=r(o$," (DeBERTa-v2 model)"),o$.forEach(t),rro=i(S),Wn=n(S,"LI",{});var r$=s(Wn);Kte=n(r$,"STRONG",{});var MHr=s(Kte);tro=r(MHr,"distilbert"),MHr.forEach(t),aro=r(r$," \u2014 "),jR=n(r$,"A",{href:!0});var EHr=s(jR);nro=r(EHr,"DistilBertTokenizer"),EHr.forEach(t),sro=r(r$," or "),DR=n(r$,"A",{href:!0});var CHr=s(DR);lro=r(CHr,"DistilBertTokenizerFast"),CHr.forEach(t),iro=r(r$," (DistilBERT model)"),r$.forEach(t),dro=i(S),Qn=n(S,"LI",{});var t$=s(Qn);Zte=n(t$,"STRONG",{});var wHr=s(Zte);cro=r(wHr,"dpr"),wHr.forEach(t),fro=r(t$," \u2014 "),GR=n(t$,"A",{href:!0});var AHr=s(GR);mro=r(AHr,"DPRQuestionEncoderTokenizer"),AHr.forEach(t),gro=r(t$," or "),OR=n(t$,"A",{href:!0});var yHr=s(OR);hro=r(yHr,"DPRQuestionEncoderTokenizerFast"),yHr.forEach(t),pro=r(t$," (DPR model)"),t$.forEach(t),_ro=i(S),Hn=n(S,"LI",{});var a$=s(Hn);eae=n(a$,"STRONG",{});var LHr=s(eae);uro=r(LHr,"electra"),LHr.forEach(t),bro=r(a$," \u2014 "),VR=n(a$,"A",{href:!0});var xHr=s(VR);vro=r(xHr,"ElectraTokenizer"),xHr.forEach(t),Fro=r(a$," or "),XR=n(a$,"A",{href:!0});var $Hr=s(XR);Tro=r($Hr,"ElectraTokenizerFast"),$Hr.forEach(t),Mro=r(a$," (ELECTRA model)"),a$.forEach(t),Ero=i(S),Bg=n(S,"LI",{});var Lwe=s(Bg);oae=n(Lwe,"STRONG",{});var kHr=s(oae);Cro=r(kHr,"flaubert"),kHr.forEach(t),wro=r(Lwe," \u2014 "),zR=n(Lwe,"A",{href:!0});var SHr=s(zR);Aro=r(SHr,"FlaubertTokenizer"),SHr.forEach(t),yro=r(Lwe," (FlauBERT model)"),Lwe.forEach(t),Lro=i(S),Un=n(S,"LI",{});var n$=s(Un);rae=n(n$,"STRONG",{});var RHr=s(rae);xro=r(RHr,"fnet"),RHr.forEach(t),$ro=r(n$," \u2014 "),WR=n(n$,"A",{href:!0});var PHr=s(WR);kro=r(PHr,"FNetTokenizer"),PHr.forEach(t),Sro=r(n$," or "),QR=n(n$,"A",{href:!0});var BHr=s(QR);Rro=r(BHr,"FNetTokenizerFast"),BHr.forEach(t),Pro=r(n$," (FNet model)"),n$.forEach(t),Bro=i(S),Ig=n(S,"LI",{});var xwe=s(Ig);tae=n(xwe,"STRONG",{});var IHr=s(tae);Iro=r(IHr,"fsmt"),IHr.forEach(t),Nro=r(xwe," \u2014 "),HR=n(xwe,"A",{href:!0});var NHr=s(HR);qro=r(NHr,"FSMTTokenizer"),NHr.forEach(t),jro=r(xwe," (FairSeq Machine-Translation model)"),xwe.forEach(t),Dro=i(S),Jn=n(S,"LI",{});var s$=s(Jn);aae=n(s$,"STRONG",{});var qHr=s(aae);Gro=r(qHr,"funnel"),qHr.forEach(t),Oro=r(s$," \u2014 "),UR=n(s$,"A",{href:!0});var jHr=s(UR);Vro=r(jHr,"FunnelTokenizer"),jHr.forEach(t),Xro=r(s$," or "),JR=n(s$,"A",{href:!0});var DHr=s(JR);zro=r(DHr,"FunnelTokenizerFast"),DHr.forEach(t),Wro=r(s$," (Funnel Transformer model)"),s$.forEach(t),Qro=i(S),Yn=n(S,"LI",{});var l$=s(Yn);nae=n(l$,"STRONG",{});var GHr=s(nae);Hro=r(GHr,"gpt2"),GHr.forEach(t),Uro=r(l$," \u2014 "),YR=n(l$,"A",{href:!0});var OHr=s(YR);Jro=r(OHr,"GPT2Tokenizer"),OHr.forEach(t),Yro=r(l$," or "),KR=n(l$,"A",{href:!0});var VHr=s(KR);Kro=r(VHr,"GPT2TokenizerFast"),VHr.forEach(t),Zro=r(l$," (OpenAI GPT-2 model)"),l$.forEach(t),eto=i(S),Kn=n(S,"LI",{});var i$=s(Kn);sae=n(i$,"STRONG",{});var XHr=s(sae);oto=r(XHr,"gpt_neo"),XHr.forEach(t),rto=r(i$," \u2014 "),ZR=n(i$,"A",{href:!0});var zHr=s(ZR);tto=r(zHr,"GPT2Tokenizer"),zHr.forEach(t),ato=r(i$," or "),eP=n(i$,"A",{href:!0});var WHr=s(eP);nto=r(WHr,"GPT2TokenizerFast"),WHr.forEach(t),sto=r(i$," (GPT Neo model)"),i$.forEach(t),lto=i(S),Ng=n(S,"LI",{});var $we=s(Ng);lae=n($we,"STRONG",{});var QHr=s(lae);ito=r(QHr,"gpt_neox"),QHr.forEach(t),dto=r($we," \u2014 "),oP=n($we,"A",{href:!0});var HHr=s(oP);cto=r(HHr,"GPTNeoXTokenizerFast"),HHr.forEach(t),fto=r($we," (GPT NeoX model)"),$we.forEach(t),mto=i(S),Zn=n(S,"LI",{});var d$=s(Zn);iae=n(d$,"STRONG",{});var UHr=s(iae);gto=r(UHr,"gptj"),UHr.forEach(t),hto=r(d$," \u2014 "),rP=n(d$,"A",{href:!0});var JHr=s(rP);pto=r(JHr,"GPT2Tokenizer"),JHr.forEach(t),_to=r(d$," or "),tP=n(d$,"A",{href:!0});var YHr=s(tP);uto=r(YHr,"GPT2TokenizerFast"),YHr.forEach(t),bto=r(d$," (GPT-J model)"),d$.forEach(t),vto=i(S),es=n(S,"LI",{});var c$=s(es);dae=n(c$,"STRONG",{});var KHr=s(dae);Fto=r(KHr,"herbert"),KHr.forEach(t),Tto=r(c$," \u2014 "),aP=n(c$,"A",{href:!0});var ZHr=s(aP);Mto=r(ZHr,"HerbertTokenizer"),ZHr.forEach(t),Eto=r(c$," or "),nP=n(c$,"A",{href:!0});var eUr=s(nP);Cto=r(eUr,"HerbertTokenizerFast"),eUr.forEach(t),wto=r(c$," (HerBERT model)"),c$.forEach(t),Ato=i(S),qg=n(S,"LI",{});var kwe=s(qg);cae=n(kwe,"STRONG",{});var oUr=s(cae);yto=r(oUr,"hubert"),oUr.forEach(t),Lto=r(kwe," \u2014 "),sP=n(kwe,"A",{href:!0});var rUr=s(sP);xto=r(rUr,"Wav2Vec2CTCTokenizer"),rUr.forEach(t),$to=r(kwe," (Hubert model)"),kwe.forEach(t),kto=i(S),os=n(S,"LI",{});var f$=s(os);fae=n(f$,"STRONG",{});var tUr=s(fae);Sto=r(tUr,"ibert"),tUr.forEach(t),Rto=r(f$," \u2014 "),lP=n(f$,"A",{href:!0});var aUr=s(lP);Pto=r(aUr,"RobertaTokenizer"),aUr.forEach(t),Bto=r(f$," or "),iP=n(f$,"A",{href:!0});var nUr=s(iP);Ito=r(nUr,"RobertaTokenizerFast"),nUr.forEach(t),Nto=r(f$," (I-BERT model)"),f$.forEach(t),qto=i(S),rs=n(S,"LI",{});var m$=s(rs);mae=n(m$,"STRONG",{});var sUr=s(mae);jto=r(sUr,"layoutlm"),sUr.forEach(t),Dto=r(m$," \u2014 "),dP=n(m$,"A",{href:!0});var lUr=s(dP);Gto=r(lUr,"LayoutLMTokenizer"),lUr.forEach(t),Oto=r(m$," or "),cP=n(m$,"A",{href:!0});var iUr=s(cP);Vto=r(iUr,"LayoutLMTokenizerFast"),iUr.forEach(t),Xto=r(m$," (LayoutLM model)"),m$.forEach(t),zto=i(S),ts=n(S,"LI",{});var g$=s(ts);gae=n(g$,"STRONG",{});var dUr=s(gae);Wto=r(dUr,"layoutlmv2"),dUr.forEach(t),Qto=r(g$," \u2014 "),fP=n(g$,"A",{href:!0});var cUr=s(fP);Hto=r(cUr,"LayoutLMv2Tokenizer"),cUr.forEach(t),Uto=r(g$," or "),mP=n(g$,"A",{href:!0});var fUr=s(mP);Jto=r(fUr,"LayoutLMv2TokenizerFast"),fUr.forEach(t),Yto=r(g$," (LayoutLMv2 model)"),g$.forEach(t),Kto=i(S),as=n(S,"LI",{});var h$=s(as);hae=n(h$,"STRONG",{});var mUr=s(hae);Zto=r(mUr,"layoutlmv3"),mUr.forEach(t),eao=r(h$," \u2014 "),gP=n(h$,"A",{href:!0});var gUr=s(gP);oao=r(gUr,"LayoutLMv3Tokenizer"),gUr.forEach(t),rao=r(h$," or "),hP=n(h$,"A",{href:!0});var hUr=s(hP);tao=r(hUr,"LayoutLMv3TokenizerFast"),hUr.forEach(t),aao=r(h$," (LayoutLMv3 model)"),h$.forEach(t),nao=i(S),ns=n(S,"LI",{});var p$=s(ns);pae=n(p$,"STRONG",{});var pUr=s(pae);sao=r(pUr,"layoutxlm"),pUr.forEach(t),lao=r(p$," \u2014 "),pP=n(p$,"A",{href:!0});var _Ur=s(pP);iao=r(_Ur,"LayoutXLMTokenizer"),_Ur.forEach(t),dao=r(p$," or "),_P=n(p$,"A",{href:!0});var uUr=s(_P);cao=r(uUr,"LayoutXLMTokenizerFast"),uUr.forEach(t),fao=r(p$," (LayoutXLM model)"),p$.forEach(t),mao=i(S),ss=n(S,"LI",{});var _$=s(ss);_ae=n(_$,"STRONG",{});var bUr=s(_ae);gao=r(bUr,"led"),bUr.forEach(t),hao=r(_$," \u2014 "),uP=n(_$,"A",{href:!0});var vUr=s(uP);pao=r(vUr,"LEDTokenizer"),vUr.forEach(t),_ao=r(_$," or "),bP=n(_$,"A",{href:!0});var FUr=s(bP);uao=r(FUr,"LEDTokenizerFast"),FUr.forEach(t),bao=r(_$," (LED model)"),_$.forEach(t),vao=i(S),ls=n(S,"LI",{});var u$=s(ls);uae=n(u$,"STRONG",{});var TUr=s(uae);Fao=r(TUr,"longformer"),TUr.forEach(t),Tao=r(u$," \u2014 "),vP=n(u$,"A",{href:!0});var MUr=s(vP);Mao=r(MUr,"LongformerTokenizer"),MUr.forEach(t),Eao=r(u$," or "),FP=n(u$,"A",{href:!0});var EUr=s(FP);Cao=r(EUr,"LongformerTokenizerFast"),EUr.forEach(t),wao=r(u$," (Longformer model)"),u$.forEach(t),Aao=i(S),jg=n(S,"LI",{});var Swe=s(jg);bae=n(Swe,"STRONG",{});var CUr=s(bae);yao=r(CUr,"luke"),CUr.forEach(t),Lao=r(Swe," \u2014 "),TP=n(Swe,"A",{href:!0});var wUr=s(TP);xao=r(wUr,"LukeTokenizer"),wUr.forEach(t),$ao=r(Swe," (LUKE model)"),Swe.forEach(t),kao=i(S),is=n(S,"LI",{});var b$=s(is);vae=n(b$,"STRONG",{});var AUr=s(vae);Sao=r(AUr,"lxmert"),AUr.forEach(t),Rao=r(b$," \u2014 "),MP=n(b$,"A",{href:!0});var yUr=s(MP);Pao=r(yUr,"LxmertTokenizer"),yUr.forEach(t),Bao=r(b$," or "),EP=n(b$,"A",{href:!0});var LUr=s(EP);Iao=r(LUr,"LxmertTokenizerFast"),LUr.forEach(t),Nao=r(b$," (LXMERT model)"),b$.forEach(t),qao=i(S),Dg=n(S,"LI",{});var Rwe=s(Dg);Fae=n(Rwe,"STRONG",{});var xUr=s(Fae);jao=r(xUr,"m2m_100"),xUr.forEach(t),Dao=r(Rwe," \u2014 "),CP=n(Rwe,"A",{href:!0});var $Ur=s(CP);Gao=r($Ur,"M2M100Tokenizer"),$Ur.forEach(t),Oao=r(Rwe," (M2M100 model)"),Rwe.forEach(t),Vao=i(S),Gg=n(S,"LI",{});var Pwe=s(Gg);Tae=n(Pwe,"STRONG",{});var kUr=s(Tae);Xao=r(kUr,"marian"),kUr.forEach(t),zao=r(Pwe," \u2014 "),wP=n(Pwe,"A",{href:!0});var SUr=s(wP);Wao=r(SUr,"MarianTokenizer"),SUr.forEach(t),Qao=r(Pwe," (Marian model)"),Pwe.forEach(t),Hao=i(S),ds=n(S,"LI",{});var v$=s(ds);Mae=n(v$,"STRONG",{});var RUr=s(Mae);Uao=r(RUr,"mbart"),RUr.forEach(t),Jao=r(v$," \u2014 "),AP=n(v$,"A",{href:!0});var PUr=s(AP);Yao=r(PUr,"MBartTokenizer"),PUr.forEach(t),Kao=r(v$," or "),yP=n(v$,"A",{href:!0});var BUr=s(yP);Zao=r(BUr,"MBartTokenizerFast"),BUr.forEach(t),eno=r(v$," (mBART model)"),v$.forEach(t),ono=i(S),cs=n(S,"LI",{});var F$=s(cs);Eae=n(F$,"STRONG",{});var IUr=s(Eae);rno=r(IUr,"mbart50"),IUr.forEach(t),tno=r(F$," \u2014 "),LP=n(F$,"A",{href:!0});var NUr=s(LP);ano=r(NUr,"MBart50Tokenizer"),NUr.forEach(t),nno=r(F$," or "),xP=n(F$,"A",{href:!0});var qUr=s(xP);sno=r(qUr,"MBart50TokenizerFast"),qUr.forEach(t),lno=r(F$," (mBART-50 model)"),F$.forEach(t),ino=i(S),fs=n(S,"LI",{});var T$=s(fs);Cae=n(T$,"STRONG",{});var jUr=s(Cae);dno=r(jUr,"megatron-bert"),jUr.forEach(t),cno=r(T$," \u2014 "),$P=n(T$,"A",{href:!0});var DUr=s($P);fno=r(DUr,"BertTokenizer"),DUr.forEach(t),mno=r(T$," or "),kP=n(T$,"A",{href:!0});var GUr=s(kP);gno=r(GUr,"BertTokenizerFast"),GUr.forEach(t),hno=r(T$," (MegatronBert model)"),T$.forEach(t),pno=i(S),Og=n(S,"LI",{});var Bwe=s(Og);wae=n(Bwe,"STRONG",{});var OUr=s(wae);_no=r(OUr,"mluke"),OUr.forEach(t),uno=r(Bwe," \u2014 "),SP=n(Bwe,"A",{href:!0});var VUr=s(SP);bno=r(VUr,"MLukeTokenizer"),VUr.forEach(t),vno=r(Bwe," (mLUKE model)"),Bwe.forEach(t),Fno=i(S),ms=n(S,"LI",{});var M$=s(ms);Aae=n(M$,"STRONG",{});var XUr=s(Aae);Tno=r(XUr,"mobilebert"),XUr.forEach(t),Mno=r(M$," \u2014 "),RP=n(M$,"A",{href:!0});var zUr=s(RP);Eno=r(zUr,"MobileBertTokenizer"),zUr.forEach(t),Cno=r(M$," or "),PP=n(M$,"A",{href:!0});var WUr=s(PP);wno=r(WUr,"MobileBertTokenizerFast"),WUr.forEach(t),Ano=r(M$," (MobileBERT model)"),M$.forEach(t),yno=i(S),gs=n(S,"LI",{});var E$=s(gs);yae=n(E$,"STRONG",{});var QUr=s(yae);Lno=r(QUr,"mpnet"),QUr.forEach(t),xno=r(E$," \u2014 "),BP=n(E$,"A",{href:!0});var HUr=s(BP);$no=r(HUr,"MPNetTokenizer"),HUr.forEach(t),kno=r(E$," or "),IP=n(E$,"A",{href:!0});var UUr=s(IP);Sno=r(UUr,"MPNetTokenizerFast"),UUr.forEach(t),Rno=r(E$," (MPNet model)"),E$.forEach(t),Pno=i(S),hs=n(S,"LI",{});var C$=s(hs);Lae=n(C$,"STRONG",{});var JUr=s(Lae);Bno=r(JUr,"mt5"),JUr.forEach(t),Ino=r(C$," \u2014 "),NP=n(C$,"A",{href:!0});var YUr=s(NP);Nno=r(YUr,"MT5Tokenizer"),YUr.forEach(t),qno=r(C$," or "),qP=n(C$,"A",{href:!0});var KUr=s(qP);jno=r(KUr,"MT5TokenizerFast"),KUr.forEach(t),Dno=r(C$," (mT5 model)"),C$.forEach(t),Gno=i(S),ps=n(S,"LI",{});var w$=s(ps);xae=n(w$,"STRONG",{});var ZUr=s(xae);Ono=r(ZUr,"nystromformer"),ZUr.forEach(t),Vno=r(w$," \u2014 "),jP=n(w$,"A",{href:!0});var eJr=s(jP);Xno=r(eJr,"AlbertTokenizer"),eJr.forEach(t),zno=r(w$," or "),DP=n(w$,"A",{href:!0});var oJr=s(DP);Wno=r(oJr,"AlbertTokenizerFast"),oJr.forEach(t),Qno=r(w$," (Nystromformer model)"),w$.forEach(t),Hno=i(S),_s=n(S,"LI",{});var A$=s(_s);$ae=n(A$,"STRONG",{});var rJr=s($ae);Uno=r(rJr,"openai-gpt"),rJr.forEach(t),Jno=r(A$," \u2014 "),GP=n(A$,"A",{href:!0});var tJr=s(GP);Yno=r(tJr,"OpenAIGPTTokenizer"),tJr.forEach(t),Kno=r(A$," or "),OP=n(A$,"A",{href:!0});var aJr=s(OP);Zno=r(aJr,"OpenAIGPTTokenizerFast"),aJr.forEach(t),eso=r(A$," (OpenAI GPT model)"),A$.forEach(t),oso=i(S),Vg=n(S,"LI",{});var Iwe=s(Vg);kae=n(Iwe,"STRONG",{});var nJr=s(kae);rso=r(nJr,"opt"),nJr.forEach(t),tso=r(Iwe," \u2014 "),VP=n(Iwe,"A",{href:!0});var sJr=s(VP);aso=r(sJr,"GPT2Tokenizer"),sJr.forEach(t),nso=r(Iwe," (OPT model)"),Iwe.forEach(t),sso=i(S),us=n(S,"LI",{});var y$=s(us);Sae=n(y$,"STRONG",{});var lJr=s(Sae);lso=r(lJr,"pegasus"),lJr.forEach(t),iso=r(y$," \u2014 "),XP=n(y$,"A",{href:!0});var iJr=s(XP);dso=r(iJr,"PegasusTokenizer"),iJr.forEach(t),cso=r(y$," or "),zP=n(y$,"A",{href:!0});var dJr=s(zP);fso=r(dJr,"PegasusTokenizerFast"),dJr.forEach(t),mso=r(y$," (Pegasus model)"),y$.forEach(t),gso=i(S),Xg=n(S,"LI",{});var Nwe=s(Xg);Rae=n(Nwe,"STRONG",{});var cJr=s(Rae);hso=r(cJr,"perceiver"),cJr.forEach(t),pso=r(Nwe," \u2014 "),WP=n(Nwe,"A",{href:!0});var fJr=s(WP);_so=r(fJr,"PerceiverTokenizer"),fJr.forEach(t),uso=r(Nwe," (Perceiver model)"),Nwe.forEach(t),bso=i(S),zg=n(S,"LI",{});var qwe=s(zg);Pae=n(qwe,"STRONG",{});var mJr=s(Pae);vso=r(mJr,"phobert"),mJr.forEach(t),Fso=r(qwe," \u2014 "),QP=n(qwe,"A",{href:!0});var gJr=s(QP);Tso=r(gJr,"PhobertTokenizer"),gJr.forEach(t),Mso=r(qwe," (PhoBERT model)"),qwe.forEach(t),Eso=i(S),Wg=n(S,"LI",{});var jwe=s(Wg);Bae=n(jwe,"STRONG",{});var hJr=s(Bae);Cso=r(hJr,"plbart"),hJr.forEach(t),wso=r(jwe," \u2014 "),HP=n(jwe,"A",{href:!0});var pJr=s(HP);Aso=r(pJr,"PLBartTokenizer"),pJr.forEach(t),yso=r(jwe," (PLBart model)"),jwe.forEach(t),Lso=i(S),Qg=n(S,"LI",{});var Dwe=s(Qg);Iae=n(Dwe,"STRONG",{});var _Jr=s(Iae);xso=r(_Jr,"prophetnet"),_Jr.forEach(t),$so=r(Dwe," \u2014 "),UP=n(Dwe,"A",{href:!0});var uJr=s(UP);kso=r(uJr,"ProphetNetTokenizer"),uJr.forEach(t),Sso=r(Dwe," (ProphetNet model)"),Dwe.forEach(t),Rso=i(S),bs=n(S,"LI",{});var L$=s(bs);Nae=n(L$,"STRONG",{});var bJr=s(Nae);Pso=r(bJr,"qdqbert"),bJr.forEach(t),Bso=r(L$," \u2014 "),JP=n(L$,"A",{href:!0});var vJr=s(JP);Iso=r(vJr,"BertTokenizer"),vJr.forEach(t),Nso=r(L$," or "),YP=n(L$,"A",{href:!0});var FJr=s(YP);qso=r(FJr,"BertTokenizerFast"),FJr.forEach(t),jso=r(L$," (QDQBert model)"),L$.forEach(t),Dso=i(S),Hg=n(S,"LI",{});var Gwe=s(Hg);qae=n(Gwe,"STRONG",{});var TJr=s(qae);Gso=r(TJr,"rag"),TJr.forEach(t),Oso=r(Gwe," \u2014 "),KP=n(Gwe,"A",{href:!0});var MJr=s(KP);Vso=r(MJr,"RagTokenizer"),MJr.forEach(t),Xso=r(Gwe," (RAG model)"),Gwe.forEach(t),zso=i(S),vs=n(S,"LI",{});var x$=s(vs);jae=n(x$,"STRONG",{});var EJr=s(jae);Wso=r(EJr,"realm"),EJr.forEach(t),Qso=r(x$," \u2014 "),ZP=n(x$,"A",{href:!0});var CJr=s(ZP);Hso=r(CJr,"RealmTokenizer"),CJr.forEach(t),Uso=r(x$," or "),eB=n(x$,"A",{href:!0});var wJr=s(eB);Jso=r(wJr,"RealmTokenizerFast"),wJr.forEach(t),Yso=r(x$," (Realm model)"),x$.forEach(t),Kso=i(S),Fs=n(S,"LI",{});var $$=s(Fs);Dae=n($$,"STRONG",{});var AJr=s(Dae);Zso=r(AJr,"reformer"),AJr.forEach(t),elo=r($$," \u2014 "),oB=n($$,"A",{href:!0});var yJr=s(oB);olo=r(yJr,"ReformerTokenizer"),yJr.forEach(t),rlo=r($$," or "),rB=n($$,"A",{href:!0});var LJr=s(rB);tlo=r(LJr,"ReformerTokenizerFast"),LJr.forEach(t),alo=r($$," (Reformer model)"),$$.forEach(t),nlo=i(S),Ts=n(S,"LI",{});var k$=s(Ts);Gae=n(k$,"STRONG",{});var xJr=s(Gae);slo=r(xJr,"rembert"),xJr.forEach(t),llo=r(k$," \u2014 "),tB=n(k$,"A",{href:!0});var $Jr=s(tB);ilo=r($Jr,"RemBertTokenizer"),$Jr.forEach(t),dlo=r(k$," or "),aB=n(k$,"A",{href:!0});var kJr=s(aB);clo=r(kJr,"RemBertTokenizerFast"),kJr.forEach(t),flo=r(k$," (RemBERT model)"),k$.forEach(t),mlo=i(S),Ms=n(S,"LI",{});var S$=s(Ms);Oae=n(S$,"STRONG",{});var SJr=s(Oae);glo=r(SJr,"retribert"),SJr.forEach(t),hlo=r(S$," \u2014 "),nB=n(S$,"A",{href:!0});var RJr=s(nB);plo=r(RJr,"RetriBertTokenizer"),RJr.forEach(t),_lo=r(S$," or "),sB=n(S$,"A",{href:!0});var PJr=s(sB);ulo=r(PJr,"RetriBertTokenizerFast"),PJr.forEach(t),blo=r(S$," (RetriBERT model)"),S$.forEach(t),vlo=i(S),Es=n(S,"LI",{});var R$=s(Es);Vae=n(R$,"STRONG",{});var BJr=s(Vae);Flo=r(BJr,"roberta"),BJr.forEach(t),Tlo=r(R$," \u2014 "),lB=n(R$,"A",{href:!0});var IJr=s(lB);Mlo=r(IJr,"RobertaTokenizer"),IJr.forEach(t),Elo=r(R$," or "),iB=n(R$,"A",{href:!0});var NJr=s(iB);Clo=r(NJr,"RobertaTokenizerFast"),NJr.forEach(t),wlo=r(R$," (RoBERTa model)"),R$.forEach(t),Alo=i(S),Cs=n(S,"LI",{});var P$=s(Cs);Xae=n(P$,"STRONG",{});var qJr=s(Xae);ylo=r(qJr,"roformer"),qJr.forEach(t),Llo=r(P$," \u2014 "),dB=n(P$,"A",{href:!0});var jJr=s(dB);xlo=r(jJr,"RoFormerTokenizer"),jJr.forEach(t),$lo=r(P$," or "),cB=n(P$,"A",{href:!0});var DJr=s(cB);klo=r(DJr,"RoFormerTokenizerFast"),DJr.forEach(t),Slo=r(P$," (RoFormer model)"),P$.forEach(t),Rlo=i(S),Ug=n(S,"LI",{});var Owe=s(Ug);zae=n(Owe,"STRONG",{});var GJr=s(zae);Plo=r(GJr,"speech_to_text"),GJr.forEach(t),Blo=r(Owe," \u2014 "),fB=n(Owe,"A",{href:!0});var OJr=s(fB);Ilo=r(OJr,"Speech2TextTokenizer"),OJr.forEach(t),Nlo=r(Owe," (Speech2Text model)"),Owe.forEach(t),qlo=i(S),Jg=n(S,"LI",{});var Vwe=s(Jg);Wae=n(Vwe,"STRONG",{});var VJr=s(Wae);jlo=r(VJr,"speech_to_text_2"),VJr.forEach(t),Dlo=r(Vwe," \u2014 "),mB=n(Vwe,"A",{href:!0});var XJr=s(mB);Glo=r(XJr,"Speech2Text2Tokenizer"),XJr.forEach(t),Olo=r(Vwe," (Speech2Text2 model)"),Vwe.forEach(t),Vlo=i(S),ws=n(S,"LI",{});var B$=s(ws);Qae=n(B$,"STRONG",{});var zJr=s(Qae);Xlo=r(zJr,"splinter"),zJr.forEach(t),zlo=r(B$," \u2014 "),gB=n(B$,"A",{href:!0});var WJr=s(gB);Wlo=r(WJr,"SplinterTokenizer"),WJr.forEach(t),Qlo=r(B$," or "),hB=n(B$,"A",{href:!0});var QJr=s(hB);Hlo=r(QJr,"SplinterTokenizerFast"),QJr.forEach(t),Ulo=r(B$," (Splinter model)"),B$.forEach(t),Jlo=i(S),As=n(S,"LI",{});var I$=s(As);Hae=n(I$,"STRONG",{});var HJr=s(Hae);Ylo=r(HJr,"squeezebert"),HJr.forEach(t),Klo=r(I$," \u2014 "),pB=n(I$,"A",{href:!0});var UJr=s(pB);Zlo=r(UJr,"SqueezeBertTokenizer"),UJr.forEach(t),eio=r(I$," or "),_B=n(I$,"A",{href:!0});var JJr=s(_B);oio=r(JJr,"SqueezeBertTokenizerFast"),JJr.forEach(t),rio=r(I$," (SqueezeBERT model)"),I$.forEach(t),tio=i(S),ys=n(S,"LI",{});var N$=s(ys);Uae=n(N$,"STRONG",{});var YJr=s(Uae);aio=r(YJr,"t5"),YJr.forEach(t),nio=r(N$," \u2014 "),uB=n(N$,"A",{href:!0});var KJr=s(uB);sio=r(KJr,"T5Tokenizer"),KJr.forEach(t),lio=r(N$," or "),bB=n(N$,"A",{href:!0});var ZJr=s(bB);iio=r(ZJr,"T5TokenizerFast"),ZJr.forEach(t),dio=r(N$," (T5 model)"),N$.forEach(t),cio=i(S),Yg=n(S,"LI",{});var Xwe=s(Yg);Jae=n(Xwe,"STRONG",{});var eYr=s(Jae);fio=r(eYr,"tapas"),eYr.forEach(t),mio=r(Xwe," \u2014 "),vB=n(Xwe,"A",{href:!0});var oYr=s(vB);gio=r(oYr,"TapasTokenizer"),oYr.forEach(t),hio=r(Xwe," (TAPAS model)"),Xwe.forEach(t),pio=i(S),Kg=n(S,"LI",{});var zwe=s(Kg);Yae=n(zwe,"STRONG",{});var rYr=s(Yae);_io=r(rYr,"tapex"),rYr.forEach(t),uio=r(zwe," \u2014 "),FB=n(zwe,"A",{href:!0});var tYr=s(FB);bio=r(tYr,"TapexTokenizer"),tYr.forEach(t),vio=r(zwe," (TAPEX model)"),zwe.forEach(t),Fio=i(S),Zg=n(S,"LI",{});var Wwe=s(Zg);Kae=n(Wwe,"STRONG",{});var aYr=s(Kae);Tio=r(aYr,"transfo-xl"),aYr.forEach(t),Mio=r(Wwe," \u2014 "),TB=n(Wwe,"A",{href:!0});var nYr=s(TB);Eio=r(nYr,"TransfoXLTokenizer"),nYr.forEach(t),Cio=r(Wwe," (Transformer-XL model)"),Wwe.forEach(t),wio=i(S),Ls=n(S,"LI",{});var q$=s(Ls);Zae=n(q$,"STRONG",{});var sYr=s(Zae);Aio=r(sYr,"visual_bert"),sYr.forEach(t),yio=r(q$," \u2014 "),MB=n(q$,"A",{href:!0});var lYr=s(MB);Lio=r(lYr,"BertTokenizer"),lYr.forEach(t),xio=r(q$," or "),EB=n(q$,"A",{href:!0});var iYr=s(EB);$io=r(iYr,"BertTokenizerFast"),iYr.forEach(t),kio=r(q$," (VisualBert model)"),q$.forEach(t),Sio=i(S),eh=n(S,"LI",{});var Qwe=s(eh);ene=n(Qwe,"STRONG",{});var dYr=s(ene);Rio=r(dYr,"wav2vec2"),dYr.forEach(t),Pio=r(Qwe," \u2014 "),CB=n(Qwe,"A",{href:!0});var cYr=s(CB);Bio=r(cYr,"Wav2Vec2CTCTokenizer"),cYr.forEach(t),Iio=r(Qwe," (Wav2Vec2 model)"),Qwe.forEach(t),Nio=i(S),oh=n(S,"LI",{});var Hwe=s(oh);one=n(Hwe,"STRONG",{});var fYr=s(one);qio=r(fYr,"wav2vec2-conformer"),fYr.forEach(t),jio=r(Hwe," \u2014 "),wB=n(Hwe,"A",{href:!0});var mYr=s(wB);Dio=r(mYr,"Wav2Vec2CTCTokenizer"),mYr.forEach(t),Gio=r(Hwe," (Wav2Vec2-Conformer model)"),Hwe.forEach(t),Oio=i(S),rh=n(S,"LI",{});var Uwe=s(rh);rne=n(Uwe,"STRONG",{});var gYr=s(rne);Vio=r(gYr,"wav2vec2_phoneme"),gYr.forEach(t),Xio=r(Uwe," \u2014 "),AB=n(Uwe,"A",{href:!0});var hYr=s(AB);zio=r(hYr,"Wav2Vec2PhonemeCTCTokenizer"),hYr.forEach(t),Wio=r(Uwe," (Wav2Vec2Phoneme model)"),Uwe.forEach(t),Qio=i(S),xs=n(S,"LI",{});var j$=s(xs);tne=n(j$,"STRONG",{});var pYr=s(tne);Hio=r(pYr,"xglm"),pYr.forEach(t),Uio=r(j$," \u2014 "),yB=n(j$,"A",{href:!0});var _Yr=s(yB);Jio=r(_Yr,"XGLMTokenizer"),_Yr.forEach(t),Yio=r(j$," or "),LB=n(j$,"A",{href:!0});var uYr=s(LB);Kio=r(uYr,"XGLMTokenizerFast"),uYr.forEach(t),Zio=r(j$," (XGLM model)"),j$.forEach(t),edo=i(S),th=n(S,"LI",{});var Jwe=s(th);ane=n(Jwe,"STRONG",{});var bYr=s(ane);odo=r(bYr,"xlm"),bYr.forEach(t),rdo=r(Jwe," \u2014 "),xB=n(Jwe,"A",{href:!0});var vYr=s(xB);tdo=r(vYr,"XLMTokenizer"),vYr.forEach(t),ado=r(Jwe," (XLM model)"),Jwe.forEach(t),ndo=i(S),ah=n(S,"LI",{});var Ywe=s(ah);nne=n(Ywe,"STRONG",{});var FYr=s(nne);sdo=r(FYr,"xlm-prophetnet"),FYr.forEach(t),ldo=r(Ywe," \u2014 "),$B=n(Ywe,"A",{href:!0});var TYr=s($B);ido=r(TYr,"XLMProphetNetTokenizer"),TYr.forEach(t),ddo=r(Ywe," (XLMProphetNet model)"),Ywe.forEach(t),cdo=i(S),$s=n(S,"LI",{});var D$=s($s);sne=n(D$,"STRONG",{});var MYr=s(sne);fdo=r(MYr,"xlm-roberta"),MYr.forEach(t),mdo=r(D$," \u2014 "),kB=n(D$,"A",{href:!0});var EYr=s(kB);gdo=r(EYr,"XLMRobertaTokenizer"),EYr.forEach(t),hdo=r(D$," or "),SB=n(D$,"A",{href:!0});var CYr=s(SB);pdo=r(CYr,"XLMRobertaTokenizerFast"),CYr.forEach(t),_do=r(D$," (XLM-RoBERTa model)"),D$.forEach(t),udo=i(S),ks=n(S,"LI",{});var G$=s(ks);lne=n(G$,"STRONG",{});var wYr=s(lne);bdo=r(wYr,"xlm-roberta-xl"),wYr.forEach(t),vdo=r(G$," \u2014 "),RB=n(G$,"A",{href:!0});var AYr=s(RB);Fdo=r(AYr,"RobertaTokenizer"),AYr.forEach(t),Tdo=r(G$," or "),PB=n(G$,"A",{href:!0});var yYr=s(PB);Mdo=r(yYr,"RobertaTokenizerFast"),yYr.forEach(t),Edo=r(G$," (XLM-RoBERTa-XL model)"),G$.forEach(t),Cdo=i(S),Ss=n(S,"LI",{});var O$=s(Ss);ine=n(O$,"STRONG",{});var LYr=s(ine);wdo=r(LYr,"xlnet"),LYr.forEach(t),Ado=r(O$," \u2014 "),BB=n(O$,"A",{href:!0});var xYr=s(BB);ydo=r(xYr,"XLNetTokenizer"),xYr.forEach(t),Ldo=r(O$," or "),IB=n(O$,"A",{href:!0});var $Yr=s(IB);xdo=r($Yr,"XLNetTokenizerFast"),$Yr.forEach(t),$do=r(O$," (XLNet model)"),O$.forEach(t),kdo=i(S),Rs=n(S,"LI",{});var V$=s(Rs);dne=n(V$,"STRONG",{});var kYr=s(dne);Sdo=r(kYr,"yoso"),kYr.forEach(t),Rdo=r(V$," \u2014 "),NB=n(V$,"A",{href:!0});var SYr=s(NB);Pdo=r(SYr,"AlbertTokenizer"),SYr.forEach(t),Bdo=r(V$," or "),qB=n(V$,"A",{href:!0});var RYr=s(qB);Ido=r(RYr,"AlbertTokenizerFast"),RYr.forEach(t),Ndo=r(V$," (YOSO model)"),V$.forEach(t),S.forEach(t),qdo=i(qs),T(nh.$$.fragment,qs),qs.forEach(t),jdo=i(Ns),sh=n(Ns,"DIV",{class:!0});var hDe=s(sh);T(OA.$$.fragment,hDe),Ddo=i(hDe),cne=n(hDe,"P",{});var PYr=s(cne);Gdo=r(PYr,"Register a new tokenizer in this mapping."),PYr.forEach(t),hDe.forEach(t),Ns.forEach(t),pqe=i(f),Mi=n(f,"H2",{class:!0});var pDe=s(Mi);lh=n(pDe,"A",{id:!0,class:!0,href:!0});var BYr=s(lh);fne=n(BYr,"SPAN",{});var IYr=s(fne);T(VA.$$.fragment,IYr),IYr.forEach(t),BYr.forEach(t),Odo=i(pDe),mne=n(pDe,"SPAN",{});var NYr=s(mne);Vdo=r(NYr,"AutoFeatureExtractor"),NYr.forEach(t),pDe.forEach(t),_qe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(XA.$$.fragment,js),Xdo=i(js),zA=n(js,"P",{});var _De=s(zA);zdo=r(_De,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),jB=n(_De,"A",{href:!0});var qYr=s(jB);Wdo=r(qYr,"AutoFeatureExtractor.from_pretrained()"),qYr.forEach(t),Qdo=r(_De," class method."),_De.forEach(t),Hdo=i(js),WA=n(js,"P",{});var uDe=s(WA);Udo=r(uDe,"This class cannot be instantiated directly using "),gne=n(uDe,"CODE",{});var jYr=s(gne);Jdo=r(jYr,"__init__()"),jYr.forEach(t),Ydo=r(uDe," (throws an error)."),uDe.forEach(t),Kdo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(QA.$$.fragment,Zt),Zdo=i(Zt),hne=n(Zt,"P",{});var DYr=s(hne);eco=r(DYr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),DYr.forEach(t),oco=i(Zt),ya=n(Zt,"P",{});var Sw=s(ya);rco=r(Sw,"The feature extractor class to instantiate is selected based on the "),pne=n(Sw,"CODE",{});var GYr=s(pne);tco=r(GYr,"model_type"),GYr.forEach(t),aco=r(Sw,` property of the config object
(either passed as an argument or loaded from `),_ne=n(Sw,"CODE",{});var OYr=s(_ne);nco=r(OYr,"pretrained_model_name_or_path"),OYr.forEach(t),sco=r(Sw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),une=n(Sw,"CODE",{});var VYr=s(une);lco=r(VYr,"pretrained_model_name_or_path"),VYr.forEach(t),ico=r(Sw,":"),Sw.forEach(t),dco=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);ih=n(Z,"LI",{});var Kwe=s(ih);bne=n(Kwe,"STRONG",{});var XYr=s(bne);cco=r(XYr,"beit"),XYr.forEach(t),fco=r(Kwe," \u2014 "),DB=n(Kwe,"A",{href:!0});var zYr=s(DB);mco=r(zYr,"BeitFeatureExtractor"),zYr.forEach(t),gco=r(Kwe," (BEiT model)"),Kwe.forEach(t),hco=i(Z),dh=n(Z,"LI",{});var Zwe=s(dh);vne=n(Zwe,"STRONG",{});var WYr=s(vne);pco=r(WYr,"clip"),WYr.forEach(t),_co=r(Zwe," \u2014 "),GB=n(Zwe,"A",{href:!0});var QYr=s(GB);uco=r(QYr,"CLIPFeatureExtractor"),QYr.forEach(t),bco=r(Zwe," (CLIP model)"),Zwe.forEach(t),vco=i(Z),ch=n(Z,"LI",{});var e6e=s(ch);Fne=n(e6e,"STRONG",{});var HYr=s(Fne);Fco=r(HYr,"convnext"),HYr.forEach(t),Tco=r(e6e," \u2014 "),OB=n(e6e,"A",{href:!0});var UYr=s(OB);Mco=r(UYr,"ConvNextFeatureExtractor"),UYr.forEach(t),Eco=r(e6e," (ConvNext model)"),e6e.forEach(t),Cco=i(Z),fh=n(Z,"LI",{});var o6e=s(fh);Tne=n(o6e,"STRONG",{});var JYr=s(Tne);wco=r(JYr,"cvt"),JYr.forEach(t),Aco=r(o6e," \u2014 "),VB=n(o6e,"A",{href:!0});var YYr=s(VB);yco=r(YYr,"ConvNextFeatureExtractor"),YYr.forEach(t),Lco=r(o6e," (CvT model)"),o6e.forEach(t),xco=i(Z),mh=n(Z,"LI",{});var r6e=s(mh);Mne=n(r6e,"STRONG",{});var KYr=s(Mne);$co=r(KYr,"data2vec-audio"),KYr.forEach(t),kco=r(r6e," \u2014 "),XB=n(r6e,"A",{href:!0});var ZYr=s(XB);Sco=r(ZYr,"Wav2Vec2FeatureExtractor"),ZYr.forEach(t),Rco=r(r6e," (Data2VecAudio model)"),r6e.forEach(t),Pco=i(Z),gh=n(Z,"LI",{});var t6e=s(gh);Ene=n(t6e,"STRONG",{});var eKr=s(Ene);Bco=r(eKr,"data2vec-vision"),eKr.forEach(t),Ico=r(t6e," \u2014 "),zB=n(t6e,"A",{href:!0});var oKr=s(zB);Nco=r(oKr,"BeitFeatureExtractor"),oKr.forEach(t),qco=r(t6e," (Data2VecVision model)"),t6e.forEach(t),jco=i(Z),hh=n(Z,"LI",{});var a6e=s(hh);Cne=n(a6e,"STRONG",{});var rKr=s(Cne);Dco=r(rKr,"deit"),rKr.forEach(t),Gco=r(a6e," \u2014 "),WB=n(a6e,"A",{href:!0});var tKr=s(WB);Oco=r(tKr,"DeiTFeatureExtractor"),tKr.forEach(t),Vco=r(a6e," (DeiT model)"),a6e.forEach(t),Xco=i(Z),ph=n(Z,"LI",{});var n6e=s(ph);wne=n(n6e,"STRONG",{});var aKr=s(wne);zco=r(aKr,"detr"),aKr.forEach(t),Wco=r(n6e," \u2014 "),QB=n(n6e,"A",{href:!0});var nKr=s(QB);Qco=r(nKr,"DetrFeatureExtractor"),nKr.forEach(t),Hco=r(n6e," (DETR model)"),n6e.forEach(t),Uco=i(Z),_h=n(Z,"LI",{});var s6e=s(_h);Ane=n(s6e,"STRONG",{});var sKr=s(Ane);Jco=r(sKr,"dpt"),sKr.forEach(t),Yco=r(s6e," \u2014 "),HB=n(s6e,"A",{href:!0});var lKr=s(HB);Kco=r(lKr,"DPTFeatureExtractor"),lKr.forEach(t),Zco=r(s6e," (DPT model)"),s6e.forEach(t),efo=i(Z),uh=n(Z,"LI",{});var l6e=s(uh);yne=n(l6e,"STRONG",{});var iKr=s(yne);ofo=r(iKr,"flava"),iKr.forEach(t),rfo=r(l6e," \u2014 "),UB=n(l6e,"A",{href:!0});var dKr=s(UB);tfo=r(dKr,"FlavaFeatureExtractor"),dKr.forEach(t),afo=r(l6e," (Flava model)"),l6e.forEach(t),nfo=i(Z),bh=n(Z,"LI",{});var i6e=s(bh);Lne=n(i6e,"STRONG",{});var cKr=s(Lne);sfo=r(cKr,"glpn"),cKr.forEach(t),lfo=r(i6e," \u2014 "),JB=n(i6e,"A",{href:!0});var fKr=s(JB);ifo=r(fKr,"GLPNFeatureExtractor"),fKr.forEach(t),dfo=r(i6e," (GLPN model)"),i6e.forEach(t),cfo=i(Z),vh=n(Z,"LI",{});var d6e=s(vh);xne=n(d6e,"STRONG",{});var mKr=s(xne);ffo=r(mKr,"hubert"),mKr.forEach(t),mfo=r(d6e," \u2014 "),YB=n(d6e,"A",{href:!0});var gKr=s(YB);gfo=r(gKr,"Wav2Vec2FeatureExtractor"),gKr.forEach(t),hfo=r(d6e," (Hubert model)"),d6e.forEach(t),pfo=i(Z),Fh=n(Z,"LI",{});var c6e=s(Fh);$ne=n(c6e,"STRONG",{});var hKr=s($ne);_fo=r(hKr,"imagegpt"),hKr.forEach(t),ufo=r(c6e," \u2014 "),KB=n(c6e,"A",{href:!0});var pKr=s(KB);bfo=r(pKr,"ImageGPTFeatureExtractor"),pKr.forEach(t),vfo=r(c6e," (ImageGPT model)"),c6e.forEach(t),Ffo=i(Z),Th=n(Z,"LI",{});var f6e=s(Th);kne=n(f6e,"STRONG",{});var _Kr=s(kne);Tfo=r(_Kr,"layoutlmv2"),_Kr.forEach(t),Mfo=r(f6e," \u2014 "),ZB=n(f6e,"A",{href:!0});var uKr=s(ZB);Efo=r(uKr,"LayoutLMv2FeatureExtractor"),uKr.forEach(t),Cfo=r(f6e," (LayoutLMv2 model)"),f6e.forEach(t),wfo=i(Z),Mh=n(Z,"LI",{});var m6e=s(Mh);Sne=n(m6e,"STRONG",{});var bKr=s(Sne);Afo=r(bKr,"layoutlmv3"),bKr.forEach(t),yfo=r(m6e," \u2014 "),eI=n(m6e,"A",{href:!0});var vKr=s(eI);Lfo=r(vKr,"LayoutLMv3FeatureExtractor"),vKr.forEach(t),xfo=r(m6e," (LayoutLMv3 model)"),m6e.forEach(t),$fo=i(Z),Eh=n(Z,"LI",{});var g6e=s(Eh);Rne=n(g6e,"STRONG",{});var FKr=s(Rne);kfo=r(FKr,"maskformer"),FKr.forEach(t),Sfo=r(g6e," \u2014 "),oI=n(g6e,"A",{href:!0});var TKr=s(oI);Rfo=r(TKr,"MaskFormerFeatureExtractor"),TKr.forEach(t),Pfo=r(g6e," (MaskFormer model)"),g6e.forEach(t),Bfo=i(Z),Ch=n(Z,"LI",{});var h6e=s(Ch);Pne=n(h6e,"STRONG",{});var MKr=s(Pne);Ifo=r(MKr,"perceiver"),MKr.forEach(t),Nfo=r(h6e," \u2014 "),rI=n(h6e,"A",{href:!0});var EKr=s(rI);qfo=r(EKr,"PerceiverFeatureExtractor"),EKr.forEach(t),jfo=r(h6e," (Perceiver model)"),h6e.forEach(t),Dfo=i(Z),wh=n(Z,"LI",{});var p6e=s(wh);Bne=n(p6e,"STRONG",{});var CKr=s(Bne);Gfo=r(CKr,"poolformer"),CKr.forEach(t),Ofo=r(p6e," \u2014 "),tI=n(p6e,"A",{href:!0});var wKr=s(tI);Vfo=r(wKr,"PoolFormerFeatureExtractor"),wKr.forEach(t),Xfo=r(p6e," (PoolFormer model)"),p6e.forEach(t),zfo=i(Z),Ah=n(Z,"LI",{});var _6e=s(Ah);Ine=n(_6e,"STRONG",{});var AKr=s(Ine);Wfo=r(AKr,"regnet"),AKr.forEach(t),Qfo=r(_6e," \u2014 "),aI=n(_6e,"A",{href:!0});var yKr=s(aI);Hfo=r(yKr,"ConvNextFeatureExtractor"),yKr.forEach(t),Ufo=r(_6e," (RegNet model)"),_6e.forEach(t),Jfo=i(Z),yh=n(Z,"LI",{});var u6e=s(yh);Nne=n(u6e,"STRONG",{});var LKr=s(Nne);Yfo=r(LKr,"resnet"),LKr.forEach(t),Kfo=r(u6e," \u2014 "),nI=n(u6e,"A",{href:!0});var xKr=s(nI);Zfo=r(xKr,"ConvNextFeatureExtractor"),xKr.forEach(t),emo=r(u6e," (ResNet model)"),u6e.forEach(t),omo=i(Z),Lh=n(Z,"LI",{});var b6e=s(Lh);qne=n(b6e,"STRONG",{});var $Kr=s(qne);rmo=r($Kr,"segformer"),$Kr.forEach(t),tmo=r(b6e," \u2014 "),sI=n(b6e,"A",{href:!0});var kKr=s(sI);amo=r(kKr,"SegformerFeatureExtractor"),kKr.forEach(t),nmo=r(b6e," (SegFormer model)"),b6e.forEach(t),smo=i(Z),xh=n(Z,"LI",{});var v6e=s(xh);jne=n(v6e,"STRONG",{});var SKr=s(jne);lmo=r(SKr,"speech_to_text"),SKr.forEach(t),imo=r(v6e," \u2014 "),lI=n(v6e,"A",{href:!0});var RKr=s(lI);dmo=r(RKr,"Speech2TextFeatureExtractor"),RKr.forEach(t),cmo=r(v6e," (Speech2Text model)"),v6e.forEach(t),fmo=i(Z),$h=n(Z,"LI",{});var F6e=s($h);Dne=n(F6e,"STRONG",{});var PKr=s(Dne);mmo=r(PKr,"swin"),PKr.forEach(t),gmo=r(F6e," \u2014 "),iI=n(F6e,"A",{href:!0});var BKr=s(iI);hmo=r(BKr,"ViTFeatureExtractor"),BKr.forEach(t),pmo=r(F6e," (Swin model)"),F6e.forEach(t),_mo=i(Z),kh=n(Z,"LI",{});var T6e=s(kh);Gne=n(T6e,"STRONG",{});var IKr=s(Gne);umo=r(IKr,"van"),IKr.forEach(t),bmo=r(T6e," \u2014 "),dI=n(T6e,"A",{href:!0});var NKr=s(dI);vmo=r(NKr,"ConvNextFeatureExtractor"),NKr.forEach(t),Fmo=r(T6e," (VAN model)"),T6e.forEach(t),Tmo=i(Z),Sh=n(Z,"LI",{});var M6e=s(Sh);One=n(M6e,"STRONG",{});var qKr=s(One);Mmo=r(qKr,"vit"),qKr.forEach(t),Emo=r(M6e," \u2014 "),cI=n(M6e,"A",{href:!0});var jKr=s(cI);Cmo=r(jKr,"ViTFeatureExtractor"),jKr.forEach(t),wmo=r(M6e," (ViT model)"),M6e.forEach(t),Amo=i(Z),Rh=n(Z,"LI",{});var E6e=s(Rh);Vne=n(E6e,"STRONG",{});var DKr=s(Vne);ymo=r(DKr,"vit_mae"),DKr.forEach(t),Lmo=r(E6e," \u2014 "),fI=n(E6e,"A",{href:!0});var GKr=s(fI);xmo=r(GKr,"ViTFeatureExtractor"),GKr.forEach(t),$mo=r(E6e," (ViTMAE model)"),E6e.forEach(t),kmo=i(Z),Ph=n(Z,"LI",{});var C6e=s(Ph);Xne=n(C6e,"STRONG",{});var OKr=s(Xne);Smo=r(OKr,"wav2vec2"),OKr.forEach(t),Rmo=r(C6e," \u2014 "),mI=n(C6e,"A",{href:!0});var VKr=s(mI);Pmo=r(VKr,"Wav2Vec2FeatureExtractor"),VKr.forEach(t),Bmo=r(C6e," (Wav2Vec2 model)"),C6e.forEach(t),Imo=i(Z),Bh=n(Z,"LI",{});var w6e=s(Bh);zne=n(w6e,"STRONG",{});var XKr=s(zne);Nmo=r(XKr,"wav2vec2-conformer"),XKr.forEach(t),qmo=r(w6e," \u2014 "),gI=n(w6e,"A",{href:!0});var zKr=s(gI);jmo=r(zKr,"Wav2Vec2FeatureExtractor"),zKr.forEach(t),Dmo=r(w6e," (Wav2Vec2-Conformer model)"),w6e.forEach(t),Gmo=i(Z),Ih=n(Z,"LI",{});var A6e=s(Ih);Wne=n(A6e,"STRONG",{});var WKr=s(Wne);Omo=r(WKr,"yolos"),WKr.forEach(t),Vmo=r(A6e," \u2014 "),hI=n(A6e,"A",{href:!0});var QKr=s(hI);Xmo=r(QKr,"YolosFeatureExtractor"),QKr.forEach(t),zmo=r(A6e," (YOLOS model)"),A6e.forEach(t),Z.forEach(t),Wmo=i(Zt),T(Nh.$$.fragment,Zt),Qmo=i(Zt),T(qh.$$.fragment,Zt),Zt.forEach(t),Hmo=i(js),jh=n(js,"DIV",{class:!0});var bDe=s(jh);T(HA.$$.fragment,bDe),Umo=i(bDe),Qne=n(bDe,"P",{});var HKr=s(Qne);Jmo=r(HKr,"Register a new feature extractor for this class."),HKr.forEach(t),bDe.forEach(t),js.forEach(t),uqe=i(f),Ei=n(f,"H2",{class:!0});var vDe=s(Ei);Dh=n(vDe,"A",{id:!0,class:!0,href:!0});var UKr=s(Dh);Hne=n(UKr,"SPAN",{});var JKr=s(Hne);T(UA.$$.fragment,JKr),JKr.forEach(t),UKr.forEach(t),Ymo=i(vDe),Une=n(vDe,"SPAN",{});var YKr=s(Une);Kmo=r(YKr,"AutoProcessor"),YKr.forEach(t),vDe.forEach(t),bqe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(JA.$$.fragment,Ds),Zmo=i(Ds),YA=n(Ds,"P",{});var FDe=s(YA);ego=r(FDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),pI=n(FDe,"A",{href:!0});var KKr=s(pI);ogo=r(KKr,"AutoProcessor.from_pretrained()"),KKr.forEach(t),rgo=r(FDe," class method."),FDe.forEach(t),tgo=i(Ds),KA=n(Ds,"P",{});var TDe=s(KA);ago=r(TDe,"This class cannot be instantiated directly using "),Jne=n(TDe,"CODE",{});var ZKr=s(Jne);ngo=r(ZKr,"__init__()"),ZKr.forEach(t),sgo=r(TDe," (throws an error)."),TDe.forEach(t),lgo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(ZA.$$.fragment,ea),igo=i(ea),Yne=n(ea,"P",{});var eZr=s(Yne);dgo=r(eZr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),eZr.forEach(t),cgo=i(ea),Ci=n(ea,"P",{});var bZ=s(Ci);fgo=r(bZ,"The processor class to instantiate is selected based on the "),Kne=n(bZ,"CODE",{});var oZr=s(Kne);mgo=r(oZr,"model_type"),oZr.forEach(t),ggo=r(bZ,` property of the config object (either
passed as an argument or loaded from `),Zne=n(bZ,"CODE",{});var rZr=s(Zne);hgo=r(rZr,"pretrained_model_name_or_path"),rZr.forEach(t),pgo=r(bZ," if possible):"),bZ.forEach(t),_go=i(ea),he=n(ea,"UL",{});var ue=s(he);Gh=n(ue,"LI",{});var y6e=s(Gh);ese=n(y6e,"STRONG",{});var tZr=s(ese);ugo=r(tZr,"clip"),tZr.forEach(t),bgo=r(y6e," \u2014 "),_I=n(y6e,"A",{href:!0});var aZr=s(_I);vgo=r(aZr,"CLIPProcessor"),aZr.forEach(t),Fgo=r(y6e," (CLIP model)"),y6e.forEach(t),Tgo=i(ue),Oh=n(ue,"LI",{});var L6e=s(Oh);ose=n(L6e,"STRONG",{});var nZr=s(ose);Mgo=r(nZr,"flava"),nZr.forEach(t),Ego=r(L6e," \u2014 "),rse=n(L6e,"CODE",{});var sZr=s(rse);Cgo=r(sZr,"FLAVAProcessor"),sZr.forEach(t),wgo=r(L6e," (Flava model)"),L6e.forEach(t),Ago=i(ue),Vh=n(ue,"LI",{});var x6e=s(Vh);tse=n(x6e,"STRONG",{});var lZr=s(tse);ygo=r(lZr,"layoutlmv2"),lZr.forEach(t),Lgo=r(x6e," \u2014 "),uI=n(x6e,"A",{href:!0});var iZr=s(uI);xgo=r(iZr,"LayoutLMv2Processor"),iZr.forEach(t),$go=r(x6e," (LayoutLMv2 model)"),x6e.forEach(t),kgo=i(ue),Xh=n(ue,"LI",{});var $6e=s(Xh);ase=n($6e,"STRONG",{});var dZr=s(ase);Sgo=r(dZr,"layoutlmv3"),dZr.forEach(t),Rgo=r($6e," \u2014 "),bI=n($6e,"A",{href:!0});var cZr=s(bI);Pgo=r(cZr,"LayoutLMv3Processor"),cZr.forEach(t),Bgo=r($6e," (LayoutLMv3 model)"),$6e.forEach(t),Igo=i(ue),zh=n(ue,"LI",{});var k6e=s(zh);nse=n(k6e,"STRONG",{});var fZr=s(nse);Ngo=r(fZr,"layoutxlm"),fZr.forEach(t),qgo=r(k6e," \u2014 "),vI=n(k6e,"A",{href:!0});var mZr=s(vI);jgo=r(mZr,"LayoutXLMProcessor"),mZr.forEach(t),Dgo=r(k6e," (LayoutXLM model)"),k6e.forEach(t),Ggo=i(ue),Wh=n(ue,"LI",{});var S6e=s(Wh);sse=n(S6e,"STRONG",{});var gZr=s(sse);Ogo=r(gZr,"sew"),gZr.forEach(t),Vgo=r(S6e," \u2014 "),FI=n(S6e,"A",{href:!0});var hZr=s(FI);Xgo=r(hZr,"Wav2Vec2Processor"),hZr.forEach(t),zgo=r(S6e," (SEW model)"),S6e.forEach(t),Wgo=i(ue),Qh=n(ue,"LI",{});var R6e=s(Qh);lse=n(R6e,"STRONG",{});var pZr=s(lse);Qgo=r(pZr,"sew-d"),pZr.forEach(t),Hgo=r(R6e," \u2014 "),TI=n(R6e,"A",{href:!0});var _Zr=s(TI);Ugo=r(_Zr,"Wav2Vec2Processor"),_Zr.forEach(t),Jgo=r(R6e," (SEW-D model)"),R6e.forEach(t),Ygo=i(ue),Hh=n(ue,"LI",{});var P6e=s(Hh);ise=n(P6e,"STRONG",{});var uZr=s(ise);Kgo=r(uZr,"speech_to_text"),uZr.forEach(t),Zgo=r(P6e," \u2014 "),MI=n(P6e,"A",{href:!0});var bZr=s(MI);eho=r(bZr,"Speech2TextProcessor"),bZr.forEach(t),oho=r(P6e," (Speech2Text model)"),P6e.forEach(t),rho=i(ue),Uh=n(ue,"LI",{});var B6e=s(Uh);dse=n(B6e,"STRONG",{});var vZr=s(dse);tho=r(vZr,"speech_to_text_2"),vZr.forEach(t),aho=r(B6e," \u2014 "),EI=n(B6e,"A",{href:!0});var FZr=s(EI);nho=r(FZr,"Speech2Text2Processor"),FZr.forEach(t),sho=r(B6e," (Speech2Text2 model)"),B6e.forEach(t),lho=i(ue),Jh=n(ue,"LI",{});var I6e=s(Jh);cse=n(I6e,"STRONG",{});var TZr=s(cse);iho=r(TZr,"trocr"),TZr.forEach(t),dho=r(I6e," \u2014 "),CI=n(I6e,"A",{href:!0});var MZr=s(CI);cho=r(MZr,"TrOCRProcessor"),MZr.forEach(t),fho=r(I6e," (TrOCR model)"),I6e.forEach(t),mho=i(ue),Yh=n(ue,"LI",{});var N6e=s(Yh);fse=n(N6e,"STRONG",{});var EZr=s(fse);gho=r(EZr,"unispeech"),EZr.forEach(t),hho=r(N6e," \u2014 "),wI=n(N6e,"A",{href:!0});var CZr=s(wI);pho=r(CZr,"Wav2Vec2Processor"),CZr.forEach(t),_ho=r(N6e," (UniSpeech model)"),N6e.forEach(t),uho=i(ue),Kh=n(ue,"LI",{});var q6e=s(Kh);mse=n(q6e,"STRONG",{});var wZr=s(mse);bho=r(wZr,"unispeech-sat"),wZr.forEach(t),vho=r(q6e," \u2014 "),AI=n(q6e,"A",{href:!0});var AZr=s(AI);Fho=r(AZr,"Wav2Vec2Processor"),AZr.forEach(t),Tho=r(q6e," (UniSpeechSat model)"),q6e.forEach(t),Mho=i(ue),Zh=n(ue,"LI",{});var j6e=s(Zh);gse=n(j6e,"STRONG",{});var yZr=s(gse);Eho=r(yZr,"vilt"),yZr.forEach(t),Cho=r(j6e," \u2014 "),yI=n(j6e,"A",{href:!0});var LZr=s(yI);who=r(LZr,"ViltProcessor"),LZr.forEach(t),Aho=r(j6e," (ViLT model)"),j6e.forEach(t),yho=i(ue),ep=n(ue,"LI",{});var D6e=s(ep);hse=n(D6e,"STRONG",{});var xZr=s(hse);Lho=r(xZr,"vision-text-dual-encoder"),xZr.forEach(t),xho=r(D6e," \u2014 "),LI=n(D6e,"A",{href:!0});var $Zr=s(LI);$ho=r($Zr,"VisionTextDualEncoderProcessor"),$Zr.forEach(t),kho=r(D6e," (VisionTextDualEncoder model)"),D6e.forEach(t),Sho=i(ue),op=n(ue,"LI",{});var G6e=s(op);pse=n(G6e,"STRONG",{});var kZr=s(pse);Rho=r(kZr,"wav2vec2"),kZr.forEach(t),Pho=r(G6e," \u2014 "),xI=n(G6e,"A",{href:!0});var SZr=s(xI);Bho=r(SZr,"Wav2Vec2Processor"),SZr.forEach(t),Iho=r(G6e," (Wav2Vec2 model)"),G6e.forEach(t),Nho=i(ue),rp=n(ue,"LI",{});var O6e=s(rp);_se=n(O6e,"STRONG",{});var RZr=s(_se);qho=r(RZr,"wav2vec2-conformer"),RZr.forEach(t),jho=r(O6e," \u2014 "),$I=n(O6e,"A",{href:!0});var PZr=s($I);Dho=r(PZr,"Wav2Vec2Processor"),PZr.forEach(t),Gho=r(O6e," (Wav2Vec2-Conformer model)"),O6e.forEach(t),Oho=i(ue),tp=n(ue,"LI",{});var V6e=s(tp);use=n(V6e,"STRONG",{});var BZr=s(use);Vho=r(BZr,"wavlm"),BZr.forEach(t),Xho=r(V6e," \u2014 "),kI=n(V6e,"A",{href:!0});var IZr=s(kI);zho=r(IZr,"Wav2Vec2Processor"),IZr.forEach(t),Who=r(V6e," (WavLM model)"),V6e.forEach(t),ue.forEach(t),Qho=i(ea),T(ap.$$.fragment,ea),Hho=i(ea),T(np.$$.fragment,ea),ea.forEach(t),Uho=i(Ds),sp=n(Ds,"DIV",{class:!0});var MDe=s(sp);T(ey.$$.fragment,MDe),Jho=i(MDe),bse=n(MDe,"P",{});var NZr=s(bse);Yho=r(NZr,"Register a new processor for this class."),NZr.forEach(t),MDe.forEach(t),Ds.forEach(t),vqe=i(f),wi=n(f,"H2",{class:!0});var EDe=s(wi);lp=n(EDe,"A",{id:!0,class:!0,href:!0});var qZr=s(lp);vse=n(qZr,"SPAN",{});var jZr=s(vse);T(oy.$$.fragment,jZr),jZr.forEach(t),qZr.forEach(t),Kho=i(EDe),Fse=n(EDe,"SPAN",{});var DZr=s(Fse);Zho=r(DZr,"AutoModel"),DZr.forEach(t),EDe.forEach(t),Fqe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(ry.$$.fragment,Gs),epo=i(Gs),Ai=n(Gs,"P",{});var vZ=s(Ai);opo=r(vZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SI=n(vZ,"A",{href:!0});var GZr=s(SI);rpo=r(GZr,"from_pretrained()"),GZr.forEach(t),tpo=r(vZ," class method or the "),RI=n(vZ,"A",{href:!0});var OZr=s(RI);apo=r(OZr,"from_config()"),OZr.forEach(t),npo=r(vZ,` class
method.`),vZ.forEach(t),spo=i(Gs),ty=n(Gs,"P",{});var CDe=s(ty);lpo=r(CDe,"This class cannot be instantiated directly using "),Tse=n(CDe,"CODE",{});var VZr=s(Tse);ipo=r(VZr,"__init__()"),VZr.forEach(t),dpo=r(CDe," (throws an error)."),CDe.forEach(t),cpo=i(Gs),tt=n(Gs,"DIV",{class:!0});var Rw=s(tt);T(ay.$$.fragment,Rw),fpo=i(Rw),Mse=n(Rw,"P",{});var XZr=s(Mse);mpo=r(XZr,"Instantiates one of the base model classes of the library from a configuration."),XZr.forEach(t),gpo=i(Rw),yi=n(Rw,"P",{});var FZ=s(yi);hpo=r(FZ,`Note:
Loading a model from its configuration file does `),Ese=n(FZ,"STRONG",{});var zZr=s(Ese);ppo=r(zZr,"not"),zZr.forEach(t),_po=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PI=n(FZ,"A",{href:!0});var WZr=s(PI);upo=r(WZr,"from_pretrained()"),WZr.forEach(t),bpo=r(FZ," to load the model weights."),FZ.forEach(t),vpo=i(Rw),T(ip.$$.fragment,Rw),Rw.forEach(t),Fpo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(ny.$$.fragment,oa),Tpo=i(oa),Cse=n(oa,"P",{});var QZr=s(Cse);Mpo=r(QZr,"Instantiate one of the base model classes of the library from a pretrained model."),QZr.forEach(t),Epo=i(oa),La=n(oa,"P",{});var Pw=s(La);Cpo=r(Pw,"The model class to instantiate is selected based on the "),wse=n(Pw,"CODE",{});var HZr=s(wse);wpo=r(HZr,"model_type"),HZr.forEach(t),Apo=r(Pw,` property of the config object (either
passed as an argument or loaded from `),Ase=n(Pw,"CODE",{});var UZr=s(Ase);ypo=r(UZr,"pretrained_model_name_or_path"),UZr.forEach(t),Lpo=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yse=n(Pw,"CODE",{});var JZr=s(yse);xpo=r(JZr,"pretrained_model_name_or_path"),JZr.forEach(t),$po=r(Pw,":"),Pw.forEach(t),kpo=i(oa),x=n(oa,"UL",{});var $=s(x);dp=n($,"LI",{});var X6e=s(dp);Lse=n(X6e,"STRONG",{});var YZr=s(Lse);Spo=r(YZr,"albert"),YZr.forEach(t),Rpo=r(X6e," \u2014 "),BI=n(X6e,"A",{href:!0});var KZr=s(BI);Ppo=r(KZr,"AlbertModel"),KZr.forEach(t),Bpo=r(X6e," (ALBERT model)"),X6e.forEach(t),Ipo=i($),cp=n($,"LI",{});var z6e=s(cp);xse=n(z6e,"STRONG",{});var ZZr=s(xse);Npo=r(ZZr,"bart"),ZZr.forEach(t),qpo=r(z6e," \u2014 "),II=n(z6e,"A",{href:!0});var eet=s(II);jpo=r(eet,"BartModel"),eet.forEach(t),Dpo=r(z6e," (BART model)"),z6e.forEach(t),Gpo=i($),fp=n($,"LI",{});var W6e=s(fp);$se=n(W6e,"STRONG",{});var oet=s($se);Opo=r(oet,"beit"),oet.forEach(t),Vpo=r(W6e," \u2014 "),NI=n(W6e,"A",{href:!0});var ret=s(NI);Xpo=r(ret,"BeitModel"),ret.forEach(t),zpo=r(W6e," (BEiT model)"),W6e.forEach(t),Wpo=i($),mp=n($,"LI",{});var Q6e=s(mp);kse=n(Q6e,"STRONG",{});var tet=s(kse);Qpo=r(tet,"bert"),tet.forEach(t),Hpo=r(Q6e," \u2014 "),qI=n(Q6e,"A",{href:!0});var aet=s(qI);Upo=r(aet,"BertModel"),aet.forEach(t),Jpo=r(Q6e," (BERT model)"),Q6e.forEach(t),Ypo=i($),gp=n($,"LI",{});var H6e=s(gp);Sse=n(H6e,"STRONG",{});var net=s(Sse);Kpo=r(net,"bert-generation"),net.forEach(t),Zpo=r(H6e," \u2014 "),jI=n(H6e,"A",{href:!0});var set=s(jI);e_o=r(set,"BertGenerationEncoder"),set.forEach(t),o_o=r(H6e," (Bert Generation model)"),H6e.forEach(t),r_o=i($),hp=n($,"LI",{});var U6e=s(hp);Rse=n(U6e,"STRONG",{});var iet=s(Rse);t_o=r(iet,"big_bird"),iet.forEach(t),a_o=r(U6e," \u2014 "),DI=n(U6e,"A",{href:!0});var det=s(DI);n_o=r(det,"BigBirdModel"),det.forEach(t),s_o=r(U6e," (BigBird model)"),U6e.forEach(t),l_o=i($),pp=n($,"LI",{});var J6e=s(pp);Pse=n(J6e,"STRONG",{});var cet=s(Pse);i_o=r(cet,"bigbird_pegasus"),cet.forEach(t),d_o=r(J6e," \u2014 "),GI=n(J6e,"A",{href:!0});var fet=s(GI);c_o=r(fet,"BigBirdPegasusModel"),fet.forEach(t),f_o=r(J6e," (BigBirdPegasus model)"),J6e.forEach(t),m_o=i($),_p=n($,"LI",{});var Y6e=s(_p);Bse=n(Y6e,"STRONG",{});var met=s(Bse);g_o=r(met,"blenderbot"),met.forEach(t),h_o=r(Y6e," \u2014 "),OI=n(Y6e,"A",{href:!0});var get=s(OI);p_o=r(get,"BlenderbotModel"),get.forEach(t),__o=r(Y6e," (Blenderbot model)"),Y6e.forEach(t),u_o=i($),up=n($,"LI",{});var K6e=s(up);Ise=n(K6e,"STRONG",{});var het=s(Ise);b_o=r(het,"blenderbot-small"),het.forEach(t),v_o=r(K6e," \u2014 "),VI=n(K6e,"A",{href:!0});var pet=s(VI);F_o=r(pet,"BlenderbotSmallModel"),pet.forEach(t),T_o=r(K6e," (BlenderbotSmall model)"),K6e.forEach(t),M_o=i($),bp=n($,"LI",{});var Z6e=s(bp);Nse=n(Z6e,"STRONG",{});var _et=s(Nse);E_o=r(_et,"camembert"),_et.forEach(t),C_o=r(Z6e," \u2014 "),XI=n(Z6e,"A",{href:!0});var uet=s(XI);w_o=r(uet,"CamembertModel"),uet.forEach(t),A_o=r(Z6e," (CamemBERT model)"),Z6e.forEach(t),y_o=i($),vp=n($,"LI",{});var eAe=s(vp);qse=n(eAe,"STRONG",{});var bet=s(qse);L_o=r(bet,"canine"),bet.forEach(t),x_o=r(eAe," \u2014 "),zI=n(eAe,"A",{href:!0});var vet=s(zI);$_o=r(vet,"CanineModel"),vet.forEach(t),k_o=r(eAe," (Canine model)"),eAe.forEach(t),S_o=i($),Fp=n($,"LI",{});var oAe=s(Fp);jse=n(oAe,"STRONG",{});var Fet=s(jse);R_o=r(Fet,"clip"),Fet.forEach(t),P_o=r(oAe," \u2014 "),WI=n(oAe,"A",{href:!0});var Tet=s(WI);B_o=r(Tet,"CLIPModel"),Tet.forEach(t),I_o=r(oAe," (CLIP model)"),oAe.forEach(t),N_o=i($),Tp=n($,"LI",{});var rAe=s(Tp);Dse=n(rAe,"STRONG",{});var Met=s(Dse);q_o=r(Met,"convbert"),Met.forEach(t),j_o=r(rAe," \u2014 "),QI=n(rAe,"A",{href:!0});var Eet=s(QI);D_o=r(Eet,"ConvBertModel"),Eet.forEach(t),G_o=r(rAe," (ConvBERT model)"),rAe.forEach(t),O_o=i($),Mp=n($,"LI",{});var tAe=s(Mp);Gse=n(tAe,"STRONG",{});var Cet=s(Gse);V_o=r(Cet,"convnext"),Cet.forEach(t),X_o=r(tAe," \u2014 "),HI=n(tAe,"A",{href:!0});var wet=s(HI);z_o=r(wet,"ConvNextModel"),wet.forEach(t),W_o=r(tAe," (ConvNext model)"),tAe.forEach(t),Q_o=i($),Ep=n($,"LI",{});var aAe=s(Ep);Ose=n(aAe,"STRONG",{});var Aet=s(Ose);H_o=r(Aet,"ctrl"),Aet.forEach(t),U_o=r(aAe," \u2014 "),UI=n(aAe,"A",{href:!0});var yet=s(UI);J_o=r(yet,"CTRLModel"),yet.forEach(t),Y_o=r(aAe," (CTRL model)"),aAe.forEach(t),K_o=i($),Cp=n($,"LI",{});var nAe=s(Cp);Vse=n(nAe,"STRONG",{});var Let=s(Vse);Z_o=r(Let,"cvt"),Let.forEach(t),euo=r(nAe," \u2014 "),JI=n(nAe,"A",{href:!0});var xet=s(JI);ouo=r(xet,"CvtModel"),xet.forEach(t),ruo=r(nAe," (CvT model)"),nAe.forEach(t),tuo=i($),wp=n($,"LI",{});var sAe=s(wp);Xse=n(sAe,"STRONG",{});var $et=s(Xse);auo=r($et,"data2vec-audio"),$et.forEach(t),nuo=r(sAe," \u2014 "),YI=n(sAe,"A",{href:!0});var ket=s(YI);suo=r(ket,"Data2VecAudioModel"),ket.forEach(t),luo=r(sAe," (Data2VecAudio model)"),sAe.forEach(t),iuo=i($),Ap=n($,"LI",{});var lAe=s(Ap);zse=n(lAe,"STRONG",{});var Set=s(zse);duo=r(Set,"data2vec-text"),Set.forEach(t),cuo=r(lAe," \u2014 "),KI=n(lAe,"A",{href:!0});var Ret=s(KI);fuo=r(Ret,"Data2VecTextModel"),Ret.forEach(t),muo=r(lAe," (Data2VecText model)"),lAe.forEach(t),guo=i($),yp=n($,"LI",{});var iAe=s(yp);Wse=n(iAe,"STRONG",{});var Pet=s(Wse);huo=r(Pet,"data2vec-vision"),Pet.forEach(t),puo=r(iAe," \u2014 "),ZI=n(iAe,"A",{href:!0});var Bet=s(ZI);_uo=r(Bet,"Data2VecVisionModel"),Bet.forEach(t),uuo=r(iAe," (Data2VecVision model)"),iAe.forEach(t),buo=i($),Lp=n($,"LI",{});var dAe=s(Lp);Qse=n(dAe,"STRONG",{});var Iet=s(Qse);vuo=r(Iet,"deberta"),Iet.forEach(t),Fuo=r(dAe," \u2014 "),eN=n(dAe,"A",{href:!0});var Net=s(eN);Tuo=r(Net,"DebertaModel"),Net.forEach(t),Muo=r(dAe," (DeBERTa model)"),dAe.forEach(t),Euo=i($),xp=n($,"LI",{});var cAe=s(xp);Hse=n(cAe,"STRONG",{});var qet=s(Hse);Cuo=r(qet,"deberta-v2"),qet.forEach(t),wuo=r(cAe," \u2014 "),oN=n(cAe,"A",{href:!0});var jet=s(oN);Auo=r(jet,"DebertaV2Model"),jet.forEach(t),yuo=r(cAe," (DeBERTa-v2 model)"),cAe.forEach(t),Luo=i($),$p=n($,"LI",{});var fAe=s($p);Use=n(fAe,"STRONG",{});var Det=s(Use);xuo=r(Det,"decision_transformer"),Det.forEach(t),$uo=r(fAe," \u2014 "),rN=n(fAe,"A",{href:!0});var Get=s(rN);kuo=r(Get,"DecisionTransformerModel"),Get.forEach(t),Suo=r(fAe," (Decision Transformer model)"),fAe.forEach(t),Ruo=i($),kp=n($,"LI",{});var mAe=s(kp);Jse=n(mAe,"STRONG",{});var Oet=s(Jse);Puo=r(Oet,"deit"),Oet.forEach(t),Buo=r(mAe," \u2014 "),tN=n(mAe,"A",{href:!0});var Vet=s(tN);Iuo=r(Vet,"DeiTModel"),Vet.forEach(t),Nuo=r(mAe," (DeiT model)"),mAe.forEach(t),quo=i($),Sp=n($,"LI",{});var gAe=s(Sp);Yse=n(gAe,"STRONG",{});var Xet=s(Yse);juo=r(Xet,"detr"),Xet.forEach(t),Duo=r(gAe," \u2014 "),aN=n(gAe,"A",{href:!0});var zet=s(aN);Guo=r(zet,"DetrModel"),zet.forEach(t),Ouo=r(gAe," (DETR model)"),gAe.forEach(t),Vuo=i($),Rp=n($,"LI",{});var hAe=s(Rp);Kse=n(hAe,"STRONG",{});var Wet=s(Kse);Xuo=r(Wet,"distilbert"),Wet.forEach(t),zuo=r(hAe," \u2014 "),nN=n(hAe,"A",{href:!0});var Qet=s(nN);Wuo=r(Qet,"DistilBertModel"),Qet.forEach(t),Quo=r(hAe," (DistilBERT model)"),hAe.forEach(t),Huo=i($),Pp=n($,"LI",{});var pAe=s(Pp);Zse=n(pAe,"STRONG",{});var Het=s(Zse);Uuo=r(Het,"dpr"),Het.forEach(t),Juo=r(pAe," \u2014 "),sN=n(pAe,"A",{href:!0});var Uet=s(sN);Yuo=r(Uet,"DPRQuestionEncoder"),Uet.forEach(t),Kuo=r(pAe," (DPR model)"),pAe.forEach(t),Zuo=i($),Bp=n($,"LI",{});var _Ae=s(Bp);ele=n(_Ae,"STRONG",{});var Jet=s(ele);e2o=r(Jet,"dpt"),Jet.forEach(t),o2o=r(_Ae," \u2014 "),lN=n(_Ae,"A",{href:!0});var Yet=s(lN);r2o=r(Yet,"DPTModel"),Yet.forEach(t),t2o=r(_Ae," (DPT model)"),_Ae.forEach(t),a2o=i($),Ip=n($,"LI",{});var uAe=s(Ip);ole=n(uAe,"STRONG",{});var Ket=s(ole);n2o=r(Ket,"electra"),Ket.forEach(t),s2o=r(uAe," \u2014 "),iN=n(uAe,"A",{href:!0});var Zet=s(iN);l2o=r(Zet,"ElectraModel"),Zet.forEach(t),i2o=r(uAe," (ELECTRA model)"),uAe.forEach(t),d2o=i($),Np=n($,"LI",{});var bAe=s(Np);rle=n(bAe,"STRONG",{});var eot=s(rle);c2o=r(eot,"emformer"),eot.forEach(t),f2o=r(bAe," \u2014 "),dN=n(bAe,"A",{href:!0});var oot=s(dN);m2o=r(oot,"EmformerModel"),oot.forEach(t),g2o=r(bAe," (Emformer model)"),bAe.forEach(t),h2o=i($),qp=n($,"LI",{});var vAe=s(qp);tle=n(vAe,"STRONG",{});var rot=s(tle);p2o=r(rot,"flaubert"),rot.forEach(t),_2o=r(vAe," \u2014 "),cN=n(vAe,"A",{href:!0});var tot=s(cN);u2o=r(tot,"FlaubertModel"),tot.forEach(t),b2o=r(vAe," (FlauBERT model)"),vAe.forEach(t),v2o=i($),jp=n($,"LI",{});var FAe=s(jp);ale=n(FAe,"STRONG",{});var aot=s(ale);F2o=r(aot,"flava"),aot.forEach(t),T2o=r(FAe," \u2014 "),fN=n(FAe,"A",{href:!0});var not=s(fN);M2o=r(not,"FlavaModel"),not.forEach(t),E2o=r(FAe," (Flava model)"),FAe.forEach(t),C2o=i($),Dp=n($,"LI",{});var TAe=s(Dp);nle=n(TAe,"STRONG",{});var sot=s(nle);w2o=r(sot,"fnet"),sot.forEach(t),A2o=r(TAe," \u2014 "),mN=n(TAe,"A",{href:!0});var lot=s(mN);y2o=r(lot,"FNetModel"),lot.forEach(t),L2o=r(TAe," (FNet model)"),TAe.forEach(t),x2o=i($),Gp=n($,"LI",{});var MAe=s(Gp);sle=n(MAe,"STRONG",{});var iot=s(sle);$2o=r(iot,"fsmt"),iot.forEach(t),k2o=r(MAe," \u2014 "),gN=n(MAe,"A",{href:!0});var dot=s(gN);S2o=r(dot,"FSMTModel"),dot.forEach(t),R2o=r(MAe," (FairSeq Machine-Translation model)"),MAe.forEach(t),P2o=i($),Ps=n($,"LI",{});var X$=s(Ps);lle=n(X$,"STRONG",{});var cot=s(lle);B2o=r(cot,"funnel"),cot.forEach(t),I2o=r(X$," \u2014 "),hN=n(X$,"A",{href:!0});var fot=s(hN);N2o=r(fot,"FunnelModel"),fot.forEach(t),q2o=r(X$," or "),pN=n(X$,"A",{href:!0});var mot=s(pN);j2o=r(mot,"FunnelBaseModel"),mot.forEach(t),D2o=r(X$," (Funnel Transformer model)"),X$.forEach(t),G2o=i($),Op=n($,"LI",{});var EAe=s(Op);ile=n(EAe,"STRONG",{});var got=s(ile);O2o=r(got,"glpn"),got.forEach(t),V2o=r(EAe," \u2014 "),_N=n(EAe,"A",{href:!0});var hot=s(_N);X2o=r(hot,"GLPNModel"),hot.forEach(t),z2o=r(EAe," (GLPN model)"),EAe.forEach(t),W2o=i($),Vp=n($,"LI",{});var CAe=s(Vp);dle=n(CAe,"STRONG",{});var pot=s(dle);Q2o=r(pot,"gpt2"),pot.forEach(t),H2o=r(CAe," \u2014 "),uN=n(CAe,"A",{href:!0});var _ot=s(uN);U2o=r(_ot,"GPT2Model"),_ot.forEach(t),J2o=r(CAe," (OpenAI GPT-2 model)"),CAe.forEach(t),Y2o=i($),Xp=n($,"LI",{});var wAe=s(Xp);cle=n(wAe,"STRONG",{});var uot=s(cle);K2o=r(uot,"gpt_neo"),uot.forEach(t),Z2o=r(wAe," \u2014 "),bN=n(wAe,"A",{href:!0});var bot=s(bN);e1o=r(bot,"GPTNeoModel"),bot.forEach(t),o1o=r(wAe," (GPT Neo model)"),wAe.forEach(t),r1o=i($),zp=n($,"LI",{});var AAe=s(zp);fle=n(AAe,"STRONG",{});var vot=s(fle);t1o=r(vot,"gpt_neox"),vot.forEach(t),a1o=r(AAe," \u2014 "),vN=n(AAe,"A",{href:!0});var Fot=s(vN);n1o=r(Fot,"GPTNeoXModel"),Fot.forEach(t),s1o=r(AAe," (GPT NeoX model)"),AAe.forEach(t),l1o=i($),Wp=n($,"LI",{});var yAe=s(Wp);mle=n(yAe,"STRONG",{});var Tot=s(mle);i1o=r(Tot,"gptj"),Tot.forEach(t),d1o=r(yAe," \u2014 "),FN=n(yAe,"A",{href:!0});var Mot=s(FN);c1o=r(Mot,"GPTJModel"),Mot.forEach(t),f1o=r(yAe," (GPT-J model)"),yAe.forEach(t),m1o=i($),Qp=n($,"LI",{});var LAe=s(Qp);gle=n(LAe,"STRONG",{});var Eot=s(gle);g1o=r(Eot,"hubert"),Eot.forEach(t),h1o=r(LAe," \u2014 "),TN=n(LAe,"A",{href:!0});var Cot=s(TN);p1o=r(Cot,"HubertModel"),Cot.forEach(t),_1o=r(LAe," (Hubert model)"),LAe.forEach(t),u1o=i($),Hp=n($,"LI",{});var xAe=s(Hp);hle=n(xAe,"STRONG",{});var wot=s(hle);b1o=r(wot,"ibert"),wot.forEach(t),v1o=r(xAe," \u2014 "),MN=n(xAe,"A",{href:!0});var Aot=s(MN);F1o=r(Aot,"IBertModel"),Aot.forEach(t),T1o=r(xAe," (I-BERT model)"),xAe.forEach(t),M1o=i($),Up=n($,"LI",{});var $Ae=s(Up);ple=n($Ae,"STRONG",{});var yot=s(ple);E1o=r(yot,"imagegpt"),yot.forEach(t),C1o=r($Ae," \u2014 "),EN=n($Ae,"A",{href:!0});var Lot=s(EN);w1o=r(Lot,"ImageGPTModel"),Lot.forEach(t),A1o=r($Ae," (ImageGPT model)"),$Ae.forEach(t),y1o=i($),Jp=n($,"LI",{});var kAe=s(Jp);_le=n(kAe,"STRONG",{});var xot=s(_le);L1o=r(xot,"layoutlm"),xot.forEach(t),x1o=r(kAe," \u2014 "),CN=n(kAe,"A",{href:!0});var $ot=s(CN);$1o=r($ot,"LayoutLMModel"),$ot.forEach(t),k1o=r(kAe," (LayoutLM model)"),kAe.forEach(t),S1o=i($),Yp=n($,"LI",{});var SAe=s(Yp);ule=n(SAe,"STRONG",{});var kot=s(ule);R1o=r(kot,"layoutlmv2"),kot.forEach(t),P1o=r(SAe," \u2014 "),wN=n(SAe,"A",{href:!0});var Sot=s(wN);B1o=r(Sot,"LayoutLMv2Model"),Sot.forEach(t),I1o=r(SAe," (LayoutLMv2 model)"),SAe.forEach(t),N1o=i($),Kp=n($,"LI",{});var RAe=s(Kp);ble=n(RAe,"STRONG",{});var Rot=s(ble);q1o=r(Rot,"layoutlmv3"),Rot.forEach(t),j1o=r(RAe," \u2014 "),AN=n(RAe,"A",{href:!0});var Pot=s(AN);D1o=r(Pot,"LayoutLMv3Model"),Pot.forEach(t),G1o=r(RAe," (LayoutLMv3 model)"),RAe.forEach(t),O1o=i($),Zp=n($,"LI",{});var PAe=s(Zp);vle=n(PAe,"STRONG",{});var Bot=s(vle);V1o=r(Bot,"led"),Bot.forEach(t),X1o=r(PAe," \u2014 "),yN=n(PAe,"A",{href:!0});var Iot=s(yN);z1o=r(Iot,"LEDModel"),Iot.forEach(t),W1o=r(PAe," (LED model)"),PAe.forEach(t),Q1o=i($),e_=n($,"LI",{});var BAe=s(e_);Fle=n(BAe,"STRONG",{});var Not=s(Fle);H1o=r(Not,"longformer"),Not.forEach(t),U1o=r(BAe," \u2014 "),LN=n(BAe,"A",{href:!0});var qot=s(LN);J1o=r(qot,"LongformerModel"),qot.forEach(t),Y1o=r(BAe," (Longformer model)"),BAe.forEach(t),K1o=i($),o_=n($,"LI",{});var IAe=s(o_);Tle=n(IAe,"STRONG",{});var jot=s(Tle);Z1o=r(jot,"luke"),jot.forEach(t),ebo=r(IAe," \u2014 "),xN=n(IAe,"A",{href:!0});var Dot=s(xN);obo=r(Dot,"LukeModel"),Dot.forEach(t),rbo=r(IAe," (LUKE model)"),IAe.forEach(t),tbo=i($),r_=n($,"LI",{});var NAe=s(r_);Mle=n(NAe,"STRONG",{});var Got=s(Mle);abo=r(Got,"lxmert"),Got.forEach(t),nbo=r(NAe," \u2014 "),$N=n(NAe,"A",{href:!0});var Oot=s($N);sbo=r(Oot,"LxmertModel"),Oot.forEach(t),lbo=r(NAe," (LXMERT model)"),NAe.forEach(t),ibo=i($),t_=n($,"LI",{});var qAe=s(t_);Ele=n(qAe,"STRONG",{});var Vot=s(Ele);dbo=r(Vot,"m2m_100"),Vot.forEach(t),cbo=r(qAe," \u2014 "),kN=n(qAe,"A",{href:!0});var Xot=s(kN);fbo=r(Xot,"M2M100Model"),Xot.forEach(t),mbo=r(qAe," (M2M100 model)"),qAe.forEach(t),gbo=i($),a_=n($,"LI",{});var jAe=s(a_);Cle=n(jAe,"STRONG",{});var zot=s(Cle);hbo=r(zot,"marian"),zot.forEach(t),pbo=r(jAe," \u2014 "),SN=n(jAe,"A",{href:!0});var Wot=s(SN);_bo=r(Wot,"MarianModel"),Wot.forEach(t),ubo=r(jAe," (Marian model)"),jAe.forEach(t),bbo=i($),n_=n($,"LI",{});var DAe=s(n_);wle=n(DAe,"STRONG",{});var Qot=s(wle);vbo=r(Qot,"maskformer"),Qot.forEach(t),Fbo=r(DAe," \u2014 "),RN=n(DAe,"A",{href:!0});var Hot=s(RN);Tbo=r(Hot,"MaskFormerModel"),Hot.forEach(t),Mbo=r(DAe," (MaskFormer model)"),DAe.forEach(t),Ebo=i($),s_=n($,"LI",{});var GAe=s(s_);Ale=n(GAe,"STRONG",{});var Uot=s(Ale);Cbo=r(Uot,"mbart"),Uot.forEach(t),wbo=r(GAe," \u2014 "),PN=n(GAe,"A",{href:!0});var Jot=s(PN);Abo=r(Jot,"MBartModel"),Jot.forEach(t),ybo=r(GAe," (mBART model)"),GAe.forEach(t),Lbo=i($),l_=n($,"LI",{});var OAe=s(l_);yle=n(OAe,"STRONG",{});var Yot=s(yle);xbo=r(Yot,"megatron-bert"),Yot.forEach(t),$bo=r(OAe," \u2014 "),BN=n(OAe,"A",{href:!0});var Kot=s(BN);kbo=r(Kot,"MegatronBertModel"),Kot.forEach(t),Sbo=r(OAe," (MegatronBert model)"),OAe.forEach(t),Rbo=i($),i_=n($,"LI",{});var VAe=s(i_);Lle=n(VAe,"STRONG",{});var Zot=s(Lle);Pbo=r(Zot,"mobilebert"),Zot.forEach(t),Bbo=r(VAe," \u2014 "),IN=n(VAe,"A",{href:!0});var ert=s(IN);Ibo=r(ert,"MobileBertModel"),ert.forEach(t),Nbo=r(VAe," (MobileBERT model)"),VAe.forEach(t),qbo=i($),d_=n($,"LI",{});var XAe=s(d_);xle=n(XAe,"STRONG",{});var ort=s(xle);jbo=r(ort,"mpnet"),ort.forEach(t),Dbo=r(XAe," \u2014 "),NN=n(XAe,"A",{href:!0});var rrt=s(NN);Gbo=r(rrt,"MPNetModel"),rrt.forEach(t),Obo=r(XAe," (MPNet model)"),XAe.forEach(t),Vbo=i($),c_=n($,"LI",{});var zAe=s(c_);$le=n(zAe,"STRONG",{});var trt=s($le);Xbo=r(trt,"mt5"),trt.forEach(t),zbo=r(zAe," \u2014 "),qN=n(zAe,"A",{href:!0});var art=s(qN);Wbo=r(art,"MT5Model"),art.forEach(t),Qbo=r(zAe," (mT5 model)"),zAe.forEach(t),Hbo=i($),f_=n($,"LI",{});var WAe=s(f_);kle=n(WAe,"STRONG",{});var nrt=s(kle);Ubo=r(nrt,"nystromformer"),nrt.forEach(t),Jbo=r(WAe," \u2014 "),jN=n(WAe,"A",{href:!0});var srt=s(jN);Ybo=r(srt,"NystromformerModel"),srt.forEach(t),Kbo=r(WAe," (Nystromformer model)"),WAe.forEach(t),Zbo=i($),m_=n($,"LI",{});var QAe=s(m_);Sle=n(QAe,"STRONG",{});var lrt=s(Sle);evo=r(lrt,"openai-gpt"),lrt.forEach(t),ovo=r(QAe," \u2014 "),DN=n(QAe,"A",{href:!0});var irt=s(DN);rvo=r(irt,"OpenAIGPTModel"),irt.forEach(t),tvo=r(QAe," (OpenAI GPT model)"),QAe.forEach(t),avo=i($),g_=n($,"LI",{});var HAe=s(g_);Rle=n(HAe,"STRONG",{});var drt=s(Rle);nvo=r(drt,"opt"),drt.forEach(t),svo=r(HAe," \u2014 "),GN=n(HAe,"A",{href:!0});var crt=s(GN);lvo=r(crt,"OPTModel"),crt.forEach(t),ivo=r(HAe," (OPT model)"),HAe.forEach(t),dvo=i($),h_=n($,"LI",{});var UAe=s(h_);Ple=n(UAe,"STRONG",{});var frt=s(Ple);cvo=r(frt,"pegasus"),frt.forEach(t),fvo=r(UAe," \u2014 "),ON=n(UAe,"A",{href:!0});var mrt=s(ON);mvo=r(mrt,"PegasusModel"),mrt.forEach(t),gvo=r(UAe," (Pegasus model)"),UAe.forEach(t),hvo=i($),p_=n($,"LI",{});var JAe=s(p_);Ble=n(JAe,"STRONG",{});var grt=s(Ble);pvo=r(grt,"perceiver"),grt.forEach(t),_vo=r(JAe," \u2014 "),VN=n(JAe,"A",{href:!0});var hrt=s(VN);uvo=r(hrt,"PerceiverModel"),hrt.forEach(t),bvo=r(JAe," (Perceiver model)"),JAe.forEach(t),vvo=i($),__=n($,"LI",{});var YAe=s(__);Ile=n(YAe,"STRONG",{});var prt=s(Ile);Fvo=r(prt,"plbart"),prt.forEach(t),Tvo=r(YAe," \u2014 "),XN=n(YAe,"A",{href:!0});var _rt=s(XN);Mvo=r(_rt,"PLBartModel"),_rt.forEach(t),Evo=r(YAe," (PLBart model)"),YAe.forEach(t),Cvo=i($),u_=n($,"LI",{});var KAe=s(u_);Nle=n(KAe,"STRONG",{});var urt=s(Nle);wvo=r(urt,"poolformer"),urt.forEach(t),Avo=r(KAe," \u2014 "),zN=n(KAe,"A",{href:!0});var brt=s(zN);yvo=r(brt,"PoolFormerModel"),brt.forEach(t),Lvo=r(KAe," (PoolFormer model)"),KAe.forEach(t),xvo=i($),b_=n($,"LI",{});var ZAe=s(b_);qle=n(ZAe,"STRONG",{});var vrt=s(qle);$vo=r(vrt,"prophetnet"),vrt.forEach(t),kvo=r(ZAe," \u2014 "),WN=n(ZAe,"A",{href:!0});var Frt=s(WN);Svo=r(Frt,"ProphetNetModel"),Frt.forEach(t),Rvo=r(ZAe," (ProphetNet model)"),ZAe.forEach(t),Pvo=i($),v_=n($,"LI",{});var eye=s(v_);jle=n(eye,"STRONG",{});var Trt=s(jle);Bvo=r(Trt,"qdqbert"),Trt.forEach(t),Ivo=r(eye," \u2014 "),QN=n(eye,"A",{href:!0});var Mrt=s(QN);Nvo=r(Mrt,"QDQBertModel"),Mrt.forEach(t),qvo=r(eye," (QDQBert model)"),eye.forEach(t),jvo=i($),F_=n($,"LI",{});var oye=s(F_);Dle=n(oye,"STRONG",{});var Ert=s(Dle);Dvo=r(Ert,"reformer"),Ert.forEach(t),Gvo=r(oye," \u2014 "),HN=n(oye,"A",{href:!0});var Crt=s(HN);Ovo=r(Crt,"ReformerModel"),Crt.forEach(t),Vvo=r(oye," (Reformer model)"),oye.forEach(t),Xvo=i($),T_=n($,"LI",{});var rye=s(T_);Gle=n(rye,"STRONG",{});var wrt=s(Gle);zvo=r(wrt,"regnet"),wrt.forEach(t),Wvo=r(rye," \u2014 "),UN=n(rye,"A",{href:!0});var Art=s(UN);Qvo=r(Art,"RegNetModel"),Art.forEach(t),Hvo=r(rye," (RegNet model)"),rye.forEach(t),Uvo=i($),M_=n($,"LI",{});var tye=s(M_);Ole=n(tye,"STRONG",{});var yrt=s(Ole);Jvo=r(yrt,"rembert"),yrt.forEach(t),Yvo=r(tye," \u2014 "),JN=n(tye,"A",{href:!0});var Lrt=s(JN);Kvo=r(Lrt,"RemBertModel"),Lrt.forEach(t),Zvo=r(tye," (RemBERT model)"),tye.forEach(t),e3o=i($),E_=n($,"LI",{});var aye=s(E_);Vle=n(aye,"STRONG",{});var xrt=s(Vle);o3o=r(xrt,"resnet"),xrt.forEach(t),r3o=r(aye," \u2014 "),YN=n(aye,"A",{href:!0});var $rt=s(YN);t3o=r($rt,"ResNetModel"),$rt.forEach(t),a3o=r(aye," (ResNet model)"),aye.forEach(t),n3o=i($),C_=n($,"LI",{});var nye=s(C_);Xle=n(nye,"STRONG",{});var krt=s(Xle);s3o=r(krt,"retribert"),krt.forEach(t),l3o=r(nye," \u2014 "),KN=n(nye,"A",{href:!0});var Srt=s(KN);i3o=r(Srt,"RetriBertModel"),Srt.forEach(t),d3o=r(nye," (RetriBERT model)"),nye.forEach(t),c3o=i($),w_=n($,"LI",{});var sye=s(w_);zle=n(sye,"STRONG",{});var Rrt=s(zle);f3o=r(Rrt,"roberta"),Rrt.forEach(t),m3o=r(sye," \u2014 "),ZN=n(sye,"A",{href:!0});var Prt=s(ZN);g3o=r(Prt,"RobertaModel"),Prt.forEach(t),h3o=r(sye," (RoBERTa model)"),sye.forEach(t),p3o=i($),A_=n($,"LI",{});var lye=s(A_);Wle=n(lye,"STRONG",{});var Brt=s(Wle);_3o=r(Brt,"roformer"),Brt.forEach(t),u3o=r(lye," \u2014 "),eq=n(lye,"A",{href:!0});var Irt=s(eq);b3o=r(Irt,"RoFormerModel"),Irt.forEach(t),v3o=r(lye," (RoFormer model)"),lye.forEach(t),F3o=i($),y_=n($,"LI",{});var iye=s(y_);Qle=n(iye,"STRONG",{});var Nrt=s(Qle);T3o=r(Nrt,"segformer"),Nrt.forEach(t),M3o=r(iye," \u2014 "),oq=n(iye,"A",{href:!0});var qrt=s(oq);E3o=r(qrt,"SegformerModel"),qrt.forEach(t),C3o=r(iye," (SegFormer model)"),iye.forEach(t),w3o=i($),L_=n($,"LI",{});var dye=s(L_);Hle=n(dye,"STRONG",{});var jrt=s(Hle);A3o=r(jrt,"sew"),jrt.forEach(t),y3o=r(dye," \u2014 "),rq=n(dye,"A",{href:!0});var Drt=s(rq);L3o=r(Drt,"SEWModel"),Drt.forEach(t),x3o=r(dye," (SEW model)"),dye.forEach(t),$3o=i($),x_=n($,"LI",{});var cye=s(x_);Ule=n(cye,"STRONG",{});var Grt=s(Ule);k3o=r(Grt,"sew-d"),Grt.forEach(t),S3o=r(cye," \u2014 "),tq=n(cye,"A",{href:!0});var Ort=s(tq);R3o=r(Ort,"SEWDModel"),Ort.forEach(t),P3o=r(cye," (SEW-D model)"),cye.forEach(t),B3o=i($),$_=n($,"LI",{});var fye=s($_);Jle=n(fye,"STRONG",{});var Vrt=s(Jle);I3o=r(Vrt,"speech_to_text"),Vrt.forEach(t),N3o=r(fye," \u2014 "),aq=n(fye,"A",{href:!0});var Xrt=s(aq);q3o=r(Xrt,"Speech2TextModel"),Xrt.forEach(t),j3o=r(fye," (Speech2Text model)"),fye.forEach(t),D3o=i($),k_=n($,"LI",{});var mye=s(k_);Yle=n(mye,"STRONG",{});var zrt=s(Yle);G3o=r(zrt,"splinter"),zrt.forEach(t),O3o=r(mye," \u2014 "),nq=n(mye,"A",{href:!0});var Wrt=s(nq);V3o=r(Wrt,"SplinterModel"),Wrt.forEach(t),X3o=r(mye," (Splinter model)"),mye.forEach(t),z3o=i($),S_=n($,"LI",{});var gye=s(S_);Kle=n(gye,"STRONG",{});var Qrt=s(Kle);W3o=r(Qrt,"squeezebert"),Qrt.forEach(t),Q3o=r(gye," \u2014 "),sq=n(gye,"A",{href:!0});var Hrt=s(sq);H3o=r(Hrt,"SqueezeBertModel"),Hrt.forEach(t),U3o=r(gye," (SqueezeBERT model)"),gye.forEach(t),J3o=i($),R_=n($,"LI",{});var hye=s(R_);Zle=n(hye,"STRONG",{});var Urt=s(Zle);Y3o=r(Urt,"swin"),Urt.forEach(t),K3o=r(hye," \u2014 "),lq=n(hye,"A",{href:!0});var Jrt=s(lq);Z3o=r(Jrt,"SwinModel"),Jrt.forEach(t),e0o=r(hye," (Swin model)"),hye.forEach(t),o0o=i($),P_=n($,"LI",{});var pye=s(P_);eie=n(pye,"STRONG",{});var Yrt=s(eie);r0o=r(Yrt,"t5"),Yrt.forEach(t),t0o=r(pye," \u2014 "),iq=n(pye,"A",{href:!0});var Krt=s(iq);a0o=r(Krt,"T5Model"),Krt.forEach(t),n0o=r(pye," (T5 model)"),pye.forEach(t),s0o=i($),B_=n($,"LI",{});var _ye=s(B_);oie=n(_ye,"STRONG",{});var Zrt=s(oie);l0o=r(Zrt,"tapas"),Zrt.forEach(t),i0o=r(_ye," \u2014 "),dq=n(_ye,"A",{href:!0});var ett=s(dq);d0o=r(ett,"TapasModel"),ett.forEach(t),c0o=r(_ye," (TAPAS model)"),_ye.forEach(t),f0o=i($),I_=n($,"LI",{});var uye=s(I_);rie=n(uye,"STRONG",{});var ott=s(rie);m0o=r(ott,"trajectory_transformer"),ott.forEach(t),g0o=r(uye," \u2014 "),cq=n(uye,"A",{href:!0});var rtt=s(cq);h0o=r(rtt,"TrajectoryTransformerModel"),rtt.forEach(t),p0o=r(uye," (Trajectory Transformer model)"),uye.forEach(t),_0o=i($),N_=n($,"LI",{});var bye=s(N_);tie=n(bye,"STRONG",{});var ttt=s(tie);u0o=r(ttt,"transfo-xl"),ttt.forEach(t),b0o=r(bye," \u2014 "),fq=n(bye,"A",{href:!0});var att=s(fq);v0o=r(att,"TransfoXLModel"),att.forEach(t),F0o=r(bye," (Transformer-XL model)"),bye.forEach(t),T0o=i($),q_=n($,"LI",{});var vye=s(q_);aie=n(vye,"STRONG",{});var ntt=s(aie);M0o=r(ntt,"unispeech"),ntt.forEach(t),E0o=r(vye," \u2014 "),mq=n(vye,"A",{href:!0});var stt=s(mq);C0o=r(stt,"UniSpeechModel"),stt.forEach(t),w0o=r(vye," (UniSpeech model)"),vye.forEach(t),A0o=i($),j_=n($,"LI",{});var Fye=s(j_);nie=n(Fye,"STRONG",{});var ltt=s(nie);y0o=r(ltt,"unispeech-sat"),ltt.forEach(t),L0o=r(Fye," \u2014 "),gq=n(Fye,"A",{href:!0});var itt=s(gq);x0o=r(itt,"UniSpeechSatModel"),itt.forEach(t),$0o=r(Fye," (UniSpeechSat model)"),Fye.forEach(t),k0o=i($),D_=n($,"LI",{});var Tye=s(D_);sie=n(Tye,"STRONG",{});var dtt=s(sie);S0o=r(dtt,"van"),dtt.forEach(t),R0o=r(Tye," \u2014 "),hq=n(Tye,"A",{href:!0});var ctt=s(hq);P0o=r(ctt,"VanModel"),ctt.forEach(t),B0o=r(Tye," (VAN model)"),Tye.forEach(t),I0o=i($),G_=n($,"LI",{});var Mye=s(G_);lie=n(Mye,"STRONG",{});var ftt=s(lie);N0o=r(ftt,"vilt"),ftt.forEach(t),q0o=r(Mye," \u2014 "),pq=n(Mye,"A",{href:!0});var mtt=s(pq);j0o=r(mtt,"ViltModel"),mtt.forEach(t),D0o=r(Mye," (ViLT model)"),Mye.forEach(t),G0o=i($),O_=n($,"LI",{});var Eye=s(O_);iie=n(Eye,"STRONG",{});var gtt=s(iie);O0o=r(gtt,"vision-text-dual-encoder"),gtt.forEach(t),V0o=r(Eye," \u2014 "),_q=n(Eye,"A",{href:!0});var htt=s(_q);X0o=r(htt,"VisionTextDualEncoderModel"),htt.forEach(t),z0o=r(Eye," (VisionTextDualEncoder model)"),Eye.forEach(t),W0o=i($),V_=n($,"LI",{});var Cye=s(V_);die=n(Cye,"STRONG",{});var ptt=s(die);Q0o=r(ptt,"visual_bert"),ptt.forEach(t),H0o=r(Cye," \u2014 "),uq=n(Cye,"A",{href:!0});var _tt=s(uq);U0o=r(_tt,"VisualBertModel"),_tt.forEach(t),J0o=r(Cye," (VisualBert model)"),Cye.forEach(t),Y0o=i($),X_=n($,"LI",{});var wye=s(X_);cie=n(wye,"STRONG",{});var utt=s(cie);K0o=r(utt,"vit"),utt.forEach(t),Z0o=r(wye," \u2014 "),bq=n(wye,"A",{href:!0});var btt=s(bq);eFo=r(btt,"ViTModel"),btt.forEach(t),oFo=r(wye," (ViT model)"),wye.forEach(t),rFo=i($),z_=n($,"LI",{});var Aye=s(z_);fie=n(Aye,"STRONG",{});var vtt=s(fie);tFo=r(vtt,"vit_mae"),vtt.forEach(t),aFo=r(Aye," \u2014 "),vq=n(Aye,"A",{href:!0});var Ftt=s(vq);nFo=r(Ftt,"ViTMAEModel"),Ftt.forEach(t),sFo=r(Aye," (ViTMAE model)"),Aye.forEach(t),lFo=i($),W_=n($,"LI",{});var yye=s(W_);mie=n(yye,"STRONG",{});var Ttt=s(mie);iFo=r(Ttt,"wav2vec2"),Ttt.forEach(t),dFo=r(yye," \u2014 "),Fq=n(yye,"A",{href:!0});var Mtt=s(Fq);cFo=r(Mtt,"Wav2Vec2Model"),Mtt.forEach(t),fFo=r(yye," (Wav2Vec2 model)"),yye.forEach(t),mFo=i($),Q_=n($,"LI",{});var Lye=s(Q_);gie=n(Lye,"STRONG",{});var Ett=s(gie);gFo=r(Ett,"wav2vec2-conformer"),Ett.forEach(t),hFo=r(Lye," \u2014 "),Tq=n(Lye,"A",{href:!0});var Ctt=s(Tq);pFo=r(Ctt,"Wav2Vec2ConformerModel"),Ctt.forEach(t),_Fo=r(Lye," (Wav2Vec2-Conformer model)"),Lye.forEach(t),uFo=i($),H_=n($,"LI",{});var xye=s(H_);hie=n(xye,"STRONG",{});var wtt=s(hie);bFo=r(wtt,"wavlm"),wtt.forEach(t),vFo=r(xye," \u2014 "),Mq=n(xye,"A",{href:!0});var Att=s(Mq);FFo=r(Att,"WavLMModel"),Att.forEach(t),TFo=r(xye," (WavLM model)"),xye.forEach(t),MFo=i($),U_=n($,"LI",{});var $ye=s(U_);pie=n($ye,"STRONG",{});var ytt=s(pie);EFo=r(ytt,"xglm"),ytt.forEach(t),CFo=r($ye," \u2014 "),Eq=n($ye,"A",{href:!0});var Ltt=s(Eq);wFo=r(Ltt,"XGLMModel"),Ltt.forEach(t),AFo=r($ye," (XGLM model)"),$ye.forEach(t),yFo=i($),J_=n($,"LI",{});var kye=s(J_);_ie=n(kye,"STRONG",{});var xtt=s(_ie);LFo=r(xtt,"xlm"),xtt.forEach(t),xFo=r(kye," \u2014 "),Cq=n(kye,"A",{href:!0});var $tt=s(Cq);$Fo=r($tt,"XLMModel"),$tt.forEach(t),kFo=r(kye," (XLM model)"),kye.forEach(t),SFo=i($),Y_=n($,"LI",{});var Sye=s(Y_);uie=n(Sye,"STRONG",{});var ktt=s(uie);RFo=r(ktt,"xlm-prophetnet"),ktt.forEach(t),PFo=r(Sye," \u2014 "),wq=n(Sye,"A",{href:!0});var Stt=s(wq);BFo=r(Stt,"XLMProphetNetModel"),Stt.forEach(t),IFo=r(Sye," (XLMProphetNet model)"),Sye.forEach(t),NFo=i($),K_=n($,"LI",{});var Rye=s(K_);bie=n(Rye,"STRONG",{});var Rtt=s(bie);qFo=r(Rtt,"xlm-roberta"),Rtt.forEach(t),jFo=r(Rye," \u2014 "),Aq=n(Rye,"A",{href:!0});var Ptt=s(Aq);DFo=r(Ptt,"XLMRobertaModel"),Ptt.forEach(t),GFo=r(Rye," (XLM-RoBERTa model)"),Rye.forEach(t),OFo=i($),Z_=n($,"LI",{});var Pye=s(Z_);vie=n(Pye,"STRONG",{});var Btt=s(vie);VFo=r(Btt,"xlm-roberta-xl"),Btt.forEach(t),XFo=r(Pye," \u2014 "),yq=n(Pye,"A",{href:!0});var Itt=s(yq);zFo=r(Itt,"XLMRobertaXLModel"),Itt.forEach(t),WFo=r(Pye," (XLM-RoBERTa-XL model)"),Pye.forEach(t),QFo=i($),eu=n($,"LI",{});var Bye=s(eu);Fie=n(Bye,"STRONG",{});var Ntt=s(Fie);HFo=r(Ntt,"xlnet"),Ntt.forEach(t),UFo=r(Bye," \u2014 "),Lq=n(Bye,"A",{href:!0});var qtt=s(Lq);JFo=r(qtt,"XLNetModel"),qtt.forEach(t),YFo=r(Bye," (XLNet model)"),Bye.forEach(t),KFo=i($),ou=n($,"LI",{});var Iye=s(ou);Tie=n(Iye,"STRONG",{});var jtt=s(Tie);ZFo=r(jtt,"yolos"),jtt.forEach(t),eTo=r(Iye," \u2014 "),xq=n(Iye,"A",{href:!0});var Dtt=s(xq);oTo=r(Dtt,"YolosModel"),Dtt.forEach(t),rTo=r(Iye," (YOLOS model)"),Iye.forEach(t),tTo=i($),ru=n($,"LI",{});var Nye=s(ru);Mie=n(Nye,"STRONG",{});var Gtt=s(Mie);aTo=r(Gtt,"yoso"),Gtt.forEach(t),nTo=r(Nye," \u2014 "),$q=n(Nye,"A",{href:!0});var Ott=s($q);sTo=r(Ott,"YosoModel"),Ott.forEach(t),lTo=r(Nye," (YOSO model)"),Nye.forEach(t),$.forEach(t),iTo=i(oa),tu=n(oa,"P",{});var qye=s(tu);dTo=r(qye,"The model is set in evaluation mode by default using "),Eie=n(qye,"CODE",{});var Vtt=s(Eie);cTo=r(Vtt,"model.eval()"),Vtt.forEach(t),fTo=r(qye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cie=n(qye,"CODE",{});var Xtt=s(Cie);mTo=r(Xtt,"model.train()"),Xtt.forEach(t),qye.forEach(t),gTo=i(oa),T(au.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),Tqe=i(f),Li=n(f,"H2",{class:!0});var wDe=s(Li);nu=n(wDe,"A",{id:!0,class:!0,href:!0});var ztt=s(nu);wie=n(ztt,"SPAN",{});var Wtt=s(wie);T(sy.$$.fragment,Wtt),Wtt.forEach(t),ztt.forEach(t),hTo=i(wDe),Aie=n(wDe,"SPAN",{});var Qtt=s(Aie);pTo=r(Qtt,"AutoModelForPreTraining"),Qtt.forEach(t),wDe.forEach(t),Mqe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(ly.$$.fragment,Os),_To=i(Os),xi=n(Os,"P",{});var TZ=s(xi);uTo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kq=n(TZ,"A",{href:!0});var Htt=s(kq);bTo=r(Htt,"from_pretrained()"),Htt.forEach(t),vTo=r(TZ," class method or the "),Sq=n(TZ,"A",{href:!0});var Utt=s(Sq);FTo=r(Utt,"from_config()"),Utt.forEach(t),TTo=r(TZ,` class
method.`),TZ.forEach(t),MTo=i(Os),iy=n(Os,"P",{});var ADe=s(iy);ETo=r(ADe,"This class cannot be instantiated directly using "),yie=n(ADe,"CODE",{});var Jtt=s(yie);CTo=r(Jtt,"__init__()"),Jtt.forEach(t),wTo=r(ADe," (throws an error)."),ADe.forEach(t),ATo=i(Os),at=n(Os,"DIV",{class:!0});var Bw=s(at);T(dy.$$.fragment,Bw),yTo=i(Bw),Lie=n(Bw,"P",{});var Ytt=s(Lie);LTo=r(Ytt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ytt.forEach(t),xTo=i(Bw),$i=n(Bw,"P",{});var MZ=s($i);$To=r(MZ,`Note:
Loading a model from its configuration file does `),xie=n(MZ,"STRONG",{});var Ktt=s(xie);kTo=r(Ktt,"not"),Ktt.forEach(t),STo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rq=n(MZ,"A",{href:!0});var Ztt=s(Rq);RTo=r(Ztt,"from_pretrained()"),Ztt.forEach(t),PTo=r(MZ," to load the model weights."),MZ.forEach(t),BTo=i(Bw),T(su.$$.fragment,Bw),Bw.forEach(t),ITo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(cy.$$.fragment,ra),NTo=i(ra),$ie=n(ra,"P",{});var eat=s($ie);qTo=r(eat,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),eat.forEach(t),jTo=i(ra),xa=n(ra,"P",{});var Iw=s(xa);DTo=r(Iw,"The model class to instantiate is selected based on the "),kie=n(Iw,"CODE",{});var oat=s(kie);GTo=r(oat,"model_type"),oat.forEach(t),OTo=r(Iw,` property of the config object (either
passed as an argument or loaded from `),Sie=n(Iw,"CODE",{});var rat=s(Sie);VTo=r(rat,"pretrained_model_name_or_path"),rat.forEach(t),XTo=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rie=n(Iw,"CODE",{});var tat=s(Rie);zTo=r(tat,"pretrained_model_name_or_path"),tat.forEach(t),WTo=r(Iw,":"),Iw.forEach(t),QTo=i(ra),G=n(ra,"UL",{});var O=s(G);lu=n(O,"LI",{});var jye=s(lu);Pie=n(jye,"STRONG",{});var aat=s(Pie);HTo=r(aat,"albert"),aat.forEach(t),UTo=r(jye," \u2014 "),Pq=n(jye,"A",{href:!0});var nat=s(Pq);JTo=r(nat,"AlbertForPreTraining"),nat.forEach(t),YTo=r(jye," (ALBERT model)"),jye.forEach(t),KTo=i(O),iu=n(O,"LI",{});var Dye=s(iu);Bie=n(Dye,"STRONG",{});var sat=s(Bie);ZTo=r(sat,"bart"),sat.forEach(t),e7o=r(Dye," \u2014 "),Bq=n(Dye,"A",{href:!0});var lat=s(Bq);o7o=r(lat,"BartForConditionalGeneration"),lat.forEach(t),r7o=r(Dye," (BART model)"),Dye.forEach(t),t7o=i(O),du=n(O,"LI",{});var Gye=s(du);Iie=n(Gye,"STRONG",{});var iat=s(Iie);a7o=r(iat,"bert"),iat.forEach(t),n7o=r(Gye," \u2014 "),Iq=n(Gye,"A",{href:!0});var dat=s(Iq);s7o=r(dat,"BertForPreTraining"),dat.forEach(t),l7o=r(Gye," (BERT model)"),Gye.forEach(t),i7o=i(O),cu=n(O,"LI",{});var Oye=s(cu);Nie=n(Oye,"STRONG",{});var cat=s(Nie);d7o=r(cat,"big_bird"),cat.forEach(t),c7o=r(Oye," \u2014 "),Nq=n(Oye,"A",{href:!0});var fat=s(Nq);f7o=r(fat,"BigBirdForPreTraining"),fat.forEach(t),m7o=r(Oye," (BigBird model)"),Oye.forEach(t),g7o=i(O),fu=n(O,"LI",{});var Vye=s(fu);qie=n(Vye,"STRONG",{});var mat=s(qie);h7o=r(mat,"camembert"),mat.forEach(t),p7o=r(Vye," \u2014 "),qq=n(Vye,"A",{href:!0});var gat=s(qq);_7o=r(gat,"CamembertForMaskedLM"),gat.forEach(t),u7o=r(Vye," (CamemBERT model)"),Vye.forEach(t),b7o=i(O),mu=n(O,"LI",{});var Xye=s(mu);jie=n(Xye,"STRONG",{});var hat=s(jie);v7o=r(hat,"ctrl"),hat.forEach(t),F7o=r(Xye," \u2014 "),jq=n(Xye,"A",{href:!0});var pat=s(jq);T7o=r(pat,"CTRLLMHeadModel"),pat.forEach(t),M7o=r(Xye," (CTRL model)"),Xye.forEach(t),E7o=i(O),gu=n(O,"LI",{});var zye=s(gu);Die=n(zye,"STRONG",{});var _at=s(Die);C7o=r(_at,"data2vec-text"),_at.forEach(t),w7o=r(zye," \u2014 "),Dq=n(zye,"A",{href:!0});var uat=s(Dq);A7o=r(uat,"Data2VecTextForMaskedLM"),uat.forEach(t),y7o=r(zye," (Data2VecText model)"),zye.forEach(t),L7o=i(O),hu=n(O,"LI",{});var Wye=s(hu);Gie=n(Wye,"STRONG",{});var bat=s(Gie);x7o=r(bat,"deberta"),bat.forEach(t),$7o=r(Wye," \u2014 "),Gq=n(Wye,"A",{href:!0});var vat=s(Gq);k7o=r(vat,"DebertaForMaskedLM"),vat.forEach(t),S7o=r(Wye," (DeBERTa model)"),Wye.forEach(t),R7o=i(O),pu=n(O,"LI",{});var Qye=s(pu);Oie=n(Qye,"STRONG",{});var Fat=s(Oie);P7o=r(Fat,"deberta-v2"),Fat.forEach(t),B7o=r(Qye," \u2014 "),Oq=n(Qye,"A",{href:!0});var Tat=s(Oq);I7o=r(Tat,"DebertaV2ForMaskedLM"),Tat.forEach(t),N7o=r(Qye," (DeBERTa-v2 model)"),Qye.forEach(t),q7o=i(O),_u=n(O,"LI",{});var Hye=s(_u);Vie=n(Hye,"STRONG",{});var Mat=s(Vie);j7o=r(Mat,"distilbert"),Mat.forEach(t),D7o=r(Hye," \u2014 "),Vq=n(Hye,"A",{href:!0});var Eat=s(Vq);G7o=r(Eat,"DistilBertForMaskedLM"),Eat.forEach(t),O7o=r(Hye," (DistilBERT model)"),Hye.forEach(t),V7o=i(O),uu=n(O,"LI",{});var Uye=s(uu);Xie=n(Uye,"STRONG",{});var Cat=s(Xie);X7o=r(Cat,"electra"),Cat.forEach(t),z7o=r(Uye," \u2014 "),Xq=n(Uye,"A",{href:!0});var wat=s(Xq);W7o=r(wat,"ElectraForPreTraining"),wat.forEach(t),Q7o=r(Uye," (ELECTRA model)"),Uye.forEach(t),H7o=i(O),bu=n(O,"LI",{});var Jye=s(bu);zie=n(Jye,"STRONG",{});var Aat=s(zie);U7o=r(Aat,"flaubert"),Aat.forEach(t),J7o=r(Jye," \u2014 "),zq=n(Jye,"A",{href:!0});var yat=s(zq);Y7o=r(yat,"FlaubertWithLMHeadModel"),yat.forEach(t),K7o=r(Jye," (FlauBERT model)"),Jye.forEach(t),Z7o=i(O),vu=n(O,"LI",{});var Yye=s(vu);Wie=n(Yye,"STRONG",{});var Lat=s(Wie);eMo=r(Lat,"flava"),Lat.forEach(t),oMo=r(Yye," \u2014 "),Wq=n(Yye,"A",{href:!0});var xat=s(Wq);rMo=r(xat,"FlavaForPreTraining"),xat.forEach(t),tMo=r(Yye," (Flava model)"),Yye.forEach(t),aMo=i(O),Fu=n(O,"LI",{});var Kye=s(Fu);Qie=n(Kye,"STRONG",{});var $at=s(Qie);nMo=r($at,"fnet"),$at.forEach(t),sMo=r(Kye," \u2014 "),Qq=n(Kye,"A",{href:!0});var kat=s(Qq);lMo=r(kat,"FNetForPreTraining"),kat.forEach(t),iMo=r(Kye," (FNet model)"),Kye.forEach(t),dMo=i(O),Tu=n(O,"LI",{});var Zye=s(Tu);Hie=n(Zye,"STRONG",{});var Sat=s(Hie);cMo=r(Sat,"fsmt"),Sat.forEach(t),fMo=r(Zye," \u2014 "),Hq=n(Zye,"A",{href:!0});var Rat=s(Hq);mMo=r(Rat,"FSMTForConditionalGeneration"),Rat.forEach(t),gMo=r(Zye," (FairSeq Machine-Translation model)"),Zye.forEach(t),hMo=i(O),Mu=n(O,"LI",{});var eLe=s(Mu);Uie=n(eLe,"STRONG",{});var Pat=s(Uie);pMo=r(Pat,"funnel"),Pat.forEach(t),_Mo=r(eLe," \u2014 "),Uq=n(eLe,"A",{href:!0});var Bat=s(Uq);uMo=r(Bat,"FunnelForPreTraining"),Bat.forEach(t),bMo=r(eLe," (Funnel Transformer model)"),eLe.forEach(t),vMo=i(O),Eu=n(O,"LI",{});var oLe=s(Eu);Jie=n(oLe,"STRONG",{});var Iat=s(Jie);FMo=r(Iat,"gpt2"),Iat.forEach(t),TMo=r(oLe," \u2014 "),Jq=n(oLe,"A",{href:!0});var Nat=s(Jq);MMo=r(Nat,"GPT2LMHeadModel"),Nat.forEach(t),EMo=r(oLe," (OpenAI GPT-2 model)"),oLe.forEach(t),CMo=i(O),Cu=n(O,"LI",{});var rLe=s(Cu);Yie=n(rLe,"STRONG",{});var qat=s(Yie);wMo=r(qat,"ibert"),qat.forEach(t),AMo=r(rLe," \u2014 "),Yq=n(rLe,"A",{href:!0});var jat=s(Yq);yMo=r(jat,"IBertForMaskedLM"),jat.forEach(t),LMo=r(rLe," (I-BERT model)"),rLe.forEach(t),xMo=i(O),wu=n(O,"LI",{});var tLe=s(wu);Kie=n(tLe,"STRONG",{});var Dat=s(Kie);$Mo=r(Dat,"layoutlm"),Dat.forEach(t),kMo=r(tLe," \u2014 "),Kq=n(tLe,"A",{href:!0});var Gat=s(Kq);SMo=r(Gat,"LayoutLMForMaskedLM"),Gat.forEach(t),RMo=r(tLe," (LayoutLM model)"),tLe.forEach(t),PMo=i(O),Au=n(O,"LI",{});var aLe=s(Au);Zie=n(aLe,"STRONG",{});var Oat=s(Zie);BMo=r(Oat,"longformer"),Oat.forEach(t),IMo=r(aLe," \u2014 "),Zq=n(aLe,"A",{href:!0});var Vat=s(Zq);NMo=r(Vat,"LongformerForMaskedLM"),Vat.forEach(t),qMo=r(aLe," (Longformer model)"),aLe.forEach(t),jMo=i(O),yu=n(O,"LI",{});var nLe=s(yu);ede=n(nLe,"STRONG",{});var Xat=s(ede);DMo=r(Xat,"lxmert"),Xat.forEach(t),GMo=r(nLe," \u2014 "),ej=n(nLe,"A",{href:!0});var zat=s(ej);OMo=r(zat,"LxmertForPreTraining"),zat.forEach(t),VMo=r(nLe," (LXMERT model)"),nLe.forEach(t),XMo=i(O),Lu=n(O,"LI",{});var sLe=s(Lu);ode=n(sLe,"STRONG",{});var Wat=s(ode);zMo=r(Wat,"megatron-bert"),Wat.forEach(t),WMo=r(sLe," \u2014 "),oj=n(sLe,"A",{href:!0});var Qat=s(oj);QMo=r(Qat,"MegatronBertForPreTraining"),Qat.forEach(t),HMo=r(sLe," (MegatronBert model)"),sLe.forEach(t),UMo=i(O),xu=n(O,"LI",{});var lLe=s(xu);rde=n(lLe,"STRONG",{});var Hat=s(rde);JMo=r(Hat,"mobilebert"),Hat.forEach(t),YMo=r(lLe," \u2014 "),rj=n(lLe,"A",{href:!0});var Uat=s(rj);KMo=r(Uat,"MobileBertForPreTraining"),Uat.forEach(t),ZMo=r(lLe," (MobileBERT model)"),lLe.forEach(t),e4o=i(O),$u=n(O,"LI",{});var iLe=s($u);tde=n(iLe,"STRONG",{});var Jat=s(tde);o4o=r(Jat,"mpnet"),Jat.forEach(t),r4o=r(iLe," \u2014 "),tj=n(iLe,"A",{href:!0});var Yat=s(tj);t4o=r(Yat,"MPNetForMaskedLM"),Yat.forEach(t),a4o=r(iLe," (MPNet model)"),iLe.forEach(t),n4o=i(O),ku=n(O,"LI",{});var dLe=s(ku);ade=n(dLe,"STRONG",{});var Kat=s(ade);s4o=r(Kat,"openai-gpt"),Kat.forEach(t),l4o=r(dLe," \u2014 "),aj=n(dLe,"A",{href:!0});var Zat=s(aj);i4o=r(Zat,"OpenAIGPTLMHeadModel"),Zat.forEach(t),d4o=r(dLe," (OpenAI GPT model)"),dLe.forEach(t),c4o=i(O),Su=n(O,"LI",{});var cLe=s(Su);nde=n(cLe,"STRONG",{});var ent=s(nde);f4o=r(ent,"retribert"),ent.forEach(t),m4o=r(cLe," \u2014 "),nj=n(cLe,"A",{href:!0});var ont=s(nj);g4o=r(ont,"RetriBertModel"),ont.forEach(t),h4o=r(cLe," (RetriBERT model)"),cLe.forEach(t),p4o=i(O),Ru=n(O,"LI",{});var fLe=s(Ru);sde=n(fLe,"STRONG",{});var rnt=s(sde);_4o=r(rnt,"roberta"),rnt.forEach(t),u4o=r(fLe," \u2014 "),sj=n(fLe,"A",{href:!0});var tnt=s(sj);b4o=r(tnt,"RobertaForMaskedLM"),tnt.forEach(t),v4o=r(fLe," (RoBERTa model)"),fLe.forEach(t),F4o=i(O),Pu=n(O,"LI",{});var mLe=s(Pu);lde=n(mLe,"STRONG",{});var ant=s(lde);T4o=r(ant,"splinter"),ant.forEach(t),M4o=r(mLe," \u2014 "),lj=n(mLe,"A",{href:!0});var nnt=s(lj);E4o=r(nnt,"SplinterForPreTraining"),nnt.forEach(t),C4o=r(mLe," (Splinter model)"),mLe.forEach(t),w4o=i(O),Bu=n(O,"LI",{});var gLe=s(Bu);ide=n(gLe,"STRONG",{});var snt=s(ide);A4o=r(snt,"squeezebert"),snt.forEach(t),y4o=r(gLe," \u2014 "),ij=n(gLe,"A",{href:!0});var lnt=s(ij);L4o=r(lnt,"SqueezeBertForMaskedLM"),lnt.forEach(t),x4o=r(gLe," (SqueezeBERT model)"),gLe.forEach(t),$4o=i(O),Iu=n(O,"LI",{});var hLe=s(Iu);dde=n(hLe,"STRONG",{});var int=s(dde);k4o=r(int,"t5"),int.forEach(t),S4o=r(hLe," \u2014 "),dj=n(hLe,"A",{href:!0});var dnt=s(dj);R4o=r(dnt,"T5ForConditionalGeneration"),dnt.forEach(t),P4o=r(hLe," (T5 model)"),hLe.forEach(t),B4o=i(O),Nu=n(O,"LI",{});var pLe=s(Nu);cde=n(pLe,"STRONG",{});var cnt=s(cde);I4o=r(cnt,"tapas"),cnt.forEach(t),N4o=r(pLe," \u2014 "),cj=n(pLe,"A",{href:!0});var fnt=s(cj);q4o=r(fnt,"TapasForMaskedLM"),fnt.forEach(t),j4o=r(pLe," (TAPAS model)"),pLe.forEach(t),D4o=i(O),qu=n(O,"LI",{});var _Le=s(qu);fde=n(_Le,"STRONG",{});var mnt=s(fde);G4o=r(mnt,"transfo-xl"),mnt.forEach(t),O4o=r(_Le," \u2014 "),fj=n(_Le,"A",{href:!0});var gnt=s(fj);V4o=r(gnt,"TransfoXLLMHeadModel"),gnt.forEach(t),X4o=r(_Le," (Transformer-XL model)"),_Le.forEach(t),z4o=i(O),ju=n(O,"LI",{});var uLe=s(ju);mde=n(uLe,"STRONG",{});var hnt=s(mde);W4o=r(hnt,"unispeech"),hnt.forEach(t),Q4o=r(uLe," \u2014 "),mj=n(uLe,"A",{href:!0});var pnt=s(mj);H4o=r(pnt,"UniSpeechForPreTraining"),pnt.forEach(t),U4o=r(uLe," (UniSpeech model)"),uLe.forEach(t),J4o=i(O),Du=n(O,"LI",{});var bLe=s(Du);gde=n(bLe,"STRONG",{});var _nt=s(gde);Y4o=r(_nt,"unispeech-sat"),_nt.forEach(t),K4o=r(bLe," \u2014 "),gj=n(bLe,"A",{href:!0});var unt=s(gj);Z4o=r(unt,"UniSpeechSatForPreTraining"),unt.forEach(t),eEo=r(bLe," (UniSpeechSat model)"),bLe.forEach(t),oEo=i(O),Gu=n(O,"LI",{});var vLe=s(Gu);hde=n(vLe,"STRONG",{});var bnt=s(hde);rEo=r(bnt,"visual_bert"),bnt.forEach(t),tEo=r(vLe," \u2014 "),hj=n(vLe,"A",{href:!0});var vnt=s(hj);aEo=r(vnt,"VisualBertForPreTraining"),vnt.forEach(t),nEo=r(vLe," (VisualBert model)"),vLe.forEach(t),sEo=i(O),Ou=n(O,"LI",{});var FLe=s(Ou);pde=n(FLe,"STRONG",{});var Fnt=s(pde);lEo=r(Fnt,"vit_mae"),Fnt.forEach(t),iEo=r(FLe," \u2014 "),pj=n(FLe,"A",{href:!0});var Tnt=s(pj);dEo=r(Tnt,"ViTMAEForPreTraining"),Tnt.forEach(t),cEo=r(FLe," (ViTMAE model)"),FLe.forEach(t),fEo=i(O),Vu=n(O,"LI",{});var TLe=s(Vu);_de=n(TLe,"STRONG",{});var Mnt=s(_de);mEo=r(Mnt,"wav2vec2"),Mnt.forEach(t),gEo=r(TLe," \u2014 "),_j=n(TLe,"A",{href:!0});var Ent=s(_j);hEo=r(Ent,"Wav2Vec2ForPreTraining"),Ent.forEach(t),pEo=r(TLe," (Wav2Vec2 model)"),TLe.forEach(t),_Eo=i(O),Xu=n(O,"LI",{});var MLe=s(Xu);ude=n(MLe,"STRONG",{});var Cnt=s(ude);uEo=r(Cnt,"wav2vec2-conformer"),Cnt.forEach(t),bEo=r(MLe," \u2014 "),uj=n(MLe,"A",{href:!0});var wnt=s(uj);vEo=r(wnt,"Wav2Vec2ConformerForPreTraining"),wnt.forEach(t),FEo=r(MLe," (Wav2Vec2-Conformer model)"),MLe.forEach(t),TEo=i(O),zu=n(O,"LI",{});var ELe=s(zu);bde=n(ELe,"STRONG",{});var Ant=s(bde);MEo=r(Ant,"xlm"),Ant.forEach(t),EEo=r(ELe," \u2014 "),bj=n(ELe,"A",{href:!0});var ynt=s(bj);CEo=r(ynt,"XLMWithLMHeadModel"),ynt.forEach(t),wEo=r(ELe," (XLM model)"),ELe.forEach(t),AEo=i(O),Wu=n(O,"LI",{});var CLe=s(Wu);vde=n(CLe,"STRONG",{});var Lnt=s(vde);yEo=r(Lnt,"xlm-roberta"),Lnt.forEach(t),LEo=r(CLe," \u2014 "),vj=n(CLe,"A",{href:!0});var xnt=s(vj);xEo=r(xnt,"XLMRobertaForMaskedLM"),xnt.forEach(t),$Eo=r(CLe," (XLM-RoBERTa model)"),CLe.forEach(t),kEo=i(O),Qu=n(O,"LI",{});var wLe=s(Qu);Fde=n(wLe,"STRONG",{});var $nt=s(Fde);SEo=r($nt,"xlm-roberta-xl"),$nt.forEach(t),REo=r(wLe," \u2014 "),Fj=n(wLe,"A",{href:!0});var knt=s(Fj);PEo=r(knt,"XLMRobertaXLForMaskedLM"),knt.forEach(t),BEo=r(wLe," (XLM-RoBERTa-XL model)"),wLe.forEach(t),IEo=i(O),Hu=n(O,"LI",{});var ALe=s(Hu);Tde=n(ALe,"STRONG",{});var Snt=s(Tde);NEo=r(Snt,"xlnet"),Snt.forEach(t),qEo=r(ALe," \u2014 "),Tj=n(ALe,"A",{href:!0});var Rnt=s(Tj);jEo=r(Rnt,"XLNetLMHeadModel"),Rnt.forEach(t),DEo=r(ALe," (XLNet model)"),ALe.forEach(t),O.forEach(t),GEo=i(ra),Uu=n(ra,"P",{});var yLe=s(Uu);OEo=r(yLe,"The model is set in evaluation mode by default using "),Mde=n(yLe,"CODE",{});var Pnt=s(Mde);VEo=r(Pnt,"model.eval()"),Pnt.forEach(t),XEo=r(yLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ede=n(yLe,"CODE",{});var Bnt=s(Ede);zEo=r(Bnt,"model.train()"),Bnt.forEach(t),yLe.forEach(t),WEo=i(ra),T(Ju.$$.fragment,ra),ra.forEach(t),Os.forEach(t),Eqe=i(f),ki=n(f,"H2",{class:!0});var yDe=s(ki);Yu=n(yDe,"A",{id:!0,class:!0,href:!0});var Int=s(Yu);Cde=n(Int,"SPAN",{});var Nnt=s(Cde);T(fy.$$.fragment,Nnt),Nnt.forEach(t),Int.forEach(t),QEo=i(yDe),wde=n(yDe,"SPAN",{});var qnt=s(wde);HEo=r(qnt,"AutoModelForCausalLM"),qnt.forEach(t),yDe.forEach(t),Cqe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(my.$$.fragment,Vs),UEo=i(Vs),Si=n(Vs,"P",{});var EZ=s(Si);JEo=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Mj=n(EZ,"A",{href:!0});var jnt=s(Mj);YEo=r(jnt,"from_pretrained()"),jnt.forEach(t),KEo=r(EZ," class method or the "),Ej=n(EZ,"A",{href:!0});var Dnt=s(Ej);ZEo=r(Dnt,"from_config()"),Dnt.forEach(t),eCo=r(EZ,` class
method.`),EZ.forEach(t),oCo=i(Vs),gy=n(Vs,"P",{});var LDe=s(gy);rCo=r(LDe,"This class cannot be instantiated directly using "),Ade=n(LDe,"CODE",{});var Gnt=s(Ade);tCo=r(Gnt,"__init__()"),Gnt.forEach(t),aCo=r(LDe," (throws an error)."),LDe.forEach(t),nCo=i(Vs),nt=n(Vs,"DIV",{class:!0});var Nw=s(nt);T(hy.$$.fragment,Nw),sCo=i(Nw),yde=n(Nw,"P",{});var Ont=s(yde);lCo=r(Ont,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ont.forEach(t),iCo=i(Nw),Ri=n(Nw,"P",{});var CZ=s(Ri);dCo=r(CZ,`Note:
Loading a model from its configuration file does `),Lde=n(CZ,"STRONG",{});var Vnt=s(Lde);cCo=r(Vnt,"not"),Vnt.forEach(t),fCo=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=n(CZ,"A",{href:!0});var Xnt=s(Cj);mCo=r(Xnt,"from_pretrained()"),Xnt.forEach(t),gCo=r(CZ," to load the model weights."),CZ.forEach(t),hCo=i(Nw),T(Ku.$$.fragment,Nw),Nw.forEach(t),pCo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(py.$$.fragment,ta),_Co=i(ta),xde=n(ta,"P",{});var znt=s(xde);uCo=r(znt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),znt.forEach(t),bCo=i(ta),$a=n(ta,"P",{});var qw=s($a);vCo=r(qw,"The model class to instantiate is selected based on the "),$de=n(qw,"CODE",{});var Wnt=s($de);FCo=r(Wnt,"model_type"),Wnt.forEach(t),TCo=r(qw,` property of the config object (either
passed as an argument or loaded from `),kde=n(qw,"CODE",{});var Qnt=s(kde);MCo=r(Qnt,"pretrained_model_name_or_path"),Qnt.forEach(t),ECo=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sde=n(qw,"CODE",{});var Hnt=s(Sde);CCo=r(Hnt,"pretrained_model_name_or_path"),Hnt.forEach(t),wCo=r(qw,":"),qw.forEach(t),ACo=i(ta),z=n(ta,"UL",{});var W=s(z);Zu=n(W,"LI",{});var LLe=s(Zu);Rde=n(LLe,"STRONG",{});var Unt=s(Rde);yCo=r(Unt,"bart"),Unt.forEach(t),LCo=r(LLe," \u2014 "),wj=n(LLe,"A",{href:!0});var Jnt=s(wj);xCo=r(Jnt,"BartForCausalLM"),Jnt.forEach(t),$Co=r(LLe," (BART model)"),LLe.forEach(t),kCo=i(W),e2=n(W,"LI",{});var xLe=s(e2);Pde=n(xLe,"STRONG",{});var Ynt=s(Pde);SCo=r(Ynt,"bert"),Ynt.forEach(t),RCo=r(xLe," \u2014 "),Aj=n(xLe,"A",{href:!0});var Knt=s(Aj);PCo=r(Knt,"BertLMHeadModel"),Knt.forEach(t),BCo=r(xLe," (BERT model)"),xLe.forEach(t),ICo=i(W),o2=n(W,"LI",{});var $Le=s(o2);Bde=n($Le,"STRONG",{});var Znt=s(Bde);NCo=r(Znt,"bert-generation"),Znt.forEach(t),qCo=r($Le," \u2014 "),yj=n($Le,"A",{href:!0});var est=s(yj);jCo=r(est,"BertGenerationDecoder"),est.forEach(t),DCo=r($Le," (Bert Generation model)"),$Le.forEach(t),GCo=i(W),r2=n(W,"LI",{});var kLe=s(r2);Ide=n(kLe,"STRONG",{});var ost=s(Ide);OCo=r(ost,"big_bird"),ost.forEach(t),VCo=r(kLe," \u2014 "),Lj=n(kLe,"A",{href:!0});var rst=s(Lj);XCo=r(rst,"BigBirdForCausalLM"),rst.forEach(t),zCo=r(kLe," (BigBird model)"),kLe.forEach(t),WCo=i(W),t2=n(W,"LI",{});var SLe=s(t2);Nde=n(SLe,"STRONG",{});var tst=s(Nde);QCo=r(tst,"bigbird_pegasus"),tst.forEach(t),HCo=r(SLe," \u2014 "),xj=n(SLe,"A",{href:!0});var ast=s(xj);UCo=r(ast,"BigBirdPegasusForCausalLM"),ast.forEach(t),JCo=r(SLe," (BigBirdPegasus model)"),SLe.forEach(t),YCo=i(W),a2=n(W,"LI",{});var RLe=s(a2);qde=n(RLe,"STRONG",{});var nst=s(qde);KCo=r(nst,"blenderbot"),nst.forEach(t),ZCo=r(RLe," \u2014 "),$j=n(RLe,"A",{href:!0});var sst=s($j);e5o=r(sst,"BlenderbotForCausalLM"),sst.forEach(t),o5o=r(RLe," (Blenderbot model)"),RLe.forEach(t),r5o=i(W),n2=n(W,"LI",{});var PLe=s(n2);jde=n(PLe,"STRONG",{});var lst=s(jde);t5o=r(lst,"blenderbot-small"),lst.forEach(t),a5o=r(PLe," \u2014 "),kj=n(PLe,"A",{href:!0});var ist=s(kj);n5o=r(ist,"BlenderbotSmallForCausalLM"),ist.forEach(t),s5o=r(PLe," (BlenderbotSmall model)"),PLe.forEach(t),l5o=i(W),s2=n(W,"LI",{});var BLe=s(s2);Dde=n(BLe,"STRONG",{});var dst=s(Dde);i5o=r(dst,"camembert"),dst.forEach(t),d5o=r(BLe," \u2014 "),Sj=n(BLe,"A",{href:!0});var cst=s(Sj);c5o=r(cst,"CamembertForCausalLM"),cst.forEach(t),f5o=r(BLe," (CamemBERT model)"),BLe.forEach(t),m5o=i(W),l2=n(W,"LI",{});var ILe=s(l2);Gde=n(ILe,"STRONG",{});var fst=s(Gde);g5o=r(fst,"ctrl"),fst.forEach(t),h5o=r(ILe," \u2014 "),Rj=n(ILe,"A",{href:!0});var mst=s(Rj);p5o=r(mst,"CTRLLMHeadModel"),mst.forEach(t),_5o=r(ILe," (CTRL model)"),ILe.forEach(t),u5o=i(W),i2=n(W,"LI",{});var NLe=s(i2);Ode=n(NLe,"STRONG",{});var gst=s(Ode);b5o=r(gst,"data2vec-text"),gst.forEach(t),v5o=r(NLe," \u2014 "),Pj=n(NLe,"A",{href:!0});var hst=s(Pj);F5o=r(hst,"Data2VecTextForCausalLM"),hst.forEach(t),T5o=r(NLe," (Data2VecText model)"),NLe.forEach(t),M5o=i(W),d2=n(W,"LI",{});var qLe=s(d2);Vde=n(qLe,"STRONG",{});var pst=s(Vde);E5o=r(pst,"electra"),pst.forEach(t),C5o=r(qLe," \u2014 "),Bj=n(qLe,"A",{href:!0});var _st=s(Bj);w5o=r(_st,"ElectraForCausalLM"),_st.forEach(t),A5o=r(qLe," (ELECTRA model)"),qLe.forEach(t),y5o=i(W),c2=n(W,"LI",{});var jLe=s(c2);Xde=n(jLe,"STRONG",{});var ust=s(Xde);L5o=r(ust,"gpt2"),ust.forEach(t),x5o=r(jLe," \u2014 "),Ij=n(jLe,"A",{href:!0});var bst=s(Ij);$5o=r(bst,"GPT2LMHeadModel"),bst.forEach(t),k5o=r(jLe," (OpenAI GPT-2 model)"),jLe.forEach(t),S5o=i(W),f2=n(W,"LI",{});var DLe=s(f2);zde=n(DLe,"STRONG",{});var vst=s(zde);R5o=r(vst,"gpt_neo"),vst.forEach(t),P5o=r(DLe," \u2014 "),Nj=n(DLe,"A",{href:!0});var Fst=s(Nj);B5o=r(Fst,"GPTNeoForCausalLM"),Fst.forEach(t),I5o=r(DLe," (GPT Neo model)"),DLe.forEach(t),N5o=i(W),m2=n(W,"LI",{});var GLe=s(m2);Wde=n(GLe,"STRONG",{});var Tst=s(Wde);q5o=r(Tst,"gpt_neox"),Tst.forEach(t),j5o=r(GLe," \u2014 "),qj=n(GLe,"A",{href:!0});var Mst=s(qj);D5o=r(Mst,"GPTNeoXForCausalLM"),Mst.forEach(t),G5o=r(GLe," (GPT NeoX model)"),GLe.forEach(t),O5o=i(W),g2=n(W,"LI",{});var OLe=s(g2);Qde=n(OLe,"STRONG",{});var Est=s(Qde);V5o=r(Est,"gptj"),Est.forEach(t),X5o=r(OLe," \u2014 "),jj=n(OLe,"A",{href:!0});var Cst=s(jj);z5o=r(Cst,"GPTJForCausalLM"),Cst.forEach(t),W5o=r(OLe," (GPT-J model)"),OLe.forEach(t),Q5o=i(W),h2=n(W,"LI",{});var VLe=s(h2);Hde=n(VLe,"STRONG",{});var wst=s(Hde);H5o=r(wst,"marian"),wst.forEach(t),U5o=r(VLe," \u2014 "),Dj=n(VLe,"A",{href:!0});var Ast=s(Dj);J5o=r(Ast,"MarianForCausalLM"),Ast.forEach(t),Y5o=r(VLe," (Marian model)"),VLe.forEach(t),K5o=i(W),p2=n(W,"LI",{});var XLe=s(p2);Ude=n(XLe,"STRONG",{});var yst=s(Ude);Z5o=r(yst,"mbart"),yst.forEach(t),ewo=r(XLe," \u2014 "),Gj=n(XLe,"A",{href:!0});var Lst=s(Gj);owo=r(Lst,"MBartForCausalLM"),Lst.forEach(t),rwo=r(XLe," (mBART model)"),XLe.forEach(t),two=i(W),_2=n(W,"LI",{});var zLe=s(_2);Jde=n(zLe,"STRONG",{});var xst=s(Jde);awo=r(xst,"megatron-bert"),xst.forEach(t),nwo=r(zLe," \u2014 "),Oj=n(zLe,"A",{href:!0});var $st=s(Oj);swo=r($st,"MegatronBertForCausalLM"),$st.forEach(t),lwo=r(zLe," (MegatronBert model)"),zLe.forEach(t),iwo=i(W),u2=n(W,"LI",{});var WLe=s(u2);Yde=n(WLe,"STRONG",{});var kst=s(Yde);dwo=r(kst,"openai-gpt"),kst.forEach(t),cwo=r(WLe," \u2014 "),Vj=n(WLe,"A",{href:!0});var Sst=s(Vj);fwo=r(Sst,"OpenAIGPTLMHeadModel"),Sst.forEach(t),mwo=r(WLe," (OpenAI GPT model)"),WLe.forEach(t),gwo=i(W),b2=n(W,"LI",{});var QLe=s(b2);Kde=n(QLe,"STRONG",{});var Rst=s(Kde);hwo=r(Rst,"opt"),Rst.forEach(t),pwo=r(QLe," \u2014 "),Xj=n(QLe,"A",{href:!0});var Pst=s(Xj);_wo=r(Pst,"OPTForCausalLM"),Pst.forEach(t),uwo=r(QLe," (OPT model)"),QLe.forEach(t),bwo=i(W),v2=n(W,"LI",{});var HLe=s(v2);Zde=n(HLe,"STRONG",{});var Bst=s(Zde);vwo=r(Bst,"pegasus"),Bst.forEach(t),Fwo=r(HLe," \u2014 "),zj=n(HLe,"A",{href:!0});var Ist=s(zj);Two=r(Ist,"PegasusForCausalLM"),Ist.forEach(t),Mwo=r(HLe," (Pegasus model)"),HLe.forEach(t),Ewo=i(W),F2=n(W,"LI",{});var ULe=s(F2);ece=n(ULe,"STRONG",{});var Nst=s(ece);Cwo=r(Nst,"plbart"),Nst.forEach(t),wwo=r(ULe," \u2014 "),Wj=n(ULe,"A",{href:!0});var qst=s(Wj);Awo=r(qst,"PLBartForCausalLM"),qst.forEach(t),ywo=r(ULe," (PLBart model)"),ULe.forEach(t),Lwo=i(W),T2=n(W,"LI",{});var JLe=s(T2);oce=n(JLe,"STRONG",{});var jst=s(oce);xwo=r(jst,"prophetnet"),jst.forEach(t),$wo=r(JLe," \u2014 "),Qj=n(JLe,"A",{href:!0});var Dst=s(Qj);kwo=r(Dst,"ProphetNetForCausalLM"),Dst.forEach(t),Swo=r(JLe," (ProphetNet model)"),JLe.forEach(t),Rwo=i(W),M2=n(W,"LI",{});var YLe=s(M2);rce=n(YLe,"STRONG",{});var Gst=s(rce);Pwo=r(Gst,"qdqbert"),Gst.forEach(t),Bwo=r(YLe," \u2014 "),Hj=n(YLe,"A",{href:!0});var Ost=s(Hj);Iwo=r(Ost,"QDQBertLMHeadModel"),Ost.forEach(t),Nwo=r(YLe," (QDQBert model)"),YLe.forEach(t),qwo=i(W),E2=n(W,"LI",{});var KLe=s(E2);tce=n(KLe,"STRONG",{});var Vst=s(tce);jwo=r(Vst,"reformer"),Vst.forEach(t),Dwo=r(KLe," \u2014 "),Uj=n(KLe,"A",{href:!0});var Xst=s(Uj);Gwo=r(Xst,"ReformerModelWithLMHead"),Xst.forEach(t),Owo=r(KLe," (Reformer model)"),KLe.forEach(t),Vwo=i(W),C2=n(W,"LI",{});var ZLe=s(C2);ace=n(ZLe,"STRONG",{});var zst=s(ace);Xwo=r(zst,"rembert"),zst.forEach(t),zwo=r(ZLe," \u2014 "),Jj=n(ZLe,"A",{href:!0});var Wst=s(Jj);Wwo=r(Wst,"RemBertForCausalLM"),Wst.forEach(t),Qwo=r(ZLe," (RemBERT model)"),ZLe.forEach(t),Hwo=i(W),w2=n(W,"LI",{});var e8e=s(w2);nce=n(e8e,"STRONG",{});var Qst=s(nce);Uwo=r(Qst,"roberta"),Qst.forEach(t),Jwo=r(e8e," \u2014 "),Yj=n(e8e,"A",{href:!0});var Hst=s(Yj);Ywo=r(Hst,"RobertaForCausalLM"),Hst.forEach(t),Kwo=r(e8e," (RoBERTa model)"),e8e.forEach(t),Zwo=i(W),A2=n(W,"LI",{});var o8e=s(A2);sce=n(o8e,"STRONG",{});var Ust=s(sce);e6o=r(Ust,"roformer"),Ust.forEach(t),o6o=r(o8e," \u2014 "),Kj=n(o8e,"A",{href:!0});var Jst=s(Kj);r6o=r(Jst,"RoFormerForCausalLM"),Jst.forEach(t),t6o=r(o8e," (RoFormer model)"),o8e.forEach(t),a6o=i(W),y2=n(W,"LI",{});var r8e=s(y2);lce=n(r8e,"STRONG",{});var Yst=s(lce);n6o=r(Yst,"speech_to_text_2"),Yst.forEach(t),s6o=r(r8e," \u2014 "),Zj=n(r8e,"A",{href:!0});var Kst=s(Zj);l6o=r(Kst,"Speech2Text2ForCausalLM"),Kst.forEach(t),i6o=r(r8e," (Speech2Text2 model)"),r8e.forEach(t),d6o=i(W),L2=n(W,"LI",{});var t8e=s(L2);ice=n(t8e,"STRONG",{});var Zst=s(ice);c6o=r(Zst,"transfo-xl"),Zst.forEach(t),f6o=r(t8e," \u2014 "),eD=n(t8e,"A",{href:!0});var elt=s(eD);m6o=r(elt,"TransfoXLLMHeadModel"),elt.forEach(t),g6o=r(t8e," (Transformer-XL model)"),t8e.forEach(t),h6o=i(W),x2=n(W,"LI",{});var a8e=s(x2);dce=n(a8e,"STRONG",{});var olt=s(dce);p6o=r(olt,"trocr"),olt.forEach(t),_6o=r(a8e," \u2014 "),oD=n(a8e,"A",{href:!0});var rlt=s(oD);u6o=r(rlt,"TrOCRForCausalLM"),rlt.forEach(t),b6o=r(a8e," (TrOCR model)"),a8e.forEach(t),v6o=i(W),$2=n(W,"LI",{});var n8e=s($2);cce=n(n8e,"STRONG",{});var tlt=s(cce);F6o=r(tlt,"xglm"),tlt.forEach(t),T6o=r(n8e," \u2014 "),rD=n(n8e,"A",{href:!0});var alt=s(rD);M6o=r(alt,"XGLMForCausalLM"),alt.forEach(t),E6o=r(n8e," (XGLM model)"),n8e.forEach(t),C6o=i(W),k2=n(W,"LI",{});var s8e=s(k2);fce=n(s8e,"STRONG",{});var nlt=s(fce);w6o=r(nlt,"xlm"),nlt.forEach(t),A6o=r(s8e," \u2014 "),tD=n(s8e,"A",{href:!0});var slt=s(tD);y6o=r(slt,"XLMWithLMHeadModel"),slt.forEach(t),L6o=r(s8e," (XLM model)"),s8e.forEach(t),x6o=i(W),S2=n(W,"LI",{});var l8e=s(S2);mce=n(l8e,"STRONG",{});var llt=s(mce);$6o=r(llt,"xlm-prophetnet"),llt.forEach(t),k6o=r(l8e," \u2014 "),aD=n(l8e,"A",{href:!0});var ilt=s(aD);S6o=r(ilt,"XLMProphetNetForCausalLM"),ilt.forEach(t),R6o=r(l8e," (XLMProphetNet model)"),l8e.forEach(t),P6o=i(W),R2=n(W,"LI",{});var i8e=s(R2);gce=n(i8e,"STRONG",{});var dlt=s(gce);B6o=r(dlt,"xlm-roberta"),dlt.forEach(t),I6o=r(i8e," \u2014 "),nD=n(i8e,"A",{href:!0});var clt=s(nD);N6o=r(clt,"XLMRobertaForCausalLM"),clt.forEach(t),q6o=r(i8e," (XLM-RoBERTa model)"),i8e.forEach(t),j6o=i(W),P2=n(W,"LI",{});var d8e=s(P2);hce=n(d8e,"STRONG",{});var flt=s(hce);D6o=r(flt,"xlm-roberta-xl"),flt.forEach(t),G6o=r(d8e," \u2014 "),sD=n(d8e,"A",{href:!0});var mlt=s(sD);O6o=r(mlt,"XLMRobertaXLForCausalLM"),mlt.forEach(t),V6o=r(d8e," (XLM-RoBERTa-XL model)"),d8e.forEach(t),X6o=i(W),B2=n(W,"LI",{});var c8e=s(B2);pce=n(c8e,"STRONG",{});var glt=s(pce);z6o=r(glt,"xlnet"),glt.forEach(t),W6o=r(c8e," \u2014 "),lD=n(c8e,"A",{href:!0});var hlt=s(lD);Q6o=r(hlt,"XLNetLMHeadModel"),hlt.forEach(t),H6o=r(c8e," (XLNet model)"),c8e.forEach(t),W.forEach(t),U6o=i(ta),I2=n(ta,"P",{});var f8e=s(I2);J6o=r(f8e,"The model is set in evaluation mode by default using "),_ce=n(f8e,"CODE",{});var plt=s(_ce);Y6o=r(plt,"model.eval()"),plt.forEach(t),K6o=r(f8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uce=n(f8e,"CODE",{});var _lt=s(uce);Z6o=r(_lt,"model.train()"),_lt.forEach(t),f8e.forEach(t),eAo=i(ta),T(N2.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),wqe=i(f),Pi=n(f,"H2",{class:!0});var xDe=s(Pi);q2=n(xDe,"A",{id:!0,class:!0,href:!0});var ult=s(q2);bce=n(ult,"SPAN",{});var blt=s(bce);T(_y.$$.fragment,blt),blt.forEach(t),ult.forEach(t),oAo=i(xDe),vce=n(xDe,"SPAN",{});var vlt=s(vce);rAo=r(vlt,"AutoModelForMaskedLM"),vlt.forEach(t),xDe.forEach(t),Aqe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(uy.$$.fragment,Xs),tAo=i(Xs),Bi=n(Xs,"P",{});var wZ=s(Bi);aAo=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iD=n(wZ,"A",{href:!0});var Flt=s(iD);nAo=r(Flt,"from_pretrained()"),Flt.forEach(t),sAo=r(wZ," class method or the "),dD=n(wZ,"A",{href:!0});var Tlt=s(dD);lAo=r(Tlt,"from_config()"),Tlt.forEach(t),iAo=r(wZ,` class
method.`),wZ.forEach(t),dAo=i(Xs),by=n(Xs,"P",{});var $De=s(by);cAo=r($De,"This class cannot be instantiated directly using "),Fce=n($De,"CODE",{});var Mlt=s(Fce);fAo=r(Mlt,"__init__()"),Mlt.forEach(t),mAo=r($De," (throws an error)."),$De.forEach(t),gAo=i(Xs),st=n(Xs,"DIV",{class:!0});var jw=s(st);T(vy.$$.fragment,jw),hAo=i(jw),Tce=n(jw,"P",{});var Elt=s(Tce);pAo=r(Elt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Elt.forEach(t),_Ao=i(jw),Ii=n(jw,"P",{});var AZ=s(Ii);uAo=r(AZ,`Note:
Loading a model from its configuration file does `),Mce=n(AZ,"STRONG",{});var Clt=s(Mce);bAo=r(Clt,"not"),Clt.forEach(t),vAo=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cD=n(AZ,"A",{href:!0});var wlt=s(cD);FAo=r(wlt,"from_pretrained()"),wlt.forEach(t),TAo=r(AZ," to load the model weights."),AZ.forEach(t),MAo=i(jw),T(j2.$$.fragment,jw),jw.forEach(t),EAo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(Fy.$$.fragment,aa),CAo=i(aa),Ece=n(aa,"P",{});var Alt=s(Ece);wAo=r(Alt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Alt.forEach(t),AAo=i(aa),ka=n(aa,"P",{});var Dw=s(ka);yAo=r(Dw,"The model class to instantiate is selected based on the "),Cce=n(Dw,"CODE",{});var ylt=s(Cce);LAo=r(ylt,"model_type"),ylt.forEach(t),xAo=r(Dw,` property of the config object (either
passed as an argument or loaded from `),wce=n(Dw,"CODE",{});var Llt=s(wce);$Ao=r(Llt,"pretrained_model_name_or_path"),Llt.forEach(t),kAo=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ace=n(Dw,"CODE",{});var xlt=s(Ace);SAo=r(xlt,"pretrained_model_name_or_path"),xlt.forEach(t),RAo=r(Dw,":"),Dw.forEach(t),PAo=i(aa),Q=n(aa,"UL",{});var U=s(Q);D2=n(U,"LI",{});var m8e=s(D2);yce=n(m8e,"STRONG",{});var $lt=s(yce);BAo=r($lt,"albert"),$lt.forEach(t),IAo=r(m8e," \u2014 "),fD=n(m8e,"A",{href:!0});var klt=s(fD);NAo=r(klt,"AlbertForMaskedLM"),klt.forEach(t),qAo=r(m8e," (ALBERT model)"),m8e.forEach(t),jAo=i(U),G2=n(U,"LI",{});var g8e=s(G2);Lce=n(g8e,"STRONG",{});var Slt=s(Lce);DAo=r(Slt,"bart"),Slt.forEach(t),GAo=r(g8e," \u2014 "),mD=n(g8e,"A",{href:!0});var Rlt=s(mD);OAo=r(Rlt,"BartForConditionalGeneration"),Rlt.forEach(t),VAo=r(g8e," (BART model)"),g8e.forEach(t),XAo=i(U),O2=n(U,"LI",{});var h8e=s(O2);xce=n(h8e,"STRONG",{});var Plt=s(xce);zAo=r(Plt,"bert"),Plt.forEach(t),WAo=r(h8e," \u2014 "),gD=n(h8e,"A",{href:!0});var Blt=s(gD);QAo=r(Blt,"BertForMaskedLM"),Blt.forEach(t),HAo=r(h8e," (BERT model)"),h8e.forEach(t),UAo=i(U),V2=n(U,"LI",{});var p8e=s(V2);$ce=n(p8e,"STRONG",{});var Ilt=s($ce);JAo=r(Ilt,"big_bird"),Ilt.forEach(t),YAo=r(p8e," \u2014 "),hD=n(p8e,"A",{href:!0});var Nlt=s(hD);KAo=r(Nlt,"BigBirdForMaskedLM"),Nlt.forEach(t),ZAo=r(p8e," (BigBird model)"),p8e.forEach(t),eyo=i(U),X2=n(U,"LI",{});var _8e=s(X2);kce=n(_8e,"STRONG",{});var qlt=s(kce);oyo=r(qlt,"camembert"),qlt.forEach(t),ryo=r(_8e," \u2014 "),pD=n(_8e,"A",{href:!0});var jlt=s(pD);tyo=r(jlt,"CamembertForMaskedLM"),jlt.forEach(t),ayo=r(_8e," (CamemBERT model)"),_8e.forEach(t),nyo=i(U),z2=n(U,"LI",{});var u8e=s(z2);Sce=n(u8e,"STRONG",{});var Dlt=s(Sce);syo=r(Dlt,"convbert"),Dlt.forEach(t),lyo=r(u8e," \u2014 "),_D=n(u8e,"A",{href:!0});var Glt=s(_D);iyo=r(Glt,"ConvBertForMaskedLM"),Glt.forEach(t),dyo=r(u8e," (ConvBERT model)"),u8e.forEach(t),cyo=i(U),W2=n(U,"LI",{});var b8e=s(W2);Rce=n(b8e,"STRONG",{});var Olt=s(Rce);fyo=r(Olt,"data2vec-text"),Olt.forEach(t),myo=r(b8e," \u2014 "),uD=n(b8e,"A",{href:!0});var Vlt=s(uD);gyo=r(Vlt,"Data2VecTextForMaskedLM"),Vlt.forEach(t),hyo=r(b8e," (Data2VecText model)"),b8e.forEach(t),pyo=i(U),Q2=n(U,"LI",{});var v8e=s(Q2);Pce=n(v8e,"STRONG",{});var Xlt=s(Pce);_yo=r(Xlt,"deberta"),Xlt.forEach(t),uyo=r(v8e," \u2014 "),bD=n(v8e,"A",{href:!0});var zlt=s(bD);byo=r(zlt,"DebertaForMaskedLM"),zlt.forEach(t),vyo=r(v8e," (DeBERTa model)"),v8e.forEach(t),Fyo=i(U),H2=n(U,"LI",{});var F8e=s(H2);Bce=n(F8e,"STRONG",{});var Wlt=s(Bce);Tyo=r(Wlt,"deberta-v2"),Wlt.forEach(t),Myo=r(F8e," \u2014 "),vD=n(F8e,"A",{href:!0});var Qlt=s(vD);Eyo=r(Qlt,"DebertaV2ForMaskedLM"),Qlt.forEach(t),Cyo=r(F8e," (DeBERTa-v2 model)"),F8e.forEach(t),wyo=i(U),U2=n(U,"LI",{});var T8e=s(U2);Ice=n(T8e,"STRONG",{});var Hlt=s(Ice);Ayo=r(Hlt,"distilbert"),Hlt.forEach(t),yyo=r(T8e," \u2014 "),FD=n(T8e,"A",{href:!0});var Ult=s(FD);Lyo=r(Ult,"DistilBertForMaskedLM"),Ult.forEach(t),xyo=r(T8e," (DistilBERT model)"),T8e.forEach(t),$yo=i(U),J2=n(U,"LI",{});var M8e=s(J2);Nce=n(M8e,"STRONG",{});var Jlt=s(Nce);kyo=r(Jlt,"electra"),Jlt.forEach(t),Syo=r(M8e," \u2014 "),TD=n(M8e,"A",{href:!0});var Ylt=s(TD);Ryo=r(Ylt,"ElectraForMaskedLM"),Ylt.forEach(t),Pyo=r(M8e," (ELECTRA model)"),M8e.forEach(t),Byo=i(U),Y2=n(U,"LI",{});var E8e=s(Y2);qce=n(E8e,"STRONG",{});var Klt=s(qce);Iyo=r(Klt,"flaubert"),Klt.forEach(t),Nyo=r(E8e," \u2014 "),MD=n(E8e,"A",{href:!0});var Zlt=s(MD);qyo=r(Zlt,"FlaubertWithLMHeadModel"),Zlt.forEach(t),jyo=r(E8e," (FlauBERT model)"),E8e.forEach(t),Dyo=i(U),K2=n(U,"LI",{});var C8e=s(K2);jce=n(C8e,"STRONG",{});var eit=s(jce);Gyo=r(eit,"fnet"),eit.forEach(t),Oyo=r(C8e," \u2014 "),ED=n(C8e,"A",{href:!0});var oit=s(ED);Vyo=r(oit,"FNetForMaskedLM"),oit.forEach(t),Xyo=r(C8e," (FNet model)"),C8e.forEach(t),zyo=i(U),Z2=n(U,"LI",{});var w8e=s(Z2);Dce=n(w8e,"STRONG",{});var rit=s(Dce);Wyo=r(rit,"funnel"),rit.forEach(t),Qyo=r(w8e," \u2014 "),CD=n(w8e,"A",{href:!0});var tit=s(CD);Hyo=r(tit,"FunnelForMaskedLM"),tit.forEach(t),Uyo=r(w8e," (Funnel Transformer model)"),w8e.forEach(t),Jyo=i(U),e1=n(U,"LI",{});var A8e=s(e1);Gce=n(A8e,"STRONG",{});var ait=s(Gce);Yyo=r(ait,"ibert"),ait.forEach(t),Kyo=r(A8e," \u2014 "),wD=n(A8e,"A",{href:!0});var nit=s(wD);Zyo=r(nit,"IBertForMaskedLM"),nit.forEach(t),eLo=r(A8e," (I-BERT model)"),A8e.forEach(t),oLo=i(U),o1=n(U,"LI",{});var y8e=s(o1);Oce=n(y8e,"STRONG",{});var sit=s(Oce);rLo=r(sit,"layoutlm"),sit.forEach(t),tLo=r(y8e," \u2014 "),AD=n(y8e,"A",{href:!0});var lit=s(AD);aLo=r(lit,"LayoutLMForMaskedLM"),lit.forEach(t),nLo=r(y8e," (LayoutLM model)"),y8e.forEach(t),sLo=i(U),r1=n(U,"LI",{});var L8e=s(r1);Vce=n(L8e,"STRONG",{});var iit=s(Vce);lLo=r(iit,"longformer"),iit.forEach(t),iLo=r(L8e," \u2014 "),yD=n(L8e,"A",{href:!0});var dit=s(yD);dLo=r(dit,"LongformerForMaskedLM"),dit.forEach(t),cLo=r(L8e," (Longformer model)"),L8e.forEach(t),fLo=i(U),t1=n(U,"LI",{});var x8e=s(t1);Xce=n(x8e,"STRONG",{});var cit=s(Xce);mLo=r(cit,"mbart"),cit.forEach(t),gLo=r(x8e," \u2014 "),LD=n(x8e,"A",{href:!0});var fit=s(LD);hLo=r(fit,"MBartForConditionalGeneration"),fit.forEach(t),pLo=r(x8e," (mBART model)"),x8e.forEach(t),_Lo=i(U),a1=n(U,"LI",{});var $8e=s(a1);zce=n($8e,"STRONG",{});var mit=s(zce);uLo=r(mit,"megatron-bert"),mit.forEach(t),bLo=r($8e," \u2014 "),xD=n($8e,"A",{href:!0});var git=s(xD);vLo=r(git,"MegatronBertForMaskedLM"),git.forEach(t),FLo=r($8e," (MegatronBert model)"),$8e.forEach(t),TLo=i(U),n1=n(U,"LI",{});var k8e=s(n1);Wce=n(k8e,"STRONG",{});var hit=s(Wce);MLo=r(hit,"mobilebert"),hit.forEach(t),ELo=r(k8e," \u2014 "),$D=n(k8e,"A",{href:!0});var pit=s($D);CLo=r(pit,"MobileBertForMaskedLM"),pit.forEach(t),wLo=r(k8e," (MobileBERT model)"),k8e.forEach(t),ALo=i(U),s1=n(U,"LI",{});var S8e=s(s1);Qce=n(S8e,"STRONG",{});var _it=s(Qce);yLo=r(_it,"mpnet"),_it.forEach(t),LLo=r(S8e," \u2014 "),kD=n(S8e,"A",{href:!0});var uit=s(kD);xLo=r(uit,"MPNetForMaskedLM"),uit.forEach(t),$Lo=r(S8e," (MPNet model)"),S8e.forEach(t),kLo=i(U),l1=n(U,"LI",{});var R8e=s(l1);Hce=n(R8e,"STRONG",{});var bit=s(Hce);SLo=r(bit,"nystromformer"),bit.forEach(t),RLo=r(R8e," \u2014 "),SD=n(R8e,"A",{href:!0});var vit=s(SD);PLo=r(vit,"NystromformerForMaskedLM"),vit.forEach(t),BLo=r(R8e," (Nystromformer model)"),R8e.forEach(t),ILo=i(U),i1=n(U,"LI",{});var P8e=s(i1);Uce=n(P8e,"STRONG",{});var Fit=s(Uce);NLo=r(Fit,"perceiver"),Fit.forEach(t),qLo=r(P8e," \u2014 "),RD=n(P8e,"A",{href:!0});var Tit=s(RD);jLo=r(Tit,"PerceiverForMaskedLM"),Tit.forEach(t),DLo=r(P8e," (Perceiver model)"),P8e.forEach(t),GLo=i(U),d1=n(U,"LI",{});var B8e=s(d1);Jce=n(B8e,"STRONG",{});var Mit=s(Jce);OLo=r(Mit,"qdqbert"),Mit.forEach(t),VLo=r(B8e," \u2014 "),PD=n(B8e,"A",{href:!0});var Eit=s(PD);XLo=r(Eit,"QDQBertForMaskedLM"),Eit.forEach(t),zLo=r(B8e," (QDQBert model)"),B8e.forEach(t),WLo=i(U),c1=n(U,"LI",{});var I8e=s(c1);Yce=n(I8e,"STRONG",{});var Cit=s(Yce);QLo=r(Cit,"reformer"),Cit.forEach(t),HLo=r(I8e," \u2014 "),BD=n(I8e,"A",{href:!0});var wit=s(BD);ULo=r(wit,"ReformerForMaskedLM"),wit.forEach(t),JLo=r(I8e," (Reformer model)"),I8e.forEach(t),YLo=i(U),f1=n(U,"LI",{});var N8e=s(f1);Kce=n(N8e,"STRONG",{});var Ait=s(Kce);KLo=r(Ait,"rembert"),Ait.forEach(t),ZLo=r(N8e," \u2014 "),ID=n(N8e,"A",{href:!0});var yit=s(ID);e8o=r(yit,"RemBertForMaskedLM"),yit.forEach(t),o8o=r(N8e," (RemBERT model)"),N8e.forEach(t),r8o=i(U),m1=n(U,"LI",{});var q8e=s(m1);Zce=n(q8e,"STRONG",{});var Lit=s(Zce);t8o=r(Lit,"roberta"),Lit.forEach(t),a8o=r(q8e," \u2014 "),ND=n(q8e,"A",{href:!0});var xit=s(ND);n8o=r(xit,"RobertaForMaskedLM"),xit.forEach(t),s8o=r(q8e," (RoBERTa model)"),q8e.forEach(t),l8o=i(U),g1=n(U,"LI",{});var j8e=s(g1);efe=n(j8e,"STRONG",{});var $it=s(efe);i8o=r($it,"roformer"),$it.forEach(t),d8o=r(j8e," \u2014 "),qD=n(j8e,"A",{href:!0});var kit=s(qD);c8o=r(kit,"RoFormerForMaskedLM"),kit.forEach(t),f8o=r(j8e," (RoFormer model)"),j8e.forEach(t),m8o=i(U),h1=n(U,"LI",{});var D8e=s(h1);ofe=n(D8e,"STRONG",{});var Sit=s(ofe);g8o=r(Sit,"squeezebert"),Sit.forEach(t),h8o=r(D8e," \u2014 "),jD=n(D8e,"A",{href:!0});var Rit=s(jD);p8o=r(Rit,"SqueezeBertForMaskedLM"),Rit.forEach(t),_8o=r(D8e," (SqueezeBERT model)"),D8e.forEach(t),u8o=i(U),p1=n(U,"LI",{});var G8e=s(p1);rfe=n(G8e,"STRONG",{});var Pit=s(rfe);b8o=r(Pit,"tapas"),Pit.forEach(t),v8o=r(G8e," \u2014 "),DD=n(G8e,"A",{href:!0});var Bit=s(DD);F8o=r(Bit,"TapasForMaskedLM"),Bit.forEach(t),T8o=r(G8e," (TAPAS model)"),G8e.forEach(t),M8o=i(U),_1=n(U,"LI",{});var O8e=s(_1);tfe=n(O8e,"STRONG",{});var Iit=s(tfe);E8o=r(Iit,"wav2vec2"),Iit.forEach(t),C8o=r(O8e," \u2014 "),afe=n(O8e,"CODE",{});var Nit=s(afe);w8o=r(Nit,"Wav2Vec2ForMaskedLM"),Nit.forEach(t),A8o=r(O8e," (Wav2Vec2 model)"),O8e.forEach(t),y8o=i(U),u1=n(U,"LI",{});var V8e=s(u1);nfe=n(V8e,"STRONG",{});var qit=s(nfe);L8o=r(qit,"xlm"),qit.forEach(t),x8o=r(V8e," \u2014 "),GD=n(V8e,"A",{href:!0});var jit=s(GD);$8o=r(jit,"XLMWithLMHeadModel"),jit.forEach(t),k8o=r(V8e," (XLM model)"),V8e.forEach(t),S8o=i(U),b1=n(U,"LI",{});var X8e=s(b1);sfe=n(X8e,"STRONG",{});var Dit=s(sfe);R8o=r(Dit,"xlm-roberta"),Dit.forEach(t),P8o=r(X8e," \u2014 "),OD=n(X8e,"A",{href:!0});var Git=s(OD);B8o=r(Git,"XLMRobertaForMaskedLM"),Git.forEach(t),I8o=r(X8e," (XLM-RoBERTa model)"),X8e.forEach(t),N8o=i(U),v1=n(U,"LI",{});var z8e=s(v1);lfe=n(z8e,"STRONG",{});var Oit=s(lfe);q8o=r(Oit,"xlm-roberta-xl"),Oit.forEach(t),j8o=r(z8e," \u2014 "),VD=n(z8e,"A",{href:!0});var Vit=s(VD);D8o=r(Vit,"XLMRobertaXLForMaskedLM"),Vit.forEach(t),G8o=r(z8e," (XLM-RoBERTa-XL model)"),z8e.forEach(t),O8o=i(U),F1=n(U,"LI",{});var W8e=s(F1);ife=n(W8e,"STRONG",{});var Xit=s(ife);V8o=r(Xit,"yoso"),Xit.forEach(t),X8o=r(W8e," \u2014 "),XD=n(W8e,"A",{href:!0});var zit=s(XD);z8o=r(zit,"YosoForMaskedLM"),zit.forEach(t),W8o=r(W8e," (YOSO model)"),W8e.forEach(t),U.forEach(t),Q8o=i(aa),T1=n(aa,"P",{});var Q8e=s(T1);H8o=r(Q8e,"The model is set in evaluation mode by default using "),dfe=n(Q8e,"CODE",{});var Wit=s(dfe);U8o=r(Wit,"model.eval()"),Wit.forEach(t),J8o=r(Q8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cfe=n(Q8e,"CODE",{});var Qit=s(cfe);Y8o=r(Qit,"model.train()"),Qit.forEach(t),Q8e.forEach(t),K8o=i(aa),T(M1.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),yqe=i(f),Ni=n(f,"H2",{class:!0});var kDe=s(Ni);E1=n(kDe,"A",{id:!0,class:!0,href:!0});var Hit=s(E1);ffe=n(Hit,"SPAN",{});var Uit=s(ffe);T(Ty.$$.fragment,Uit),Uit.forEach(t),Hit.forEach(t),Z8o=i(kDe),mfe=n(kDe,"SPAN",{});var Jit=s(mfe);e9o=r(Jit,"AutoModelForSeq2SeqLM"),Jit.forEach(t),kDe.forEach(t),Lqe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(My.$$.fragment,zs),o9o=i(zs),qi=n(zs,"P",{});var yZ=s(qi);r9o=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zD=n(yZ,"A",{href:!0});var Yit=s(zD);t9o=r(Yit,"from_pretrained()"),Yit.forEach(t),a9o=r(yZ," class method or the "),WD=n(yZ,"A",{href:!0});var Kit=s(WD);n9o=r(Kit,"from_config()"),Kit.forEach(t),s9o=r(yZ,` class
method.`),yZ.forEach(t),l9o=i(zs),Ey=n(zs,"P",{});var SDe=s(Ey);i9o=r(SDe,"This class cannot be instantiated directly using "),gfe=n(SDe,"CODE",{});var Zit=s(gfe);d9o=r(Zit,"__init__()"),Zit.forEach(t),c9o=r(SDe," (throws an error)."),SDe.forEach(t),f9o=i(zs),lt=n(zs,"DIV",{class:!0});var Gw=s(lt);T(Cy.$$.fragment,Gw),m9o=i(Gw),hfe=n(Gw,"P",{});var edt=s(hfe);g9o=r(edt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),edt.forEach(t),h9o=i(Gw),ji=n(Gw,"P",{});var LZ=s(ji);p9o=r(LZ,`Note:
Loading a model from its configuration file does `),pfe=n(LZ,"STRONG",{});var odt=s(pfe);_9o=r(odt,"not"),odt.forEach(t),u9o=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QD=n(LZ,"A",{href:!0});var rdt=s(QD);b9o=r(rdt,"from_pretrained()"),rdt.forEach(t),v9o=r(LZ," to load the model weights."),LZ.forEach(t),F9o=i(Gw),T(C1.$$.fragment,Gw),Gw.forEach(t),T9o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(wy.$$.fragment,na),M9o=i(na),_fe=n(na,"P",{});var tdt=s(_fe);E9o=r(tdt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tdt.forEach(t),C9o=i(na),Sa=n(na,"P",{});var Ow=s(Sa);w9o=r(Ow,"The model class to instantiate is selected based on the "),ufe=n(Ow,"CODE",{});var adt=s(ufe);A9o=r(adt,"model_type"),adt.forEach(t),y9o=r(Ow,` property of the config object (either
passed as an argument or loaded from `),bfe=n(Ow,"CODE",{});var ndt=s(bfe);L9o=r(ndt,"pretrained_model_name_or_path"),ndt.forEach(t),x9o=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vfe=n(Ow,"CODE",{});var sdt=s(vfe);$9o=r(sdt,"pretrained_model_name_or_path"),sdt.forEach(t),k9o=r(Ow,":"),Ow.forEach(t),S9o=i(na),_e=n(na,"UL",{});var ve=s(_e);w1=n(ve,"LI",{});var H8e=s(w1);Ffe=n(H8e,"STRONG",{});var ldt=s(Ffe);R9o=r(ldt,"bart"),ldt.forEach(t),P9o=r(H8e," \u2014 "),HD=n(H8e,"A",{href:!0});var idt=s(HD);B9o=r(idt,"BartForConditionalGeneration"),idt.forEach(t),I9o=r(H8e," (BART model)"),H8e.forEach(t),N9o=i(ve),A1=n(ve,"LI",{});var U8e=s(A1);Tfe=n(U8e,"STRONG",{});var ddt=s(Tfe);q9o=r(ddt,"bigbird_pegasus"),ddt.forEach(t),j9o=r(U8e," \u2014 "),UD=n(U8e,"A",{href:!0});var cdt=s(UD);D9o=r(cdt,"BigBirdPegasusForConditionalGeneration"),cdt.forEach(t),G9o=r(U8e," (BigBirdPegasus model)"),U8e.forEach(t),O9o=i(ve),y1=n(ve,"LI",{});var J8e=s(y1);Mfe=n(J8e,"STRONG",{});var fdt=s(Mfe);V9o=r(fdt,"blenderbot"),fdt.forEach(t),X9o=r(J8e," \u2014 "),JD=n(J8e,"A",{href:!0});var mdt=s(JD);z9o=r(mdt,"BlenderbotForConditionalGeneration"),mdt.forEach(t),W9o=r(J8e," (Blenderbot model)"),J8e.forEach(t),Q9o=i(ve),L1=n(ve,"LI",{});var Y8e=s(L1);Efe=n(Y8e,"STRONG",{});var gdt=s(Efe);H9o=r(gdt,"blenderbot-small"),gdt.forEach(t),U9o=r(Y8e," \u2014 "),YD=n(Y8e,"A",{href:!0});var hdt=s(YD);J9o=r(hdt,"BlenderbotSmallForConditionalGeneration"),hdt.forEach(t),Y9o=r(Y8e," (BlenderbotSmall model)"),Y8e.forEach(t),K9o=i(ve),x1=n(ve,"LI",{});var K8e=s(x1);Cfe=n(K8e,"STRONG",{});var pdt=s(Cfe);Z9o=r(pdt,"encoder-decoder"),pdt.forEach(t),exo=r(K8e," \u2014 "),KD=n(K8e,"A",{href:!0});var _dt=s(KD);oxo=r(_dt,"EncoderDecoderModel"),_dt.forEach(t),rxo=r(K8e," (Encoder decoder model)"),K8e.forEach(t),txo=i(ve),$1=n(ve,"LI",{});var Z8e=s($1);wfe=n(Z8e,"STRONG",{});var udt=s(wfe);axo=r(udt,"fsmt"),udt.forEach(t),nxo=r(Z8e," \u2014 "),ZD=n(Z8e,"A",{href:!0});var bdt=s(ZD);sxo=r(bdt,"FSMTForConditionalGeneration"),bdt.forEach(t),lxo=r(Z8e," (FairSeq Machine-Translation model)"),Z8e.forEach(t),ixo=i(ve),k1=n(ve,"LI",{});var e9e=s(k1);Afe=n(e9e,"STRONG",{});var vdt=s(Afe);dxo=r(vdt,"led"),vdt.forEach(t),cxo=r(e9e," \u2014 "),eG=n(e9e,"A",{href:!0});var Fdt=s(eG);fxo=r(Fdt,"LEDForConditionalGeneration"),Fdt.forEach(t),mxo=r(e9e," (LED model)"),e9e.forEach(t),gxo=i(ve),S1=n(ve,"LI",{});var o9e=s(S1);yfe=n(o9e,"STRONG",{});var Tdt=s(yfe);hxo=r(Tdt,"m2m_100"),Tdt.forEach(t),pxo=r(o9e," \u2014 "),oG=n(o9e,"A",{href:!0});var Mdt=s(oG);_xo=r(Mdt,"M2M100ForConditionalGeneration"),Mdt.forEach(t),uxo=r(o9e," (M2M100 model)"),o9e.forEach(t),bxo=i(ve),R1=n(ve,"LI",{});var r9e=s(R1);Lfe=n(r9e,"STRONG",{});var Edt=s(Lfe);vxo=r(Edt,"marian"),Edt.forEach(t),Fxo=r(r9e," \u2014 "),rG=n(r9e,"A",{href:!0});var Cdt=s(rG);Txo=r(Cdt,"MarianMTModel"),Cdt.forEach(t),Mxo=r(r9e," (Marian model)"),r9e.forEach(t),Exo=i(ve),P1=n(ve,"LI",{});var t9e=s(P1);xfe=n(t9e,"STRONG",{});var wdt=s(xfe);Cxo=r(wdt,"mbart"),wdt.forEach(t),wxo=r(t9e," \u2014 "),tG=n(t9e,"A",{href:!0});var Adt=s(tG);Axo=r(Adt,"MBartForConditionalGeneration"),Adt.forEach(t),yxo=r(t9e," (mBART model)"),t9e.forEach(t),Lxo=i(ve),B1=n(ve,"LI",{});var a9e=s(B1);$fe=n(a9e,"STRONG",{});var ydt=s($fe);xxo=r(ydt,"mt5"),ydt.forEach(t),$xo=r(a9e," \u2014 "),aG=n(a9e,"A",{href:!0});var Ldt=s(aG);kxo=r(Ldt,"MT5ForConditionalGeneration"),Ldt.forEach(t),Sxo=r(a9e," (mT5 model)"),a9e.forEach(t),Rxo=i(ve),I1=n(ve,"LI",{});var n9e=s(I1);kfe=n(n9e,"STRONG",{});var xdt=s(kfe);Pxo=r(xdt,"pegasus"),xdt.forEach(t),Bxo=r(n9e," \u2014 "),nG=n(n9e,"A",{href:!0});var $dt=s(nG);Ixo=r($dt,"PegasusForConditionalGeneration"),$dt.forEach(t),Nxo=r(n9e," (Pegasus model)"),n9e.forEach(t),qxo=i(ve),N1=n(ve,"LI",{});var s9e=s(N1);Sfe=n(s9e,"STRONG",{});var kdt=s(Sfe);jxo=r(kdt,"plbart"),kdt.forEach(t),Dxo=r(s9e," \u2014 "),sG=n(s9e,"A",{href:!0});var Sdt=s(sG);Gxo=r(Sdt,"PLBartForConditionalGeneration"),Sdt.forEach(t),Oxo=r(s9e," (PLBart model)"),s9e.forEach(t),Vxo=i(ve),q1=n(ve,"LI",{});var l9e=s(q1);Rfe=n(l9e,"STRONG",{});var Rdt=s(Rfe);Xxo=r(Rdt,"prophetnet"),Rdt.forEach(t),zxo=r(l9e," \u2014 "),lG=n(l9e,"A",{href:!0});var Pdt=s(lG);Wxo=r(Pdt,"ProphetNetForConditionalGeneration"),Pdt.forEach(t),Qxo=r(l9e," (ProphetNet model)"),l9e.forEach(t),Hxo=i(ve),j1=n(ve,"LI",{});var i9e=s(j1);Pfe=n(i9e,"STRONG",{});var Bdt=s(Pfe);Uxo=r(Bdt,"t5"),Bdt.forEach(t),Jxo=r(i9e," \u2014 "),iG=n(i9e,"A",{href:!0});var Idt=s(iG);Yxo=r(Idt,"T5ForConditionalGeneration"),Idt.forEach(t),Kxo=r(i9e," (T5 model)"),i9e.forEach(t),Zxo=i(ve),D1=n(ve,"LI",{});var d9e=s(D1);Bfe=n(d9e,"STRONG",{});var Ndt=s(Bfe);e$o=r(Ndt,"xlm-prophetnet"),Ndt.forEach(t),o$o=r(d9e," \u2014 "),dG=n(d9e,"A",{href:!0});var qdt=s(dG);r$o=r(qdt,"XLMProphetNetForConditionalGeneration"),qdt.forEach(t),t$o=r(d9e," (XLMProphetNet model)"),d9e.forEach(t),ve.forEach(t),a$o=i(na),G1=n(na,"P",{});var c9e=s(G1);n$o=r(c9e,"The model is set in evaluation mode by default using "),Ife=n(c9e,"CODE",{});var jdt=s(Ife);s$o=r(jdt,"model.eval()"),jdt.forEach(t),l$o=r(c9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nfe=n(c9e,"CODE",{});var Ddt=s(Nfe);i$o=r(Ddt,"model.train()"),Ddt.forEach(t),c9e.forEach(t),d$o=i(na),T(O1.$$.fragment,na),na.forEach(t),zs.forEach(t),xqe=i(f),Di=n(f,"H2",{class:!0});var RDe=s(Di);V1=n(RDe,"A",{id:!0,class:!0,href:!0});var Gdt=s(V1);qfe=n(Gdt,"SPAN",{});var Odt=s(qfe);T(Ay.$$.fragment,Odt),Odt.forEach(t),Gdt.forEach(t),c$o=i(RDe),jfe=n(RDe,"SPAN",{});var Vdt=s(jfe);f$o=r(Vdt,"AutoModelForSequenceClassification"),Vdt.forEach(t),RDe.forEach(t),$qe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T(yy.$$.fragment,Ws),m$o=i(Ws),Gi=n(Ws,"P",{});var xZ=s(Gi);g$o=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cG=n(xZ,"A",{href:!0});var Xdt=s(cG);h$o=r(Xdt,"from_pretrained()"),Xdt.forEach(t),p$o=r(xZ," class method or the "),fG=n(xZ,"A",{href:!0});var zdt=s(fG);_$o=r(zdt,"from_config()"),zdt.forEach(t),u$o=r(xZ,` class
method.`),xZ.forEach(t),b$o=i(Ws),Ly=n(Ws,"P",{});var PDe=s(Ly);v$o=r(PDe,"This class cannot be instantiated directly using "),Dfe=n(PDe,"CODE",{});var Wdt=s(Dfe);F$o=r(Wdt,"__init__()"),Wdt.forEach(t),T$o=r(PDe," (throws an error)."),PDe.forEach(t),M$o=i(Ws),it=n(Ws,"DIV",{class:!0});var Vw=s(it);T(xy.$$.fragment,Vw),E$o=i(Vw),Gfe=n(Vw,"P",{});var Qdt=s(Gfe);C$o=r(Qdt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Qdt.forEach(t),w$o=i(Vw),Oi=n(Vw,"P",{});var $Z=s(Oi);A$o=r($Z,`Note:
Loading a model from its configuration file does `),Ofe=n($Z,"STRONG",{});var Hdt=s(Ofe);y$o=r(Hdt,"not"),Hdt.forEach(t),L$o=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),mG=n($Z,"A",{href:!0});var Udt=s(mG);x$o=r(Udt,"from_pretrained()"),Udt.forEach(t),$$o=r($Z," to load the model weights."),$Z.forEach(t),k$o=i(Vw),T(X1.$$.fragment,Vw),Vw.forEach(t),S$o=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T($y.$$.fragment,sa),R$o=i(sa),Vfe=n(sa,"P",{});var Jdt=s(Vfe);P$o=r(Jdt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Jdt.forEach(t),B$o=i(sa),Ra=n(sa,"P",{});var Xw=s(Ra);I$o=r(Xw,"The model class to instantiate is selected based on the "),Xfe=n(Xw,"CODE",{});var Ydt=s(Xfe);N$o=r(Ydt,"model_type"),Ydt.forEach(t),q$o=r(Xw,` property of the config object (either
passed as an argument or loaded from `),zfe=n(Xw,"CODE",{});var Kdt=s(zfe);j$o=r(Kdt,"pretrained_model_name_or_path"),Kdt.forEach(t),D$o=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wfe=n(Xw,"CODE",{});var Zdt=s(Wfe);G$o=r(Zdt,"pretrained_model_name_or_path"),Zdt.forEach(t),O$o=r(Xw,":"),Xw.forEach(t),V$o=i(sa),N=n(sa,"UL",{});var j=s(N);z1=n(j,"LI",{});var f9e=s(z1);Qfe=n(f9e,"STRONG",{});var ect=s(Qfe);X$o=r(ect,"albert"),ect.forEach(t),z$o=r(f9e," \u2014 "),gG=n(f9e,"A",{href:!0});var oct=s(gG);W$o=r(oct,"AlbertForSequenceClassification"),oct.forEach(t),Q$o=r(f9e," (ALBERT model)"),f9e.forEach(t),H$o=i(j),W1=n(j,"LI",{});var m9e=s(W1);Hfe=n(m9e,"STRONG",{});var rct=s(Hfe);U$o=r(rct,"bart"),rct.forEach(t),J$o=r(m9e," \u2014 "),hG=n(m9e,"A",{href:!0});var tct=s(hG);Y$o=r(tct,"BartForSequenceClassification"),tct.forEach(t),K$o=r(m9e," (BART model)"),m9e.forEach(t),Z$o=i(j),Q1=n(j,"LI",{});var g9e=s(Q1);Ufe=n(g9e,"STRONG",{});var act=s(Ufe);eko=r(act,"bert"),act.forEach(t),oko=r(g9e," \u2014 "),pG=n(g9e,"A",{href:!0});var nct=s(pG);rko=r(nct,"BertForSequenceClassification"),nct.forEach(t),tko=r(g9e," (BERT model)"),g9e.forEach(t),ako=i(j),H1=n(j,"LI",{});var h9e=s(H1);Jfe=n(h9e,"STRONG",{});var sct=s(Jfe);nko=r(sct,"big_bird"),sct.forEach(t),sko=r(h9e," \u2014 "),_G=n(h9e,"A",{href:!0});var lct=s(_G);lko=r(lct,"BigBirdForSequenceClassification"),lct.forEach(t),iko=r(h9e," (BigBird model)"),h9e.forEach(t),dko=i(j),U1=n(j,"LI",{});var p9e=s(U1);Yfe=n(p9e,"STRONG",{});var ict=s(Yfe);cko=r(ict,"bigbird_pegasus"),ict.forEach(t),fko=r(p9e," \u2014 "),uG=n(p9e,"A",{href:!0});var dct=s(uG);mko=r(dct,"BigBirdPegasusForSequenceClassification"),dct.forEach(t),gko=r(p9e," (BigBirdPegasus model)"),p9e.forEach(t),hko=i(j),J1=n(j,"LI",{});var _9e=s(J1);Kfe=n(_9e,"STRONG",{});var cct=s(Kfe);pko=r(cct,"camembert"),cct.forEach(t),_ko=r(_9e," \u2014 "),bG=n(_9e,"A",{href:!0});var fct=s(bG);uko=r(fct,"CamembertForSequenceClassification"),fct.forEach(t),bko=r(_9e," (CamemBERT model)"),_9e.forEach(t),vko=i(j),Y1=n(j,"LI",{});var u9e=s(Y1);Zfe=n(u9e,"STRONG",{});var mct=s(Zfe);Fko=r(mct,"canine"),mct.forEach(t),Tko=r(u9e," \u2014 "),vG=n(u9e,"A",{href:!0});var gct=s(vG);Mko=r(gct,"CanineForSequenceClassification"),gct.forEach(t),Eko=r(u9e," (Canine model)"),u9e.forEach(t),Cko=i(j),K1=n(j,"LI",{});var b9e=s(K1);eme=n(b9e,"STRONG",{});var hct=s(eme);wko=r(hct,"convbert"),hct.forEach(t),Ako=r(b9e," \u2014 "),FG=n(b9e,"A",{href:!0});var pct=s(FG);yko=r(pct,"ConvBertForSequenceClassification"),pct.forEach(t),Lko=r(b9e," (ConvBERT model)"),b9e.forEach(t),xko=i(j),Z1=n(j,"LI",{});var v9e=s(Z1);ome=n(v9e,"STRONG",{});var _ct=s(ome);$ko=r(_ct,"ctrl"),_ct.forEach(t),kko=r(v9e," \u2014 "),TG=n(v9e,"A",{href:!0});var uct=s(TG);Sko=r(uct,"CTRLForSequenceClassification"),uct.forEach(t),Rko=r(v9e," (CTRL model)"),v9e.forEach(t),Pko=i(j),eb=n(j,"LI",{});var F9e=s(eb);rme=n(F9e,"STRONG",{});var bct=s(rme);Bko=r(bct,"data2vec-text"),bct.forEach(t),Iko=r(F9e," \u2014 "),MG=n(F9e,"A",{href:!0});var vct=s(MG);Nko=r(vct,"Data2VecTextForSequenceClassification"),vct.forEach(t),qko=r(F9e," (Data2VecText model)"),F9e.forEach(t),jko=i(j),ob=n(j,"LI",{});var T9e=s(ob);tme=n(T9e,"STRONG",{});var Fct=s(tme);Dko=r(Fct,"deberta"),Fct.forEach(t),Gko=r(T9e," \u2014 "),EG=n(T9e,"A",{href:!0});var Tct=s(EG);Oko=r(Tct,"DebertaForSequenceClassification"),Tct.forEach(t),Vko=r(T9e," (DeBERTa model)"),T9e.forEach(t),Xko=i(j),rb=n(j,"LI",{});var M9e=s(rb);ame=n(M9e,"STRONG",{});var Mct=s(ame);zko=r(Mct,"deberta-v2"),Mct.forEach(t),Wko=r(M9e," \u2014 "),CG=n(M9e,"A",{href:!0});var Ect=s(CG);Qko=r(Ect,"DebertaV2ForSequenceClassification"),Ect.forEach(t),Hko=r(M9e," (DeBERTa-v2 model)"),M9e.forEach(t),Uko=i(j),tb=n(j,"LI",{});var E9e=s(tb);nme=n(E9e,"STRONG",{});var Cct=s(nme);Jko=r(Cct,"distilbert"),Cct.forEach(t),Yko=r(E9e," \u2014 "),wG=n(E9e,"A",{href:!0});var wct=s(wG);Kko=r(wct,"DistilBertForSequenceClassification"),wct.forEach(t),Zko=r(E9e," (DistilBERT model)"),E9e.forEach(t),eSo=i(j),ab=n(j,"LI",{});var C9e=s(ab);sme=n(C9e,"STRONG",{});var Act=s(sme);oSo=r(Act,"electra"),Act.forEach(t),rSo=r(C9e," \u2014 "),AG=n(C9e,"A",{href:!0});var yct=s(AG);tSo=r(yct,"ElectraForSequenceClassification"),yct.forEach(t),aSo=r(C9e," (ELECTRA model)"),C9e.forEach(t),nSo=i(j),nb=n(j,"LI",{});var w9e=s(nb);lme=n(w9e,"STRONG",{});var Lct=s(lme);sSo=r(Lct,"flaubert"),Lct.forEach(t),lSo=r(w9e," \u2014 "),yG=n(w9e,"A",{href:!0});var xct=s(yG);iSo=r(xct,"FlaubertForSequenceClassification"),xct.forEach(t),dSo=r(w9e," (FlauBERT model)"),w9e.forEach(t),cSo=i(j),sb=n(j,"LI",{});var A9e=s(sb);ime=n(A9e,"STRONG",{});var $ct=s(ime);fSo=r($ct,"fnet"),$ct.forEach(t),mSo=r(A9e," \u2014 "),LG=n(A9e,"A",{href:!0});var kct=s(LG);gSo=r(kct,"FNetForSequenceClassification"),kct.forEach(t),hSo=r(A9e," (FNet model)"),A9e.forEach(t),pSo=i(j),lb=n(j,"LI",{});var y9e=s(lb);dme=n(y9e,"STRONG",{});var Sct=s(dme);_So=r(Sct,"funnel"),Sct.forEach(t),uSo=r(y9e," \u2014 "),xG=n(y9e,"A",{href:!0});var Rct=s(xG);bSo=r(Rct,"FunnelForSequenceClassification"),Rct.forEach(t),vSo=r(y9e," (Funnel Transformer model)"),y9e.forEach(t),FSo=i(j),ib=n(j,"LI",{});var L9e=s(ib);cme=n(L9e,"STRONG",{});var Pct=s(cme);TSo=r(Pct,"gpt2"),Pct.forEach(t),MSo=r(L9e," \u2014 "),$G=n(L9e,"A",{href:!0});var Bct=s($G);ESo=r(Bct,"GPT2ForSequenceClassification"),Bct.forEach(t),CSo=r(L9e," (OpenAI GPT-2 model)"),L9e.forEach(t),wSo=i(j),db=n(j,"LI",{});var x9e=s(db);fme=n(x9e,"STRONG",{});var Ict=s(fme);ASo=r(Ict,"gpt_neo"),Ict.forEach(t),ySo=r(x9e," \u2014 "),kG=n(x9e,"A",{href:!0});var Nct=s(kG);LSo=r(Nct,"GPTNeoForSequenceClassification"),Nct.forEach(t),xSo=r(x9e," (GPT Neo model)"),x9e.forEach(t),$So=i(j),cb=n(j,"LI",{});var $9e=s(cb);mme=n($9e,"STRONG",{});var qct=s(mme);kSo=r(qct,"gptj"),qct.forEach(t),SSo=r($9e," \u2014 "),SG=n($9e,"A",{href:!0});var jct=s(SG);RSo=r(jct,"GPTJForSequenceClassification"),jct.forEach(t),PSo=r($9e," (GPT-J model)"),$9e.forEach(t),BSo=i(j),fb=n(j,"LI",{});var k9e=s(fb);gme=n(k9e,"STRONG",{});var Dct=s(gme);ISo=r(Dct,"ibert"),Dct.forEach(t),NSo=r(k9e," \u2014 "),RG=n(k9e,"A",{href:!0});var Gct=s(RG);qSo=r(Gct,"IBertForSequenceClassification"),Gct.forEach(t),jSo=r(k9e," (I-BERT model)"),k9e.forEach(t),DSo=i(j),mb=n(j,"LI",{});var S9e=s(mb);hme=n(S9e,"STRONG",{});var Oct=s(hme);GSo=r(Oct,"layoutlm"),Oct.forEach(t),OSo=r(S9e," \u2014 "),PG=n(S9e,"A",{href:!0});var Vct=s(PG);VSo=r(Vct,"LayoutLMForSequenceClassification"),Vct.forEach(t),XSo=r(S9e," (LayoutLM model)"),S9e.forEach(t),zSo=i(j),gb=n(j,"LI",{});var R9e=s(gb);pme=n(R9e,"STRONG",{});var Xct=s(pme);WSo=r(Xct,"layoutlmv2"),Xct.forEach(t),QSo=r(R9e," \u2014 "),BG=n(R9e,"A",{href:!0});var zct=s(BG);HSo=r(zct,"LayoutLMv2ForSequenceClassification"),zct.forEach(t),USo=r(R9e," (LayoutLMv2 model)"),R9e.forEach(t),JSo=i(j),hb=n(j,"LI",{});var P9e=s(hb);_me=n(P9e,"STRONG",{});var Wct=s(_me);YSo=r(Wct,"layoutlmv3"),Wct.forEach(t),KSo=r(P9e," \u2014 "),IG=n(P9e,"A",{href:!0});var Qct=s(IG);ZSo=r(Qct,"LayoutLMv3ForSequenceClassification"),Qct.forEach(t),eRo=r(P9e," (LayoutLMv3 model)"),P9e.forEach(t),oRo=i(j),pb=n(j,"LI",{});var B9e=s(pb);ume=n(B9e,"STRONG",{});var Hct=s(ume);rRo=r(Hct,"led"),Hct.forEach(t),tRo=r(B9e," \u2014 "),NG=n(B9e,"A",{href:!0});var Uct=s(NG);aRo=r(Uct,"LEDForSequenceClassification"),Uct.forEach(t),nRo=r(B9e," (LED model)"),B9e.forEach(t),sRo=i(j),_b=n(j,"LI",{});var I9e=s(_b);bme=n(I9e,"STRONG",{});var Jct=s(bme);lRo=r(Jct,"longformer"),Jct.forEach(t),iRo=r(I9e," \u2014 "),qG=n(I9e,"A",{href:!0});var Yct=s(qG);dRo=r(Yct,"LongformerForSequenceClassification"),Yct.forEach(t),cRo=r(I9e," (Longformer model)"),I9e.forEach(t),fRo=i(j),ub=n(j,"LI",{});var N9e=s(ub);vme=n(N9e,"STRONG",{});var Kct=s(vme);mRo=r(Kct,"mbart"),Kct.forEach(t),gRo=r(N9e," \u2014 "),jG=n(N9e,"A",{href:!0});var Zct=s(jG);hRo=r(Zct,"MBartForSequenceClassification"),Zct.forEach(t),pRo=r(N9e," (mBART model)"),N9e.forEach(t),_Ro=i(j),bb=n(j,"LI",{});var q9e=s(bb);Fme=n(q9e,"STRONG",{});var eft=s(Fme);uRo=r(eft,"megatron-bert"),eft.forEach(t),bRo=r(q9e," \u2014 "),DG=n(q9e,"A",{href:!0});var oft=s(DG);vRo=r(oft,"MegatronBertForSequenceClassification"),oft.forEach(t),FRo=r(q9e," (MegatronBert model)"),q9e.forEach(t),TRo=i(j),vb=n(j,"LI",{});var j9e=s(vb);Tme=n(j9e,"STRONG",{});var rft=s(Tme);MRo=r(rft,"mobilebert"),rft.forEach(t),ERo=r(j9e," \u2014 "),GG=n(j9e,"A",{href:!0});var tft=s(GG);CRo=r(tft,"MobileBertForSequenceClassification"),tft.forEach(t),wRo=r(j9e," (MobileBERT model)"),j9e.forEach(t),ARo=i(j),Fb=n(j,"LI",{});var D9e=s(Fb);Mme=n(D9e,"STRONG",{});var aft=s(Mme);yRo=r(aft,"mpnet"),aft.forEach(t),LRo=r(D9e," \u2014 "),OG=n(D9e,"A",{href:!0});var nft=s(OG);xRo=r(nft,"MPNetForSequenceClassification"),nft.forEach(t),$Ro=r(D9e," (MPNet model)"),D9e.forEach(t),kRo=i(j),Tb=n(j,"LI",{});var G9e=s(Tb);Eme=n(G9e,"STRONG",{});var sft=s(Eme);SRo=r(sft,"nystromformer"),sft.forEach(t),RRo=r(G9e," \u2014 "),VG=n(G9e,"A",{href:!0});var lft=s(VG);PRo=r(lft,"NystromformerForSequenceClassification"),lft.forEach(t),BRo=r(G9e," (Nystromformer model)"),G9e.forEach(t),IRo=i(j),Mb=n(j,"LI",{});var O9e=s(Mb);Cme=n(O9e,"STRONG",{});var ift=s(Cme);NRo=r(ift,"openai-gpt"),ift.forEach(t),qRo=r(O9e," \u2014 "),XG=n(O9e,"A",{href:!0});var dft=s(XG);jRo=r(dft,"OpenAIGPTForSequenceClassification"),dft.forEach(t),DRo=r(O9e," (OpenAI GPT model)"),O9e.forEach(t),GRo=i(j),Eb=n(j,"LI",{});var V9e=s(Eb);wme=n(V9e,"STRONG",{});var cft=s(wme);ORo=r(cft,"perceiver"),cft.forEach(t),VRo=r(V9e," \u2014 "),zG=n(V9e,"A",{href:!0});var fft=s(zG);XRo=r(fft,"PerceiverForSequenceClassification"),fft.forEach(t),zRo=r(V9e," (Perceiver model)"),V9e.forEach(t),WRo=i(j),Cb=n(j,"LI",{});var X9e=s(Cb);Ame=n(X9e,"STRONG",{});var mft=s(Ame);QRo=r(mft,"plbart"),mft.forEach(t),HRo=r(X9e," \u2014 "),WG=n(X9e,"A",{href:!0});var gft=s(WG);URo=r(gft,"PLBartForSequenceClassification"),gft.forEach(t),JRo=r(X9e," (PLBart model)"),X9e.forEach(t),YRo=i(j),wb=n(j,"LI",{});var z9e=s(wb);yme=n(z9e,"STRONG",{});var hft=s(yme);KRo=r(hft,"qdqbert"),hft.forEach(t),ZRo=r(z9e," \u2014 "),QG=n(z9e,"A",{href:!0});var pft=s(QG);ePo=r(pft,"QDQBertForSequenceClassification"),pft.forEach(t),oPo=r(z9e," (QDQBert model)"),z9e.forEach(t),rPo=i(j),Ab=n(j,"LI",{});var W9e=s(Ab);Lme=n(W9e,"STRONG",{});var _ft=s(Lme);tPo=r(_ft,"reformer"),_ft.forEach(t),aPo=r(W9e," \u2014 "),HG=n(W9e,"A",{href:!0});var uft=s(HG);nPo=r(uft,"ReformerForSequenceClassification"),uft.forEach(t),sPo=r(W9e," (Reformer model)"),W9e.forEach(t),lPo=i(j),yb=n(j,"LI",{});var Q9e=s(yb);xme=n(Q9e,"STRONG",{});var bft=s(xme);iPo=r(bft,"rembert"),bft.forEach(t),dPo=r(Q9e," \u2014 "),UG=n(Q9e,"A",{href:!0});var vft=s(UG);cPo=r(vft,"RemBertForSequenceClassification"),vft.forEach(t),fPo=r(Q9e," (RemBERT model)"),Q9e.forEach(t),mPo=i(j),Lb=n(j,"LI",{});var H9e=s(Lb);$me=n(H9e,"STRONG",{});var Fft=s($me);gPo=r(Fft,"roberta"),Fft.forEach(t),hPo=r(H9e," \u2014 "),JG=n(H9e,"A",{href:!0});var Tft=s(JG);pPo=r(Tft,"RobertaForSequenceClassification"),Tft.forEach(t),_Po=r(H9e," (RoBERTa model)"),H9e.forEach(t),uPo=i(j),xb=n(j,"LI",{});var U9e=s(xb);kme=n(U9e,"STRONG",{});var Mft=s(kme);bPo=r(Mft,"roformer"),Mft.forEach(t),vPo=r(U9e," \u2014 "),YG=n(U9e,"A",{href:!0});var Eft=s(YG);FPo=r(Eft,"RoFormerForSequenceClassification"),Eft.forEach(t),TPo=r(U9e," (RoFormer model)"),U9e.forEach(t),MPo=i(j),$b=n(j,"LI",{});var J9e=s($b);Sme=n(J9e,"STRONG",{});var Cft=s(Sme);EPo=r(Cft,"squeezebert"),Cft.forEach(t),CPo=r(J9e," \u2014 "),KG=n(J9e,"A",{href:!0});var wft=s(KG);wPo=r(wft,"SqueezeBertForSequenceClassification"),wft.forEach(t),APo=r(J9e," (SqueezeBERT model)"),J9e.forEach(t),yPo=i(j),kb=n(j,"LI",{});var Y9e=s(kb);Rme=n(Y9e,"STRONG",{});var Aft=s(Rme);LPo=r(Aft,"tapas"),Aft.forEach(t),xPo=r(Y9e," \u2014 "),ZG=n(Y9e,"A",{href:!0});var yft=s(ZG);$Po=r(yft,"TapasForSequenceClassification"),yft.forEach(t),kPo=r(Y9e," (TAPAS model)"),Y9e.forEach(t),SPo=i(j),Sb=n(j,"LI",{});var K9e=s(Sb);Pme=n(K9e,"STRONG",{});var Lft=s(Pme);RPo=r(Lft,"transfo-xl"),Lft.forEach(t),PPo=r(K9e," \u2014 "),eO=n(K9e,"A",{href:!0});var xft=s(eO);BPo=r(xft,"TransfoXLForSequenceClassification"),xft.forEach(t),IPo=r(K9e," (Transformer-XL model)"),K9e.forEach(t),NPo=i(j),Rb=n(j,"LI",{});var Z9e=s(Rb);Bme=n(Z9e,"STRONG",{});var $ft=s(Bme);qPo=r($ft,"xlm"),$ft.forEach(t),jPo=r(Z9e," \u2014 "),oO=n(Z9e,"A",{href:!0});var kft=s(oO);DPo=r(kft,"XLMForSequenceClassification"),kft.forEach(t),GPo=r(Z9e," (XLM model)"),Z9e.forEach(t),OPo=i(j),Pb=n(j,"LI",{});var exe=s(Pb);Ime=n(exe,"STRONG",{});var Sft=s(Ime);VPo=r(Sft,"xlm-roberta"),Sft.forEach(t),XPo=r(exe," \u2014 "),rO=n(exe,"A",{href:!0});var Rft=s(rO);zPo=r(Rft,"XLMRobertaForSequenceClassification"),Rft.forEach(t),WPo=r(exe," (XLM-RoBERTa model)"),exe.forEach(t),QPo=i(j),Bb=n(j,"LI",{});var oxe=s(Bb);Nme=n(oxe,"STRONG",{});var Pft=s(Nme);HPo=r(Pft,"xlm-roberta-xl"),Pft.forEach(t),UPo=r(oxe," \u2014 "),tO=n(oxe,"A",{href:!0});var Bft=s(tO);JPo=r(Bft,"XLMRobertaXLForSequenceClassification"),Bft.forEach(t),YPo=r(oxe," (XLM-RoBERTa-XL model)"),oxe.forEach(t),KPo=i(j),Ib=n(j,"LI",{});var rxe=s(Ib);qme=n(rxe,"STRONG",{});var Ift=s(qme);ZPo=r(Ift,"xlnet"),Ift.forEach(t),eBo=r(rxe," \u2014 "),aO=n(rxe,"A",{href:!0});var Nft=s(aO);oBo=r(Nft,"XLNetForSequenceClassification"),Nft.forEach(t),rBo=r(rxe," (XLNet model)"),rxe.forEach(t),tBo=i(j),Nb=n(j,"LI",{});var txe=s(Nb);jme=n(txe,"STRONG",{});var qft=s(jme);aBo=r(qft,"yoso"),qft.forEach(t),nBo=r(txe," \u2014 "),nO=n(txe,"A",{href:!0});var jft=s(nO);sBo=r(jft,"YosoForSequenceClassification"),jft.forEach(t),lBo=r(txe," (YOSO model)"),txe.forEach(t),j.forEach(t),iBo=i(sa),qb=n(sa,"P",{});var axe=s(qb);dBo=r(axe,"The model is set in evaluation mode by default using "),Dme=n(axe,"CODE",{});var Dft=s(Dme);cBo=r(Dft,"model.eval()"),Dft.forEach(t),fBo=r(axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gme=n(axe,"CODE",{});var Gft=s(Gme);mBo=r(Gft,"model.train()"),Gft.forEach(t),axe.forEach(t),gBo=i(sa),T(jb.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),kqe=i(f),Vi=n(f,"H2",{class:!0});var BDe=s(Vi);Db=n(BDe,"A",{id:!0,class:!0,href:!0});var Oft=s(Db);Ome=n(Oft,"SPAN",{});var Vft=s(Ome);T(ky.$$.fragment,Vft),Vft.forEach(t),Oft.forEach(t),hBo=i(BDe),Vme=n(BDe,"SPAN",{});var Xft=s(Vme);pBo=r(Xft,"AutoModelForMultipleChoice"),Xft.forEach(t),BDe.forEach(t),Sqe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(Sy.$$.fragment,Qs),_Bo=i(Qs),Xi=n(Qs,"P",{});var kZ=s(Xi);uBo=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sO=n(kZ,"A",{href:!0});var zft=s(sO);bBo=r(zft,"from_pretrained()"),zft.forEach(t),vBo=r(kZ," class method or the "),lO=n(kZ,"A",{href:!0});var Wft=s(lO);FBo=r(Wft,"from_config()"),Wft.forEach(t),TBo=r(kZ,` class
method.`),kZ.forEach(t),MBo=i(Qs),Ry=n(Qs,"P",{});var IDe=s(Ry);EBo=r(IDe,"This class cannot be instantiated directly using "),Xme=n(IDe,"CODE",{});var Qft=s(Xme);CBo=r(Qft,"__init__()"),Qft.forEach(t),wBo=r(IDe," (throws an error)."),IDe.forEach(t),ABo=i(Qs),dt=n(Qs,"DIV",{class:!0});var zw=s(dt);T(Py.$$.fragment,zw),yBo=i(zw),zme=n(zw,"P",{});var Hft=s(zme);LBo=r(Hft,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Hft.forEach(t),xBo=i(zw),zi=n(zw,"P",{});var SZ=s(zi);$Bo=r(SZ,`Note:
Loading a model from its configuration file does `),Wme=n(SZ,"STRONG",{});var Uft=s(Wme);kBo=r(Uft,"not"),Uft.forEach(t),SBo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=n(SZ,"A",{href:!0});var Jft=s(iO);RBo=r(Jft,"from_pretrained()"),Jft.forEach(t),PBo=r(SZ," to load the model weights."),SZ.forEach(t),BBo=i(zw),T(Gb.$$.fragment,zw),zw.forEach(t),IBo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(By.$$.fragment,la),NBo=i(la),Qme=n(la,"P",{});var Yft=s(Qme);qBo=r(Yft,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Yft.forEach(t),jBo=i(la),Pa=n(la,"P",{});var Ww=s(Pa);DBo=r(Ww,"The model class to instantiate is selected based on the "),Hme=n(Ww,"CODE",{});var Kft=s(Hme);GBo=r(Kft,"model_type"),Kft.forEach(t),OBo=r(Ww,` property of the config object (either
passed as an argument or loaded from `),Ume=n(Ww,"CODE",{});var Zft=s(Ume);VBo=r(Zft,"pretrained_model_name_or_path"),Zft.forEach(t),XBo=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jme=n(Ww,"CODE",{});var emt=s(Jme);zBo=r(emt,"pretrained_model_name_or_path"),emt.forEach(t),WBo=r(Ww,":"),Ww.forEach(t),QBo=i(la),K=n(la,"UL",{});var ee=s(K);Ob=n(ee,"LI",{});var nxe=s(Ob);Yme=n(nxe,"STRONG",{});var omt=s(Yme);HBo=r(omt,"albert"),omt.forEach(t),UBo=r(nxe," \u2014 "),dO=n(nxe,"A",{href:!0});var rmt=s(dO);JBo=r(rmt,"AlbertForMultipleChoice"),rmt.forEach(t),YBo=r(nxe," (ALBERT model)"),nxe.forEach(t),KBo=i(ee),Vb=n(ee,"LI",{});var sxe=s(Vb);Kme=n(sxe,"STRONG",{});var tmt=s(Kme);ZBo=r(tmt,"bert"),tmt.forEach(t),eIo=r(sxe," \u2014 "),cO=n(sxe,"A",{href:!0});var amt=s(cO);oIo=r(amt,"BertForMultipleChoice"),amt.forEach(t),rIo=r(sxe," (BERT model)"),sxe.forEach(t),tIo=i(ee),Xb=n(ee,"LI",{});var lxe=s(Xb);Zme=n(lxe,"STRONG",{});var nmt=s(Zme);aIo=r(nmt,"big_bird"),nmt.forEach(t),nIo=r(lxe," \u2014 "),fO=n(lxe,"A",{href:!0});var smt=s(fO);sIo=r(smt,"BigBirdForMultipleChoice"),smt.forEach(t),lIo=r(lxe," (BigBird model)"),lxe.forEach(t),iIo=i(ee),zb=n(ee,"LI",{});var ixe=s(zb);ege=n(ixe,"STRONG",{});var lmt=s(ege);dIo=r(lmt,"camembert"),lmt.forEach(t),cIo=r(ixe," \u2014 "),mO=n(ixe,"A",{href:!0});var imt=s(mO);fIo=r(imt,"CamembertForMultipleChoice"),imt.forEach(t),mIo=r(ixe," (CamemBERT model)"),ixe.forEach(t),gIo=i(ee),Wb=n(ee,"LI",{});var dxe=s(Wb);oge=n(dxe,"STRONG",{});var dmt=s(oge);hIo=r(dmt,"canine"),dmt.forEach(t),pIo=r(dxe," \u2014 "),gO=n(dxe,"A",{href:!0});var cmt=s(gO);_Io=r(cmt,"CanineForMultipleChoice"),cmt.forEach(t),uIo=r(dxe," (Canine model)"),dxe.forEach(t),bIo=i(ee),Qb=n(ee,"LI",{});var cxe=s(Qb);rge=n(cxe,"STRONG",{});var fmt=s(rge);vIo=r(fmt,"convbert"),fmt.forEach(t),FIo=r(cxe," \u2014 "),hO=n(cxe,"A",{href:!0});var mmt=s(hO);TIo=r(mmt,"ConvBertForMultipleChoice"),mmt.forEach(t),MIo=r(cxe," (ConvBERT model)"),cxe.forEach(t),EIo=i(ee),Hb=n(ee,"LI",{});var fxe=s(Hb);tge=n(fxe,"STRONG",{});var gmt=s(tge);CIo=r(gmt,"data2vec-text"),gmt.forEach(t),wIo=r(fxe," \u2014 "),pO=n(fxe,"A",{href:!0});var hmt=s(pO);AIo=r(hmt,"Data2VecTextForMultipleChoice"),hmt.forEach(t),yIo=r(fxe," (Data2VecText model)"),fxe.forEach(t),LIo=i(ee),Ub=n(ee,"LI",{});var mxe=s(Ub);age=n(mxe,"STRONG",{});var pmt=s(age);xIo=r(pmt,"deberta-v2"),pmt.forEach(t),$Io=r(mxe," \u2014 "),_O=n(mxe,"A",{href:!0});var _mt=s(_O);kIo=r(_mt,"DebertaV2ForMultipleChoice"),_mt.forEach(t),SIo=r(mxe," (DeBERTa-v2 model)"),mxe.forEach(t),RIo=i(ee),Jb=n(ee,"LI",{});var gxe=s(Jb);nge=n(gxe,"STRONG",{});var umt=s(nge);PIo=r(umt,"distilbert"),umt.forEach(t),BIo=r(gxe," \u2014 "),uO=n(gxe,"A",{href:!0});var bmt=s(uO);IIo=r(bmt,"DistilBertForMultipleChoice"),bmt.forEach(t),NIo=r(gxe," (DistilBERT model)"),gxe.forEach(t),qIo=i(ee),Yb=n(ee,"LI",{});var hxe=s(Yb);sge=n(hxe,"STRONG",{});var vmt=s(sge);jIo=r(vmt,"electra"),vmt.forEach(t),DIo=r(hxe," \u2014 "),bO=n(hxe,"A",{href:!0});var Fmt=s(bO);GIo=r(Fmt,"ElectraForMultipleChoice"),Fmt.forEach(t),OIo=r(hxe," (ELECTRA model)"),hxe.forEach(t),VIo=i(ee),Kb=n(ee,"LI",{});var pxe=s(Kb);lge=n(pxe,"STRONG",{});var Tmt=s(lge);XIo=r(Tmt,"flaubert"),Tmt.forEach(t),zIo=r(pxe," \u2014 "),vO=n(pxe,"A",{href:!0});var Mmt=s(vO);WIo=r(Mmt,"FlaubertForMultipleChoice"),Mmt.forEach(t),QIo=r(pxe," (FlauBERT model)"),pxe.forEach(t),HIo=i(ee),Zb=n(ee,"LI",{});var _xe=s(Zb);ige=n(_xe,"STRONG",{});var Emt=s(ige);UIo=r(Emt,"fnet"),Emt.forEach(t),JIo=r(_xe," \u2014 "),FO=n(_xe,"A",{href:!0});var Cmt=s(FO);YIo=r(Cmt,"FNetForMultipleChoice"),Cmt.forEach(t),KIo=r(_xe," (FNet model)"),_xe.forEach(t),ZIo=i(ee),ev=n(ee,"LI",{});var uxe=s(ev);dge=n(uxe,"STRONG",{});var wmt=s(dge);eNo=r(wmt,"funnel"),wmt.forEach(t),oNo=r(uxe," \u2014 "),TO=n(uxe,"A",{href:!0});var Amt=s(TO);rNo=r(Amt,"FunnelForMultipleChoice"),Amt.forEach(t),tNo=r(uxe," (Funnel Transformer model)"),uxe.forEach(t),aNo=i(ee),ov=n(ee,"LI",{});var bxe=s(ov);cge=n(bxe,"STRONG",{});var ymt=s(cge);nNo=r(ymt,"ibert"),ymt.forEach(t),sNo=r(bxe," \u2014 "),MO=n(bxe,"A",{href:!0});var Lmt=s(MO);lNo=r(Lmt,"IBertForMultipleChoice"),Lmt.forEach(t),iNo=r(bxe," (I-BERT model)"),bxe.forEach(t),dNo=i(ee),rv=n(ee,"LI",{});var vxe=s(rv);fge=n(vxe,"STRONG",{});var xmt=s(fge);cNo=r(xmt,"longformer"),xmt.forEach(t),fNo=r(vxe," \u2014 "),EO=n(vxe,"A",{href:!0});var $mt=s(EO);mNo=r($mt,"LongformerForMultipleChoice"),$mt.forEach(t),gNo=r(vxe," (Longformer model)"),vxe.forEach(t),hNo=i(ee),tv=n(ee,"LI",{});var Fxe=s(tv);mge=n(Fxe,"STRONG",{});var kmt=s(mge);pNo=r(kmt,"megatron-bert"),kmt.forEach(t),_No=r(Fxe," \u2014 "),CO=n(Fxe,"A",{href:!0});var Smt=s(CO);uNo=r(Smt,"MegatronBertForMultipleChoice"),Smt.forEach(t),bNo=r(Fxe," (MegatronBert model)"),Fxe.forEach(t),vNo=i(ee),av=n(ee,"LI",{});var Txe=s(av);gge=n(Txe,"STRONG",{});var Rmt=s(gge);FNo=r(Rmt,"mobilebert"),Rmt.forEach(t),TNo=r(Txe," \u2014 "),wO=n(Txe,"A",{href:!0});var Pmt=s(wO);MNo=r(Pmt,"MobileBertForMultipleChoice"),Pmt.forEach(t),ENo=r(Txe," (MobileBERT model)"),Txe.forEach(t),CNo=i(ee),nv=n(ee,"LI",{});var Mxe=s(nv);hge=n(Mxe,"STRONG",{});var Bmt=s(hge);wNo=r(Bmt,"mpnet"),Bmt.forEach(t),ANo=r(Mxe," \u2014 "),AO=n(Mxe,"A",{href:!0});var Imt=s(AO);yNo=r(Imt,"MPNetForMultipleChoice"),Imt.forEach(t),LNo=r(Mxe," (MPNet model)"),Mxe.forEach(t),xNo=i(ee),sv=n(ee,"LI",{});var Exe=s(sv);pge=n(Exe,"STRONG",{});var Nmt=s(pge);$No=r(Nmt,"nystromformer"),Nmt.forEach(t),kNo=r(Exe," \u2014 "),yO=n(Exe,"A",{href:!0});var qmt=s(yO);SNo=r(qmt,"NystromformerForMultipleChoice"),qmt.forEach(t),RNo=r(Exe," (Nystromformer model)"),Exe.forEach(t),PNo=i(ee),lv=n(ee,"LI",{});var Cxe=s(lv);_ge=n(Cxe,"STRONG",{});var jmt=s(_ge);BNo=r(jmt,"qdqbert"),jmt.forEach(t),INo=r(Cxe," \u2014 "),LO=n(Cxe,"A",{href:!0});var Dmt=s(LO);NNo=r(Dmt,"QDQBertForMultipleChoice"),Dmt.forEach(t),qNo=r(Cxe," (QDQBert model)"),Cxe.forEach(t),jNo=i(ee),iv=n(ee,"LI",{});var wxe=s(iv);uge=n(wxe,"STRONG",{});var Gmt=s(uge);DNo=r(Gmt,"rembert"),Gmt.forEach(t),GNo=r(wxe," \u2014 "),xO=n(wxe,"A",{href:!0});var Omt=s(xO);ONo=r(Omt,"RemBertForMultipleChoice"),Omt.forEach(t),VNo=r(wxe," (RemBERT model)"),wxe.forEach(t),XNo=i(ee),dv=n(ee,"LI",{});var Axe=s(dv);bge=n(Axe,"STRONG",{});var Vmt=s(bge);zNo=r(Vmt,"roberta"),Vmt.forEach(t),WNo=r(Axe," \u2014 "),$O=n(Axe,"A",{href:!0});var Xmt=s($O);QNo=r(Xmt,"RobertaForMultipleChoice"),Xmt.forEach(t),HNo=r(Axe," (RoBERTa model)"),Axe.forEach(t),UNo=i(ee),cv=n(ee,"LI",{});var yxe=s(cv);vge=n(yxe,"STRONG",{});var zmt=s(vge);JNo=r(zmt,"roformer"),zmt.forEach(t),YNo=r(yxe," \u2014 "),kO=n(yxe,"A",{href:!0});var Wmt=s(kO);KNo=r(Wmt,"RoFormerForMultipleChoice"),Wmt.forEach(t),ZNo=r(yxe," (RoFormer model)"),yxe.forEach(t),eqo=i(ee),fv=n(ee,"LI",{});var Lxe=s(fv);Fge=n(Lxe,"STRONG",{});var Qmt=s(Fge);oqo=r(Qmt,"squeezebert"),Qmt.forEach(t),rqo=r(Lxe," \u2014 "),SO=n(Lxe,"A",{href:!0});var Hmt=s(SO);tqo=r(Hmt,"SqueezeBertForMultipleChoice"),Hmt.forEach(t),aqo=r(Lxe," (SqueezeBERT model)"),Lxe.forEach(t),nqo=i(ee),mv=n(ee,"LI",{});var xxe=s(mv);Tge=n(xxe,"STRONG",{});var Umt=s(Tge);sqo=r(Umt,"xlm"),Umt.forEach(t),lqo=r(xxe," \u2014 "),RO=n(xxe,"A",{href:!0});var Jmt=s(RO);iqo=r(Jmt,"XLMForMultipleChoice"),Jmt.forEach(t),dqo=r(xxe," (XLM model)"),xxe.forEach(t),cqo=i(ee),gv=n(ee,"LI",{});var $xe=s(gv);Mge=n($xe,"STRONG",{});var Ymt=s(Mge);fqo=r(Ymt,"xlm-roberta"),Ymt.forEach(t),mqo=r($xe," \u2014 "),PO=n($xe,"A",{href:!0});var Kmt=s(PO);gqo=r(Kmt,"XLMRobertaForMultipleChoice"),Kmt.forEach(t),hqo=r($xe," (XLM-RoBERTa model)"),$xe.forEach(t),pqo=i(ee),hv=n(ee,"LI",{});var kxe=s(hv);Ege=n(kxe,"STRONG",{});var Zmt=s(Ege);_qo=r(Zmt,"xlm-roberta-xl"),Zmt.forEach(t),uqo=r(kxe," \u2014 "),BO=n(kxe,"A",{href:!0});var egt=s(BO);bqo=r(egt,"XLMRobertaXLForMultipleChoice"),egt.forEach(t),vqo=r(kxe," (XLM-RoBERTa-XL model)"),kxe.forEach(t),Fqo=i(ee),pv=n(ee,"LI",{});var Sxe=s(pv);Cge=n(Sxe,"STRONG",{});var ogt=s(Cge);Tqo=r(ogt,"xlnet"),ogt.forEach(t),Mqo=r(Sxe," \u2014 "),IO=n(Sxe,"A",{href:!0});var rgt=s(IO);Eqo=r(rgt,"XLNetForMultipleChoice"),rgt.forEach(t),Cqo=r(Sxe," (XLNet model)"),Sxe.forEach(t),wqo=i(ee),_v=n(ee,"LI",{});var Rxe=s(_v);wge=n(Rxe,"STRONG",{});var tgt=s(wge);Aqo=r(tgt,"yoso"),tgt.forEach(t),yqo=r(Rxe," \u2014 "),NO=n(Rxe,"A",{href:!0});var agt=s(NO);Lqo=r(agt,"YosoForMultipleChoice"),agt.forEach(t),xqo=r(Rxe," (YOSO model)"),Rxe.forEach(t),ee.forEach(t),$qo=i(la),uv=n(la,"P",{});var Pxe=s(uv);kqo=r(Pxe,"The model is set in evaluation mode by default using "),Age=n(Pxe,"CODE",{});var ngt=s(Age);Sqo=r(ngt,"model.eval()"),ngt.forEach(t),Rqo=r(Pxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yge=n(Pxe,"CODE",{});var sgt=s(yge);Pqo=r(sgt,"model.train()"),sgt.forEach(t),Pxe.forEach(t),Bqo=i(la),T(bv.$$.fragment,la),la.forEach(t),Qs.forEach(t),Rqe=i(f),Wi=n(f,"H2",{class:!0});var NDe=s(Wi);vv=n(NDe,"A",{id:!0,class:!0,href:!0});var lgt=s(vv);Lge=n(lgt,"SPAN",{});var igt=s(Lge);T(Iy.$$.fragment,igt),igt.forEach(t),lgt.forEach(t),Iqo=i(NDe),xge=n(NDe,"SPAN",{});var dgt=s(xge);Nqo=r(dgt,"AutoModelForNextSentencePrediction"),dgt.forEach(t),NDe.forEach(t),Pqe=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(Ny.$$.fragment,Hs),qqo=i(Hs),Qi=n(Hs,"P",{});var RZ=s(Qi);jqo=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qO=n(RZ,"A",{href:!0});var cgt=s(qO);Dqo=r(cgt,"from_pretrained()"),cgt.forEach(t),Gqo=r(RZ," class method or the "),jO=n(RZ,"A",{href:!0});var fgt=s(jO);Oqo=r(fgt,"from_config()"),fgt.forEach(t),Vqo=r(RZ,` class
method.`),RZ.forEach(t),Xqo=i(Hs),qy=n(Hs,"P",{});var qDe=s(qy);zqo=r(qDe,"This class cannot be instantiated directly using "),$ge=n(qDe,"CODE",{});var mgt=s($ge);Wqo=r(mgt,"__init__()"),mgt.forEach(t),Qqo=r(qDe," (throws an error)."),qDe.forEach(t),Hqo=i(Hs),ct=n(Hs,"DIV",{class:!0});var Qw=s(ct);T(jy.$$.fragment,Qw),Uqo=i(Qw),kge=n(Qw,"P",{});var ggt=s(kge);Jqo=r(ggt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ggt.forEach(t),Yqo=i(Qw),Hi=n(Qw,"P",{});var PZ=s(Hi);Kqo=r(PZ,`Note:
Loading a model from its configuration file does `),Sge=n(PZ,"STRONG",{});var hgt=s(Sge);Zqo=r(hgt,"not"),hgt.forEach(t),ejo=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=n(PZ,"A",{href:!0});var pgt=s(DO);ojo=r(pgt,"from_pretrained()"),pgt.forEach(t),rjo=r(PZ," to load the model weights."),PZ.forEach(t),tjo=i(Qw),T(Fv.$$.fragment,Qw),Qw.forEach(t),ajo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(Dy.$$.fragment,ia),njo=i(ia),Rge=n(ia,"P",{});var _gt=s(Rge);sjo=r(_gt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),_gt.forEach(t),ljo=i(ia),Ba=n(ia,"P",{});var Hw=s(Ba);ijo=r(Hw,"The model class to instantiate is selected based on the "),Pge=n(Hw,"CODE",{});var ugt=s(Pge);djo=r(ugt,"model_type"),ugt.forEach(t),cjo=r(Hw,` property of the config object (either
passed as an argument or loaded from `),Bge=n(Hw,"CODE",{});var bgt=s(Bge);fjo=r(bgt,"pretrained_model_name_or_path"),bgt.forEach(t),mjo=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ige=n(Hw,"CODE",{});var vgt=s(Ige);gjo=r(vgt,"pretrained_model_name_or_path"),vgt.forEach(t),hjo=r(Hw,":"),Hw.forEach(t),pjo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);Tv=n(Us,"LI",{});var Bxe=s(Tv);Nge=n(Bxe,"STRONG",{});var Fgt=s(Nge);_jo=r(Fgt,"bert"),Fgt.forEach(t),ujo=r(Bxe," \u2014 "),GO=n(Bxe,"A",{href:!0});var Tgt=s(GO);bjo=r(Tgt,"BertForNextSentencePrediction"),Tgt.forEach(t),vjo=r(Bxe," (BERT model)"),Bxe.forEach(t),Fjo=i(Us),Mv=n(Us,"LI",{});var Ixe=s(Mv);qge=n(Ixe,"STRONG",{});var Mgt=s(qge);Tjo=r(Mgt,"fnet"),Mgt.forEach(t),Mjo=r(Ixe," \u2014 "),OO=n(Ixe,"A",{href:!0});var Egt=s(OO);Ejo=r(Egt,"FNetForNextSentencePrediction"),Egt.forEach(t),Cjo=r(Ixe," (FNet model)"),Ixe.forEach(t),wjo=i(Us),Ev=n(Us,"LI",{});var Nxe=s(Ev);jge=n(Nxe,"STRONG",{});var Cgt=s(jge);Ajo=r(Cgt,"megatron-bert"),Cgt.forEach(t),yjo=r(Nxe," \u2014 "),VO=n(Nxe,"A",{href:!0});var wgt=s(VO);Ljo=r(wgt,"MegatronBertForNextSentencePrediction"),wgt.forEach(t),xjo=r(Nxe," (MegatronBert model)"),Nxe.forEach(t),$jo=i(Us),Cv=n(Us,"LI",{});var qxe=s(Cv);Dge=n(qxe,"STRONG",{});var Agt=s(Dge);kjo=r(Agt,"mobilebert"),Agt.forEach(t),Sjo=r(qxe," \u2014 "),XO=n(qxe,"A",{href:!0});var ygt=s(XO);Rjo=r(ygt,"MobileBertForNextSentencePrediction"),ygt.forEach(t),Pjo=r(qxe," (MobileBERT model)"),qxe.forEach(t),Bjo=i(Us),wv=n(Us,"LI",{});var jxe=s(wv);Gge=n(jxe,"STRONG",{});var Lgt=s(Gge);Ijo=r(Lgt,"qdqbert"),Lgt.forEach(t),Njo=r(jxe," \u2014 "),zO=n(jxe,"A",{href:!0});var xgt=s(zO);qjo=r(xgt,"QDQBertForNextSentencePrediction"),xgt.forEach(t),jjo=r(jxe," (QDQBert model)"),jxe.forEach(t),Us.forEach(t),Djo=i(ia),Av=n(ia,"P",{});var Dxe=s(Av);Gjo=r(Dxe,"The model is set in evaluation mode by default using "),Oge=n(Dxe,"CODE",{});var $gt=s(Oge);Ojo=r($gt,"model.eval()"),$gt.forEach(t),Vjo=r(Dxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vge=n(Dxe,"CODE",{});var kgt=s(Vge);Xjo=r(kgt,"model.train()"),kgt.forEach(t),Dxe.forEach(t),zjo=i(ia),T(yv.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),Bqe=i(f),Ui=n(f,"H2",{class:!0});var jDe=s(Ui);Lv=n(jDe,"A",{id:!0,class:!0,href:!0});var Sgt=s(Lv);Xge=n(Sgt,"SPAN",{});var Rgt=s(Xge);T(Gy.$$.fragment,Rgt),Rgt.forEach(t),Sgt.forEach(t),Wjo=i(jDe),zge=n(jDe,"SPAN",{});var Pgt=s(zge);Qjo=r(Pgt,"AutoModelForTokenClassification"),Pgt.forEach(t),jDe.forEach(t),Iqe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(Oy.$$.fragment,Js),Hjo=i(Js),Ji=n(Js,"P",{});var BZ=s(Ji);Ujo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),WO=n(BZ,"A",{href:!0});var Bgt=s(WO);Jjo=r(Bgt,"from_pretrained()"),Bgt.forEach(t),Yjo=r(BZ," class method or the "),QO=n(BZ,"A",{href:!0});var Igt=s(QO);Kjo=r(Igt,"from_config()"),Igt.forEach(t),Zjo=r(BZ,` class
method.`),BZ.forEach(t),eDo=i(Js),Vy=n(Js,"P",{});var DDe=s(Vy);oDo=r(DDe,"This class cannot be instantiated directly using "),Wge=n(DDe,"CODE",{});var Ngt=s(Wge);rDo=r(Ngt,"__init__()"),Ngt.forEach(t),tDo=r(DDe," (throws an error)."),DDe.forEach(t),aDo=i(Js),ft=n(Js,"DIV",{class:!0});var Uw=s(ft);T(Xy.$$.fragment,Uw),nDo=i(Uw),Qge=n(Uw,"P",{});var qgt=s(Qge);sDo=r(qgt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qgt.forEach(t),lDo=i(Uw),Yi=n(Uw,"P",{});var IZ=s(Yi);iDo=r(IZ,`Note:
Loading a model from its configuration file does `),Hge=n(IZ,"STRONG",{});var jgt=s(Hge);dDo=r(jgt,"not"),jgt.forEach(t),cDo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=n(IZ,"A",{href:!0});var Dgt=s(HO);fDo=r(Dgt,"from_pretrained()"),Dgt.forEach(t),mDo=r(IZ," to load the model weights."),IZ.forEach(t),gDo=i(Uw),T(xv.$$.fragment,Uw),Uw.forEach(t),hDo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(zy.$$.fragment,da),pDo=i(da),Uge=n(da,"P",{});var Ggt=s(Uge);_Do=r(Ggt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ggt.forEach(t),uDo=i(da),Ia=n(da,"P",{});var Jw=s(Ia);bDo=r(Jw,"The model class to instantiate is selected based on the "),Jge=n(Jw,"CODE",{});var Ogt=s(Jge);vDo=r(Ogt,"model_type"),Ogt.forEach(t),FDo=r(Jw,` property of the config object (either
passed as an argument or loaded from `),Yge=n(Jw,"CODE",{});var Vgt=s(Yge);TDo=r(Vgt,"pretrained_model_name_or_path"),Vgt.forEach(t),MDo=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kge=n(Jw,"CODE",{});var Xgt=s(Kge);EDo=r(Xgt,"pretrained_model_name_or_path"),Xgt.forEach(t),CDo=r(Jw,":"),Jw.forEach(t),wDo=i(da),H=n(da,"UL",{});var J=s(H);$v=n(J,"LI",{});var Gxe=s($v);Zge=n(Gxe,"STRONG",{});var zgt=s(Zge);ADo=r(zgt,"albert"),zgt.forEach(t),yDo=r(Gxe," \u2014 "),UO=n(Gxe,"A",{href:!0});var Wgt=s(UO);LDo=r(Wgt,"AlbertForTokenClassification"),Wgt.forEach(t),xDo=r(Gxe," (ALBERT model)"),Gxe.forEach(t),$Do=i(J),kv=n(J,"LI",{});var Oxe=s(kv);ehe=n(Oxe,"STRONG",{});var Qgt=s(ehe);kDo=r(Qgt,"bert"),Qgt.forEach(t),SDo=r(Oxe," \u2014 "),JO=n(Oxe,"A",{href:!0});var Hgt=s(JO);RDo=r(Hgt,"BertForTokenClassification"),Hgt.forEach(t),PDo=r(Oxe," (BERT model)"),Oxe.forEach(t),BDo=i(J),Sv=n(J,"LI",{});var Vxe=s(Sv);ohe=n(Vxe,"STRONG",{});var Ugt=s(ohe);IDo=r(Ugt,"big_bird"),Ugt.forEach(t),NDo=r(Vxe," \u2014 "),YO=n(Vxe,"A",{href:!0});var Jgt=s(YO);qDo=r(Jgt,"BigBirdForTokenClassification"),Jgt.forEach(t),jDo=r(Vxe," (BigBird model)"),Vxe.forEach(t),DDo=i(J),Rv=n(J,"LI",{});var Xxe=s(Rv);rhe=n(Xxe,"STRONG",{});var Ygt=s(rhe);GDo=r(Ygt,"camembert"),Ygt.forEach(t),ODo=r(Xxe," \u2014 "),KO=n(Xxe,"A",{href:!0});var Kgt=s(KO);VDo=r(Kgt,"CamembertForTokenClassification"),Kgt.forEach(t),XDo=r(Xxe," (CamemBERT model)"),Xxe.forEach(t),zDo=i(J),Pv=n(J,"LI",{});var zxe=s(Pv);the=n(zxe,"STRONG",{});var Zgt=s(the);WDo=r(Zgt,"canine"),Zgt.forEach(t),QDo=r(zxe," \u2014 "),ZO=n(zxe,"A",{href:!0});var eht=s(ZO);HDo=r(eht,"CanineForTokenClassification"),eht.forEach(t),UDo=r(zxe," (Canine model)"),zxe.forEach(t),JDo=i(J),Bv=n(J,"LI",{});var Wxe=s(Bv);ahe=n(Wxe,"STRONG",{});var oht=s(ahe);YDo=r(oht,"convbert"),oht.forEach(t),KDo=r(Wxe," \u2014 "),eV=n(Wxe,"A",{href:!0});var rht=s(eV);ZDo=r(rht,"ConvBertForTokenClassification"),rht.forEach(t),eGo=r(Wxe," (ConvBERT model)"),Wxe.forEach(t),oGo=i(J),Iv=n(J,"LI",{});var Qxe=s(Iv);nhe=n(Qxe,"STRONG",{});var tht=s(nhe);rGo=r(tht,"data2vec-text"),tht.forEach(t),tGo=r(Qxe," \u2014 "),oV=n(Qxe,"A",{href:!0});var aht=s(oV);aGo=r(aht,"Data2VecTextForTokenClassification"),aht.forEach(t),nGo=r(Qxe," (Data2VecText model)"),Qxe.forEach(t),sGo=i(J),Nv=n(J,"LI",{});var Hxe=s(Nv);she=n(Hxe,"STRONG",{});var nht=s(she);lGo=r(nht,"deberta"),nht.forEach(t),iGo=r(Hxe," \u2014 "),rV=n(Hxe,"A",{href:!0});var sht=s(rV);dGo=r(sht,"DebertaForTokenClassification"),sht.forEach(t),cGo=r(Hxe," (DeBERTa model)"),Hxe.forEach(t),fGo=i(J),qv=n(J,"LI",{});var Uxe=s(qv);lhe=n(Uxe,"STRONG",{});var lht=s(lhe);mGo=r(lht,"deberta-v2"),lht.forEach(t),gGo=r(Uxe," \u2014 "),tV=n(Uxe,"A",{href:!0});var iht=s(tV);hGo=r(iht,"DebertaV2ForTokenClassification"),iht.forEach(t),pGo=r(Uxe," (DeBERTa-v2 model)"),Uxe.forEach(t),_Go=i(J),jv=n(J,"LI",{});var Jxe=s(jv);ihe=n(Jxe,"STRONG",{});var dht=s(ihe);uGo=r(dht,"distilbert"),dht.forEach(t),bGo=r(Jxe," \u2014 "),aV=n(Jxe,"A",{href:!0});var cht=s(aV);vGo=r(cht,"DistilBertForTokenClassification"),cht.forEach(t),FGo=r(Jxe," (DistilBERT model)"),Jxe.forEach(t),TGo=i(J),Dv=n(J,"LI",{});var Yxe=s(Dv);dhe=n(Yxe,"STRONG",{});var fht=s(dhe);MGo=r(fht,"electra"),fht.forEach(t),EGo=r(Yxe," \u2014 "),nV=n(Yxe,"A",{href:!0});var mht=s(nV);CGo=r(mht,"ElectraForTokenClassification"),mht.forEach(t),wGo=r(Yxe," (ELECTRA model)"),Yxe.forEach(t),AGo=i(J),Gv=n(J,"LI",{});var Kxe=s(Gv);che=n(Kxe,"STRONG",{});var ght=s(che);yGo=r(ght,"flaubert"),ght.forEach(t),LGo=r(Kxe," \u2014 "),sV=n(Kxe,"A",{href:!0});var hht=s(sV);xGo=r(hht,"FlaubertForTokenClassification"),hht.forEach(t),$Go=r(Kxe," (FlauBERT model)"),Kxe.forEach(t),kGo=i(J),Ov=n(J,"LI",{});var Zxe=s(Ov);fhe=n(Zxe,"STRONG",{});var pht=s(fhe);SGo=r(pht,"fnet"),pht.forEach(t),RGo=r(Zxe," \u2014 "),lV=n(Zxe,"A",{href:!0});var _ht=s(lV);PGo=r(_ht,"FNetForTokenClassification"),_ht.forEach(t),BGo=r(Zxe," (FNet model)"),Zxe.forEach(t),IGo=i(J),Vv=n(J,"LI",{});var e$e=s(Vv);mhe=n(e$e,"STRONG",{});var uht=s(mhe);NGo=r(uht,"funnel"),uht.forEach(t),qGo=r(e$e," \u2014 "),iV=n(e$e,"A",{href:!0});var bht=s(iV);jGo=r(bht,"FunnelForTokenClassification"),bht.forEach(t),DGo=r(e$e," (Funnel Transformer model)"),e$e.forEach(t),GGo=i(J),Xv=n(J,"LI",{});var o$e=s(Xv);ghe=n(o$e,"STRONG",{});var vht=s(ghe);OGo=r(vht,"gpt2"),vht.forEach(t),VGo=r(o$e," \u2014 "),dV=n(o$e,"A",{href:!0});var Fht=s(dV);XGo=r(Fht,"GPT2ForTokenClassification"),Fht.forEach(t),zGo=r(o$e," (OpenAI GPT-2 model)"),o$e.forEach(t),WGo=i(J),zv=n(J,"LI",{});var r$e=s(zv);hhe=n(r$e,"STRONG",{});var Tht=s(hhe);QGo=r(Tht,"ibert"),Tht.forEach(t),HGo=r(r$e," \u2014 "),cV=n(r$e,"A",{href:!0});var Mht=s(cV);UGo=r(Mht,"IBertForTokenClassification"),Mht.forEach(t),JGo=r(r$e," (I-BERT model)"),r$e.forEach(t),YGo=i(J),Wv=n(J,"LI",{});var t$e=s(Wv);phe=n(t$e,"STRONG",{});var Eht=s(phe);KGo=r(Eht,"layoutlm"),Eht.forEach(t),ZGo=r(t$e," \u2014 "),fV=n(t$e,"A",{href:!0});var Cht=s(fV);eOo=r(Cht,"LayoutLMForTokenClassification"),Cht.forEach(t),oOo=r(t$e," (LayoutLM model)"),t$e.forEach(t),rOo=i(J),Qv=n(J,"LI",{});var a$e=s(Qv);_he=n(a$e,"STRONG",{});var wht=s(_he);tOo=r(wht,"layoutlmv2"),wht.forEach(t),aOo=r(a$e," \u2014 "),mV=n(a$e,"A",{href:!0});var Aht=s(mV);nOo=r(Aht,"LayoutLMv2ForTokenClassification"),Aht.forEach(t),sOo=r(a$e," (LayoutLMv2 model)"),a$e.forEach(t),lOo=i(J),Hv=n(J,"LI",{});var n$e=s(Hv);uhe=n(n$e,"STRONG",{});var yht=s(uhe);iOo=r(yht,"layoutlmv3"),yht.forEach(t),dOo=r(n$e," \u2014 "),gV=n(n$e,"A",{href:!0});var Lht=s(gV);cOo=r(Lht,"LayoutLMv3ForTokenClassification"),Lht.forEach(t),fOo=r(n$e," (LayoutLMv3 model)"),n$e.forEach(t),mOo=i(J),Uv=n(J,"LI",{});var s$e=s(Uv);bhe=n(s$e,"STRONG",{});var xht=s(bhe);gOo=r(xht,"longformer"),xht.forEach(t),hOo=r(s$e," \u2014 "),hV=n(s$e,"A",{href:!0});var $ht=s(hV);pOo=r($ht,"LongformerForTokenClassification"),$ht.forEach(t),_Oo=r(s$e," (Longformer model)"),s$e.forEach(t),uOo=i(J),Jv=n(J,"LI",{});var l$e=s(Jv);vhe=n(l$e,"STRONG",{});var kht=s(vhe);bOo=r(kht,"megatron-bert"),kht.forEach(t),vOo=r(l$e," \u2014 "),pV=n(l$e,"A",{href:!0});var Sht=s(pV);FOo=r(Sht,"MegatronBertForTokenClassification"),Sht.forEach(t),TOo=r(l$e," (MegatronBert model)"),l$e.forEach(t),MOo=i(J),Yv=n(J,"LI",{});var i$e=s(Yv);Fhe=n(i$e,"STRONG",{});var Rht=s(Fhe);EOo=r(Rht,"mobilebert"),Rht.forEach(t),COo=r(i$e," \u2014 "),_V=n(i$e,"A",{href:!0});var Pht=s(_V);wOo=r(Pht,"MobileBertForTokenClassification"),Pht.forEach(t),AOo=r(i$e," (MobileBERT model)"),i$e.forEach(t),yOo=i(J),Kv=n(J,"LI",{});var d$e=s(Kv);The=n(d$e,"STRONG",{});var Bht=s(The);LOo=r(Bht,"mpnet"),Bht.forEach(t),xOo=r(d$e," \u2014 "),uV=n(d$e,"A",{href:!0});var Iht=s(uV);$Oo=r(Iht,"MPNetForTokenClassification"),Iht.forEach(t),kOo=r(d$e," (MPNet model)"),d$e.forEach(t),SOo=i(J),Zv=n(J,"LI",{});var c$e=s(Zv);Mhe=n(c$e,"STRONG",{});var Nht=s(Mhe);ROo=r(Nht,"nystromformer"),Nht.forEach(t),POo=r(c$e," \u2014 "),bV=n(c$e,"A",{href:!0});var qht=s(bV);BOo=r(qht,"NystromformerForTokenClassification"),qht.forEach(t),IOo=r(c$e," (Nystromformer model)"),c$e.forEach(t),NOo=i(J),e3=n(J,"LI",{});var f$e=s(e3);Ehe=n(f$e,"STRONG",{});var jht=s(Ehe);qOo=r(jht,"qdqbert"),jht.forEach(t),jOo=r(f$e," \u2014 "),vV=n(f$e,"A",{href:!0});var Dht=s(vV);DOo=r(Dht,"QDQBertForTokenClassification"),Dht.forEach(t),GOo=r(f$e," (QDQBert model)"),f$e.forEach(t),OOo=i(J),o3=n(J,"LI",{});var m$e=s(o3);Che=n(m$e,"STRONG",{});var Ght=s(Che);VOo=r(Ght,"rembert"),Ght.forEach(t),XOo=r(m$e," \u2014 "),FV=n(m$e,"A",{href:!0});var Oht=s(FV);zOo=r(Oht,"RemBertForTokenClassification"),Oht.forEach(t),WOo=r(m$e," (RemBERT model)"),m$e.forEach(t),QOo=i(J),r3=n(J,"LI",{});var g$e=s(r3);whe=n(g$e,"STRONG",{});var Vht=s(whe);HOo=r(Vht,"roberta"),Vht.forEach(t),UOo=r(g$e," \u2014 "),TV=n(g$e,"A",{href:!0});var Xht=s(TV);JOo=r(Xht,"RobertaForTokenClassification"),Xht.forEach(t),YOo=r(g$e," (RoBERTa model)"),g$e.forEach(t),KOo=i(J),t3=n(J,"LI",{});var h$e=s(t3);Ahe=n(h$e,"STRONG",{});var zht=s(Ahe);ZOo=r(zht,"roformer"),zht.forEach(t),eVo=r(h$e," \u2014 "),MV=n(h$e,"A",{href:!0});var Wht=s(MV);oVo=r(Wht,"RoFormerForTokenClassification"),Wht.forEach(t),rVo=r(h$e," (RoFormer model)"),h$e.forEach(t),tVo=i(J),a3=n(J,"LI",{});var p$e=s(a3);yhe=n(p$e,"STRONG",{});var Qht=s(yhe);aVo=r(Qht,"squeezebert"),Qht.forEach(t),nVo=r(p$e," \u2014 "),EV=n(p$e,"A",{href:!0});var Hht=s(EV);sVo=r(Hht,"SqueezeBertForTokenClassification"),Hht.forEach(t),lVo=r(p$e," (SqueezeBERT model)"),p$e.forEach(t),iVo=i(J),n3=n(J,"LI",{});var _$e=s(n3);Lhe=n(_$e,"STRONG",{});var Uht=s(Lhe);dVo=r(Uht,"xlm"),Uht.forEach(t),cVo=r(_$e," \u2014 "),CV=n(_$e,"A",{href:!0});var Jht=s(CV);fVo=r(Jht,"XLMForTokenClassification"),Jht.forEach(t),mVo=r(_$e," (XLM model)"),_$e.forEach(t),gVo=i(J),s3=n(J,"LI",{});var u$e=s(s3);xhe=n(u$e,"STRONG",{});var Yht=s(xhe);hVo=r(Yht,"xlm-roberta"),Yht.forEach(t),pVo=r(u$e," \u2014 "),wV=n(u$e,"A",{href:!0});var Kht=s(wV);_Vo=r(Kht,"XLMRobertaForTokenClassification"),Kht.forEach(t),uVo=r(u$e," (XLM-RoBERTa model)"),u$e.forEach(t),bVo=i(J),l3=n(J,"LI",{});var b$e=s(l3);$he=n(b$e,"STRONG",{});var Zht=s($he);vVo=r(Zht,"xlm-roberta-xl"),Zht.forEach(t),FVo=r(b$e," \u2014 "),AV=n(b$e,"A",{href:!0});var ept=s(AV);TVo=r(ept,"XLMRobertaXLForTokenClassification"),ept.forEach(t),MVo=r(b$e," (XLM-RoBERTa-XL model)"),b$e.forEach(t),EVo=i(J),i3=n(J,"LI",{});var v$e=s(i3);khe=n(v$e,"STRONG",{});var opt=s(khe);CVo=r(opt,"xlnet"),opt.forEach(t),wVo=r(v$e," \u2014 "),yV=n(v$e,"A",{href:!0});var rpt=s(yV);AVo=r(rpt,"XLNetForTokenClassification"),rpt.forEach(t),yVo=r(v$e," (XLNet model)"),v$e.forEach(t),LVo=i(J),d3=n(J,"LI",{});var F$e=s(d3);She=n(F$e,"STRONG",{});var tpt=s(She);xVo=r(tpt,"yoso"),tpt.forEach(t),$Vo=r(F$e," \u2014 "),LV=n(F$e,"A",{href:!0});var apt=s(LV);kVo=r(apt,"YosoForTokenClassification"),apt.forEach(t),SVo=r(F$e," (YOSO model)"),F$e.forEach(t),J.forEach(t),RVo=i(da),c3=n(da,"P",{});var T$e=s(c3);PVo=r(T$e,"The model is set in evaluation mode by default using "),Rhe=n(T$e,"CODE",{});var npt=s(Rhe);BVo=r(npt,"model.eval()"),npt.forEach(t),IVo=r(T$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Phe=n(T$e,"CODE",{});var spt=s(Phe);NVo=r(spt,"model.train()"),spt.forEach(t),T$e.forEach(t),qVo=i(da),T(f3.$$.fragment,da),da.forEach(t),Js.forEach(t),Nqe=i(f),Ki=n(f,"H2",{class:!0});var GDe=s(Ki);m3=n(GDe,"A",{id:!0,class:!0,href:!0});var lpt=s(m3);Bhe=n(lpt,"SPAN",{});var ipt=s(Bhe);T(Wy.$$.fragment,ipt),ipt.forEach(t),lpt.forEach(t),jVo=i(GDe),Ihe=n(GDe,"SPAN",{});var dpt=s(Ihe);DVo=r(dpt,"AutoModelForQuestionAnswering"),dpt.forEach(t),GDe.forEach(t),qqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(Qy.$$.fragment,Ys),GVo=i(Ys),Zi=n(Ys,"P",{});var NZ=s(Zi);OVo=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xV=n(NZ,"A",{href:!0});var cpt=s(xV);VVo=r(cpt,"from_pretrained()"),cpt.forEach(t),XVo=r(NZ," class method or the "),$V=n(NZ,"A",{href:!0});var fpt=s($V);zVo=r(fpt,"from_config()"),fpt.forEach(t),WVo=r(NZ,` class
method.`),NZ.forEach(t),QVo=i(Ys),Hy=n(Ys,"P",{});var ODe=s(Hy);HVo=r(ODe,"This class cannot be instantiated directly using "),Nhe=n(ODe,"CODE",{});var mpt=s(Nhe);UVo=r(mpt,"__init__()"),mpt.forEach(t),JVo=r(ODe," (throws an error)."),ODe.forEach(t),YVo=i(Ys),mt=n(Ys,"DIV",{class:!0});var Yw=s(mt);T(Uy.$$.fragment,Yw),KVo=i(Yw),qhe=n(Yw,"P",{});var gpt=s(qhe);ZVo=r(gpt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gpt.forEach(t),eXo=i(Yw),ed=n(Yw,"P",{});var qZ=s(ed);oXo=r(qZ,`Note:
Loading a model from its configuration file does `),jhe=n(qZ,"STRONG",{});var hpt=s(jhe);rXo=r(hpt,"not"),hpt.forEach(t),tXo=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=n(qZ,"A",{href:!0});var ppt=s(kV);aXo=r(ppt,"from_pretrained()"),ppt.forEach(t),nXo=r(qZ," to load the model weights."),qZ.forEach(t),sXo=i(Yw),T(g3.$$.fragment,Yw),Yw.forEach(t),lXo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(Jy.$$.fragment,ca),iXo=i(ca),Dhe=n(ca,"P",{});var _pt=s(Dhe);dXo=r(_pt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_pt.forEach(t),cXo=i(ca),Na=n(ca,"P",{});var Kw=s(Na);fXo=r(Kw,"The model class to instantiate is selected based on the "),Ghe=n(Kw,"CODE",{});var upt=s(Ghe);mXo=r(upt,"model_type"),upt.forEach(t),gXo=r(Kw,` property of the config object (either
passed as an argument or loaded from `),Ohe=n(Kw,"CODE",{});var bpt=s(Ohe);hXo=r(bpt,"pretrained_model_name_or_path"),bpt.forEach(t),pXo=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vhe=n(Kw,"CODE",{});var vpt=s(Vhe);_Xo=r(vpt,"pretrained_model_name_or_path"),vpt.forEach(t),uXo=r(Kw,":"),Kw.forEach(t),bXo=i(ca),V=n(ca,"UL",{});var X=s(V);h3=n(X,"LI",{});var M$e=s(h3);Xhe=n(M$e,"STRONG",{});var Fpt=s(Xhe);vXo=r(Fpt,"albert"),Fpt.forEach(t),FXo=r(M$e," \u2014 "),SV=n(M$e,"A",{href:!0});var Tpt=s(SV);TXo=r(Tpt,"AlbertForQuestionAnswering"),Tpt.forEach(t),MXo=r(M$e," (ALBERT model)"),M$e.forEach(t),EXo=i(X),p3=n(X,"LI",{});var E$e=s(p3);zhe=n(E$e,"STRONG",{});var Mpt=s(zhe);CXo=r(Mpt,"bart"),Mpt.forEach(t),wXo=r(E$e," \u2014 "),RV=n(E$e,"A",{href:!0});var Ept=s(RV);AXo=r(Ept,"BartForQuestionAnswering"),Ept.forEach(t),yXo=r(E$e," (BART model)"),E$e.forEach(t),LXo=i(X),_3=n(X,"LI",{});var C$e=s(_3);Whe=n(C$e,"STRONG",{});var Cpt=s(Whe);xXo=r(Cpt,"bert"),Cpt.forEach(t),$Xo=r(C$e," \u2014 "),PV=n(C$e,"A",{href:!0});var wpt=s(PV);kXo=r(wpt,"BertForQuestionAnswering"),wpt.forEach(t),SXo=r(C$e," (BERT model)"),C$e.forEach(t),RXo=i(X),u3=n(X,"LI",{});var w$e=s(u3);Qhe=n(w$e,"STRONG",{});var Apt=s(Qhe);PXo=r(Apt,"big_bird"),Apt.forEach(t),BXo=r(w$e," \u2014 "),BV=n(w$e,"A",{href:!0});var ypt=s(BV);IXo=r(ypt,"BigBirdForQuestionAnswering"),ypt.forEach(t),NXo=r(w$e," (BigBird model)"),w$e.forEach(t),qXo=i(X),b3=n(X,"LI",{});var A$e=s(b3);Hhe=n(A$e,"STRONG",{});var Lpt=s(Hhe);jXo=r(Lpt,"bigbird_pegasus"),Lpt.forEach(t),DXo=r(A$e," \u2014 "),IV=n(A$e,"A",{href:!0});var xpt=s(IV);GXo=r(xpt,"BigBirdPegasusForQuestionAnswering"),xpt.forEach(t),OXo=r(A$e," (BigBirdPegasus model)"),A$e.forEach(t),VXo=i(X),v3=n(X,"LI",{});var y$e=s(v3);Uhe=n(y$e,"STRONG",{});var $pt=s(Uhe);XXo=r($pt,"camembert"),$pt.forEach(t),zXo=r(y$e," \u2014 "),NV=n(y$e,"A",{href:!0});var kpt=s(NV);WXo=r(kpt,"CamembertForQuestionAnswering"),kpt.forEach(t),QXo=r(y$e," (CamemBERT model)"),y$e.forEach(t),HXo=i(X),F3=n(X,"LI",{});var L$e=s(F3);Jhe=n(L$e,"STRONG",{});var Spt=s(Jhe);UXo=r(Spt,"canine"),Spt.forEach(t),JXo=r(L$e," \u2014 "),qV=n(L$e,"A",{href:!0});var Rpt=s(qV);YXo=r(Rpt,"CanineForQuestionAnswering"),Rpt.forEach(t),KXo=r(L$e," (Canine model)"),L$e.forEach(t),ZXo=i(X),T3=n(X,"LI",{});var x$e=s(T3);Yhe=n(x$e,"STRONG",{});var Ppt=s(Yhe);ezo=r(Ppt,"convbert"),Ppt.forEach(t),ozo=r(x$e," \u2014 "),jV=n(x$e,"A",{href:!0});var Bpt=s(jV);rzo=r(Bpt,"ConvBertForQuestionAnswering"),Bpt.forEach(t),tzo=r(x$e," (ConvBERT model)"),x$e.forEach(t),azo=i(X),M3=n(X,"LI",{});var $$e=s(M3);Khe=n($$e,"STRONG",{});var Ipt=s(Khe);nzo=r(Ipt,"data2vec-text"),Ipt.forEach(t),szo=r($$e," \u2014 "),DV=n($$e,"A",{href:!0});var Npt=s(DV);lzo=r(Npt,"Data2VecTextForQuestionAnswering"),Npt.forEach(t),izo=r($$e," (Data2VecText model)"),$$e.forEach(t),dzo=i(X),E3=n(X,"LI",{});var k$e=s(E3);Zhe=n(k$e,"STRONG",{});var qpt=s(Zhe);czo=r(qpt,"deberta"),qpt.forEach(t),fzo=r(k$e," \u2014 "),GV=n(k$e,"A",{href:!0});var jpt=s(GV);mzo=r(jpt,"DebertaForQuestionAnswering"),jpt.forEach(t),gzo=r(k$e," (DeBERTa model)"),k$e.forEach(t),hzo=i(X),C3=n(X,"LI",{});var S$e=s(C3);epe=n(S$e,"STRONG",{});var Dpt=s(epe);pzo=r(Dpt,"deberta-v2"),Dpt.forEach(t),_zo=r(S$e," \u2014 "),OV=n(S$e,"A",{href:!0});var Gpt=s(OV);uzo=r(Gpt,"DebertaV2ForQuestionAnswering"),Gpt.forEach(t),bzo=r(S$e," (DeBERTa-v2 model)"),S$e.forEach(t),vzo=i(X),w3=n(X,"LI",{});var R$e=s(w3);ope=n(R$e,"STRONG",{});var Opt=s(ope);Fzo=r(Opt,"distilbert"),Opt.forEach(t),Tzo=r(R$e," \u2014 "),VV=n(R$e,"A",{href:!0});var Vpt=s(VV);Mzo=r(Vpt,"DistilBertForQuestionAnswering"),Vpt.forEach(t),Ezo=r(R$e," (DistilBERT model)"),R$e.forEach(t),Czo=i(X),A3=n(X,"LI",{});var P$e=s(A3);rpe=n(P$e,"STRONG",{});var Xpt=s(rpe);wzo=r(Xpt,"electra"),Xpt.forEach(t),Azo=r(P$e," \u2014 "),XV=n(P$e,"A",{href:!0});var zpt=s(XV);yzo=r(zpt,"ElectraForQuestionAnswering"),zpt.forEach(t),Lzo=r(P$e," (ELECTRA model)"),P$e.forEach(t),xzo=i(X),y3=n(X,"LI",{});var B$e=s(y3);tpe=n(B$e,"STRONG",{});var Wpt=s(tpe);$zo=r(Wpt,"flaubert"),Wpt.forEach(t),kzo=r(B$e," \u2014 "),zV=n(B$e,"A",{href:!0});var Qpt=s(zV);Szo=r(Qpt,"FlaubertForQuestionAnsweringSimple"),Qpt.forEach(t),Rzo=r(B$e," (FlauBERT model)"),B$e.forEach(t),Pzo=i(X),L3=n(X,"LI",{});var I$e=s(L3);ape=n(I$e,"STRONG",{});var Hpt=s(ape);Bzo=r(Hpt,"fnet"),Hpt.forEach(t),Izo=r(I$e," \u2014 "),WV=n(I$e,"A",{href:!0});var Upt=s(WV);Nzo=r(Upt,"FNetForQuestionAnswering"),Upt.forEach(t),qzo=r(I$e," (FNet model)"),I$e.forEach(t),jzo=i(X),x3=n(X,"LI",{});var N$e=s(x3);npe=n(N$e,"STRONG",{});var Jpt=s(npe);Dzo=r(Jpt,"funnel"),Jpt.forEach(t),Gzo=r(N$e," \u2014 "),QV=n(N$e,"A",{href:!0});var Ypt=s(QV);Ozo=r(Ypt,"FunnelForQuestionAnswering"),Ypt.forEach(t),Vzo=r(N$e," (Funnel Transformer model)"),N$e.forEach(t),Xzo=i(X),$3=n(X,"LI",{});var q$e=s($3);spe=n(q$e,"STRONG",{});var Kpt=s(spe);zzo=r(Kpt,"gptj"),Kpt.forEach(t),Wzo=r(q$e," \u2014 "),HV=n(q$e,"A",{href:!0});var Zpt=s(HV);Qzo=r(Zpt,"GPTJForQuestionAnswering"),Zpt.forEach(t),Hzo=r(q$e," (GPT-J model)"),q$e.forEach(t),Uzo=i(X),k3=n(X,"LI",{});var j$e=s(k3);lpe=n(j$e,"STRONG",{});var e_t=s(lpe);Jzo=r(e_t,"ibert"),e_t.forEach(t),Yzo=r(j$e," \u2014 "),UV=n(j$e,"A",{href:!0});var o_t=s(UV);Kzo=r(o_t,"IBertForQuestionAnswering"),o_t.forEach(t),Zzo=r(j$e," (I-BERT model)"),j$e.forEach(t),eWo=i(X),S3=n(X,"LI",{});var D$e=s(S3);ipe=n(D$e,"STRONG",{});var r_t=s(ipe);oWo=r(r_t,"layoutlmv2"),r_t.forEach(t),rWo=r(D$e," \u2014 "),JV=n(D$e,"A",{href:!0});var t_t=s(JV);tWo=r(t_t,"LayoutLMv2ForQuestionAnswering"),t_t.forEach(t),aWo=r(D$e," (LayoutLMv2 model)"),D$e.forEach(t),nWo=i(X),R3=n(X,"LI",{});var G$e=s(R3);dpe=n(G$e,"STRONG",{});var a_t=s(dpe);sWo=r(a_t,"layoutlmv3"),a_t.forEach(t),lWo=r(G$e," \u2014 "),YV=n(G$e,"A",{href:!0});var n_t=s(YV);iWo=r(n_t,"LayoutLMv3ForQuestionAnswering"),n_t.forEach(t),dWo=r(G$e," (LayoutLMv3 model)"),G$e.forEach(t),cWo=i(X),P3=n(X,"LI",{});var O$e=s(P3);cpe=n(O$e,"STRONG",{});var s_t=s(cpe);fWo=r(s_t,"led"),s_t.forEach(t),mWo=r(O$e," \u2014 "),KV=n(O$e,"A",{href:!0});var l_t=s(KV);gWo=r(l_t,"LEDForQuestionAnswering"),l_t.forEach(t),hWo=r(O$e," (LED model)"),O$e.forEach(t),pWo=i(X),B3=n(X,"LI",{});var V$e=s(B3);fpe=n(V$e,"STRONG",{});var i_t=s(fpe);_Wo=r(i_t,"longformer"),i_t.forEach(t),uWo=r(V$e," \u2014 "),ZV=n(V$e,"A",{href:!0});var d_t=s(ZV);bWo=r(d_t,"LongformerForQuestionAnswering"),d_t.forEach(t),vWo=r(V$e," (Longformer model)"),V$e.forEach(t),FWo=i(X),I3=n(X,"LI",{});var X$e=s(I3);mpe=n(X$e,"STRONG",{});var c_t=s(mpe);TWo=r(c_t,"lxmert"),c_t.forEach(t),MWo=r(X$e," \u2014 "),eX=n(X$e,"A",{href:!0});var f_t=s(eX);EWo=r(f_t,"LxmertForQuestionAnswering"),f_t.forEach(t),CWo=r(X$e," (LXMERT model)"),X$e.forEach(t),wWo=i(X),N3=n(X,"LI",{});var z$e=s(N3);gpe=n(z$e,"STRONG",{});var m_t=s(gpe);AWo=r(m_t,"mbart"),m_t.forEach(t),yWo=r(z$e," \u2014 "),oX=n(z$e,"A",{href:!0});var g_t=s(oX);LWo=r(g_t,"MBartForQuestionAnswering"),g_t.forEach(t),xWo=r(z$e," (mBART model)"),z$e.forEach(t),$Wo=i(X),q3=n(X,"LI",{});var W$e=s(q3);hpe=n(W$e,"STRONG",{});var h_t=s(hpe);kWo=r(h_t,"megatron-bert"),h_t.forEach(t),SWo=r(W$e," \u2014 "),rX=n(W$e,"A",{href:!0});var p_t=s(rX);RWo=r(p_t,"MegatronBertForQuestionAnswering"),p_t.forEach(t),PWo=r(W$e," (MegatronBert model)"),W$e.forEach(t),BWo=i(X),j3=n(X,"LI",{});var Q$e=s(j3);ppe=n(Q$e,"STRONG",{});var __t=s(ppe);IWo=r(__t,"mobilebert"),__t.forEach(t),NWo=r(Q$e," \u2014 "),tX=n(Q$e,"A",{href:!0});var u_t=s(tX);qWo=r(u_t,"MobileBertForQuestionAnswering"),u_t.forEach(t),jWo=r(Q$e," (MobileBERT model)"),Q$e.forEach(t),DWo=i(X),D3=n(X,"LI",{});var H$e=s(D3);_pe=n(H$e,"STRONG",{});var b_t=s(_pe);GWo=r(b_t,"mpnet"),b_t.forEach(t),OWo=r(H$e," \u2014 "),aX=n(H$e,"A",{href:!0});var v_t=s(aX);VWo=r(v_t,"MPNetForQuestionAnswering"),v_t.forEach(t),XWo=r(H$e," (MPNet model)"),H$e.forEach(t),zWo=i(X),G3=n(X,"LI",{});var U$e=s(G3);upe=n(U$e,"STRONG",{});var F_t=s(upe);WWo=r(F_t,"nystromformer"),F_t.forEach(t),QWo=r(U$e," \u2014 "),nX=n(U$e,"A",{href:!0});var T_t=s(nX);HWo=r(T_t,"NystromformerForQuestionAnswering"),T_t.forEach(t),UWo=r(U$e," (Nystromformer model)"),U$e.forEach(t),JWo=i(X),O3=n(X,"LI",{});var J$e=s(O3);bpe=n(J$e,"STRONG",{});var M_t=s(bpe);YWo=r(M_t,"qdqbert"),M_t.forEach(t),KWo=r(J$e," \u2014 "),sX=n(J$e,"A",{href:!0});var E_t=s(sX);ZWo=r(E_t,"QDQBertForQuestionAnswering"),E_t.forEach(t),eQo=r(J$e," (QDQBert model)"),J$e.forEach(t),oQo=i(X),V3=n(X,"LI",{});var Y$e=s(V3);vpe=n(Y$e,"STRONG",{});var C_t=s(vpe);rQo=r(C_t,"reformer"),C_t.forEach(t),tQo=r(Y$e," \u2014 "),lX=n(Y$e,"A",{href:!0});var w_t=s(lX);aQo=r(w_t,"ReformerForQuestionAnswering"),w_t.forEach(t),nQo=r(Y$e," (Reformer model)"),Y$e.forEach(t),sQo=i(X),X3=n(X,"LI",{});var K$e=s(X3);Fpe=n(K$e,"STRONG",{});var A_t=s(Fpe);lQo=r(A_t,"rembert"),A_t.forEach(t),iQo=r(K$e," \u2014 "),iX=n(K$e,"A",{href:!0});var y_t=s(iX);dQo=r(y_t,"RemBertForQuestionAnswering"),y_t.forEach(t),cQo=r(K$e," (RemBERT model)"),K$e.forEach(t),fQo=i(X),z3=n(X,"LI",{});var Z$e=s(z3);Tpe=n(Z$e,"STRONG",{});var L_t=s(Tpe);mQo=r(L_t,"roberta"),L_t.forEach(t),gQo=r(Z$e," \u2014 "),dX=n(Z$e,"A",{href:!0});var x_t=s(dX);hQo=r(x_t,"RobertaForQuestionAnswering"),x_t.forEach(t),pQo=r(Z$e," (RoBERTa model)"),Z$e.forEach(t),_Qo=i(X),W3=n(X,"LI",{});var eke=s(W3);Mpe=n(eke,"STRONG",{});var $_t=s(Mpe);uQo=r($_t,"roformer"),$_t.forEach(t),bQo=r(eke," \u2014 "),cX=n(eke,"A",{href:!0});var k_t=s(cX);vQo=r(k_t,"RoFormerForQuestionAnswering"),k_t.forEach(t),FQo=r(eke," (RoFormer model)"),eke.forEach(t),TQo=i(X),Q3=n(X,"LI",{});var oke=s(Q3);Epe=n(oke,"STRONG",{});var S_t=s(Epe);MQo=r(S_t,"splinter"),S_t.forEach(t),EQo=r(oke," \u2014 "),fX=n(oke,"A",{href:!0});var R_t=s(fX);CQo=r(R_t,"SplinterForQuestionAnswering"),R_t.forEach(t),wQo=r(oke," (Splinter model)"),oke.forEach(t),AQo=i(X),H3=n(X,"LI",{});var rke=s(H3);Cpe=n(rke,"STRONG",{});var P_t=s(Cpe);yQo=r(P_t,"squeezebert"),P_t.forEach(t),LQo=r(rke," \u2014 "),mX=n(rke,"A",{href:!0});var B_t=s(mX);xQo=r(B_t,"SqueezeBertForQuestionAnswering"),B_t.forEach(t),$Qo=r(rke," (SqueezeBERT model)"),rke.forEach(t),kQo=i(X),U3=n(X,"LI",{});var tke=s(U3);wpe=n(tke,"STRONG",{});var I_t=s(wpe);SQo=r(I_t,"xlm"),I_t.forEach(t),RQo=r(tke," \u2014 "),gX=n(tke,"A",{href:!0});var N_t=s(gX);PQo=r(N_t,"XLMForQuestionAnsweringSimple"),N_t.forEach(t),BQo=r(tke," (XLM model)"),tke.forEach(t),IQo=i(X),J3=n(X,"LI",{});var ake=s(J3);Ape=n(ake,"STRONG",{});var q_t=s(Ape);NQo=r(q_t,"xlm-roberta"),q_t.forEach(t),qQo=r(ake," \u2014 "),hX=n(ake,"A",{href:!0});var j_t=s(hX);jQo=r(j_t,"XLMRobertaForQuestionAnswering"),j_t.forEach(t),DQo=r(ake," (XLM-RoBERTa model)"),ake.forEach(t),GQo=i(X),Y3=n(X,"LI",{});var nke=s(Y3);ype=n(nke,"STRONG",{});var D_t=s(ype);OQo=r(D_t,"xlm-roberta-xl"),D_t.forEach(t),VQo=r(nke," \u2014 "),pX=n(nke,"A",{href:!0});var G_t=s(pX);XQo=r(G_t,"XLMRobertaXLForQuestionAnswering"),G_t.forEach(t),zQo=r(nke," (XLM-RoBERTa-XL model)"),nke.forEach(t),WQo=i(X),K3=n(X,"LI",{});var ske=s(K3);Lpe=n(ske,"STRONG",{});var O_t=s(Lpe);QQo=r(O_t,"xlnet"),O_t.forEach(t),HQo=r(ske," \u2014 "),_X=n(ske,"A",{href:!0});var V_t=s(_X);UQo=r(V_t,"XLNetForQuestionAnsweringSimple"),V_t.forEach(t),JQo=r(ske," (XLNet model)"),ske.forEach(t),YQo=i(X),Z3=n(X,"LI",{});var lke=s(Z3);xpe=n(lke,"STRONG",{});var X_t=s(xpe);KQo=r(X_t,"yoso"),X_t.forEach(t),ZQo=r(lke," \u2014 "),uX=n(lke,"A",{href:!0});var z_t=s(uX);eHo=r(z_t,"YosoForQuestionAnswering"),z_t.forEach(t),oHo=r(lke," (YOSO model)"),lke.forEach(t),X.forEach(t),rHo=i(ca),e0=n(ca,"P",{});var ike=s(e0);tHo=r(ike,"The model is set in evaluation mode by default using "),$pe=n(ike,"CODE",{});var W_t=s($pe);aHo=r(W_t,"model.eval()"),W_t.forEach(t),nHo=r(ike,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kpe=n(ike,"CODE",{});var Q_t=s(kpe);sHo=r(Q_t,"model.train()"),Q_t.forEach(t),ike.forEach(t),lHo=i(ca),T(o0.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),jqe=i(f),od=n(f,"H2",{class:!0});var VDe=s(od);r0=n(VDe,"A",{id:!0,class:!0,href:!0});var H_t=s(r0);Spe=n(H_t,"SPAN",{});var U_t=s(Spe);T(Yy.$$.fragment,U_t),U_t.forEach(t),H_t.forEach(t),iHo=i(VDe),Rpe=n(VDe,"SPAN",{});var J_t=s(Rpe);dHo=r(J_t,"AutoModelForTableQuestionAnswering"),J_t.forEach(t),VDe.forEach(t),Dqe=i(f),qo=n(f,"DIV",{class:!0});var Ks=s(qo);T(Ky.$$.fragment,Ks),cHo=i(Ks),rd=n(Ks,"P",{});var jZ=s(rd);fHo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bX=n(jZ,"A",{href:!0});var Y_t=s(bX);mHo=r(Y_t,"from_pretrained()"),Y_t.forEach(t),gHo=r(jZ," class method or the "),vX=n(jZ,"A",{href:!0});var K_t=s(vX);hHo=r(K_t,"from_config()"),K_t.forEach(t),pHo=r(jZ,` class
method.`),jZ.forEach(t),_Ho=i(Ks),Zy=n(Ks,"P",{});var XDe=s(Zy);uHo=r(XDe,"This class cannot be instantiated directly using "),Ppe=n(XDe,"CODE",{});var Z_t=s(Ppe);bHo=r(Z_t,"__init__()"),Z_t.forEach(t),vHo=r(XDe," (throws an error)."),XDe.forEach(t),FHo=i(Ks),gt=n(Ks,"DIV",{class:!0});var Zw=s(gt);T(eL.$$.fragment,Zw),THo=i(Zw),Bpe=n(Zw,"P",{});var eut=s(Bpe);MHo=r(eut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),eut.forEach(t),EHo=i(Zw),td=n(Zw,"P",{});var DZ=s(td);CHo=r(DZ,`Note:
Loading a model from its configuration file does `),Ipe=n(DZ,"STRONG",{});var out=s(Ipe);wHo=r(out,"not"),out.forEach(t),AHo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=n(DZ,"A",{href:!0});var rut=s(FX);yHo=r(rut,"from_pretrained()"),rut.forEach(t),LHo=r(DZ," to load the model weights."),DZ.forEach(t),xHo=i(Zw),T(t0.$$.fragment,Zw),Zw.forEach(t),$Ho=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(oL.$$.fragment,fa),kHo=i(fa),Npe=n(fa,"P",{});var tut=s(Npe);SHo=r(tut,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),tut.forEach(t),RHo=i(fa),qa=n(fa,"P",{});var e6=s(qa);PHo=r(e6,"The model class to instantiate is selected based on the "),qpe=n(e6,"CODE",{});var aut=s(qpe);BHo=r(aut,"model_type"),aut.forEach(t),IHo=r(e6,` property of the config object (either
passed as an argument or loaded from `),jpe=n(e6,"CODE",{});var nut=s(jpe);NHo=r(nut,"pretrained_model_name_or_path"),nut.forEach(t),qHo=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=n(e6,"CODE",{});var sut=s(Dpe);jHo=r(sut,"pretrained_model_name_or_path"),sut.forEach(t),DHo=r(e6,":"),e6.forEach(t),GHo=i(fa),Gpe=n(fa,"UL",{});var lut=s(Gpe);a0=n(lut,"LI",{});var dke=s(a0);Ope=n(dke,"STRONG",{});var iut=s(Ope);OHo=r(iut,"tapas"),iut.forEach(t),VHo=r(dke," \u2014 "),TX=n(dke,"A",{href:!0});var dut=s(TX);XHo=r(dut,"TapasForQuestionAnswering"),dut.forEach(t),zHo=r(dke," (TAPAS model)"),dke.forEach(t),lut.forEach(t),WHo=i(fa),n0=n(fa,"P",{});var cke=s(n0);QHo=r(cke,"The model is set in evaluation mode by default using "),Vpe=n(cke,"CODE",{});var cut=s(Vpe);HHo=r(cut,"model.eval()"),cut.forEach(t),UHo=r(cke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=n(cke,"CODE",{});var fut=s(Xpe);JHo=r(fut,"model.train()"),fut.forEach(t),cke.forEach(t),YHo=i(fa),T(s0.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),Gqe=i(f),ad=n(f,"H2",{class:!0});var zDe=s(ad);l0=n(zDe,"A",{id:!0,class:!0,href:!0});var mut=s(l0);zpe=n(mut,"SPAN",{});var gut=s(zpe);T(rL.$$.fragment,gut),gut.forEach(t),mut.forEach(t),KHo=i(zDe),Wpe=n(zDe,"SPAN",{});var hut=s(Wpe);ZHo=r(hut,"AutoModelForImageClassification"),hut.forEach(t),zDe.forEach(t),Oqe=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(tL.$$.fragment,Zs),eUo=i(Zs),nd=n(Zs,"P",{});var GZ=s(nd);oUo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),MX=n(GZ,"A",{href:!0});var put=s(MX);rUo=r(put,"from_pretrained()"),put.forEach(t),tUo=r(GZ," class method or the "),EX=n(GZ,"A",{href:!0});var _ut=s(EX);aUo=r(_ut,"from_config()"),_ut.forEach(t),nUo=r(GZ,` class
method.`),GZ.forEach(t),sUo=i(Zs),aL=n(Zs,"P",{});var WDe=s(aL);lUo=r(WDe,"This class cannot be instantiated directly using "),Qpe=n(WDe,"CODE",{});var uut=s(Qpe);iUo=r(uut,"__init__()"),uut.forEach(t),dUo=r(WDe," (throws an error)."),WDe.forEach(t),cUo=i(Zs),ht=n(Zs,"DIV",{class:!0});var o6=s(ht);T(nL.$$.fragment,o6),fUo=i(o6),Hpe=n(o6,"P",{});var but=s(Hpe);mUo=r(but,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),but.forEach(t),gUo=i(o6),sd=n(o6,"P",{});var OZ=s(sd);hUo=r(OZ,`Note:
Loading a model from its configuration file does `),Upe=n(OZ,"STRONG",{});var vut=s(Upe);pUo=r(vut,"not"),vut.forEach(t),_Uo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=n(OZ,"A",{href:!0});var Fut=s(CX);uUo=r(Fut,"from_pretrained()"),Fut.forEach(t),bUo=r(OZ," to load the model weights."),OZ.forEach(t),vUo=i(o6),T(i0.$$.fragment,o6),o6.forEach(t),FUo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(sL.$$.fragment,ma),TUo=i(ma),Jpe=n(ma,"P",{});var Tut=s(Jpe);MUo=r(Tut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Tut.forEach(t),EUo=i(ma),ja=n(ma,"P",{});var r6=s(ja);CUo=r(r6,"The model class to instantiate is selected based on the "),Ype=n(r6,"CODE",{});var Mut=s(Ype);wUo=r(Mut,"model_type"),Mut.forEach(t),AUo=r(r6,` property of the config object (either
passed as an argument or loaded from `),Kpe=n(r6,"CODE",{});var Eut=s(Kpe);yUo=r(Eut,"pretrained_model_name_or_path"),Eut.forEach(t),LUo=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=n(r6,"CODE",{});var Cut=s(Zpe);xUo=r(Cut,"pretrained_model_name_or_path"),Cut.forEach(t),$Uo=r(r6,":"),r6.forEach(t),kUo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);d0=n(Te,"LI",{});var fke=s(d0);e_e=n(fke,"STRONG",{});var wut=s(e_e);SUo=r(wut,"beit"),wut.forEach(t),RUo=r(fke," \u2014 "),wX=n(fke,"A",{href:!0});var Aut=s(wX);PUo=r(Aut,"BeitForImageClassification"),Aut.forEach(t),BUo=r(fke," (BEiT model)"),fke.forEach(t),IUo=i(Te),c0=n(Te,"LI",{});var mke=s(c0);o_e=n(mke,"STRONG",{});var yut=s(o_e);NUo=r(yut,"convnext"),yut.forEach(t),qUo=r(mke," \u2014 "),AX=n(mke,"A",{href:!0});var Lut=s(AX);jUo=r(Lut,"ConvNextForImageClassification"),Lut.forEach(t),DUo=r(mke," (ConvNext model)"),mke.forEach(t),GUo=i(Te),f0=n(Te,"LI",{});var gke=s(f0);r_e=n(gke,"STRONG",{});var xut=s(r_e);OUo=r(xut,"cvt"),xut.forEach(t),VUo=r(gke," \u2014 "),yX=n(gke,"A",{href:!0});var $ut=s(yX);XUo=r($ut,"CvtForImageClassification"),$ut.forEach(t),zUo=r(gke," (CvT model)"),gke.forEach(t),WUo=i(Te),m0=n(Te,"LI",{});var hke=s(m0);t_e=n(hke,"STRONG",{});var kut=s(t_e);QUo=r(kut,"data2vec-vision"),kut.forEach(t),HUo=r(hke," \u2014 "),LX=n(hke,"A",{href:!0});var Sut=s(LX);UUo=r(Sut,"Data2VecVisionForImageClassification"),Sut.forEach(t),JUo=r(hke," (Data2VecVision model)"),hke.forEach(t),YUo=i(Te),Bs=n(Te,"LI",{});var z$=s(Bs);a_e=n(z$,"STRONG",{});var Rut=s(a_e);KUo=r(Rut,"deit"),Rut.forEach(t),ZUo=r(z$," \u2014 "),xX=n(z$,"A",{href:!0});var Put=s(xX);eJo=r(Put,"DeiTForImageClassification"),Put.forEach(t),oJo=r(z$," or "),$X=n(z$,"A",{href:!0});var But=s($X);rJo=r(But,"DeiTForImageClassificationWithTeacher"),But.forEach(t),tJo=r(z$," (DeiT model)"),z$.forEach(t),aJo=i(Te),g0=n(Te,"LI",{});var pke=s(g0);n_e=n(pke,"STRONG",{});var Iut=s(n_e);nJo=r(Iut,"imagegpt"),Iut.forEach(t),sJo=r(pke," \u2014 "),kX=n(pke,"A",{href:!0});var Nut=s(kX);lJo=r(Nut,"ImageGPTForImageClassification"),Nut.forEach(t),iJo=r(pke," (ImageGPT model)"),pke.forEach(t),dJo=i(Te),pt=n(Te,"LI",{});var hf=s(pt);s_e=n(hf,"STRONG",{});var qut=s(s_e);cJo=r(qut,"perceiver"),qut.forEach(t),fJo=r(hf," \u2014 "),SX=n(hf,"A",{href:!0});var jut=s(SX);mJo=r(jut,"PerceiverForImageClassificationLearned"),jut.forEach(t),gJo=r(hf," or "),RX=n(hf,"A",{href:!0});var Dut=s(RX);hJo=r(Dut,"PerceiverForImageClassificationFourier"),Dut.forEach(t),pJo=r(hf," or "),PX=n(hf,"A",{href:!0});var Gut=s(PX);_Jo=r(Gut,"PerceiverForImageClassificationConvProcessing"),Gut.forEach(t),uJo=r(hf," (Perceiver model)"),hf.forEach(t),bJo=i(Te),h0=n(Te,"LI",{});var _ke=s(h0);l_e=n(_ke,"STRONG",{});var Out=s(l_e);vJo=r(Out,"poolformer"),Out.forEach(t),FJo=r(_ke," \u2014 "),BX=n(_ke,"A",{href:!0});var Vut=s(BX);TJo=r(Vut,"PoolFormerForImageClassification"),Vut.forEach(t),MJo=r(_ke," (PoolFormer model)"),_ke.forEach(t),EJo=i(Te),p0=n(Te,"LI",{});var uke=s(p0);i_e=n(uke,"STRONG",{});var Xut=s(i_e);CJo=r(Xut,"regnet"),Xut.forEach(t),wJo=r(uke," \u2014 "),IX=n(uke,"A",{href:!0});var zut=s(IX);AJo=r(zut,"RegNetForImageClassification"),zut.forEach(t),yJo=r(uke," (RegNet model)"),uke.forEach(t),LJo=i(Te),_0=n(Te,"LI",{});var bke=s(_0);d_e=n(bke,"STRONG",{});var Wut=s(d_e);xJo=r(Wut,"resnet"),Wut.forEach(t),$Jo=r(bke," \u2014 "),NX=n(bke,"A",{href:!0});var Qut=s(NX);kJo=r(Qut,"ResNetForImageClassification"),Qut.forEach(t),SJo=r(bke," (ResNet model)"),bke.forEach(t),RJo=i(Te),u0=n(Te,"LI",{});var vke=s(u0);c_e=n(vke,"STRONG",{});var Hut=s(c_e);PJo=r(Hut,"segformer"),Hut.forEach(t),BJo=r(vke," \u2014 "),qX=n(vke,"A",{href:!0});var Uut=s(qX);IJo=r(Uut,"SegformerForImageClassification"),Uut.forEach(t),NJo=r(vke," (SegFormer model)"),vke.forEach(t),qJo=i(Te),b0=n(Te,"LI",{});var Fke=s(b0);f_e=n(Fke,"STRONG",{});var Jut=s(f_e);jJo=r(Jut,"swin"),Jut.forEach(t),DJo=r(Fke," \u2014 "),jX=n(Fke,"A",{href:!0});var Yut=s(jX);GJo=r(Yut,"SwinForImageClassification"),Yut.forEach(t),OJo=r(Fke," (Swin model)"),Fke.forEach(t),VJo=i(Te),v0=n(Te,"LI",{});var Tke=s(v0);m_e=n(Tke,"STRONG",{});var Kut=s(m_e);XJo=r(Kut,"van"),Kut.forEach(t),zJo=r(Tke," \u2014 "),DX=n(Tke,"A",{href:!0});var Zut=s(DX);WJo=r(Zut,"VanForImageClassification"),Zut.forEach(t),QJo=r(Tke," (VAN model)"),Tke.forEach(t),HJo=i(Te),F0=n(Te,"LI",{});var Mke=s(F0);g_e=n(Mke,"STRONG",{});var e2t=s(g_e);UJo=r(e2t,"vit"),e2t.forEach(t),JJo=r(Mke," \u2014 "),GX=n(Mke,"A",{href:!0});var o2t=s(GX);YJo=r(o2t,"ViTForImageClassification"),o2t.forEach(t),KJo=r(Mke," (ViT model)"),Mke.forEach(t),Te.forEach(t),ZJo=i(ma),T0=n(ma,"P",{});var Eke=s(T0);eYo=r(Eke,"The model is set in evaluation mode by default using "),h_e=n(Eke,"CODE",{});var r2t=s(h_e);oYo=r(r2t,"model.eval()"),r2t.forEach(t),rYo=r(Eke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p_e=n(Eke,"CODE",{});var t2t=s(p_e);tYo=r(t2t,"model.train()"),t2t.forEach(t),Eke.forEach(t),aYo=i(ma),T(M0.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),Vqe=i(f),ld=n(f,"H2",{class:!0});var QDe=s(ld);E0=n(QDe,"A",{id:!0,class:!0,href:!0});var a2t=s(E0);__e=n(a2t,"SPAN",{});var n2t=s(__e);T(lL.$$.fragment,n2t),n2t.forEach(t),a2t.forEach(t),nYo=i(QDe),u_e=n(QDe,"SPAN",{});var s2t=s(u_e);sYo=r(s2t,"AutoModelForVision2Seq"),s2t.forEach(t),QDe.forEach(t),Xqe=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(iL.$$.fragment,el),lYo=i(el),id=n(el,"P",{});var VZ=s(id);iYo=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OX=n(VZ,"A",{href:!0});var l2t=s(OX);dYo=r(l2t,"from_pretrained()"),l2t.forEach(t),cYo=r(VZ," class method or the "),VX=n(VZ,"A",{href:!0});var i2t=s(VX);fYo=r(i2t,"from_config()"),i2t.forEach(t),mYo=r(VZ,` class
method.`),VZ.forEach(t),gYo=i(el),dL=n(el,"P",{});var HDe=s(dL);hYo=r(HDe,"This class cannot be instantiated directly using "),b_e=n(HDe,"CODE",{});var d2t=s(b_e);pYo=r(d2t,"__init__()"),d2t.forEach(t),_Yo=r(HDe," (throws an error)."),HDe.forEach(t),uYo=i(el),_t=n(el,"DIV",{class:!0});var t6=s(_t);T(cL.$$.fragment,t6),bYo=i(t6),v_e=n(t6,"P",{});var c2t=s(v_e);vYo=r(c2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),c2t.forEach(t),FYo=i(t6),dd=n(t6,"P",{});var XZ=s(dd);TYo=r(XZ,`Note:
Loading a model from its configuration file does `),F_e=n(XZ,"STRONG",{});var f2t=s(F_e);MYo=r(f2t,"not"),f2t.forEach(t),EYo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(XZ,"A",{href:!0});var m2t=s(XX);CYo=r(m2t,"from_pretrained()"),m2t.forEach(t),wYo=r(XZ," to load the model weights."),XZ.forEach(t),AYo=i(t6),T(C0.$$.fragment,t6),t6.forEach(t),yYo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(fL.$$.fragment,ga),LYo=i(ga),T_e=n(ga,"P",{});var g2t=s(T_e);xYo=r(g2t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),g2t.forEach(t),$Yo=i(ga),Da=n(ga,"P",{});var a6=s(Da);kYo=r(a6,"The model class to instantiate is selected based on the "),M_e=n(a6,"CODE",{});var h2t=s(M_e);SYo=r(h2t,"model_type"),h2t.forEach(t),RYo=r(a6,` property of the config object (either
passed as an argument or loaded from `),E_e=n(a6,"CODE",{});var p2t=s(E_e);PYo=r(p2t,"pretrained_model_name_or_path"),p2t.forEach(t),BYo=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=n(a6,"CODE",{});var _2t=s(C_e);IYo=r(_2t,"pretrained_model_name_or_path"),_2t.forEach(t),NYo=r(a6,":"),a6.forEach(t),qYo=i(ga),w_e=n(ga,"UL",{});var u2t=s(w_e);w0=n(u2t,"LI",{});var Cke=s(w0);A_e=n(Cke,"STRONG",{});var b2t=s(A_e);jYo=r(b2t,"vision-encoder-decoder"),b2t.forEach(t),DYo=r(Cke," \u2014 "),zX=n(Cke,"A",{href:!0});var v2t=s(zX);GYo=r(v2t,"VisionEncoderDecoderModel"),v2t.forEach(t),OYo=r(Cke," (Vision Encoder decoder model)"),Cke.forEach(t),u2t.forEach(t),VYo=i(ga),A0=n(ga,"P",{});var wke=s(A0);XYo=r(wke,"The model is set in evaluation mode by default using "),y_e=n(wke,"CODE",{});var F2t=s(y_e);zYo=r(F2t,"model.eval()"),F2t.forEach(t),WYo=r(wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L_e=n(wke,"CODE",{});var T2t=s(L_e);QYo=r(T2t,"model.train()"),T2t.forEach(t),wke.forEach(t),HYo=i(ga),T(y0.$$.fragment,ga),ga.forEach(t),el.forEach(t),zqe=i(f),cd=n(f,"H2",{class:!0});var UDe=s(cd);L0=n(UDe,"A",{id:!0,class:!0,href:!0});var M2t=s(L0);x_e=n(M2t,"SPAN",{});var E2t=s(x_e);T(mL.$$.fragment,E2t),E2t.forEach(t),M2t.forEach(t),UYo=i(UDe),$_e=n(UDe,"SPAN",{});var C2t=s($_e);JYo=r(C2t,"AutoModelForAudioClassification"),C2t.forEach(t),UDe.forEach(t),Wqe=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(gL.$$.fragment,ol),YYo=i(ol),fd=n(ol,"P",{});var zZ=s(fd);KYo=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),WX=n(zZ,"A",{href:!0});var w2t=s(WX);ZYo=r(w2t,"from_pretrained()"),w2t.forEach(t),eKo=r(zZ," class method or the "),QX=n(zZ,"A",{href:!0});var A2t=s(QX);oKo=r(A2t,"from_config()"),A2t.forEach(t),rKo=r(zZ,` class
method.`),zZ.forEach(t),tKo=i(ol),hL=n(ol,"P",{});var JDe=s(hL);aKo=r(JDe,"This class cannot be instantiated directly using "),k_e=n(JDe,"CODE",{});var y2t=s(k_e);nKo=r(y2t,"__init__()"),y2t.forEach(t),sKo=r(JDe," (throws an error)."),JDe.forEach(t),lKo=i(ol),ut=n(ol,"DIV",{class:!0});var n6=s(ut);T(pL.$$.fragment,n6),iKo=i(n6),S_e=n(n6,"P",{});var L2t=s(S_e);dKo=r(L2t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),L2t.forEach(t),cKo=i(n6),md=n(n6,"P",{});var WZ=s(md);fKo=r(WZ,`Note:
Loading a model from its configuration file does `),R_e=n(WZ,"STRONG",{});var x2t=s(R_e);mKo=r(x2t,"not"),x2t.forEach(t),gKo=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=n(WZ,"A",{href:!0});var $2t=s(HX);hKo=r($2t,"from_pretrained()"),$2t.forEach(t),pKo=r(WZ," to load the model weights."),WZ.forEach(t),_Ko=i(n6),T(x0.$$.fragment,n6),n6.forEach(t),uKo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(_L.$$.fragment,ha),bKo=i(ha),P_e=n(ha,"P",{});var k2t=s(P_e);vKo=r(k2t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),k2t.forEach(t),FKo=i(ha),Ga=n(ha,"P",{});var s6=s(Ga);TKo=r(s6,"The model class to instantiate is selected based on the "),B_e=n(s6,"CODE",{});var S2t=s(B_e);MKo=r(S2t,"model_type"),S2t.forEach(t),EKo=r(s6,` property of the config object (either
passed as an argument or loaded from `),I_e=n(s6,"CODE",{});var R2t=s(I_e);CKo=r(R2t,"pretrained_model_name_or_path"),R2t.forEach(t),wKo=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N_e=n(s6,"CODE",{});var P2t=s(N_e);AKo=r(P2t,"pretrained_model_name_or_path"),P2t.forEach(t),yKo=r(s6,":"),s6.forEach(t),LKo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);$0=n(Oe,"LI",{});var Ake=s($0);q_e=n(Ake,"STRONG",{});var B2t=s(q_e);xKo=r(B2t,"data2vec-audio"),B2t.forEach(t),$Ko=r(Ake," \u2014 "),UX=n(Ake,"A",{href:!0});var I2t=s(UX);kKo=r(I2t,"Data2VecAudioForSequenceClassification"),I2t.forEach(t),SKo=r(Ake," (Data2VecAudio model)"),Ake.forEach(t),RKo=i(Oe),k0=n(Oe,"LI",{});var yke=s(k0);j_e=n(yke,"STRONG",{});var N2t=s(j_e);PKo=r(N2t,"hubert"),N2t.forEach(t),BKo=r(yke," \u2014 "),JX=n(yke,"A",{href:!0});var q2t=s(JX);IKo=r(q2t,"HubertForSequenceClassification"),q2t.forEach(t),NKo=r(yke," (Hubert model)"),yke.forEach(t),qKo=i(Oe),S0=n(Oe,"LI",{});var Lke=s(S0);D_e=n(Lke,"STRONG",{});var j2t=s(D_e);jKo=r(j2t,"sew"),j2t.forEach(t),DKo=r(Lke," \u2014 "),YX=n(Lke,"A",{href:!0});var D2t=s(YX);GKo=r(D2t,"SEWForSequenceClassification"),D2t.forEach(t),OKo=r(Lke," (SEW model)"),Lke.forEach(t),VKo=i(Oe),R0=n(Oe,"LI",{});var xke=s(R0);G_e=n(xke,"STRONG",{});var G2t=s(G_e);XKo=r(G2t,"sew-d"),G2t.forEach(t),zKo=r(xke," \u2014 "),KX=n(xke,"A",{href:!0});var O2t=s(KX);WKo=r(O2t,"SEWDForSequenceClassification"),O2t.forEach(t),QKo=r(xke," (SEW-D model)"),xke.forEach(t),HKo=i(Oe),P0=n(Oe,"LI",{});var $ke=s(P0);O_e=n($ke,"STRONG",{});var V2t=s(O_e);UKo=r(V2t,"unispeech"),V2t.forEach(t),JKo=r($ke," \u2014 "),ZX=n($ke,"A",{href:!0});var X2t=s(ZX);YKo=r(X2t,"UniSpeechForSequenceClassification"),X2t.forEach(t),KKo=r($ke," (UniSpeech model)"),$ke.forEach(t),ZKo=i(Oe),B0=n(Oe,"LI",{});var kke=s(B0);V_e=n(kke,"STRONG",{});var z2t=s(V_e);eZo=r(z2t,"unispeech-sat"),z2t.forEach(t),oZo=r(kke," \u2014 "),ez=n(kke,"A",{href:!0});var W2t=s(ez);rZo=r(W2t,"UniSpeechSatForSequenceClassification"),W2t.forEach(t),tZo=r(kke," (UniSpeechSat model)"),kke.forEach(t),aZo=i(Oe),I0=n(Oe,"LI",{});var Ske=s(I0);X_e=n(Ske,"STRONG",{});var Q2t=s(X_e);nZo=r(Q2t,"wav2vec2"),Q2t.forEach(t),sZo=r(Ske," \u2014 "),oz=n(Ske,"A",{href:!0});var H2t=s(oz);lZo=r(H2t,"Wav2Vec2ForSequenceClassification"),H2t.forEach(t),iZo=r(Ske," (Wav2Vec2 model)"),Ske.forEach(t),dZo=i(Oe),N0=n(Oe,"LI",{});var Rke=s(N0);z_e=n(Rke,"STRONG",{});var U2t=s(z_e);cZo=r(U2t,"wav2vec2-conformer"),U2t.forEach(t),fZo=r(Rke," \u2014 "),rz=n(Rke,"A",{href:!0});var J2t=s(rz);mZo=r(J2t,"Wav2Vec2ConformerForSequenceClassification"),J2t.forEach(t),gZo=r(Rke," (Wav2Vec2-Conformer model)"),Rke.forEach(t),hZo=i(Oe),q0=n(Oe,"LI",{});var Pke=s(q0);W_e=n(Pke,"STRONG",{});var Y2t=s(W_e);pZo=r(Y2t,"wavlm"),Y2t.forEach(t),_Zo=r(Pke," \u2014 "),tz=n(Pke,"A",{href:!0});var K2t=s(tz);uZo=r(K2t,"WavLMForSequenceClassification"),K2t.forEach(t),bZo=r(Pke," (WavLM model)"),Pke.forEach(t),Oe.forEach(t),vZo=i(ha),j0=n(ha,"P",{});var Bke=s(j0);FZo=r(Bke,"The model is set in evaluation mode by default using "),Q_e=n(Bke,"CODE",{});var Z2t=s(Q_e);TZo=r(Z2t,"model.eval()"),Z2t.forEach(t),MZo=r(Bke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H_e=n(Bke,"CODE",{});var e1t=s(H_e);EZo=r(e1t,"model.train()"),e1t.forEach(t),Bke.forEach(t),CZo=i(ha),T(D0.$$.fragment,ha),ha.forEach(t),ol.forEach(t),Qqe=i(f),gd=n(f,"H2",{class:!0});var YDe=s(gd);G0=n(YDe,"A",{id:!0,class:!0,href:!0});var o1t=s(G0);U_e=n(o1t,"SPAN",{});var r1t=s(U_e);T(uL.$$.fragment,r1t),r1t.forEach(t),o1t.forEach(t),wZo=i(YDe),J_e=n(YDe,"SPAN",{});var t1t=s(J_e);AZo=r(t1t,"AutoModelForAudioFrameClassification"),t1t.forEach(t),YDe.forEach(t),Hqe=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(bL.$$.fragment,rl),yZo=i(rl),hd=n(rl,"P",{});var QZ=s(hd);LZo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),az=n(QZ,"A",{href:!0});var a1t=s(az);xZo=r(a1t,"from_pretrained()"),a1t.forEach(t),$Zo=r(QZ," class method or the "),nz=n(QZ,"A",{href:!0});var n1t=s(nz);kZo=r(n1t,"from_config()"),n1t.forEach(t),SZo=r(QZ,` class
method.`),QZ.forEach(t),RZo=i(rl),vL=n(rl,"P",{});var KDe=s(vL);PZo=r(KDe,"This class cannot be instantiated directly using "),Y_e=n(KDe,"CODE",{});var s1t=s(Y_e);BZo=r(s1t,"__init__()"),s1t.forEach(t),IZo=r(KDe," (throws an error)."),KDe.forEach(t),NZo=i(rl),bt=n(rl,"DIV",{class:!0});var l6=s(bt);T(FL.$$.fragment,l6),qZo=i(l6),K_e=n(l6,"P",{});var l1t=s(K_e);jZo=r(l1t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),l1t.forEach(t),DZo=i(l6),pd=n(l6,"P",{});var HZ=s(pd);GZo=r(HZ,`Note:
Loading a model from its configuration file does `),Z_e=n(HZ,"STRONG",{});var i1t=s(Z_e);OZo=r(i1t,"not"),i1t.forEach(t),VZo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=n(HZ,"A",{href:!0});var d1t=s(sz);XZo=r(d1t,"from_pretrained()"),d1t.forEach(t),zZo=r(HZ," to load the model weights."),HZ.forEach(t),WZo=i(l6),T(O0.$$.fragment,l6),l6.forEach(t),QZo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(TL.$$.fragment,pa),HZo=i(pa),eue=n(pa,"P",{});var c1t=s(eue);UZo=r(c1t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),c1t.forEach(t),JZo=i(pa),Oa=n(pa,"P",{});var i6=s(Oa);YZo=r(i6,"The model class to instantiate is selected based on the "),oue=n(i6,"CODE",{});var f1t=s(oue);KZo=r(f1t,"model_type"),f1t.forEach(t),ZZo=r(i6,` property of the config object (either
passed as an argument or loaded from `),rue=n(i6,"CODE",{});var m1t=s(rue);eer=r(m1t,"pretrained_model_name_or_path"),m1t.forEach(t),oer=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=n(i6,"CODE",{});var g1t=s(tue);rer=r(g1t,"pretrained_model_name_or_path"),g1t.forEach(t),ter=r(i6,":"),i6.forEach(t),aer=i(pa),Kr=n(pa,"UL",{});var tl=s(Kr);V0=n(tl,"LI",{});var Ike=s(V0);aue=n(Ike,"STRONG",{});var h1t=s(aue);ner=r(h1t,"data2vec-audio"),h1t.forEach(t),ser=r(Ike," \u2014 "),lz=n(Ike,"A",{href:!0});var p1t=s(lz);ler=r(p1t,"Data2VecAudioForAudioFrameClassification"),p1t.forEach(t),ier=r(Ike," (Data2VecAudio model)"),Ike.forEach(t),der=i(tl),X0=n(tl,"LI",{});var Nke=s(X0);nue=n(Nke,"STRONG",{});var _1t=s(nue);cer=r(_1t,"unispeech-sat"),_1t.forEach(t),fer=r(Nke," \u2014 "),iz=n(Nke,"A",{href:!0});var u1t=s(iz);mer=r(u1t,"UniSpeechSatForAudioFrameClassification"),u1t.forEach(t),ger=r(Nke," (UniSpeechSat model)"),Nke.forEach(t),her=i(tl),z0=n(tl,"LI",{});var qke=s(z0);sue=n(qke,"STRONG",{});var b1t=s(sue);per=r(b1t,"wav2vec2"),b1t.forEach(t),_er=r(qke," \u2014 "),dz=n(qke,"A",{href:!0});var v1t=s(dz);uer=r(v1t,"Wav2Vec2ForAudioFrameClassification"),v1t.forEach(t),ber=r(qke," (Wav2Vec2 model)"),qke.forEach(t),ver=i(tl),W0=n(tl,"LI",{});var jke=s(W0);lue=n(jke,"STRONG",{});var F1t=s(lue);Fer=r(F1t,"wav2vec2-conformer"),F1t.forEach(t),Ter=r(jke," \u2014 "),cz=n(jke,"A",{href:!0});var T1t=s(cz);Mer=r(T1t,"Wav2Vec2ConformerForAudioFrameClassification"),T1t.forEach(t),Eer=r(jke," (Wav2Vec2-Conformer model)"),jke.forEach(t),Cer=i(tl),Q0=n(tl,"LI",{});var Dke=s(Q0);iue=n(Dke,"STRONG",{});var M1t=s(iue);wer=r(M1t,"wavlm"),M1t.forEach(t),Aer=r(Dke," \u2014 "),fz=n(Dke,"A",{href:!0});var E1t=s(fz);yer=r(E1t,"WavLMForAudioFrameClassification"),E1t.forEach(t),Ler=r(Dke," (WavLM model)"),Dke.forEach(t),tl.forEach(t),xer=i(pa),H0=n(pa,"P",{});var Gke=s(H0);$er=r(Gke,"The model is set in evaluation mode by default using "),due=n(Gke,"CODE",{});var C1t=s(due);ker=r(C1t,"model.eval()"),C1t.forEach(t),Ser=r(Gke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=n(Gke,"CODE",{});var w1t=s(cue);Rer=r(w1t,"model.train()"),w1t.forEach(t),Gke.forEach(t),Per=i(pa),T(U0.$$.fragment,pa),pa.forEach(t),rl.forEach(t),Uqe=i(f),_d=n(f,"H2",{class:!0});var ZDe=s(_d);J0=n(ZDe,"A",{id:!0,class:!0,href:!0});var A1t=s(J0);fue=n(A1t,"SPAN",{});var y1t=s(fue);T(ML.$$.fragment,y1t),y1t.forEach(t),A1t.forEach(t),Ber=i(ZDe),mue=n(ZDe,"SPAN",{});var L1t=s(mue);Ier=r(L1t,"AutoModelForCTC"),L1t.forEach(t),ZDe.forEach(t),Jqe=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(EL.$$.fragment,al),Ner=i(al),ud=n(al,"P",{});var UZ=s(ud);qer=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),mz=n(UZ,"A",{href:!0});var x1t=s(mz);jer=r(x1t,"from_pretrained()"),x1t.forEach(t),Der=r(UZ," class method or the "),gz=n(UZ,"A",{href:!0});var $1t=s(gz);Ger=r($1t,"from_config()"),$1t.forEach(t),Oer=r(UZ,` class
method.`),UZ.forEach(t),Ver=i(al),CL=n(al,"P",{});var eGe=s(CL);Xer=r(eGe,"This class cannot be instantiated directly using "),gue=n(eGe,"CODE",{});var k1t=s(gue);zer=r(k1t,"__init__()"),k1t.forEach(t),Wer=r(eGe," (throws an error)."),eGe.forEach(t),Qer=i(al),vt=n(al,"DIV",{class:!0});var d6=s(vt);T(wL.$$.fragment,d6),Her=i(d6),hue=n(d6,"P",{});var S1t=s(hue);Uer=r(S1t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),S1t.forEach(t),Jer=i(d6),bd=n(d6,"P",{});var JZ=s(bd);Yer=r(JZ,`Note:
Loading a model from its configuration file does `),pue=n(JZ,"STRONG",{});var R1t=s(pue);Ker=r(R1t,"not"),R1t.forEach(t),Zer=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=n(JZ,"A",{href:!0});var P1t=s(hz);eor=r(P1t,"from_pretrained()"),P1t.forEach(t),oor=r(JZ," to load the model weights."),JZ.forEach(t),ror=i(d6),T(Y0.$$.fragment,d6),d6.forEach(t),tor=i(al),mo=n(al,"DIV",{class:!0});var _a=s(mo);T(AL.$$.fragment,_a),aor=i(_a),_ue=n(_a,"P",{});var B1t=s(_ue);nor=r(B1t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),B1t.forEach(t),sor=i(_a),Va=n(_a,"P",{});var c6=s(Va);lor=r(c6,"The model class to instantiate is selected based on the "),uue=n(c6,"CODE",{});var I1t=s(uue);ior=r(I1t,"model_type"),I1t.forEach(t),dor=r(c6,` property of the config object (either
passed as an argument or loaded from `),bue=n(c6,"CODE",{});var N1t=s(bue);cor=r(N1t,"pretrained_model_name_or_path"),N1t.forEach(t),mor=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=n(c6,"CODE",{});var q1t=s(vue);gor=r(q1t,"pretrained_model_name_or_path"),q1t.forEach(t),hor=r(c6,":"),c6.forEach(t),por=i(_a),Se=n(_a,"UL",{});var Ve=s(Se);K0=n(Ve,"LI",{});var Oke=s(K0);Fue=n(Oke,"STRONG",{});var j1t=s(Fue);_or=r(j1t,"data2vec-audio"),j1t.forEach(t),uor=r(Oke," \u2014 "),pz=n(Oke,"A",{href:!0});var D1t=s(pz);bor=r(D1t,"Data2VecAudioForCTC"),D1t.forEach(t),vor=r(Oke," (Data2VecAudio model)"),Oke.forEach(t),For=i(Ve),Z0=n(Ve,"LI",{});var Vke=s(Z0);Tue=n(Vke,"STRONG",{});var G1t=s(Tue);Tor=r(G1t,"hubert"),G1t.forEach(t),Mor=r(Vke," \u2014 "),_z=n(Vke,"A",{href:!0});var O1t=s(_z);Eor=r(O1t,"HubertForCTC"),O1t.forEach(t),Cor=r(Vke," (Hubert model)"),Vke.forEach(t),wor=i(Ve),eF=n(Ve,"LI",{});var Xke=s(eF);Mue=n(Xke,"STRONG",{});var V1t=s(Mue);Aor=r(V1t,"sew"),V1t.forEach(t),yor=r(Xke," \u2014 "),uz=n(Xke,"A",{href:!0});var X1t=s(uz);Lor=r(X1t,"SEWForCTC"),X1t.forEach(t),xor=r(Xke," (SEW model)"),Xke.forEach(t),$or=i(Ve),oF=n(Ve,"LI",{});var zke=s(oF);Eue=n(zke,"STRONG",{});var z1t=s(Eue);kor=r(z1t,"sew-d"),z1t.forEach(t),Sor=r(zke," \u2014 "),bz=n(zke,"A",{href:!0});var W1t=s(bz);Ror=r(W1t,"SEWDForCTC"),W1t.forEach(t),Por=r(zke," (SEW-D model)"),zke.forEach(t),Bor=i(Ve),rF=n(Ve,"LI",{});var Wke=s(rF);Cue=n(Wke,"STRONG",{});var Q1t=s(Cue);Ior=r(Q1t,"unispeech"),Q1t.forEach(t),Nor=r(Wke," \u2014 "),vz=n(Wke,"A",{href:!0});var H1t=s(vz);qor=r(H1t,"UniSpeechForCTC"),H1t.forEach(t),jor=r(Wke," (UniSpeech model)"),Wke.forEach(t),Dor=i(Ve),tF=n(Ve,"LI",{});var Qke=s(tF);wue=n(Qke,"STRONG",{});var U1t=s(wue);Gor=r(U1t,"unispeech-sat"),U1t.forEach(t),Oor=r(Qke," \u2014 "),Fz=n(Qke,"A",{href:!0});var J1t=s(Fz);Vor=r(J1t,"UniSpeechSatForCTC"),J1t.forEach(t),Xor=r(Qke," (UniSpeechSat model)"),Qke.forEach(t),zor=i(Ve),aF=n(Ve,"LI",{});var Hke=s(aF);Aue=n(Hke,"STRONG",{});var Y1t=s(Aue);Wor=r(Y1t,"wav2vec2"),Y1t.forEach(t),Qor=r(Hke," \u2014 "),Tz=n(Hke,"A",{href:!0});var K1t=s(Tz);Hor=r(K1t,"Wav2Vec2ForCTC"),K1t.forEach(t),Uor=r(Hke," (Wav2Vec2 model)"),Hke.forEach(t),Jor=i(Ve),nF=n(Ve,"LI",{});var Uke=s(nF);yue=n(Uke,"STRONG",{});var Z1t=s(yue);Yor=r(Z1t,"wav2vec2-conformer"),Z1t.forEach(t),Kor=r(Uke," \u2014 "),Mz=n(Uke,"A",{href:!0});var ebt=s(Mz);Zor=r(ebt,"Wav2Vec2ConformerForCTC"),ebt.forEach(t),err=r(Uke," (Wav2Vec2-Conformer model)"),Uke.forEach(t),orr=i(Ve),sF=n(Ve,"LI",{});var Jke=s(sF);Lue=n(Jke,"STRONG",{});var obt=s(Lue);rrr=r(obt,"wavlm"),obt.forEach(t),trr=r(Jke," \u2014 "),Ez=n(Jke,"A",{href:!0});var rbt=s(Ez);arr=r(rbt,"WavLMForCTC"),rbt.forEach(t),nrr=r(Jke," (WavLM model)"),Jke.forEach(t),Ve.forEach(t),srr=i(_a),lF=n(_a,"P",{});var Yke=s(lF);lrr=r(Yke,"The model is set in evaluation mode by default using "),xue=n(Yke,"CODE",{});var tbt=s(xue);irr=r(tbt,"model.eval()"),tbt.forEach(t),drr=r(Yke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ue=n(Yke,"CODE",{});var abt=s($ue);crr=r(abt,"model.train()"),abt.forEach(t),Yke.forEach(t),frr=i(_a),T(iF.$$.fragment,_a),_a.forEach(t),al.forEach(t),Yqe=i(f),vd=n(f,"H2",{class:!0});var oGe=s(vd);dF=n(oGe,"A",{id:!0,class:!0,href:!0});var nbt=s(dF);kue=n(nbt,"SPAN",{});var sbt=s(kue);T(yL.$$.fragment,sbt),sbt.forEach(t),nbt.forEach(t),mrr=i(oGe),Sue=n(oGe,"SPAN",{});var lbt=s(Sue);grr=r(lbt,"AutoModelForSpeechSeq2Seq"),lbt.forEach(t),oGe.forEach(t),Kqe=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(LL.$$.fragment,nl),hrr=i(nl),Fd=n(nl,"P",{});var YZ=s(Fd);prr=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Cz=n(YZ,"A",{href:!0});var ibt=s(Cz);_rr=r(ibt,"from_pretrained()"),ibt.forEach(t),urr=r(YZ," class method or the "),wz=n(YZ,"A",{href:!0});var dbt=s(wz);brr=r(dbt,"from_config()"),dbt.forEach(t),vrr=r(YZ,` class
method.`),YZ.forEach(t),Frr=i(nl),xL=n(nl,"P",{});var rGe=s(xL);Trr=r(rGe,"This class cannot be instantiated directly using "),Rue=n(rGe,"CODE",{});var cbt=s(Rue);Mrr=r(cbt,"__init__()"),cbt.forEach(t),Err=r(rGe," (throws an error)."),rGe.forEach(t),Crr=i(nl),Ft=n(nl,"DIV",{class:!0});var f6=s(Ft);T($L.$$.fragment,f6),wrr=i(f6),Pue=n(f6,"P",{});var fbt=s(Pue);Arr=r(fbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),fbt.forEach(t),yrr=i(f6),Td=n(f6,"P",{});var KZ=s(Td);Lrr=r(KZ,`Note:
Loading a model from its configuration file does `),Bue=n(KZ,"STRONG",{});var mbt=s(Bue);xrr=r(mbt,"not"),mbt.forEach(t),$rr=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=n(KZ,"A",{href:!0});var gbt=s(Az);krr=r(gbt,"from_pretrained()"),gbt.forEach(t),Srr=r(KZ," to load the model weights."),KZ.forEach(t),Rrr=i(f6),T(cF.$$.fragment,f6),f6.forEach(t),Prr=i(nl),go=n(nl,"DIV",{class:!0});var ua=s(go);T(kL.$$.fragment,ua),Brr=i(ua),Iue=n(ua,"P",{});var hbt=s(Iue);Irr=r(hbt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),hbt.forEach(t),Nrr=i(ua),Xa=n(ua,"P",{});var m6=s(Xa);qrr=r(m6,"The model class to instantiate is selected based on the "),Nue=n(m6,"CODE",{});var pbt=s(Nue);jrr=r(pbt,"model_type"),pbt.forEach(t),Drr=r(m6,` property of the config object (either
passed as an argument or loaded from `),que=n(m6,"CODE",{});var _bt=s(que);Grr=r(_bt,"pretrained_model_name_or_path"),_bt.forEach(t),Orr=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=n(m6,"CODE",{});var ubt=s(jue);Vrr=r(ubt,"pretrained_model_name_or_path"),ubt.forEach(t),Xrr=r(m6,":"),m6.forEach(t),zrr=i(ua),SL=n(ua,"UL",{});var tGe=s(SL);fF=n(tGe,"LI",{});var Kke=s(fF);Due=n(Kke,"STRONG",{});var bbt=s(Due);Wrr=r(bbt,"speech-encoder-decoder"),bbt.forEach(t),Qrr=r(Kke," \u2014 "),yz=n(Kke,"A",{href:!0});var vbt=s(yz);Hrr=r(vbt,"SpeechEncoderDecoderModel"),vbt.forEach(t),Urr=r(Kke," (Speech Encoder decoder model)"),Kke.forEach(t),Jrr=i(tGe),mF=n(tGe,"LI",{});var Zke=s(mF);Gue=n(Zke,"STRONG",{});var Fbt=s(Gue);Yrr=r(Fbt,"speech_to_text"),Fbt.forEach(t),Krr=r(Zke," \u2014 "),Lz=n(Zke,"A",{href:!0});var Tbt=s(Lz);Zrr=r(Tbt,"Speech2TextForConditionalGeneration"),Tbt.forEach(t),etr=r(Zke," (Speech2Text model)"),Zke.forEach(t),tGe.forEach(t),otr=i(ua),gF=n(ua,"P",{});var eSe=s(gF);rtr=r(eSe,"The model is set in evaluation mode by default using "),Oue=n(eSe,"CODE",{});var Mbt=s(Oue);ttr=r(Mbt,"model.eval()"),Mbt.forEach(t),atr=r(eSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=n(eSe,"CODE",{});var Ebt=s(Vue);ntr=r(Ebt,"model.train()"),Ebt.forEach(t),eSe.forEach(t),str=i(ua),T(hF.$$.fragment,ua),ua.forEach(t),nl.forEach(t),Zqe=i(f),Md=n(f,"H2",{class:!0});var aGe=s(Md);pF=n(aGe,"A",{id:!0,class:!0,href:!0});var Cbt=s(pF);Xue=n(Cbt,"SPAN",{});var wbt=s(Xue);T(RL.$$.fragment,wbt),wbt.forEach(t),Cbt.forEach(t),ltr=i(aGe),zue=n(aGe,"SPAN",{});var Abt=s(zue);itr=r(Abt,"AutoModelForAudioXVector"),Abt.forEach(t),aGe.forEach(t),eje=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(PL.$$.fragment,sl),dtr=i(sl),Ed=n(sl,"P",{});var ZZ=s(Ed);ctr=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),xz=n(ZZ,"A",{href:!0});var ybt=s(xz);ftr=r(ybt,"from_pretrained()"),ybt.forEach(t),mtr=r(ZZ," class method or the "),$z=n(ZZ,"A",{href:!0});var Lbt=s($z);gtr=r(Lbt,"from_config()"),Lbt.forEach(t),htr=r(ZZ,` class
method.`),ZZ.forEach(t),ptr=i(sl),BL=n(sl,"P",{});var nGe=s(BL);_tr=r(nGe,"This class cannot be instantiated directly using "),Wue=n(nGe,"CODE",{});var xbt=s(Wue);utr=r(xbt,"__init__()"),xbt.forEach(t),btr=r(nGe," (throws an error)."),nGe.forEach(t),vtr=i(sl),Tt=n(sl,"DIV",{class:!0});var g6=s(Tt);T(IL.$$.fragment,g6),Ftr=i(g6),Que=n(g6,"P",{});var $bt=s(Que);Ttr=r($bt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),$bt.forEach(t),Mtr=i(g6),Cd=n(g6,"P",{});var eee=s(Cd);Etr=r(eee,`Note:
Loading a model from its configuration file does `),Hue=n(eee,"STRONG",{});var kbt=s(Hue);Ctr=r(kbt,"not"),kbt.forEach(t),wtr=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=n(eee,"A",{href:!0});var Sbt=s(kz);Atr=r(Sbt,"from_pretrained()"),Sbt.forEach(t),ytr=r(eee," to load the model weights."),eee.forEach(t),Ltr=i(g6),T(_F.$$.fragment,g6),g6.forEach(t),xtr=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(NL.$$.fragment,ba),$tr=i(ba),Uue=n(ba,"P",{});var Rbt=s(Uue);ktr=r(Rbt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Rbt.forEach(t),Str=i(ba),za=n(ba,"P",{});var h6=s(za);Rtr=r(h6,"The model class to instantiate is selected based on the "),Jue=n(h6,"CODE",{});var Pbt=s(Jue);Ptr=r(Pbt,"model_type"),Pbt.forEach(t),Btr=r(h6,` property of the config object (either
passed as an argument or loaded from `),Yue=n(h6,"CODE",{});var Bbt=s(Yue);Itr=r(Bbt,"pretrained_model_name_or_path"),Bbt.forEach(t),Ntr=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=n(h6,"CODE",{});var Ibt=s(Kue);qtr=r(Ibt,"pretrained_model_name_or_path"),Ibt.forEach(t),jtr=r(h6,":"),h6.forEach(t),Dtr=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);uF=n(ll,"LI",{});var oSe=s(uF);Zue=n(oSe,"STRONG",{});var Nbt=s(Zue);Gtr=r(Nbt,"data2vec-audio"),Nbt.forEach(t),Otr=r(oSe," \u2014 "),Sz=n(oSe,"A",{href:!0});var qbt=s(Sz);Vtr=r(qbt,"Data2VecAudioForXVector"),qbt.forEach(t),Xtr=r(oSe," (Data2VecAudio model)"),oSe.forEach(t),ztr=i(ll),bF=n(ll,"LI",{});var rSe=s(bF);e2e=n(rSe,"STRONG",{});var jbt=s(e2e);Wtr=r(jbt,"unispeech-sat"),jbt.forEach(t),Qtr=r(rSe," \u2014 "),Rz=n(rSe,"A",{href:!0});var Dbt=s(Rz);Htr=r(Dbt,"UniSpeechSatForXVector"),Dbt.forEach(t),Utr=r(rSe," (UniSpeechSat model)"),rSe.forEach(t),Jtr=i(ll),vF=n(ll,"LI",{});var tSe=s(vF);o2e=n(tSe,"STRONG",{});var Gbt=s(o2e);Ytr=r(Gbt,"wav2vec2"),Gbt.forEach(t),Ktr=r(tSe," \u2014 "),Pz=n(tSe,"A",{href:!0});var Obt=s(Pz);Ztr=r(Obt,"Wav2Vec2ForXVector"),Obt.forEach(t),ear=r(tSe," (Wav2Vec2 model)"),tSe.forEach(t),oar=i(ll),FF=n(ll,"LI",{});var aSe=s(FF);r2e=n(aSe,"STRONG",{});var Vbt=s(r2e);rar=r(Vbt,"wav2vec2-conformer"),Vbt.forEach(t),tar=r(aSe," \u2014 "),Bz=n(aSe,"A",{href:!0});var Xbt=s(Bz);aar=r(Xbt,"Wav2Vec2ConformerForXVector"),Xbt.forEach(t),nar=r(aSe," (Wav2Vec2-Conformer model)"),aSe.forEach(t),sar=i(ll),TF=n(ll,"LI",{});var nSe=s(TF);t2e=n(nSe,"STRONG",{});var zbt=s(t2e);lar=r(zbt,"wavlm"),zbt.forEach(t),iar=r(nSe," \u2014 "),Iz=n(nSe,"A",{href:!0});var Wbt=s(Iz);dar=r(Wbt,"WavLMForXVector"),Wbt.forEach(t),car=r(nSe," (WavLM model)"),nSe.forEach(t),ll.forEach(t),far=i(ba),MF=n(ba,"P",{});var sSe=s(MF);mar=r(sSe,"The model is set in evaluation mode by default using "),a2e=n(sSe,"CODE",{});var Qbt=s(a2e);gar=r(Qbt,"model.eval()"),Qbt.forEach(t),har=r(sSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n2e=n(sSe,"CODE",{});var Hbt=s(n2e);par=r(Hbt,"model.train()"),Hbt.forEach(t),sSe.forEach(t),_ar=i(ba),T(EF.$$.fragment,ba),ba.forEach(t),sl.forEach(t),oje=i(f),wd=n(f,"H2",{class:!0});var sGe=s(wd);CF=n(sGe,"A",{id:!0,class:!0,href:!0});var Ubt=s(CF);s2e=n(Ubt,"SPAN",{});var Jbt=s(s2e);T(qL.$$.fragment,Jbt),Jbt.forEach(t),Ubt.forEach(t),uar=i(sGe),l2e=n(sGe,"SPAN",{});var Ybt=s(l2e);bar=r(Ybt,"AutoModelForMaskedImageModeling"),Ybt.forEach(t),sGe.forEach(t),rje=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(jL.$$.fragment,il),Far=i(il),Ad=n(il,"P",{});var oee=s(Ad);Tar=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Nz=n(oee,"A",{href:!0});var Kbt=s(Nz);Mar=r(Kbt,"from_pretrained()"),Kbt.forEach(t),Ear=r(oee," class method or the "),qz=n(oee,"A",{href:!0});var Zbt=s(qz);Car=r(Zbt,"from_config()"),Zbt.forEach(t),war=r(oee,` class
method.`),oee.forEach(t),Aar=i(il),DL=n(il,"P",{});var lGe=s(DL);yar=r(lGe,"This class cannot be instantiated directly using "),i2e=n(lGe,"CODE",{});var evt=s(i2e);Lar=r(evt,"__init__()"),evt.forEach(t),xar=r(lGe," (throws an error)."),lGe.forEach(t),$ar=i(il),Mt=n(il,"DIV",{class:!0});var p6=s(Mt);T(GL.$$.fragment,p6),kar=i(p6),d2e=n(p6,"P",{});var ovt=s(d2e);Sar=r(ovt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),ovt.forEach(t),Rar=i(p6),yd=n(p6,"P",{});var ree=s(yd);Par=r(ree,`Note:
Loading a model from its configuration file does `),c2e=n(ree,"STRONG",{});var rvt=s(c2e);Bar=r(rvt,"not"),rvt.forEach(t),Iar=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=n(ree,"A",{href:!0});var tvt=s(jz);Nar=r(tvt,"from_pretrained()"),tvt.forEach(t),qar=r(ree," to load the model weights."),ree.forEach(t),jar=i(p6),T(wF.$$.fragment,p6),p6.forEach(t),Dar=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(OL.$$.fragment,va),Gar=i(va),f2e=n(va,"P",{});var avt=s(f2e);Oar=r(avt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),avt.forEach(t),Var=i(va),Wa=n(va,"P",{});var _6=s(Wa);Xar=r(_6,"The model class to instantiate is selected based on the "),m2e=n(_6,"CODE",{});var nvt=s(m2e);zar=r(nvt,"model_type"),nvt.forEach(t),War=r(_6,` property of the config object (either
passed as an argument or loaded from `),g2e=n(_6,"CODE",{});var svt=s(g2e);Qar=r(svt,"pretrained_model_name_or_path"),svt.forEach(t),Har=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h2e=n(_6,"CODE",{});var lvt=s(h2e);Uar=r(lvt,"pretrained_model_name_or_path"),lvt.forEach(t),Jar=r(_6,":"),_6.forEach(t),Yar=i(va),Ld=n(va,"UL",{});var tee=s(Ld);AF=n(tee,"LI",{});var lSe=s(AF);p2e=n(lSe,"STRONG",{});var ivt=s(p2e);Kar=r(ivt,"deit"),ivt.forEach(t),Zar=r(lSe," \u2014 "),Dz=n(lSe,"A",{href:!0});var dvt=s(Dz);enr=r(dvt,"DeiTForMaskedImageModeling"),dvt.forEach(t),onr=r(lSe," (DeiT model)"),lSe.forEach(t),rnr=i(tee),yF=n(tee,"LI",{});var iSe=s(yF);_2e=n(iSe,"STRONG",{});var cvt=s(_2e);tnr=r(cvt,"swin"),cvt.forEach(t),anr=r(iSe," \u2014 "),Gz=n(iSe,"A",{href:!0});var fvt=s(Gz);nnr=r(fvt,"SwinForMaskedImageModeling"),fvt.forEach(t),snr=r(iSe," (Swin model)"),iSe.forEach(t),lnr=i(tee),LF=n(tee,"LI",{});var dSe=s(LF);u2e=n(dSe,"STRONG",{});var mvt=s(u2e);inr=r(mvt,"vit"),mvt.forEach(t),dnr=r(dSe," \u2014 "),Oz=n(dSe,"A",{href:!0});var gvt=s(Oz);cnr=r(gvt,"ViTForMaskedImageModeling"),gvt.forEach(t),fnr=r(dSe," (ViT model)"),dSe.forEach(t),tee.forEach(t),mnr=i(va),xF=n(va,"P",{});var cSe=s(xF);gnr=r(cSe,"The model is set in evaluation mode by default using "),b2e=n(cSe,"CODE",{});var hvt=s(b2e);hnr=r(hvt,"model.eval()"),hvt.forEach(t),pnr=r(cSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v2e=n(cSe,"CODE",{});var pvt=s(v2e);_nr=r(pvt,"model.train()"),pvt.forEach(t),cSe.forEach(t),unr=i(va),T($F.$$.fragment,va),va.forEach(t),il.forEach(t),tje=i(f),xd=n(f,"H2",{class:!0});var iGe=s(xd);kF=n(iGe,"A",{id:!0,class:!0,href:!0});var _vt=s(kF);F2e=n(_vt,"SPAN",{});var uvt=s(F2e);T(VL.$$.fragment,uvt),uvt.forEach(t),_vt.forEach(t),bnr=i(iGe),T2e=n(iGe,"SPAN",{});var bvt=s(T2e);vnr=r(bvt,"AutoModelForObjectDetection"),bvt.forEach(t),iGe.forEach(t),aje=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(XL.$$.fragment,dl),Fnr=i(dl),$d=n(dl,"P",{});var aee=s($d);Tnr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Vz=n(aee,"A",{href:!0});var vvt=s(Vz);Mnr=r(vvt,"from_pretrained()"),vvt.forEach(t),Enr=r(aee," class method or the "),Xz=n(aee,"A",{href:!0});var Fvt=s(Xz);Cnr=r(Fvt,"from_config()"),Fvt.forEach(t),wnr=r(aee,` class
method.`),aee.forEach(t),Anr=i(dl),zL=n(dl,"P",{});var dGe=s(zL);ynr=r(dGe,"This class cannot be instantiated directly using "),M2e=n(dGe,"CODE",{});var Tvt=s(M2e);Lnr=r(Tvt,"__init__()"),Tvt.forEach(t),xnr=r(dGe," (throws an error)."),dGe.forEach(t),$nr=i(dl),Et=n(dl,"DIV",{class:!0});var u6=s(Et);T(WL.$$.fragment,u6),knr=i(u6),E2e=n(u6,"P",{});var Mvt=s(E2e);Snr=r(Mvt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Mvt.forEach(t),Rnr=i(u6),kd=n(u6,"P",{});var nee=s(kd);Pnr=r(nee,`Note:
Loading a model from its configuration file does `),C2e=n(nee,"STRONG",{});var Evt=s(C2e);Bnr=r(Evt,"not"),Evt.forEach(t),Inr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=n(nee,"A",{href:!0});var Cvt=s(zz);Nnr=r(Cvt,"from_pretrained()"),Cvt.forEach(t),qnr=r(nee," to load the model weights."),nee.forEach(t),jnr=i(u6),T(SF.$$.fragment,u6),u6.forEach(t),Dnr=i(dl),_o=n(dl,"DIV",{class:!0});var Fa=s(_o);T(QL.$$.fragment,Fa),Gnr=i(Fa),w2e=n(Fa,"P",{});var wvt=s(w2e);Onr=r(wvt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),wvt.forEach(t),Vnr=i(Fa),Qa=n(Fa,"P",{});var b6=s(Qa);Xnr=r(b6,"The model class to instantiate is selected based on the "),A2e=n(b6,"CODE",{});var Avt=s(A2e);znr=r(Avt,"model_type"),Avt.forEach(t),Wnr=r(b6,` property of the config object (either
passed as an argument or loaded from `),y2e=n(b6,"CODE",{});var yvt=s(y2e);Qnr=r(yvt,"pretrained_model_name_or_path"),yvt.forEach(t),Hnr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=n(b6,"CODE",{});var Lvt=s(L2e);Unr=r(Lvt,"pretrained_model_name_or_path"),Lvt.forEach(t),Jnr=r(b6,":"),b6.forEach(t),Ynr=i(Fa),HL=n(Fa,"UL",{});var cGe=s(HL);RF=n(cGe,"LI",{});var fSe=s(RF);x2e=n(fSe,"STRONG",{});var xvt=s(x2e);Knr=r(xvt,"detr"),xvt.forEach(t),Znr=r(fSe," \u2014 "),Wz=n(fSe,"A",{href:!0});var $vt=s(Wz);esr=r($vt,"DetrForObjectDetection"),$vt.forEach(t),osr=r(fSe," (DETR model)"),fSe.forEach(t),rsr=i(cGe),PF=n(cGe,"LI",{});var mSe=s(PF);$2e=n(mSe,"STRONG",{});var kvt=s($2e);tsr=r(kvt,"yolos"),kvt.forEach(t),asr=r(mSe," \u2014 "),Qz=n(mSe,"A",{href:!0});var Svt=s(Qz);nsr=r(Svt,"YolosForObjectDetection"),Svt.forEach(t),ssr=r(mSe," (YOLOS model)"),mSe.forEach(t),cGe.forEach(t),lsr=i(Fa),BF=n(Fa,"P",{});var gSe=s(BF);isr=r(gSe,"The model is set in evaluation mode by default using "),k2e=n(gSe,"CODE",{});var Rvt=s(k2e);dsr=r(Rvt,"model.eval()"),Rvt.forEach(t),csr=r(gSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S2e=n(gSe,"CODE",{});var Pvt=s(S2e);fsr=r(Pvt,"model.train()"),Pvt.forEach(t),gSe.forEach(t),msr=i(Fa),T(IF.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),nje=i(f),Sd=n(f,"H2",{class:!0});var fGe=s(Sd);NF=n(fGe,"A",{id:!0,class:!0,href:!0});var Bvt=s(NF);R2e=n(Bvt,"SPAN",{});var Ivt=s(R2e);T(UL.$$.fragment,Ivt),Ivt.forEach(t),Bvt.forEach(t),gsr=i(fGe),P2e=n(fGe,"SPAN",{});var Nvt=s(P2e);hsr=r(Nvt,"AutoModelForImageSegmentation"),Nvt.forEach(t),fGe.forEach(t),sje=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(JL.$$.fragment,cl),psr=i(cl),Rd=n(cl,"P",{});var see=s(Rd);_sr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Hz=n(see,"A",{href:!0});var qvt=s(Hz);usr=r(qvt,"from_pretrained()"),qvt.forEach(t),bsr=r(see," class method or the "),Uz=n(see,"A",{href:!0});var jvt=s(Uz);vsr=r(jvt,"from_config()"),jvt.forEach(t),Fsr=r(see,` class
method.`),see.forEach(t),Tsr=i(cl),YL=n(cl,"P",{});var mGe=s(YL);Msr=r(mGe,"This class cannot be instantiated directly using "),B2e=n(mGe,"CODE",{});var Dvt=s(B2e);Esr=r(Dvt,"__init__()"),Dvt.forEach(t),Csr=r(mGe," (throws an error)."),mGe.forEach(t),wsr=i(cl),Ct=n(cl,"DIV",{class:!0});var v6=s(Ct);T(KL.$$.fragment,v6),Asr=i(v6),I2e=n(v6,"P",{});var Gvt=s(I2e);ysr=r(Gvt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Gvt.forEach(t),Lsr=i(v6),Pd=n(v6,"P",{});var lee=s(Pd);xsr=r(lee,`Note:
Loading a model from its configuration file does `),N2e=n(lee,"STRONG",{});var Ovt=s(N2e);$sr=r(Ovt,"not"),Ovt.forEach(t),ksr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(lee,"A",{href:!0});var Vvt=s(Jz);Ssr=r(Vvt,"from_pretrained()"),Vvt.forEach(t),Rsr=r(lee," to load the model weights."),lee.forEach(t),Psr=i(v6),T(qF.$$.fragment,v6),v6.forEach(t),Bsr=i(cl),uo=n(cl,"DIV",{class:!0});var Ta=s(uo);T(ZL.$$.fragment,Ta),Isr=i(Ta),q2e=n(Ta,"P",{});var Xvt=s(q2e);Nsr=r(Xvt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Xvt.forEach(t),qsr=i(Ta),Ha=n(Ta,"P",{});var F6=s(Ha);jsr=r(F6,"The model class to instantiate is selected based on the "),j2e=n(F6,"CODE",{});var zvt=s(j2e);Dsr=r(zvt,"model_type"),zvt.forEach(t),Gsr=r(F6,` property of the config object (either
passed as an argument or loaded from `),D2e=n(F6,"CODE",{});var Wvt=s(D2e);Osr=r(Wvt,"pretrained_model_name_or_path"),Wvt.forEach(t),Vsr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G2e=n(F6,"CODE",{});var Qvt=s(G2e);Xsr=r(Qvt,"pretrained_model_name_or_path"),Qvt.forEach(t),zsr=r(F6,":"),F6.forEach(t),Wsr=i(Ta),O2e=n(Ta,"UL",{});var Hvt=s(O2e);jF=n(Hvt,"LI",{});var hSe=s(jF);V2e=n(hSe,"STRONG",{});var Uvt=s(V2e);Qsr=r(Uvt,"detr"),Uvt.forEach(t),Hsr=r(hSe," \u2014 "),Yz=n(hSe,"A",{href:!0});var Jvt=s(Yz);Usr=r(Jvt,"DetrForSegmentation"),Jvt.forEach(t),Jsr=r(hSe," (DETR model)"),hSe.forEach(t),Hvt.forEach(t),Ysr=i(Ta),DF=n(Ta,"P",{});var pSe=s(DF);Ksr=r(pSe,"The model is set in evaluation mode by default using "),X2e=n(pSe,"CODE",{});var Yvt=s(X2e);Zsr=r(Yvt,"model.eval()"),Yvt.forEach(t),elr=r(pSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z2e=n(pSe,"CODE",{});var Kvt=s(z2e);olr=r(Kvt,"model.train()"),Kvt.forEach(t),pSe.forEach(t),rlr=i(Ta),T(GF.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),lje=i(f),Bd=n(f,"H2",{class:!0});var gGe=s(Bd);OF=n(gGe,"A",{id:!0,class:!0,href:!0});var Zvt=s(OF);W2e=n(Zvt,"SPAN",{});var e3t=s(W2e);T(e8.$$.fragment,e3t),e3t.forEach(t),Zvt.forEach(t),tlr=i(gGe),Q2e=n(gGe,"SPAN",{});var o3t=s(Q2e);alr=r(o3t,"AutoModelForSemanticSegmentation"),o3t.forEach(t),gGe.forEach(t),ije=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(o8.$$.fragment,fl),nlr=i(fl),Id=n(fl,"P",{});var iee=s(Id);slr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Kz=n(iee,"A",{href:!0});var r3t=s(Kz);llr=r(r3t,"from_pretrained()"),r3t.forEach(t),ilr=r(iee," class method or the "),Zz=n(iee,"A",{href:!0});var t3t=s(Zz);dlr=r(t3t,"from_config()"),t3t.forEach(t),clr=r(iee,` class
method.`),iee.forEach(t),flr=i(fl),r8=n(fl,"P",{});var hGe=s(r8);mlr=r(hGe,"This class cannot be instantiated directly using "),H2e=n(hGe,"CODE",{});var a3t=s(H2e);glr=r(a3t,"__init__()"),a3t.forEach(t),hlr=r(hGe," (throws an error)."),hGe.forEach(t),plr=i(fl),wt=n(fl,"DIV",{class:!0});var T6=s(wt);T(t8.$$.fragment,T6),_lr=i(T6),U2e=n(T6,"P",{});var n3t=s(U2e);ulr=r(n3t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),n3t.forEach(t),blr=i(T6),Nd=n(T6,"P",{});var dee=s(Nd);vlr=r(dee,`Note:
Loading a model from its configuration file does `),J2e=n(dee,"STRONG",{});var s3t=s(J2e);Flr=r(s3t,"not"),s3t.forEach(t),Tlr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=n(dee,"A",{href:!0});var l3t=s(eW);Mlr=r(l3t,"from_pretrained()"),l3t.forEach(t),Elr=r(dee," to load the model weights."),dee.forEach(t),Clr=i(T6),T(VF.$$.fragment,T6),T6.forEach(t),wlr=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(a8.$$.fragment,Ma),Alr=i(Ma),Y2e=n(Ma,"P",{});var i3t=s(Y2e);ylr=r(i3t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),i3t.forEach(t),Llr=i(Ma),Ua=n(Ma,"P",{});var M6=s(Ua);xlr=r(M6,"The model class to instantiate is selected based on the "),K2e=n(M6,"CODE",{});var d3t=s(K2e);$lr=r(d3t,"model_type"),d3t.forEach(t),klr=r(M6,` property of the config object (either
passed as an argument or loaded from `),Z2e=n(M6,"CODE",{});var c3t=s(Z2e);Slr=r(c3t,"pretrained_model_name_or_path"),c3t.forEach(t),Rlr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=n(M6,"CODE",{});var f3t=s(e1e);Plr=r(f3t,"pretrained_model_name_or_path"),f3t.forEach(t),Blr=r(M6,":"),M6.forEach(t),Ilr=i(Ma),Ja=n(Ma,"UL",{});var E6=s(Ja);XF=n(E6,"LI",{});var _Se=s(XF);o1e=n(_Se,"STRONG",{});var m3t=s(o1e);Nlr=r(m3t,"beit"),m3t.forEach(t),qlr=r(_Se," \u2014 "),oW=n(_Se,"A",{href:!0});var g3t=s(oW);jlr=r(g3t,"BeitForSemanticSegmentation"),g3t.forEach(t),Dlr=r(_Se," (BEiT model)"),_Se.forEach(t),Glr=i(E6),zF=n(E6,"LI",{});var uSe=s(zF);r1e=n(uSe,"STRONG",{});var h3t=s(r1e);Olr=r(h3t,"data2vec-vision"),h3t.forEach(t),Vlr=r(uSe," \u2014 "),rW=n(uSe,"A",{href:!0});var p3t=s(rW);Xlr=r(p3t,"Data2VecVisionForSemanticSegmentation"),p3t.forEach(t),zlr=r(uSe," (Data2VecVision model)"),uSe.forEach(t),Wlr=i(E6),WF=n(E6,"LI",{});var bSe=s(WF);t1e=n(bSe,"STRONG",{});var _3t=s(t1e);Qlr=r(_3t,"dpt"),_3t.forEach(t),Hlr=r(bSe," \u2014 "),tW=n(bSe,"A",{href:!0});var u3t=s(tW);Ulr=r(u3t,"DPTForSemanticSegmentation"),u3t.forEach(t),Jlr=r(bSe," (DPT model)"),bSe.forEach(t),Ylr=i(E6),QF=n(E6,"LI",{});var vSe=s(QF);a1e=n(vSe,"STRONG",{});var b3t=s(a1e);Klr=r(b3t,"segformer"),b3t.forEach(t),Zlr=r(vSe," \u2014 "),aW=n(vSe,"A",{href:!0});var v3t=s(aW);eir=r(v3t,"SegformerForSemanticSegmentation"),v3t.forEach(t),oir=r(vSe," (SegFormer model)"),vSe.forEach(t),E6.forEach(t),rir=i(Ma),HF=n(Ma,"P",{});var FSe=s(HF);tir=r(FSe,"The model is set in evaluation mode by default using "),n1e=n(FSe,"CODE",{});var F3t=s(n1e);air=r(F3t,"model.eval()"),F3t.forEach(t),nir=r(FSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s1e=n(FSe,"CODE",{});var T3t=s(s1e);sir=r(T3t,"model.train()"),T3t.forEach(t),FSe.forEach(t),lir=i(Ma),T(UF.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),dje=i(f),qd=n(f,"H2",{class:!0});var pGe=s(qd);JF=n(pGe,"A",{id:!0,class:!0,href:!0});var M3t=s(JF);l1e=n(M3t,"SPAN",{});var E3t=s(l1e);T(n8.$$.fragment,E3t),E3t.forEach(t),M3t.forEach(t),iir=i(pGe),i1e=n(pGe,"SPAN",{});var C3t=s(i1e);dir=r(C3t,"AutoModelForInstanceSegmentation"),C3t.forEach(t),pGe.forEach(t),cje=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(s8.$$.fragment,ml),cir=i(ml),jd=n(ml,"P",{});var cee=s(jd);fir=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),nW=n(cee,"A",{href:!0});var w3t=s(nW);mir=r(w3t,"from_pretrained()"),w3t.forEach(t),gir=r(cee," class method or the "),sW=n(cee,"A",{href:!0});var A3t=s(sW);hir=r(A3t,"from_config()"),A3t.forEach(t),pir=r(cee,` class
method.`),cee.forEach(t),_ir=i(ml),l8=n(ml,"P",{});var _Ge=s(l8);uir=r(_Ge,"This class cannot be instantiated directly using "),d1e=n(_Ge,"CODE",{});var y3t=s(d1e);bir=r(y3t,"__init__()"),y3t.forEach(t),vir=r(_Ge," (throws an error)."),_Ge.forEach(t),Fir=i(ml),At=n(ml,"DIV",{class:!0});var C6=s(At);T(i8.$$.fragment,C6),Tir=i(C6),c1e=n(C6,"P",{});var L3t=s(c1e);Mir=r(L3t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),L3t.forEach(t),Eir=i(C6),Dd=n(C6,"P",{});var fee=s(Dd);Cir=r(fee,`Note:
Loading a model from its configuration file does `),f1e=n(fee,"STRONG",{});var x3t=s(f1e);wir=r(x3t,"not"),x3t.forEach(t),Air=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(fee,"A",{href:!0});var $3t=s(lW);yir=r($3t,"from_pretrained()"),$3t.forEach(t),Lir=r(fee," to load the model weights."),fee.forEach(t),xir=i(C6),T(YF.$$.fragment,C6),C6.forEach(t),$ir=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(d8.$$.fragment,Ea),kir=i(Ea),m1e=n(Ea,"P",{});var k3t=s(m1e);Sir=r(k3t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),k3t.forEach(t),Rir=i(Ea),Ya=n(Ea,"P",{});var w6=s(Ya);Pir=r(w6,"The model class to instantiate is selected based on the "),g1e=n(w6,"CODE",{});var S3t=s(g1e);Bir=r(S3t,"model_type"),S3t.forEach(t),Iir=r(w6,` property of the config object (either
passed as an argument or loaded from `),h1e=n(w6,"CODE",{});var R3t=s(h1e);Nir=r(R3t,"pretrained_model_name_or_path"),R3t.forEach(t),qir=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p1e=n(w6,"CODE",{});var P3t=s(p1e);jir=r(P3t,"pretrained_model_name_or_path"),P3t.forEach(t),Dir=r(w6,":"),w6.forEach(t),Gir=i(Ea),_1e=n(Ea,"UL",{});var B3t=s(_1e);KF=n(B3t,"LI",{});var TSe=s(KF);u1e=n(TSe,"STRONG",{});var I3t=s(u1e);Oir=r(I3t,"maskformer"),I3t.forEach(t),Vir=r(TSe," \u2014 "),iW=n(TSe,"A",{href:!0});var N3t=s(iW);Xir=r(N3t,"MaskFormerForInstanceSegmentation"),N3t.forEach(t),zir=r(TSe," (MaskFormer model)"),TSe.forEach(t),B3t.forEach(t),Wir=i(Ea),ZF=n(Ea,"P",{});var MSe=s(ZF);Qir=r(MSe,"The model is set in evaluation mode by default using "),b1e=n(MSe,"CODE",{});var q3t=s(b1e);Hir=r(q3t,"model.eval()"),q3t.forEach(t),Uir=r(MSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v1e=n(MSe,"CODE",{});var j3t=s(v1e);Jir=r(j3t,"model.train()"),j3t.forEach(t),MSe.forEach(t),Yir=i(Ea),T(eT.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),fje=i(f),Gd=n(f,"H2",{class:!0});var uGe=s(Gd);oT=n(uGe,"A",{id:!0,class:!0,href:!0});var D3t=s(oT);F1e=n(D3t,"SPAN",{});var G3t=s(F1e);T(c8.$$.fragment,G3t),G3t.forEach(t),D3t.forEach(t),Kir=i(uGe),T1e=n(uGe,"SPAN",{});var O3t=s(T1e);Zir=r(O3t,"TFAutoModel"),O3t.forEach(t),uGe.forEach(t),mje=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(f8.$$.fragment,gl),edr=i(gl),Od=n(gl,"P",{});var mee=s(Od);odr=r(mee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dW=n(mee,"A",{href:!0});var V3t=s(dW);rdr=r(V3t,"from_pretrained()"),V3t.forEach(t),tdr=r(mee," class method or the "),cW=n(mee,"A",{href:!0});var X3t=s(cW);adr=r(X3t,"from_config()"),X3t.forEach(t),ndr=r(mee,` class
method.`),mee.forEach(t),sdr=i(gl),m8=n(gl,"P",{});var bGe=s(m8);ldr=r(bGe,"This class cannot be instantiated directly using "),M1e=n(bGe,"CODE",{});var z3t=s(M1e);idr=r(z3t,"__init__()"),z3t.forEach(t),ddr=r(bGe," (throws an error)."),bGe.forEach(t),cdr=i(gl),yt=n(gl,"DIV",{class:!0});var A6=s(yt);T(g8.$$.fragment,A6),fdr=i(A6),E1e=n(A6,"P",{});var W3t=s(E1e);mdr=r(W3t,"Instantiates one of the base model classes of the library from a configuration."),W3t.forEach(t),gdr=i(A6),Vd=n(A6,"P",{});var gee=s(Vd);hdr=r(gee,`Note:
Loading a model from its configuration file does `),C1e=n(gee,"STRONG",{});var Q3t=s(C1e);pdr=r(Q3t,"not"),Q3t.forEach(t),_dr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(gee,"A",{href:!0});var H3t=s(fW);udr=r(H3t,"from_pretrained()"),H3t.forEach(t),bdr=r(gee," to load the model weights."),gee.forEach(t),vdr=i(A6),T(rT.$$.fragment,A6),A6.forEach(t),Fdr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(h8.$$.fragment,hl),Tdr=i(hl),w1e=n(hl,"P",{});var U3t=s(w1e);Mdr=r(U3t,"Instantiate one of the base model classes of the library from a pretrained model."),U3t.forEach(t),Edr=i(hl),Ka=n(hl,"P",{});var y6=s(Ka);Cdr=r(y6,"The model class to instantiate is selected based on the "),A1e=n(y6,"CODE",{});var J3t=s(A1e);wdr=r(J3t,"model_type"),J3t.forEach(t),Adr=r(y6,` property of the config object (either
passed as an argument or loaded from `),y1e=n(y6,"CODE",{});var Y3t=s(y1e);ydr=r(Y3t,"pretrained_model_name_or_path"),Y3t.forEach(t),Ldr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=n(y6,"CODE",{});var K3t=s(L1e);xdr=r(K3t,"pretrained_model_name_or_path"),K3t.forEach(t),$dr=r(y6,":"),y6.forEach(t),kdr=i(hl),q=n(hl,"UL",{});var D=s(q);tT=n(D,"LI",{});var ESe=s(tT);x1e=n(ESe,"STRONG",{});var Z3t=s(x1e);Sdr=r(Z3t,"albert"),Z3t.forEach(t),Rdr=r(ESe," \u2014 "),mW=n(ESe,"A",{href:!0});var e0t=s(mW);Pdr=r(e0t,"TFAlbertModel"),e0t.forEach(t),Bdr=r(ESe," (ALBERT model)"),ESe.forEach(t),Idr=i(D),aT=n(D,"LI",{});var CSe=s(aT);$1e=n(CSe,"STRONG",{});var o0t=s($1e);Ndr=r(o0t,"bart"),o0t.forEach(t),qdr=r(CSe," \u2014 "),gW=n(CSe,"A",{href:!0});var r0t=s(gW);jdr=r(r0t,"TFBartModel"),r0t.forEach(t),Ddr=r(CSe," (BART model)"),CSe.forEach(t),Gdr=i(D),nT=n(D,"LI",{});var wSe=s(nT);k1e=n(wSe,"STRONG",{});var t0t=s(k1e);Odr=r(t0t,"bert"),t0t.forEach(t),Vdr=r(wSe," \u2014 "),hW=n(wSe,"A",{href:!0});var a0t=s(hW);Xdr=r(a0t,"TFBertModel"),a0t.forEach(t),zdr=r(wSe," (BERT model)"),wSe.forEach(t),Wdr=i(D),sT=n(D,"LI",{});var ASe=s(sT);S1e=n(ASe,"STRONG",{});var n0t=s(S1e);Qdr=r(n0t,"blenderbot"),n0t.forEach(t),Hdr=r(ASe," \u2014 "),pW=n(ASe,"A",{href:!0});var s0t=s(pW);Udr=r(s0t,"TFBlenderbotModel"),s0t.forEach(t),Jdr=r(ASe," (Blenderbot model)"),ASe.forEach(t),Ydr=i(D),lT=n(D,"LI",{});var ySe=s(lT);R1e=n(ySe,"STRONG",{});var l0t=s(R1e);Kdr=r(l0t,"blenderbot-small"),l0t.forEach(t),Zdr=r(ySe," \u2014 "),_W=n(ySe,"A",{href:!0});var i0t=s(_W);ecr=r(i0t,"TFBlenderbotSmallModel"),i0t.forEach(t),ocr=r(ySe," (BlenderbotSmall model)"),ySe.forEach(t),rcr=i(D),iT=n(D,"LI",{});var LSe=s(iT);P1e=n(LSe,"STRONG",{});var d0t=s(P1e);tcr=r(d0t,"camembert"),d0t.forEach(t),acr=r(LSe," \u2014 "),uW=n(LSe,"A",{href:!0});var c0t=s(uW);ncr=r(c0t,"TFCamembertModel"),c0t.forEach(t),scr=r(LSe," (CamemBERT model)"),LSe.forEach(t),lcr=i(D),dT=n(D,"LI",{});var xSe=s(dT);B1e=n(xSe,"STRONG",{});var f0t=s(B1e);icr=r(f0t,"clip"),f0t.forEach(t),dcr=r(xSe," \u2014 "),bW=n(xSe,"A",{href:!0});var m0t=s(bW);ccr=r(m0t,"TFCLIPModel"),m0t.forEach(t),fcr=r(xSe," (CLIP model)"),xSe.forEach(t),mcr=i(D),cT=n(D,"LI",{});var $Se=s(cT);I1e=n($Se,"STRONG",{});var g0t=s(I1e);gcr=r(g0t,"convbert"),g0t.forEach(t),hcr=r($Se," \u2014 "),vW=n($Se,"A",{href:!0});var h0t=s(vW);pcr=r(h0t,"TFConvBertModel"),h0t.forEach(t),_cr=r($Se," (ConvBERT model)"),$Se.forEach(t),ucr=i(D),fT=n(D,"LI",{});var kSe=s(fT);N1e=n(kSe,"STRONG",{});var p0t=s(N1e);bcr=r(p0t,"convnext"),p0t.forEach(t),vcr=r(kSe," \u2014 "),FW=n(kSe,"A",{href:!0});var _0t=s(FW);Fcr=r(_0t,"TFConvNextModel"),_0t.forEach(t),Tcr=r(kSe," (ConvNext model)"),kSe.forEach(t),Mcr=i(D),mT=n(D,"LI",{});var SSe=s(mT);q1e=n(SSe,"STRONG",{});var u0t=s(q1e);Ecr=r(u0t,"ctrl"),u0t.forEach(t),Ccr=r(SSe," \u2014 "),TW=n(SSe,"A",{href:!0});var b0t=s(TW);wcr=r(b0t,"TFCTRLModel"),b0t.forEach(t),Acr=r(SSe," (CTRL model)"),SSe.forEach(t),ycr=i(D),gT=n(D,"LI",{});var RSe=s(gT);j1e=n(RSe,"STRONG",{});var v0t=s(j1e);Lcr=r(v0t,"data2vec-vision"),v0t.forEach(t),xcr=r(RSe," \u2014 "),MW=n(RSe,"A",{href:!0});var F0t=s(MW);$cr=r(F0t,"TFData2VecVisionModel"),F0t.forEach(t),kcr=r(RSe," (Data2VecVision model)"),RSe.forEach(t),Scr=i(D),hT=n(D,"LI",{});var PSe=s(hT);D1e=n(PSe,"STRONG",{});var T0t=s(D1e);Rcr=r(T0t,"deberta"),T0t.forEach(t),Pcr=r(PSe," \u2014 "),EW=n(PSe,"A",{href:!0});var M0t=s(EW);Bcr=r(M0t,"TFDebertaModel"),M0t.forEach(t),Icr=r(PSe," (DeBERTa model)"),PSe.forEach(t),Ncr=i(D),pT=n(D,"LI",{});var BSe=s(pT);G1e=n(BSe,"STRONG",{});var E0t=s(G1e);qcr=r(E0t,"deberta-v2"),E0t.forEach(t),jcr=r(BSe," \u2014 "),CW=n(BSe,"A",{href:!0});var C0t=s(CW);Dcr=r(C0t,"TFDebertaV2Model"),C0t.forEach(t),Gcr=r(BSe," (DeBERTa-v2 model)"),BSe.forEach(t),Ocr=i(D),_T=n(D,"LI",{});var ISe=s(_T);O1e=n(ISe,"STRONG",{});var w0t=s(O1e);Vcr=r(w0t,"distilbert"),w0t.forEach(t),Xcr=r(ISe," \u2014 "),wW=n(ISe,"A",{href:!0});var A0t=s(wW);zcr=r(A0t,"TFDistilBertModel"),A0t.forEach(t),Wcr=r(ISe," (DistilBERT model)"),ISe.forEach(t),Qcr=i(D),uT=n(D,"LI",{});var NSe=s(uT);V1e=n(NSe,"STRONG",{});var y0t=s(V1e);Hcr=r(y0t,"dpr"),y0t.forEach(t),Ucr=r(NSe," \u2014 "),AW=n(NSe,"A",{href:!0});var L0t=s(AW);Jcr=r(L0t,"TFDPRQuestionEncoder"),L0t.forEach(t),Ycr=r(NSe," (DPR model)"),NSe.forEach(t),Kcr=i(D),bT=n(D,"LI",{});var qSe=s(bT);X1e=n(qSe,"STRONG",{});var x0t=s(X1e);Zcr=r(x0t,"electra"),x0t.forEach(t),efr=r(qSe," \u2014 "),yW=n(qSe,"A",{href:!0});var $0t=s(yW);ofr=r($0t,"TFElectraModel"),$0t.forEach(t),rfr=r(qSe," (ELECTRA model)"),qSe.forEach(t),tfr=i(D),vT=n(D,"LI",{});var jSe=s(vT);z1e=n(jSe,"STRONG",{});var k0t=s(z1e);afr=r(k0t,"flaubert"),k0t.forEach(t),nfr=r(jSe," \u2014 "),LW=n(jSe,"A",{href:!0});var S0t=s(LW);sfr=r(S0t,"TFFlaubertModel"),S0t.forEach(t),lfr=r(jSe," (FlauBERT model)"),jSe.forEach(t),ifr=i(D),Is=n(D,"LI",{});var W$=s(Is);W1e=n(W$,"STRONG",{});var R0t=s(W1e);dfr=r(R0t,"funnel"),R0t.forEach(t),cfr=r(W$," \u2014 "),xW=n(W$,"A",{href:!0});var P0t=s(xW);ffr=r(P0t,"TFFunnelModel"),P0t.forEach(t),mfr=r(W$," or "),$W=n(W$,"A",{href:!0});var B0t=s($W);gfr=r(B0t,"TFFunnelBaseModel"),B0t.forEach(t),hfr=r(W$," (Funnel Transformer model)"),W$.forEach(t),pfr=i(D),FT=n(D,"LI",{});var DSe=s(FT);Q1e=n(DSe,"STRONG",{});var I0t=s(Q1e);_fr=r(I0t,"gpt2"),I0t.forEach(t),ufr=r(DSe," \u2014 "),kW=n(DSe,"A",{href:!0});var N0t=s(kW);bfr=r(N0t,"TFGPT2Model"),N0t.forEach(t),vfr=r(DSe," (OpenAI GPT-2 model)"),DSe.forEach(t),Ffr=i(D),TT=n(D,"LI",{});var GSe=s(TT);H1e=n(GSe,"STRONG",{});var q0t=s(H1e);Tfr=r(q0t,"gptj"),q0t.forEach(t),Mfr=r(GSe," \u2014 "),SW=n(GSe,"A",{href:!0});var j0t=s(SW);Efr=r(j0t,"TFGPTJModel"),j0t.forEach(t),Cfr=r(GSe," (GPT-J model)"),GSe.forEach(t),wfr=i(D),MT=n(D,"LI",{});var OSe=s(MT);U1e=n(OSe,"STRONG",{});var D0t=s(U1e);Afr=r(D0t,"hubert"),D0t.forEach(t),yfr=r(OSe," \u2014 "),RW=n(OSe,"A",{href:!0});var G0t=s(RW);Lfr=r(G0t,"TFHubertModel"),G0t.forEach(t),xfr=r(OSe," (Hubert model)"),OSe.forEach(t),$fr=i(D),ET=n(D,"LI",{});var VSe=s(ET);J1e=n(VSe,"STRONG",{});var O0t=s(J1e);kfr=r(O0t,"layoutlm"),O0t.forEach(t),Sfr=r(VSe," \u2014 "),PW=n(VSe,"A",{href:!0});var V0t=s(PW);Rfr=r(V0t,"TFLayoutLMModel"),V0t.forEach(t),Pfr=r(VSe," (LayoutLM model)"),VSe.forEach(t),Bfr=i(D),CT=n(D,"LI",{});var XSe=s(CT);Y1e=n(XSe,"STRONG",{});var X0t=s(Y1e);Ifr=r(X0t,"led"),X0t.forEach(t),Nfr=r(XSe," \u2014 "),BW=n(XSe,"A",{href:!0});var z0t=s(BW);qfr=r(z0t,"TFLEDModel"),z0t.forEach(t),jfr=r(XSe," (LED model)"),XSe.forEach(t),Dfr=i(D),wT=n(D,"LI",{});var zSe=s(wT);K1e=n(zSe,"STRONG",{});var W0t=s(K1e);Gfr=r(W0t,"longformer"),W0t.forEach(t),Ofr=r(zSe," \u2014 "),IW=n(zSe,"A",{href:!0});var Q0t=s(IW);Vfr=r(Q0t,"TFLongformerModel"),Q0t.forEach(t),Xfr=r(zSe," (Longformer model)"),zSe.forEach(t),zfr=i(D),AT=n(D,"LI",{});var WSe=s(AT);Z1e=n(WSe,"STRONG",{});var H0t=s(Z1e);Wfr=r(H0t,"lxmert"),H0t.forEach(t),Qfr=r(WSe," \u2014 "),NW=n(WSe,"A",{href:!0});var U0t=s(NW);Hfr=r(U0t,"TFLxmertModel"),U0t.forEach(t),Ufr=r(WSe," (LXMERT model)"),WSe.forEach(t),Jfr=i(D),yT=n(D,"LI",{});var QSe=s(yT);ebe=n(QSe,"STRONG",{});var J0t=s(ebe);Yfr=r(J0t,"marian"),J0t.forEach(t),Kfr=r(QSe," \u2014 "),qW=n(QSe,"A",{href:!0});var Y0t=s(qW);Zfr=r(Y0t,"TFMarianModel"),Y0t.forEach(t),emr=r(QSe," (Marian model)"),QSe.forEach(t),omr=i(D),LT=n(D,"LI",{});var HSe=s(LT);obe=n(HSe,"STRONG",{});var K0t=s(obe);rmr=r(K0t,"mbart"),K0t.forEach(t),tmr=r(HSe," \u2014 "),jW=n(HSe,"A",{href:!0});var Z0t=s(jW);amr=r(Z0t,"TFMBartModel"),Z0t.forEach(t),nmr=r(HSe," (mBART model)"),HSe.forEach(t),smr=i(D),xT=n(D,"LI",{});var USe=s(xT);rbe=n(USe,"STRONG",{});var eFt=s(rbe);lmr=r(eFt,"mobilebert"),eFt.forEach(t),imr=r(USe," \u2014 "),DW=n(USe,"A",{href:!0});var oFt=s(DW);dmr=r(oFt,"TFMobileBertModel"),oFt.forEach(t),cmr=r(USe," (MobileBERT model)"),USe.forEach(t),fmr=i(D),$T=n(D,"LI",{});var JSe=s($T);tbe=n(JSe,"STRONG",{});var rFt=s(tbe);mmr=r(rFt,"mpnet"),rFt.forEach(t),gmr=r(JSe," \u2014 "),GW=n(JSe,"A",{href:!0});var tFt=s(GW);hmr=r(tFt,"TFMPNetModel"),tFt.forEach(t),pmr=r(JSe," (MPNet model)"),JSe.forEach(t),_mr=i(D),kT=n(D,"LI",{});var YSe=s(kT);abe=n(YSe,"STRONG",{});var aFt=s(abe);umr=r(aFt,"mt5"),aFt.forEach(t),bmr=r(YSe," \u2014 "),OW=n(YSe,"A",{href:!0});var nFt=s(OW);vmr=r(nFt,"TFMT5Model"),nFt.forEach(t),Fmr=r(YSe," (mT5 model)"),YSe.forEach(t),Tmr=i(D),ST=n(D,"LI",{});var KSe=s(ST);nbe=n(KSe,"STRONG",{});var sFt=s(nbe);Mmr=r(sFt,"openai-gpt"),sFt.forEach(t),Emr=r(KSe," \u2014 "),VW=n(KSe,"A",{href:!0});var lFt=s(VW);Cmr=r(lFt,"TFOpenAIGPTModel"),lFt.forEach(t),wmr=r(KSe," (OpenAI GPT model)"),KSe.forEach(t),Amr=i(D),RT=n(D,"LI",{});var ZSe=s(RT);sbe=n(ZSe,"STRONG",{});var iFt=s(sbe);ymr=r(iFt,"pegasus"),iFt.forEach(t),Lmr=r(ZSe," \u2014 "),XW=n(ZSe,"A",{href:!0});var dFt=s(XW);xmr=r(dFt,"TFPegasusModel"),dFt.forEach(t),$mr=r(ZSe," (Pegasus model)"),ZSe.forEach(t),kmr=i(D),PT=n(D,"LI",{});var eRe=s(PT);lbe=n(eRe,"STRONG",{});var cFt=s(lbe);Smr=r(cFt,"rembert"),cFt.forEach(t),Rmr=r(eRe," \u2014 "),zW=n(eRe,"A",{href:!0});var fFt=s(zW);Pmr=r(fFt,"TFRemBertModel"),fFt.forEach(t),Bmr=r(eRe," (RemBERT model)"),eRe.forEach(t),Imr=i(D),BT=n(D,"LI",{});var oRe=s(BT);ibe=n(oRe,"STRONG",{});var mFt=s(ibe);Nmr=r(mFt,"roberta"),mFt.forEach(t),qmr=r(oRe," \u2014 "),WW=n(oRe,"A",{href:!0});var gFt=s(WW);jmr=r(gFt,"TFRobertaModel"),gFt.forEach(t),Dmr=r(oRe," (RoBERTa model)"),oRe.forEach(t),Gmr=i(D),IT=n(D,"LI",{});var rRe=s(IT);dbe=n(rRe,"STRONG",{});var hFt=s(dbe);Omr=r(hFt,"roformer"),hFt.forEach(t),Vmr=r(rRe," \u2014 "),QW=n(rRe,"A",{href:!0});var pFt=s(QW);Xmr=r(pFt,"TFRoFormerModel"),pFt.forEach(t),zmr=r(rRe," (RoFormer model)"),rRe.forEach(t),Wmr=i(D),NT=n(D,"LI",{});var tRe=s(NT);cbe=n(tRe,"STRONG",{});var _Ft=s(cbe);Qmr=r(_Ft,"speech_to_text"),_Ft.forEach(t),Hmr=r(tRe," \u2014 "),HW=n(tRe,"A",{href:!0});var uFt=s(HW);Umr=r(uFt,"TFSpeech2TextModel"),uFt.forEach(t),Jmr=r(tRe," (Speech2Text model)"),tRe.forEach(t),Ymr=i(D),qT=n(D,"LI",{});var aRe=s(qT);fbe=n(aRe,"STRONG",{});var bFt=s(fbe);Kmr=r(bFt,"swin"),bFt.forEach(t),Zmr=r(aRe," \u2014 "),UW=n(aRe,"A",{href:!0});var vFt=s(UW);egr=r(vFt,"TFSwinModel"),vFt.forEach(t),ogr=r(aRe," (Swin model)"),aRe.forEach(t),rgr=i(D),jT=n(D,"LI",{});var nRe=s(jT);mbe=n(nRe,"STRONG",{});var FFt=s(mbe);tgr=r(FFt,"t5"),FFt.forEach(t),agr=r(nRe," \u2014 "),JW=n(nRe,"A",{href:!0});var TFt=s(JW);ngr=r(TFt,"TFT5Model"),TFt.forEach(t),sgr=r(nRe," (T5 model)"),nRe.forEach(t),lgr=i(D),DT=n(D,"LI",{});var sRe=s(DT);gbe=n(sRe,"STRONG",{});var MFt=s(gbe);igr=r(MFt,"tapas"),MFt.forEach(t),dgr=r(sRe," \u2014 "),YW=n(sRe,"A",{href:!0});var EFt=s(YW);cgr=r(EFt,"TFTapasModel"),EFt.forEach(t),fgr=r(sRe," (TAPAS model)"),sRe.forEach(t),mgr=i(D),GT=n(D,"LI",{});var lRe=s(GT);hbe=n(lRe,"STRONG",{});var CFt=s(hbe);ggr=r(CFt,"transfo-xl"),CFt.forEach(t),hgr=r(lRe," \u2014 "),KW=n(lRe,"A",{href:!0});var wFt=s(KW);pgr=r(wFt,"TFTransfoXLModel"),wFt.forEach(t),_gr=r(lRe," (Transformer-XL model)"),lRe.forEach(t),ugr=i(D),OT=n(D,"LI",{});var iRe=s(OT);pbe=n(iRe,"STRONG",{});var AFt=s(pbe);bgr=r(AFt,"vit"),AFt.forEach(t),vgr=r(iRe," \u2014 "),ZW=n(iRe,"A",{href:!0});var yFt=s(ZW);Fgr=r(yFt,"TFViTModel"),yFt.forEach(t),Tgr=r(iRe," (ViT model)"),iRe.forEach(t),Mgr=i(D),VT=n(D,"LI",{});var dRe=s(VT);_be=n(dRe,"STRONG",{});var LFt=s(_be);Egr=r(LFt,"vit_mae"),LFt.forEach(t),Cgr=r(dRe," \u2014 "),eQ=n(dRe,"A",{href:!0});var xFt=s(eQ);wgr=r(xFt,"TFViTMAEModel"),xFt.forEach(t),Agr=r(dRe," (ViTMAE model)"),dRe.forEach(t),ygr=i(D),XT=n(D,"LI",{});var cRe=s(XT);ube=n(cRe,"STRONG",{});var $Ft=s(ube);Lgr=r($Ft,"wav2vec2"),$Ft.forEach(t),xgr=r(cRe," \u2014 "),oQ=n(cRe,"A",{href:!0});var kFt=s(oQ);$gr=r(kFt,"TFWav2Vec2Model"),kFt.forEach(t),kgr=r(cRe," (Wav2Vec2 model)"),cRe.forEach(t),Sgr=i(D),zT=n(D,"LI",{});var fRe=s(zT);bbe=n(fRe,"STRONG",{});var SFt=s(bbe);Rgr=r(SFt,"xlm"),SFt.forEach(t),Pgr=r(fRe," \u2014 "),rQ=n(fRe,"A",{href:!0});var RFt=s(rQ);Bgr=r(RFt,"TFXLMModel"),RFt.forEach(t),Igr=r(fRe," (XLM model)"),fRe.forEach(t),Ngr=i(D),WT=n(D,"LI",{});var mRe=s(WT);vbe=n(mRe,"STRONG",{});var PFt=s(vbe);qgr=r(PFt,"xlm-roberta"),PFt.forEach(t),jgr=r(mRe," \u2014 "),tQ=n(mRe,"A",{href:!0});var BFt=s(tQ);Dgr=r(BFt,"TFXLMRobertaModel"),BFt.forEach(t),Ggr=r(mRe," (XLM-RoBERTa model)"),mRe.forEach(t),Ogr=i(D),QT=n(D,"LI",{});var gRe=s(QT);Fbe=n(gRe,"STRONG",{});var IFt=s(Fbe);Vgr=r(IFt,"xlnet"),IFt.forEach(t),Xgr=r(gRe," \u2014 "),aQ=n(gRe,"A",{href:!0});var NFt=s(aQ);zgr=r(NFt,"TFXLNetModel"),NFt.forEach(t),Wgr=r(gRe," (XLNet model)"),gRe.forEach(t),D.forEach(t),Qgr=i(hl),T(HT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),gje=i(f),Xd=n(f,"H2",{class:!0});var vGe=s(Xd);UT=n(vGe,"A",{id:!0,class:!0,href:!0});var qFt=s(UT);Tbe=n(qFt,"SPAN",{});var jFt=s(Tbe);T(p8.$$.fragment,jFt),jFt.forEach(t),qFt.forEach(t),Hgr=i(vGe),Mbe=n(vGe,"SPAN",{});var DFt=s(Mbe);Ugr=r(DFt,"TFAutoModelForPreTraining"),DFt.forEach(t),vGe.forEach(t),hje=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(_8.$$.fragment,pl),Jgr=i(pl),zd=n(pl,"P",{});var hee=s(zd);Ygr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nQ=n(hee,"A",{href:!0});var GFt=s(nQ);Kgr=r(GFt,"from_pretrained()"),GFt.forEach(t),Zgr=r(hee," class method or the "),sQ=n(hee,"A",{href:!0});var OFt=s(sQ);ehr=r(OFt,"from_config()"),OFt.forEach(t),ohr=r(hee,` class
method.`),hee.forEach(t),rhr=i(pl),u8=n(pl,"P",{});var FGe=s(u8);thr=r(FGe,"This class cannot be instantiated directly using "),Ebe=n(FGe,"CODE",{});var VFt=s(Ebe);ahr=r(VFt,"__init__()"),VFt.forEach(t),nhr=r(FGe," (throws an error)."),FGe.forEach(t),shr=i(pl),Lt=n(pl,"DIV",{class:!0});var L6=s(Lt);T(b8.$$.fragment,L6),lhr=i(L6),Cbe=n(L6,"P",{});var XFt=s(Cbe);ihr=r(XFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),XFt.forEach(t),dhr=i(L6),Wd=n(L6,"P",{});var pee=s(Wd);chr=r(pee,`Note:
Loading a model from its configuration file does `),wbe=n(pee,"STRONG",{});var zFt=s(wbe);fhr=r(zFt,"not"),zFt.forEach(t),mhr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=n(pee,"A",{href:!0});var WFt=s(lQ);ghr=r(WFt,"from_pretrained()"),WFt.forEach(t),hhr=r(pee," to load the model weights."),pee.forEach(t),phr=i(L6),T(JT.$$.fragment,L6),L6.forEach(t),_hr=i(pl),Ar=n(pl,"DIV",{class:!0});var _l=s(Ar);T(v8.$$.fragment,_l),uhr=i(_l),Abe=n(_l,"P",{});var QFt=s(Abe);bhr=r(QFt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),QFt.forEach(t),vhr=i(_l),Za=n(_l,"P",{});var x6=s(Za);Fhr=r(x6,"The model class to instantiate is selected based on the "),ybe=n(x6,"CODE",{});var HFt=s(ybe);Thr=r(HFt,"model_type"),HFt.forEach(t),Mhr=r(x6,` property of the config object (either
passed as an argument or loaded from `),Lbe=n(x6,"CODE",{});var UFt=s(Lbe);Ehr=r(UFt,"pretrained_model_name_or_path"),UFt.forEach(t),Chr=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=n(x6,"CODE",{});var JFt=s(xbe);whr=r(JFt,"pretrained_model_name_or_path"),JFt.forEach(t),Ahr=r(x6,":"),x6.forEach(t),yhr=i(_l),se=n(_l,"UL",{});var le=s(se);YT=n(le,"LI",{});var hRe=s(YT);$be=n(hRe,"STRONG",{});var YFt=s($be);Lhr=r(YFt,"albert"),YFt.forEach(t),xhr=r(hRe," \u2014 "),iQ=n(hRe,"A",{href:!0});var KFt=s(iQ);$hr=r(KFt,"TFAlbertForPreTraining"),KFt.forEach(t),khr=r(hRe," (ALBERT model)"),hRe.forEach(t),Shr=i(le),KT=n(le,"LI",{});var pRe=s(KT);kbe=n(pRe,"STRONG",{});var ZFt=s(kbe);Rhr=r(ZFt,"bart"),ZFt.forEach(t),Phr=r(pRe," \u2014 "),dQ=n(pRe,"A",{href:!0});var eTt=s(dQ);Bhr=r(eTt,"TFBartForConditionalGeneration"),eTt.forEach(t),Ihr=r(pRe," (BART model)"),pRe.forEach(t),Nhr=i(le),ZT=n(le,"LI",{});var _Re=s(ZT);Sbe=n(_Re,"STRONG",{});var oTt=s(Sbe);qhr=r(oTt,"bert"),oTt.forEach(t),jhr=r(_Re," \u2014 "),cQ=n(_Re,"A",{href:!0});var rTt=s(cQ);Dhr=r(rTt,"TFBertForPreTraining"),rTt.forEach(t),Ghr=r(_Re," (BERT model)"),_Re.forEach(t),Ohr=i(le),e7=n(le,"LI",{});var uRe=s(e7);Rbe=n(uRe,"STRONG",{});var tTt=s(Rbe);Vhr=r(tTt,"camembert"),tTt.forEach(t),Xhr=r(uRe," \u2014 "),fQ=n(uRe,"A",{href:!0});var aTt=s(fQ);zhr=r(aTt,"TFCamembertForMaskedLM"),aTt.forEach(t),Whr=r(uRe," (CamemBERT model)"),uRe.forEach(t),Qhr=i(le),o7=n(le,"LI",{});var bRe=s(o7);Pbe=n(bRe,"STRONG",{});var nTt=s(Pbe);Hhr=r(nTt,"ctrl"),nTt.forEach(t),Uhr=r(bRe," \u2014 "),mQ=n(bRe,"A",{href:!0});var sTt=s(mQ);Jhr=r(sTt,"TFCTRLLMHeadModel"),sTt.forEach(t),Yhr=r(bRe," (CTRL model)"),bRe.forEach(t),Khr=i(le),r7=n(le,"LI",{});var vRe=s(r7);Bbe=n(vRe,"STRONG",{});var lTt=s(Bbe);Zhr=r(lTt,"distilbert"),lTt.forEach(t),epr=r(vRe," \u2014 "),gQ=n(vRe,"A",{href:!0});var iTt=s(gQ);opr=r(iTt,"TFDistilBertForMaskedLM"),iTt.forEach(t),rpr=r(vRe," (DistilBERT model)"),vRe.forEach(t),tpr=i(le),t7=n(le,"LI",{});var FRe=s(t7);Ibe=n(FRe,"STRONG",{});var dTt=s(Ibe);apr=r(dTt,"electra"),dTt.forEach(t),npr=r(FRe," \u2014 "),hQ=n(FRe,"A",{href:!0});var cTt=s(hQ);spr=r(cTt,"TFElectraForPreTraining"),cTt.forEach(t),lpr=r(FRe," (ELECTRA model)"),FRe.forEach(t),ipr=i(le),a7=n(le,"LI",{});var TRe=s(a7);Nbe=n(TRe,"STRONG",{});var fTt=s(Nbe);dpr=r(fTt,"flaubert"),fTt.forEach(t),cpr=r(TRe," \u2014 "),pQ=n(TRe,"A",{href:!0});var mTt=s(pQ);fpr=r(mTt,"TFFlaubertWithLMHeadModel"),mTt.forEach(t),mpr=r(TRe," (FlauBERT model)"),TRe.forEach(t),gpr=i(le),n7=n(le,"LI",{});var MRe=s(n7);qbe=n(MRe,"STRONG",{});var gTt=s(qbe);hpr=r(gTt,"funnel"),gTt.forEach(t),ppr=r(MRe," \u2014 "),_Q=n(MRe,"A",{href:!0});var hTt=s(_Q);_pr=r(hTt,"TFFunnelForPreTraining"),hTt.forEach(t),upr=r(MRe," (Funnel Transformer model)"),MRe.forEach(t),bpr=i(le),s7=n(le,"LI",{});var ERe=s(s7);jbe=n(ERe,"STRONG",{});var pTt=s(jbe);vpr=r(pTt,"gpt2"),pTt.forEach(t),Fpr=r(ERe," \u2014 "),uQ=n(ERe,"A",{href:!0});var _Tt=s(uQ);Tpr=r(_Tt,"TFGPT2LMHeadModel"),_Tt.forEach(t),Mpr=r(ERe," (OpenAI GPT-2 model)"),ERe.forEach(t),Epr=i(le),l7=n(le,"LI",{});var CRe=s(l7);Dbe=n(CRe,"STRONG",{});var uTt=s(Dbe);Cpr=r(uTt,"layoutlm"),uTt.forEach(t),wpr=r(CRe," \u2014 "),bQ=n(CRe,"A",{href:!0});var bTt=s(bQ);Apr=r(bTt,"TFLayoutLMForMaskedLM"),bTt.forEach(t),ypr=r(CRe," (LayoutLM model)"),CRe.forEach(t),Lpr=i(le),i7=n(le,"LI",{});var wRe=s(i7);Gbe=n(wRe,"STRONG",{});var vTt=s(Gbe);xpr=r(vTt,"lxmert"),vTt.forEach(t),$pr=r(wRe," \u2014 "),vQ=n(wRe,"A",{href:!0});var FTt=s(vQ);kpr=r(FTt,"TFLxmertForPreTraining"),FTt.forEach(t),Spr=r(wRe," (LXMERT model)"),wRe.forEach(t),Rpr=i(le),d7=n(le,"LI",{});var ARe=s(d7);Obe=n(ARe,"STRONG",{});var TTt=s(Obe);Ppr=r(TTt,"mobilebert"),TTt.forEach(t),Bpr=r(ARe," \u2014 "),FQ=n(ARe,"A",{href:!0});var MTt=s(FQ);Ipr=r(MTt,"TFMobileBertForPreTraining"),MTt.forEach(t),Npr=r(ARe," (MobileBERT model)"),ARe.forEach(t),qpr=i(le),c7=n(le,"LI",{});var yRe=s(c7);Vbe=n(yRe,"STRONG",{});var ETt=s(Vbe);jpr=r(ETt,"mpnet"),ETt.forEach(t),Dpr=r(yRe," \u2014 "),TQ=n(yRe,"A",{href:!0});var CTt=s(TQ);Gpr=r(CTt,"TFMPNetForMaskedLM"),CTt.forEach(t),Opr=r(yRe," (MPNet model)"),yRe.forEach(t),Vpr=i(le),f7=n(le,"LI",{});var LRe=s(f7);Xbe=n(LRe,"STRONG",{});var wTt=s(Xbe);Xpr=r(wTt,"openai-gpt"),wTt.forEach(t),zpr=r(LRe," \u2014 "),MQ=n(LRe,"A",{href:!0});var ATt=s(MQ);Wpr=r(ATt,"TFOpenAIGPTLMHeadModel"),ATt.forEach(t),Qpr=r(LRe," (OpenAI GPT model)"),LRe.forEach(t),Hpr=i(le),m7=n(le,"LI",{});var xRe=s(m7);zbe=n(xRe,"STRONG",{});var yTt=s(zbe);Upr=r(yTt,"roberta"),yTt.forEach(t),Jpr=r(xRe," \u2014 "),EQ=n(xRe,"A",{href:!0});var LTt=s(EQ);Ypr=r(LTt,"TFRobertaForMaskedLM"),LTt.forEach(t),Kpr=r(xRe," (RoBERTa model)"),xRe.forEach(t),Zpr=i(le),g7=n(le,"LI",{});var $Re=s(g7);Wbe=n($Re,"STRONG",{});var xTt=s(Wbe);e_r=r(xTt,"t5"),xTt.forEach(t),o_r=r($Re," \u2014 "),CQ=n($Re,"A",{href:!0});var $Tt=s(CQ);r_r=r($Tt,"TFT5ForConditionalGeneration"),$Tt.forEach(t),t_r=r($Re," (T5 model)"),$Re.forEach(t),a_r=i(le),h7=n(le,"LI",{});var kRe=s(h7);Qbe=n(kRe,"STRONG",{});var kTt=s(Qbe);n_r=r(kTt,"tapas"),kTt.forEach(t),s_r=r(kRe," \u2014 "),wQ=n(kRe,"A",{href:!0});var STt=s(wQ);l_r=r(STt,"TFTapasForMaskedLM"),STt.forEach(t),i_r=r(kRe," (TAPAS model)"),kRe.forEach(t),d_r=i(le),p7=n(le,"LI",{});var SRe=s(p7);Hbe=n(SRe,"STRONG",{});var RTt=s(Hbe);c_r=r(RTt,"transfo-xl"),RTt.forEach(t),f_r=r(SRe," \u2014 "),AQ=n(SRe,"A",{href:!0});var PTt=s(AQ);m_r=r(PTt,"TFTransfoXLLMHeadModel"),PTt.forEach(t),g_r=r(SRe," (Transformer-XL model)"),SRe.forEach(t),h_r=i(le),_7=n(le,"LI",{});var RRe=s(_7);Ube=n(RRe,"STRONG",{});var BTt=s(Ube);p_r=r(BTt,"vit_mae"),BTt.forEach(t),__r=r(RRe," \u2014 "),yQ=n(RRe,"A",{href:!0});var ITt=s(yQ);u_r=r(ITt,"TFViTMAEForPreTraining"),ITt.forEach(t),b_r=r(RRe," (ViTMAE model)"),RRe.forEach(t),v_r=i(le),u7=n(le,"LI",{});var PRe=s(u7);Jbe=n(PRe,"STRONG",{});var NTt=s(Jbe);F_r=r(NTt,"xlm"),NTt.forEach(t),T_r=r(PRe," \u2014 "),LQ=n(PRe,"A",{href:!0});var qTt=s(LQ);M_r=r(qTt,"TFXLMWithLMHeadModel"),qTt.forEach(t),E_r=r(PRe," (XLM model)"),PRe.forEach(t),C_r=i(le),b7=n(le,"LI",{});var BRe=s(b7);Ybe=n(BRe,"STRONG",{});var jTt=s(Ybe);w_r=r(jTt,"xlm-roberta"),jTt.forEach(t),A_r=r(BRe," \u2014 "),xQ=n(BRe,"A",{href:!0});var DTt=s(xQ);y_r=r(DTt,"TFXLMRobertaForMaskedLM"),DTt.forEach(t),L_r=r(BRe," (XLM-RoBERTa model)"),BRe.forEach(t),x_r=i(le),v7=n(le,"LI",{});var IRe=s(v7);Kbe=n(IRe,"STRONG",{});var GTt=s(Kbe);$_r=r(GTt,"xlnet"),GTt.forEach(t),k_r=r(IRe," \u2014 "),$Q=n(IRe,"A",{href:!0});var OTt=s($Q);S_r=r(OTt,"TFXLNetLMHeadModel"),OTt.forEach(t),R_r=r(IRe," (XLNet model)"),IRe.forEach(t),le.forEach(t),P_r=i(_l),T(F7.$$.fragment,_l),_l.forEach(t),pl.forEach(t),pje=i(f),Qd=n(f,"H2",{class:!0});var TGe=s(Qd);T7=n(TGe,"A",{id:!0,class:!0,href:!0});var VTt=s(T7);Zbe=n(VTt,"SPAN",{});var XTt=s(Zbe);T(F8.$$.fragment,XTt),XTt.forEach(t),VTt.forEach(t),B_r=i(TGe),eve=n(TGe,"SPAN",{});var zTt=s(eve);I_r=r(zTt,"TFAutoModelForCausalLM"),zTt.forEach(t),TGe.forEach(t),_je=i(f),Zo=n(f,"DIV",{class:!0});var ul=s(Zo);T(T8.$$.fragment,ul),N_r=i(ul),Hd=n(ul,"P",{});var _ee=s(Hd);q_r=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kQ=n(_ee,"A",{href:!0});var WTt=s(kQ);j_r=r(WTt,"from_pretrained()"),WTt.forEach(t),D_r=r(_ee," class method or the "),SQ=n(_ee,"A",{href:!0});var QTt=s(SQ);G_r=r(QTt,"from_config()"),QTt.forEach(t),O_r=r(_ee,` class
method.`),_ee.forEach(t),V_r=i(ul),M8=n(ul,"P",{});var MGe=s(M8);X_r=r(MGe,"This class cannot be instantiated directly using "),ove=n(MGe,"CODE",{});var HTt=s(ove);z_r=r(HTt,"__init__()"),HTt.forEach(t),W_r=r(MGe," (throws an error)."),MGe.forEach(t),Q_r=i(ul),xt=n(ul,"DIV",{class:!0});var $6=s(xt);T(E8.$$.fragment,$6),H_r=i($6),rve=n($6,"P",{});var UTt=s(rve);U_r=r(UTt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),UTt.forEach(t),J_r=i($6),Ud=n($6,"P",{});var uee=s(Ud);Y_r=r(uee,`Note:
Loading a model from its configuration file does `),tve=n(uee,"STRONG",{});var JTt=s(tve);K_r=r(JTt,"not"),JTt.forEach(t),Z_r=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=n(uee,"A",{href:!0});var YTt=s(RQ);eur=r(YTt,"from_pretrained()"),YTt.forEach(t),our=r(uee," to load the model weights."),uee.forEach(t),rur=i($6),T(M7.$$.fragment,$6),$6.forEach(t),tur=i(ul),yr=n(ul,"DIV",{class:!0});var bl=s(yr);T(C8.$$.fragment,bl),aur=i(bl),ave=n(bl,"P",{});var KTt=s(ave);nur=r(KTt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),KTt.forEach(t),sur=i(bl),en=n(bl,"P",{});var k6=s(en);lur=r(k6,"The model class to instantiate is selected based on the "),nve=n(k6,"CODE",{});var ZTt=s(nve);iur=r(ZTt,"model_type"),ZTt.forEach(t),dur=r(k6,` property of the config object (either
passed as an argument or loaded from `),sve=n(k6,"CODE",{});var e7t=s(sve);cur=r(e7t,"pretrained_model_name_or_path"),e7t.forEach(t),fur=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=n(k6,"CODE",{});var o7t=s(lve);mur=r(o7t,"pretrained_model_name_or_path"),o7t.forEach(t),gur=r(k6,":"),k6.forEach(t),hur=i(bl),Me=n(bl,"UL",{});var Ce=s(Me);E7=n(Ce,"LI",{});var NRe=s(E7);ive=n(NRe,"STRONG",{});var r7t=s(ive);pur=r(r7t,"bert"),r7t.forEach(t),_ur=r(NRe," \u2014 "),PQ=n(NRe,"A",{href:!0});var t7t=s(PQ);uur=r(t7t,"TFBertLMHeadModel"),t7t.forEach(t),bur=r(NRe," (BERT model)"),NRe.forEach(t),vur=i(Ce),C7=n(Ce,"LI",{});var qRe=s(C7);dve=n(qRe,"STRONG",{});var a7t=s(dve);Fur=r(a7t,"camembert"),a7t.forEach(t),Tur=r(qRe," \u2014 "),BQ=n(qRe,"A",{href:!0});var n7t=s(BQ);Mur=r(n7t,"TFCamembertForCausalLM"),n7t.forEach(t),Eur=r(qRe," (CamemBERT model)"),qRe.forEach(t),Cur=i(Ce),w7=n(Ce,"LI",{});var jRe=s(w7);cve=n(jRe,"STRONG",{});var s7t=s(cve);wur=r(s7t,"ctrl"),s7t.forEach(t),Aur=r(jRe," \u2014 "),IQ=n(jRe,"A",{href:!0});var l7t=s(IQ);yur=r(l7t,"TFCTRLLMHeadModel"),l7t.forEach(t),Lur=r(jRe," (CTRL model)"),jRe.forEach(t),xur=i(Ce),A7=n(Ce,"LI",{});var DRe=s(A7);fve=n(DRe,"STRONG",{});var i7t=s(fve);$ur=r(i7t,"gpt2"),i7t.forEach(t),kur=r(DRe," \u2014 "),NQ=n(DRe,"A",{href:!0});var d7t=s(NQ);Sur=r(d7t,"TFGPT2LMHeadModel"),d7t.forEach(t),Rur=r(DRe," (OpenAI GPT-2 model)"),DRe.forEach(t),Pur=i(Ce),y7=n(Ce,"LI",{});var GRe=s(y7);mve=n(GRe,"STRONG",{});var c7t=s(mve);Bur=r(c7t,"gptj"),c7t.forEach(t),Iur=r(GRe," \u2014 "),qQ=n(GRe,"A",{href:!0});var f7t=s(qQ);Nur=r(f7t,"TFGPTJForCausalLM"),f7t.forEach(t),qur=r(GRe," (GPT-J model)"),GRe.forEach(t),jur=i(Ce),L7=n(Ce,"LI",{});var ORe=s(L7);gve=n(ORe,"STRONG",{});var m7t=s(gve);Dur=r(m7t,"openai-gpt"),m7t.forEach(t),Gur=r(ORe," \u2014 "),jQ=n(ORe,"A",{href:!0});var g7t=s(jQ);Our=r(g7t,"TFOpenAIGPTLMHeadModel"),g7t.forEach(t),Vur=r(ORe," (OpenAI GPT model)"),ORe.forEach(t),Xur=i(Ce),x7=n(Ce,"LI",{});var VRe=s(x7);hve=n(VRe,"STRONG",{});var h7t=s(hve);zur=r(h7t,"rembert"),h7t.forEach(t),Wur=r(VRe," \u2014 "),DQ=n(VRe,"A",{href:!0});var p7t=s(DQ);Qur=r(p7t,"TFRemBertForCausalLM"),p7t.forEach(t),Hur=r(VRe," (RemBERT model)"),VRe.forEach(t),Uur=i(Ce),$7=n(Ce,"LI",{});var XRe=s($7);pve=n(XRe,"STRONG",{});var _7t=s(pve);Jur=r(_7t,"roberta"),_7t.forEach(t),Yur=r(XRe," \u2014 "),GQ=n(XRe,"A",{href:!0});var u7t=s(GQ);Kur=r(u7t,"TFRobertaForCausalLM"),u7t.forEach(t),Zur=r(XRe," (RoBERTa model)"),XRe.forEach(t),e2r=i(Ce),k7=n(Ce,"LI",{});var zRe=s(k7);_ve=n(zRe,"STRONG",{});var b7t=s(_ve);o2r=r(b7t,"roformer"),b7t.forEach(t),r2r=r(zRe," \u2014 "),OQ=n(zRe,"A",{href:!0});var v7t=s(OQ);t2r=r(v7t,"TFRoFormerForCausalLM"),v7t.forEach(t),a2r=r(zRe," (RoFormer model)"),zRe.forEach(t),n2r=i(Ce),S7=n(Ce,"LI",{});var WRe=s(S7);uve=n(WRe,"STRONG",{});var F7t=s(uve);s2r=r(F7t,"transfo-xl"),F7t.forEach(t),l2r=r(WRe," \u2014 "),VQ=n(WRe,"A",{href:!0});var T7t=s(VQ);i2r=r(T7t,"TFTransfoXLLMHeadModel"),T7t.forEach(t),d2r=r(WRe," (Transformer-XL model)"),WRe.forEach(t),c2r=i(Ce),R7=n(Ce,"LI",{});var QRe=s(R7);bve=n(QRe,"STRONG",{});var M7t=s(bve);f2r=r(M7t,"xlm"),M7t.forEach(t),m2r=r(QRe," \u2014 "),XQ=n(QRe,"A",{href:!0});var E7t=s(XQ);g2r=r(E7t,"TFXLMWithLMHeadModel"),E7t.forEach(t),h2r=r(QRe," (XLM model)"),QRe.forEach(t),p2r=i(Ce),P7=n(Ce,"LI",{});var HRe=s(P7);vve=n(HRe,"STRONG",{});var C7t=s(vve);_2r=r(C7t,"xlnet"),C7t.forEach(t),u2r=r(HRe," \u2014 "),zQ=n(HRe,"A",{href:!0});var w7t=s(zQ);b2r=r(w7t,"TFXLNetLMHeadModel"),w7t.forEach(t),v2r=r(HRe," (XLNet model)"),HRe.forEach(t),Ce.forEach(t),F2r=i(bl),T(B7.$$.fragment,bl),bl.forEach(t),ul.forEach(t),uje=i(f),Jd=n(f,"H2",{class:!0});var EGe=s(Jd);I7=n(EGe,"A",{id:!0,class:!0,href:!0});var A7t=s(I7);Fve=n(A7t,"SPAN",{});var y7t=s(Fve);T(w8.$$.fragment,y7t),y7t.forEach(t),A7t.forEach(t),T2r=i(EGe),Tve=n(EGe,"SPAN",{});var L7t=s(Tve);M2r=r(L7t,"TFAutoModelForImageClassification"),L7t.forEach(t),EGe.forEach(t),bje=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(A8.$$.fragment,vl),E2r=i(vl),Yd=n(vl,"P",{});var bee=s(Yd);C2r=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WQ=n(bee,"A",{href:!0});var x7t=s(WQ);w2r=r(x7t,"from_pretrained()"),x7t.forEach(t),A2r=r(bee," class method or the "),QQ=n(bee,"A",{href:!0});var $7t=s(QQ);y2r=r($7t,"from_config()"),$7t.forEach(t),L2r=r(bee,` class
method.`),bee.forEach(t),x2r=i(vl),y8=n(vl,"P",{});var CGe=s(y8);$2r=r(CGe,"This class cannot be instantiated directly using "),Mve=n(CGe,"CODE",{});var k7t=s(Mve);k2r=r(k7t,"__init__()"),k7t.forEach(t),S2r=r(CGe," (throws an error)."),CGe.forEach(t),R2r=i(vl),$t=n(vl,"DIV",{class:!0});var S6=s($t);T(L8.$$.fragment,S6),P2r=i(S6),Eve=n(S6,"P",{});var S7t=s(Eve);B2r=r(S7t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),S7t.forEach(t),I2r=i(S6),Kd=n(S6,"P",{});var vee=s(Kd);N2r=r(vee,`Note:
Loading a model from its configuration file does `),Cve=n(vee,"STRONG",{});var R7t=s(Cve);q2r=r(R7t,"not"),R7t.forEach(t),j2r=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=n(vee,"A",{href:!0});var P7t=s(HQ);D2r=r(P7t,"from_pretrained()"),P7t.forEach(t),G2r=r(vee," to load the model weights."),vee.forEach(t),O2r=i(S6),T(N7.$$.fragment,S6),S6.forEach(t),V2r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(x8.$$.fragment,Fl),X2r=i(Fl),wve=n(Fl,"P",{});var B7t=s(wve);z2r=r(B7t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),B7t.forEach(t),W2r=i(Fl),on=n(Fl,"P",{});var R6=s(on);Q2r=r(R6,"The model class to instantiate is selected based on the "),Ave=n(R6,"CODE",{});var I7t=s(Ave);H2r=r(I7t,"model_type"),I7t.forEach(t),U2r=r(R6,` property of the config object (either
passed as an argument or loaded from `),yve=n(R6,"CODE",{});var N7t=s(yve);J2r=r(N7t,"pretrained_model_name_or_path"),N7t.forEach(t),Y2r=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=n(R6,"CODE",{});var q7t=s(Lve);K2r=r(q7t,"pretrained_model_name_or_path"),q7t.forEach(t),Z2r=r(R6,":"),R6.forEach(t),e1r=i(Fl),rn=n(Fl,"UL",{});var P6=s(rn);q7=n(P6,"LI",{});var URe=s(q7);xve=n(URe,"STRONG",{});var j7t=s(xve);o1r=r(j7t,"convnext"),j7t.forEach(t),r1r=r(URe," \u2014 "),UQ=n(URe,"A",{href:!0});var D7t=s(UQ);t1r=r(D7t,"TFConvNextForImageClassification"),D7t.forEach(t),a1r=r(URe," (ConvNext model)"),URe.forEach(t),n1r=i(P6),j7=n(P6,"LI",{});var JRe=s(j7);$ve=n(JRe,"STRONG",{});var G7t=s($ve);s1r=r(G7t,"data2vec-vision"),G7t.forEach(t),l1r=r(JRe," \u2014 "),JQ=n(JRe,"A",{href:!0});var O7t=s(JQ);i1r=r(O7t,"TFData2VecVisionForImageClassification"),O7t.forEach(t),d1r=r(JRe," (Data2VecVision model)"),JRe.forEach(t),c1r=i(P6),D7=n(P6,"LI",{});var YRe=s(D7);kve=n(YRe,"STRONG",{});var V7t=s(kve);f1r=r(V7t,"swin"),V7t.forEach(t),m1r=r(YRe," \u2014 "),YQ=n(YRe,"A",{href:!0});var X7t=s(YQ);g1r=r(X7t,"TFSwinForImageClassification"),X7t.forEach(t),h1r=r(YRe," (Swin model)"),YRe.forEach(t),p1r=i(P6),G7=n(P6,"LI",{});var KRe=s(G7);Sve=n(KRe,"STRONG",{});var z7t=s(Sve);_1r=r(z7t,"vit"),z7t.forEach(t),u1r=r(KRe," \u2014 "),KQ=n(KRe,"A",{href:!0});var W7t=s(KQ);b1r=r(W7t,"TFViTForImageClassification"),W7t.forEach(t),v1r=r(KRe," (ViT model)"),KRe.forEach(t),P6.forEach(t),F1r=i(Fl),T(O7.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),vje=i(f),Zd=n(f,"H2",{class:!0});var wGe=s(Zd);V7=n(wGe,"A",{id:!0,class:!0,href:!0});var Q7t=s(V7);Rve=n(Q7t,"SPAN",{});var H7t=s(Rve);T($8.$$.fragment,H7t),H7t.forEach(t),Q7t.forEach(t),T1r=i(wGe),Pve=n(wGe,"SPAN",{});var U7t=s(Pve);M1r=r(U7t,"TFAutoModelForMaskedLM"),U7t.forEach(t),wGe.forEach(t),Fje=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T(k8.$$.fragment,Tl),E1r=i(Tl),ec=n(Tl,"P",{});var Fee=s(ec);C1r=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ZQ=n(Fee,"A",{href:!0});var J7t=s(ZQ);w1r=r(J7t,"from_pretrained()"),J7t.forEach(t),A1r=r(Fee," class method or the "),eH=n(Fee,"A",{href:!0});var Y7t=s(eH);y1r=r(Y7t,"from_config()"),Y7t.forEach(t),L1r=r(Fee,` class
method.`),Fee.forEach(t),x1r=i(Tl),S8=n(Tl,"P",{});var AGe=s(S8);$1r=r(AGe,"This class cannot be instantiated directly using "),Bve=n(AGe,"CODE",{});var K7t=s(Bve);k1r=r(K7t,"__init__()"),K7t.forEach(t),S1r=r(AGe," (throws an error)."),AGe.forEach(t),R1r=i(Tl),kt=n(Tl,"DIV",{class:!0});var B6=s(kt);T(R8.$$.fragment,B6),P1r=i(B6),Ive=n(B6,"P",{});var Z7t=s(Ive);B1r=r(Z7t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Z7t.forEach(t),I1r=i(B6),oc=n(B6,"P",{});var Tee=s(oc);N1r=r(Tee,`Note:
Loading a model from its configuration file does `),Nve=n(Tee,"STRONG",{});var eMt=s(Nve);q1r=r(eMt,"not"),eMt.forEach(t),j1r=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=n(Tee,"A",{href:!0});var oMt=s(oH);D1r=r(oMt,"from_pretrained()"),oMt.forEach(t),G1r=r(Tee," to load the model weights."),Tee.forEach(t),O1r=i(B6),T(X7.$$.fragment,B6),B6.forEach(t),V1r=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(P8.$$.fragment,Ml),X1r=i(Ml),qve=n(Ml,"P",{});var rMt=s(qve);z1r=r(rMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rMt.forEach(t),W1r=i(Ml),tn=n(Ml,"P",{});var I6=s(tn);Q1r=r(I6,"The model class to instantiate is selected based on the "),jve=n(I6,"CODE",{});var tMt=s(jve);H1r=r(tMt,"model_type"),tMt.forEach(t),U1r=r(I6,` property of the config object (either
passed as an argument or loaded from `),Dve=n(I6,"CODE",{});var aMt=s(Dve);J1r=r(aMt,"pretrained_model_name_or_path"),aMt.forEach(t),Y1r=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=n(I6,"CODE",{});var nMt=s(Gve);K1r=r(nMt,"pretrained_model_name_or_path"),nMt.forEach(t),Z1r=r(I6,":"),I6.forEach(t),ebr=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);z7=n(fe,"LI",{});var ZRe=s(z7);Ove=n(ZRe,"STRONG",{});var sMt=s(Ove);obr=r(sMt,"albert"),sMt.forEach(t),rbr=r(ZRe," \u2014 "),rH=n(ZRe,"A",{href:!0});var lMt=s(rH);tbr=r(lMt,"TFAlbertForMaskedLM"),lMt.forEach(t),abr=r(ZRe," (ALBERT model)"),ZRe.forEach(t),nbr=i(fe),W7=n(fe,"LI",{});var ePe=s(W7);Vve=n(ePe,"STRONG",{});var iMt=s(Vve);sbr=r(iMt,"bert"),iMt.forEach(t),lbr=r(ePe," \u2014 "),tH=n(ePe,"A",{href:!0});var dMt=s(tH);ibr=r(dMt,"TFBertForMaskedLM"),dMt.forEach(t),dbr=r(ePe," (BERT model)"),ePe.forEach(t),cbr=i(fe),Q7=n(fe,"LI",{});var oPe=s(Q7);Xve=n(oPe,"STRONG",{});var cMt=s(Xve);fbr=r(cMt,"camembert"),cMt.forEach(t),mbr=r(oPe," \u2014 "),aH=n(oPe,"A",{href:!0});var fMt=s(aH);gbr=r(fMt,"TFCamembertForMaskedLM"),fMt.forEach(t),hbr=r(oPe," (CamemBERT model)"),oPe.forEach(t),pbr=i(fe),H7=n(fe,"LI",{});var rPe=s(H7);zve=n(rPe,"STRONG",{});var mMt=s(zve);_br=r(mMt,"convbert"),mMt.forEach(t),ubr=r(rPe," \u2014 "),nH=n(rPe,"A",{href:!0});var gMt=s(nH);bbr=r(gMt,"TFConvBertForMaskedLM"),gMt.forEach(t),vbr=r(rPe," (ConvBERT model)"),rPe.forEach(t),Fbr=i(fe),U7=n(fe,"LI",{});var tPe=s(U7);Wve=n(tPe,"STRONG",{});var hMt=s(Wve);Tbr=r(hMt,"deberta"),hMt.forEach(t),Mbr=r(tPe," \u2014 "),sH=n(tPe,"A",{href:!0});var pMt=s(sH);Ebr=r(pMt,"TFDebertaForMaskedLM"),pMt.forEach(t),Cbr=r(tPe," (DeBERTa model)"),tPe.forEach(t),wbr=i(fe),J7=n(fe,"LI",{});var aPe=s(J7);Qve=n(aPe,"STRONG",{});var _Mt=s(Qve);Abr=r(_Mt,"deberta-v2"),_Mt.forEach(t),ybr=r(aPe," \u2014 "),lH=n(aPe,"A",{href:!0});var uMt=s(lH);Lbr=r(uMt,"TFDebertaV2ForMaskedLM"),uMt.forEach(t),xbr=r(aPe," (DeBERTa-v2 model)"),aPe.forEach(t),$br=i(fe),Y7=n(fe,"LI",{});var nPe=s(Y7);Hve=n(nPe,"STRONG",{});var bMt=s(Hve);kbr=r(bMt,"distilbert"),bMt.forEach(t),Sbr=r(nPe," \u2014 "),iH=n(nPe,"A",{href:!0});var vMt=s(iH);Rbr=r(vMt,"TFDistilBertForMaskedLM"),vMt.forEach(t),Pbr=r(nPe," (DistilBERT model)"),nPe.forEach(t),Bbr=i(fe),K7=n(fe,"LI",{});var sPe=s(K7);Uve=n(sPe,"STRONG",{});var FMt=s(Uve);Ibr=r(FMt,"electra"),FMt.forEach(t),Nbr=r(sPe," \u2014 "),dH=n(sPe,"A",{href:!0});var TMt=s(dH);qbr=r(TMt,"TFElectraForMaskedLM"),TMt.forEach(t),jbr=r(sPe," (ELECTRA model)"),sPe.forEach(t),Dbr=i(fe),Z7=n(fe,"LI",{});var lPe=s(Z7);Jve=n(lPe,"STRONG",{});var MMt=s(Jve);Gbr=r(MMt,"flaubert"),MMt.forEach(t),Obr=r(lPe," \u2014 "),cH=n(lPe,"A",{href:!0});var EMt=s(cH);Vbr=r(EMt,"TFFlaubertWithLMHeadModel"),EMt.forEach(t),Xbr=r(lPe," (FlauBERT model)"),lPe.forEach(t),zbr=i(fe),eM=n(fe,"LI",{});var iPe=s(eM);Yve=n(iPe,"STRONG",{});var CMt=s(Yve);Wbr=r(CMt,"funnel"),CMt.forEach(t),Qbr=r(iPe," \u2014 "),fH=n(iPe,"A",{href:!0});var wMt=s(fH);Hbr=r(wMt,"TFFunnelForMaskedLM"),wMt.forEach(t),Ubr=r(iPe," (Funnel Transformer model)"),iPe.forEach(t),Jbr=i(fe),oM=n(fe,"LI",{});var dPe=s(oM);Kve=n(dPe,"STRONG",{});var AMt=s(Kve);Ybr=r(AMt,"layoutlm"),AMt.forEach(t),Kbr=r(dPe," \u2014 "),mH=n(dPe,"A",{href:!0});var yMt=s(mH);Zbr=r(yMt,"TFLayoutLMForMaskedLM"),yMt.forEach(t),evr=r(dPe," (LayoutLM model)"),dPe.forEach(t),ovr=i(fe),rM=n(fe,"LI",{});var cPe=s(rM);Zve=n(cPe,"STRONG",{});var LMt=s(Zve);rvr=r(LMt,"longformer"),LMt.forEach(t),tvr=r(cPe," \u2014 "),gH=n(cPe,"A",{href:!0});var xMt=s(gH);avr=r(xMt,"TFLongformerForMaskedLM"),xMt.forEach(t),nvr=r(cPe," (Longformer model)"),cPe.forEach(t),svr=i(fe),tM=n(fe,"LI",{});var fPe=s(tM);e3e=n(fPe,"STRONG",{});var $Mt=s(e3e);lvr=r($Mt,"mobilebert"),$Mt.forEach(t),ivr=r(fPe," \u2014 "),hH=n(fPe,"A",{href:!0});var kMt=s(hH);dvr=r(kMt,"TFMobileBertForMaskedLM"),kMt.forEach(t),cvr=r(fPe," (MobileBERT model)"),fPe.forEach(t),fvr=i(fe),aM=n(fe,"LI",{});var mPe=s(aM);o3e=n(mPe,"STRONG",{});var SMt=s(o3e);mvr=r(SMt,"mpnet"),SMt.forEach(t),gvr=r(mPe," \u2014 "),pH=n(mPe,"A",{href:!0});var RMt=s(pH);hvr=r(RMt,"TFMPNetForMaskedLM"),RMt.forEach(t),pvr=r(mPe," (MPNet model)"),mPe.forEach(t),_vr=i(fe),nM=n(fe,"LI",{});var gPe=s(nM);r3e=n(gPe,"STRONG",{});var PMt=s(r3e);uvr=r(PMt,"rembert"),PMt.forEach(t),bvr=r(gPe," \u2014 "),_H=n(gPe,"A",{href:!0});var BMt=s(_H);vvr=r(BMt,"TFRemBertForMaskedLM"),BMt.forEach(t),Fvr=r(gPe," (RemBERT model)"),gPe.forEach(t),Tvr=i(fe),sM=n(fe,"LI",{});var hPe=s(sM);t3e=n(hPe,"STRONG",{});var IMt=s(t3e);Mvr=r(IMt,"roberta"),IMt.forEach(t),Evr=r(hPe," \u2014 "),uH=n(hPe,"A",{href:!0});var NMt=s(uH);Cvr=r(NMt,"TFRobertaForMaskedLM"),NMt.forEach(t),wvr=r(hPe," (RoBERTa model)"),hPe.forEach(t),Avr=i(fe),lM=n(fe,"LI",{});var pPe=s(lM);a3e=n(pPe,"STRONG",{});var qMt=s(a3e);yvr=r(qMt,"roformer"),qMt.forEach(t),Lvr=r(pPe," \u2014 "),bH=n(pPe,"A",{href:!0});var jMt=s(bH);xvr=r(jMt,"TFRoFormerForMaskedLM"),jMt.forEach(t),$vr=r(pPe," (RoFormer model)"),pPe.forEach(t),kvr=i(fe),iM=n(fe,"LI",{});var _Pe=s(iM);n3e=n(_Pe,"STRONG",{});var DMt=s(n3e);Svr=r(DMt,"tapas"),DMt.forEach(t),Rvr=r(_Pe," \u2014 "),vH=n(_Pe,"A",{href:!0});var GMt=s(vH);Pvr=r(GMt,"TFTapasForMaskedLM"),GMt.forEach(t),Bvr=r(_Pe," (TAPAS model)"),_Pe.forEach(t),Ivr=i(fe),dM=n(fe,"LI",{});var uPe=s(dM);s3e=n(uPe,"STRONG",{});var OMt=s(s3e);Nvr=r(OMt,"xlm"),OMt.forEach(t),qvr=r(uPe," \u2014 "),FH=n(uPe,"A",{href:!0});var VMt=s(FH);jvr=r(VMt,"TFXLMWithLMHeadModel"),VMt.forEach(t),Dvr=r(uPe," (XLM model)"),uPe.forEach(t),Gvr=i(fe),cM=n(fe,"LI",{});var bPe=s(cM);l3e=n(bPe,"STRONG",{});var XMt=s(l3e);Ovr=r(XMt,"xlm-roberta"),XMt.forEach(t),Vvr=r(bPe," \u2014 "),TH=n(bPe,"A",{href:!0});var zMt=s(TH);Xvr=r(zMt,"TFXLMRobertaForMaskedLM"),zMt.forEach(t),zvr=r(bPe," (XLM-RoBERTa model)"),bPe.forEach(t),fe.forEach(t),Wvr=i(Ml),T(fM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),Tje=i(f),rc=n(f,"H2",{class:!0});var yGe=s(rc);mM=n(yGe,"A",{id:!0,class:!0,href:!0});var WMt=s(mM);i3e=n(WMt,"SPAN",{});var QMt=s(i3e);T(B8.$$.fragment,QMt),QMt.forEach(t),WMt.forEach(t),Qvr=i(yGe),d3e=n(yGe,"SPAN",{});var HMt=s(d3e);Hvr=r(HMt,"TFAutoModelForSeq2SeqLM"),HMt.forEach(t),yGe.forEach(t),Mje=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T(I8.$$.fragment,El),Uvr=i(El),tc=n(El,"P",{});var Mee=s(tc);Jvr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),MH=n(Mee,"A",{href:!0});var UMt=s(MH);Yvr=r(UMt,"from_pretrained()"),UMt.forEach(t),Kvr=r(Mee," class method or the "),EH=n(Mee,"A",{href:!0});var JMt=s(EH);Zvr=r(JMt,"from_config()"),JMt.forEach(t),e3r=r(Mee,` class
method.`),Mee.forEach(t),o3r=i(El),N8=n(El,"P",{});var LGe=s(N8);r3r=r(LGe,"This class cannot be instantiated directly using "),c3e=n(LGe,"CODE",{});var YMt=s(c3e);t3r=r(YMt,"__init__()"),YMt.forEach(t),a3r=r(LGe," (throws an error)."),LGe.forEach(t),n3r=i(El),St=n(El,"DIV",{class:!0});var N6=s(St);T(q8.$$.fragment,N6),s3r=i(N6),f3e=n(N6,"P",{});var KMt=s(f3e);l3r=r(KMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),KMt.forEach(t),i3r=i(N6),ac=n(N6,"P",{});var Eee=s(ac);d3r=r(Eee,`Note:
Loading a model from its configuration file does `),m3e=n(Eee,"STRONG",{});var ZMt=s(m3e);c3r=r(ZMt,"not"),ZMt.forEach(t),f3r=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=n(Eee,"A",{href:!0});var e4t=s(CH);m3r=r(e4t,"from_pretrained()"),e4t.forEach(t),g3r=r(Eee," to load the model weights."),Eee.forEach(t),h3r=i(N6),T(gM.$$.fragment,N6),N6.forEach(t),p3r=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(j8.$$.fragment,Cl),_3r=i(Cl),g3e=n(Cl,"P",{});var o4t=s(g3e);u3r=r(o4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),o4t.forEach(t),b3r=i(Cl),an=n(Cl,"P",{});var q6=s(an);v3r=r(q6,"The model class to instantiate is selected based on the "),h3e=n(q6,"CODE",{});var r4t=s(h3e);F3r=r(r4t,"model_type"),r4t.forEach(t),T3r=r(q6,` property of the config object (either
passed as an argument or loaded from `),p3e=n(q6,"CODE",{});var t4t=s(p3e);M3r=r(t4t,"pretrained_model_name_or_path"),t4t.forEach(t),E3r=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_3e=n(q6,"CODE",{});var a4t=s(_3e);C3r=r(a4t,"pretrained_model_name_or_path"),a4t.forEach(t),w3r=r(q6,":"),q6.forEach(t),A3r=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);hM=n(Be,"LI",{});var vPe=s(hM);u3e=n(vPe,"STRONG",{});var n4t=s(u3e);y3r=r(n4t,"bart"),n4t.forEach(t),L3r=r(vPe," \u2014 "),wH=n(vPe,"A",{href:!0});var s4t=s(wH);x3r=r(s4t,"TFBartForConditionalGeneration"),s4t.forEach(t),$3r=r(vPe," (BART model)"),vPe.forEach(t),k3r=i(Be),pM=n(Be,"LI",{});var FPe=s(pM);b3e=n(FPe,"STRONG",{});var l4t=s(b3e);S3r=r(l4t,"blenderbot"),l4t.forEach(t),R3r=r(FPe," \u2014 "),AH=n(FPe,"A",{href:!0});var i4t=s(AH);P3r=r(i4t,"TFBlenderbotForConditionalGeneration"),i4t.forEach(t),B3r=r(FPe," (Blenderbot model)"),FPe.forEach(t),I3r=i(Be),_M=n(Be,"LI",{});var TPe=s(_M);v3e=n(TPe,"STRONG",{});var d4t=s(v3e);N3r=r(d4t,"blenderbot-small"),d4t.forEach(t),q3r=r(TPe," \u2014 "),yH=n(TPe,"A",{href:!0});var c4t=s(yH);j3r=r(c4t,"TFBlenderbotSmallForConditionalGeneration"),c4t.forEach(t),D3r=r(TPe," (BlenderbotSmall model)"),TPe.forEach(t),G3r=i(Be),uM=n(Be,"LI",{});var MPe=s(uM);F3e=n(MPe,"STRONG",{});var f4t=s(F3e);O3r=r(f4t,"encoder-decoder"),f4t.forEach(t),V3r=r(MPe," \u2014 "),LH=n(MPe,"A",{href:!0});var m4t=s(LH);X3r=r(m4t,"TFEncoderDecoderModel"),m4t.forEach(t),z3r=r(MPe," (Encoder decoder model)"),MPe.forEach(t),W3r=i(Be),bM=n(Be,"LI",{});var EPe=s(bM);T3e=n(EPe,"STRONG",{});var g4t=s(T3e);Q3r=r(g4t,"led"),g4t.forEach(t),H3r=r(EPe," \u2014 "),xH=n(EPe,"A",{href:!0});var h4t=s(xH);U3r=r(h4t,"TFLEDForConditionalGeneration"),h4t.forEach(t),J3r=r(EPe," (LED model)"),EPe.forEach(t),Y3r=i(Be),vM=n(Be,"LI",{});var CPe=s(vM);M3e=n(CPe,"STRONG",{});var p4t=s(M3e);K3r=r(p4t,"marian"),p4t.forEach(t),Z3r=r(CPe," \u2014 "),$H=n(CPe,"A",{href:!0});var _4t=s($H);e0r=r(_4t,"TFMarianMTModel"),_4t.forEach(t),o0r=r(CPe," (Marian model)"),CPe.forEach(t),r0r=i(Be),FM=n(Be,"LI",{});var wPe=s(FM);E3e=n(wPe,"STRONG",{});var u4t=s(E3e);t0r=r(u4t,"mbart"),u4t.forEach(t),a0r=r(wPe," \u2014 "),kH=n(wPe,"A",{href:!0});var b4t=s(kH);n0r=r(b4t,"TFMBartForConditionalGeneration"),b4t.forEach(t),s0r=r(wPe," (mBART model)"),wPe.forEach(t),l0r=i(Be),TM=n(Be,"LI",{});var APe=s(TM);C3e=n(APe,"STRONG",{});var v4t=s(C3e);i0r=r(v4t,"mt5"),v4t.forEach(t),d0r=r(APe," \u2014 "),SH=n(APe,"A",{href:!0});var F4t=s(SH);c0r=r(F4t,"TFMT5ForConditionalGeneration"),F4t.forEach(t),f0r=r(APe," (mT5 model)"),APe.forEach(t),m0r=i(Be),MM=n(Be,"LI",{});var yPe=s(MM);w3e=n(yPe,"STRONG",{});var T4t=s(w3e);g0r=r(T4t,"pegasus"),T4t.forEach(t),h0r=r(yPe," \u2014 "),RH=n(yPe,"A",{href:!0});var M4t=s(RH);p0r=r(M4t,"TFPegasusForConditionalGeneration"),M4t.forEach(t),_0r=r(yPe," (Pegasus model)"),yPe.forEach(t),u0r=i(Be),EM=n(Be,"LI",{});var LPe=s(EM);A3e=n(LPe,"STRONG",{});var E4t=s(A3e);b0r=r(E4t,"t5"),E4t.forEach(t),v0r=r(LPe," \u2014 "),PH=n(LPe,"A",{href:!0});var C4t=s(PH);F0r=r(C4t,"TFT5ForConditionalGeneration"),C4t.forEach(t),T0r=r(LPe," (T5 model)"),LPe.forEach(t),Be.forEach(t),M0r=i(Cl),T(CM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),Eje=i(f),nc=n(f,"H2",{class:!0});var xGe=s(nc);wM=n(xGe,"A",{id:!0,class:!0,href:!0});var w4t=s(wM);y3e=n(w4t,"SPAN",{});var A4t=s(y3e);T(D8.$$.fragment,A4t),A4t.forEach(t),w4t.forEach(t),E0r=i(xGe),L3e=n(xGe,"SPAN",{});var y4t=s(L3e);C0r=r(y4t,"TFAutoModelForSequenceClassification"),y4t.forEach(t),xGe.forEach(t),Cje=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T(G8.$$.fragment,wl),w0r=i(wl),sc=n(wl,"P",{});var Cee=s(sc);A0r=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BH=n(Cee,"A",{href:!0});var L4t=s(BH);y0r=r(L4t,"from_pretrained()"),L4t.forEach(t),L0r=r(Cee," class method or the "),IH=n(Cee,"A",{href:!0});var x4t=s(IH);x0r=r(x4t,"from_config()"),x4t.forEach(t),$0r=r(Cee,` class
method.`),Cee.forEach(t),k0r=i(wl),O8=n(wl,"P",{});var $Ge=s(O8);S0r=r($Ge,"This class cannot be instantiated directly using "),x3e=n($Ge,"CODE",{});var $4t=s(x3e);R0r=r($4t,"__init__()"),$4t.forEach(t),P0r=r($Ge," (throws an error)."),$Ge.forEach(t),B0r=i(wl),Rt=n(wl,"DIV",{class:!0});var j6=s(Rt);T(V8.$$.fragment,j6),I0r=i(j6),$3e=n(j6,"P",{});var k4t=s($3e);N0r=r(k4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),k4t.forEach(t),q0r=i(j6),lc=n(j6,"P",{});var wee=s(lc);j0r=r(wee,`Note:
Loading a model from its configuration file does `),k3e=n(wee,"STRONG",{});var S4t=s(k3e);D0r=r(S4t,"not"),S4t.forEach(t),G0r=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(wee,"A",{href:!0});var R4t=s(NH);O0r=r(R4t,"from_pretrained()"),R4t.forEach(t),V0r=r(wee," to load the model weights."),wee.forEach(t),X0r=i(j6),T(AM.$$.fragment,j6),j6.forEach(t),z0r=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(X8.$$.fragment,Al),W0r=i(Al),S3e=n(Al,"P",{});var P4t=s(S3e);Q0r=r(P4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),P4t.forEach(t),H0r=i(Al),nn=n(Al,"P",{});var D6=s(nn);U0r=r(D6,"The model class to instantiate is selected based on the "),R3e=n(D6,"CODE",{});var B4t=s(R3e);J0r=r(B4t,"model_type"),B4t.forEach(t),Y0r=r(D6,` property of the config object (either
passed as an argument or loaded from `),P3e=n(D6,"CODE",{});var I4t=s(P3e);K0r=r(I4t,"pretrained_model_name_or_path"),I4t.forEach(t),Z0r=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=n(D6,"CODE",{});var N4t=s(B3e);eFr=r(N4t,"pretrained_model_name_or_path"),N4t.forEach(t),oFr=r(D6,":"),D6.forEach(t),rFr=i(Al),oe=n(Al,"UL",{});var ae=s(oe);yM=n(ae,"LI",{});var xPe=s(yM);I3e=n(xPe,"STRONG",{});var q4t=s(I3e);tFr=r(q4t,"albert"),q4t.forEach(t),aFr=r(xPe," \u2014 "),qH=n(xPe,"A",{href:!0});var j4t=s(qH);nFr=r(j4t,"TFAlbertForSequenceClassification"),j4t.forEach(t),sFr=r(xPe," (ALBERT model)"),xPe.forEach(t),lFr=i(ae),LM=n(ae,"LI",{});var $Pe=s(LM);N3e=n($Pe,"STRONG",{});var D4t=s(N3e);iFr=r(D4t,"bert"),D4t.forEach(t),dFr=r($Pe," \u2014 "),jH=n($Pe,"A",{href:!0});var G4t=s(jH);cFr=r(G4t,"TFBertForSequenceClassification"),G4t.forEach(t),fFr=r($Pe," (BERT model)"),$Pe.forEach(t),mFr=i(ae),xM=n(ae,"LI",{});var kPe=s(xM);q3e=n(kPe,"STRONG",{});var O4t=s(q3e);gFr=r(O4t,"camembert"),O4t.forEach(t),hFr=r(kPe," \u2014 "),DH=n(kPe,"A",{href:!0});var V4t=s(DH);pFr=r(V4t,"TFCamembertForSequenceClassification"),V4t.forEach(t),_Fr=r(kPe," (CamemBERT model)"),kPe.forEach(t),uFr=i(ae),$M=n(ae,"LI",{});var SPe=s($M);j3e=n(SPe,"STRONG",{});var X4t=s(j3e);bFr=r(X4t,"convbert"),X4t.forEach(t),vFr=r(SPe," \u2014 "),GH=n(SPe,"A",{href:!0});var z4t=s(GH);FFr=r(z4t,"TFConvBertForSequenceClassification"),z4t.forEach(t),TFr=r(SPe," (ConvBERT model)"),SPe.forEach(t),MFr=i(ae),kM=n(ae,"LI",{});var RPe=s(kM);D3e=n(RPe,"STRONG",{});var W4t=s(D3e);EFr=r(W4t,"ctrl"),W4t.forEach(t),CFr=r(RPe," \u2014 "),OH=n(RPe,"A",{href:!0});var Q4t=s(OH);wFr=r(Q4t,"TFCTRLForSequenceClassification"),Q4t.forEach(t),AFr=r(RPe," (CTRL model)"),RPe.forEach(t),yFr=i(ae),SM=n(ae,"LI",{});var PPe=s(SM);G3e=n(PPe,"STRONG",{});var H4t=s(G3e);LFr=r(H4t,"deberta"),H4t.forEach(t),xFr=r(PPe," \u2014 "),VH=n(PPe,"A",{href:!0});var U4t=s(VH);$Fr=r(U4t,"TFDebertaForSequenceClassification"),U4t.forEach(t),kFr=r(PPe," (DeBERTa model)"),PPe.forEach(t),SFr=i(ae),RM=n(ae,"LI",{});var BPe=s(RM);O3e=n(BPe,"STRONG",{});var J4t=s(O3e);RFr=r(J4t,"deberta-v2"),J4t.forEach(t),PFr=r(BPe," \u2014 "),XH=n(BPe,"A",{href:!0});var Y4t=s(XH);BFr=r(Y4t,"TFDebertaV2ForSequenceClassification"),Y4t.forEach(t),IFr=r(BPe," (DeBERTa-v2 model)"),BPe.forEach(t),NFr=i(ae),PM=n(ae,"LI",{});var IPe=s(PM);V3e=n(IPe,"STRONG",{});var K4t=s(V3e);qFr=r(K4t,"distilbert"),K4t.forEach(t),jFr=r(IPe," \u2014 "),zH=n(IPe,"A",{href:!0});var Z4t=s(zH);DFr=r(Z4t,"TFDistilBertForSequenceClassification"),Z4t.forEach(t),GFr=r(IPe," (DistilBERT model)"),IPe.forEach(t),OFr=i(ae),BM=n(ae,"LI",{});var NPe=s(BM);X3e=n(NPe,"STRONG",{});var eEt=s(X3e);VFr=r(eEt,"electra"),eEt.forEach(t),XFr=r(NPe," \u2014 "),WH=n(NPe,"A",{href:!0});var oEt=s(WH);zFr=r(oEt,"TFElectraForSequenceClassification"),oEt.forEach(t),WFr=r(NPe," (ELECTRA model)"),NPe.forEach(t),QFr=i(ae),IM=n(ae,"LI",{});var qPe=s(IM);z3e=n(qPe,"STRONG",{});var rEt=s(z3e);HFr=r(rEt,"flaubert"),rEt.forEach(t),UFr=r(qPe," \u2014 "),QH=n(qPe,"A",{href:!0});var tEt=s(QH);JFr=r(tEt,"TFFlaubertForSequenceClassification"),tEt.forEach(t),YFr=r(qPe," (FlauBERT model)"),qPe.forEach(t),KFr=i(ae),NM=n(ae,"LI",{});var jPe=s(NM);W3e=n(jPe,"STRONG",{});var aEt=s(W3e);ZFr=r(aEt,"funnel"),aEt.forEach(t),eTr=r(jPe," \u2014 "),HH=n(jPe,"A",{href:!0});var nEt=s(HH);oTr=r(nEt,"TFFunnelForSequenceClassification"),nEt.forEach(t),rTr=r(jPe," (Funnel Transformer model)"),jPe.forEach(t),tTr=i(ae),qM=n(ae,"LI",{});var DPe=s(qM);Q3e=n(DPe,"STRONG",{});var sEt=s(Q3e);aTr=r(sEt,"gpt2"),sEt.forEach(t),nTr=r(DPe," \u2014 "),UH=n(DPe,"A",{href:!0});var lEt=s(UH);sTr=r(lEt,"TFGPT2ForSequenceClassification"),lEt.forEach(t),lTr=r(DPe," (OpenAI GPT-2 model)"),DPe.forEach(t),iTr=i(ae),jM=n(ae,"LI",{});var GPe=s(jM);H3e=n(GPe,"STRONG",{});var iEt=s(H3e);dTr=r(iEt,"gptj"),iEt.forEach(t),cTr=r(GPe," \u2014 "),JH=n(GPe,"A",{href:!0});var dEt=s(JH);fTr=r(dEt,"TFGPTJForSequenceClassification"),dEt.forEach(t),mTr=r(GPe," (GPT-J model)"),GPe.forEach(t),gTr=i(ae),DM=n(ae,"LI",{});var OPe=s(DM);U3e=n(OPe,"STRONG",{});var cEt=s(U3e);hTr=r(cEt,"layoutlm"),cEt.forEach(t),pTr=r(OPe," \u2014 "),YH=n(OPe,"A",{href:!0});var fEt=s(YH);_Tr=r(fEt,"TFLayoutLMForSequenceClassification"),fEt.forEach(t),uTr=r(OPe," (LayoutLM model)"),OPe.forEach(t),bTr=i(ae),GM=n(ae,"LI",{});var VPe=s(GM);J3e=n(VPe,"STRONG",{});var mEt=s(J3e);vTr=r(mEt,"longformer"),mEt.forEach(t),FTr=r(VPe," \u2014 "),KH=n(VPe,"A",{href:!0});var gEt=s(KH);TTr=r(gEt,"TFLongformerForSequenceClassification"),gEt.forEach(t),MTr=r(VPe," (Longformer model)"),VPe.forEach(t),ETr=i(ae),OM=n(ae,"LI",{});var XPe=s(OM);Y3e=n(XPe,"STRONG",{});var hEt=s(Y3e);CTr=r(hEt,"mobilebert"),hEt.forEach(t),wTr=r(XPe," \u2014 "),ZH=n(XPe,"A",{href:!0});var pEt=s(ZH);ATr=r(pEt,"TFMobileBertForSequenceClassification"),pEt.forEach(t),yTr=r(XPe," (MobileBERT model)"),XPe.forEach(t),LTr=i(ae),VM=n(ae,"LI",{});var zPe=s(VM);K3e=n(zPe,"STRONG",{});var _Et=s(K3e);xTr=r(_Et,"mpnet"),_Et.forEach(t),$Tr=r(zPe," \u2014 "),eU=n(zPe,"A",{href:!0});var uEt=s(eU);kTr=r(uEt,"TFMPNetForSequenceClassification"),uEt.forEach(t),STr=r(zPe," (MPNet model)"),zPe.forEach(t),RTr=i(ae),XM=n(ae,"LI",{});var WPe=s(XM);Z3e=n(WPe,"STRONG",{});var bEt=s(Z3e);PTr=r(bEt,"openai-gpt"),bEt.forEach(t),BTr=r(WPe," \u2014 "),oU=n(WPe,"A",{href:!0});var vEt=s(oU);ITr=r(vEt,"TFOpenAIGPTForSequenceClassification"),vEt.forEach(t),NTr=r(WPe," (OpenAI GPT model)"),WPe.forEach(t),qTr=i(ae),zM=n(ae,"LI",{});var QPe=s(zM);e0e=n(QPe,"STRONG",{});var FEt=s(e0e);jTr=r(FEt,"rembert"),FEt.forEach(t),DTr=r(QPe," \u2014 "),rU=n(QPe,"A",{href:!0});var TEt=s(rU);GTr=r(TEt,"TFRemBertForSequenceClassification"),TEt.forEach(t),OTr=r(QPe," (RemBERT model)"),QPe.forEach(t),VTr=i(ae),WM=n(ae,"LI",{});var HPe=s(WM);o0e=n(HPe,"STRONG",{});var MEt=s(o0e);XTr=r(MEt,"roberta"),MEt.forEach(t),zTr=r(HPe," \u2014 "),tU=n(HPe,"A",{href:!0});var EEt=s(tU);WTr=r(EEt,"TFRobertaForSequenceClassification"),EEt.forEach(t),QTr=r(HPe," (RoBERTa model)"),HPe.forEach(t),HTr=i(ae),QM=n(ae,"LI",{});var UPe=s(QM);r0e=n(UPe,"STRONG",{});var CEt=s(r0e);UTr=r(CEt,"roformer"),CEt.forEach(t),JTr=r(UPe," \u2014 "),aU=n(UPe,"A",{href:!0});var wEt=s(aU);YTr=r(wEt,"TFRoFormerForSequenceClassification"),wEt.forEach(t),KTr=r(UPe," (RoFormer model)"),UPe.forEach(t),ZTr=i(ae),HM=n(ae,"LI",{});var JPe=s(HM);t0e=n(JPe,"STRONG",{});var AEt=s(t0e);e7r=r(AEt,"tapas"),AEt.forEach(t),o7r=r(JPe," \u2014 "),nU=n(JPe,"A",{href:!0});var yEt=s(nU);r7r=r(yEt,"TFTapasForSequenceClassification"),yEt.forEach(t),t7r=r(JPe," (TAPAS model)"),JPe.forEach(t),a7r=i(ae),UM=n(ae,"LI",{});var YPe=s(UM);a0e=n(YPe,"STRONG",{});var LEt=s(a0e);n7r=r(LEt,"transfo-xl"),LEt.forEach(t),s7r=r(YPe," \u2014 "),sU=n(YPe,"A",{href:!0});var xEt=s(sU);l7r=r(xEt,"TFTransfoXLForSequenceClassification"),xEt.forEach(t),i7r=r(YPe," (Transformer-XL model)"),YPe.forEach(t),d7r=i(ae),JM=n(ae,"LI",{});var KPe=s(JM);n0e=n(KPe,"STRONG",{});var $Et=s(n0e);c7r=r($Et,"xlm"),$Et.forEach(t),f7r=r(KPe," \u2014 "),lU=n(KPe,"A",{href:!0});var kEt=s(lU);m7r=r(kEt,"TFXLMForSequenceClassification"),kEt.forEach(t),g7r=r(KPe," (XLM model)"),KPe.forEach(t),h7r=i(ae),YM=n(ae,"LI",{});var ZPe=s(YM);s0e=n(ZPe,"STRONG",{});var SEt=s(s0e);p7r=r(SEt,"xlm-roberta"),SEt.forEach(t),_7r=r(ZPe," \u2014 "),iU=n(ZPe,"A",{href:!0});var REt=s(iU);u7r=r(REt,"TFXLMRobertaForSequenceClassification"),REt.forEach(t),b7r=r(ZPe," (XLM-RoBERTa model)"),ZPe.forEach(t),v7r=i(ae),KM=n(ae,"LI",{});var eBe=s(KM);l0e=n(eBe,"STRONG",{});var PEt=s(l0e);F7r=r(PEt,"xlnet"),PEt.forEach(t),T7r=r(eBe," \u2014 "),dU=n(eBe,"A",{href:!0});var BEt=s(dU);M7r=r(BEt,"TFXLNetForSequenceClassification"),BEt.forEach(t),E7r=r(eBe," (XLNet model)"),eBe.forEach(t),ae.forEach(t),C7r=i(Al),T(ZM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),wje=i(f),ic=n(f,"H2",{class:!0});var kGe=s(ic);e4=n(kGe,"A",{id:!0,class:!0,href:!0});var IEt=s(e4);i0e=n(IEt,"SPAN",{});var NEt=s(i0e);T(z8.$$.fragment,NEt),NEt.forEach(t),IEt.forEach(t),w7r=i(kGe),d0e=n(kGe,"SPAN",{});var qEt=s(d0e);A7r=r(qEt,"TFAutoModelForMultipleChoice"),qEt.forEach(t),kGe.forEach(t),Aje=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(W8.$$.fragment,yl),y7r=i(yl),dc=n(yl,"P",{});var Aee=s(dc);L7r=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cU=n(Aee,"A",{href:!0});var jEt=s(cU);x7r=r(jEt,"from_pretrained()"),jEt.forEach(t),$7r=r(Aee," class method or the "),fU=n(Aee,"A",{href:!0});var DEt=s(fU);k7r=r(DEt,"from_config()"),DEt.forEach(t),S7r=r(Aee,` class
method.`),Aee.forEach(t),R7r=i(yl),Q8=n(yl,"P",{});var SGe=s(Q8);P7r=r(SGe,"This class cannot be instantiated directly using "),c0e=n(SGe,"CODE",{});var GEt=s(c0e);B7r=r(GEt,"__init__()"),GEt.forEach(t),I7r=r(SGe," (throws an error)."),SGe.forEach(t),N7r=i(yl),Pt=n(yl,"DIV",{class:!0});var G6=s(Pt);T(H8.$$.fragment,G6),q7r=i(G6),f0e=n(G6,"P",{});var OEt=s(f0e);j7r=r(OEt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),OEt.forEach(t),D7r=i(G6),cc=n(G6,"P",{});var yee=s(cc);G7r=r(yee,`Note:
Loading a model from its configuration file does `),m0e=n(yee,"STRONG",{});var VEt=s(m0e);O7r=r(VEt,"not"),VEt.forEach(t),V7r=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=n(yee,"A",{href:!0});var XEt=s(mU);X7r=r(XEt,"from_pretrained()"),XEt.forEach(t),z7r=r(yee," to load the model weights."),yee.forEach(t),W7r=i(G6),T(o4.$$.fragment,G6),G6.forEach(t),Q7r=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(U8.$$.fragment,Ll),H7r=i(Ll),g0e=n(Ll,"P",{});var zEt=s(g0e);U7r=r(zEt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zEt.forEach(t),J7r=i(Ll),sn=n(Ll,"P",{});var O6=s(sn);Y7r=r(O6,"The model class to instantiate is selected based on the "),h0e=n(O6,"CODE",{});var WEt=s(h0e);K7r=r(WEt,"model_type"),WEt.forEach(t),Z7r=r(O6,` property of the config object (either
passed as an argument or loaded from `),p0e=n(O6,"CODE",{});var QEt=s(p0e);eMr=r(QEt,"pretrained_model_name_or_path"),QEt.forEach(t),oMr=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_0e=n(O6,"CODE",{});var HEt=s(_0e);rMr=r(HEt,"pretrained_model_name_or_path"),HEt.forEach(t),tMr=r(O6,":"),O6.forEach(t),aMr=i(Ll),pe=n(Ll,"UL",{});var be=s(pe);r4=n(be,"LI",{});var oBe=s(r4);u0e=n(oBe,"STRONG",{});var UEt=s(u0e);nMr=r(UEt,"albert"),UEt.forEach(t),sMr=r(oBe," \u2014 "),gU=n(oBe,"A",{href:!0});var JEt=s(gU);lMr=r(JEt,"TFAlbertForMultipleChoice"),JEt.forEach(t),iMr=r(oBe," (ALBERT model)"),oBe.forEach(t),dMr=i(be),t4=n(be,"LI",{});var rBe=s(t4);b0e=n(rBe,"STRONG",{});var YEt=s(b0e);cMr=r(YEt,"bert"),YEt.forEach(t),fMr=r(rBe," \u2014 "),hU=n(rBe,"A",{href:!0});var KEt=s(hU);mMr=r(KEt,"TFBertForMultipleChoice"),KEt.forEach(t),gMr=r(rBe," (BERT model)"),rBe.forEach(t),hMr=i(be),a4=n(be,"LI",{});var tBe=s(a4);v0e=n(tBe,"STRONG",{});var ZEt=s(v0e);pMr=r(ZEt,"camembert"),ZEt.forEach(t),_Mr=r(tBe," \u2014 "),pU=n(tBe,"A",{href:!0});var eCt=s(pU);uMr=r(eCt,"TFCamembertForMultipleChoice"),eCt.forEach(t),bMr=r(tBe," (CamemBERT model)"),tBe.forEach(t),vMr=i(be),n4=n(be,"LI",{});var aBe=s(n4);F0e=n(aBe,"STRONG",{});var oCt=s(F0e);FMr=r(oCt,"convbert"),oCt.forEach(t),TMr=r(aBe," \u2014 "),_U=n(aBe,"A",{href:!0});var rCt=s(_U);MMr=r(rCt,"TFConvBertForMultipleChoice"),rCt.forEach(t),EMr=r(aBe," (ConvBERT model)"),aBe.forEach(t),CMr=i(be),s4=n(be,"LI",{});var nBe=s(s4);T0e=n(nBe,"STRONG",{});var tCt=s(T0e);wMr=r(tCt,"distilbert"),tCt.forEach(t),AMr=r(nBe," \u2014 "),uU=n(nBe,"A",{href:!0});var aCt=s(uU);yMr=r(aCt,"TFDistilBertForMultipleChoice"),aCt.forEach(t),LMr=r(nBe," (DistilBERT model)"),nBe.forEach(t),xMr=i(be),l4=n(be,"LI",{});var sBe=s(l4);M0e=n(sBe,"STRONG",{});var nCt=s(M0e);$Mr=r(nCt,"electra"),nCt.forEach(t),kMr=r(sBe," \u2014 "),bU=n(sBe,"A",{href:!0});var sCt=s(bU);SMr=r(sCt,"TFElectraForMultipleChoice"),sCt.forEach(t),RMr=r(sBe," (ELECTRA model)"),sBe.forEach(t),PMr=i(be),i4=n(be,"LI",{});var lBe=s(i4);E0e=n(lBe,"STRONG",{});var lCt=s(E0e);BMr=r(lCt,"flaubert"),lCt.forEach(t),IMr=r(lBe," \u2014 "),vU=n(lBe,"A",{href:!0});var iCt=s(vU);NMr=r(iCt,"TFFlaubertForMultipleChoice"),iCt.forEach(t),qMr=r(lBe," (FlauBERT model)"),lBe.forEach(t),jMr=i(be),d4=n(be,"LI",{});var iBe=s(d4);C0e=n(iBe,"STRONG",{});var dCt=s(C0e);DMr=r(dCt,"funnel"),dCt.forEach(t),GMr=r(iBe," \u2014 "),FU=n(iBe,"A",{href:!0});var cCt=s(FU);OMr=r(cCt,"TFFunnelForMultipleChoice"),cCt.forEach(t),VMr=r(iBe," (Funnel Transformer model)"),iBe.forEach(t),XMr=i(be),c4=n(be,"LI",{});var dBe=s(c4);w0e=n(dBe,"STRONG",{});var fCt=s(w0e);zMr=r(fCt,"longformer"),fCt.forEach(t),WMr=r(dBe," \u2014 "),TU=n(dBe,"A",{href:!0});var mCt=s(TU);QMr=r(mCt,"TFLongformerForMultipleChoice"),mCt.forEach(t),HMr=r(dBe," (Longformer model)"),dBe.forEach(t),UMr=i(be),f4=n(be,"LI",{});var cBe=s(f4);A0e=n(cBe,"STRONG",{});var gCt=s(A0e);JMr=r(gCt,"mobilebert"),gCt.forEach(t),YMr=r(cBe," \u2014 "),MU=n(cBe,"A",{href:!0});var hCt=s(MU);KMr=r(hCt,"TFMobileBertForMultipleChoice"),hCt.forEach(t),ZMr=r(cBe," (MobileBERT model)"),cBe.forEach(t),e4r=i(be),m4=n(be,"LI",{});var fBe=s(m4);y0e=n(fBe,"STRONG",{});var pCt=s(y0e);o4r=r(pCt,"mpnet"),pCt.forEach(t),r4r=r(fBe," \u2014 "),EU=n(fBe,"A",{href:!0});var _Ct=s(EU);t4r=r(_Ct,"TFMPNetForMultipleChoice"),_Ct.forEach(t),a4r=r(fBe," (MPNet model)"),fBe.forEach(t),n4r=i(be),g4=n(be,"LI",{});var mBe=s(g4);L0e=n(mBe,"STRONG",{});var uCt=s(L0e);s4r=r(uCt,"rembert"),uCt.forEach(t),l4r=r(mBe," \u2014 "),CU=n(mBe,"A",{href:!0});var bCt=s(CU);i4r=r(bCt,"TFRemBertForMultipleChoice"),bCt.forEach(t),d4r=r(mBe," (RemBERT model)"),mBe.forEach(t),c4r=i(be),h4=n(be,"LI",{});var gBe=s(h4);x0e=n(gBe,"STRONG",{});var vCt=s(x0e);f4r=r(vCt,"roberta"),vCt.forEach(t),m4r=r(gBe," \u2014 "),wU=n(gBe,"A",{href:!0});var FCt=s(wU);g4r=r(FCt,"TFRobertaForMultipleChoice"),FCt.forEach(t),h4r=r(gBe," (RoBERTa model)"),gBe.forEach(t),p4r=i(be),p4=n(be,"LI",{});var hBe=s(p4);$0e=n(hBe,"STRONG",{});var TCt=s($0e);_4r=r(TCt,"roformer"),TCt.forEach(t),u4r=r(hBe," \u2014 "),AU=n(hBe,"A",{href:!0});var MCt=s(AU);b4r=r(MCt,"TFRoFormerForMultipleChoice"),MCt.forEach(t),v4r=r(hBe," (RoFormer model)"),hBe.forEach(t),F4r=i(be),_4=n(be,"LI",{});var pBe=s(_4);k0e=n(pBe,"STRONG",{});var ECt=s(k0e);T4r=r(ECt,"xlm"),ECt.forEach(t),M4r=r(pBe," \u2014 "),yU=n(pBe,"A",{href:!0});var CCt=s(yU);E4r=r(CCt,"TFXLMForMultipleChoice"),CCt.forEach(t),C4r=r(pBe," (XLM model)"),pBe.forEach(t),w4r=i(be),u4=n(be,"LI",{});var _Be=s(u4);S0e=n(_Be,"STRONG",{});var wCt=s(S0e);A4r=r(wCt,"xlm-roberta"),wCt.forEach(t),y4r=r(_Be," \u2014 "),LU=n(_Be,"A",{href:!0});var ACt=s(LU);L4r=r(ACt,"TFXLMRobertaForMultipleChoice"),ACt.forEach(t),x4r=r(_Be," (XLM-RoBERTa model)"),_Be.forEach(t),$4r=i(be),b4=n(be,"LI",{});var uBe=s(b4);R0e=n(uBe,"STRONG",{});var yCt=s(R0e);k4r=r(yCt,"xlnet"),yCt.forEach(t),S4r=r(uBe," \u2014 "),xU=n(uBe,"A",{href:!0});var LCt=s(xU);R4r=r(LCt,"TFXLNetForMultipleChoice"),LCt.forEach(t),P4r=r(uBe," (XLNet model)"),uBe.forEach(t),be.forEach(t),B4r=i(Ll),T(v4.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),yje=i(f),fc=n(f,"H2",{class:!0});var RGe=s(fc);F4=n(RGe,"A",{id:!0,class:!0,href:!0});var xCt=s(F4);P0e=n(xCt,"SPAN",{});var $Ct=s(P0e);T(J8.$$.fragment,$Ct),$Ct.forEach(t),xCt.forEach(t),I4r=i(RGe),B0e=n(RGe,"SPAN",{});var kCt=s(B0e);N4r=r(kCt,"TFAutoModelForNextSentencePrediction"),kCt.forEach(t),RGe.forEach(t),Lje=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(Y8.$$.fragment,xl),q4r=i(xl),mc=n(xl,"P",{});var Lee=s(mc);j4r=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$U=n(Lee,"A",{href:!0});var SCt=s($U);D4r=r(SCt,"from_pretrained()"),SCt.forEach(t),G4r=r(Lee," class method or the "),kU=n(Lee,"A",{href:!0});var RCt=s(kU);O4r=r(RCt,"from_config()"),RCt.forEach(t),V4r=r(Lee,` class
method.`),Lee.forEach(t),X4r=i(xl),K8=n(xl,"P",{});var PGe=s(K8);z4r=r(PGe,"This class cannot be instantiated directly using "),I0e=n(PGe,"CODE",{});var PCt=s(I0e);W4r=r(PCt,"__init__()"),PCt.forEach(t),Q4r=r(PGe," (throws an error)."),PGe.forEach(t),H4r=i(xl),Bt=n(xl,"DIV",{class:!0});var V6=s(Bt);T(Z8.$$.fragment,V6),U4r=i(V6),N0e=n(V6,"P",{});var BCt=s(N0e);J4r=r(BCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),BCt.forEach(t),Y4r=i(V6),gc=n(V6,"P",{});var xee=s(gc);K4r=r(xee,`Note:
Loading a model from its configuration file does `),q0e=n(xee,"STRONG",{});var ICt=s(q0e);Z4r=r(ICt,"not"),ICt.forEach(t),eEr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=n(xee,"A",{href:!0});var NCt=s(SU);oEr=r(NCt,"from_pretrained()"),NCt.forEach(t),rEr=r(xee," to load the model weights."),xee.forEach(t),tEr=i(V6),T(T4.$$.fragment,V6),V6.forEach(t),aEr=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(e9.$$.fragment,$l),nEr=i($l),j0e=n($l,"P",{});var qCt=s(j0e);sEr=r(qCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qCt.forEach(t),lEr=i($l),ln=n($l,"P",{});var X6=s(ln);iEr=r(X6,"The model class to instantiate is selected based on the "),D0e=n(X6,"CODE",{});var jCt=s(D0e);dEr=r(jCt,"model_type"),jCt.forEach(t),cEr=r(X6,` property of the config object (either
passed as an argument or loaded from `),G0e=n(X6,"CODE",{});var DCt=s(G0e);fEr=r(DCt,"pretrained_model_name_or_path"),DCt.forEach(t),mEr=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O0e=n(X6,"CODE",{});var GCt=s(O0e);gEr=r(GCt,"pretrained_model_name_or_path"),GCt.forEach(t),hEr=r(X6,":"),X6.forEach(t),pEr=i($l),o9=n($l,"UL",{});var BGe=s(o9);M4=n(BGe,"LI",{});var bBe=s(M4);V0e=n(bBe,"STRONG",{});var OCt=s(V0e);_Er=r(OCt,"bert"),OCt.forEach(t),uEr=r(bBe," \u2014 "),RU=n(bBe,"A",{href:!0});var VCt=s(RU);bEr=r(VCt,"TFBertForNextSentencePrediction"),VCt.forEach(t),vEr=r(bBe," (BERT model)"),bBe.forEach(t),FEr=i(BGe),E4=n(BGe,"LI",{});var vBe=s(E4);X0e=n(vBe,"STRONG",{});var XCt=s(X0e);TEr=r(XCt,"mobilebert"),XCt.forEach(t),MEr=r(vBe," \u2014 "),PU=n(vBe,"A",{href:!0});var zCt=s(PU);EEr=r(zCt,"TFMobileBertForNextSentencePrediction"),zCt.forEach(t),CEr=r(vBe," (MobileBERT model)"),vBe.forEach(t),BGe.forEach(t),wEr=i($l),T(C4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),xje=i(f),hc=n(f,"H2",{class:!0});var IGe=s(hc);w4=n(IGe,"A",{id:!0,class:!0,href:!0});var WCt=s(w4);z0e=n(WCt,"SPAN",{});var QCt=s(z0e);T(r9.$$.fragment,QCt),QCt.forEach(t),WCt.forEach(t),AEr=i(IGe),W0e=n(IGe,"SPAN",{});var HCt=s(W0e);yEr=r(HCt,"TFAutoModelForTableQuestionAnswering"),HCt.forEach(t),IGe.forEach(t),$je=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(t9.$$.fragment,kl),LEr=i(kl),pc=n(kl,"P",{});var $ee=s(pc);xEr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BU=n($ee,"A",{href:!0});var UCt=s(BU);$Er=r(UCt,"from_pretrained()"),UCt.forEach(t),kEr=r($ee," class method or the "),IU=n($ee,"A",{href:!0});var JCt=s(IU);SEr=r(JCt,"from_config()"),JCt.forEach(t),REr=r($ee,` class
method.`),$ee.forEach(t),PEr=i(kl),a9=n(kl,"P",{});var NGe=s(a9);BEr=r(NGe,"This class cannot be instantiated directly using "),Q0e=n(NGe,"CODE",{});var YCt=s(Q0e);IEr=r(YCt,"__init__()"),YCt.forEach(t),NEr=r(NGe," (throws an error)."),NGe.forEach(t),qEr=i(kl),It=n(kl,"DIV",{class:!0});var z6=s(It);T(n9.$$.fragment,z6),jEr=i(z6),H0e=n(z6,"P",{});var KCt=s(H0e);DEr=r(KCt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),KCt.forEach(t),GEr=i(z6),_c=n(z6,"P",{});var kee=s(_c);OEr=r(kee,`Note:
Loading a model from its configuration file does `),U0e=n(kee,"STRONG",{});var ZCt=s(U0e);VEr=r(ZCt,"not"),ZCt.forEach(t),XEr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=n(kee,"A",{href:!0});var e5t=s(NU);zEr=r(e5t,"from_pretrained()"),e5t.forEach(t),WEr=r(kee," to load the model weights."),kee.forEach(t),QEr=i(z6),T(A4.$$.fragment,z6),z6.forEach(t),HEr=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(s9.$$.fragment,Sl),UEr=i(Sl),J0e=n(Sl,"P",{});var o5t=s(J0e);JEr=r(o5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),o5t.forEach(t),YEr=i(Sl),dn=n(Sl,"P",{});var W6=s(dn);KEr=r(W6,"The model class to instantiate is selected based on the "),Y0e=n(W6,"CODE",{});var r5t=s(Y0e);ZEr=r(r5t,"model_type"),r5t.forEach(t),eCr=r(W6,` property of the config object (either
passed as an argument or loaded from `),K0e=n(W6,"CODE",{});var t5t=s(K0e);oCr=r(t5t,"pretrained_model_name_or_path"),t5t.forEach(t),rCr=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=n(W6,"CODE",{});var a5t=s(Z0e);tCr=r(a5t,"pretrained_model_name_or_path"),a5t.forEach(t),aCr=r(W6,":"),W6.forEach(t),nCr=i(Sl),eFe=n(Sl,"UL",{});var n5t=s(eFe);y4=n(n5t,"LI",{});var FBe=s(y4);oFe=n(FBe,"STRONG",{});var s5t=s(oFe);sCr=r(s5t,"tapas"),s5t.forEach(t),lCr=r(FBe," \u2014 "),qU=n(FBe,"A",{href:!0});var l5t=s(qU);iCr=r(l5t,"TFTapasForQuestionAnswering"),l5t.forEach(t),dCr=r(FBe," (TAPAS model)"),FBe.forEach(t),n5t.forEach(t),cCr=i(Sl),T(L4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),kje=i(f),uc=n(f,"H2",{class:!0});var qGe=s(uc);x4=n(qGe,"A",{id:!0,class:!0,href:!0});var i5t=s(x4);rFe=n(i5t,"SPAN",{});var d5t=s(rFe);T(l9.$$.fragment,d5t),d5t.forEach(t),i5t.forEach(t),fCr=i(qGe),tFe=n(qGe,"SPAN",{});var c5t=s(tFe);mCr=r(c5t,"TFAutoModelForTokenClassification"),c5t.forEach(t),qGe.forEach(t),Sje=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(i9.$$.fragment,Rl),gCr=i(Rl),bc=n(Rl,"P",{});var See=s(bc);hCr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jU=n(See,"A",{href:!0});var f5t=s(jU);pCr=r(f5t,"from_pretrained()"),f5t.forEach(t),_Cr=r(See," class method or the "),DU=n(See,"A",{href:!0});var m5t=s(DU);uCr=r(m5t,"from_config()"),m5t.forEach(t),bCr=r(See,` class
method.`),See.forEach(t),vCr=i(Rl),d9=n(Rl,"P",{});var jGe=s(d9);FCr=r(jGe,"This class cannot be instantiated directly using "),aFe=n(jGe,"CODE",{});var g5t=s(aFe);TCr=r(g5t,"__init__()"),g5t.forEach(t),MCr=r(jGe," (throws an error)."),jGe.forEach(t),ECr=i(Rl),Nt=n(Rl,"DIV",{class:!0});var Q6=s(Nt);T(c9.$$.fragment,Q6),CCr=i(Q6),nFe=n(Q6,"P",{});var h5t=s(nFe);wCr=r(h5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),h5t.forEach(t),ACr=i(Q6),vc=n(Q6,"P",{});var Ree=s(vc);yCr=r(Ree,`Note:
Loading a model from its configuration file does `),sFe=n(Ree,"STRONG",{});var p5t=s(sFe);LCr=r(p5t,"not"),p5t.forEach(t),xCr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=n(Ree,"A",{href:!0});var _5t=s(GU);$Cr=r(_5t,"from_pretrained()"),_5t.forEach(t),kCr=r(Ree," to load the model weights."),Ree.forEach(t),SCr=i(Q6),T($4.$$.fragment,Q6),Q6.forEach(t),RCr=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(f9.$$.fragment,Pl),PCr=i(Pl),lFe=n(Pl,"P",{});var u5t=s(lFe);BCr=r(u5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),u5t.forEach(t),ICr=i(Pl),cn=n(Pl,"P",{});var H6=s(cn);NCr=r(H6,"The model class to instantiate is selected based on the "),iFe=n(H6,"CODE",{});var b5t=s(iFe);qCr=r(b5t,"model_type"),b5t.forEach(t),jCr=r(H6,` property of the config object (either
passed as an argument or loaded from `),dFe=n(H6,"CODE",{});var v5t=s(dFe);DCr=r(v5t,"pretrained_model_name_or_path"),v5t.forEach(t),GCr=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=n(H6,"CODE",{});var F5t=s(cFe);OCr=r(F5t,"pretrained_model_name_or_path"),F5t.forEach(t),VCr=r(H6,":"),H6.forEach(t),XCr=i(Pl),de=n(Pl,"UL",{});var me=s(de);k4=n(me,"LI",{});var TBe=s(k4);fFe=n(TBe,"STRONG",{});var T5t=s(fFe);zCr=r(T5t,"albert"),T5t.forEach(t),WCr=r(TBe," \u2014 "),OU=n(TBe,"A",{href:!0});var M5t=s(OU);QCr=r(M5t,"TFAlbertForTokenClassification"),M5t.forEach(t),HCr=r(TBe," (ALBERT model)"),TBe.forEach(t),UCr=i(me),S4=n(me,"LI",{});var MBe=s(S4);mFe=n(MBe,"STRONG",{});var E5t=s(mFe);JCr=r(E5t,"bert"),E5t.forEach(t),YCr=r(MBe," \u2014 "),VU=n(MBe,"A",{href:!0});var C5t=s(VU);KCr=r(C5t,"TFBertForTokenClassification"),C5t.forEach(t),ZCr=r(MBe," (BERT model)"),MBe.forEach(t),e5r=i(me),R4=n(me,"LI",{});var EBe=s(R4);gFe=n(EBe,"STRONG",{});var w5t=s(gFe);o5r=r(w5t,"camembert"),w5t.forEach(t),r5r=r(EBe," \u2014 "),XU=n(EBe,"A",{href:!0});var A5t=s(XU);t5r=r(A5t,"TFCamembertForTokenClassification"),A5t.forEach(t),a5r=r(EBe," (CamemBERT model)"),EBe.forEach(t),n5r=i(me),P4=n(me,"LI",{});var CBe=s(P4);hFe=n(CBe,"STRONG",{});var y5t=s(hFe);s5r=r(y5t,"convbert"),y5t.forEach(t),l5r=r(CBe," \u2014 "),zU=n(CBe,"A",{href:!0});var L5t=s(zU);i5r=r(L5t,"TFConvBertForTokenClassification"),L5t.forEach(t),d5r=r(CBe," (ConvBERT model)"),CBe.forEach(t),c5r=i(me),B4=n(me,"LI",{});var wBe=s(B4);pFe=n(wBe,"STRONG",{});var x5t=s(pFe);f5r=r(x5t,"deberta"),x5t.forEach(t),m5r=r(wBe," \u2014 "),WU=n(wBe,"A",{href:!0});var $5t=s(WU);g5r=r($5t,"TFDebertaForTokenClassification"),$5t.forEach(t),h5r=r(wBe," (DeBERTa model)"),wBe.forEach(t),p5r=i(me),I4=n(me,"LI",{});var ABe=s(I4);_Fe=n(ABe,"STRONG",{});var k5t=s(_Fe);_5r=r(k5t,"deberta-v2"),k5t.forEach(t),u5r=r(ABe," \u2014 "),QU=n(ABe,"A",{href:!0});var S5t=s(QU);b5r=r(S5t,"TFDebertaV2ForTokenClassification"),S5t.forEach(t),v5r=r(ABe," (DeBERTa-v2 model)"),ABe.forEach(t),F5r=i(me),N4=n(me,"LI",{});var yBe=s(N4);uFe=n(yBe,"STRONG",{});var R5t=s(uFe);T5r=r(R5t,"distilbert"),R5t.forEach(t),M5r=r(yBe," \u2014 "),HU=n(yBe,"A",{href:!0});var P5t=s(HU);E5r=r(P5t,"TFDistilBertForTokenClassification"),P5t.forEach(t),C5r=r(yBe," (DistilBERT model)"),yBe.forEach(t),w5r=i(me),q4=n(me,"LI",{});var LBe=s(q4);bFe=n(LBe,"STRONG",{});var B5t=s(bFe);A5r=r(B5t,"electra"),B5t.forEach(t),y5r=r(LBe," \u2014 "),UU=n(LBe,"A",{href:!0});var I5t=s(UU);L5r=r(I5t,"TFElectraForTokenClassification"),I5t.forEach(t),x5r=r(LBe," (ELECTRA model)"),LBe.forEach(t),$5r=i(me),j4=n(me,"LI",{});var xBe=s(j4);vFe=n(xBe,"STRONG",{});var N5t=s(vFe);k5r=r(N5t,"flaubert"),N5t.forEach(t),S5r=r(xBe," \u2014 "),JU=n(xBe,"A",{href:!0});var q5t=s(JU);R5r=r(q5t,"TFFlaubertForTokenClassification"),q5t.forEach(t),P5r=r(xBe," (FlauBERT model)"),xBe.forEach(t),B5r=i(me),D4=n(me,"LI",{});var $Be=s(D4);FFe=n($Be,"STRONG",{});var j5t=s(FFe);I5r=r(j5t,"funnel"),j5t.forEach(t),N5r=r($Be," \u2014 "),YU=n($Be,"A",{href:!0});var D5t=s(YU);q5r=r(D5t,"TFFunnelForTokenClassification"),D5t.forEach(t),j5r=r($Be," (Funnel Transformer model)"),$Be.forEach(t),D5r=i(me),G4=n(me,"LI",{});var kBe=s(G4);TFe=n(kBe,"STRONG",{});var G5t=s(TFe);G5r=r(G5t,"layoutlm"),G5t.forEach(t),O5r=r(kBe," \u2014 "),KU=n(kBe,"A",{href:!0});var O5t=s(KU);V5r=r(O5t,"TFLayoutLMForTokenClassification"),O5t.forEach(t),X5r=r(kBe," (LayoutLM model)"),kBe.forEach(t),z5r=i(me),O4=n(me,"LI",{});var SBe=s(O4);MFe=n(SBe,"STRONG",{});var V5t=s(MFe);W5r=r(V5t,"longformer"),V5t.forEach(t),Q5r=r(SBe," \u2014 "),ZU=n(SBe,"A",{href:!0});var X5t=s(ZU);H5r=r(X5t,"TFLongformerForTokenClassification"),X5t.forEach(t),U5r=r(SBe," (Longformer model)"),SBe.forEach(t),J5r=i(me),V4=n(me,"LI",{});var RBe=s(V4);EFe=n(RBe,"STRONG",{});var z5t=s(EFe);Y5r=r(z5t,"mobilebert"),z5t.forEach(t),K5r=r(RBe," \u2014 "),eJ=n(RBe,"A",{href:!0});var W5t=s(eJ);Z5r=r(W5t,"TFMobileBertForTokenClassification"),W5t.forEach(t),ewr=r(RBe," (MobileBERT model)"),RBe.forEach(t),owr=i(me),X4=n(me,"LI",{});var PBe=s(X4);CFe=n(PBe,"STRONG",{});var Q5t=s(CFe);rwr=r(Q5t,"mpnet"),Q5t.forEach(t),twr=r(PBe," \u2014 "),oJ=n(PBe,"A",{href:!0});var H5t=s(oJ);awr=r(H5t,"TFMPNetForTokenClassification"),H5t.forEach(t),nwr=r(PBe," (MPNet model)"),PBe.forEach(t),swr=i(me),z4=n(me,"LI",{});var BBe=s(z4);wFe=n(BBe,"STRONG",{});var U5t=s(wFe);lwr=r(U5t,"rembert"),U5t.forEach(t),iwr=r(BBe," \u2014 "),rJ=n(BBe,"A",{href:!0});var J5t=s(rJ);dwr=r(J5t,"TFRemBertForTokenClassification"),J5t.forEach(t),cwr=r(BBe," (RemBERT model)"),BBe.forEach(t),fwr=i(me),W4=n(me,"LI",{});var IBe=s(W4);AFe=n(IBe,"STRONG",{});var Y5t=s(AFe);mwr=r(Y5t,"roberta"),Y5t.forEach(t),gwr=r(IBe," \u2014 "),tJ=n(IBe,"A",{href:!0});var K5t=s(tJ);hwr=r(K5t,"TFRobertaForTokenClassification"),K5t.forEach(t),pwr=r(IBe," (RoBERTa model)"),IBe.forEach(t),_wr=i(me),Q4=n(me,"LI",{});var NBe=s(Q4);yFe=n(NBe,"STRONG",{});var Z5t=s(yFe);uwr=r(Z5t,"roformer"),Z5t.forEach(t),bwr=r(NBe," \u2014 "),aJ=n(NBe,"A",{href:!0});var ewt=s(aJ);vwr=r(ewt,"TFRoFormerForTokenClassification"),ewt.forEach(t),Fwr=r(NBe," (RoFormer model)"),NBe.forEach(t),Twr=i(me),H4=n(me,"LI",{});var qBe=s(H4);LFe=n(qBe,"STRONG",{});var owt=s(LFe);Mwr=r(owt,"xlm"),owt.forEach(t),Ewr=r(qBe," \u2014 "),nJ=n(qBe,"A",{href:!0});var rwt=s(nJ);Cwr=r(rwt,"TFXLMForTokenClassification"),rwt.forEach(t),wwr=r(qBe," (XLM model)"),qBe.forEach(t),Awr=i(me),U4=n(me,"LI",{});var jBe=s(U4);xFe=n(jBe,"STRONG",{});var twt=s(xFe);ywr=r(twt,"xlm-roberta"),twt.forEach(t),Lwr=r(jBe," \u2014 "),sJ=n(jBe,"A",{href:!0});var awt=s(sJ);xwr=r(awt,"TFXLMRobertaForTokenClassification"),awt.forEach(t),$wr=r(jBe," (XLM-RoBERTa model)"),jBe.forEach(t),kwr=i(me),J4=n(me,"LI",{});var DBe=s(J4);$Fe=n(DBe,"STRONG",{});var nwt=s($Fe);Swr=r(nwt,"xlnet"),nwt.forEach(t),Rwr=r(DBe," \u2014 "),lJ=n(DBe,"A",{href:!0});var swt=s(lJ);Pwr=r(swt,"TFXLNetForTokenClassification"),swt.forEach(t),Bwr=r(DBe," (XLNet model)"),DBe.forEach(t),me.forEach(t),Iwr=i(Pl),T(Y4.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),Rje=i(f),Fc=n(f,"H2",{class:!0});var DGe=s(Fc);K4=n(DGe,"A",{id:!0,class:!0,href:!0});var lwt=s(K4);kFe=n(lwt,"SPAN",{});var iwt=s(kFe);T(m9.$$.fragment,iwt),iwt.forEach(t),lwt.forEach(t),Nwr=i(DGe),SFe=n(DGe,"SPAN",{});var dwt=s(SFe);qwr=r(dwt,"TFAutoModelForQuestionAnswering"),dwt.forEach(t),DGe.forEach(t),Pje=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(g9.$$.fragment,Bl),jwr=i(Bl),Tc=n(Bl,"P",{});var Pee=s(Tc);Dwr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iJ=n(Pee,"A",{href:!0});var cwt=s(iJ);Gwr=r(cwt,"from_pretrained()"),cwt.forEach(t),Owr=r(Pee," class method or the "),dJ=n(Pee,"A",{href:!0});var fwt=s(dJ);Vwr=r(fwt,"from_config()"),fwt.forEach(t),Xwr=r(Pee,` class
method.`),Pee.forEach(t),zwr=i(Bl),h9=n(Bl,"P",{});var GGe=s(h9);Wwr=r(GGe,"This class cannot be instantiated directly using "),RFe=n(GGe,"CODE",{});var mwt=s(RFe);Qwr=r(mwt,"__init__()"),mwt.forEach(t),Hwr=r(GGe," (throws an error)."),GGe.forEach(t),Uwr=i(Bl),qt=n(Bl,"DIV",{class:!0});var U6=s(qt);T(p9.$$.fragment,U6),Jwr=i(U6),PFe=n(U6,"P",{});var gwt=s(PFe);Ywr=r(gwt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gwt.forEach(t),Kwr=i(U6),Mc=n(U6,"P",{});var Bee=s(Mc);Zwr=r(Bee,`Note:
Loading a model from its configuration file does `),BFe=n(Bee,"STRONG",{});var hwt=s(BFe);e6r=r(hwt,"not"),hwt.forEach(t),o6r=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=n(Bee,"A",{href:!0});var pwt=s(cJ);r6r=r(pwt,"from_pretrained()"),pwt.forEach(t),t6r=r(Bee," to load the model weights."),Bee.forEach(t),a6r=i(U6),T(Z4.$$.fragment,U6),U6.forEach(t),n6r=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(_9.$$.fragment,Il),s6r=i(Il),IFe=n(Il,"P",{});var _wt=s(IFe);l6r=r(_wt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_wt.forEach(t),i6r=i(Il),fn=n(Il,"P",{});var J6=s(fn);d6r=r(J6,"The model class to instantiate is selected based on the "),NFe=n(J6,"CODE",{});var uwt=s(NFe);c6r=r(uwt,"model_type"),uwt.forEach(t),f6r=r(J6,` property of the config object (either
passed as an argument or loaded from `),qFe=n(J6,"CODE",{});var bwt=s(qFe);m6r=r(bwt,"pretrained_model_name_or_path"),bwt.forEach(t),g6r=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=n(J6,"CODE",{});var vwt=s(jFe);h6r=r(vwt,"pretrained_model_name_or_path"),vwt.forEach(t),p6r=r(J6,":"),J6.forEach(t),_6r=i(Il),ce=n(Il,"UL",{});var ge=s(ce);eE=n(ge,"LI",{});var GBe=s(eE);DFe=n(GBe,"STRONG",{});var Fwt=s(DFe);u6r=r(Fwt,"albert"),Fwt.forEach(t),b6r=r(GBe," \u2014 "),fJ=n(GBe,"A",{href:!0});var Twt=s(fJ);v6r=r(Twt,"TFAlbertForQuestionAnswering"),Twt.forEach(t),F6r=r(GBe," (ALBERT model)"),GBe.forEach(t),T6r=i(ge),oE=n(ge,"LI",{});var OBe=s(oE);GFe=n(OBe,"STRONG",{});var Mwt=s(GFe);M6r=r(Mwt,"bert"),Mwt.forEach(t),E6r=r(OBe," \u2014 "),mJ=n(OBe,"A",{href:!0});var Ewt=s(mJ);C6r=r(Ewt,"TFBertForQuestionAnswering"),Ewt.forEach(t),w6r=r(OBe," (BERT model)"),OBe.forEach(t),A6r=i(ge),rE=n(ge,"LI",{});var VBe=s(rE);OFe=n(VBe,"STRONG",{});var Cwt=s(OFe);y6r=r(Cwt,"camembert"),Cwt.forEach(t),L6r=r(VBe," \u2014 "),gJ=n(VBe,"A",{href:!0});var wwt=s(gJ);x6r=r(wwt,"TFCamembertForQuestionAnswering"),wwt.forEach(t),$6r=r(VBe," (CamemBERT model)"),VBe.forEach(t),k6r=i(ge),tE=n(ge,"LI",{});var XBe=s(tE);VFe=n(XBe,"STRONG",{});var Awt=s(VFe);S6r=r(Awt,"convbert"),Awt.forEach(t),R6r=r(XBe," \u2014 "),hJ=n(XBe,"A",{href:!0});var ywt=s(hJ);P6r=r(ywt,"TFConvBertForQuestionAnswering"),ywt.forEach(t),B6r=r(XBe," (ConvBERT model)"),XBe.forEach(t),I6r=i(ge),aE=n(ge,"LI",{});var zBe=s(aE);XFe=n(zBe,"STRONG",{});var Lwt=s(XFe);N6r=r(Lwt,"deberta"),Lwt.forEach(t),q6r=r(zBe," \u2014 "),pJ=n(zBe,"A",{href:!0});var xwt=s(pJ);j6r=r(xwt,"TFDebertaForQuestionAnswering"),xwt.forEach(t),D6r=r(zBe," (DeBERTa model)"),zBe.forEach(t),G6r=i(ge),nE=n(ge,"LI",{});var WBe=s(nE);zFe=n(WBe,"STRONG",{});var $wt=s(zFe);O6r=r($wt,"deberta-v2"),$wt.forEach(t),V6r=r(WBe," \u2014 "),_J=n(WBe,"A",{href:!0});var kwt=s(_J);X6r=r(kwt,"TFDebertaV2ForQuestionAnswering"),kwt.forEach(t),z6r=r(WBe," (DeBERTa-v2 model)"),WBe.forEach(t),W6r=i(ge),sE=n(ge,"LI",{});var QBe=s(sE);WFe=n(QBe,"STRONG",{});var Swt=s(WFe);Q6r=r(Swt,"distilbert"),Swt.forEach(t),H6r=r(QBe," \u2014 "),uJ=n(QBe,"A",{href:!0});var Rwt=s(uJ);U6r=r(Rwt,"TFDistilBertForQuestionAnswering"),Rwt.forEach(t),J6r=r(QBe," (DistilBERT model)"),QBe.forEach(t),Y6r=i(ge),lE=n(ge,"LI",{});var HBe=s(lE);QFe=n(HBe,"STRONG",{});var Pwt=s(QFe);K6r=r(Pwt,"electra"),Pwt.forEach(t),Z6r=r(HBe," \u2014 "),bJ=n(HBe,"A",{href:!0});var Bwt=s(bJ);eAr=r(Bwt,"TFElectraForQuestionAnswering"),Bwt.forEach(t),oAr=r(HBe," (ELECTRA model)"),HBe.forEach(t),rAr=i(ge),iE=n(ge,"LI",{});var UBe=s(iE);HFe=n(UBe,"STRONG",{});var Iwt=s(HFe);tAr=r(Iwt,"flaubert"),Iwt.forEach(t),aAr=r(UBe," \u2014 "),vJ=n(UBe,"A",{href:!0});var Nwt=s(vJ);nAr=r(Nwt,"TFFlaubertForQuestionAnsweringSimple"),Nwt.forEach(t),sAr=r(UBe," (FlauBERT model)"),UBe.forEach(t),lAr=i(ge),dE=n(ge,"LI",{});var JBe=s(dE);UFe=n(JBe,"STRONG",{});var qwt=s(UFe);iAr=r(qwt,"funnel"),qwt.forEach(t),dAr=r(JBe," \u2014 "),FJ=n(JBe,"A",{href:!0});var jwt=s(FJ);cAr=r(jwt,"TFFunnelForQuestionAnswering"),jwt.forEach(t),fAr=r(JBe," (Funnel Transformer model)"),JBe.forEach(t),mAr=i(ge),cE=n(ge,"LI",{});var YBe=s(cE);JFe=n(YBe,"STRONG",{});var Dwt=s(JFe);gAr=r(Dwt,"gptj"),Dwt.forEach(t),hAr=r(YBe," \u2014 "),TJ=n(YBe,"A",{href:!0});var Gwt=s(TJ);pAr=r(Gwt,"TFGPTJForQuestionAnswering"),Gwt.forEach(t),_Ar=r(YBe," (GPT-J model)"),YBe.forEach(t),uAr=i(ge),fE=n(ge,"LI",{});var KBe=s(fE);YFe=n(KBe,"STRONG",{});var Owt=s(YFe);bAr=r(Owt,"longformer"),Owt.forEach(t),vAr=r(KBe," \u2014 "),MJ=n(KBe,"A",{href:!0});var Vwt=s(MJ);FAr=r(Vwt,"TFLongformerForQuestionAnswering"),Vwt.forEach(t),TAr=r(KBe," (Longformer model)"),KBe.forEach(t),MAr=i(ge),mE=n(ge,"LI",{});var ZBe=s(mE);KFe=n(ZBe,"STRONG",{});var Xwt=s(KFe);EAr=r(Xwt,"mobilebert"),Xwt.forEach(t),CAr=r(ZBe," \u2014 "),EJ=n(ZBe,"A",{href:!0});var zwt=s(EJ);wAr=r(zwt,"TFMobileBertForQuestionAnswering"),zwt.forEach(t),AAr=r(ZBe," (MobileBERT model)"),ZBe.forEach(t),yAr=i(ge),gE=n(ge,"LI",{});var eIe=s(gE);ZFe=n(eIe,"STRONG",{});var Wwt=s(ZFe);LAr=r(Wwt,"mpnet"),Wwt.forEach(t),xAr=r(eIe," \u2014 "),CJ=n(eIe,"A",{href:!0});var Qwt=s(CJ);$Ar=r(Qwt,"TFMPNetForQuestionAnswering"),Qwt.forEach(t),kAr=r(eIe," (MPNet model)"),eIe.forEach(t),SAr=i(ge),hE=n(ge,"LI",{});var oIe=s(hE);eTe=n(oIe,"STRONG",{});var Hwt=s(eTe);RAr=r(Hwt,"rembert"),Hwt.forEach(t),PAr=r(oIe," \u2014 "),wJ=n(oIe,"A",{href:!0});var Uwt=s(wJ);BAr=r(Uwt,"TFRemBertForQuestionAnswering"),Uwt.forEach(t),IAr=r(oIe," (RemBERT model)"),oIe.forEach(t),NAr=i(ge),pE=n(ge,"LI",{});var rIe=s(pE);oTe=n(rIe,"STRONG",{});var Jwt=s(oTe);qAr=r(Jwt,"roberta"),Jwt.forEach(t),jAr=r(rIe," \u2014 "),AJ=n(rIe,"A",{href:!0});var Ywt=s(AJ);DAr=r(Ywt,"TFRobertaForQuestionAnswering"),Ywt.forEach(t),GAr=r(rIe," (RoBERTa model)"),rIe.forEach(t),OAr=i(ge),_E=n(ge,"LI",{});var tIe=s(_E);rTe=n(tIe,"STRONG",{});var Kwt=s(rTe);VAr=r(Kwt,"roformer"),Kwt.forEach(t),XAr=r(tIe," \u2014 "),yJ=n(tIe,"A",{href:!0});var Zwt=s(yJ);zAr=r(Zwt,"TFRoFormerForQuestionAnswering"),Zwt.forEach(t),WAr=r(tIe," (RoFormer model)"),tIe.forEach(t),QAr=i(ge),uE=n(ge,"LI",{});var aIe=s(uE);tTe=n(aIe,"STRONG",{});var e6t=s(tTe);HAr=r(e6t,"xlm"),e6t.forEach(t),UAr=r(aIe," \u2014 "),LJ=n(aIe,"A",{href:!0});var o6t=s(LJ);JAr=r(o6t,"TFXLMForQuestionAnsweringSimple"),o6t.forEach(t),YAr=r(aIe," (XLM model)"),aIe.forEach(t),KAr=i(ge),bE=n(ge,"LI",{});var nIe=s(bE);aTe=n(nIe,"STRONG",{});var r6t=s(aTe);ZAr=r(r6t,"xlm-roberta"),r6t.forEach(t),eyr=r(nIe," \u2014 "),xJ=n(nIe,"A",{href:!0});var t6t=s(xJ);oyr=r(t6t,"TFXLMRobertaForQuestionAnswering"),t6t.forEach(t),ryr=r(nIe," (XLM-RoBERTa model)"),nIe.forEach(t),tyr=i(ge),vE=n(ge,"LI",{});var sIe=s(vE);nTe=n(sIe,"STRONG",{});var a6t=s(nTe);ayr=r(a6t,"xlnet"),a6t.forEach(t),nyr=r(sIe," \u2014 "),$J=n(sIe,"A",{href:!0});var n6t=s($J);syr=r(n6t,"TFXLNetForQuestionAnsweringSimple"),n6t.forEach(t),lyr=r(sIe," (XLNet model)"),sIe.forEach(t),ge.forEach(t),iyr=i(Il),T(FE.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),Bje=i(f),Ec=n(f,"H2",{class:!0});var OGe=s(Ec);TE=n(OGe,"A",{id:!0,class:!0,href:!0});var s6t=s(TE);sTe=n(s6t,"SPAN",{});var l6t=s(sTe);T(u9.$$.fragment,l6t),l6t.forEach(t),s6t.forEach(t),dyr=i(OGe),lTe=n(OGe,"SPAN",{});var i6t=s(lTe);cyr=r(i6t,"TFAutoModelForVision2Seq"),i6t.forEach(t),OGe.forEach(t),Ije=i(f),dr=n(f,"DIV",{class:!0});var Nl=s(dr);T(b9.$$.fragment,Nl),fyr=i(Nl),Cc=n(Nl,"P",{});var Iee=s(Cc);myr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kJ=n(Iee,"A",{href:!0});var d6t=s(kJ);gyr=r(d6t,"from_pretrained()"),d6t.forEach(t),hyr=r(Iee," class method or the "),SJ=n(Iee,"A",{href:!0});var c6t=s(SJ);pyr=r(c6t,"from_config()"),c6t.forEach(t),_yr=r(Iee,` class
method.`),Iee.forEach(t),uyr=i(Nl),v9=n(Nl,"P",{});var VGe=s(v9);byr=r(VGe,"This class cannot be instantiated directly using "),iTe=n(VGe,"CODE",{});var f6t=s(iTe);vyr=r(f6t,"__init__()"),f6t.forEach(t),Fyr=r(VGe," (throws an error)."),VGe.forEach(t),Tyr=i(Nl),jt=n(Nl,"DIV",{class:!0});var Y6=s(jt);T(F9.$$.fragment,Y6),Myr=i(Y6),dTe=n(Y6,"P",{});var m6t=s(dTe);Eyr=r(m6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),m6t.forEach(t),Cyr=i(Y6),wc=n(Y6,"P",{});var Nee=s(wc);wyr=r(Nee,`Note:
Loading a model from its configuration file does `),cTe=n(Nee,"STRONG",{});var g6t=s(cTe);Ayr=r(g6t,"not"),g6t.forEach(t),yyr=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=n(Nee,"A",{href:!0});var h6t=s(RJ);Lyr=r(h6t,"from_pretrained()"),h6t.forEach(t),xyr=r(Nee," to load the model weights."),Nee.forEach(t),$yr=i(Y6),T(ME.$$.fragment,Y6),Y6.forEach(t),kyr=i(Nl),Nr=n(Nl,"DIV",{class:!0});var ql=s(Nr);T(T9.$$.fragment,ql),Syr=i(ql),fTe=n(ql,"P",{});var p6t=s(fTe);Ryr=r(p6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),p6t.forEach(t),Pyr=i(ql),mn=n(ql,"P",{});var K6=s(mn);Byr=r(K6,"The model class to instantiate is selected based on the "),mTe=n(K6,"CODE",{});var _6t=s(mTe);Iyr=r(_6t,"model_type"),_6t.forEach(t),Nyr=r(K6,` property of the config object (either
passed as an argument or loaded from `),gTe=n(K6,"CODE",{});var u6t=s(gTe);qyr=r(u6t,"pretrained_model_name_or_path"),u6t.forEach(t),jyr=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hTe=n(K6,"CODE",{});var b6t=s(hTe);Dyr=r(b6t,"pretrained_model_name_or_path"),b6t.forEach(t),Gyr=r(K6,":"),K6.forEach(t),Oyr=i(ql),pTe=n(ql,"UL",{});var v6t=s(pTe);EE=n(v6t,"LI",{});var lIe=s(EE);_Te=n(lIe,"STRONG",{});var F6t=s(_Te);Vyr=r(F6t,"vision-encoder-decoder"),F6t.forEach(t),Xyr=r(lIe," \u2014 "),PJ=n(lIe,"A",{href:!0});var T6t=s(PJ);zyr=r(T6t,"TFVisionEncoderDecoderModel"),T6t.forEach(t),Wyr=r(lIe," (Vision Encoder decoder model)"),lIe.forEach(t),v6t.forEach(t),Qyr=i(ql),T(CE.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),Nje=i(f),Ac=n(f,"H2",{class:!0});var XGe=s(Ac);wE=n(XGe,"A",{id:!0,class:!0,href:!0});var M6t=s(wE);uTe=n(M6t,"SPAN",{});var E6t=s(uTe);T(M9.$$.fragment,E6t),E6t.forEach(t),M6t.forEach(t),Hyr=i(XGe),bTe=n(XGe,"SPAN",{});var C6t=s(bTe);Uyr=r(C6t,"TFAutoModelForSpeechSeq2Seq"),C6t.forEach(t),XGe.forEach(t),qje=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T(E9.$$.fragment,jl),Jyr=i(jl),yc=n(jl,"P",{});var qee=s(yc);Yyr=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BJ=n(qee,"A",{href:!0});var w6t=s(BJ);Kyr=r(w6t,"from_pretrained()"),w6t.forEach(t),Zyr=r(qee," class method or the "),IJ=n(qee,"A",{href:!0});var A6t=s(IJ);eLr=r(A6t,"from_config()"),A6t.forEach(t),oLr=r(qee,` class
method.`),qee.forEach(t),rLr=i(jl),C9=n(jl,"P",{});var zGe=s(C9);tLr=r(zGe,"This class cannot be instantiated directly using "),vTe=n(zGe,"CODE",{});var y6t=s(vTe);aLr=r(y6t,"__init__()"),y6t.forEach(t),nLr=r(zGe," (throws an error)."),zGe.forEach(t),sLr=i(jl),Dt=n(jl,"DIV",{class:!0});var Z6=s(Dt);T(w9.$$.fragment,Z6),lLr=i(Z6),FTe=n(Z6,"P",{});var L6t=s(FTe);iLr=r(L6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),L6t.forEach(t),dLr=i(Z6),Lc=n(Z6,"P",{});var jee=s(Lc);cLr=r(jee,`Note:
Loading a model from its configuration file does `),TTe=n(jee,"STRONG",{});var x6t=s(TTe);fLr=r(x6t,"not"),x6t.forEach(t),mLr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=n(jee,"A",{href:!0});var $6t=s(NJ);gLr=r($6t,"from_pretrained()"),$6t.forEach(t),hLr=r(jee," to load the model weights."),jee.forEach(t),pLr=i(Z6),T(AE.$$.fragment,Z6),Z6.forEach(t),_Lr=i(jl),qr=n(jl,"DIV",{class:!0});var Dl=s(qr);T(A9.$$.fragment,Dl),uLr=i(Dl),MTe=n(Dl,"P",{});var k6t=s(MTe);bLr=r(k6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),k6t.forEach(t),vLr=i(Dl),gn=n(Dl,"P",{});var eA=s(gn);FLr=r(eA,"The model class to instantiate is selected based on the "),ETe=n(eA,"CODE",{});var S6t=s(ETe);TLr=r(S6t,"model_type"),S6t.forEach(t),MLr=r(eA,` property of the config object (either
passed as an argument or loaded from `),CTe=n(eA,"CODE",{});var R6t=s(CTe);ELr=r(R6t,"pretrained_model_name_or_path"),R6t.forEach(t),CLr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=n(eA,"CODE",{});var P6t=s(wTe);wLr=r(P6t,"pretrained_model_name_or_path"),P6t.forEach(t),ALr=r(eA,":"),eA.forEach(t),yLr=i(Dl),ATe=n(Dl,"UL",{});var B6t=s(ATe);yE=n(B6t,"LI",{});var iIe=s(yE);yTe=n(iIe,"STRONG",{});var I6t=s(yTe);LLr=r(I6t,"speech_to_text"),I6t.forEach(t),xLr=r(iIe," \u2014 "),qJ=n(iIe,"A",{href:!0});var N6t=s(qJ);$Lr=r(N6t,"TFSpeech2TextForConditionalGeneration"),N6t.forEach(t),kLr=r(iIe," (Speech2Text model)"),iIe.forEach(t),B6t.forEach(t),SLr=i(Dl),T(LE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),jje=i(f),xc=n(f,"H2",{class:!0});var WGe=s(xc);xE=n(WGe,"A",{id:!0,class:!0,href:!0});var q6t=s(xE);LTe=n(q6t,"SPAN",{});var j6t=s(LTe);T(y9.$$.fragment,j6t),j6t.forEach(t),q6t.forEach(t),RLr=i(WGe),xTe=n(WGe,"SPAN",{});var D6t=s(xTe);PLr=r(D6t,"FlaxAutoModel"),D6t.forEach(t),WGe.forEach(t),Dje=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T(L9.$$.fragment,Gl),BLr=i(Gl),$c=n(Gl,"P",{});var Dee=s($c);ILr=r(Dee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jJ=n(Dee,"A",{href:!0});var G6t=s(jJ);NLr=r(G6t,"from_pretrained()"),G6t.forEach(t),qLr=r(Dee," class method or the "),DJ=n(Dee,"A",{href:!0});var O6t=s(DJ);jLr=r(O6t,"from_config()"),O6t.forEach(t),DLr=r(Dee,` class
method.`),Dee.forEach(t),GLr=i(Gl),x9=n(Gl,"P",{});var QGe=s(x9);OLr=r(QGe,"This class cannot be instantiated directly using "),$Te=n(QGe,"CODE",{});var V6t=s($Te);VLr=r(V6t,"__init__()"),V6t.forEach(t),XLr=r(QGe," (throws an error)."),QGe.forEach(t),zLr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var oA=s(Gt);T($9.$$.fragment,oA),WLr=i(oA),kTe=n(oA,"P",{});var X6t=s(kTe);QLr=r(X6t,"Instantiates one of the base model classes of the library from a configuration."),X6t.forEach(t),HLr=i(oA),kc=n(oA,"P",{});var Gee=s(kc);ULr=r(Gee,`Note:
Loading a model from its configuration file does `),STe=n(Gee,"STRONG",{});var z6t=s(STe);JLr=r(z6t,"not"),z6t.forEach(t),YLr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=n(Gee,"A",{href:!0});var W6t=s(GJ);KLr=r(W6t,"from_pretrained()"),W6t.forEach(t),ZLr=r(Gee," to load the model weights."),Gee.forEach(t),e8r=i(oA),T($E.$$.fragment,oA),oA.forEach(t),o8r=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(k9.$$.fragment,Ol),r8r=i(Ol),RTe=n(Ol,"P",{});var Q6t=s(RTe);t8r=r(Q6t,"Instantiate one of the base model classes of the library from a pretrained model."),Q6t.forEach(t),a8r=i(Ol),hn=n(Ol,"P",{});var rA=s(hn);n8r=r(rA,"The model class to instantiate is selected based on the "),PTe=n(rA,"CODE",{});var H6t=s(PTe);s8r=r(H6t,"model_type"),H6t.forEach(t),l8r=r(rA,` property of the config object (either
passed as an argument or loaded from `),BTe=n(rA,"CODE",{});var U6t=s(BTe);i8r=r(U6t,"pretrained_model_name_or_path"),U6t.forEach(t),d8r=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ITe=n(rA,"CODE",{});var J6t=s(ITe);c8r=r(J6t,"pretrained_model_name_or_path"),J6t.forEach(t),f8r=r(rA,":"),rA.forEach(t),m8r=i(Ol),te=n(Ol,"UL",{});var ne=s(te);kE=n(ne,"LI",{});var dIe=s(kE);NTe=n(dIe,"STRONG",{});var Y6t=s(NTe);g8r=r(Y6t,"albert"),Y6t.forEach(t),h8r=r(dIe," \u2014 "),OJ=n(dIe,"A",{href:!0});var K6t=s(OJ);p8r=r(K6t,"FlaxAlbertModel"),K6t.forEach(t),_8r=r(dIe," (ALBERT model)"),dIe.forEach(t),u8r=i(ne),SE=n(ne,"LI",{});var cIe=s(SE);qTe=n(cIe,"STRONG",{});var Z6t=s(qTe);b8r=r(Z6t,"bart"),Z6t.forEach(t),v8r=r(cIe," \u2014 "),VJ=n(cIe,"A",{href:!0});var eAt=s(VJ);F8r=r(eAt,"FlaxBartModel"),eAt.forEach(t),T8r=r(cIe," (BART model)"),cIe.forEach(t),M8r=i(ne),RE=n(ne,"LI",{});var fIe=s(RE);jTe=n(fIe,"STRONG",{});var oAt=s(jTe);E8r=r(oAt,"beit"),oAt.forEach(t),C8r=r(fIe," \u2014 "),XJ=n(fIe,"A",{href:!0});var rAt=s(XJ);w8r=r(rAt,"FlaxBeitModel"),rAt.forEach(t),A8r=r(fIe," (BEiT model)"),fIe.forEach(t),y8r=i(ne),PE=n(ne,"LI",{});var mIe=s(PE);DTe=n(mIe,"STRONG",{});var tAt=s(DTe);L8r=r(tAt,"bert"),tAt.forEach(t),x8r=r(mIe," \u2014 "),zJ=n(mIe,"A",{href:!0});var aAt=s(zJ);$8r=r(aAt,"FlaxBertModel"),aAt.forEach(t),k8r=r(mIe," (BERT model)"),mIe.forEach(t),S8r=i(ne),BE=n(ne,"LI",{});var gIe=s(BE);GTe=n(gIe,"STRONG",{});var nAt=s(GTe);R8r=r(nAt,"big_bird"),nAt.forEach(t),P8r=r(gIe," \u2014 "),WJ=n(gIe,"A",{href:!0});var sAt=s(WJ);B8r=r(sAt,"FlaxBigBirdModel"),sAt.forEach(t),I8r=r(gIe," (BigBird model)"),gIe.forEach(t),N8r=i(ne),IE=n(ne,"LI",{});var hIe=s(IE);OTe=n(hIe,"STRONG",{});var lAt=s(OTe);q8r=r(lAt,"blenderbot"),lAt.forEach(t),j8r=r(hIe," \u2014 "),QJ=n(hIe,"A",{href:!0});var iAt=s(QJ);D8r=r(iAt,"FlaxBlenderbotModel"),iAt.forEach(t),G8r=r(hIe," (Blenderbot model)"),hIe.forEach(t),O8r=i(ne),NE=n(ne,"LI",{});var pIe=s(NE);VTe=n(pIe,"STRONG",{});var dAt=s(VTe);V8r=r(dAt,"blenderbot-small"),dAt.forEach(t),X8r=r(pIe," \u2014 "),HJ=n(pIe,"A",{href:!0});var cAt=s(HJ);z8r=r(cAt,"FlaxBlenderbotSmallModel"),cAt.forEach(t),W8r=r(pIe," (BlenderbotSmall model)"),pIe.forEach(t),Q8r=i(ne),qE=n(ne,"LI",{});var _Ie=s(qE);XTe=n(_Ie,"STRONG",{});var fAt=s(XTe);H8r=r(fAt,"clip"),fAt.forEach(t),U8r=r(_Ie," \u2014 "),UJ=n(_Ie,"A",{href:!0});var mAt=s(UJ);J8r=r(mAt,"FlaxCLIPModel"),mAt.forEach(t),Y8r=r(_Ie," (CLIP model)"),_Ie.forEach(t),K8r=i(ne),jE=n(ne,"LI",{});var uIe=s(jE);zTe=n(uIe,"STRONG",{});var gAt=s(zTe);Z8r=r(gAt,"distilbert"),gAt.forEach(t),e9r=r(uIe," \u2014 "),JJ=n(uIe,"A",{href:!0});var hAt=s(JJ);o9r=r(hAt,"FlaxDistilBertModel"),hAt.forEach(t),r9r=r(uIe," (DistilBERT model)"),uIe.forEach(t),t9r=i(ne),DE=n(ne,"LI",{});var bIe=s(DE);WTe=n(bIe,"STRONG",{});var pAt=s(WTe);a9r=r(pAt,"electra"),pAt.forEach(t),n9r=r(bIe," \u2014 "),YJ=n(bIe,"A",{href:!0});var _At=s(YJ);s9r=r(_At,"FlaxElectraModel"),_At.forEach(t),l9r=r(bIe," (ELECTRA model)"),bIe.forEach(t),i9r=i(ne),GE=n(ne,"LI",{});var vIe=s(GE);QTe=n(vIe,"STRONG",{});var uAt=s(QTe);d9r=r(uAt,"gpt2"),uAt.forEach(t),c9r=r(vIe," \u2014 "),KJ=n(vIe,"A",{href:!0});var bAt=s(KJ);f9r=r(bAt,"FlaxGPT2Model"),bAt.forEach(t),m9r=r(vIe," (OpenAI GPT-2 model)"),vIe.forEach(t),g9r=i(ne),OE=n(ne,"LI",{});var FIe=s(OE);HTe=n(FIe,"STRONG",{});var vAt=s(HTe);h9r=r(vAt,"gpt_neo"),vAt.forEach(t),p9r=r(FIe," \u2014 "),ZJ=n(FIe,"A",{href:!0});var FAt=s(ZJ);_9r=r(FAt,"FlaxGPTNeoModel"),FAt.forEach(t),u9r=r(FIe," (GPT Neo model)"),FIe.forEach(t),b9r=i(ne),VE=n(ne,"LI",{});var TIe=s(VE);UTe=n(TIe,"STRONG",{});var TAt=s(UTe);v9r=r(TAt,"gptj"),TAt.forEach(t),F9r=r(TIe," \u2014 "),eY=n(TIe,"A",{href:!0});var MAt=s(eY);T9r=r(MAt,"FlaxGPTJModel"),MAt.forEach(t),M9r=r(TIe," (GPT-J model)"),TIe.forEach(t),E9r=i(ne),XE=n(ne,"LI",{});var MIe=s(XE);JTe=n(MIe,"STRONG",{});var EAt=s(JTe);C9r=r(EAt,"marian"),EAt.forEach(t),w9r=r(MIe," \u2014 "),oY=n(MIe,"A",{href:!0});var CAt=s(oY);A9r=r(CAt,"FlaxMarianModel"),CAt.forEach(t),y9r=r(MIe," (Marian model)"),MIe.forEach(t),L9r=i(ne),zE=n(ne,"LI",{});var EIe=s(zE);YTe=n(EIe,"STRONG",{});var wAt=s(YTe);x9r=r(wAt,"mbart"),wAt.forEach(t),$9r=r(EIe," \u2014 "),rY=n(EIe,"A",{href:!0});var AAt=s(rY);k9r=r(AAt,"FlaxMBartModel"),AAt.forEach(t),S9r=r(EIe," (mBART model)"),EIe.forEach(t),R9r=i(ne),WE=n(ne,"LI",{});var CIe=s(WE);KTe=n(CIe,"STRONG",{});var yAt=s(KTe);P9r=r(yAt,"mt5"),yAt.forEach(t),B9r=r(CIe," \u2014 "),tY=n(CIe,"A",{href:!0});var LAt=s(tY);I9r=r(LAt,"FlaxMT5Model"),LAt.forEach(t),N9r=r(CIe," (mT5 model)"),CIe.forEach(t),q9r=i(ne),QE=n(ne,"LI",{});var wIe=s(QE);ZTe=n(wIe,"STRONG",{});var xAt=s(ZTe);j9r=r(xAt,"pegasus"),xAt.forEach(t),D9r=r(wIe," \u2014 "),aY=n(wIe,"A",{href:!0});var $At=s(aY);G9r=r($At,"FlaxPegasusModel"),$At.forEach(t),O9r=r(wIe," (Pegasus model)"),wIe.forEach(t),V9r=i(ne),HE=n(ne,"LI",{});var AIe=s(HE);e7e=n(AIe,"STRONG",{});var kAt=s(e7e);X9r=r(kAt,"roberta"),kAt.forEach(t),z9r=r(AIe," \u2014 "),nY=n(AIe,"A",{href:!0});var SAt=s(nY);W9r=r(SAt,"FlaxRobertaModel"),SAt.forEach(t),Q9r=r(AIe," (RoBERTa model)"),AIe.forEach(t),H9r=i(ne),UE=n(ne,"LI",{});var yIe=s(UE);o7e=n(yIe,"STRONG",{});var RAt=s(o7e);U9r=r(RAt,"roformer"),RAt.forEach(t),J9r=r(yIe," \u2014 "),sY=n(yIe,"A",{href:!0});var PAt=s(sY);Y9r=r(PAt,"FlaxRoFormerModel"),PAt.forEach(t),K9r=r(yIe," (RoFormer model)"),yIe.forEach(t),Z9r=i(ne),JE=n(ne,"LI",{});var LIe=s(JE);r7e=n(LIe,"STRONG",{});var BAt=s(r7e);exr=r(BAt,"t5"),BAt.forEach(t),oxr=r(LIe," \u2014 "),lY=n(LIe,"A",{href:!0});var IAt=s(lY);rxr=r(IAt,"FlaxT5Model"),IAt.forEach(t),txr=r(LIe," (T5 model)"),LIe.forEach(t),axr=i(ne),YE=n(ne,"LI",{});var xIe=s(YE);t7e=n(xIe,"STRONG",{});var NAt=s(t7e);nxr=r(NAt,"vision-text-dual-encoder"),NAt.forEach(t),sxr=r(xIe," \u2014 "),iY=n(xIe,"A",{href:!0});var qAt=s(iY);lxr=r(qAt,"FlaxVisionTextDualEncoderModel"),qAt.forEach(t),ixr=r(xIe," (VisionTextDualEncoder model)"),xIe.forEach(t),dxr=i(ne),KE=n(ne,"LI",{});var $Ie=s(KE);a7e=n($Ie,"STRONG",{});var jAt=s(a7e);cxr=r(jAt,"vit"),jAt.forEach(t),fxr=r($Ie," \u2014 "),dY=n($Ie,"A",{href:!0});var DAt=s(dY);mxr=r(DAt,"FlaxViTModel"),DAt.forEach(t),gxr=r($Ie," (ViT model)"),$Ie.forEach(t),hxr=i(ne),ZE=n(ne,"LI",{});var kIe=s(ZE);n7e=n(kIe,"STRONG",{});var GAt=s(n7e);pxr=r(GAt,"wav2vec2"),GAt.forEach(t),_xr=r(kIe," \u2014 "),cY=n(kIe,"A",{href:!0});var OAt=s(cY);uxr=r(OAt,"FlaxWav2Vec2Model"),OAt.forEach(t),bxr=r(kIe," (Wav2Vec2 model)"),kIe.forEach(t),vxr=i(ne),eC=n(ne,"LI",{});var SIe=s(eC);s7e=n(SIe,"STRONG",{});var VAt=s(s7e);Fxr=r(VAt,"xglm"),VAt.forEach(t),Txr=r(SIe," \u2014 "),fY=n(SIe,"A",{href:!0});var XAt=s(fY);Mxr=r(XAt,"FlaxXGLMModel"),XAt.forEach(t),Exr=r(SIe," (XGLM model)"),SIe.forEach(t),Cxr=i(ne),oC=n(ne,"LI",{});var RIe=s(oC);l7e=n(RIe,"STRONG",{});var zAt=s(l7e);wxr=r(zAt,"xlm-roberta"),zAt.forEach(t),Axr=r(RIe," \u2014 "),mY=n(RIe,"A",{href:!0});var WAt=s(mY);yxr=r(WAt,"FlaxXLMRobertaModel"),WAt.forEach(t),Lxr=r(RIe," (XLM-RoBERTa model)"),RIe.forEach(t),ne.forEach(t),xxr=i(Ol),T(rC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Gje=i(f),Sc=n(f,"H2",{class:!0});var HGe=s(Sc);tC=n(HGe,"A",{id:!0,class:!0,href:!0});var QAt=s(tC);i7e=n(QAt,"SPAN",{});var HAt=s(i7e);T(S9.$$.fragment,HAt),HAt.forEach(t),QAt.forEach(t),$xr=i(HGe),d7e=n(HGe,"SPAN",{});var UAt=s(d7e);kxr=r(UAt,"FlaxAutoModelForCausalLM"),UAt.forEach(t),HGe.forEach(t),Oje=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T(R9.$$.fragment,Vl),Sxr=i(Vl),Rc=n(Vl,"P",{});var Oee=s(Rc);Rxr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gY=n(Oee,"A",{href:!0});var JAt=s(gY);Pxr=r(JAt,"from_pretrained()"),JAt.forEach(t),Bxr=r(Oee," class method or the "),hY=n(Oee,"A",{href:!0});var YAt=s(hY);Ixr=r(YAt,"from_config()"),YAt.forEach(t),Nxr=r(Oee,` class
method.`),Oee.forEach(t),qxr=i(Vl),P9=n(Vl,"P",{});var UGe=s(P9);jxr=r(UGe,"This class cannot be instantiated directly using "),c7e=n(UGe,"CODE",{});var KAt=s(c7e);Dxr=r(KAt,"__init__()"),KAt.forEach(t),Gxr=r(UGe," (throws an error)."),UGe.forEach(t),Oxr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var tA=s(Ot);T(B9.$$.fragment,tA),Vxr=i(tA),f7e=n(tA,"P",{});var ZAt=s(f7e);Xxr=r(ZAt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ZAt.forEach(t),zxr=i(tA),Pc=n(tA,"P",{});var Vee=s(Pc);Wxr=r(Vee,`Note:
Loading a model from its configuration file does `),m7e=n(Vee,"STRONG",{});var eyt=s(m7e);Qxr=r(eyt,"not"),eyt.forEach(t),Hxr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=n(Vee,"A",{href:!0});var oyt=s(pY);Uxr=r(oyt,"from_pretrained()"),oyt.forEach(t),Jxr=r(Vee," to load the model weights."),Vee.forEach(t),Yxr=i(tA),T(aC.$$.fragment,tA),tA.forEach(t),Kxr=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(I9.$$.fragment,Xl),Zxr=i(Xl),g7e=n(Xl,"P",{});var ryt=s(g7e);e$r=r(ryt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ryt.forEach(t),o$r=i(Xl),pn=n(Xl,"P",{});var aA=s(pn);r$r=r(aA,"The model class to instantiate is selected based on the "),h7e=n(aA,"CODE",{});var tyt=s(h7e);t$r=r(tyt,"model_type"),tyt.forEach(t),a$r=r(aA,` property of the config object (either
passed as an argument or loaded from `),p7e=n(aA,"CODE",{});var ayt=s(p7e);n$r=r(ayt,"pretrained_model_name_or_path"),ayt.forEach(t),s$r=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_7e=n(aA,"CODE",{});var nyt=s(_7e);l$r=r(nyt,"pretrained_model_name_or_path"),nyt.forEach(t),i$r=r(aA,":"),aA.forEach(t),d$r=i(Xl),Re=n(Xl,"UL",{});var Xe=s(Re);nC=n(Xe,"LI",{});var PIe=s(nC);u7e=n(PIe,"STRONG",{});var syt=s(u7e);c$r=r(syt,"bart"),syt.forEach(t),f$r=r(PIe," \u2014 "),_Y=n(PIe,"A",{href:!0});var lyt=s(_Y);m$r=r(lyt,"FlaxBartForCausalLM"),lyt.forEach(t),g$r=r(PIe," (BART model)"),PIe.forEach(t),h$r=i(Xe),sC=n(Xe,"LI",{});var BIe=s(sC);b7e=n(BIe,"STRONG",{});var iyt=s(b7e);p$r=r(iyt,"bert"),iyt.forEach(t),_$r=r(BIe," \u2014 "),uY=n(BIe,"A",{href:!0});var dyt=s(uY);u$r=r(dyt,"FlaxBertForCausalLM"),dyt.forEach(t),b$r=r(BIe," (BERT model)"),BIe.forEach(t),v$r=i(Xe),lC=n(Xe,"LI",{});var IIe=s(lC);v7e=n(IIe,"STRONG",{});var cyt=s(v7e);F$r=r(cyt,"big_bird"),cyt.forEach(t),T$r=r(IIe," \u2014 "),bY=n(IIe,"A",{href:!0});var fyt=s(bY);M$r=r(fyt,"FlaxBigBirdForCausalLM"),fyt.forEach(t),E$r=r(IIe," (BigBird model)"),IIe.forEach(t),C$r=i(Xe),iC=n(Xe,"LI",{});var NIe=s(iC);F7e=n(NIe,"STRONG",{});var myt=s(F7e);w$r=r(myt,"electra"),myt.forEach(t),A$r=r(NIe," \u2014 "),vY=n(NIe,"A",{href:!0});var gyt=s(vY);y$r=r(gyt,"FlaxElectraForCausalLM"),gyt.forEach(t),L$r=r(NIe," (ELECTRA model)"),NIe.forEach(t),x$r=i(Xe),dC=n(Xe,"LI",{});var qIe=s(dC);T7e=n(qIe,"STRONG",{});var hyt=s(T7e);$$r=r(hyt,"gpt2"),hyt.forEach(t),k$r=r(qIe," \u2014 "),FY=n(qIe,"A",{href:!0});var pyt=s(FY);S$r=r(pyt,"FlaxGPT2LMHeadModel"),pyt.forEach(t),R$r=r(qIe," (OpenAI GPT-2 model)"),qIe.forEach(t),P$r=i(Xe),cC=n(Xe,"LI",{});var jIe=s(cC);M7e=n(jIe,"STRONG",{});var _yt=s(M7e);B$r=r(_yt,"gpt_neo"),_yt.forEach(t),I$r=r(jIe," \u2014 "),TY=n(jIe,"A",{href:!0});var uyt=s(TY);N$r=r(uyt,"FlaxGPTNeoForCausalLM"),uyt.forEach(t),q$r=r(jIe," (GPT Neo model)"),jIe.forEach(t),j$r=i(Xe),fC=n(Xe,"LI",{});var DIe=s(fC);E7e=n(DIe,"STRONG",{});var byt=s(E7e);D$r=r(byt,"gptj"),byt.forEach(t),G$r=r(DIe," \u2014 "),MY=n(DIe,"A",{href:!0});var vyt=s(MY);O$r=r(vyt,"FlaxGPTJForCausalLM"),vyt.forEach(t),V$r=r(DIe," (GPT-J model)"),DIe.forEach(t),X$r=i(Xe),mC=n(Xe,"LI",{});var GIe=s(mC);C7e=n(GIe,"STRONG",{});var Fyt=s(C7e);z$r=r(Fyt,"roberta"),Fyt.forEach(t),W$r=r(GIe," \u2014 "),EY=n(GIe,"A",{href:!0});var Tyt=s(EY);Q$r=r(Tyt,"FlaxRobertaForCausalLM"),Tyt.forEach(t),H$r=r(GIe," (RoBERTa model)"),GIe.forEach(t),U$r=i(Xe),gC=n(Xe,"LI",{});var OIe=s(gC);w7e=n(OIe,"STRONG",{});var Myt=s(w7e);J$r=r(Myt,"xglm"),Myt.forEach(t),Y$r=r(OIe," \u2014 "),CY=n(OIe,"A",{href:!0});var Eyt=s(CY);K$r=r(Eyt,"FlaxXGLMForCausalLM"),Eyt.forEach(t),Z$r=r(OIe," (XGLM model)"),OIe.forEach(t),Xe.forEach(t),ekr=i(Xl),T(hC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),Vje=i(f),Bc=n(f,"H2",{class:!0});var JGe=s(Bc);pC=n(JGe,"A",{id:!0,class:!0,href:!0});var Cyt=s(pC);A7e=n(Cyt,"SPAN",{});var wyt=s(A7e);T(N9.$$.fragment,wyt),wyt.forEach(t),Cyt.forEach(t),okr=i(JGe),y7e=n(JGe,"SPAN",{});var Ayt=s(y7e);rkr=r(Ayt,"FlaxAutoModelForPreTraining"),Ayt.forEach(t),JGe.forEach(t),Xje=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(q9.$$.fragment,zl),tkr=i(zl),Ic=n(zl,"P",{});var Xee=s(Ic);akr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wY=n(Xee,"A",{href:!0});var yyt=s(wY);nkr=r(yyt,"from_pretrained()"),yyt.forEach(t),skr=r(Xee," class method or the "),AY=n(Xee,"A",{href:!0});var Lyt=s(AY);lkr=r(Lyt,"from_config()"),Lyt.forEach(t),ikr=r(Xee,` class
method.`),Xee.forEach(t),dkr=i(zl),j9=n(zl,"P",{});var YGe=s(j9);ckr=r(YGe,"This class cannot be instantiated directly using "),L7e=n(YGe,"CODE",{});var xyt=s(L7e);fkr=r(xyt,"__init__()"),xyt.forEach(t),mkr=r(YGe," (throws an error)."),YGe.forEach(t),gkr=i(zl),Vt=n(zl,"DIV",{class:!0});var nA=s(Vt);T(D9.$$.fragment,nA),hkr=i(nA),x7e=n(nA,"P",{});var $yt=s(x7e);pkr=r($yt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$yt.forEach(t),_kr=i(nA),Nc=n(nA,"P",{});var zee=s(Nc);ukr=r(zee,`Note:
Loading a model from its configuration file does `),$7e=n(zee,"STRONG",{});var kyt=s($7e);bkr=r(kyt,"not"),kyt.forEach(t),vkr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=n(zee,"A",{href:!0});var Syt=s(yY);Fkr=r(Syt,"from_pretrained()"),Syt.forEach(t),Tkr=r(zee," to load the model weights."),zee.forEach(t),Mkr=i(nA),T(_C.$$.fragment,nA),nA.forEach(t),Ekr=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(G9.$$.fragment,Wl),Ckr=i(Wl),k7e=n(Wl,"P",{});var Ryt=s(k7e);wkr=r(Ryt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ryt.forEach(t),Akr=i(Wl),_n=n(Wl,"P",{});var sA=s(_n);ykr=r(sA,"The model class to instantiate is selected based on the "),S7e=n(sA,"CODE",{});var Pyt=s(S7e);Lkr=r(Pyt,"model_type"),Pyt.forEach(t),xkr=r(sA,` property of the config object (either
passed as an argument or loaded from `),R7e=n(sA,"CODE",{});var Byt=s(R7e);$kr=r(Byt,"pretrained_model_name_or_path"),Byt.forEach(t),kkr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P7e=n(sA,"CODE",{});var Iyt=s(P7e);Skr=r(Iyt,"pretrained_model_name_or_path"),Iyt.forEach(t),Rkr=r(sA,":"),sA.forEach(t),Pkr=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);uC=n(we,"LI",{});var VIe=s(uC);B7e=n(VIe,"STRONG",{});var Nyt=s(B7e);Bkr=r(Nyt,"albert"),Nyt.forEach(t),Ikr=r(VIe," \u2014 "),LY=n(VIe,"A",{href:!0});var qyt=s(LY);Nkr=r(qyt,"FlaxAlbertForPreTraining"),qyt.forEach(t),qkr=r(VIe," (ALBERT model)"),VIe.forEach(t),jkr=i(we),bC=n(we,"LI",{});var XIe=s(bC);I7e=n(XIe,"STRONG",{});var jyt=s(I7e);Dkr=r(jyt,"bart"),jyt.forEach(t),Gkr=r(XIe," \u2014 "),xY=n(XIe,"A",{href:!0});var Dyt=s(xY);Okr=r(Dyt,"FlaxBartForConditionalGeneration"),Dyt.forEach(t),Vkr=r(XIe," (BART model)"),XIe.forEach(t),Xkr=i(we),vC=n(we,"LI",{});var zIe=s(vC);N7e=n(zIe,"STRONG",{});var Gyt=s(N7e);zkr=r(Gyt,"bert"),Gyt.forEach(t),Wkr=r(zIe," \u2014 "),$Y=n(zIe,"A",{href:!0});var Oyt=s($Y);Qkr=r(Oyt,"FlaxBertForPreTraining"),Oyt.forEach(t),Hkr=r(zIe," (BERT model)"),zIe.forEach(t),Ukr=i(we),FC=n(we,"LI",{});var WIe=s(FC);q7e=n(WIe,"STRONG",{});var Vyt=s(q7e);Jkr=r(Vyt,"big_bird"),Vyt.forEach(t),Ykr=r(WIe," \u2014 "),kY=n(WIe,"A",{href:!0});var Xyt=s(kY);Kkr=r(Xyt,"FlaxBigBirdForPreTraining"),Xyt.forEach(t),Zkr=r(WIe," (BigBird model)"),WIe.forEach(t),eSr=i(we),TC=n(we,"LI",{});var QIe=s(TC);j7e=n(QIe,"STRONG",{});var zyt=s(j7e);oSr=r(zyt,"electra"),zyt.forEach(t),rSr=r(QIe," \u2014 "),SY=n(QIe,"A",{href:!0});var Wyt=s(SY);tSr=r(Wyt,"FlaxElectraForPreTraining"),Wyt.forEach(t),aSr=r(QIe," (ELECTRA model)"),QIe.forEach(t),nSr=i(we),MC=n(we,"LI",{});var HIe=s(MC);D7e=n(HIe,"STRONG",{});var Qyt=s(D7e);sSr=r(Qyt,"mbart"),Qyt.forEach(t),lSr=r(HIe," \u2014 "),RY=n(HIe,"A",{href:!0});var Hyt=s(RY);iSr=r(Hyt,"FlaxMBartForConditionalGeneration"),Hyt.forEach(t),dSr=r(HIe," (mBART model)"),HIe.forEach(t),cSr=i(we),EC=n(we,"LI",{});var UIe=s(EC);G7e=n(UIe,"STRONG",{});var Uyt=s(G7e);fSr=r(Uyt,"mt5"),Uyt.forEach(t),mSr=r(UIe," \u2014 "),PY=n(UIe,"A",{href:!0});var Jyt=s(PY);gSr=r(Jyt,"FlaxMT5ForConditionalGeneration"),Jyt.forEach(t),hSr=r(UIe," (mT5 model)"),UIe.forEach(t),pSr=i(we),CC=n(we,"LI",{});var JIe=s(CC);O7e=n(JIe,"STRONG",{});var Yyt=s(O7e);_Sr=r(Yyt,"roberta"),Yyt.forEach(t),uSr=r(JIe," \u2014 "),BY=n(JIe,"A",{href:!0});var Kyt=s(BY);bSr=r(Kyt,"FlaxRobertaForMaskedLM"),Kyt.forEach(t),vSr=r(JIe," (RoBERTa model)"),JIe.forEach(t),FSr=i(we),wC=n(we,"LI",{});var YIe=s(wC);V7e=n(YIe,"STRONG",{});var Zyt=s(V7e);TSr=r(Zyt,"roformer"),Zyt.forEach(t),MSr=r(YIe," \u2014 "),IY=n(YIe,"A",{href:!0});var eLt=s(IY);ESr=r(eLt,"FlaxRoFormerForMaskedLM"),eLt.forEach(t),CSr=r(YIe," (RoFormer model)"),YIe.forEach(t),wSr=i(we),AC=n(we,"LI",{});var KIe=s(AC);X7e=n(KIe,"STRONG",{});var oLt=s(X7e);ASr=r(oLt,"t5"),oLt.forEach(t),ySr=r(KIe," \u2014 "),NY=n(KIe,"A",{href:!0});var rLt=s(NY);LSr=r(rLt,"FlaxT5ForConditionalGeneration"),rLt.forEach(t),xSr=r(KIe," (T5 model)"),KIe.forEach(t),$Sr=i(we),yC=n(we,"LI",{});var ZIe=s(yC);z7e=n(ZIe,"STRONG",{});var tLt=s(z7e);kSr=r(tLt,"wav2vec2"),tLt.forEach(t),SSr=r(ZIe," \u2014 "),qY=n(ZIe,"A",{href:!0});var aLt=s(qY);RSr=r(aLt,"FlaxWav2Vec2ForPreTraining"),aLt.forEach(t),PSr=r(ZIe," (Wav2Vec2 model)"),ZIe.forEach(t),BSr=i(we),LC=n(we,"LI",{});var eNe=s(LC);W7e=n(eNe,"STRONG",{});var nLt=s(W7e);ISr=r(nLt,"xlm-roberta"),nLt.forEach(t),NSr=r(eNe," \u2014 "),jY=n(eNe,"A",{href:!0});var sLt=s(jY);qSr=r(sLt,"FlaxXLMRobertaForMaskedLM"),sLt.forEach(t),jSr=r(eNe," (XLM-RoBERTa model)"),eNe.forEach(t),we.forEach(t),DSr=i(Wl),T(xC.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),zje=i(f),qc=n(f,"H2",{class:!0});var KGe=s(qc);$C=n(KGe,"A",{id:!0,class:!0,href:!0});var lLt=s($C);Q7e=n(lLt,"SPAN",{});var iLt=s(Q7e);T(O9.$$.fragment,iLt),iLt.forEach(t),lLt.forEach(t),GSr=i(KGe),H7e=n(KGe,"SPAN",{});var dLt=s(H7e);OSr=r(dLt,"FlaxAutoModelForMaskedLM"),dLt.forEach(t),KGe.forEach(t),Wje=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(V9.$$.fragment,Ql),VSr=i(Ql),jc=n(Ql,"P",{});var Wee=s(jc);XSr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),DY=n(Wee,"A",{href:!0});var cLt=s(DY);zSr=r(cLt,"from_pretrained()"),cLt.forEach(t),WSr=r(Wee," class method or the "),GY=n(Wee,"A",{href:!0});var fLt=s(GY);QSr=r(fLt,"from_config()"),fLt.forEach(t),HSr=r(Wee,` class
method.`),Wee.forEach(t),USr=i(Ql),X9=n(Ql,"P",{});var ZGe=s(X9);JSr=r(ZGe,"This class cannot be instantiated directly using "),U7e=n(ZGe,"CODE",{});var mLt=s(U7e);YSr=r(mLt,"__init__()"),mLt.forEach(t),KSr=r(ZGe," (throws an error)."),ZGe.forEach(t),ZSr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var lA=s(Xt);T(z9.$$.fragment,lA),eRr=i(lA),J7e=n(lA,"P",{});var gLt=s(J7e);oRr=r(gLt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gLt.forEach(t),rRr=i(lA),Dc=n(lA,"P",{});var Qee=s(Dc);tRr=r(Qee,`Note:
Loading a model from its configuration file does `),Y7e=n(Qee,"STRONG",{});var hLt=s(Y7e);aRr=r(hLt,"not"),hLt.forEach(t),nRr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=n(Qee,"A",{href:!0});var pLt=s(OY);sRr=r(pLt,"from_pretrained()"),pLt.forEach(t),lRr=r(Qee," to load the model weights."),Qee.forEach(t),iRr=i(lA),T(kC.$$.fragment,lA),lA.forEach(t),dRr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(W9.$$.fragment,Hl),cRr=i(Hl),K7e=n(Hl,"P",{});var _Lt=s(K7e);fRr=r(_Lt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_Lt.forEach(t),mRr=i(Hl),un=n(Hl,"P",{});var iA=s(un);gRr=r(iA,"The model class to instantiate is selected based on the "),Z7e=n(iA,"CODE",{});var uLt=s(Z7e);hRr=r(uLt,"model_type"),uLt.forEach(t),pRr=r(iA,` property of the config object (either
passed as an argument or loaded from `),eMe=n(iA,"CODE",{});var bLt=s(eMe);_Rr=r(bLt,"pretrained_model_name_or_path"),bLt.forEach(t),uRr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oMe=n(iA,"CODE",{});var vLt=s(oMe);bRr=r(vLt,"pretrained_model_name_or_path"),vLt.forEach(t),vRr=r(iA,":"),iA.forEach(t),FRr=i(Hl),Le=n(Hl,"UL",{});var Ie=s(Le);SC=n(Ie,"LI",{});var oNe=s(SC);rMe=n(oNe,"STRONG",{});var FLt=s(rMe);TRr=r(FLt,"albert"),FLt.forEach(t),MRr=r(oNe," \u2014 "),VY=n(oNe,"A",{href:!0});var TLt=s(VY);ERr=r(TLt,"FlaxAlbertForMaskedLM"),TLt.forEach(t),CRr=r(oNe," (ALBERT model)"),oNe.forEach(t),wRr=i(Ie),RC=n(Ie,"LI",{});var rNe=s(RC);tMe=n(rNe,"STRONG",{});var MLt=s(tMe);ARr=r(MLt,"bart"),MLt.forEach(t),yRr=r(rNe," \u2014 "),XY=n(rNe,"A",{href:!0});var ELt=s(XY);LRr=r(ELt,"FlaxBartForConditionalGeneration"),ELt.forEach(t),xRr=r(rNe," (BART model)"),rNe.forEach(t),$Rr=i(Ie),PC=n(Ie,"LI",{});var tNe=s(PC);aMe=n(tNe,"STRONG",{});var CLt=s(aMe);kRr=r(CLt,"bert"),CLt.forEach(t),SRr=r(tNe," \u2014 "),zY=n(tNe,"A",{href:!0});var wLt=s(zY);RRr=r(wLt,"FlaxBertForMaskedLM"),wLt.forEach(t),PRr=r(tNe," (BERT model)"),tNe.forEach(t),BRr=i(Ie),BC=n(Ie,"LI",{});var aNe=s(BC);nMe=n(aNe,"STRONG",{});var ALt=s(nMe);IRr=r(ALt,"big_bird"),ALt.forEach(t),NRr=r(aNe," \u2014 "),WY=n(aNe,"A",{href:!0});var yLt=s(WY);qRr=r(yLt,"FlaxBigBirdForMaskedLM"),yLt.forEach(t),jRr=r(aNe," (BigBird model)"),aNe.forEach(t),DRr=i(Ie),IC=n(Ie,"LI",{});var nNe=s(IC);sMe=n(nNe,"STRONG",{});var LLt=s(sMe);GRr=r(LLt,"distilbert"),LLt.forEach(t),ORr=r(nNe," \u2014 "),QY=n(nNe,"A",{href:!0});var xLt=s(QY);VRr=r(xLt,"FlaxDistilBertForMaskedLM"),xLt.forEach(t),XRr=r(nNe," (DistilBERT model)"),nNe.forEach(t),zRr=i(Ie),NC=n(Ie,"LI",{});var sNe=s(NC);lMe=n(sNe,"STRONG",{});var $Lt=s(lMe);WRr=r($Lt,"electra"),$Lt.forEach(t),QRr=r(sNe," \u2014 "),HY=n(sNe,"A",{href:!0});var kLt=s(HY);HRr=r(kLt,"FlaxElectraForMaskedLM"),kLt.forEach(t),URr=r(sNe," (ELECTRA model)"),sNe.forEach(t),JRr=i(Ie),qC=n(Ie,"LI",{});var lNe=s(qC);iMe=n(lNe,"STRONG",{});var SLt=s(iMe);YRr=r(SLt,"mbart"),SLt.forEach(t),KRr=r(lNe," \u2014 "),UY=n(lNe,"A",{href:!0});var RLt=s(UY);ZRr=r(RLt,"FlaxMBartForConditionalGeneration"),RLt.forEach(t),ePr=r(lNe," (mBART model)"),lNe.forEach(t),oPr=i(Ie),jC=n(Ie,"LI",{});var iNe=s(jC);dMe=n(iNe,"STRONG",{});var PLt=s(dMe);rPr=r(PLt,"roberta"),PLt.forEach(t),tPr=r(iNe," \u2014 "),JY=n(iNe,"A",{href:!0});var BLt=s(JY);aPr=r(BLt,"FlaxRobertaForMaskedLM"),BLt.forEach(t),nPr=r(iNe," (RoBERTa model)"),iNe.forEach(t),sPr=i(Ie),DC=n(Ie,"LI",{});var dNe=s(DC);cMe=n(dNe,"STRONG",{});var ILt=s(cMe);lPr=r(ILt,"roformer"),ILt.forEach(t),iPr=r(dNe," \u2014 "),YY=n(dNe,"A",{href:!0});var NLt=s(YY);dPr=r(NLt,"FlaxRoFormerForMaskedLM"),NLt.forEach(t),cPr=r(dNe," (RoFormer model)"),dNe.forEach(t),fPr=i(Ie),GC=n(Ie,"LI",{});var cNe=s(GC);fMe=n(cNe,"STRONG",{});var qLt=s(fMe);mPr=r(qLt,"xlm-roberta"),qLt.forEach(t),gPr=r(cNe," \u2014 "),KY=n(cNe,"A",{href:!0});var jLt=s(KY);hPr=r(jLt,"FlaxXLMRobertaForMaskedLM"),jLt.forEach(t),pPr=r(cNe," (XLM-RoBERTa model)"),cNe.forEach(t),Ie.forEach(t),_Pr=i(Hl),T(OC.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),Qje=i(f),Gc=n(f,"H2",{class:!0});var eOe=s(Gc);VC=n(eOe,"A",{id:!0,class:!0,href:!0});var DLt=s(VC);mMe=n(DLt,"SPAN",{});var GLt=s(mMe);T(Q9.$$.fragment,GLt),GLt.forEach(t),DLt.forEach(t),uPr=i(eOe),gMe=n(eOe,"SPAN",{});var OLt=s(gMe);bPr=r(OLt,"FlaxAutoModelForSeq2SeqLM"),OLt.forEach(t),eOe.forEach(t),Hje=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(H9.$$.fragment,Ul),vPr=i(Ul),Oc=n(Ul,"P",{});var Hee=s(Oc);FPr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZY=n(Hee,"A",{href:!0});var VLt=s(ZY);TPr=r(VLt,"from_pretrained()"),VLt.forEach(t),MPr=r(Hee," class method or the "),eK=n(Hee,"A",{href:!0});var XLt=s(eK);EPr=r(XLt,"from_config()"),XLt.forEach(t),CPr=r(Hee,` class
method.`),Hee.forEach(t),wPr=i(Ul),U9=n(Ul,"P",{});var oOe=s(U9);APr=r(oOe,"This class cannot be instantiated directly using "),hMe=n(oOe,"CODE",{});var zLt=s(hMe);yPr=r(zLt,"__init__()"),zLt.forEach(t),LPr=r(oOe," (throws an error)."),oOe.forEach(t),xPr=i(Ul),zt=n(Ul,"DIV",{class:!0});var dA=s(zt);T(J9.$$.fragment,dA),$Pr=i(dA),pMe=n(dA,"P",{});var WLt=s(pMe);kPr=r(WLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),WLt.forEach(t),SPr=i(dA),Vc=n(dA,"P",{});var Uee=s(Vc);RPr=r(Uee,`Note:
Loading a model from its configuration file does `),_Me=n(Uee,"STRONG",{});var QLt=s(_Me);PPr=r(QLt,"not"),QLt.forEach(t),BPr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=n(Uee,"A",{href:!0});var HLt=s(oK);IPr=r(HLt,"from_pretrained()"),HLt.forEach(t),NPr=r(Uee," to load the model weights."),Uee.forEach(t),qPr=i(dA),T(XC.$$.fragment,dA),dA.forEach(t),jPr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(Y9.$$.fragment,Jl),DPr=i(Jl),uMe=n(Jl,"P",{});var ULt=s(uMe);GPr=r(ULt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ULt.forEach(t),OPr=i(Jl),bn=n(Jl,"P",{});var cA=s(bn);VPr=r(cA,"The model class to instantiate is selected based on the "),bMe=n(cA,"CODE",{});var JLt=s(bMe);XPr=r(JLt,"model_type"),JLt.forEach(t),zPr=r(cA,` property of the config object (either
passed as an argument or loaded from `),vMe=n(cA,"CODE",{});var YLt=s(vMe);WPr=r(YLt,"pretrained_model_name_or_path"),YLt.forEach(t),QPr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FMe=n(cA,"CODE",{});var KLt=s(FMe);HPr=r(KLt,"pretrained_model_name_or_path"),KLt.forEach(t),UPr=r(cA,":"),cA.forEach(t),JPr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);zC=n(ze,"LI",{});var fNe=s(zC);TMe=n(fNe,"STRONG",{});var ZLt=s(TMe);YPr=r(ZLt,"bart"),ZLt.forEach(t),KPr=r(fNe," \u2014 "),rK=n(fNe,"A",{href:!0});var e8t=s(rK);ZPr=r(e8t,"FlaxBartForConditionalGeneration"),e8t.forEach(t),eBr=r(fNe," (BART model)"),fNe.forEach(t),oBr=i(ze),WC=n(ze,"LI",{});var mNe=s(WC);MMe=n(mNe,"STRONG",{});var o8t=s(MMe);rBr=r(o8t,"blenderbot"),o8t.forEach(t),tBr=r(mNe," \u2014 "),tK=n(mNe,"A",{href:!0});var r8t=s(tK);aBr=r(r8t,"FlaxBlenderbotForConditionalGeneration"),r8t.forEach(t),nBr=r(mNe," (Blenderbot model)"),mNe.forEach(t),sBr=i(ze),QC=n(ze,"LI",{});var gNe=s(QC);EMe=n(gNe,"STRONG",{});var t8t=s(EMe);lBr=r(t8t,"blenderbot-small"),t8t.forEach(t),iBr=r(gNe," \u2014 "),aK=n(gNe,"A",{href:!0});var a8t=s(aK);dBr=r(a8t,"FlaxBlenderbotSmallForConditionalGeneration"),a8t.forEach(t),cBr=r(gNe," (BlenderbotSmall model)"),gNe.forEach(t),fBr=i(ze),HC=n(ze,"LI",{});var hNe=s(HC);CMe=n(hNe,"STRONG",{});var n8t=s(CMe);mBr=r(n8t,"encoder-decoder"),n8t.forEach(t),gBr=r(hNe," \u2014 "),nK=n(hNe,"A",{href:!0});var s8t=s(nK);hBr=r(s8t,"FlaxEncoderDecoderModel"),s8t.forEach(t),pBr=r(hNe," (Encoder decoder model)"),hNe.forEach(t),_Br=i(ze),UC=n(ze,"LI",{});var pNe=s(UC);wMe=n(pNe,"STRONG",{});var l8t=s(wMe);uBr=r(l8t,"marian"),l8t.forEach(t),bBr=r(pNe," \u2014 "),sK=n(pNe,"A",{href:!0});var i8t=s(sK);vBr=r(i8t,"FlaxMarianMTModel"),i8t.forEach(t),FBr=r(pNe," (Marian model)"),pNe.forEach(t),TBr=i(ze),JC=n(ze,"LI",{});var _Ne=s(JC);AMe=n(_Ne,"STRONG",{});var d8t=s(AMe);MBr=r(d8t,"mbart"),d8t.forEach(t),EBr=r(_Ne," \u2014 "),lK=n(_Ne,"A",{href:!0});var c8t=s(lK);CBr=r(c8t,"FlaxMBartForConditionalGeneration"),c8t.forEach(t),wBr=r(_Ne," (mBART model)"),_Ne.forEach(t),ABr=i(ze),YC=n(ze,"LI",{});var uNe=s(YC);yMe=n(uNe,"STRONG",{});var f8t=s(yMe);yBr=r(f8t,"mt5"),f8t.forEach(t),LBr=r(uNe," \u2014 "),iK=n(uNe,"A",{href:!0});var m8t=s(iK);xBr=r(m8t,"FlaxMT5ForConditionalGeneration"),m8t.forEach(t),$Br=r(uNe," (mT5 model)"),uNe.forEach(t),kBr=i(ze),KC=n(ze,"LI",{});var bNe=s(KC);LMe=n(bNe,"STRONG",{});var g8t=s(LMe);SBr=r(g8t,"pegasus"),g8t.forEach(t),RBr=r(bNe," \u2014 "),dK=n(bNe,"A",{href:!0});var h8t=s(dK);PBr=r(h8t,"FlaxPegasusForConditionalGeneration"),h8t.forEach(t),BBr=r(bNe," (Pegasus model)"),bNe.forEach(t),IBr=i(ze),ZC=n(ze,"LI",{});var vNe=s(ZC);xMe=n(vNe,"STRONG",{});var p8t=s(xMe);NBr=r(p8t,"t5"),p8t.forEach(t),qBr=r(vNe," \u2014 "),cK=n(vNe,"A",{href:!0});var _8t=s(cK);jBr=r(_8t,"FlaxT5ForConditionalGeneration"),_8t.forEach(t),DBr=r(vNe," (T5 model)"),vNe.forEach(t),ze.forEach(t),GBr=i(Jl),T(e5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Uje=i(f),Xc=n(f,"H2",{class:!0});var rOe=s(Xc);o5=n(rOe,"A",{id:!0,class:!0,href:!0});var u8t=s(o5);$Me=n(u8t,"SPAN",{});var b8t=s($Me);T(K9.$$.fragment,b8t),b8t.forEach(t),u8t.forEach(t),OBr=i(rOe),kMe=n(rOe,"SPAN",{});var v8t=s(kMe);VBr=r(v8t,"FlaxAutoModelForSequenceClassification"),v8t.forEach(t),rOe.forEach(t),Jje=i(f),_r=n(f,"DIV",{class:!0});var Yl=s(_r);T(Z9.$$.fragment,Yl),XBr=i(Yl),zc=n(Yl,"P",{});var Jee=s(zc);zBr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fK=n(Jee,"A",{href:!0});var F8t=s(fK);WBr=r(F8t,"from_pretrained()"),F8t.forEach(t),QBr=r(Jee," class method or the "),mK=n(Jee,"A",{href:!0});var T8t=s(mK);HBr=r(T8t,"from_config()"),T8t.forEach(t),UBr=r(Jee,` class
method.`),Jee.forEach(t),JBr=i(Yl),ex=n(Yl,"P",{});var tOe=s(ex);YBr=r(tOe,"This class cannot be instantiated directly using "),SMe=n(tOe,"CODE",{});var M8t=s(SMe);KBr=r(M8t,"__init__()"),M8t.forEach(t),ZBr=r(tOe," (throws an error)."),tOe.forEach(t),eIr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var fA=s(Wt);T(ox.$$.fragment,fA),oIr=i(fA),RMe=n(fA,"P",{});var E8t=s(RMe);rIr=r(E8t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),E8t.forEach(t),tIr=i(fA),Wc=n(fA,"P",{});var Yee=s(Wc);aIr=r(Yee,`Note:
Loading a model from its configuration file does `),PMe=n(Yee,"STRONG",{});var C8t=s(PMe);nIr=r(C8t,"not"),C8t.forEach(t),sIr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=n(Yee,"A",{href:!0});var w8t=s(gK);lIr=r(w8t,"from_pretrained()"),w8t.forEach(t),iIr=r(Yee," to load the model weights."),Yee.forEach(t),dIr=i(fA),T(r5.$$.fragment,fA),fA.forEach(t),cIr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(rx.$$.fragment,Kl),fIr=i(Kl),BMe=n(Kl,"P",{});var A8t=s(BMe);mIr=r(A8t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),A8t.forEach(t),gIr=i(Kl),vn=n(Kl,"P",{});var mA=s(vn);hIr=r(mA,"The model class to instantiate is selected based on the "),IMe=n(mA,"CODE",{});var y8t=s(IMe);pIr=r(y8t,"model_type"),y8t.forEach(t),_Ir=r(mA,` property of the config object (either
passed as an argument or loaded from `),NMe=n(mA,"CODE",{});var L8t=s(NMe);uIr=r(L8t,"pretrained_model_name_or_path"),L8t.forEach(t),bIr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qMe=n(mA,"CODE",{});var x8t=s(qMe);vIr=r(x8t,"pretrained_model_name_or_path"),x8t.forEach(t),FIr=r(mA,":"),mA.forEach(t),TIr=i(Kl),xe=n(Kl,"UL",{});var Ne=s(xe);t5=n(Ne,"LI",{});var FNe=s(t5);jMe=n(FNe,"STRONG",{});var $8t=s(jMe);MIr=r($8t,"albert"),$8t.forEach(t),EIr=r(FNe," \u2014 "),hK=n(FNe,"A",{href:!0});var k8t=s(hK);CIr=r(k8t,"FlaxAlbertForSequenceClassification"),k8t.forEach(t),wIr=r(FNe," (ALBERT model)"),FNe.forEach(t),AIr=i(Ne),a5=n(Ne,"LI",{});var TNe=s(a5);DMe=n(TNe,"STRONG",{});var S8t=s(DMe);yIr=r(S8t,"bart"),S8t.forEach(t),LIr=r(TNe," \u2014 "),pK=n(TNe,"A",{href:!0});var R8t=s(pK);xIr=r(R8t,"FlaxBartForSequenceClassification"),R8t.forEach(t),$Ir=r(TNe," (BART model)"),TNe.forEach(t),kIr=i(Ne),n5=n(Ne,"LI",{});var MNe=s(n5);GMe=n(MNe,"STRONG",{});var P8t=s(GMe);SIr=r(P8t,"bert"),P8t.forEach(t),RIr=r(MNe," \u2014 "),_K=n(MNe,"A",{href:!0});var B8t=s(_K);PIr=r(B8t,"FlaxBertForSequenceClassification"),B8t.forEach(t),BIr=r(MNe," (BERT model)"),MNe.forEach(t),IIr=i(Ne),s5=n(Ne,"LI",{});var ENe=s(s5);OMe=n(ENe,"STRONG",{});var I8t=s(OMe);NIr=r(I8t,"big_bird"),I8t.forEach(t),qIr=r(ENe," \u2014 "),uK=n(ENe,"A",{href:!0});var N8t=s(uK);jIr=r(N8t,"FlaxBigBirdForSequenceClassification"),N8t.forEach(t),DIr=r(ENe," (BigBird model)"),ENe.forEach(t),GIr=i(Ne),l5=n(Ne,"LI",{});var CNe=s(l5);VMe=n(CNe,"STRONG",{});var q8t=s(VMe);OIr=r(q8t,"distilbert"),q8t.forEach(t),VIr=r(CNe," \u2014 "),bK=n(CNe,"A",{href:!0});var j8t=s(bK);XIr=r(j8t,"FlaxDistilBertForSequenceClassification"),j8t.forEach(t),zIr=r(CNe," (DistilBERT model)"),CNe.forEach(t),WIr=i(Ne),i5=n(Ne,"LI",{});var wNe=s(i5);XMe=n(wNe,"STRONG",{});var D8t=s(XMe);QIr=r(D8t,"electra"),D8t.forEach(t),HIr=r(wNe," \u2014 "),vK=n(wNe,"A",{href:!0});var G8t=s(vK);UIr=r(G8t,"FlaxElectraForSequenceClassification"),G8t.forEach(t),JIr=r(wNe," (ELECTRA model)"),wNe.forEach(t),YIr=i(Ne),d5=n(Ne,"LI",{});var ANe=s(d5);zMe=n(ANe,"STRONG",{});var O8t=s(zMe);KIr=r(O8t,"mbart"),O8t.forEach(t),ZIr=r(ANe," \u2014 "),FK=n(ANe,"A",{href:!0});var V8t=s(FK);eNr=r(V8t,"FlaxMBartForSequenceClassification"),V8t.forEach(t),oNr=r(ANe," (mBART model)"),ANe.forEach(t),rNr=i(Ne),c5=n(Ne,"LI",{});var yNe=s(c5);WMe=n(yNe,"STRONG",{});var X8t=s(WMe);tNr=r(X8t,"roberta"),X8t.forEach(t),aNr=r(yNe," \u2014 "),TK=n(yNe,"A",{href:!0});var z8t=s(TK);nNr=r(z8t,"FlaxRobertaForSequenceClassification"),z8t.forEach(t),sNr=r(yNe," (RoBERTa model)"),yNe.forEach(t),lNr=i(Ne),f5=n(Ne,"LI",{});var LNe=s(f5);QMe=n(LNe,"STRONG",{});var W8t=s(QMe);iNr=r(W8t,"roformer"),W8t.forEach(t),dNr=r(LNe," \u2014 "),MK=n(LNe,"A",{href:!0});var Q8t=s(MK);cNr=r(Q8t,"FlaxRoFormerForSequenceClassification"),Q8t.forEach(t),fNr=r(LNe," (RoFormer model)"),LNe.forEach(t),mNr=i(Ne),m5=n(Ne,"LI",{});var xNe=s(m5);HMe=n(xNe,"STRONG",{});var H8t=s(HMe);gNr=r(H8t,"xlm-roberta"),H8t.forEach(t),hNr=r(xNe," \u2014 "),EK=n(xNe,"A",{href:!0});var U8t=s(EK);pNr=r(U8t,"FlaxXLMRobertaForSequenceClassification"),U8t.forEach(t),_Nr=r(xNe," (XLM-RoBERTa model)"),xNe.forEach(t),Ne.forEach(t),uNr=i(Kl),T(g5.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Yje=i(f),Qc=n(f,"H2",{class:!0});var aOe=s(Qc);h5=n(aOe,"A",{id:!0,class:!0,href:!0});var J8t=s(h5);UMe=n(J8t,"SPAN",{});var Y8t=s(UMe);T(tx.$$.fragment,Y8t),Y8t.forEach(t),J8t.forEach(t),bNr=i(aOe),JMe=n(aOe,"SPAN",{});var K8t=s(JMe);vNr=r(K8t,"FlaxAutoModelForQuestionAnswering"),K8t.forEach(t),aOe.forEach(t),Kje=i(f),ur=n(f,"DIV",{class:!0});var Zl=s(ur);T(ax.$$.fragment,Zl),FNr=i(Zl),Hc=n(Zl,"P",{});var Kee=s(Hc);TNr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CK=n(Kee,"A",{href:!0});var Z8t=s(CK);MNr=r(Z8t,"from_pretrained()"),Z8t.forEach(t),ENr=r(Kee," class method or the "),wK=n(Kee,"A",{href:!0});var e9t=s(wK);CNr=r(e9t,"from_config()"),e9t.forEach(t),wNr=r(Kee,` class
method.`),Kee.forEach(t),ANr=i(Zl),nx=n(Zl,"P",{});var nOe=s(nx);yNr=r(nOe,"This class cannot be instantiated directly using "),YMe=n(nOe,"CODE",{});var o9t=s(YMe);LNr=r(o9t,"__init__()"),o9t.forEach(t),xNr=r(nOe," (throws an error)."),nOe.forEach(t),$Nr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var gA=s(Qt);T(sx.$$.fragment,gA),kNr=i(gA),KMe=n(gA,"P",{});var r9t=s(KMe);SNr=r(r9t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),r9t.forEach(t),RNr=i(gA),Uc=n(gA,"P",{});var Zee=s(Uc);PNr=r(Zee,`Note:
Loading a model from its configuration file does `),ZMe=n(Zee,"STRONG",{});var t9t=s(ZMe);BNr=r(t9t,"not"),t9t.forEach(t),INr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=n(Zee,"A",{href:!0});var a9t=s(AK);NNr=r(a9t,"from_pretrained()"),a9t.forEach(t),qNr=r(Zee," to load the model weights."),Zee.forEach(t),jNr=i(gA),T(p5.$$.fragment,gA),gA.forEach(t),DNr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(lx.$$.fragment,ei),GNr=i(ei),e4e=n(ei,"P",{});var n9t=s(e4e);ONr=r(n9t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),n9t.forEach(t),VNr=i(ei),Fn=n(ei,"P",{});var hA=s(Fn);XNr=r(hA,"The model class to instantiate is selected based on the "),o4e=n(hA,"CODE",{});var s9t=s(o4e);zNr=r(s9t,"model_type"),s9t.forEach(t),WNr=r(hA,` property of the config object (either
passed as an argument or loaded from `),r4e=n(hA,"CODE",{});var l9t=s(r4e);QNr=r(l9t,"pretrained_model_name_or_path"),l9t.forEach(t),HNr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t4e=n(hA,"CODE",{});var i9t=s(t4e);UNr=r(i9t,"pretrained_model_name_or_path"),i9t.forEach(t),JNr=r(hA,":"),hA.forEach(t),YNr=i(ei),$e=n(ei,"UL",{});var qe=s($e);_5=n(qe,"LI",{});var $Ne=s(_5);a4e=n($Ne,"STRONG",{});var d9t=s(a4e);KNr=r(d9t,"albert"),d9t.forEach(t),ZNr=r($Ne," \u2014 "),yK=n($Ne,"A",{href:!0});var c9t=s(yK);eqr=r(c9t,"FlaxAlbertForQuestionAnswering"),c9t.forEach(t),oqr=r($Ne," (ALBERT model)"),$Ne.forEach(t),rqr=i(qe),u5=n(qe,"LI",{});var kNe=s(u5);n4e=n(kNe,"STRONG",{});var f9t=s(n4e);tqr=r(f9t,"bart"),f9t.forEach(t),aqr=r(kNe," \u2014 "),LK=n(kNe,"A",{href:!0});var m9t=s(LK);nqr=r(m9t,"FlaxBartForQuestionAnswering"),m9t.forEach(t),sqr=r(kNe," (BART model)"),kNe.forEach(t),lqr=i(qe),b5=n(qe,"LI",{});var SNe=s(b5);s4e=n(SNe,"STRONG",{});var g9t=s(s4e);iqr=r(g9t,"bert"),g9t.forEach(t),dqr=r(SNe," \u2014 "),xK=n(SNe,"A",{href:!0});var h9t=s(xK);cqr=r(h9t,"FlaxBertForQuestionAnswering"),h9t.forEach(t),fqr=r(SNe," (BERT model)"),SNe.forEach(t),mqr=i(qe),v5=n(qe,"LI",{});var RNe=s(v5);l4e=n(RNe,"STRONG",{});var p9t=s(l4e);gqr=r(p9t,"big_bird"),p9t.forEach(t),hqr=r(RNe," \u2014 "),$K=n(RNe,"A",{href:!0});var _9t=s($K);pqr=r(_9t,"FlaxBigBirdForQuestionAnswering"),_9t.forEach(t),_qr=r(RNe," (BigBird model)"),RNe.forEach(t),uqr=i(qe),F5=n(qe,"LI",{});var PNe=s(F5);i4e=n(PNe,"STRONG",{});var u9t=s(i4e);bqr=r(u9t,"distilbert"),u9t.forEach(t),vqr=r(PNe," \u2014 "),kK=n(PNe,"A",{href:!0});var b9t=s(kK);Fqr=r(b9t,"FlaxDistilBertForQuestionAnswering"),b9t.forEach(t),Tqr=r(PNe," (DistilBERT model)"),PNe.forEach(t),Mqr=i(qe),T5=n(qe,"LI",{});var BNe=s(T5);d4e=n(BNe,"STRONG",{});var v9t=s(d4e);Eqr=r(v9t,"electra"),v9t.forEach(t),Cqr=r(BNe," \u2014 "),SK=n(BNe,"A",{href:!0});var F9t=s(SK);wqr=r(F9t,"FlaxElectraForQuestionAnswering"),F9t.forEach(t),Aqr=r(BNe," (ELECTRA model)"),BNe.forEach(t),yqr=i(qe),M5=n(qe,"LI",{});var INe=s(M5);c4e=n(INe,"STRONG",{});var T9t=s(c4e);Lqr=r(T9t,"mbart"),T9t.forEach(t),xqr=r(INe," \u2014 "),RK=n(INe,"A",{href:!0});var M9t=s(RK);$qr=r(M9t,"FlaxMBartForQuestionAnswering"),M9t.forEach(t),kqr=r(INe," (mBART model)"),INe.forEach(t),Sqr=i(qe),E5=n(qe,"LI",{});var NNe=s(E5);f4e=n(NNe,"STRONG",{});var E9t=s(f4e);Rqr=r(E9t,"roberta"),E9t.forEach(t),Pqr=r(NNe," \u2014 "),PK=n(NNe,"A",{href:!0});var C9t=s(PK);Bqr=r(C9t,"FlaxRobertaForQuestionAnswering"),C9t.forEach(t),Iqr=r(NNe," (RoBERTa model)"),NNe.forEach(t),Nqr=i(qe),C5=n(qe,"LI",{});var qNe=s(C5);m4e=n(qNe,"STRONG",{});var w9t=s(m4e);qqr=r(w9t,"roformer"),w9t.forEach(t),jqr=r(qNe," \u2014 "),BK=n(qNe,"A",{href:!0});var A9t=s(BK);Dqr=r(A9t,"FlaxRoFormerForQuestionAnswering"),A9t.forEach(t),Gqr=r(qNe," (RoFormer model)"),qNe.forEach(t),Oqr=i(qe),w5=n(qe,"LI",{});var jNe=s(w5);g4e=n(jNe,"STRONG",{});var y9t=s(g4e);Vqr=r(y9t,"xlm-roberta"),y9t.forEach(t),Xqr=r(jNe," \u2014 "),IK=n(jNe,"A",{href:!0});var L9t=s(IK);zqr=r(L9t,"FlaxXLMRobertaForQuestionAnswering"),L9t.forEach(t),Wqr=r(jNe," (XLM-RoBERTa model)"),jNe.forEach(t),qe.forEach(t),Qqr=i(ei),T(A5.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),Zje=i(f),Jc=n(f,"H2",{class:!0});var sOe=s(Jc);y5=n(sOe,"A",{id:!0,class:!0,href:!0});var x9t=s(y5);h4e=n(x9t,"SPAN",{});var $9t=s(h4e);T(ix.$$.fragment,$9t),$9t.forEach(t),x9t.forEach(t),Hqr=i(sOe),p4e=n(sOe,"SPAN",{});var k9t=s(p4e);Uqr=r(k9t,"FlaxAutoModelForTokenClassification"),k9t.forEach(t),sOe.forEach(t),eDe=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(dx.$$.fragment,oi),Jqr=i(oi),Yc=n(oi,"P",{});var eoe=s(Yc);Yqr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NK=n(eoe,"A",{href:!0});var S9t=s(NK);Kqr=r(S9t,"from_pretrained()"),S9t.forEach(t),Zqr=r(eoe," class method or the "),qK=n(eoe,"A",{href:!0});var R9t=s(qK);ejr=r(R9t,"from_config()"),R9t.forEach(t),ojr=r(eoe,` class
method.`),eoe.forEach(t),rjr=i(oi),cx=n(oi,"P",{});var lOe=s(cx);tjr=r(lOe,"This class cannot be instantiated directly using "),_4e=n(lOe,"CODE",{});var P9t=s(_4e);ajr=r(P9t,"__init__()"),P9t.forEach(t),njr=r(lOe," (throws an error)."),lOe.forEach(t),sjr=i(oi),Ht=n(oi,"DIV",{class:!0});var pA=s(Ht);T(fx.$$.fragment,pA),ljr=i(pA),u4e=n(pA,"P",{});var B9t=s(u4e);ijr=r(B9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),B9t.forEach(t),djr=i(pA),Kc=n(pA,"P",{});var ooe=s(Kc);cjr=r(ooe,`Note:
Loading a model from its configuration file does `),b4e=n(ooe,"STRONG",{});var I9t=s(b4e);fjr=r(I9t,"not"),I9t.forEach(t),mjr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(ooe,"A",{href:!0});var N9t=s(jK);gjr=r(N9t,"from_pretrained()"),N9t.forEach(t),hjr=r(ooe," to load the model weights."),ooe.forEach(t),pjr=i(pA),T(L5.$$.fragment,pA),pA.forEach(t),_jr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(mx.$$.fragment,ri),ujr=i(ri),v4e=n(ri,"P",{});var q9t=s(v4e);bjr=r(q9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),q9t.forEach(t),vjr=i(ri),Tn=n(ri,"P",{});var _A=s(Tn);Fjr=r(_A,"The model class to instantiate is selected based on the "),F4e=n(_A,"CODE",{});var j9t=s(F4e);Tjr=r(j9t,"model_type"),j9t.forEach(t),Mjr=r(_A,` property of the config object (either
passed as an argument or loaded from `),T4e=n(_A,"CODE",{});var D9t=s(T4e);Ejr=r(D9t,"pretrained_model_name_or_path"),D9t.forEach(t),Cjr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M4e=n(_A,"CODE",{});var G9t=s(M4e);wjr=r(G9t,"pretrained_model_name_or_path"),G9t.forEach(t),Ajr=r(_A,":"),_A.forEach(t),yjr=i(ri),De=n(ri,"UL",{});var Fo=s(De);x5=n(Fo,"LI",{});var DNe=s(x5);E4e=n(DNe,"STRONG",{});var O9t=s(E4e);Ljr=r(O9t,"albert"),O9t.forEach(t),xjr=r(DNe," \u2014 "),DK=n(DNe,"A",{href:!0});var V9t=s(DK);$jr=r(V9t,"FlaxAlbertForTokenClassification"),V9t.forEach(t),kjr=r(DNe," (ALBERT model)"),DNe.forEach(t),Sjr=i(Fo),$5=n(Fo,"LI",{});var GNe=s($5);C4e=n(GNe,"STRONG",{});var X9t=s(C4e);Rjr=r(X9t,"bert"),X9t.forEach(t),Pjr=r(GNe," \u2014 "),GK=n(GNe,"A",{href:!0});var z9t=s(GK);Bjr=r(z9t,"FlaxBertForTokenClassification"),z9t.forEach(t),Ijr=r(GNe," (BERT model)"),GNe.forEach(t),Njr=i(Fo),k5=n(Fo,"LI",{});var ONe=s(k5);w4e=n(ONe,"STRONG",{});var W9t=s(w4e);qjr=r(W9t,"big_bird"),W9t.forEach(t),jjr=r(ONe," \u2014 "),OK=n(ONe,"A",{href:!0});var Q9t=s(OK);Djr=r(Q9t,"FlaxBigBirdForTokenClassification"),Q9t.forEach(t),Gjr=r(ONe," (BigBird model)"),ONe.forEach(t),Ojr=i(Fo),S5=n(Fo,"LI",{});var VNe=s(S5);A4e=n(VNe,"STRONG",{});var H9t=s(A4e);Vjr=r(H9t,"distilbert"),H9t.forEach(t),Xjr=r(VNe," \u2014 "),VK=n(VNe,"A",{href:!0});var U9t=s(VK);zjr=r(U9t,"FlaxDistilBertForTokenClassification"),U9t.forEach(t),Wjr=r(VNe," (DistilBERT model)"),VNe.forEach(t),Qjr=i(Fo),R5=n(Fo,"LI",{});var XNe=s(R5);y4e=n(XNe,"STRONG",{});var J9t=s(y4e);Hjr=r(J9t,"electra"),J9t.forEach(t),Ujr=r(XNe," \u2014 "),XK=n(XNe,"A",{href:!0});var Y9t=s(XK);Jjr=r(Y9t,"FlaxElectraForTokenClassification"),Y9t.forEach(t),Yjr=r(XNe," (ELECTRA model)"),XNe.forEach(t),Kjr=i(Fo),P5=n(Fo,"LI",{});var zNe=s(P5);L4e=n(zNe,"STRONG",{});var K9t=s(L4e);Zjr=r(K9t,"roberta"),K9t.forEach(t),eDr=r(zNe," \u2014 "),zK=n(zNe,"A",{href:!0});var Z9t=s(zK);oDr=r(Z9t,"FlaxRobertaForTokenClassification"),Z9t.forEach(t),rDr=r(zNe," (RoBERTa model)"),zNe.forEach(t),tDr=i(Fo),B5=n(Fo,"LI",{});var WNe=s(B5);x4e=n(WNe,"STRONG",{});var ext=s(x4e);aDr=r(ext,"roformer"),ext.forEach(t),nDr=r(WNe," \u2014 "),WK=n(WNe,"A",{href:!0});var oxt=s(WK);sDr=r(oxt,"FlaxRoFormerForTokenClassification"),oxt.forEach(t),lDr=r(WNe," (RoFormer model)"),WNe.forEach(t),iDr=i(Fo),I5=n(Fo,"LI",{});var QNe=s(I5);$4e=n(QNe,"STRONG",{});var rxt=s($4e);dDr=r(rxt,"xlm-roberta"),rxt.forEach(t),cDr=r(QNe," \u2014 "),QK=n(QNe,"A",{href:!0});var txt=s(QK);fDr=r(txt,"FlaxXLMRobertaForTokenClassification"),txt.forEach(t),mDr=r(QNe," (XLM-RoBERTa model)"),QNe.forEach(t),Fo.forEach(t),gDr=i(ri),T(N5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),oDe=i(f),Zc=n(f,"H2",{class:!0});var iOe=s(Zc);q5=n(iOe,"A",{id:!0,class:!0,href:!0});var axt=s(q5);k4e=n(axt,"SPAN",{});var nxt=s(k4e);T(gx.$$.fragment,nxt),nxt.forEach(t),axt.forEach(t),hDr=i(iOe),S4e=n(iOe,"SPAN",{});var sxt=s(S4e);pDr=r(sxt,"FlaxAutoModelForMultipleChoice"),sxt.forEach(t),iOe.forEach(t),rDe=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(hx.$$.fragment,ti),_Dr=i(ti),ef=n(ti,"P",{});var roe=s(ef);uDr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HK=n(roe,"A",{href:!0});var lxt=s(HK);bDr=r(lxt,"from_pretrained()"),lxt.forEach(t),vDr=r(roe," class method or the "),UK=n(roe,"A",{href:!0});var ixt=s(UK);FDr=r(ixt,"from_config()"),ixt.forEach(t),TDr=r(roe,` class
method.`),roe.forEach(t),MDr=i(ti),px=n(ti,"P",{});var dOe=s(px);EDr=r(dOe,"This class cannot be instantiated directly using "),R4e=n(dOe,"CODE",{});var dxt=s(R4e);CDr=r(dxt,"__init__()"),dxt.forEach(t),wDr=r(dOe," (throws an error)."),dOe.forEach(t),ADr=i(ti),Ut=n(ti,"DIV",{class:!0});var uA=s(Ut);T(_x.$$.fragment,uA),yDr=i(uA),P4e=n(uA,"P",{});var cxt=s(P4e);LDr=r(cxt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cxt.forEach(t),xDr=i(uA),of=n(uA,"P",{});var toe=s(of);$Dr=r(toe,`Note:
Loading a model from its configuration file does `),B4e=n(toe,"STRONG",{});var fxt=s(B4e);kDr=r(fxt,"not"),fxt.forEach(t),SDr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=n(toe,"A",{href:!0});var mxt=s(JK);RDr=r(mxt,"from_pretrained()"),mxt.forEach(t),PDr=r(toe," to load the model weights."),toe.forEach(t),BDr=i(uA),T(j5.$$.fragment,uA),uA.forEach(t),IDr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(ux.$$.fragment,ai),NDr=i(ai),I4e=n(ai,"P",{});var gxt=s(I4e);qDr=r(gxt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gxt.forEach(t),jDr=i(ai),Mn=n(ai,"P",{});var bA=s(Mn);DDr=r(bA,"The model class to instantiate is selected based on the "),N4e=n(bA,"CODE",{});var hxt=s(N4e);GDr=r(hxt,"model_type"),hxt.forEach(t),ODr=r(bA,` property of the config object (either
passed as an argument or loaded from `),q4e=n(bA,"CODE",{});var pxt=s(q4e);VDr=r(pxt,"pretrained_model_name_or_path"),pxt.forEach(t),XDr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j4e=n(bA,"CODE",{});var _xt=s(j4e);zDr=r(_xt,"pretrained_model_name_or_path"),_xt.forEach(t),WDr=r(bA,":"),bA.forEach(t),QDr=i(ai),Ge=n(ai,"UL",{});var To=s(Ge);D5=n(To,"LI",{});var HNe=s(D5);D4e=n(HNe,"STRONG",{});var uxt=s(D4e);HDr=r(uxt,"albert"),uxt.forEach(t),UDr=r(HNe," \u2014 "),YK=n(HNe,"A",{href:!0});var bxt=s(YK);JDr=r(bxt,"FlaxAlbertForMultipleChoice"),bxt.forEach(t),YDr=r(HNe," (ALBERT model)"),HNe.forEach(t),KDr=i(To),G5=n(To,"LI",{});var UNe=s(G5);G4e=n(UNe,"STRONG",{});var vxt=s(G4e);ZDr=r(vxt,"bert"),vxt.forEach(t),eGr=r(UNe," \u2014 "),KK=n(UNe,"A",{href:!0});var Fxt=s(KK);oGr=r(Fxt,"FlaxBertForMultipleChoice"),Fxt.forEach(t),rGr=r(UNe," (BERT model)"),UNe.forEach(t),tGr=i(To),O5=n(To,"LI",{});var JNe=s(O5);O4e=n(JNe,"STRONG",{});var Txt=s(O4e);aGr=r(Txt,"big_bird"),Txt.forEach(t),nGr=r(JNe," \u2014 "),ZK=n(JNe,"A",{href:!0});var Mxt=s(ZK);sGr=r(Mxt,"FlaxBigBirdForMultipleChoice"),Mxt.forEach(t),lGr=r(JNe," (BigBird model)"),JNe.forEach(t),iGr=i(To),V5=n(To,"LI",{});var YNe=s(V5);V4e=n(YNe,"STRONG",{});var Ext=s(V4e);dGr=r(Ext,"distilbert"),Ext.forEach(t),cGr=r(YNe," \u2014 "),eZ=n(YNe,"A",{href:!0});var Cxt=s(eZ);fGr=r(Cxt,"FlaxDistilBertForMultipleChoice"),Cxt.forEach(t),mGr=r(YNe," (DistilBERT model)"),YNe.forEach(t),gGr=i(To),X5=n(To,"LI",{});var KNe=s(X5);X4e=n(KNe,"STRONG",{});var wxt=s(X4e);hGr=r(wxt,"electra"),wxt.forEach(t),pGr=r(KNe," \u2014 "),oZ=n(KNe,"A",{href:!0});var Axt=s(oZ);_Gr=r(Axt,"FlaxElectraForMultipleChoice"),Axt.forEach(t),uGr=r(KNe," (ELECTRA model)"),KNe.forEach(t),bGr=i(To),z5=n(To,"LI",{});var ZNe=s(z5);z4e=n(ZNe,"STRONG",{});var yxt=s(z4e);vGr=r(yxt,"roberta"),yxt.forEach(t),FGr=r(ZNe," \u2014 "),rZ=n(ZNe,"A",{href:!0});var Lxt=s(rZ);TGr=r(Lxt,"FlaxRobertaForMultipleChoice"),Lxt.forEach(t),MGr=r(ZNe," (RoBERTa model)"),ZNe.forEach(t),EGr=i(To),W5=n(To,"LI",{});var eqe=s(W5);W4e=n(eqe,"STRONG",{});var xxt=s(W4e);CGr=r(xxt,"roformer"),xxt.forEach(t),wGr=r(eqe," \u2014 "),tZ=n(eqe,"A",{href:!0});var $xt=s(tZ);AGr=r($xt,"FlaxRoFormerForMultipleChoice"),$xt.forEach(t),yGr=r(eqe," (RoFormer model)"),eqe.forEach(t),LGr=i(To),Q5=n(To,"LI",{});var oqe=s(Q5);Q4e=n(oqe,"STRONG",{});var kxt=s(Q4e);xGr=r(kxt,"xlm-roberta"),kxt.forEach(t),$Gr=r(oqe," \u2014 "),aZ=n(oqe,"A",{href:!0});var Sxt=s(aZ);kGr=r(Sxt,"FlaxXLMRobertaForMultipleChoice"),Sxt.forEach(t),SGr=r(oqe," (XLM-RoBERTa model)"),oqe.forEach(t),To.forEach(t),RGr=i(ai),T(H5.$$.fragment,ai),ai.forEach(t),ti.forEach(t),tDe=i(f),rf=n(f,"H2",{class:!0});var cOe=s(rf);U5=n(cOe,"A",{id:!0,class:!0,href:!0});var Rxt=s(U5);H4e=n(Rxt,"SPAN",{});var Pxt=s(H4e);T(bx.$$.fragment,Pxt),Pxt.forEach(t),Rxt.forEach(t),PGr=i(cOe),U4e=n(cOe,"SPAN",{});var Bxt=s(U4e);BGr=r(Bxt,"FlaxAutoModelForNextSentencePrediction"),Bxt.forEach(t),cOe.forEach(t),aDe=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(vx.$$.fragment,ni),IGr=i(ni),tf=n(ni,"P",{});var aoe=s(tf);NGr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),nZ=n(aoe,"A",{href:!0});var Ixt=s(nZ);qGr=r(Ixt,"from_pretrained()"),Ixt.forEach(t),jGr=r(aoe," class method or the "),sZ=n(aoe,"A",{href:!0});var Nxt=s(sZ);DGr=r(Nxt,"from_config()"),Nxt.forEach(t),GGr=r(aoe,` class
method.`),aoe.forEach(t),OGr=i(ni),Fx=n(ni,"P",{});var fOe=s(Fx);VGr=r(fOe,"This class cannot be instantiated directly using "),J4e=n(fOe,"CODE",{});var qxt=s(J4e);XGr=r(qxt,"__init__()"),qxt.forEach(t),zGr=r(fOe," (throws an error)."),fOe.forEach(t),WGr=i(ni),Jt=n(ni,"DIV",{class:!0});var vA=s(Jt);T(Tx.$$.fragment,vA),QGr=i(vA),Y4e=n(vA,"P",{});var jxt=s(Y4e);HGr=r(jxt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jxt.forEach(t),UGr=i(vA),af=n(vA,"P",{});var noe=s(af);JGr=r(noe,`Note:
Loading a model from its configuration file does `),K4e=n(noe,"STRONG",{});var Dxt=s(K4e);YGr=r(Dxt,"not"),Dxt.forEach(t),KGr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=n(noe,"A",{href:!0});var Gxt=s(lZ);ZGr=r(Gxt,"from_pretrained()"),Gxt.forEach(t),eOr=r(noe," to load the model weights."),noe.forEach(t),oOr=i(vA),T(J5.$$.fragment,vA),vA.forEach(t),rOr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(Mx.$$.fragment,si),tOr=i(si),Z4e=n(si,"P",{});var Oxt=s(Z4e);aOr=r(Oxt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Oxt.forEach(t),nOr=i(si),En=n(si,"P",{});var FA=s(En);sOr=r(FA,"The model class to instantiate is selected based on the "),eEe=n(FA,"CODE",{});var Vxt=s(eEe);lOr=r(Vxt,"model_type"),Vxt.forEach(t),iOr=r(FA,` property of the config object (either
passed as an argument or loaded from `),oEe=n(FA,"CODE",{});var Xxt=s(oEe);dOr=r(Xxt,"pretrained_model_name_or_path"),Xxt.forEach(t),cOr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rEe=n(FA,"CODE",{});var zxt=s(rEe);fOr=r(zxt,"pretrained_model_name_or_path"),zxt.forEach(t),mOr=r(FA,":"),FA.forEach(t),gOr=i(si),tEe=n(si,"UL",{});var Wxt=s(tEe);Y5=n(Wxt,"LI",{});var rqe=s(Y5);aEe=n(rqe,"STRONG",{});var Qxt=s(aEe);hOr=r(Qxt,"bert"),Qxt.forEach(t),pOr=r(rqe," \u2014 "),iZ=n(rqe,"A",{href:!0});var Hxt=s(iZ);_Or=r(Hxt,"FlaxBertForNextSentencePrediction"),Hxt.forEach(t),uOr=r(rqe," (BERT model)"),rqe.forEach(t),Wxt.forEach(t),bOr=i(si),T(K5.$$.fragment,si),si.forEach(t),ni.forEach(t),nDe=i(f),nf=n(f,"H2",{class:!0});var mOe=s(nf);Z5=n(mOe,"A",{id:!0,class:!0,href:!0});var Uxt=s(Z5);nEe=n(Uxt,"SPAN",{});var Jxt=s(nEe);T(Ex.$$.fragment,Jxt),Jxt.forEach(t),Uxt.forEach(t),vOr=i(mOe),sEe=n(mOe,"SPAN",{});var Yxt=s(sEe);FOr=r(Yxt,"FlaxAutoModelForImageClassification"),Yxt.forEach(t),mOe.forEach(t),sDe=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(Cx.$$.fragment,li),TOr=i(li),sf=n(li,"P",{});var soe=s(sf);MOr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dZ=n(soe,"A",{href:!0});var Kxt=s(dZ);EOr=r(Kxt,"from_pretrained()"),Kxt.forEach(t),COr=r(soe," class method or the "),cZ=n(soe,"A",{href:!0});var Zxt=s(cZ);wOr=r(Zxt,"from_config()"),Zxt.forEach(t),AOr=r(soe,` class
method.`),soe.forEach(t),yOr=i(li),wx=n(li,"P",{});var gOe=s(wx);LOr=r(gOe,"This class cannot be instantiated directly using "),lEe=n(gOe,"CODE",{});var e$t=s(lEe);xOr=r(e$t,"__init__()"),e$t.forEach(t),$Or=r(gOe," (throws an error)."),gOe.forEach(t),kOr=i(li),Yt=n(li,"DIV",{class:!0});var TA=s(Yt);T(Ax.$$.fragment,TA),SOr=i(TA),iEe=n(TA,"P",{});var o$t=s(iEe);ROr=r(o$t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),o$t.forEach(t),POr=i(TA),lf=n(TA,"P",{});var loe=s(lf);BOr=r(loe,`Note:
Loading a model from its configuration file does `),dEe=n(loe,"STRONG",{});var r$t=s(dEe);IOr=r(r$t,"not"),r$t.forEach(t),NOr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=n(loe,"A",{href:!0});var t$t=s(fZ);qOr=r(t$t,"from_pretrained()"),t$t.forEach(t),jOr=r(loe," to load the model weights."),loe.forEach(t),DOr=i(TA),T(ew.$$.fragment,TA),TA.forEach(t),GOr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(yx.$$.fragment,ii),OOr=i(ii),cEe=n(ii,"P",{});var a$t=s(cEe);VOr=r(a$t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),a$t.forEach(t),XOr=i(ii),Cn=n(ii,"P",{});var MA=s(Cn);zOr=r(MA,"The model class to instantiate is selected based on the "),fEe=n(MA,"CODE",{});var n$t=s(fEe);WOr=r(n$t,"model_type"),n$t.forEach(t),QOr=r(MA,` property of the config object (either
passed as an argument or loaded from `),mEe=n(MA,"CODE",{});var s$t=s(mEe);HOr=r(s$t,"pretrained_model_name_or_path"),s$t.forEach(t),UOr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gEe=n(MA,"CODE",{});var l$t=s(gEe);JOr=r(l$t,"pretrained_model_name_or_path"),l$t.forEach(t),YOr=r(MA,":"),MA.forEach(t),KOr=i(ii),Lx=n(ii,"UL",{});var hOe=s(Lx);ow=n(hOe,"LI",{});var tqe=s(ow);hEe=n(tqe,"STRONG",{});var i$t=s(hEe);ZOr=r(i$t,"beit"),i$t.forEach(t),eVr=r(tqe," \u2014 "),mZ=n(tqe,"A",{href:!0});var d$t=s(mZ);oVr=r(d$t,"FlaxBeitForImageClassification"),d$t.forEach(t),rVr=r(tqe," (BEiT model)"),tqe.forEach(t),tVr=i(hOe),rw=n(hOe,"LI",{});var aqe=s(rw);pEe=n(aqe,"STRONG",{});var c$t=s(pEe);aVr=r(c$t,"vit"),c$t.forEach(t),nVr=r(aqe," \u2014 "),gZ=n(aqe,"A",{href:!0});var f$t=s(gZ);sVr=r(f$t,"FlaxViTForImageClassification"),f$t.forEach(t),lVr=r(aqe," (ViT model)"),aqe.forEach(t),hOe.forEach(t),iVr=i(ii),T(tw.$$.fragment,ii),ii.forEach(t),li.forEach(t),lDe=i(f),df=n(f,"H2",{class:!0});var pOe=s(df);aw=n(pOe,"A",{id:!0,class:!0,href:!0});var m$t=s(aw);_Ee=n(m$t,"SPAN",{});var g$t=s(_Ee);T(xx.$$.fragment,g$t),g$t.forEach(t),m$t.forEach(t),dVr=i(pOe),uEe=n(pOe,"SPAN",{});var h$t=s(uEe);cVr=r(h$t,"FlaxAutoModelForVision2Seq"),h$t.forEach(t),pOe.forEach(t),iDe=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T($x.$$.fragment,di),fVr=i(di),cf=n(di,"P",{});var ioe=s(cf);mVr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hZ=n(ioe,"A",{href:!0});var p$t=s(hZ);gVr=r(p$t,"from_pretrained()"),p$t.forEach(t),hVr=r(ioe," class method or the "),pZ=n(ioe,"A",{href:!0});var _$t=s(pZ);pVr=r(_$t,"from_config()"),_$t.forEach(t),_Vr=r(ioe,` class
method.`),ioe.forEach(t),uVr=i(di),kx=n(di,"P",{});var _Oe=s(kx);bVr=r(_Oe,"This class cannot be instantiated directly using "),bEe=n(_Oe,"CODE",{});var u$t=s(bEe);vVr=r(u$t,"__init__()"),u$t.forEach(t),FVr=r(_Oe," (throws an error)."),_Oe.forEach(t),TVr=i(di),Kt=n(di,"DIV",{class:!0});var EA=s(Kt);T(Sx.$$.fragment,EA),MVr=i(EA),vEe=n(EA,"P",{});var b$t=s(vEe);EVr=r(b$t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),b$t.forEach(t),CVr=i(EA),ff=n(EA,"P",{});var doe=s(ff);wVr=r(doe,`Note:
Loading a model from its configuration file does `),FEe=n(doe,"STRONG",{});var v$t=s(FEe);AVr=r(v$t,"not"),v$t.forEach(t),yVr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=n(doe,"A",{href:!0});var F$t=s(_Z);LVr=r(F$t,"from_pretrained()"),F$t.forEach(t),xVr=r(doe," to load the model weights."),doe.forEach(t),$Vr=i(EA),T(nw.$$.fragment,EA),EA.forEach(t),kVr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(Rx.$$.fragment,ci),SVr=i(ci),TEe=n(ci,"P",{});var T$t=s(TEe);RVr=r(T$t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),T$t.forEach(t),PVr=i(ci),wn=n(ci,"P",{});var CA=s(wn);BVr=r(CA,"The model class to instantiate is selected based on the "),MEe=n(CA,"CODE",{});var M$t=s(MEe);IVr=r(M$t,"model_type"),M$t.forEach(t),NVr=r(CA,` property of the config object (either
passed as an argument or loaded from `),EEe=n(CA,"CODE",{});var E$t=s(EEe);qVr=r(E$t,"pretrained_model_name_or_path"),E$t.forEach(t),jVr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CEe=n(CA,"CODE",{});var C$t=s(CEe);DVr=r(C$t,"pretrained_model_name_or_path"),C$t.forEach(t),GVr=r(CA,":"),CA.forEach(t),OVr=i(ci),wEe=n(ci,"UL",{});var w$t=s(wEe);sw=n(w$t,"LI",{});var nqe=s(sw);AEe=n(nqe,"STRONG",{});var A$t=s(AEe);VVr=r(A$t,"vision-encoder-decoder"),A$t.forEach(t),XVr=r(nqe," \u2014 "),uZ=n(nqe,"A",{href:!0});var y$t=s(uZ);zVr=r(y$t,"FlaxVisionEncoderDecoderModel"),y$t.forEach(t),WVr=r(nqe," (Vision Encoder decoder model)"),nqe.forEach(t),w$t.forEach(t),QVr=i(ci),T(lw.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(kSt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.AutoTokenizer"),c(ui,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(Z$,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(ek,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertConfig"),c(ok,"href","/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartConfig"),c(rk,"href","/docs/transformers/pr_17302/en/model_doc/beit#transformers.BeitConfig"),c(tk,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertConfig"),c(ak,"href","/docs/transformers/pr_17302/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(nk,"href","/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdConfig"),c(sk,"href","/docs/transformers/pr_17302/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(lk,"href","/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(ik,"href","/docs/transformers/pr_17302/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(dk,"href","/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertConfig"),c(ck,"href","/docs/transformers/pr_17302/en/model_doc/canine#transformers.CanineConfig"),c(fk,"href","/docs/transformers/pr_17302/en/model_doc/clip#transformers.CLIPConfig"),c(mk,"href","/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertConfig"),c(gk,"href","/docs/transformers/pr_17302/en/model_doc/convnext#transformers.ConvNextConfig"),c(hk,"href","/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.CTRLConfig"),c(pk,"href","/docs/transformers/pr_17302/en/model_doc/cvt#transformers.CvtConfig"),c(_k,"href","/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(uk,"href","/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(bk,"href","/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(vk,"href","/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaConfig"),c(Fk,"href","/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Tk,"href","/docs/transformers/pr_17302/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Mk,"href","/docs/transformers/pr_17302/en/model_doc/deit#transformers.DeiTConfig"),c(Ek,"href","/docs/transformers/pr_17302/en/model_doc/detr#transformers.DetrConfig"),c(Ck,"href","/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertConfig"),c(wk,"href","/docs/transformers/pr_17302/en/model_doc/dpr#transformers.DPRConfig"),c(Ak,"href","/docs/transformers/pr_17302/en/model_doc/dpt#transformers.DPTConfig"),c(yk,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraConfig"),c(Lk,"href","/docs/transformers/pr_17302/en/model_doc/emformer#transformers.EmformerConfig"),c(xk,"href","/docs/transformers/pr_17302/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c($k,"href","/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertConfig"),c(kk,"href","/docs/transformers/pr_17302/en/model_doc/flava#transformers.FlavaConfig"),c(Sk,"href","/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetConfig"),c(Rk,"href","/docs/transformers/pr_17302/en/model_doc/fsmt#transformers.FSMTConfig"),c(Pk,"href","/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelConfig"),c(Bk,"href","/docs/transformers/pr_17302/en/model_doc/glpn#transformers.GLPNConfig"),c(Ik,"href","/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2Config"),c(Nk,"href","/docs/transformers/pr_17302/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(qk,"href","/docs/transformers/pr_17302/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(jk,"href","/docs/transformers/pr_17302/en/model_doc/gptj#transformers.GPTJConfig"),c(Dk,"href","/docs/transformers/pr_17302/en/model_doc/hubert#transformers.HubertConfig"),c(Gk,"href","/docs/transformers/pr_17302/en/model_doc/ibert#transformers.IBertConfig"),c(Ok,"href","/docs/transformers/pr_17302/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Vk,"href","/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Xk,"href","/docs/transformers/pr_17302/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(zk,"href","/docs/transformers/pr_17302/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Wk,"href","/docs/transformers/pr_17302/en/model_doc/led#transformers.LEDConfig"),c(Qk,"href","/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerConfig"),c(Hk,"href","/docs/transformers/pr_17302/en/model_doc/luke#transformers.LukeConfig"),c(Uk,"href","/docs/transformers/pr_17302/en/model_doc/lxmert#transformers.LxmertConfig"),c(Jk,"href","/docs/transformers/pr_17302/en/model_doc/m2m_100#transformers.M2M100Config"),c(Yk,"href","/docs/transformers/pr_17302/en/model_doc/marian#transformers.MarianConfig"),c(Kk,"href","/docs/transformers/pr_17302/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Zk,"href","/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartConfig"),c(eS,"href","/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(oS,"href","/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(rS,"href","/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetConfig"),c(tS,"href","/docs/transformers/pr_17302/en/model_doc/mt5#transformers.MT5Config"),c(aS,"href","/docs/transformers/pr_17302/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(nS,"href","/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(sS,"href","/docs/transformers/pr_17302/en/model_doc/opt#transformers.OPTConfig"),c(lS,"href","/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.PegasusConfig"),c(iS,"href","/docs/transformers/pr_17302/en/model_doc/perceiver#transformers.PerceiverConfig"),c(dS,"href","/docs/transformers/pr_17302/en/model_doc/plbart#transformers.PLBartConfig"),c(cS,"href","/docs/transformers/pr_17302/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(fS,"href","/docs/transformers/pr_17302/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(mS,"href","/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(gS,"href","/docs/transformers/pr_17302/en/model_doc/rag#transformers.RagConfig"),c(hS,"href","/docs/transformers/pr_17302/en/model_doc/realm#transformers.RealmConfig"),c(pS,"href","/docs/transformers/pr_17302/en/model_doc/reformer#transformers.ReformerConfig"),c(_S,"href","/docs/transformers/pr_17302/en/model_doc/regnet#transformers.RegNetConfig"),c(uS,"href","/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertConfig"),c(bS,"href","/docs/transformers/pr_17302/en/model_doc/resnet#transformers.ResNetConfig"),c(vS,"href","/docs/transformers/pr_17302/en/model_doc/retribert#transformers.RetriBertConfig"),c(FS,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaConfig"),c(TS,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerConfig"),c(MS,"href","/docs/transformers/pr_17302/en/model_doc/segformer#transformers.SegformerConfig"),c(ES,"href","/docs/transformers/pr_17302/en/model_doc/sew#transformers.SEWConfig"),c(CS,"href","/docs/transformers/pr_17302/en/model_doc/sew-d#transformers.SEWDConfig"),c(wS,"href","/docs/transformers/pr_17302/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(AS,"href","/docs/transformers/pr_17302/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(yS,"href","/docs/transformers/pr_17302/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(LS,"href","/docs/transformers/pr_17302/en/model_doc/splinter#transformers.SplinterConfig"),c(xS,"href","/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c($S,"href","/docs/transformers/pr_17302/en/model_doc/swin#transformers.SwinConfig"),c(kS,"href","/docs/transformers/pr_17302/en/model_doc/t5#transformers.T5Config"),c(SS,"href","/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TapasConfig"),c(RS,"href","/docs/transformers/pr_17302/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(PS,"href","/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(BS,"href","/docs/transformers/pr_17302/en/model_doc/trocr#transformers.TrOCRConfig"),c(IS,"href","/docs/transformers/pr_17302/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(NS,"href","/docs/transformers/pr_17302/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(qS,"href","/docs/transformers/pr_17302/en/model_doc/van#transformers.VanConfig"),c(jS,"href","/docs/transformers/pr_17302/en/model_doc/vilt#transformers.ViltConfig"),c(DS,"href","/docs/transformers/pr_17302/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(GS,"href","/docs/transformers/pr_17302/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(OS,"href","/docs/transformers/pr_17302/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(VS,"href","/docs/transformers/pr_17302/en/model_doc/vit#transformers.ViTConfig"),c(XS,"href","/docs/transformers/pr_17302/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(zS,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(WS,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(QS,"href","/docs/transformers/pr_17302/en/model_doc/wavlm#transformers.WavLMConfig"),c(HS,"href","/docs/transformers/pr_17302/en/model_doc/xglm#transformers.XGLMConfig"),c(US,"href","/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMConfig"),c(JS,"href","/docs/transformers/pr_17302/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(YS,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(KS,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(ZS,"href","/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetConfig"),c(eR,"href","/docs/transformers/pr_17302/en/model_doc/yolos#transformers.YolosConfig"),c(oR,"href","/docs/transformers/pr_17302/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ag,"id","transformers.AutoTokenizer"),c(Ag,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ag,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(rR,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(tR,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertTokenizer"),c(aR,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(nR,"href","/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartTokenizer"),c(sR,"href","/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartTokenizerFast"),c(lR,"href","/docs/transformers/pr_17302/en/model_doc/barthez#transformers.BarthezTokenizer"),c(iR,"href","/docs/transformers/pr_17302/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(dR,"href","/docs/transformers/pr_17302/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(cR,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertTokenizer"),c(fR,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertTokenizerFast"),c(mR,"href","/docs/transformers/pr_17302/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(gR,"href","/docs/transformers/pr_17302/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(hR,"href","/docs/transformers/pr_17302/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(pR,"href","/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(_R,"href","/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(uR,"href","/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(bR,"href","/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(vR,"href","/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(FR,"href","/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(TR,"href","/docs/transformers/pr_17302/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(MR,"href","/docs/transformers/pr_17302/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(ER,"href","/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertTokenizer"),c(CR,"href","/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(wR,"href","/docs/transformers/pr_17302/en/model_doc/canine#transformers.CanineTokenizer"),c(AR,"href","/docs/transformers/pr_17302/en/model_doc/clip#transformers.CLIPTokenizer"),c(yR,"href","/docs/transformers/pr_17302/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(LR,"href","/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(xR,"href","/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c($R,"href","/docs/transformers/pr_17302/en/model_doc/cpm#transformers.CpmTokenizer"),c(kR,"href","/docs/transformers/pr_17302/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(SR,"href","/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(RR,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaTokenizer"),c(PR,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(BR,"href","/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaTokenizer"),c(IR,"href","/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(NR,"href","/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(qR,"href","/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(jR,"href","/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(DR,"href","/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(GR,"href","/docs/transformers/pr_17302/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(OR,"href","/docs/transformers/pr_17302/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(VR,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraTokenizer"),c(XR,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(zR,"href","/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(WR,"href","/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetTokenizer"),c(QR,"href","/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(HR,"href","/docs/transformers/pr_17302/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(UR,"href","/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelTokenizer"),c(JR,"href","/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(YR,"href","/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(KR,"href","/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(ZR,"href","/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eP,"href","/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(oP,"href","/docs/transformers/pr_17302/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(rP,"href","/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tP,"href","/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(aP,"href","/docs/transformers/pr_17302/en/model_doc/herbert#transformers.HerbertTokenizer"),c(nP,"href","/docs/transformers/pr_17302/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(sP,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(lP,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaTokenizer"),c(iP,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(dP,"href","/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(cP,"href","/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(fP,"href","/docs/transformers/pr_17302/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(mP,"href","/docs/transformers/pr_17302/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(gP,"href","/docs/transformers/pr_17302/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(hP,"href","/docs/transformers/pr_17302/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(pP,"href","/docs/transformers/pr_17302/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(_P,"href","/docs/transformers/pr_17302/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(uP,"href","/docs/transformers/pr_17302/en/model_doc/led#transformers.LEDTokenizer"),c(bP,"href","/docs/transformers/pr_17302/en/model_doc/led#transformers.LEDTokenizerFast"),c(vP,"href","/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerTokenizer"),c(FP,"href","/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(TP,"href","/docs/transformers/pr_17302/en/model_doc/luke#transformers.LukeTokenizer"),c(MP,"href","/docs/transformers/pr_17302/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(EP,"href","/docs/transformers/pr_17302/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(CP,"href","/docs/transformers/pr_17302/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(wP,"href","/docs/transformers/pr_17302/en/model_doc/marian#transformers.MarianTokenizer"),c(AP,"href","/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartTokenizer"),c(yP,"href","/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(LP,"href","/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(xP,"href","/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c($P,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertTokenizer"),c(kP,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertTokenizerFast"),c(SP,"href","/docs/transformers/pr_17302/en/model_doc/mluke#transformers.MLukeTokenizer"),c(RP,"href","/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(PP,"href","/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(BP,"href","/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(IP,"href","/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(NP,"href","/docs/transformers/pr_17302/en/model_doc/t5#transformers.T5Tokenizer"),c(qP,"href","/docs/transformers/pr_17302/en/model_doc/t5#transformers.T5TokenizerFast"),c(jP,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertTokenizer"),c(DP,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(GP,"href","/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(OP,"href","/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(VP,"href","/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(XP,"href","/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(zP,"href","/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(WP,"href","/docs/transformers/pr_17302/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(QP,"href","/docs/transformers/pr_17302/en/model_doc/phobert#transformers.PhobertTokenizer"),c(HP,"href","/docs/transformers/pr_17302/en/model_doc/plbart#transformers.PLBartTokenizer"),c(UP,"href","/docs/transformers/pr_17302/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(JP,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertTokenizer"),c(YP,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertTokenizerFast"),c(KP,"href","/docs/transformers/pr_17302/en/model_doc/rag#transformers.RagTokenizer"),c(ZP,"href","/docs/transformers/pr_17302/en/model_doc/realm#transformers.RealmTokenizer"),c(eB,"href","/docs/transformers/pr_17302/en/model_doc/realm#transformers.RealmTokenizerFast"),c(oB,"href","/docs/transformers/pr_17302/en/model_doc/reformer#transformers.ReformerTokenizer"),c(rB,"href","/docs/transformers/pr_17302/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(tB,"href","/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertTokenizer"),c(aB,"href","/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(nB,"href","/docs/transformers/pr_17302/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(sB,"href","/docs/transformers/pr_17302/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(lB,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaTokenizer"),c(iB,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(dB,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(cB,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(fB,"href","/docs/transformers/pr_17302/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(mB,"href","/docs/transformers/pr_17302/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(gB,"href","/docs/transformers/pr_17302/en/model_doc/splinter#transformers.SplinterTokenizer"),c(hB,"href","/docs/transformers/pr_17302/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(pB,"href","/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(_B,"href","/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(uB,"href","/docs/transformers/pr_17302/en/model_doc/t5#transformers.T5Tokenizer"),c(bB,"href","/docs/transformers/pr_17302/en/model_doc/t5#transformers.T5TokenizerFast"),c(vB,"href","/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TapasTokenizer"),c(FB,"href","/docs/transformers/pr_17302/en/model_doc/tapex#transformers.TapexTokenizer"),c(TB,"href","/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(MB,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertTokenizer"),c(EB,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertTokenizerFast"),c(CB,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(wB,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(AB,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(yB,"href","/docs/transformers/pr_17302/en/model_doc/xglm#transformers.XGLMTokenizer"),c(LB,"href","/docs/transformers/pr_17302/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(xB,"href","/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMTokenizer"),c($B,"href","/docs/transformers/pr_17302/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(kB,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(SB,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(RB,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaTokenizer"),c(PB,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(BB,"href","/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(IB,"href","/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(NB,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertTokenizer"),c(qB,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lh,"id","transformers.AutoFeatureExtractor"),c(lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lh,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(jB,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(DB,"href","/docs/transformers/pr_17302/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(GB,"href","/docs/transformers/pr_17302/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(OB,"href","/docs/transformers/pr_17302/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(VB,"href","/docs/transformers/pr_17302/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(XB,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(zB,"href","/docs/transformers/pr_17302/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17302/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(QB,"href","/docs/transformers/pr_17302/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17302/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17302/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17302/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(KB,"href","/docs/transformers/pr_17302/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17302/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(eI,"href","/docs/transformers/pr_17302/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(oI,"href","/docs/transformers/pr_17302/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(rI,"href","/docs/transformers/pr_17302/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17302/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(aI,"href","/docs/transformers/pr_17302/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(nI,"href","/docs/transformers/pr_17302/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(sI,"href","/docs/transformers/pr_17302/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(lI,"href","/docs/transformers/pr_17302/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(iI,"href","/docs/transformers/pr_17302/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17302/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17302/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(fI,"href","/docs/transformers/pr_17302/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(mI,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(gI,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(hI,"href","/docs/transformers/pr_17302/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dh,"id","transformers.AutoProcessor"),c(Dh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dh,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(pI,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(_I,"href","/docs/transformers/pr_17302/en/model_doc/clip#transformers.CLIPProcessor"),c(uI,"href","/docs/transformers/pr_17302/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(bI,"href","/docs/transformers/pr_17302/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(vI,"href","/docs/transformers/pr_17302/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(FI,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(TI,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(MI,"href","/docs/transformers/pr_17302/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(EI,"href","/docs/transformers/pr_17302/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(CI,"href","/docs/transformers/pr_17302/en/model_doc/trocr#transformers.TrOCRProcessor"),c(wI,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(AI,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yI,"href","/docs/transformers/pr_17302/en/model_doc/vilt#transformers.ViltProcessor"),c(LI,"href","/docs/transformers/pr_17302/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(xI,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($I,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kI,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lp,"id","transformers.AutoModel"),c(lp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lp,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(SI,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RI,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PI,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BI,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertModel"),c(II,"href","/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartModel"),c(NI,"href","/docs/transformers/pr_17302/en/model_doc/beit#transformers.BeitModel"),c(qI,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertModel"),c(jI,"href","/docs/transformers/pr_17302/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(DI,"href","/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdModel"),c(GI,"href","/docs/transformers/pr_17302/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(OI,"href","/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(VI,"href","/docs/transformers/pr_17302/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(XI,"href","/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertModel"),c(zI,"href","/docs/transformers/pr_17302/en/model_doc/canine#transformers.CanineModel"),c(WI,"href","/docs/transformers/pr_17302/en/model_doc/clip#transformers.CLIPModel"),c(QI,"href","/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertModel"),c(HI,"href","/docs/transformers/pr_17302/en/model_doc/convnext#transformers.ConvNextModel"),c(UI,"href","/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.CTRLModel"),c(JI,"href","/docs/transformers/pr_17302/en/model_doc/cvt#transformers.CvtModel"),c(YI,"href","/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(KI,"href","/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(ZI,"href","/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(eN,"href","/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaModel"),c(oN,"href","/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(rN,"href","/docs/transformers/pr_17302/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(tN,"href","/docs/transformers/pr_17302/en/model_doc/deit#transformers.DeiTModel"),c(aN,"href","/docs/transformers/pr_17302/en/model_doc/detr#transformers.DetrModel"),c(nN,"href","/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertModel"),c(sN,"href","/docs/transformers/pr_17302/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(lN,"href","/docs/transformers/pr_17302/en/model_doc/dpt#transformers.DPTModel"),c(iN,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraModel"),c(dN,"href","/docs/transformers/pr_17302/en/model_doc/emformer#transformers.EmformerModel"),c(cN,"href","/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertModel"),c(fN,"href","/docs/transformers/pr_17302/en/model_doc/flava#transformers.FlavaModel"),c(mN,"href","/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetModel"),c(gN,"href","/docs/transformers/pr_17302/en/model_doc/fsmt#transformers.FSMTModel"),c(hN,"href","/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelModel"),c(pN,"href","/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelBaseModel"),c(_N,"href","/docs/transformers/pr_17302/en/model_doc/glpn#transformers.GLPNModel"),c(uN,"href","/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2Model"),c(bN,"href","/docs/transformers/pr_17302/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(vN,"href","/docs/transformers/pr_17302/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(FN,"href","/docs/transformers/pr_17302/en/model_doc/gptj#transformers.GPTJModel"),c(TN,"href","/docs/transformers/pr_17302/en/model_doc/hubert#transformers.HubertModel"),c(MN,"href","/docs/transformers/pr_17302/en/model_doc/ibert#transformers.IBertModel"),c(EN,"href","/docs/transformers/pr_17302/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(CN,"href","/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(wN,"href","/docs/transformers/pr_17302/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(AN,"href","/docs/transformers/pr_17302/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(yN,"href","/docs/transformers/pr_17302/en/model_doc/led#transformers.LEDModel"),c(LN,"href","/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerModel"),c(xN,"href","/docs/transformers/pr_17302/en/model_doc/luke#transformers.LukeModel"),c($N,"href","/docs/transformers/pr_17302/en/model_doc/lxmert#transformers.LxmertModel"),c(kN,"href","/docs/transformers/pr_17302/en/model_doc/m2m_100#transformers.M2M100Model"),c(SN,"href","/docs/transformers/pr_17302/en/model_doc/marian#transformers.MarianModel"),c(RN,"href","/docs/transformers/pr_17302/en/model_doc/maskformer#transformers.MaskFormerModel"),c(PN,"href","/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartModel"),c(BN,"href","/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(IN,"href","/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertModel"),c(NN,"href","/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetModel"),c(qN,"href","/docs/transformers/pr_17302/en/model_doc/mt5#transformers.MT5Model"),c(jN,"href","/docs/transformers/pr_17302/en/model_doc/nystromformer#transformers.NystromformerModel"),c(DN,"href","/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(GN,"href","/docs/transformers/pr_17302/en/model_doc/opt#transformers.OPTModel"),c(ON,"href","/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.PegasusModel"),c(VN,"href","/docs/transformers/pr_17302/en/model_doc/perceiver#transformers.PerceiverModel"),c(XN,"href","/docs/transformers/pr_17302/en/model_doc/plbart#transformers.PLBartModel"),c(zN,"href","/docs/transformers/pr_17302/en/model_doc/poolformer#transformers.PoolFormerModel"),c(WN,"href","/docs/transformers/pr_17302/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(QN,"href","/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertModel"),c(HN,"href","/docs/transformers/pr_17302/en/model_doc/reformer#transformers.ReformerModel"),c(UN,"href","/docs/transformers/pr_17302/en/model_doc/regnet#transformers.RegNetModel"),c(JN,"href","/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertModel"),c(YN,"href","/docs/transformers/pr_17302/en/model_doc/resnet#transformers.ResNetModel"),c(KN,"href","/docs/transformers/pr_17302/en/model_doc/retribert#transformers.RetriBertModel"),c(ZN,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaModel"),c(eq,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerModel"),c(oq,"href","/docs/transformers/pr_17302/en/model_doc/segformer#transformers.SegformerModel"),c(rq,"href","/docs/transformers/pr_17302/en/model_doc/sew#transformers.SEWModel"),c(tq,"href","/docs/transformers/pr_17302/en/model_doc/sew-d#transformers.SEWDModel"),c(aq,"href","/docs/transformers/pr_17302/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(nq,"href","/docs/transformers/pr_17302/en/model_doc/splinter#transformers.SplinterModel"),c(sq,"href","/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(lq,"href","/docs/transformers/pr_17302/en/model_doc/swin#transformers.SwinModel"),c(iq,"href","/docs/transformers/pr_17302/en/model_doc/t5#transformers.T5Model"),c(dq,"href","/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TapasModel"),c(cq,"href","/docs/transformers/pr_17302/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(fq,"href","/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(mq,"href","/docs/transformers/pr_17302/en/model_doc/unispeech#transformers.UniSpeechModel"),c(gq,"href","/docs/transformers/pr_17302/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(hq,"href","/docs/transformers/pr_17302/en/model_doc/van#transformers.VanModel"),c(pq,"href","/docs/transformers/pr_17302/en/model_doc/vilt#transformers.ViltModel"),c(_q,"href","/docs/transformers/pr_17302/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(uq,"href","/docs/transformers/pr_17302/en/model_doc/visual_bert#transformers.VisualBertModel"),c(bq,"href","/docs/transformers/pr_17302/en/model_doc/vit#transformers.ViTModel"),c(vq,"href","/docs/transformers/pr_17302/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Fq,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Tq,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Mq,"href","/docs/transformers/pr_17302/en/model_doc/wavlm#transformers.WavLMModel"),c(Eq,"href","/docs/transformers/pr_17302/en/model_doc/xglm#transformers.XGLMModel"),c(Cq,"href","/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMModel"),c(wq,"href","/docs/transformers/pr_17302/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Aq,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(yq,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Lq,"href","/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetModel"),c(xq,"href","/docs/transformers/pr_17302/en/model_doc/yolos#transformers.YolosModel"),c($q,"href","/docs/transformers/pr_17302/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nu,"id","transformers.AutoModelForPreTraining"),c(nu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nu,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(kq,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sq,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rq,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pq,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Bq,"href","/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Iq,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertForPreTraining"),c(Nq,"href","/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(qq,"href","/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(jq,"href","/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Dq,"href","/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Gq,"href","/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Oq,"href","/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Vq,"href","/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Xq,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraForPreTraining"),c(zq,"href","/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Wq,"href","/docs/transformers/pr_17302/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Qq,"href","/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Hq,"href","/docs/transformers/pr_17302/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Uq,"href","/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Jq,"href","/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Yq,"href","/docs/transformers/pr_17302/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Kq,"href","/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Zq,"href","/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ej,"href","/docs/transformers/pr_17302/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(oj,"href","/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(rj,"href","/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(tj,"href","/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(aj,"href","/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(nj,"href","/docs/transformers/pr_17302/en/model_doc/retribert#transformers.RetriBertModel"),c(sj,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(lj,"href","/docs/transformers/pr_17302/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(ij,"href","/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(dj,"href","/docs/transformers/pr_17302/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(cj,"href","/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(fj,"href","/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(mj,"href","/docs/transformers/pr_17302/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(gj,"href","/docs/transformers/pr_17302/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(hj,"href","/docs/transformers/pr_17302/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(pj,"href","/docs/transformers/pr_17302/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(_j,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(uj,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(bj,"href","/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(vj,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yu,"id","transformers.AutoModelForCausalLM"),c(Yu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yu,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(Mj,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ej,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cj,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wj,"href","/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartForCausalLM"),c(Aj,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertLMHeadModel"),c(yj,"href","/docs/transformers/pr_17302/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Lj,"href","/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(xj,"href","/docs/transformers/pr_17302/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c($j,"href","/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(kj,"href","/docs/transformers/pr_17302/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Sj,"href","/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Rj,"href","/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Pj,"href","/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Bj,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Ij,"href","/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Nj,"href","/docs/transformers/pr_17302/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(qj,"href","/docs/transformers/pr_17302/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(jj,"href","/docs/transformers/pr_17302/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Dj,"href","/docs/transformers/pr_17302/en/model_doc/marian#transformers.MarianForCausalLM"),c(Gj,"href","/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Oj,"href","/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Vj,"href","/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Xj,"href","/docs/transformers/pr_17302/en/model_doc/opt#transformers.OPTForCausalLM"),c(zj,"href","/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Wj,"href","/docs/transformers/pr_17302/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Qj,"href","/docs/transformers/pr_17302/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Hj,"href","/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Uj,"href","/docs/transformers/pr_17302/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Jj,"href","/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Yj,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Kj,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Zj,"href","/docs/transformers/pr_17302/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(eD,"href","/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(oD,"href","/docs/transformers/pr_17302/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(rD,"href","/docs/transformers/pr_17302/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(tD,"href","/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(aD,"href","/docs/transformers/pr_17302/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(nD,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(sD,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(lD,"href","/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q2,"id","transformers.AutoModelForMaskedLM"),c(q2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q2,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(iD,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dD,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cD,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fD,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(mD,"href","/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gD,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertForMaskedLM"),c(hD,"href","/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(pD,"href","/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(_D,"href","/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(uD,"href","/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(bD,"href","/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(vD,"href","/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(FD,"href","/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(TD,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(MD,"href","/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(ED,"href","/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(CD,"href","/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(wD,"href","/docs/transformers/pr_17302/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(AD,"href","/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(yD,"href","/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(LD,"href","/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(xD,"href","/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c($D,"href","/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(kD,"href","/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(SD,"href","/docs/transformers/pr_17302/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(RD,"href","/docs/transformers/pr_17302/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(PD,"href","/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(BD,"href","/docs/transformers/pr_17302/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(ID,"href","/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(ND,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(qD,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(jD,"href","/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(DD,"href","/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(GD,"href","/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(OD,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(VD,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(XD,"href","/docs/transformers/pr_17302/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E1,"id","transformers.AutoModelForSeq2SeqLM"),c(E1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ni,"class","relative group"),c(zD,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WD,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QD,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HD,"href","/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(UD,"href","/docs/transformers/pr_17302/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(JD,"href","/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(YD,"href","/docs/transformers/pr_17302/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(KD,"href","/docs/transformers/pr_17302/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(ZD,"href","/docs/transformers/pr_17302/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(eG,"href","/docs/transformers/pr_17302/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(oG,"href","/docs/transformers/pr_17302/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(rG,"href","/docs/transformers/pr_17302/en/model_doc/marian#transformers.MarianMTModel"),c(tG,"href","/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_17302/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_17302/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(lG,"href","/docs/transformers/pr_17302/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(iG,"href","/docs/transformers/pr_17302/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(dG,"href","/docs/transformers/pr_17302/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V1,"id","transformers.AutoModelForSequenceClassification"),c(V1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V1,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(cG,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fG,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mG,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gG,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17302/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17302/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c($G,"href","/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17302/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17302/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17302/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17302/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17302/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17302/en/model_doc/led#transformers.LEDForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17302/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17302/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17302/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17302/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17302/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Db,"id","transformers.AutoModelForMultipleChoice"),c(Db,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Db,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(sO,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lO,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iO,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dO,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(cO,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertForMultipleChoice"),c(fO,"href","/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(mO,"href","/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(gO,"href","/docs/transformers/pr_17302/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(hO,"href","/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(pO,"href","/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(_O,"href","/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(uO,"href","/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(bO,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(vO,"href","/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17302/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(CO,"href","/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(wO,"href","/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(AO,"href","/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(yO,"href","/docs/transformers/pr_17302/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(LO,"href","/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(xO,"href","/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c($O,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(PO,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(BO,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(IO,"href","/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(NO,"href","/docs/transformers/pr_17302/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vv,"id","transformers.AutoModelForNextSentencePrediction"),c(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vv,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(qO,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jO,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DO,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GO,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(OO,"href","/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(VO,"href","/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(XO,"href","/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(zO,"href","/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lv,"id","transformers.AutoModelForTokenClassification"),c(Lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lv,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(WO,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QO,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HO,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UO,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(JO,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertForTokenClassification"),c(YO,"href","/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(KO,"href","/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(ZO,"href","/docs/transformers/pr_17302/en/model_doc/canine#transformers.CanineForTokenClassification"),c(eV,"href","/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(oV,"href","/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(rV,"href","/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(tV,"href","/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(aV,"href","/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(nV,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(sV,"href","/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(lV,"href","/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(iV,"href","/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(dV,"href","/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(cV,"href","/docs/transformers/pr_17302/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(fV,"href","/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(mV,"href","/docs/transformers/pr_17302/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(gV,"href","/docs/transformers/pr_17302/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(hV,"href","/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(pV,"href","/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(_V,"href","/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(uV,"href","/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(bV,"href","/docs/transformers/pr_17302/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(vV,"href","/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(FV,"href","/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(TV,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(MV,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(EV,"href","/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(CV,"href","/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(wV,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(AV,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(yV,"href","/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(LV,"href","/docs/transformers/pr_17302/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m3,"id","transformers.AutoModelForQuestionAnswering"),c(m3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m3,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(xV,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($V,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kV,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SV,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_17302/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_17302/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17302/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17302/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17302/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17302/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(WV,"href","/docs/transformers/pr_17302/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17302/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17302/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17302/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17302/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17302/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17302/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17302/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17302/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17302/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_17302/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17302/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17302/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17302/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17302/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17302/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17302/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17302/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(hX,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(uX,"href","/docs/transformers/pr_17302/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r0,"id","transformers.AutoModelForTableQuestionAnswering"),c(r0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r0,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(bX,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vX,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FX,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TX,"href","/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l0,"id","transformers.AutoModelForImageClassification"),c(l0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l0,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(MX,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EX,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CX,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wX,"href","/docs/transformers/pr_17302/en/model_doc/beit#transformers.BeitForImageClassification"),c(AX,"href","/docs/transformers/pr_17302/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(yX,"href","/docs/transformers/pr_17302/en/model_doc/cvt#transformers.CvtForImageClassification"),c(LX,"href","/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(xX,"href","/docs/transformers/pr_17302/en/model_doc/deit#transformers.DeiTForImageClassification"),c($X,"href","/docs/transformers/pr_17302/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(kX,"href","/docs/transformers/pr_17302/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(SX,"href","/docs/transformers/pr_17302/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(RX,"href","/docs/transformers/pr_17302/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(PX,"href","/docs/transformers/pr_17302/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(BX,"href","/docs/transformers/pr_17302/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(IX,"href","/docs/transformers/pr_17302/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(NX,"href","/docs/transformers/pr_17302/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(qX,"href","/docs/transformers/pr_17302/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(jX,"href","/docs/transformers/pr_17302/en/model_doc/swin#transformers.SwinForImageClassification"),c(DX,"href","/docs/transformers/pr_17302/en/model_doc/van#transformers.VanForImageClassification"),c(GX,"href","/docs/transformers/pr_17302/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E0,"id","transformers.AutoModelForVision2Seq"),c(E0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E0,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(OX,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VX,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XX,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zX,"href","/docs/transformers/pr_17302/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L0,"id","transformers.AutoModelForAudioClassification"),c(L0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L0,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(WX,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QX,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HX,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UX,"href","/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(JX,"href","/docs/transformers/pr_17302/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(YX,"href","/docs/transformers/pr_17302/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(KX,"href","/docs/transformers/pr_17302/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(ZX,"href","/docs/transformers/pr_17302/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(ez,"href","/docs/transformers/pr_17302/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(oz,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(rz,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(tz,"href","/docs/transformers/pr_17302/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G0,"id","transformers.AutoModelForAudioFrameClassification"),c(G0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G0,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(az,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nz,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sz,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lz,"href","/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(iz,"href","/docs/transformers/pr_17302/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(dz,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(cz,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(fz,"href","/docs/transformers/pr_17302/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J0,"id","transformers.AutoModelForCTC"),c(J0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J0,"href","#transformers.AutoModelForCTC"),c(_d,"class","relative group"),c(mz,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gz,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hz,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pz,"href","/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(_z,"href","/docs/transformers/pr_17302/en/model_doc/hubert#transformers.HubertForCTC"),c(uz,"href","/docs/transformers/pr_17302/en/model_doc/sew#transformers.SEWForCTC"),c(bz,"href","/docs/transformers/pr_17302/en/model_doc/sew-d#transformers.SEWDForCTC"),c(vz,"href","/docs/transformers/pr_17302/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Fz,"href","/docs/transformers/pr_17302/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Tz,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Mz,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Ez,"href","/docs/transformers/pr_17302/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(Cz,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wz,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Az,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yz,"href","/docs/transformers/pr_17302/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Lz,"href","/docs/transformers/pr_17302/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pF,"id","transformers.AutoModelForAudioXVector"),c(pF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pF,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(xz,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($z,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kz,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sz,"href","/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Rz,"href","/docs/transformers/pr_17302/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Pz,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Bz,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Iz,"href","/docs/transformers/pr_17302/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CF,"id","transformers.AutoModelForMaskedImageModeling"),c(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CF,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(Nz,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qz,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jz,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dz,"href","/docs/transformers/pr_17302/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Gz,"href","/docs/transformers/pr_17302/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Oz,"href","/docs/transformers/pr_17302/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kF,"id","transformers.AutoModelForObjectDetection"),c(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kF,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(Vz,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xz,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zz,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wz,"href","/docs/transformers/pr_17302/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Qz,"href","/docs/transformers/pr_17302/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NF,"id","transformers.AutoModelForImageSegmentation"),c(NF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NF,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(Hz,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uz,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jz,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yz,"href","/docs/transformers/pr_17302/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OF,"id","transformers.AutoModelForSemanticSegmentation"),c(OF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(Kz,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zz,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eW,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oW,"href","/docs/transformers/pr_17302/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(rW,"href","/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(tW,"href","/docs/transformers/pr_17302/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(aW,"href","/docs/transformers/pr_17302/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JF,"id","transformers.AutoModelForInstanceSegmentation"),c(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JF,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(nW,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sW,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lW,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iW,"href","/docs/transformers/pr_17302/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oT,"id","transformers.TFAutoModel"),c(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oT,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(dW,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cW,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fW,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mW,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.TFAlbertModel"),c(gW,"href","/docs/transformers/pr_17302/en/model_doc/bart#transformers.TFBartModel"),c(hW,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.TFBertModel"),c(pW,"href","/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(_W,"href","/docs/transformers/pr_17302/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(uW,"href","/docs/transformers/pr_17302/en/model_doc/camembert#transformers.TFCamembertModel"),c(bW,"href","/docs/transformers/pr_17302/en/model_doc/clip#transformers.TFCLIPModel"),c(vW,"href","/docs/transformers/pr_17302/en/model_doc/convbert#transformers.TFConvBertModel"),c(FW,"href","/docs/transformers/pr_17302/en/model_doc/convnext#transformers.TFConvNextModel"),c(TW,"href","/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.TFCTRLModel"),c(MW,"href","/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(EW,"href","/docs/transformers/pr_17302/en/model_doc/deberta#transformers.TFDebertaModel"),c(CW,"href","/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(wW,"href","/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(AW,"href","/docs/transformers/pr_17302/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(yW,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.TFElectraModel"),c(LW,"href","/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(xW,"href","/docs/transformers/pr_17302/en/model_doc/funnel#transformers.TFFunnelModel"),c($W,"href","/docs/transformers/pr_17302/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(kW,"href","/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.TFGPT2Model"),c(SW,"href","/docs/transformers/pr_17302/en/model_doc/gptj#transformers.TFGPTJModel"),c(RW,"href","/docs/transformers/pr_17302/en/model_doc/hubert#transformers.TFHubertModel"),c(PW,"href","/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(BW,"href","/docs/transformers/pr_17302/en/model_doc/led#transformers.TFLEDModel"),c(IW,"href","/docs/transformers/pr_17302/en/model_doc/longformer#transformers.TFLongformerModel"),c(NW,"href","/docs/transformers/pr_17302/en/model_doc/lxmert#transformers.TFLxmertModel"),c(qW,"href","/docs/transformers/pr_17302/en/model_doc/marian#transformers.TFMarianModel"),c(jW,"href","/docs/transformers/pr_17302/en/model_doc/mbart#transformers.TFMBartModel"),c(DW,"href","/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(GW,"href","/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.TFMPNetModel"),c(OW,"href","/docs/transformers/pr_17302/en/model_doc/mt5#transformers.TFMT5Model"),c(VW,"href","/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(XW,"href","/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.TFPegasusModel"),c(zW,"href","/docs/transformers/pr_17302/en/model_doc/rembert#transformers.TFRemBertModel"),c(WW,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.TFRobertaModel"),c(QW,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.TFRoFormerModel"),c(HW,"href","/docs/transformers/pr_17302/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(UW,"href","/docs/transformers/pr_17302/en/model_doc/swin#transformers.TFSwinModel"),c(JW,"href","/docs/transformers/pr_17302/en/model_doc/t5#transformers.TFT5Model"),c(YW,"href","/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TFTapasModel"),c(KW,"href","/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(ZW,"href","/docs/transformers/pr_17302/en/model_doc/vit#transformers.TFViTModel"),c(eQ,"href","/docs/transformers/pr_17302/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(oQ,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(rQ,"href","/docs/transformers/pr_17302/en/model_doc/xlm#transformers.TFXLMModel"),c(tQ,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(aQ,"href","/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.TFAutoModelForPreTraining"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(nQ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sQ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lQ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iQ,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(dQ,"href","/docs/transformers/pr_17302/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(cQ,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.TFBertForPreTraining"),c(fQ,"href","/docs/transformers/pr_17302/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(mQ,"href","/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(gQ,"href","/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(hQ,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(pQ,"href","/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(_Q,"href","/docs/transformers/pr_17302/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(uQ,"href","/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(bQ,"href","/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(vQ,"href","/docs/transformers/pr_17302/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(FQ,"href","/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(TQ,"href","/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(EQ,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17302/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(wQ,"href","/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(AQ,"href","/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(yQ,"href","/docs/transformers/pr_17302/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(LQ,"href","/docs/transformers/pr_17302/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(xQ,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c($Q,"href","/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T7,"id","transformers.TFAutoModelForCausalLM"),c(T7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T7,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(kQ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SQ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RQ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PQ,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(BQ,"href","/docs/transformers/pr_17302/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(IQ,"href","/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(NQ,"href","/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(qQ,"href","/docs/transformers/pr_17302/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(jQ,"href","/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(DQ,"href","/docs/transformers/pr_17302/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(GQ,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(OQ,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(VQ,"href","/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(XQ,"href","/docs/transformers/pr_17302/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zQ,"href","/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I7,"id","transformers.TFAutoModelForImageClassification"),c(I7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I7,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(WQ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QQ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HQ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UQ,"href","/docs/transformers/pr_17302/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(JQ,"href","/docs/transformers/pr_17302/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(YQ,"href","/docs/transformers/pr_17302/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(KQ,"href","/docs/transformers/pr_17302/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V7,"id","transformers.TFAutoModelForMaskedLM"),c(V7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V7,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(ZQ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eH,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oH,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rH,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(tH,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(aH,"href","/docs/transformers/pr_17302/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(nH,"href","/docs/transformers/pr_17302/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(sH,"href","/docs/transformers/pr_17302/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(lH,"href","/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(iH,"href","/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(dH,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(cH,"href","/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(fH,"href","/docs/transformers/pr_17302/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(mH,"href","/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(gH,"href","/docs/transformers/pr_17302/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(hH,"href","/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(pH,"href","/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(_H,"href","/docs/transformers/pr_17302/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(uH,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(bH,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(vH,"href","/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(FH,"href","/docs/transformers/pr_17302/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(TH,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(mM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(MH,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EH,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CH,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wH,"href","/docs/transformers/pr_17302/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(AH,"href","/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(yH,"href","/docs/transformers/pr_17302/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(LH,"href","/docs/transformers/pr_17302/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(xH,"href","/docs/transformers/pr_17302/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c($H,"href","/docs/transformers/pr_17302/en/model_doc/marian#transformers.TFMarianMTModel"),c(kH,"href","/docs/transformers/pr_17302/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(SH,"href","/docs/transformers/pr_17302/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(RH,"href","/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(PH,"href","/docs/transformers/pr_17302/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wM,"id","transformers.TFAutoModelForSequenceClassification"),c(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wM,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(BH,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(jH,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(DH,"href","/docs/transformers/pr_17302/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(GH,"href","/docs/transformers/pr_17302/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(OH,"href","/docs/transformers/pr_17302/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(VH,"href","/docs/transformers/pr_17302/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(XH,"href","/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(zH,"href","/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(WH,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(QH,"href","/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(HH,"href","/docs/transformers/pr_17302/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(UH,"href","/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(JH,"href","/docs/transformers/pr_17302/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(YH,"href","/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(KH,"href","/docs/transformers/pr_17302/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(eU,"href","/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(oU,"href","/docs/transformers/pr_17302/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(rU,"href","/docs/transformers/pr_17302/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(tU,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(aU,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(nU,"href","/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(sU,"href","/docs/transformers/pr_17302/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(lU,"href","/docs/transformers/pr_17302/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(iU,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(dU,"href","/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e4,"id","transformers.TFAutoModelForMultipleChoice"),c(e4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e4,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(cU,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fU,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mU,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gU,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(hU,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(pU,"href","/docs/transformers/pr_17302/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(_U,"href","/docs/transformers/pr_17302/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(uU,"href","/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(bU,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(vU,"href","/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(FU,"href","/docs/transformers/pr_17302/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(TU,"href","/docs/transformers/pr_17302/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(MU,"href","/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(EU,"href","/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(CU,"href","/docs/transformers/pr_17302/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(wU,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(AU,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(yU,"href","/docs/transformers/pr_17302/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(LU,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(xU,"href","/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(F4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c($U,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kU,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SU,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RU,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(PU,"href","/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(w4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(BU,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IU,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NU,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qU,"href","/docs/transformers/pr_17302/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x4,"id","transformers.TFAutoModelForTokenClassification"),c(x4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x4,"href","#transformers.TFAutoModelForTokenClassification"),c(uc,"class","relative group"),c(jU,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DU,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GU,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OU,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(VU,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(XU,"href","/docs/transformers/pr_17302/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(zU,"href","/docs/transformers/pr_17302/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(WU,"href","/docs/transformers/pr_17302/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(QU,"href","/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(HU,"href","/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(UU,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(JU,"href","/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(YU,"href","/docs/transformers/pr_17302/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(KU,"href","/docs/transformers/pr_17302/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(ZU,"href","/docs/transformers/pr_17302/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(eJ,"href","/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(oJ,"href","/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(rJ,"href","/docs/transformers/pr_17302/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(tJ,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(aJ,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(nJ,"href","/docs/transformers/pr_17302/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(sJ,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(lJ,"href","/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K4,"id","transformers.TFAutoModelForQuestionAnswering"),c(K4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(iJ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dJ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cJ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fJ,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(mJ,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(gJ,"href","/docs/transformers/pr_17302/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(hJ,"href","/docs/transformers/pr_17302/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(pJ,"href","/docs/transformers/pr_17302/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(_J,"href","/docs/transformers/pr_17302/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(uJ,"href","/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(bJ,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(vJ,"href","/docs/transformers/pr_17302/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(FJ,"href","/docs/transformers/pr_17302/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(TJ,"href","/docs/transformers/pr_17302/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(MJ,"href","/docs/transformers/pr_17302/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(EJ,"href","/docs/transformers/pr_17302/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(CJ,"href","/docs/transformers/pr_17302/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(wJ,"href","/docs/transformers/pr_17302/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_17302/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(xJ,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c($J,"href","/docs/transformers/pr_17302/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TE,"id","transformers.TFAutoModelForVision2Seq"),c(TE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TE,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(kJ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SJ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RJ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PJ,"href","/docs/transformers/pr_17302/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(wE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(BJ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NJ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qJ,"href","/docs/transformers/pr_17302/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xE,"id","transformers.FlaxAutoModel"),c(xE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xE,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(jJ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DJ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GJ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OJ,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.FlaxAlbertModel"),c(VJ,"href","/docs/transformers/pr_17302/en/model_doc/bart#transformers.FlaxBartModel"),c(XJ,"href","/docs/transformers/pr_17302/en/model_doc/beit#transformers.FlaxBeitModel"),c(zJ,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.FlaxBertModel"),c(WJ,"href","/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(QJ,"href","/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(HJ,"href","/docs/transformers/pr_17302/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(UJ,"href","/docs/transformers/pr_17302/en/model_doc/clip#transformers.FlaxCLIPModel"),c(JJ,"href","/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(YJ,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.FlaxElectraModel"),c(KJ,"href","/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(ZJ,"href","/docs/transformers/pr_17302/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(eY,"href","/docs/transformers/pr_17302/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(oY,"href","/docs/transformers/pr_17302/en/model_doc/marian#transformers.FlaxMarianModel"),c(rY,"href","/docs/transformers/pr_17302/en/model_doc/mbart#transformers.FlaxMBartModel"),c(tY,"href","/docs/transformers/pr_17302/en/model_doc/mt5#transformers.FlaxMT5Model"),c(aY,"href","/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(nY,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(sY,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(lY,"href","/docs/transformers/pr_17302/en/model_doc/t5#transformers.FlaxT5Model"),c(iY,"href","/docs/transformers/pr_17302/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(dY,"href","/docs/transformers/pr_17302/en/model_doc/vit#transformers.FlaxViTModel"),c(cY,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(fY,"href","/docs/transformers/pr_17302/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(mY,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.FlaxAutoModelForCausalLM"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(gY,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hY,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pY,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Y,"href","/docs/transformers/pr_17302/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(uY,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(bY,"href","/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(vY,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(FY,"href","/docs/transformers/pr_17302/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(TY,"href","/docs/transformers/pr_17302/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(MY,"href","/docs/transformers/pr_17302/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(EY,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(CY,"href","/docs/transformers/pr_17302/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.FlaxAutoModelForPreTraining"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(wY,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AY,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yY,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LY,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(xY,"href","/docs/transformers/pr_17302/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c($Y,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(kY,"href","/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(SY,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(RY,"href","/docs/transformers/pr_17302/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(PY,"href","/docs/transformers/pr_17302/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(BY,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(IY,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(NY,"href","/docs/transformers/pr_17302/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(qY,"href","/docs/transformers/pr_17302/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(jY,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($C,"id","transformers.FlaxAutoModelForMaskedLM"),c($C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($C,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(DY,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GY,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OY,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VY,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(XY,"href","/docs/transformers/pr_17302/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(zY,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(WY,"href","/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(QY,"href","/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(HY,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(UY,"href","/docs/transformers/pr_17302/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(JY,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(YY,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(KY,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(VC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(ZY,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eK,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oK,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rK,"href","/docs/transformers/pr_17302/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(tK,"href","/docs/transformers/pr_17302/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(aK,"href","/docs/transformers/pr_17302/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(nK,"href","/docs/transformers/pr_17302/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(sK,"href","/docs/transformers/pr_17302/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(lK,"href","/docs/transformers/pr_17302/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(iK,"href","/docs/transformers/pr_17302/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(dK,"href","/docs/transformers/pr_17302/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(cK,"href","/docs/transformers/pr_17302/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(fK,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mK,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gK,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hK,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(pK,"href","/docs/transformers/pr_17302/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(_K,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(uK,"href","/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(bK,"href","/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(vK,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(FK,"href","/docs/transformers/pr_17302/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(TK,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(MK,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(EK,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(h5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(CK,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wK,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AK,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yK,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(LK,"href","/docs/transformers/pr_17302/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(xK,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c($K,"href","/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(kK,"href","/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(SK,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(RK,"href","/docs/transformers/pr_17302/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(PK,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(BK,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(IK,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y5,"id","transformers.FlaxAutoModelForTokenClassification"),c(y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(NK,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qK,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(GK,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(OK,"href","/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(VK,"href","/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(XK,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(zK,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(WK,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(QK,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(HK,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UK,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JK,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YK,"href","/docs/transformers/pr_17302/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(KK,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(ZK,"href","/docs/transformers/pr_17302/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(eZ,"href","/docs/transformers/pr_17302/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(oZ,"href","/docs/transformers/pr_17302/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(rZ,"href","/docs/transformers/pr_17302/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(tZ,"href","/docs/transformers/pr_17302/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(aZ,"href","/docs/transformers/pr_17302/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(U5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(nZ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sZ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lZ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iZ,"href","/docs/transformers/pr_17302/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z5,"id","transformers.FlaxAutoModelForImageClassification"),c(Z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z5,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(dZ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cZ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fZ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mZ,"href","/docs/transformers/pr_17302/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(gZ,"href","/docs/transformers/pr_17302/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aw,"id","transformers.FlaxAutoModelForVision2Seq"),c(aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(hZ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pZ,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Z,"href","/docs/transformers/pr_17302/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uZ,"href","/docs/transformers/pr_17302/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,u),b(f,rt,u),e(rt,mi),e(rt,gi),e(gi,wA),e(rt,_f),b(f,je,u),b(f,We,u),e(We,hi),e(We,yn),e(yn,AA),e(We,Ln),e(We,xn),e(xn,yA),e(We,pi),e(We,$n),e($n,LA),e(We,_i),b(f,uf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,Q$),e(Ae,ui),e(ui,H$),e(Ae,U$),b(f,Eo,u),b(f,wa,u),e(wa,J$),e(wa,bf),e(bf,Y$),e(wa,uOe),b(f,sqe,u),b(f,bi,u),e(bi,vf),e(vf,coe),M(xA,coe,null),e(bi,bOe),e(bi,foe),e(foe,vOe),b(f,lqe,u),b(f,kn,u),e(kn,FOe),e(kn,moe),e(moe,TOe),e(kn,MOe),e(kn,goe),e(goe,EOe),e(kn,COe),b(f,iqe,u),M($A,f,u),b(f,dqe,u),b(f,K$,u),e(K$,wOe),b(f,cqe,u),M(Ff,f,u),b(f,fqe,u),b(f,vi,u),e(vi,Tf),e(Tf,hoe),M(kA,hoe,null),e(vi,AOe),e(vi,poe),e(poe,yOe),b(f,mqe,u),b(f,Co,u),M(SA,Co,null),e(Co,LOe),e(Co,RA),e(RA,xOe),e(RA,Z$),e(Z$,$Oe),e(RA,kOe),e(Co,SOe),e(Co,PA),e(PA,ROe),e(PA,_oe),e(_oe,POe),e(PA,BOe),e(Co,IOe),e(Co,Er),M(BA,Er,null),e(Er,NOe),e(Er,uoe),e(uoe,qOe),e(Er,jOe),e(Er,Fi),e(Fi,DOe),e(Fi,boe),e(boe,GOe),e(Fi,OOe),e(Fi,voe),e(voe,VOe),e(Fi,XOe),e(Er,zOe),e(Er,A),e(A,Mf),e(Mf,Foe),e(Foe,WOe),e(Mf,QOe),e(Mf,ek),e(ek,HOe),e(Mf,UOe),e(A,JOe),e(A,Ef),e(Ef,Toe),e(Toe,YOe),e(Ef,KOe),e(Ef,ok),e(ok,ZOe),e(Ef,eVe),e(A,oVe),e(A,Cf),e(Cf,Moe),e(Moe,rVe),e(Cf,tVe),e(Cf,rk),e(rk,aVe),e(Cf,nVe),e(A,sVe),e(A,wf),e(wf,Eoe),e(Eoe,lVe),e(wf,iVe),e(wf,tk),e(tk,dVe),e(wf,cVe),e(A,fVe),e(A,Af),e(Af,Coe),e(Coe,mVe),e(Af,gVe),e(Af,ak),e(ak,hVe),e(Af,pVe),e(A,_Ve),e(A,yf),e(yf,woe),e(woe,uVe),e(yf,bVe),e(yf,nk),e(nk,vVe),e(yf,FVe),e(A,TVe),e(A,Lf),e(Lf,Aoe),e(Aoe,MVe),e(Lf,EVe),e(Lf,sk),e(sk,CVe),e(Lf,wVe),e(A,AVe),e(A,xf),e(xf,yoe),e(yoe,yVe),e(xf,LVe),e(xf,lk),e(lk,xVe),e(xf,$Ve),e(A,kVe),e(A,$f),e($f,Loe),e(Loe,SVe),e($f,RVe),e($f,ik),e(ik,PVe),e($f,BVe),e(A,IVe),e(A,kf),e(kf,xoe),e(xoe,NVe),e(kf,qVe),e(kf,dk),e(dk,jVe),e(kf,DVe),e(A,GVe),e(A,Sf),e(Sf,$oe),e($oe,OVe),e(Sf,VVe),e(Sf,ck),e(ck,XVe),e(Sf,zVe),e(A,WVe),e(A,Rf),e(Rf,koe),e(koe,QVe),e(Rf,HVe),e(Rf,fk),e(fk,UVe),e(Rf,JVe),e(A,YVe),e(A,Pf),e(Pf,Soe),e(Soe,KVe),e(Pf,ZVe),e(Pf,mk),e(mk,eXe),e(Pf,oXe),e(A,rXe),e(A,Bf),e(Bf,Roe),e(Roe,tXe),e(Bf,aXe),e(Bf,gk),e(gk,nXe),e(Bf,sXe),e(A,lXe),e(A,If),e(If,Poe),e(Poe,iXe),e(If,dXe),e(If,hk),e(hk,cXe),e(If,fXe),e(A,mXe),e(A,Nf),e(Nf,Boe),e(Boe,gXe),e(Nf,hXe),e(Nf,pk),e(pk,pXe),e(Nf,_Xe),e(A,uXe),e(A,qf),e(qf,Ioe),e(Ioe,bXe),e(qf,vXe),e(qf,_k),e(_k,FXe),e(qf,TXe),e(A,MXe),e(A,jf),e(jf,Noe),e(Noe,EXe),e(jf,CXe),e(jf,uk),e(uk,wXe),e(jf,AXe),e(A,yXe),e(A,Df),e(Df,qoe),e(qoe,LXe),e(Df,xXe),e(Df,bk),e(bk,$Xe),e(Df,kXe),e(A,SXe),e(A,Gf),e(Gf,joe),e(joe,RXe),e(Gf,PXe),e(Gf,vk),e(vk,BXe),e(Gf,IXe),e(A,NXe),e(A,Of),e(Of,Doe),e(Doe,qXe),e(Of,jXe),e(Of,Fk),e(Fk,DXe),e(Of,GXe),e(A,OXe),e(A,Vf),e(Vf,Goe),e(Goe,VXe),e(Vf,XXe),e(Vf,Tk),e(Tk,zXe),e(Vf,WXe),e(A,QXe),e(A,Xf),e(Xf,Ooe),e(Ooe,HXe),e(Xf,UXe),e(Xf,Mk),e(Mk,JXe),e(Xf,YXe),e(A,KXe),e(A,zf),e(zf,Voe),e(Voe,ZXe),e(zf,eze),e(zf,Ek),e(Ek,oze),e(zf,rze),e(A,tze),e(A,Wf),e(Wf,Xoe),e(Xoe,aze),e(Wf,nze),e(Wf,Ck),e(Ck,sze),e(Wf,lze),e(A,ize),e(A,Qf),e(Qf,zoe),e(zoe,dze),e(Qf,cze),e(Qf,wk),e(wk,fze),e(Qf,mze),e(A,gze),e(A,Hf),e(Hf,Woe),e(Woe,hze),e(Hf,pze),e(Hf,Ak),e(Ak,_ze),e(Hf,uze),e(A,bze),e(A,Uf),e(Uf,Qoe),e(Qoe,vze),e(Uf,Fze),e(Uf,yk),e(yk,Tze),e(Uf,Mze),e(A,Eze),e(A,Jf),e(Jf,Hoe),e(Hoe,Cze),e(Jf,wze),e(Jf,Lk),e(Lk,Aze),e(Jf,yze),e(A,Lze),e(A,Yf),e(Yf,Uoe),e(Uoe,xze),e(Yf,$ze),e(Yf,xk),e(xk,kze),e(Yf,Sze),e(A,Rze),e(A,Kf),e(Kf,Joe),e(Joe,Pze),e(Kf,Bze),e(Kf,$k),e($k,Ize),e(Kf,Nze),e(A,qze),e(A,Zf),e(Zf,Yoe),e(Yoe,jze),e(Zf,Dze),e(Zf,kk),e(kk,Gze),e(Zf,Oze),e(A,Vze),e(A,em),e(em,Koe),e(Koe,Xze),e(em,zze),e(em,Sk),e(Sk,Wze),e(em,Qze),e(A,Hze),e(A,om),e(om,Zoe),e(Zoe,Uze),e(om,Jze),e(om,Rk),e(Rk,Yze),e(om,Kze),e(A,Zze),e(A,rm),e(rm,ere),e(ere,eWe),e(rm,oWe),e(rm,Pk),e(Pk,rWe),e(rm,tWe),e(A,aWe),e(A,tm),e(tm,ore),e(ore,nWe),e(tm,sWe),e(tm,Bk),e(Bk,lWe),e(tm,iWe),e(A,dWe),e(A,am),e(am,rre),e(rre,cWe),e(am,fWe),e(am,Ik),e(Ik,mWe),e(am,gWe),e(A,hWe),e(A,nm),e(nm,tre),e(tre,pWe),e(nm,_We),e(nm,Nk),e(Nk,uWe),e(nm,bWe),e(A,vWe),e(A,sm),e(sm,are),e(are,FWe),e(sm,TWe),e(sm,qk),e(qk,MWe),e(sm,EWe),e(A,CWe),e(A,lm),e(lm,nre),e(nre,wWe),e(lm,AWe),e(lm,jk),e(jk,yWe),e(lm,LWe),e(A,xWe),e(A,im),e(im,sre),e(sre,$We),e(im,kWe),e(im,Dk),e(Dk,SWe),e(im,RWe),e(A,PWe),e(A,dm),e(dm,lre),e(lre,BWe),e(dm,IWe),e(dm,Gk),e(Gk,NWe),e(dm,qWe),e(A,jWe),e(A,cm),e(cm,ire),e(ire,DWe),e(cm,GWe),e(cm,Ok),e(Ok,OWe),e(cm,VWe),e(A,XWe),e(A,fm),e(fm,dre),e(dre,zWe),e(fm,WWe),e(fm,Vk),e(Vk,QWe),e(fm,HWe),e(A,UWe),e(A,mm),e(mm,cre),e(cre,JWe),e(mm,YWe),e(mm,Xk),e(Xk,KWe),e(mm,ZWe),e(A,eQe),e(A,gm),e(gm,fre),e(fre,oQe),e(gm,rQe),e(gm,zk),e(zk,tQe),e(gm,aQe),e(A,nQe),e(A,hm),e(hm,mre),e(mre,sQe),e(hm,lQe),e(hm,Wk),e(Wk,iQe),e(hm,dQe),e(A,cQe),e(A,pm),e(pm,gre),e(gre,fQe),e(pm,mQe),e(pm,Qk),e(Qk,gQe),e(pm,hQe),e(A,pQe),e(A,_m),e(_m,hre),e(hre,_Qe),e(_m,uQe),e(_m,Hk),e(Hk,bQe),e(_m,vQe),e(A,FQe),e(A,um),e(um,pre),e(pre,TQe),e(um,MQe),e(um,Uk),e(Uk,EQe),e(um,CQe),e(A,wQe),e(A,bm),e(bm,_re),e(_re,AQe),e(bm,yQe),e(bm,Jk),e(Jk,LQe),e(bm,xQe),e(A,$Qe),e(A,vm),e(vm,ure),e(ure,kQe),e(vm,SQe),e(vm,Yk),e(Yk,RQe),e(vm,PQe),e(A,BQe),e(A,Fm),e(Fm,bre),e(bre,IQe),e(Fm,NQe),e(Fm,Kk),e(Kk,qQe),e(Fm,jQe),e(A,DQe),e(A,Tm),e(Tm,vre),e(vre,GQe),e(Tm,OQe),e(Tm,Zk),e(Zk,VQe),e(Tm,XQe),e(A,zQe),e(A,Mm),e(Mm,Fre),e(Fre,WQe),e(Mm,QQe),e(Mm,eS),e(eS,HQe),e(Mm,UQe),e(A,JQe),e(A,Em),e(Em,Tre),e(Tre,YQe),e(Em,KQe),e(Em,oS),e(oS,ZQe),e(Em,eHe),e(A,oHe),e(A,Cm),e(Cm,Mre),e(Mre,rHe),e(Cm,tHe),e(Cm,rS),e(rS,aHe),e(Cm,nHe),e(A,sHe),e(A,wm),e(wm,Ere),e(Ere,lHe),e(wm,iHe),e(wm,tS),e(tS,dHe),e(wm,cHe),e(A,fHe),e(A,Am),e(Am,Cre),e(Cre,mHe),e(Am,gHe),e(Am,aS),e(aS,hHe),e(Am,pHe),e(A,_He),e(A,ym),e(ym,wre),e(wre,uHe),e(ym,bHe),e(ym,nS),e(nS,vHe),e(ym,FHe),e(A,THe),e(A,Lm),e(Lm,Are),e(Are,MHe),e(Lm,EHe),e(Lm,sS),e(sS,CHe),e(Lm,wHe),e(A,AHe),e(A,xm),e(xm,yre),e(yre,yHe),e(xm,LHe),e(xm,lS),e(lS,xHe),e(xm,$He),e(A,kHe),e(A,$m),e($m,Lre),e(Lre,SHe),e($m,RHe),e($m,iS),e(iS,PHe),e($m,BHe),e(A,IHe),e(A,km),e(km,xre),e(xre,NHe),e(km,qHe),e(km,dS),e(dS,jHe),e(km,DHe),e(A,GHe),e(A,Sm),e(Sm,$re),e($re,OHe),e(Sm,VHe),e(Sm,cS),e(cS,XHe),e(Sm,zHe),e(A,WHe),e(A,Rm),e(Rm,kre),e(kre,QHe),e(Rm,HHe),e(Rm,fS),e(fS,UHe),e(Rm,JHe),e(A,YHe),e(A,Pm),e(Pm,Sre),e(Sre,KHe),e(Pm,ZHe),e(Pm,mS),e(mS,eUe),e(Pm,oUe),e(A,rUe),e(A,Bm),e(Bm,Rre),e(Rre,tUe),e(Bm,aUe),e(Bm,gS),e(gS,nUe),e(Bm,sUe),e(A,lUe),e(A,Im),e(Im,Pre),e(Pre,iUe),e(Im,dUe),e(Im,hS),e(hS,cUe),e(Im,fUe),e(A,mUe),e(A,Nm),e(Nm,Bre),e(Bre,gUe),e(Nm,hUe),e(Nm,pS),e(pS,pUe),e(Nm,_Ue),e(A,uUe),e(A,qm),e(qm,Ire),e(Ire,bUe),e(qm,vUe),e(qm,_S),e(_S,FUe),e(qm,TUe),e(A,MUe),e(A,jm),e(jm,Nre),e(Nre,EUe),e(jm,CUe),e(jm,uS),e(uS,wUe),e(jm,AUe),e(A,yUe),e(A,Dm),e(Dm,qre),e(qre,LUe),e(Dm,xUe),e(Dm,bS),e(bS,$Ue),e(Dm,kUe),e(A,SUe),e(A,Gm),e(Gm,jre),e(jre,RUe),e(Gm,PUe),e(Gm,vS),e(vS,BUe),e(Gm,IUe),e(A,NUe),e(A,Om),e(Om,Dre),e(Dre,qUe),e(Om,jUe),e(Om,FS),e(FS,DUe),e(Om,GUe),e(A,OUe),e(A,Vm),e(Vm,Gre),e(Gre,VUe),e(Vm,XUe),e(Vm,TS),e(TS,zUe),e(Vm,WUe),e(A,QUe),e(A,Xm),e(Xm,Ore),e(Ore,HUe),e(Xm,UUe),e(Xm,MS),e(MS,JUe),e(Xm,YUe),e(A,KUe),e(A,zm),e(zm,Vre),e(Vre,ZUe),e(zm,eJe),e(zm,ES),e(ES,oJe),e(zm,rJe),e(A,tJe),e(A,Wm),e(Wm,Xre),e(Xre,aJe),e(Wm,nJe),e(Wm,CS),e(CS,sJe),e(Wm,lJe),e(A,iJe),e(A,Qm),e(Qm,zre),e(zre,dJe),e(Qm,cJe),e(Qm,wS),e(wS,fJe),e(Qm,mJe),e(A,gJe),e(A,Hm),e(Hm,Wre),e(Wre,hJe),e(Hm,pJe),e(Hm,AS),e(AS,_Je),e(Hm,uJe),e(A,bJe),e(A,Um),e(Um,Qre),e(Qre,vJe),e(Um,FJe),e(Um,yS),e(yS,TJe),e(Um,MJe),e(A,EJe),e(A,Jm),e(Jm,Hre),e(Hre,CJe),e(Jm,wJe),e(Jm,LS),e(LS,AJe),e(Jm,yJe),e(A,LJe),e(A,Ym),e(Ym,Ure),e(Ure,xJe),e(Ym,$Je),e(Ym,xS),e(xS,kJe),e(Ym,SJe),e(A,RJe),e(A,Km),e(Km,Jre),e(Jre,PJe),e(Km,BJe),e(Km,$S),e($S,IJe),e(Km,NJe),e(A,qJe),e(A,Zm),e(Zm,Yre),e(Yre,jJe),e(Zm,DJe),e(Zm,kS),e(kS,GJe),e(Zm,OJe),e(A,VJe),e(A,eg),e(eg,Kre),e(Kre,XJe),e(eg,zJe),e(eg,SS),e(SS,WJe),e(eg,QJe),e(A,HJe),e(A,og),e(og,Zre),e(Zre,UJe),e(og,JJe),e(og,RS),e(RS,YJe),e(og,KJe),e(A,ZJe),e(A,rg),e(rg,ete),e(ete,eYe),e(rg,oYe),e(rg,PS),e(PS,rYe),e(rg,tYe),e(A,aYe),e(A,tg),e(tg,ote),e(ote,nYe),e(tg,sYe),e(tg,BS),e(BS,lYe),e(tg,iYe),e(A,dYe),e(A,ag),e(ag,rte),e(rte,cYe),e(ag,fYe),e(ag,IS),e(IS,mYe),e(ag,gYe),e(A,hYe),e(A,ng),e(ng,tte),e(tte,pYe),e(ng,_Ye),e(ng,NS),e(NS,uYe),e(ng,bYe),e(A,vYe),e(A,sg),e(sg,ate),e(ate,FYe),e(sg,TYe),e(sg,qS),e(qS,MYe),e(sg,EYe),e(A,CYe),e(A,lg),e(lg,nte),e(nte,wYe),e(lg,AYe),e(lg,jS),e(jS,yYe),e(lg,LYe),e(A,xYe),e(A,ig),e(ig,ste),e(ste,$Ye),e(ig,kYe),e(ig,DS),e(DS,SYe),e(ig,RYe),e(A,PYe),e(A,dg),e(dg,lte),e(lte,BYe),e(dg,IYe),e(dg,GS),e(GS,NYe),e(dg,qYe),e(A,jYe),e(A,cg),e(cg,ite),e(ite,DYe),e(cg,GYe),e(cg,OS),e(OS,OYe),e(cg,VYe),e(A,XYe),e(A,fg),e(fg,dte),e(dte,zYe),e(fg,WYe),e(fg,VS),e(VS,QYe),e(fg,HYe),e(A,UYe),e(A,mg),e(mg,cte),e(cte,JYe),e(mg,YYe),e(mg,XS),e(XS,KYe),e(mg,ZYe),e(A,eKe),e(A,gg),e(gg,fte),e(fte,oKe),e(gg,rKe),e(gg,zS),e(zS,tKe),e(gg,aKe),e(A,nKe),e(A,hg),e(hg,mte),e(mte,sKe),e(hg,lKe),e(hg,WS),e(WS,iKe),e(hg,dKe),e(A,cKe),e(A,pg),e(pg,gte),e(gte,fKe),e(pg,mKe),e(pg,QS),e(QS,gKe),e(pg,hKe),e(A,pKe),e(A,_g),e(_g,hte),e(hte,_Ke),e(_g,uKe),e(_g,HS),e(HS,bKe),e(_g,vKe),e(A,FKe),e(A,ug),e(ug,pte),e(pte,TKe),e(ug,MKe),e(ug,US),e(US,EKe),e(ug,CKe),e(A,wKe),e(A,bg),e(bg,_te),e(_te,AKe),e(bg,yKe),e(bg,JS),e(JS,LKe),e(bg,xKe),e(A,$Ke),e(A,vg),e(vg,ute),e(ute,kKe),e(vg,SKe),e(vg,YS),e(YS,RKe),e(vg,PKe),e(A,BKe),e(A,Fg),e(Fg,bte),e(bte,IKe),e(Fg,NKe),e(Fg,KS),e(KS,qKe),e(Fg,jKe),e(A,DKe),e(A,Tg),e(Tg,vte),e(vte,GKe),e(Tg,OKe),e(Tg,ZS),e(ZS,VKe),e(Tg,XKe),e(A,zKe),e(A,Mg),e(Mg,Fte),e(Fte,WKe),e(Mg,QKe),e(Mg,eR),e(eR,HKe),e(Mg,UKe),e(A,JKe),e(A,Eg),e(Eg,Tte),e(Tte,YKe),e(Eg,KKe),e(Eg,oR),e(oR,ZKe),e(Eg,eZe),e(Er,oZe),M(Cg,Er,null),e(Co,rZe),e(Co,wg),M(IA,wg,null),e(wg,tZe),e(wg,Mte),e(Mte,aZe),b(f,gqe,u),b(f,Ti,u),e(Ti,Ag),e(Ag,Ete),M(NA,Ete,null),e(Ti,nZe),e(Ti,Cte),e(Cte,sZe),b(f,hqe,u),b(f,wo,u),M(qA,wo,null),e(wo,lZe),e(wo,jA),e(jA,iZe),e(jA,rR),e(rR,dZe),e(jA,cZe),e(wo,fZe),e(wo,DA),e(DA,mZe),e(DA,wte),e(wte,gZe),e(DA,hZe),e(wo,pZe),e(wo,Cr),M(GA,Cr,null),e(Cr,_Ze),e(Cr,Ate),e(Ate,uZe),e(Cr,bZe),e(Cr,Aa),e(Aa,vZe),e(Aa,yte),e(yte,FZe),e(Aa,TZe),e(Aa,Lte),e(Lte,MZe),e(Aa,EZe),e(Aa,xte),e(xte,CZe),e(Aa,wZe),e(Cr,AZe),e(Cr,k),e(k,Sn),e(Sn,$te),e($te,yZe),e(Sn,LZe),e(Sn,tR),e(tR,xZe),e(Sn,$Ze),e(Sn,aR),e(aR,kZe),e(Sn,SZe),e(k,RZe),e(k,Rn),e(Rn,kte),e(kte,PZe),e(Rn,BZe),e(Rn,nR),e(nR,IZe),e(Rn,NZe),e(Rn,sR),e(sR,qZe),e(Rn,jZe),e(k,DZe),e(k,Pn),e(Pn,Ste),e(Ste,GZe),e(Pn,OZe),e(Pn,lR),e(lR,VZe),e(Pn,XZe),e(Pn,iR),e(iR,zZe),e(Pn,WZe),e(k,QZe),e(k,yg),e(yg,Rte),e(Rte,HZe),e(yg,UZe),e(yg,dR),e(dR,JZe),e(yg,YZe),e(k,KZe),e(k,Bn),e(Bn,Pte),e(Pte,ZZe),e(Bn,eeo),e(Bn,cR),e(cR,oeo),e(Bn,reo),e(Bn,fR),e(fR,teo),e(Bn,aeo),e(k,neo),e(k,Lg),e(Lg,Bte),e(Bte,seo),e(Lg,leo),e(Lg,mR),e(mR,ieo),e(Lg,deo),e(k,ceo),e(k,xg),e(xg,Ite),e(Ite,feo),e(xg,meo),e(xg,gR),e(gR,geo),e(xg,heo),e(k,peo),e(k,$g),e($g,Nte),e(Nte,_eo),e($g,ueo),e($g,hR),e(hR,beo),e($g,veo),e(k,Feo),e(k,In),e(In,qte),e(qte,Teo),e(In,Meo),e(In,pR),e(pR,Eeo),e(In,Ceo),e(In,_R),e(_R,weo),e(In,Aeo),e(k,yeo),e(k,Nn),e(Nn,jte),e(jte,Leo),e(Nn,xeo),e(Nn,uR),e(uR,$eo),e(Nn,keo),e(Nn,bR),e(bR,Seo),e(Nn,Reo),e(k,Peo),e(k,qn),e(qn,Dte),e(Dte,Beo),e(qn,Ieo),e(qn,vR),e(vR,Neo),e(qn,qeo),e(qn,FR),e(FR,jeo),e(qn,Deo),e(k,Geo),e(k,kg),e(kg,Gte),e(Gte,Oeo),e(kg,Veo),e(kg,TR),e(TR,Xeo),e(kg,zeo),e(k,Weo),e(k,Sg),e(Sg,Ote),e(Ote,Qeo),e(Sg,Heo),e(Sg,MR),e(MR,Ueo),e(Sg,Jeo),e(k,Yeo),e(k,jn),e(jn,Vte),e(Vte,Keo),e(jn,Zeo),e(jn,ER),e(ER,eoo),e(jn,ooo),e(jn,CR),e(CR,roo),e(jn,too),e(k,aoo),e(k,Rg),e(Rg,Xte),e(Xte,noo),e(Rg,soo),e(Rg,wR),e(wR,loo),e(Rg,ioo),e(k,doo),e(k,Dn),e(Dn,zte),e(zte,coo),e(Dn,foo),e(Dn,AR),e(AR,moo),e(Dn,goo),e(Dn,yR),e(yR,hoo),e(Dn,poo),e(k,_oo),e(k,Gn),e(Gn,Wte),e(Wte,uoo),e(Gn,boo),e(Gn,LR),e(LR,voo),e(Gn,Foo),e(Gn,xR),e(xR,Too),e(Gn,Moo),e(k,Eoo),e(k,On),e(On,Qte),e(Qte,Coo),e(On,woo),e(On,$R),e($R,Aoo),e(On,yoo),e(On,kR),e(kR,Loo),e(On,xoo),e(k,$oo),e(k,Pg),e(Pg,Hte),e(Hte,koo),e(Pg,Soo),e(Pg,SR),e(SR,Roo),e(Pg,Poo),e(k,Boo),e(k,Vn),e(Vn,Ute),e(Ute,Ioo),e(Vn,Noo),e(Vn,RR),e(RR,qoo),e(Vn,joo),e(Vn,PR),e(PR,Doo),e(Vn,Goo),e(k,Ooo),e(k,Xn),e(Xn,Jte),e(Jte,Voo),e(Xn,Xoo),e(Xn,BR),e(BR,zoo),e(Xn,Woo),e(Xn,IR),e(IR,Qoo),e(Xn,Hoo),e(k,Uoo),e(k,zn),e(zn,Yte),e(Yte,Joo),e(zn,Yoo),e(zn,NR),e(NR,Koo),e(zn,Zoo),e(zn,qR),e(qR,ero),e(zn,oro),e(k,rro),e(k,Wn),e(Wn,Kte),e(Kte,tro),e(Wn,aro),e(Wn,jR),e(jR,nro),e(Wn,sro),e(Wn,DR),e(DR,lro),e(Wn,iro),e(k,dro),e(k,Qn),e(Qn,Zte),e(Zte,cro),e(Qn,fro),e(Qn,GR),e(GR,mro),e(Qn,gro),e(Qn,OR),e(OR,hro),e(Qn,pro),e(k,_ro),e(k,Hn),e(Hn,eae),e(eae,uro),e(Hn,bro),e(Hn,VR),e(VR,vro),e(Hn,Fro),e(Hn,XR),e(XR,Tro),e(Hn,Mro),e(k,Ero),e(k,Bg),e(Bg,oae),e(oae,Cro),e(Bg,wro),e(Bg,zR),e(zR,Aro),e(Bg,yro),e(k,Lro),e(k,Un),e(Un,rae),e(rae,xro),e(Un,$ro),e(Un,WR),e(WR,kro),e(Un,Sro),e(Un,QR),e(QR,Rro),e(Un,Pro),e(k,Bro),e(k,Ig),e(Ig,tae),e(tae,Iro),e(Ig,Nro),e(Ig,HR),e(HR,qro),e(Ig,jro),e(k,Dro),e(k,Jn),e(Jn,aae),e(aae,Gro),e(Jn,Oro),e(Jn,UR),e(UR,Vro),e(Jn,Xro),e(Jn,JR),e(JR,zro),e(Jn,Wro),e(k,Qro),e(k,Yn),e(Yn,nae),e(nae,Hro),e(Yn,Uro),e(Yn,YR),e(YR,Jro),e(Yn,Yro),e(Yn,KR),e(KR,Kro),e(Yn,Zro),e(k,eto),e(k,Kn),e(Kn,sae),e(sae,oto),e(Kn,rto),e(Kn,ZR),e(ZR,tto),e(Kn,ato),e(Kn,eP),e(eP,nto),e(Kn,sto),e(k,lto),e(k,Ng),e(Ng,lae),e(lae,ito),e(Ng,dto),e(Ng,oP),e(oP,cto),e(Ng,fto),e(k,mto),e(k,Zn),e(Zn,iae),e(iae,gto),e(Zn,hto),e(Zn,rP),e(rP,pto),e(Zn,_to),e(Zn,tP),e(tP,uto),e(Zn,bto),e(k,vto),e(k,es),e(es,dae),e(dae,Fto),e(es,Tto),e(es,aP),e(aP,Mto),e(es,Eto),e(es,nP),e(nP,Cto),e(es,wto),e(k,Ato),e(k,qg),e(qg,cae),e(cae,yto),e(qg,Lto),e(qg,sP),e(sP,xto),e(qg,$to),e(k,kto),e(k,os),e(os,fae),e(fae,Sto),e(os,Rto),e(os,lP),e(lP,Pto),e(os,Bto),e(os,iP),e(iP,Ito),e(os,Nto),e(k,qto),e(k,rs),e(rs,mae),e(mae,jto),e(rs,Dto),e(rs,dP),e(dP,Gto),e(rs,Oto),e(rs,cP),e(cP,Vto),e(rs,Xto),e(k,zto),e(k,ts),e(ts,gae),e(gae,Wto),e(ts,Qto),e(ts,fP),e(fP,Hto),e(ts,Uto),e(ts,mP),e(mP,Jto),e(ts,Yto),e(k,Kto),e(k,as),e(as,hae),e(hae,Zto),e(as,eao),e(as,gP),e(gP,oao),e(as,rao),e(as,hP),e(hP,tao),e(as,aao),e(k,nao),e(k,ns),e(ns,pae),e(pae,sao),e(ns,lao),e(ns,pP),e(pP,iao),e(ns,dao),e(ns,_P),e(_P,cao),e(ns,fao),e(k,mao),e(k,ss),e(ss,_ae),e(_ae,gao),e(ss,hao),e(ss,uP),e(uP,pao),e(ss,_ao),e(ss,bP),e(bP,uao),e(ss,bao),e(k,vao),e(k,ls),e(ls,uae),e(uae,Fao),e(ls,Tao),e(ls,vP),e(vP,Mao),e(ls,Eao),e(ls,FP),e(FP,Cao),e(ls,wao),e(k,Aao),e(k,jg),e(jg,bae),e(bae,yao),e(jg,Lao),e(jg,TP),e(TP,xao),e(jg,$ao),e(k,kao),e(k,is),e(is,vae),e(vae,Sao),e(is,Rao),e(is,MP),e(MP,Pao),e(is,Bao),e(is,EP),e(EP,Iao),e(is,Nao),e(k,qao),e(k,Dg),e(Dg,Fae),e(Fae,jao),e(Dg,Dao),e(Dg,CP),e(CP,Gao),e(Dg,Oao),e(k,Vao),e(k,Gg),e(Gg,Tae),e(Tae,Xao),e(Gg,zao),e(Gg,wP),e(wP,Wao),e(Gg,Qao),e(k,Hao),e(k,ds),e(ds,Mae),e(Mae,Uao),e(ds,Jao),e(ds,AP),e(AP,Yao),e(ds,Kao),e(ds,yP),e(yP,Zao),e(ds,eno),e(k,ono),e(k,cs),e(cs,Eae),e(Eae,rno),e(cs,tno),e(cs,LP),e(LP,ano),e(cs,nno),e(cs,xP),e(xP,sno),e(cs,lno),e(k,ino),e(k,fs),e(fs,Cae),e(Cae,dno),e(fs,cno),e(fs,$P),e($P,fno),e(fs,mno),e(fs,kP),e(kP,gno),e(fs,hno),e(k,pno),e(k,Og),e(Og,wae),e(wae,_no),e(Og,uno),e(Og,SP),e(SP,bno),e(Og,vno),e(k,Fno),e(k,ms),e(ms,Aae),e(Aae,Tno),e(ms,Mno),e(ms,RP),e(RP,Eno),e(ms,Cno),e(ms,PP),e(PP,wno),e(ms,Ano),e(k,yno),e(k,gs),e(gs,yae),e(yae,Lno),e(gs,xno),e(gs,BP),e(BP,$no),e(gs,kno),e(gs,IP),e(IP,Sno),e(gs,Rno),e(k,Pno),e(k,hs),e(hs,Lae),e(Lae,Bno),e(hs,Ino),e(hs,NP),e(NP,Nno),e(hs,qno),e(hs,qP),e(qP,jno),e(hs,Dno),e(k,Gno),e(k,ps),e(ps,xae),e(xae,Ono),e(ps,Vno),e(ps,jP),e(jP,Xno),e(ps,zno),e(ps,DP),e(DP,Wno),e(ps,Qno),e(k,Hno),e(k,_s),e(_s,$ae),e($ae,Uno),e(_s,Jno),e(_s,GP),e(GP,Yno),e(_s,Kno),e(_s,OP),e(OP,Zno),e(_s,eso),e(k,oso),e(k,Vg),e(Vg,kae),e(kae,rso),e(Vg,tso),e(Vg,VP),e(VP,aso),e(Vg,nso),e(k,sso),e(k,us),e(us,Sae),e(Sae,lso),e(us,iso),e(us,XP),e(XP,dso),e(us,cso),e(us,zP),e(zP,fso),e(us,mso),e(k,gso),e(k,Xg),e(Xg,Rae),e(Rae,hso),e(Xg,pso),e(Xg,WP),e(WP,_so),e(Xg,uso),e(k,bso),e(k,zg),e(zg,Pae),e(Pae,vso),e(zg,Fso),e(zg,QP),e(QP,Tso),e(zg,Mso),e(k,Eso),e(k,Wg),e(Wg,Bae),e(Bae,Cso),e(Wg,wso),e(Wg,HP),e(HP,Aso),e(Wg,yso),e(k,Lso),e(k,Qg),e(Qg,Iae),e(Iae,xso),e(Qg,$so),e(Qg,UP),e(UP,kso),e(Qg,Sso),e(k,Rso),e(k,bs),e(bs,Nae),e(Nae,Pso),e(bs,Bso),e(bs,JP),e(JP,Iso),e(bs,Nso),e(bs,YP),e(YP,qso),e(bs,jso),e(k,Dso),e(k,Hg),e(Hg,qae),e(qae,Gso),e(Hg,Oso),e(Hg,KP),e(KP,Vso),e(Hg,Xso),e(k,zso),e(k,vs),e(vs,jae),e(jae,Wso),e(vs,Qso),e(vs,ZP),e(ZP,Hso),e(vs,Uso),e(vs,eB),e(eB,Jso),e(vs,Yso),e(k,Kso),e(k,Fs),e(Fs,Dae),e(Dae,Zso),e(Fs,elo),e(Fs,oB),e(oB,olo),e(Fs,rlo),e(Fs,rB),e(rB,tlo),e(Fs,alo),e(k,nlo),e(k,Ts),e(Ts,Gae),e(Gae,slo),e(Ts,llo),e(Ts,tB),e(tB,ilo),e(Ts,dlo),e(Ts,aB),e(aB,clo),e(Ts,flo),e(k,mlo),e(k,Ms),e(Ms,Oae),e(Oae,glo),e(Ms,hlo),e(Ms,nB),e(nB,plo),e(Ms,_lo),e(Ms,sB),e(sB,ulo),e(Ms,blo),e(k,vlo),e(k,Es),e(Es,Vae),e(Vae,Flo),e(Es,Tlo),e(Es,lB),e(lB,Mlo),e(Es,Elo),e(Es,iB),e(iB,Clo),e(Es,wlo),e(k,Alo),e(k,Cs),e(Cs,Xae),e(Xae,ylo),e(Cs,Llo),e(Cs,dB),e(dB,xlo),e(Cs,$lo),e(Cs,cB),e(cB,klo),e(Cs,Slo),e(k,Rlo),e(k,Ug),e(Ug,zae),e(zae,Plo),e(Ug,Blo),e(Ug,fB),e(fB,Ilo),e(Ug,Nlo),e(k,qlo),e(k,Jg),e(Jg,Wae),e(Wae,jlo),e(Jg,Dlo),e(Jg,mB),e(mB,Glo),e(Jg,Olo),e(k,Vlo),e(k,ws),e(ws,Qae),e(Qae,Xlo),e(ws,zlo),e(ws,gB),e(gB,Wlo),e(ws,Qlo),e(ws,hB),e(hB,Hlo),e(ws,Ulo),e(k,Jlo),e(k,As),e(As,Hae),e(Hae,Ylo),e(As,Klo),e(As,pB),e(pB,Zlo),e(As,eio),e(As,_B),e(_B,oio),e(As,rio),e(k,tio),e(k,ys),e(ys,Uae),e(Uae,aio),e(ys,nio),e(ys,uB),e(uB,sio),e(ys,lio),e(ys,bB),e(bB,iio),e(ys,dio),e(k,cio),e(k,Yg),e(Yg,Jae),e(Jae,fio),e(Yg,mio),e(Yg,vB),e(vB,gio),e(Yg,hio),e(k,pio),e(k,Kg),e(Kg,Yae),e(Yae,_io),e(Kg,uio),e(Kg,FB),e(FB,bio),e(Kg,vio),e(k,Fio),e(k,Zg),e(Zg,Kae),e(Kae,Tio),e(Zg,Mio),e(Zg,TB),e(TB,Eio),e(Zg,Cio),e(k,wio),e(k,Ls),e(Ls,Zae),e(Zae,Aio),e(Ls,yio),e(Ls,MB),e(MB,Lio),e(Ls,xio),e(Ls,EB),e(EB,$io),e(Ls,kio),e(k,Sio),e(k,eh),e(eh,ene),e(ene,Rio),e(eh,Pio),e(eh,CB),e(CB,Bio),e(eh,Iio),e(k,Nio),e(k,oh),e(oh,one),e(one,qio),e(oh,jio),e(oh,wB),e(wB,Dio),e(oh,Gio),e(k,Oio),e(k,rh),e(rh,rne),e(rne,Vio),e(rh,Xio),e(rh,AB),e(AB,zio),e(rh,Wio),e(k,Qio),e(k,xs),e(xs,tne),e(tne,Hio),e(xs,Uio),e(xs,yB),e(yB,Jio),e(xs,Yio),e(xs,LB),e(LB,Kio),e(xs,Zio),e(k,edo),e(k,th),e(th,ane),e(ane,odo),e(th,rdo),e(th,xB),e(xB,tdo),e(th,ado),e(k,ndo),e(k,ah),e(ah,nne),e(nne,sdo),e(ah,ldo),e(ah,$B),e($B,ido),e(ah,ddo),e(k,cdo),e(k,$s),e($s,sne),e(sne,fdo),e($s,mdo),e($s,kB),e(kB,gdo),e($s,hdo),e($s,SB),e(SB,pdo),e($s,_do),e(k,udo),e(k,ks),e(ks,lne),e(lne,bdo),e(ks,vdo),e(ks,RB),e(RB,Fdo),e(ks,Tdo),e(ks,PB),e(PB,Mdo),e(ks,Edo),e(k,Cdo),e(k,Ss),e(Ss,ine),e(ine,wdo),e(Ss,Ado),e(Ss,BB),e(BB,ydo),e(Ss,Ldo),e(Ss,IB),e(IB,xdo),e(Ss,$do),e(k,kdo),e(k,Rs),e(Rs,dne),e(dne,Sdo),e(Rs,Rdo),e(Rs,NB),e(NB,Pdo),e(Rs,Bdo),e(Rs,qB),e(qB,Ido),e(Rs,Ndo),e(Cr,qdo),M(nh,Cr,null),e(wo,jdo),e(wo,sh),M(OA,sh,null),e(sh,Ddo),e(sh,cne),e(cne,Gdo),b(f,pqe,u),b(f,Mi,u),e(Mi,lh),e(lh,fne),M(VA,fne,null),e(Mi,Odo),e(Mi,mne),e(mne,Vdo),b(f,_qe,u),b(f,Ao,u),M(XA,Ao,null),e(Ao,Xdo),e(Ao,zA),e(zA,zdo),e(zA,jB),e(jB,Wdo),e(zA,Qdo),e(Ao,Hdo),e(Ao,WA),e(WA,Udo),e(WA,gne),e(gne,Jdo),e(WA,Ydo),e(Ao,Kdo),e(Ao,He),M(QA,He,null),e(He,Zdo),e(He,hne),e(hne,eco),e(He,oco),e(He,ya),e(ya,rco),e(ya,pne),e(pne,tco),e(ya,aco),e(ya,_ne),e(_ne,nco),e(ya,sco),e(ya,une),e(une,lco),e(ya,ico),e(He,dco),e(He,Y),e(Y,ih),e(ih,bne),e(bne,cco),e(ih,fco),e(ih,DB),e(DB,mco),e(ih,gco),e(Y,hco),e(Y,dh),e(dh,vne),e(vne,pco),e(dh,_co),e(dh,GB),e(GB,uco),e(dh,bco),e(Y,vco),e(Y,ch),e(ch,Fne),e(Fne,Fco),e(ch,Tco),e(ch,OB),e(OB,Mco),e(ch,Eco),e(Y,Cco),e(Y,fh),e(fh,Tne),e(Tne,wco),e(fh,Aco),e(fh,VB),e(VB,yco),e(fh,Lco),e(Y,xco),e(Y,mh),e(mh,Mne),e(Mne,$co),e(mh,kco),e(mh,XB),e(XB,Sco),e(mh,Rco),e(Y,Pco),e(Y,gh),e(gh,Ene),e(Ene,Bco),e(gh,Ico),e(gh,zB),e(zB,Nco),e(gh,qco),e(Y,jco),e(Y,hh),e(hh,Cne),e(Cne,Dco),e(hh,Gco),e(hh,WB),e(WB,Oco),e(hh,Vco),e(Y,Xco),e(Y,ph),e(ph,wne),e(wne,zco),e(ph,Wco),e(ph,QB),e(QB,Qco),e(ph,Hco),e(Y,Uco),e(Y,_h),e(_h,Ane),e(Ane,Jco),e(_h,Yco),e(_h,HB),e(HB,Kco),e(_h,Zco),e(Y,efo),e(Y,uh),e(uh,yne),e(yne,ofo),e(uh,rfo),e(uh,UB),e(UB,tfo),e(uh,afo),e(Y,nfo),e(Y,bh),e(bh,Lne),e(Lne,sfo),e(bh,lfo),e(bh,JB),e(JB,ifo),e(bh,dfo),e(Y,cfo),e(Y,vh),e(vh,xne),e(xne,ffo),e(vh,mfo),e(vh,YB),e(YB,gfo),e(vh,hfo),e(Y,pfo),e(Y,Fh),e(Fh,$ne),e($ne,_fo),e(Fh,ufo),e(Fh,KB),e(KB,bfo),e(Fh,vfo),e(Y,Ffo),e(Y,Th),e(Th,kne),e(kne,Tfo),e(Th,Mfo),e(Th,ZB),e(ZB,Efo),e(Th,Cfo),e(Y,wfo),e(Y,Mh),e(Mh,Sne),e(Sne,Afo),e(Mh,yfo),e(Mh,eI),e(eI,Lfo),e(Mh,xfo),e(Y,$fo),e(Y,Eh),e(Eh,Rne),e(Rne,kfo),e(Eh,Sfo),e(Eh,oI),e(oI,Rfo),e(Eh,Pfo),e(Y,Bfo),e(Y,Ch),e(Ch,Pne),e(Pne,Ifo),e(Ch,Nfo),e(Ch,rI),e(rI,qfo),e(Ch,jfo),e(Y,Dfo),e(Y,wh),e(wh,Bne),e(Bne,Gfo),e(wh,Ofo),e(wh,tI),e(tI,Vfo),e(wh,Xfo),e(Y,zfo),e(Y,Ah),e(Ah,Ine),e(Ine,Wfo),e(Ah,Qfo),e(Ah,aI),e(aI,Hfo),e(Ah,Ufo),e(Y,Jfo),e(Y,yh),e(yh,Nne),e(Nne,Yfo),e(yh,Kfo),e(yh,nI),e(nI,Zfo),e(yh,emo),e(Y,omo),e(Y,Lh),e(Lh,qne),e(qne,rmo),e(Lh,tmo),e(Lh,sI),e(sI,amo),e(Lh,nmo),e(Y,smo),e(Y,xh),e(xh,jne),e(jne,lmo),e(xh,imo),e(xh,lI),e(lI,dmo),e(xh,cmo),e(Y,fmo),e(Y,$h),e($h,Dne),e(Dne,mmo),e($h,gmo),e($h,iI),e(iI,hmo),e($h,pmo),e(Y,_mo),e(Y,kh),e(kh,Gne),e(Gne,umo),e(kh,bmo),e(kh,dI),e(dI,vmo),e(kh,Fmo),e(Y,Tmo),e(Y,Sh),e(Sh,One),e(One,Mmo),e(Sh,Emo),e(Sh,cI),e(cI,Cmo),e(Sh,wmo),e(Y,Amo),e(Y,Rh),e(Rh,Vne),e(Vne,ymo),e(Rh,Lmo),e(Rh,fI),e(fI,xmo),e(Rh,$mo),e(Y,kmo),e(Y,Ph),e(Ph,Xne),e(Xne,Smo),e(Ph,Rmo),e(Ph,mI),e(mI,Pmo),e(Ph,Bmo),e(Y,Imo),e(Y,Bh),e(Bh,zne),e(zne,Nmo),e(Bh,qmo),e(Bh,gI),e(gI,jmo),e(Bh,Dmo),e(Y,Gmo),e(Y,Ih),e(Ih,Wne),e(Wne,Omo),e(Ih,Vmo),e(Ih,hI),e(hI,Xmo),e(Ih,zmo),e(He,Wmo),M(Nh,He,null),e(He,Qmo),M(qh,He,null),e(Ao,Hmo),e(Ao,jh),M(HA,jh,null),e(jh,Umo),e(jh,Qne),e(Qne,Jmo),b(f,uqe,u),b(f,Ei,u),e(Ei,Dh),e(Dh,Hne),M(UA,Hne,null),e(Ei,Ymo),e(Ei,Une),e(Une,Kmo),b(f,bqe,u),b(f,yo,u),M(JA,yo,null),e(yo,Zmo),e(yo,YA),e(YA,ego),e(YA,pI),e(pI,ogo),e(YA,rgo),e(yo,tgo),e(yo,KA),e(KA,ago),e(KA,Jne),e(Jne,ngo),e(KA,sgo),e(yo,lgo),e(yo,Ue),M(ZA,Ue,null),e(Ue,igo),e(Ue,Yne),e(Yne,dgo),e(Ue,cgo),e(Ue,Ci),e(Ci,fgo),e(Ci,Kne),e(Kne,mgo),e(Ci,ggo),e(Ci,Zne),e(Zne,hgo),e(Ci,pgo),e(Ue,_go),e(Ue,he),e(he,Gh),e(Gh,ese),e(ese,ugo),e(Gh,bgo),e(Gh,_I),e(_I,vgo),e(Gh,Fgo),e(he,Tgo),e(he,Oh),e(Oh,ose),e(ose,Mgo),e(Oh,Ego),e(Oh,rse),e(rse,Cgo),e(Oh,wgo),e(he,Ago),e(he,Vh),e(Vh,tse),e(tse,ygo),e(Vh,Lgo),e(Vh,uI),e(uI,xgo),e(Vh,$go),e(he,kgo),e(he,Xh),e(Xh,ase),e(ase,Sgo),e(Xh,Rgo),e(Xh,bI),e(bI,Pgo),e(Xh,Bgo),e(he,Igo),e(he,zh),e(zh,nse),e(nse,Ngo),e(zh,qgo),e(zh,vI),e(vI,jgo),e(zh,Dgo),e(he,Ggo),e(he,Wh),e(Wh,sse),e(sse,Ogo),e(Wh,Vgo),e(Wh,FI),e(FI,Xgo),e(Wh,zgo),e(he,Wgo),e(he,Qh),e(Qh,lse),e(lse,Qgo),e(Qh,Hgo),e(Qh,TI),e(TI,Ugo),e(Qh,Jgo),e(he,Ygo),e(he,Hh),e(Hh,ise),e(ise,Kgo),e(Hh,Zgo),e(Hh,MI),e(MI,eho),e(Hh,oho),e(he,rho),e(he,Uh),e(Uh,dse),e(dse,tho),e(Uh,aho),e(Uh,EI),e(EI,nho),e(Uh,sho),e(he,lho),e(he,Jh),e(Jh,cse),e(cse,iho),e(Jh,dho),e(Jh,CI),e(CI,cho),e(Jh,fho),e(he,mho),e(he,Yh),e(Yh,fse),e(fse,gho),e(Yh,hho),e(Yh,wI),e(wI,pho),e(Yh,_ho),e(he,uho),e(he,Kh),e(Kh,mse),e(mse,bho),e(Kh,vho),e(Kh,AI),e(AI,Fho),e(Kh,Tho),e(he,Mho),e(he,Zh),e(Zh,gse),e(gse,Eho),e(Zh,Cho),e(Zh,yI),e(yI,who),e(Zh,Aho),e(he,yho),e(he,ep),e(ep,hse),e(hse,Lho),e(ep,xho),e(ep,LI),e(LI,$ho),e(ep,kho),e(he,Sho),e(he,op),e(op,pse),e(pse,Rho),e(op,Pho),e(op,xI),e(xI,Bho),e(op,Iho),e(he,Nho),e(he,rp),e(rp,_se),e(_se,qho),e(rp,jho),e(rp,$I),e($I,Dho),e(rp,Gho),e(he,Oho),e(he,tp),e(tp,use),e(use,Vho),e(tp,Xho),e(tp,kI),e(kI,zho),e(tp,Who),e(Ue,Qho),M(ap,Ue,null),e(Ue,Hho),M(np,Ue,null),e(yo,Uho),e(yo,sp),M(ey,sp,null),e(sp,Jho),e(sp,bse),e(bse,Yho),b(f,vqe,u),b(f,wi,u),e(wi,lp),e(lp,vse),M(oy,vse,null),e(wi,Kho),e(wi,Fse),e(Fse,Zho),b(f,Fqe,u),b(f,Lo,u),M(ry,Lo,null),e(Lo,epo),e(Lo,Ai),e(Ai,opo),e(Ai,SI),e(SI,rpo),e(Ai,tpo),e(Ai,RI),e(RI,apo),e(Ai,npo),e(Lo,spo),e(Lo,ty),e(ty,lpo),e(ty,Tse),e(Tse,ipo),e(ty,dpo),e(Lo,cpo),e(Lo,tt),M(ay,tt,null),e(tt,fpo),e(tt,Mse),e(Mse,mpo),e(tt,gpo),e(tt,yi),e(yi,hpo),e(yi,Ese),e(Ese,ppo),e(yi,_po),e(yi,PI),e(PI,upo),e(yi,bpo),e(tt,vpo),M(ip,tt,null),e(Lo,Fpo),e(Lo,Je),M(ny,Je,null),e(Je,Tpo),e(Je,Cse),e(Cse,Mpo),e(Je,Epo),e(Je,La),e(La,Cpo),e(La,wse),e(wse,wpo),e(La,Apo),e(La,Ase),e(Ase,ypo),e(La,Lpo),e(La,yse),e(yse,xpo),e(La,$po),e(Je,kpo),e(Je,x),e(x,dp),e(dp,Lse),e(Lse,Spo),e(dp,Rpo),e(dp,BI),e(BI,Ppo),e(dp,Bpo),e(x,Ipo),e(x,cp),e(cp,xse),e(xse,Npo),e(cp,qpo),e(cp,II),e(II,jpo),e(cp,Dpo),e(x,Gpo),e(x,fp),e(fp,$se),e($se,Opo),e(fp,Vpo),e(fp,NI),e(NI,Xpo),e(fp,zpo),e(x,Wpo),e(x,mp),e(mp,kse),e(kse,Qpo),e(mp,Hpo),e(mp,qI),e(qI,Upo),e(mp,Jpo),e(x,Ypo),e(x,gp),e(gp,Sse),e(Sse,Kpo),e(gp,Zpo),e(gp,jI),e(jI,e_o),e(gp,o_o),e(x,r_o),e(x,hp),e(hp,Rse),e(Rse,t_o),e(hp,a_o),e(hp,DI),e(DI,n_o),e(hp,s_o),e(x,l_o),e(x,pp),e(pp,Pse),e(Pse,i_o),e(pp,d_o),e(pp,GI),e(GI,c_o),e(pp,f_o),e(x,m_o),e(x,_p),e(_p,Bse),e(Bse,g_o),e(_p,h_o),e(_p,OI),e(OI,p_o),e(_p,__o),e(x,u_o),e(x,up),e(up,Ise),e(Ise,b_o),e(up,v_o),e(up,VI),e(VI,F_o),e(up,T_o),e(x,M_o),e(x,bp),e(bp,Nse),e(Nse,E_o),e(bp,C_o),e(bp,XI),e(XI,w_o),e(bp,A_o),e(x,y_o),e(x,vp),e(vp,qse),e(qse,L_o),e(vp,x_o),e(vp,zI),e(zI,$_o),e(vp,k_o),e(x,S_o),e(x,Fp),e(Fp,jse),e(jse,R_o),e(Fp,P_o),e(Fp,WI),e(WI,B_o),e(Fp,I_o),e(x,N_o),e(x,Tp),e(Tp,Dse),e(Dse,q_o),e(Tp,j_o),e(Tp,QI),e(QI,D_o),e(Tp,G_o),e(x,O_o),e(x,Mp),e(Mp,Gse),e(Gse,V_o),e(Mp,X_o),e(Mp,HI),e(HI,z_o),e(Mp,W_o),e(x,Q_o),e(x,Ep),e(Ep,Ose),e(Ose,H_o),e(Ep,U_o),e(Ep,UI),e(UI,J_o),e(Ep,Y_o),e(x,K_o),e(x,Cp),e(Cp,Vse),e(Vse,Z_o),e(Cp,euo),e(Cp,JI),e(JI,ouo),e(Cp,ruo),e(x,tuo),e(x,wp),e(wp,Xse),e(Xse,auo),e(wp,nuo),e(wp,YI),e(YI,suo),e(wp,luo),e(x,iuo),e(x,Ap),e(Ap,zse),e(zse,duo),e(Ap,cuo),e(Ap,KI),e(KI,fuo),e(Ap,muo),e(x,guo),e(x,yp),e(yp,Wse),e(Wse,huo),e(yp,puo),e(yp,ZI),e(ZI,_uo),e(yp,uuo),e(x,buo),e(x,Lp),e(Lp,Qse),e(Qse,vuo),e(Lp,Fuo),e(Lp,eN),e(eN,Tuo),e(Lp,Muo),e(x,Euo),e(x,xp),e(xp,Hse),e(Hse,Cuo),e(xp,wuo),e(xp,oN),e(oN,Auo),e(xp,yuo),e(x,Luo),e(x,$p),e($p,Use),e(Use,xuo),e($p,$uo),e($p,rN),e(rN,kuo),e($p,Suo),e(x,Ruo),e(x,kp),e(kp,Jse),e(Jse,Puo),e(kp,Buo),e(kp,tN),e(tN,Iuo),e(kp,Nuo),e(x,quo),e(x,Sp),e(Sp,Yse),e(Yse,juo),e(Sp,Duo),e(Sp,aN),e(aN,Guo),e(Sp,Ouo),e(x,Vuo),e(x,Rp),e(Rp,Kse),e(Kse,Xuo),e(Rp,zuo),e(Rp,nN),e(nN,Wuo),e(Rp,Quo),e(x,Huo),e(x,Pp),e(Pp,Zse),e(Zse,Uuo),e(Pp,Juo),e(Pp,sN),e(sN,Yuo),e(Pp,Kuo),e(x,Zuo),e(x,Bp),e(Bp,ele),e(ele,e2o),e(Bp,o2o),e(Bp,lN),e(lN,r2o),e(Bp,t2o),e(x,a2o),e(x,Ip),e(Ip,ole),e(ole,n2o),e(Ip,s2o),e(Ip,iN),e(iN,l2o),e(Ip,i2o),e(x,d2o),e(x,Np),e(Np,rle),e(rle,c2o),e(Np,f2o),e(Np,dN),e(dN,m2o),e(Np,g2o),e(x,h2o),e(x,qp),e(qp,tle),e(tle,p2o),e(qp,_2o),e(qp,cN),e(cN,u2o),e(qp,b2o),e(x,v2o),e(x,jp),e(jp,ale),e(ale,F2o),e(jp,T2o),e(jp,fN),e(fN,M2o),e(jp,E2o),e(x,C2o),e(x,Dp),e(Dp,nle),e(nle,w2o),e(Dp,A2o),e(Dp,mN),e(mN,y2o),e(Dp,L2o),e(x,x2o),e(x,Gp),e(Gp,sle),e(sle,$2o),e(Gp,k2o),e(Gp,gN),e(gN,S2o),e(Gp,R2o),e(x,P2o),e(x,Ps),e(Ps,lle),e(lle,B2o),e(Ps,I2o),e(Ps,hN),e(hN,N2o),e(Ps,q2o),e(Ps,pN),e(pN,j2o),e(Ps,D2o),e(x,G2o),e(x,Op),e(Op,ile),e(ile,O2o),e(Op,V2o),e(Op,_N),e(_N,X2o),e(Op,z2o),e(x,W2o),e(x,Vp),e(Vp,dle),e(dle,Q2o),e(Vp,H2o),e(Vp,uN),e(uN,U2o),e(Vp,J2o),e(x,Y2o),e(x,Xp),e(Xp,cle),e(cle,K2o),e(Xp,Z2o),e(Xp,bN),e(bN,e1o),e(Xp,o1o),e(x,r1o),e(x,zp),e(zp,fle),e(fle,t1o),e(zp,a1o),e(zp,vN),e(vN,n1o),e(zp,s1o),e(x,l1o),e(x,Wp),e(Wp,mle),e(mle,i1o),e(Wp,d1o),e(Wp,FN),e(FN,c1o),e(Wp,f1o),e(x,m1o),e(x,Qp),e(Qp,gle),e(gle,g1o),e(Qp,h1o),e(Qp,TN),e(TN,p1o),e(Qp,_1o),e(x,u1o),e(x,Hp),e(Hp,hle),e(hle,b1o),e(Hp,v1o),e(Hp,MN),e(MN,F1o),e(Hp,T1o),e(x,M1o),e(x,Up),e(Up,ple),e(ple,E1o),e(Up,C1o),e(Up,EN),e(EN,w1o),e(Up,A1o),e(x,y1o),e(x,Jp),e(Jp,_le),e(_le,L1o),e(Jp,x1o),e(Jp,CN),e(CN,$1o),e(Jp,k1o),e(x,S1o),e(x,Yp),e(Yp,ule),e(ule,R1o),e(Yp,P1o),e(Yp,wN),e(wN,B1o),e(Yp,I1o),e(x,N1o),e(x,Kp),e(Kp,ble),e(ble,q1o),e(Kp,j1o),e(Kp,AN),e(AN,D1o),e(Kp,G1o),e(x,O1o),e(x,Zp),e(Zp,vle),e(vle,V1o),e(Zp,X1o),e(Zp,yN),e(yN,z1o),e(Zp,W1o),e(x,Q1o),e(x,e_),e(e_,Fle),e(Fle,H1o),e(e_,U1o),e(e_,LN),e(LN,J1o),e(e_,Y1o),e(x,K1o),e(x,o_),e(o_,Tle),e(Tle,Z1o),e(o_,ebo),e(o_,xN),e(xN,obo),e(o_,rbo),e(x,tbo),e(x,r_),e(r_,Mle),e(Mle,abo),e(r_,nbo),e(r_,$N),e($N,sbo),e(r_,lbo),e(x,ibo),e(x,t_),e(t_,Ele),e(Ele,dbo),e(t_,cbo),e(t_,kN),e(kN,fbo),e(t_,mbo),e(x,gbo),e(x,a_),e(a_,Cle),e(Cle,hbo),e(a_,pbo),e(a_,SN),e(SN,_bo),e(a_,ubo),e(x,bbo),e(x,n_),e(n_,wle),e(wle,vbo),e(n_,Fbo),e(n_,RN),e(RN,Tbo),e(n_,Mbo),e(x,Ebo),e(x,s_),e(s_,Ale),e(Ale,Cbo),e(s_,wbo),e(s_,PN),e(PN,Abo),e(s_,ybo),e(x,Lbo),e(x,l_),e(l_,yle),e(yle,xbo),e(l_,$bo),e(l_,BN),e(BN,kbo),e(l_,Sbo),e(x,Rbo),e(x,i_),e(i_,Lle),e(Lle,Pbo),e(i_,Bbo),e(i_,IN),e(IN,Ibo),e(i_,Nbo),e(x,qbo),e(x,d_),e(d_,xle),e(xle,jbo),e(d_,Dbo),e(d_,NN),e(NN,Gbo),e(d_,Obo),e(x,Vbo),e(x,c_),e(c_,$le),e($le,Xbo),e(c_,zbo),e(c_,qN),e(qN,Wbo),e(c_,Qbo),e(x,Hbo),e(x,f_),e(f_,kle),e(kle,Ubo),e(f_,Jbo),e(f_,jN),e(jN,Ybo),e(f_,Kbo),e(x,Zbo),e(x,m_),e(m_,Sle),e(Sle,evo),e(m_,ovo),e(m_,DN),e(DN,rvo),e(m_,tvo),e(x,avo),e(x,g_),e(g_,Rle),e(Rle,nvo),e(g_,svo),e(g_,GN),e(GN,lvo),e(g_,ivo),e(x,dvo),e(x,h_),e(h_,Ple),e(Ple,cvo),e(h_,fvo),e(h_,ON),e(ON,mvo),e(h_,gvo),e(x,hvo),e(x,p_),e(p_,Ble),e(Ble,pvo),e(p_,_vo),e(p_,VN),e(VN,uvo),e(p_,bvo),e(x,vvo),e(x,__),e(__,Ile),e(Ile,Fvo),e(__,Tvo),e(__,XN),e(XN,Mvo),e(__,Evo),e(x,Cvo),e(x,u_),e(u_,Nle),e(Nle,wvo),e(u_,Avo),e(u_,zN),e(zN,yvo),e(u_,Lvo),e(x,xvo),e(x,b_),e(b_,qle),e(qle,$vo),e(b_,kvo),e(b_,WN),e(WN,Svo),e(b_,Rvo),e(x,Pvo),e(x,v_),e(v_,jle),e(jle,Bvo),e(v_,Ivo),e(v_,QN),e(QN,Nvo),e(v_,qvo),e(x,jvo),e(x,F_),e(F_,Dle),e(Dle,Dvo),e(F_,Gvo),e(F_,HN),e(HN,Ovo),e(F_,Vvo),e(x,Xvo),e(x,T_),e(T_,Gle),e(Gle,zvo),e(T_,Wvo),e(T_,UN),e(UN,Qvo),e(T_,Hvo),e(x,Uvo),e(x,M_),e(M_,Ole),e(Ole,Jvo),e(M_,Yvo),e(M_,JN),e(JN,Kvo),e(M_,Zvo),e(x,e3o),e(x,E_),e(E_,Vle),e(Vle,o3o),e(E_,r3o),e(E_,YN),e(YN,t3o),e(E_,a3o),e(x,n3o),e(x,C_),e(C_,Xle),e(Xle,s3o),e(C_,l3o),e(C_,KN),e(KN,i3o),e(C_,d3o),e(x,c3o),e(x,w_),e(w_,zle),e(zle,f3o),e(w_,m3o),e(w_,ZN),e(ZN,g3o),e(w_,h3o),e(x,p3o),e(x,A_),e(A_,Wle),e(Wle,_3o),e(A_,u3o),e(A_,eq),e(eq,b3o),e(A_,v3o),e(x,F3o),e(x,y_),e(y_,Qle),e(Qle,T3o),e(y_,M3o),e(y_,oq),e(oq,E3o),e(y_,C3o),e(x,w3o),e(x,L_),e(L_,Hle),e(Hle,A3o),e(L_,y3o),e(L_,rq),e(rq,L3o),e(L_,x3o),e(x,$3o),e(x,x_),e(x_,Ule),e(Ule,k3o),e(x_,S3o),e(x_,tq),e(tq,R3o),e(x_,P3o),e(x,B3o),e(x,$_),e($_,Jle),e(Jle,I3o),e($_,N3o),e($_,aq),e(aq,q3o),e($_,j3o),e(x,D3o),e(x,k_),e(k_,Yle),e(Yle,G3o),e(k_,O3o),e(k_,nq),e(nq,V3o),e(k_,X3o),e(x,z3o),e(x,S_),e(S_,Kle),e(Kle,W3o),e(S_,Q3o),e(S_,sq),e(sq,H3o),e(S_,U3o),e(x,J3o),e(x,R_),e(R_,Zle),e(Zle,Y3o),e(R_,K3o),e(R_,lq),e(lq,Z3o),e(R_,e0o),e(x,o0o),e(x,P_),e(P_,eie),e(eie,r0o),e(P_,t0o),e(P_,iq),e(iq,a0o),e(P_,n0o),e(x,s0o),e(x,B_),e(B_,oie),e(oie,l0o),e(B_,i0o),e(B_,dq),e(dq,d0o),e(B_,c0o),e(x,f0o),e(x,I_),e(I_,rie),e(rie,m0o),e(I_,g0o),e(I_,cq),e(cq,h0o),e(I_,p0o),e(x,_0o),e(x,N_),e(N_,tie),e(tie,u0o),e(N_,b0o),e(N_,fq),e(fq,v0o),e(N_,F0o),e(x,T0o),e(x,q_),e(q_,aie),e(aie,M0o),e(q_,E0o),e(q_,mq),e(mq,C0o),e(q_,w0o),e(x,A0o),e(x,j_),e(j_,nie),e(nie,y0o),e(j_,L0o),e(j_,gq),e(gq,x0o),e(j_,$0o),e(x,k0o),e(x,D_),e(D_,sie),e(sie,S0o),e(D_,R0o),e(D_,hq),e(hq,P0o),e(D_,B0o),e(x,I0o),e(x,G_),e(G_,lie),e(lie,N0o),e(G_,q0o),e(G_,pq),e(pq,j0o),e(G_,D0o),e(x,G0o),e(x,O_),e(O_,iie),e(iie,O0o),e(O_,V0o),e(O_,_q),e(_q,X0o),e(O_,z0o),e(x,W0o),e(x,V_),e(V_,die),e(die,Q0o),e(V_,H0o),e(V_,uq),e(uq,U0o),e(V_,J0o),e(x,Y0o),e(x,X_),e(X_,cie),e(cie,K0o),e(X_,Z0o),e(X_,bq),e(bq,eFo),e(X_,oFo),e(x,rFo),e(x,z_),e(z_,fie),e(fie,tFo),e(z_,aFo),e(z_,vq),e(vq,nFo),e(z_,sFo),e(x,lFo),e(x,W_),e(W_,mie),e(mie,iFo),e(W_,dFo),e(W_,Fq),e(Fq,cFo),e(W_,fFo),e(x,mFo),e(x,Q_),e(Q_,gie),e(gie,gFo),e(Q_,hFo),e(Q_,Tq),e(Tq,pFo),e(Q_,_Fo),e(x,uFo),e(x,H_),e(H_,hie),e(hie,bFo),e(H_,vFo),e(H_,Mq),e(Mq,FFo),e(H_,TFo),e(x,MFo),e(x,U_),e(U_,pie),e(pie,EFo),e(U_,CFo),e(U_,Eq),e(Eq,wFo),e(U_,AFo),e(x,yFo),e(x,J_),e(J_,_ie),e(_ie,LFo),e(J_,xFo),e(J_,Cq),e(Cq,$Fo),e(J_,kFo),e(x,SFo),e(x,Y_),e(Y_,uie),e(uie,RFo),e(Y_,PFo),e(Y_,wq),e(wq,BFo),e(Y_,IFo),e(x,NFo),e(x,K_),e(K_,bie),e(bie,qFo),e(K_,jFo),e(K_,Aq),e(Aq,DFo),e(K_,GFo),e(x,OFo),e(x,Z_),e(Z_,vie),e(vie,VFo),e(Z_,XFo),e(Z_,yq),e(yq,zFo),e(Z_,WFo),e(x,QFo),e(x,eu),e(eu,Fie),e(Fie,HFo),e(eu,UFo),e(eu,Lq),e(Lq,JFo),e(eu,YFo),e(x,KFo),e(x,ou),e(ou,Tie),e(Tie,ZFo),e(ou,eTo),e(ou,xq),e(xq,oTo),e(ou,rTo),e(x,tTo),e(x,ru),e(ru,Mie),e(Mie,aTo),e(ru,nTo),e(ru,$q),e($q,sTo),e(ru,lTo),e(Je,iTo),e(Je,tu),e(tu,dTo),e(tu,Eie),e(Eie,cTo),e(tu,fTo),e(tu,Cie),e(Cie,mTo),e(Je,gTo),M(au,Je,null),b(f,Tqe,u),b(f,Li,u),e(Li,nu),e(nu,wie),M(sy,wie,null),e(Li,hTo),e(Li,Aie),e(Aie,pTo),b(f,Mqe,u),b(f,xo,u),M(ly,xo,null),e(xo,_To),e(xo,xi),e(xi,uTo),e(xi,kq),e(kq,bTo),e(xi,vTo),e(xi,Sq),e(Sq,FTo),e(xi,TTo),e(xo,MTo),e(xo,iy),e(iy,ETo),e(iy,yie),e(yie,CTo),e(iy,wTo),e(xo,ATo),e(xo,at),M(dy,at,null),e(at,yTo),e(at,Lie),e(Lie,LTo),e(at,xTo),e(at,$i),e($i,$To),e($i,xie),e(xie,kTo),e($i,STo),e($i,Rq),e(Rq,RTo),e($i,PTo),e(at,BTo),M(su,at,null),e(xo,ITo),e(xo,Ye),M(cy,Ye,null),e(Ye,NTo),e(Ye,$ie),e($ie,qTo),e(Ye,jTo),e(Ye,xa),e(xa,DTo),e(xa,kie),e(kie,GTo),e(xa,OTo),e(xa,Sie),e(Sie,VTo),e(xa,XTo),e(xa,Rie),e(Rie,zTo),e(xa,WTo),e(Ye,QTo),e(Ye,G),e(G,lu),e(lu,Pie),e(Pie,HTo),e(lu,UTo),e(lu,Pq),e(Pq,JTo),e(lu,YTo),e(G,KTo),e(G,iu),e(iu,Bie),e(Bie,ZTo),e(iu,e7o),e(iu,Bq),e(Bq,o7o),e(iu,r7o),e(G,t7o),e(G,du),e(du,Iie),e(Iie,a7o),e(du,n7o),e(du,Iq),e(Iq,s7o),e(du,l7o),e(G,i7o),e(G,cu),e(cu,Nie),e(Nie,d7o),e(cu,c7o),e(cu,Nq),e(Nq,f7o),e(cu,m7o),e(G,g7o),e(G,fu),e(fu,qie),e(qie,h7o),e(fu,p7o),e(fu,qq),e(qq,_7o),e(fu,u7o),e(G,b7o),e(G,mu),e(mu,jie),e(jie,v7o),e(mu,F7o),e(mu,jq),e(jq,T7o),e(mu,M7o),e(G,E7o),e(G,gu),e(gu,Die),e(Die,C7o),e(gu,w7o),e(gu,Dq),e(Dq,A7o),e(gu,y7o),e(G,L7o),e(G,hu),e(hu,Gie),e(Gie,x7o),e(hu,$7o),e(hu,Gq),e(Gq,k7o),e(hu,S7o),e(G,R7o),e(G,pu),e(pu,Oie),e(Oie,P7o),e(pu,B7o),e(pu,Oq),e(Oq,I7o),e(pu,N7o),e(G,q7o),e(G,_u),e(_u,Vie),e(Vie,j7o),e(_u,D7o),e(_u,Vq),e(Vq,G7o),e(_u,O7o),e(G,V7o),e(G,uu),e(uu,Xie),e(Xie,X7o),e(uu,z7o),e(uu,Xq),e(Xq,W7o),e(uu,Q7o),e(G,H7o),e(G,bu),e(bu,zie),e(zie,U7o),e(bu,J7o),e(bu,zq),e(zq,Y7o),e(bu,K7o),e(G,Z7o),e(G,vu),e(vu,Wie),e(Wie,eMo),e(vu,oMo),e(vu,Wq),e(Wq,rMo),e(vu,tMo),e(G,aMo),e(G,Fu),e(Fu,Qie),e(Qie,nMo),e(Fu,sMo),e(Fu,Qq),e(Qq,lMo),e(Fu,iMo),e(G,dMo),e(G,Tu),e(Tu,Hie),e(Hie,cMo),e(Tu,fMo),e(Tu,Hq),e(Hq,mMo),e(Tu,gMo),e(G,hMo),e(G,Mu),e(Mu,Uie),e(Uie,pMo),e(Mu,_Mo),e(Mu,Uq),e(Uq,uMo),e(Mu,bMo),e(G,vMo),e(G,Eu),e(Eu,Jie),e(Jie,FMo),e(Eu,TMo),e(Eu,Jq),e(Jq,MMo),e(Eu,EMo),e(G,CMo),e(G,Cu),e(Cu,Yie),e(Yie,wMo),e(Cu,AMo),e(Cu,Yq),e(Yq,yMo),e(Cu,LMo),e(G,xMo),e(G,wu),e(wu,Kie),e(Kie,$Mo),e(wu,kMo),e(wu,Kq),e(Kq,SMo),e(wu,RMo),e(G,PMo),e(G,Au),e(Au,Zie),e(Zie,BMo),e(Au,IMo),e(Au,Zq),e(Zq,NMo),e(Au,qMo),e(G,jMo),e(G,yu),e(yu,ede),e(ede,DMo),e(yu,GMo),e(yu,ej),e(ej,OMo),e(yu,VMo),e(G,XMo),e(G,Lu),e(Lu,ode),e(ode,zMo),e(Lu,WMo),e(Lu,oj),e(oj,QMo),e(Lu,HMo),e(G,UMo),e(G,xu),e(xu,rde),e(rde,JMo),e(xu,YMo),e(xu,rj),e(rj,KMo),e(xu,ZMo),e(G,e4o),e(G,$u),e($u,tde),e(tde,o4o),e($u,r4o),e($u,tj),e(tj,t4o),e($u,a4o),e(G,n4o),e(G,ku),e(ku,ade),e(ade,s4o),e(ku,l4o),e(ku,aj),e(aj,i4o),e(ku,d4o),e(G,c4o),e(G,Su),e(Su,nde),e(nde,f4o),e(Su,m4o),e(Su,nj),e(nj,g4o),e(Su,h4o),e(G,p4o),e(G,Ru),e(Ru,sde),e(sde,_4o),e(Ru,u4o),e(Ru,sj),e(sj,b4o),e(Ru,v4o),e(G,F4o),e(G,Pu),e(Pu,lde),e(lde,T4o),e(Pu,M4o),e(Pu,lj),e(lj,E4o),e(Pu,C4o),e(G,w4o),e(G,Bu),e(Bu,ide),e(ide,A4o),e(Bu,y4o),e(Bu,ij),e(ij,L4o),e(Bu,x4o),e(G,$4o),e(G,Iu),e(Iu,dde),e(dde,k4o),e(Iu,S4o),e(Iu,dj),e(dj,R4o),e(Iu,P4o),e(G,B4o),e(G,Nu),e(Nu,cde),e(cde,I4o),e(Nu,N4o),e(Nu,cj),e(cj,q4o),e(Nu,j4o),e(G,D4o),e(G,qu),e(qu,fde),e(fde,G4o),e(qu,O4o),e(qu,fj),e(fj,V4o),e(qu,X4o),e(G,z4o),e(G,ju),e(ju,mde),e(mde,W4o),e(ju,Q4o),e(ju,mj),e(mj,H4o),e(ju,U4o),e(G,J4o),e(G,Du),e(Du,gde),e(gde,Y4o),e(Du,K4o),e(Du,gj),e(gj,Z4o),e(Du,eEo),e(G,oEo),e(G,Gu),e(Gu,hde),e(hde,rEo),e(Gu,tEo),e(Gu,hj),e(hj,aEo),e(Gu,nEo),e(G,sEo),e(G,Ou),e(Ou,pde),e(pde,lEo),e(Ou,iEo),e(Ou,pj),e(pj,dEo),e(Ou,cEo),e(G,fEo),e(G,Vu),e(Vu,_de),e(_de,mEo),e(Vu,gEo),e(Vu,_j),e(_j,hEo),e(Vu,pEo),e(G,_Eo),e(G,Xu),e(Xu,ude),e(ude,uEo),e(Xu,bEo),e(Xu,uj),e(uj,vEo),e(Xu,FEo),e(G,TEo),e(G,zu),e(zu,bde),e(bde,MEo),e(zu,EEo),e(zu,bj),e(bj,CEo),e(zu,wEo),e(G,AEo),e(G,Wu),e(Wu,vde),e(vde,yEo),e(Wu,LEo),e(Wu,vj),e(vj,xEo),e(Wu,$Eo),e(G,kEo),e(G,Qu),e(Qu,Fde),e(Fde,SEo),e(Qu,REo),e(Qu,Fj),e(Fj,PEo),e(Qu,BEo),e(G,IEo),e(G,Hu),e(Hu,Tde),e(Tde,NEo),e(Hu,qEo),e(Hu,Tj),e(Tj,jEo),e(Hu,DEo),e(Ye,GEo),e(Ye,Uu),e(Uu,OEo),e(Uu,Mde),e(Mde,VEo),e(Uu,XEo),e(Uu,Ede),e(Ede,zEo),e(Ye,WEo),M(Ju,Ye,null),b(f,Eqe,u),b(f,ki,u),e(ki,Yu),e(Yu,Cde),M(fy,Cde,null),e(ki,QEo),e(ki,wde),e(wde,HEo),b(f,Cqe,u),b(f,$o,u),M(my,$o,null),e($o,UEo),e($o,Si),e(Si,JEo),e(Si,Mj),e(Mj,YEo),e(Si,KEo),e(Si,Ej),e(Ej,ZEo),e(Si,eCo),e($o,oCo),e($o,gy),e(gy,rCo),e(gy,Ade),e(Ade,tCo),e(gy,aCo),e($o,nCo),e($o,nt),M(hy,nt,null),e(nt,sCo),e(nt,yde),e(yde,lCo),e(nt,iCo),e(nt,Ri),e(Ri,dCo),e(Ri,Lde),e(Lde,cCo),e(Ri,fCo),e(Ri,Cj),e(Cj,mCo),e(Ri,gCo),e(nt,hCo),M(Ku,nt,null),e($o,pCo),e($o,Ke),M(py,Ke,null),e(Ke,_Co),e(Ke,xde),e(xde,uCo),e(Ke,bCo),e(Ke,$a),e($a,vCo),e($a,$de),e($de,FCo),e($a,TCo),e($a,kde),e(kde,MCo),e($a,ECo),e($a,Sde),e(Sde,CCo),e($a,wCo),e(Ke,ACo),e(Ke,z),e(z,Zu),e(Zu,Rde),e(Rde,yCo),e(Zu,LCo),e(Zu,wj),e(wj,xCo),e(Zu,$Co),e(z,kCo),e(z,e2),e(e2,Pde),e(Pde,SCo),e(e2,RCo),e(e2,Aj),e(Aj,PCo),e(e2,BCo),e(z,ICo),e(z,o2),e(o2,Bde),e(Bde,NCo),e(o2,qCo),e(o2,yj),e(yj,jCo),e(o2,DCo),e(z,GCo),e(z,r2),e(r2,Ide),e(Ide,OCo),e(r2,VCo),e(r2,Lj),e(Lj,XCo),e(r2,zCo),e(z,WCo),e(z,t2),e(t2,Nde),e(Nde,QCo),e(t2,HCo),e(t2,xj),e(xj,UCo),e(t2,JCo),e(z,YCo),e(z,a2),e(a2,qde),e(qde,KCo),e(a2,ZCo),e(a2,$j),e($j,e5o),e(a2,o5o),e(z,r5o),e(z,n2),e(n2,jde),e(jde,t5o),e(n2,a5o),e(n2,kj),e(kj,n5o),e(n2,s5o),e(z,l5o),e(z,s2),e(s2,Dde),e(Dde,i5o),e(s2,d5o),e(s2,Sj),e(Sj,c5o),e(s2,f5o),e(z,m5o),e(z,l2),e(l2,Gde),e(Gde,g5o),e(l2,h5o),e(l2,Rj),e(Rj,p5o),e(l2,_5o),e(z,u5o),e(z,i2),e(i2,Ode),e(Ode,b5o),e(i2,v5o),e(i2,Pj),e(Pj,F5o),e(i2,T5o),e(z,M5o),e(z,d2),e(d2,Vde),e(Vde,E5o),e(d2,C5o),e(d2,Bj),e(Bj,w5o),e(d2,A5o),e(z,y5o),e(z,c2),e(c2,Xde),e(Xde,L5o),e(c2,x5o),e(c2,Ij),e(Ij,$5o),e(c2,k5o),e(z,S5o),e(z,f2),e(f2,zde),e(zde,R5o),e(f2,P5o),e(f2,Nj),e(Nj,B5o),e(f2,I5o),e(z,N5o),e(z,m2),e(m2,Wde),e(Wde,q5o),e(m2,j5o),e(m2,qj),e(qj,D5o),e(m2,G5o),e(z,O5o),e(z,g2),e(g2,Qde),e(Qde,V5o),e(g2,X5o),e(g2,jj),e(jj,z5o),e(g2,W5o),e(z,Q5o),e(z,h2),e(h2,Hde),e(Hde,H5o),e(h2,U5o),e(h2,Dj),e(Dj,J5o),e(h2,Y5o),e(z,K5o),e(z,p2),e(p2,Ude),e(Ude,Z5o),e(p2,ewo),e(p2,Gj),e(Gj,owo),e(p2,rwo),e(z,two),e(z,_2),e(_2,Jde),e(Jde,awo),e(_2,nwo),e(_2,Oj),e(Oj,swo),e(_2,lwo),e(z,iwo),e(z,u2),e(u2,Yde),e(Yde,dwo),e(u2,cwo),e(u2,Vj),e(Vj,fwo),e(u2,mwo),e(z,gwo),e(z,b2),e(b2,Kde),e(Kde,hwo),e(b2,pwo),e(b2,Xj),e(Xj,_wo),e(b2,uwo),e(z,bwo),e(z,v2),e(v2,Zde),e(Zde,vwo),e(v2,Fwo),e(v2,zj),e(zj,Two),e(v2,Mwo),e(z,Ewo),e(z,F2),e(F2,ece),e(ece,Cwo),e(F2,wwo),e(F2,Wj),e(Wj,Awo),e(F2,ywo),e(z,Lwo),e(z,T2),e(T2,oce),e(oce,xwo),e(T2,$wo),e(T2,Qj),e(Qj,kwo),e(T2,Swo),e(z,Rwo),e(z,M2),e(M2,rce),e(rce,Pwo),e(M2,Bwo),e(M2,Hj),e(Hj,Iwo),e(M2,Nwo),e(z,qwo),e(z,E2),e(E2,tce),e(tce,jwo),e(E2,Dwo),e(E2,Uj),e(Uj,Gwo),e(E2,Owo),e(z,Vwo),e(z,C2),e(C2,ace),e(ace,Xwo),e(C2,zwo),e(C2,Jj),e(Jj,Wwo),e(C2,Qwo),e(z,Hwo),e(z,w2),e(w2,nce),e(nce,Uwo),e(w2,Jwo),e(w2,Yj),e(Yj,Ywo),e(w2,Kwo),e(z,Zwo),e(z,A2),e(A2,sce),e(sce,e6o),e(A2,o6o),e(A2,Kj),e(Kj,r6o),e(A2,t6o),e(z,a6o),e(z,y2),e(y2,lce),e(lce,n6o),e(y2,s6o),e(y2,Zj),e(Zj,l6o),e(y2,i6o),e(z,d6o),e(z,L2),e(L2,ice),e(ice,c6o),e(L2,f6o),e(L2,eD),e(eD,m6o),e(L2,g6o),e(z,h6o),e(z,x2),e(x2,dce),e(dce,p6o),e(x2,_6o),e(x2,oD),e(oD,u6o),e(x2,b6o),e(z,v6o),e(z,$2),e($2,cce),e(cce,F6o),e($2,T6o),e($2,rD),e(rD,M6o),e($2,E6o),e(z,C6o),e(z,k2),e(k2,fce),e(fce,w6o),e(k2,A6o),e(k2,tD),e(tD,y6o),e(k2,L6o),e(z,x6o),e(z,S2),e(S2,mce),e(mce,$6o),e(S2,k6o),e(S2,aD),e(aD,S6o),e(S2,R6o),e(z,P6o),e(z,R2),e(R2,gce),e(gce,B6o),e(R2,I6o),e(R2,nD),e(nD,N6o),e(R2,q6o),e(z,j6o),e(z,P2),e(P2,hce),e(hce,D6o),e(P2,G6o),e(P2,sD),e(sD,O6o),e(P2,V6o),e(z,X6o),e(z,B2),e(B2,pce),e(pce,z6o),e(B2,W6o),e(B2,lD),e(lD,Q6o),e(B2,H6o),e(Ke,U6o),e(Ke,I2),e(I2,J6o),e(I2,_ce),e(_ce,Y6o),e(I2,K6o),e(I2,uce),e(uce,Z6o),e(Ke,eAo),M(N2,Ke,null),b(f,wqe,u),b(f,Pi,u),e(Pi,q2),e(q2,bce),M(_y,bce,null),e(Pi,oAo),e(Pi,vce),e(vce,rAo),b(f,Aqe,u),b(f,ko,u),M(uy,ko,null),e(ko,tAo),e(ko,Bi),e(Bi,aAo),e(Bi,iD),e(iD,nAo),e(Bi,sAo),e(Bi,dD),e(dD,lAo),e(Bi,iAo),e(ko,dAo),e(ko,by),e(by,cAo),e(by,Fce),e(Fce,fAo),e(by,mAo),e(ko,gAo),e(ko,st),M(vy,st,null),e(st,hAo),e(st,Tce),e(Tce,pAo),e(st,_Ao),e(st,Ii),e(Ii,uAo),e(Ii,Mce),e(Mce,bAo),e(Ii,vAo),e(Ii,cD),e(cD,FAo),e(Ii,TAo),e(st,MAo),M(j2,st,null),e(ko,EAo),e(ko,Ze),M(Fy,Ze,null),e(Ze,CAo),e(Ze,Ece),e(Ece,wAo),e(Ze,AAo),e(Ze,ka),e(ka,yAo),e(ka,Cce),e(Cce,LAo),e(ka,xAo),e(ka,wce),e(wce,$Ao),e(ka,kAo),e(ka,Ace),e(Ace,SAo),e(ka,RAo),e(Ze,PAo),e(Ze,Q),e(Q,D2),e(D2,yce),e(yce,BAo),e(D2,IAo),e(D2,fD),e(fD,NAo),e(D2,qAo),e(Q,jAo),e(Q,G2),e(G2,Lce),e(Lce,DAo),e(G2,GAo),e(G2,mD),e(mD,OAo),e(G2,VAo),e(Q,XAo),e(Q,O2),e(O2,xce),e(xce,zAo),e(O2,WAo),e(O2,gD),e(gD,QAo),e(O2,HAo),e(Q,UAo),e(Q,V2),e(V2,$ce),e($ce,JAo),e(V2,YAo),e(V2,hD),e(hD,KAo),e(V2,ZAo),e(Q,eyo),e(Q,X2),e(X2,kce),e(kce,oyo),e(X2,ryo),e(X2,pD),e(pD,tyo),e(X2,ayo),e(Q,nyo),e(Q,z2),e(z2,Sce),e(Sce,syo),e(z2,lyo),e(z2,_D),e(_D,iyo),e(z2,dyo),e(Q,cyo),e(Q,W2),e(W2,Rce),e(Rce,fyo),e(W2,myo),e(W2,uD),e(uD,gyo),e(W2,hyo),e(Q,pyo),e(Q,Q2),e(Q2,Pce),e(Pce,_yo),e(Q2,uyo),e(Q2,bD),e(bD,byo),e(Q2,vyo),e(Q,Fyo),e(Q,H2),e(H2,Bce),e(Bce,Tyo),e(H2,Myo),e(H2,vD),e(vD,Eyo),e(H2,Cyo),e(Q,wyo),e(Q,U2),e(U2,Ice),e(Ice,Ayo),e(U2,yyo),e(U2,FD),e(FD,Lyo),e(U2,xyo),e(Q,$yo),e(Q,J2),e(J2,Nce),e(Nce,kyo),e(J2,Syo),e(J2,TD),e(TD,Ryo),e(J2,Pyo),e(Q,Byo),e(Q,Y2),e(Y2,qce),e(qce,Iyo),e(Y2,Nyo),e(Y2,MD),e(MD,qyo),e(Y2,jyo),e(Q,Dyo),e(Q,K2),e(K2,jce),e(jce,Gyo),e(K2,Oyo),e(K2,ED),e(ED,Vyo),e(K2,Xyo),e(Q,zyo),e(Q,Z2),e(Z2,Dce),e(Dce,Wyo),e(Z2,Qyo),e(Z2,CD),e(CD,Hyo),e(Z2,Uyo),e(Q,Jyo),e(Q,e1),e(e1,Gce),e(Gce,Yyo),e(e1,Kyo),e(e1,wD),e(wD,Zyo),e(e1,eLo),e(Q,oLo),e(Q,o1),e(o1,Oce),e(Oce,rLo),e(o1,tLo),e(o1,AD),e(AD,aLo),e(o1,nLo),e(Q,sLo),e(Q,r1),e(r1,Vce),e(Vce,lLo),e(r1,iLo),e(r1,yD),e(yD,dLo),e(r1,cLo),e(Q,fLo),e(Q,t1),e(t1,Xce),e(Xce,mLo),e(t1,gLo),e(t1,LD),e(LD,hLo),e(t1,pLo),e(Q,_Lo),e(Q,a1),e(a1,zce),e(zce,uLo),e(a1,bLo),e(a1,xD),e(xD,vLo),e(a1,FLo),e(Q,TLo),e(Q,n1),e(n1,Wce),e(Wce,MLo),e(n1,ELo),e(n1,$D),e($D,CLo),e(n1,wLo),e(Q,ALo),e(Q,s1),e(s1,Qce),e(Qce,yLo),e(s1,LLo),e(s1,kD),e(kD,xLo),e(s1,$Lo),e(Q,kLo),e(Q,l1),e(l1,Hce),e(Hce,SLo),e(l1,RLo),e(l1,SD),e(SD,PLo),e(l1,BLo),e(Q,ILo),e(Q,i1),e(i1,Uce),e(Uce,NLo),e(i1,qLo),e(i1,RD),e(RD,jLo),e(i1,DLo),e(Q,GLo),e(Q,d1),e(d1,Jce),e(Jce,OLo),e(d1,VLo),e(d1,PD),e(PD,XLo),e(d1,zLo),e(Q,WLo),e(Q,c1),e(c1,Yce),e(Yce,QLo),e(c1,HLo),e(c1,BD),e(BD,ULo),e(c1,JLo),e(Q,YLo),e(Q,f1),e(f1,Kce),e(Kce,KLo),e(f1,ZLo),e(f1,ID),e(ID,e8o),e(f1,o8o),e(Q,r8o),e(Q,m1),e(m1,Zce),e(Zce,t8o),e(m1,a8o),e(m1,ND),e(ND,n8o),e(m1,s8o),e(Q,l8o),e(Q,g1),e(g1,efe),e(efe,i8o),e(g1,d8o),e(g1,qD),e(qD,c8o),e(g1,f8o),e(Q,m8o),e(Q,h1),e(h1,ofe),e(ofe,g8o),e(h1,h8o),e(h1,jD),e(jD,p8o),e(h1,_8o),e(Q,u8o),e(Q,p1),e(p1,rfe),e(rfe,b8o),e(p1,v8o),e(p1,DD),e(DD,F8o),e(p1,T8o),e(Q,M8o),e(Q,_1),e(_1,tfe),e(tfe,E8o),e(_1,C8o),e(_1,afe),e(afe,w8o),e(_1,A8o),e(Q,y8o),e(Q,u1),e(u1,nfe),e(nfe,L8o),e(u1,x8o),e(u1,GD),e(GD,$8o),e(u1,k8o),e(Q,S8o),e(Q,b1),e(b1,sfe),e(sfe,R8o),e(b1,P8o),e(b1,OD),e(OD,B8o),e(b1,I8o),e(Q,N8o),e(Q,v1),e(v1,lfe),e(lfe,q8o),e(v1,j8o),e(v1,VD),e(VD,D8o),e(v1,G8o),e(Q,O8o),e(Q,F1),e(F1,ife),e(ife,V8o),e(F1,X8o),e(F1,XD),e(XD,z8o),e(F1,W8o),e(Ze,Q8o),e(Ze,T1),e(T1,H8o),e(T1,dfe),e(dfe,U8o),e(T1,J8o),e(T1,cfe),e(cfe,Y8o),e(Ze,K8o),M(M1,Ze,null),b(f,yqe,u),b(f,Ni,u),e(Ni,E1),e(E1,ffe),M(Ty,ffe,null),e(Ni,Z8o),e(Ni,mfe),e(mfe,e9o),b(f,Lqe,u),b(f,So,u),M(My,So,null),e(So,o9o),e(So,qi),e(qi,r9o),e(qi,zD),e(zD,t9o),e(qi,a9o),e(qi,WD),e(WD,n9o),e(qi,s9o),e(So,l9o),e(So,Ey),e(Ey,i9o),e(Ey,gfe),e(gfe,d9o),e(Ey,c9o),e(So,f9o),e(So,lt),M(Cy,lt,null),e(lt,m9o),e(lt,hfe),e(hfe,g9o),e(lt,h9o),e(lt,ji),e(ji,p9o),e(ji,pfe),e(pfe,_9o),e(ji,u9o),e(ji,QD),e(QD,b9o),e(ji,v9o),e(lt,F9o),M(C1,lt,null),e(So,T9o),e(So,eo),M(wy,eo,null),e(eo,M9o),e(eo,_fe),e(_fe,E9o),e(eo,C9o),e(eo,Sa),e(Sa,w9o),e(Sa,ufe),e(ufe,A9o),e(Sa,y9o),e(Sa,bfe),e(bfe,L9o),e(Sa,x9o),e(Sa,vfe),e(vfe,$9o),e(Sa,k9o),e(eo,S9o),e(eo,_e),e(_e,w1),e(w1,Ffe),e(Ffe,R9o),e(w1,P9o),e(w1,HD),e(HD,B9o),e(w1,I9o),e(_e,N9o),e(_e,A1),e(A1,Tfe),e(Tfe,q9o),e(A1,j9o),e(A1,UD),e(UD,D9o),e(A1,G9o),e(_e,O9o),e(_e,y1),e(y1,Mfe),e(Mfe,V9o),e(y1,X9o),e(y1,JD),e(JD,z9o),e(y1,W9o),e(_e,Q9o),e(_e,L1),e(L1,Efe),e(Efe,H9o),e(L1,U9o),e(L1,YD),e(YD,J9o),e(L1,Y9o),e(_e,K9o),e(_e,x1),e(x1,Cfe),e(Cfe,Z9o),e(x1,exo),e(x1,KD),e(KD,oxo),e(x1,rxo),e(_e,txo),e(_e,$1),e($1,wfe),e(wfe,axo),e($1,nxo),e($1,ZD),e(ZD,sxo),e($1,lxo),e(_e,ixo),e(_e,k1),e(k1,Afe),e(Afe,dxo),e(k1,cxo),e(k1,eG),e(eG,fxo),e(k1,mxo),e(_e,gxo),e(_e,S1),e(S1,yfe),e(yfe,hxo),e(S1,pxo),e(S1,oG),e(oG,_xo),e(S1,uxo),e(_e,bxo),e(_e,R1),e(R1,Lfe),e(Lfe,vxo),e(R1,Fxo),e(R1,rG),e(rG,Txo),e(R1,Mxo),e(_e,Exo),e(_e,P1),e(P1,xfe),e(xfe,Cxo),e(P1,wxo),e(P1,tG),e(tG,Axo),e(P1,yxo),e(_e,Lxo),e(_e,B1),e(B1,$fe),e($fe,xxo),e(B1,$xo),e(B1,aG),e(aG,kxo),e(B1,Sxo),e(_e,Rxo),e(_e,I1),e(I1,kfe),e(kfe,Pxo),e(I1,Bxo),e(I1,nG),e(nG,Ixo),e(I1,Nxo),e(_e,qxo),e(_e,N1),e(N1,Sfe),e(Sfe,jxo),e(N1,Dxo),e(N1,sG),e(sG,Gxo),e(N1,Oxo),e(_e,Vxo),e(_e,q1),e(q1,Rfe),e(Rfe,Xxo),e(q1,zxo),e(q1,lG),e(lG,Wxo),e(q1,Qxo),e(_e,Hxo),e(_e,j1),e(j1,Pfe),e(Pfe,Uxo),e(j1,Jxo),e(j1,iG),e(iG,Yxo),e(j1,Kxo),e(_e,Zxo),e(_e,D1),e(D1,Bfe),e(Bfe,e$o),e(D1,o$o),e(D1,dG),e(dG,r$o),e(D1,t$o),e(eo,a$o),e(eo,G1),e(G1,n$o),e(G1,Ife),e(Ife,s$o),e(G1,l$o),e(G1,Nfe),e(Nfe,i$o),e(eo,d$o),M(O1,eo,null),b(f,xqe,u),b(f,Di,u),e(Di,V1),e(V1,qfe),M(Ay,qfe,null),e(Di,c$o),e(Di,jfe),e(jfe,f$o),b(f,$qe,u),b(f,Ro,u),M(yy,Ro,null),e(Ro,m$o),e(Ro,Gi),e(Gi,g$o),e(Gi,cG),e(cG,h$o),e(Gi,p$o),e(Gi,fG),e(fG,_$o),e(Gi,u$o),e(Ro,b$o),e(Ro,Ly),e(Ly,v$o),e(Ly,Dfe),e(Dfe,F$o),e(Ly,T$o),e(Ro,M$o),e(Ro,it),M(xy,it,null),e(it,E$o),e(it,Gfe),e(Gfe,C$o),e(it,w$o),e(it,Oi),e(Oi,A$o),e(Oi,Ofe),e(Ofe,y$o),e(Oi,L$o),e(Oi,mG),e(mG,x$o),e(Oi,$$o),e(it,k$o),M(X1,it,null),e(Ro,S$o),e(Ro,oo),M($y,oo,null),e(oo,R$o),e(oo,Vfe),e(Vfe,P$o),e(oo,B$o),e(oo,Ra),e(Ra,I$o),e(Ra,Xfe),e(Xfe,N$o),e(Ra,q$o),e(Ra,zfe),e(zfe,j$o),e(Ra,D$o),e(Ra,Wfe),e(Wfe,G$o),e(Ra,O$o),e(oo,V$o),e(oo,N),e(N,z1),e(z1,Qfe),e(Qfe,X$o),e(z1,z$o),e(z1,gG),e(gG,W$o),e(z1,Q$o),e(N,H$o),e(N,W1),e(W1,Hfe),e(Hfe,U$o),e(W1,J$o),e(W1,hG),e(hG,Y$o),e(W1,K$o),e(N,Z$o),e(N,Q1),e(Q1,Ufe),e(Ufe,eko),e(Q1,oko),e(Q1,pG),e(pG,rko),e(Q1,tko),e(N,ako),e(N,H1),e(H1,Jfe),e(Jfe,nko),e(H1,sko),e(H1,_G),e(_G,lko),e(H1,iko),e(N,dko),e(N,U1),e(U1,Yfe),e(Yfe,cko),e(U1,fko),e(U1,uG),e(uG,mko),e(U1,gko),e(N,hko),e(N,J1),e(J1,Kfe),e(Kfe,pko),e(J1,_ko),e(J1,bG),e(bG,uko),e(J1,bko),e(N,vko),e(N,Y1),e(Y1,Zfe),e(Zfe,Fko),e(Y1,Tko),e(Y1,vG),e(vG,Mko),e(Y1,Eko),e(N,Cko),e(N,K1),e(K1,eme),e(eme,wko),e(K1,Ako),e(K1,FG),e(FG,yko),e(K1,Lko),e(N,xko),e(N,Z1),e(Z1,ome),e(ome,$ko),e(Z1,kko),e(Z1,TG),e(TG,Sko),e(Z1,Rko),e(N,Pko),e(N,eb),e(eb,rme),e(rme,Bko),e(eb,Iko),e(eb,MG),e(MG,Nko),e(eb,qko),e(N,jko),e(N,ob),e(ob,tme),e(tme,Dko),e(ob,Gko),e(ob,EG),e(EG,Oko),e(ob,Vko),e(N,Xko),e(N,rb),e(rb,ame),e(ame,zko),e(rb,Wko),e(rb,CG),e(CG,Qko),e(rb,Hko),e(N,Uko),e(N,tb),e(tb,nme),e(nme,Jko),e(tb,Yko),e(tb,wG),e(wG,Kko),e(tb,Zko),e(N,eSo),e(N,ab),e(ab,sme),e(sme,oSo),e(ab,rSo),e(ab,AG),e(AG,tSo),e(ab,aSo),e(N,nSo),e(N,nb),e(nb,lme),e(lme,sSo),e(nb,lSo),e(nb,yG),e(yG,iSo),e(nb,dSo),e(N,cSo),e(N,sb),e(sb,ime),e(ime,fSo),e(sb,mSo),e(sb,LG),e(LG,gSo),e(sb,hSo),e(N,pSo),e(N,lb),e(lb,dme),e(dme,_So),e(lb,uSo),e(lb,xG),e(xG,bSo),e(lb,vSo),e(N,FSo),e(N,ib),e(ib,cme),e(cme,TSo),e(ib,MSo),e(ib,$G),e($G,ESo),e(ib,CSo),e(N,wSo),e(N,db),e(db,fme),e(fme,ASo),e(db,ySo),e(db,kG),e(kG,LSo),e(db,xSo),e(N,$So),e(N,cb),e(cb,mme),e(mme,kSo),e(cb,SSo),e(cb,SG),e(SG,RSo),e(cb,PSo),e(N,BSo),e(N,fb),e(fb,gme),e(gme,ISo),e(fb,NSo),e(fb,RG),e(RG,qSo),e(fb,jSo),e(N,DSo),e(N,mb),e(mb,hme),e(hme,GSo),e(mb,OSo),e(mb,PG),e(PG,VSo),e(mb,XSo),e(N,zSo),e(N,gb),e(gb,pme),e(pme,WSo),e(gb,QSo),e(gb,BG),e(BG,HSo),e(gb,USo),e(N,JSo),e(N,hb),e(hb,_me),e(_me,YSo),e(hb,KSo),e(hb,IG),e(IG,ZSo),e(hb,eRo),e(N,oRo),e(N,pb),e(pb,ume),e(ume,rRo),e(pb,tRo),e(pb,NG),e(NG,aRo),e(pb,nRo),e(N,sRo),e(N,_b),e(_b,bme),e(bme,lRo),e(_b,iRo),e(_b,qG),e(qG,dRo),e(_b,cRo),e(N,fRo),e(N,ub),e(ub,vme),e(vme,mRo),e(ub,gRo),e(ub,jG),e(jG,hRo),e(ub,pRo),e(N,_Ro),e(N,bb),e(bb,Fme),e(Fme,uRo),e(bb,bRo),e(bb,DG),e(DG,vRo),e(bb,FRo),e(N,TRo),e(N,vb),e(vb,Tme),e(Tme,MRo),e(vb,ERo),e(vb,GG),e(GG,CRo),e(vb,wRo),e(N,ARo),e(N,Fb),e(Fb,Mme),e(Mme,yRo),e(Fb,LRo),e(Fb,OG),e(OG,xRo),e(Fb,$Ro),e(N,kRo),e(N,Tb),e(Tb,Eme),e(Eme,SRo),e(Tb,RRo),e(Tb,VG),e(VG,PRo),e(Tb,BRo),e(N,IRo),e(N,Mb),e(Mb,Cme),e(Cme,NRo),e(Mb,qRo),e(Mb,XG),e(XG,jRo),e(Mb,DRo),e(N,GRo),e(N,Eb),e(Eb,wme),e(wme,ORo),e(Eb,VRo),e(Eb,zG),e(zG,XRo),e(Eb,zRo),e(N,WRo),e(N,Cb),e(Cb,Ame),e(Ame,QRo),e(Cb,HRo),e(Cb,WG),e(WG,URo),e(Cb,JRo),e(N,YRo),e(N,wb),e(wb,yme),e(yme,KRo),e(wb,ZRo),e(wb,QG),e(QG,ePo),e(wb,oPo),e(N,rPo),e(N,Ab),e(Ab,Lme),e(Lme,tPo),e(Ab,aPo),e(Ab,HG),e(HG,nPo),e(Ab,sPo),e(N,lPo),e(N,yb),e(yb,xme),e(xme,iPo),e(yb,dPo),e(yb,UG),e(UG,cPo),e(yb,fPo),e(N,mPo),e(N,Lb),e(Lb,$me),e($me,gPo),e(Lb,hPo),e(Lb,JG),e(JG,pPo),e(Lb,_Po),e(N,uPo),e(N,xb),e(xb,kme),e(kme,bPo),e(xb,vPo),e(xb,YG),e(YG,FPo),e(xb,TPo),e(N,MPo),e(N,$b),e($b,Sme),e(Sme,EPo),e($b,CPo),e($b,KG),e(KG,wPo),e($b,APo),e(N,yPo),e(N,kb),e(kb,Rme),e(Rme,LPo),e(kb,xPo),e(kb,ZG),e(ZG,$Po),e(kb,kPo),e(N,SPo),e(N,Sb),e(Sb,Pme),e(Pme,RPo),e(Sb,PPo),e(Sb,eO),e(eO,BPo),e(Sb,IPo),e(N,NPo),e(N,Rb),e(Rb,Bme),e(Bme,qPo),e(Rb,jPo),e(Rb,oO),e(oO,DPo),e(Rb,GPo),e(N,OPo),e(N,Pb),e(Pb,Ime),e(Ime,VPo),e(Pb,XPo),e(Pb,rO),e(rO,zPo),e(Pb,WPo),e(N,QPo),e(N,Bb),e(Bb,Nme),e(Nme,HPo),e(Bb,UPo),e(Bb,tO),e(tO,JPo),e(Bb,YPo),e(N,KPo),e(N,Ib),e(Ib,qme),e(qme,ZPo),e(Ib,eBo),e(Ib,aO),e(aO,oBo),e(Ib,rBo),e(N,tBo),e(N,Nb),e(Nb,jme),e(jme,aBo),e(Nb,nBo),e(Nb,nO),e(nO,sBo),e(Nb,lBo),e(oo,iBo),e(oo,qb),e(qb,dBo),e(qb,Dme),e(Dme,cBo),e(qb,fBo),e(qb,Gme),e(Gme,mBo),e(oo,gBo),M(jb,oo,null),b(f,kqe,u),b(f,Vi,u),e(Vi,Db),e(Db,Ome),M(ky,Ome,null),e(Vi,hBo),e(Vi,Vme),e(Vme,pBo),b(f,Sqe,u),b(f,Po,u),M(Sy,Po,null),e(Po,_Bo),e(Po,Xi),e(Xi,uBo),e(Xi,sO),e(sO,bBo),e(Xi,vBo),e(Xi,lO),e(lO,FBo),e(Xi,TBo),e(Po,MBo),e(Po,Ry),e(Ry,EBo),e(Ry,Xme),e(Xme,CBo),e(Ry,wBo),e(Po,ABo),e(Po,dt),M(Py,dt,null),e(dt,yBo),e(dt,zme),e(zme,LBo),e(dt,xBo),e(dt,zi),e(zi,$Bo),e(zi,Wme),e(Wme,kBo),e(zi,SBo),e(zi,iO),e(iO,RBo),e(zi,PBo),e(dt,BBo),M(Gb,dt,null),e(Po,IBo),e(Po,ro),M(By,ro,null),e(ro,NBo),e(ro,Qme),e(Qme,qBo),e(ro,jBo),e(ro,Pa),e(Pa,DBo),e(Pa,Hme),e(Hme,GBo),e(Pa,OBo),e(Pa,Ume),e(Ume,VBo),e(Pa,XBo),e(Pa,Jme),e(Jme,zBo),e(Pa,WBo),e(ro,QBo),e(ro,K),e(K,Ob),e(Ob,Yme),e(Yme,HBo),e(Ob,UBo),e(Ob,dO),e(dO,JBo),e(Ob,YBo),e(K,KBo),e(K,Vb),e(Vb,Kme),e(Kme,ZBo),e(Vb,eIo),e(Vb,cO),e(cO,oIo),e(Vb,rIo),e(K,tIo),e(K,Xb),e(Xb,Zme),e(Zme,aIo),e(Xb,nIo),e(Xb,fO),e(fO,sIo),e(Xb,lIo),e(K,iIo),e(K,zb),e(zb,ege),e(ege,dIo),e(zb,cIo),e(zb,mO),e(mO,fIo),e(zb,mIo),e(K,gIo),e(K,Wb),e(Wb,oge),e(oge,hIo),e(Wb,pIo),e(Wb,gO),e(gO,_Io),e(Wb,uIo),e(K,bIo),e(K,Qb),e(Qb,rge),e(rge,vIo),e(Qb,FIo),e(Qb,hO),e(hO,TIo),e(Qb,MIo),e(K,EIo),e(K,Hb),e(Hb,tge),e(tge,CIo),e(Hb,wIo),e(Hb,pO),e(pO,AIo),e(Hb,yIo),e(K,LIo),e(K,Ub),e(Ub,age),e(age,xIo),e(Ub,$Io),e(Ub,_O),e(_O,kIo),e(Ub,SIo),e(K,RIo),e(K,Jb),e(Jb,nge),e(nge,PIo),e(Jb,BIo),e(Jb,uO),e(uO,IIo),e(Jb,NIo),e(K,qIo),e(K,Yb),e(Yb,sge),e(sge,jIo),e(Yb,DIo),e(Yb,bO),e(bO,GIo),e(Yb,OIo),e(K,VIo),e(K,Kb),e(Kb,lge),e(lge,XIo),e(Kb,zIo),e(Kb,vO),e(vO,WIo),e(Kb,QIo),e(K,HIo),e(K,Zb),e(Zb,ige),e(ige,UIo),e(Zb,JIo),e(Zb,FO),e(FO,YIo),e(Zb,KIo),e(K,ZIo),e(K,ev),e(ev,dge),e(dge,eNo),e(ev,oNo),e(ev,TO),e(TO,rNo),e(ev,tNo),e(K,aNo),e(K,ov),e(ov,cge),e(cge,nNo),e(ov,sNo),e(ov,MO),e(MO,lNo),e(ov,iNo),e(K,dNo),e(K,rv),e(rv,fge),e(fge,cNo),e(rv,fNo),e(rv,EO),e(EO,mNo),e(rv,gNo),e(K,hNo),e(K,tv),e(tv,mge),e(mge,pNo),e(tv,_No),e(tv,CO),e(CO,uNo),e(tv,bNo),e(K,vNo),e(K,av),e(av,gge),e(gge,FNo),e(av,TNo),e(av,wO),e(wO,MNo),e(av,ENo),e(K,CNo),e(K,nv),e(nv,hge),e(hge,wNo),e(nv,ANo),e(nv,AO),e(AO,yNo),e(nv,LNo),e(K,xNo),e(K,sv),e(sv,pge),e(pge,$No),e(sv,kNo),e(sv,yO),e(yO,SNo),e(sv,RNo),e(K,PNo),e(K,lv),e(lv,_ge),e(_ge,BNo),e(lv,INo),e(lv,LO),e(LO,NNo),e(lv,qNo),e(K,jNo),e(K,iv),e(iv,uge),e(uge,DNo),e(iv,GNo),e(iv,xO),e(xO,ONo),e(iv,VNo),e(K,XNo),e(K,dv),e(dv,bge),e(bge,zNo),e(dv,WNo),e(dv,$O),e($O,QNo),e(dv,HNo),e(K,UNo),e(K,cv),e(cv,vge),e(vge,JNo),e(cv,YNo),e(cv,kO),e(kO,KNo),e(cv,ZNo),e(K,eqo),e(K,fv),e(fv,Fge),e(Fge,oqo),e(fv,rqo),e(fv,SO),e(SO,tqo),e(fv,aqo),e(K,nqo),e(K,mv),e(mv,Tge),e(Tge,sqo),e(mv,lqo),e(mv,RO),e(RO,iqo),e(mv,dqo),e(K,cqo),e(K,gv),e(gv,Mge),e(Mge,fqo),e(gv,mqo),e(gv,PO),e(PO,gqo),e(gv,hqo),e(K,pqo),e(K,hv),e(hv,Ege),e(Ege,_qo),e(hv,uqo),e(hv,BO),e(BO,bqo),e(hv,vqo),e(K,Fqo),e(K,pv),e(pv,Cge),e(Cge,Tqo),e(pv,Mqo),e(pv,IO),e(IO,Eqo),e(pv,Cqo),e(K,wqo),e(K,_v),e(_v,wge),e(wge,Aqo),e(_v,yqo),e(_v,NO),e(NO,Lqo),e(_v,xqo),e(ro,$qo),e(ro,uv),e(uv,kqo),e(uv,Age),e(Age,Sqo),e(uv,Rqo),e(uv,yge),e(yge,Pqo),e(ro,Bqo),M(bv,ro,null),b(f,Rqe,u),b(f,Wi,u),e(Wi,vv),e(vv,Lge),M(Iy,Lge,null),e(Wi,Iqo),e(Wi,xge),e(xge,Nqo),b(f,Pqe,u),b(f,Bo,u),M(Ny,Bo,null),e(Bo,qqo),e(Bo,Qi),e(Qi,jqo),e(Qi,qO),e(qO,Dqo),e(Qi,Gqo),e(Qi,jO),e(jO,Oqo),e(Qi,Vqo),e(Bo,Xqo),e(Bo,qy),e(qy,zqo),e(qy,$ge),e($ge,Wqo),e(qy,Qqo),e(Bo,Hqo),e(Bo,ct),M(jy,ct,null),e(ct,Uqo),e(ct,kge),e(kge,Jqo),e(ct,Yqo),e(ct,Hi),e(Hi,Kqo),e(Hi,Sge),e(Sge,Zqo),e(Hi,ejo),e(Hi,DO),e(DO,ojo),e(Hi,rjo),e(ct,tjo),M(Fv,ct,null),e(Bo,ajo),e(Bo,to),M(Dy,to,null),e(to,njo),e(to,Rge),e(Rge,sjo),e(to,ljo),e(to,Ba),e(Ba,ijo),e(Ba,Pge),e(Pge,djo),e(Ba,cjo),e(Ba,Bge),e(Bge,fjo),e(Ba,mjo),e(Ba,Ige),e(Ige,gjo),e(Ba,hjo),e(to,pjo),e(to,Yr),e(Yr,Tv),e(Tv,Nge),e(Nge,_jo),e(Tv,ujo),e(Tv,GO),e(GO,bjo),e(Tv,vjo),e(Yr,Fjo),e(Yr,Mv),e(Mv,qge),e(qge,Tjo),e(Mv,Mjo),e(Mv,OO),e(OO,Ejo),e(Mv,Cjo),e(Yr,wjo),e(Yr,Ev),e(Ev,jge),e(jge,Ajo),e(Ev,yjo),e(Ev,VO),e(VO,Ljo),e(Ev,xjo),e(Yr,$jo),e(Yr,Cv),e(Cv,Dge),e(Dge,kjo),e(Cv,Sjo),e(Cv,XO),e(XO,Rjo),e(Cv,Pjo),e(Yr,Bjo),e(Yr,wv),e(wv,Gge),e(Gge,Ijo),e(wv,Njo),e(wv,zO),e(zO,qjo),e(wv,jjo),e(to,Djo),e(to,Av),e(Av,Gjo),e(Av,Oge),e(Oge,Ojo),e(Av,Vjo),e(Av,Vge),e(Vge,Xjo),e(to,zjo),M(yv,to,null),b(f,Bqe,u),b(f,Ui,u),e(Ui,Lv),e(Lv,Xge),M(Gy,Xge,null),e(Ui,Wjo),e(Ui,zge),e(zge,Qjo),b(f,Iqe,u),b(f,Io,u),M(Oy,Io,null),e(Io,Hjo),e(Io,Ji),e(Ji,Ujo),e(Ji,WO),e(WO,Jjo),e(Ji,Yjo),e(Ji,QO),e(QO,Kjo),e(Ji,Zjo),e(Io,eDo),e(Io,Vy),e(Vy,oDo),e(Vy,Wge),e(Wge,rDo),e(Vy,tDo),e(Io,aDo),e(Io,ft),M(Xy,ft,null),e(ft,nDo),e(ft,Qge),e(Qge,sDo),e(ft,lDo),e(ft,Yi),e(Yi,iDo),e(Yi,Hge),e(Hge,dDo),e(Yi,cDo),e(Yi,HO),e(HO,fDo),e(Yi,mDo),e(ft,gDo),M(xv,ft,null),e(Io,hDo),e(Io,ao),M(zy,ao,null),e(ao,pDo),e(ao,Uge),e(Uge,_Do),e(ao,uDo),e(ao,Ia),e(Ia,bDo),e(Ia,Jge),e(Jge,vDo),e(Ia,FDo),e(Ia,Yge),e(Yge,TDo),e(Ia,MDo),e(Ia,Kge),e(Kge,EDo),e(Ia,CDo),e(ao,wDo),e(ao,H),e(H,$v),e($v,Zge),e(Zge,ADo),e($v,yDo),e($v,UO),e(UO,LDo),e($v,xDo),e(H,$Do),e(H,kv),e(kv,ehe),e(ehe,kDo),e(kv,SDo),e(kv,JO),e(JO,RDo),e(kv,PDo),e(H,BDo),e(H,Sv),e(Sv,ohe),e(ohe,IDo),e(Sv,NDo),e(Sv,YO),e(YO,qDo),e(Sv,jDo),e(H,DDo),e(H,Rv),e(Rv,rhe),e(rhe,GDo),e(Rv,ODo),e(Rv,KO),e(KO,VDo),e(Rv,XDo),e(H,zDo),e(H,Pv),e(Pv,the),e(the,WDo),e(Pv,QDo),e(Pv,ZO),e(ZO,HDo),e(Pv,UDo),e(H,JDo),e(H,Bv),e(Bv,ahe),e(ahe,YDo),e(Bv,KDo),e(Bv,eV),e(eV,ZDo),e(Bv,eGo),e(H,oGo),e(H,Iv),e(Iv,nhe),e(nhe,rGo),e(Iv,tGo),e(Iv,oV),e(oV,aGo),e(Iv,nGo),e(H,sGo),e(H,Nv),e(Nv,she),e(she,lGo),e(Nv,iGo),e(Nv,rV),e(rV,dGo),e(Nv,cGo),e(H,fGo),e(H,qv),e(qv,lhe),e(lhe,mGo),e(qv,gGo),e(qv,tV),e(tV,hGo),e(qv,pGo),e(H,_Go),e(H,jv),e(jv,ihe),e(ihe,uGo),e(jv,bGo),e(jv,aV),e(aV,vGo),e(jv,FGo),e(H,TGo),e(H,Dv),e(Dv,dhe),e(dhe,MGo),e(Dv,EGo),e(Dv,nV),e(nV,CGo),e(Dv,wGo),e(H,AGo),e(H,Gv),e(Gv,che),e(che,yGo),e(Gv,LGo),e(Gv,sV),e(sV,xGo),e(Gv,$Go),e(H,kGo),e(H,Ov),e(Ov,fhe),e(fhe,SGo),e(Ov,RGo),e(Ov,lV),e(lV,PGo),e(Ov,BGo),e(H,IGo),e(H,Vv),e(Vv,mhe),e(mhe,NGo),e(Vv,qGo),e(Vv,iV),e(iV,jGo),e(Vv,DGo),e(H,GGo),e(H,Xv),e(Xv,ghe),e(ghe,OGo),e(Xv,VGo),e(Xv,dV),e(dV,XGo),e(Xv,zGo),e(H,WGo),e(H,zv),e(zv,hhe),e(hhe,QGo),e(zv,HGo),e(zv,cV),e(cV,UGo),e(zv,JGo),e(H,YGo),e(H,Wv),e(Wv,phe),e(phe,KGo),e(Wv,ZGo),e(Wv,fV),e(fV,eOo),e(Wv,oOo),e(H,rOo),e(H,Qv),e(Qv,_he),e(_he,tOo),e(Qv,aOo),e(Qv,mV),e(mV,nOo),e(Qv,sOo),e(H,lOo),e(H,Hv),e(Hv,uhe),e(uhe,iOo),e(Hv,dOo),e(Hv,gV),e(gV,cOo),e(Hv,fOo),e(H,mOo),e(H,Uv),e(Uv,bhe),e(bhe,gOo),e(Uv,hOo),e(Uv,hV),e(hV,pOo),e(Uv,_Oo),e(H,uOo),e(H,Jv),e(Jv,vhe),e(vhe,bOo),e(Jv,vOo),e(Jv,pV),e(pV,FOo),e(Jv,TOo),e(H,MOo),e(H,Yv),e(Yv,Fhe),e(Fhe,EOo),e(Yv,COo),e(Yv,_V),e(_V,wOo),e(Yv,AOo),e(H,yOo),e(H,Kv),e(Kv,The),e(The,LOo),e(Kv,xOo),e(Kv,uV),e(uV,$Oo),e(Kv,kOo),e(H,SOo),e(H,Zv),e(Zv,Mhe),e(Mhe,ROo),e(Zv,POo),e(Zv,bV),e(bV,BOo),e(Zv,IOo),e(H,NOo),e(H,e3),e(e3,Ehe),e(Ehe,qOo),e(e3,jOo),e(e3,vV),e(vV,DOo),e(e3,GOo),e(H,OOo),e(H,o3),e(o3,Che),e(Che,VOo),e(o3,XOo),e(o3,FV),e(FV,zOo),e(o3,WOo),e(H,QOo),e(H,r3),e(r3,whe),e(whe,HOo),e(r3,UOo),e(r3,TV),e(TV,JOo),e(r3,YOo),e(H,KOo),e(H,t3),e(t3,Ahe),e(Ahe,ZOo),e(t3,eVo),e(t3,MV),e(MV,oVo),e(t3,rVo),e(H,tVo),e(H,a3),e(a3,yhe),e(yhe,aVo),e(a3,nVo),e(a3,EV),e(EV,sVo),e(a3,lVo),e(H,iVo),e(H,n3),e(n3,Lhe),e(Lhe,dVo),e(n3,cVo),e(n3,CV),e(CV,fVo),e(n3,mVo),e(H,gVo),e(H,s3),e(s3,xhe),e(xhe,hVo),e(s3,pVo),e(s3,wV),e(wV,_Vo),e(s3,uVo),e(H,bVo),e(H,l3),e(l3,$he),e($he,vVo),e(l3,FVo),e(l3,AV),e(AV,TVo),e(l3,MVo),e(H,EVo),e(H,i3),e(i3,khe),e(khe,CVo),e(i3,wVo),e(i3,yV),e(yV,AVo),e(i3,yVo),e(H,LVo),e(H,d3),e(d3,She),e(She,xVo),e(d3,$Vo),e(d3,LV),e(LV,kVo),e(d3,SVo),e(ao,RVo),e(ao,c3),e(c3,PVo),e(c3,Rhe),e(Rhe,BVo),e(c3,IVo),e(c3,Phe),e(Phe,NVo),e(ao,qVo),M(f3,ao,null),b(f,Nqe,u),b(f,Ki,u),e(Ki,m3),e(m3,Bhe),M(Wy,Bhe,null),e(Ki,jVo),e(Ki,Ihe),e(Ihe,DVo),b(f,qqe,u),b(f,No,u),M(Qy,No,null),e(No,GVo),e(No,Zi),e(Zi,OVo),e(Zi,xV),e(xV,VVo),e(Zi,XVo),e(Zi,$V),e($V,zVo),e(Zi,WVo),e(No,QVo),e(No,Hy),e(Hy,HVo),e(Hy,Nhe),e(Nhe,UVo),e(Hy,JVo),e(No,YVo),e(No,mt),M(Uy,mt,null),e(mt,KVo),e(mt,qhe),e(qhe,ZVo),e(mt,eXo),e(mt,ed),e(ed,oXo),e(ed,jhe),e(jhe,rXo),e(ed,tXo),e(ed,kV),e(kV,aXo),e(ed,nXo),e(mt,sXo),M(g3,mt,null),e(No,lXo),e(No,no),M(Jy,no,null),e(no,iXo),e(no,Dhe),e(Dhe,dXo),e(no,cXo),e(no,Na),e(Na,fXo),e(Na,Ghe),e(Ghe,mXo),e(Na,gXo),e(Na,Ohe),e(Ohe,hXo),e(Na,pXo),e(Na,Vhe),e(Vhe,_Xo),e(Na,uXo),e(no,bXo),e(no,V),e(V,h3),e(h3,Xhe),e(Xhe,vXo),e(h3,FXo),e(h3,SV),e(SV,TXo),e(h3,MXo),e(V,EXo),e(V,p3),e(p3,zhe),e(zhe,CXo),e(p3,wXo),e(p3,RV),e(RV,AXo),e(p3,yXo),e(V,LXo),e(V,_3),e(_3,Whe),e(Whe,xXo),e(_3,$Xo),e(_3,PV),e(PV,kXo),e(_3,SXo),e(V,RXo),e(V,u3),e(u3,Qhe),e(Qhe,PXo),e(u3,BXo),e(u3,BV),e(BV,IXo),e(u3,NXo),e(V,qXo),e(V,b3),e(b3,Hhe),e(Hhe,jXo),e(b3,DXo),e(b3,IV),e(IV,GXo),e(b3,OXo),e(V,VXo),e(V,v3),e(v3,Uhe),e(Uhe,XXo),e(v3,zXo),e(v3,NV),e(NV,WXo),e(v3,QXo),e(V,HXo),e(V,F3),e(F3,Jhe),e(Jhe,UXo),e(F3,JXo),e(F3,qV),e(qV,YXo),e(F3,KXo),e(V,ZXo),e(V,T3),e(T3,Yhe),e(Yhe,ezo),e(T3,ozo),e(T3,jV),e(jV,rzo),e(T3,tzo),e(V,azo),e(V,M3),e(M3,Khe),e(Khe,nzo),e(M3,szo),e(M3,DV),e(DV,lzo),e(M3,izo),e(V,dzo),e(V,E3),e(E3,Zhe),e(Zhe,czo),e(E3,fzo),e(E3,GV),e(GV,mzo),e(E3,gzo),e(V,hzo),e(V,C3),e(C3,epe),e(epe,pzo),e(C3,_zo),e(C3,OV),e(OV,uzo),e(C3,bzo),e(V,vzo),e(V,w3),e(w3,ope),e(ope,Fzo),e(w3,Tzo),e(w3,VV),e(VV,Mzo),e(w3,Ezo),e(V,Czo),e(V,A3),e(A3,rpe),e(rpe,wzo),e(A3,Azo),e(A3,XV),e(XV,yzo),e(A3,Lzo),e(V,xzo),e(V,y3),e(y3,tpe),e(tpe,$zo),e(y3,kzo),e(y3,zV),e(zV,Szo),e(y3,Rzo),e(V,Pzo),e(V,L3),e(L3,ape),e(ape,Bzo),e(L3,Izo),e(L3,WV),e(WV,Nzo),e(L3,qzo),e(V,jzo),e(V,x3),e(x3,npe),e(npe,Dzo),e(x3,Gzo),e(x3,QV),e(QV,Ozo),e(x3,Vzo),e(V,Xzo),e(V,$3),e($3,spe),e(spe,zzo),e($3,Wzo),e($3,HV),e(HV,Qzo),e($3,Hzo),e(V,Uzo),e(V,k3),e(k3,lpe),e(lpe,Jzo),e(k3,Yzo),e(k3,UV),e(UV,Kzo),e(k3,Zzo),e(V,eWo),e(V,S3),e(S3,ipe),e(ipe,oWo),e(S3,rWo),e(S3,JV),e(JV,tWo),e(S3,aWo),e(V,nWo),e(V,R3),e(R3,dpe),e(dpe,sWo),e(R3,lWo),e(R3,YV),e(YV,iWo),e(R3,dWo),e(V,cWo),e(V,P3),e(P3,cpe),e(cpe,fWo),e(P3,mWo),e(P3,KV),e(KV,gWo),e(P3,hWo),e(V,pWo),e(V,B3),e(B3,fpe),e(fpe,_Wo),e(B3,uWo),e(B3,ZV),e(ZV,bWo),e(B3,vWo),e(V,FWo),e(V,I3),e(I3,mpe),e(mpe,TWo),e(I3,MWo),e(I3,eX),e(eX,EWo),e(I3,CWo),e(V,wWo),e(V,N3),e(N3,gpe),e(gpe,AWo),e(N3,yWo),e(N3,oX),e(oX,LWo),e(N3,xWo),e(V,$Wo),e(V,q3),e(q3,hpe),e(hpe,kWo),e(q3,SWo),e(q3,rX),e(rX,RWo),e(q3,PWo),e(V,BWo),e(V,j3),e(j3,ppe),e(ppe,IWo),e(j3,NWo),e(j3,tX),e(tX,qWo),e(j3,jWo),e(V,DWo),e(V,D3),e(D3,_pe),e(_pe,GWo),e(D3,OWo),e(D3,aX),e(aX,VWo),e(D3,XWo),e(V,zWo),e(V,G3),e(G3,upe),e(upe,WWo),e(G3,QWo),e(G3,nX),e(nX,HWo),e(G3,UWo),e(V,JWo),e(V,O3),e(O3,bpe),e(bpe,YWo),e(O3,KWo),e(O3,sX),e(sX,ZWo),e(O3,eQo),e(V,oQo),e(V,V3),e(V3,vpe),e(vpe,rQo),e(V3,tQo),e(V3,lX),e(lX,aQo),e(V3,nQo),e(V,sQo),e(V,X3),e(X3,Fpe),e(Fpe,lQo),e(X3,iQo),e(X3,iX),e(iX,dQo),e(X3,cQo),e(V,fQo),e(V,z3),e(z3,Tpe),e(Tpe,mQo),e(z3,gQo),e(z3,dX),e(dX,hQo),e(z3,pQo),e(V,_Qo),e(V,W3),e(W3,Mpe),e(Mpe,uQo),e(W3,bQo),e(W3,cX),e(cX,vQo),e(W3,FQo),e(V,TQo),e(V,Q3),e(Q3,Epe),e(Epe,MQo),e(Q3,EQo),e(Q3,fX),e(fX,CQo),e(Q3,wQo),e(V,AQo),e(V,H3),e(H3,Cpe),e(Cpe,yQo),e(H3,LQo),e(H3,mX),e(mX,xQo),e(H3,$Qo),e(V,kQo),e(V,U3),e(U3,wpe),e(wpe,SQo),e(U3,RQo),e(U3,gX),e(gX,PQo),e(U3,BQo),e(V,IQo),e(V,J3),e(J3,Ape),e(Ape,NQo),e(J3,qQo),e(J3,hX),e(hX,jQo),e(J3,DQo),e(V,GQo),e(V,Y3),e(Y3,ype),e(ype,OQo),e(Y3,VQo),e(Y3,pX),e(pX,XQo),e(Y3,zQo),e(V,WQo),e(V,K3),e(K3,Lpe),e(Lpe,QQo),e(K3,HQo),e(K3,_X),e(_X,UQo),e(K3,JQo),e(V,YQo),e(V,Z3),e(Z3,xpe),e(xpe,KQo),e(Z3,ZQo),e(Z3,uX),e(uX,eHo),e(Z3,oHo),e(no,rHo),e(no,e0),e(e0,tHo),e(e0,$pe),e($pe,aHo),e(e0,nHo),e(e0,kpe),e(kpe,sHo),e(no,lHo),M(o0,no,null),b(f,jqe,u),b(f,od,u),e(od,r0),e(r0,Spe),M(Yy,Spe,null),e(od,iHo),e(od,Rpe),e(Rpe,dHo),b(f,Dqe,u),b(f,qo,u),M(Ky,qo,null),e(qo,cHo),e(qo,rd),e(rd,fHo),e(rd,bX),e(bX,mHo),e(rd,gHo),e(rd,vX),e(vX,hHo),e(rd,pHo),e(qo,_Ho),e(qo,Zy),e(Zy,uHo),e(Zy,Ppe),e(Ppe,bHo),e(Zy,vHo),e(qo,FHo),e(qo,gt),M(eL,gt,null),e(gt,THo),e(gt,Bpe),e(Bpe,MHo),e(gt,EHo),e(gt,td),e(td,CHo),e(td,Ipe),e(Ipe,wHo),e(td,AHo),e(td,FX),e(FX,yHo),e(td,LHo),e(gt,xHo),M(t0,gt,null),e(qo,$Ho),e(qo,so),M(oL,so,null),e(so,kHo),e(so,Npe),e(Npe,SHo),e(so,RHo),e(so,qa),e(qa,PHo),e(qa,qpe),e(qpe,BHo),e(qa,IHo),e(qa,jpe),e(jpe,NHo),e(qa,qHo),e(qa,Dpe),e(Dpe,jHo),e(qa,DHo),e(so,GHo),e(so,Gpe),e(Gpe,a0),e(a0,Ope),e(Ope,OHo),e(a0,VHo),e(a0,TX),e(TX,XHo),e(a0,zHo),e(so,WHo),e(so,n0),e(n0,QHo),e(n0,Vpe),e(Vpe,HHo),e(n0,UHo),e(n0,Xpe),e(Xpe,JHo),e(so,YHo),M(s0,so,null),b(f,Gqe,u),b(f,ad,u),e(ad,l0),e(l0,zpe),M(rL,zpe,null),e(ad,KHo),e(ad,Wpe),e(Wpe,ZHo),b(f,Oqe,u),b(f,jo,u),M(tL,jo,null),e(jo,eUo),e(jo,nd),e(nd,oUo),e(nd,MX),e(MX,rUo),e(nd,tUo),e(nd,EX),e(EX,aUo),e(nd,nUo),e(jo,sUo),e(jo,aL),e(aL,lUo),e(aL,Qpe),e(Qpe,iUo),e(aL,dUo),e(jo,cUo),e(jo,ht),M(nL,ht,null),e(ht,fUo),e(ht,Hpe),e(Hpe,mUo),e(ht,gUo),e(ht,sd),e(sd,hUo),e(sd,Upe),e(Upe,pUo),e(sd,_Uo),e(sd,CX),e(CX,uUo),e(sd,bUo),e(ht,vUo),M(i0,ht,null),e(jo,FUo),e(jo,lo),M(sL,lo,null),e(lo,TUo),e(lo,Jpe),e(Jpe,MUo),e(lo,EUo),e(lo,ja),e(ja,CUo),e(ja,Ype),e(Ype,wUo),e(ja,AUo),e(ja,Kpe),e(Kpe,yUo),e(ja,LUo),e(ja,Zpe),e(Zpe,xUo),e(ja,$Uo),e(lo,kUo),e(lo,Fe),e(Fe,d0),e(d0,e_e),e(e_e,SUo),e(d0,RUo),e(d0,wX),e(wX,PUo),e(d0,BUo),e(Fe,IUo),e(Fe,c0),e(c0,o_e),e(o_e,NUo),e(c0,qUo),e(c0,AX),e(AX,jUo),e(c0,DUo),e(Fe,GUo),e(Fe,f0),e(f0,r_e),e(r_e,OUo),e(f0,VUo),e(f0,yX),e(yX,XUo),e(f0,zUo),e(Fe,WUo),e(Fe,m0),e(m0,t_e),e(t_e,QUo),e(m0,HUo),e(m0,LX),e(LX,UUo),e(m0,JUo),e(Fe,YUo),e(Fe,Bs),e(Bs,a_e),e(a_e,KUo),e(Bs,ZUo),e(Bs,xX),e(xX,eJo),e(Bs,oJo),e(Bs,$X),e($X,rJo),e(Bs,tJo),e(Fe,aJo),e(Fe,g0),e(g0,n_e),e(n_e,nJo),e(g0,sJo),e(g0,kX),e(kX,lJo),e(g0,iJo),e(Fe,dJo),e(Fe,pt),e(pt,s_e),e(s_e,cJo),e(pt,fJo),e(pt,SX),e(SX,mJo),e(pt,gJo),e(pt,RX),e(RX,hJo),e(pt,pJo),e(pt,PX),e(PX,_Jo),e(pt,uJo),e(Fe,bJo),e(Fe,h0),e(h0,l_e),e(l_e,vJo),e(h0,FJo),e(h0,BX),e(BX,TJo),e(h0,MJo),e(Fe,EJo),e(Fe,p0),e(p0,i_e),e(i_e,CJo),e(p0,wJo),e(p0,IX),e(IX,AJo),e(p0,yJo),e(Fe,LJo),e(Fe,_0),e(_0,d_e),e(d_e,xJo),e(_0,$Jo),e(_0,NX),e(NX,kJo),e(_0,SJo),e(Fe,RJo),e(Fe,u0),e(u0,c_e),e(c_e,PJo),e(u0,BJo),e(u0,qX),e(qX,IJo),e(u0,NJo),e(Fe,qJo),e(Fe,b0),e(b0,f_e),e(f_e,jJo),e(b0,DJo),e(b0,jX),e(jX,GJo),e(b0,OJo),e(Fe,VJo),e(Fe,v0),e(v0,m_e),e(m_e,XJo),e(v0,zJo),e(v0,DX),e(DX,WJo),e(v0,QJo),e(Fe,HJo),e(Fe,F0),e(F0,g_e),e(g_e,UJo),e(F0,JJo),e(F0,GX),e(GX,YJo),e(F0,KJo),e(lo,ZJo),e(lo,T0),e(T0,eYo),e(T0,h_e),e(h_e,oYo),e(T0,rYo),e(T0,p_e),e(p_e,tYo),e(lo,aYo),M(M0,lo,null),b(f,Vqe,u),b(f,ld,u),e(ld,E0),e(E0,__e),M(lL,__e,null),e(ld,nYo),e(ld,u_e),e(u_e,sYo),b(f,Xqe,u),b(f,Do,u),M(iL,Do,null),e(Do,lYo),e(Do,id),e(id,iYo),e(id,OX),e(OX,dYo),e(id,cYo),e(id,VX),e(VX,fYo),e(id,mYo),e(Do,gYo),e(Do,dL),e(dL,hYo),e(dL,b_e),e(b_e,pYo),e(dL,_Yo),e(Do,uYo),e(Do,_t),M(cL,_t,null),e(_t,bYo),e(_t,v_e),e(v_e,vYo),e(_t,FYo),e(_t,dd),e(dd,TYo),e(dd,F_e),e(F_e,MYo),e(dd,EYo),e(dd,XX),e(XX,CYo),e(dd,wYo),e(_t,AYo),M(C0,_t,null),e(Do,yYo),e(Do,io),M(fL,io,null),e(io,LYo),e(io,T_e),e(T_e,xYo),e(io,$Yo),e(io,Da),e(Da,kYo),e(Da,M_e),e(M_e,SYo),e(Da,RYo),e(Da,E_e),e(E_e,PYo),e(Da,BYo),e(Da,C_e),e(C_e,IYo),e(Da,NYo),e(io,qYo),e(io,w_e),e(w_e,w0),e(w0,A_e),e(A_e,jYo),e(w0,DYo),e(w0,zX),e(zX,GYo),e(w0,OYo),e(io,VYo),e(io,A0),e(A0,XYo),e(A0,y_e),e(y_e,zYo),e(A0,WYo),e(A0,L_e),e(L_e,QYo),e(io,HYo),M(y0,io,null),b(f,zqe,u),b(f,cd,u),e(cd,L0),e(L0,x_e),M(mL,x_e,null),e(cd,UYo),e(cd,$_e),e($_e,JYo),b(f,Wqe,u),b(f,Go,u),M(gL,Go,null),e(Go,YYo),e(Go,fd),e(fd,KYo),e(fd,WX),e(WX,ZYo),e(fd,eKo),e(fd,QX),e(QX,oKo),e(fd,rKo),e(Go,tKo),e(Go,hL),e(hL,aKo),e(hL,k_e),e(k_e,nKo),e(hL,sKo),e(Go,lKo),e(Go,ut),M(pL,ut,null),e(ut,iKo),e(ut,S_e),e(S_e,dKo),e(ut,cKo),e(ut,md),e(md,fKo),e(md,R_e),e(R_e,mKo),e(md,gKo),e(md,HX),e(HX,hKo),e(md,pKo),e(ut,_Ko),M(x0,ut,null),e(Go,uKo),e(Go,co),M(_L,co,null),e(co,bKo),e(co,P_e),e(P_e,vKo),e(co,FKo),e(co,Ga),e(Ga,TKo),e(Ga,B_e),e(B_e,MKo),e(Ga,EKo),e(Ga,I_e),e(I_e,CKo),e(Ga,wKo),e(Ga,N_e),e(N_e,AKo),e(Ga,yKo),e(co,LKo),e(co,ke),e(ke,$0),e($0,q_e),e(q_e,xKo),e($0,$Ko),e($0,UX),e(UX,kKo),e($0,SKo),e(ke,RKo),e(ke,k0),e(k0,j_e),e(j_e,PKo),e(k0,BKo),e(k0,JX),e(JX,IKo),e(k0,NKo),e(ke,qKo),e(ke,S0),e(S0,D_e),e(D_e,jKo),e(S0,DKo),e(S0,YX),e(YX,GKo),e(S0,OKo),e(ke,VKo),e(ke,R0),e(R0,G_e),e(G_e,XKo),e(R0,zKo),e(R0,KX),e(KX,WKo),e(R0,QKo),e(ke,HKo),e(ke,P0),e(P0,O_e),e(O_e,UKo),e(P0,JKo),e(P0,ZX),e(ZX,YKo),e(P0,KKo),e(ke,ZKo),e(ke,B0),e(B0,V_e),e(V_e,eZo),e(B0,oZo),e(B0,ez),e(ez,rZo),e(B0,tZo),e(ke,aZo),e(ke,I0),e(I0,X_e),e(X_e,nZo),e(I0,sZo),e(I0,oz),e(oz,lZo),e(I0,iZo),e(ke,dZo),e(ke,N0),e(N0,z_e),e(z_e,cZo),e(N0,fZo),e(N0,rz),e(rz,mZo),e(N0,gZo),e(ke,hZo),e(ke,q0),e(q0,W_e),e(W_e,pZo),e(q0,_Zo),e(q0,tz),e(tz,uZo),e(q0,bZo),e(co,vZo),e(co,j0),e(j0,FZo),e(j0,Q_e),e(Q_e,TZo),e(j0,MZo),e(j0,H_e),e(H_e,EZo),e(co,CZo),M(D0,co,null),b(f,Qqe,u),b(f,gd,u),e(gd,G0),e(G0,U_e),M(uL,U_e,null),e(gd,wZo),e(gd,J_e),e(J_e,AZo),b(f,Hqe,u),b(f,Oo,u),M(bL,Oo,null),e(Oo,yZo),e(Oo,hd),e(hd,LZo),e(hd,az),e(az,xZo),e(hd,$Zo),e(hd,nz),e(nz,kZo),e(hd,SZo),e(Oo,RZo),e(Oo,vL),e(vL,PZo),e(vL,Y_e),e(Y_e,BZo),e(vL,IZo),e(Oo,NZo),e(Oo,bt),M(FL,bt,null),e(bt,qZo),e(bt,K_e),e(K_e,jZo),e(bt,DZo),e(bt,pd),e(pd,GZo),e(pd,Z_e),e(Z_e,OZo),e(pd,VZo),e(pd,sz),e(sz,XZo),e(pd,zZo),e(bt,WZo),M(O0,bt,null),e(Oo,QZo),e(Oo,fo),M(TL,fo,null),e(fo,HZo),e(fo,eue),e(eue,UZo),e(fo,JZo),e(fo,Oa),e(Oa,YZo),e(Oa,oue),e(oue,KZo),e(Oa,ZZo),e(Oa,rue),e(rue,eer),e(Oa,oer),e(Oa,tue),e(tue,rer),e(Oa,ter),e(fo,aer),e(fo,Kr),e(Kr,V0),e(V0,aue),e(aue,ner),e(V0,ser),e(V0,lz),e(lz,ler),e(V0,ier),e(Kr,der),e(Kr,X0),e(X0,nue),e(nue,cer),e(X0,fer),e(X0,iz),e(iz,mer),e(X0,ger),e(Kr,her),e(Kr,z0),e(z0,sue),e(sue,per),e(z0,_er),e(z0,dz),e(dz,uer),e(z0,ber),e(Kr,ver),e(Kr,W0),e(W0,lue),e(lue,Fer),e(W0,Ter),e(W0,cz),e(cz,Mer),e(W0,Eer),e(Kr,Cer),e(Kr,Q0),e(Q0,iue),e(iue,wer),e(Q0,Aer),e(Q0,fz),e(fz,yer),e(Q0,Ler),e(fo,xer),e(fo,H0),e(H0,$er),e(H0,due),e(due,ker),e(H0,Ser),e(H0,cue),e(cue,Rer),e(fo,Per),M(U0,fo,null),b(f,Uqe,u),b(f,_d,u),e(_d,J0),e(J0,fue),M(ML,fue,null),e(_d,Ber),e(_d,mue),e(mue,Ier),b(f,Jqe,u),b(f,Vo,u),M(EL,Vo,null),e(Vo,Ner),e(Vo,ud),e(ud,qer),e(ud,mz),e(mz,jer),e(ud,Der),e(ud,gz),e(gz,Ger),e(ud,Oer),e(Vo,Ver),e(Vo,CL),e(CL,Xer),e(CL,gue),e(gue,zer),e(CL,Wer),e(Vo,Qer),e(Vo,vt),M(wL,vt,null),e(vt,Her),e(vt,hue),e(hue,Uer),e(vt,Jer),e(vt,bd),e(bd,Yer),e(bd,pue),e(pue,Ker),e(bd,Zer),e(bd,hz),e(hz,eor),e(bd,oor),e(vt,ror),M(Y0,vt,null),e(Vo,tor),e(Vo,mo),M(AL,mo,null),e(mo,aor),e(mo,_ue),e(_ue,nor),e(mo,sor),e(mo,Va),e(Va,lor),e(Va,uue),e(uue,ior),e(Va,dor),e(Va,bue),e(bue,cor),e(Va,mor),e(Va,vue),e(vue,gor),e(Va,hor),e(mo,por),e(mo,Se),e(Se,K0),e(K0,Fue),e(Fue,_or),e(K0,uor),e(K0,pz),e(pz,bor),e(K0,vor),e(Se,For),e(Se,Z0),e(Z0,Tue),e(Tue,Tor),e(Z0,Mor),e(Z0,_z),e(_z,Eor),e(Z0,Cor),e(Se,wor),e(Se,eF),e(eF,Mue),e(Mue,Aor),e(eF,yor),e(eF,uz),e(uz,Lor),e(eF,xor),e(Se,$or),e(Se,oF),e(oF,Eue),e(Eue,kor),e(oF,Sor),e(oF,bz),e(bz,Ror),e(oF,Por),e(Se,Bor),e(Se,rF),e(rF,Cue),e(Cue,Ior),e(rF,Nor),e(rF,vz),e(vz,qor),e(rF,jor),e(Se,Dor),e(Se,tF),e(tF,wue),e(wue,Gor),e(tF,Oor),e(tF,Fz),e(Fz,Vor),e(tF,Xor),e(Se,zor),e(Se,aF),e(aF,Aue),e(Aue,Wor),e(aF,Qor),e(aF,Tz),e(Tz,Hor),e(aF,Uor),e(Se,Jor),e(Se,nF),e(nF,yue),e(yue,Yor),e(nF,Kor),e(nF,Mz),e(Mz,Zor),e(nF,err),e(Se,orr),e(Se,sF),e(sF,Lue),e(Lue,rrr),e(sF,trr),e(sF,Ez),e(Ez,arr),e(sF,nrr),e(mo,srr),e(mo,lF),e(lF,lrr),e(lF,xue),e(xue,irr),e(lF,drr),e(lF,$ue),e($ue,crr),e(mo,frr),M(iF,mo,null),b(f,Yqe,u),b(f,vd,u),e(vd,dF),e(dF,kue),M(yL,kue,null),e(vd,mrr),e(vd,Sue),e(Sue,grr),b(f,Kqe,u),b(f,Xo,u),M(LL,Xo,null),e(Xo,hrr),e(Xo,Fd),e(Fd,prr),e(Fd,Cz),e(Cz,_rr),e(Fd,urr),e(Fd,wz),e(wz,brr),e(Fd,vrr),e(Xo,Frr),e(Xo,xL),e(xL,Trr),e(xL,Rue),e(Rue,Mrr),e(xL,Err),e(Xo,Crr),e(Xo,Ft),M($L,Ft,null),e(Ft,wrr),e(Ft,Pue),e(Pue,Arr),e(Ft,yrr),e(Ft,Td),e(Td,Lrr),e(Td,Bue),e(Bue,xrr),e(Td,$rr),e(Td,Az),e(Az,krr),e(Td,Srr),e(Ft,Rrr),M(cF,Ft,null),e(Xo,Prr),e(Xo,go),M(kL,go,null),e(go,Brr),e(go,Iue),e(Iue,Irr),e(go,Nrr),e(go,Xa),e(Xa,qrr),e(Xa,Nue),e(Nue,jrr),e(Xa,Drr),e(Xa,que),e(que,Grr),e(Xa,Orr),e(Xa,jue),e(jue,Vrr),e(Xa,Xrr),e(go,zrr),e(go,SL),e(SL,fF),e(fF,Due),e(Due,Wrr),e(fF,Qrr),e(fF,yz),e(yz,Hrr),e(fF,Urr),e(SL,Jrr),e(SL,mF),e(mF,Gue),e(Gue,Yrr),e(mF,Krr),e(mF,Lz),e(Lz,Zrr),e(mF,etr),e(go,otr),e(go,gF),e(gF,rtr),e(gF,Oue),e(Oue,ttr),e(gF,atr),e(gF,Vue),e(Vue,ntr),e(go,str),M(hF,go,null),b(f,Zqe,u),b(f,Md,u),e(Md,pF),e(pF,Xue),M(RL,Xue,null),e(Md,ltr),e(Md,zue),e(zue,itr),b(f,eje,u),b(f,zo,u),M(PL,zo,null),e(zo,dtr),e(zo,Ed),e(Ed,ctr),e(Ed,xz),e(xz,ftr),e(Ed,mtr),e(Ed,$z),e($z,gtr),e(Ed,htr),e(zo,ptr),e(zo,BL),e(BL,_tr),e(BL,Wue),e(Wue,utr),e(BL,btr),e(zo,vtr),e(zo,Tt),M(IL,Tt,null),e(Tt,Ftr),e(Tt,Que),e(Que,Ttr),e(Tt,Mtr),e(Tt,Cd),e(Cd,Etr),e(Cd,Hue),e(Hue,Ctr),e(Cd,wtr),e(Cd,kz),e(kz,Atr),e(Cd,ytr),e(Tt,Ltr),M(_F,Tt,null),e(zo,xtr),e(zo,ho),M(NL,ho,null),e(ho,$tr),e(ho,Uue),e(Uue,ktr),e(ho,Str),e(ho,za),e(za,Rtr),e(za,Jue),e(Jue,Ptr),e(za,Btr),e(za,Yue),e(Yue,Itr),e(za,Ntr),e(za,Kue),e(Kue,qtr),e(za,jtr),e(ho,Dtr),e(ho,Zr),e(Zr,uF),e(uF,Zue),e(Zue,Gtr),e(uF,Otr),e(uF,Sz),e(Sz,Vtr),e(uF,Xtr),e(Zr,ztr),e(Zr,bF),e(bF,e2e),e(e2e,Wtr),e(bF,Qtr),e(bF,Rz),e(Rz,Htr),e(bF,Utr),e(Zr,Jtr),e(Zr,vF),e(vF,o2e),e(o2e,Ytr),e(vF,Ktr),e(vF,Pz),e(Pz,Ztr),e(vF,ear),e(Zr,oar),e(Zr,FF),e(FF,r2e),e(r2e,rar),e(FF,tar),e(FF,Bz),e(Bz,aar),e(FF,nar),e(Zr,sar),e(Zr,TF),e(TF,t2e),e(t2e,lar),e(TF,iar),e(TF,Iz),e(Iz,dar),e(TF,car),e(ho,far),e(ho,MF),e(MF,mar),e(MF,a2e),e(a2e,gar),e(MF,har),e(MF,n2e),e(n2e,par),e(ho,_ar),M(EF,ho,null),b(f,oje,u),b(f,wd,u),e(wd,CF),e(CF,s2e),M(qL,s2e,null),e(wd,uar),e(wd,l2e),e(l2e,bar),b(f,rje,u),b(f,Wo,u),M(jL,Wo,null),e(Wo,Far),e(Wo,Ad),e(Ad,Tar),e(Ad,Nz),e(Nz,Mar),e(Ad,Ear),e(Ad,qz),e(qz,Car),e(Ad,war),e(Wo,Aar),e(Wo,DL),e(DL,yar),e(DL,i2e),e(i2e,Lar),e(DL,xar),e(Wo,$ar),e(Wo,Mt),M(GL,Mt,null),e(Mt,kar),e(Mt,d2e),e(d2e,Sar),e(Mt,Rar),e(Mt,yd),e(yd,Par),e(yd,c2e),e(c2e,Bar),e(yd,Iar),e(yd,jz),e(jz,Nar),e(yd,qar),e(Mt,jar),M(wF,Mt,null),e(Wo,Dar),e(Wo,po),M(OL,po,null),e(po,Gar),e(po,f2e),e(f2e,Oar),e(po,Var),e(po,Wa),e(Wa,Xar),e(Wa,m2e),e(m2e,zar),e(Wa,War),e(Wa,g2e),e(g2e,Qar),e(Wa,Har),e(Wa,h2e),e(h2e,Uar),e(Wa,Jar),e(po,Yar),e(po,Ld),e(Ld,AF),e(AF,p2e),e(p2e,Kar),e(AF,Zar),e(AF,Dz),e(Dz,enr),e(AF,onr),e(Ld,rnr),e(Ld,yF),e(yF,_2e),e(_2e,tnr),e(yF,anr),e(yF,Gz),e(Gz,nnr),e(yF,snr),e(Ld,lnr),e(Ld,LF),e(LF,u2e),e(u2e,inr),e(LF,dnr),e(LF,Oz),e(Oz,cnr),e(LF,fnr),e(po,mnr),e(po,xF),e(xF,gnr),e(xF,b2e),e(b2e,hnr),e(xF,pnr),e(xF,v2e),e(v2e,_nr),e(po,unr),M($F,po,null),b(f,tje,u),b(f,xd,u),e(xd,kF),e(kF,F2e),M(VL,F2e,null),e(xd,bnr),e(xd,T2e),e(T2e,vnr),b(f,aje,u),b(f,Qo,u),M(XL,Qo,null),e(Qo,Fnr),e(Qo,$d),e($d,Tnr),e($d,Vz),e(Vz,Mnr),e($d,Enr),e($d,Xz),e(Xz,Cnr),e($d,wnr),e(Qo,Anr),e(Qo,zL),e(zL,ynr),e(zL,M2e),e(M2e,Lnr),e(zL,xnr),e(Qo,$nr),e(Qo,Et),M(WL,Et,null),e(Et,knr),e(Et,E2e),e(E2e,Snr),e(Et,Rnr),e(Et,kd),e(kd,Pnr),e(kd,C2e),e(C2e,Bnr),e(kd,Inr),e(kd,zz),e(zz,Nnr),e(kd,qnr),e(Et,jnr),M(SF,Et,null),e(Qo,Dnr),e(Qo,_o),M(QL,_o,null),e(_o,Gnr),e(_o,w2e),e(w2e,Onr),e(_o,Vnr),e(_o,Qa),e(Qa,Xnr),e(Qa,A2e),e(A2e,znr),e(Qa,Wnr),e(Qa,y2e),e(y2e,Qnr),e(Qa,Hnr),e(Qa,L2e),e(L2e,Unr),e(Qa,Jnr),e(_o,Ynr),e(_o,HL),e(HL,RF),e(RF,x2e),e(x2e,Knr),e(RF,Znr),e(RF,Wz),e(Wz,esr),e(RF,osr),e(HL,rsr),e(HL,PF),e(PF,$2e),e($2e,tsr),e(PF,asr),e(PF,Qz),e(Qz,nsr),e(PF,ssr),e(_o,lsr),e(_o,BF),e(BF,isr),e(BF,k2e),e(k2e,dsr),e(BF,csr),e(BF,S2e),e(S2e,fsr),e(_o,msr),M(IF,_o,null),b(f,nje,u),b(f,Sd,u),e(Sd,NF),e(NF,R2e),M(UL,R2e,null),e(Sd,gsr),e(Sd,P2e),e(P2e,hsr),b(f,sje,u),b(f,Ho,u),M(JL,Ho,null),e(Ho,psr),e(Ho,Rd),e(Rd,_sr),e(Rd,Hz),e(Hz,usr),e(Rd,bsr),e(Rd,Uz),e(Uz,vsr),e(Rd,Fsr),e(Ho,Tsr),e(Ho,YL),e(YL,Msr),e(YL,B2e),e(B2e,Esr),e(YL,Csr),e(Ho,wsr),e(Ho,Ct),M(KL,Ct,null),e(Ct,Asr),e(Ct,I2e),e(I2e,ysr),e(Ct,Lsr),e(Ct,Pd),e(Pd,xsr),e(Pd,N2e),e(N2e,$sr),e(Pd,ksr),e(Pd,Jz),e(Jz,Ssr),e(Pd,Rsr),e(Ct,Psr),M(qF,Ct,null),e(Ho,Bsr),e(Ho,uo),M(ZL,uo,null),e(uo,Isr),e(uo,q2e),e(q2e,Nsr),e(uo,qsr),e(uo,Ha),e(Ha,jsr),e(Ha,j2e),e(j2e,Dsr),e(Ha,Gsr),e(Ha,D2e),e(D2e,Osr),e(Ha,Vsr),e(Ha,G2e),e(G2e,Xsr),e(Ha,zsr),e(uo,Wsr),e(uo,O2e),e(O2e,jF),e(jF,V2e),e(V2e,Qsr),e(jF,Hsr),e(jF,Yz),e(Yz,Usr),e(jF,Jsr),e(uo,Ysr),e(uo,DF),e(DF,Ksr),e(DF,X2e),e(X2e,Zsr),e(DF,elr),e(DF,z2e),e(z2e,olr),e(uo,rlr),M(GF,uo,null),b(f,lje,u),b(f,Bd,u),e(Bd,OF),e(OF,W2e),M(e8,W2e,null),e(Bd,tlr),e(Bd,Q2e),e(Q2e,alr),b(f,ije,u),b(f,Uo,u),M(o8,Uo,null),e(Uo,nlr),e(Uo,Id),e(Id,slr),e(Id,Kz),e(Kz,llr),e(Id,ilr),e(Id,Zz),e(Zz,dlr),e(Id,clr),e(Uo,flr),e(Uo,r8),e(r8,mlr),e(r8,H2e),e(H2e,glr),e(r8,hlr),e(Uo,plr),e(Uo,wt),M(t8,wt,null),e(wt,_lr),e(wt,U2e),e(U2e,ulr),e(wt,blr),e(wt,Nd),e(Nd,vlr),e(Nd,J2e),e(J2e,Flr),e(Nd,Tlr),e(Nd,eW),e(eW,Mlr),e(Nd,Elr),e(wt,Clr),M(VF,wt,null),e(Uo,wlr),e(Uo,bo),M(a8,bo,null),e(bo,Alr),e(bo,Y2e),e(Y2e,ylr),e(bo,Llr),e(bo,Ua),e(Ua,xlr),e(Ua,K2e),e(K2e,$lr),e(Ua,klr),e(Ua,Z2e),e(Z2e,Slr),e(Ua,Rlr),e(Ua,e1e),e(e1e,Plr),e(Ua,Blr),e(bo,Ilr),e(bo,Ja),e(Ja,XF),e(XF,o1e),e(o1e,Nlr),e(XF,qlr),e(XF,oW),e(oW,jlr),e(XF,Dlr),e(Ja,Glr),e(Ja,zF),e(zF,r1e),e(r1e,Olr),e(zF,Vlr),e(zF,rW),e(rW,Xlr),e(zF,zlr),e(Ja,Wlr),e(Ja,WF),e(WF,t1e),e(t1e,Qlr),e(WF,Hlr),e(WF,tW),e(tW,Ulr),e(WF,Jlr),e(Ja,Ylr),e(Ja,QF),e(QF,a1e),e(a1e,Klr),e(QF,Zlr),e(QF,aW),e(aW,eir),e(QF,oir),e(bo,rir),e(bo,HF),e(HF,tir),e(HF,n1e),e(n1e,air),e(HF,nir),e(HF,s1e),e(s1e,sir),e(bo,lir),M(UF,bo,null),b(f,dje,u),b(f,qd,u),e(qd,JF),e(JF,l1e),M(n8,l1e,null),e(qd,iir),e(qd,i1e),e(i1e,dir),b(f,cje,u),b(f,Jo,u),M(s8,Jo,null),e(Jo,cir),e(Jo,jd),e(jd,fir),e(jd,nW),e(nW,mir),e(jd,gir),e(jd,sW),e(sW,hir),e(jd,pir),e(Jo,_ir),e(Jo,l8),e(l8,uir),e(l8,d1e),e(d1e,bir),e(l8,vir),e(Jo,Fir),e(Jo,At),M(i8,At,null),e(At,Tir),e(At,c1e),e(c1e,Mir),e(At,Eir),e(At,Dd),e(Dd,Cir),e(Dd,f1e),e(f1e,wir),e(Dd,Air),e(Dd,lW),e(lW,yir),e(Dd,Lir),e(At,xir),M(YF,At,null),e(Jo,$ir),e(Jo,vo),M(d8,vo,null),e(vo,kir),e(vo,m1e),e(m1e,Sir),e(vo,Rir),e(vo,Ya),e(Ya,Pir),e(Ya,g1e),e(g1e,Bir),e(Ya,Iir),e(Ya,h1e),e(h1e,Nir),e(Ya,qir),e(Ya,p1e),e(p1e,jir),e(Ya,Dir),e(vo,Gir),e(vo,_1e),e(_1e,KF),e(KF,u1e),e(u1e,Oir),e(KF,Vir),e(KF,iW),e(iW,Xir),e(KF,zir),e(vo,Wir),e(vo,ZF),e(ZF,Qir),e(ZF,b1e),e(b1e,Hir),e(ZF,Uir),e(ZF,v1e),e(v1e,Jir),e(vo,Yir),M(eT,vo,null),b(f,fje,u),b(f,Gd,u),e(Gd,oT),e(oT,F1e),M(c8,F1e,null),e(Gd,Kir),e(Gd,T1e),e(T1e,Zir),b(f,mje,u),b(f,Yo,u),M(f8,Yo,null),e(Yo,edr),e(Yo,Od),e(Od,odr),e(Od,dW),e(dW,rdr),e(Od,tdr),e(Od,cW),e(cW,adr),e(Od,ndr),e(Yo,sdr),e(Yo,m8),e(m8,ldr),e(m8,M1e),e(M1e,idr),e(m8,ddr),e(Yo,cdr),e(Yo,yt),M(g8,yt,null),e(yt,fdr),e(yt,E1e),e(E1e,mdr),e(yt,gdr),e(yt,Vd),e(Vd,hdr),e(Vd,C1e),e(C1e,pdr),e(Vd,_dr),e(Vd,fW),e(fW,udr),e(Vd,bdr),e(yt,vdr),M(rT,yt,null),e(Yo,Fdr),e(Yo,wr),M(h8,wr,null),e(wr,Tdr),e(wr,w1e),e(w1e,Mdr),e(wr,Edr),e(wr,Ka),e(Ka,Cdr),e(Ka,A1e),e(A1e,wdr),e(Ka,Adr),e(Ka,y1e),e(y1e,ydr),e(Ka,Ldr),e(Ka,L1e),e(L1e,xdr),e(Ka,$dr),e(wr,kdr),e(wr,q),e(q,tT),e(tT,x1e),e(x1e,Sdr),e(tT,Rdr),e(tT,mW),e(mW,Pdr),e(tT,Bdr),e(q,Idr),e(q,aT),e(aT,$1e),e($1e,Ndr),e(aT,qdr),e(aT,gW),e(gW,jdr),e(aT,Ddr),e(q,Gdr),e(q,nT),e(nT,k1e),e(k1e,Odr),e(nT,Vdr),e(nT,hW),e(hW,Xdr),e(nT,zdr),e(q,Wdr),e(q,sT),e(sT,S1e),e(S1e,Qdr),e(sT,Hdr),e(sT,pW),e(pW,Udr),e(sT,Jdr),e(q,Ydr),e(q,lT),e(lT,R1e),e(R1e,Kdr),e(lT,Zdr),e(lT,_W),e(_W,ecr),e(lT,ocr),e(q,rcr),e(q,iT),e(iT,P1e),e(P1e,tcr),e(iT,acr),e(iT,uW),e(uW,ncr),e(iT,scr),e(q,lcr),e(q,dT),e(dT,B1e),e(B1e,icr),e(dT,dcr),e(dT,bW),e(bW,ccr),e(dT,fcr),e(q,mcr),e(q,cT),e(cT,I1e),e(I1e,gcr),e(cT,hcr),e(cT,vW),e(vW,pcr),e(cT,_cr),e(q,ucr),e(q,fT),e(fT,N1e),e(N1e,bcr),e(fT,vcr),e(fT,FW),e(FW,Fcr),e(fT,Tcr),e(q,Mcr),e(q,mT),e(mT,q1e),e(q1e,Ecr),e(mT,Ccr),e(mT,TW),e(TW,wcr),e(mT,Acr),e(q,ycr),e(q,gT),e(gT,j1e),e(j1e,Lcr),e(gT,xcr),e(gT,MW),e(MW,$cr),e(gT,kcr),e(q,Scr),e(q,hT),e(hT,D1e),e(D1e,Rcr),e(hT,Pcr),e(hT,EW),e(EW,Bcr),e(hT,Icr),e(q,Ncr),e(q,pT),e(pT,G1e),e(G1e,qcr),e(pT,jcr),e(pT,CW),e(CW,Dcr),e(pT,Gcr),e(q,Ocr),e(q,_T),e(_T,O1e),e(O1e,Vcr),e(_T,Xcr),e(_T,wW),e(wW,zcr),e(_T,Wcr),e(q,Qcr),e(q,uT),e(uT,V1e),e(V1e,Hcr),e(uT,Ucr),e(uT,AW),e(AW,Jcr),e(uT,Ycr),e(q,Kcr),e(q,bT),e(bT,X1e),e(X1e,Zcr),e(bT,efr),e(bT,yW),e(yW,ofr),e(bT,rfr),e(q,tfr),e(q,vT),e(vT,z1e),e(z1e,afr),e(vT,nfr),e(vT,LW),e(LW,sfr),e(vT,lfr),e(q,ifr),e(q,Is),e(Is,W1e),e(W1e,dfr),e(Is,cfr),e(Is,xW),e(xW,ffr),e(Is,mfr),e(Is,$W),e($W,gfr),e(Is,hfr),e(q,pfr),e(q,FT),e(FT,Q1e),e(Q1e,_fr),e(FT,ufr),e(FT,kW),e(kW,bfr),e(FT,vfr),e(q,Ffr),e(q,TT),e(TT,H1e),e(H1e,Tfr),e(TT,Mfr),e(TT,SW),e(SW,Efr),e(TT,Cfr),e(q,wfr),e(q,MT),e(MT,U1e),e(U1e,Afr),e(MT,yfr),e(MT,RW),e(RW,Lfr),e(MT,xfr),e(q,$fr),e(q,ET),e(ET,J1e),e(J1e,kfr),e(ET,Sfr),e(ET,PW),e(PW,Rfr),e(ET,Pfr),e(q,Bfr),e(q,CT),e(CT,Y1e),e(Y1e,Ifr),e(CT,Nfr),e(CT,BW),e(BW,qfr),e(CT,jfr),e(q,Dfr),e(q,wT),e(wT,K1e),e(K1e,Gfr),e(wT,Ofr),e(wT,IW),e(IW,Vfr),e(wT,Xfr),e(q,zfr),e(q,AT),e(AT,Z1e),e(Z1e,Wfr),e(AT,Qfr),e(AT,NW),e(NW,Hfr),e(AT,Ufr),e(q,Jfr),e(q,yT),e(yT,ebe),e(ebe,Yfr),e(yT,Kfr),e(yT,qW),e(qW,Zfr),e(yT,emr),e(q,omr),e(q,LT),e(LT,obe),e(obe,rmr),e(LT,tmr),e(LT,jW),e(jW,amr),e(LT,nmr),e(q,smr),e(q,xT),e(xT,rbe),e(rbe,lmr),e(xT,imr),e(xT,DW),e(DW,dmr),e(xT,cmr),e(q,fmr),e(q,$T),e($T,tbe),e(tbe,mmr),e($T,gmr),e($T,GW),e(GW,hmr),e($T,pmr),e(q,_mr),e(q,kT),e(kT,abe),e(abe,umr),e(kT,bmr),e(kT,OW),e(OW,vmr),e(kT,Fmr),e(q,Tmr),e(q,ST),e(ST,nbe),e(nbe,Mmr),e(ST,Emr),e(ST,VW),e(VW,Cmr),e(ST,wmr),e(q,Amr),e(q,RT),e(RT,sbe),e(sbe,ymr),e(RT,Lmr),e(RT,XW),e(XW,xmr),e(RT,$mr),e(q,kmr),e(q,PT),e(PT,lbe),e(lbe,Smr),e(PT,Rmr),e(PT,zW),e(zW,Pmr),e(PT,Bmr),e(q,Imr),e(q,BT),e(BT,ibe),e(ibe,Nmr),e(BT,qmr),e(BT,WW),e(WW,jmr),e(BT,Dmr),e(q,Gmr),e(q,IT),e(IT,dbe),e(dbe,Omr),e(IT,Vmr),e(IT,QW),e(QW,Xmr),e(IT,zmr),e(q,Wmr),e(q,NT),e(NT,cbe),e(cbe,Qmr),e(NT,Hmr),e(NT,HW),e(HW,Umr),e(NT,Jmr),e(q,Ymr),e(q,qT),e(qT,fbe),e(fbe,Kmr),e(qT,Zmr),e(qT,UW),e(UW,egr),e(qT,ogr),e(q,rgr),e(q,jT),e(jT,mbe),e(mbe,tgr),e(jT,agr),e(jT,JW),e(JW,ngr),e(jT,sgr),e(q,lgr),e(q,DT),e(DT,gbe),e(gbe,igr),e(DT,dgr),e(DT,YW),e(YW,cgr),e(DT,fgr),e(q,mgr),e(q,GT),e(GT,hbe),e(hbe,ggr),e(GT,hgr),e(GT,KW),e(KW,pgr),e(GT,_gr),e(q,ugr),e(q,OT),e(OT,pbe),e(pbe,bgr),e(OT,vgr),e(OT,ZW),e(ZW,Fgr),e(OT,Tgr),e(q,Mgr),e(q,VT),e(VT,_be),e(_be,Egr),e(VT,Cgr),e(VT,eQ),e(eQ,wgr),e(VT,Agr),e(q,ygr),e(q,XT),e(XT,ube),e(ube,Lgr),e(XT,xgr),e(XT,oQ),e(oQ,$gr),e(XT,kgr),e(q,Sgr),e(q,zT),e(zT,bbe),e(bbe,Rgr),e(zT,Pgr),e(zT,rQ),e(rQ,Bgr),e(zT,Igr),e(q,Ngr),e(q,WT),e(WT,vbe),e(vbe,qgr),e(WT,jgr),e(WT,tQ),e(tQ,Dgr),e(WT,Ggr),e(q,Ogr),e(q,QT),e(QT,Fbe),e(Fbe,Vgr),e(QT,Xgr),e(QT,aQ),e(aQ,zgr),e(QT,Wgr),e(wr,Qgr),M(HT,wr,null),b(f,gje,u),b(f,Xd,u),e(Xd,UT),e(UT,Tbe),M(p8,Tbe,null),e(Xd,Hgr),e(Xd,Mbe),e(Mbe,Ugr),b(f,hje,u),b(f,Ko,u),M(_8,Ko,null),e(Ko,Jgr),e(Ko,zd),e(zd,Ygr),e(zd,nQ),e(nQ,Kgr),e(zd,Zgr),e(zd,sQ),e(sQ,ehr),e(zd,ohr),e(Ko,rhr),e(Ko,u8),e(u8,thr),e(u8,Ebe),e(Ebe,ahr),e(u8,nhr),e(Ko,shr),e(Ko,Lt),M(b8,Lt,null),e(Lt,lhr),e(Lt,Cbe),e(Cbe,ihr),e(Lt,dhr),e(Lt,Wd),e(Wd,chr),e(Wd,wbe),e(wbe,fhr),e(Wd,mhr),e(Wd,lQ),e(lQ,ghr),e(Wd,hhr),e(Lt,phr),M(JT,Lt,null),e(Ko,_hr),e(Ko,Ar),M(v8,Ar,null),e(Ar,uhr),e(Ar,Abe),e(Abe,bhr),e(Ar,vhr),e(Ar,Za),e(Za,Fhr),e(Za,ybe),e(ybe,Thr),e(Za,Mhr),e(Za,Lbe),e(Lbe,Ehr),e(Za,Chr),e(Za,xbe),e(xbe,whr),e(Za,Ahr),e(Ar,yhr),e(Ar,se),e(se,YT),e(YT,$be),e($be,Lhr),e(YT,xhr),e(YT,iQ),e(iQ,$hr),e(YT,khr),e(se,Shr),e(se,KT),e(KT,kbe),e(kbe,Rhr),e(KT,Phr),e(KT,dQ),e(dQ,Bhr),e(KT,Ihr),e(se,Nhr),e(se,ZT),e(ZT,Sbe),e(Sbe,qhr),e(ZT,jhr),e(ZT,cQ),e(cQ,Dhr),e(ZT,Ghr),e(se,Ohr),e(se,e7),e(e7,Rbe),e(Rbe,Vhr),e(e7,Xhr),e(e7,fQ),e(fQ,zhr),e(e7,Whr),e(se,Qhr),e(se,o7),e(o7,Pbe),e(Pbe,Hhr),e(o7,Uhr),e(o7,mQ),e(mQ,Jhr),e(o7,Yhr),e(se,Khr),e(se,r7),e(r7,Bbe),e(Bbe,Zhr),e(r7,epr),e(r7,gQ),e(gQ,opr),e(r7,rpr),e(se,tpr),e(se,t7),e(t7,Ibe),e(Ibe,apr),e(t7,npr),e(t7,hQ),e(hQ,spr),e(t7,lpr),e(se,ipr),e(se,a7),e(a7,Nbe),e(Nbe,dpr),e(a7,cpr),e(a7,pQ),e(pQ,fpr),e(a7,mpr),e(se,gpr),e(se,n7),e(n7,qbe),e(qbe,hpr),e(n7,ppr),e(n7,_Q),e(_Q,_pr),e(n7,upr),e(se,bpr),e(se,s7),e(s7,jbe),e(jbe,vpr),e(s7,Fpr),e(s7,uQ),e(uQ,Tpr),e(s7,Mpr),e(se,Epr),e(se,l7),e(l7,Dbe),e(Dbe,Cpr),e(l7,wpr),e(l7,bQ),e(bQ,Apr),e(l7,ypr),e(se,Lpr),e(se,i7),e(i7,Gbe),e(Gbe,xpr),e(i7,$pr),e(i7,vQ),e(vQ,kpr),e(i7,Spr),e(se,Rpr),e(se,d7),e(d7,Obe),e(Obe,Ppr),e(d7,Bpr),e(d7,FQ),e(FQ,Ipr),e(d7,Npr),e(se,qpr),e(se,c7),e(c7,Vbe),e(Vbe,jpr),e(c7,Dpr),e(c7,TQ),e(TQ,Gpr),e(c7,Opr),e(se,Vpr),e(se,f7),e(f7,Xbe),e(Xbe,Xpr),e(f7,zpr),e(f7,MQ),e(MQ,Wpr),e(f7,Qpr),e(se,Hpr),e(se,m7),e(m7,zbe),e(zbe,Upr),e(m7,Jpr),e(m7,EQ),e(EQ,Ypr),e(m7,Kpr),e(se,Zpr),e(se,g7),e(g7,Wbe),e(Wbe,e_r),e(g7,o_r),e(g7,CQ),e(CQ,r_r),e(g7,t_r),e(se,a_r),e(se,h7),e(h7,Qbe),e(Qbe,n_r),e(h7,s_r),e(h7,wQ),e(wQ,l_r),e(h7,i_r),e(se,d_r),e(se,p7),e(p7,Hbe),e(Hbe,c_r),e(p7,f_r),e(p7,AQ),e(AQ,m_r),e(p7,g_r),e(se,h_r),e(se,_7),e(_7,Ube),e(Ube,p_r),e(_7,__r),e(_7,yQ),e(yQ,u_r),e(_7,b_r),e(se,v_r),e(se,u7),e(u7,Jbe),e(Jbe,F_r),e(u7,T_r),e(u7,LQ),e(LQ,M_r),e(u7,E_r),e(se,C_r),e(se,b7),e(b7,Ybe),e(Ybe,w_r),e(b7,A_r),e(b7,xQ),e(xQ,y_r),e(b7,L_r),e(se,x_r),e(se,v7),e(v7,Kbe),e(Kbe,$_r),e(v7,k_r),e(v7,$Q),e($Q,S_r),e(v7,R_r),e(Ar,P_r),M(F7,Ar,null),b(f,pje,u),b(f,Qd,u),e(Qd,T7),e(T7,Zbe),M(F8,Zbe,null),e(Qd,B_r),e(Qd,eve),e(eve,I_r),b(f,_je,u),b(f,Zo,u),M(T8,Zo,null),e(Zo,N_r),e(Zo,Hd),e(Hd,q_r),e(Hd,kQ),e(kQ,j_r),e(Hd,D_r),e(Hd,SQ),e(SQ,G_r),e(Hd,O_r),e(Zo,V_r),e(Zo,M8),e(M8,X_r),e(M8,ove),e(ove,z_r),e(M8,W_r),e(Zo,Q_r),e(Zo,xt),M(E8,xt,null),e(xt,H_r),e(xt,rve),e(rve,U_r),e(xt,J_r),e(xt,Ud),e(Ud,Y_r),e(Ud,tve),e(tve,K_r),e(Ud,Z_r),e(Ud,RQ),e(RQ,eur),e(Ud,our),e(xt,rur),M(M7,xt,null),e(Zo,tur),e(Zo,yr),M(C8,yr,null),e(yr,aur),e(yr,ave),e(ave,nur),e(yr,sur),e(yr,en),e(en,lur),e(en,nve),e(nve,iur),e(en,dur),e(en,sve),e(sve,cur),e(en,fur),e(en,lve),e(lve,mur),e(en,gur),e(yr,hur),e(yr,Me),e(Me,E7),e(E7,ive),e(ive,pur),e(E7,_ur),e(E7,PQ),e(PQ,uur),e(E7,bur),e(Me,vur),e(Me,C7),e(C7,dve),e(dve,Fur),e(C7,Tur),e(C7,BQ),e(BQ,Mur),e(C7,Eur),e(Me,Cur),e(Me,w7),e(w7,cve),e(cve,wur),e(w7,Aur),e(w7,IQ),e(IQ,yur),e(w7,Lur),e(Me,xur),e(Me,A7),e(A7,fve),e(fve,$ur),e(A7,kur),e(A7,NQ),e(NQ,Sur),e(A7,Rur),e(Me,Pur),e(Me,y7),e(y7,mve),e(mve,Bur),e(y7,Iur),e(y7,qQ),e(qQ,Nur),e(y7,qur),e(Me,jur),e(Me,L7),e(L7,gve),e(gve,Dur),e(L7,Gur),e(L7,jQ),e(jQ,Our),e(L7,Vur),e(Me,Xur),e(Me,x7),e(x7,hve),e(hve,zur),e(x7,Wur),e(x7,DQ),e(DQ,Qur),e(x7,Hur),e(Me,Uur),e(Me,$7),e($7,pve),e(pve,Jur),e($7,Yur),e($7,GQ),e(GQ,Kur),e($7,Zur),e(Me,e2r),e(Me,k7),e(k7,_ve),e(_ve,o2r),e(k7,r2r),e(k7,OQ),e(OQ,t2r),e(k7,a2r),e(Me,n2r),e(Me,S7),e(S7,uve),e(uve,s2r),e(S7,l2r),e(S7,VQ),e(VQ,i2r),e(S7,d2r),e(Me,c2r),e(Me,R7),e(R7,bve),e(bve,f2r),e(R7,m2r),e(R7,XQ),e(XQ,g2r),e(R7,h2r),e(Me,p2r),e(Me,P7),e(P7,vve),e(vve,_2r),e(P7,u2r),e(P7,zQ),e(zQ,b2r),e(P7,v2r),e(yr,F2r),M(B7,yr,null),b(f,uje,u),b(f,Jd,u),e(Jd,I7),e(I7,Fve),M(w8,Fve,null),e(Jd,T2r),e(Jd,Tve),e(Tve,M2r),b(f,bje,u),b(f,er,u),M(A8,er,null),e(er,E2r),e(er,Yd),e(Yd,C2r),e(Yd,WQ),e(WQ,w2r),e(Yd,A2r),e(Yd,QQ),e(QQ,y2r),e(Yd,L2r),e(er,x2r),e(er,y8),e(y8,$2r),e(y8,Mve),e(Mve,k2r),e(y8,S2r),e(er,R2r),e(er,$t),M(L8,$t,null),e($t,P2r),e($t,Eve),e(Eve,B2r),e($t,I2r),e($t,Kd),e(Kd,N2r),e(Kd,Cve),e(Cve,q2r),e(Kd,j2r),e(Kd,HQ),e(HQ,D2r),e(Kd,G2r),e($t,O2r),M(N7,$t,null),e(er,V2r),e(er,Lr),M(x8,Lr,null),e(Lr,X2r),e(Lr,wve),e(wve,z2r),e(Lr,W2r),e(Lr,on),e(on,Q2r),e(on,Ave),e(Ave,H2r),e(on,U2r),e(on,yve),e(yve,J2r),e(on,Y2r),e(on,Lve),e(Lve,K2r),e(on,Z2r),e(Lr,e1r),e(Lr,rn),e(rn,q7),e(q7,xve),e(xve,o1r),e(q7,r1r),e(q7,UQ),e(UQ,t1r),e(q7,a1r),e(rn,n1r),e(rn,j7),e(j7,$ve),e($ve,s1r),e(j7,l1r),e(j7,JQ),e(JQ,i1r),e(j7,d1r),e(rn,c1r),e(rn,D7),e(D7,kve),e(kve,f1r),e(D7,m1r),e(D7,YQ),e(YQ,g1r),e(D7,h1r),e(rn,p1r),e(rn,G7),e(G7,Sve),e(Sve,_1r),e(G7,u1r),e(G7,KQ),e(KQ,b1r),e(G7,v1r),e(Lr,F1r),M(O7,Lr,null),b(f,vje,u),b(f,Zd,u),e(Zd,V7),e(V7,Rve),M($8,Rve,null),e(Zd,T1r),e(Zd,Pve),e(Pve,M1r),b(f,Fje,u),b(f,or,u),M(k8,or,null),e(or,E1r),e(or,ec),e(ec,C1r),e(ec,ZQ),e(ZQ,w1r),e(ec,A1r),e(ec,eH),e(eH,y1r),e(ec,L1r),e(or,x1r),e(or,S8),e(S8,$1r),e(S8,Bve),e(Bve,k1r),e(S8,S1r),e(or,R1r),e(or,kt),M(R8,kt,null),e(kt,P1r),e(kt,Ive),e(Ive,B1r),e(kt,I1r),e(kt,oc),e(oc,N1r),e(oc,Nve),e(Nve,q1r),e(oc,j1r),e(oc,oH),e(oH,D1r),e(oc,G1r),e(kt,O1r),M(X7,kt,null),e(or,V1r),e(or,xr),M(P8,xr,null),e(xr,X1r),e(xr,qve),e(qve,z1r),e(xr,W1r),e(xr,tn),e(tn,Q1r),e(tn,jve),e(jve,H1r),e(tn,U1r),e(tn,Dve),e(Dve,J1r),e(tn,Y1r),e(tn,Gve),e(Gve,K1r),e(tn,Z1r),e(xr,ebr),e(xr,ie),e(ie,z7),e(z7,Ove),e(Ove,obr),e(z7,rbr),e(z7,rH),e(rH,tbr),e(z7,abr),e(ie,nbr),e(ie,W7),e(W7,Vve),e(Vve,sbr),e(W7,lbr),e(W7,tH),e(tH,ibr),e(W7,dbr),e(ie,cbr),e(ie,Q7),e(Q7,Xve),e(Xve,fbr),e(Q7,mbr),e(Q7,aH),e(aH,gbr),e(Q7,hbr),e(ie,pbr),e(ie,H7),e(H7,zve),e(zve,_br),e(H7,ubr),e(H7,nH),e(nH,bbr),e(H7,vbr),e(ie,Fbr),e(ie,U7),e(U7,Wve),e(Wve,Tbr),e(U7,Mbr),e(U7,sH),e(sH,Ebr),e(U7,Cbr),e(ie,wbr),e(ie,J7),e(J7,Qve),e(Qve,Abr),e(J7,ybr),e(J7,lH),e(lH,Lbr),e(J7,xbr),e(ie,$br),e(ie,Y7),e(Y7,Hve),e(Hve,kbr),e(Y7,Sbr),e(Y7,iH),e(iH,Rbr),e(Y7,Pbr),e(ie,Bbr),e(ie,K7),e(K7,Uve),e(Uve,Ibr),e(K7,Nbr),e(K7,dH),e(dH,qbr),e(K7,jbr),e(ie,Dbr),e(ie,Z7),e(Z7,Jve),e(Jve,Gbr),e(Z7,Obr),e(Z7,cH),e(cH,Vbr),e(Z7,Xbr),e(ie,zbr),e(ie,eM),e(eM,Yve),e(Yve,Wbr),e(eM,Qbr),e(eM,fH),e(fH,Hbr),e(eM,Ubr),e(ie,Jbr),e(ie,oM),e(oM,Kve),e(Kve,Ybr),e(oM,Kbr),e(oM,mH),e(mH,Zbr),e(oM,evr),e(ie,ovr),e(ie,rM),e(rM,Zve),e(Zve,rvr),e(rM,tvr),e(rM,gH),e(gH,avr),e(rM,nvr),e(ie,svr),e(ie,tM),e(tM,e3e),e(e3e,lvr),e(tM,ivr),e(tM,hH),e(hH,dvr),e(tM,cvr),e(ie,fvr),e(ie,aM),e(aM,o3e),e(o3e,mvr),e(aM,gvr),e(aM,pH),e(pH,hvr),e(aM,pvr),e(ie,_vr),e(ie,nM),e(nM,r3e),e(r3e,uvr),e(nM,bvr),e(nM,_H),e(_H,vvr),e(nM,Fvr),e(ie,Tvr),e(ie,sM),e(sM,t3e),e(t3e,Mvr),e(sM,Evr),e(sM,uH),e(uH,Cvr),e(sM,wvr),e(ie,Avr),e(ie,lM),e(lM,a3e),e(a3e,yvr),e(lM,Lvr),e(lM,bH),e(bH,xvr),e(lM,$vr),e(ie,kvr),e(ie,iM),e(iM,n3e),e(n3e,Svr),e(iM,Rvr),e(iM,vH),e(vH,Pvr),e(iM,Bvr),e(ie,Ivr),e(ie,dM),e(dM,s3e),e(s3e,Nvr),e(dM,qvr),e(dM,FH),e(FH,jvr),e(dM,Dvr),e(ie,Gvr),e(ie,cM),e(cM,l3e),e(l3e,Ovr),e(cM,Vvr),e(cM,TH),e(TH,Xvr),e(cM,zvr),e(xr,Wvr),M(fM,xr,null),b(f,Tje,u),b(f,rc,u),e(rc,mM),e(mM,i3e),M(B8,i3e,null),e(rc,Qvr),e(rc,d3e),e(d3e,Hvr),b(f,Mje,u),b(f,rr,u),M(I8,rr,null),e(rr,Uvr),e(rr,tc),e(tc,Jvr),e(tc,MH),e(MH,Yvr),e(tc,Kvr),e(tc,EH),e(EH,Zvr),e(tc,e3r),e(rr,o3r),e(rr,N8),e(N8,r3r),e(N8,c3e),e(c3e,t3r),e(N8,a3r),e(rr,n3r),e(rr,St),M(q8,St,null),e(St,s3r),e(St,f3e),e(f3e,l3r),e(St,i3r),e(St,ac),e(ac,d3r),e(ac,m3e),e(m3e,c3r),e(ac,f3r),e(ac,CH),e(CH,m3r),e(ac,g3r),e(St,h3r),M(gM,St,null),e(rr,p3r),e(rr,$r),M(j8,$r,null),e($r,_3r),e($r,g3e),e(g3e,u3r),e($r,b3r),e($r,an),e(an,v3r),e(an,h3e),e(h3e,F3r),e(an,T3r),e(an,p3e),e(p3e,M3r),e(an,E3r),e(an,_3e),e(_3e,C3r),e(an,w3r),e($r,A3r),e($r,ye),e(ye,hM),e(hM,u3e),e(u3e,y3r),e(hM,L3r),e(hM,wH),e(wH,x3r),e(hM,$3r),e(ye,k3r),e(ye,pM),e(pM,b3e),e(b3e,S3r),e(pM,R3r),e(pM,AH),e(AH,P3r),e(pM,B3r),e(ye,I3r),e(ye,_M),e(_M,v3e),e(v3e,N3r),e(_M,q3r),e(_M,yH),e(yH,j3r),e(_M,D3r),e(ye,G3r),e(ye,uM),e(uM,F3e),e(F3e,O3r),e(uM,V3r),e(uM,LH),e(LH,X3r),e(uM,z3r),e(ye,W3r),e(ye,bM),e(bM,T3e),e(T3e,Q3r),e(bM,H3r),e(bM,xH),e(xH,U3r),e(bM,J3r),e(ye,Y3r),e(ye,vM),e(vM,M3e),e(M3e,K3r),e(vM,Z3r),e(vM,$H),e($H,e0r),e(vM,o0r),e(ye,r0r),e(ye,FM),e(FM,E3e),e(E3e,t0r),e(FM,a0r),e(FM,kH),e(kH,n0r),e(FM,s0r),e(ye,l0r),e(ye,TM),e(TM,C3e),e(C3e,i0r),e(TM,d0r),e(TM,SH),e(SH,c0r),e(TM,f0r),e(ye,m0r),e(ye,MM),e(MM,w3e),e(w3e,g0r),e(MM,h0r),e(MM,RH),e(RH,p0r),e(MM,_0r),e(ye,u0r),e(ye,EM),e(EM,A3e),e(A3e,b0r),e(EM,v0r),e(EM,PH),e(PH,F0r),e(EM,T0r),e($r,M0r),M(CM,$r,null),b(f,Eje,u),b(f,nc,u),e(nc,wM),e(wM,y3e),M(D8,y3e,null),e(nc,E0r),e(nc,L3e),e(L3e,C0r),b(f,Cje,u),b(f,tr,u),M(G8,tr,null),e(tr,w0r),e(tr,sc),e(sc,A0r),e(sc,BH),e(BH,y0r),e(sc,L0r),e(sc,IH),e(IH,x0r),e(sc,$0r),e(tr,k0r),e(tr,O8),e(O8,S0r),e(O8,x3e),e(x3e,R0r),e(O8,P0r),e(tr,B0r),e(tr,Rt),M(V8,Rt,null),e(Rt,I0r),e(Rt,$3e),e($3e,N0r),e(Rt,q0r),e(Rt,lc),e(lc,j0r),e(lc,k3e),e(k3e,D0r),e(lc,G0r),e(lc,NH),e(NH,O0r),e(lc,V0r),e(Rt,X0r),M(AM,Rt,null),e(tr,z0r),e(tr,kr),M(X8,kr,null),e(kr,W0r),e(kr,S3e),e(S3e,Q0r),e(kr,H0r),e(kr,nn),e(nn,U0r),e(nn,R3e),e(R3e,J0r),e(nn,Y0r),e(nn,P3e),e(P3e,K0r),e(nn,Z0r),e(nn,B3e),e(B3e,eFr),e(nn,oFr),e(kr,rFr),e(kr,oe),e(oe,yM),e(yM,I3e),e(I3e,tFr),e(yM,aFr),e(yM,qH),e(qH,nFr),e(yM,sFr),e(oe,lFr),e(oe,LM),e(LM,N3e),e(N3e,iFr),e(LM,dFr),e(LM,jH),e(jH,cFr),e(LM,fFr),e(oe,mFr),e(oe,xM),e(xM,q3e),e(q3e,gFr),e(xM,hFr),e(xM,DH),e(DH,pFr),e(xM,_Fr),e(oe,uFr),e(oe,$M),e($M,j3e),e(j3e,bFr),e($M,vFr),e($M,GH),e(GH,FFr),e($M,TFr),e(oe,MFr),e(oe,kM),e(kM,D3e),e(D3e,EFr),e(kM,CFr),e(kM,OH),e(OH,wFr),e(kM,AFr),e(oe,yFr),e(oe,SM),e(SM,G3e),e(G3e,LFr),e(SM,xFr),e(SM,VH),e(VH,$Fr),e(SM,kFr),e(oe,SFr),e(oe,RM),e(RM,O3e),e(O3e,RFr),e(RM,PFr),e(RM,XH),e(XH,BFr),e(RM,IFr),e(oe,NFr),e(oe,PM),e(PM,V3e),e(V3e,qFr),e(PM,jFr),e(PM,zH),e(zH,DFr),e(PM,GFr),e(oe,OFr),e(oe,BM),e(BM,X3e),e(X3e,VFr),e(BM,XFr),e(BM,WH),e(WH,zFr),e(BM,WFr),e(oe,QFr),e(oe,IM),e(IM,z3e),e(z3e,HFr),e(IM,UFr),e(IM,QH),e(QH,JFr),e(IM,YFr),e(oe,KFr),e(oe,NM),e(NM,W3e),e(W3e,ZFr),e(NM,eTr),e(NM,HH),e(HH,oTr),e(NM,rTr),e(oe,tTr),e(oe,qM),e(qM,Q3e),e(Q3e,aTr),e(qM,nTr),e(qM,UH),e(UH,sTr),e(qM,lTr),e(oe,iTr),e(oe,jM),e(jM,H3e),e(H3e,dTr),e(jM,cTr),e(jM,JH),e(JH,fTr),e(jM,mTr),e(oe,gTr),e(oe,DM),e(DM,U3e),e(U3e,hTr),e(DM,pTr),e(DM,YH),e(YH,_Tr),e(DM,uTr),e(oe,bTr),e(oe,GM),e(GM,J3e),e(J3e,vTr),e(GM,FTr),e(GM,KH),e(KH,TTr),e(GM,MTr),e(oe,ETr),e(oe,OM),e(OM,Y3e),e(Y3e,CTr),e(OM,wTr),e(OM,ZH),e(ZH,ATr),e(OM,yTr),e(oe,LTr),e(oe,VM),e(VM,K3e),e(K3e,xTr),e(VM,$Tr),e(VM,eU),e(eU,kTr),e(VM,STr),e(oe,RTr),e(oe,XM),e(XM,Z3e),e(Z3e,PTr),e(XM,BTr),e(XM,oU),e(oU,ITr),e(XM,NTr),e(oe,qTr),e(oe,zM),e(zM,e0e),e(e0e,jTr),e(zM,DTr),e(zM,rU),e(rU,GTr),e(zM,OTr),e(oe,VTr),e(oe,WM),e(WM,o0e),e(o0e,XTr),e(WM,zTr),e(WM,tU),e(tU,WTr),e(WM,QTr),e(oe,HTr),e(oe,QM),e(QM,r0e),e(r0e,UTr),e(QM,JTr),e(QM,aU),e(aU,YTr),e(QM,KTr),e(oe,ZTr),e(oe,HM),e(HM,t0e),e(t0e,e7r),e(HM,o7r),e(HM,nU),e(nU,r7r),e(HM,t7r),e(oe,a7r),e(oe,UM),e(UM,a0e),e(a0e,n7r),e(UM,s7r),e(UM,sU),e(sU,l7r),e(UM,i7r),e(oe,d7r),e(oe,JM),e(JM,n0e),e(n0e,c7r),e(JM,f7r),e(JM,lU),e(lU,m7r),e(JM,g7r),e(oe,h7r),e(oe,YM),e(YM,s0e),e(s0e,p7r),e(YM,_7r),e(YM,iU),e(iU,u7r),e(YM,b7r),e(oe,v7r),e(oe,KM),e(KM,l0e),e(l0e,F7r),e(KM,T7r),e(KM,dU),e(dU,M7r),e(KM,E7r),e(kr,C7r),M(ZM,kr,null),b(f,wje,u),b(f,ic,u),e(ic,e4),e(e4,i0e),M(z8,i0e,null),e(ic,w7r),e(ic,d0e),e(d0e,A7r),b(f,Aje,u),b(f,ar,u),M(W8,ar,null),e(ar,y7r),e(ar,dc),e(dc,L7r),e(dc,cU),e(cU,x7r),e(dc,$7r),e(dc,fU),e(fU,k7r),e(dc,S7r),e(ar,R7r),e(ar,Q8),e(Q8,P7r),e(Q8,c0e),e(c0e,B7r),e(Q8,I7r),e(ar,N7r),e(ar,Pt),M(H8,Pt,null),e(Pt,q7r),e(Pt,f0e),e(f0e,j7r),e(Pt,D7r),e(Pt,cc),e(cc,G7r),e(cc,m0e),e(m0e,O7r),e(cc,V7r),e(cc,mU),e(mU,X7r),e(cc,z7r),e(Pt,W7r),M(o4,Pt,null),e(ar,Q7r),e(ar,Sr),M(U8,Sr,null),e(Sr,H7r),e(Sr,g0e),e(g0e,U7r),e(Sr,J7r),e(Sr,sn),e(sn,Y7r),e(sn,h0e),e(h0e,K7r),e(sn,Z7r),e(sn,p0e),e(p0e,eMr),e(sn,oMr),e(sn,_0e),e(_0e,rMr),e(sn,tMr),e(Sr,aMr),e(Sr,pe),e(pe,r4),e(r4,u0e),e(u0e,nMr),e(r4,sMr),e(r4,gU),e(gU,lMr),e(r4,iMr),e(pe,dMr),e(pe,t4),e(t4,b0e),e(b0e,cMr),e(t4,fMr),e(t4,hU),e(hU,mMr),e(t4,gMr),e(pe,hMr),e(pe,a4),e(a4,v0e),e(v0e,pMr),e(a4,_Mr),e(a4,pU),e(pU,uMr),e(a4,bMr),e(pe,vMr),e(pe,n4),e(n4,F0e),e(F0e,FMr),e(n4,TMr),e(n4,_U),e(_U,MMr),e(n4,EMr),e(pe,CMr),e(pe,s4),e(s4,T0e),e(T0e,wMr),e(s4,AMr),e(s4,uU),e(uU,yMr),e(s4,LMr),e(pe,xMr),e(pe,l4),e(l4,M0e),e(M0e,$Mr),e(l4,kMr),e(l4,bU),e(bU,SMr),e(l4,RMr),e(pe,PMr),e(pe,i4),e(i4,E0e),e(E0e,BMr),e(i4,IMr),e(i4,vU),e(vU,NMr),e(i4,qMr),e(pe,jMr),e(pe,d4),e(d4,C0e),e(C0e,DMr),e(d4,GMr),e(d4,FU),e(FU,OMr),e(d4,VMr),e(pe,XMr),e(pe,c4),e(c4,w0e),e(w0e,zMr),e(c4,WMr),e(c4,TU),e(TU,QMr),e(c4,HMr),e(pe,UMr),e(pe,f4),e(f4,A0e),e(A0e,JMr),e(f4,YMr),e(f4,MU),e(MU,KMr),e(f4,ZMr),e(pe,e4r),e(pe,m4),e(m4,y0e),e(y0e,o4r),e(m4,r4r),e(m4,EU),e(EU,t4r),e(m4,a4r),e(pe,n4r),e(pe,g4),e(g4,L0e),e(L0e,s4r),e(g4,l4r),e(g4,CU),e(CU,i4r),e(g4,d4r),e(pe,c4r),e(pe,h4),e(h4,x0e),e(x0e,f4r),e(h4,m4r),e(h4,wU),e(wU,g4r),e(h4,h4r),e(pe,p4r),e(pe,p4),e(p4,$0e),e($0e,_4r),e(p4,u4r),e(p4,AU),e(AU,b4r),e(p4,v4r),e(pe,F4r),e(pe,_4),e(_4,k0e),e(k0e,T4r),e(_4,M4r),e(_4,yU),e(yU,E4r),e(_4,C4r),e(pe,w4r),e(pe,u4),e(u4,S0e),e(S0e,A4r),e(u4,y4r),e(u4,LU),e(LU,L4r),e(u4,x4r),e(pe,$4r),e(pe,b4),e(b4,R0e),e(R0e,k4r),e(b4,S4r),e(b4,xU),e(xU,R4r),e(b4,P4r),e(Sr,B4r),M(v4,Sr,null),b(f,yje,u),b(f,fc,u),e(fc,F4),e(F4,P0e),M(J8,P0e,null),e(fc,I4r),e(fc,B0e),e(B0e,N4r),b(f,Lje,u),b(f,nr,u),M(Y8,nr,null),e(nr,q4r),e(nr,mc),e(mc,j4r),e(mc,$U),e($U,D4r),e(mc,G4r),e(mc,kU),e(kU,O4r),e(mc,V4r),e(nr,X4r),e(nr,K8),e(K8,z4r),e(K8,I0e),e(I0e,W4r),e(K8,Q4r),e(nr,H4r),e(nr,Bt),M(Z8,Bt,null),e(Bt,U4r),e(Bt,N0e),e(N0e,J4r),e(Bt,Y4r),e(Bt,gc),e(gc,K4r),e(gc,q0e),e(q0e,Z4r),e(gc,eEr),e(gc,SU),e(SU,oEr),e(gc,rEr),e(Bt,tEr),M(T4,Bt,null),e(nr,aEr),e(nr,Rr),M(e9,Rr,null),e(Rr,nEr),e(Rr,j0e),e(j0e,sEr),e(Rr,lEr),e(Rr,ln),e(ln,iEr),e(ln,D0e),e(D0e,dEr),e(ln,cEr),e(ln,G0e),e(G0e,fEr),e(ln,mEr),e(ln,O0e),e(O0e,gEr),e(ln,hEr),e(Rr,pEr),e(Rr,o9),e(o9,M4),e(M4,V0e),e(V0e,_Er),e(M4,uEr),e(M4,RU),e(RU,bEr),e(M4,vEr),e(o9,FEr),e(o9,E4),e(E4,X0e),e(X0e,TEr),e(E4,MEr),e(E4,PU),e(PU,EEr),e(E4,CEr),e(Rr,wEr),M(C4,Rr,null),b(f,xje,u),b(f,hc,u),e(hc,w4),e(w4,z0e),M(r9,z0e,null),e(hc,AEr),e(hc,W0e),e(W0e,yEr),b(f,$je,u),b(f,sr,u),M(t9,sr,null),e(sr,LEr),e(sr,pc),e(pc,xEr),e(pc,BU),e(BU,$Er),e(pc,kEr),e(pc,IU),e(IU,SEr),e(pc,REr),e(sr,PEr),e(sr,a9),e(a9,BEr),e(a9,Q0e),e(Q0e,IEr),e(a9,NEr),e(sr,qEr),e(sr,It),M(n9,It,null),e(It,jEr),e(It,H0e),e(H0e,DEr),e(It,GEr),e(It,_c),e(_c,OEr),e(_c,U0e),e(U0e,VEr),e(_c,XEr),e(_c,NU),e(NU,zEr),e(_c,WEr),e(It,QEr),M(A4,It,null),e(sr,HEr),e(sr,Pr),M(s9,Pr,null),e(Pr,UEr),e(Pr,J0e),e(J0e,JEr),e(Pr,YEr),e(Pr,dn),e(dn,KEr),e(dn,Y0e),e(Y0e,ZEr),e(dn,eCr),e(dn,K0e),e(K0e,oCr),e(dn,rCr),e(dn,Z0e),e(Z0e,tCr),e(dn,aCr),e(Pr,nCr),e(Pr,eFe),e(eFe,y4),e(y4,oFe),e(oFe,sCr),e(y4,lCr),e(y4,qU),e(qU,iCr),e(y4,dCr),e(Pr,cCr),M(L4,Pr,null),b(f,kje,u),b(f,uc,u),e(uc,x4),e(x4,rFe),M(l9,rFe,null),e(uc,fCr),e(uc,tFe),e(tFe,mCr),b(f,Sje,u),b(f,lr,u),M(i9,lr,null),e(lr,gCr),e(lr,bc),e(bc,hCr),e(bc,jU),e(jU,pCr),e(bc,_Cr),e(bc,DU),e(DU,uCr),e(bc,bCr),e(lr,vCr),e(lr,d9),e(d9,FCr),e(d9,aFe),e(aFe,TCr),e(d9,MCr),e(lr,ECr),e(lr,Nt),M(c9,Nt,null),e(Nt,CCr),e(Nt,nFe),e(nFe,wCr),e(Nt,ACr),e(Nt,vc),e(vc,yCr),e(vc,sFe),e(sFe,LCr),e(vc,xCr),e(vc,GU),e(GU,$Cr),e(vc,kCr),e(Nt,SCr),M($4,Nt,null),e(lr,RCr),e(lr,Br),M(f9,Br,null),e(Br,PCr),e(Br,lFe),e(lFe,BCr),e(Br,ICr),e(Br,cn),e(cn,NCr),e(cn,iFe),e(iFe,qCr),e(cn,jCr),e(cn,dFe),e(dFe,DCr),e(cn,GCr),e(cn,cFe),e(cFe,OCr),e(cn,VCr),e(Br,XCr),e(Br,de),e(de,k4),e(k4,fFe),e(fFe,zCr),e(k4,WCr),e(k4,OU),e(OU,QCr),e(k4,HCr),e(de,UCr),e(de,S4),e(S4,mFe),e(mFe,JCr),e(S4,YCr),e(S4,VU),e(VU,KCr),e(S4,ZCr),e(de,e5r),e(de,R4),e(R4,gFe),e(gFe,o5r),e(R4,r5r),e(R4,XU),e(XU,t5r),e(R4,a5r),e(de,n5r),e(de,P4),e(P4,hFe),e(hFe,s5r),e(P4,l5r),e(P4,zU),e(zU,i5r),e(P4,d5r),e(de,c5r),e(de,B4),e(B4,pFe),e(pFe,f5r),e(B4,m5r),e(B4,WU),e(WU,g5r),e(B4,h5r),e(de,p5r),e(de,I4),e(I4,_Fe),e(_Fe,_5r),e(I4,u5r),e(I4,QU),e(QU,b5r),e(I4,v5r),e(de,F5r),e(de,N4),e(N4,uFe),e(uFe,T5r),e(N4,M5r),e(N4,HU),e(HU,E5r),e(N4,C5r),e(de,w5r),e(de,q4),e(q4,bFe),e(bFe,A5r),e(q4,y5r),e(q4,UU),e(UU,L5r),e(q4,x5r),e(de,$5r),e(de,j4),e(j4,vFe),e(vFe,k5r),e(j4,S5r),e(j4,JU),e(JU,R5r),e(j4,P5r),e(de,B5r),e(de,D4),e(D4,FFe),e(FFe,I5r),e(D4,N5r),e(D4,YU),e(YU,q5r),e(D4,j5r),e(de,D5r),e(de,G4),e(G4,TFe),e(TFe,G5r),e(G4,O5r),e(G4,KU),e(KU,V5r),e(G4,X5r),e(de,z5r),e(de,O4),e(O4,MFe),e(MFe,W5r),e(O4,Q5r),e(O4,ZU),e(ZU,H5r),e(O4,U5r),e(de,J5r),e(de,V4),e(V4,EFe),e(EFe,Y5r),e(V4,K5r),e(V4,eJ),e(eJ,Z5r),e(V4,ewr),e(de,owr),e(de,X4),e(X4,CFe),e(CFe,rwr),e(X4,twr),e(X4,oJ),e(oJ,awr),e(X4,nwr),e(de,swr),e(de,z4),e(z4,wFe),e(wFe,lwr),e(z4,iwr),e(z4,rJ),e(rJ,dwr),e(z4,cwr),e(de,fwr),e(de,W4),e(W4,AFe),e(AFe,mwr),e(W4,gwr),e(W4,tJ),e(tJ,hwr),e(W4,pwr),e(de,_wr),e(de,Q4),e(Q4,yFe),e(yFe,uwr),e(Q4,bwr),e(Q4,aJ),e(aJ,vwr),e(Q4,Fwr),e(de,Twr),e(de,H4),e(H4,LFe),e(LFe,Mwr),e(H4,Ewr),e(H4,nJ),e(nJ,Cwr),e(H4,wwr),e(de,Awr),e(de,U4),e(U4,xFe),e(xFe,ywr),e(U4,Lwr),e(U4,sJ),e(sJ,xwr),e(U4,$wr),e(de,kwr),e(de,J4),e(J4,$Fe),e($Fe,Swr),e(J4,Rwr),e(J4,lJ),e(lJ,Pwr),e(J4,Bwr),e(Br,Iwr),M(Y4,Br,null),b(f,Rje,u),b(f,Fc,u),e(Fc,K4),e(K4,kFe),M(m9,kFe,null),e(Fc,Nwr),e(Fc,SFe),e(SFe,qwr),b(f,Pje,u),b(f,ir,u),M(g9,ir,null),e(ir,jwr),e(ir,Tc),e(Tc,Dwr),e(Tc,iJ),e(iJ,Gwr),e(Tc,Owr),e(Tc,dJ),e(dJ,Vwr),e(Tc,Xwr),e(ir,zwr),e(ir,h9),e(h9,Wwr),e(h9,RFe),e(RFe,Qwr),e(h9,Hwr),e(ir,Uwr),e(ir,qt),M(p9,qt,null),e(qt,Jwr),e(qt,PFe),e(PFe,Ywr),e(qt,Kwr),e(qt,Mc),e(Mc,Zwr),e(Mc,BFe),e(BFe,e6r),e(Mc,o6r),e(Mc,cJ),e(cJ,r6r),e(Mc,t6r),e(qt,a6r),M(Z4,qt,null),e(ir,n6r),e(ir,Ir),M(_9,Ir,null),e(Ir,s6r),e(Ir,IFe),e(IFe,l6r),e(Ir,i6r),e(Ir,fn),e(fn,d6r),e(fn,NFe),e(NFe,c6r),e(fn,f6r),e(fn,qFe),e(qFe,m6r),e(fn,g6r),e(fn,jFe),e(jFe,h6r),e(fn,p6r),e(Ir,_6r),e(Ir,ce),e(ce,eE),e(eE,DFe),e(DFe,u6r),e(eE,b6r),e(eE,fJ),e(fJ,v6r),e(eE,F6r),e(ce,T6r),e(ce,oE),e(oE,GFe),e(GFe,M6r),e(oE,E6r),e(oE,mJ),e(mJ,C6r),e(oE,w6r),e(ce,A6r),e(ce,rE),e(rE,OFe),e(OFe,y6r),e(rE,L6r),e(rE,gJ),e(gJ,x6r),e(rE,$6r),e(ce,k6r),e(ce,tE),e(tE,VFe),e(VFe,S6r),e(tE,R6r),e(tE,hJ),e(hJ,P6r),e(tE,B6r),e(ce,I6r),e(ce,aE),e(aE,XFe),e(XFe,N6r),e(aE,q6r),e(aE,pJ),e(pJ,j6r),e(aE,D6r),e(ce,G6r),e(ce,nE),e(nE,zFe),e(zFe,O6r),e(nE,V6r),e(nE,_J),e(_J,X6r),e(nE,z6r),e(ce,W6r),e(ce,sE),e(sE,WFe),e(WFe,Q6r),e(sE,H6r),e(sE,uJ),e(uJ,U6r),e(sE,J6r),e(ce,Y6r),e(ce,lE),e(lE,QFe),e(QFe,K6r),e(lE,Z6r),e(lE,bJ),e(bJ,eAr),e(lE,oAr),e(ce,rAr),e(ce,iE),e(iE,HFe),e(HFe,tAr),e(iE,aAr),e(iE,vJ),e(vJ,nAr),e(iE,sAr),e(ce,lAr),e(ce,dE),e(dE,UFe),e(UFe,iAr),e(dE,dAr),e(dE,FJ),e(FJ,cAr),e(dE,fAr),e(ce,mAr),e(ce,cE),e(cE,JFe),e(JFe,gAr),e(cE,hAr),e(cE,TJ),e(TJ,pAr),e(cE,_Ar),e(ce,uAr),e(ce,fE),e(fE,YFe),e(YFe,bAr),e(fE,vAr),e(fE,MJ),e(MJ,FAr),e(fE,TAr),e(ce,MAr),e(ce,mE),e(mE,KFe),e(KFe,EAr),e(mE,CAr),e(mE,EJ),e(EJ,wAr),e(mE,AAr),e(ce,yAr),e(ce,gE),e(gE,ZFe),e(ZFe,LAr),e(gE,xAr),e(gE,CJ),e(CJ,$Ar),e(gE,kAr),e(ce,SAr),e(ce,hE),e(hE,eTe),e(eTe,RAr),e(hE,PAr),e(hE,wJ),e(wJ,BAr),e(hE,IAr),e(ce,NAr),e(ce,pE),e(pE,oTe),e(oTe,qAr),e(pE,jAr),e(pE,AJ),e(AJ,DAr),e(pE,GAr),e(ce,OAr),e(ce,_E),e(_E,rTe),e(rTe,VAr),e(_E,XAr),e(_E,yJ),e(yJ,zAr),e(_E,WAr),e(ce,QAr),e(ce,uE),e(uE,tTe),e(tTe,HAr),e(uE,UAr),e(uE,LJ),e(LJ,JAr),e(uE,YAr),e(ce,KAr),e(ce,bE),e(bE,aTe),e(aTe,ZAr),e(bE,eyr),e(bE,xJ),e(xJ,oyr),e(bE,ryr),e(ce,tyr),e(ce,vE),e(vE,nTe),e(nTe,ayr),e(vE,nyr),e(vE,$J),e($J,syr),e(vE,lyr),e(Ir,iyr),M(FE,Ir,null),b(f,Bje,u),b(f,Ec,u),e(Ec,TE),e(TE,sTe),M(u9,sTe,null),e(Ec,dyr),e(Ec,lTe),e(lTe,cyr),b(f,Ije,u),b(f,dr,u),M(b9,dr,null),e(dr,fyr),e(dr,Cc),e(Cc,myr),e(Cc,kJ),e(kJ,gyr),e(Cc,hyr),e(Cc,SJ),e(SJ,pyr),e(Cc,_yr),e(dr,uyr),e(dr,v9),e(v9,byr),e(v9,iTe),e(iTe,vyr),e(v9,Fyr),e(dr,Tyr),e(dr,jt),M(F9,jt,null),e(jt,Myr),e(jt,dTe),e(dTe,Eyr),e(jt,Cyr),e(jt,wc),e(wc,wyr),e(wc,cTe),e(cTe,Ayr),e(wc,yyr),e(wc,RJ),e(RJ,Lyr),e(wc,xyr),e(jt,$yr),M(ME,jt,null),e(dr,kyr),e(dr,Nr),M(T9,Nr,null),e(Nr,Syr),e(Nr,fTe),e(fTe,Ryr),e(Nr,Pyr),e(Nr,mn),e(mn,Byr),e(mn,mTe),e(mTe,Iyr),e(mn,Nyr),e(mn,gTe),e(gTe,qyr),e(mn,jyr),e(mn,hTe),e(hTe,Dyr),e(mn,Gyr),e(Nr,Oyr),e(Nr,pTe),e(pTe,EE),e(EE,_Te),e(_Te,Vyr),e(EE,Xyr),e(EE,PJ),e(PJ,zyr),e(EE,Wyr),e(Nr,Qyr),M(CE,Nr,null),b(f,Nje,u),b(f,Ac,u),e(Ac,wE),e(wE,uTe),M(M9,uTe,null),e(Ac,Hyr),e(Ac,bTe),e(bTe,Uyr),b(f,qje,u),b(f,cr,u),M(E9,cr,null),e(cr,Jyr),e(cr,yc),e(yc,Yyr),e(yc,BJ),e(BJ,Kyr),e(yc,Zyr),e(yc,IJ),e(IJ,eLr),e(yc,oLr),e(cr,rLr),e(cr,C9),e(C9,tLr),e(C9,vTe),e(vTe,aLr),e(C9,nLr),e(cr,sLr),e(cr,Dt),M(w9,Dt,null),e(Dt,lLr),e(Dt,FTe),e(FTe,iLr),e(Dt,dLr),e(Dt,Lc),e(Lc,cLr),e(Lc,TTe),e(TTe,fLr),e(Lc,mLr),e(Lc,NJ),e(NJ,gLr),e(Lc,hLr),e(Dt,pLr),M(AE,Dt,null),e(cr,_Lr),e(cr,qr),M(A9,qr,null),e(qr,uLr),e(qr,MTe),e(MTe,bLr),e(qr,vLr),e(qr,gn),e(gn,FLr),e(gn,ETe),e(ETe,TLr),e(gn,MLr),e(gn,CTe),e(CTe,ELr),e(gn,CLr),e(gn,wTe),e(wTe,wLr),e(gn,ALr),e(qr,yLr),e(qr,ATe),e(ATe,yE),e(yE,yTe),e(yTe,LLr),e(yE,xLr),e(yE,qJ),e(qJ,$Lr),e(yE,kLr),e(qr,SLr),M(LE,qr,null),b(f,jje,u),b(f,xc,u),e(xc,xE),e(xE,LTe),M(y9,LTe,null),e(xc,RLr),e(xc,xTe),e(xTe,PLr),b(f,Dje,u),b(f,fr,u),M(L9,fr,null),e(fr,BLr),e(fr,$c),e($c,ILr),e($c,jJ),e(jJ,NLr),e($c,qLr),e($c,DJ),e(DJ,jLr),e($c,DLr),e(fr,GLr),e(fr,x9),e(x9,OLr),e(x9,$Te),e($Te,VLr),e(x9,XLr),e(fr,zLr),e(fr,Gt),M($9,Gt,null),e(Gt,WLr),e(Gt,kTe),e(kTe,QLr),e(Gt,HLr),e(Gt,kc),e(kc,ULr),e(kc,STe),e(STe,JLr),e(kc,YLr),e(kc,GJ),e(GJ,KLr),e(kc,ZLr),e(Gt,e8r),M($E,Gt,null),e(fr,o8r),e(fr,jr),M(k9,jr,null),e(jr,r8r),e(jr,RTe),e(RTe,t8r),e(jr,a8r),e(jr,hn),e(hn,n8r),e(hn,PTe),e(PTe,s8r),e(hn,l8r),e(hn,BTe),e(BTe,i8r),e(hn,d8r),e(hn,ITe),e(ITe,c8r),e(hn,f8r),e(jr,m8r),e(jr,te),e(te,kE),e(kE,NTe),e(NTe,g8r),e(kE,h8r),e(kE,OJ),e(OJ,p8r),e(kE,_8r),e(te,u8r),e(te,SE),e(SE,qTe),e(qTe,b8r),e(SE,v8r),e(SE,VJ),e(VJ,F8r),e(SE,T8r),e(te,M8r),e(te,RE),e(RE,jTe),e(jTe,E8r),e(RE,C8r),e(RE,XJ),e(XJ,w8r),e(RE,A8r),e(te,y8r),e(te,PE),e(PE,DTe),e(DTe,L8r),e(PE,x8r),e(PE,zJ),e(zJ,$8r),e(PE,k8r),e(te,S8r),e(te,BE),e(BE,GTe),e(GTe,R8r),e(BE,P8r),e(BE,WJ),e(WJ,B8r),e(BE,I8r),e(te,N8r),e(te,IE),e(IE,OTe),e(OTe,q8r),e(IE,j8r),e(IE,QJ),e(QJ,D8r),e(IE,G8r),e(te,O8r),e(te,NE),e(NE,VTe),e(VTe,V8r),e(NE,X8r),e(NE,HJ),e(HJ,z8r),e(NE,W8r),e(te,Q8r),e(te,qE),e(qE,XTe),e(XTe,H8r),e(qE,U8r),e(qE,UJ),e(UJ,J8r),e(qE,Y8r),e(te,K8r),e(te,jE),e(jE,zTe),e(zTe,Z8r),e(jE,e9r),e(jE,JJ),e(JJ,o9r),e(jE,r9r),e(te,t9r),e(te,DE),e(DE,WTe),e(WTe,a9r),e(DE,n9r),e(DE,YJ),e(YJ,s9r),e(DE,l9r),e(te,i9r),e(te,GE),e(GE,QTe),e(QTe,d9r),e(GE,c9r),e(GE,KJ),e(KJ,f9r),e(GE,m9r),e(te,g9r),e(te,OE),e(OE,HTe),e(HTe,h9r),e(OE,p9r),e(OE,ZJ),e(ZJ,_9r),e(OE,u9r),e(te,b9r),e(te,VE),e(VE,UTe),e(UTe,v9r),e(VE,F9r),e(VE,eY),e(eY,T9r),e(VE,M9r),e(te,E9r),e(te,XE),e(XE,JTe),e(JTe,C9r),e(XE,w9r),e(XE,oY),e(oY,A9r),e(XE,y9r),e(te,L9r),e(te,zE),e(zE,YTe),e(YTe,x9r),e(zE,$9r),e(zE,rY),e(rY,k9r),e(zE,S9r),e(te,R9r),e(te,WE),e(WE,KTe),e(KTe,P9r),e(WE,B9r),e(WE,tY),e(tY,I9r),e(WE,N9r),e(te,q9r),e(te,QE),e(QE,ZTe),e(ZTe,j9r),e(QE,D9r),e(QE,aY),e(aY,G9r),e(QE,O9r),e(te,V9r),e(te,HE),e(HE,e7e),e(e7e,X9r),e(HE,z9r),e(HE,nY),e(nY,W9r),e(HE,Q9r),e(te,H9r),e(te,UE),e(UE,o7e),e(o7e,U9r),e(UE,J9r),e(UE,sY),e(sY,Y9r),e(UE,K9r),e(te,Z9r),e(te,JE),e(JE,r7e),e(r7e,exr),e(JE,oxr),e(JE,lY),e(lY,rxr),e(JE,txr),e(te,axr),e(te,YE),e(YE,t7e),e(t7e,nxr),e(YE,sxr),e(YE,iY),e(iY,lxr),e(YE,ixr),e(te,dxr),e(te,KE),e(KE,a7e),e(a7e,cxr),e(KE,fxr),e(KE,dY),e(dY,mxr),e(KE,gxr),e(te,hxr),e(te,ZE),e(ZE,n7e),e(n7e,pxr),e(ZE,_xr),e(ZE,cY),e(cY,uxr),e(ZE,bxr),e(te,vxr),e(te,eC),e(eC,s7e),e(s7e,Fxr),e(eC,Txr),e(eC,fY),e(fY,Mxr),e(eC,Exr),e(te,Cxr),e(te,oC),e(oC,l7e),e(l7e,wxr),e(oC,Axr),e(oC,mY),e(mY,yxr),e(oC,Lxr),e(jr,xxr),M(rC,jr,null),b(f,Gje,u),b(f,Sc,u),e(Sc,tC),e(tC,i7e),M(S9,i7e,null),e(Sc,$xr),e(Sc,d7e),e(d7e,kxr),b(f,Oje,u),b(f,mr,u),M(R9,mr,null),e(mr,Sxr),e(mr,Rc),e(Rc,Rxr),e(Rc,gY),e(gY,Pxr),e(Rc,Bxr),e(Rc,hY),e(hY,Ixr),e(Rc,Nxr),e(mr,qxr),e(mr,P9),e(P9,jxr),e(P9,c7e),e(c7e,Dxr),e(P9,Gxr),e(mr,Oxr),e(mr,Ot),M(B9,Ot,null),e(Ot,Vxr),e(Ot,f7e),e(f7e,Xxr),e(Ot,zxr),e(Ot,Pc),e(Pc,Wxr),e(Pc,m7e),e(m7e,Qxr),e(Pc,Hxr),e(Pc,pY),e(pY,Uxr),e(Pc,Jxr),e(Ot,Yxr),M(aC,Ot,null),e(mr,Kxr),e(mr,Dr),M(I9,Dr,null),e(Dr,Zxr),e(Dr,g7e),e(g7e,e$r),e(Dr,o$r),e(Dr,pn),e(pn,r$r),e(pn,h7e),e(h7e,t$r),e(pn,a$r),e(pn,p7e),e(p7e,n$r),e(pn,s$r),e(pn,_7e),e(_7e,l$r),e(pn,i$r),e(Dr,d$r),e(Dr,Re),e(Re,nC),e(nC,u7e),e(u7e,c$r),e(nC,f$r),e(nC,_Y),e(_Y,m$r),e(nC,g$r),e(Re,h$r),e(Re,sC),e(sC,b7e),e(b7e,p$r),e(sC,_$r),e(sC,uY),e(uY,u$r),e(sC,b$r),e(Re,v$r),e(Re,lC),e(lC,v7e),e(v7e,F$r),e(lC,T$r),e(lC,bY),e(bY,M$r),e(lC,E$r),e(Re,C$r),e(Re,iC),e(iC,F7e),e(F7e,w$r),e(iC,A$r),e(iC,vY),e(vY,y$r),e(iC,L$r),e(Re,x$r),e(Re,dC),e(dC,T7e),e(T7e,$$r),e(dC,k$r),e(dC,FY),e(FY,S$r),e(dC,R$r),e(Re,P$r),e(Re,cC),e(cC,M7e),e(M7e,B$r),e(cC,I$r),e(cC,TY),e(TY,N$r),e(cC,q$r),e(Re,j$r),e(Re,fC),e(fC,E7e),e(E7e,D$r),e(fC,G$r),e(fC,MY),e(MY,O$r),e(fC,V$r),e(Re,X$r),e(Re,mC),e(mC,C7e),e(C7e,z$r),e(mC,W$r),e(mC,EY),e(EY,Q$r),e(mC,H$r),e(Re,U$r),e(Re,gC),e(gC,w7e),e(w7e,J$r),e(gC,Y$r),e(gC,CY),e(CY,K$r),e(gC,Z$r),e(Dr,ekr),M(hC,Dr,null),b(f,Vje,u),b(f,Bc,u),e(Bc,pC),e(pC,A7e),M(N9,A7e,null),e(Bc,okr),e(Bc,y7e),e(y7e,rkr),b(f,Xje,u),b(f,gr,u),M(q9,gr,null),e(gr,tkr),e(gr,Ic),e(Ic,akr),e(Ic,wY),e(wY,nkr),e(Ic,skr),e(Ic,AY),e(AY,lkr),e(Ic,ikr),e(gr,dkr),e(gr,j9),e(j9,ckr),e(j9,L7e),e(L7e,fkr),e(j9,mkr),e(gr,gkr),e(gr,Vt),M(D9,Vt,null),e(Vt,hkr),e(Vt,x7e),e(x7e,pkr),e(Vt,_kr),e(Vt,Nc),e(Nc,ukr),e(Nc,$7e),e($7e,bkr),e(Nc,vkr),e(Nc,yY),e(yY,Fkr),e(Nc,Tkr),e(Vt,Mkr),M(_C,Vt,null),e(gr,Ekr),e(gr,Gr),M(G9,Gr,null),e(Gr,Ckr),e(Gr,k7e),e(k7e,wkr),e(Gr,Akr),e(Gr,_n),e(_n,ykr),e(_n,S7e),e(S7e,Lkr),e(_n,xkr),e(_n,R7e),e(R7e,$kr),e(_n,kkr),e(_n,P7e),e(P7e,Skr),e(_n,Rkr),e(Gr,Pkr),e(Gr,Ee),e(Ee,uC),e(uC,B7e),e(B7e,Bkr),e(uC,Ikr),e(uC,LY),e(LY,Nkr),e(uC,qkr),e(Ee,jkr),e(Ee,bC),e(bC,I7e),e(I7e,Dkr),e(bC,Gkr),e(bC,xY),e(xY,Okr),e(bC,Vkr),e(Ee,Xkr),e(Ee,vC),e(vC,N7e),e(N7e,zkr),e(vC,Wkr),e(vC,$Y),e($Y,Qkr),e(vC,Hkr),e(Ee,Ukr),e(Ee,FC),e(FC,q7e),e(q7e,Jkr),e(FC,Ykr),e(FC,kY),e(kY,Kkr),e(FC,Zkr),e(Ee,eSr),e(Ee,TC),e(TC,j7e),e(j7e,oSr),e(TC,rSr),e(TC,SY),e(SY,tSr),e(TC,aSr),e(Ee,nSr),e(Ee,MC),e(MC,D7e),e(D7e,sSr),e(MC,lSr),e(MC,RY),e(RY,iSr),e(MC,dSr),e(Ee,cSr),e(Ee,EC),e(EC,G7e),e(G7e,fSr),e(EC,mSr),e(EC,PY),e(PY,gSr),e(EC,hSr),e(Ee,pSr),e(Ee,CC),e(CC,O7e),e(O7e,_Sr),e(CC,uSr),e(CC,BY),e(BY,bSr),e(CC,vSr),e(Ee,FSr),e(Ee,wC),e(wC,V7e),e(V7e,TSr),e(wC,MSr),e(wC,IY),e(IY,ESr),e(wC,CSr),e(Ee,wSr),e(Ee,AC),e(AC,X7e),e(X7e,ASr),e(AC,ySr),e(AC,NY),e(NY,LSr),e(AC,xSr),e(Ee,$Sr),e(Ee,yC),e(yC,z7e),e(z7e,kSr),e(yC,SSr),e(yC,qY),e(qY,RSr),e(yC,PSr),e(Ee,BSr),e(Ee,LC),e(LC,W7e),e(W7e,ISr),e(LC,NSr),e(LC,jY),e(jY,qSr),e(LC,jSr),e(Gr,DSr),M(xC,Gr,null),b(f,zje,u),b(f,qc,u),e(qc,$C),e($C,Q7e),M(O9,Q7e,null),e(qc,GSr),e(qc,H7e),e(H7e,OSr),b(f,Wje,u),b(f,hr,u),M(V9,hr,null),e(hr,VSr),e(hr,jc),e(jc,XSr),e(jc,DY),e(DY,zSr),e(jc,WSr),e(jc,GY),e(GY,QSr),e(jc,HSr),e(hr,USr),e(hr,X9),e(X9,JSr),e(X9,U7e),e(U7e,YSr),e(X9,KSr),e(hr,ZSr),e(hr,Xt),M(z9,Xt,null),e(Xt,eRr),e(Xt,J7e),e(J7e,oRr),e(Xt,rRr),e(Xt,Dc),e(Dc,tRr),e(Dc,Y7e),e(Y7e,aRr),e(Dc,nRr),e(Dc,OY),e(OY,sRr),e(Dc,lRr),e(Xt,iRr),M(kC,Xt,null),e(hr,dRr),e(hr,Or),M(W9,Or,null),e(Or,cRr),e(Or,K7e),e(K7e,fRr),e(Or,mRr),e(Or,un),e(un,gRr),e(un,Z7e),e(Z7e,hRr),e(un,pRr),e(un,eMe),e(eMe,_Rr),e(un,uRr),e(un,oMe),e(oMe,bRr),e(un,vRr),e(Or,FRr),e(Or,Le),e(Le,SC),e(SC,rMe),e(rMe,TRr),e(SC,MRr),e(SC,VY),e(VY,ERr),e(SC,CRr),e(Le,wRr),e(Le,RC),e(RC,tMe),e(tMe,ARr),e(RC,yRr),e(RC,XY),e(XY,LRr),e(RC,xRr),e(Le,$Rr),e(Le,PC),e(PC,aMe),e(aMe,kRr),e(PC,SRr),e(PC,zY),e(zY,RRr),e(PC,PRr),e(Le,BRr),e(Le,BC),e(BC,nMe),e(nMe,IRr),e(BC,NRr),e(BC,WY),e(WY,qRr),e(BC,jRr),e(Le,DRr),e(Le,IC),e(IC,sMe),e(sMe,GRr),e(IC,ORr),e(IC,QY),e(QY,VRr),e(IC,XRr),e(Le,zRr),e(Le,NC),e(NC,lMe),e(lMe,WRr),e(NC,QRr),e(NC,HY),e(HY,HRr),e(NC,URr),e(Le,JRr),e(Le,qC),e(qC,iMe),e(iMe,YRr),e(qC,KRr),e(qC,UY),e(UY,ZRr),e(qC,ePr),e(Le,oPr),e(Le,jC),e(jC,dMe),e(dMe,rPr),e(jC,tPr),e(jC,JY),e(JY,aPr),e(jC,nPr),e(Le,sPr),e(Le,DC),e(DC,cMe),e(cMe,lPr),e(DC,iPr),e(DC,YY),e(YY,dPr),e(DC,cPr),e(Le,fPr),e(Le,GC),e(GC,fMe),e(fMe,mPr),e(GC,gPr),e(GC,KY),e(KY,hPr),e(GC,pPr),e(Or,_Pr),M(OC,Or,null),b(f,Qje,u),b(f,Gc,u),e(Gc,VC),e(VC,mMe),M(Q9,mMe,null),e(Gc,uPr),e(Gc,gMe),e(gMe,bPr),b(f,Hje,u),b(f,pr,u),M(H9,pr,null),e(pr,vPr),e(pr,Oc),e(Oc,FPr),e(Oc,ZY),e(ZY,TPr),e(Oc,MPr),e(Oc,eK),e(eK,EPr),e(Oc,CPr),e(pr,wPr),e(pr,U9),e(U9,APr),e(U9,hMe),e(hMe,yPr),e(U9,LPr),e(pr,xPr),e(pr,zt),M(J9,zt,null),e(zt,$Pr),e(zt,pMe),e(pMe,kPr),e(zt,SPr),e(zt,Vc),e(Vc,RPr),e(Vc,_Me),e(_Me,PPr),e(Vc,BPr),e(Vc,oK),e(oK,IPr),e(Vc,NPr),e(zt,qPr),M(XC,zt,null),e(pr,jPr),e(pr,Vr),M(Y9,Vr,null),e(Vr,DPr),e(Vr,uMe),e(uMe,GPr),e(Vr,OPr),e(Vr,bn),e(bn,VPr),e(bn,bMe),e(bMe,XPr),e(bn,zPr),e(bn,vMe),e(vMe,WPr),e(bn,QPr),e(bn,FMe),e(FMe,HPr),e(bn,UPr),e(Vr,JPr),e(Vr,Pe),e(Pe,zC),e(zC,TMe),e(TMe,YPr),e(zC,KPr),e(zC,rK),e(rK,ZPr),e(zC,eBr),e(Pe,oBr),e(Pe,WC),e(WC,MMe),e(MMe,rBr),e(WC,tBr),e(WC,tK),e(tK,aBr),e(WC,nBr),e(Pe,sBr),e(Pe,QC),e(QC,EMe),e(EMe,lBr),e(QC,iBr),e(QC,aK),e(aK,dBr),e(QC,cBr),e(Pe,fBr),e(Pe,HC),e(HC,CMe),e(CMe,mBr),e(HC,gBr),e(HC,nK),e(nK,hBr),e(HC,pBr),e(Pe,_Br),e(Pe,UC),e(UC,wMe),e(wMe,uBr),e(UC,bBr),e(UC,sK),e(sK,vBr),e(UC,FBr),e(Pe,TBr),e(Pe,JC),e(JC,AMe),e(AMe,MBr),e(JC,EBr),e(JC,lK),e(lK,CBr),e(JC,wBr),e(Pe,ABr),e(Pe,YC),e(YC,yMe),e(yMe,yBr),e(YC,LBr),e(YC,iK),e(iK,xBr),e(YC,$Br),e(Pe,kBr),e(Pe,KC),e(KC,LMe),e(LMe,SBr),e(KC,RBr),e(KC,dK),e(dK,PBr),e(KC,BBr),e(Pe,IBr),e(Pe,ZC),e(ZC,xMe),e(xMe,NBr),e(ZC,qBr),e(ZC,cK),e(cK,jBr),e(ZC,DBr),e(Vr,GBr),M(e5,Vr,null),b(f,Uje,u),b(f,Xc,u),e(Xc,o5),e(o5,$Me),M(K9,$Me,null),e(Xc,OBr),e(Xc,kMe),e(kMe,VBr),b(f,Jje,u),b(f,_r,u),M(Z9,_r,null),e(_r,XBr),e(_r,zc),e(zc,zBr),e(zc,fK),e(fK,WBr),e(zc,QBr),e(zc,mK),e(mK,HBr),e(zc,UBr),e(_r,JBr),e(_r,ex),e(ex,YBr),e(ex,SMe),e(SMe,KBr),e(ex,ZBr),e(_r,eIr),e(_r,Wt),M(ox,Wt,null),e(Wt,oIr),e(Wt,RMe),e(RMe,rIr),e(Wt,tIr),e(Wt,Wc),e(Wc,aIr),e(Wc,PMe),e(PMe,nIr),e(Wc,sIr),e(Wc,gK),e(gK,lIr),e(Wc,iIr),e(Wt,dIr),M(r5,Wt,null),e(_r,cIr),e(_r,Xr),M(rx,Xr,null),e(Xr,fIr),e(Xr,BMe),e(BMe,mIr),e(Xr,gIr),e(Xr,vn),e(vn,hIr),e(vn,IMe),e(IMe,pIr),e(vn,_Ir),e(vn,NMe),e(NMe,uIr),e(vn,bIr),e(vn,qMe),e(qMe,vIr),e(vn,FIr),e(Xr,TIr),e(Xr,xe),e(xe,t5),e(t5,jMe),e(jMe,MIr),e(t5,EIr),e(t5,hK),e(hK,CIr),e(t5,wIr),e(xe,AIr),e(xe,a5),e(a5,DMe),e(DMe,yIr),e(a5,LIr),e(a5,pK),e(pK,xIr),e(a5,$Ir),e(xe,kIr),e(xe,n5),e(n5,GMe),e(GMe,SIr),e(n5,RIr),e(n5,_K),e(_K,PIr),e(n5,BIr),e(xe,IIr),e(xe,s5),e(s5,OMe),e(OMe,NIr),e(s5,qIr),e(s5,uK),e(uK,jIr),e(s5,DIr),e(xe,GIr),e(xe,l5),e(l5,VMe),e(VMe,OIr),e(l5,VIr),e(l5,bK),e(bK,XIr),e(l5,zIr),e(xe,WIr),e(xe,i5),e(i5,XMe),e(XMe,QIr),e(i5,HIr),e(i5,vK),e(vK,UIr),e(i5,JIr),e(xe,YIr),e(xe,d5),e(d5,zMe),e(zMe,KIr),e(d5,ZIr),e(d5,FK),e(FK,eNr),e(d5,oNr),e(xe,rNr),e(xe,c5),e(c5,WMe),e(WMe,tNr),e(c5,aNr),e(c5,TK),e(TK,nNr),e(c5,sNr),e(xe,lNr),e(xe,f5),e(f5,QMe),e(QMe,iNr),e(f5,dNr),e(f5,MK),e(MK,cNr),e(f5,fNr),e(xe,mNr),e(xe,m5),e(m5,HMe),e(HMe,gNr),e(m5,hNr),e(m5,EK),e(EK,pNr),e(m5,_Nr),e(Xr,uNr),M(g5,Xr,null),b(f,Yje,u),b(f,Qc,u),e(Qc,h5),e(h5,UMe),M(tx,UMe,null),e(Qc,bNr),e(Qc,JMe),e(JMe,vNr),b(f,Kje,u),b(f,ur,u),M(ax,ur,null),e(ur,FNr),e(ur,Hc),e(Hc,TNr),e(Hc,CK),e(CK,MNr),e(Hc,ENr),e(Hc,wK),e(wK,CNr),e(Hc,wNr),e(ur,ANr),e(ur,nx),e(nx,yNr),e(nx,YMe),e(YMe,LNr),e(nx,xNr),e(ur,$Nr),e(ur,Qt),M(sx,Qt,null),e(Qt,kNr),e(Qt,KMe),e(KMe,SNr),e(Qt,RNr),e(Qt,Uc),e(Uc,PNr),e(Uc,ZMe),e(ZMe,BNr),e(Uc,INr),e(Uc,AK),e(AK,NNr),e(Uc,qNr),e(Qt,jNr),M(p5,Qt,null),e(ur,DNr),e(ur,zr),M(lx,zr,null),e(zr,GNr),e(zr,e4e),e(e4e,ONr),e(zr,VNr),e(zr,Fn),e(Fn,XNr),e(Fn,o4e),e(o4e,zNr),e(Fn,WNr),e(Fn,r4e),e(r4e,QNr),e(Fn,HNr),e(Fn,t4e),e(t4e,UNr),e(Fn,JNr),e(zr,YNr),e(zr,$e),e($e,_5),e(_5,a4e),e(a4e,KNr),e(_5,ZNr),e(_5,yK),e(yK,eqr),e(_5,oqr),e($e,rqr),e($e,u5),e(u5,n4e),e(n4e,tqr),e(u5,aqr),e(u5,LK),e(LK,nqr),e(u5,sqr),e($e,lqr),e($e,b5),e(b5,s4e),e(s4e,iqr),e(b5,dqr),e(b5,xK),e(xK,cqr),e(b5,fqr),e($e,mqr),e($e,v5),e(v5,l4e),e(l4e,gqr),e(v5,hqr),e(v5,$K),e($K,pqr),e(v5,_qr),e($e,uqr),e($e,F5),e(F5,i4e),e(i4e,bqr),e(F5,vqr),e(F5,kK),e(kK,Fqr),e(F5,Tqr),e($e,Mqr),e($e,T5),e(T5,d4e),e(d4e,Eqr),e(T5,Cqr),e(T5,SK),e(SK,wqr),e(T5,Aqr),e($e,yqr),e($e,M5),e(M5,c4e),e(c4e,Lqr),e(M5,xqr),e(M5,RK),e(RK,$qr),e(M5,kqr),e($e,Sqr),e($e,E5),e(E5,f4e),e(f4e,Rqr),e(E5,Pqr),e(E5,PK),e(PK,Bqr),e(E5,Iqr),e($e,Nqr),e($e,C5),e(C5,m4e),e(m4e,qqr),e(C5,jqr),e(C5,BK),e(BK,Dqr),e(C5,Gqr),e($e,Oqr),e($e,w5),e(w5,g4e),e(g4e,Vqr),e(w5,Xqr),e(w5,IK),e(IK,zqr),e(w5,Wqr),e(zr,Qqr),M(A5,zr,null),b(f,Zje,u),b(f,Jc,u),e(Jc,y5),e(y5,h4e),M(ix,h4e,null),e(Jc,Hqr),e(Jc,p4e),e(p4e,Uqr),b(f,eDe,u),b(f,br,u),M(dx,br,null),e(br,Jqr),e(br,Yc),e(Yc,Yqr),e(Yc,NK),e(NK,Kqr),e(Yc,Zqr),e(Yc,qK),e(qK,ejr),e(Yc,ojr),e(br,rjr),e(br,cx),e(cx,tjr),e(cx,_4e),e(_4e,ajr),e(cx,njr),e(br,sjr),e(br,Ht),M(fx,Ht,null),e(Ht,ljr),e(Ht,u4e),e(u4e,ijr),e(Ht,djr),e(Ht,Kc),e(Kc,cjr),e(Kc,b4e),e(b4e,fjr),e(Kc,mjr),e(Kc,jK),e(jK,gjr),e(Kc,hjr),e(Ht,pjr),M(L5,Ht,null),e(br,_jr),e(br,Wr),M(mx,Wr,null),e(Wr,ujr),e(Wr,v4e),e(v4e,bjr),e(Wr,vjr),e(Wr,Tn),e(Tn,Fjr),e(Tn,F4e),e(F4e,Tjr),e(Tn,Mjr),e(Tn,T4e),e(T4e,Ejr),e(Tn,Cjr),e(Tn,M4e),e(M4e,wjr),e(Tn,Ajr),e(Wr,yjr),e(Wr,De),e(De,x5),e(x5,E4e),e(E4e,Ljr),e(x5,xjr),e(x5,DK),e(DK,$jr),e(x5,kjr),e(De,Sjr),e(De,$5),e($5,C4e),e(C4e,Rjr),e($5,Pjr),e($5,GK),e(GK,Bjr),e($5,Ijr),e(De,Njr),e(De,k5),e(k5,w4e),e(w4e,qjr),e(k5,jjr),e(k5,OK),e(OK,Djr),e(k5,Gjr),e(De,Ojr),e(De,S5),e(S5,A4e),e(A4e,Vjr),e(S5,Xjr),e(S5,VK),e(VK,zjr),e(S5,Wjr),e(De,Qjr),e(De,R5),e(R5,y4e),e(y4e,Hjr),e(R5,Ujr),e(R5,XK),e(XK,Jjr),e(R5,Yjr),e(De,Kjr),e(De,P5),e(P5,L4e),e(L4e,Zjr),e(P5,eDr),e(P5,zK),e(zK,oDr),e(P5,rDr),e(De,tDr),e(De,B5),e(B5,x4e),e(x4e,aDr),e(B5,nDr),e(B5,WK),e(WK,sDr),e(B5,lDr),e(De,iDr),e(De,I5),e(I5,$4e),e($4e,dDr),e(I5,cDr),e(I5,QK),e(QK,fDr),e(I5,mDr),e(Wr,gDr),M(N5,Wr,null),b(f,oDe,u),b(f,Zc,u),e(Zc,q5),e(q5,k4e),M(gx,k4e,null),e(Zc,hDr),e(Zc,S4e),e(S4e,pDr),b(f,rDe,u),b(f,vr,u),M(hx,vr,null),e(vr,_Dr),e(vr,ef),e(ef,uDr),e(ef,HK),e(HK,bDr),e(ef,vDr),e(ef,UK),e(UK,FDr),e(ef,TDr),e(vr,MDr),e(vr,px),e(px,EDr),e(px,R4e),e(R4e,CDr),e(px,wDr),e(vr,ADr),e(vr,Ut),M(_x,Ut,null),e(Ut,yDr),e(Ut,P4e),e(P4e,LDr),e(Ut,xDr),e(Ut,of),e(of,$Dr),e(of,B4e),e(B4e,kDr),e(of,SDr),e(of,JK),e(JK,RDr),e(of,PDr),e(Ut,BDr),M(j5,Ut,null),e(vr,IDr),e(vr,Qr),M(ux,Qr,null),e(Qr,NDr),e(Qr,I4e),e(I4e,qDr),e(Qr,jDr),e(Qr,Mn),e(Mn,DDr),e(Mn,N4e),e(N4e,GDr),e(Mn,ODr),e(Mn,q4e),e(q4e,VDr),e(Mn,XDr),e(Mn,j4e),e(j4e,zDr),e(Mn,WDr),e(Qr,QDr),e(Qr,Ge),e(Ge,D5),e(D5,D4e),e(D4e,HDr),e(D5,UDr),e(D5,YK),e(YK,JDr),e(D5,YDr),e(Ge,KDr),e(Ge,G5),e(G5,G4e),e(G4e,ZDr),e(G5,eGr),e(G5,KK),e(KK,oGr),e(G5,rGr),e(Ge,tGr),e(Ge,O5),e(O5,O4e),e(O4e,aGr),e(O5,nGr),e(O5,ZK),e(ZK,sGr),e(O5,lGr),e(Ge,iGr),e(Ge,V5),e(V5,V4e),e(V4e,dGr),e(V5,cGr),e(V5,eZ),e(eZ,fGr),e(V5,mGr),e(Ge,gGr),e(Ge,X5),e(X5,X4e),e(X4e,hGr),e(X5,pGr),e(X5,oZ),e(oZ,_Gr),e(X5,uGr),e(Ge,bGr),e(Ge,z5),e(z5,z4e),e(z4e,vGr),e(z5,FGr),e(z5,rZ),e(rZ,TGr),e(z5,MGr),e(Ge,EGr),e(Ge,W5),e(W5,W4e),e(W4e,CGr),e(W5,wGr),e(W5,tZ),e(tZ,AGr),e(W5,yGr),e(Ge,LGr),e(Ge,Q5),e(Q5,Q4e),e(Q4e,xGr),e(Q5,$Gr),e(Q5,aZ),e(aZ,kGr),e(Q5,SGr),e(Qr,RGr),M(H5,Qr,null),b(f,tDe,u),b(f,rf,u),e(rf,U5),e(U5,H4e),M(bx,H4e,null),e(rf,PGr),e(rf,U4e),e(U4e,BGr),b(f,aDe,u),b(f,Fr,u),M(vx,Fr,null),e(Fr,IGr),e(Fr,tf),e(tf,NGr),e(tf,nZ),e(nZ,qGr),e(tf,jGr),e(tf,sZ),e(sZ,DGr),e(tf,GGr),e(Fr,OGr),e(Fr,Fx),e(Fx,VGr),e(Fx,J4e),e(J4e,XGr),e(Fx,zGr),e(Fr,WGr),e(Fr,Jt),M(Tx,Jt,null),e(Jt,QGr),e(Jt,Y4e),e(Y4e,HGr),e(Jt,UGr),e(Jt,af),e(af,JGr),e(af,K4e),e(K4e,YGr),e(af,KGr),e(af,lZ),e(lZ,ZGr),e(af,eOr),e(Jt,oOr),M(J5,Jt,null),e(Fr,rOr),e(Fr,Hr),M(Mx,Hr,null),e(Hr,tOr),e(Hr,Z4e),e(Z4e,aOr),e(Hr,nOr),e(Hr,En),e(En,sOr),e(En,eEe),e(eEe,lOr),e(En,iOr),e(En,oEe),e(oEe,dOr),e(En,cOr),e(En,rEe),e(rEe,fOr),e(En,mOr),e(Hr,gOr),e(Hr,tEe),e(tEe,Y5),e(Y5,aEe),e(aEe,hOr),e(Y5,pOr),e(Y5,iZ),e(iZ,_Or),e(Y5,uOr),e(Hr,bOr),M(K5,Hr,null),b(f,nDe,u),b(f,nf,u),e(nf,Z5),e(Z5,nEe),M(Ex,nEe,null),e(nf,vOr),e(nf,sEe),e(sEe,FOr),b(f,sDe,u),b(f,Tr,u),M(Cx,Tr,null),e(Tr,TOr),e(Tr,sf),e(sf,MOr),e(sf,dZ),e(dZ,EOr),e(sf,COr),e(sf,cZ),e(cZ,wOr),e(sf,AOr),e(Tr,yOr),e(Tr,wx),e(wx,LOr),e(wx,lEe),e(lEe,xOr),e(wx,$Or),e(Tr,kOr),e(Tr,Yt),M(Ax,Yt,null),e(Yt,SOr),e(Yt,iEe),e(iEe,ROr),e(Yt,POr),e(Yt,lf),e(lf,BOr),e(lf,dEe),e(dEe,IOr),e(lf,NOr),e(lf,fZ),e(fZ,qOr),e(lf,jOr),e(Yt,DOr),M(ew,Yt,null),e(Tr,GOr),e(Tr,Ur),M(yx,Ur,null),e(Ur,OOr),e(Ur,cEe),e(cEe,VOr),e(Ur,XOr),e(Ur,Cn),e(Cn,zOr),e(Cn,fEe),e(fEe,WOr),e(Cn,QOr),e(Cn,mEe),e(mEe,HOr),e(Cn,UOr),e(Cn,gEe),e(gEe,JOr),e(Cn,YOr),e(Ur,KOr),e(Ur,Lx),e(Lx,ow),e(ow,hEe),e(hEe,ZOr),e(ow,eVr),e(ow,mZ),e(mZ,oVr),e(ow,rVr),e(Lx,tVr),e(Lx,rw),e(rw,pEe),e(pEe,aVr),e(rw,nVr),e(rw,gZ),e(gZ,sVr),e(rw,lVr),e(Ur,iVr),M(tw,Ur,null),b(f,lDe,u),b(f,df,u),e(df,aw),e(aw,_Ee),M(xx,_Ee,null),e(df,dVr),e(df,uEe),e(uEe,cVr),b(f,iDe,u),b(f,Mr,u),M($x,Mr,null),e(Mr,fVr),e(Mr,cf),e(cf,mVr),e(cf,hZ),e(hZ,gVr),e(cf,hVr),e(cf,pZ),e(pZ,pVr),e(cf,_Vr),e(Mr,uVr),e(Mr,kx),e(kx,bVr),e(kx,bEe),e(bEe,vVr),e(kx,FVr),e(Mr,TVr),e(Mr,Kt),M(Sx,Kt,null),e(Kt,MVr),e(Kt,vEe),e(vEe,EVr),e(Kt,CVr),e(Kt,ff),e(ff,wVr),e(ff,FEe),e(FEe,AVr),e(ff,yVr),e(ff,_Z),e(_Z,LVr),e(ff,xVr),e(Kt,$Vr),M(nw,Kt,null),e(Mr,kVr),e(Mr,Jr),M(Rx,Jr,null),e(Jr,SVr),e(Jr,TEe),e(TEe,RVr),e(Jr,PVr),e(Jr,wn),e(wn,BVr),e(wn,MEe),e(MEe,IVr),e(wn,NVr),e(wn,EEe),e(EEe,qVr),e(wn,jVr),e(wn,CEe),e(CEe,DVr),e(wn,GVr),e(Jr,OVr),e(Jr,wEe),e(wEe,sw),e(sw,AEe),e(AEe,VVr),e(sw,XVr),e(sw,uZ),e(uZ,zVr),e(sw,WVr),e(Jr,QVr),M(lw,Jr,null),dDe=!0},p(f,[u]){const Px={};u&2&&(Px.$$scope={dirty:u,ctx:f}),Ff.$set(Px);const yEe={};u&2&&(yEe.$$scope={dirty:u,ctx:f}),Cg.$set(yEe);const LEe={};u&2&&(LEe.$$scope={dirty:u,ctx:f}),nh.$set(LEe);const xEe={};u&2&&(xEe.$$scope={dirty:u,ctx:f}),Nh.$set(xEe);const Bx={};u&2&&(Bx.$$scope={dirty:u,ctx:f}),qh.$set(Bx);const $Ee={};u&2&&($Ee.$$scope={dirty:u,ctx:f}),ap.$set($Ee);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),np.$set(An);const kEe={};u&2&&(kEe.$$scope={dirty:u,ctx:f}),ip.$set(kEe);const SEe={};u&2&&(SEe.$$scope={dirty:u,ctx:f}),au.$set(SEe);const REe={};u&2&&(REe.$$scope={dirty:u,ctx:f}),su.$set(REe);const Ix={};u&2&&(Ix.$$scope={dirty:u,ctx:f}),Ju.$set(Ix);const PEe={};u&2&&(PEe.$$scope={dirty:u,ctx:f}),Ku.$set(PEe);const Nx={};u&2&&(Nx.$$scope={dirty:u,ctx:f}),N2.$set(Nx);const BEe={};u&2&&(BEe.$$scope={dirty:u,ctx:f}),j2.$set(BEe);const qx={};u&2&&(qx.$$scope={dirty:u,ctx:f}),M1.$set(qx);const IEe={};u&2&&(IEe.$$scope={dirty:u,ctx:f}),C1.$set(IEe);const NEe={};u&2&&(NEe.$$scope={dirty:u,ctx:f}),O1.$set(NEe);const qEe={};u&2&&(qEe.$$scope={dirty:u,ctx:f}),X1.$set(qEe);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),jb.$set(mf);const jEe={};u&2&&(jEe.$$scope={dirty:u,ctx:f}),Gb.$set(jEe);const DEe={};u&2&&(DEe.$$scope={dirty:u,ctx:f}),bv.$set(DEe);const GEe={};u&2&&(GEe.$$scope={dirty:u,ctx:f}),Fv.$set(GEe);const jx={};u&2&&(jx.$$scope={dirty:u,ctx:f}),yv.$set(jx);const OEe={};u&2&&(OEe.$$scope={dirty:u,ctx:f}),xv.$set(OEe);const VEe={};u&2&&(VEe.$$scope={dirty:u,ctx:f}),f3.$set(VEe);const XEe={};u&2&&(XEe.$$scope={dirty:u,ctx:f}),g3.$set(XEe);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),o0.$set(et);const Dx={};u&2&&(Dx.$$scope={dirty:u,ctx:f}),t0.$set(Dx);const zEe={};u&2&&(zEe.$$scope={dirty:u,ctx:f}),s0.$set(zEe);const Gx={};u&2&&(Gx.$$scope={dirty:u,ctx:f}),i0.$set(Gx);const WEe={};u&2&&(WEe.$$scope={dirty:u,ctx:f}),M0.$set(WEe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),C0.$set(ot);const QEe={};u&2&&(QEe.$$scope={dirty:u,ctx:f}),y0.$set(QEe);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),x0.$set(gf);const HEe={};u&2&&(HEe.$$scope={dirty:u,ctx:f}),D0.$set(HEe);const UEe={};u&2&&(UEe.$$scope={dirty:u,ctx:f}),O0.$set(UEe);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),U0.$set(y);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),Y0.$set(iw);const JEe={};u&2&&(JEe.$$scope={dirty:u,ctx:f}),iF.$set(JEe);const YEe={};u&2&&(YEe.$$scope={dirty:u,ctx:f}),cF.$set(YEe);const dw={};u&2&&(dw.$$scope={dirty:u,ctx:f}),hF.$set(dw);const KEe={};u&2&&(KEe.$$scope={dirty:u,ctx:f}),_F.$set(KEe);const ZEe={};u&2&&(ZEe.$$scope={dirty:u,ctx:f}),EF.$set(ZEe);const cw={};u&2&&(cw.$$scope={dirty:u,ctx:f}),wF.$set(cw);const eCe={};u&2&&(eCe.$$scope={dirty:u,ctx:f}),$F.$set(eCe);const oCe={};u&2&&(oCe.$$scope={dirty:u,ctx:f}),SF.$set(oCe);const fw={};u&2&&(fw.$$scope={dirty:u,ctx:f}),IF.$set(fw);const rCe={};u&2&&(rCe.$$scope={dirty:u,ctx:f}),qF.$set(rCe);const tCe={};u&2&&(tCe.$$scope={dirty:u,ctx:f}),GF.$set(tCe);const mw={};u&2&&(mw.$$scope={dirty:u,ctx:f}),VF.$set(mw);const aCe={};u&2&&(aCe.$$scope={dirty:u,ctx:f}),UF.$set(aCe);const nCe={};u&2&&(nCe.$$scope={dirty:u,ctx:f}),YF.$set(nCe);const gw={};u&2&&(gw.$$scope={dirty:u,ctx:f}),eT.$set(gw);const sCe={};u&2&&(sCe.$$scope={dirty:u,ctx:f}),rT.$set(sCe);const lCe={};u&2&&(lCe.$$scope={dirty:u,ctx:f}),HT.$set(lCe);const hw={};u&2&&(hw.$$scope={dirty:u,ctx:f}),JT.$set(hw);const iCe={};u&2&&(iCe.$$scope={dirty:u,ctx:f}),F7.$set(iCe);const dCe={};u&2&&(dCe.$$scope={dirty:u,ctx:f}),M7.$set(dCe);const pw={};u&2&&(pw.$$scope={dirty:u,ctx:f}),B7.$set(pw);const cCe={};u&2&&(cCe.$$scope={dirty:u,ctx:f}),N7.$set(cCe);const fCe={};u&2&&(fCe.$$scope={dirty:u,ctx:f}),O7.$set(fCe);const _w={};u&2&&(_w.$$scope={dirty:u,ctx:f}),X7.$set(_w);const mCe={};u&2&&(mCe.$$scope={dirty:u,ctx:f}),fM.$set(mCe);const gCe={};u&2&&(gCe.$$scope={dirty:u,ctx:f}),gM.$set(gCe);const uw={};u&2&&(uw.$$scope={dirty:u,ctx:f}),CM.$set(uw);const hCe={};u&2&&(hCe.$$scope={dirty:u,ctx:f}),AM.$set(hCe);const pCe={};u&2&&(pCe.$$scope={dirty:u,ctx:f}),ZM.$set(pCe);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),o4.$set(bw);const _Ce={};u&2&&(_Ce.$$scope={dirty:u,ctx:f}),v4.$set(_Ce);const uCe={};u&2&&(uCe.$$scope={dirty:u,ctx:f}),T4.$set(uCe);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),C4.$set(vw);const bCe={};u&2&&(bCe.$$scope={dirty:u,ctx:f}),A4.$set(bCe);const vCe={};u&2&&(vCe.$$scope={dirty:u,ctx:f}),L4.$set(vCe);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),$4.$set(Fw);const FCe={};u&2&&(FCe.$$scope={dirty:u,ctx:f}),Y4.$set(FCe);const TCe={};u&2&&(TCe.$$scope={dirty:u,ctx:f}),Z4.$set(TCe);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),FE.$set(Tw);const MCe={};u&2&&(MCe.$$scope={dirty:u,ctx:f}),ME.$set(MCe);const ECe={};u&2&&(ECe.$$scope={dirty:u,ctx:f}),CE.$set(ECe);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),AE.$set(Mw);const CCe={};u&2&&(CCe.$$scope={dirty:u,ctx:f}),LE.$set(CCe);const wCe={};u&2&&(wCe.$$scope={dirty:u,ctx:f}),$E.$set(wCe);const Ew={};u&2&&(Ew.$$scope={dirty:u,ctx:f}),rC.$set(Ew);const ACe={};u&2&&(ACe.$$scope={dirty:u,ctx:f}),aC.$set(ACe);const yCe={};u&2&&(yCe.$$scope={dirty:u,ctx:f}),hC.$set(yCe);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),_C.$set(Cw);const LCe={};u&2&&(LCe.$$scope={dirty:u,ctx:f}),xC.$set(LCe);const xCe={};u&2&&(xCe.$$scope={dirty:u,ctx:f}),kC.$set(xCe);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),OC.$set(ww);const $Ce={};u&2&&($Ce.$$scope={dirty:u,ctx:f}),XC.$set($Ce);const kCe={};u&2&&(kCe.$$scope={dirty:u,ctx:f}),e5.$set(kCe);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),r5.$set(Aw);const SCe={};u&2&&(SCe.$$scope={dirty:u,ctx:f}),g5.$set(SCe);const RCe={};u&2&&(RCe.$$scope={dirty:u,ctx:f}),p5.$set(RCe);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),A5.$set(yw);const PCe={};u&2&&(PCe.$$scope={dirty:u,ctx:f}),L5.$set(PCe);const BCe={};u&2&&(BCe.$$scope={dirty:u,ctx:f}),N5.$set(BCe);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),j5.$set(Lw);const ICe={};u&2&&(ICe.$$scope={dirty:u,ctx:f}),H5.$set(ICe);const NCe={};u&2&&(NCe.$$scope={dirty:u,ctx:f}),J5.$set(NCe);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),K5.$set(xw);const qCe={};u&2&&(qCe.$$scope={dirty:u,ctx:f}),ew.$set(qCe);const jCe={};u&2&&(jCe.$$scope={dirty:u,ctx:f}),tw.$set(jCe);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),nw.$set($w);const DCe={};u&2&&(DCe.$$scope={dirty:u,ctx:f}),lw.$set(DCe)},i(f){dDe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(xA.$$.fragment,f),E($A.$$.fragment,f),E(Ff.$$.fragment,f),E(kA.$$.fragment,f),E(SA.$$.fragment,f),E(BA.$$.fragment,f),E(Cg.$$.fragment,f),E(IA.$$.fragment,f),E(NA.$$.fragment,f),E(qA.$$.fragment,f),E(GA.$$.fragment,f),E(nh.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(QA.$$.fragment,f),E(Nh.$$.fragment,f),E(qh.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(ZA.$$.fragment,f),E(ap.$$.fragment,f),E(np.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(ip.$$.fragment,f),E(ny.$$.fragment,f),E(au.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(su.$$.fragment,f),E(cy.$$.fragment,f),E(Ju.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(Ku.$$.fragment,f),E(py.$$.fragment,f),E(N2.$$.fragment,f),E(_y.$$.fragment,f),E(uy.$$.fragment,f),E(vy.$$.fragment,f),E(j2.$$.fragment,f),E(Fy.$$.fragment,f),E(M1.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(C1.$$.fragment,f),E(wy.$$.fragment,f),E(O1.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(X1.$$.fragment,f),E($y.$$.fragment,f),E(jb.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(Gb.$$.fragment,f),E(By.$$.fragment,f),E(bv.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(Fv.$$.fragment,f),E(Dy.$$.fragment,f),E(yv.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(xv.$$.fragment,f),E(zy.$$.fragment,f),E(f3.$$.fragment,f),E(Wy.$$.fragment,f),E(Qy.$$.fragment,f),E(Uy.$$.fragment,f),E(g3.$$.fragment,f),E(Jy.$$.fragment,f),E(o0.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(eL.$$.fragment,f),E(t0.$$.fragment,f),E(oL.$$.fragment,f),E(s0.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(nL.$$.fragment,f),E(i0.$$.fragment,f),E(sL.$$.fragment,f),E(M0.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(cL.$$.fragment,f),E(C0.$$.fragment,f),E(fL.$$.fragment,f),E(y0.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(pL.$$.fragment,f),E(x0.$$.fragment,f),E(_L.$$.fragment,f),E(D0.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(O0.$$.fragment,f),E(TL.$$.fragment,f),E(U0.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(Y0.$$.fragment,f),E(AL.$$.fragment,f),E(iF.$$.fragment,f),E(yL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(cF.$$.fragment,f),E(kL.$$.fragment,f),E(hF.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(_F.$$.fragment,f),E(NL.$$.fragment,f),E(EF.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(wF.$$.fragment,f),E(OL.$$.fragment,f),E($F.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(WL.$$.fragment,f),E(SF.$$.fragment,f),E(QL.$$.fragment,f),E(IF.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(qF.$$.fragment,f),E(ZL.$$.fragment,f),E(GF.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(VF.$$.fragment,f),E(a8.$$.fragment,f),E(UF.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(YF.$$.fragment,f),E(d8.$$.fragment,f),E(eT.$$.fragment,f),E(c8.$$.fragment,f),E(f8.$$.fragment,f),E(g8.$$.fragment,f),E(rT.$$.fragment,f),E(h8.$$.fragment,f),E(HT.$$.fragment,f),E(p8.$$.fragment,f),E(_8.$$.fragment,f),E(b8.$$.fragment,f),E(JT.$$.fragment,f),E(v8.$$.fragment,f),E(F7.$$.fragment,f),E(F8.$$.fragment,f),E(T8.$$.fragment,f),E(E8.$$.fragment,f),E(M7.$$.fragment,f),E(C8.$$.fragment,f),E(B7.$$.fragment,f),E(w8.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(N7.$$.fragment,f),E(x8.$$.fragment,f),E(O7.$$.fragment,f),E($8.$$.fragment,f),E(k8.$$.fragment,f),E(R8.$$.fragment,f),E(X7.$$.fragment,f),E(P8.$$.fragment,f),E(fM.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(q8.$$.fragment,f),E(gM.$$.fragment,f),E(j8.$$.fragment,f),E(CM.$$.fragment,f),E(D8.$$.fragment,f),E(G8.$$.fragment,f),E(V8.$$.fragment,f),E(AM.$$.fragment,f),E(X8.$$.fragment,f),E(ZM.$$.fragment,f),E(z8.$$.fragment,f),E(W8.$$.fragment,f),E(H8.$$.fragment,f),E(o4.$$.fragment,f),E(U8.$$.fragment,f),E(v4.$$.fragment,f),E(J8.$$.fragment,f),E(Y8.$$.fragment,f),E(Z8.$$.fragment,f),E(T4.$$.fragment,f),E(e9.$$.fragment,f),E(C4.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(A4.$$.fragment,f),E(s9.$$.fragment,f),E(L4.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E($4.$$.fragment,f),E(f9.$$.fragment,f),E(Y4.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(Z4.$$.fragment,f),E(_9.$$.fragment,f),E(FE.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(F9.$$.fragment,f),E(ME.$$.fragment,f),E(T9.$$.fragment,f),E(CE.$$.fragment,f),E(M9.$$.fragment,f),E(E9.$$.fragment,f),E(w9.$$.fragment,f),E(AE.$$.fragment,f),E(A9.$$.fragment,f),E(LE.$$.fragment,f),E(y9.$$.fragment,f),E(L9.$$.fragment,f),E($9.$$.fragment,f),E($E.$$.fragment,f),E(k9.$$.fragment,f),E(rC.$$.fragment,f),E(S9.$$.fragment,f),E(R9.$$.fragment,f),E(B9.$$.fragment,f),E(aC.$$.fragment,f),E(I9.$$.fragment,f),E(hC.$$.fragment,f),E(N9.$$.fragment,f),E(q9.$$.fragment,f),E(D9.$$.fragment,f),E(_C.$$.fragment,f),E(G9.$$.fragment,f),E(xC.$$.fragment,f),E(O9.$$.fragment,f),E(V9.$$.fragment,f),E(z9.$$.fragment,f),E(kC.$$.fragment,f),E(W9.$$.fragment,f),E(OC.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(J9.$$.fragment,f),E(XC.$$.fragment,f),E(Y9.$$.fragment,f),E(e5.$$.fragment,f),E(K9.$$.fragment,f),E(Z9.$$.fragment,f),E(ox.$$.fragment,f),E(r5.$$.fragment,f),E(rx.$$.fragment,f),E(g5.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(p5.$$.fragment,f),E(lx.$$.fragment,f),E(A5.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(L5.$$.fragment,f),E(mx.$$.fragment,f),E(N5.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(_x.$$.fragment,f),E(j5.$$.fragment,f),E(ux.$$.fragment,f),E(H5.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(J5.$$.fragment,f),E(Mx.$$.fragment,f),E(K5.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(ew.$$.fragment,f),E(yx.$$.fragment,f),E(tw.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(nw.$$.fragment,f),E(Rx.$$.fragment,f),E(lw.$$.fragment,f),dDe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(xA.$$.fragment,f),C($A.$$.fragment,f),C(Ff.$$.fragment,f),C(kA.$$.fragment,f),C(SA.$$.fragment,f),C(BA.$$.fragment,f),C(Cg.$$.fragment,f),C(IA.$$.fragment,f),C(NA.$$.fragment,f),C(qA.$$.fragment,f),C(GA.$$.fragment,f),C(nh.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(QA.$$.fragment,f),C(Nh.$$.fragment,f),C(qh.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(ZA.$$.fragment,f),C(ap.$$.fragment,f),C(np.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(ip.$$.fragment,f),C(ny.$$.fragment,f),C(au.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(su.$$.fragment,f),C(cy.$$.fragment,f),C(Ju.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(Ku.$$.fragment,f),C(py.$$.fragment,f),C(N2.$$.fragment,f),C(_y.$$.fragment,f),C(uy.$$.fragment,f),C(vy.$$.fragment,f),C(j2.$$.fragment,f),C(Fy.$$.fragment,f),C(M1.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(C1.$$.fragment,f),C(wy.$$.fragment,f),C(O1.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(X1.$$.fragment,f),C($y.$$.fragment,f),C(jb.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(Gb.$$.fragment,f),C(By.$$.fragment,f),C(bv.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(Fv.$$.fragment,f),C(Dy.$$.fragment,f),C(yv.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(xv.$$.fragment,f),C(zy.$$.fragment,f),C(f3.$$.fragment,f),C(Wy.$$.fragment,f),C(Qy.$$.fragment,f),C(Uy.$$.fragment,f),C(g3.$$.fragment,f),C(Jy.$$.fragment,f),C(o0.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(eL.$$.fragment,f),C(t0.$$.fragment,f),C(oL.$$.fragment,f),C(s0.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(nL.$$.fragment,f),C(i0.$$.fragment,f),C(sL.$$.fragment,f),C(M0.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(cL.$$.fragment,f),C(C0.$$.fragment,f),C(fL.$$.fragment,f),C(y0.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(pL.$$.fragment,f),C(x0.$$.fragment,f),C(_L.$$.fragment,f),C(D0.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(O0.$$.fragment,f),C(TL.$$.fragment,f),C(U0.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(Y0.$$.fragment,f),C(AL.$$.fragment,f),C(iF.$$.fragment,f),C(yL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(cF.$$.fragment,f),C(kL.$$.fragment,f),C(hF.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(_F.$$.fragment,f),C(NL.$$.fragment,f),C(EF.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(wF.$$.fragment,f),C(OL.$$.fragment,f),C($F.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(WL.$$.fragment,f),C(SF.$$.fragment,f),C(QL.$$.fragment,f),C(IF.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(qF.$$.fragment,f),C(ZL.$$.fragment,f),C(GF.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(VF.$$.fragment,f),C(a8.$$.fragment,f),C(UF.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(YF.$$.fragment,f),C(d8.$$.fragment,f),C(eT.$$.fragment,f),C(c8.$$.fragment,f),C(f8.$$.fragment,f),C(g8.$$.fragment,f),C(rT.$$.fragment,f),C(h8.$$.fragment,f),C(HT.$$.fragment,f),C(p8.$$.fragment,f),C(_8.$$.fragment,f),C(b8.$$.fragment,f),C(JT.$$.fragment,f),C(v8.$$.fragment,f),C(F7.$$.fragment,f),C(F8.$$.fragment,f),C(T8.$$.fragment,f),C(E8.$$.fragment,f),C(M7.$$.fragment,f),C(C8.$$.fragment,f),C(B7.$$.fragment,f),C(w8.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(N7.$$.fragment,f),C(x8.$$.fragment,f),C(O7.$$.fragment,f),C($8.$$.fragment,f),C(k8.$$.fragment,f),C(R8.$$.fragment,f),C(X7.$$.fragment,f),C(P8.$$.fragment,f),C(fM.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(q8.$$.fragment,f),C(gM.$$.fragment,f),C(j8.$$.fragment,f),C(CM.$$.fragment,f),C(D8.$$.fragment,f),C(G8.$$.fragment,f),C(V8.$$.fragment,f),C(AM.$$.fragment,f),C(X8.$$.fragment,f),C(ZM.$$.fragment,f),C(z8.$$.fragment,f),C(W8.$$.fragment,f),C(H8.$$.fragment,f),C(o4.$$.fragment,f),C(U8.$$.fragment,f),C(v4.$$.fragment,f),C(J8.$$.fragment,f),C(Y8.$$.fragment,f),C(Z8.$$.fragment,f),C(T4.$$.fragment,f),C(e9.$$.fragment,f),C(C4.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(A4.$$.fragment,f),C(s9.$$.fragment,f),C(L4.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C($4.$$.fragment,f),C(f9.$$.fragment,f),C(Y4.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(Z4.$$.fragment,f),C(_9.$$.fragment,f),C(FE.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(F9.$$.fragment,f),C(ME.$$.fragment,f),C(T9.$$.fragment,f),C(CE.$$.fragment,f),C(M9.$$.fragment,f),C(E9.$$.fragment,f),C(w9.$$.fragment,f),C(AE.$$.fragment,f),C(A9.$$.fragment,f),C(LE.$$.fragment,f),C(y9.$$.fragment,f),C(L9.$$.fragment,f),C($9.$$.fragment,f),C($E.$$.fragment,f),C(k9.$$.fragment,f),C(rC.$$.fragment,f),C(S9.$$.fragment,f),C(R9.$$.fragment,f),C(B9.$$.fragment,f),C(aC.$$.fragment,f),C(I9.$$.fragment,f),C(hC.$$.fragment,f),C(N9.$$.fragment,f),C(q9.$$.fragment,f),C(D9.$$.fragment,f),C(_C.$$.fragment,f),C(G9.$$.fragment,f),C(xC.$$.fragment,f),C(O9.$$.fragment,f),C(V9.$$.fragment,f),C(z9.$$.fragment,f),C(kC.$$.fragment,f),C(W9.$$.fragment,f),C(OC.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(J9.$$.fragment,f),C(XC.$$.fragment,f),C(Y9.$$.fragment,f),C(e5.$$.fragment,f),C(K9.$$.fragment,f),C(Z9.$$.fragment,f),C(ox.$$.fragment,f),C(r5.$$.fragment,f),C(rx.$$.fragment,f),C(g5.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(p5.$$.fragment,f),C(lx.$$.fragment,f),C(A5.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(L5.$$.fragment,f),C(mx.$$.fragment,f),C(N5.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(_x.$$.fragment,f),C(j5.$$.fragment,f),C(ux.$$.fragment,f),C(H5.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(J5.$$.fragment,f),C(Mx.$$.fragment,f),C(K5.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(ew.$$.fragment,f),C(yx.$$.fragment,f),C(tw.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(nw.$$.fragment,f),C(Rx.$$.fragment,f),C(lw.$$.fragment,f),dDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(rt),f&&t(je),f&&t(We),f&&t(uf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(sqe),f&&t(bi),w(xA),f&&t(lqe),f&&t(kn),f&&t(iqe),w($A,f),f&&t(dqe),f&&t(K$),f&&t(cqe),w(Ff,f),f&&t(fqe),f&&t(vi),w(kA),f&&t(mqe),f&&t(Co),w(SA),w(BA),w(Cg),w(IA),f&&t(gqe),f&&t(Ti),w(NA),f&&t(hqe),f&&t(wo),w(qA),w(GA),w(nh),w(OA),f&&t(pqe),f&&t(Mi),w(VA),f&&t(_qe),f&&t(Ao),w(XA),w(QA),w(Nh),w(qh),w(HA),f&&t(uqe),f&&t(Ei),w(UA),f&&t(bqe),f&&t(yo),w(JA),w(ZA),w(ap),w(np),w(ey),f&&t(vqe),f&&t(wi),w(oy),f&&t(Fqe),f&&t(Lo),w(ry),w(ay),w(ip),w(ny),w(au),f&&t(Tqe),f&&t(Li),w(sy),f&&t(Mqe),f&&t(xo),w(ly),w(dy),w(su),w(cy),w(Ju),f&&t(Eqe),f&&t(ki),w(fy),f&&t(Cqe),f&&t($o),w(my),w(hy),w(Ku),w(py),w(N2),f&&t(wqe),f&&t(Pi),w(_y),f&&t(Aqe),f&&t(ko),w(uy),w(vy),w(j2),w(Fy),w(M1),f&&t(yqe),f&&t(Ni),w(Ty),f&&t(Lqe),f&&t(So),w(My),w(Cy),w(C1),w(wy),w(O1),f&&t(xqe),f&&t(Di),w(Ay),f&&t($qe),f&&t(Ro),w(yy),w(xy),w(X1),w($y),w(jb),f&&t(kqe),f&&t(Vi),w(ky),f&&t(Sqe),f&&t(Po),w(Sy),w(Py),w(Gb),w(By),w(bv),f&&t(Rqe),f&&t(Wi),w(Iy),f&&t(Pqe),f&&t(Bo),w(Ny),w(jy),w(Fv),w(Dy),w(yv),f&&t(Bqe),f&&t(Ui),w(Gy),f&&t(Iqe),f&&t(Io),w(Oy),w(Xy),w(xv),w(zy),w(f3),f&&t(Nqe),f&&t(Ki),w(Wy),f&&t(qqe),f&&t(No),w(Qy),w(Uy),w(g3),w(Jy),w(o0),f&&t(jqe),f&&t(od),w(Yy),f&&t(Dqe),f&&t(qo),w(Ky),w(eL),w(t0),w(oL),w(s0),f&&t(Gqe),f&&t(ad),w(rL),f&&t(Oqe),f&&t(jo),w(tL),w(nL),w(i0),w(sL),w(M0),f&&t(Vqe),f&&t(ld),w(lL),f&&t(Xqe),f&&t(Do),w(iL),w(cL),w(C0),w(fL),w(y0),f&&t(zqe),f&&t(cd),w(mL),f&&t(Wqe),f&&t(Go),w(gL),w(pL),w(x0),w(_L),w(D0),f&&t(Qqe),f&&t(gd),w(uL),f&&t(Hqe),f&&t(Oo),w(bL),w(FL),w(O0),w(TL),w(U0),f&&t(Uqe),f&&t(_d),w(ML),f&&t(Jqe),f&&t(Vo),w(EL),w(wL),w(Y0),w(AL),w(iF),f&&t(Yqe),f&&t(vd),w(yL),f&&t(Kqe),f&&t(Xo),w(LL),w($L),w(cF),w(kL),w(hF),f&&t(Zqe),f&&t(Md),w(RL),f&&t(eje),f&&t(zo),w(PL),w(IL),w(_F),w(NL),w(EF),f&&t(oje),f&&t(wd),w(qL),f&&t(rje),f&&t(Wo),w(jL),w(GL),w(wF),w(OL),w($F),f&&t(tje),f&&t(xd),w(VL),f&&t(aje),f&&t(Qo),w(XL),w(WL),w(SF),w(QL),w(IF),f&&t(nje),f&&t(Sd),w(UL),f&&t(sje),f&&t(Ho),w(JL),w(KL),w(qF),w(ZL),w(GF),f&&t(lje),f&&t(Bd),w(e8),f&&t(ije),f&&t(Uo),w(o8),w(t8),w(VF),w(a8),w(UF),f&&t(dje),f&&t(qd),w(n8),f&&t(cje),f&&t(Jo),w(s8),w(i8),w(YF),w(d8),w(eT),f&&t(fje),f&&t(Gd),w(c8),f&&t(mje),f&&t(Yo),w(f8),w(g8),w(rT),w(h8),w(HT),f&&t(gje),f&&t(Xd),w(p8),f&&t(hje),f&&t(Ko),w(_8),w(b8),w(JT),w(v8),w(F7),f&&t(pje),f&&t(Qd),w(F8),f&&t(_je),f&&t(Zo),w(T8),w(E8),w(M7),w(C8),w(B7),f&&t(uje),f&&t(Jd),w(w8),f&&t(bje),f&&t(er),w(A8),w(L8),w(N7),w(x8),w(O7),f&&t(vje),f&&t(Zd),w($8),f&&t(Fje),f&&t(or),w(k8),w(R8),w(X7),w(P8),w(fM),f&&t(Tje),f&&t(rc),w(B8),f&&t(Mje),f&&t(rr),w(I8),w(q8),w(gM),w(j8),w(CM),f&&t(Eje),f&&t(nc),w(D8),f&&t(Cje),f&&t(tr),w(G8),w(V8),w(AM),w(X8),w(ZM),f&&t(wje),f&&t(ic),w(z8),f&&t(Aje),f&&t(ar),w(W8),w(H8),w(o4),w(U8),w(v4),f&&t(yje),f&&t(fc),w(J8),f&&t(Lje),f&&t(nr),w(Y8),w(Z8),w(T4),w(e9),w(C4),f&&t(xje),f&&t(hc),w(r9),f&&t($je),f&&t(sr),w(t9),w(n9),w(A4),w(s9),w(L4),f&&t(kje),f&&t(uc),w(l9),f&&t(Sje),f&&t(lr),w(i9),w(c9),w($4),w(f9),w(Y4),f&&t(Rje),f&&t(Fc),w(m9),f&&t(Pje),f&&t(ir),w(g9),w(p9),w(Z4),w(_9),w(FE),f&&t(Bje),f&&t(Ec),w(u9),f&&t(Ije),f&&t(dr),w(b9),w(F9),w(ME),w(T9),w(CE),f&&t(Nje),f&&t(Ac),w(M9),f&&t(qje),f&&t(cr),w(E9),w(w9),w(AE),w(A9),w(LE),f&&t(jje),f&&t(xc),w(y9),f&&t(Dje),f&&t(fr),w(L9),w($9),w($E),w(k9),w(rC),f&&t(Gje),f&&t(Sc),w(S9),f&&t(Oje),f&&t(mr),w(R9),w(B9),w(aC),w(I9),w(hC),f&&t(Vje),f&&t(Bc),w(N9),f&&t(Xje),f&&t(gr),w(q9),w(D9),w(_C),w(G9),w(xC),f&&t(zje),f&&t(qc),w(O9),f&&t(Wje),f&&t(hr),w(V9),w(z9),w(kC),w(W9),w(OC),f&&t(Qje),f&&t(Gc),w(Q9),f&&t(Hje),f&&t(pr),w(H9),w(J9),w(XC),w(Y9),w(e5),f&&t(Uje),f&&t(Xc),w(K9),f&&t(Jje),f&&t(_r),w(Z9),w(ox),w(r5),w(rx),w(g5),f&&t(Yje),f&&t(Qc),w(tx),f&&t(Kje),f&&t(ur),w(ax),w(sx),w(p5),w(lx),w(A5),f&&t(Zje),f&&t(Jc),w(ix),f&&t(eDe),f&&t(br),w(dx),w(fx),w(L5),w(mx),w(N5),f&&t(oDe),f&&t(Zc),w(gx),f&&t(rDe),f&&t(vr),w(hx),w(_x),w(j5),w(ux),w(H5),f&&t(tDe),f&&t(rf),w(bx),f&&t(aDe),f&&t(Fr),w(vx),w(Tx),w(J5),w(Mx),w(K5),f&&t(nDe),f&&t(nf),w(Ex),f&&t(sDe),f&&t(Tr),w(Cx),w(Ax),w(ew),w(yx),w(tw),f&&t(lDe),f&&t(df),w(xx),f&&t(iDe),f&&t(Mr),w($x),w(Sx),w(nw),w(Rx),w(lw)}}}const kSt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function SSt(L){return S$t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class jSt extends L$t{constructor(g){super();x$t(this,g,SSt,$St,$$t,{})}}export{jSt as default,kSt as metadata};
