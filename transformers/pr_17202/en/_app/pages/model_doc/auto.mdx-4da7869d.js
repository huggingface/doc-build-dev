import{S as M9t,i as E9t,s as C9t,e as a,k as l,w as F,t as o,M as w9t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as A9t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as dOr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function y9t(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,pA,pf,je,We,gi,yn,_A,Ln,xn,uA,hi,$n,bA,pi,_f,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ci=a("code"),hf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),fi=a("code"),mi=o('"new-model"'),pA=o(")."),pf=l(),je=a("p"),We=o("Likewise, if your "),gi=a("code"),yn=o("NewModel"),_A=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),uA=o(`, make sure its
`),hi=a("code"),$n=o("config_class"),bA=o(` attribute is set to the same class you use when registering the model (here
`),pi=a("code"),_f=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var I$=s(p);m=r(I$,"NewModelConfig"),I$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),ci=n(Ae,"CODE",{});var q$=s(ci);hf=r(q$,"model_type"),q$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),fi=n(Ae,"CODE",{});var N$=s(fi);mi=r(N$,'"new-model"'),N$.forEach(t),pA=r(Ae,")."),Ae.forEach(t),pf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),gi=n(Eo,"CODE",{});var wa=s(gi);yn=r(wa,"NewModel"),wa.forEach(t),_A=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var j$=s(Ln);xn=r(j$,"PreTrainedModel"),j$.forEach(t),uA=r(Eo,`, make sure its
`),hi=n(Eo,"CODE",{});var uf=s(hi);$n=r(uf,"config_class"),uf.forEach(t),bA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),pi=n(Eo,"CODE",{});var D$=s(pi);_f=r(D$,"NewModelConfig"),D$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,ci),e(ci,hf),e(g,rt),e(g,fi),e(fi,mi),e(g,pA),b(Qe,pf,Ae),b(Qe,je,Ae),e(je,We),e(je,gi),e(gi,yn),e(je,_A),e(je,Ln),e(Ln,xn),e(je,uA),e(je,hi),e(hi,$n),e(je,bA),e(je,pi),e(pi,_f),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(pf),Qe&&t(je)}}}function L9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $9t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function k9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S9t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function R9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function txt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function axt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ixt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _xt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Txt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ext(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Axt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $xt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ixt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zxt(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E$t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C$t(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,pA,pf,je,We,gi,yn,_A,Ln,xn,uA,hi,$n,bA,pi,_f,Ca,Qe,Ae,I$,_i,q$,N$,Eo,wa,j$,uf,D$,$Ge,vqe,ui,bf,Oee,vA,kGe,Vee,SGe,Fqe,kn,RGe,Xee,BGe,PGe,zee,IGe,qGe,Tqe,FA,Mqe,G$,NGe,Eqe,vf,Cqe,bi,Ff,Wee,TA,jGe,Qee,DGe,wqe,Co,MA,GGe,EA,OGe,O$,VGe,XGe,zGe,CA,WGe,Hee,QGe,HGe,UGe,Er,wA,JGe,Uee,YGe,KGe,vi,ZGe,Jee,eOe,oOe,Yee,rOe,tOe,aOe,A,Tf,Kee,nOe,sOe,V$,lOe,iOe,dOe,Mf,Zee,cOe,fOe,X$,mOe,gOe,hOe,Ef,eoe,pOe,_Oe,z$,uOe,bOe,vOe,Cf,ooe,FOe,TOe,W$,MOe,EOe,COe,wf,roe,wOe,AOe,Q$,yOe,LOe,xOe,Af,toe,$Oe,kOe,H$,SOe,ROe,BOe,yf,aoe,POe,IOe,U$,qOe,NOe,jOe,Lf,noe,DOe,GOe,J$,OOe,VOe,XOe,xf,soe,zOe,WOe,Y$,QOe,HOe,UOe,$f,loe,JOe,YOe,K$,KOe,ZOe,eVe,kf,ioe,oVe,rVe,Z$,tVe,aVe,nVe,Sf,doe,sVe,lVe,ek,iVe,dVe,cVe,Rf,coe,fVe,mVe,ok,gVe,hVe,pVe,Bf,foe,_Ve,uVe,rk,bVe,vVe,FVe,Pf,moe,TVe,MVe,tk,EVe,CVe,wVe,If,goe,AVe,yVe,ak,LVe,xVe,$Ve,qf,hoe,kVe,SVe,nk,RVe,BVe,PVe,Nf,poe,IVe,qVe,sk,NVe,jVe,DVe,jf,_oe,GVe,OVe,lk,VVe,XVe,zVe,Df,uoe,WVe,QVe,ik,HVe,UVe,JVe,Gf,boe,YVe,KVe,dk,ZVe,eXe,oXe,Of,voe,rXe,tXe,ck,aXe,nXe,sXe,Vf,Foe,lXe,iXe,fk,dXe,cXe,fXe,Xf,Toe,mXe,gXe,mk,hXe,pXe,_Xe,zf,Moe,uXe,bXe,gk,vXe,FXe,TXe,Wf,Eoe,MXe,EXe,hk,CXe,wXe,AXe,Qf,Coe,yXe,LXe,pk,xXe,$Xe,kXe,Hf,woe,SXe,RXe,_k,BXe,PXe,IXe,Uf,Aoe,qXe,NXe,uk,jXe,DXe,GXe,Jf,yoe,OXe,VXe,bk,XXe,zXe,WXe,Yf,Loe,QXe,HXe,vk,UXe,JXe,YXe,Kf,xoe,KXe,ZXe,Fk,eze,oze,rze,Zf,$oe,tze,aze,Tk,nze,sze,lze,em,koe,ize,dze,Mk,cze,fze,mze,om,Soe,gze,hze,Ek,pze,_ze,uze,rm,Roe,bze,vze,Ck,Fze,Tze,Mze,tm,Boe,Eze,Cze,wk,wze,Aze,yze,am,Poe,Lze,xze,Ak,$ze,kze,Sze,nm,Ioe,Rze,Bze,yk,Pze,Ize,qze,sm,qoe,Nze,jze,Lk,Dze,Gze,Oze,lm,Noe,Vze,Xze,xk,zze,Wze,Qze,im,joe,Hze,Uze,$k,Jze,Yze,Kze,dm,Doe,Zze,eWe,kk,oWe,rWe,tWe,cm,Goe,aWe,nWe,Sk,sWe,lWe,iWe,fm,Ooe,dWe,cWe,Rk,fWe,mWe,gWe,mm,Voe,hWe,pWe,Bk,_We,uWe,bWe,gm,Xoe,vWe,FWe,Pk,TWe,MWe,EWe,hm,zoe,CWe,wWe,Ik,AWe,yWe,LWe,pm,Woe,xWe,$We,qk,kWe,SWe,RWe,_m,Qoe,BWe,PWe,Nk,IWe,qWe,NWe,um,Hoe,jWe,DWe,jk,GWe,OWe,VWe,bm,Uoe,XWe,zWe,Dk,WWe,QWe,HWe,vm,Joe,UWe,JWe,Gk,YWe,KWe,ZWe,Fm,Yoe,eQe,oQe,Ok,rQe,tQe,aQe,Tm,Koe,nQe,sQe,Vk,lQe,iQe,dQe,Mm,Zoe,cQe,fQe,Xk,mQe,gQe,hQe,Em,ere,pQe,_Qe,zk,uQe,bQe,vQe,Cm,ore,FQe,TQe,Wk,MQe,EQe,CQe,wm,rre,wQe,AQe,Qk,yQe,LQe,xQe,Am,tre,$Qe,kQe,Hk,SQe,RQe,BQe,ym,are,PQe,IQe,Uk,qQe,NQe,jQe,Lm,nre,DQe,GQe,Jk,OQe,VQe,XQe,xm,sre,zQe,WQe,Yk,QQe,HQe,UQe,$m,lre,JQe,YQe,Kk,KQe,ZQe,eHe,km,ire,oHe,rHe,Zk,tHe,aHe,nHe,Sm,dre,sHe,lHe,eS,iHe,dHe,cHe,Rm,cre,fHe,mHe,oS,gHe,hHe,pHe,Bm,fre,_He,uHe,rS,bHe,vHe,FHe,Pm,mre,THe,MHe,tS,EHe,CHe,wHe,Im,gre,AHe,yHe,aS,LHe,xHe,$He,qm,hre,kHe,SHe,nS,RHe,BHe,PHe,Nm,pre,IHe,qHe,sS,NHe,jHe,DHe,jm,_re,GHe,OHe,lS,VHe,XHe,zHe,Dm,ure,WHe,QHe,iS,HHe,UHe,JHe,Gm,bre,YHe,KHe,dS,ZHe,eUe,oUe,Om,vre,rUe,tUe,cS,aUe,nUe,sUe,Vm,Fre,lUe,iUe,fS,dUe,cUe,fUe,Xm,Tre,mUe,gUe,mS,hUe,pUe,_Ue,zm,Mre,uUe,bUe,gS,vUe,FUe,TUe,Wm,Ere,MUe,EUe,hS,CUe,wUe,AUe,Qm,Cre,yUe,LUe,pS,xUe,$Ue,kUe,Hm,wre,SUe,RUe,_S,BUe,PUe,IUe,Um,Are,qUe,NUe,uS,jUe,DUe,GUe,Jm,yre,OUe,VUe,bS,XUe,zUe,WUe,Ym,Lre,QUe,HUe,vS,UUe,JUe,YUe,Km,xre,KUe,ZUe,FS,eJe,oJe,rJe,Zm,$re,tJe,aJe,TS,nJe,sJe,lJe,eg,kre,iJe,dJe,MS,cJe,fJe,mJe,og,Sre,gJe,hJe,ES,pJe,_Je,uJe,rg,Rre,bJe,vJe,CS,FJe,TJe,MJe,tg,Bre,EJe,CJe,wS,wJe,AJe,yJe,ag,Pre,LJe,xJe,AS,$Je,kJe,SJe,ng,Ire,RJe,BJe,yS,PJe,IJe,qJe,sg,qre,NJe,jJe,LS,DJe,GJe,OJe,lg,Nre,VJe,XJe,xS,zJe,WJe,QJe,ig,jre,HJe,UJe,$S,JJe,YJe,KJe,dg,Dre,ZJe,eYe,kS,oYe,rYe,tYe,cg,Gre,aYe,nYe,SS,sYe,lYe,iYe,fg,Ore,dYe,cYe,RS,fYe,mYe,gYe,mg,Vre,hYe,pYe,BS,_Ye,uYe,bYe,gg,Xre,vYe,FYe,PS,TYe,MYe,EYe,hg,zre,CYe,wYe,IS,AYe,yYe,LYe,pg,Wre,xYe,$Ye,qS,kYe,SYe,RYe,_g,Qre,BYe,PYe,NS,IYe,qYe,NYe,ug,Hre,jYe,DYe,jS,GYe,OYe,VYe,bg,Ure,XYe,zYe,DS,WYe,QYe,HYe,vg,Jre,UYe,JYe,GS,YYe,KYe,ZYe,Fg,Yre,eKe,oKe,OS,rKe,tKe,aKe,Tg,nKe,Mg,AA,sKe,Kre,lKe,Aqe,Fi,Eg,Zre,yA,iKe,ete,dKe,yqe,wo,LA,cKe,xA,fKe,VS,mKe,gKe,hKe,$A,pKe,ote,_Ke,uKe,bKe,Cr,kA,vKe,rte,FKe,TKe,Aa,MKe,tte,EKe,CKe,ate,wKe,AKe,nte,yKe,LKe,xKe,k,Sn,ste,$Ke,kKe,XS,SKe,RKe,zS,BKe,PKe,IKe,Rn,lte,qKe,NKe,WS,jKe,DKe,QS,GKe,OKe,VKe,Bn,ite,XKe,zKe,HS,WKe,QKe,US,HKe,UKe,JKe,Cg,dte,YKe,KKe,JS,ZKe,eZe,oZe,Pn,cte,rZe,tZe,YS,aZe,nZe,KS,sZe,lZe,iZe,wg,fte,dZe,cZe,ZS,fZe,mZe,gZe,Ag,mte,hZe,pZe,eR,_Ze,uZe,bZe,yg,gte,vZe,FZe,oR,TZe,MZe,EZe,In,hte,CZe,wZe,rR,AZe,yZe,tR,LZe,xZe,$Ze,qn,pte,kZe,SZe,aR,RZe,BZe,nR,PZe,IZe,qZe,Nn,_te,NZe,jZe,sR,DZe,GZe,lR,OZe,VZe,XZe,Lg,ute,zZe,WZe,iR,QZe,HZe,UZe,xg,bte,JZe,YZe,dR,KZe,ZZe,eeo,$g,vte,oeo,reo,cR,teo,aeo,neo,jn,Fte,seo,leo,fR,ieo,deo,mR,ceo,feo,meo,kg,Tte,geo,heo,gR,peo,_eo,ueo,Dn,Mte,beo,veo,hR,Feo,Teo,pR,Meo,Eeo,Ceo,Gn,Ete,weo,Aeo,_R,yeo,Leo,uR,xeo,$eo,keo,On,Cte,Seo,Reo,bR,Beo,Peo,vR,Ieo,qeo,Neo,Sg,wte,jeo,Deo,FR,Geo,Oeo,Veo,Vn,Ate,Xeo,zeo,TR,Weo,Qeo,MR,Heo,Ueo,Jeo,Xn,yte,Yeo,Keo,ER,Zeo,eoo,CR,ooo,roo,too,zn,Lte,aoo,noo,wR,soo,loo,AR,ioo,doo,coo,Wn,xte,foo,moo,yR,goo,hoo,LR,poo,_oo,uoo,Qn,$te,boo,voo,xR,Foo,Too,$R,Moo,Eoo,Coo,Hn,kte,woo,Aoo,kR,yoo,Loo,SR,xoo,$oo,koo,Rg,Ste,Soo,Roo,RR,Boo,Poo,Ioo,Un,Rte,qoo,Noo,BR,joo,Doo,PR,Goo,Ooo,Voo,Bg,Bte,Xoo,zoo,IR,Woo,Qoo,Hoo,Jn,Pte,Uoo,Joo,qR,Yoo,Koo,NR,Zoo,ero,oro,Yn,Ite,rro,tro,jR,aro,nro,DR,sro,lro,iro,Kn,qte,dro,cro,GR,fro,mro,OR,gro,hro,pro,Zn,Nte,_ro,uro,VR,bro,vro,XR,Fro,Tro,Mro,es,jte,Ero,Cro,zR,wro,Aro,WR,yro,Lro,xro,Pg,Dte,$ro,kro,QR,Sro,Rro,Bro,os,Gte,Pro,Iro,HR,qro,Nro,UR,jro,Dro,Gro,rs,Ote,Oro,Vro,JR,Xro,zro,YR,Wro,Qro,Hro,ts,Vte,Uro,Jro,KR,Yro,Kro,ZR,Zro,eto,oto,as,Xte,rto,tto,eB,ato,nto,oB,sto,lto,ito,ns,zte,dto,cto,rB,fto,mto,tB,gto,hto,pto,ss,Wte,_to,uto,aB,bto,vto,nB,Fto,Tto,Mto,Ig,Qte,Eto,Cto,sB,wto,Ato,yto,ls,Hte,Lto,xto,lB,$to,kto,iB,Sto,Rto,Bto,qg,Ute,Pto,Ito,dB,qto,Nto,jto,Ng,Jte,Dto,Gto,cB,Oto,Vto,Xto,is,Yte,zto,Wto,fB,Qto,Hto,mB,Uto,Jto,Yto,ds,Kte,Kto,Zto,gB,eao,oao,hB,rao,tao,aao,cs,Zte,nao,sao,pB,lao,iao,_B,dao,cao,fao,jg,eae,mao,gao,uB,hao,pao,_ao,fs,oae,uao,bao,bB,vao,Fao,vB,Tao,Mao,Eao,ms,rae,Cao,wao,FB,Aao,yao,TB,Lao,xao,$ao,gs,tae,kao,Sao,MB,Rao,Bao,EB,Pao,Iao,qao,hs,aae,Nao,jao,CB,Dao,Gao,wB,Oao,Vao,Xao,ps,nae,zao,Wao,AB,Qao,Hao,yB,Uao,Jao,Yao,Dg,sae,Kao,Zao,LB,eno,ono,rno,_s,lae,tno,ano,xB,nno,sno,$B,lno,ino,dno,Gg,iae,cno,fno,kB,mno,gno,hno,Og,dae,pno,_no,SB,uno,bno,vno,Vg,cae,Fno,Tno,RB,Mno,Eno,Cno,Xg,fae,wno,Ano,BB,yno,Lno,xno,us,mae,$no,kno,PB,Sno,Rno,IB,Bno,Pno,Ino,zg,gae,qno,Nno,qB,jno,Dno,Gno,bs,hae,Ono,Vno,NB,Xno,zno,jB,Wno,Qno,Hno,vs,pae,Uno,Jno,DB,Yno,Kno,GB,Zno,eso,oso,Fs,_ae,rso,tso,OB,aso,nso,VB,sso,lso,iso,Ts,uae,dso,cso,XB,fso,mso,zB,gso,hso,pso,Ms,bae,_so,uso,WB,bso,vso,QB,Fso,Tso,Mso,Es,vae,Eso,Cso,HB,wso,Aso,UB,yso,Lso,xso,Wg,Fae,$so,kso,JB,Sso,Rso,Bso,Qg,Tae,Pso,Iso,YB,qso,Nso,jso,Cs,Mae,Dso,Gso,KB,Oso,Vso,ZB,Xso,zso,Wso,ws,Eae,Qso,Hso,eP,Uso,Jso,oP,Yso,Kso,Zso,As,Cae,elo,olo,rP,rlo,tlo,tP,alo,nlo,slo,Hg,wae,llo,ilo,aP,dlo,clo,flo,Ug,Aae,mlo,glo,nP,hlo,plo,_lo,Jg,yae,ulo,blo,sP,vlo,Flo,Tlo,ys,Lae,Mlo,Elo,lP,Clo,wlo,iP,Alo,ylo,Llo,Yg,xae,xlo,$lo,dP,klo,Slo,Rlo,Kg,$ae,Blo,Plo,cP,Ilo,qlo,Nlo,Zg,kae,jlo,Dlo,fP,Glo,Olo,Vlo,Ls,Sae,Xlo,zlo,mP,Wlo,Qlo,gP,Hlo,Ulo,Jlo,eh,Rae,Ylo,Klo,hP,Zlo,eio,oio,oh,Bae,rio,tio,pP,aio,nio,sio,xs,Pae,lio,iio,_P,dio,cio,uP,fio,mio,gio,$s,Iae,hio,pio,bP,_io,uio,vP,bio,vio,Fio,ks,qae,Tio,Mio,FP,Eio,Cio,TP,wio,Aio,yio,Ss,Nae,Lio,xio,MP,$io,kio,EP,Sio,Rio,Bio,rh,Pio,th,SA,Iio,jae,qio,Lqe,Ti,ah,Dae,RA,Nio,Gae,jio,xqe,Ao,BA,Dio,PA,Gio,CP,Oio,Vio,Xio,IA,zio,Oae,Wio,Qio,Hio,He,qA,Uio,Vae,Jio,Yio,ya,Kio,Xae,Zio,edo,zae,odo,rdo,Wae,tdo,ado,ndo,Z,nh,Qae,sdo,ldo,wP,ido,ddo,cdo,sh,Hae,fdo,mdo,AP,gdo,hdo,pdo,lh,Uae,_do,udo,yP,bdo,vdo,Fdo,ih,Jae,Tdo,Mdo,LP,Edo,Cdo,wdo,dh,Yae,Ado,ydo,xP,Ldo,xdo,$do,ch,Kae,kdo,Sdo,$P,Rdo,Bdo,Pdo,fh,Zae,Ido,qdo,kP,Ndo,jdo,Ddo,mh,ene,Gdo,Odo,SP,Vdo,Xdo,zdo,gh,one,Wdo,Qdo,RP,Hdo,Udo,Jdo,hh,rne,Ydo,Kdo,BP,Zdo,eco,oco,ph,tne,rco,tco,PP,aco,nco,sco,_h,ane,lco,ico,IP,dco,cco,fco,uh,nne,mco,gco,qP,hco,pco,_co,bh,sne,uco,bco,NP,vco,Fco,Tco,vh,lne,Mco,Eco,jP,Cco,wco,Aco,Fh,ine,yco,Lco,DP,xco,$co,kco,Th,dne,Sco,Rco,GP,Bco,Pco,Ico,Mh,cne,qco,Nco,OP,jco,Dco,Gco,Eh,fne,Oco,Vco,VP,Xco,zco,Wco,Ch,mne,Qco,Hco,XP,Uco,Jco,Yco,wh,gne,Kco,Zco,zP,efo,ofo,rfo,Ah,hne,tfo,afo,WP,nfo,sfo,lfo,yh,pne,ifo,dfo,QP,cfo,ffo,mfo,Lh,_ne,gfo,hfo,HP,pfo,_fo,ufo,xh,une,bfo,vfo,UP,Ffo,Tfo,Mfo,$h,bne,Efo,Cfo,JP,wfo,Afo,yfo,kh,vne,Lfo,xfo,YP,$fo,kfo,Sfo,Sh,Rfo,Rh,Bfo,Bh,NA,Pfo,Fne,Ifo,$qe,Mi,Ph,Tne,jA,qfo,Mne,Nfo,kqe,yo,DA,jfo,GA,Dfo,KP,Gfo,Ofo,Vfo,OA,Xfo,Ene,zfo,Wfo,Qfo,Ue,VA,Hfo,Cne,Ufo,Jfo,Ei,Yfo,wne,Kfo,Zfo,Ane,emo,omo,rmo,pe,Ih,yne,tmo,amo,ZP,nmo,smo,lmo,qh,Lne,imo,dmo,xne,cmo,fmo,mmo,Nh,$ne,gmo,hmo,eI,pmo,_mo,umo,jh,kne,bmo,vmo,oI,Fmo,Tmo,Mmo,Dh,Sne,Emo,Cmo,rI,wmo,Amo,ymo,Gh,Rne,Lmo,xmo,tI,$mo,kmo,Smo,Oh,Bne,Rmo,Bmo,aI,Pmo,Imo,qmo,Vh,Pne,Nmo,jmo,nI,Dmo,Gmo,Omo,Xh,Ine,Vmo,Xmo,sI,zmo,Wmo,Qmo,zh,qne,Hmo,Umo,lI,Jmo,Ymo,Kmo,Wh,Nne,Zmo,ego,iI,ogo,rgo,tgo,Qh,jne,ago,ngo,dI,sgo,lgo,igo,Hh,Dne,dgo,cgo,cI,fgo,mgo,ggo,Uh,Gne,hgo,pgo,fI,_go,ugo,bgo,Jh,One,vgo,Fgo,mI,Tgo,Mgo,Ego,Yh,Vne,Cgo,wgo,gI,Ago,ygo,Lgo,Kh,xgo,Zh,$go,ep,XA,kgo,Xne,Sgo,Sqe,Ci,op,zne,zA,Rgo,Wne,Bgo,Rqe,Lo,WA,Pgo,wi,Igo,hI,qgo,Ngo,pI,jgo,Dgo,Ggo,QA,Ogo,Qne,Vgo,Xgo,zgo,tt,HA,Wgo,Hne,Qgo,Hgo,Ai,Ugo,Une,Jgo,Ygo,_I,Kgo,Zgo,eho,rp,oho,Je,UA,rho,Jne,tho,aho,La,nho,Yne,sho,lho,Kne,iho,dho,Zne,cho,fho,mho,x,tp,ese,gho,hho,uI,pho,_ho,uho,ap,ose,bho,vho,bI,Fho,Tho,Mho,np,rse,Eho,Cho,vI,who,Aho,yho,sp,tse,Lho,xho,FI,$ho,kho,Sho,lp,ase,Rho,Bho,TI,Pho,Iho,qho,ip,nse,Nho,jho,MI,Dho,Gho,Oho,dp,sse,Vho,Xho,EI,zho,Who,Qho,cp,lse,Hho,Uho,CI,Jho,Yho,Kho,fp,ise,Zho,epo,wI,opo,rpo,tpo,mp,dse,apo,npo,AI,spo,lpo,ipo,gp,cse,dpo,cpo,yI,fpo,mpo,gpo,hp,fse,hpo,ppo,LI,_po,upo,bpo,pp,mse,vpo,Fpo,xI,Tpo,Mpo,Epo,_p,gse,Cpo,wpo,$I,Apo,ypo,Lpo,up,hse,xpo,$po,kI,kpo,Spo,Rpo,bp,pse,Bpo,Ppo,SI,Ipo,qpo,Npo,vp,_se,jpo,Dpo,RI,Gpo,Opo,Vpo,Fp,use,Xpo,zpo,BI,Wpo,Qpo,Hpo,Tp,bse,Upo,Jpo,PI,Ypo,Kpo,Zpo,Mp,vse,e_o,o_o,II,r_o,t_o,a_o,Ep,Fse,n_o,s_o,qI,l_o,i_o,d_o,Cp,Tse,c_o,f_o,NI,m_o,g_o,h_o,wp,Mse,p_o,__o,jI,u_o,b_o,v_o,Ap,Ese,F_o,T_o,DI,M_o,E_o,C_o,yp,Cse,w_o,A_o,GI,y_o,L_o,x_o,Lp,wse,$_o,k_o,OI,S_o,R_o,B_o,xp,Ase,P_o,I_o,VI,q_o,N_o,j_o,$p,yse,D_o,G_o,XI,O_o,V_o,X_o,kp,Lse,z_o,W_o,zI,Q_o,H_o,U_o,Sp,xse,J_o,Y_o,WI,K_o,Z_o,euo,Rp,$se,ouo,ruo,QI,tuo,auo,nuo,Bp,kse,suo,luo,HI,iuo,duo,cuo,Pp,Sse,fuo,muo,UI,guo,huo,puo,Rs,Rse,_uo,uuo,JI,buo,vuo,YI,Fuo,Tuo,Muo,Ip,Bse,Euo,Cuo,KI,wuo,Auo,yuo,qp,Pse,Luo,xuo,ZI,$uo,kuo,Suo,Np,Ise,Ruo,Buo,eq,Puo,Iuo,quo,jp,qse,Nuo,juo,oq,Duo,Guo,Ouo,Dp,Nse,Vuo,Xuo,rq,zuo,Wuo,Quo,Gp,jse,Huo,Uuo,tq,Juo,Yuo,Kuo,Op,Dse,Zuo,e2o,aq,o2o,r2o,t2o,Vp,Gse,a2o,n2o,nq,s2o,l2o,i2o,Xp,Ose,d2o,c2o,sq,f2o,m2o,g2o,zp,Vse,h2o,p2o,lq,_2o,u2o,b2o,Wp,Xse,v2o,F2o,iq,T2o,M2o,E2o,Qp,zse,C2o,w2o,dq,A2o,y2o,L2o,Hp,Wse,x2o,$2o,cq,k2o,S2o,R2o,Up,Qse,B2o,P2o,fq,I2o,q2o,N2o,Jp,Hse,j2o,D2o,mq,G2o,O2o,V2o,Yp,Use,X2o,z2o,gq,W2o,Q2o,H2o,Kp,Jse,U2o,J2o,hq,Y2o,K2o,Z2o,Zp,Yse,e1o,o1o,pq,r1o,t1o,a1o,e_,Kse,n1o,s1o,_q,l1o,i1o,d1o,o_,Zse,c1o,f1o,uq,m1o,g1o,h1o,r_,ele,p1o,_1o,bq,u1o,b1o,v1o,t_,ole,F1o,T1o,vq,M1o,E1o,C1o,a_,rle,w1o,A1o,Fq,y1o,L1o,x1o,n_,tle,$1o,k1o,Tq,S1o,R1o,B1o,s_,ale,P1o,I1o,Mq,q1o,N1o,j1o,l_,nle,D1o,G1o,Eq,O1o,V1o,X1o,i_,sle,z1o,W1o,Cq,Q1o,H1o,U1o,d_,lle,J1o,Y1o,wq,K1o,Z1o,ebo,c_,ile,obo,rbo,Aq,tbo,abo,nbo,f_,dle,sbo,lbo,yq,ibo,dbo,cbo,m_,cle,fbo,mbo,Lq,gbo,hbo,pbo,g_,fle,_bo,ubo,xq,bbo,vbo,Fbo,h_,mle,Tbo,Mbo,$q,Ebo,Cbo,wbo,p_,gle,Abo,ybo,kq,Lbo,xbo,$bo,__,hle,kbo,Sbo,Sq,Rbo,Bbo,Pbo,u_,ple,Ibo,qbo,Rq,Nbo,jbo,Dbo,b_,_le,Gbo,Obo,Bq,Vbo,Xbo,zbo,v_,ule,Wbo,Qbo,Pq,Hbo,Ubo,Jbo,F_,ble,Ybo,Kbo,Iq,Zbo,evo,ovo,T_,vle,rvo,tvo,qq,avo,nvo,svo,M_,Fle,lvo,ivo,Nq,dvo,cvo,fvo,E_,Tle,mvo,gvo,jq,hvo,pvo,_vo,C_,Mle,uvo,bvo,Dq,vvo,Fvo,Tvo,w_,Ele,Mvo,Evo,Gq,Cvo,wvo,Avo,A_,Cle,yvo,Lvo,Oq,xvo,$vo,kvo,y_,wle,Svo,Rvo,Vq,Bvo,Pvo,Ivo,L_,Ale,qvo,Nvo,Xq,jvo,Dvo,Gvo,x_,yle,Ovo,Vvo,zq,Xvo,zvo,Wvo,$_,Lle,Qvo,Hvo,Wq,Uvo,Jvo,Yvo,k_,xle,Kvo,Zvo,Qq,eFo,oFo,rFo,S_,$le,tFo,aFo,Hq,nFo,sFo,lFo,R_,kle,iFo,dFo,Uq,cFo,fFo,mFo,B_,Sle,gFo,hFo,Jq,pFo,_Fo,uFo,P_,Rle,bFo,vFo,Yq,FFo,TFo,MFo,I_,Ble,EFo,CFo,Kq,wFo,AFo,yFo,q_,Ple,LFo,xFo,Zq,$Fo,kFo,SFo,N_,Ile,RFo,BFo,eN,PFo,IFo,qFo,j_,qle,NFo,jFo,oN,DFo,GFo,OFo,D_,Nle,VFo,XFo,rN,zFo,WFo,QFo,G_,jle,HFo,UFo,tN,JFo,YFo,KFo,O_,Dle,ZFo,e0o,aN,o0o,r0o,t0o,V_,Gle,a0o,n0o,nN,s0o,l0o,i0o,X_,Ole,d0o,c0o,sN,f0o,m0o,g0o,z_,Vle,h0o,p0o,lN,_0o,u0o,b0o,W_,Xle,v0o,F0o,iN,T0o,M0o,E0o,Q_,zle,C0o,w0o,dN,A0o,y0o,L0o,H_,Wle,x0o,$0o,cN,k0o,S0o,R0o,U_,B0o,Qle,P0o,I0o,Hle,q0o,N0o,J_,Bqe,yi,Y_,Ule,JA,j0o,Jle,D0o,Pqe,xo,YA,G0o,Li,O0o,fN,V0o,X0o,mN,z0o,W0o,Q0o,KA,H0o,Yle,U0o,J0o,Y0o,at,ZA,K0o,Kle,Z0o,eTo,xi,oTo,Zle,rTo,tTo,gN,aTo,nTo,sTo,K_,lTo,Ye,ey,iTo,eie,dTo,cTo,xa,fTo,oie,mTo,gTo,rie,hTo,pTo,tie,_To,uTo,bTo,G,Z_,aie,vTo,FTo,hN,TTo,MTo,ETo,eu,nie,CTo,wTo,pN,ATo,yTo,LTo,ou,sie,xTo,$To,_N,kTo,STo,RTo,ru,lie,BTo,PTo,uN,ITo,qTo,NTo,tu,iie,jTo,DTo,bN,GTo,OTo,VTo,au,die,XTo,zTo,vN,WTo,QTo,HTo,nu,cie,UTo,JTo,FN,YTo,KTo,ZTo,su,fie,e7o,o7o,TN,r7o,t7o,a7o,lu,mie,n7o,s7o,MN,l7o,i7o,d7o,iu,gie,c7o,f7o,EN,m7o,g7o,h7o,du,hie,p7o,_7o,CN,u7o,b7o,v7o,cu,pie,F7o,T7o,wN,M7o,E7o,C7o,fu,_ie,w7o,A7o,AN,y7o,L7o,x7o,mu,uie,$7o,k7o,yN,S7o,R7o,B7o,gu,bie,P7o,I7o,LN,q7o,N7o,j7o,hu,vie,D7o,G7o,xN,O7o,V7o,X7o,pu,Fie,z7o,W7o,$N,Q7o,H7o,U7o,_u,Tie,J7o,Y7o,kN,K7o,Z7o,eMo,uu,Mie,oMo,rMo,SN,tMo,aMo,nMo,bu,Eie,sMo,lMo,RN,iMo,dMo,cMo,vu,Cie,fMo,mMo,BN,gMo,hMo,pMo,Fu,wie,_Mo,uMo,PN,bMo,vMo,FMo,Tu,Aie,TMo,MMo,IN,EMo,CMo,wMo,Mu,yie,AMo,yMo,qN,LMo,xMo,$Mo,Eu,Lie,kMo,SMo,NN,RMo,BMo,PMo,Cu,xie,IMo,qMo,jN,NMo,jMo,DMo,wu,$ie,GMo,OMo,DN,VMo,XMo,zMo,Au,kie,WMo,QMo,GN,HMo,UMo,JMo,yu,Sie,YMo,KMo,ON,ZMo,e4o,o4o,Lu,Rie,r4o,t4o,VN,a4o,n4o,s4o,xu,Bie,l4o,i4o,XN,d4o,c4o,f4o,$u,Pie,m4o,g4o,zN,h4o,p4o,_4o,ku,Iie,u4o,b4o,WN,v4o,F4o,T4o,Su,qie,M4o,E4o,QN,C4o,w4o,A4o,Ru,Nie,y4o,L4o,HN,x4o,$4o,k4o,Bu,jie,S4o,R4o,UN,B4o,P4o,I4o,Pu,Die,q4o,N4o,JN,j4o,D4o,G4o,Iu,Gie,O4o,V4o,YN,X4o,z4o,W4o,qu,Oie,Q4o,H4o,KN,U4o,J4o,Y4o,Nu,Vie,K4o,Z4o,ZN,eEo,oEo,rEo,ju,Xie,tEo,aEo,ej,nEo,sEo,lEo,Du,zie,iEo,dEo,oj,cEo,fEo,mEo,Gu,Wie,gEo,hEo,rj,pEo,_Eo,uEo,Ou,bEo,Qie,vEo,FEo,Hie,TEo,MEo,Vu,Iqe,$i,Xu,Uie,oy,EEo,Jie,CEo,qqe,$o,ry,wEo,ki,AEo,tj,yEo,LEo,aj,xEo,$Eo,kEo,ty,SEo,Yie,REo,BEo,PEo,nt,ay,IEo,Kie,qEo,NEo,Si,jEo,Zie,DEo,GEo,nj,OEo,VEo,XEo,zu,zEo,Ke,ny,WEo,ede,QEo,HEo,$a,UEo,ode,JEo,YEo,rde,KEo,ZEo,tde,eCo,oCo,rCo,z,Wu,ade,tCo,aCo,sj,nCo,sCo,lCo,Qu,nde,iCo,dCo,lj,cCo,fCo,mCo,Hu,sde,gCo,hCo,ij,pCo,_Co,uCo,Uu,lde,bCo,vCo,dj,FCo,TCo,MCo,Ju,ide,ECo,CCo,cj,wCo,ACo,yCo,Yu,dde,LCo,xCo,fj,$Co,kCo,SCo,Ku,cde,RCo,BCo,mj,PCo,ICo,qCo,Zu,fde,NCo,jCo,gj,DCo,GCo,OCo,e2,mde,VCo,XCo,hj,zCo,WCo,QCo,o2,gde,HCo,UCo,pj,JCo,YCo,KCo,r2,hde,ZCo,e5o,_j,o5o,r5o,t5o,t2,pde,a5o,n5o,uj,s5o,l5o,i5o,a2,_de,d5o,c5o,bj,f5o,m5o,g5o,n2,ude,h5o,p5o,vj,_5o,u5o,b5o,s2,bde,v5o,F5o,Fj,T5o,M5o,E5o,l2,vde,C5o,w5o,Tj,A5o,y5o,L5o,i2,Fde,x5o,$5o,Mj,k5o,S5o,R5o,d2,Tde,B5o,P5o,Ej,I5o,q5o,N5o,c2,Mde,j5o,D5o,Cj,G5o,O5o,V5o,f2,Ede,X5o,z5o,wj,W5o,Q5o,H5o,m2,Cde,U5o,J5o,Aj,Y5o,K5o,Z5o,g2,wde,e3o,o3o,yj,r3o,t3o,a3o,h2,Ade,n3o,s3o,Lj,l3o,i3o,d3o,p2,yde,c3o,f3o,xj,m3o,g3o,h3o,_2,Lde,p3o,_3o,$j,u3o,b3o,v3o,u2,xde,F3o,T3o,kj,M3o,E3o,C3o,b2,$de,w3o,A3o,Sj,y3o,L3o,x3o,v2,kde,$3o,k3o,Rj,S3o,R3o,B3o,F2,Sde,P3o,I3o,Bj,q3o,N3o,j3o,T2,Rde,D3o,G3o,Pj,O3o,V3o,X3o,M2,Bde,z3o,W3o,Ij,Q3o,H3o,U3o,E2,Pde,J3o,Y3o,qj,K3o,Z3o,ewo,C2,Ide,owo,rwo,Nj,two,awo,nwo,w2,qde,swo,lwo,jj,iwo,dwo,cwo,A2,Nde,fwo,mwo,Dj,gwo,hwo,pwo,y2,jde,_wo,uwo,Gj,bwo,vwo,Fwo,L2,Dde,Two,Mwo,Oj,Ewo,Cwo,wwo,x2,Awo,Gde,ywo,Lwo,Ode,xwo,$wo,$2,Nqe,Ri,k2,Vde,sy,kwo,Xde,Swo,jqe,ko,ly,Rwo,Bi,Bwo,Vj,Pwo,Iwo,Xj,qwo,Nwo,jwo,iy,Dwo,zde,Gwo,Owo,Vwo,st,dy,Xwo,Wde,zwo,Wwo,Pi,Qwo,Qde,Hwo,Uwo,zj,Jwo,Ywo,Kwo,S2,Zwo,Ze,cy,e6o,Hde,o6o,r6o,ka,t6o,Ude,a6o,n6o,Jde,s6o,l6o,Yde,i6o,d6o,c6o,Q,R2,Kde,f6o,m6o,Wj,g6o,h6o,p6o,B2,Zde,_6o,u6o,Qj,b6o,v6o,F6o,P2,ece,T6o,M6o,Hj,E6o,C6o,w6o,I2,oce,A6o,y6o,Uj,L6o,x6o,$6o,q2,rce,k6o,S6o,Jj,R6o,B6o,P6o,N2,tce,I6o,q6o,Yj,N6o,j6o,D6o,j2,ace,G6o,O6o,Kj,V6o,X6o,z6o,D2,nce,W6o,Q6o,Zj,H6o,U6o,J6o,G2,sce,Y6o,K6o,eD,Z6o,eAo,oAo,O2,lce,rAo,tAo,oD,aAo,nAo,sAo,V2,ice,lAo,iAo,rD,dAo,cAo,fAo,X2,dce,mAo,gAo,tD,hAo,pAo,_Ao,z2,cce,uAo,bAo,aD,vAo,FAo,TAo,W2,fce,MAo,EAo,nD,CAo,wAo,AAo,Q2,mce,yAo,LAo,sD,xAo,$Ao,kAo,H2,gce,SAo,RAo,lD,BAo,PAo,IAo,U2,hce,qAo,NAo,iD,jAo,DAo,GAo,J2,pce,OAo,VAo,dD,XAo,zAo,WAo,Y2,_ce,QAo,HAo,cD,UAo,JAo,YAo,K2,uce,KAo,ZAo,fD,eyo,oyo,ryo,Z2,bce,tyo,ayo,mD,nyo,syo,lyo,e1,vce,iyo,dyo,gD,cyo,fyo,myo,o1,Fce,gyo,hyo,hD,pyo,_yo,uyo,r1,Tce,byo,vyo,pD,Fyo,Tyo,Myo,t1,Mce,Eyo,Cyo,_D,wyo,Ayo,yyo,a1,Ece,Lyo,xyo,uD,$yo,kyo,Syo,n1,Cce,Ryo,Byo,bD,Pyo,Iyo,qyo,s1,wce,Nyo,jyo,vD,Dyo,Gyo,Oyo,l1,Ace,Vyo,Xyo,FD,zyo,Wyo,Qyo,i1,yce,Hyo,Uyo,TD,Jyo,Yyo,Kyo,d1,Lce,Zyo,eLo,xce,oLo,rLo,tLo,c1,$ce,aLo,nLo,MD,sLo,lLo,iLo,f1,kce,dLo,cLo,ED,fLo,mLo,gLo,m1,Sce,hLo,pLo,CD,_Lo,uLo,bLo,g1,Rce,vLo,FLo,wD,TLo,MLo,ELo,h1,CLo,Bce,wLo,ALo,Pce,yLo,LLo,p1,Dqe,Ii,_1,Ice,fy,xLo,qce,$Lo,Gqe,So,my,kLo,qi,SLo,AD,RLo,BLo,yD,PLo,ILo,qLo,gy,NLo,Nce,jLo,DLo,GLo,lt,hy,OLo,jce,VLo,XLo,Ni,zLo,Dce,WLo,QLo,LD,HLo,ULo,JLo,u1,YLo,eo,py,KLo,Gce,ZLo,e8o,Sa,o8o,Oce,r8o,t8o,Vce,a8o,n8o,Xce,s8o,l8o,i8o,_e,b1,zce,d8o,c8o,xD,f8o,m8o,g8o,v1,Wce,h8o,p8o,$D,_8o,u8o,b8o,F1,Qce,v8o,F8o,kD,T8o,M8o,E8o,T1,Hce,C8o,w8o,SD,A8o,y8o,L8o,M1,Uce,x8o,$8o,RD,k8o,S8o,R8o,E1,Jce,B8o,P8o,BD,I8o,q8o,N8o,C1,Yce,j8o,D8o,PD,G8o,O8o,V8o,w1,Kce,X8o,z8o,ID,W8o,Q8o,H8o,A1,Zce,U8o,J8o,qD,Y8o,K8o,Z8o,y1,efe,e9o,o9o,ND,r9o,t9o,a9o,L1,ofe,n9o,s9o,jD,l9o,i9o,d9o,x1,rfe,c9o,f9o,DD,m9o,g9o,h9o,$1,tfe,p9o,_9o,GD,u9o,b9o,v9o,k1,afe,F9o,T9o,OD,M9o,E9o,C9o,S1,nfe,w9o,A9o,VD,y9o,L9o,x9o,R1,sfe,$9o,k9o,XD,S9o,R9o,B9o,B1,P9o,lfe,I9o,q9o,ife,N9o,j9o,P1,Oqe,ji,I1,dfe,_y,D9o,cfe,G9o,Vqe,Ro,uy,O9o,Di,V9o,zD,X9o,z9o,WD,W9o,Q9o,H9o,by,U9o,ffe,J9o,Y9o,K9o,it,vy,Z9o,mfe,exo,oxo,Gi,rxo,gfe,txo,axo,QD,nxo,sxo,lxo,q1,ixo,oo,Fy,dxo,hfe,cxo,fxo,Ra,mxo,pfe,gxo,hxo,_fe,pxo,_xo,ufe,uxo,bxo,vxo,q,N1,bfe,Fxo,Txo,HD,Mxo,Exo,Cxo,j1,vfe,wxo,Axo,UD,yxo,Lxo,xxo,D1,Ffe,$xo,kxo,JD,Sxo,Rxo,Bxo,G1,Tfe,Pxo,Ixo,YD,qxo,Nxo,jxo,O1,Mfe,Dxo,Gxo,KD,Oxo,Vxo,Xxo,V1,Efe,zxo,Wxo,ZD,Qxo,Hxo,Uxo,X1,Cfe,Jxo,Yxo,eG,Kxo,Zxo,e$o,z1,wfe,o$o,r$o,oG,t$o,a$o,n$o,W1,Afe,s$o,l$o,rG,i$o,d$o,c$o,Q1,yfe,f$o,m$o,tG,g$o,h$o,p$o,H1,Lfe,_$o,u$o,aG,b$o,v$o,F$o,U1,xfe,T$o,M$o,nG,E$o,C$o,w$o,J1,$fe,A$o,y$o,sG,L$o,x$o,$$o,Y1,kfe,k$o,S$o,lG,R$o,B$o,P$o,K1,Sfe,I$o,q$o,iG,N$o,j$o,D$o,Z1,Rfe,G$o,O$o,dG,V$o,X$o,z$o,eb,Bfe,W$o,Q$o,cG,H$o,U$o,J$o,ob,Pfe,Y$o,K$o,fG,Z$o,eko,oko,rb,Ife,rko,tko,mG,ako,nko,sko,tb,qfe,lko,iko,gG,dko,cko,fko,ab,Nfe,mko,gko,hG,hko,pko,_ko,nb,jfe,uko,bko,pG,vko,Fko,Tko,sb,Dfe,Mko,Eko,_G,Cko,wko,Ako,lb,Gfe,yko,Lko,uG,xko,$ko,kko,ib,Ofe,Sko,Rko,bG,Bko,Pko,Iko,db,Vfe,qko,Nko,vG,jko,Dko,Gko,cb,Xfe,Oko,Vko,FG,Xko,zko,Wko,fb,zfe,Qko,Hko,TG,Uko,Jko,Yko,mb,Wfe,Kko,Zko,MG,eSo,oSo,rSo,gb,Qfe,tSo,aSo,EG,nSo,sSo,lSo,hb,Hfe,iSo,dSo,CG,cSo,fSo,mSo,pb,Ufe,gSo,hSo,wG,pSo,_So,uSo,_b,Jfe,bSo,vSo,AG,FSo,TSo,MSo,ub,Yfe,ESo,CSo,yG,wSo,ASo,ySo,bb,Kfe,LSo,xSo,LG,$So,kSo,SSo,vb,Zfe,RSo,BSo,xG,PSo,ISo,qSo,Fb,eme,NSo,jSo,$G,DSo,GSo,OSo,Tb,ome,VSo,XSo,kG,zSo,WSo,QSo,Mb,rme,HSo,USo,SG,JSo,YSo,KSo,Eb,tme,ZSo,eRo,RG,oRo,rRo,tRo,Cb,ame,aRo,nRo,BG,sRo,lRo,iRo,wb,nme,dRo,cRo,PG,fRo,mRo,gRo,Ab,sme,hRo,pRo,IG,_Ro,uRo,bRo,yb,lme,vRo,FRo,qG,TRo,MRo,ERo,Lb,ime,CRo,wRo,NG,ARo,yRo,LRo,xb,dme,xRo,$Ro,jG,kRo,SRo,RRo,$b,BRo,cme,PRo,IRo,fme,qRo,NRo,kb,Xqe,Oi,Sb,mme,Ty,jRo,gme,DRo,zqe,Bo,My,GRo,Vi,ORo,DG,VRo,XRo,GG,zRo,WRo,QRo,Ey,HRo,hme,URo,JRo,YRo,dt,Cy,KRo,pme,ZRo,eBo,Xi,oBo,_me,rBo,tBo,OG,aBo,nBo,sBo,Rb,lBo,ro,wy,iBo,ume,dBo,cBo,Ba,fBo,bme,mBo,gBo,vme,hBo,pBo,Fme,_Bo,uBo,bBo,Y,Bb,Tme,vBo,FBo,VG,TBo,MBo,EBo,Pb,Mme,CBo,wBo,XG,ABo,yBo,LBo,Ib,Eme,xBo,$Bo,zG,kBo,SBo,RBo,qb,Cme,BBo,PBo,WG,IBo,qBo,NBo,Nb,wme,jBo,DBo,QG,GBo,OBo,VBo,jb,Ame,XBo,zBo,HG,WBo,QBo,HBo,Db,yme,UBo,JBo,UG,YBo,KBo,ZBo,Gb,Lme,ePo,oPo,JG,rPo,tPo,aPo,Ob,xme,nPo,sPo,YG,lPo,iPo,dPo,Vb,$me,cPo,fPo,KG,mPo,gPo,hPo,Xb,kme,pPo,_Po,ZG,uPo,bPo,vPo,zb,Sme,FPo,TPo,eO,MPo,EPo,CPo,Wb,Rme,wPo,APo,oO,yPo,LPo,xPo,Qb,Bme,$Po,kPo,rO,SPo,RPo,BPo,Hb,Pme,PPo,IPo,tO,qPo,NPo,jPo,Ub,Ime,DPo,GPo,aO,OPo,VPo,XPo,Jb,qme,zPo,WPo,nO,QPo,HPo,UPo,Yb,Nme,JPo,YPo,sO,KPo,ZPo,eIo,Kb,jme,oIo,rIo,lO,tIo,aIo,nIo,Zb,Dme,sIo,lIo,iO,iIo,dIo,cIo,ev,Gme,fIo,mIo,dO,gIo,hIo,pIo,ov,Ome,_Io,uIo,cO,bIo,vIo,FIo,rv,Vme,TIo,MIo,fO,EIo,CIo,wIo,tv,Xme,AIo,yIo,mO,LIo,xIo,$Io,av,zme,kIo,SIo,gO,RIo,BIo,PIo,nv,Wme,IIo,qIo,hO,NIo,jIo,DIo,sv,Qme,GIo,OIo,pO,VIo,XIo,zIo,lv,Hme,WIo,QIo,_O,HIo,UIo,JIo,iv,Ume,YIo,KIo,uO,ZIo,eqo,oqo,dv,rqo,Jme,tqo,aqo,Yme,nqo,sqo,cv,Wqe,zi,fv,Kme,Ay,lqo,Zme,iqo,Qqe,Po,yy,dqo,Wi,cqo,bO,fqo,mqo,vO,gqo,hqo,pqo,Ly,_qo,ege,uqo,bqo,vqo,ct,xy,Fqo,oge,Tqo,Mqo,Qi,Eqo,rge,Cqo,wqo,FO,Aqo,yqo,Lqo,mv,xqo,to,$y,$qo,tge,kqo,Sqo,Pa,Rqo,age,Bqo,Pqo,nge,Iqo,qqo,sge,Nqo,jqo,Dqo,Yr,gv,lge,Gqo,Oqo,TO,Vqo,Xqo,zqo,hv,ige,Wqo,Qqo,MO,Hqo,Uqo,Jqo,pv,dge,Yqo,Kqo,EO,Zqo,eNo,oNo,_v,cge,rNo,tNo,CO,aNo,nNo,sNo,uv,fge,lNo,iNo,wO,dNo,cNo,fNo,bv,mNo,mge,gNo,hNo,gge,pNo,_No,vv,Hqe,Hi,Fv,hge,ky,uNo,pge,bNo,Uqe,Io,Sy,vNo,Ui,FNo,AO,TNo,MNo,yO,ENo,CNo,wNo,Ry,ANo,_ge,yNo,LNo,xNo,ft,By,$No,uge,kNo,SNo,Ji,RNo,bge,BNo,PNo,LO,INo,qNo,NNo,Tv,jNo,ao,Py,DNo,vge,GNo,ONo,Ia,VNo,Fge,XNo,zNo,Tge,WNo,QNo,Mge,HNo,UNo,JNo,U,Mv,Ege,YNo,KNo,xO,ZNo,ejo,ojo,Ev,Cge,rjo,tjo,$O,ajo,njo,sjo,Cv,wge,ljo,ijo,kO,djo,cjo,fjo,wv,Age,mjo,gjo,SO,hjo,pjo,_jo,Av,yge,ujo,bjo,RO,vjo,Fjo,Tjo,yv,Lge,Mjo,Ejo,BO,Cjo,wjo,Ajo,Lv,xge,yjo,Ljo,PO,xjo,$jo,kjo,xv,$ge,Sjo,Rjo,IO,Bjo,Pjo,Ijo,$v,kge,qjo,Njo,qO,jjo,Djo,Gjo,kv,Sge,Ojo,Vjo,NO,Xjo,zjo,Wjo,Sv,Rge,Qjo,Hjo,jO,Ujo,Jjo,Yjo,Rv,Bge,Kjo,Zjo,DO,eDo,oDo,rDo,Bv,Pge,tDo,aDo,GO,nDo,sDo,lDo,Pv,Ige,iDo,dDo,OO,cDo,fDo,mDo,Iv,qge,gDo,hDo,VO,pDo,_Do,uDo,qv,Nge,bDo,vDo,XO,FDo,TDo,MDo,Nv,jge,EDo,CDo,zO,wDo,ADo,yDo,jv,Dge,LDo,xDo,WO,$Do,kDo,SDo,Dv,Gge,RDo,BDo,QO,PDo,IDo,qDo,Gv,Oge,NDo,jDo,HO,DDo,GDo,ODo,Ov,Vge,VDo,XDo,UO,zDo,WDo,QDo,Vv,Xge,HDo,UDo,JO,JDo,YDo,KDo,Xv,zge,ZDo,eGo,YO,oGo,rGo,tGo,zv,Wge,aGo,nGo,KO,sGo,lGo,iGo,Wv,Qge,dGo,cGo,ZO,fGo,mGo,gGo,Qv,Hge,hGo,pGo,eV,_Go,uGo,bGo,Hv,Uge,vGo,FGo,oV,TGo,MGo,EGo,Uv,Jge,CGo,wGo,rV,AGo,yGo,LGo,Jv,Yge,xGo,$Go,tV,kGo,SGo,RGo,Yv,Kge,BGo,PGo,aV,IGo,qGo,NGo,Kv,Zge,jGo,DGo,nV,GGo,OGo,VGo,Zv,ehe,XGo,zGo,sV,WGo,QGo,HGo,eF,ohe,UGo,JGo,lV,YGo,KGo,ZGo,oF,eOo,rhe,oOo,rOo,the,tOo,aOo,rF,Jqe,Yi,tF,ahe,Iy,nOo,nhe,sOo,Yqe,qo,qy,lOo,Ki,iOo,iV,dOo,cOo,dV,fOo,mOo,gOo,Ny,hOo,she,pOo,_Oo,uOo,mt,jy,bOo,lhe,vOo,FOo,Zi,TOo,ihe,MOo,EOo,cV,COo,wOo,AOo,aF,yOo,no,Dy,LOo,dhe,xOo,$Oo,qa,kOo,che,SOo,ROo,fhe,BOo,POo,mhe,IOo,qOo,NOo,V,nF,ghe,jOo,DOo,fV,GOo,OOo,VOo,sF,hhe,XOo,zOo,mV,WOo,QOo,HOo,lF,phe,UOo,JOo,gV,YOo,KOo,ZOo,iF,_he,eVo,oVo,hV,rVo,tVo,aVo,dF,uhe,nVo,sVo,pV,lVo,iVo,dVo,cF,bhe,cVo,fVo,_V,mVo,gVo,hVo,fF,vhe,pVo,_Vo,uV,uVo,bVo,vVo,mF,Fhe,FVo,TVo,bV,MVo,EVo,CVo,gF,The,wVo,AVo,vV,yVo,LVo,xVo,hF,Mhe,$Vo,kVo,FV,SVo,RVo,BVo,pF,Ehe,PVo,IVo,TV,qVo,NVo,jVo,_F,Che,DVo,GVo,MV,OVo,VVo,XVo,uF,whe,zVo,WVo,EV,QVo,HVo,UVo,bF,Ahe,JVo,YVo,CV,KVo,ZVo,eXo,vF,yhe,oXo,rXo,wV,tXo,aXo,nXo,FF,Lhe,sXo,lXo,AV,iXo,dXo,cXo,TF,xhe,fXo,mXo,yV,gXo,hXo,pXo,MF,$he,_Xo,uXo,LV,bXo,vXo,FXo,EF,khe,TXo,MXo,xV,EXo,CXo,wXo,CF,She,AXo,yXo,$V,LXo,xXo,$Xo,wF,Rhe,kXo,SXo,kV,RXo,BXo,PXo,AF,Bhe,IXo,qXo,SV,NXo,jXo,DXo,yF,Phe,GXo,OXo,RV,VXo,XXo,zXo,LF,Ihe,WXo,QXo,BV,HXo,UXo,JXo,xF,qhe,YXo,KXo,PV,ZXo,ezo,ozo,$F,Nhe,rzo,tzo,IV,azo,nzo,szo,kF,jhe,lzo,izo,qV,dzo,czo,fzo,SF,Dhe,mzo,gzo,NV,hzo,pzo,_zo,RF,Ghe,uzo,bzo,jV,vzo,Fzo,Tzo,BF,Ohe,Mzo,Ezo,DV,Czo,wzo,Azo,PF,Vhe,yzo,Lzo,GV,xzo,$zo,kzo,IF,Xhe,Szo,Rzo,OV,Bzo,Pzo,Izo,qF,zhe,qzo,Nzo,VV,jzo,Dzo,Gzo,NF,Whe,Ozo,Vzo,XV,Xzo,zzo,Wzo,jF,Qhe,Qzo,Hzo,zV,Uzo,Jzo,Yzo,DF,Hhe,Kzo,Zzo,WV,eWo,oWo,rWo,GF,Uhe,tWo,aWo,QV,nWo,sWo,lWo,OF,Jhe,iWo,dWo,HV,cWo,fWo,mWo,VF,Yhe,gWo,hWo,UV,pWo,_Wo,uWo,XF,bWo,Khe,vWo,FWo,Zhe,TWo,MWo,zF,Kqe,ed,WF,epe,Gy,EWo,ope,CWo,Zqe,No,Oy,wWo,od,AWo,JV,yWo,LWo,YV,xWo,$Wo,kWo,Vy,SWo,rpe,RWo,BWo,PWo,gt,Xy,IWo,tpe,qWo,NWo,rd,jWo,ape,DWo,GWo,KV,OWo,VWo,XWo,QF,zWo,so,zy,WWo,npe,QWo,HWo,Na,UWo,spe,JWo,YWo,lpe,KWo,ZWo,ipe,eQo,oQo,rQo,dpe,HF,cpe,tQo,aQo,ZV,nQo,sQo,lQo,UF,iQo,fpe,dQo,cQo,mpe,fQo,mQo,JF,eNe,td,YF,gpe,Wy,gQo,hpe,hQo,oNe,jo,Qy,pQo,ad,_Qo,eX,uQo,bQo,oX,vQo,FQo,TQo,Hy,MQo,ppe,EQo,CQo,wQo,ht,Uy,AQo,_pe,yQo,LQo,nd,xQo,upe,$Qo,kQo,rX,SQo,RQo,BQo,KF,PQo,lo,Jy,IQo,bpe,qQo,NQo,ja,jQo,vpe,DQo,GQo,Fpe,OQo,VQo,Tpe,XQo,zQo,WQo,Fe,ZF,Mpe,QQo,HQo,tX,UQo,JQo,YQo,e0,Epe,KQo,ZQo,aX,eHo,oHo,rHo,o0,Cpe,tHo,aHo,nX,nHo,sHo,lHo,r0,wpe,iHo,dHo,sX,cHo,fHo,mHo,Bs,Ape,gHo,hHo,lX,pHo,_Ho,iX,uHo,bHo,vHo,t0,ype,FHo,THo,dX,MHo,EHo,CHo,pt,Lpe,wHo,AHo,cX,yHo,LHo,fX,xHo,$Ho,mX,kHo,SHo,RHo,a0,xpe,BHo,PHo,gX,IHo,qHo,NHo,n0,$pe,jHo,DHo,hX,GHo,OHo,VHo,s0,kpe,XHo,zHo,pX,WHo,QHo,HHo,l0,Spe,UHo,JHo,_X,YHo,KHo,ZHo,i0,Rpe,eUo,oUo,uX,rUo,tUo,aUo,d0,Bpe,nUo,sUo,bX,lUo,iUo,dUo,c0,Ppe,cUo,fUo,vX,mUo,gUo,hUo,f0,pUo,Ipe,_Uo,uUo,qpe,bUo,vUo,m0,rNe,sd,g0,Npe,Yy,FUo,jpe,TUo,tNe,Do,Ky,MUo,ld,EUo,FX,CUo,wUo,TX,AUo,yUo,LUo,Zy,xUo,Dpe,$Uo,kUo,SUo,_t,eL,RUo,Gpe,BUo,PUo,id,IUo,Ope,qUo,NUo,MX,jUo,DUo,GUo,h0,OUo,io,oL,VUo,Vpe,XUo,zUo,Da,WUo,Xpe,QUo,HUo,zpe,UUo,JUo,Wpe,YUo,KUo,ZUo,Qpe,p0,Hpe,eJo,oJo,EX,rJo,tJo,aJo,_0,nJo,Upe,sJo,lJo,Jpe,iJo,dJo,u0,aNe,dd,b0,Ype,rL,cJo,Kpe,fJo,nNe,Go,tL,mJo,cd,gJo,CX,hJo,pJo,wX,_Jo,uJo,bJo,aL,vJo,Zpe,FJo,TJo,MJo,ut,nL,EJo,e_e,CJo,wJo,fd,AJo,o_e,yJo,LJo,AX,xJo,$Jo,kJo,v0,SJo,co,sL,RJo,r_e,BJo,PJo,Ga,IJo,t_e,qJo,NJo,a_e,jJo,DJo,n_e,GJo,OJo,VJo,ke,F0,s_e,XJo,zJo,yX,WJo,QJo,HJo,T0,l_e,UJo,JJo,LX,YJo,KJo,ZJo,M0,i_e,eYo,oYo,xX,rYo,tYo,aYo,E0,d_e,nYo,sYo,$X,lYo,iYo,dYo,C0,c_e,cYo,fYo,kX,mYo,gYo,hYo,w0,f_e,pYo,_Yo,SX,uYo,bYo,vYo,A0,m_e,FYo,TYo,RX,MYo,EYo,CYo,y0,g_e,wYo,AYo,BX,yYo,LYo,xYo,L0,h_e,$Yo,kYo,PX,SYo,RYo,BYo,x0,PYo,p_e,IYo,qYo,__e,NYo,jYo,$0,sNe,md,k0,u_e,lL,DYo,b_e,GYo,lNe,Oo,iL,OYo,gd,VYo,IX,XYo,zYo,qX,WYo,QYo,HYo,dL,UYo,v_e,JYo,YYo,KYo,bt,cL,ZYo,F_e,eKo,oKo,hd,rKo,T_e,tKo,aKo,NX,nKo,sKo,lKo,S0,iKo,fo,fL,dKo,M_e,cKo,fKo,Oa,mKo,E_e,gKo,hKo,C_e,pKo,_Ko,w_e,uKo,bKo,vKo,Kr,R0,A_e,FKo,TKo,jX,MKo,EKo,CKo,B0,y_e,wKo,AKo,DX,yKo,LKo,xKo,P0,L_e,$Ko,kKo,GX,SKo,RKo,BKo,I0,x_e,PKo,IKo,OX,qKo,NKo,jKo,q0,$_e,DKo,GKo,VX,OKo,VKo,XKo,N0,zKo,k_e,WKo,QKo,S_e,HKo,UKo,j0,iNe,pd,D0,R_e,mL,JKo,B_e,YKo,dNe,Vo,gL,KKo,_d,ZKo,XX,eZo,oZo,zX,rZo,tZo,aZo,hL,nZo,P_e,sZo,lZo,iZo,vt,pL,dZo,I_e,cZo,fZo,ud,mZo,q_e,gZo,hZo,WX,pZo,_Zo,uZo,G0,bZo,mo,_L,vZo,N_e,FZo,TZo,Va,MZo,j_e,EZo,CZo,D_e,wZo,AZo,G_e,yZo,LZo,xZo,Se,O0,O_e,$Zo,kZo,QX,SZo,RZo,BZo,V0,V_e,PZo,IZo,HX,qZo,NZo,jZo,X0,X_e,DZo,GZo,UX,OZo,VZo,XZo,z0,z_e,zZo,WZo,JX,QZo,HZo,UZo,W0,W_e,JZo,YZo,YX,KZo,ZZo,eer,Q0,Q_e,oer,rer,KX,ter,aer,ner,H0,H_e,ser,ler,ZX,ier,der,cer,U0,U_e,fer,mer,ez,ger,her,per,J0,J_e,_er,uer,oz,ber,ver,Fer,Y0,Ter,Y_e,Mer,Eer,K_e,Cer,wer,K0,cNe,bd,Z0,Z_e,uL,Aer,eue,yer,fNe,Xo,bL,Ler,vd,xer,rz,$er,ker,tz,Ser,Rer,Ber,vL,Per,oue,Ier,qer,Ner,Ft,FL,jer,rue,Der,Ger,Fd,Oer,tue,Ver,Xer,az,zer,Wer,Qer,eT,Her,go,TL,Uer,aue,Jer,Yer,Xa,Ker,nue,Zer,eor,sue,oor,ror,lue,tor,aor,nor,ML,oT,iue,sor,lor,nz,ior,dor,cor,rT,due,mor,gor,sz,hor,por,_or,tT,uor,cue,bor,vor,fue,For,Tor,aT,mNe,Td,nT,mue,EL,Mor,gue,Eor,gNe,zo,CL,Cor,Md,wor,lz,Aor,yor,iz,Lor,xor,$or,wL,kor,hue,Sor,Ror,Bor,Tt,AL,Por,pue,Ior,qor,Ed,Nor,_ue,jor,Dor,dz,Gor,Oor,Vor,sT,Xor,ho,yL,zor,uue,Wor,Qor,za,Hor,bue,Uor,Jor,vue,Yor,Kor,Fue,Zor,err,orr,Zr,lT,Tue,rrr,trr,cz,arr,nrr,srr,iT,Mue,lrr,irr,fz,drr,crr,frr,dT,Eue,mrr,grr,mz,hrr,prr,_rr,cT,Cue,urr,brr,gz,vrr,Frr,Trr,fT,wue,Mrr,Err,hz,Crr,wrr,Arr,mT,yrr,Aue,Lrr,xrr,yue,$rr,krr,gT,hNe,Cd,hT,Lue,LL,Srr,xue,Rrr,pNe,Wo,xL,Brr,wd,Prr,pz,Irr,qrr,_z,Nrr,jrr,Drr,$L,Grr,$ue,Orr,Vrr,Xrr,Mt,kL,zrr,kue,Wrr,Qrr,Ad,Hrr,Sue,Urr,Jrr,uz,Yrr,Krr,Zrr,pT,etr,po,SL,otr,Rue,rtr,ttr,Wa,atr,Bue,ntr,str,Pue,ltr,itr,Iue,dtr,ctr,ftr,yd,_T,que,mtr,gtr,bz,htr,ptr,_tr,uT,Nue,utr,btr,vz,vtr,Ftr,Ttr,bT,jue,Mtr,Etr,Fz,Ctr,wtr,Atr,vT,ytr,Due,Ltr,xtr,Gue,$tr,ktr,FT,_Ne,Ld,TT,Oue,RL,Str,Vue,Rtr,uNe,Qo,BL,Btr,xd,Ptr,Tz,Itr,qtr,Mz,Ntr,jtr,Dtr,PL,Gtr,Xue,Otr,Vtr,Xtr,Et,IL,ztr,zue,Wtr,Qtr,$d,Htr,Wue,Utr,Jtr,Ez,Ytr,Ktr,Ztr,MT,ear,_o,qL,oar,Que,rar,tar,Qa,aar,Hue,nar,sar,Uue,lar,iar,Jue,dar,car,far,NL,ET,Yue,mar,gar,Cz,har,par,_ar,CT,Kue,uar,bar,wz,Far,Tar,Mar,wT,Ear,Zue,Car,war,e2e,Aar,yar,AT,bNe,kd,yT,o2e,jL,Lar,r2e,xar,vNe,Ho,DL,$ar,Sd,kar,Az,Sar,Rar,yz,Bar,Par,Iar,GL,qar,t2e,Nar,jar,Dar,Ct,OL,Gar,a2e,Oar,Var,Rd,Xar,n2e,zar,War,Lz,Qar,Har,Uar,LT,Jar,uo,VL,Yar,s2e,Kar,Zar,Ha,enr,l2e,onr,rnr,i2e,tnr,anr,d2e,nnr,snr,lnr,c2e,xT,f2e,inr,dnr,xz,cnr,fnr,mnr,$T,gnr,m2e,hnr,pnr,g2e,_nr,unr,kT,FNe,Bd,ST,h2e,XL,bnr,p2e,vnr,TNe,Uo,zL,Fnr,Pd,Tnr,$z,Mnr,Enr,kz,Cnr,wnr,Anr,WL,ynr,_2e,Lnr,xnr,$nr,wt,QL,knr,u2e,Snr,Rnr,Id,Bnr,b2e,Pnr,Inr,Sz,qnr,Nnr,jnr,RT,Dnr,bo,HL,Gnr,v2e,Onr,Vnr,Ua,Xnr,F2e,znr,Wnr,T2e,Qnr,Hnr,M2e,Unr,Jnr,Ynr,Ja,BT,E2e,Knr,Znr,Rz,esr,osr,rsr,PT,C2e,tsr,asr,Bz,nsr,ssr,lsr,IT,w2e,isr,dsr,Pz,csr,fsr,msr,qT,A2e,gsr,hsr,Iz,psr,_sr,usr,NT,bsr,y2e,vsr,Fsr,L2e,Tsr,Msr,jT,MNe,qd,DT,x2e,UL,Esr,$2e,Csr,ENe,Jo,JL,wsr,Nd,Asr,qz,ysr,Lsr,Nz,xsr,$sr,ksr,YL,Ssr,k2e,Rsr,Bsr,Psr,At,KL,Isr,S2e,qsr,Nsr,jd,jsr,R2e,Dsr,Gsr,jz,Osr,Vsr,Xsr,GT,zsr,vo,ZL,Wsr,B2e,Qsr,Hsr,Ya,Usr,P2e,Jsr,Ysr,I2e,Ksr,Zsr,q2e,elr,olr,rlr,N2e,OT,j2e,tlr,alr,Dz,nlr,slr,llr,VT,ilr,D2e,dlr,clr,G2e,flr,mlr,XT,CNe,Dd,zT,O2e,e8,glr,V2e,hlr,wNe,Yo,o8,plr,Gd,_lr,Gz,ulr,blr,Oz,vlr,Flr,Tlr,r8,Mlr,X2e,Elr,Clr,wlr,yt,t8,Alr,z2e,ylr,Llr,Od,xlr,W2e,$lr,klr,Vz,Slr,Rlr,Blr,WT,Plr,wr,a8,Ilr,Q2e,qlr,Nlr,Ka,jlr,H2e,Dlr,Glr,U2e,Olr,Vlr,J2e,Xlr,zlr,Wlr,N,QT,Y2e,Qlr,Hlr,Xz,Ulr,Jlr,Ylr,HT,K2e,Klr,Zlr,zz,eir,oir,rir,UT,Z2e,tir,air,Wz,nir,sir,lir,JT,e1e,iir,dir,Qz,cir,fir,mir,YT,o1e,gir,hir,Hz,pir,_ir,uir,KT,r1e,bir,vir,Uz,Fir,Tir,Mir,ZT,t1e,Eir,Cir,Jz,wir,Air,yir,e7,a1e,Lir,xir,Yz,$ir,kir,Sir,o7,n1e,Rir,Bir,Kz,Pir,Iir,qir,r7,s1e,Nir,jir,Zz,Dir,Gir,Oir,t7,l1e,Vir,Xir,eW,zir,Wir,Qir,a7,i1e,Hir,Uir,oW,Jir,Yir,Kir,n7,d1e,Zir,edr,rW,odr,rdr,tdr,s7,c1e,adr,ndr,tW,sdr,ldr,idr,l7,f1e,ddr,cdr,aW,fdr,mdr,gdr,i7,m1e,hdr,pdr,nW,_dr,udr,bdr,d7,g1e,vdr,Fdr,sW,Tdr,Mdr,Edr,Ps,h1e,Cdr,wdr,lW,Adr,ydr,iW,Ldr,xdr,$dr,c7,p1e,kdr,Sdr,dW,Rdr,Bdr,Pdr,f7,_1e,Idr,qdr,cW,Ndr,jdr,Ddr,m7,u1e,Gdr,Odr,fW,Vdr,Xdr,zdr,g7,b1e,Wdr,Qdr,mW,Hdr,Udr,Jdr,h7,v1e,Ydr,Kdr,gW,Zdr,ecr,ocr,p7,F1e,rcr,tcr,hW,acr,ncr,scr,_7,T1e,lcr,icr,pW,dcr,ccr,fcr,u7,M1e,mcr,gcr,_W,hcr,pcr,_cr,b7,E1e,ucr,bcr,uW,vcr,Fcr,Tcr,v7,C1e,Mcr,Ecr,bW,Ccr,wcr,Acr,F7,w1e,ycr,Lcr,vW,xcr,$cr,kcr,T7,A1e,Scr,Rcr,FW,Bcr,Pcr,Icr,M7,y1e,qcr,Ncr,TW,jcr,Dcr,Gcr,E7,L1e,Ocr,Vcr,MW,Xcr,zcr,Wcr,C7,x1e,Qcr,Hcr,EW,Ucr,Jcr,Ycr,w7,$1e,Kcr,Zcr,CW,efr,ofr,rfr,A7,k1e,tfr,afr,wW,nfr,sfr,lfr,y7,S1e,ifr,dfr,AW,cfr,ffr,mfr,L7,R1e,gfr,hfr,yW,pfr,_fr,ufr,x7,B1e,bfr,vfr,LW,Ffr,Tfr,Mfr,$7,P1e,Efr,Cfr,xW,wfr,Afr,yfr,k7,I1e,Lfr,xfr,$W,$fr,kfr,Sfr,S7,q1e,Rfr,Bfr,kW,Pfr,Ifr,qfr,R7,N1e,Nfr,jfr,SW,Dfr,Gfr,Ofr,B7,j1e,Vfr,Xfr,RW,zfr,Wfr,Qfr,P7,D1e,Hfr,Ufr,BW,Jfr,Yfr,Kfr,I7,G1e,Zfr,emr,PW,omr,rmr,tmr,q7,O1e,amr,nmr,IW,smr,lmr,imr,N7,ANe,Vd,j7,V1e,n8,dmr,X1e,cmr,yNe,Ko,s8,fmr,Xd,mmr,qW,gmr,hmr,NW,pmr,_mr,umr,l8,bmr,z1e,vmr,Fmr,Tmr,Lt,i8,Mmr,W1e,Emr,Cmr,zd,wmr,Q1e,Amr,ymr,jW,Lmr,xmr,$mr,D7,kmr,Ar,d8,Smr,H1e,Rmr,Bmr,Za,Pmr,U1e,Imr,qmr,J1e,Nmr,jmr,Y1e,Dmr,Gmr,Omr,se,G7,K1e,Vmr,Xmr,DW,zmr,Wmr,Qmr,O7,Z1e,Hmr,Umr,GW,Jmr,Ymr,Kmr,V7,ebe,Zmr,egr,OW,ogr,rgr,tgr,X7,obe,agr,ngr,VW,sgr,lgr,igr,z7,rbe,dgr,cgr,XW,fgr,mgr,ggr,W7,tbe,hgr,pgr,zW,_gr,ugr,bgr,Q7,abe,vgr,Fgr,WW,Tgr,Mgr,Egr,H7,nbe,Cgr,wgr,QW,Agr,ygr,Lgr,U7,sbe,xgr,$gr,HW,kgr,Sgr,Rgr,J7,lbe,Bgr,Pgr,UW,Igr,qgr,Ngr,Y7,ibe,jgr,Dgr,JW,Ggr,Ogr,Vgr,K7,dbe,Xgr,zgr,YW,Wgr,Qgr,Hgr,Z7,cbe,Ugr,Jgr,KW,Ygr,Kgr,Zgr,eM,fbe,ehr,ohr,ZW,rhr,thr,ahr,oM,mbe,nhr,shr,eQ,lhr,ihr,dhr,rM,gbe,chr,fhr,oQ,mhr,ghr,hhr,tM,hbe,phr,_hr,rQ,uhr,bhr,vhr,aM,pbe,Fhr,Thr,tQ,Mhr,Ehr,Chr,nM,_be,whr,Ahr,aQ,yhr,Lhr,xhr,sM,ube,$hr,khr,nQ,Shr,Rhr,Bhr,lM,bbe,Phr,Ihr,sQ,qhr,Nhr,jhr,iM,vbe,Dhr,Ghr,lQ,Ohr,Vhr,Xhr,dM,Fbe,zhr,Whr,iQ,Qhr,Hhr,Uhr,cM,LNe,Wd,fM,Tbe,c8,Jhr,Mbe,Yhr,xNe,Zo,f8,Khr,Qd,Zhr,dQ,epr,opr,cQ,rpr,tpr,apr,m8,npr,Ebe,spr,lpr,ipr,xt,g8,dpr,Cbe,cpr,fpr,Hd,mpr,wbe,gpr,hpr,fQ,ppr,_pr,upr,mM,bpr,yr,h8,vpr,Abe,Fpr,Tpr,en,Mpr,ybe,Epr,Cpr,Lbe,wpr,Apr,xbe,ypr,Lpr,xpr,Me,gM,$be,$pr,kpr,mQ,Spr,Rpr,Bpr,hM,kbe,Ppr,Ipr,gQ,qpr,Npr,jpr,pM,Sbe,Dpr,Gpr,hQ,Opr,Vpr,Xpr,_M,Rbe,zpr,Wpr,pQ,Qpr,Hpr,Upr,uM,Bbe,Jpr,Ypr,_Q,Kpr,Zpr,e_r,bM,Pbe,o_r,r_r,uQ,t_r,a_r,n_r,vM,Ibe,s_r,l_r,bQ,i_r,d_r,c_r,FM,qbe,f_r,m_r,vQ,g_r,h_r,p_r,TM,Nbe,__r,u_r,FQ,b_r,v_r,F_r,MM,jbe,T_r,M_r,TQ,E_r,C_r,w_r,EM,Dbe,A_r,y_r,MQ,L_r,x_r,$_r,CM,Gbe,k_r,S_r,EQ,R_r,B_r,P_r,wM,$Ne,Ud,AM,Obe,p8,I_r,Vbe,q_r,kNe,er,_8,N_r,Jd,j_r,CQ,D_r,G_r,wQ,O_r,V_r,X_r,u8,z_r,Xbe,W_r,Q_r,H_r,$t,b8,U_r,zbe,J_r,Y_r,Yd,K_r,Wbe,Z_r,eur,AQ,our,rur,tur,yM,aur,Lr,v8,nur,Qbe,sur,lur,on,iur,Hbe,dur,cur,Ube,fur,mur,Jbe,gur,hur,pur,rn,LM,Ybe,_ur,uur,yQ,bur,vur,Fur,xM,Kbe,Tur,Mur,LQ,Eur,Cur,wur,$M,Zbe,Aur,yur,xQ,Lur,xur,$ur,kM,eve,kur,Sur,$Q,Rur,Bur,Pur,SM,SNe,Kd,RM,ove,F8,Iur,rve,qur,RNe,or,T8,Nur,Zd,jur,kQ,Dur,Gur,SQ,Our,Vur,Xur,M8,zur,tve,Wur,Qur,Hur,kt,E8,Uur,ave,Jur,Yur,ec,Kur,nve,Zur,e2r,RQ,o2r,r2r,t2r,BM,a2r,xr,C8,n2r,sve,s2r,l2r,tn,i2r,lve,d2r,c2r,ive,f2r,m2r,dve,g2r,h2r,p2r,ie,PM,cve,_2r,u2r,BQ,b2r,v2r,F2r,IM,fve,T2r,M2r,PQ,E2r,C2r,w2r,qM,mve,A2r,y2r,IQ,L2r,x2r,$2r,NM,gve,k2r,S2r,qQ,R2r,B2r,P2r,jM,hve,I2r,q2r,NQ,N2r,j2r,D2r,DM,pve,G2r,O2r,jQ,V2r,X2r,z2r,GM,_ve,W2r,Q2r,DQ,H2r,U2r,J2r,OM,uve,Y2r,K2r,GQ,Z2r,e1r,o1r,VM,bve,r1r,t1r,OQ,a1r,n1r,s1r,XM,vve,l1r,i1r,VQ,d1r,c1r,f1r,zM,Fve,m1r,g1r,XQ,h1r,p1r,_1r,WM,Tve,u1r,b1r,zQ,v1r,F1r,T1r,QM,Mve,M1r,E1r,WQ,C1r,w1r,A1r,HM,Eve,y1r,L1r,QQ,x1r,$1r,k1r,UM,Cve,S1r,R1r,HQ,B1r,P1r,I1r,JM,wve,q1r,N1r,UQ,j1r,D1r,G1r,YM,Ave,O1r,V1r,JQ,X1r,z1r,W1r,KM,yve,Q1r,H1r,YQ,U1r,J1r,Y1r,ZM,Lve,K1r,Z1r,KQ,ebr,obr,rbr,e4,xve,tbr,abr,ZQ,nbr,sbr,lbr,o4,BNe,oc,r4,$ve,w8,ibr,kve,dbr,PNe,rr,A8,cbr,rc,fbr,eH,mbr,gbr,oH,hbr,pbr,_br,y8,ubr,Sve,bbr,vbr,Fbr,St,L8,Tbr,Rve,Mbr,Ebr,tc,Cbr,Bve,wbr,Abr,rH,ybr,Lbr,xbr,t4,$br,$r,x8,kbr,Pve,Sbr,Rbr,an,Bbr,Ive,Pbr,Ibr,qve,qbr,Nbr,Nve,jbr,Dbr,Gbr,ye,a4,jve,Obr,Vbr,tH,Xbr,zbr,Wbr,n4,Dve,Qbr,Hbr,aH,Ubr,Jbr,Ybr,s4,Gve,Kbr,Zbr,nH,evr,ovr,rvr,l4,Ove,tvr,avr,sH,nvr,svr,lvr,i4,Vve,ivr,dvr,lH,cvr,fvr,mvr,d4,Xve,gvr,hvr,iH,pvr,_vr,uvr,c4,zve,bvr,vvr,dH,Fvr,Tvr,Mvr,f4,Wve,Evr,Cvr,cH,wvr,Avr,yvr,m4,Qve,Lvr,xvr,fH,$vr,kvr,Svr,g4,Hve,Rvr,Bvr,mH,Pvr,Ivr,qvr,h4,INe,ac,p4,Uve,$8,Nvr,Jve,jvr,qNe,tr,k8,Dvr,nc,Gvr,gH,Ovr,Vvr,hH,Xvr,zvr,Wvr,S8,Qvr,Yve,Hvr,Uvr,Jvr,Rt,R8,Yvr,Kve,Kvr,Zvr,sc,eFr,Zve,oFr,rFr,pH,tFr,aFr,nFr,_4,sFr,kr,B8,lFr,eFe,iFr,dFr,nn,cFr,oFe,fFr,mFr,rFe,gFr,hFr,tFe,pFr,_Fr,uFr,ee,u4,aFe,bFr,vFr,_H,FFr,TFr,MFr,b4,nFe,EFr,CFr,uH,wFr,AFr,yFr,v4,sFe,LFr,xFr,bH,$Fr,kFr,SFr,F4,lFe,RFr,BFr,vH,PFr,IFr,qFr,T4,iFe,NFr,jFr,FH,DFr,GFr,OFr,M4,dFe,VFr,XFr,TH,zFr,WFr,QFr,E4,cFe,HFr,UFr,MH,JFr,YFr,KFr,C4,fFe,ZFr,e0r,EH,o0r,r0r,t0r,w4,mFe,a0r,n0r,CH,s0r,l0r,i0r,A4,gFe,d0r,c0r,wH,f0r,m0r,g0r,y4,hFe,h0r,p0r,AH,_0r,u0r,b0r,L4,pFe,v0r,F0r,yH,T0r,M0r,E0r,x4,_Fe,C0r,w0r,LH,A0r,y0r,L0r,$4,uFe,x0r,$0r,xH,k0r,S0r,R0r,k4,bFe,B0r,P0r,$H,I0r,q0r,N0r,S4,vFe,j0r,D0r,kH,G0r,O0r,V0r,R4,FFe,X0r,z0r,SH,W0r,Q0r,H0r,B4,TFe,U0r,J0r,RH,Y0r,K0r,Z0r,P4,MFe,eTr,oTr,BH,rTr,tTr,aTr,I4,EFe,nTr,sTr,PH,lTr,iTr,dTr,q4,CFe,cTr,fTr,IH,mTr,gTr,hTr,N4,wFe,pTr,_Tr,qH,uTr,bTr,vTr,j4,AFe,FTr,TTr,NH,MTr,ETr,CTr,D4,yFe,wTr,ATr,jH,yTr,LTr,xTr,G4,LFe,$Tr,kTr,DH,STr,RTr,BTr,O4,xFe,PTr,ITr,GH,qTr,NTr,jTr,V4,NNe,lc,X4,$Fe,P8,DTr,kFe,GTr,jNe,ar,I8,OTr,ic,VTr,OH,XTr,zTr,VH,WTr,QTr,HTr,q8,UTr,SFe,JTr,YTr,KTr,Bt,N8,ZTr,RFe,e7r,o7r,dc,r7r,BFe,t7r,a7r,XH,n7r,s7r,l7r,z4,i7r,Sr,j8,d7r,PFe,c7r,f7r,sn,m7r,IFe,g7r,h7r,qFe,p7r,_7r,NFe,u7r,b7r,v7r,he,W4,jFe,F7r,T7r,zH,M7r,E7r,C7r,Q4,DFe,w7r,A7r,WH,y7r,L7r,x7r,H4,GFe,$7r,k7r,QH,S7r,R7r,B7r,U4,OFe,P7r,I7r,HH,q7r,N7r,j7r,J4,VFe,D7r,G7r,UH,O7r,V7r,X7r,Y4,XFe,z7r,W7r,JH,Q7r,H7r,U7r,K4,zFe,J7r,Y7r,YH,K7r,Z7r,eMr,Z4,WFe,oMr,rMr,KH,tMr,aMr,nMr,eE,QFe,sMr,lMr,ZH,iMr,dMr,cMr,oE,HFe,fMr,mMr,eU,gMr,hMr,pMr,rE,UFe,_Mr,uMr,oU,bMr,vMr,FMr,tE,JFe,TMr,MMr,rU,EMr,CMr,wMr,aE,YFe,AMr,yMr,tU,LMr,xMr,$Mr,nE,KFe,kMr,SMr,aU,RMr,BMr,PMr,sE,ZFe,IMr,qMr,nU,NMr,jMr,DMr,lE,e0e,GMr,OMr,sU,VMr,XMr,zMr,iE,o0e,WMr,QMr,lU,HMr,UMr,JMr,dE,DNe,cc,cE,r0e,D8,YMr,t0e,KMr,GNe,nr,G8,ZMr,fc,e4r,iU,o4r,r4r,dU,t4r,a4r,n4r,O8,s4r,a0e,l4r,i4r,d4r,Pt,V8,c4r,n0e,f4r,m4r,mc,g4r,s0e,h4r,p4r,cU,_4r,u4r,b4r,fE,v4r,Rr,X8,F4r,l0e,T4r,M4r,ln,E4r,i0e,C4r,w4r,d0e,A4r,y4r,c0e,L4r,x4r,$4r,z8,mE,f0e,k4r,S4r,fU,R4r,B4r,P4r,gE,m0e,I4r,q4r,mU,N4r,j4r,D4r,hE,ONe,gc,pE,g0e,W8,G4r,h0e,O4r,VNe,sr,Q8,V4r,hc,X4r,gU,z4r,W4r,hU,Q4r,H4r,U4r,H8,J4r,p0e,Y4r,K4r,Z4r,It,U8,eEr,_0e,oEr,rEr,pc,tEr,u0e,aEr,nEr,pU,sEr,lEr,iEr,_E,dEr,Br,J8,cEr,b0e,fEr,mEr,dn,gEr,v0e,hEr,pEr,F0e,_Er,uEr,T0e,bEr,vEr,FEr,M0e,uE,E0e,TEr,MEr,_U,EEr,CEr,wEr,bE,XNe,_c,vE,C0e,Y8,AEr,w0e,yEr,zNe,lr,K8,LEr,uc,xEr,uU,$Er,kEr,bU,SEr,REr,BEr,Z8,PEr,A0e,IEr,qEr,NEr,qt,e9,jEr,y0e,DEr,GEr,bc,OEr,L0e,VEr,XEr,vU,zEr,WEr,QEr,FE,HEr,Pr,o9,UEr,x0e,JEr,YEr,cn,KEr,$0e,ZEr,eCr,k0e,oCr,rCr,S0e,tCr,aCr,nCr,de,TE,R0e,sCr,lCr,FU,iCr,dCr,cCr,ME,B0e,fCr,mCr,TU,gCr,hCr,pCr,EE,P0e,_Cr,uCr,MU,bCr,vCr,FCr,CE,I0e,TCr,MCr,EU,ECr,CCr,wCr,wE,q0e,ACr,yCr,CU,LCr,xCr,$Cr,AE,N0e,kCr,SCr,wU,RCr,BCr,PCr,yE,j0e,ICr,qCr,AU,NCr,jCr,DCr,LE,D0e,GCr,OCr,yU,VCr,XCr,zCr,xE,G0e,WCr,QCr,LU,HCr,UCr,JCr,$E,O0e,YCr,KCr,xU,ZCr,e5r,o5r,kE,V0e,r5r,t5r,$U,a5r,n5r,s5r,SE,X0e,l5r,i5r,kU,d5r,c5r,f5r,RE,z0e,m5r,g5r,SU,h5r,p5r,_5r,BE,W0e,u5r,b5r,RU,v5r,F5r,T5r,PE,Q0e,M5r,E5r,BU,C5r,w5r,A5r,IE,H0e,y5r,L5r,PU,x5r,$5r,k5r,qE,U0e,S5r,R5r,IU,B5r,P5r,I5r,NE,J0e,q5r,N5r,qU,j5r,D5r,G5r,jE,Y0e,O5r,V5r,NU,X5r,z5r,W5r,DE,K0e,Q5r,H5r,jU,U5r,J5r,Y5r,GE,WNe,vc,OE,Z0e,r9,K5r,eTe,Z5r,QNe,ir,t9,e3r,Fc,o3r,DU,r3r,t3r,GU,a3r,n3r,s3r,a9,l3r,oTe,i3r,d3r,c3r,Nt,n9,f3r,rTe,m3r,g3r,Tc,h3r,tTe,p3r,_3r,OU,u3r,b3r,v3r,VE,F3r,Ir,s9,T3r,aTe,M3r,E3r,fn,C3r,nTe,w3r,A3r,sTe,y3r,L3r,lTe,x3r,$3r,k3r,ce,XE,iTe,S3r,R3r,VU,B3r,P3r,I3r,zE,dTe,q3r,N3r,XU,j3r,D3r,G3r,WE,cTe,O3r,V3r,zU,X3r,z3r,W3r,QE,fTe,Q3r,H3r,WU,U3r,J3r,Y3r,HE,mTe,K3r,Z3r,QU,ewr,owr,rwr,UE,gTe,twr,awr,HU,nwr,swr,lwr,JE,hTe,iwr,dwr,UU,cwr,fwr,mwr,YE,pTe,gwr,hwr,JU,pwr,_wr,uwr,KE,_Te,bwr,vwr,YU,Fwr,Twr,Mwr,ZE,uTe,Ewr,Cwr,KU,wwr,Awr,ywr,eC,bTe,Lwr,xwr,ZU,$wr,kwr,Swr,oC,vTe,Rwr,Bwr,eJ,Pwr,Iwr,qwr,rC,FTe,Nwr,jwr,oJ,Dwr,Gwr,Owr,tC,TTe,Vwr,Xwr,rJ,zwr,Wwr,Qwr,aC,MTe,Hwr,Uwr,tJ,Jwr,Ywr,Kwr,nC,ETe,Zwr,e6r,aJ,o6r,r6r,t6r,sC,CTe,a6r,n6r,nJ,s6r,l6r,i6r,lC,wTe,d6r,c6r,sJ,f6r,m6r,g6r,iC,ATe,h6r,p6r,lJ,_6r,u6r,b6r,dC,yTe,v6r,F6r,iJ,T6r,M6r,E6r,cC,HNe,Mc,fC,LTe,l9,C6r,xTe,w6r,UNe,dr,i9,A6r,Ec,y6r,dJ,L6r,x6r,cJ,$6r,k6r,S6r,d9,R6r,$Te,B6r,P6r,I6r,jt,c9,q6r,kTe,N6r,j6r,Cc,D6r,STe,G6r,O6r,fJ,V6r,X6r,z6r,mC,W6r,qr,f9,Q6r,RTe,H6r,U6r,mn,J6r,BTe,Y6r,K6r,PTe,Z6r,eAr,ITe,oAr,rAr,tAr,qTe,gC,NTe,aAr,nAr,mJ,sAr,lAr,iAr,hC,JNe,wc,pC,jTe,m9,dAr,DTe,cAr,YNe,cr,g9,fAr,Ac,mAr,gJ,gAr,hAr,hJ,pAr,_Ar,uAr,h9,bAr,GTe,vAr,FAr,TAr,Dt,p9,MAr,OTe,EAr,CAr,yc,wAr,VTe,AAr,yAr,pJ,LAr,xAr,$Ar,_C,kAr,Nr,_9,SAr,XTe,RAr,BAr,gn,PAr,zTe,IAr,qAr,WTe,NAr,jAr,QTe,DAr,GAr,OAr,HTe,uC,UTe,VAr,XAr,_J,zAr,WAr,QAr,bC,KNe,Lc,vC,JTe,u9,HAr,YTe,UAr,ZNe,fr,b9,JAr,xc,YAr,uJ,KAr,ZAr,bJ,eyr,oyr,ryr,v9,tyr,KTe,ayr,nyr,syr,Gt,F9,lyr,ZTe,iyr,dyr,$c,cyr,e7e,fyr,myr,vJ,gyr,hyr,pyr,FC,_yr,jr,T9,uyr,o7e,byr,vyr,hn,Fyr,r7e,Tyr,Myr,t7e,Eyr,Cyr,a7e,wyr,Ayr,yyr,te,TC,n7e,Lyr,xyr,FJ,$yr,kyr,Syr,MC,s7e,Ryr,Byr,TJ,Pyr,Iyr,qyr,EC,l7e,Nyr,jyr,MJ,Dyr,Gyr,Oyr,CC,i7e,Vyr,Xyr,EJ,zyr,Wyr,Qyr,wC,d7e,Hyr,Uyr,CJ,Jyr,Yyr,Kyr,AC,c7e,Zyr,eLr,wJ,oLr,rLr,tLr,yC,f7e,aLr,nLr,AJ,sLr,lLr,iLr,LC,m7e,dLr,cLr,yJ,fLr,mLr,gLr,xC,g7e,hLr,pLr,LJ,_Lr,uLr,bLr,$C,h7e,vLr,FLr,xJ,TLr,MLr,ELr,kC,p7e,CLr,wLr,$J,ALr,yLr,LLr,SC,_7e,xLr,$Lr,kJ,kLr,SLr,RLr,RC,u7e,BLr,PLr,SJ,ILr,qLr,NLr,BC,b7e,jLr,DLr,RJ,GLr,OLr,VLr,PC,v7e,XLr,zLr,BJ,WLr,QLr,HLr,IC,F7e,ULr,JLr,PJ,YLr,KLr,ZLr,qC,T7e,e8r,o8r,IJ,r8r,t8r,a8r,NC,M7e,n8r,s8r,qJ,l8r,i8r,d8r,jC,E7e,c8r,f8r,NJ,m8r,g8r,h8r,DC,C7e,p8r,_8r,jJ,u8r,b8r,v8r,GC,w7e,F8r,T8r,DJ,M8r,E8r,C8r,OC,A7e,w8r,A8r,GJ,y8r,L8r,x8r,VC,y7e,$8r,k8r,OJ,S8r,R8r,B8r,XC,L7e,P8r,I8r,VJ,q8r,N8r,j8r,zC,x7e,D8r,G8r,XJ,O8r,V8r,X8r,WC,eje,kc,QC,$7e,M9,z8r,k7e,W8r,oje,mr,E9,Q8r,Sc,H8r,zJ,U8r,J8r,WJ,Y8r,K8r,Z8r,C9,e9r,S7e,o9r,r9r,t9r,Ot,w9,a9r,R7e,n9r,s9r,Rc,l9r,B7e,i9r,d9r,QJ,c9r,f9r,m9r,HC,g9r,Dr,A9,h9r,P7e,p9r,_9r,pn,u9r,I7e,b9r,v9r,q7e,F9r,T9r,N7e,M9r,E9r,C9r,Re,UC,j7e,w9r,A9r,HJ,y9r,L9r,x9r,JC,D7e,$9r,k9r,UJ,S9r,R9r,B9r,YC,G7e,P9r,I9r,JJ,q9r,N9r,j9r,KC,O7e,D9r,G9r,YJ,O9r,V9r,X9r,ZC,V7e,z9r,W9r,KJ,Q9r,H9r,U9r,e5,X7e,J9r,Y9r,ZJ,K9r,Z9r,exr,o5,z7e,oxr,rxr,eY,txr,axr,nxr,r5,W7e,sxr,lxr,oY,ixr,dxr,cxr,t5,Q7e,fxr,mxr,rY,gxr,hxr,pxr,a5,rje,Bc,n5,H7e,y9,_xr,U7e,uxr,tje,gr,L9,bxr,Pc,vxr,tY,Fxr,Txr,aY,Mxr,Exr,Cxr,x9,wxr,J7e,Axr,yxr,Lxr,Vt,$9,xxr,Y7e,$xr,kxr,Ic,Sxr,K7e,Rxr,Bxr,nY,Pxr,Ixr,qxr,s5,Nxr,Gr,k9,jxr,Z7e,Dxr,Gxr,_n,Oxr,eMe,Vxr,Xxr,oMe,zxr,Wxr,rMe,Qxr,Hxr,Uxr,Ee,l5,tMe,Jxr,Yxr,sY,Kxr,Zxr,e$r,i5,aMe,o$r,r$r,lY,t$r,a$r,n$r,d5,nMe,s$r,l$r,iY,i$r,d$r,c$r,c5,sMe,f$r,m$r,dY,g$r,h$r,p$r,f5,lMe,_$r,u$r,cY,b$r,v$r,F$r,m5,iMe,T$r,M$r,fY,E$r,C$r,w$r,g5,dMe,A$r,y$r,mY,L$r,x$r,$$r,h5,cMe,k$r,S$r,gY,R$r,B$r,P$r,p5,fMe,I$r,q$r,hY,N$r,j$r,D$r,_5,mMe,G$r,O$r,pY,V$r,X$r,z$r,u5,gMe,W$r,Q$r,_Y,H$r,U$r,J$r,b5,hMe,Y$r,K$r,uY,Z$r,ekr,okr,v5,aje,qc,F5,pMe,S9,rkr,_Me,tkr,nje,hr,R9,akr,Nc,nkr,bY,skr,lkr,vY,ikr,dkr,ckr,B9,fkr,uMe,mkr,gkr,hkr,Xt,P9,pkr,bMe,_kr,ukr,jc,bkr,vMe,vkr,Fkr,FY,Tkr,Mkr,Ekr,T5,Ckr,Or,I9,wkr,FMe,Akr,ykr,un,Lkr,TMe,xkr,$kr,MMe,kkr,Skr,EMe,Rkr,Bkr,Pkr,Le,M5,CMe,Ikr,qkr,TY,Nkr,jkr,Dkr,E5,wMe,Gkr,Okr,MY,Vkr,Xkr,zkr,C5,AMe,Wkr,Qkr,EY,Hkr,Ukr,Jkr,w5,yMe,Ykr,Kkr,CY,Zkr,eSr,oSr,A5,LMe,rSr,tSr,wY,aSr,nSr,sSr,y5,xMe,lSr,iSr,AY,dSr,cSr,fSr,L5,$Me,mSr,gSr,yY,hSr,pSr,_Sr,x5,kMe,uSr,bSr,LY,vSr,FSr,TSr,$5,SMe,MSr,ESr,xY,CSr,wSr,ASr,k5,RMe,ySr,LSr,$Y,xSr,$Sr,kSr,S5,sje,Dc,R5,BMe,q9,SSr,PMe,RSr,lje,pr,N9,BSr,Gc,PSr,kY,ISr,qSr,SY,NSr,jSr,DSr,j9,GSr,IMe,OSr,VSr,XSr,zt,D9,zSr,qMe,WSr,QSr,Oc,HSr,NMe,USr,JSr,RY,YSr,KSr,ZSr,B5,eRr,Vr,G9,oRr,jMe,rRr,tRr,bn,aRr,DMe,nRr,sRr,GMe,lRr,iRr,OMe,dRr,cRr,fRr,Be,P5,VMe,mRr,gRr,BY,hRr,pRr,_Rr,I5,XMe,uRr,bRr,PY,vRr,FRr,TRr,q5,zMe,MRr,ERr,IY,CRr,wRr,ARr,N5,WMe,yRr,LRr,qY,xRr,$Rr,kRr,j5,QMe,SRr,RRr,NY,BRr,PRr,IRr,D5,HMe,qRr,NRr,jY,jRr,DRr,GRr,G5,UMe,ORr,VRr,DY,XRr,zRr,WRr,O5,JMe,QRr,HRr,GY,URr,JRr,YRr,V5,YMe,KRr,ZRr,OY,eBr,oBr,rBr,X5,ije,Vc,z5,KMe,O9,tBr,ZMe,aBr,dje,_r,V9,nBr,Xc,sBr,VY,lBr,iBr,XY,dBr,cBr,fBr,X9,mBr,e4e,gBr,hBr,pBr,Wt,z9,_Br,o4e,uBr,bBr,zc,vBr,r4e,FBr,TBr,zY,MBr,EBr,CBr,W5,wBr,Xr,W9,ABr,t4e,yBr,LBr,vn,xBr,a4e,$Br,kBr,n4e,SBr,RBr,s4e,BBr,PBr,IBr,xe,Q5,l4e,qBr,NBr,WY,jBr,DBr,GBr,H5,i4e,OBr,VBr,QY,XBr,zBr,WBr,U5,d4e,QBr,HBr,HY,UBr,JBr,YBr,J5,c4e,KBr,ZBr,UY,ePr,oPr,rPr,Y5,f4e,tPr,aPr,JY,nPr,sPr,lPr,K5,m4e,iPr,dPr,YY,cPr,fPr,mPr,Z5,g4e,gPr,hPr,KY,pPr,_Pr,uPr,e3,h4e,bPr,vPr,ZY,FPr,TPr,MPr,o3,p4e,EPr,CPr,eK,wPr,APr,yPr,r3,_4e,LPr,xPr,oK,$Pr,kPr,SPr,t3,cje,Wc,a3,u4e,Q9,RPr,b4e,BPr,fje,ur,H9,PPr,Qc,IPr,rK,qPr,NPr,tK,jPr,DPr,GPr,U9,OPr,v4e,VPr,XPr,zPr,Qt,J9,WPr,F4e,QPr,HPr,Hc,UPr,T4e,JPr,YPr,aK,KPr,ZPr,eIr,n3,oIr,zr,Y9,rIr,M4e,tIr,aIr,Fn,nIr,E4e,sIr,lIr,C4e,iIr,dIr,w4e,cIr,fIr,mIr,$e,s3,A4e,gIr,hIr,nK,pIr,_Ir,uIr,l3,y4e,bIr,vIr,sK,FIr,TIr,MIr,i3,L4e,EIr,CIr,lK,wIr,AIr,yIr,d3,x4e,LIr,xIr,iK,$Ir,kIr,SIr,c3,$4e,RIr,BIr,dK,PIr,IIr,qIr,f3,k4e,NIr,jIr,cK,DIr,GIr,OIr,m3,S4e,VIr,XIr,fK,zIr,WIr,QIr,g3,R4e,HIr,UIr,mK,JIr,YIr,KIr,h3,B4e,ZIr,eqr,gK,oqr,rqr,tqr,p3,P4e,aqr,nqr,hK,sqr,lqr,iqr,_3,mje,Uc,u3,I4e,K9,dqr,q4e,cqr,gje,br,Z9,fqr,Jc,mqr,pK,gqr,hqr,_K,pqr,_qr,uqr,ex,bqr,N4e,vqr,Fqr,Tqr,Ht,ox,Mqr,j4e,Eqr,Cqr,Yc,wqr,D4e,Aqr,yqr,uK,Lqr,xqr,$qr,b3,kqr,Wr,rx,Sqr,G4e,Rqr,Bqr,Tn,Pqr,O4e,Iqr,qqr,V4e,Nqr,jqr,X4e,Dqr,Gqr,Oqr,De,v3,z4e,Vqr,Xqr,bK,zqr,Wqr,Qqr,F3,W4e,Hqr,Uqr,vK,Jqr,Yqr,Kqr,T3,Q4e,Zqr,eNr,FK,oNr,rNr,tNr,M3,H4e,aNr,nNr,TK,sNr,lNr,iNr,E3,U4e,dNr,cNr,MK,fNr,mNr,gNr,C3,J4e,hNr,pNr,EK,_Nr,uNr,bNr,w3,Y4e,vNr,FNr,CK,TNr,MNr,ENr,A3,K4e,CNr,wNr,wK,ANr,yNr,LNr,y3,hje,Kc,L3,Z4e,tx,xNr,eEe,$Nr,pje,vr,ax,kNr,Zc,SNr,AK,RNr,BNr,yK,PNr,INr,qNr,nx,NNr,oEe,jNr,DNr,GNr,Ut,sx,ONr,rEe,VNr,XNr,ef,zNr,tEe,WNr,QNr,LK,HNr,UNr,JNr,x3,YNr,Qr,lx,KNr,aEe,ZNr,ejr,Mn,ojr,nEe,rjr,tjr,sEe,ajr,njr,lEe,sjr,ljr,ijr,Ge,$3,iEe,djr,cjr,xK,fjr,mjr,gjr,k3,dEe,hjr,pjr,$K,_jr,ujr,bjr,S3,cEe,vjr,Fjr,kK,Tjr,Mjr,Ejr,R3,fEe,Cjr,wjr,SK,Ajr,yjr,Ljr,B3,mEe,xjr,$jr,RK,kjr,Sjr,Rjr,P3,gEe,Bjr,Pjr,BK,Ijr,qjr,Njr,I3,hEe,jjr,Djr,PK,Gjr,Ojr,Vjr,q3,pEe,Xjr,zjr,IK,Wjr,Qjr,Hjr,N3,_je,of,j3,_Ee,ix,Ujr,uEe,Jjr,uje,Fr,dx,Yjr,rf,Kjr,qK,Zjr,eDr,NK,oDr,rDr,tDr,cx,aDr,bEe,nDr,sDr,lDr,Jt,fx,iDr,vEe,dDr,cDr,tf,fDr,FEe,mDr,gDr,jK,hDr,pDr,_Dr,D3,uDr,Hr,mx,bDr,TEe,vDr,FDr,En,TDr,MEe,MDr,EDr,EEe,CDr,wDr,CEe,ADr,yDr,LDr,wEe,G3,AEe,xDr,$Dr,DK,kDr,SDr,RDr,O3,bje,af,V3,yEe,gx,BDr,LEe,PDr,vje,Tr,hx,IDr,nf,qDr,GK,NDr,jDr,OK,DDr,GDr,ODr,px,VDr,xEe,XDr,zDr,WDr,Yt,_x,QDr,$Ee,HDr,UDr,sf,JDr,kEe,YDr,KDr,VK,ZDr,eGr,oGr,X3,rGr,Ur,ux,tGr,SEe,aGr,nGr,Cn,sGr,REe,lGr,iGr,BEe,dGr,cGr,PEe,fGr,mGr,gGr,bx,z3,IEe,hGr,pGr,XK,_Gr,uGr,bGr,W3,qEe,vGr,FGr,zK,TGr,MGr,EGr,Q3,Fje,lf,H3,NEe,vx,CGr,jEe,wGr,Tje,Mr,Fx,AGr,df,yGr,WK,LGr,xGr,QK,$Gr,kGr,SGr,Tx,RGr,DEe,BGr,PGr,IGr,Kt,Mx,qGr,GEe,NGr,jGr,cf,DGr,OEe,GGr,OGr,HK,VGr,XGr,zGr,U3,WGr,Jr,Ex,QGr,VEe,HGr,UGr,wn,JGr,XEe,YGr,KGr,zEe,ZGr,eOr,WEe,oOr,rOr,tOr,QEe,J3,HEe,aOr,nOr,UK,sOr,lOr,iOr,Y3,Mje;return d=new oe({}),Ca=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),vA=new oe({}),FA=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),vf=new dOr({props:{warning:!0,$$slots:{default:[y9t]},$$scope:{ctx:L}}}),TA=new oe({}),MA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/configuration_auto.py#L583"}}),wA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/configuration_auto.py#L606"}}),Tg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[L9t]},$$scope:{ctx:L}}}),AA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/configuration_auto.py#L729"}}),yA=new oe({}),LA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/tokenization_auto.py#L394"}}),kA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17202/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/tokenization_auto.py#L408"}}),rh=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[x9t]},$$scope:{ctx:L}}}),SA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/tokenization_auto.py#L604"}}),RA=new oe({}),BA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/feature_extraction_auto.py#L188"}}),qA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17202/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/feature_extraction_auto.py#L202"}}),Sh=new dOr({props:{$$slots:{default:[$9t]},$$scope:{ctx:L}}}),Rh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[k9t]},$$scope:{ctx:L}}}),NA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/feature_extraction_auto.py#L329"}}),jA=new oe({}),DA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/processing_auto.py#L87"}}),VA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/processing_auto.py#L101"}}),Kh=new dOr({props:{$$slots:{default:[S9t]},$$scope:{ctx:L}}}),Zh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[R9t]},$$scope:{ctx:L}}}),XA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/processing_auto.py#L254"}}),zA=new oe({}),WA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L732"}}),HA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),rp=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[B9t]},$$scope:{ctx:L}}}),UA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),J_=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[P9t]},$$scope:{ctx:L}}}),JA=new oe({}),YA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L739"}}),ZA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),K_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[I9t]},$$scope:{ctx:L}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),Vu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[q9t]},$$scope:{ctx:L}}}),oy=new oe({}),ry=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L754"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),zu=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[N9t]},$$scope:{ctx:L}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),$2=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[j9t]},$$scope:{ctx:L}}}),sy=new oe({}),ly=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L761"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),S2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[D9t]},$$scope:{ctx:L}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),p1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[G9t]},$$scope:{ctx:L}}}),fy=new oe({}),my=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L768"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),u1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[O9t]},$$scope:{ctx:L}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),P1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[V9t]},$$scope:{ctx:L}}}),_y=new oe({}),uy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L777"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),q1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[X9t]},$$scope:{ctx:L}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),kb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[z9t]},$$scope:{ctx:L}}}),Ty=new oe({}),My=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L811"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Rb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[W9t]},$$scope:{ctx:L}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),cv=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Q9t]},$$scope:{ctx:L}}}),Ay=new oe({}),yy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L818"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),mv=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[H9t]},$$scope:{ctx:L}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),vv=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[U9t]},$$scope:{ctx:L}}}),ky=new oe({}),Sy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L804"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Tv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[J9t]},$$scope:{ctx:L}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),rF=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Y9t]},$$scope:{ctx:L}}}),Iy=new oe({}),qy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L786"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),aF=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[K9t]},$$scope:{ctx:L}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),zF=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Z9t]},$$scope:{ctx:L}}}),Gy=new oe({}),Oy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L793"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),QF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),JF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),Wy=new oe({}),Qy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L827"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),KF=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),m0=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),Yy=new oe({}),Ky=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L866"}}),eL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),h0=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),u0=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),rL=new oe({}),tL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L873"}}),nL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),v0=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),$0=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),lL=new oe({}),iL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L896"}}),cL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),S0=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),j0=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),mL=new oe({}),gL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L880"}}),pL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),G0=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),K0=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),uL=new oe({}),bL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L887"}}),FL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[gxt]},$$scope:{ctx:L}}}),EL=new oe({}),CL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L905"}}),AL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),gT=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),LL=new oe({}),xL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L912"}}),kL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),pT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),FT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),RL=new oe({}),BL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L859"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),jL=new oe({}),DL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L834"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),LT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),XL=new oe({}),zL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L841"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),UL=new oe({}),JL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L850"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),XT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),e8=new oe({}),o8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),t8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),WT=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Axt]},$$scope:{ctx:L}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),N7=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),n8=new oe({}),s8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),i8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),D7=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),cM=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),c8=new oe({}),f8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),g8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),mM=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),wM=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),p8=new oe({}),_8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),b8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),yM=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Sxt]},$$scope:{ctx:L}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),SM=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Rxt]},$$scope:{ctx:L}}}),F8=new oe({}),T8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),E8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),BM=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Bxt]},$$scope:{ctx:L}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),o4=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Pxt]},$$scope:{ctx:L}}}),w8=new oe({}),A8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),L8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),t4=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Ixt]},$$scope:{ctx:L}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[qxt]},$$scope:{ctx:L}}}),$8=new oe({}),k8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),R8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),_4=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Nxt]},$$scope:{ctx:L}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),V4=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[jxt]},$$scope:{ctx:L}}}),P8=new oe({}),I8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),N8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),z4=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Dxt]},$$scope:{ctx:L}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),dE=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Gxt]},$$scope:{ctx:L}}}),D8=new oe({}),G8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),V8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),fE=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Oxt]},$$scope:{ctx:L}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Vxt]},$$scope:{ctx:L}}}),W8=new oe({}),Q8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),U8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),_E=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Xxt]},$$scope:{ctx:L}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),bE=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[zxt]},$$scope:{ctx:L}}}),Y8=new oe({}),K8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),e9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),FE=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Wxt]},$$scope:{ctx:L}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),GE=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Qxt]},$$scope:{ctx:L}}}),r9=new oe({}),t9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),n9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),VE=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Hxt]},$$scope:{ctx:L}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),cC=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Uxt]},$$scope:{ctx:L}}}),l9=new oe({}),i9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),c9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Jxt]},$$scope:{ctx:L}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Yxt]},$$scope:{ctx:L}}}),m9=new oe({}),g9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),p9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Kxt]},$$scope:{ctx:L}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Zxt]},$$scope:{ctx:L}}}),u9=new oe({}),b9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),F9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[e$t]},$$scope:{ctx:L}}}),T9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[o$t]},$$scope:{ctx:L}}}),M9=new oe({}),E9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),w9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[r$t]},$$scope:{ctx:L}}}),A9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),a5=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[t$t]},$$scope:{ctx:L}}}),y9=new oe({}),L9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),$9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),s5=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[a$t]},$$scope:{ctx:L}}}),k9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),v5=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[n$t]},$$scope:{ctx:L}}}),S9=new oe({}),R9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),P9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),T5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[s$t]},$$scope:{ctx:L}}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),S5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[l$t]},$$scope:{ctx:L}}}),q9=new oe({}),N9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),D9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),B5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[i$t]},$$scope:{ctx:L}}}),G9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),X5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[d$t]},$$scope:{ctx:L}}}),O9=new oe({}),V9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[c$t]},$$scope:{ctx:L}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),t3=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[f$t]},$$scope:{ctx:L}}}),Q9=new oe({}),H9=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),J9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),n3=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[m$t]},$$scope:{ctx:L}}}),Y9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),_3=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[g$t]},$$scope:{ctx:L}}}),K9=new oe({}),Z9=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),b3=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[h$t]},$$scope:{ctx:L}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),y3=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[p$t]},$$scope:{ctx:L}}}),tx=new oe({}),ax=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),x3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[_$t]},$$scope:{ctx:L}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),N3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[u$t]},$$scope:{ctx:L}}}),ix=new oe({}),dx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),D3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[b$t]},$$scope:{ctx:L}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),O3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[v$t]},$$scope:{ctx:L}}}),gx=new oe({}),hx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),_x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),X3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[F$t]},$$scope:{ctx:L}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),Q3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[T$t]},$$scope:{ctx:L}}}),vx=new oe({}),Fx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),U3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[M$t]},$$scope:{ctx:L}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),Y3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[E$t]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ci=o("Auto Classes"),hf=l(),rt=a("p"),fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=a("code"),pA=o("from_pretrained()"),pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),gi=o("Instantiating one of "),yn=a("a"),_A=o("AutoConfig"),Ln=o(", "),xn=a("a"),uA=o("AutoModel"),hi=o(`, and
`),$n=a("a"),bA=o("AutoTokenizer"),pi=o(" will directly create a class of the relevant architecture. For instance"),_f=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),I$=o("will create a model that is an instance of "),_i=a("a"),q$=o("BertModel"),N$=o("."),Eo=l(),wa=a("p"),j$=o("There is one class of "),uf=a("code"),D$=o("AutoModel"),$Ge=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),vqe=l(),ui=a("h2"),bf=a("a"),Oee=a("span"),F(vA.$$.fragment),kGe=l(),Vee=a("span"),SGe=o("Extending the Auto Classes"),Fqe=l(),kn=a("p"),RGe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Xee=a("code"),BGe=o("NewModel"),PGe=o(", make sure you have a "),zee=a("code"),IGe=o("NewModelConfig"),qGe=o(` then you can add those to the auto
classes like this:`),Tqe=l(),F(FA.$$.fragment),Mqe=l(),G$=a("p"),NGe=o("You will then be able to use the auto classes like you would usually do!"),Eqe=l(),F(vf.$$.fragment),Cqe=l(),bi=a("h2"),Ff=a("a"),Wee=a("span"),F(TA.$$.fragment),jGe=l(),Qee=a("span"),DGe=o("AutoConfig"),wqe=l(),Co=a("div"),F(MA.$$.fragment),GGe=l(),EA=a("p"),OGe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),O$=a("a"),VGe=o("from_pretrained()"),XGe=o(" class method."),zGe=l(),CA=a("p"),WGe=o("This class cannot be instantiated directly using "),Hee=a("code"),QGe=o("__init__()"),HGe=o(" (throws an error)."),UGe=l(),Er=a("div"),F(wA.$$.fragment),JGe=l(),Uee=a("p"),YGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),KGe=l(),vi=a("p"),ZGe=o("The configuration class to instantiate is selected based on the "),Jee=a("code"),eOe=o("model_type"),oOe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Yee=a("code"),rOe=o("pretrained_model_name_or_path"),tOe=o(":"),aOe=l(),A=a("ul"),Tf=a("li"),Kee=a("strong"),nOe=o("albert"),sOe=o(" \u2014 "),V$=a("a"),lOe=o("AlbertConfig"),iOe=o(" (ALBERT model)"),dOe=l(),Mf=a("li"),Zee=a("strong"),cOe=o("bart"),fOe=o(" \u2014 "),X$=a("a"),mOe=o("BartConfig"),gOe=o(" (BART model)"),hOe=l(),Ef=a("li"),eoe=a("strong"),pOe=o("beit"),_Oe=o(" \u2014 "),z$=a("a"),uOe=o("BeitConfig"),bOe=o(" (BEiT model)"),vOe=l(),Cf=a("li"),ooe=a("strong"),FOe=o("bert"),TOe=o(" \u2014 "),W$=a("a"),MOe=o("BertConfig"),EOe=o(" (BERT model)"),COe=l(),wf=a("li"),roe=a("strong"),wOe=o("bert-generation"),AOe=o(" \u2014 "),Q$=a("a"),yOe=o("BertGenerationConfig"),LOe=o(" (Bert Generation model)"),xOe=l(),Af=a("li"),toe=a("strong"),$Oe=o("big_bird"),kOe=o(" \u2014 "),H$=a("a"),SOe=o("BigBirdConfig"),ROe=o(" (BigBird model)"),BOe=l(),yf=a("li"),aoe=a("strong"),POe=o("bigbird_pegasus"),IOe=o(" \u2014 "),U$=a("a"),qOe=o("BigBirdPegasusConfig"),NOe=o(" (BigBirdPegasus model)"),jOe=l(),Lf=a("li"),noe=a("strong"),DOe=o("blenderbot"),GOe=o(" \u2014 "),J$=a("a"),OOe=o("BlenderbotConfig"),VOe=o(" (Blenderbot model)"),XOe=l(),xf=a("li"),soe=a("strong"),zOe=o("blenderbot-small"),WOe=o(" \u2014 "),Y$=a("a"),QOe=o("BlenderbotSmallConfig"),HOe=o(" (BlenderbotSmall model)"),UOe=l(),$f=a("li"),loe=a("strong"),JOe=o("bloom"),YOe=o(" \u2014 "),K$=a("a"),KOe=o("BloomConfig"),ZOe=o(" (BLOOM model)"),eVe=l(),kf=a("li"),ioe=a("strong"),oVe=o("camembert"),rVe=o(" \u2014 "),Z$=a("a"),tVe=o("CamembertConfig"),aVe=o(" (CamemBERT model)"),nVe=l(),Sf=a("li"),doe=a("strong"),sVe=o("canine"),lVe=o(" \u2014 "),ek=a("a"),iVe=o("CanineConfig"),dVe=o(" (Canine model)"),cVe=l(),Rf=a("li"),coe=a("strong"),fVe=o("clip"),mVe=o(" \u2014 "),ok=a("a"),gVe=o("CLIPConfig"),hVe=o(" (CLIP model)"),pVe=l(),Bf=a("li"),foe=a("strong"),_Ve=o("convbert"),uVe=o(" \u2014 "),rk=a("a"),bVe=o("ConvBertConfig"),vVe=o(" (ConvBERT model)"),FVe=l(),Pf=a("li"),moe=a("strong"),TVe=o("convnext"),MVe=o(" \u2014 "),tk=a("a"),EVe=o("ConvNextConfig"),CVe=o(" (ConvNext model)"),wVe=l(),If=a("li"),goe=a("strong"),AVe=o("ctrl"),yVe=o(" \u2014 "),ak=a("a"),LVe=o("CTRLConfig"),xVe=o(" (CTRL model)"),$Ve=l(),qf=a("li"),hoe=a("strong"),kVe=o("cvt"),SVe=o(" \u2014 "),nk=a("a"),RVe=o("CvtConfig"),BVe=o(" (CvT model)"),PVe=l(),Nf=a("li"),poe=a("strong"),IVe=o("data2vec-audio"),qVe=o(" \u2014 "),sk=a("a"),NVe=o("Data2VecAudioConfig"),jVe=o(" (Data2VecAudio model)"),DVe=l(),jf=a("li"),_oe=a("strong"),GVe=o("data2vec-text"),OVe=o(" \u2014 "),lk=a("a"),VVe=o("Data2VecTextConfig"),XVe=o(" (Data2VecText model)"),zVe=l(),Df=a("li"),uoe=a("strong"),WVe=o("data2vec-vision"),QVe=o(" \u2014 "),ik=a("a"),HVe=o("Data2VecVisionConfig"),UVe=o(" (Data2VecVision model)"),JVe=l(),Gf=a("li"),boe=a("strong"),YVe=o("deberta"),KVe=o(" \u2014 "),dk=a("a"),ZVe=o("DebertaConfig"),eXe=o(" (DeBERTa model)"),oXe=l(),Of=a("li"),voe=a("strong"),rXe=o("deberta-v2"),tXe=o(" \u2014 "),ck=a("a"),aXe=o("DebertaV2Config"),nXe=o(" (DeBERTa-v2 model)"),sXe=l(),Vf=a("li"),Foe=a("strong"),lXe=o("decision_transformer"),iXe=o(" \u2014 "),fk=a("a"),dXe=o("DecisionTransformerConfig"),cXe=o(" (Decision Transformer model)"),fXe=l(),Xf=a("li"),Toe=a("strong"),mXe=o("deit"),gXe=o(" \u2014 "),mk=a("a"),hXe=o("DeiTConfig"),pXe=o(" (DeiT model)"),_Xe=l(),zf=a("li"),Moe=a("strong"),uXe=o("detr"),bXe=o(" \u2014 "),gk=a("a"),vXe=o("DetrConfig"),FXe=o(" (DETR model)"),TXe=l(),Wf=a("li"),Eoe=a("strong"),MXe=o("distilbert"),EXe=o(" \u2014 "),hk=a("a"),CXe=o("DistilBertConfig"),wXe=o(" (DistilBERT model)"),AXe=l(),Qf=a("li"),Coe=a("strong"),yXe=o("dpr"),LXe=o(" \u2014 "),pk=a("a"),xXe=o("DPRConfig"),$Xe=o(" (DPR model)"),kXe=l(),Hf=a("li"),woe=a("strong"),SXe=o("dpt"),RXe=o(" \u2014 "),_k=a("a"),BXe=o("DPTConfig"),PXe=o(" (DPT model)"),IXe=l(),Uf=a("li"),Aoe=a("strong"),qXe=o("electra"),NXe=o(" \u2014 "),uk=a("a"),jXe=o("ElectraConfig"),DXe=o(" (ELECTRA model)"),GXe=l(),Jf=a("li"),yoe=a("strong"),OXe=o("encoder-decoder"),VXe=o(" \u2014 "),bk=a("a"),XXe=o("EncoderDecoderConfig"),zXe=o(" (Encoder decoder model)"),WXe=l(),Yf=a("li"),Loe=a("strong"),QXe=o("flaubert"),HXe=o(" \u2014 "),vk=a("a"),UXe=o("FlaubertConfig"),JXe=o(" (FlauBERT model)"),YXe=l(),Kf=a("li"),xoe=a("strong"),KXe=o("flava"),ZXe=o(" \u2014 "),Fk=a("a"),eze=o("FlavaConfig"),oze=o(" (Flava model)"),rze=l(),Zf=a("li"),$oe=a("strong"),tze=o("fnet"),aze=o(" \u2014 "),Tk=a("a"),nze=o("FNetConfig"),sze=o(" (FNet model)"),lze=l(),em=a("li"),koe=a("strong"),ize=o("fsmt"),dze=o(" \u2014 "),Mk=a("a"),cze=o("FSMTConfig"),fze=o(" (FairSeq Machine-Translation model)"),mze=l(),om=a("li"),Soe=a("strong"),gze=o("funnel"),hze=o(" \u2014 "),Ek=a("a"),pze=o("FunnelConfig"),_ze=o(" (Funnel Transformer model)"),uze=l(),rm=a("li"),Roe=a("strong"),bze=o("glpn"),vze=o(" \u2014 "),Ck=a("a"),Fze=o("GLPNConfig"),Tze=o(" (GLPN model)"),Mze=l(),tm=a("li"),Boe=a("strong"),Eze=o("gpt2"),Cze=o(" \u2014 "),wk=a("a"),wze=o("GPT2Config"),Aze=o(" (OpenAI GPT-2 model)"),yze=l(),am=a("li"),Poe=a("strong"),Lze=o("gpt_neo"),xze=o(" \u2014 "),Ak=a("a"),$ze=o("GPTNeoConfig"),kze=o(" (GPT Neo model)"),Sze=l(),nm=a("li"),Ioe=a("strong"),Rze=o("gptj"),Bze=o(" \u2014 "),yk=a("a"),Pze=o("GPTJConfig"),Ize=o(" (GPT-J model)"),qze=l(),sm=a("li"),qoe=a("strong"),Nze=o("hubert"),jze=o(" \u2014 "),Lk=a("a"),Dze=o("HubertConfig"),Gze=o(" (Hubert model)"),Oze=l(),lm=a("li"),Noe=a("strong"),Vze=o("ibert"),Xze=o(" \u2014 "),xk=a("a"),zze=o("IBertConfig"),Wze=o(" (I-BERT model)"),Qze=l(),im=a("li"),joe=a("strong"),Hze=o("imagegpt"),Uze=o(" \u2014 "),$k=a("a"),Jze=o("ImageGPTConfig"),Yze=o(" (ImageGPT model)"),Kze=l(),dm=a("li"),Doe=a("strong"),Zze=o("layoutlm"),eWe=o(" \u2014 "),kk=a("a"),oWe=o("LayoutLMConfig"),rWe=o(" (LayoutLM model)"),tWe=l(),cm=a("li"),Goe=a("strong"),aWe=o("layoutlmv2"),nWe=o(" \u2014 "),Sk=a("a"),sWe=o("LayoutLMv2Config"),lWe=o(" (LayoutLMv2 model)"),iWe=l(),fm=a("li"),Ooe=a("strong"),dWe=o("led"),cWe=o(" \u2014 "),Rk=a("a"),fWe=o("LEDConfig"),mWe=o(" (LED model)"),gWe=l(),mm=a("li"),Voe=a("strong"),hWe=o("longformer"),pWe=o(" \u2014 "),Bk=a("a"),_We=o("LongformerConfig"),uWe=o(" (Longformer model)"),bWe=l(),gm=a("li"),Xoe=a("strong"),vWe=o("luke"),FWe=o(" \u2014 "),Pk=a("a"),TWe=o("LukeConfig"),MWe=o(" (LUKE model)"),EWe=l(),hm=a("li"),zoe=a("strong"),CWe=o("lxmert"),wWe=o(" \u2014 "),Ik=a("a"),AWe=o("LxmertConfig"),yWe=o(" (LXMERT model)"),LWe=l(),pm=a("li"),Woe=a("strong"),xWe=o("m2m_100"),$We=o(" \u2014 "),qk=a("a"),kWe=o("M2M100Config"),SWe=o(" (M2M100 model)"),RWe=l(),_m=a("li"),Qoe=a("strong"),BWe=o("marian"),PWe=o(" \u2014 "),Nk=a("a"),IWe=o("MarianConfig"),qWe=o(" (Marian model)"),NWe=l(),um=a("li"),Hoe=a("strong"),jWe=o("maskformer"),DWe=o(" \u2014 "),jk=a("a"),GWe=o("MaskFormerConfig"),OWe=o(" (MaskFormer model)"),VWe=l(),bm=a("li"),Uoe=a("strong"),XWe=o("mbart"),zWe=o(" \u2014 "),Dk=a("a"),WWe=o("MBartConfig"),QWe=o(" (mBART model)"),HWe=l(),vm=a("li"),Joe=a("strong"),UWe=o("megatron-bert"),JWe=o(" \u2014 "),Gk=a("a"),YWe=o("MegatronBertConfig"),KWe=o(" (MegatronBert model)"),ZWe=l(),Fm=a("li"),Yoe=a("strong"),eQe=o("mobilebert"),oQe=o(" \u2014 "),Ok=a("a"),rQe=o("MobileBertConfig"),tQe=o(" (MobileBERT model)"),aQe=l(),Tm=a("li"),Koe=a("strong"),nQe=o("mpnet"),sQe=o(" \u2014 "),Vk=a("a"),lQe=o("MPNetConfig"),iQe=o(" (MPNet model)"),dQe=l(),Mm=a("li"),Zoe=a("strong"),cQe=o("mt5"),fQe=o(" \u2014 "),Xk=a("a"),mQe=o("MT5Config"),gQe=o(" (mT5 model)"),hQe=l(),Em=a("li"),ere=a("strong"),pQe=o("nystromformer"),_Qe=o(" \u2014 "),zk=a("a"),uQe=o("NystromformerConfig"),bQe=o(" (Nystromformer model)"),vQe=l(),Cm=a("li"),ore=a("strong"),FQe=o("openai-gpt"),TQe=o(" \u2014 "),Wk=a("a"),MQe=o("OpenAIGPTConfig"),EQe=o(" (OpenAI GPT model)"),CQe=l(),wm=a("li"),rre=a("strong"),wQe=o("opt"),AQe=o(" \u2014 "),Qk=a("a"),yQe=o("OPTConfig"),LQe=o(" (OPT model)"),xQe=l(),Am=a("li"),tre=a("strong"),$Qe=o("pegasus"),kQe=o(" \u2014 "),Hk=a("a"),SQe=o("PegasusConfig"),RQe=o(" (Pegasus model)"),BQe=l(),ym=a("li"),are=a("strong"),PQe=o("perceiver"),IQe=o(" \u2014 "),Uk=a("a"),qQe=o("PerceiverConfig"),NQe=o(" (Perceiver model)"),jQe=l(),Lm=a("li"),nre=a("strong"),DQe=o("plbart"),GQe=o(" \u2014 "),Jk=a("a"),OQe=o("PLBartConfig"),VQe=o(" (PLBart model)"),XQe=l(),xm=a("li"),sre=a("strong"),zQe=o("poolformer"),WQe=o(" \u2014 "),Yk=a("a"),QQe=o("PoolFormerConfig"),HQe=o(" (PoolFormer model)"),UQe=l(),$m=a("li"),lre=a("strong"),JQe=o("prophetnet"),YQe=o(" \u2014 "),Kk=a("a"),KQe=o("ProphetNetConfig"),ZQe=o(" (ProphetNet model)"),eHe=l(),km=a("li"),ire=a("strong"),oHe=o("qdqbert"),rHe=o(" \u2014 "),Zk=a("a"),tHe=o("QDQBertConfig"),aHe=o(" (QDQBert model)"),nHe=l(),Sm=a("li"),dre=a("strong"),sHe=o("rag"),lHe=o(" \u2014 "),eS=a("a"),iHe=o("RagConfig"),dHe=o(" (RAG model)"),cHe=l(),Rm=a("li"),cre=a("strong"),fHe=o("realm"),mHe=o(" \u2014 "),oS=a("a"),gHe=o("RealmConfig"),hHe=o(" (Realm model)"),pHe=l(),Bm=a("li"),fre=a("strong"),_He=o("reformer"),uHe=o(" \u2014 "),rS=a("a"),bHe=o("ReformerConfig"),vHe=o(" (Reformer model)"),FHe=l(),Pm=a("li"),mre=a("strong"),THe=o("regnet"),MHe=o(" \u2014 "),tS=a("a"),EHe=o("RegNetConfig"),CHe=o(" (RegNet model)"),wHe=l(),Im=a("li"),gre=a("strong"),AHe=o("rembert"),yHe=o(" \u2014 "),aS=a("a"),LHe=o("RemBertConfig"),xHe=o(" (RemBERT model)"),$He=l(),qm=a("li"),hre=a("strong"),kHe=o("resnet"),SHe=o(" \u2014 "),nS=a("a"),RHe=o("ResNetConfig"),BHe=o(" (ResNet model)"),PHe=l(),Nm=a("li"),pre=a("strong"),IHe=o("retribert"),qHe=o(" \u2014 "),sS=a("a"),NHe=o("RetriBertConfig"),jHe=o(" (RetriBERT model)"),DHe=l(),jm=a("li"),_re=a("strong"),GHe=o("roberta"),OHe=o(" \u2014 "),lS=a("a"),VHe=o("RobertaConfig"),XHe=o(" (RoBERTa model)"),zHe=l(),Dm=a("li"),ure=a("strong"),WHe=o("roformer"),QHe=o(" \u2014 "),iS=a("a"),HHe=o("RoFormerConfig"),UHe=o(" (RoFormer model)"),JHe=l(),Gm=a("li"),bre=a("strong"),YHe=o("segformer"),KHe=o(" \u2014 "),dS=a("a"),ZHe=o("SegformerConfig"),eUe=o(" (SegFormer model)"),oUe=l(),Om=a("li"),vre=a("strong"),rUe=o("sew"),tUe=o(" \u2014 "),cS=a("a"),aUe=o("SEWConfig"),nUe=o(" (SEW model)"),sUe=l(),Vm=a("li"),Fre=a("strong"),lUe=o("sew-d"),iUe=o(" \u2014 "),fS=a("a"),dUe=o("SEWDConfig"),cUe=o(" (SEW-D model)"),fUe=l(),Xm=a("li"),Tre=a("strong"),mUe=o("speech-encoder-decoder"),gUe=o(" \u2014 "),mS=a("a"),hUe=o("SpeechEncoderDecoderConfig"),pUe=o(" (Speech Encoder decoder model)"),_Ue=l(),zm=a("li"),Mre=a("strong"),uUe=o("speech_to_text"),bUe=o(" \u2014 "),gS=a("a"),vUe=o("Speech2TextConfig"),FUe=o(" (Speech2Text model)"),TUe=l(),Wm=a("li"),Ere=a("strong"),MUe=o("speech_to_text_2"),EUe=o(" \u2014 "),hS=a("a"),CUe=o("Speech2Text2Config"),wUe=o(" (Speech2Text2 model)"),AUe=l(),Qm=a("li"),Cre=a("strong"),yUe=o("splinter"),LUe=o(" \u2014 "),pS=a("a"),xUe=o("SplinterConfig"),$Ue=o(" (Splinter model)"),kUe=l(),Hm=a("li"),wre=a("strong"),SUe=o("squeezebert"),RUe=o(" \u2014 "),_S=a("a"),BUe=o("SqueezeBertConfig"),PUe=o(" (SqueezeBERT model)"),IUe=l(),Um=a("li"),Are=a("strong"),qUe=o("swin"),NUe=o(" \u2014 "),uS=a("a"),jUe=o("SwinConfig"),DUe=o(" (Swin model)"),GUe=l(),Jm=a("li"),yre=a("strong"),OUe=o("t5"),VUe=o(" \u2014 "),bS=a("a"),XUe=o("T5Config"),zUe=o(" (T5 model)"),WUe=l(),Ym=a("li"),Lre=a("strong"),QUe=o("tapas"),HUe=o(" \u2014 "),vS=a("a"),UUe=o("TapasConfig"),JUe=o(" (TAPAS model)"),YUe=l(),Km=a("li"),xre=a("strong"),KUe=o("trajectory_transformer"),ZUe=o(" \u2014 "),FS=a("a"),eJe=o("TrajectoryTransformerConfig"),oJe=o(" (Trajectory Transformer model)"),rJe=l(),Zm=a("li"),$re=a("strong"),tJe=o("transfo-xl"),aJe=o(" \u2014 "),TS=a("a"),nJe=o("TransfoXLConfig"),sJe=o(" (Transformer-XL model)"),lJe=l(),eg=a("li"),kre=a("strong"),iJe=o("trocr"),dJe=o(" \u2014 "),MS=a("a"),cJe=o("TrOCRConfig"),fJe=o(" (TrOCR model)"),mJe=l(),og=a("li"),Sre=a("strong"),gJe=o("unispeech"),hJe=o(" \u2014 "),ES=a("a"),pJe=o("UniSpeechConfig"),_Je=o(" (UniSpeech model)"),uJe=l(),rg=a("li"),Rre=a("strong"),bJe=o("unispeech-sat"),vJe=o(" \u2014 "),CS=a("a"),FJe=o("UniSpeechSatConfig"),TJe=o(" (UniSpeechSat model)"),MJe=l(),tg=a("li"),Bre=a("strong"),EJe=o("van"),CJe=o(" \u2014 "),wS=a("a"),wJe=o("VanConfig"),AJe=o(" (VAN model)"),yJe=l(),ag=a("li"),Pre=a("strong"),LJe=o("vilt"),xJe=o(" \u2014 "),AS=a("a"),$Je=o("ViltConfig"),kJe=o(" (ViLT model)"),SJe=l(),ng=a("li"),Ire=a("strong"),RJe=o("vision-encoder-decoder"),BJe=o(" \u2014 "),yS=a("a"),PJe=o("VisionEncoderDecoderConfig"),IJe=o(" (Vision Encoder decoder model)"),qJe=l(),sg=a("li"),qre=a("strong"),NJe=o("vision-text-dual-encoder"),jJe=o(" \u2014 "),LS=a("a"),DJe=o("VisionTextDualEncoderConfig"),GJe=o(" (VisionTextDualEncoder model)"),OJe=l(),lg=a("li"),Nre=a("strong"),VJe=o("visual_bert"),XJe=o(" \u2014 "),xS=a("a"),zJe=o("VisualBertConfig"),WJe=o(" (VisualBert model)"),QJe=l(),ig=a("li"),jre=a("strong"),HJe=o("vit"),UJe=o(" \u2014 "),$S=a("a"),JJe=o("ViTConfig"),YJe=o(" (ViT model)"),KJe=l(),dg=a("li"),Dre=a("strong"),ZJe=o("vit_mae"),eYe=o(" \u2014 "),kS=a("a"),oYe=o("ViTMAEConfig"),rYe=o(" (ViTMAE model)"),tYe=l(),cg=a("li"),Gre=a("strong"),aYe=o("wav2vec2"),nYe=o(" \u2014 "),SS=a("a"),sYe=o("Wav2Vec2Config"),lYe=o(" (Wav2Vec2 model)"),iYe=l(),fg=a("li"),Ore=a("strong"),dYe=o("wav2vec2-conformer"),cYe=o(" \u2014 "),RS=a("a"),fYe=o("Wav2Vec2ConformerConfig"),mYe=o(" (Wav2Vec2-Conformer model)"),gYe=l(),mg=a("li"),Vre=a("strong"),hYe=o("wavlm"),pYe=o(" \u2014 "),BS=a("a"),_Ye=o("WavLMConfig"),uYe=o(" (WavLM model)"),bYe=l(),gg=a("li"),Xre=a("strong"),vYe=o("xglm"),FYe=o(" \u2014 "),PS=a("a"),TYe=o("XGLMConfig"),MYe=o(" (XGLM model)"),EYe=l(),hg=a("li"),zre=a("strong"),CYe=o("xlm"),wYe=o(" \u2014 "),IS=a("a"),AYe=o("XLMConfig"),yYe=o(" (XLM model)"),LYe=l(),pg=a("li"),Wre=a("strong"),xYe=o("xlm-prophetnet"),$Ye=o(" \u2014 "),qS=a("a"),kYe=o("XLMProphetNetConfig"),SYe=o(" (XLMProphetNet model)"),RYe=l(),_g=a("li"),Qre=a("strong"),BYe=o("xlm-roberta"),PYe=o(" \u2014 "),NS=a("a"),IYe=o("XLMRobertaConfig"),qYe=o(" (XLM-RoBERTa model)"),NYe=l(),ug=a("li"),Hre=a("strong"),jYe=o("xlm-roberta-xl"),DYe=o(" \u2014 "),jS=a("a"),GYe=o("XLMRobertaXLConfig"),OYe=o(" (XLM-RoBERTa-XL model)"),VYe=l(),bg=a("li"),Ure=a("strong"),XYe=o("xlnet"),zYe=o(" \u2014 "),DS=a("a"),WYe=o("XLNetConfig"),QYe=o(" (XLNet model)"),HYe=l(),vg=a("li"),Jre=a("strong"),UYe=o("yolos"),JYe=o(" \u2014 "),GS=a("a"),YYe=o("YolosConfig"),KYe=o(" (YOLOS model)"),ZYe=l(),Fg=a("li"),Yre=a("strong"),eKe=o("yoso"),oKe=o(" \u2014 "),OS=a("a"),rKe=o("YosoConfig"),tKe=o(" (YOSO model)"),aKe=l(),F(Tg.$$.fragment),nKe=l(),Mg=a("div"),F(AA.$$.fragment),sKe=l(),Kre=a("p"),lKe=o("Register a new configuration for this class."),Aqe=l(),Fi=a("h2"),Eg=a("a"),Zre=a("span"),F(yA.$$.fragment),iKe=l(),ete=a("span"),dKe=o("AutoTokenizer"),yqe=l(),wo=a("div"),F(LA.$$.fragment),cKe=l(),xA=a("p"),fKe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),VS=a("a"),mKe=o("AutoTokenizer.from_pretrained()"),gKe=o(" class method."),hKe=l(),$A=a("p"),pKe=o("This class cannot be instantiated directly using "),ote=a("code"),_Ke=o("__init__()"),uKe=o(" (throws an error)."),bKe=l(),Cr=a("div"),F(kA.$$.fragment),vKe=l(),rte=a("p"),FKe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),TKe=l(),Aa=a("p"),MKe=o("The tokenizer class to instantiate is selected based on the "),tte=a("code"),EKe=o("model_type"),CKe=o(` property of the config object (either
passed as an argument or loaded from `),ate=a("code"),wKe=o("pretrained_model_name_or_path"),AKe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nte=a("code"),yKe=o("pretrained_model_name_or_path"),LKe=o(":"),xKe=l(),k=a("ul"),Sn=a("li"),ste=a("strong"),$Ke=o("albert"),kKe=o(" \u2014 "),XS=a("a"),SKe=o("AlbertTokenizer"),RKe=o(" or "),zS=a("a"),BKe=o("AlbertTokenizerFast"),PKe=o(" (ALBERT model)"),IKe=l(),Rn=a("li"),lte=a("strong"),qKe=o("bart"),NKe=o(" \u2014 "),WS=a("a"),jKe=o("BartTokenizer"),DKe=o(" or "),QS=a("a"),GKe=o("BartTokenizerFast"),OKe=o(" (BART model)"),VKe=l(),Bn=a("li"),ite=a("strong"),XKe=o("barthez"),zKe=o(" \u2014 "),HS=a("a"),WKe=o("BarthezTokenizer"),QKe=o(" or "),US=a("a"),HKe=o("BarthezTokenizerFast"),UKe=o(" (BARThez model)"),JKe=l(),Cg=a("li"),dte=a("strong"),YKe=o("bartpho"),KKe=o(" \u2014 "),JS=a("a"),ZKe=o("BartphoTokenizer"),eZe=o(" (BARTpho model)"),oZe=l(),Pn=a("li"),cte=a("strong"),rZe=o("bert"),tZe=o(" \u2014 "),YS=a("a"),aZe=o("BertTokenizer"),nZe=o(" or "),KS=a("a"),sZe=o("BertTokenizerFast"),lZe=o(" (BERT model)"),iZe=l(),wg=a("li"),fte=a("strong"),dZe=o("bert-generation"),cZe=o(" \u2014 "),ZS=a("a"),fZe=o("BertGenerationTokenizer"),mZe=o(" (Bert Generation model)"),gZe=l(),Ag=a("li"),mte=a("strong"),hZe=o("bert-japanese"),pZe=o(" \u2014 "),eR=a("a"),_Ze=o("BertJapaneseTokenizer"),uZe=o(" (BertJapanese model)"),bZe=l(),yg=a("li"),gte=a("strong"),vZe=o("bertweet"),FZe=o(" \u2014 "),oR=a("a"),TZe=o("BertweetTokenizer"),MZe=o(" (Bertweet model)"),EZe=l(),In=a("li"),hte=a("strong"),CZe=o("big_bird"),wZe=o(" \u2014 "),rR=a("a"),AZe=o("BigBirdTokenizer"),yZe=o(" or "),tR=a("a"),LZe=o("BigBirdTokenizerFast"),xZe=o(" (BigBird model)"),$Ze=l(),qn=a("li"),pte=a("strong"),kZe=o("bigbird_pegasus"),SZe=o(" \u2014 "),aR=a("a"),RZe=o("PegasusTokenizer"),BZe=o(" or "),nR=a("a"),PZe=o("PegasusTokenizerFast"),IZe=o(" (BigBirdPegasus model)"),qZe=l(),Nn=a("li"),_te=a("strong"),NZe=o("blenderbot"),jZe=o(" \u2014 "),sR=a("a"),DZe=o("BlenderbotTokenizer"),GZe=o(" or "),lR=a("a"),OZe=o("BlenderbotTokenizerFast"),VZe=o(" (Blenderbot model)"),XZe=l(),Lg=a("li"),ute=a("strong"),zZe=o("blenderbot-small"),WZe=o(" \u2014 "),iR=a("a"),QZe=o("BlenderbotSmallTokenizer"),HZe=o(" (BlenderbotSmall model)"),UZe=l(),xg=a("li"),bte=a("strong"),JZe=o("bloom"),YZe=o(" \u2014 "),dR=a("a"),KZe=o("BloomTokenizerFast"),ZZe=o(" (BLOOM model)"),eeo=l(),$g=a("li"),vte=a("strong"),oeo=o("byt5"),reo=o(" \u2014 "),cR=a("a"),teo=o("ByT5Tokenizer"),aeo=o(" (ByT5 model)"),neo=l(),jn=a("li"),Fte=a("strong"),seo=o("camembert"),leo=o(" \u2014 "),fR=a("a"),ieo=o("CamembertTokenizer"),deo=o(" or "),mR=a("a"),ceo=o("CamembertTokenizerFast"),feo=o(" (CamemBERT model)"),meo=l(),kg=a("li"),Tte=a("strong"),geo=o("canine"),heo=o(" \u2014 "),gR=a("a"),peo=o("CanineTokenizer"),_eo=o(" (Canine model)"),ueo=l(),Dn=a("li"),Mte=a("strong"),beo=o("clip"),veo=o(" \u2014 "),hR=a("a"),Feo=o("CLIPTokenizer"),Teo=o(" or "),pR=a("a"),Meo=o("CLIPTokenizerFast"),Eeo=o(" (CLIP model)"),Ceo=l(),Gn=a("li"),Ete=a("strong"),weo=o("convbert"),Aeo=o(" \u2014 "),_R=a("a"),yeo=o("ConvBertTokenizer"),Leo=o(" or "),uR=a("a"),xeo=o("ConvBertTokenizerFast"),$eo=o(" (ConvBERT model)"),keo=l(),On=a("li"),Cte=a("strong"),Seo=o("cpm"),Reo=o(" \u2014 "),bR=a("a"),Beo=o("CpmTokenizer"),Peo=o(" or "),vR=a("a"),Ieo=o("CpmTokenizerFast"),qeo=o(" (CPM model)"),Neo=l(),Sg=a("li"),wte=a("strong"),jeo=o("ctrl"),Deo=o(" \u2014 "),FR=a("a"),Geo=o("CTRLTokenizer"),Oeo=o(" (CTRL model)"),Veo=l(),Vn=a("li"),Ate=a("strong"),Xeo=o("data2vec-text"),zeo=o(" \u2014 "),TR=a("a"),Weo=o("RobertaTokenizer"),Qeo=o(" or "),MR=a("a"),Heo=o("RobertaTokenizerFast"),Ueo=o(" (Data2VecText model)"),Jeo=l(),Xn=a("li"),yte=a("strong"),Yeo=o("deberta"),Keo=o(" \u2014 "),ER=a("a"),Zeo=o("DebertaTokenizer"),eoo=o(" or "),CR=a("a"),ooo=o("DebertaTokenizerFast"),roo=o(" (DeBERTa model)"),too=l(),zn=a("li"),Lte=a("strong"),aoo=o("deberta-v2"),noo=o(" \u2014 "),wR=a("a"),soo=o("DebertaV2Tokenizer"),loo=o(" or "),AR=a("a"),ioo=o("DebertaV2TokenizerFast"),doo=o(" (DeBERTa-v2 model)"),coo=l(),Wn=a("li"),xte=a("strong"),foo=o("distilbert"),moo=o(" \u2014 "),yR=a("a"),goo=o("DistilBertTokenizer"),hoo=o(" or "),LR=a("a"),poo=o("DistilBertTokenizerFast"),_oo=o(" (DistilBERT model)"),uoo=l(),Qn=a("li"),$te=a("strong"),boo=o("dpr"),voo=o(" \u2014 "),xR=a("a"),Foo=o("DPRQuestionEncoderTokenizer"),Too=o(" or "),$R=a("a"),Moo=o("DPRQuestionEncoderTokenizerFast"),Eoo=o(" (DPR model)"),Coo=l(),Hn=a("li"),kte=a("strong"),woo=o("electra"),Aoo=o(" \u2014 "),kR=a("a"),yoo=o("ElectraTokenizer"),Loo=o(" or "),SR=a("a"),xoo=o("ElectraTokenizerFast"),$oo=o(" (ELECTRA model)"),koo=l(),Rg=a("li"),Ste=a("strong"),Soo=o("flaubert"),Roo=o(" \u2014 "),RR=a("a"),Boo=o("FlaubertTokenizer"),Poo=o(" (FlauBERT model)"),Ioo=l(),Un=a("li"),Rte=a("strong"),qoo=o("fnet"),Noo=o(" \u2014 "),BR=a("a"),joo=o("FNetTokenizer"),Doo=o(" or "),PR=a("a"),Goo=o("FNetTokenizerFast"),Ooo=o(" (FNet model)"),Voo=l(),Bg=a("li"),Bte=a("strong"),Xoo=o("fsmt"),zoo=o(" \u2014 "),IR=a("a"),Woo=o("FSMTTokenizer"),Qoo=o(" (FairSeq Machine-Translation model)"),Hoo=l(),Jn=a("li"),Pte=a("strong"),Uoo=o("funnel"),Joo=o(" \u2014 "),qR=a("a"),Yoo=o("FunnelTokenizer"),Koo=o(" or "),NR=a("a"),Zoo=o("FunnelTokenizerFast"),ero=o(" (Funnel Transformer model)"),oro=l(),Yn=a("li"),Ite=a("strong"),rro=o("gpt2"),tro=o(" \u2014 "),jR=a("a"),aro=o("GPT2Tokenizer"),nro=o(" or "),DR=a("a"),sro=o("GPT2TokenizerFast"),lro=o(" (OpenAI GPT-2 model)"),iro=l(),Kn=a("li"),qte=a("strong"),dro=o("gpt_neo"),cro=o(" \u2014 "),GR=a("a"),fro=o("GPT2Tokenizer"),mro=o(" or "),OR=a("a"),gro=o("GPT2TokenizerFast"),hro=o(" (GPT Neo model)"),pro=l(),Zn=a("li"),Nte=a("strong"),_ro=o("gptj"),uro=o(" \u2014 "),VR=a("a"),bro=o("GPT2Tokenizer"),vro=o(" or "),XR=a("a"),Fro=o("GPT2TokenizerFast"),Tro=o(" (GPT-J model)"),Mro=l(),es=a("li"),jte=a("strong"),Ero=o("herbert"),Cro=o(" \u2014 "),zR=a("a"),wro=o("HerbertTokenizer"),Aro=o(" or "),WR=a("a"),yro=o("HerbertTokenizerFast"),Lro=o(" (HerBERT model)"),xro=l(),Pg=a("li"),Dte=a("strong"),$ro=o("hubert"),kro=o(" \u2014 "),QR=a("a"),Sro=o("Wav2Vec2CTCTokenizer"),Rro=o(" (Hubert model)"),Bro=l(),os=a("li"),Gte=a("strong"),Pro=o("ibert"),Iro=o(" \u2014 "),HR=a("a"),qro=o("RobertaTokenizer"),Nro=o(" or "),UR=a("a"),jro=o("RobertaTokenizerFast"),Dro=o(" (I-BERT model)"),Gro=l(),rs=a("li"),Ote=a("strong"),Oro=o("layoutlm"),Vro=o(" \u2014 "),JR=a("a"),Xro=o("LayoutLMTokenizer"),zro=o(" or "),YR=a("a"),Wro=o("LayoutLMTokenizerFast"),Qro=o(" (LayoutLM model)"),Hro=l(),ts=a("li"),Vte=a("strong"),Uro=o("layoutlmv2"),Jro=o(" \u2014 "),KR=a("a"),Yro=o("LayoutLMv2Tokenizer"),Kro=o(" or "),ZR=a("a"),Zro=o("LayoutLMv2TokenizerFast"),eto=o(" (LayoutLMv2 model)"),oto=l(),as=a("li"),Xte=a("strong"),rto=o("layoutxlm"),tto=o(" \u2014 "),eB=a("a"),ato=o("LayoutXLMTokenizer"),nto=o(" or "),oB=a("a"),sto=o("LayoutXLMTokenizerFast"),lto=o(" (LayoutXLM model)"),ito=l(),ns=a("li"),zte=a("strong"),dto=o("led"),cto=o(" \u2014 "),rB=a("a"),fto=o("LEDTokenizer"),mto=o(" or "),tB=a("a"),gto=o("LEDTokenizerFast"),hto=o(" (LED model)"),pto=l(),ss=a("li"),Wte=a("strong"),_to=o("longformer"),uto=o(" \u2014 "),aB=a("a"),bto=o("LongformerTokenizer"),vto=o(" or "),nB=a("a"),Fto=o("LongformerTokenizerFast"),Tto=o(" (Longformer model)"),Mto=l(),Ig=a("li"),Qte=a("strong"),Eto=o("luke"),Cto=o(" \u2014 "),sB=a("a"),wto=o("LukeTokenizer"),Ato=o(" (LUKE model)"),yto=l(),ls=a("li"),Hte=a("strong"),Lto=o("lxmert"),xto=o(" \u2014 "),lB=a("a"),$to=o("LxmertTokenizer"),kto=o(" or "),iB=a("a"),Sto=o("LxmertTokenizerFast"),Rto=o(" (LXMERT model)"),Bto=l(),qg=a("li"),Ute=a("strong"),Pto=o("m2m_100"),Ito=o(" \u2014 "),dB=a("a"),qto=o("M2M100Tokenizer"),Nto=o(" (M2M100 model)"),jto=l(),Ng=a("li"),Jte=a("strong"),Dto=o("marian"),Gto=o(" \u2014 "),cB=a("a"),Oto=o("MarianTokenizer"),Vto=o(" (Marian model)"),Xto=l(),is=a("li"),Yte=a("strong"),zto=o("mbart"),Wto=o(" \u2014 "),fB=a("a"),Qto=o("MBartTokenizer"),Hto=o(" or "),mB=a("a"),Uto=o("MBartTokenizerFast"),Jto=o(" (mBART model)"),Yto=l(),ds=a("li"),Kte=a("strong"),Kto=o("mbart50"),Zto=o(" \u2014 "),gB=a("a"),eao=o("MBart50Tokenizer"),oao=o(" or "),hB=a("a"),rao=o("MBart50TokenizerFast"),tao=o(" (mBART-50 model)"),aao=l(),cs=a("li"),Zte=a("strong"),nao=o("megatron-bert"),sao=o(" \u2014 "),pB=a("a"),lao=o("BertTokenizer"),iao=o(" or "),_B=a("a"),dao=o("BertTokenizerFast"),cao=o(" (MegatronBert model)"),fao=l(),jg=a("li"),eae=a("strong"),mao=o("mluke"),gao=o(" \u2014 "),uB=a("a"),hao=o("MLukeTokenizer"),pao=o(" (mLUKE model)"),_ao=l(),fs=a("li"),oae=a("strong"),uao=o("mobilebert"),bao=o(" \u2014 "),bB=a("a"),vao=o("MobileBertTokenizer"),Fao=o(" or "),vB=a("a"),Tao=o("MobileBertTokenizerFast"),Mao=o(" (MobileBERT model)"),Eao=l(),ms=a("li"),rae=a("strong"),Cao=o("mpnet"),wao=o(" \u2014 "),FB=a("a"),Aao=o("MPNetTokenizer"),yao=o(" or "),TB=a("a"),Lao=o("MPNetTokenizerFast"),xao=o(" (MPNet model)"),$ao=l(),gs=a("li"),tae=a("strong"),kao=o("mt5"),Sao=o(" \u2014 "),MB=a("a"),Rao=o("MT5Tokenizer"),Bao=o(" or "),EB=a("a"),Pao=o("MT5TokenizerFast"),Iao=o(" (mT5 model)"),qao=l(),hs=a("li"),aae=a("strong"),Nao=o("nystromformer"),jao=o(" \u2014 "),CB=a("a"),Dao=o("AlbertTokenizer"),Gao=o(" or "),wB=a("a"),Oao=o("AlbertTokenizerFast"),Vao=o(" (Nystromformer model)"),Xao=l(),ps=a("li"),nae=a("strong"),zao=o("openai-gpt"),Wao=o(" \u2014 "),AB=a("a"),Qao=o("OpenAIGPTTokenizer"),Hao=o(" or "),yB=a("a"),Uao=o("OpenAIGPTTokenizerFast"),Jao=o(" (OpenAI GPT model)"),Yao=l(),Dg=a("li"),sae=a("strong"),Kao=o("opt"),Zao=o(" \u2014 "),LB=a("a"),eno=o("GPT2Tokenizer"),ono=o(" (OPT model)"),rno=l(),_s=a("li"),lae=a("strong"),tno=o("pegasus"),ano=o(" \u2014 "),xB=a("a"),nno=o("PegasusTokenizer"),sno=o(" or "),$B=a("a"),lno=o("PegasusTokenizerFast"),ino=o(" (Pegasus model)"),dno=l(),Gg=a("li"),iae=a("strong"),cno=o("perceiver"),fno=o(" \u2014 "),kB=a("a"),mno=o("PerceiverTokenizer"),gno=o(" (Perceiver model)"),hno=l(),Og=a("li"),dae=a("strong"),pno=o("phobert"),_no=o(" \u2014 "),SB=a("a"),uno=o("PhobertTokenizer"),bno=o(" (PhoBERT model)"),vno=l(),Vg=a("li"),cae=a("strong"),Fno=o("plbart"),Tno=o(" \u2014 "),RB=a("a"),Mno=o("PLBartTokenizer"),Eno=o(" (PLBart model)"),Cno=l(),Xg=a("li"),fae=a("strong"),wno=o("prophetnet"),Ano=o(" \u2014 "),BB=a("a"),yno=o("ProphetNetTokenizer"),Lno=o(" (ProphetNet model)"),xno=l(),us=a("li"),mae=a("strong"),$no=o("qdqbert"),kno=o(" \u2014 "),PB=a("a"),Sno=o("BertTokenizer"),Rno=o(" or "),IB=a("a"),Bno=o("BertTokenizerFast"),Pno=o(" (QDQBert model)"),Ino=l(),zg=a("li"),gae=a("strong"),qno=o("rag"),Nno=o(" \u2014 "),qB=a("a"),jno=o("RagTokenizer"),Dno=o(" (RAG model)"),Gno=l(),bs=a("li"),hae=a("strong"),Ono=o("realm"),Vno=o(" \u2014 "),NB=a("a"),Xno=o("RealmTokenizer"),zno=o(" or "),jB=a("a"),Wno=o("RealmTokenizerFast"),Qno=o(" (Realm model)"),Hno=l(),vs=a("li"),pae=a("strong"),Uno=o("reformer"),Jno=o(" \u2014 "),DB=a("a"),Yno=o("ReformerTokenizer"),Kno=o(" or "),GB=a("a"),Zno=o("ReformerTokenizerFast"),eso=o(" (Reformer model)"),oso=l(),Fs=a("li"),_ae=a("strong"),rso=o("rembert"),tso=o(" \u2014 "),OB=a("a"),aso=o("RemBertTokenizer"),nso=o(" or "),VB=a("a"),sso=o("RemBertTokenizerFast"),lso=o(" (RemBERT model)"),iso=l(),Ts=a("li"),uae=a("strong"),dso=o("retribert"),cso=o(" \u2014 "),XB=a("a"),fso=o("RetriBertTokenizer"),mso=o(" or "),zB=a("a"),gso=o("RetriBertTokenizerFast"),hso=o(" (RetriBERT model)"),pso=l(),Ms=a("li"),bae=a("strong"),_so=o("roberta"),uso=o(" \u2014 "),WB=a("a"),bso=o("RobertaTokenizer"),vso=o(" or "),QB=a("a"),Fso=o("RobertaTokenizerFast"),Tso=o(" (RoBERTa model)"),Mso=l(),Es=a("li"),vae=a("strong"),Eso=o("roformer"),Cso=o(" \u2014 "),HB=a("a"),wso=o("RoFormerTokenizer"),Aso=o(" or "),UB=a("a"),yso=o("RoFormerTokenizerFast"),Lso=o(" (RoFormer model)"),xso=l(),Wg=a("li"),Fae=a("strong"),$so=o("speech_to_text"),kso=o(" \u2014 "),JB=a("a"),Sso=o("Speech2TextTokenizer"),Rso=o(" (Speech2Text model)"),Bso=l(),Qg=a("li"),Tae=a("strong"),Pso=o("speech_to_text_2"),Iso=o(" \u2014 "),YB=a("a"),qso=o("Speech2Text2Tokenizer"),Nso=o(" (Speech2Text2 model)"),jso=l(),Cs=a("li"),Mae=a("strong"),Dso=o("splinter"),Gso=o(" \u2014 "),KB=a("a"),Oso=o("SplinterTokenizer"),Vso=o(" or "),ZB=a("a"),Xso=o("SplinterTokenizerFast"),zso=o(" (Splinter model)"),Wso=l(),ws=a("li"),Eae=a("strong"),Qso=o("squeezebert"),Hso=o(" \u2014 "),eP=a("a"),Uso=o("SqueezeBertTokenizer"),Jso=o(" or "),oP=a("a"),Yso=o("SqueezeBertTokenizerFast"),Kso=o(" (SqueezeBERT model)"),Zso=l(),As=a("li"),Cae=a("strong"),elo=o("t5"),olo=o(" \u2014 "),rP=a("a"),rlo=o("T5Tokenizer"),tlo=o(" or "),tP=a("a"),alo=o("T5TokenizerFast"),nlo=o(" (T5 model)"),slo=l(),Hg=a("li"),wae=a("strong"),llo=o("tapas"),ilo=o(" \u2014 "),aP=a("a"),dlo=o("TapasTokenizer"),clo=o(" (TAPAS model)"),flo=l(),Ug=a("li"),Aae=a("strong"),mlo=o("tapex"),glo=o(" \u2014 "),nP=a("a"),hlo=o("TapexTokenizer"),plo=o(" (TAPEX model)"),_lo=l(),Jg=a("li"),yae=a("strong"),ulo=o("transfo-xl"),blo=o(" \u2014 "),sP=a("a"),vlo=o("TransfoXLTokenizer"),Flo=o(" (Transformer-XL model)"),Tlo=l(),ys=a("li"),Lae=a("strong"),Mlo=o("visual_bert"),Elo=o(" \u2014 "),lP=a("a"),Clo=o("BertTokenizer"),wlo=o(" or "),iP=a("a"),Alo=o("BertTokenizerFast"),ylo=o(" (VisualBert model)"),Llo=l(),Yg=a("li"),xae=a("strong"),xlo=o("wav2vec2"),$lo=o(" \u2014 "),dP=a("a"),klo=o("Wav2Vec2CTCTokenizer"),Slo=o(" (Wav2Vec2 model)"),Rlo=l(),Kg=a("li"),$ae=a("strong"),Blo=o("wav2vec2-conformer"),Plo=o(" \u2014 "),cP=a("a"),Ilo=o("Wav2Vec2CTCTokenizer"),qlo=o(" (Wav2Vec2-Conformer model)"),Nlo=l(),Zg=a("li"),kae=a("strong"),jlo=o("wav2vec2_phoneme"),Dlo=o(" \u2014 "),fP=a("a"),Glo=o("Wav2Vec2PhonemeCTCTokenizer"),Olo=o(" (Wav2Vec2Phoneme model)"),Vlo=l(),Ls=a("li"),Sae=a("strong"),Xlo=o("xglm"),zlo=o(" \u2014 "),mP=a("a"),Wlo=o("XGLMTokenizer"),Qlo=o(" or "),gP=a("a"),Hlo=o("XGLMTokenizerFast"),Ulo=o(" (XGLM model)"),Jlo=l(),eh=a("li"),Rae=a("strong"),Ylo=o("xlm"),Klo=o(" \u2014 "),hP=a("a"),Zlo=o("XLMTokenizer"),eio=o(" (XLM model)"),oio=l(),oh=a("li"),Bae=a("strong"),rio=o("xlm-prophetnet"),tio=o(" \u2014 "),pP=a("a"),aio=o("XLMProphetNetTokenizer"),nio=o(" (XLMProphetNet model)"),sio=l(),xs=a("li"),Pae=a("strong"),lio=o("xlm-roberta"),iio=o(" \u2014 "),_P=a("a"),dio=o("XLMRobertaTokenizer"),cio=o(" or "),uP=a("a"),fio=o("XLMRobertaTokenizerFast"),mio=o(" (XLM-RoBERTa model)"),gio=l(),$s=a("li"),Iae=a("strong"),hio=o("xlm-roberta-xl"),pio=o(" \u2014 "),bP=a("a"),_io=o("RobertaTokenizer"),uio=o(" or "),vP=a("a"),bio=o("RobertaTokenizerFast"),vio=o(" (XLM-RoBERTa-XL model)"),Fio=l(),ks=a("li"),qae=a("strong"),Tio=o("xlnet"),Mio=o(" \u2014 "),FP=a("a"),Eio=o("XLNetTokenizer"),Cio=o(" or "),TP=a("a"),wio=o("XLNetTokenizerFast"),Aio=o(" (XLNet model)"),yio=l(),Ss=a("li"),Nae=a("strong"),Lio=o("yoso"),xio=o(" \u2014 "),MP=a("a"),$io=o("AlbertTokenizer"),kio=o(" or "),EP=a("a"),Sio=o("AlbertTokenizerFast"),Rio=o(" (YOSO model)"),Bio=l(),F(rh.$$.fragment),Pio=l(),th=a("div"),F(SA.$$.fragment),Iio=l(),jae=a("p"),qio=o("Register a new tokenizer in this mapping."),Lqe=l(),Ti=a("h2"),ah=a("a"),Dae=a("span"),F(RA.$$.fragment),Nio=l(),Gae=a("span"),jio=o("AutoFeatureExtractor"),xqe=l(),Ao=a("div"),F(BA.$$.fragment),Dio=l(),PA=a("p"),Gio=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),CP=a("a"),Oio=o("AutoFeatureExtractor.from_pretrained()"),Vio=o(" class method."),Xio=l(),IA=a("p"),zio=o("This class cannot be instantiated directly using "),Oae=a("code"),Wio=o("__init__()"),Qio=o(" (throws an error)."),Hio=l(),He=a("div"),F(qA.$$.fragment),Uio=l(),Vae=a("p"),Jio=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Yio=l(),ya=a("p"),Kio=o("The feature extractor class to instantiate is selected based on the "),Xae=a("code"),Zio=o("model_type"),edo=o(` property of the config object
(either passed as an argument or loaded from `),zae=a("code"),odo=o("pretrained_model_name_or_path"),rdo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Wae=a("code"),tdo=o("pretrained_model_name_or_path"),ado=o(":"),ndo=l(),Z=a("ul"),nh=a("li"),Qae=a("strong"),sdo=o("beit"),ldo=o(" \u2014 "),wP=a("a"),ido=o("BeitFeatureExtractor"),ddo=o(" (BEiT model)"),cdo=l(),sh=a("li"),Hae=a("strong"),fdo=o("clip"),mdo=o(" \u2014 "),AP=a("a"),gdo=o("CLIPFeatureExtractor"),hdo=o(" (CLIP model)"),pdo=l(),lh=a("li"),Uae=a("strong"),_do=o("convnext"),udo=o(" \u2014 "),yP=a("a"),bdo=o("ConvNextFeatureExtractor"),vdo=o(" (ConvNext model)"),Fdo=l(),ih=a("li"),Jae=a("strong"),Tdo=o("cvt"),Mdo=o(" \u2014 "),LP=a("a"),Edo=o("ConvNextFeatureExtractor"),Cdo=o(" (CvT model)"),wdo=l(),dh=a("li"),Yae=a("strong"),Ado=o("data2vec-audio"),ydo=o(" \u2014 "),xP=a("a"),Ldo=o("Wav2Vec2FeatureExtractor"),xdo=o(" (Data2VecAudio model)"),$do=l(),ch=a("li"),Kae=a("strong"),kdo=o("data2vec-vision"),Sdo=o(" \u2014 "),$P=a("a"),Rdo=o("BeitFeatureExtractor"),Bdo=o(" (Data2VecVision model)"),Pdo=l(),fh=a("li"),Zae=a("strong"),Ido=o("deit"),qdo=o(" \u2014 "),kP=a("a"),Ndo=o("DeiTFeatureExtractor"),jdo=o(" (DeiT model)"),Ddo=l(),mh=a("li"),ene=a("strong"),Gdo=o("detr"),Odo=o(" \u2014 "),SP=a("a"),Vdo=o("DetrFeatureExtractor"),Xdo=o(" (DETR model)"),zdo=l(),gh=a("li"),one=a("strong"),Wdo=o("dpt"),Qdo=o(" \u2014 "),RP=a("a"),Hdo=o("DPTFeatureExtractor"),Udo=o(" (DPT model)"),Jdo=l(),hh=a("li"),rne=a("strong"),Ydo=o("flava"),Kdo=o(" \u2014 "),BP=a("a"),Zdo=o("FlavaFeatureExtractor"),eco=o(" (Flava model)"),oco=l(),ph=a("li"),tne=a("strong"),rco=o("glpn"),tco=o(" \u2014 "),PP=a("a"),aco=o("GLPNFeatureExtractor"),nco=o(" (GLPN model)"),sco=l(),_h=a("li"),ane=a("strong"),lco=o("hubert"),ico=o(" \u2014 "),IP=a("a"),dco=o("Wav2Vec2FeatureExtractor"),cco=o(" (Hubert model)"),fco=l(),uh=a("li"),nne=a("strong"),mco=o("layoutlmv2"),gco=o(" \u2014 "),qP=a("a"),hco=o("LayoutLMv2FeatureExtractor"),pco=o(" (LayoutLMv2 model)"),_co=l(),bh=a("li"),sne=a("strong"),uco=o("maskformer"),bco=o(" \u2014 "),NP=a("a"),vco=o("MaskFormerFeatureExtractor"),Fco=o(" (MaskFormer model)"),Tco=l(),vh=a("li"),lne=a("strong"),Mco=o("perceiver"),Eco=o(" \u2014 "),jP=a("a"),Cco=o("PerceiverFeatureExtractor"),wco=o(" (Perceiver model)"),Aco=l(),Fh=a("li"),ine=a("strong"),yco=o("poolformer"),Lco=o(" \u2014 "),DP=a("a"),xco=o("PoolFormerFeatureExtractor"),$co=o(" (PoolFormer model)"),kco=l(),Th=a("li"),dne=a("strong"),Sco=o("regnet"),Rco=o(" \u2014 "),GP=a("a"),Bco=o("ConvNextFeatureExtractor"),Pco=o(" (RegNet model)"),Ico=l(),Mh=a("li"),cne=a("strong"),qco=o("resnet"),Nco=o(" \u2014 "),OP=a("a"),jco=o("ConvNextFeatureExtractor"),Dco=o(" (ResNet model)"),Gco=l(),Eh=a("li"),fne=a("strong"),Oco=o("segformer"),Vco=o(" \u2014 "),VP=a("a"),Xco=o("SegformerFeatureExtractor"),zco=o(" (SegFormer model)"),Wco=l(),Ch=a("li"),mne=a("strong"),Qco=o("speech_to_text"),Hco=o(" \u2014 "),XP=a("a"),Uco=o("Speech2TextFeatureExtractor"),Jco=o(" (Speech2Text model)"),Yco=l(),wh=a("li"),gne=a("strong"),Kco=o("swin"),Zco=o(" \u2014 "),zP=a("a"),efo=o("ViTFeatureExtractor"),ofo=o(" (Swin model)"),rfo=l(),Ah=a("li"),hne=a("strong"),tfo=o("van"),afo=o(" \u2014 "),WP=a("a"),nfo=o("ConvNextFeatureExtractor"),sfo=o(" (VAN model)"),lfo=l(),yh=a("li"),pne=a("strong"),ifo=o("vit"),dfo=o(" \u2014 "),QP=a("a"),cfo=o("ViTFeatureExtractor"),ffo=o(" (ViT model)"),mfo=l(),Lh=a("li"),_ne=a("strong"),gfo=o("vit_mae"),hfo=o(" \u2014 "),HP=a("a"),pfo=o("ViTFeatureExtractor"),_fo=o(" (ViTMAE model)"),ufo=l(),xh=a("li"),une=a("strong"),bfo=o("wav2vec2"),vfo=o(" \u2014 "),UP=a("a"),Ffo=o("Wav2Vec2FeatureExtractor"),Tfo=o(" (Wav2Vec2 model)"),Mfo=l(),$h=a("li"),bne=a("strong"),Efo=o("wav2vec2-conformer"),Cfo=o(" \u2014 "),JP=a("a"),wfo=o("Wav2Vec2FeatureExtractor"),Afo=o(" (Wav2Vec2-Conformer model)"),yfo=l(),kh=a("li"),vne=a("strong"),Lfo=o("yolos"),xfo=o(" \u2014 "),YP=a("a"),$fo=o("YolosFeatureExtractor"),kfo=o(" (YOLOS model)"),Sfo=l(),F(Sh.$$.fragment),Rfo=l(),F(Rh.$$.fragment),Bfo=l(),Bh=a("div"),F(NA.$$.fragment),Pfo=l(),Fne=a("p"),Ifo=o("Register a new feature extractor for this class."),$qe=l(),Mi=a("h2"),Ph=a("a"),Tne=a("span"),F(jA.$$.fragment),qfo=l(),Mne=a("span"),Nfo=o("AutoProcessor"),kqe=l(),yo=a("div"),F(DA.$$.fragment),jfo=l(),GA=a("p"),Dfo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),KP=a("a"),Gfo=o("AutoProcessor.from_pretrained()"),Ofo=o(" class method."),Vfo=l(),OA=a("p"),Xfo=o("This class cannot be instantiated directly using "),Ene=a("code"),zfo=o("__init__()"),Wfo=o(" (throws an error)."),Qfo=l(),Ue=a("div"),F(VA.$$.fragment),Hfo=l(),Cne=a("p"),Ufo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Jfo=l(),Ei=a("p"),Yfo=o("The processor class to instantiate is selected based on the "),wne=a("code"),Kfo=o("model_type"),Zfo=o(` property of the config object (either
passed as an argument or loaded from `),Ane=a("code"),emo=o("pretrained_model_name_or_path"),omo=o(" if possible):"),rmo=l(),pe=a("ul"),Ih=a("li"),yne=a("strong"),tmo=o("clip"),amo=o(" \u2014 "),ZP=a("a"),nmo=o("CLIPProcessor"),smo=o(" (CLIP model)"),lmo=l(),qh=a("li"),Lne=a("strong"),imo=o("flava"),dmo=o(" \u2014 "),xne=a("code"),cmo=o("FLAVAProcessor"),fmo=o(" (Flava model)"),mmo=l(),Nh=a("li"),$ne=a("strong"),gmo=o("layoutlmv2"),hmo=o(" \u2014 "),eI=a("a"),pmo=o("LayoutLMv2Processor"),_mo=o(" (LayoutLMv2 model)"),umo=l(),jh=a("li"),kne=a("strong"),bmo=o("layoutxlm"),vmo=o(" \u2014 "),oI=a("a"),Fmo=o("LayoutXLMProcessor"),Tmo=o(" (LayoutXLM model)"),Mmo=l(),Dh=a("li"),Sne=a("strong"),Emo=o("sew"),Cmo=o(" \u2014 "),rI=a("a"),wmo=o("Wav2Vec2Processor"),Amo=o(" (SEW model)"),ymo=l(),Gh=a("li"),Rne=a("strong"),Lmo=o("sew-d"),xmo=o(" \u2014 "),tI=a("a"),$mo=o("Wav2Vec2Processor"),kmo=o(" (SEW-D model)"),Smo=l(),Oh=a("li"),Bne=a("strong"),Rmo=o("speech_to_text"),Bmo=o(" \u2014 "),aI=a("a"),Pmo=o("Speech2TextProcessor"),Imo=o(" (Speech2Text model)"),qmo=l(),Vh=a("li"),Pne=a("strong"),Nmo=o("speech_to_text_2"),jmo=o(" \u2014 "),nI=a("a"),Dmo=o("Speech2Text2Processor"),Gmo=o(" (Speech2Text2 model)"),Omo=l(),Xh=a("li"),Ine=a("strong"),Vmo=o("trocr"),Xmo=o(" \u2014 "),sI=a("a"),zmo=o("TrOCRProcessor"),Wmo=o(" (TrOCR model)"),Qmo=l(),zh=a("li"),qne=a("strong"),Hmo=o("unispeech"),Umo=o(" \u2014 "),lI=a("a"),Jmo=o("Wav2Vec2Processor"),Ymo=o(" (UniSpeech model)"),Kmo=l(),Wh=a("li"),Nne=a("strong"),Zmo=o("unispeech-sat"),ego=o(" \u2014 "),iI=a("a"),ogo=o("Wav2Vec2Processor"),rgo=o(" (UniSpeechSat model)"),tgo=l(),Qh=a("li"),jne=a("strong"),ago=o("vilt"),ngo=o(" \u2014 "),dI=a("a"),sgo=o("ViltProcessor"),lgo=o(" (ViLT model)"),igo=l(),Hh=a("li"),Dne=a("strong"),dgo=o("vision-text-dual-encoder"),cgo=o(" \u2014 "),cI=a("a"),fgo=o("VisionTextDualEncoderProcessor"),mgo=o(" (VisionTextDualEncoder model)"),ggo=l(),Uh=a("li"),Gne=a("strong"),hgo=o("wav2vec2"),pgo=o(" \u2014 "),fI=a("a"),_go=o("Wav2Vec2Processor"),ugo=o(" (Wav2Vec2 model)"),bgo=l(),Jh=a("li"),One=a("strong"),vgo=o("wav2vec2-conformer"),Fgo=o(" \u2014 "),mI=a("a"),Tgo=o("Wav2Vec2Processor"),Mgo=o(" (Wav2Vec2-Conformer model)"),Ego=l(),Yh=a("li"),Vne=a("strong"),Cgo=o("wavlm"),wgo=o(" \u2014 "),gI=a("a"),Ago=o("Wav2Vec2Processor"),ygo=o(" (WavLM model)"),Lgo=l(),F(Kh.$$.fragment),xgo=l(),F(Zh.$$.fragment),$go=l(),ep=a("div"),F(XA.$$.fragment),kgo=l(),Xne=a("p"),Sgo=o("Register a new processor for this class."),Sqe=l(),Ci=a("h2"),op=a("a"),zne=a("span"),F(zA.$$.fragment),Rgo=l(),Wne=a("span"),Bgo=o("AutoModel"),Rqe=l(),Lo=a("div"),F(WA.$$.fragment),Pgo=l(),wi=a("p"),Igo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hI=a("a"),qgo=o("from_pretrained()"),Ngo=o(" class method or the "),pI=a("a"),jgo=o("from_config()"),Dgo=o(` class
method.`),Ggo=l(),QA=a("p"),Ogo=o("This class cannot be instantiated directly using "),Qne=a("code"),Vgo=o("__init__()"),Xgo=o(" (throws an error)."),zgo=l(),tt=a("div"),F(HA.$$.fragment),Wgo=l(),Hne=a("p"),Qgo=o("Instantiates one of the base model classes of the library from a configuration."),Hgo=l(),Ai=a("p"),Ugo=o(`Note:
Loading a model from its configuration file does `),Une=a("strong"),Jgo=o("not"),Ygo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_I=a("a"),Kgo=o("from_pretrained()"),Zgo=o(" to load the model weights."),eho=l(),F(rp.$$.fragment),oho=l(),Je=a("div"),F(UA.$$.fragment),rho=l(),Jne=a("p"),tho=o("Instantiate one of the base model classes of the library from a pretrained model."),aho=l(),La=a("p"),nho=o("The model class to instantiate is selected based on the "),Yne=a("code"),sho=o("model_type"),lho=o(` property of the config object (either
passed as an argument or loaded from `),Kne=a("code"),iho=o("pretrained_model_name_or_path"),dho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zne=a("code"),cho=o("pretrained_model_name_or_path"),fho=o(":"),mho=l(),x=a("ul"),tp=a("li"),ese=a("strong"),gho=o("albert"),hho=o(" \u2014 "),uI=a("a"),pho=o("AlbertModel"),_ho=o(" (ALBERT model)"),uho=l(),ap=a("li"),ose=a("strong"),bho=o("bart"),vho=o(" \u2014 "),bI=a("a"),Fho=o("BartModel"),Tho=o(" (BART model)"),Mho=l(),np=a("li"),rse=a("strong"),Eho=o("beit"),Cho=o(" \u2014 "),vI=a("a"),who=o("BeitModel"),Aho=o(" (BEiT model)"),yho=l(),sp=a("li"),tse=a("strong"),Lho=o("bert"),xho=o(" \u2014 "),FI=a("a"),$ho=o("BertModel"),kho=o(" (BERT model)"),Sho=l(),lp=a("li"),ase=a("strong"),Rho=o("bert-generation"),Bho=o(" \u2014 "),TI=a("a"),Pho=o("BertGenerationEncoder"),Iho=o(" (Bert Generation model)"),qho=l(),ip=a("li"),nse=a("strong"),Nho=o("big_bird"),jho=o(" \u2014 "),MI=a("a"),Dho=o("BigBirdModel"),Gho=o(" (BigBird model)"),Oho=l(),dp=a("li"),sse=a("strong"),Vho=o("bigbird_pegasus"),Xho=o(" \u2014 "),EI=a("a"),zho=o("BigBirdPegasusModel"),Who=o(" (BigBirdPegasus model)"),Qho=l(),cp=a("li"),lse=a("strong"),Hho=o("blenderbot"),Uho=o(" \u2014 "),CI=a("a"),Jho=o("BlenderbotModel"),Yho=o(" (Blenderbot model)"),Kho=l(),fp=a("li"),ise=a("strong"),Zho=o("blenderbot-small"),epo=o(" \u2014 "),wI=a("a"),opo=o("BlenderbotSmallModel"),rpo=o(" (BlenderbotSmall model)"),tpo=l(),mp=a("li"),dse=a("strong"),apo=o("bloom"),npo=o(" \u2014 "),AI=a("a"),spo=o("BloomModel"),lpo=o(" (BLOOM model)"),ipo=l(),gp=a("li"),cse=a("strong"),dpo=o("camembert"),cpo=o(" \u2014 "),yI=a("a"),fpo=o("CamembertModel"),mpo=o(" (CamemBERT model)"),gpo=l(),hp=a("li"),fse=a("strong"),hpo=o("canine"),ppo=o(" \u2014 "),LI=a("a"),_po=o("CanineModel"),upo=o(" (Canine model)"),bpo=l(),pp=a("li"),mse=a("strong"),vpo=o("clip"),Fpo=o(" \u2014 "),xI=a("a"),Tpo=o("CLIPModel"),Mpo=o(" (CLIP model)"),Epo=l(),_p=a("li"),gse=a("strong"),Cpo=o("convbert"),wpo=o(" \u2014 "),$I=a("a"),Apo=o("ConvBertModel"),ypo=o(" (ConvBERT model)"),Lpo=l(),up=a("li"),hse=a("strong"),xpo=o("convnext"),$po=o(" \u2014 "),kI=a("a"),kpo=o("ConvNextModel"),Spo=o(" (ConvNext model)"),Rpo=l(),bp=a("li"),pse=a("strong"),Bpo=o("ctrl"),Ppo=o(" \u2014 "),SI=a("a"),Ipo=o("CTRLModel"),qpo=o(" (CTRL model)"),Npo=l(),vp=a("li"),_se=a("strong"),jpo=o("cvt"),Dpo=o(" \u2014 "),RI=a("a"),Gpo=o("CvtModel"),Opo=o(" (CvT model)"),Vpo=l(),Fp=a("li"),use=a("strong"),Xpo=o("data2vec-audio"),zpo=o(" \u2014 "),BI=a("a"),Wpo=o("Data2VecAudioModel"),Qpo=o(" (Data2VecAudio model)"),Hpo=l(),Tp=a("li"),bse=a("strong"),Upo=o("data2vec-text"),Jpo=o(" \u2014 "),PI=a("a"),Ypo=o("Data2VecTextModel"),Kpo=o(" (Data2VecText model)"),Zpo=l(),Mp=a("li"),vse=a("strong"),e_o=o("data2vec-vision"),o_o=o(" \u2014 "),II=a("a"),r_o=o("Data2VecVisionModel"),t_o=o(" (Data2VecVision model)"),a_o=l(),Ep=a("li"),Fse=a("strong"),n_o=o("deberta"),s_o=o(" \u2014 "),qI=a("a"),l_o=o("DebertaModel"),i_o=o(" (DeBERTa model)"),d_o=l(),Cp=a("li"),Tse=a("strong"),c_o=o("deberta-v2"),f_o=o(" \u2014 "),NI=a("a"),m_o=o("DebertaV2Model"),g_o=o(" (DeBERTa-v2 model)"),h_o=l(),wp=a("li"),Mse=a("strong"),p_o=o("decision_transformer"),__o=o(" \u2014 "),jI=a("a"),u_o=o("DecisionTransformerModel"),b_o=o(" (Decision Transformer model)"),v_o=l(),Ap=a("li"),Ese=a("strong"),F_o=o("deit"),T_o=o(" \u2014 "),DI=a("a"),M_o=o("DeiTModel"),E_o=o(" (DeiT model)"),C_o=l(),yp=a("li"),Cse=a("strong"),w_o=o("detr"),A_o=o(" \u2014 "),GI=a("a"),y_o=o("DetrModel"),L_o=o(" (DETR model)"),x_o=l(),Lp=a("li"),wse=a("strong"),$_o=o("distilbert"),k_o=o(" \u2014 "),OI=a("a"),S_o=o("DistilBertModel"),R_o=o(" (DistilBERT model)"),B_o=l(),xp=a("li"),Ase=a("strong"),P_o=o("dpr"),I_o=o(" \u2014 "),VI=a("a"),q_o=o("DPRQuestionEncoder"),N_o=o(" (DPR model)"),j_o=l(),$p=a("li"),yse=a("strong"),D_o=o("dpt"),G_o=o(" \u2014 "),XI=a("a"),O_o=o("DPTModel"),V_o=o(" (DPT model)"),X_o=l(),kp=a("li"),Lse=a("strong"),z_o=o("electra"),W_o=o(" \u2014 "),zI=a("a"),Q_o=o("ElectraModel"),H_o=o(" (ELECTRA model)"),U_o=l(),Sp=a("li"),xse=a("strong"),J_o=o("flaubert"),Y_o=o(" \u2014 "),WI=a("a"),K_o=o("FlaubertModel"),Z_o=o(" (FlauBERT model)"),euo=l(),Rp=a("li"),$se=a("strong"),ouo=o("flava"),ruo=o(" \u2014 "),QI=a("a"),tuo=o("FlavaModel"),auo=o(" (Flava model)"),nuo=l(),Bp=a("li"),kse=a("strong"),suo=o("fnet"),luo=o(" \u2014 "),HI=a("a"),iuo=o("FNetModel"),duo=o(" (FNet model)"),cuo=l(),Pp=a("li"),Sse=a("strong"),fuo=o("fsmt"),muo=o(" \u2014 "),UI=a("a"),guo=o("FSMTModel"),huo=o(" (FairSeq Machine-Translation model)"),puo=l(),Rs=a("li"),Rse=a("strong"),_uo=o("funnel"),uuo=o(" \u2014 "),JI=a("a"),buo=o("FunnelModel"),vuo=o(" or "),YI=a("a"),Fuo=o("FunnelBaseModel"),Tuo=o(" (Funnel Transformer model)"),Muo=l(),Ip=a("li"),Bse=a("strong"),Euo=o("glpn"),Cuo=o(" \u2014 "),KI=a("a"),wuo=o("GLPNModel"),Auo=o(" (GLPN model)"),yuo=l(),qp=a("li"),Pse=a("strong"),Luo=o("gpt2"),xuo=o(" \u2014 "),ZI=a("a"),$uo=o("GPT2Model"),kuo=o(" (OpenAI GPT-2 model)"),Suo=l(),Np=a("li"),Ise=a("strong"),Ruo=o("gpt_neo"),Buo=o(" \u2014 "),eq=a("a"),Puo=o("GPTNeoModel"),Iuo=o(" (GPT Neo model)"),quo=l(),jp=a("li"),qse=a("strong"),Nuo=o("gptj"),juo=o(" \u2014 "),oq=a("a"),Duo=o("GPTJModel"),Guo=o(" (GPT-J model)"),Ouo=l(),Dp=a("li"),Nse=a("strong"),Vuo=o("hubert"),Xuo=o(" \u2014 "),rq=a("a"),zuo=o("HubertModel"),Wuo=o(" (Hubert model)"),Quo=l(),Gp=a("li"),jse=a("strong"),Huo=o("ibert"),Uuo=o(" \u2014 "),tq=a("a"),Juo=o("IBertModel"),Yuo=o(" (I-BERT model)"),Kuo=l(),Op=a("li"),Dse=a("strong"),Zuo=o("imagegpt"),e2o=o(" \u2014 "),aq=a("a"),o2o=o("ImageGPTModel"),r2o=o(" (ImageGPT model)"),t2o=l(),Vp=a("li"),Gse=a("strong"),a2o=o("layoutlm"),n2o=o(" \u2014 "),nq=a("a"),s2o=o("LayoutLMModel"),l2o=o(" (LayoutLM model)"),i2o=l(),Xp=a("li"),Ose=a("strong"),d2o=o("layoutlmv2"),c2o=o(" \u2014 "),sq=a("a"),f2o=o("LayoutLMv2Model"),m2o=o(" (LayoutLMv2 model)"),g2o=l(),zp=a("li"),Vse=a("strong"),h2o=o("led"),p2o=o(" \u2014 "),lq=a("a"),_2o=o("LEDModel"),u2o=o(" (LED model)"),b2o=l(),Wp=a("li"),Xse=a("strong"),v2o=o("longformer"),F2o=o(" \u2014 "),iq=a("a"),T2o=o("LongformerModel"),M2o=o(" (Longformer model)"),E2o=l(),Qp=a("li"),zse=a("strong"),C2o=o("luke"),w2o=o(" \u2014 "),dq=a("a"),A2o=o("LukeModel"),y2o=o(" (LUKE model)"),L2o=l(),Hp=a("li"),Wse=a("strong"),x2o=o("lxmert"),$2o=o(" \u2014 "),cq=a("a"),k2o=o("LxmertModel"),S2o=o(" (LXMERT model)"),R2o=l(),Up=a("li"),Qse=a("strong"),B2o=o("m2m_100"),P2o=o(" \u2014 "),fq=a("a"),I2o=o("M2M100Model"),q2o=o(" (M2M100 model)"),N2o=l(),Jp=a("li"),Hse=a("strong"),j2o=o("marian"),D2o=o(" \u2014 "),mq=a("a"),G2o=o("MarianModel"),O2o=o(" (Marian model)"),V2o=l(),Yp=a("li"),Use=a("strong"),X2o=o("maskformer"),z2o=o(" \u2014 "),gq=a("a"),W2o=o("MaskFormerModel"),Q2o=o(" (MaskFormer model)"),H2o=l(),Kp=a("li"),Jse=a("strong"),U2o=o("mbart"),J2o=o(" \u2014 "),hq=a("a"),Y2o=o("MBartModel"),K2o=o(" (mBART model)"),Z2o=l(),Zp=a("li"),Yse=a("strong"),e1o=o("megatron-bert"),o1o=o(" \u2014 "),pq=a("a"),r1o=o("MegatronBertModel"),t1o=o(" (MegatronBert model)"),a1o=l(),e_=a("li"),Kse=a("strong"),n1o=o("mobilebert"),s1o=o(" \u2014 "),_q=a("a"),l1o=o("MobileBertModel"),i1o=o(" (MobileBERT model)"),d1o=l(),o_=a("li"),Zse=a("strong"),c1o=o("mpnet"),f1o=o(" \u2014 "),uq=a("a"),m1o=o("MPNetModel"),g1o=o(" (MPNet model)"),h1o=l(),r_=a("li"),ele=a("strong"),p1o=o("mt5"),_1o=o(" \u2014 "),bq=a("a"),u1o=o("MT5Model"),b1o=o(" (mT5 model)"),v1o=l(),t_=a("li"),ole=a("strong"),F1o=o("nystromformer"),T1o=o(" \u2014 "),vq=a("a"),M1o=o("NystromformerModel"),E1o=o(" (Nystromformer model)"),C1o=l(),a_=a("li"),rle=a("strong"),w1o=o("openai-gpt"),A1o=o(" \u2014 "),Fq=a("a"),y1o=o("OpenAIGPTModel"),L1o=o(" (OpenAI GPT model)"),x1o=l(),n_=a("li"),tle=a("strong"),$1o=o("opt"),k1o=o(" \u2014 "),Tq=a("a"),S1o=o("OPTModel"),R1o=o(" (OPT model)"),B1o=l(),s_=a("li"),ale=a("strong"),P1o=o("pegasus"),I1o=o(" \u2014 "),Mq=a("a"),q1o=o("PegasusModel"),N1o=o(" (Pegasus model)"),j1o=l(),l_=a("li"),nle=a("strong"),D1o=o("perceiver"),G1o=o(" \u2014 "),Eq=a("a"),O1o=o("PerceiverModel"),V1o=o(" (Perceiver model)"),X1o=l(),i_=a("li"),sle=a("strong"),z1o=o("plbart"),W1o=o(" \u2014 "),Cq=a("a"),Q1o=o("PLBartModel"),H1o=o(" (PLBart model)"),U1o=l(),d_=a("li"),lle=a("strong"),J1o=o("poolformer"),Y1o=o(" \u2014 "),wq=a("a"),K1o=o("PoolFormerModel"),Z1o=o(" (PoolFormer model)"),ebo=l(),c_=a("li"),ile=a("strong"),obo=o("prophetnet"),rbo=o(" \u2014 "),Aq=a("a"),tbo=o("ProphetNetModel"),abo=o(" (ProphetNet model)"),nbo=l(),f_=a("li"),dle=a("strong"),sbo=o("qdqbert"),lbo=o(" \u2014 "),yq=a("a"),ibo=o("QDQBertModel"),dbo=o(" (QDQBert model)"),cbo=l(),m_=a("li"),cle=a("strong"),fbo=o("reformer"),mbo=o(" \u2014 "),Lq=a("a"),gbo=o("ReformerModel"),hbo=o(" (Reformer model)"),pbo=l(),g_=a("li"),fle=a("strong"),_bo=o("regnet"),ubo=o(" \u2014 "),xq=a("a"),bbo=o("RegNetModel"),vbo=o(" (RegNet model)"),Fbo=l(),h_=a("li"),mle=a("strong"),Tbo=o("rembert"),Mbo=o(" \u2014 "),$q=a("a"),Ebo=o("RemBertModel"),Cbo=o(" (RemBERT model)"),wbo=l(),p_=a("li"),gle=a("strong"),Abo=o("resnet"),ybo=o(" \u2014 "),kq=a("a"),Lbo=o("ResNetModel"),xbo=o(" (ResNet model)"),$bo=l(),__=a("li"),hle=a("strong"),kbo=o("retribert"),Sbo=o(" \u2014 "),Sq=a("a"),Rbo=o("RetriBertModel"),Bbo=o(" (RetriBERT model)"),Pbo=l(),u_=a("li"),ple=a("strong"),Ibo=o("roberta"),qbo=o(" \u2014 "),Rq=a("a"),Nbo=o("RobertaModel"),jbo=o(" (RoBERTa model)"),Dbo=l(),b_=a("li"),_le=a("strong"),Gbo=o("roformer"),Obo=o(" \u2014 "),Bq=a("a"),Vbo=o("RoFormerModel"),Xbo=o(" (RoFormer model)"),zbo=l(),v_=a("li"),ule=a("strong"),Wbo=o("segformer"),Qbo=o(" \u2014 "),Pq=a("a"),Hbo=o("SegformerModel"),Ubo=o(" (SegFormer model)"),Jbo=l(),F_=a("li"),ble=a("strong"),Ybo=o("sew"),Kbo=o(" \u2014 "),Iq=a("a"),Zbo=o("SEWModel"),evo=o(" (SEW model)"),ovo=l(),T_=a("li"),vle=a("strong"),rvo=o("sew-d"),tvo=o(" \u2014 "),qq=a("a"),avo=o("SEWDModel"),nvo=o(" (SEW-D model)"),svo=l(),M_=a("li"),Fle=a("strong"),lvo=o("speech_to_text"),ivo=o(" \u2014 "),Nq=a("a"),dvo=o("Speech2TextModel"),cvo=o(" (Speech2Text model)"),fvo=l(),E_=a("li"),Tle=a("strong"),mvo=o("splinter"),gvo=o(" \u2014 "),jq=a("a"),hvo=o("SplinterModel"),pvo=o(" (Splinter model)"),_vo=l(),C_=a("li"),Mle=a("strong"),uvo=o("squeezebert"),bvo=o(" \u2014 "),Dq=a("a"),vvo=o("SqueezeBertModel"),Fvo=o(" (SqueezeBERT model)"),Tvo=l(),w_=a("li"),Ele=a("strong"),Mvo=o("swin"),Evo=o(" \u2014 "),Gq=a("a"),Cvo=o("SwinModel"),wvo=o(" (Swin model)"),Avo=l(),A_=a("li"),Cle=a("strong"),yvo=o("t5"),Lvo=o(" \u2014 "),Oq=a("a"),xvo=o("T5Model"),$vo=o(" (T5 model)"),kvo=l(),y_=a("li"),wle=a("strong"),Svo=o("tapas"),Rvo=o(" \u2014 "),Vq=a("a"),Bvo=o("TapasModel"),Pvo=o(" (TAPAS model)"),Ivo=l(),L_=a("li"),Ale=a("strong"),qvo=o("trajectory_transformer"),Nvo=o(" \u2014 "),Xq=a("a"),jvo=o("TrajectoryTransformerModel"),Dvo=o(" (Trajectory Transformer model)"),Gvo=l(),x_=a("li"),yle=a("strong"),Ovo=o("transfo-xl"),Vvo=o(" \u2014 "),zq=a("a"),Xvo=o("TransfoXLModel"),zvo=o(" (Transformer-XL model)"),Wvo=l(),$_=a("li"),Lle=a("strong"),Qvo=o("unispeech"),Hvo=o(" \u2014 "),Wq=a("a"),Uvo=o("UniSpeechModel"),Jvo=o(" (UniSpeech model)"),Yvo=l(),k_=a("li"),xle=a("strong"),Kvo=o("unispeech-sat"),Zvo=o(" \u2014 "),Qq=a("a"),eFo=o("UniSpeechSatModel"),oFo=o(" (UniSpeechSat model)"),rFo=l(),S_=a("li"),$le=a("strong"),tFo=o("van"),aFo=o(" \u2014 "),Hq=a("a"),nFo=o("VanModel"),sFo=o(" (VAN model)"),lFo=l(),R_=a("li"),kle=a("strong"),iFo=o("vilt"),dFo=o(" \u2014 "),Uq=a("a"),cFo=o("ViltModel"),fFo=o(" (ViLT model)"),mFo=l(),B_=a("li"),Sle=a("strong"),gFo=o("vision-text-dual-encoder"),hFo=o(" \u2014 "),Jq=a("a"),pFo=o("VisionTextDualEncoderModel"),_Fo=o(" (VisionTextDualEncoder model)"),uFo=l(),P_=a("li"),Rle=a("strong"),bFo=o("visual_bert"),vFo=o(" \u2014 "),Yq=a("a"),FFo=o("VisualBertModel"),TFo=o(" (VisualBert model)"),MFo=l(),I_=a("li"),Ble=a("strong"),EFo=o("vit"),CFo=o(" \u2014 "),Kq=a("a"),wFo=o("ViTModel"),AFo=o(" (ViT model)"),yFo=l(),q_=a("li"),Ple=a("strong"),LFo=o("vit_mae"),xFo=o(" \u2014 "),Zq=a("a"),$Fo=o("ViTMAEModel"),kFo=o(" (ViTMAE model)"),SFo=l(),N_=a("li"),Ile=a("strong"),RFo=o("wav2vec2"),BFo=o(" \u2014 "),eN=a("a"),PFo=o("Wav2Vec2Model"),IFo=o(" (Wav2Vec2 model)"),qFo=l(),j_=a("li"),qle=a("strong"),NFo=o("wav2vec2-conformer"),jFo=o(" \u2014 "),oN=a("a"),DFo=o("Wav2Vec2ConformerModel"),GFo=o(" (Wav2Vec2-Conformer model)"),OFo=l(),D_=a("li"),Nle=a("strong"),VFo=o("wavlm"),XFo=o(" \u2014 "),rN=a("a"),zFo=o("WavLMModel"),WFo=o(" (WavLM model)"),QFo=l(),G_=a("li"),jle=a("strong"),HFo=o("xglm"),UFo=o(" \u2014 "),tN=a("a"),JFo=o("XGLMModel"),YFo=o(" (XGLM model)"),KFo=l(),O_=a("li"),Dle=a("strong"),ZFo=o("xlm"),e0o=o(" \u2014 "),aN=a("a"),o0o=o("XLMModel"),r0o=o(" (XLM model)"),t0o=l(),V_=a("li"),Gle=a("strong"),a0o=o("xlm-prophetnet"),n0o=o(" \u2014 "),nN=a("a"),s0o=o("XLMProphetNetModel"),l0o=o(" (XLMProphetNet model)"),i0o=l(),X_=a("li"),Ole=a("strong"),d0o=o("xlm-roberta"),c0o=o(" \u2014 "),sN=a("a"),f0o=o("XLMRobertaModel"),m0o=o(" (XLM-RoBERTa model)"),g0o=l(),z_=a("li"),Vle=a("strong"),h0o=o("xlm-roberta-xl"),p0o=o(" \u2014 "),lN=a("a"),_0o=o("XLMRobertaXLModel"),u0o=o(" (XLM-RoBERTa-XL model)"),b0o=l(),W_=a("li"),Xle=a("strong"),v0o=o("xlnet"),F0o=o(" \u2014 "),iN=a("a"),T0o=o("XLNetModel"),M0o=o(" (XLNet model)"),E0o=l(),Q_=a("li"),zle=a("strong"),C0o=o("yolos"),w0o=o(" \u2014 "),dN=a("a"),A0o=o("YolosModel"),y0o=o(" (YOLOS model)"),L0o=l(),H_=a("li"),Wle=a("strong"),x0o=o("yoso"),$0o=o(" \u2014 "),cN=a("a"),k0o=o("YosoModel"),S0o=o(" (YOSO model)"),R0o=l(),U_=a("p"),B0o=o("The model is set in evaluation mode by default using "),Qle=a("code"),P0o=o("model.eval()"),I0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hle=a("code"),q0o=o("model.train()"),N0o=l(),F(J_.$$.fragment),Bqe=l(),yi=a("h2"),Y_=a("a"),Ule=a("span"),F(JA.$$.fragment),j0o=l(),Jle=a("span"),D0o=o("AutoModelForPreTraining"),Pqe=l(),xo=a("div"),F(YA.$$.fragment),G0o=l(),Li=a("p"),O0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fN=a("a"),V0o=o("from_pretrained()"),X0o=o(" class method or the "),mN=a("a"),z0o=o("from_config()"),W0o=o(` class
method.`),Q0o=l(),KA=a("p"),H0o=o("This class cannot be instantiated directly using "),Yle=a("code"),U0o=o("__init__()"),J0o=o(" (throws an error)."),Y0o=l(),at=a("div"),F(ZA.$$.fragment),K0o=l(),Kle=a("p"),Z0o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),eTo=l(),xi=a("p"),oTo=o(`Note:
Loading a model from its configuration file does `),Zle=a("strong"),rTo=o("not"),tTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gN=a("a"),aTo=o("from_pretrained()"),nTo=o(" to load the model weights."),sTo=l(),F(K_.$$.fragment),lTo=l(),Ye=a("div"),F(ey.$$.fragment),iTo=l(),eie=a("p"),dTo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cTo=l(),xa=a("p"),fTo=o("The model class to instantiate is selected based on the "),oie=a("code"),mTo=o("model_type"),gTo=o(` property of the config object (either
passed as an argument or loaded from `),rie=a("code"),hTo=o("pretrained_model_name_or_path"),pTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tie=a("code"),_To=o("pretrained_model_name_or_path"),uTo=o(":"),bTo=l(),G=a("ul"),Z_=a("li"),aie=a("strong"),vTo=o("albert"),FTo=o(" \u2014 "),hN=a("a"),TTo=o("AlbertForPreTraining"),MTo=o(" (ALBERT model)"),ETo=l(),eu=a("li"),nie=a("strong"),CTo=o("bart"),wTo=o(" \u2014 "),pN=a("a"),ATo=o("BartForConditionalGeneration"),yTo=o(" (BART model)"),LTo=l(),ou=a("li"),sie=a("strong"),xTo=o("bert"),$To=o(" \u2014 "),_N=a("a"),kTo=o("BertForPreTraining"),STo=o(" (BERT model)"),RTo=l(),ru=a("li"),lie=a("strong"),BTo=o("big_bird"),PTo=o(" \u2014 "),uN=a("a"),ITo=o("BigBirdForPreTraining"),qTo=o(" (BigBird model)"),NTo=l(),tu=a("li"),iie=a("strong"),jTo=o("bloom"),DTo=o(" \u2014 "),bN=a("a"),GTo=o("BloomForCausalLM"),OTo=o(" (BLOOM model)"),VTo=l(),au=a("li"),die=a("strong"),XTo=o("camembert"),zTo=o(" \u2014 "),vN=a("a"),WTo=o("CamembertForMaskedLM"),QTo=o(" (CamemBERT model)"),HTo=l(),nu=a("li"),cie=a("strong"),UTo=o("ctrl"),JTo=o(" \u2014 "),FN=a("a"),YTo=o("CTRLLMHeadModel"),KTo=o(" (CTRL model)"),ZTo=l(),su=a("li"),fie=a("strong"),e7o=o("data2vec-text"),o7o=o(" \u2014 "),TN=a("a"),r7o=o("Data2VecTextForMaskedLM"),t7o=o(" (Data2VecText model)"),a7o=l(),lu=a("li"),mie=a("strong"),n7o=o("deberta"),s7o=o(" \u2014 "),MN=a("a"),l7o=o("DebertaForMaskedLM"),i7o=o(" (DeBERTa model)"),d7o=l(),iu=a("li"),gie=a("strong"),c7o=o("deberta-v2"),f7o=o(" \u2014 "),EN=a("a"),m7o=o("DebertaV2ForMaskedLM"),g7o=o(" (DeBERTa-v2 model)"),h7o=l(),du=a("li"),hie=a("strong"),p7o=o("distilbert"),_7o=o(" \u2014 "),CN=a("a"),u7o=o("DistilBertForMaskedLM"),b7o=o(" (DistilBERT model)"),v7o=l(),cu=a("li"),pie=a("strong"),F7o=o("electra"),T7o=o(" \u2014 "),wN=a("a"),M7o=o("ElectraForPreTraining"),E7o=o(" (ELECTRA model)"),C7o=l(),fu=a("li"),_ie=a("strong"),w7o=o("flaubert"),A7o=o(" \u2014 "),AN=a("a"),y7o=o("FlaubertWithLMHeadModel"),L7o=o(" (FlauBERT model)"),x7o=l(),mu=a("li"),uie=a("strong"),$7o=o("flava"),k7o=o(" \u2014 "),yN=a("a"),S7o=o("FlavaForPreTraining"),R7o=o(" (Flava model)"),B7o=l(),gu=a("li"),bie=a("strong"),P7o=o("fnet"),I7o=o(" \u2014 "),LN=a("a"),q7o=o("FNetForPreTraining"),N7o=o(" (FNet model)"),j7o=l(),hu=a("li"),vie=a("strong"),D7o=o("fsmt"),G7o=o(" \u2014 "),xN=a("a"),O7o=o("FSMTForConditionalGeneration"),V7o=o(" (FairSeq Machine-Translation model)"),X7o=l(),pu=a("li"),Fie=a("strong"),z7o=o("funnel"),W7o=o(" \u2014 "),$N=a("a"),Q7o=o("FunnelForPreTraining"),H7o=o(" (Funnel Transformer model)"),U7o=l(),_u=a("li"),Tie=a("strong"),J7o=o("gpt2"),Y7o=o(" \u2014 "),kN=a("a"),K7o=o("GPT2LMHeadModel"),Z7o=o(" (OpenAI GPT-2 model)"),eMo=l(),uu=a("li"),Mie=a("strong"),oMo=o("ibert"),rMo=o(" \u2014 "),SN=a("a"),tMo=o("IBertForMaskedLM"),aMo=o(" (I-BERT model)"),nMo=l(),bu=a("li"),Eie=a("strong"),sMo=o("layoutlm"),lMo=o(" \u2014 "),RN=a("a"),iMo=o("LayoutLMForMaskedLM"),dMo=o(" (LayoutLM model)"),cMo=l(),vu=a("li"),Cie=a("strong"),fMo=o("longformer"),mMo=o(" \u2014 "),BN=a("a"),gMo=o("LongformerForMaskedLM"),hMo=o(" (Longformer model)"),pMo=l(),Fu=a("li"),wie=a("strong"),_Mo=o("lxmert"),uMo=o(" \u2014 "),PN=a("a"),bMo=o("LxmertForPreTraining"),vMo=o(" (LXMERT model)"),FMo=l(),Tu=a("li"),Aie=a("strong"),TMo=o("megatron-bert"),MMo=o(" \u2014 "),IN=a("a"),EMo=o("MegatronBertForPreTraining"),CMo=o(" (MegatronBert model)"),wMo=l(),Mu=a("li"),yie=a("strong"),AMo=o("mobilebert"),yMo=o(" \u2014 "),qN=a("a"),LMo=o("MobileBertForPreTraining"),xMo=o(" (MobileBERT model)"),$Mo=l(),Eu=a("li"),Lie=a("strong"),kMo=o("mpnet"),SMo=o(" \u2014 "),NN=a("a"),RMo=o("MPNetForMaskedLM"),BMo=o(" (MPNet model)"),PMo=l(),Cu=a("li"),xie=a("strong"),IMo=o("openai-gpt"),qMo=o(" \u2014 "),jN=a("a"),NMo=o("OpenAIGPTLMHeadModel"),jMo=o(" (OpenAI GPT model)"),DMo=l(),wu=a("li"),$ie=a("strong"),GMo=o("retribert"),OMo=o(" \u2014 "),DN=a("a"),VMo=o("RetriBertModel"),XMo=o(" (RetriBERT model)"),zMo=l(),Au=a("li"),kie=a("strong"),WMo=o("roberta"),QMo=o(" \u2014 "),GN=a("a"),HMo=o("RobertaForMaskedLM"),UMo=o(" (RoBERTa model)"),JMo=l(),yu=a("li"),Sie=a("strong"),YMo=o("splinter"),KMo=o(" \u2014 "),ON=a("a"),ZMo=o("SplinterForPreTraining"),e4o=o(" (Splinter model)"),o4o=l(),Lu=a("li"),Rie=a("strong"),r4o=o("squeezebert"),t4o=o(" \u2014 "),VN=a("a"),a4o=o("SqueezeBertForMaskedLM"),n4o=o(" (SqueezeBERT model)"),s4o=l(),xu=a("li"),Bie=a("strong"),l4o=o("t5"),i4o=o(" \u2014 "),XN=a("a"),d4o=o("T5ForConditionalGeneration"),c4o=o(" (T5 model)"),f4o=l(),$u=a("li"),Pie=a("strong"),m4o=o("tapas"),g4o=o(" \u2014 "),zN=a("a"),h4o=o("TapasForMaskedLM"),p4o=o(" (TAPAS model)"),_4o=l(),ku=a("li"),Iie=a("strong"),u4o=o("transfo-xl"),b4o=o(" \u2014 "),WN=a("a"),v4o=o("TransfoXLLMHeadModel"),F4o=o(" (Transformer-XL model)"),T4o=l(),Su=a("li"),qie=a("strong"),M4o=o("unispeech"),E4o=o(" \u2014 "),QN=a("a"),C4o=o("UniSpeechForPreTraining"),w4o=o(" (UniSpeech model)"),A4o=l(),Ru=a("li"),Nie=a("strong"),y4o=o("unispeech-sat"),L4o=o(" \u2014 "),HN=a("a"),x4o=o("UniSpeechSatForPreTraining"),$4o=o(" (UniSpeechSat model)"),k4o=l(),Bu=a("li"),jie=a("strong"),S4o=o("visual_bert"),R4o=o(" \u2014 "),UN=a("a"),B4o=o("VisualBertForPreTraining"),P4o=o(" (VisualBert model)"),I4o=l(),Pu=a("li"),Die=a("strong"),q4o=o("vit_mae"),N4o=o(" \u2014 "),JN=a("a"),j4o=o("ViTMAEForPreTraining"),D4o=o(" (ViTMAE model)"),G4o=l(),Iu=a("li"),Gie=a("strong"),O4o=o("wav2vec2"),V4o=o(" \u2014 "),YN=a("a"),X4o=o("Wav2Vec2ForPreTraining"),z4o=o(" (Wav2Vec2 model)"),W4o=l(),qu=a("li"),Oie=a("strong"),Q4o=o("wav2vec2-conformer"),H4o=o(" \u2014 "),KN=a("a"),U4o=o("Wav2Vec2ConformerForPreTraining"),J4o=o(" (Wav2Vec2-Conformer model)"),Y4o=l(),Nu=a("li"),Vie=a("strong"),K4o=o("xlm"),Z4o=o(" \u2014 "),ZN=a("a"),eEo=o("XLMWithLMHeadModel"),oEo=o(" (XLM model)"),rEo=l(),ju=a("li"),Xie=a("strong"),tEo=o("xlm-roberta"),aEo=o(" \u2014 "),ej=a("a"),nEo=o("XLMRobertaForMaskedLM"),sEo=o(" (XLM-RoBERTa model)"),lEo=l(),Du=a("li"),zie=a("strong"),iEo=o("xlm-roberta-xl"),dEo=o(" \u2014 "),oj=a("a"),cEo=o("XLMRobertaXLForMaskedLM"),fEo=o(" (XLM-RoBERTa-XL model)"),mEo=l(),Gu=a("li"),Wie=a("strong"),gEo=o("xlnet"),hEo=o(" \u2014 "),rj=a("a"),pEo=o("XLNetLMHeadModel"),_Eo=o(" (XLNet model)"),uEo=l(),Ou=a("p"),bEo=o("The model is set in evaluation mode by default using "),Qie=a("code"),vEo=o("model.eval()"),FEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hie=a("code"),TEo=o("model.train()"),MEo=l(),F(Vu.$$.fragment),Iqe=l(),$i=a("h2"),Xu=a("a"),Uie=a("span"),F(oy.$$.fragment),EEo=l(),Jie=a("span"),CEo=o("AutoModelForCausalLM"),qqe=l(),$o=a("div"),F(ry.$$.fragment),wEo=l(),ki=a("p"),AEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tj=a("a"),yEo=o("from_pretrained()"),LEo=o(" class method or the "),aj=a("a"),xEo=o("from_config()"),$Eo=o(` class
method.`),kEo=l(),ty=a("p"),SEo=o("This class cannot be instantiated directly using "),Yie=a("code"),REo=o("__init__()"),BEo=o(" (throws an error)."),PEo=l(),nt=a("div"),F(ay.$$.fragment),IEo=l(),Kie=a("p"),qEo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),NEo=l(),Si=a("p"),jEo=o(`Note:
Loading a model from its configuration file does `),Zie=a("strong"),DEo=o("not"),GEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nj=a("a"),OEo=o("from_pretrained()"),VEo=o(" to load the model weights."),XEo=l(),F(zu.$$.fragment),zEo=l(),Ke=a("div"),F(ny.$$.fragment),WEo=l(),ede=a("p"),QEo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),HEo=l(),$a=a("p"),UEo=o("The model class to instantiate is selected based on the "),ode=a("code"),JEo=o("model_type"),YEo=o(` property of the config object (either
passed as an argument or loaded from `),rde=a("code"),KEo=o("pretrained_model_name_or_path"),ZEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tde=a("code"),eCo=o("pretrained_model_name_or_path"),oCo=o(":"),rCo=l(),z=a("ul"),Wu=a("li"),ade=a("strong"),tCo=o("bart"),aCo=o(" \u2014 "),sj=a("a"),nCo=o("BartForCausalLM"),sCo=o(" (BART model)"),lCo=l(),Qu=a("li"),nde=a("strong"),iCo=o("bert"),dCo=o(" \u2014 "),lj=a("a"),cCo=o("BertLMHeadModel"),fCo=o(" (BERT model)"),mCo=l(),Hu=a("li"),sde=a("strong"),gCo=o("bert-generation"),hCo=o(" \u2014 "),ij=a("a"),pCo=o("BertGenerationDecoder"),_Co=o(" (Bert Generation model)"),uCo=l(),Uu=a("li"),lde=a("strong"),bCo=o("big_bird"),vCo=o(" \u2014 "),dj=a("a"),FCo=o("BigBirdForCausalLM"),TCo=o(" (BigBird model)"),MCo=l(),Ju=a("li"),ide=a("strong"),ECo=o("bigbird_pegasus"),CCo=o(" \u2014 "),cj=a("a"),wCo=o("BigBirdPegasusForCausalLM"),ACo=o(" (BigBirdPegasus model)"),yCo=l(),Yu=a("li"),dde=a("strong"),LCo=o("blenderbot"),xCo=o(" \u2014 "),fj=a("a"),$Co=o("BlenderbotForCausalLM"),kCo=o(" (Blenderbot model)"),SCo=l(),Ku=a("li"),cde=a("strong"),RCo=o("blenderbot-small"),BCo=o(" \u2014 "),mj=a("a"),PCo=o("BlenderbotSmallForCausalLM"),ICo=o(" (BlenderbotSmall model)"),qCo=l(),Zu=a("li"),fde=a("strong"),NCo=o("bloom"),jCo=o(" \u2014 "),gj=a("a"),DCo=o("BloomForCausalLM"),GCo=o(" (BLOOM model)"),OCo=l(),e2=a("li"),mde=a("strong"),VCo=o("camembert"),XCo=o(" \u2014 "),hj=a("a"),zCo=o("CamembertForCausalLM"),WCo=o(" (CamemBERT model)"),QCo=l(),o2=a("li"),gde=a("strong"),HCo=o("ctrl"),UCo=o(" \u2014 "),pj=a("a"),JCo=o("CTRLLMHeadModel"),YCo=o(" (CTRL model)"),KCo=l(),r2=a("li"),hde=a("strong"),ZCo=o("data2vec-text"),e5o=o(" \u2014 "),_j=a("a"),o5o=o("Data2VecTextForCausalLM"),r5o=o(" (Data2VecText model)"),t5o=l(),t2=a("li"),pde=a("strong"),a5o=o("electra"),n5o=o(" \u2014 "),uj=a("a"),s5o=o("ElectraForCausalLM"),l5o=o(" (ELECTRA model)"),i5o=l(),a2=a("li"),_de=a("strong"),d5o=o("gpt2"),c5o=o(" \u2014 "),bj=a("a"),f5o=o("GPT2LMHeadModel"),m5o=o(" (OpenAI GPT-2 model)"),g5o=l(),n2=a("li"),ude=a("strong"),h5o=o("gpt_neo"),p5o=o(" \u2014 "),vj=a("a"),_5o=o("GPTNeoForCausalLM"),u5o=o(" (GPT Neo model)"),b5o=l(),s2=a("li"),bde=a("strong"),v5o=o("gptj"),F5o=o(" \u2014 "),Fj=a("a"),T5o=o("GPTJForCausalLM"),M5o=o(" (GPT-J model)"),E5o=l(),l2=a("li"),vde=a("strong"),C5o=o("marian"),w5o=o(" \u2014 "),Tj=a("a"),A5o=o("MarianForCausalLM"),y5o=o(" (Marian model)"),L5o=l(),i2=a("li"),Fde=a("strong"),x5o=o("mbart"),$5o=o(" \u2014 "),Mj=a("a"),k5o=o("MBartForCausalLM"),S5o=o(" (mBART model)"),R5o=l(),d2=a("li"),Tde=a("strong"),B5o=o("megatron-bert"),P5o=o(" \u2014 "),Ej=a("a"),I5o=o("MegatronBertForCausalLM"),q5o=o(" (MegatronBert model)"),N5o=l(),c2=a("li"),Mde=a("strong"),j5o=o("openai-gpt"),D5o=o(" \u2014 "),Cj=a("a"),G5o=o("OpenAIGPTLMHeadModel"),O5o=o(" (OpenAI GPT model)"),V5o=l(),f2=a("li"),Ede=a("strong"),X5o=o("opt"),z5o=o(" \u2014 "),wj=a("a"),W5o=o("OPTForCausalLM"),Q5o=o(" (OPT model)"),H5o=l(),m2=a("li"),Cde=a("strong"),U5o=o("pegasus"),J5o=o(" \u2014 "),Aj=a("a"),Y5o=o("PegasusForCausalLM"),K5o=o(" (Pegasus model)"),Z5o=l(),g2=a("li"),wde=a("strong"),e3o=o("plbart"),o3o=o(" \u2014 "),yj=a("a"),r3o=o("PLBartForCausalLM"),t3o=o(" (PLBart model)"),a3o=l(),h2=a("li"),Ade=a("strong"),n3o=o("prophetnet"),s3o=o(" \u2014 "),Lj=a("a"),l3o=o("ProphetNetForCausalLM"),i3o=o(" (ProphetNet model)"),d3o=l(),p2=a("li"),yde=a("strong"),c3o=o("qdqbert"),f3o=o(" \u2014 "),xj=a("a"),m3o=o("QDQBertLMHeadModel"),g3o=o(" (QDQBert model)"),h3o=l(),_2=a("li"),Lde=a("strong"),p3o=o("reformer"),_3o=o(" \u2014 "),$j=a("a"),u3o=o("ReformerModelWithLMHead"),b3o=o(" (Reformer model)"),v3o=l(),u2=a("li"),xde=a("strong"),F3o=o("rembert"),T3o=o(" \u2014 "),kj=a("a"),M3o=o("RemBertForCausalLM"),E3o=o(" (RemBERT model)"),C3o=l(),b2=a("li"),$de=a("strong"),w3o=o("roberta"),A3o=o(" \u2014 "),Sj=a("a"),y3o=o("RobertaForCausalLM"),L3o=o(" (RoBERTa model)"),x3o=l(),v2=a("li"),kde=a("strong"),$3o=o("roformer"),k3o=o(" \u2014 "),Rj=a("a"),S3o=o("RoFormerForCausalLM"),R3o=o(" (RoFormer model)"),B3o=l(),F2=a("li"),Sde=a("strong"),P3o=o("speech_to_text_2"),I3o=o(" \u2014 "),Bj=a("a"),q3o=o("Speech2Text2ForCausalLM"),N3o=o(" (Speech2Text2 model)"),j3o=l(),T2=a("li"),Rde=a("strong"),D3o=o("transfo-xl"),G3o=o(" \u2014 "),Pj=a("a"),O3o=o("TransfoXLLMHeadModel"),V3o=o(" (Transformer-XL model)"),X3o=l(),M2=a("li"),Bde=a("strong"),z3o=o("trocr"),W3o=o(" \u2014 "),Ij=a("a"),Q3o=o("TrOCRForCausalLM"),H3o=o(" (TrOCR model)"),U3o=l(),E2=a("li"),Pde=a("strong"),J3o=o("xglm"),Y3o=o(" \u2014 "),qj=a("a"),K3o=o("XGLMForCausalLM"),Z3o=o(" (XGLM model)"),ewo=l(),C2=a("li"),Ide=a("strong"),owo=o("xlm"),rwo=o(" \u2014 "),Nj=a("a"),two=o("XLMWithLMHeadModel"),awo=o(" (XLM model)"),nwo=l(),w2=a("li"),qde=a("strong"),swo=o("xlm-prophetnet"),lwo=o(" \u2014 "),jj=a("a"),iwo=o("XLMProphetNetForCausalLM"),dwo=o(" (XLMProphetNet model)"),cwo=l(),A2=a("li"),Nde=a("strong"),fwo=o("xlm-roberta"),mwo=o(" \u2014 "),Dj=a("a"),gwo=o("XLMRobertaForCausalLM"),hwo=o(" (XLM-RoBERTa model)"),pwo=l(),y2=a("li"),jde=a("strong"),_wo=o("xlm-roberta-xl"),uwo=o(" \u2014 "),Gj=a("a"),bwo=o("XLMRobertaXLForCausalLM"),vwo=o(" (XLM-RoBERTa-XL model)"),Fwo=l(),L2=a("li"),Dde=a("strong"),Two=o("xlnet"),Mwo=o(" \u2014 "),Oj=a("a"),Ewo=o("XLNetLMHeadModel"),Cwo=o(" (XLNet model)"),wwo=l(),x2=a("p"),Awo=o("The model is set in evaluation mode by default using "),Gde=a("code"),ywo=o("model.eval()"),Lwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ode=a("code"),xwo=o("model.train()"),$wo=l(),F($2.$$.fragment),Nqe=l(),Ri=a("h2"),k2=a("a"),Vde=a("span"),F(sy.$$.fragment),kwo=l(),Xde=a("span"),Swo=o("AutoModelForMaskedLM"),jqe=l(),ko=a("div"),F(ly.$$.fragment),Rwo=l(),Bi=a("p"),Bwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Vj=a("a"),Pwo=o("from_pretrained()"),Iwo=o(" class method or the "),Xj=a("a"),qwo=o("from_config()"),Nwo=o(` class
method.`),jwo=l(),iy=a("p"),Dwo=o("This class cannot be instantiated directly using "),zde=a("code"),Gwo=o("__init__()"),Owo=o(" (throws an error)."),Vwo=l(),st=a("div"),F(dy.$$.fragment),Xwo=l(),Wde=a("p"),zwo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Wwo=l(),Pi=a("p"),Qwo=o(`Note:
Loading a model from its configuration file does `),Qde=a("strong"),Hwo=o("not"),Uwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zj=a("a"),Jwo=o("from_pretrained()"),Ywo=o(" to load the model weights."),Kwo=l(),F(S2.$$.fragment),Zwo=l(),Ze=a("div"),F(cy.$$.fragment),e6o=l(),Hde=a("p"),o6o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),r6o=l(),ka=a("p"),t6o=o("The model class to instantiate is selected based on the "),Ude=a("code"),a6o=o("model_type"),n6o=o(` property of the config object (either
passed as an argument or loaded from `),Jde=a("code"),s6o=o("pretrained_model_name_or_path"),l6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yde=a("code"),i6o=o("pretrained_model_name_or_path"),d6o=o(":"),c6o=l(),Q=a("ul"),R2=a("li"),Kde=a("strong"),f6o=o("albert"),m6o=o(" \u2014 "),Wj=a("a"),g6o=o("AlbertForMaskedLM"),h6o=o(" (ALBERT model)"),p6o=l(),B2=a("li"),Zde=a("strong"),_6o=o("bart"),u6o=o(" \u2014 "),Qj=a("a"),b6o=o("BartForConditionalGeneration"),v6o=o(" (BART model)"),F6o=l(),P2=a("li"),ece=a("strong"),T6o=o("bert"),M6o=o(" \u2014 "),Hj=a("a"),E6o=o("BertForMaskedLM"),C6o=o(" (BERT model)"),w6o=l(),I2=a("li"),oce=a("strong"),A6o=o("big_bird"),y6o=o(" \u2014 "),Uj=a("a"),L6o=o("BigBirdForMaskedLM"),x6o=o(" (BigBird model)"),$6o=l(),q2=a("li"),rce=a("strong"),k6o=o("camembert"),S6o=o(" \u2014 "),Jj=a("a"),R6o=o("CamembertForMaskedLM"),B6o=o(" (CamemBERT model)"),P6o=l(),N2=a("li"),tce=a("strong"),I6o=o("convbert"),q6o=o(" \u2014 "),Yj=a("a"),N6o=o("ConvBertForMaskedLM"),j6o=o(" (ConvBERT model)"),D6o=l(),j2=a("li"),ace=a("strong"),G6o=o("data2vec-text"),O6o=o(" \u2014 "),Kj=a("a"),V6o=o("Data2VecTextForMaskedLM"),X6o=o(" (Data2VecText model)"),z6o=l(),D2=a("li"),nce=a("strong"),W6o=o("deberta"),Q6o=o(" \u2014 "),Zj=a("a"),H6o=o("DebertaForMaskedLM"),U6o=o(" (DeBERTa model)"),J6o=l(),G2=a("li"),sce=a("strong"),Y6o=o("deberta-v2"),K6o=o(" \u2014 "),eD=a("a"),Z6o=o("DebertaV2ForMaskedLM"),eAo=o(" (DeBERTa-v2 model)"),oAo=l(),O2=a("li"),lce=a("strong"),rAo=o("distilbert"),tAo=o(" \u2014 "),oD=a("a"),aAo=o("DistilBertForMaskedLM"),nAo=o(" (DistilBERT model)"),sAo=l(),V2=a("li"),ice=a("strong"),lAo=o("electra"),iAo=o(" \u2014 "),rD=a("a"),dAo=o("ElectraForMaskedLM"),cAo=o(" (ELECTRA model)"),fAo=l(),X2=a("li"),dce=a("strong"),mAo=o("flaubert"),gAo=o(" \u2014 "),tD=a("a"),hAo=o("FlaubertWithLMHeadModel"),pAo=o(" (FlauBERT model)"),_Ao=l(),z2=a("li"),cce=a("strong"),uAo=o("fnet"),bAo=o(" \u2014 "),aD=a("a"),vAo=o("FNetForMaskedLM"),FAo=o(" (FNet model)"),TAo=l(),W2=a("li"),fce=a("strong"),MAo=o("funnel"),EAo=o(" \u2014 "),nD=a("a"),CAo=o("FunnelForMaskedLM"),wAo=o(" (Funnel Transformer model)"),AAo=l(),Q2=a("li"),mce=a("strong"),yAo=o("ibert"),LAo=o(" \u2014 "),sD=a("a"),xAo=o("IBertForMaskedLM"),$Ao=o(" (I-BERT model)"),kAo=l(),H2=a("li"),gce=a("strong"),SAo=o("layoutlm"),RAo=o(" \u2014 "),lD=a("a"),BAo=o("LayoutLMForMaskedLM"),PAo=o(" (LayoutLM model)"),IAo=l(),U2=a("li"),hce=a("strong"),qAo=o("longformer"),NAo=o(" \u2014 "),iD=a("a"),jAo=o("LongformerForMaskedLM"),DAo=o(" (Longformer model)"),GAo=l(),J2=a("li"),pce=a("strong"),OAo=o("mbart"),VAo=o(" \u2014 "),dD=a("a"),XAo=o("MBartForConditionalGeneration"),zAo=o(" (mBART model)"),WAo=l(),Y2=a("li"),_ce=a("strong"),QAo=o("megatron-bert"),HAo=o(" \u2014 "),cD=a("a"),UAo=o("MegatronBertForMaskedLM"),JAo=o(" (MegatronBert model)"),YAo=l(),K2=a("li"),uce=a("strong"),KAo=o("mobilebert"),ZAo=o(" \u2014 "),fD=a("a"),eyo=o("MobileBertForMaskedLM"),oyo=o(" (MobileBERT model)"),ryo=l(),Z2=a("li"),bce=a("strong"),tyo=o("mpnet"),ayo=o(" \u2014 "),mD=a("a"),nyo=o("MPNetForMaskedLM"),syo=o(" (MPNet model)"),lyo=l(),e1=a("li"),vce=a("strong"),iyo=o("nystromformer"),dyo=o(" \u2014 "),gD=a("a"),cyo=o("NystromformerForMaskedLM"),fyo=o(" (Nystromformer model)"),myo=l(),o1=a("li"),Fce=a("strong"),gyo=o("perceiver"),hyo=o(" \u2014 "),hD=a("a"),pyo=o("PerceiverForMaskedLM"),_yo=o(" (Perceiver model)"),uyo=l(),r1=a("li"),Tce=a("strong"),byo=o("qdqbert"),vyo=o(" \u2014 "),pD=a("a"),Fyo=o("QDQBertForMaskedLM"),Tyo=o(" (QDQBert model)"),Myo=l(),t1=a("li"),Mce=a("strong"),Eyo=o("reformer"),Cyo=o(" \u2014 "),_D=a("a"),wyo=o("ReformerForMaskedLM"),Ayo=o(" (Reformer model)"),yyo=l(),a1=a("li"),Ece=a("strong"),Lyo=o("rembert"),xyo=o(" \u2014 "),uD=a("a"),$yo=o("RemBertForMaskedLM"),kyo=o(" (RemBERT model)"),Syo=l(),n1=a("li"),Cce=a("strong"),Ryo=o("roberta"),Byo=o(" \u2014 "),bD=a("a"),Pyo=o("RobertaForMaskedLM"),Iyo=o(" (RoBERTa model)"),qyo=l(),s1=a("li"),wce=a("strong"),Nyo=o("roformer"),jyo=o(" \u2014 "),vD=a("a"),Dyo=o("RoFormerForMaskedLM"),Gyo=o(" (RoFormer model)"),Oyo=l(),l1=a("li"),Ace=a("strong"),Vyo=o("squeezebert"),Xyo=o(" \u2014 "),FD=a("a"),zyo=o("SqueezeBertForMaskedLM"),Wyo=o(" (SqueezeBERT model)"),Qyo=l(),i1=a("li"),yce=a("strong"),Hyo=o("tapas"),Uyo=o(" \u2014 "),TD=a("a"),Jyo=o("TapasForMaskedLM"),Yyo=o(" (TAPAS model)"),Kyo=l(),d1=a("li"),Lce=a("strong"),Zyo=o("wav2vec2"),eLo=o(" \u2014 "),xce=a("code"),oLo=o("Wav2Vec2ForMaskedLM"),rLo=o(" (Wav2Vec2 model)"),tLo=l(),c1=a("li"),$ce=a("strong"),aLo=o("xlm"),nLo=o(" \u2014 "),MD=a("a"),sLo=o("XLMWithLMHeadModel"),lLo=o(" (XLM model)"),iLo=l(),f1=a("li"),kce=a("strong"),dLo=o("xlm-roberta"),cLo=o(" \u2014 "),ED=a("a"),fLo=o("XLMRobertaForMaskedLM"),mLo=o(" (XLM-RoBERTa model)"),gLo=l(),m1=a("li"),Sce=a("strong"),hLo=o("xlm-roberta-xl"),pLo=o(" \u2014 "),CD=a("a"),_Lo=o("XLMRobertaXLForMaskedLM"),uLo=o(" (XLM-RoBERTa-XL model)"),bLo=l(),g1=a("li"),Rce=a("strong"),vLo=o("yoso"),FLo=o(" \u2014 "),wD=a("a"),TLo=o("YosoForMaskedLM"),MLo=o(" (YOSO model)"),ELo=l(),h1=a("p"),CLo=o("The model is set in evaluation mode by default using "),Bce=a("code"),wLo=o("model.eval()"),ALo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pce=a("code"),yLo=o("model.train()"),LLo=l(),F(p1.$$.fragment),Dqe=l(),Ii=a("h2"),_1=a("a"),Ice=a("span"),F(fy.$$.fragment),xLo=l(),qce=a("span"),$Lo=o("AutoModelForSeq2SeqLM"),Gqe=l(),So=a("div"),F(my.$$.fragment),kLo=l(),qi=a("p"),SLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),AD=a("a"),RLo=o("from_pretrained()"),BLo=o(" class method or the "),yD=a("a"),PLo=o("from_config()"),ILo=o(` class
method.`),qLo=l(),gy=a("p"),NLo=o("This class cannot be instantiated directly using "),Nce=a("code"),jLo=o("__init__()"),DLo=o(" (throws an error)."),GLo=l(),lt=a("div"),F(hy.$$.fragment),OLo=l(),jce=a("p"),VLo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),XLo=l(),Ni=a("p"),zLo=o(`Note:
Loading a model from its configuration file does `),Dce=a("strong"),WLo=o("not"),QLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LD=a("a"),HLo=o("from_pretrained()"),ULo=o(" to load the model weights."),JLo=l(),F(u1.$$.fragment),YLo=l(),eo=a("div"),F(py.$$.fragment),KLo=l(),Gce=a("p"),ZLo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),e8o=l(),Sa=a("p"),o8o=o("The model class to instantiate is selected based on the "),Oce=a("code"),r8o=o("model_type"),t8o=o(` property of the config object (either
passed as an argument or loaded from `),Vce=a("code"),a8o=o("pretrained_model_name_or_path"),n8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xce=a("code"),s8o=o("pretrained_model_name_or_path"),l8o=o(":"),i8o=l(),_e=a("ul"),b1=a("li"),zce=a("strong"),d8o=o("bart"),c8o=o(" \u2014 "),xD=a("a"),f8o=o("BartForConditionalGeneration"),m8o=o(" (BART model)"),g8o=l(),v1=a("li"),Wce=a("strong"),h8o=o("bigbird_pegasus"),p8o=o(" \u2014 "),$D=a("a"),_8o=o("BigBirdPegasusForConditionalGeneration"),u8o=o(" (BigBirdPegasus model)"),b8o=l(),F1=a("li"),Qce=a("strong"),v8o=o("blenderbot"),F8o=o(" \u2014 "),kD=a("a"),T8o=o("BlenderbotForConditionalGeneration"),M8o=o(" (Blenderbot model)"),E8o=l(),T1=a("li"),Hce=a("strong"),C8o=o("blenderbot-small"),w8o=o(" \u2014 "),SD=a("a"),A8o=o("BlenderbotSmallForConditionalGeneration"),y8o=o(" (BlenderbotSmall model)"),L8o=l(),M1=a("li"),Uce=a("strong"),x8o=o("encoder-decoder"),$8o=o(" \u2014 "),RD=a("a"),k8o=o("EncoderDecoderModel"),S8o=o(" (Encoder decoder model)"),R8o=l(),E1=a("li"),Jce=a("strong"),B8o=o("fsmt"),P8o=o(" \u2014 "),BD=a("a"),I8o=o("FSMTForConditionalGeneration"),q8o=o(" (FairSeq Machine-Translation model)"),N8o=l(),C1=a("li"),Yce=a("strong"),j8o=o("led"),D8o=o(" \u2014 "),PD=a("a"),G8o=o("LEDForConditionalGeneration"),O8o=o(" (LED model)"),V8o=l(),w1=a("li"),Kce=a("strong"),X8o=o("m2m_100"),z8o=o(" \u2014 "),ID=a("a"),W8o=o("M2M100ForConditionalGeneration"),Q8o=o(" (M2M100 model)"),H8o=l(),A1=a("li"),Zce=a("strong"),U8o=o("marian"),J8o=o(" \u2014 "),qD=a("a"),Y8o=o("MarianMTModel"),K8o=o(" (Marian model)"),Z8o=l(),y1=a("li"),efe=a("strong"),e9o=o("mbart"),o9o=o(" \u2014 "),ND=a("a"),r9o=o("MBartForConditionalGeneration"),t9o=o(" (mBART model)"),a9o=l(),L1=a("li"),ofe=a("strong"),n9o=o("mt5"),s9o=o(" \u2014 "),jD=a("a"),l9o=o("MT5ForConditionalGeneration"),i9o=o(" (mT5 model)"),d9o=l(),x1=a("li"),rfe=a("strong"),c9o=o("pegasus"),f9o=o(" \u2014 "),DD=a("a"),m9o=o("PegasusForConditionalGeneration"),g9o=o(" (Pegasus model)"),h9o=l(),$1=a("li"),tfe=a("strong"),p9o=o("plbart"),_9o=o(" \u2014 "),GD=a("a"),u9o=o("PLBartForConditionalGeneration"),b9o=o(" (PLBart model)"),v9o=l(),k1=a("li"),afe=a("strong"),F9o=o("prophetnet"),T9o=o(" \u2014 "),OD=a("a"),M9o=o("ProphetNetForConditionalGeneration"),E9o=o(" (ProphetNet model)"),C9o=l(),S1=a("li"),nfe=a("strong"),w9o=o("t5"),A9o=o(" \u2014 "),VD=a("a"),y9o=o("T5ForConditionalGeneration"),L9o=o(" (T5 model)"),x9o=l(),R1=a("li"),sfe=a("strong"),$9o=o("xlm-prophetnet"),k9o=o(" \u2014 "),XD=a("a"),S9o=o("XLMProphetNetForConditionalGeneration"),R9o=o(" (XLMProphetNet model)"),B9o=l(),B1=a("p"),P9o=o("The model is set in evaluation mode by default using "),lfe=a("code"),I9o=o("model.eval()"),q9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=a("code"),N9o=o("model.train()"),j9o=l(),F(P1.$$.fragment),Oqe=l(),ji=a("h2"),I1=a("a"),dfe=a("span"),F(_y.$$.fragment),D9o=l(),cfe=a("span"),G9o=o("AutoModelForSequenceClassification"),Vqe=l(),Ro=a("div"),F(uy.$$.fragment),O9o=l(),Di=a("p"),V9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zD=a("a"),X9o=o("from_pretrained()"),z9o=o(" class method or the "),WD=a("a"),W9o=o("from_config()"),Q9o=o(` class
method.`),H9o=l(),by=a("p"),U9o=o("This class cannot be instantiated directly using "),ffe=a("code"),J9o=o("__init__()"),Y9o=o(" (throws an error)."),K9o=l(),it=a("div"),F(vy.$$.fragment),Z9o=l(),mfe=a("p"),exo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),oxo=l(),Gi=a("p"),rxo=o(`Note:
Loading a model from its configuration file does `),gfe=a("strong"),txo=o("not"),axo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QD=a("a"),nxo=o("from_pretrained()"),sxo=o(" to load the model weights."),lxo=l(),F(q1.$$.fragment),ixo=l(),oo=a("div"),F(Fy.$$.fragment),dxo=l(),hfe=a("p"),cxo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fxo=l(),Ra=a("p"),mxo=o("The model class to instantiate is selected based on the "),pfe=a("code"),gxo=o("model_type"),hxo=o(` property of the config object (either
passed as an argument or loaded from `),_fe=a("code"),pxo=o("pretrained_model_name_or_path"),_xo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=a("code"),uxo=o("pretrained_model_name_or_path"),bxo=o(":"),vxo=l(),q=a("ul"),N1=a("li"),bfe=a("strong"),Fxo=o("albert"),Txo=o(" \u2014 "),HD=a("a"),Mxo=o("AlbertForSequenceClassification"),Exo=o(" (ALBERT model)"),Cxo=l(),j1=a("li"),vfe=a("strong"),wxo=o("bart"),Axo=o(" \u2014 "),UD=a("a"),yxo=o("BartForSequenceClassification"),Lxo=o(" (BART model)"),xxo=l(),D1=a("li"),Ffe=a("strong"),$xo=o("bert"),kxo=o(" \u2014 "),JD=a("a"),Sxo=o("BertForSequenceClassification"),Rxo=o(" (BERT model)"),Bxo=l(),G1=a("li"),Tfe=a("strong"),Pxo=o("big_bird"),Ixo=o(" \u2014 "),YD=a("a"),qxo=o("BigBirdForSequenceClassification"),Nxo=o(" (BigBird model)"),jxo=l(),O1=a("li"),Mfe=a("strong"),Dxo=o("bigbird_pegasus"),Gxo=o(" \u2014 "),KD=a("a"),Oxo=o("BigBirdPegasusForSequenceClassification"),Vxo=o(" (BigBirdPegasus model)"),Xxo=l(),V1=a("li"),Efe=a("strong"),zxo=o("camembert"),Wxo=o(" \u2014 "),ZD=a("a"),Qxo=o("CamembertForSequenceClassification"),Hxo=o(" (CamemBERT model)"),Uxo=l(),X1=a("li"),Cfe=a("strong"),Jxo=o("canine"),Yxo=o(" \u2014 "),eG=a("a"),Kxo=o("CanineForSequenceClassification"),Zxo=o(" (Canine model)"),e$o=l(),z1=a("li"),wfe=a("strong"),o$o=o("convbert"),r$o=o(" \u2014 "),oG=a("a"),t$o=o("ConvBertForSequenceClassification"),a$o=o(" (ConvBERT model)"),n$o=l(),W1=a("li"),Afe=a("strong"),s$o=o("ctrl"),l$o=o(" \u2014 "),rG=a("a"),i$o=o("CTRLForSequenceClassification"),d$o=o(" (CTRL model)"),c$o=l(),Q1=a("li"),yfe=a("strong"),f$o=o("data2vec-text"),m$o=o(" \u2014 "),tG=a("a"),g$o=o("Data2VecTextForSequenceClassification"),h$o=o(" (Data2VecText model)"),p$o=l(),H1=a("li"),Lfe=a("strong"),_$o=o("deberta"),u$o=o(" \u2014 "),aG=a("a"),b$o=o("DebertaForSequenceClassification"),v$o=o(" (DeBERTa model)"),F$o=l(),U1=a("li"),xfe=a("strong"),T$o=o("deberta-v2"),M$o=o(" \u2014 "),nG=a("a"),E$o=o("DebertaV2ForSequenceClassification"),C$o=o(" (DeBERTa-v2 model)"),w$o=l(),J1=a("li"),$fe=a("strong"),A$o=o("distilbert"),y$o=o(" \u2014 "),sG=a("a"),L$o=o("DistilBertForSequenceClassification"),x$o=o(" (DistilBERT model)"),$$o=l(),Y1=a("li"),kfe=a("strong"),k$o=o("electra"),S$o=o(" \u2014 "),lG=a("a"),R$o=o("ElectraForSequenceClassification"),B$o=o(" (ELECTRA model)"),P$o=l(),K1=a("li"),Sfe=a("strong"),I$o=o("flaubert"),q$o=o(" \u2014 "),iG=a("a"),N$o=o("FlaubertForSequenceClassification"),j$o=o(" (FlauBERT model)"),D$o=l(),Z1=a("li"),Rfe=a("strong"),G$o=o("fnet"),O$o=o(" \u2014 "),dG=a("a"),V$o=o("FNetForSequenceClassification"),X$o=o(" (FNet model)"),z$o=l(),eb=a("li"),Bfe=a("strong"),W$o=o("funnel"),Q$o=o(" \u2014 "),cG=a("a"),H$o=o("FunnelForSequenceClassification"),U$o=o(" (Funnel Transformer model)"),J$o=l(),ob=a("li"),Pfe=a("strong"),Y$o=o("gpt2"),K$o=o(" \u2014 "),fG=a("a"),Z$o=o("GPT2ForSequenceClassification"),eko=o(" (OpenAI GPT-2 model)"),oko=l(),rb=a("li"),Ife=a("strong"),rko=o("gpt_neo"),tko=o(" \u2014 "),mG=a("a"),ako=o("GPTNeoForSequenceClassification"),nko=o(" (GPT Neo model)"),sko=l(),tb=a("li"),qfe=a("strong"),lko=o("gptj"),iko=o(" \u2014 "),gG=a("a"),dko=o("GPTJForSequenceClassification"),cko=o(" (GPT-J model)"),fko=l(),ab=a("li"),Nfe=a("strong"),mko=o("ibert"),gko=o(" \u2014 "),hG=a("a"),hko=o("IBertForSequenceClassification"),pko=o(" (I-BERT model)"),_ko=l(),nb=a("li"),jfe=a("strong"),uko=o("layoutlm"),bko=o(" \u2014 "),pG=a("a"),vko=o("LayoutLMForSequenceClassification"),Fko=o(" (LayoutLM model)"),Tko=l(),sb=a("li"),Dfe=a("strong"),Mko=o("layoutlmv2"),Eko=o(" \u2014 "),_G=a("a"),Cko=o("LayoutLMv2ForSequenceClassification"),wko=o(" (LayoutLMv2 model)"),Ako=l(),lb=a("li"),Gfe=a("strong"),yko=o("led"),Lko=o(" \u2014 "),uG=a("a"),xko=o("LEDForSequenceClassification"),$ko=o(" (LED model)"),kko=l(),ib=a("li"),Ofe=a("strong"),Sko=o("longformer"),Rko=o(" \u2014 "),bG=a("a"),Bko=o("LongformerForSequenceClassification"),Pko=o(" (Longformer model)"),Iko=l(),db=a("li"),Vfe=a("strong"),qko=o("mbart"),Nko=o(" \u2014 "),vG=a("a"),jko=o("MBartForSequenceClassification"),Dko=o(" (mBART model)"),Gko=l(),cb=a("li"),Xfe=a("strong"),Oko=o("megatron-bert"),Vko=o(" \u2014 "),FG=a("a"),Xko=o("MegatronBertForSequenceClassification"),zko=o(" (MegatronBert model)"),Wko=l(),fb=a("li"),zfe=a("strong"),Qko=o("mobilebert"),Hko=o(" \u2014 "),TG=a("a"),Uko=o("MobileBertForSequenceClassification"),Jko=o(" (MobileBERT model)"),Yko=l(),mb=a("li"),Wfe=a("strong"),Kko=o("mpnet"),Zko=o(" \u2014 "),MG=a("a"),eSo=o("MPNetForSequenceClassification"),oSo=o(" (MPNet model)"),rSo=l(),gb=a("li"),Qfe=a("strong"),tSo=o("nystromformer"),aSo=o(" \u2014 "),EG=a("a"),nSo=o("NystromformerForSequenceClassification"),sSo=o(" (Nystromformer model)"),lSo=l(),hb=a("li"),Hfe=a("strong"),iSo=o("openai-gpt"),dSo=o(" \u2014 "),CG=a("a"),cSo=o("OpenAIGPTForSequenceClassification"),fSo=o(" (OpenAI GPT model)"),mSo=l(),pb=a("li"),Ufe=a("strong"),gSo=o("perceiver"),hSo=o(" \u2014 "),wG=a("a"),pSo=o("PerceiverForSequenceClassification"),_So=o(" (Perceiver model)"),uSo=l(),_b=a("li"),Jfe=a("strong"),bSo=o("plbart"),vSo=o(" \u2014 "),AG=a("a"),FSo=o("PLBartForSequenceClassification"),TSo=o(" (PLBart model)"),MSo=l(),ub=a("li"),Yfe=a("strong"),ESo=o("qdqbert"),CSo=o(" \u2014 "),yG=a("a"),wSo=o("QDQBertForSequenceClassification"),ASo=o(" (QDQBert model)"),ySo=l(),bb=a("li"),Kfe=a("strong"),LSo=o("reformer"),xSo=o(" \u2014 "),LG=a("a"),$So=o("ReformerForSequenceClassification"),kSo=o(" (Reformer model)"),SSo=l(),vb=a("li"),Zfe=a("strong"),RSo=o("rembert"),BSo=o(" \u2014 "),xG=a("a"),PSo=o("RemBertForSequenceClassification"),ISo=o(" (RemBERT model)"),qSo=l(),Fb=a("li"),eme=a("strong"),NSo=o("roberta"),jSo=o(" \u2014 "),$G=a("a"),DSo=o("RobertaForSequenceClassification"),GSo=o(" (RoBERTa model)"),OSo=l(),Tb=a("li"),ome=a("strong"),VSo=o("roformer"),XSo=o(" \u2014 "),kG=a("a"),zSo=o("RoFormerForSequenceClassification"),WSo=o(" (RoFormer model)"),QSo=l(),Mb=a("li"),rme=a("strong"),HSo=o("squeezebert"),USo=o(" \u2014 "),SG=a("a"),JSo=o("SqueezeBertForSequenceClassification"),YSo=o(" (SqueezeBERT model)"),KSo=l(),Eb=a("li"),tme=a("strong"),ZSo=o("tapas"),eRo=o(" \u2014 "),RG=a("a"),oRo=o("TapasForSequenceClassification"),rRo=o(" (TAPAS model)"),tRo=l(),Cb=a("li"),ame=a("strong"),aRo=o("transfo-xl"),nRo=o(" \u2014 "),BG=a("a"),sRo=o("TransfoXLForSequenceClassification"),lRo=o(" (Transformer-XL model)"),iRo=l(),wb=a("li"),nme=a("strong"),dRo=o("xlm"),cRo=o(" \u2014 "),PG=a("a"),fRo=o("XLMForSequenceClassification"),mRo=o(" (XLM model)"),gRo=l(),Ab=a("li"),sme=a("strong"),hRo=o("xlm-roberta"),pRo=o(" \u2014 "),IG=a("a"),_Ro=o("XLMRobertaForSequenceClassification"),uRo=o(" (XLM-RoBERTa model)"),bRo=l(),yb=a("li"),lme=a("strong"),vRo=o("xlm-roberta-xl"),FRo=o(" \u2014 "),qG=a("a"),TRo=o("XLMRobertaXLForSequenceClassification"),MRo=o(" (XLM-RoBERTa-XL model)"),ERo=l(),Lb=a("li"),ime=a("strong"),CRo=o("xlnet"),wRo=o(" \u2014 "),NG=a("a"),ARo=o("XLNetForSequenceClassification"),yRo=o(" (XLNet model)"),LRo=l(),xb=a("li"),dme=a("strong"),xRo=o("yoso"),$Ro=o(" \u2014 "),jG=a("a"),kRo=o("YosoForSequenceClassification"),SRo=o(" (YOSO model)"),RRo=l(),$b=a("p"),BRo=o("The model is set in evaluation mode by default using "),cme=a("code"),PRo=o("model.eval()"),IRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=a("code"),qRo=o("model.train()"),NRo=l(),F(kb.$$.fragment),Xqe=l(),Oi=a("h2"),Sb=a("a"),mme=a("span"),F(Ty.$$.fragment),jRo=l(),gme=a("span"),DRo=o("AutoModelForMultipleChoice"),zqe=l(),Bo=a("div"),F(My.$$.fragment),GRo=l(),Vi=a("p"),ORo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DG=a("a"),VRo=o("from_pretrained()"),XRo=o(" class method or the "),GG=a("a"),zRo=o("from_config()"),WRo=o(` class
method.`),QRo=l(),Ey=a("p"),HRo=o("This class cannot be instantiated directly using "),hme=a("code"),URo=o("__init__()"),JRo=o(" (throws an error)."),YRo=l(),dt=a("div"),F(Cy.$$.fragment),KRo=l(),pme=a("p"),ZRo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eBo=l(),Xi=a("p"),oBo=o(`Note:
Loading a model from its configuration file does `),_me=a("strong"),rBo=o("not"),tBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OG=a("a"),aBo=o("from_pretrained()"),nBo=o(" to load the model weights."),sBo=l(),F(Rb.$$.fragment),lBo=l(),ro=a("div"),F(wy.$$.fragment),iBo=l(),ume=a("p"),dBo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),cBo=l(),Ba=a("p"),fBo=o("The model class to instantiate is selected based on the "),bme=a("code"),mBo=o("model_type"),gBo=o(` property of the config object (either
passed as an argument or loaded from `),vme=a("code"),hBo=o("pretrained_model_name_or_path"),pBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fme=a("code"),_Bo=o("pretrained_model_name_or_path"),uBo=o(":"),bBo=l(),Y=a("ul"),Bb=a("li"),Tme=a("strong"),vBo=o("albert"),FBo=o(" \u2014 "),VG=a("a"),TBo=o("AlbertForMultipleChoice"),MBo=o(" (ALBERT model)"),EBo=l(),Pb=a("li"),Mme=a("strong"),CBo=o("bert"),wBo=o(" \u2014 "),XG=a("a"),ABo=o("BertForMultipleChoice"),yBo=o(" (BERT model)"),LBo=l(),Ib=a("li"),Eme=a("strong"),xBo=o("big_bird"),$Bo=o(" \u2014 "),zG=a("a"),kBo=o("BigBirdForMultipleChoice"),SBo=o(" (BigBird model)"),RBo=l(),qb=a("li"),Cme=a("strong"),BBo=o("camembert"),PBo=o(" \u2014 "),WG=a("a"),IBo=o("CamembertForMultipleChoice"),qBo=o(" (CamemBERT model)"),NBo=l(),Nb=a("li"),wme=a("strong"),jBo=o("canine"),DBo=o(" \u2014 "),QG=a("a"),GBo=o("CanineForMultipleChoice"),OBo=o(" (Canine model)"),VBo=l(),jb=a("li"),Ame=a("strong"),XBo=o("convbert"),zBo=o(" \u2014 "),HG=a("a"),WBo=o("ConvBertForMultipleChoice"),QBo=o(" (ConvBERT model)"),HBo=l(),Db=a("li"),yme=a("strong"),UBo=o("data2vec-text"),JBo=o(" \u2014 "),UG=a("a"),YBo=o("Data2VecTextForMultipleChoice"),KBo=o(" (Data2VecText model)"),ZBo=l(),Gb=a("li"),Lme=a("strong"),ePo=o("deberta-v2"),oPo=o(" \u2014 "),JG=a("a"),rPo=o("DebertaV2ForMultipleChoice"),tPo=o(" (DeBERTa-v2 model)"),aPo=l(),Ob=a("li"),xme=a("strong"),nPo=o("distilbert"),sPo=o(" \u2014 "),YG=a("a"),lPo=o("DistilBertForMultipleChoice"),iPo=o(" (DistilBERT model)"),dPo=l(),Vb=a("li"),$me=a("strong"),cPo=o("electra"),fPo=o(" \u2014 "),KG=a("a"),mPo=o("ElectraForMultipleChoice"),gPo=o(" (ELECTRA model)"),hPo=l(),Xb=a("li"),kme=a("strong"),pPo=o("flaubert"),_Po=o(" \u2014 "),ZG=a("a"),uPo=o("FlaubertForMultipleChoice"),bPo=o(" (FlauBERT model)"),vPo=l(),zb=a("li"),Sme=a("strong"),FPo=o("fnet"),TPo=o(" \u2014 "),eO=a("a"),MPo=o("FNetForMultipleChoice"),EPo=o(" (FNet model)"),CPo=l(),Wb=a("li"),Rme=a("strong"),wPo=o("funnel"),APo=o(" \u2014 "),oO=a("a"),yPo=o("FunnelForMultipleChoice"),LPo=o(" (Funnel Transformer model)"),xPo=l(),Qb=a("li"),Bme=a("strong"),$Po=o("ibert"),kPo=o(" \u2014 "),rO=a("a"),SPo=o("IBertForMultipleChoice"),RPo=o(" (I-BERT model)"),BPo=l(),Hb=a("li"),Pme=a("strong"),PPo=o("longformer"),IPo=o(" \u2014 "),tO=a("a"),qPo=o("LongformerForMultipleChoice"),NPo=o(" (Longformer model)"),jPo=l(),Ub=a("li"),Ime=a("strong"),DPo=o("megatron-bert"),GPo=o(" \u2014 "),aO=a("a"),OPo=o("MegatronBertForMultipleChoice"),VPo=o(" (MegatronBert model)"),XPo=l(),Jb=a("li"),qme=a("strong"),zPo=o("mobilebert"),WPo=o(" \u2014 "),nO=a("a"),QPo=o("MobileBertForMultipleChoice"),HPo=o(" (MobileBERT model)"),UPo=l(),Yb=a("li"),Nme=a("strong"),JPo=o("mpnet"),YPo=o(" \u2014 "),sO=a("a"),KPo=o("MPNetForMultipleChoice"),ZPo=o(" (MPNet model)"),eIo=l(),Kb=a("li"),jme=a("strong"),oIo=o("nystromformer"),rIo=o(" \u2014 "),lO=a("a"),tIo=o("NystromformerForMultipleChoice"),aIo=o(" (Nystromformer model)"),nIo=l(),Zb=a("li"),Dme=a("strong"),sIo=o("qdqbert"),lIo=o(" \u2014 "),iO=a("a"),iIo=o("QDQBertForMultipleChoice"),dIo=o(" (QDQBert model)"),cIo=l(),ev=a("li"),Gme=a("strong"),fIo=o("rembert"),mIo=o(" \u2014 "),dO=a("a"),gIo=o("RemBertForMultipleChoice"),hIo=o(" (RemBERT model)"),pIo=l(),ov=a("li"),Ome=a("strong"),_Io=o("roberta"),uIo=o(" \u2014 "),cO=a("a"),bIo=o("RobertaForMultipleChoice"),vIo=o(" (RoBERTa model)"),FIo=l(),rv=a("li"),Vme=a("strong"),TIo=o("roformer"),MIo=o(" \u2014 "),fO=a("a"),EIo=o("RoFormerForMultipleChoice"),CIo=o(" (RoFormer model)"),wIo=l(),tv=a("li"),Xme=a("strong"),AIo=o("squeezebert"),yIo=o(" \u2014 "),mO=a("a"),LIo=o("SqueezeBertForMultipleChoice"),xIo=o(" (SqueezeBERT model)"),$Io=l(),av=a("li"),zme=a("strong"),kIo=o("xlm"),SIo=o(" \u2014 "),gO=a("a"),RIo=o("XLMForMultipleChoice"),BIo=o(" (XLM model)"),PIo=l(),nv=a("li"),Wme=a("strong"),IIo=o("xlm-roberta"),qIo=o(" \u2014 "),hO=a("a"),NIo=o("XLMRobertaForMultipleChoice"),jIo=o(" (XLM-RoBERTa model)"),DIo=l(),sv=a("li"),Qme=a("strong"),GIo=o("xlm-roberta-xl"),OIo=o(" \u2014 "),pO=a("a"),VIo=o("XLMRobertaXLForMultipleChoice"),XIo=o(" (XLM-RoBERTa-XL model)"),zIo=l(),lv=a("li"),Hme=a("strong"),WIo=o("xlnet"),QIo=o(" \u2014 "),_O=a("a"),HIo=o("XLNetForMultipleChoice"),UIo=o(" (XLNet model)"),JIo=l(),iv=a("li"),Ume=a("strong"),YIo=o("yoso"),KIo=o(" \u2014 "),uO=a("a"),ZIo=o("YosoForMultipleChoice"),eqo=o(" (YOSO model)"),oqo=l(),dv=a("p"),rqo=o("The model is set in evaluation mode by default using "),Jme=a("code"),tqo=o("model.eval()"),aqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yme=a("code"),nqo=o("model.train()"),sqo=l(),F(cv.$$.fragment),Wqe=l(),zi=a("h2"),fv=a("a"),Kme=a("span"),F(Ay.$$.fragment),lqo=l(),Zme=a("span"),iqo=o("AutoModelForNextSentencePrediction"),Qqe=l(),Po=a("div"),F(yy.$$.fragment),dqo=l(),Wi=a("p"),cqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bO=a("a"),fqo=o("from_pretrained()"),mqo=o(" class method or the "),vO=a("a"),gqo=o("from_config()"),hqo=o(` class
method.`),pqo=l(),Ly=a("p"),_qo=o("This class cannot be instantiated directly using "),ege=a("code"),uqo=o("__init__()"),bqo=o(" (throws an error)."),vqo=l(),ct=a("div"),F(xy.$$.fragment),Fqo=l(),oge=a("p"),Tqo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Mqo=l(),Qi=a("p"),Eqo=o(`Note:
Loading a model from its configuration file does `),rge=a("strong"),Cqo=o("not"),wqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=a("a"),Aqo=o("from_pretrained()"),yqo=o(" to load the model weights."),Lqo=l(),F(mv.$$.fragment),xqo=l(),to=a("div"),F($y.$$.fragment),$qo=l(),tge=a("p"),kqo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Sqo=l(),Pa=a("p"),Rqo=o("The model class to instantiate is selected based on the "),age=a("code"),Bqo=o("model_type"),Pqo=o(` property of the config object (either
passed as an argument or loaded from `),nge=a("code"),Iqo=o("pretrained_model_name_or_path"),qqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sge=a("code"),Nqo=o("pretrained_model_name_or_path"),jqo=o(":"),Dqo=l(),Yr=a("ul"),gv=a("li"),lge=a("strong"),Gqo=o("bert"),Oqo=o(" \u2014 "),TO=a("a"),Vqo=o("BertForNextSentencePrediction"),Xqo=o(" (BERT model)"),zqo=l(),hv=a("li"),ige=a("strong"),Wqo=o("fnet"),Qqo=o(" \u2014 "),MO=a("a"),Hqo=o("FNetForNextSentencePrediction"),Uqo=o(" (FNet model)"),Jqo=l(),pv=a("li"),dge=a("strong"),Yqo=o("megatron-bert"),Kqo=o(" \u2014 "),EO=a("a"),Zqo=o("MegatronBertForNextSentencePrediction"),eNo=o(" (MegatronBert model)"),oNo=l(),_v=a("li"),cge=a("strong"),rNo=o("mobilebert"),tNo=o(" \u2014 "),CO=a("a"),aNo=o("MobileBertForNextSentencePrediction"),nNo=o(" (MobileBERT model)"),sNo=l(),uv=a("li"),fge=a("strong"),lNo=o("qdqbert"),iNo=o(" \u2014 "),wO=a("a"),dNo=o("QDQBertForNextSentencePrediction"),cNo=o(" (QDQBert model)"),fNo=l(),bv=a("p"),mNo=o("The model is set in evaluation mode by default using "),mge=a("code"),gNo=o("model.eval()"),hNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gge=a("code"),pNo=o("model.train()"),_No=l(),F(vv.$$.fragment),Hqe=l(),Hi=a("h2"),Fv=a("a"),hge=a("span"),F(ky.$$.fragment),uNo=l(),pge=a("span"),bNo=o("AutoModelForTokenClassification"),Uqe=l(),Io=a("div"),F(Sy.$$.fragment),vNo=l(),Ui=a("p"),FNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),AO=a("a"),TNo=o("from_pretrained()"),MNo=o(" class method or the "),yO=a("a"),ENo=o("from_config()"),CNo=o(` class
method.`),wNo=l(),Ry=a("p"),ANo=o("This class cannot be instantiated directly using "),_ge=a("code"),yNo=o("__init__()"),LNo=o(" (throws an error)."),xNo=l(),ft=a("div"),F(By.$$.fragment),$No=l(),uge=a("p"),kNo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),SNo=l(),Ji=a("p"),RNo=o(`Note:
Loading a model from its configuration file does `),bge=a("strong"),BNo=o("not"),PNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LO=a("a"),INo=o("from_pretrained()"),qNo=o(" to load the model weights."),NNo=l(),F(Tv.$$.fragment),jNo=l(),ao=a("div"),F(Py.$$.fragment),DNo=l(),vge=a("p"),GNo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ONo=l(),Ia=a("p"),VNo=o("The model class to instantiate is selected based on the "),Fge=a("code"),XNo=o("model_type"),zNo=o(` property of the config object (either
passed as an argument or loaded from `),Tge=a("code"),WNo=o("pretrained_model_name_or_path"),QNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mge=a("code"),HNo=o("pretrained_model_name_or_path"),UNo=o(":"),JNo=l(),U=a("ul"),Mv=a("li"),Ege=a("strong"),YNo=o("albert"),KNo=o(" \u2014 "),xO=a("a"),ZNo=o("AlbertForTokenClassification"),ejo=o(" (ALBERT model)"),ojo=l(),Ev=a("li"),Cge=a("strong"),rjo=o("bert"),tjo=o(" \u2014 "),$O=a("a"),ajo=o("BertForTokenClassification"),njo=o(" (BERT model)"),sjo=l(),Cv=a("li"),wge=a("strong"),ljo=o("big_bird"),ijo=o(" \u2014 "),kO=a("a"),djo=o("BigBirdForTokenClassification"),cjo=o(" (BigBird model)"),fjo=l(),wv=a("li"),Age=a("strong"),mjo=o("camembert"),gjo=o(" \u2014 "),SO=a("a"),hjo=o("CamembertForTokenClassification"),pjo=o(" (CamemBERT model)"),_jo=l(),Av=a("li"),yge=a("strong"),ujo=o("canine"),bjo=o(" \u2014 "),RO=a("a"),vjo=o("CanineForTokenClassification"),Fjo=o(" (Canine model)"),Tjo=l(),yv=a("li"),Lge=a("strong"),Mjo=o("convbert"),Ejo=o(" \u2014 "),BO=a("a"),Cjo=o("ConvBertForTokenClassification"),wjo=o(" (ConvBERT model)"),Ajo=l(),Lv=a("li"),xge=a("strong"),yjo=o("data2vec-text"),Ljo=o(" \u2014 "),PO=a("a"),xjo=o("Data2VecTextForTokenClassification"),$jo=o(" (Data2VecText model)"),kjo=l(),xv=a("li"),$ge=a("strong"),Sjo=o("deberta"),Rjo=o(" \u2014 "),IO=a("a"),Bjo=o("DebertaForTokenClassification"),Pjo=o(" (DeBERTa model)"),Ijo=l(),$v=a("li"),kge=a("strong"),qjo=o("deberta-v2"),Njo=o(" \u2014 "),qO=a("a"),jjo=o("DebertaV2ForTokenClassification"),Djo=o(" (DeBERTa-v2 model)"),Gjo=l(),kv=a("li"),Sge=a("strong"),Ojo=o("distilbert"),Vjo=o(" \u2014 "),NO=a("a"),Xjo=o("DistilBertForTokenClassification"),zjo=o(" (DistilBERT model)"),Wjo=l(),Sv=a("li"),Rge=a("strong"),Qjo=o("electra"),Hjo=o(" \u2014 "),jO=a("a"),Ujo=o("ElectraForTokenClassification"),Jjo=o(" (ELECTRA model)"),Yjo=l(),Rv=a("li"),Bge=a("strong"),Kjo=o("flaubert"),Zjo=o(" \u2014 "),DO=a("a"),eDo=o("FlaubertForTokenClassification"),oDo=o(" (FlauBERT model)"),rDo=l(),Bv=a("li"),Pge=a("strong"),tDo=o("fnet"),aDo=o(" \u2014 "),GO=a("a"),nDo=o("FNetForTokenClassification"),sDo=o(" (FNet model)"),lDo=l(),Pv=a("li"),Ige=a("strong"),iDo=o("funnel"),dDo=o(" \u2014 "),OO=a("a"),cDo=o("FunnelForTokenClassification"),fDo=o(" (Funnel Transformer model)"),mDo=l(),Iv=a("li"),qge=a("strong"),gDo=o("gpt2"),hDo=o(" \u2014 "),VO=a("a"),pDo=o("GPT2ForTokenClassification"),_Do=o(" (OpenAI GPT-2 model)"),uDo=l(),qv=a("li"),Nge=a("strong"),bDo=o("ibert"),vDo=o(" \u2014 "),XO=a("a"),FDo=o("IBertForTokenClassification"),TDo=o(" (I-BERT model)"),MDo=l(),Nv=a("li"),jge=a("strong"),EDo=o("layoutlm"),CDo=o(" \u2014 "),zO=a("a"),wDo=o("LayoutLMForTokenClassification"),ADo=o(" (LayoutLM model)"),yDo=l(),jv=a("li"),Dge=a("strong"),LDo=o("layoutlmv2"),xDo=o(" \u2014 "),WO=a("a"),$Do=o("LayoutLMv2ForTokenClassification"),kDo=o(" (LayoutLMv2 model)"),SDo=l(),Dv=a("li"),Gge=a("strong"),RDo=o("longformer"),BDo=o(" \u2014 "),QO=a("a"),PDo=o("LongformerForTokenClassification"),IDo=o(" (Longformer model)"),qDo=l(),Gv=a("li"),Oge=a("strong"),NDo=o("megatron-bert"),jDo=o(" \u2014 "),HO=a("a"),DDo=o("MegatronBertForTokenClassification"),GDo=o(" (MegatronBert model)"),ODo=l(),Ov=a("li"),Vge=a("strong"),VDo=o("mobilebert"),XDo=o(" \u2014 "),UO=a("a"),zDo=o("MobileBertForTokenClassification"),WDo=o(" (MobileBERT model)"),QDo=l(),Vv=a("li"),Xge=a("strong"),HDo=o("mpnet"),UDo=o(" \u2014 "),JO=a("a"),JDo=o("MPNetForTokenClassification"),YDo=o(" (MPNet model)"),KDo=l(),Xv=a("li"),zge=a("strong"),ZDo=o("nystromformer"),eGo=o(" \u2014 "),YO=a("a"),oGo=o("NystromformerForTokenClassification"),rGo=o(" (Nystromformer model)"),tGo=l(),zv=a("li"),Wge=a("strong"),aGo=o("qdqbert"),nGo=o(" \u2014 "),KO=a("a"),sGo=o("QDQBertForTokenClassification"),lGo=o(" (QDQBert model)"),iGo=l(),Wv=a("li"),Qge=a("strong"),dGo=o("rembert"),cGo=o(" \u2014 "),ZO=a("a"),fGo=o("RemBertForTokenClassification"),mGo=o(" (RemBERT model)"),gGo=l(),Qv=a("li"),Hge=a("strong"),hGo=o("roberta"),pGo=o(" \u2014 "),eV=a("a"),_Go=o("RobertaForTokenClassification"),uGo=o(" (RoBERTa model)"),bGo=l(),Hv=a("li"),Uge=a("strong"),vGo=o("roformer"),FGo=o(" \u2014 "),oV=a("a"),TGo=o("RoFormerForTokenClassification"),MGo=o(" (RoFormer model)"),EGo=l(),Uv=a("li"),Jge=a("strong"),CGo=o("squeezebert"),wGo=o(" \u2014 "),rV=a("a"),AGo=o("SqueezeBertForTokenClassification"),yGo=o(" (SqueezeBERT model)"),LGo=l(),Jv=a("li"),Yge=a("strong"),xGo=o("xlm"),$Go=o(" \u2014 "),tV=a("a"),kGo=o("XLMForTokenClassification"),SGo=o(" (XLM model)"),RGo=l(),Yv=a("li"),Kge=a("strong"),BGo=o("xlm-roberta"),PGo=o(" \u2014 "),aV=a("a"),IGo=o("XLMRobertaForTokenClassification"),qGo=o(" (XLM-RoBERTa model)"),NGo=l(),Kv=a("li"),Zge=a("strong"),jGo=o("xlm-roberta-xl"),DGo=o(" \u2014 "),nV=a("a"),GGo=o("XLMRobertaXLForTokenClassification"),OGo=o(" (XLM-RoBERTa-XL model)"),VGo=l(),Zv=a("li"),ehe=a("strong"),XGo=o("xlnet"),zGo=o(" \u2014 "),sV=a("a"),WGo=o("XLNetForTokenClassification"),QGo=o(" (XLNet model)"),HGo=l(),eF=a("li"),ohe=a("strong"),UGo=o("yoso"),JGo=o(" \u2014 "),lV=a("a"),YGo=o("YosoForTokenClassification"),KGo=o(" (YOSO model)"),ZGo=l(),oF=a("p"),eOo=o("The model is set in evaluation mode by default using "),rhe=a("code"),oOo=o("model.eval()"),rOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),the=a("code"),tOo=o("model.train()"),aOo=l(),F(rF.$$.fragment),Jqe=l(),Yi=a("h2"),tF=a("a"),ahe=a("span"),F(Iy.$$.fragment),nOo=l(),nhe=a("span"),sOo=o("AutoModelForQuestionAnswering"),Yqe=l(),qo=a("div"),F(qy.$$.fragment),lOo=l(),Ki=a("p"),iOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iV=a("a"),dOo=o("from_pretrained()"),cOo=o(" class method or the "),dV=a("a"),fOo=o("from_config()"),mOo=o(` class
method.`),gOo=l(),Ny=a("p"),hOo=o("This class cannot be instantiated directly using "),she=a("code"),pOo=o("__init__()"),_Oo=o(" (throws an error)."),uOo=l(),mt=a("div"),F(jy.$$.fragment),bOo=l(),lhe=a("p"),vOo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),FOo=l(),Zi=a("p"),TOo=o(`Note:
Loading a model from its configuration file does `),ihe=a("strong"),MOo=o("not"),EOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=a("a"),COo=o("from_pretrained()"),wOo=o(" to load the model weights."),AOo=l(),F(aF.$$.fragment),yOo=l(),no=a("div"),F(Dy.$$.fragment),LOo=l(),dhe=a("p"),xOo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$Oo=l(),qa=a("p"),kOo=o("The model class to instantiate is selected based on the "),che=a("code"),SOo=o("model_type"),ROo=o(` property of the config object (either
passed as an argument or loaded from `),fhe=a("code"),BOo=o("pretrained_model_name_or_path"),POo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=a("code"),IOo=o("pretrained_model_name_or_path"),qOo=o(":"),NOo=l(),V=a("ul"),nF=a("li"),ghe=a("strong"),jOo=o("albert"),DOo=o(" \u2014 "),fV=a("a"),GOo=o("AlbertForQuestionAnswering"),OOo=o(" (ALBERT model)"),VOo=l(),sF=a("li"),hhe=a("strong"),XOo=o("bart"),zOo=o(" \u2014 "),mV=a("a"),WOo=o("BartForQuestionAnswering"),QOo=o(" (BART model)"),HOo=l(),lF=a("li"),phe=a("strong"),UOo=o("bert"),JOo=o(" \u2014 "),gV=a("a"),YOo=o("BertForQuestionAnswering"),KOo=o(" (BERT model)"),ZOo=l(),iF=a("li"),_he=a("strong"),eVo=o("big_bird"),oVo=o(" \u2014 "),hV=a("a"),rVo=o("BigBirdForQuestionAnswering"),tVo=o(" (BigBird model)"),aVo=l(),dF=a("li"),uhe=a("strong"),nVo=o("bigbird_pegasus"),sVo=o(" \u2014 "),pV=a("a"),lVo=o("BigBirdPegasusForQuestionAnswering"),iVo=o(" (BigBirdPegasus model)"),dVo=l(),cF=a("li"),bhe=a("strong"),cVo=o("camembert"),fVo=o(" \u2014 "),_V=a("a"),mVo=o("CamembertForQuestionAnswering"),gVo=o(" (CamemBERT model)"),hVo=l(),fF=a("li"),vhe=a("strong"),pVo=o("canine"),_Vo=o(" \u2014 "),uV=a("a"),uVo=o("CanineForQuestionAnswering"),bVo=o(" (Canine model)"),vVo=l(),mF=a("li"),Fhe=a("strong"),FVo=o("convbert"),TVo=o(" \u2014 "),bV=a("a"),MVo=o("ConvBertForQuestionAnswering"),EVo=o(" (ConvBERT model)"),CVo=l(),gF=a("li"),The=a("strong"),wVo=o("data2vec-text"),AVo=o(" \u2014 "),vV=a("a"),yVo=o("Data2VecTextForQuestionAnswering"),LVo=o(" (Data2VecText model)"),xVo=l(),hF=a("li"),Mhe=a("strong"),$Vo=o("deberta"),kVo=o(" \u2014 "),FV=a("a"),SVo=o("DebertaForQuestionAnswering"),RVo=o(" (DeBERTa model)"),BVo=l(),pF=a("li"),Ehe=a("strong"),PVo=o("deberta-v2"),IVo=o(" \u2014 "),TV=a("a"),qVo=o("DebertaV2ForQuestionAnswering"),NVo=o(" (DeBERTa-v2 model)"),jVo=l(),_F=a("li"),Che=a("strong"),DVo=o("distilbert"),GVo=o(" \u2014 "),MV=a("a"),OVo=o("DistilBertForQuestionAnswering"),VVo=o(" (DistilBERT model)"),XVo=l(),uF=a("li"),whe=a("strong"),zVo=o("electra"),WVo=o(" \u2014 "),EV=a("a"),QVo=o("ElectraForQuestionAnswering"),HVo=o(" (ELECTRA model)"),UVo=l(),bF=a("li"),Ahe=a("strong"),JVo=o("flaubert"),YVo=o(" \u2014 "),CV=a("a"),KVo=o("FlaubertForQuestionAnsweringSimple"),ZVo=o(" (FlauBERT model)"),eXo=l(),vF=a("li"),yhe=a("strong"),oXo=o("fnet"),rXo=o(" \u2014 "),wV=a("a"),tXo=o("FNetForQuestionAnswering"),aXo=o(" (FNet model)"),nXo=l(),FF=a("li"),Lhe=a("strong"),sXo=o("funnel"),lXo=o(" \u2014 "),AV=a("a"),iXo=o("FunnelForQuestionAnswering"),dXo=o(" (Funnel Transformer model)"),cXo=l(),TF=a("li"),xhe=a("strong"),fXo=o("gptj"),mXo=o(" \u2014 "),yV=a("a"),gXo=o("GPTJForQuestionAnswering"),hXo=o(" (GPT-J model)"),pXo=l(),MF=a("li"),$he=a("strong"),_Xo=o("ibert"),uXo=o(" \u2014 "),LV=a("a"),bXo=o("IBertForQuestionAnswering"),vXo=o(" (I-BERT model)"),FXo=l(),EF=a("li"),khe=a("strong"),TXo=o("layoutlmv2"),MXo=o(" \u2014 "),xV=a("a"),EXo=o("LayoutLMv2ForQuestionAnswering"),CXo=o(" (LayoutLMv2 model)"),wXo=l(),CF=a("li"),She=a("strong"),AXo=o("led"),yXo=o(" \u2014 "),$V=a("a"),LXo=o("LEDForQuestionAnswering"),xXo=o(" (LED model)"),$Xo=l(),wF=a("li"),Rhe=a("strong"),kXo=o("longformer"),SXo=o(" \u2014 "),kV=a("a"),RXo=o("LongformerForQuestionAnswering"),BXo=o(" (Longformer model)"),PXo=l(),AF=a("li"),Bhe=a("strong"),IXo=o("lxmert"),qXo=o(" \u2014 "),SV=a("a"),NXo=o("LxmertForQuestionAnswering"),jXo=o(" (LXMERT model)"),DXo=l(),yF=a("li"),Phe=a("strong"),GXo=o("mbart"),OXo=o(" \u2014 "),RV=a("a"),VXo=o("MBartForQuestionAnswering"),XXo=o(" (mBART model)"),zXo=l(),LF=a("li"),Ihe=a("strong"),WXo=o("megatron-bert"),QXo=o(" \u2014 "),BV=a("a"),HXo=o("MegatronBertForQuestionAnswering"),UXo=o(" (MegatronBert model)"),JXo=l(),xF=a("li"),qhe=a("strong"),YXo=o("mobilebert"),KXo=o(" \u2014 "),PV=a("a"),ZXo=o("MobileBertForQuestionAnswering"),ezo=o(" (MobileBERT model)"),ozo=l(),$F=a("li"),Nhe=a("strong"),rzo=o("mpnet"),tzo=o(" \u2014 "),IV=a("a"),azo=o("MPNetForQuestionAnswering"),nzo=o(" (MPNet model)"),szo=l(),kF=a("li"),jhe=a("strong"),lzo=o("nystromformer"),izo=o(" \u2014 "),qV=a("a"),dzo=o("NystromformerForQuestionAnswering"),czo=o(" (Nystromformer model)"),fzo=l(),SF=a("li"),Dhe=a("strong"),mzo=o("qdqbert"),gzo=o(" \u2014 "),NV=a("a"),hzo=o("QDQBertForQuestionAnswering"),pzo=o(" (QDQBert model)"),_zo=l(),RF=a("li"),Ghe=a("strong"),uzo=o("reformer"),bzo=o(" \u2014 "),jV=a("a"),vzo=o("ReformerForQuestionAnswering"),Fzo=o(" (Reformer model)"),Tzo=l(),BF=a("li"),Ohe=a("strong"),Mzo=o("rembert"),Ezo=o(" \u2014 "),DV=a("a"),Czo=o("RemBertForQuestionAnswering"),wzo=o(" (RemBERT model)"),Azo=l(),PF=a("li"),Vhe=a("strong"),yzo=o("roberta"),Lzo=o(" \u2014 "),GV=a("a"),xzo=o("RobertaForQuestionAnswering"),$zo=o(" (RoBERTa model)"),kzo=l(),IF=a("li"),Xhe=a("strong"),Szo=o("roformer"),Rzo=o(" \u2014 "),OV=a("a"),Bzo=o("RoFormerForQuestionAnswering"),Pzo=o(" (RoFormer model)"),Izo=l(),qF=a("li"),zhe=a("strong"),qzo=o("splinter"),Nzo=o(" \u2014 "),VV=a("a"),jzo=o("SplinterForQuestionAnswering"),Dzo=o(" (Splinter model)"),Gzo=l(),NF=a("li"),Whe=a("strong"),Ozo=o("squeezebert"),Vzo=o(" \u2014 "),XV=a("a"),Xzo=o("SqueezeBertForQuestionAnswering"),zzo=o(" (SqueezeBERT model)"),Wzo=l(),jF=a("li"),Qhe=a("strong"),Qzo=o("xlm"),Hzo=o(" \u2014 "),zV=a("a"),Uzo=o("XLMForQuestionAnsweringSimple"),Jzo=o(" (XLM model)"),Yzo=l(),DF=a("li"),Hhe=a("strong"),Kzo=o("xlm-roberta"),Zzo=o(" \u2014 "),WV=a("a"),eWo=o("XLMRobertaForQuestionAnswering"),oWo=o(" (XLM-RoBERTa model)"),rWo=l(),GF=a("li"),Uhe=a("strong"),tWo=o("xlm-roberta-xl"),aWo=o(" \u2014 "),QV=a("a"),nWo=o("XLMRobertaXLForQuestionAnswering"),sWo=o(" (XLM-RoBERTa-XL model)"),lWo=l(),OF=a("li"),Jhe=a("strong"),iWo=o("xlnet"),dWo=o(" \u2014 "),HV=a("a"),cWo=o("XLNetForQuestionAnsweringSimple"),fWo=o(" (XLNet model)"),mWo=l(),VF=a("li"),Yhe=a("strong"),gWo=o("yoso"),hWo=o(" \u2014 "),UV=a("a"),pWo=o("YosoForQuestionAnswering"),_Wo=o(" (YOSO model)"),uWo=l(),XF=a("p"),bWo=o("The model is set in evaluation mode by default using "),Khe=a("code"),vWo=o("model.eval()"),FWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=a("code"),TWo=o("model.train()"),MWo=l(),F(zF.$$.fragment),Kqe=l(),ed=a("h2"),WF=a("a"),epe=a("span"),F(Gy.$$.fragment),EWo=l(),ope=a("span"),CWo=o("AutoModelForTableQuestionAnswering"),Zqe=l(),No=a("div"),F(Oy.$$.fragment),wWo=l(),od=a("p"),AWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),JV=a("a"),yWo=o("from_pretrained()"),LWo=o(" class method or the "),YV=a("a"),xWo=o("from_config()"),$Wo=o(` class
method.`),kWo=l(),Vy=a("p"),SWo=o("This class cannot be instantiated directly using "),rpe=a("code"),RWo=o("__init__()"),BWo=o(" (throws an error)."),PWo=l(),gt=a("div"),F(Xy.$$.fragment),IWo=l(),tpe=a("p"),qWo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),NWo=l(),rd=a("p"),jWo=o(`Note:
Loading a model from its configuration file does `),ape=a("strong"),DWo=o("not"),GWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=a("a"),OWo=o("from_pretrained()"),VWo=o(" to load the model weights."),XWo=l(),F(QF.$$.fragment),zWo=l(),so=a("div"),F(zy.$$.fragment),WWo=l(),npe=a("p"),QWo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),HWo=l(),Na=a("p"),UWo=o("The model class to instantiate is selected based on the "),spe=a("code"),JWo=o("model_type"),YWo=o(` property of the config object (either
passed as an argument or loaded from `),lpe=a("code"),KWo=o("pretrained_model_name_or_path"),ZWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=a("code"),eQo=o("pretrained_model_name_or_path"),oQo=o(":"),rQo=l(),dpe=a("ul"),HF=a("li"),cpe=a("strong"),tQo=o("tapas"),aQo=o(" \u2014 "),ZV=a("a"),nQo=o("TapasForQuestionAnswering"),sQo=o(" (TAPAS model)"),lQo=l(),UF=a("p"),iQo=o("The model is set in evaluation mode by default using "),fpe=a("code"),dQo=o("model.eval()"),cQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=a("code"),fQo=o("model.train()"),mQo=l(),F(JF.$$.fragment),eNe=l(),td=a("h2"),YF=a("a"),gpe=a("span"),F(Wy.$$.fragment),gQo=l(),hpe=a("span"),hQo=o("AutoModelForImageClassification"),oNe=l(),jo=a("div"),F(Qy.$$.fragment),pQo=l(),ad=a("p"),_Qo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),eX=a("a"),uQo=o("from_pretrained()"),bQo=o(" class method or the "),oX=a("a"),vQo=o("from_config()"),FQo=o(` class
method.`),TQo=l(),Hy=a("p"),MQo=o("This class cannot be instantiated directly using "),ppe=a("code"),EQo=o("__init__()"),CQo=o(" (throws an error)."),wQo=l(),ht=a("div"),F(Uy.$$.fragment),AQo=l(),_pe=a("p"),yQo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),LQo=l(),nd=a("p"),xQo=o(`Note:
Loading a model from its configuration file does `),upe=a("strong"),$Qo=o("not"),kQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=a("a"),SQo=o("from_pretrained()"),RQo=o(" to load the model weights."),BQo=l(),F(KF.$$.fragment),PQo=l(),lo=a("div"),F(Jy.$$.fragment),IQo=l(),bpe=a("p"),qQo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),NQo=l(),ja=a("p"),jQo=o("The model class to instantiate is selected based on the "),vpe=a("code"),DQo=o("model_type"),GQo=o(` property of the config object (either
passed as an argument or loaded from `),Fpe=a("code"),OQo=o("pretrained_model_name_or_path"),VQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=a("code"),XQo=o("pretrained_model_name_or_path"),zQo=o(":"),WQo=l(),Fe=a("ul"),ZF=a("li"),Mpe=a("strong"),QQo=o("beit"),HQo=o(" \u2014 "),tX=a("a"),UQo=o("BeitForImageClassification"),JQo=o(" (BEiT model)"),YQo=l(),e0=a("li"),Epe=a("strong"),KQo=o("convnext"),ZQo=o(" \u2014 "),aX=a("a"),eHo=o("ConvNextForImageClassification"),oHo=o(" (ConvNext model)"),rHo=l(),o0=a("li"),Cpe=a("strong"),tHo=o("cvt"),aHo=o(" \u2014 "),nX=a("a"),nHo=o("CvtForImageClassification"),sHo=o(" (CvT model)"),lHo=l(),r0=a("li"),wpe=a("strong"),iHo=o("data2vec-vision"),dHo=o(" \u2014 "),sX=a("a"),cHo=o("Data2VecVisionForImageClassification"),fHo=o(" (Data2VecVision model)"),mHo=l(),Bs=a("li"),Ape=a("strong"),gHo=o("deit"),hHo=o(" \u2014 "),lX=a("a"),pHo=o("DeiTForImageClassification"),_Ho=o(" or "),iX=a("a"),uHo=o("DeiTForImageClassificationWithTeacher"),bHo=o(" (DeiT model)"),vHo=l(),t0=a("li"),ype=a("strong"),FHo=o("imagegpt"),THo=o(" \u2014 "),dX=a("a"),MHo=o("ImageGPTForImageClassification"),EHo=o(" (ImageGPT model)"),CHo=l(),pt=a("li"),Lpe=a("strong"),wHo=o("perceiver"),AHo=o(" \u2014 "),cX=a("a"),yHo=o("PerceiverForImageClassificationLearned"),LHo=o(" or "),fX=a("a"),xHo=o("PerceiverForImageClassificationFourier"),$Ho=o(" or "),mX=a("a"),kHo=o("PerceiverForImageClassificationConvProcessing"),SHo=o(" (Perceiver model)"),RHo=l(),a0=a("li"),xpe=a("strong"),BHo=o("poolformer"),PHo=o(" \u2014 "),gX=a("a"),IHo=o("PoolFormerForImageClassification"),qHo=o(" (PoolFormer model)"),NHo=l(),n0=a("li"),$pe=a("strong"),jHo=o("regnet"),DHo=o(" \u2014 "),hX=a("a"),GHo=o("RegNetForImageClassification"),OHo=o(" (RegNet model)"),VHo=l(),s0=a("li"),kpe=a("strong"),XHo=o("resnet"),zHo=o(" \u2014 "),pX=a("a"),WHo=o("ResNetForImageClassification"),QHo=o(" (ResNet model)"),HHo=l(),l0=a("li"),Spe=a("strong"),UHo=o("segformer"),JHo=o(" \u2014 "),_X=a("a"),YHo=o("SegformerForImageClassification"),KHo=o(" (SegFormer model)"),ZHo=l(),i0=a("li"),Rpe=a("strong"),eUo=o("swin"),oUo=o(" \u2014 "),uX=a("a"),rUo=o("SwinForImageClassification"),tUo=o(" (Swin model)"),aUo=l(),d0=a("li"),Bpe=a("strong"),nUo=o("van"),sUo=o(" \u2014 "),bX=a("a"),lUo=o("VanForImageClassification"),iUo=o(" (VAN model)"),dUo=l(),c0=a("li"),Ppe=a("strong"),cUo=o("vit"),fUo=o(" \u2014 "),vX=a("a"),mUo=o("ViTForImageClassification"),gUo=o(" (ViT model)"),hUo=l(),f0=a("p"),pUo=o("The model is set in evaluation mode by default using "),Ipe=a("code"),_Uo=o("model.eval()"),uUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=a("code"),bUo=o("model.train()"),vUo=l(),F(m0.$$.fragment),rNe=l(),sd=a("h2"),g0=a("a"),Npe=a("span"),F(Yy.$$.fragment),FUo=l(),jpe=a("span"),TUo=o("AutoModelForVision2Seq"),tNe=l(),Do=a("div"),F(Ky.$$.fragment),MUo=l(),ld=a("p"),EUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FX=a("a"),CUo=o("from_pretrained()"),wUo=o(" class method or the "),TX=a("a"),AUo=o("from_config()"),yUo=o(` class
method.`),LUo=l(),Zy=a("p"),xUo=o("This class cannot be instantiated directly using "),Dpe=a("code"),$Uo=o("__init__()"),kUo=o(" (throws an error)."),SUo=l(),_t=a("div"),F(eL.$$.fragment),RUo=l(),Gpe=a("p"),BUo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),PUo=l(),id=a("p"),IUo=o(`Note:
Loading a model from its configuration file does `),Ope=a("strong"),qUo=o("not"),NUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),jUo=o("from_pretrained()"),DUo=o(" to load the model weights."),GUo=l(),F(h0.$$.fragment),OUo=l(),io=a("div"),F(oL.$$.fragment),VUo=l(),Vpe=a("p"),XUo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zUo=l(),Da=a("p"),WUo=o("The model class to instantiate is selected based on the "),Xpe=a("code"),QUo=o("model_type"),HUo=o(` property of the config object (either
passed as an argument or loaded from `),zpe=a("code"),UUo=o("pretrained_model_name_or_path"),JUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=a("code"),YUo=o("pretrained_model_name_or_path"),KUo=o(":"),ZUo=l(),Qpe=a("ul"),p0=a("li"),Hpe=a("strong"),eJo=o("vision-encoder-decoder"),oJo=o(" \u2014 "),EX=a("a"),rJo=o("VisionEncoderDecoderModel"),tJo=o(" (Vision Encoder decoder model)"),aJo=l(),_0=a("p"),nJo=o("The model is set in evaluation mode by default using "),Upe=a("code"),sJo=o("model.eval()"),lJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=a("code"),iJo=o("model.train()"),dJo=l(),F(u0.$$.fragment),aNe=l(),dd=a("h2"),b0=a("a"),Ype=a("span"),F(rL.$$.fragment),cJo=l(),Kpe=a("span"),fJo=o("AutoModelForAudioClassification"),nNe=l(),Go=a("div"),F(tL.$$.fragment),mJo=l(),cd=a("p"),gJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),CX=a("a"),hJo=o("from_pretrained()"),pJo=o(" class method or the "),wX=a("a"),_Jo=o("from_config()"),uJo=o(` class
method.`),bJo=l(),aL=a("p"),vJo=o("This class cannot be instantiated directly using "),Zpe=a("code"),FJo=o("__init__()"),TJo=o(" (throws an error)."),MJo=l(),ut=a("div"),F(nL.$$.fragment),EJo=l(),e_e=a("p"),CJo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),wJo=l(),fd=a("p"),AJo=o(`Note:
Loading a model from its configuration file does `),o_e=a("strong"),yJo=o("not"),LJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=a("a"),xJo=o("from_pretrained()"),$Jo=o(" to load the model weights."),kJo=l(),F(v0.$$.fragment),SJo=l(),co=a("div"),F(sL.$$.fragment),RJo=l(),r_e=a("p"),BJo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),PJo=l(),Ga=a("p"),IJo=o("The model class to instantiate is selected based on the "),t_e=a("code"),qJo=o("model_type"),NJo=o(` property of the config object (either
passed as an argument or loaded from `),a_e=a("code"),jJo=o("pretrained_model_name_or_path"),DJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=a("code"),GJo=o("pretrained_model_name_or_path"),OJo=o(":"),VJo=l(),ke=a("ul"),F0=a("li"),s_e=a("strong"),XJo=o("data2vec-audio"),zJo=o(" \u2014 "),yX=a("a"),WJo=o("Data2VecAudioForSequenceClassification"),QJo=o(" (Data2VecAudio model)"),HJo=l(),T0=a("li"),l_e=a("strong"),UJo=o("hubert"),JJo=o(" \u2014 "),LX=a("a"),YJo=o("HubertForSequenceClassification"),KJo=o(" (Hubert model)"),ZJo=l(),M0=a("li"),i_e=a("strong"),eYo=o("sew"),oYo=o(" \u2014 "),xX=a("a"),rYo=o("SEWForSequenceClassification"),tYo=o(" (SEW model)"),aYo=l(),E0=a("li"),d_e=a("strong"),nYo=o("sew-d"),sYo=o(" \u2014 "),$X=a("a"),lYo=o("SEWDForSequenceClassification"),iYo=o(" (SEW-D model)"),dYo=l(),C0=a("li"),c_e=a("strong"),cYo=o("unispeech"),fYo=o(" \u2014 "),kX=a("a"),mYo=o("UniSpeechForSequenceClassification"),gYo=o(" (UniSpeech model)"),hYo=l(),w0=a("li"),f_e=a("strong"),pYo=o("unispeech-sat"),_Yo=o(" \u2014 "),SX=a("a"),uYo=o("UniSpeechSatForSequenceClassification"),bYo=o(" (UniSpeechSat model)"),vYo=l(),A0=a("li"),m_e=a("strong"),FYo=o("wav2vec2"),TYo=o(" \u2014 "),RX=a("a"),MYo=o("Wav2Vec2ForSequenceClassification"),EYo=o(" (Wav2Vec2 model)"),CYo=l(),y0=a("li"),g_e=a("strong"),wYo=o("wav2vec2-conformer"),AYo=o(" \u2014 "),BX=a("a"),yYo=o("Wav2Vec2ConformerForSequenceClassification"),LYo=o(" (Wav2Vec2-Conformer model)"),xYo=l(),L0=a("li"),h_e=a("strong"),$Yo=o("wavlm"),kYo=o(" \u2014 "),PX=a("a"),SYo=o("WavLMForSequenceClassification"),RYo=o(" (WavLM model)"),BYo=l(),x0=a("p"),PYo=o("The model is set in evaluation mode by default using "),p_e=a("code"),IYo=o("model.eval()"),qYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),__e=a("code"),NYo=o("model.train()"),jYo=l(),F($0.$$.fragment),sNe=l(),md=a("h2"),k0=a("a"),u_e=a("span"),F(lL.$$.fragment),DYo=l(),b_e=a("span"),GYo=o("AutoModelForAudioFrameClassification"),lNe=l(),Oo=a("div"),F(iL.$$.fragment),OYo=l(),gd=a("p"),VYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),IX=a("a"),XYo=o("from_pretrained()"),zYo=o(" class method or the "),qX=a("a"),WYo=o("from_config()"),QYo=o(` class
method.`),HYo=l(),dL=a("p"),UYo=o("This class cannot be instantiated directly using "),v_e=a("code"),JYo=o("__init__()"),YYo=o(" (throws an error)."),KYo=l(),bt=a("div"),F(cL.$$.fragment),ZYo=l(),F_e=a("p"),eKo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),oKo=l(),hd=a("p"),rKo=o(`Note:
Loading a model from its configuration file does `),T_e=a("strong"),tKo=o("not"),aKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=a("a"),nKo=o("from_pretrained()"),sKo=o(" to load the model weights."),lKo=l(),F(S0.$$.fragment),iKo=l(),fo=a("div"),F(fL.$$.fragment),dKo=l(),M_e=a("p"),cKo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),fKo=l(),Oa=a("p"),mKo=o("The model class to instantiate is selected based on the "),E_e=a("code"),gKo=o("model_type"),hKo=o(` property of the config object (either
passed as an argument or loaded from `),C_e=a("code"),pKo=o("pretrained_model_name_or_path"),_Ko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=a("code"),uKo=o("pretrained_model_name_or_path"),bKo=o(":"),vKo=l(),Kr=a("ul"),R0=a("li"),A_e=a("strong"),FKo=o("data2vec-audio"),TKo=o(" \u2014 "),jX=a("a"),MKo=o("Data2VecAudioForAudioFrameClassification"),EKo=o(" (Data2VecAudio model)"),CKo=l(),B0=a("li"),y_e=a("strong"),wKo=o("unispeech-sat"),AKo=o(" \u2014 "),DX=a("a"),yKo=o("UniSpeechSatForAudioFrameClassification"),LKo=o(" (UniSpeechSat model)"),xKo=l(),P0=a("li"),L_e=a("strong"),$Ko=o("wav2vec2"),kKo=o(" \u2014 "),GX=a("a"),SKo=o("Wav2Vec2ForAudioFrameClassification"),RKo=o(" (Wav2Vec2 model)"),BKo=l(),I0=a("li"),x_e=a("strong"),PKo=o("wav2vec2-conformer"),IKo=o(" \u2014 "),OX=a("a"),qKo=o("Wav2Vec2ConformerForAudioFrameClassification"),NKo=o(" (Wav2Vec2-Conformer model)"),jKo=l(),q0=a("li"),$_e=a("strong"),DKo=o("wavlm"),GKo=o(" \u2014 "),VX=a("a"),OKo=o("WavLMForAudioFrameClassification"),VKo=o(" (WavLM model)"),XKo=l(),N0=a("p"),zKo=o("The model is set in evaluation mode by default using "),k_e=a("code"),WKo=o("model.eval()"),QKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S_e=a("code"),HKo=o("model.train()"),UKo=l(),F(j0.$$.fragment),iNe=l(),pd=a("h2"),D0=a("a"),R_e=a("span"),F(mL.$$.fragment),JKo=l(),B_e=a("span"),YKo=o("AutoModelForCTC"),dNe=l(),Vo=a("div"),F(gL.$$.fragment),KKo=l(),_d=a("p"),ZKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),XX=a("a"),eZo=o("from_pretrained()"),oZo=o(" class method or the "),zX=a("a"),rZo=o("from_config()"),tZo=o(` class
method.`),aZo=l(),hL=a("p"),nZo=o("This class cannot be instantiated directly using "),P_e=a("code"),sZo=o("__init__()"),lZo=o(" (throws an error)."),iZo=l(),vt=a("div"),F(pL.$$.fragment),dZo=l(),I_e=a("p"),cZo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),fZo=l(),ud=a("p"),mZo=o(`Note:
Loading a model from its configuration file does `),q_e=a("strong"),gZo=o("not"),hZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),pZo=o("from_pretrained()"),_Zo=o(" to load the model weights."),uZo=l(),F(G0.$$.fragment),bZo=l(),mo=a("div"),F(_L.$$.fragment),vZo=l(),N_e=a("p"),FZo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),TZo=l(),Va=a("p"),MZo=o("The model class to instantiate is selected based on the "),j_e=a("code"),EZo=o("model_type"),CZo=o(` property of the config object (either
passed as an argument or loaded from `),D_e=a("code"),wZo=o("pretrained_model_name_or_path"),AZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=a("code"),yZo=o("pretrained_model_name_or_path"),LZo=o(":"),xZo=l(),Se=a("ul"),O0=a("li"),O_e=a("strong"),$Zo=o("data2vec-audio"),kZo=o(" \u2014 "),QX=a("a"),SZo=o("Data2VecAudioForCTC"),RZo=o(" (Data2VecAudio model)"),BZo=l(),V0=a("li"),V_e=a("strong"),PZo=o("hubert"),IZo=o(" \u2014 "),HX=a("a"),qZo=o("HubertForCTC"),NZo=o(" (Hubert model)"),jZo=l(),X0=a("li"),X_e=a("strong"),DZo=o("sew"),GZo=o(" \u2014 "),UX=a("a"),OZo=o("SEWForCTC"),VZo=o(" (SEW model)"),XZo=l(),z0=a("li"),z_e=a("strong"),zZo=o("sew-d"),WZo=o(" \u2014 "),JX=a("a"),QZo=o("SEWDForCTC"),HZo=o(" (SEW-D model)"),UZo=l(),W0=a("li"),W_e=a("strong"),JZo=o("unispeech"),YZo=o(" \u2014 "),YX=a("a"),KZo=o("UniSpeechForCTC"),ZZo=o(" (UniSpeech model)"),eer=l(),Q0=a("li"),Q_e=a("strong"),oer=o("unispeech-sat"),rer=o(" \u2014 "),KX=a("a"),ter=o("UniSpeechSatForCTC"),aer=o(" (UniSpeechSat model)"),ner=l(),H0=a("li"),H_e=a("strong"),ser=o("wav2vec2"),ler=o(" \u2014 "),ZX=a("a"),ier=o("Wav2Vec2ForCTC"),der=o(" (Wav2Vec2 model)"),cer=l(),U0=a("li"),U_e=a("strong"),fer=o("wav2vec2-conformer"),mer=o(" \u2014 "),ez=a("a"),ger=o("Wav2Vec2ConformerForCTC"),her=o(" (Wav2Vec2-Conformer model)"),per=l(),J0=a("li"),J_e=a("strong"),_er=o("wavlm"),uer=o(" \u2014 "),oz=a("a"),ber=o("WavLMForCTC"),ver=o(" (WavLM model)"),Fer=l(),Y0=a("p"),Ter=o("The model is set in evaluation mode by default using "),Y_e=a("code"),Mer=o("model.eval()"),Eer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K_e=a("code"),Cer=o("model.train()"),wer=l(),F(K0.$$.fragment),cNe=l(),bd=a("h2"),Z0=a("a"),Z_e=a("span"),F(uL.$$.fragment),Aer=l(),eue=a("span"),yer=o("AutoModelForSpeechSeq2Seq"),fNe=l(),Xo=a("div"),F(bL.$$.fragment),Ler=l(),vd=a("p"),xer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),rz=a("a"),$er=o("from_pretrained()"),ker=o(" class method or the "),tz=a("a"),Ser=o("from_config()"),Rer=o(` class
method.`),Ber=l(),vL=a("p"),Per=o("This class cannot be instantiated directly using "),oue=a("code"),Ier=o("__init__()"),qer=o(" (throws an error)."),Ner=l(),Ft=a("div"),F(FL.$$.fragment),jer=l(),rue=a("p"),Der=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ger=l(),Fd=a("p"),Oer=o(`Note:
Loading a model from its configuration file does `),tue=a("strong"),Ver=o("not"),Xer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),az=a("a"),zer=o("from_pretrained()"),Wer=o(" to load the model weights."),Qer=l(),F(eT.$$.fragment),Her=l(),go=a("div"),F(TL.$$.fragment),Uer=l(),aue=a("p"),Jer=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Yer=l(),Xa=a("p"),Ker=o("The model class to instantiate is selected based on the "),nue=a("code"),Zer=o("model_type"),eor=o(` property of the config object (either
passed as an argument or loaded from `),sue=a("code"),oor=o("pretrained_model_name_or_path"),ror=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lue=a("code"),tor=o("pretrained_model_name_or_path"),aor=o(":"),nor=l(),ML=a("ul"),oT=a("li"),iue=a("strong"),sor=o("speech-encoder-decoder"),lor=o(" \u2014 "),nz=a("a"),ior=o("SpeechEncoderDecoderModel"),dor=o(" (Speech Encoder decoder model)"),cor=l(),rT=a("li"),due=a("strong"),mor=o("speech_to_text"),gor=o(" \u2014 "),sz=a("a"),hor=o("Speech2TextForConditionalGeneration"),por=o(" (Speech2Text model)"),_or=l(),tT=a("p"),uor=o("The model is set in evaluation mode by default using "),cue=a("code"),bor=o("model.eval()"),vor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fue=a("code"),For=o("model.train()"),Tor=l(),F(aT.$$.fragment),mNe=l(),Td=a("h2"),nT=a("a"),mue=a("span"),F(EL.$$.fragment),Mor=l(),gue=a("span"),Eor=o("AutoModelForAudioXVector"),gNe=l(),zo=a("div"),F(CL.$$.fragment),Cor=l(),Md=a("p"),wor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),lz=a("a"),Aor=o("from_pretrained()"),yor=o(" class method or the "),iz=a("a"),Lor=o("from_config()"),xor=o(` class
method.`),$or=l(),wL=a("p"),kor=o("This class cannot be instantiated directly using "),hue=a("code"),Sor=o("__init__()"),Ror=o(" (throws an error)."),Bor=l(),Tt=a("div"),F(AL.$$.fragment),Por=l(),pue=a("p"),Ior=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),qor=l(),Ed=a("p"),Nor=o(`Note:
Loading a model from its configuration file does `),_ue=a("strong"),jor=o("not"),Dor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=a("a"),Gor=o("from_pretrained()"),Oor=o(" to load the model weights."),Vor=l(),F(sT.$$.fragment),Xor=l(),ho=a("div"),F(yL.$$.fragment),zor=l(),uue=a("p"),Wor=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Qor=l(),za=a("p"),Hor=o("The model class to instantiate is selected based on the "),bue=a("code"),Uor=o("model_type"),Jor=o(` property of the config object (either
passed as an argument or loaded from `),vue=a("code"),Yor=o("pretrained_model_name_or_path"),Kor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fue=a("code"),Zor=o("pretrained_model_name_or_path"),err=o(":"),orr=l(),Zr=a("ul"),lT=a("li"),Tue=a("strong"),rrr=o("data2vec-audio"),trr=o(" \u2014 "),cz=a("a"),arr=o("Data2VecAudioForXVector"),nrr=o(" (Data2VecAudio model)"),srr=l(),iT=a("li"),Mue=a("strong"),lrr=o("unispeech-sat"),irr=o(" \u2014 "),fz=a("a"),drr=o("UniSpeechSatForXVector"),crr=o(" (UniSpeechSat model)"),frr=l(),dT=a("li"),Eue=a("strong"),mrr=o("wav2vec2"),grr=o(" \u2014 "),mz=a("a"),hrr=o("Wav2Vec2ForXVector"),prr=o(" (Wav2Vec2 model)"),_rr=l(),cT=a("li"),Cue=a("strong"),urr=o("wav2vec2-conformer"),brr=o(" \u2014 "),gz=a("a"),vrr=o("Wav2Vec2ConformerForXVector"),Frr=o(" (Wav2Vec2-Conformer model)"),Trr=l(),fT=a("li"),wue=a("strong"),Mrr=o("wavlm"),Err=o(" \u2014 "),hz=a("a"),Crr=o("WavLMForXVector"),wrr=o(" (WavLM model)"),Arr=l(),mT=a("p"),yrr=o("The model is set in evaluation mode by default using "),Aue=a("code"),Lrr=o("model.eval()"),xrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yue=a("code"),$rr=o("model.train()"),krr=l(),F(gT.$$.fragment),hNe=l(),Cd=a("h2"),hT=a("a"),Lue=a("span"),F(LL.$$.fragment),Srr=l(),xue=a("span"),Rrr=o("AutoModelForMaskedImageModeling"),pNe=l(),Wo=a("div"),F(xL.$$.fragment),Brr=l(),wd=a("p"),Prr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),pz=a("a"),Irr=o("from_pretrained()"),qrr=o(" class method or the "),_z=a("a"),Nrr=o("from_config()"),jrr=o(` class
method.`),Drr=l(),$L=a("p"),Grr=o("This class cannot be instantiated directly using "),$ue=a("code"),Orr=o("__init__()"),Vrr=o(" (throws an error)."),Xrr=l(),Mt=a("div"),F(kL.$$.fragment),zrr=l(),kue=a("p"),Wrr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Qrr=l(),Ad=a("p"),Hrr=o(`Note:
Loading a model from its configuration file does `),Sue=a("strong"),Urr=o("not"),Jrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=a("a"),Yrr=o("from_pretrained()"),Krr=o(" to load the model weights."),Zrr=l(),F(pT.$$.fragment),etr=l(),po=a("div"),F(SL.$$.fragment),otr=l(),Rue=a("p"),rtr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ttr=l(),Wa=a("p"),atr=o("The model class to instantiate is selected based on the "),Bue=a("code"),ntr=o("model_type"),str=o(` property of the config object (either
passed as an argument or loaded from `),Pue=a("code"),ltr=o("pretrained_model_name_or_path"),itr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=a("code"),dtr=o("pretrained_model_name_or_path"),ctr=o(":"),ftr=l(),yd=a("ul"),_T=a("li"),que=a("strong"),mtr=o("deit"),gtr=o(" \u2014 "),bz=a("a"),htr=o("DeiTForMaskedImageModeling"),ptr=o(" (DeiT model)"),_tr=l(),uT=a("li"),Nue=a("strong"),utr=o("swin"),btr=o(" \u2014 "),vz=a("a"),vtr=o("SwinForMaskedImageModeling"),Ftr=o(" (Swin model)"),Ttr=l(),bT=a("li"),jue=a("strong"),Mtr=o("vit"),Etr=o(" \u2014 "),Fz=a("a"),Ctr=o("ViTForMaskedImageModeling"),wtr=o(" (ViT model)"),Atr=l(),vT=a("p"),ytr=o("The model is set in evaluation mode by default using "),Due=a("code"),Ltr=o("model.eval()"),xtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=a("code"),$tr=o("model.train()"),ktr=l(),F(FT.$$.fragment),_Ne=l(),Ld=a("h2"),TT=a("a"),Oue=a("span"),F(RL.$$.fragment),Str=l(),Vue=a("span"),Rtr=o("AutoModelForObjectDetection"),uNe=l(),Qo=a("div"),F(BL.$$.fragment),Btr=l(),xd=a("p"),Ptr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Tz=a("a"),Itr=o("from_pretrained()"),qtr=o(" class method or the "),Mz=a("a"),Ntr=o("from_config()"),jtr=o(` class
method.`),Dtr=l(),PL=a("p"),Gtr=o("This class cannot be instantiated directly using "),Xue=a("code"),Otr=o("__init__()"),Vtr=o(" (throws an error)."),Xtr=l(),Et=a("div"),F(IL.$$.fragment),ztr=l(),zue=a("p"),Wtr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Qtr=l(),$d=a("p"),Htr=o(`Note:
Loading a model from its configuration file does `),Wue=a("strong"),Utr=o("not"),Jtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=a("a"),Ytr=o("from_pretrained()"),Ktr=o(" to load the model weights."),Ztr=l(),F(MT.$$.fragment),ear=l(),_o=a("div"),F(qL.$$.fragment),oar=l(),Que=a("p"),rar=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),tar=l(),Qa=a("p"),aar=o("The model class to instantiate is selected based on the "),Hue=a("code"),nar=o("model_type"),sar=o(` property of the config object (either
passed as an argument or loaded from `),Uue=a("code"),lar=o("pretrained_model_name_or_path"),iar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=a("code"),dar=o("pretrained_model_name_or_path"),car=o(":"),far=l(),NL=a("ul"),ET=a("li"),Yue=a("strong"),mar=o("detr"),gar=o(" \u2014 "),Cz=a("a"),har=o("DetrForObjectDetection"),par=o(" (DETR model)"),_ar=l(),CT=a("li"),Kue=a("strong"),uar=o("yolos"),bar=o(" \u2014 "),wz=a("a"),Far=o("YolosForObjectDetection"),Tar=o(" (YOLOS model)"),Mar=l(),wT=a("p"),Ear=o("The model is set in evaluation mode by default using "),Zue=a("code"),Car=o("model.eval()"),war=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e2e=a("code"),Aar=o("model.train()"),yar=l(),F(AT.$$.fragment),bNe=l(),kd=a("h2"),yT=a("a"),o2e=a("span"),F(jL.$$.fragment),Lar=l(),r2e=a("span"),xar=o("AutoModelForImageSegmentation"),vNe=l(),Ho=a("div"),F(DL.$$.fragment),$ar=l(),Sd=a("p"),kar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Az=a("a"),Sar=o("from_pretrained()"),Rar=o(" class method or the "),yz=a("a"),Bar=o("from_config()"),Par=o(` class
method.`),Iar=l(),GL=a("p"),qar=o("This class cannot be instantiated directly using "),t2e=a("code"),Nar=o("__init__()"),jar=o(" (throws an error)."),Dar=l(),Ct=a("div"),F(OL.$$.fragment),Gar=l(),a2e=a("p"),Oar=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Var=l(),Rd=a("p"),Xar=o(`Note:
Loading a model from its configuration file does `),n2e=a("strong"),zar=o("not"),War=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=a("a"),Qar=o("from_pretrained()"),Har=o(" to load the model weights."),Uar=l(),F(LT.$$.fragment),Jar=l(),uo=a("div"),F(VL.$$.fragment),Yar=l(),s2e=a("p"),Kar=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Zar=l(),Ha=a("p"),enr=o("The model class to instantiate is selected based on the "),l2e=a("code"),onr=o("model_type"),rnr=o(` property of the config object (either
passed as an argument or loaded from `),i2e=a("code"),tnr=o("pretrained_model_name_or_path"),anr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=a("code"),nnr=o("pretrained_model_name_or_path"),snr=o(":"),lnr=l(),c2e=a("ul"),xT=a("li"),f2e=a("strong"),inr=o("detr"),dnr=o(" \u2014 "),xz=a("a"),cnr=o("DetrForSegmentation"),fnr=o(" (DETR model)"),mnr=l(),$T=a("p"),gnr=o("The model is set in evaluation mode by default using "),m2e=a("code"),hnr=o("model.eval()"),pnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g2e=a("code"),_nr=o("model.train()"),unr=l(),F(kT.$$.fragment),FNe=l(),Bd=a("h2"),ST=a("a"),h2e=a("span"),F(XL.$$.fragment),bnr=l(),p2e=a("span"),vnr=o("AutoModelForSemanticSegmentation"),TNe=l(),Uo=a("div"),F(zL.$$.fragment),Fnr=l(),Pd=a("p"),Tnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),$z=a("a"),Mnr=o("from_pretrained()"),Enr=o(" class method or the "),kz=a("a"),Cnr=o("from_config()"),wnr=o(` class
method.`),Anr=l(),WL=a("p"),ynr=o("This class cannot be instantiated directly using "),_2e=a("code"),Lnr=o("__init__()"),xnr=o(" (throws an error)."),$nr=l(),wt=a("div"),F(QL.$$.fragment),knr=l(),u2e=a("p"),Snr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Rnr=l(),Id=a("p"),Bnr=o(`Note:
Loading a model from its configuration file does `),b2e=a("strong"),Pnr=o("not"),Inr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=a("a"),qnr=o("from_pretrained()"),Nnr=o(" to load the model weights."),jnr=l(),F(RT.$$.fragment),Dnr=l(),bo=a("div"),F(HL.$$.fragment),Gnr=l(),v2e=a("p"),Onr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Vnr=l(),Ua=a("p"),Xnr=o("The model class to instantiate is selected based on the "),F2e=a("code"),znr=o("model_type"),Wnr=o(` property of the config object (either
passed as an argument or loaded from `),T2e=a("code"),Qnr=o("pretrained_model_name_or_path"),Hnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=a("code"),Unr=o("pretrained_model_name_or_path"),Jnr=o(":"),Ynr=l(),Ja=a("ul"),BT=a("li"),E2e=a("strong"),Knr=o("beit"),Znr=o(" \u2014 "),Rz=a("a"),esr=o("BeitForSemanticSegmentation"),osr=o(" (BEiT model)"),rsr=l(),PT=a("li"),C2e=a("strong"),tsr=o("data2vec-vision"),asr=o(" \u2014 "),Bz=a("a"),nsr=o("Data2VecVisionForSemanticSegmentation"),ssr=o(" (Data2VecVision model)"),lsr=l(),IT=a("li"),w2e=a("strong"),isr=o("dpt"),dsr=o(" \u2014 "),Pz=a("a"),csr=o("DPTForSemanticSegmentation"),fsr=o(" (DPT model)"),msr=l(),qT=a("li"),A2e=a("strong"),gsr=o("segformer"),hsr=o(" \u2014 "),Iz=a("a"),psr=o("SegformerForSemanticSegmentation"),_sr=o(" (SegFormer model)"),usr=l(),NT=a("p"),bsr=o("The model is set in evaluation mode by default using "),y2e=a("code"),vsr=o("model.eval()"),Fsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L2e=a("code"),Tsr=o("model.train()"),Msr=l(),F(jT.$$.fragment),MNe=l(),qd=a("h2"),DT=a("a"),x2e=a("span"),F(UL.$$.fragment),Esr=l(),$2e=a("span"),Csr=o("AutoModelForInstanceSegmentation"),ENe=l(),Jo=a("div"),F(JL.$$.fragment),wsr=l(),Nd=a("p"),Asr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),qz=a("a"),ysr=o("from_pretrained()"),Lsr=o(" class method or the "),Nz=a("a"),xsr=o("from_config()"),$sr=o(` class
method.`),ksr=l(),YL=a("p"),Ssr=o("This class cannot be instantiated directly using "),k2e=a("code"),Rsr=o("__init__()"),Bsr=o(" (throws an error)."),Psr=l(),At=a("div"),F(KL.$$.fragment),Isr=l(),S2e=a("p"),qsr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Nsr=l(),jd=a("p"),jsr=o(`Note:
Loading a model from its configuration file does `),R2e=a("strong"),Dsr=o("not"),Gsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=a("a"),Osr=o("from_pretrained()"),Vsr=o(" to load the model weights."),Xsr=l(),F(GT.$$.fragment),zsr=l(),vo=a("div"),F(ZL.$$.fragment),Wsr=l(),B2e=a("p"),Qsr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Hsr=l(),Ya=a("p"),Usr=o("The model class to instantiate is selected based on the "),P2e=a("code"),Jsr=o("model_type"),Ysr=o(` property of the config object (either
passed as an argument or loaded from `),I2e=a("code"),Ksr=o("pretrained_model_name_or_path"),Zsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=a("code"),elr=o("pretrained_model_name_or_path"),olr=o(":"),rlr=l(),N2e=a("ul"),OT=a("li"),j2e=a("strong"),tlr=o("maskformer"),alr=o(" \u2014 "),Dz=a("a"),nlr=o("MaskFormerForInstanceSegmentation"),slr=o(" (MaskFormer model)"),llr=l(),VT=a("p"),ilr=o("The model is set in evaluation mode by default using "),D2e=a("code"),dlr=o("model.eval()"),clr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G2e=a("code"),flr=o("model.train()"),mlr=l(),F(XT.$$.fragment),CNe=l(),Dd=a("h2"),zT=a("a"),O2e=a("span"),F(e8.$$.fragment),glr=l(),V2e=a("span"),hlr=o("TFAutoModel"),wNe=l(),Yo=a("div"),F(o8.$$.fragment),plr=l(),Gd=a("p"),_lr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Gz=a("a"),ulr=o("from_pretrained()"),blr=o(" class method or the "),Oz=a("a"),vlr=o("from_config()"),Flr=o(` class
method.`),Tlr=l(),r8=a("p"),Mlr=o("This class cannot be instantiated directly using "),X2e=a("code"),Elr=o("__init__()"),Clr=o(" (throws an error)."),wlr=l(),yt=a("div"),F(t8.$$.fragment),Alr=l(),z2e=a("p"),ylr=o("Instantiates one of the base model classes of the library from a configuration."),Llr=l(),Od=a("p"),xlr=o(`Note:
Loading a model from its configuration file does `),W2e=a("strong"),$lr=o("not"),klr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),Slr=o("from_pretrained()"),Rlr=o(" to load the model weights."),Blr=l(),F(WT.$$.fragment),Plr=l(),wr=a("div"),F(a8.$$.fragment),Ilr=l(),Q2e=a("p"),qlr=o("Instantiate one of the base model classes of the library from a pretrained model."),Nlr=l(),Ka=a("p"),jlr=o("The model class to instantiate is selected based on the "),H2e=a("code"),Dlr=o("model_type"),Glr=o(` property of the config object (either
passed as an argument or loaded from `),U2e=a("code"),Olr=o("pretrained_model_name_or_path"),Vlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=a("code"),Xlr=o("pretrained_model_name_or_path"),zlr=o(":"),Wlr=l(),N=a("ul"),QT=a("li"),Y2e=a("strong"),Qlr=o("albert"),Hlr=o(" \u2014 "),Xz=a("a"),Ulr=o("TFAlbertModel"),Jlr=o(" (ALBERT model)"),Ylr=l(),HT=a("li"),K2e=a("strong"),Klr=o("bart"),Zlr=o(" \u2014 "),zz=a("a"),eir=o("TFBartModel"),oir=o(" (BART model)"),rir=l(),UT=a("li"),Z2e=a("strong"),tir=o("bert"),air=o(" \u2014 "),Wz=a("a"),nir=o("TFBertModel"),sir=o(" (BERT model)"),lir=l(),JT=a("li"),e1e=a("strong"),iir=o("blenderbot"),dir=o(" \u2014 "),Qz=a("a"),cir=o("TFBlenderbotModel"),fir=o(" (Blenderbot model)"),mir=l(),YT=a("li"),o1e=a("strong"),gir=o("blenderbot-small"),hir=o(" \u2014 "),Hz=a("a"),pir=o("TFBlenderbotSmallModel"),_ir=o(" (BlenderbotSmall model)"),uir=l(),KT=a("li"),r1e=a("strong"),bir=o("camembert"),vir=o(" \u2014 "),Uz=a("a"),Fir=o("TFCamembertModel"),Tir=o(" (CamemBERT model)"),Mir=l(),ZT=a("li"),t1e=a("strong"),Eir=o("clip"),Cir=o(" \u2014 "),Jz=a("a"),wir=o("TFCLIPModel"),Air=o(" (CLIP model)"),yir=l(),e7=a("li"),a1e=a("strong"),Lir=o("convbert"),xir=o(" \u2014 "),Yz=a("a"),$ir=o("TFConvBertModel"),kir=o(" (ConvBERT model)"),Sir=l(),o7=a("li"),n1e=a("strong"),Rir=o("convnext"),Bir=o(" \u2014 "),Kz=a("a"),Pir=o("TFConvNextModel"),Iir=o(" (ConvNext model)"),qir=l(),r7=a("li"),s1e=a("strong"),Nir=o("ctrl"),jir=o(" \u2014 "),Zz=a("a"),Dir=o("TFCTRLModel"),Gir=o(" (CTRL model)"),Oir=l(),t7=a("li"),l1e=a("strong"),Vir=o("data2vec-vision"),Xir=o(" \u2014 "),eW=a("a"),zir=o("TFData2VecVisionModel"),Wir=o(" (Data2VecVision model)"),Qir=l(),a7=a("li"),i1e=a("strong"),Hir=o("deberta"),Uir=o(" \u2014 "),oW=a("a"),Jir=o("TFDebertaModel"),Yir=o(" (DeBERTa model)"),Kir=l(),n7=a("li"),d1e=a("strong"),Zir=o("deberta-v2"),edr=o(" \u2014 "),rW=a("a"),odr=o("TFDebertaV2Model"),rdr=o(" (DeBERTa-v2 model)"),tdr=l(),s7=a("li"),c1e=a("strong"),adr=o("distilbert"),ndr=o(" \u2014 "),tW=a("a"),sdr=o("TFDistilBertModel"),ldr=o(" (DistilBERT model)"),idr=l(),l7=a("li"),f1e=a("strong"),ddr=o("dpr"),cdr=o(" \u2014 "),aW=a("a"),fdr=o("TFDPRQuestionEncoder"),mdr=o(" (DPR model)"),gdr=l(),i7=a("li"),m1e=a("strong"),hdr=o("electra"),pdr=o(" \u2014 "),nW=a("a"),_dr=o("TFElectraModel"),udr=o(" (ELECTRA model)"),bdr=l(),d7=a("li"),g1e=a("strong"),vdr=o("flaubert"),Fdr=o(" \u2014 "),sW=a("a"),Tdr=o("TFFlaubertModel"),Mdr=o(" (FlauBERT model)"),Edr=l(),Ps=a("li"),h1e=a("strong"),Cdr=o("funnel"),wdr=o(" \u2014 "),lW=a("a"),Adr=o("TFFunnelModel"),ydr=o(" or "),iW=a("a"),Ldr=o("TFFunnelBaseModel"),xdr=o(" (Funnel Transformer model)"),$dr=l(),c7=a("li"),p1e=a("strong"),kdr=o("gpt2"),Sdr=o(" \u2014 "),dW=a("a"),Rdr=o("TFGPT2Model"),Bdr=o(" (OpenAI GPT-2 model)"),Pdr=l(),f7=a("li"),_1e=a("strong"),Idr=o("gptj"),qdr=o(" \u2014 "),cW=a("a"),Ndr=o("TFGPTJModel"),jdr=o(" (GPT-J model)"),Ddr=l(),m7=a("li"),u1e=a("strong"),Gdr=o("hubert"),Odr=o(" \u2014 "),fW=a("a"),Vdr=o("TFHubertModel"),Xdr=o(" (Hubert model)"),zdr=l(),g7=a("li"),b1e=a("strong"),Wdr=o("layoutlm"),Qdr=o(" \u2014 "),mW=a("a"),Hdr=o("TFLayoutLMModel"),Udr=o(" (LayoutLM model)"),Jdr=l(),h7=a("li"),v1e=a("strong"),Ydr=o("led"),Kdr=o(" \u2014 "),gW=a("a"),Zdr=o("TFLEDModel"),ecr=o(" (LED model)"),ocr=l(),p7=a("li"),F1e=a("strong"),rcr=o("longformer"),tcr=o(" \u2014 "),hW=a("a"),acr=o("TFLongformerModel"),ncr=o(" (Longformer model)"),scr=l(),_7=a("li"),T1e=a("strong"),lcr=o("lxmert"),icr=o(" \u2014 "),pW=a("a"),dcr=o("TFLxmertModel"),ccr=o(" (LXMERT model)"),fcr=l(),u7=a("li"),M1e=a("strong"),mcr=o("marian"),gcr=o(" \u2014 "),_W=a("a"),hcr=o("TFMarianModel"),pcr=o(" (Marian model)"),_cr=l(),b7=a("li"),E1e=a("strong"),ucr=o("mbart"),bcr=o(" \u2014 "),uW=a("a"),vcr=o("TFMBartModel"),Fcr=o(" (mBART model)"),Tcr=l(),v7=a("li"),C1e=a("strong"),Mcr=o("mobilebert"),Ecr=o(" \u2014 "),bW=a("a"),Ccr=o("TFMobileBertModel"),wcr=o(" (MobileBERT model)"),Acr=l(),F7=a("li"),w1e=a("strong"),ycr=o("mpnet"),Lcr=o(" \u2014 "),vW=a("a"),xcr=o("TFMPNetModel"),$cr=o(" (MPNet model)"),kcr=l(),T7=a("li"),A1e=a("strong"),Scr=o("mt5"),Rcr=o(" \u2014 "),FW=a("a"),Bcr=o("TFMT5Model"),Pcr=o(" (mT5 model)"),Icr=l(),M7=a("li"),y1e=a("strong"),qcr=o("openai-gpt"),Ncr=o(" \u2014 "),TW=a("a"),jcr=o("TFOpenAIGPTModel"),Dcr=o(" (OpenAI GPT model)"),Gcr=l(),E7=a("li"),L1e=a("strong"),Ocr=o("pegasus"),Vcr=o(" \u2014 "),MW=a("a"),Xcr=o("TFPegasusModel"),zcr=o(" (Pegasus model)"),Wcr=l(),C7=a("li"),x1e=a("strong"),Qcr=o("rembert"),Hcr=o(" \u2014 "),EW=a("a"),Ucr=o("TFRemBertModel"),Jcr=o(" (RemBERT model)"),Ycr=l(),w7=a("li"),$1e=a("strong"),Kcr=o("roberta"),Zcr=o(" \u2014 "),CW=a("a"),efr=o("TFRobertaModel"),ofr=o(" (RoBERTa model)"),rfr=l(),A7=a("li"),k1e=a("strong"),tfr=o("roformer"),afr=o(" \u2014 "),wW=a("a"),nfr=o("TFRoFormerModel"),sfr=o(" (RoFormer model)"),lfr=l(),y7=a("li"),S1e=a("strong"),ifr=o("speech_to_text"),dfr=o(" \u2014 "),AW=a("a"),cfr=o("TFSpeech2TextModel"),ffr=o(" (Speech2Text model)"),mfr=l(),L7=a("li"),R1e=a("strong"),gfr=o("swin"),hfr=o(" \u2014 "),yW=a("a"),pfr=o("TFSwinModel"),_fr=o(" (Swin model)"),ufr=l(),x7=a("li"),B1e=a("strong"),bfr=o("t5"),vfr=o(" \u2014 "),LW=a("a"),Ffr=o("TFT5Model"),Tfr=o(" (T5 model)"),Mfr=l(),$7=a("li"),P1e=a("strong"),Efr=o("tapas"),Cfr=o(" \u2014 "),xW=a("a"),wfr=o("TFTapasModel"),Afr=o(" (TAPAS model)"),yfr=l(),k7=a("li"),I1e=a("strong"),Lfr=o("transfo-xl"),xfr=o(" \u2014 "),$W=a("a"),$fr=o("TFTransfoXLModel"),kfr=o(" (Transformer-XL model)"),Sfr=l(),S7=a("li"),q1e=a("strong"),Rfr=o("vit"),Bfr=o(" \u2014 "),kW=a("a"),Pfr=o("TFViTModel"),Ifr=o(" (ViT model)"),qfr=l(),R7=a("li"),N1e=a("strong"),Nfr=o("vit_mae"),jfr=o(" \u2014 "),SW=a("a"),Dfr=o("TFViTMAEModel"),Gfr=o(" (ViTMAE model)"),Ofr=l(),B7=a("li"),j1e=a("strong"),Vfr=o("wav2vec2"),Xfr=o(" \u2014 "),RW=a("a"),zfr=o("TFWav2Vec2Model"),Wfr=o(" (Wav2Vec2 model)"),Qfr=l(),P7=a("li"),D1e=a("strong"),Hfr=o("xlm"),Ufr=o(" \u2014 "),BW=a("a"),Jfr=o("TFXLMModel"),Yfr=o(" (XLM model)"),Kfr=l(),I7=a("li"),G1e=a("strong"),Zfr=o("xlm-roberta"),emr=o(" \u2014 "),PW=a("a"),omr=o("TFXLMRobertaModel"),rmr=o(" (XLM-RoBERTa model)"),tmr=l(),q7=a("li"),O1e=a("strong"),amr=o("xlnet"),nmr=o(" \u2014 "),IW=a("a"),smr=o("TFXLNetModel"),lmr=o(" (XLNet model)"),imr=l(),F(N7.$$.fragment),ANe=l(),Vd=a("h2"),j7=a("a"),V1e=a("span"),F(n8.$$.fragment),dmr=l(),X1e=a("span"),cmr=o("TFAutoModelForPreTraining"),yNe=l(),Ko=a("div"),F(s8.$$.fragment),fmr=l(),Xd=a("p"),mmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),qW=a("a"),gmr=o("from_pretrained()"),hmr=o(" class method or the "),NW=a("a"),pmr=o("from_config()"),_mr=o(` class
method.`),umr=l(),l8=a("p"),bmr=o("This class cannot be instantiated directly using "),z1e=a("code"),vmr=o("__init__()"),Fmr=o(" (throws an error)."),Tmr=l(),Lt=a("div"),F(i8.$$.fragment),Mmr=l(),W1e=a("p"),Emr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Cmr=l(),zd=a("p"),wmr=o(`Note:
Loading a model from its configuration file does `),Q1e=a("strong"),Amr=o("not"),ymr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=a("a"),Lmr=o("from_pretrained()"),xmr=o(" to load the model weights."),$mr=l(),F(D7.$$.fragment),kmr=l(),Ar=a("div"),F(d8.$$.fragment),Smr=l(),H1e=a("p"),Rmr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Bmr=l(),Za=a("p"),Pmr=o("The model class to instantiate is selected based on the "),U1e=a("code"),Imr=o("model_type"),qmr=o(` property of the config object (either
passed as an argument or loaded from `),J1e=a("code"),Nmr=o("pretrained_model_name_or_path"),jmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=a("code"),Dmr=o("pretrained_model_name_or_path"),Gmr=o(":"),Omr=l(),se=a("ul"),G7=a("li"),K1e=a("strong"),Vmr=o("albert"),Xmr=o(" \u2014 "),DW=a("a"),zmr=o("TFAlbertForPreTraining"),Wmr=o(" (ALBERT model)"),Qmr=l(),O7=a("li"),Z1e=a("strong"),Hmr=o("bart"),Umr=o(" \u2014 "),GW=a("a"),Jmr=o("TFBartForConditionalGeneration"),Ymr=o(" (BART model)"),Kmr=l(),V7=a("li"),ebe=a("strong"),Zmr=o("bert"),egr=o(" \u2014 "),OW=a("a"),ogr=o("TFBertForPreTraining"),rgr=o(" (BERT model)"),tgr=l(),X7=a("li"),obe=a("strong"),agr=o("camembert"),ngr=o(" \u2014 "),VW=a("a"),sgr=o("TFCamembertForMaskedLM"),lgr=o(" (CamemBERT model)"),igr=l(),z7=a("li"),rbe=a("strong"),dgr=o("ctrl"),cgr=o(" \u2014 "),XW=a("a"),fgr=o("TFCTRLLMHeadModel"),mgr=o(" (CTRL model)"),ggr=l(),W7=a("li"),tbe=a("strong"),hgr=o("distilbert"),pgr=o(" \u2014 "),zW=a("a"),_gr=o("TFDistilBertForMaskedLM"),ugr=o(" (DistilBERT model)"),bgr=l(),Q7=a("li"),abe=a("strong"),vgr=o("electra"),Fgr=o(" \u2014 "),WW=a("a"),Tgr=o("TFElectraForPreTraining"),Mgr=o(" (ELECTRA model)"),Egr=l(),H7=a("li"),nbe=a("strong"),Cgr=o("flaubert"),wgr=o(" \u2014 "),QW=a("a"),Agr=o("TFFlaubertWithLMHeadModel"),ygr=o(" (FlauBERT model)"),Lgr=l(),U7=a("li"),sbe=a("strong"),xgr=o("funnel"),$gr=o(" \u2014 "),HW=a("a"),kgr=o("TFFunnelForPreTraining"),Sgr=o(" (Funnel Transformer model)"),Rgr=l(),J7=a("li"),lbe=a("strong"),Bgr=o("gpt2"),Pgr=o(" \u2014 "),UW=a("a"),Igr=o("TFGPT2LMHeadModel"),qgr=o(" (OpenAI GPT-2 model)"),Ngr=l(),Y7=a("li"),ibe=a("strong"),jgr=o("layoutlm"),Dgr=o(" \u2014 "),JW=a("a"),Ggr=o("TFLayoutLMForMaskedLM"),Ogr=o(" (LayoutLM model)"),Vgr=l(),K7=a("li"),dbe=a("strong"),Xgr=o("lxmert"),zgr=o(" \u2014 "),YW=a("a"),Wgr=o("TFLxmertForPreTraining"),Qgr=o(" (LXMERT model)"),Hgr=l(),Z7=a("li"),cbe=a("strong"),Ugr=o("mobilebert"),Jgr=o(" \u2014 "),KW=a("a"),Ygr=o("TFMobileBertForPreTraining"),Kgr=o(" (MobileBERT model)"),Zgr=l(),eM=a("li"),fbe=a("strong"),ehr=o("mpnet"),ohr=o(" \u2014 "),ZW=a("a"),rhr=o("TFMPNetForMaskedLM"),thr=o(" (MPNet model)"),ahr=l(),oM=a("li"),mbe=a("strong"),nhr=o("openai-gpt"),shr=o(" \u2014 "),eQ=a("a"),lhr=o("TFOpenAIGPTLMHeadModel"),ihr=o(" (OpenAI GPT model)"),dhr=l(),rM=a("li"),gbe=a("strong"),chr=o("roberta"),fhr=o(" \u2014 "),oQ=a("a"),mhr=o("TFRobertaForMaskedLM"),ghr=o(" (RoBERTa model)"),hhr=l(),tM=a("li"),hbe=a("strong"),phr=o("t5"),_hr=o(" \u2014 "),rQ=a("a"),uhr=o("TFT5ForConditionalGeneration"),bhr=o(" (T5 model)"),vhr=l(),aM=a("li"),pbe=a("strong"),Fhr=o("tapas"),Thr=o(" \u2014 "),tQ=a("a"),Mhr=o("TFTapasForMaskedLM"),Ehr=o(" (TAPAS model)"),Chr=l(),nM=a("li"),_be=a("strong"),whr=o("transfo-xl"),Ahr=o(" \u2014 "),aQ=a("a"),yhr=o("TFTransfoXLLMHeadModel"),Lhr=o(" (Transformer-XL model)"),xhr=l(),sM=a("li"),ube=a("strong"),$hr=o("vit_mae"),khr=o(" \u2014 "),nQ=a("a"),Shr=o("TFViTMAEForPreTraining"),Rhr=o(" (ViTMAE model)"),Bhr=l(),lM=a("li"),bbe=a("strong"),Phr=o("xlm"),Ihr=o(" \u2014 "),sQ=a("a"),qhr=o("TFXLMWithLMHeadModel"),Nhr=o(" (XLM model)"),jhr=l(),iM=a("li"),vbe=a("strong"),Dhr=o("xlm-roberta"),Ghr=o(" \u2014 "),lQ=a("a"),Ohr=o("TFXLMRobertaForMaskedLM"),Vhr=o(" (XLM-RoBERTa model)"),Xhr=l(),dM=a("li"),Fbe=a("strong"),zhr=o("xlnet"),Whr=o(" \u2014 "),iQ=a("a"),Qhr=o("TFXLNetLMHeadModel"),Hhr=o(" (XLNet model)"),Uhr=l(),F(cM.$$.fragment),LNe=l(),Wd=a("h2"),fM=a("a"),Tbe=a("span"),F(c8.$$.fragment),Jhr=l(),Mbe=a("span"),Yhr=o("TFAutoModelForCausalLM"),xNe=l(),Zo=a("div"),F(f8.$$.fragment),Khr=l(),Qd=a("p"),Zhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dQ=a("a"),epr=o("from_pretrained()"),opr=o(" class method or the "),cQ=a("a"),rpr=o("from_config()"),tpr=o(` class
method.`),apr=l(),m8=a("p"),npr=o("This class cannot be instantiated directly using "),Ebe=a("code"),spr=o("__init__()"),lpr=o(" (throws an error)."),ipr=l(),xt=a("div"),F(g8.$$.fragment),dpr=l(),Cbe=a("p"),cpr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fpr=l(),Hd=a("p"),mpr=o(`Note:
Loading a model from its configuration file does `),wbe=a("strong"),gpr=o("not"),hpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=a("a"),ppr=o("from_pretrained()"),_pr=o(" to load the model weights."),upr=l(),F(mM.$$.fragment),bpr=l(),yr=a("div"),F(h8.$$.fragment),vpr=l(),Abe=a("p"),Fpr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Tpr=l(),en=a("p"),Mpr=o("The model class to instantiate is selected based on the "),ybe=a("code"),Epr=o("model_type"),Cpr=o(` property of the config object (either
passed as an argument or loaded from `),Lbe=a("code"),wpr=o("pretrained_model_name_or_path"),Apr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=a("code"),ypr=o("pretrained_model_name_or_path"),Lpr=o(":"),xpr=l(),Me=a("ul"),gM=a("li"),$be=a("strong"),$pr=o("bert"),kpr=o(" \u2014 "),mQ=a("a"),Spr=o("TFBertLMHeadModel"),Rpr=o(" (BERT model)"),Bpr=l(),hM=a("li"),kbe=a("strong"),Ppr=o("camembert"),Ipr=o(" \u2014 "),gQ=a("a"),qpr=o("TFCamembertForCausalLM"),Npr=o(" (CamemBERT model)"),jpr=l(),pM=a("li"),Sbe=a("strong"),Dpr=o("ctrl"),Gpr=o(" \u2014 "),hQ=a("a"),Opr=o("TFCTRLLMHeadModel"),Vpr=o(" (CTRL model)"),Xpr=l(),_M=a("li"),Rbe=a("strong"),zpr=o("gpt2"),Wpr=o(" \u2014 "),pQ=a("a"),Qpr=o("TFGPT2LMHeadModel"),Hpr=o(" (OpenAI GPT-2 model)"),Upr=l(),uM=a("li"),Bbe=a("strong"),Jpr=o("gptj"),Ypr=o(" \u2014 "),_Q=a("a"),Kpr=o("TFGPTJForCausalLM"),Zpr=o(" (GPT-J model)"),e_r=l(),bM=a("li"),Pbe=a("strong"),o_r=o("openai-gpt"),r_r=o(" \u2014 "),uQ=a("a"),t_r=o("TFOpenAIGPTLMHeadModel"),a_r=o(" (OpenAI GPT model)"),n_r=l(),vM=a("li"),Ibe=a("strong"),s_r=o("rembert"),l_r=o(" \u2014 "),bQ=a("a"),i_r=o("TFRemBertForCausalLM"),d_r=o(" (RemBERT model)"),c_r=l(),FM=a("li"),qbe=a("strong"),f_r=o("roberta"),m_r=o(" \u2014 "),vQ=a("a"),g_r=o("TFRobertaForCausalLM"),h_r=o(" (RoBERTa model)"),p_r=l(),TM=a("li"),Nbe=a("strong"),__r=o("roformer"),u_r=o(" \u2014 "),FQ=a("a"),b_r=o("TFRoFormerForCausalLM"),v_r=o(" (RoFormer model)"),F_r=l(),MM=a("li"),jbe=a("strong"),T_r=o("transfo-xl"),M_r=o(" \u2014 "),TQ=a("a"),E_r=o("TFTransfoXLLMHeadModel"),C_r=o(" (Transformer-XL model)"),w_r=l(),EM=a("li"),Dbe=a("strong"),A_r=o("xlm"),y_r=o(" \u2014 "),MQ=a("a"),L_r=o("TFXLMWithLMHeadModel"),x_r=o(" (XLM model)"),$_r=l(),CM=a("li"),Gbe=a("strong"),k_r=o("xlnet"),S_r=o(" \u2014 "),EQ=a("a"),R_r=o("TFXLNetLMHeadModel"),B_r=o(" (XLNet model)"),P_r=l(),F(wM.$$.fragment),$Ne=l(),Ud=a("h2"),AM=a("a"),Obe=a("span"),F(p8.$$.fragment),I_r=l(),Vbe=a("span"),q_r=o("TFAutoModelForImageClassification"),kNe=l(),er=a("div"),F(_8.$$.fragment),N_r=l(),Jd=a("p"),j_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CQ=a("a"),D_r=o("from_pretrained()"),G_r=o(" class method or the "),wQ=a("a"),O_r=o("from_config()"),V_r=o(` class
method.`),X_r=l(),u8=a("p"),z_r=o("This class cannot be instantiated directly using "),Xbe=a("code"),W_r=o("__init__()"),Q_r=o(" (throws an error)."),H_r=l(),$t=a("div"),F(b8.$$.fragment),U_r=l(),zbe=a("p"),J_r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Y_r=l(),Yd=a("p"),K_r=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),Z_r=o("not"),eur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AQ=a("a"),our=o("from_pretrained()"),rur=o(" to load the model weights."),tur=l(),F(yM.$$.fragment),aur=l(),Lr=a("div"),F(v8.$$.fragment),nur=l(),Qbe=a("p"),sur=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lur=l(),on=a("p"),iur=o("The model class to instantiate is selected based on the "),Hbe=a("code"),dur=o("model_type"),cur=o(` property of the config object (either
passed as an argument or loaded from `),Ube=a("code"),fur=o("pretrained_model_name_or_path"),mur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=a("code"),gur=o("pretrained_model_name_or_path"),hur=o(":"),pur=l(),rn=a("ul"),LM=a("li"),Ybe=a("strong"),_ur=o("convnext"),uur=o(" \u2014 "),yQ=a("a"),bur=o("TFConvNextForImageClassification"),vur=o(" (ConvNext model)"),Fur=l(),xM=a("li"),Kbe=a("strong"),Tur=o("data2vec-vision"),Mur=o(" \u2014 "),LQ=a("a"),Eur=o("TFData2VecVisionForImageClassification"),Cur=o(" (Data2VecVision model)"),wur=l(),$M=a("li"),Zbe=a("strong"),Aur=o("swin"),yur=o(" \u2014 "),xQ=a("a"),Lur=o("TFSwinForImageClassification"),xur=o(" (Swin model)"),$ur=l(),kM=a("li"),eve=a("strong"),kur=o("vit"),Sur=o(" \u2014 "),$Q=a("a"),Rur=o("TFViTForImageClassification"),Bur=o(" (ViT model)"),Pur=l(),F(SM.$$.fragment),SNe=l(),Kd=a("h2"),RM=a("a"),ove=a("span"),F(F8.$$.fragment),Iur=l(),rve=a("span"),qur=o("TFAutoModelForMaskedLM"),RNe=l(),or=a("div"),F(T8.$$.fragment),Nur=l(),Zd=a("p"),jur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kQ=a("a"),Dur=o("from_pretrained()"),Gur=o(" class method or the "),SQ=a("a"),Our=o("from_config()"),Vur=o(` class
method.`),Xur=l(),M8=a("p"),zur=o("This class cannot be instantiated directly using "),tve=a("code"),Wur=o("__init__()"),Qur=o(" (throws an error)."),Hur=l(),kt=a("div"),F(E8.$$.fragment),Uur=l(),ave=a("p"),Jur=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Yur=l(),ec=a("p"),Kur=o(`Note:
Loading a model from its configuration file does `),nve=a("strong"),Zur=o("not"),e2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=a("a"),o2r=o("from_pretrained()"),r2r=o(" to load the model weights."),t2r=l(),F(BM.$$.fragment),a2r=l(),xr=a("div"),F(C8.$$.fragment),n2r=l(),sve=a("p"),s2r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),l2r=l(),tn=a("p"),i2r=o("The model class to instantiate is selected based on the "),lve=a("code"),d2r=o("model_type"),c2r=o(` property of the config object (either
passed as an argument or loaded from `),ive=a("code"),f2r=o("pretrained_model_name_or_path"),m2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=a("code"),g2r=o("pretrained_model_name_or_path"),h2r=o(":"),p2r=l(),ie=a("ul"),PM=a("li"),cve=a("strong"),_2r=o("albert"),u2r=o(" \u2014 "),BQ=a("a"),b2r=o("TFAlbertForMaskedLM"),v2r=o(" (ALBERT model)"),F2r=l(),IM=a("li"),fve=a("strong"),T2r=o("bert"),M2r=o(" \u2014 "),PQ=a("a"),E2r=o("TFBertForMaskedLM"),C2r=o(" (BERT model)"),w2r=l(),qM=a("li"),mve=a("strong"),A2r=o("camembert"),y2r=o(" \u2014 "),IQ=a("a"),L2r=o("TFCamembertForMaskedLM"),x2r=o(" (CamemBERT model)"),$2r=l(),NM=a("li"),gve=a("strong"),k2r=o("convbert"),S2r=o(" \u2014 "),qQ=a("a"),R2r=o("TFConvBertForMaskedLM"),B2r=o(" (ConvBERT model)"),P2r=l(),jM=a("li"),hve=a("strong"),I2r=o("deberta"),q2r=o(" \u2014 "),NQ=a("a"),N2r=o("TFDebertaForMaskedLM"),j2r=o(" (DeBERTa model)"),D2r=l(),DM=a("li"),pve=a("strong"),G2r=o("deberta-v2"),O2r=o(" \u2014 "),jQ=a("a"),V2r=o("TFDebertaV2ForMaskedLM"),X2r=o(" (DeBERTa-v2 model)"),z2r=l(),GM=a("li"),_ve=a("strong"),W2r=o("distilbert"),Q2r=o(" \u2014 "),DQ=a("a"),H2r=o("TFDistilBertForMaskedLM"),U2r=o(" (DistilBERT model)"),J2r=l(),OM=a("li"),uve=a("strong"),Y2r=o("electra"),K2r=o(" \u2014 "),GQ=a("a"),Z2r=o("TFElectraForMaskedLM"),e1r=o(" (ELECTRA model)"),o1r=l(),VM=a("li"),bve=a("strong"),r1r=o("flaubert"),t1r=o(" \u2014 "),OQ=a("a"),a1r=o("TFFlaubertWithLMHeadModel"),n1r=o(" (FlauBERT model)"),s1r=l(),XM=a("li"),vve=a("strong"),l1r=o("funnel"),i1r=o(" \u2014 "),VQ=a("a"),d1r=o("TFFunnelForMaskedLM"),c1r=o(" (Funnel Transformer model)"),f1r=l(),zM=a("li"),Fve=a("strong"),m1r=o("layoutlm"),g1r=o(" \u2014 "),XQ=a("a"),h1r=o("TFLayoutLMForMaskedLM"),p1r=o(" (LayoutLM model)"),_1r=l(),WM=a("li"),Tve=a("strong"),u1r=o("longformer"),b1r=o(" \u2014 "),zQ=a("a"),v1r=o("TFLongformerForMaskedLM"),F1r=o(" (Longformer model)"),T1r=l(),QM=a("li"),Mve=a("strong"),M1r=o("mobilebert"),E1r=o(" \u2014 "),WQ=a("a"),C1r=o("TFMobileBertForMaskedLM"),w1r=o(" (MobileBERT model)"),A1r=l(),HM=a("li"),Eve=a("strong"),y1r=o("mpnet"),L1r=o(" \u2014 "),QQ=a("a"),x1r=o("TFMPNetForMaskedLM"),$1r=o(" (MPNet model)"),k1r=l(),UM=a("li"),Cve=a("strong"),S1r=o("rembert"),R1r=o(" \u2014 "),HQ=a("a"),B1r=o("TFRemBertForMaskedLM"),P1r=o(" (RemBERT model)"),I1r=l(),JM=a("li"),wve=a("strong"),q1r=o("roberta"),N1r=o(" \u2014 "),UQ=a("a"),j1r=o("TFRobertaForMaskedLM"),D1r=o(" (RoBERTa model)"),G1r=l(),YM=a("li"),Ave=a("strong"),O1r=o("roformer"),V1r=o(" \u2014 "),JQ=a("a"),X1r=o("TFRoFormerForMaskedLM"),z1r=o(" (RoFormer model)"),W1r=l(),KM=a("li"),yve=a("strong"),Q1r=o("tapas"),H1r=o(" \u2014 "),YQ=a("a"),U1r=o("TFTapasForMaskedLM"),J1r=o(" (TAPAS model)"),Y1r=l(),ZM=a("li"),Lve=a("strong"),K1r=o("xlm"),Z1r=o(" \u2014 "),KQ=a("a"),ebr=o("TFXLMWithLMHeadModel"),obr=o(" (XLM model)"),rbr=l(),e4=a("li"),xve=a("strong"),tbr=o("xlm-roberta"),abr=o(" \u2014 "),ZQ=a("a"),nbr=o("TFXLMRobertaForMaskedLM"),sbr=o(" (XLM-RoBERTa model)"),lbr=l(),F(o4.$$.fragment),BNe=l(),oc=a("h2"),r4=a("a"),$ve=a("span"),F(w8.$$.fragment),ibr=l(),kve=a("span"),dbr=o("TFAutoModelForSeq2SeqLM"),PNe=l(),rr=a("div"),F(A8.$$.fragment),cbr=l(),rc=a("p"),fbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eH=a("a"),mbr=o("from_pretrained()"),gbr=o(" class method or the "),oH=a("a"),hbr=o("from_config()"),pbr=o(` class
method.`),_br=l(),y8=a("p"),ubr=o("This class cannot be instantiated directly using "),Sve=a("code"),bbr=o("__init__()"),vbr=o(" (throws an error)."),Fbr=l(),St=a("div"),F(L8.$$.fragment),Tbr=l(),Rve=a("p"),Mbr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ebr=l(),tc=a("p"),Cbr=o(`Note:
Loading a model from its configuration file does `),Bve=a("strong"),wbr=o("not"),Abr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),ybr=o("from_pretrained()"),Lbr=o(" to load the model weights."),xbr=l(),F(t4.$$.fragment),$br=l(),$r=a("div"),F(x8.$$.fragment),kbr=l(),Pve=a("p"),Sbr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Rbr=l(),an=a("p"),Bbr=o("The model class to instantiate is selected based on the "),Ive=a("code"),Pbr=o("model_type"),Ibr=o(` property of the config object (either
passed as an argument or loaded from `),qve=a("code"),qbr=o("pretrained_model_name_or_path"),Nbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=a("code"),jbr=o("pretrained_model_name_or_path"),Dbr=o(":"),Gbr=l(),ye=a("ul"),a4=a("li"),jve=a("strong"),Obr=o("bart"),Vbr=o(" \u2014 "),tH=a("a"),Xbr=o("TFBartForConditionalGeneration"),zbr=o(" (BART model)"),Wbr=l(),n4=a("li"),Dve=a("strong"),Qbr=o("blenderbot"),Hbr=o(" \u2014 "),aH=a("a"),Ubr=o("TFBlenderbotForConditionalGeneration"),Jbr=o(" (Blenderbot model)"),Ybr=l(),s4=a("li"),Gve=a("strong"),Kbr=o("blenderbot-small"),Zbr=o(" \u2014 "),nH=a("a"),evr=o("TFBlenderbotSmallForConditionalGeneration"),ovr=o(" (BlenderbotSmall model)"),rvr=l(),l4=a("li"),Ove=a("strong"),tvr=o("encoder-decoder"),avr=o(" \u2014 "),sH=a("a"),nvr=o("TFEncoderDecoderModel"),svr=o(" (Encoder decoder model)"),lvr=l(),i4=a("li"),Vve=a("strong"),ivr=o("led"),dvr=o(" \u2014 "),lH=a("a"),cvr=o("TFLEDForConditionalGeneration"),fvr=o(" (LED model)"),mvr=l(),d4=a("li"),Xve=a("strong"),gvr=o("marian"),hvr=o(" \u2014 "),iH=a("a"),pvr=o("TFMarianMTModel"),_vr=o(" (Marian model)"),uvr=l(),c4=a("li"),zve=a("strong"),bvr=o("mbart"),vvr=o(" \u2014 "),dH=a("a"),Fvr=o("TFMBartForConditionalGeneration"),Tvr=o(" (mBART model)"),Mvr=l(),f4=a("li"),Wve=a("strong"),Evr=o("mt5"),Cvr=o(" \u2014 "),cH=a("a"),wvr=o("TFMT5ForConditionalGeneration"),Avr=o(" (mT5 model)"),yvr=l(),m4=a("li"),Qve=a("strong"),Lvr=o("pegasus"),xvr=o(" \u2014 "),fH=a("a"),$vr=o("TFPegasusForConditionalGeneration"),kvr=o(" (Pegasus model)"),Svr=l(),g4=a("li"),Hve=a("strong"),Rvr=o("t5"),Bvr=o(" \u2014 "),mH=a("a"),Pvr=o("TFT5ForConditionalGeneration"),Ivr=o(" (T5 model)"),qvr=l(),F(h4.$$.fragment),INe=l(),ac=a("h2"),p4=a("a"),Uve=a("span"),F($8.$$.fragment),Nvr=l(),Jve=a("span"),jvr=o("TFAutoModelForSequenceClassification"),qNe=l(),tr=a("div"),F(k8.$$.fragment),Dvr=l(),nc=a("p"),Gvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gH=a("a"),Ovr=o("from_pretrained()"),Vvr=o(" class method or the "),hH=a("a"),Xvr=o("from_config()"),zvr=o(` class
method.`),Wvr=l(),S8=a("p"),Qvr=o("This class cannot be instantiated directly using "),Yve=a("code"),Hvr=o("__init__()"),Uvr=o(" (throws an error)."),Jvr=l(),Rt=a("div"),F(R8.$$.fragment),Yvr=l(),Kve=a("p"),Kvr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Zvr=l(),sc=a("p"),eFr=o(`Note:
Loading a model from its configuration file does `),Zve=a("strong"),oFr=o("not"),rFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=a("a"),tFr=o("from_pretrained()"),aFr=o(" to load the model weights."),nFr=l(),F(_4.$$.fragment),sFr=l(),kr=a("div"),F(B8.$$.fragment),lFr=l(),eFe=a("p"),iFr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dFr=l(),nn=a("p"),cFr=o("The model class to instantiate is selected based on the "),oFe=a("code"),fFr=o("model_type"),mFr=o(` property of the config object (either
passed as an argument or loaded from `),rFe=a("code"),gFr=o("pretrained_model_name_or_path"),hFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=a("code"),pFr=o("pretrained_model_name_or_path"),_Fr=o(":"),uFr=l(),ee=a("ul"),u4=a("li"),aFe=a("strong"),bFr=o("albert"),vFr=o(" \u2014 "),_H=a("a"),FFr=o("TFAlbertForSequenceClassification"),TFr=o(" (ALBERT model)"),MFr=l(),b4=a("li"),nFe=a("strong"),EFr=o("bert"),CFr=o(" \u2014 "),uH=a("a"),wFr=o("TFBertForSequenceClassification"),AFr=o(" (BERT model)"),yFr=l(),v4=a("li"),sFe=a("strong"),LFr=o("camembert"),xFr=o(" \u2014 "),bH=a("a"),$Fr=o("TFCamembertForSequenceClassification"),kFr=o(" (CamemBERT model)"),SFr=l(),F4=a("li"),lFe=a("strong"),RFr=o("convbert"),BFr=o(" \u2014 "),vH=a("a"),PFr=o("TFConvBertForSequenceClassification"),IFr=o(" (ConvBERT model)"),qFr=l(),T4=a("li"),iFe=a("strong"),NFr=o("ctrl"),jFr=o(" \u2014 "),FH=a("a"),DFr=o("TFCTRLForSequenceClassification"),GFr=o(" (CTRL model)"),OFr=l(),M4=a("li"),dFe=a("strong"),VFr=o("deberta"),XFr=o(" \u2014 "),TH=a("a"),zFr=o("TFDebertaForSequenceClassification"),WFr=o(" (DeBERTa model)"),QFr=l(),E4=a("li"),cFe=a("strong"),HFr=o("deberta-v2"),UFr=o(" \u2014 "),MH=a("a"),JFr=o("TFDebertaV2ForSequenceClassification"),YFr=o(" (DeBERTa-v2 model)"),KFr=l(),C4=a("li"),fFe=a("strong"),ZFr=o("distilbert"),e0r=o(" \u2014 "),EH=a("a"),o0r=o("TFDistilBertForSequenceClassification"),r0r=o(" (DistilBERT model)"),t0r=l(),w4=a("li"),mFe=a("strong"),a0r=o("electra"),n0r=o(" \u2014 "),CH=a("a"),s0r=o("TFElectraForSequenceClassification"),l0r=o(" (ELECTRA model)"),i0r=l(),A4=a("li"),gFe=a("strong"),d0r=o("flaubert"),c0r=o(" \u2014 "),wH=a("a"),f0r=o("TFFlaubertForSequenceClassification"),m0r=o(" (FlauBERT model)"),g0r=l(),y4=a("li"),hFe=a("strong"),h0r=o("funnel"),p0r=o(" \u2014 "),AH=a("a"),_0r=o("TFFunnelForSequenceClassification"),u0r=o(" (Funnel Transformer model)"),b0r=l(),L4=a("li"),pFe=a("strong"),v0r=o("gpt2"),F0r=o(" \u2014 "),yH=a("a"),T0r=o("TFGPT2ForSequenceClassification"),M0r=o(" (OpenAI GPT-2 model)"),E0r=l(),x4=a("li"),_Fe=a("strong"),C0r=o("gptj"),w0r=o(" \u2014 "),LH=a("a"),A0r=o("TFGPTJForSequenceClassification"),y0r=o(" (GPT-J model)"),L0r=l(),$4=a("li"),uFe=a("strong"),x0r=o("layoutlm"),$0r=o(" \u2014 "),xH=a("a"),k0r=o("TFLayoutLMForSequenceClassification"),S0r=o(" (LayoutLM model)"),R0r=l(),k4=a("li"),bFe=a("strong"),B0r=o("longformer"),P0r=o(" \u2014 "),$H=a("a"),I0r=o("TFLongformerForSequenceClassification"),q0r=o(" (Longformer model)"),N0r=l(),S4=a("li"),vFe=a("strong"),j0r=o("mobilebert"),D0r=o(" \u2014 "),kH=a("a"),G0r=o("TFMobileBertForSequenceClassification"),O0r=o(" (MobileBERT model)"),V0r=l(),R4=a("li"),FFe=a("strong"),X0r=o("mpnet"),z0r=o(" \u2014 "),SH=a("a"),W0r=o("TFMPNetForSequenceClassification"),Q0r=o(" (MPNet model)"),H0r=l(),B4=a("li"),TFe=a("strong"),U0r=o("openai-gpt"),J0r=o(" \u2014 "),RH=a("a"),Y0r=o("TFOpenAIGPTForSequenceClassification"),K0r=o(" (OpenAI GPT model)"),Z0r=l(),P4=a("li"),MFe=a("strong"),eTr=o("rembert"),oTr=o(" \u2014 "),BH=a("a"),rTr=o("TFRemBertForSequenceClassification"),tTr=o(" (RemBERT model)"),aTr=l(),I4=a("li"),EFe=a("strong"),nTr=o("roberta"),sTr=o(" \u2014 "),PH=a("a"),lTr=o("TFRobertaForSequenceClassification"),iTr=o(" (RoBERTa model)"),dTr=l(),q4=a("li"),CFe=a("strong"),cTr=o("roformer"),fTr=o(" \u2014 "),IH=a("a"),mTr=o("TFRoFormerForSequenceClassification"),gTr=o(" (RoFormer model)"),hTr=l(),N4=a("li"),wFe=a("strong"),pTr=o("tapas"),_Tr=o(" \u2014 "),qH=a("a"),uTr=o("TFTapasForSequenceClassification"),bTr=o(" (TAPAS model)"),vTr=l(),j4=a("li"),AFe=a("strong"),FTr=o("transfo-xl"),TTr=o(" \u2014 "),NH=a("a"),MTr=o("TFTransfoXLForSequenceClassification"),ETr=o(" (Transformer-XL model)"),CTr=l(),D4=a("li"),yFe=a("strong"),wTr=o("xlm"),ATr=o(" \u2014 "),jH=a("a"),yTr=o("TFXLMForSequenceClassification"),LTr=o(" (XLM model)"),xTr=l(),G4=a("li"),LFe=a("strong"),$Tr=o("xlm-roberta"),kTr=o(" \u2014 "),DH=a("a"),STr=o("TFXLMRobertaForSequenceClassification"),RTr=o(" (XLM-RoBERTa model)"),BTr=l(),O4=a("li"),xFe=a("strong"),PTr=o("xlnet"),ITr=o(" \u2014 "),GH=a("a"),qTr=o("TFXLNetForSequenceClassification"),NTr=o(" (XLNet model)"),jTr=l(),F(V4.$$.fragment),NNe=l(),lc=a("h2"),X4=a("a"),$Fe=a("span"),F(P8.$$.fragment),DTr=l(),kFe=a("span"),GTr=o("TFAutoModelForMultipleChoice"),jNe=l(),ar=a("div"),F(I8.$$.fragment),OTr=l(),ic=a("p"),VTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OH=a("a"),XTr=o("from_pretrained()"),zTr=o(" class method or the "),VH=a("a"),WTr=o("from_config()"),QTr=o(` class
method.`),HTr=l(),q8=a("p"),UTr=o("This class cannot be instantiated directly using "),SFe=a("code"),JTr=o("__init__()"),YTr=o(" (throws an error)."),KTr=l(),Bt=a("div"),F(N8.$$.fragment),ZTr=l(),RFe=a("p"),e7r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),o7r=l(),dc=a("p"),r7r=o(`Note:
Loading a model from its configuration file does `),BFe=a("strong"),t7r=o("not"),a7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),n7r=o("from_pretrained()"),s7r=o(" to load the model weights."),l7r=l(),F(z4.$$.fragment),i7r=l(),Sr=a("div"),F(j8.$$.fragment),d7r=l(),PFe=a("p"),c7r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),f7r=l(),sn=a("p"),m7r=o("The model class to instantiate is selected based on the "),IFe=a("code"),g7r=o("model_type"),h7r=o(` property of the config object (either
passed as an argument or loaded from `),qFe=a("code"),p7r=o("pretrained_model_name_or_path"),_7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=a("code"),u7r=o("pretrained_model_name_or_path"),b7r=o(":"),v7r=l(),he=a("ul"),W4=a("li"),jFe=a("strong"),F7r=o("albert"),T7r=o(" \u2014 "),zH=a("a"),M7r=o("TFAlbertForMultipleChoice"),E7r=o(" (ALBERT model)"),C7r=l(),Q4=a("li"),DFe=a("strong"),w7r=o("bert"),A7r=o(" \u2014 "),WH=a("a"),y7r=o("TFBertForMultipleChoice"),L7r=o(" (BERT model)"),x7r=l(),H4=a("li"),GFe=a("strong"),$7r=o("camembert"),k7r=o(" \u2014 "),QH=a("a"),S7r=o("TFCamembertForMultipleChoice"),R7r=o(" (CamemBERT model)"),B7r=l(),U4=a("li"),OFe=a("strong"),P7r=o("convbert"),I7r=o(" \u2014 "),HH=a("a"),q7r=o("TFConvBertForMultipleChoice"),N7r=o(" (ConvBERT model)"),j7r=l(),J4=a("li"),VFe=a("strong"),D7r=o("distilbert"),G7r=o(" \u2014 "),UH=a("a"),O7r=o("TFDistilBertForMultipleChoice"),V7r=o(" (DistilBERT model)"),X7r=l(),Y4=a("li"),XFe=a("strong"),z7r=o("electra"),W7r=o(" \u2014 "),JH=a("a"),Q7r=o("TFElectraForMultipleChoice"),H7r=o(" (ELECTRA model)"),U7r=l(),K4=a("li"),zFe=a("strong"),J7r=o("flaubert"),Y7r=o(" \u2014 "),YH=a("a"),K7r=o("TFFlaubertForMultipleChoice"),Z7r=o(" (FlauBERT model)"),eMr=l(),Z4=a("li"),WFe=a("strong"),oMr=o("funnel"),rMr=o(" \u2014 "),KH=a("a"),tMr=o("TFFunnelForMultipleChoice"),aMr=o(" (Funnel Transformer model)"),nMr=l(),eE=a("li"),QFe=a("strong"),sMr=o("longformer"),lMr=o(" \u2014 "),ZH=a("a"),iMr=o("TFLongformerForMultipleChoice"),dMr=o(" (Longformer model)"),cMr=l(),oE=a("li"),HFe=a("strong"),fMr=o("mobilebert"),mMr=o(" \u2014 "),eU=a("a"),gMr=o("TFMobileBertForMultipleChoice"),hMr=o(" (MobileBERT model)"),pMr=l(),rE=a("li"),UFe=a("strong"),_Mr=o("mpnet"),uMr=o(" \u2014 "),oU=a("a"),bMr=o("TFMPNetForMultipleChoice"),vMr=o(" (MPNet model)"),FMr=l(),tE=a("li"),JFe=a("strong"),TMr=o("rembert"),MMr=o(" \u2014 "),rU=a("a"),EMr=o("TFRemBertForMultipleChoice"),CMr=o(" (RemBERT model)"),wMr=l(),aE=a("li"),YFe=a("strong"),AMr=o("roberta"),yMr=o(" \u2014 "),tU=a("a"),LMr=o("TFRobertaForMultipleChoice"),xMr=o(" (RoBERTa model)"),$Mr=l(),nE=a("li"),KFe=a("strong"),kMr=o("roformer"),SMr=o(" \u2014 "),aU=a("a"),RMr=o("TFRoFormerForMultipleChoice"),BMr=o(" (RoFormer model)"),PMr=l(),sE=a("li"),ZFe=a("strong"),IMr=o("xlm"),qMr=o(" \u2014 "),nU=a("a"),NMr=o("TFXLMForMultipleChoice"),jMr=o(" (XLM model)"),DMr=l(),lE=a("li"),e0e=a("strong"),GMr=o("xlm-roberta"),OMr=o(" \u2014 "),sU=a("a"),VMr=o("TFXLMRobertaForMultipleChoice"),XMr=o(" (XLM-RoBERTa model)"),zMr=l(),iE=a("li"),o0e=a("strong"),WMr=o("xlnet"),QMr=o(" \u2014 "),lU=a("a"),HMr=o("TFXLNetForMultipleChoice"),UMr=o(" (XLNet model)"),JMr=l(),F(dE.$$.fragment),DNe=l(),cc=a("h2"),cE=a("a"),r0e=a("span"),F(D8.$$.fragment),YMr=l(),t0e=a("span"),KMr=o("TFAutoModelForNextSentencePrediction"),GNe=l(),nr=a("div"),F(G8.$$.fragment),ZMr=l(),fc=a("p"),e4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iU=a("a"),o4r=o("from_pretrained()"),r4r=o(" class method or the "),dU=a("a"),t4r=o("from_config()"),a4r=o(` class
method.`),n4r=l(),O8=a("p"),s4r=o("This class cannot be instantiated directly using "),a0e=a("code"),l4r=o("__init__()"),i4r=o(" (throws an error)."),d4r=l(),Pt=a("div"),F(V8.$$.fragment),c4r=l(),n0e=a("p"),f4r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),m4r=l(),mc=a("p"),g4r=o(`Note:
Loading a model from its configuration file does `),s0e=a("strong"),h4r=o("not"),p4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=a("a"),_4r=o("from_pretrained()"),u4r=o(" to load the model weights."),b4r=l(),F(fE.$$.fragment),v4r=l(),Rr=a("div"),F(X8.$$.fragment),F4r=l(),l0e=a("p"),T4r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),M4r=l(),ln=a("p"),E4r=o("The model class to instantiate is selected based on the "),i0e=a("code"),C4r=o("model_type"),w4r=o(` property of the config object (either
passed as an argument or loaded from `),d0e=a("code"),A4r=o("pretrained_model_name_or_path"),y4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c0e=a("code"),L4r=o("pretrained_model_name_or_path"),x4r=o(":"),$4r=l(),z8=a("ul"),mE=a("li"),f0e=a("strong"),k4r=o("bert"),S4r=o(" \u2014 "),fU=a("a"),R4r=o("TFBertForNextSentencePrediction"),B4r=o(" (BERT model)"),P4r=l(),gE=a("li"),m0e=a("strong"),I4r=o("mobilebert"),q4r=o(" \u2014 "),mU=a("a"),N4r=o("TFMobileBertForNextSentencePrediction"),j4r=o(" (MobileBERT model)"),D4r=l(),F(hE.$$.fragment),ONe=l(),gc=a("h2"),pE=a("a"),g0e=a("span"),F(W8.$$.fragment),G4r=l(),h0e=a("span"),O4r=o("TFAutoModelForTableQuestionAnswering"),VNe=l(),sr=a("div"),F(Q8.$$.fragment),V4r=l(),hc=a("p"),X4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gU=a("a"),z4r=o("from_pretrained()"),W4r=o(" class method or the "),hU=a("a"),Q4r=o("from_config()"),H4r=o(` class
method.`),U4r=l(),H8=a("p"),J4r=o("This class cannot be instantiated directly using "),p0e=a("code"),Y4r=o("__init__()"),K4r=o(" (throws an error)."),Z4r=l(),It=a("div"),F(U8.$$.fragment),eEr=l(),_0e=a("p"),oEr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rEr=l(),pc=a("p"),tEr=o(`Note:
Loading a model from its configuration file does `),u0e=a("strong"),aEr=o("not"),nEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),sEr=o("from_pretrained()"),lEr=o(" to load the model weights."),iEr=l(),F(_E.$$.fragment),dEr=l(),Br=a("div"),F(J8.$$.fragment),cEr=l(),b0e=a("p"),fEr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mEr=l(),dn=a("p"),gEr=o("The model class to instantiate is selected based on the "),v0e=a("code"),hEr=o("model_type"),pEr=o(` property of the config object (either
passed as an argument or loaded from `),F0e=a("code"),_Er=o("pretrained_model_name_or_path"),uEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T0e=a("code"),bEr=o("pretrained_model_name_or_path"),vEr=o(":"),FEr=l(),M0e=a("ul"),uE=a("li"),E0e=a("strong"),TEr=o("tapas"),MEr=o(" \u2014 "),_U=a("a"),EEr=o("TFTapasForQuestionAnswering"),CEr=o(" (TAPAS model)"),wEr=l(),F(bE.$$.fragment),XNe=l(),_c=a("h2"),vE=a("a"),C0e=a("span"),F(Y8.$$.fragment),AEr=l(),w0e=a("span"),yEr=o("TFAutoModelForTokenClassification"),zNe=l(),lr=a("div"),F(K8.$$.fragment),LEr=l(),uc=a("p"),xEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uU=a("a"),$Er=o("from_pretrained()"),kEr=o(" class method or the "),bU=a("a"),SEr=o("from_config()"),REr=o(` class
method.`),BEr=l(),Z8=a("p"),PEr=o("This class cannot be instantiated directly using "),A0e=a("code"),IEr=o("__init__()"),qEr=o(" (throws an error)."),NEr=l(),qt=a("div"),F(e9.$$.fragment),jEr=l(),y0e=a("p"),DEr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),GEr=l(),bc=a("p"),OEr=o(`Note:
Loading a model from its configuration file does `),L0e=a("strong"),VEr=o("not"),XEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),zEr=o("from_pretrained()"),WEr=o(" to load the model weights."),QEr=l(),F(FE.$$.fragment),HEr=l(),Pr=a("div"),F(o9.$$.fragment),UEr=l(),x0e=a("p"),JEr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YEr=l(),cn=a("p"),KEr=o("The model class to instantiate is selected based on the "),$0e=a("code"),ZEr=o("model_type"),eCr=o(` property of the config object (either
passed as an argument or loaded from `),k0e=a("code"),oCr=o("pretrained_model_name_or_path"),rCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S0e=a("code"),tCr=o("pretrained_model_name_or_path"),aCr=o(":"),nCr=l(),de=a("ul"),TE=a("li"),R0e=a("strong"),sCr=o("albert"),lCr=o(" \u2014 "),FU=a("a"),iCr=o("TFAlbertForTokenClassification"),dCr=o(" (ALBERT model)"),cCr=l(),ME=a("li"),B0e=a("strong"),fCr=o("bert"),mCr=o(" \u2014 "),TU=a("a"),gCr=o("TFBertForTokenClassification"),hCr=o(" (BERT model)"),pCr=l(),EE=a("li"),P0e=a("strong"),_Cr=o("camembert"),uCr=o(" \u2014 "),MU=a("a"),bCr=o("TFCamembertForTokenClassification"),vCr=o(" (CamemBERT model)"),FCr=l(),CE=a("li"),I0e=a("strong"),TCr=o("convbert"),MCr=o(" \u2014 "),EU=a("a"),ECr=o("TFConvBertForTokenClassification"),CCr=o(" (ConvBERT model)"),wCr=l(),wE=a("li"),q0e=a("strong"),ACr=o("deberta"),yCr=o(" \u2014 "),CU=a("a"),LCr=o("TFDebertaForTokenClassification"),xCr=o(" (DeBERTa model)"),$Cr=l(),AE=a("li"),N0e=a("strong"),kCr=o("deberta-v2"),SCr=o(" \u2014 "),wU=a("a"),RCr=o("TFDebertaV2ForTokenClassification"),BCr=o(" (DeBERTa-v2 model)"),PCr=l(),yE=a("li"),j0e=a("strong"),ICr=o("distilbert"),qCr=o(" \u2014 "),AU=a("a"),NCr=o("TFDistilBertForTokenClassification"),jCr=o(" (DistilBERT model)"),DCr=l(),LE=a("li"),D0e=a("strong"),GCr=o("electra"),OCr=o(" \u2014 "),yU=a("a"),VCr=o("TFElectraForTokenClassification"),XCr=o(" (ELECTRA model)"),zCr=l(),xE=a("li"),G0e=a("strong"),WCr=o("flaubert"),QCr=o(" \u2014 "),LU=a("a"),HCr=o("TFFlaubertForTokenClassification"),UCr=o(" (FlauBERT model)"),JCr=l(),$E=a("li"),O0e=a("strong"),YCr=o("funnel"),KCr=o(" \u2014 "),xU=a("a"),ZCr=o("TFFunnelForTokenClassification"),e5r=o(" (Funnel Transformer model)"),o5r=l(),kE=a("li"),V0e=a("strong"),r5r=o("layoutlm"),t5r=o(" \u2014 "),$U=a("a"),a5r=o("TFLayoutLMForTokenClassification"),n5r=o(" (LayoutLM model)"),s5r=l(),SE=a("li"),X0e=a("strong"),l5r=o("longformer"),i5r=o(" \u2014 "),kU=a("a"),d5r=o("TFLongformerForTokenClassification"),c5r=o(" (Longformer model)"),f5r=l(),RE=a("li"),z0e=a("strong"),m5r=o("mobilebert"),g5r=o(" \u2014 "),SU=a("a"),h5r=o("TFMobileBertForTokenClassification"),p5r=o(" (MobileBERT model)"),_5r=l(),BE=a("li"),W0e=a("strong"),u5r=o("mpnet"),b5r=o(" \u2014 "),RU=a("a"),v5r=o("TFMPNetForTokenClassification"),F5r=o(" (MPNet model)"),T5r=l(),PE=a("li"),Q0e=a("strong"),M5r=o("rembert"),E5r=o(" \u2014 "),BU=a("a"),C5r=o("TFRemBertForTokenClassification"),w5r=o(" (RemBERT model)"),A5r=l(),IE=a("li"),H0e=a("strong"),y5r=o("roberta"),L5r=o(" \u2014 "),PU=a("a"),x5r=o("TFRobertaForTokenClassification"),$5r=o(" (RoBERTa model)"),k5r=l(),qE=a("li"),U0e=a("strong"),S5r=o("roformer"),R5r=o(" \u2014 "),IU=a("a"),B5r=o("TFRoFormerForTokenClassification"),P5r=o(" (RoFormer model)"),I5r=l(),NE=a("li"),J0e=a("strong"),q5r=o("xlm"),N5r=o(" \u2014 "),qU=a("a"),j5r=o("TFXLMForTokenClassification"),D5r=o(" (XLM model)"),G5r=l(),jE=a("li"),Y0e=a("strong"),O5r=o("xlm-roberta"),V5r=o(" \u2014 "),NU=a("a"),X5r=o("TFXLMRobertaForTokenClassification"),z5r=o(" (XLM-RoBERTa model)"),W5r=l(),DE=a("li"),K0e=a("strong"),Q5r=o("xlnet"),H5r=o(" \u2014 "),jU=a("a"),U5r=o("TFXLNetForTokenClassification"),J5r=o(" (XLNet model)"),Y5r=l(),F(GE.$$.fragment),WNe=l(),vc=a("h2"),OE=a("a"),Z0e=a("span"),F(r9.$$.fragment),K5r=l(),eTe=a("span"),Z5r=o("TFAutoModelForQuestionAnswering"),QNe=l(),ir=a("div"),F(t9.$$.fragment),e3r=l(),Fc=a("p"),o3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DU=a("a"),r3r=o("from_pretrained()"),t3r=o(" class method or the "),GU=a("a"),a3r=o("from_config()"),n3r=o(` class
method.`),s3r=l(),a9=a("p"),l3r=o("This class cannot be instantiated directly using "),oTe=a("code"),i3r=o("__init__()"),d3r=o(" (throws an error)."),c3r=l(),Nt=a("div"),F(n9.$$.fragment),f3r=l(),rTe=a("p"),m3r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),g3r=l(),Tc=a("p"),h3r=o(`Note:
Loading a model from its configuration file does `),tTe=a("strong"),p3r=o("not"),_3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OU=a("a"),u3r=o("from_pretrained()"),b3r=o(" to load the model weights."),v3r=l(),F(VE.$$.fragment),F3r=l(),Ir=a("div"),F(s9.$$.fragment),T3r=l(),aTe=a("p"),M3r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),E3r=l(),fn=a("p"),C3r=o("The model class to instantiate is selected based on the "),nTe=a("code"),w3r=o("model_type"),A3r=o(` property of the config object (either
passed as an argument or loaded from `),sTe=a("code"),y3r=o("pretrained_model_name_or_path"),L3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=a("code"),x3r=o("pretrained_model_name_or_path"),$3r=o(":"),k3r=l(),ce=a("ul"),XE=a("li"),iTe=a("strong"),S3r=o("albert"),R3r=o(" \u2014 "),VU=a("a"),B3r=o("TFAlbertForQuestionAnswering"),P3r=o(" (ALBERT model)"),I3r=l(),zE=a("li"),dTe=a("strong"),q3r=o("bert"),N3r=o(" \u2014 "),XU=a("a"),j3r=o("TFBertForQuestionAnswering"),D3r=o(" (BERT model)"),G3r=l(),WE=a("li"),cTe=a("strong"),O3r=o("camembert"),V3r=o(" \u2014 "),zU=a("a"),X3r=o("TFCamembertForQuestionAnswering"),z3r=o(" (CamemBERT model)"),W3r=l(),QE=a("li"),fTe=a("strong"),Q3r=o("convbert"),H3r=o(" \u2014 "),WU=a("a"),U3r=o("TFConvBertForQuestionAnswering"),J3r=o(" (ConvBERT model)"),Y3r=l(),HE=a("li"),mTe=a("strong"),K3r=o("deberta"),Z3r=o(" \u2014 "),QU=a("a"),ewr=o("TFDebertaForQuestionAnswering"),owr=o(" (DeBERTa model)"),rwr=l(),UE=a("li"),gTe=a("strong"),twr=o("deberta-v2"),awr=o(" \u2014 "),HU=a("a"),nwr=o("TFDebertaV2ForQuestionAnswering"),swr=o(" (DeBERTa-v2 model)"),lwr=l(),JE=a("li"),hTe=a("strong"),iwr=o("distilbert"),dwr=o(" \u2014 "),UU=a("a"),cwr=o("TFDistilBertForQuestionAnswering"),fwr=o(" (DistilBERT model)"),mwr=l(),YE=a("li"),pTe=a("strong"),gwr=o("electra"),hwr=o(" \u2014 "),JU=a("a"),pwr=o("TFElectraForQuestionAnswering"),_wr=o(" (ELECTRA model)"),uwr=l(),KE=a("li"),_Te=a("strong"),bwr=o("flaubert"),vwr=o(" \u2014 "),YU=a("a"),Fwr=o("TFFlaubertForQuestionAnsweringSimple"),Twr=o(" (FlauBERT model)"),Mwr=l(),ZE=a("li"),uTe=a("strong"),Ewr=o("funnel"),Cwr=o(" \u2014 "),KU=a("a"),wwr=o("TFFunnelForQuestionAnswering"),Awr=o(" (Funnel Transformer model)"),ywr=l(),eC=a("li"),bTe=a("strong"),Lwr=o("gptj"),xwr=o(" \u2014 "),ZU=a("a"),$wr=o("TFGPTJForQuestionAnswering"),kwr=o(" (GPT-J model)"),Swr=l(),oC=a("li"),vTe=a("strong"),Rwr=o("longformer"),Bwr=o(" \u2014 "),eJ=a("a"),Pwr=o("TFLongformerForQuestionAnswering"),Iwr=o(" (Longformer model)"),qwr=l(),rC=a("li"),FTe=a("strong"),Nwr=o("mobilebert"),jwr=o(" \u2014 "),oJ=a("a"),Dwr=o("TFMobileBertForQuestionAnswering"),Gwr=o(" (MobileBERT model)"),Owr=l(),tC=a("li"),TTe=a("strong"),Vwr=o("mpnet"),Xwr=o(" \u2014 "),rJ=a("a"),zwr=o("TFMPNetForQuestionAnswering"),Wwr=o(" (MPNet model)"),Qwr=l(),aC=a("li"),MTe=a("strong"),Hwr=o("rembert"),Uwr=o(" \u2014 "),tJ=a("a"),Jwr=o("TFRemBertForQuestionAnswering"),Ywr=o(" (RemBERT model)"),Kwr=l(),nC=a("li"),ETe=a("strong"),Zwr=o("roberta"),e6r=o(" \u2014 "),aJ=a("a"),o6r=o("TFRobertaForQuestionAnswering"),r6r=o(" (RoBERTa model)"),t6r=l(),sC=a("li"),CTe=a("strong"),a6r=o("roformer"),n6r=o(" \u2014 "),nJ=a("a"),s6r=o("TFRoFormerForQuestionAnswering"),l6r=o(" (RoFormer model)"),i6r=l(),lC=a("li"),wTe=a("strong"),d6r=o("xlm"),c6r=o(" \u2014 "),sJ=a("a"),f6r=o("TFXLMForQuestionAnsweringSimple"),m6r=o(" (XLM model)"),g6r=l(),iC=a("li"),ATe=a("strong"),h6r=o("xlm-roberta"),p6r=o(" \u2014 "),lJ=a("a"),_6r=o("TFXLMRobertaForQuestionAnswering"),u6r=o(" (XLM-RoBERTa model)"),b6r=l(),dC=a("li"),yTe=a("strong"),v6r=o("xlnet"),F6r=o(" \u2014 "),iJ=a("a"),T6r=o("TFXLNetForQuestionAnsweringSimple"),M6r=o(" (XLNet model)"),E6r=l(),F(cC.$$.fragment),HNe=l(),Mc=a("h2"),fC=a("a"),LTe=a("span"),F(l9.$$.fragment),C6r=l(),xTe=a("span"),w6r=o("TFAutoModelForVision2Seq"),UNe=l(),dr=a("div"),F(i9.$$.fragment),A6r=l(),Ec=a("p"),y6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dJ=a("a"),L6r=o("from_pretrained()"),x6r=o(" class method or the "),cJ=a("a"),$6r=o("from_config()"),k6r=o(` class
method.`),S6r=l(),d9=a("p"),R6r=o("This class cannot be instantiated directly using "),$Te=a("code"),B6r=o("__init__()"),P6r=o(" (throws an error)."),I6r=l(),jt=a("div"),F(c9.$$.fragment),q6r=l(),kTe=a("p"),N6r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),j6r=l(),Cc=a("p"),D6r=o(`Note:
Loading a model from its configuration file does `),STe=a("strong"),G6r=o("not"),O6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=a("a"),V6r=o("from_pretrained()"),X6r=o(" to load the model weights."),z6r=l(),F(mC.$$.fragment),W6r=l(),qr=a("div"),F(f9.$$.fragment),Q6r=l(),RTe=a("p"),H6r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),U6r=l(),mn=a("p"),J6r=o("The model class to instantiate is selected based on the "),BTe=a("code"),Y6r=o("model_type"),K6r=o(` property of the config object (either
passed as an argument or loaded from `),PTe=a("code"),Z6r=o("pretrained_model_name_or_path"),eAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ITe=a("code"),oAr=o("pretrained_model_name_or_path"),rAr=o(":"),tAr=l(),qTe=a("ul"),gC=a("li"),NTe=a("strong"),aAr=o("vision-encoder-decoder"),nAr=o(" \u2014 "),mJ=a("a"),sAr=o("TFVisionEncoderDecoderModel"),lAr=o(" (Vision Encoder decoder model)"),iAr=l(),F(hC.$$.fragment),JNe=l(),wc=a("h2"),pC=a("a"),jTe=a("span"),F(m9.$$.fragment),dAr=l(),DTe=a("span"),cAr=o("TFAutoModelForSpeechSeq2Seq"),YNe=l(),cr=a("div"),F(g9.$$.fragment),fAr=l(),Ac=a("p"),mAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gJ=a("a"),gAr=o("from_pretrained()"),hAr=o(" class method or the "),hJ=a("a"),pAr=o("from_config()"),_Ar=o(` class
method.`),uAr=l(),h9=a("p"),bAr=o("This class cannot be instantiated directly using "),GTe=a("code"),vAr=o("__init__()"),FAr=o(" (throws an error)."),TAr=l(),Dt=a("div"),F(p9.$$.fragment),MAr=l(),OTe=a("p"),EAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),CAr=l(),yc=a("p"),wAr=o(`Note:
Loading a model from its configuration file does `),VTe=a("strong"),AAr=o("not"),yAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=a("a"),LAr=o("from_pretrained()"),xAr=o(" to load the model weights."),$Ar=l(),F(_C.$$.fragment),kAr=l(),Nr=a("div"),F(_9.$$.fragment),SAr=l(),XTe=a("p"),RAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),BAr=l(),gn=a("p"),PAr=o("The model class to instantiate is selected based on the "),zTe=a("code"),IAr=o("model_type"),qAr=o(` property of the config object (either
passed as an argument or loaded from `),WTe=a("code"),NAr=o("pretrained_model_name_or_path"),jAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=a("code"),DAr=o("pretrained_model_name_or_path"),GAr=o(":"),OAr=l(),HTe=a("ul"),uC=a("li"),UTe=a("strong"),VAr=o("speech_to_text"),XAr=o(" \u2014 "),_J=a("a"),zAr=o("TFSpeech2TextForConditionalGeneration"),WAr=o(" (Speech2Text model)"),QAr=l(),F(bC.$$.fragment),KNe=l(),Lc=a("h2"),vC=a("a"),JTe=a("span"),F(u9.$$.fragment),HAr=l(),YTe=a("span"),UAr=o("FlaxAutoModel"),ZNe=l(),fr=a("div"),F(b9.$$.fragment),JAr=l(),xc=a("p"),YAr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uJ=a("a"),KAr=o("from_pretrained()"),ZAr=o(" class method or the "),bJ=a("a"),eyr=o("from_config()"),oyr=o(` class
method.`),ryr=l(),v9=a("p"),tyr=o("This class cannot be instantiated directly using "),KTe=a("code"),ayr=o("__init__()"),nyr=o(" (throws an error)."),syr=l(),Gt=a("div"),F(F9.$$.fragment),lyr=l(),ZTe=a("p"),iyr=o("Instantiates one of the base model classes of the library from a configuration."),dyr=l(),$c=a("p"),cyr=o(`Note:
Loading a model from its configuration file does `),e7e=a("strong"),fyr=o("not"),myr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=a("a"),gyr=o("from_pretrained()"),hyr=o(" to load the model weights."),pyr=l(),F(FC.$$.fragment),_yr=l(),jr=a("div"),F(T9.$$.fragment),uyr=l(),o7e=a("p"),byr=o("Instantiate one of the base model classes of the library from a pretrained model."),vyr=l(),hn=a("p"),Fyr=o("The model class to instantiate is selected based on the "),r7e=a("code"),Tyr=o("model_type"),Myr=o(` property of the config object (either
passed as an argument or loaded from `),t7e=a("code"),Eyr=o("pretrained_model_name_or_path"),Cyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a7e=a("code"),wyr=o("pretrained_model_name_or_path"),Ayr=o(":"),yyr=l(),te=a("ul"),TC=a("li"),n7e=a("strong"),Lyr=o("albert"),xyr=o(" \u2014 "),FJ=a("a"),$yr=o("FlaxAlbertModel"),kyr=o(" (ALBERT model)"),Syr=l(),MC=a("li"),s7e=a("strong"),Ryr=o("bart"),Byr=o(" \u2014 "),TJ=a("a"),Pyr=o("FlaxBartModel"),Iyr=o(" (BART model)"),qyr=l(),EC=a("li"),l7e=a("strong"),Nyr=o("beit"),jyr=o(" \u2014 "),MJ=a("a"),Dyr=o("FlaxBeitModel"),Gyr=o(" (BEiT model)"),Oyr=l(),CC=a("li"),i7e=a("strong"),Vyr=o("bert"),Xyr=o(" \u2014 "),EJ=a("a"),zyr=o("FlaxBertModel"),Wyr=o(" (BERT model)"),Qyr=l(),wC=a("li"),d7e=a("strong"),Hyr=o("big_bird"),Uyr=o(" \u2014 "),CJ=a("a"),Jyr=o("FlaxBigBirdModel"),Yyr=o(" (BigBird model)"),Kyr=l(),AC=a("li"),c7e=a("strong"),Zyr=o("blenderbot"),eLr=o(" \u2014 "),wJ=a("a"),oLr=o("FlaxBlenderbotModel"),rLr=o(" (Blenderbot model)"),tLr=l(),yC=a("li"),f7e=a("strong"),aLr=o("blenderbot-small"),nLr=o(" \u2014 "),AJ=a("a"),sLr=o("FlaxBlenderbotSmallModel"),lLr=o(" (BlenderbotSmall model)"),iLr=l(),LC=a("li"),m7e=a("strong"),dLr=o("clip"),cLr=o(" \u2014 "),yJ=a("a"),fLr=o("FlaxCLIPModel"),mLr=o(" (CLIP model)"),gLr=l(),xC=a("li"),g7e=a("strong"),hLr=o("distilbert"),pLr=o(" \u2014 "),LJ=a("a"),_Lr=o("FlaxDistilBertModel"),uLr=o(" (DistilBERT model)"),bLr=l(),$C=a("li"),h7e=a("strong"),vLr=o("electra"),FLr=o(" \u2014 "),xJ=a("a"),TLr=o("FlaxElectraModel"),MLr=o(" (ELECTRA model)"),ELr=l(),kC=a("li"),p7e=a("strong"),CLr=o("gpt2"),wLr=o(" \u2014 "),$J=a("a"),ALr=o("FlaxGPT2Model"),yLr=o(" (OpenAI GPT-2 model)"),LLr=l(),SC=a("li"),_7e=a("strong"),xLr=o("gpt_neo"),$Lr=o(" \u2014 "),kJ=a("a"),kLr=o("FlaxGPTNeoModel"),SLr=o(" (GPT Neo model)"),RLr=l(),RC=a("li"),u7e=a("strong"),BLr=o("gptj"),PLr=o(" \u2014 "),SJ=a("a"),ILr=o("FlaxGPTJModel"),qLr=o(" (GPT-J model)"),NLr=l(),BC=a("li"),b7e=a("strong"),jLr=o("marian"),DLr=o(" \u2014 "),RJ=a("a"),GLr=o("FlaxMarianModel"),OLr=o(" (Marian model)"),VLr=l(),PC=a("li"),v7e=a("strong"),XLr=o("mbart"),zLr=o(" \u2014 "),BJ=a("a"),WLr=o("FlaxMBartModel"),QLr=o(" (mBART model)"),HLr=l(),IC=a("li"),F7e=a("strong"),ULr=o("mt5"),JLr=o(" \u2014 "),PJ=a("a"),YLr=o("FlaxMT5Model"),KLr=o(" (mT5 model)"),ZLr=l(),qC=a("li"),T7e=a("strong"),e8r=o("pegasus"),o8r=o(" \u2014 "),IJ=a("a"),r8r=o("FlaxPegasusModel"),t8r=o(" (Pegasus model)"),a8r=l(),NC=a("li"),M7e=a("strong"),n8r=o("roberta"),s8r=o(" \u2014 "),qJ=a("a"),l8r=o("FlaxRobertaModel"),i8r=o(" (RoBERTa model)"),d8r=l(),jC=a("li"),E7e=a("strong"),c8r=o("roformer"),f8r=o(" \u2014 "),NJ=a("a"),m8r=o("FlaxRoFormerModel"),g8r=o(" (RoFormer model)"),h8r=l(),DC=a("li"),C7e=a("strong"),p8r=o("t5"),_8r=o(" \u2014 "),jJ=a("a"),u8r=o("FlaxT5Model"),b8r=o(" (T5 model)"),v8r=l(),GC=a("li"),w7e=a("strong"),F8r=o("vision-text-dual-encoder"),T8r=o(" \u2014 "),DJ=a("a"),M8r=o("FlaxVisionTextDualEncoderModel"),E8r=o(" (VisionTextDualEncoder model)"),C8r=l(),OC=a("li"),A7e=a("strong"),w8r=o("vit"),A8r=o(" \u2014 "),GJ=a("a"),y8r=o("FlaxViTModel"),L8r=o(" (ViT model)"),x8r=l(),VC=a("li"),y7e=a("strong"),$8r=o("wav2vec2"),k8r=o(" \u2014 "),OJ=a("a"),S8r=o("FlaxWav2Vec2Model"),R8r=o(" (Wav2Vec2 model)"),B8r=l(),XC=a("li"),L7e=a("strong"),P8r=o("xglm"),I8r=o(" \u2014 "),VJ=a("a"),q8r=o("FlaxXGLMModel"),N8r=o(" (XGLM model)"),j8r=l(),zC=a("li"),x7e=a("strong"),D8r=o("xlm-roberta"),G8r=o(" \u2014 "),XJ=a("a"),O8r=o("FlaxXLMRobertaModel"),V8r=o(" (XLM-RoBERTa model)"),X8r=l(),F(WC.$$.fragment),eje=l(),kc=a("h2"),QC=a("a"),$7e=a("span"),F(M9.$$.fragment),z8r=l(),k7e=a("span"),W8r=o("FlaxAutoModelForCausalLM"),oje=l(),mr=a("div"),F(E9.$$.fragment),Q8r=l(),Sc=a("p"),H8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zJ=a("a"),U8r=o("from_pretrained()"),J8r=o(" class method or the "),WJ=a("a"),Y8r=o("from_config()"),K8r=o(` class
method.`),Z8r=l(),C9=a("p"),e9r=o("This class cannot be instantiated directly using "),S7e=a("code"),o9r=o("__init__()"),r9r=o(" (throws an error)."),t9r=l(),Ot=a("div"),F(w9.$$.fragment),a9r=l(),R7e=a("p"),n9r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),s9r=l(),Rc=a("p"),l9r=o(`Note:
Loading a model from its configuration file does `),B7e=a("strong"),i9r=o("not"),d9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),c9r=o("from_pretrained()"),f9r=o(" to load the model weights."),m9r=l(),F(HC.$$.fragment),g9r=l(),Dr=a("div"),F(A9.$$.fragment),h9r=l(),P7e=a("p"),p9r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_9r=l(),pn=a("p"),u9r=o("The model class to instantiate is selected based on the "),I7e=a("code"),b9r=o("model_type"),v9r=o(` property of the config object (either
passed as an argument or loaded from `),q7e=a("code"),F9r=o("pretrained_model_name_or_path"),T9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N7e=a("code"),M9r=o("pretrained_model_name_or_path"),E9r=o(":"),C9r=l(),Re=a("ul"),UC=a("li"),j7e=a("strong"),w9r=o("bart"),A9r=o(" \u2014 "),HJ=a("a"),y9r=o("FlaxBartForCausalLM"),L9r=o(" (BART model)"),x9r=l(),JC=a("li"),D7e=a("strong"),$9r=o("bert"),k9r=o(" \u2014 "),UJ=a("a"),S9r=o("FlaxBertForCausalLM"),R9r=o(" (BERT model)"),B9r=l(),YC=a("li"),G7e=a("strong"),P9r=o("big_bird"),I9r=o(" \u2014 "),JJ=a("a"),q9r=o("FlaxBigBirdForCausalLM"),N9r=o(" (BigBird model)"),j9r=l(),KC=a("li"),O7e=a("strong"),D9r=o("electra"),G9r=o(" \u2014 "),YJ=a("a"),O9r=o("FlaxElectraForCausalLM"),V9r=o(" (ELECTRA model)"),X9r=l(),ZC=a("li"),V7e=a("strong"),z9r=o("gpt2"),W9r=o(" \u2014 "),KJ=a("a"),Q9r=o("FlaxGPT2LMHeadModel"),H9r=o(" (OpenAI GPT-2 model)"),U9r=l(),e5=a("li"),X7e=a("strong"),J9r=o("gpt_neo"),Y9r=o(" \u2014 "),ZJ=a("a"),K9r=o("FlaxGPTNeoForCausalLM"),Z9r=o(" (GPT Neo model)"),exr=l(),o5=a("li"),z7e=a("strong"),oxr=o("gptj"),rxr=o(" \u2014 "),eY=a("a"),txr=o("FlaxGPTJForCausalLM"),axr=o(" (GPT-J model)"),nxr=l(),r5=a("li"),W7e=a("strong"),sxr=o("roberta"),lxr=o(" \u2014 "),oY=a("a"),ixr=o("FlaxRobertaForCausalLM"),dxr=o(" (RoBERTa model)"),cxr=l(),t5=a("li"),Q7e=a("strong"),fxr=o("xglm"),mxr=o(" \u2014 "),rY=a("a"),gxr=o("FlaxXGLMForCausalLM"),hxr=o(" (XGLM model)"),pxr=l(),F(a5.$$.fragment),rje=l(),Bc=a("h2"),n5=a("a"),H7e=a("span"),F(y9.$$.fragment),_xr=l(),U7e=a("span"),uxr=o("FlaxAutoModelForPreTraining"),tje=l(),gr=a("div"),F(L9.$$.fragment),bxr=l(),Pc=a("p"),vxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tY=a("a"),Fxr=o("from_pretrained()"),Txr=o(" class method or the "),aY=a("a"),Mxr=o("from_config()"),Exr=o(` class
method.`),Cxr=l(),x9=a("p"),wxr=o("This class cannot be instantiated directly using "),J7e=a("code"),Axr=o("__init__()"),yxr=o(" (throws an error)."),Lxr=l(),Vt=a("div"),F($9.$$.fragment),xxr=l(),Y7e=a("p"),$xr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kxr=l(),Ic=a("p"),Sxr=o(`Note:
Loading a model from its configuration file does `),K7e=a("strong"),Rxr=o("not"),Bxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=a("a"),Pxr=o("from_pretrained()"),Ixr=o(" to load the model weights."),qxr=l(),F(s5.$$.fragment),Nxr=l(),Gr=a("div"),F(k9.$$.fragment),jxr=l(),Z7e=a("p"),Dxr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Gxr=l(),_n=a("p"),Oxr=o("The model class to instantiate is selected based on the "),eMe=a("code"),Vxr=o("model_type"),Xxr=o(` property of the config object (either
passed as an argument or loaded from `),oMe=a("code"),zxr=o("pretrained_model_name_or_path"),Wxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rMe=a("code"),Qxr=o("pretrained_model_name_or_path"),Hxr=o(":"),Uxr=l(),Ee=a("ul"),l5=a("li"),tMe=a("strong"),Jxr=o("albert"),Yxr=o(" \u2014 "),sY=a("a"),Kxr=o("FlaxAlbertForPreTraining"),Zxr=o(" (ALBERT model)"),e$r=l(),i5=a("li"),aMe=a("strong"),o$r=o("bart"),r$r=o(" \u2014 "),lY=a("a"),t$r=o("FlaxBartForConditionalGeneration"),a$r=o(" (BART model)"),n$r=l(),d5=a("li"),nMe=a("strong"),s$r=o("bert"),l$r=o(" \u2014 "),iY=a("a"),i$r=o("FlaxBertForPreTraining"),d$r=o(" (BERT model)"),c$r=l(),c5=a("li"),sMe=a("strong"),f$r=o("big_bird"),m$r=o(" \u2014 "),dY=a("a"),g$r=o("FlaxBigBirdForPreTraining"),h$r=o(" (BigBird model)"),p$r=l(),f5=a("li"),lMe=a("strong"),_$r=o("electra"),u$r=o(" \u2014 "),cY=a("a"),b$r=o("FlaxElectraForPreTraining"),v$r=o(" (ELECTRA model)"),F$r=l(),m5=a("li"),iMe=a("strong"),T$r=o("mbart"),M$r=o(" \u2014 "),fY=a("a"),E$r=o("FlaxMBartForConditionalGeneration"),C$r=o(" (mBART model)"),w$r=l(),g5=a("li"),dMe=a("strong"),A$r=o("mt5"),y$r=o(" \u2014 "),mY=a("a"),L$r=o("FlaxMT5ForConditionalGeneration"),x$r=o(" (mT5 model)"),$$r=l(),h5=a("li"),cMe=a("strong"),k$r=o("roberta"),S$r=o(" \u2014 "),gY=a("a"),R$r=o("FlaxRobertaForMaskedLM"),B$r=o(" (RoBERTa model)"),P$r=l(),p5=a("li"),fMe=a("strong"),I$r=o("roformer"),q$r=o(" \u2014 "),hY=a("a"),N$r=o("FlaxRoFormerForMaskedLM"),j$r=o(" (RoFormer model)"),D$r=l(),_5=a("li"),mMe=a("strong"),G$r=o("t5"),O$r=o(" \u2014 "),pY=a("a"),V$r=o("FlaxT5ForConditionalGeneration"),X$r=o(" (T5 model)"),z$r=l(),u5=a("li"),gMe=a("strong"),W$r=o("wav2vec2"),Q$r=o(" \u2014 "),_Y=a("a"),H$r=o("FlaxWav2Vec2ForPreTraining"),U$r=o(" (Wav2Vec2 model)"),J$r=l(),b5=a("li"),hMe=a("strong"),Y$r=o("xlm-roberta"),K$r=o(" \u2014 "),uY=a("a"),Z$r=o("FlaxXLMRobertaForMaskedLM"),ekr=o(" (XLM-RoBERTa model)"),okr=l(),F(v5.$$.fragment),aje=l(),qc=a("h2"),F5=a("a"),pMe=a("span"),F(S9.$$.fragment),rkr=l(),_Me=a("span"),tkr=o("FlaxAutoModelForMaskedLM"),nje=l(),hr=a("div"),F(R9.$$.fragment),akr=l(),Nc=a("p"),nkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bY=a("a"),skr=o("from_pretrained()"),lkr=o(" class method or the "),vY=a("a"),ikr=o("from_config()"),dkr=o(` class
method.`),ckr=l(),B9=a("p"),fkr=o("This class cannot be instantiated directly using "),uMe=a("code"),mkr=o("__init__()"),gkr=o(" (throws an error)."),hkr=l(),Xt=a("div"),F(P9.$$.fragment),pkr=l(),bMe=a("p"),_kr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ukr=l(),jc=a("p"),bkr=o(`Note:
Loading a model from its configuration file does `),vMe=a("strong"),vkr=o("not"),Fkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=a("a"),Tkr=o("from_pretrained()"),Mkr=o(" to load the model weights."),Ekr=l(),F(T5.$$.fragment),Ckr=l(),Or=a("div"),F(I9.$$.fragment),wkr=l(),FMe=a("p"),Akr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ykr=l(),un=a("p"),Lkr=o("The model class to instantiate is selected based on the "),TMe=a("code"),xkr=o("model_type"),$kr=o(` property of the config object (either
passed as an argument or loaded from `),MMe=a("code"),kkr=o("pretrained_model_name_or_path"),Skr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EMe=a("code"),Rkr=o("pretrained_model_name_or_path"),Bkr=o(":"),Pkr=l(),Le=a("ul"),M5=a("li"),CMe=a("strong"),Ikr=o("albert"),qkr=o(" \u2014 "),TY=a("a"),Nkr=o("FlaxAlbertForMaskedLM"),jkr=o(" (ALBERT model)"),Dkr=l(),E5=a("li"),wMe=a("strong"),Gkr=o("bart"),Okr=o(" \u2014 "),MY=a("a"),Vkr=o("FlaxBartForConditionalGeneration"),Xkr=o(" (BART model)"),zkr=l(),C5=a("li"),AMe=a("strong"),Wkr=o("bert"),Qkr=o(" \u2014 "),EY=a("a"),Hkr=o("FlaxBertForMaskedLM"),Ukr=o(" (BERT model)"),Jkr=l(),w5=a("li"),yMe=a("strong"),Ykr=o("big_bird"),Kkr=o(" \u2014 "),CY=a("a"),Zkr=o("FlaxBigBirdForMaskedLM"),eSr=o(" (BigBird model)"),oSr=l(),A5=a("li"),LMe=a("strong"),rSr=o("distilbert"),tSr=o(" \u2014 "),wY=a("a"),aSr=o("FlaxDistilBertForMaskedLM"),nSr=o(" (DistilBERT model)"),sSr=l(),y5=a("li"),xMe=a("strong"),lSr=o("electra"),iSr=o(" \u2014 "),AY=a("a"),dSr=o("FlaxElectraForMaskedLM"),cSr=o(" (ELECTRA model)"),fSr=l(),L5=a("li"),$Me=a("strong"),mSr=o("mbart"),gSr=o(" \u2014 "),yY=a("a"),hSr=o("FlaxMBartForConditionalGeneration"),pSr=o(" (mBART model)"),_Sr=l(),x5=a("li"),kMe=a("strong"),uSr=o("roberta"),bSr=o(" \u2014 "),LY=a("a"),vSr=o("FlaxRobertaForMaskedLM"),FSr=o(" (RoBERTa model)"),TSr=l(),$5=a("li"),SMe=a("strong"),MSr=o("roformer"),ESr=o(" \u2014 "),xY=a("a"),CSr=o("FlaxRoFormerForMaskedLM"),wSr=o(" (RoFormer model)"),ASr=l(),k5=a("li"),RMe=a("strong"),ySr=o("xlm-roberta"),LSr=o(" \u2014 "),$Y=a("a"),xSr=o("FlaxXLMRobertaForMaskedLM"),$Sr=o(" (XLM-RoBERTa model)"),kSr=l(),F(S5.$$.fragment),sje=l(),Dc=a("h2"),R5=a("a"),BMe=a("span"),F(q9.$$.fragment),SSr=l(),PMe=a("span"),RSr=o("FlaxAutoModelForSeq2SeqLM"),lje=l(),pr=a("div"),F(N9.$$.fragment),BSr=l(),Gc=a("p"),PSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kY=a("a"),ISr=o("from_pretrained()"),qSr=o(" class method or the "),SY=a("a"),NSr=o("from_config()"),jSr=o(` class
method.`),DSr=l(),j9=a("p"),GSr=o("This class cannot be instantiated directly using "),IMe=a("code"),OSr=o("__init__()"),VSr=o(" (throws an error)."),XSr=l(),zt=a("div"),F(D9.$$.fragment),zSr=l(),qMe=a("p"),WSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),QSr=l(),Oc=a("p"),HSr=o(`Note:
Loading a model from its configuration file does `),NMe=a("strong"),USr=o("not"),JSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),YSr=o("from_pretrained()"),KSr=o(" to load the model weights."),ZSr=l(),F(B5.$$.fragment),eRr=l(),Vr=a("div"),F(G9.$$.fragment),oRr=l(),jMe=a("p"),rRr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tRr=l(),bn=a("p"),aRr=o("The model class to instantiate is selected based on the "),DMe=a("code"),nRr=o("model_type"),sRr=o(` property of the config object (either
passed as an argument or loaded from `),GMe=a("code"),lRr=o("pretrained_model_name_or_path"),iRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OMe=a("code"),dRr=o("pretrained_model_name_or_path"),cRr=o(":"),fRr=l(),Be=a("ul"),P5=a("li"),VMe=a("strong"),mRr=o("bart"),gRr=o(" \u2014 "),BY=a("a"),hRr=o("FlaxBartForConditionalGeneration"),pRr=o(" (BART model)"),_Rr=l(),I5=a("li"),XMe=a("strong"),uRr=o("blenderbot"),bRr=o(" \u2014 "),PY=a("a"),vRr=o("FlaxBlenderbotForConditionalGeneration"),FRr=o(" (Blenderbot model)"),TRr=l(),q5=a("li"),zMe=a("strong"),MRr=o("blenderbot-small"),ERr=o(" \u2014 "),IY=a("a"),CRr=o("FlaxBlenderbotSmallForConditionalGeneration"),wRr=o(" (BlenderbotSmall model)"),ARr=l(),N5=a("li"),WMe=a("strong"),yRr=o("encoder-decoder"),LRr=o(" \u2014 "),qY=a("a"),xRr=o("FlaxEncoderDecoderModel"),$Rr=o(" (Encoder decoder model)"),kRr=l(),j5=a("li"),QMe=a("strong"),SRr=o("marian"),RRr=o(" \u2014 "),NY=a("a"),BRr=o("FlaxMarianMTModel"),PRr=o(" (Marian model)"),IRr=l(),D5=a("li"),HMe=a("strong"),qRr=o("mbart"),NRr=o(" \u2014 "),jY=a("a"),jRr=o("FlaxMBartForConditionalGeneration"),DRr=o(" (mBART model)"),GRr=l(),G5=a("li"),UMe=a("strong"),ORr=o("mt5"),VRr=o(" \u2014 "),DY=a("a"),XRr=o("FlaxMT5ForConditionalGeneration"),zRr=o(" (mT5 model)"),WRr=l(),O5=a("li"),JMe=a("strong"),QRr=o("pegasus"),HRr=o(" \u2014 "),GY=a("a"),URr=o("FlaxPegasusForConditionalGeneration"),JRr=o(" (Pegasus model)"),YRr=l(),V5=a("li"),YMe=a("strong"),KRr=o("t5"),ZRr=o(" \u2014 "),OY=a("a"),eBr=o("FlaxT5ForConditionalGeneration"),oBr=o(" (T5 model)"),rBr=l(),F(X5.$$.fragment),ije=l(),Vc=a("h2"),z5=a("a"),KMe=a("span"),F(O9.$$.fragment),tBr=l(),ZMe=a("span"),aBr=o("FlaxAutoModelForSequenceClassification"),dje=l(),_r=a("div"),F(V9.$$.fragment),nBr=l(),Xc=a("p"),sBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VY=a("a"),lBr=o("from_pretrained()"),iBr=o(" class method or the "),XY=a("a"),dBr=o("from_config()"),cBr=o(` class
method.`),fBr=l(),X9=a("p"),mBr=o("This class cannot be instantiated directly using "),e4e=a("code"),gBr=o("__init__()"),hBr=o(" (throws an error)."),pBr=l(),Wt=a("div"),F(z9.$$.fragment),_Br=l(),o4e=a("p"),uBr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bBr=l(),zc=a("p"),vBr=o(`Note:
Loading a model from its configuration file does `),r4e=a("strong"),FBr=o("not"),TBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zY=a("a"),MBr=o("from_pretrained()"),EBr=o(" to load the model weights."),CBr=l(),F(W5.$$.fragment),wBr=l(),Xr=a("div"),F(W9.$$.fragment),ABr=l(),t4e=a("p"),yBr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),LBr=l(),vn=a("p"),xBr=o("The model class to instantiate is selected based on the "),a4e=a("code"),$Br=o("model_type"),kBr=o(` property of the config object (either
passed as an argument or loaded from `),n4e=a("code"),SBr=o("pretrained_model_name_or_path"),RBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=a("code"),BBr=o("pretrained_model_name_or_path"),PBr=o(":"),IBr=l(),xe=a("ul"),Q5=a("li"),l4e=a("strong"),qBr=o("albert"),NBr=o(" \u2014 "),WY=a("a"),jBr=o("FlaxAlbertForSequenceClassification"),DBr=o(" (ALBERT model)"),GBr=l(),H5=a("li"),i4e=a("strong"),OBr=o("bart"),VBr=o(" \u2014 "),QY=a("a"),XBr=o("FlaxBartForSequenceClassification"),zBr=o(" (BART model)"),WBr=l(),U5=a("li"),d4e=a("strong"),QBr=o("bert"),HBr=o(" \u2014 "),HY=a("a"),UBr=o("FlaxBertForSequenceClassification"),JBr=o(" (BERT model)"),YBr=l(),J5=a("li"),c4e=a("strong"),KBr=o("big_bird"),ZBr=o(" \u2014 "),UY=a("a"),ePr=o("FlaxBigBirdForSequenceClassification"),oPr=o(" (BigBird model)"),rPr=l(),Y5=a("li"),f4e=a("strong"),tPr=o("distilbert"),aPr=o(" \u2014 "),JY=a("a"),nPr=o("FlaxDistilBertForSequenceClassification"),sPr=o(" (DistilBERT model)"),lPr=l(),K5=a("li"),m4e=a("strong"),iPr=o("electra"),dPr=o(" \u2014 "),YY=a("a"),cPr=o("FlaxElectraForSequenceClassification"),fPr=o(" (ELECTRA model)"),mPr=l(),Z5=a("li"),g4e=a("strong"),gPr=o("mbart"),hPr=o(" \u2014 "),KY=a("a"),pPr=o("FlaxMBartForSequenceClassification"),_Pr=o(" (mBART model)"),uPr=l(),e3=a("li"),h4e=a("strong"),bPr=o("roberta"),vPr=o(" \u2014 "),ZY=a("a"),FPr=o("FlaxRobertaForSequenceClassification"),TPr=o(" (RoBERTa model)"),MPr=l(),o3=a("li"),p4e=a("strong"),EPr=o("roformer"),CPr=o(" \u2014 "),eK=a("a"),wPr=o("FlaxRoFormerForSequenceClassification"),APr=o(" (RoFormer model)"),yPr=l(),r3=a("li"),_4e=a("strong"),LPr=o("xlm-roberta"),xPr=o(" \u2014 "),oK=a("a"),$Pr=o("FlaxXLMRobertaForSequenceClassification"),kPr=o(" (XLM-RoBERTa model)"),SPr=l(),F(t3.$$.fragment),cje=l(),Wc=a("h2"),a3=a("a"),u4e=a("span"),F(Q9.$$.fragment),RPr=l(),b4e=a("span"),BPr=o("FlaxAutoModelForQuestionAnswering"),fje=l(),ur=a("div"),F(H9.$$.fragment),PPr=l(),Qc=a("p"),IPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rK=a("a"),qPr=o("from_pretrained()"),NPr=o(" class method or the "),tK=a("a"),jPr=o("from_config()"),DPr=o(` class
method.`),GPr=l(),U9=a("p"),OPr=o("This class cannot be instantiated directly using "),v4e=a("code"),VPr=o("__init__()"),XPr=o(" (throws an error)."),zPr=l(),Qt=a("div"),F(J9.$$.fragment),WPr=l(),F4e=a("p"),QPr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),HPr=l(),Hc=a("p"),UPr=o(`Note:
Loading a model from its configuration file does `),T4e=a("strong"),JPr=o("not"),YPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),KPr=o("from_pretrained()"),ZPr=o(" to load the model weights."),eIr=l(),F(n3.$$.fragment),oIr=l(),zr=a("div"),F(Y9.$$.fragment),rIr=l(),M4e=a("p"),tIr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aIr=l(),Fn=a("p"),nIr=o("The model class to instantiate is selected based on the "),E4e=a("code"),sIr=o("model_type"),lIr=o(` property of the config object (either
passed as an argument or loaded from `),C4e=a("code"),iIr=o("pretrained_model_name_or_path"),dIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=a("code"),cIr=o("pretrained_model_name_or_path"),fIr=o(":"),mIr=l(),$e=a("ul"),s3=a("li"),A4e=a("strong"),gIr=o("albert"),hIr=o(" \u2014 "),nK=a("a"),pIr=o("FlaxAlbertForQuestionAnswering"),_Ir=o(" (ALBERT model)"),uIr=l(),l3=a("li"),y4e=a("strong"),bIr=o("bart"),vIr=o(" \u2014 "),sK=a("a"),FIr=o("FlaxBartForQuestionAnswering"),TIr=o(" (BART model)"),MIr=l(),i3=a("li"),L4e=a("strong"),EIr=o("bert"),CIr=o(" \u2014 "),lK=a("a"),wIr=o("FlaxBertForQuestionAnswering"),AIr=o(" (BERT model)"),yIr=l(),d3=a("li"),x4e=a("strong"),LIr=o("big_bird"),xIr=o(" \u2014 "),iK=a("a"),$Ir=o("FlaxBigBirdForQuestionAnswering"),kIr=o(" (BigBird model)"),SIr=l(),c3=a("li"),$4e=a("strong"),RIr=o("distilbert"),BIr=o(" \u2014 "),dK=a("a"),PIr=o("FlaxDistilBertForQuestionAnswering"),IIr=o(" (DistilBERT model)"),qIr=l(),f3=a("li"),k4e=a("strong"),NIr=o("electra"),jIr=o(" \u2014 "),cK=a("a"),DIr=o("FlaxElectraForQuestionAnswering"),GIr=o(" (ELECTRA model)"),OIr=l(),m3=a("li"),S4e=a("strong"),VIr=o("mbart"),XIr=o(" \u2014 "),fK=a("a"),zIr=o("FlaxMBartForQuestionAnswering"),WIr=o(" (mBART model)"),QIr=l(),g3=a("li"),R4e=a("strong"),HIr=o("roberta"),UIr=o(" \u2014 "),mK=a("a"),JIr=o("FlaxRobertaForQuestionAnswering"),YIr=o(" (RoBERTa model)"),KIr=l(),h3=a("li"),B4e=a("strong"),ZIr=o("roformer"),eqr=o(" \u2014 "),gK=a("a"),oqr=o("FlaxRoFormerForQuestionAnswering"),rqr=o(" (RoFormer model)"),tqr=l(),p3=a("li"),P4e=a("strong"),aqr=o("xlm-roberta"),nqr=o(" \u2014 "),hK=a("a"),sqr=o("FlaxXLMRobertaForQuestionAnswering"),lqr=o(" (XLM-RoBERTa model)"),iqr=l(),F(_3.$$.fragment),mje=l(),Uc=a("h2"),u3=a("a"),I4e=a("span"),F(K9.$$.fragment),dqr=l(),q4e=a("span"),cqr=o("FlaxAutoModelForTokenClassification"),gje=l(),br=a("div"),F(Z9.$$.fragment),fqr=l(),Jc=a("p"),mqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pK=a("a"),gqr=o("from_pretrained()"),hqr=o(" class method or the "),_K=a("a"),pqr=o("from_config()"),_qr=o(` class
method.`),uqr=l(),ex=a("p"),bqr=o("This class cannot be instantiated directly using "),N4e=a("code"),vqr=o("__init__()"),Fqr=o(" (throws an error)."),Tqr=l(),Ht=a("div"),F(ox.$$.fragment),Mqr=l(),j4e=a("p"),Eqr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Cqr=l(),Yc=a("p"),wqr=o(`Note:
Loading a model from its configuration file does `),D4e=a("strong"),Aqr=o("not"),yqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("a"),Lqr=o("from_pretrained()"),xqr=o(" to load the model weights."),$qr=l(),F(b3.$$.fragment),kqr=l(),Wr=a("div"),F(rx.$$.fragment),Sqr=l(),G4e=a("p"),Rqr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Bqr=l(),Tn=a("p"),Pqr=o("The model class to instantiate is selected based on the "),O4e=a("code"),Iqr=o("model_type"),qqr=o(` property of the config object (either
passed as an argument or loaded from `),V4e=a("code"),Nqr=o("pretrained_model_name_or_path"),jqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=a("code"),Dqr=o("pretrained_model_name_or_path"),Gqr=o(":"),Oqr=l(),De=a("ul"),v3=a("li"),z4e=a("strong"),Vqr=o("albert"),Xqr=o(" \u2014 "),bK=a("a"),zqr=o("FlaxAlbertForTokenClassification"),Wqr=o(" (ALBERT model)"),Qqr=l(),F3=a("li"),W4e=a("strong"),Hqr=o("bert"),Uqr=o(" \u2014 "),vK=a("a"),Jqr=o("FlaxBertForTokenClassification"),Yqr=o(" (BERT model)"),Kqr=l(),T3=a("li"),Q4e=a("strong"),Zqr=o("big_bird"),eNr=o(" \u2014 "),FK=a("a"),oNr=o("FlaxBigBirdForTokenClassification"),rNr=o(" (BigBird model)"),tNr=l(),M3=a("li"),H4e=a("strong"),aNr=o("distilbert"),nNr=o(" \u2014 "),TK=a("a"),sNr=o("FlaxDistilBertForTokenClassification"),lNr=o(" (DistilBERT model)"),iNr=l(),E3=a("li"),U4e=a("strong"),dNr=o("electra"),cNr=o(" \u2014 "),MK=a("a"),fNr=o("FlaxElectraForTokenClassification"),mNr=o(" (ELECTRA model)"),gNr=l(),C3=a("li"),J4e=a("strong"),hNr=o("roberta"),pNr=o(" \u2014 "),EK=a("a"),_Nr=o("FlaxRobertaForTokenClassification"),uNr=o(" (RoBERTa model)"),bNr=l(),w3=a("li"),Y4e=a("strong"),vNr=o("roformer"),FNr=o(" \u2014 "),CK=a("a"),TNr=o("FlaxRoFormerForTokenClassification"),MNr=o(" (RoFormer model)"),ENr=l(),A3=a("li"),K4e=a("strong"),CNr=o("xlm-roberta"),wNr=o(" \u2014 "),wK=a("a"),ANr=o("FlaxXLMRobertaForTokenClassification"),yNr=o(" (XLM-RoBERTa model)"),LNr=l(),F(y3.$$.fragment),hje=l(),Kc=a("h2"),L3=a("a"),Z4e=a("span"),F(tx.$$.fragment),xNr=l(),eEe=a("span"),$Nr=o("FlaxAutoModelForMultipleChoice"),pje=l(),vr=a("div"),F(ax.$$.fragment),kNr=l(),Zc=a("p"),SNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AK=a("a"),RNr=o("from_pretrained()"),BNr=o(" class method or the "),yK=a("a"),PNr=o("from_config()"),INr=o(` class
method.`),qNr=l(),nx=a("p"),NNr=o("This class cannot be instantiated directly using "),oEe=a("code"),jNr=o("__init__()"),DNr=o(" (throws an error)."),GNr=l(),Ut=a("div"),F(sx.$$.fragment),ONr=l(),rEe=a("p"),VNr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),XNr=l(),ef=a("p"),zNr=o(`Note:
Loading a model from its configuration file does `),tEe=a("strong"),WNr=o("not"),QNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=a("a"),HNr=o("from_pretrained()"),UNr=o(" to load the model weights."),JNr=l(),F(x3.$$.fragment),YNr=l(),Qr=a("div"),F(lx.$$.fragment),KNr=l(),aEe=a("p"),ZNr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ejr=l(),Mn=a("p"),ojr=o("The model class to instantiate is selected based on the "),nEe=a("code"),rjr=o("model_type"),tjr=o(` property of the config object (either
passed as an argument or loaded from `),sEe=a("code"),ajr=o("pretrained_model_name_or_path"),njr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lEe=a("code"),sjr=o("pretrained_model_name_or_path"),ljr=o(":"),ijr=l(),Ge=a("ul"),$3=a("li"),iEe=a("strong"),djr=o("albert"),cjr=o(" \u2014 "),xK=a("a"),fjr=o("FlaxAlbertForMultipleChoice"),mjr=o(" (ALBERT model)"),gjr=l(),k3=a("li"),dEe=a("strong"),hjr=o("bert"),pjr=o(" \u2014 "),$K=a("a"),_jr=o("FlaxBertForMultipleChoice"),ujr=o(" (BERT model)"),bjr=l(),S3=a("li"),cEe=a("strong"),vjr=o("big_bird"),Fjr=o(" \u2014 "),kK=a("a"),Tjr=o("FlaxBigBirdForMultipleChoice"),Mjr=o(" (BigBird model)"),Ejr=l(),R3=a("li"),fEe=a("strong"),Cjr=o("distilbert"),wjr=o(" \u2014 "),SK=a("a"),Ajr=o("FlaxDistilBertForMultipleChoice"),yjr=o(" (DistilBERT model)"),Ljr=l(),B3=a("li"),mEe=a("strong"),xjr=o("electra"),$jr=o(" \u2014 "),RK=a("a"),kjr=o("FlaxElectraForMultipleChoice"),Sjr=o(" (ELECTRA model)"),Rjr=l(),P3=a("li"),gEe=a("strong"),Bjr=o("roberta"),Pjr=o(" \u2014 "),BK=a("a"),Ijr=o("FlaxRobertaForMultipleChoice"),qjr=o(" (RoBERTa model)"),Njr=l(),I3=a("li"),hEe=a("strong"),jjr=o("roformer"),Djr=o(" \u2014 "),PK=a("a"),Gjr=o("FlaxRoFormerForMultipleChoice"),Ojr=o(" (RoFormer model)"),Vjr=l(),q3=a("li"),pEe=a("strong"),Xjr=o("xlm-roberta"),zjr=o(" \u2014 "),IK=a("a"),Wjr=o("FlaxXLMRobertaForMultipleChoice"),Qjr=o(" (XLM-RoBERTa model)"),Hjr=l(),F(N3.$$.fragment),_je=l(),of=a("h2"),j3=a("a"),_Ee=a("span"),F(ix.$$.fragment),Ujr=l(),uEe=a("span"),Jjr=o("FlaxAutoModelForNextSentencePrediction"),uje=l(),Fr=a("div"),F(dx.$$.fragment),Yjr=l(),rf=a("p"),Kjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qK=a("a"),Zjr=o("from_pretrained()"),eDr=o(" class method or the "),NK=a("a"),oDr=o("from_config()"),rDr=o(` class
method.`),tDr=l(),cx=a("p"),aDr=o("This class cannot be instantiated directly using "),bEe=a("code"),nDr=o("__init__()"),sDr=o(" (throws an error)."),lDr=l(),Jt=a("div"),F(fx.$$.fragment),iDr=l(),vEe=a("p"),dDr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cDr=l(),tf=a("p"),fDr=o(`Note:
Loading a model from its configuration file does `),FEe=a("strong"),mDr=o("not"),gDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),hDr=o("from_pretrained()"),pDr=o(" to load the model weights."),_Dr=l(),F(D3.$$.fragment),uDr=l(),Hr=a("div"),F(mx.$$.fragment),bDr=l(),TEe=a("p"),vDr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),FDr=l(),En=a("p"),TDr=o("The model class to instantiate is selected based on the "),MEe=a("code"),MDr=o("model_type"),EDr=o(` property of the config object (either
passed as an argument or loaded from `),EEe=a("code"),CDr=o("pretrained_model_name_or_path"),wDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CEe=a("code"),ADr=o("pretrained_model_name_or_path"),yDr=o(":"),LDr=l(),wEe=a("ul"),G3=a("li"),AEe=a("strong"),xDr=o("bert"),$Dr=o(" \u2014 "),DK=a("a"),kDr=o("FlaxBertForNextSentencePrediction"),SDr=o(" (BERT model)"),RDr=l(),F(O3.$$.fragment),bje=l(),af=a("h2"),V3=a("a"),yEe=a("span"),F(gx.$$.fragment),BDr=l(),LEe=a("span"),PDr=o("FlaxAutoModelForImageClassification"),vje=l(),Tr=a("div"),F(hx.$$.fragment),IDr=l(),nf=a("p"),qDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),GK=a("a"),NDr=o("from_pretrained()"),jDr=o(" class method or the "),OK=a("a"),DDr=o("from_config()"),GDr=o(` class
method.`),ODr=l(),px=a("p"),VDr=o("This class cannot be instantiated directly using "),xEe=a("code"),XDr=o("__init__()"),zDr=o(" (throws an error)."),WDr=l(),Yt=a("div"),F(_x.$$.fragment),QDr=l(),$Ee=a("p"),HDr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UDr=l(),sf=a("p"),JDr=o(`Note:
Loading a model from its configuration file does `),kEe=a("strong"),YDr=o("not"),KDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=a("a"),ZDr=o("from_pretrained()"),eGr=o(" to load the model weights."),oGr=l(),F(X3.$$.fragment),rGr=l(),Ur=a("div"),F(ux.$$.fragment),tGr=l(),SEe=a("p"),aGr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nGr=l(),Cn=a("p"),sGr=o("The model class to instantiate is selected based on the "),REe=a("code"),lGr=o("model_type"),iGr=o(` property of the config object (either
passed as an argument or loaded from `),BEe=a("code"),dGr=o("pretrained_model_name_or_path"),cGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PEe=a("code"),fGr=o("pretrained_model_name_or_path"),mGr=o(":"),gGr=l(),bx=a("ul"),z3=a("li"),IEe=a("strong"),hGr=o("beit"),pGr=o(" \u2014 "),XK=a("a"),_Gr=o("FlaxBeitForImageClassification"),uGr=o(" (BEiT model)"),bGr=l(),W3=a("li"),qEe=a("strong"),vGr=o("vit"),FGr=o(" \u2014 "),zK=a("a"),TGr=o("FlaxViTForImageClassification"),MGr=o(" (ViT model)"),EGr=l(),F(Q3.$$.fragment),Fje=l(),lf=a("h2"),H3=a("a"),NEe=a("span"),F(vx.$$.fragment),CGr=l(),jEe=a("span"),wGr=o("FlaxAutoModelForVision2Seq"),Tje=l(),Mr=a("div"),F(Fx.$$.fragment),AGr=l(),df=a("p"),yGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WK=a("a"),LGr=o("from_pretrained()"),xGr=o(" class method or the "),QK=a("a"),$Gr=o("from_config()"),kGr=o(` class
method.`),SGr=l(),Tx=a("p"),RGr=o("This class cannot be instantiated directly using "),DEe=a("code"),BGr=o("__init__()"),PGr=o(" (throws an error)."),IGr=l(),Kt=a("div"),F(Mx.$$.fragment),qGr=l(),GEe=a("p"),NGr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jGr=l(),cf=a("p"),DGr=o(`Note:
Loading a model from its configuration file does `),OEe=a("strong"),GGr=o("not"),OGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=a("a"),VGr=o("from_pretrained()"),XGr=o(" to load the model weights."),zGr=l(),F(U3.$$.fragment),WGr=l(),Jr=a("div"),F(Ex.$$.fragment),QGr=l(),VEe=a("p"),HGr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),UGr=l(),wn=a("p"),JGr=o("The model class to instantiate is selected based on the "),XEe=a("code"),YGr=o("model_type"),KGr=o(` property of the config object (either
passed as an argument or loaded from `),zEe=a("code"),ZGr=o("pretrained_model_name_or_path"),eOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WEe=a("code"),oOr=o("pretrained_model_name_or_path"),rOr=o(":"),tOr=l(),QEe=a("ul"),J3=a("li"),HEe=a("strong"),aOr=o("vision-encoder-decoder"),nOr=o(" \u2014 "),UK=a("a"),sOr=o("FlaxVisionEncoderDecoderModel"),lOr=o(" (Vision Encoder decoder model)"),iOr=l(),F(Y3.$$.fragment),this.h()},l(f){const u=w9t('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Cx=s(p);m=n(Cx,"A",{id:!0,class:!0,href:!0});var UEe=s(m);_=n(UEe,"SPAN",{});var JEe=s(_);T(d.$$.fragment,JEe),JEe.forEach(t),UEe.forEach(t),h=i(Cx),Mo=n(Cx,"SPAN",{});var YEe=s(Mo);ci=r(YEe,"Auto Classes"),YEe.forEach(t),Cx.forEach(t),hf=i(f),rt=n(f,"P",{});var wx=s(rt);fi=r(wx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=n(wx,"CODE",{});var KEe=s(mi);pA=r(KEe,"from_pretrained()"),KEe.forEach(t),pf=r(wx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),wx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);gi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var ZEe=s(yn);_A=r(ZEe,"AutoConfig"),ZEe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var eCe=s(xn);uA=r(eCe,"AutoModel"),eCe.forEach(t),hi=r(An,`, and
`),$n=n(An,"A",{href:!0});var oCe=s($n);bA=r(oCe,"AutoTokenizer"),oCe.forEach(t),pi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_f=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Ax=s(Ae);I$=r(Ax,"will create a model that is an instance of "),_i=n(Ax,"A",{href:!0});var rCe=s(_i);q$=r(rCe,"BertModel"),rCe.forEach(t),N$=r(Ax,"."),Ax.forEach(t),Eo=i(f),wa=n(f,"P",{});var yx=s(wa);j$=r(yx,"There is one class of "),uf=n(yx,"CODE",{});var tCe=s(uf);D$=r(tCe,"AutoModel"),tCe.forEach(t),$Ge=r(yx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),yx.forEach(t),vqe=i(f),ui=n(f,"H2",{class:!0});var Lx=s(ui);bf=n(Lx,"A",{id:!0,class:!0,href:!0});var aCe=s(bf);Oee=n(aCe,"SPAN",{});var nCe=s(Oee);T(vA.$$.fragment,nCe),nCe.forEach(t),aCe.forEach(t),kGe=i(Lx),Vee=n(Lx,"SPAN",{});var sCe=s(Vee);SGe=r(sCe,"Extending the Auto Classes"),sCe.forEach(t),Lx.forEach(t),Fqe=i(f),kn=n(f,"P",{});var ff=s(kn);RGe=r(ff,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Xee=n(ff,"CODE",{});var lCe=s(Xee);BGe=r(lCe,"NewModel"),lCe.forEach(t),PGe=r(ff,", make sure you have a "),zee=n(ff,"CODE",{});var iCe=s(zee);IGe=r(iCe,"NewModelConfig"),iCe.forEach(t),qGe=r(ff,` then you can add those to the auto
classes like this:`),ff.forEach(t),Tqe=i(f),T(FA.$$.fragment,f),Mqe=i(f),G$=n(f,"P",{});var dCe=s(G$);NGe=r(dCe,"You will then be able to use the auto classes like you would usually do!"),dCe.forEach(t),Eqe=i(f),T(vf.$$.fragment,f),Cqe=i(f),bi=n(f,"H2",{class:!0});var xx=s(bi);Ff=n(xx,"A",{id:!0,class:!0,href:!0});var cCe=s(Ff);Wee=n(cCe,"SPAN",{});var fCe=s(Wee);T(TA.$$.fragment,fCe),fCe.forEach(t),cCe.forEach(t),jGe=i(xx),Qee=n(xx,"SPAN",{});var mCe=s(Qee);DGe=r(mCe,"AutoConfig"),mCe.forEach(t),xx.forEach(t),wqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(MA.$$.fragment,et),GGe=i(et),EA=n(et,"P",{});var $x=s(EA);OGe=r($x,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),O$=n($x,"A",{href:!0});var gCe=s(O$);VGe=r(gCe,"from_pretrained()"),gCe.forEach(t),XGe=r($x," class method."),$x.forEach(t),zGe=i(et),CA=n(et,"P",{});var kx=s(CA);WGe=r(kx,"This class cannot be instantiated directly using "),Hee=n(kx,"CODE",{});var hCe=s(Hee);QGe=r(hCe,"__init__()"),hCe.forEach(t),HGe=r(kx," (throws an error)."),kx.forEach(t),UGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(wA.$$.fragment,ot),JGe=i(ot),Uee=n(ot,"P",{});var pCe=s(Uee);YGe=r(pCe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),pCe.forEach(t),KGe=i(ot),vi=n(ot,"P",{});var mf=s(vi);ZGe=r(mf,"The configuration class to instantiate is selected based on the "),Jee=n(mf,"CODE",{});var _Ce=s(Jee);eOe=r(_Ce,"model_type"),_Ce.forEach(t),oOe=r(mf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Yee=n(mf,"CODE",{});var uCe=s(Yee);rOe=r(uCe,"pretrained_model_name_or_path"),uCe.forEach(t),tOe=r(mf,":"),mf.forEach(t),aOe=i(ot),A=n(ot,"UL",{});var y=s(A);Tf=n(y,"LI",{});var K3=s(Tf);Kee=n(K3,"STRONG",{});var bCe=s(Kee);nOe=r(bCe,"albert"),bCe.forEach(t),sOe=r(K3," \u2014 "),V$=n(K3,"A",{href:!0});var vCe=s(V$);lOe=r(vCe,"AlbertConfig"),vCe.forEach(t),iOe=r(K3," (ALBERT model)"),K3.forEach(t),dOe=i(y),Mf=n(y,"LI",{});var Z3=s(Mf);Zee=n(Z3,"STRONG",{});var FCe=s(Zee);cOe=r(FCe,"bart"),FCe.forEach(t),fOe=r(Z3," \u2014 "),X$=n(Z3,"A",{href:!0});var TCe=s(X$);mOe=r(TCe,"BartConfig"),TCe.forEach(t),gOe=r(Z3," (BART model)"),Z3.forEach(t),hOe=i(y),Ef=n(y,"LI",{});var ew=s(Ef);eoe=n(ew,"STRONG",{});var MCe=s(eoe);pOe=r(MCe,"beit"),MCe.forEach(t),_Oe=r(ew," \u2014 "),z$=n(ew,"A",{href:!0});var ECe=s(z$);uOe=r(ECe,"BeitConfig"),ECe.forEach(t),bOe=r(ew," (BEiT model)"),ew.forEach(t),vOe=i(y),Cf=n(y,"LI",{});var ow=s(Cf);ooe=n(ow,"STRONG",{});var CCe=s(ooe);FOe=r(CCe,"bert"),CCe.forEach(t),TOe=r(ow," \u2014 "),W$=n(ow,"A",{href:!0});var wCe=s(W$);MOe=r(wCe,"BertConfig"),wCe.forEach(t),EOe=r(ow," (BERT model)"),ow.forEach(t),COe=i(y),wf=n(y,"LI",{});var rw=s(wf);roe=n(rw,"STRONG",{});var ACe=s(roe);wOe=r(ACe,"bert-generation"),ACe.forEach(t),AOe=r(rw," \u2014 "),Q$=n(rw,"A",{href:!0});var yCe=s(Q$);yOe=r(yCe,"BertGenerationConfig"),yCe.forEach(t),LOe=r(rw," (Bert Generation model)"),rw.forEach(t),xOe=i(y),Af=n(y,"LI",{});var tw=s(Af);toe=n(tw,"STRONG",{});var LCe=s(toe);$Oe=r(LCe,"big_bird"),LCe.forEach(t),kOe=r(tw," \u2014 "),H$=n(tw,"A",{href:!0});var xCe=s(H$);SOe=r(xCe,"BigBirdConfig"),xCe.forEach(t),ROe=r(tw," (BigBird model)"),tw.forEach(t),BOe=i(y),yf=n(y,"LI",{});var aw=s(yf);aoe=n(aw,"STRONG",{});var $Ce=s(aoe);POe=r($Ce,"bigbird_pegasus"),$Ce.forEach(t),IOe=r(aw," \u2014 "),U$=n(aw,"A",{href:!0});var kCe=s(U$);qOe=r(kCe,"BigBirdPegasusConfig"),kCe.forEach(t),NOe=r(aw," (BigBirdPegasus model)"),aw.forEach(t),jOe=i(y),Lf=n(y,"LI",{});var nw=s(Lf);noe=n(nw,"STRONG",{});var SCe=s(noe);DOe=r(SCe,"blenderbot"),SCe.forEach(t),GOe=r(nw," \u2014 "),J$=n(nw,"A",{href:!0});var RCe=s(J$);OOe=r(RCe,"BlenderbotConfig"),RCe.forEach(t),VOe=r(nw," (Blenderbot model)"),nw.forEach(t),XOe=i(y),xf=n(y,"LI",{});var sw=s(xf);soe=n(sw,"STRONG",{});var BCe=s(soe);zOe=r(BCe,"blenderbot-small"),BCe.forEach(t),WOe=r(sw," \u2014 "),Y$=n(sw,"A",{href:!0});var PCe=s(Y$);QOe=r(PCe,"BlenderbotSmallConfig"),PCe.forEach(t),HOe=r(sw," (BlenderbotSmall model)"),sw.forEach(t),UOe=i(y),$f=n(y,"LI",{});var lw=s($f);loe=n(lw,"STRONG",{});var ICe=s(loe);JOe=r(ICe,"bloom"),ICe.forEach(t),YOe=r(lw," \u2014 "),K$=n(lw,"A",{href:!0});var qCe=s(K$);KOe=r(qCe,"BloomConfig"),qCe.forEach(t),ZOe=r(lw," (BLOOM model)"),lw.forEach(t),eVe=i(y),kf=n(y,"LI",{});var iw=s(kf);ioe=n(iw,"STRONG",{});var NCe=s(ioe);oVe=r(NCe,"camembert"),NCe.forEach(t),rVe=r(iw," \u2014 "),Z$=n(iw,"A",{href:!0});var jCe=s(Z$);tVe=r(jCe,"CamembertConfig"),jCe.forEach(t),aVe=r(iw," (CamemBERT model)"),iw.forEach(t),nVe=i(y),Sf=n(y,"LI",{});var dw=s(Sf);doe=n(dw,"STRONG",{});var DCe=s(doe);sVe=r(DCe,"canine"),DCe.forEach(t),lVe=r(dw," \u2014 "),ek=n(dw,"A",{href:!0});var GCe=s(ek);iVe=r(GCe,"CanineConfig"),GCe.forEach(t),dVe=r(dw," (Canine model)"),dw.forEach(t),cVe=i(y),Rf=n(y,"LI",{});var cw=s(Rf);coe=n(cw,"STRONG",{});var OCe=s(coe);fVe=r(OCe,"clip"),OCe.forEach(t),mVe=r(cw," \u2014 "),ok=n(cw,"A",{href:!0});var VCe=s(ok);gVe=r(VCe,"CLIPConfig"),VCe.forEach(t),hVe=r(cw," (CLIP model)"),cw.forEach(t),pVe=i(y),Bf=n(y,"LI",{});var fw=s(Bf);foe=n(fw,"STRONG",{});var XCe=s(foe);_Ve=r(XCe,"convbert"),XCe.forEach(t),uVe=r(fw," \u2014 "),rk=n(fw,"A",{href:!0});var zCe=s(rk);bVe=r(zCe,"ConvBertConfig"),zCe.forEach(t),vVe=r(fw," (ConvBERT model)"),fw.forEach(t),FVe=i(y),Pf=n(y,"LI",{});var mw=s(Pf);moe=n(mw,"STRONG",{});var WCe=s(moe);TVe=r(WCe,"convnext"),WCe.forEach(t),MVe=r(mw," \u2014 "),tk=n(mw,"A",{href:!0});var QCe=s(tk);EVe=r(QCe,"ConvNextConfig"),QCe.forEach(t),CVe=r(mw," (ConvNext model)"),mw.forEach(t),wVe=i(y),If=n(y,"LI",{});var gw=s(If);goe=n(gw,"STRONG",{});var HCe=s(goe);AVe=r(HCe,"ctrl"),HCe.forEach(t),yVe=r(gw," \u2014 "),ak=n(gw,"A",{href:!0});var UCe=s(ak);LVe=r(UCe,"CTRLConfig"),UCe.forEach(t),xVe=r(gw," (CTRL model)"),gw.forEach(t),$Ve=i(y),qf=n(y,"LI",{});var hw=s(qf);hoe=n(hw,"STRONG",{});var JCe=s(hoe);kVe=r(JCe,"cvt"),JCe.forEach(t),SVe=r(hw," \u2014 "),nk=n(hw,"A",{href:!0});var YCe=s(nk);RVe=r(YCe,"CvtConfig"),YCe.forEach(t),BVe=r(hw," (CvT model)"),hw.forEach(t),PVe=i(y),Nf=n(y,"LI",{});var pw=s(Nf);poe=n(pw,"STRONG",{});var KCe=s(poe);IVe=r(KCe,"data2vec-audio"),KCe.forEach(t),qVe=r(pw," \u2014 "),sk=n(pw,"A",{href:!0});var ZCe=s(sk);NVe=r(ZCe,"Data2VecAudioConfig"),ZCe.forEach(t),jVe=r(pw," (Data2VecAudio model)"),pw.forEach(t),DVe=i(y),jf=n(y,"LI",{});var _w=s(jf);_oe=n(_w,"STRONG",{});var e5e=s(_oe);GVe=r(e5e,"data2vec-text"),e5e.forEach(t),OVe=r(_w," \u2014 "),lk=n(_w,"A",{href:!0});var o5e=s(lk);VVe=r(o5e,"Data2VecTextConfig"),o5e.forEach(t),XVe=r(_w," (Data2VecText model)"),_w.forEach(t),zVe=i(y),Df=n(y,"LI",{});var uw=s(Df);uoe=n(uw,"STRONG",{});var r5e=s(uoe);WVe=r(r5e,"data2vec-vision"),r5e.forEach(t),QVe=r(uw," \u2014 "),ik=n(uw,"A",{href:!0});var t5e=s(ik);HVe=r(t5e,"Data2VecVisionConfig"),t5e.forEach(t),UVe=r(uw," (Data2VecVision model)"),uw.forEach(t),JVe=i(y),Gf=n(y,"LI",{});var bw=s(Gf);boe=n(bw,"STRONG",{});var a5e=s(boe);YVe=r(a5e,"deberta"),a5e.forEach(t),KVe=r(bw," \u2014 "),dk=n(bw,"A",{href:!0});var n5e=s(dk);ZVe=r(n5e,"DebertaConfig"),n5e.forEach(t),eXe=r(bw," (DeBERTa model)"),bw.forEach(t),oXe=i(y),Of=n(y,"LI",{});var vw=s(Of);voe=n(vw,"STRONG",{});var s5e=s(voe);rXe=r(s5e,"deberta-v2"),s5e.forEach(t),tXe=r(vw," \u2014 "),ck=n(vw,"A",{href:!0});var l5e=s(ck);aXe=r(l5e,"DebertaV2Config"),l5e.forEach(t),nXe=r(vw," (DeBERTa-v2 model)"),vw.forEach(t),sXe=i(y),Vf=n(y,"LI",{});var Fw=s(Vf);Foe=n(Fw,"STRONG",{});var i5e=s(Foe);lXe=r(i5e,"decision_transformer"),i5e.forEach(t),iXe=r(Fw," \u2014 "),fk=n(Fw,"A",{href:!0});var cOr=s(fk);dXe=r(cOr,"DecisionTransformerConfig"),cOr.forEach(t),cXe=r(Fw," (Decision Transformer model)"),Fw.forEach(t),fXe=i(y),Xf=n(y,"LI",{});var d5e=s(Xf);Toe=n(d5e,"STRONG",{});var fOr=s(Toe);mXe=r(fOr,"deit"),fOr.forEach(t),gXe=r(d5e," \u2014 "),mk=n(d5e,"A",{href:!0});var mOr=s(mk);hXe=r(mOr,"DeiTConfig"),mOr.forEach(t),pXe=r(d5e," (DeiT model)"),d5e.forEach(t),_Xe=i(y),zf=n(y,"LI",{});var c5e=s(zf);Moe=n(c5e,"STRONG",{});var gOr=s(Moe);uXe=r(gOr,"detr"),gOr.forEach(t),bXe=r(c5e," \u2014 "),gk=n(c5e,"A",{href:!0});var hOr=s(gk);vXe=r(hOr,"DetrConfig"),hOr.forEach(t),FXe=r(c5e," (DETR model)"),c5e.forEach(t),TXe=i(y),Wf=n(y,"LI",{});var f5e=s(Wf);Eoe=n(f5e,"STRONG",{});var pOr=s(Eoe);MXe=r(pOr,"distilbert"),pOr.forEach(t),EXe=r(f5e," \u2014 "),hk=n(f5e,"A",{href:!0});var _Or=s(hk);CXe=r(_Or,"DistilBertConfig"),_Or.forEach(t),wXe=r(f5e," (DistilBERT model)"),f5e.forEach(t),AXe=i(y),Qf=n(y,"LI",{});var m5e=s(Qf);Coe=n(m5e,"STRONG",{});var uOr=s(Coe);yXe=r(uOr,"dpr"),uOr.forEach(t),LXe=r(m5e," \u2014 "),pk=n(m5e,"A",{href:!0});var bOr=s(pk);xXe=r(bOr,"DPRConfig"),bOr.forEach(t),$Xe=r(m5e," (DPR model)"),m5e.forEach(t),kXe=i(y),Hf=n(y,"LI",{});var g5e=s(Hf);woe=n(g5e,"STRONG",{});var vOr=s(woe);SXe=r(vOr,"dpt"),vOr.forEach(t),RXe=r(g5e," \u2014 "),_k=n(g5e,"A",{href:!0});var FOr=s(_k);BXe=r(FOr,"DPTConfig"),FOr.forEach(t),PXe=r(g5e," (DPT model)"),g5e.forEach(t),IXe=i(y),Uf=n(y,"LI",{});var h5e=s(Uf);Aoe=n(h5e,"STRONG",{});var TOr=s(Aoe);qXe=r(TOr,"electra"),TOr.forEach(t),NXe=r(h5e," \u2014 "),uk=n(h5e,"A",{href:!0});var MOr=s(uk);jXe=r(MOr,"ElectraConfig"),MOr.forEach(t),DXe=r(h5e," (ELECTRA model)"),h5e.forEach(t),GXe=i(y),Jf=n(y,"LI",{});var p5e=s(Jf);yoe=n(p5e,"STRONG",{});var EOr=s(yoe);OXe=r(EOr,"encoder-decoder"),EOr.forEach(t),VXe=r(p5e," \u2014 "),bk=n(p5e,"A",{href:!0});var COr=s(bk);XXe=r(COr,"EncoderDecoderConfig"),COr.forEach(t),zXe=r(p5e," (Encoder decoder model)"),p5e.forEach(t),WXe=i(y),Yf=n(y,"LI",{});var _5e=s(Yf);Loe=n(_5e,"STRONG",{});var wOr=s(Loe);QXe=r(wOr,"flaubert"),wOr.forEach(t),HXe=r(_5e," \u2014 "),vk=n(_5e,"A",{href:!0});var AOr=s(vk);UXe=r(AOr,"FlaubertConfig"),AOr.forEach(t),JXe=r(_5e," (FlauBERT model)"),_5e.forEach(t),YXe=i(y),Kf=n(y,"LI",{});var u5e=s(Kf);xoe=n(u5e,"STRONG",{});var yOr=s(xoe);KXe=r(yOr,"flava"),yOr.forEach(t),ZXe=r(u5e," \u2014 "),Fk=n(u5e,"A",{href:!0});var LOr=s(Fk);eze=r(LOr,"FlavaConfig"),LOr.forEach(t),oze=r(u5e," (Flava model)"),u5e.forEach(t),rze=i(y),Zf=n(y,"LI",{});var b5e=s(Zf);$oe=n(b5e,"STRONG",{});var xOr=s($oe);tze=r(xOr,"fnet"),xOr.forEach(t),aze=r(b5e," \u2014 "),Tk=n(b5e,"A",{href:!0});var $Or=s(Tk);nze=r($Or,"FNetConfig"),$Or.forEach(t),sze=r(b5e," (FNet model)"),b5e.forEach(t),lze=i(y),em=n(y,"LI",{});var v5e=s(em);koe=n(v5e,"STRONG",{});var kOr=s(koe);ize=r(kOr,"fsmt"),kOr.forEach(t),dze=r(v5e," \u2014 "),Mk=n(v5e,"A",{href:!0});var SOr=s(Mk);cze=r(SOr,"FSMTConfig"),SOr.forEach(t),fze=r(v5e," (FairSeq Machine-Translation model)"),v5e.forEach(t),mze=i(y),om=n(y,"LI",{});var F5e=s(om);Soe=n(F5e,"STRONG",{});var ROr=s(Soe);gze=r(ROr,"funnel"),ROr.forEach(t),hze=r(F5e," \u2014 "),Ek=n(F5e,"A",{href:!0});var BOr=s(Ek);pze=r(BOr,"FunnelConfig"),BOr.forEach(t),_ze=r(F5e," (Funnel Transformer model)"),F5e.forEach(t),uze=i(y),rm=n(y,"LI",{});var T5e=s(rm);Roe=n(T5e,"STRONG",{});var POr=s(Roe);bze=r(POr,"glpn"),POr.forEach(t),vze=r(T5e," \u2014 "),Ck=n(T5e,"A",{href:!0});var IOr=s(Ck);Fze=r(IOr,"GLPNConfig"),IOr.forEach(t),Tze=r(T5e," (GLPN model)"),T5e.forEach(t),Mze=i(y),tm=n(y,"LI",{});var M5e=s(tm);Boe=n(M5e,"STRONG",{});var qOr=s(Boe);Eze=r(qOr,"gpt2"),qOr.forEach(t),Cze=r(M5e," \u2014 "),wk=n(M5e,"A",{href:!0});var NOr=s(wk);wze=r(NOr,"GPT2Config"),NOr.forEach(t),Aze=r(M5e," (OpenAI GPT-2 model)"),M5e.forEach(t),yze=i(y),am=n(y,"LI",{});var E5e=s(am);Poe=n(E5e,"STRONG",{});var jOr=s(Poe);Lze=r(jOr,"gpt_neo"),jOr.forEach(t),xze=r(E5e," \u2014 "),Ak=n(E5e,"A",{href:!0});var DOr=s(Ak);$ze=r(DOr,"GPTNeoConfig"),DOr.forEach(t),kze=r(E5e," (GPT Neo model)"),E5e.forEach(t),Sze=i(y),nm=n(y,"LI",{});var C5e=s(nm);Ioe=n(C5e,"STRONG",{});var GOr=s(Ioe);Rze=r(GOr,"gptj"),GOr.forEach(t),Bze=r(C5e," \u2014 "),yk=n(C5e,"A",{href:!0});var OOr=s(yk);Pze=r(OOr,"GPTJConfig"),OOr.forEach(t),Ize=r(C5e," (GPT-J model)"),C5e.forEach(t),qze=i(y),sm=n(y,"LI",{});var w5e=s(sm);qoe=n(w5e,"STRONG",{});var VOr=s(qoe);Nze=r(VOr,"hubert"),VOr.forEach(t),jze=r(w5e," \u2014 "),Lk=n(w5e,"A",{href:!0});var XOr=s(Lk);Dze=r(XOr,"HubertConfig"),XOr.forEach(t),Gze=r(w5e," (Hubert model)"),w5e.forEach(t),Oze=i(y),lm=n(y,"LI",{});var A5e=s(lm);Noe=n(A5e,"STRONG",{});var zOr=s(Noe);Vze=r(zOr,"ibert"),zOr.forEach(t),Xze=r(A5e," \u2014 "),xk=n(A5e,"A",{href:!0});var WOr=s(xk);zze=r(WOr,"IBertConfig"),WOr.forEach(t),Wze=r(A5e," (I-BERT model)"),A5e.forEach(t),Qze=i(y),im=n(y,"LI",{});var y5e=s(im);joe=n(y5e,"STRONG",{});var QOr=s(joe);Hze=r(QOr,"imagegpt"),QOr.forEach(t),Uze=r(y5e," \u2014 "),$k=n(y5e,"A",{href:!0});var HOr=s($k);Jze=r(HOr,"ImageGPTConfig"),HOr.forEach(t),Yze=r(y5e," (ImageGPT model)"),y5e.forEach(t),Kze=i(y),dm=n(y,"LI",{});var L5e=s(dm);Doe=n(L5e,"STRONG",{});var UOr=s(Doe);Zze=r(UOr,"layoutlm"),UOr.forEach(t),eWe=r(L5e," \u2014 "),kk=n(L5e,"A",{href:!0});var JOr=s(kk);oWe=r(JOr,"LayoutLMConfig"),JOr.forEach(t),rWe=r(L5e," (LayoutLM model)"),L5e.forEach(t),tWe=i(y),cm=n(y,"LI",{});var x5e=s(cm);Goe=n(x5e,"STRONG",{});var YOr=s(Goe);aWe=r(YOr,"layoutlmv2"),YOr.forEach(t),nWe=r(x5e," \u2014 "),Sk=n(x5e,"A",{href:!0});var KOr=s(Sk);sWe=r(KOr,"LayoutLMv2Config"),KOr.forEach(t),lWe=r(x5e," (LayoutLMv2 model)"),x5e.forEach(t),iWe=i(y),fm=n(y,"LI",{});var $5e=s(fm);Ooe=n($5e,"STRONG",{});var ZOr=s(Ooe);dWe=r(ZOr,"led"),ZOr.forEach(t),cWe=r($5e," \u2014 "),Rk=n($5e,"A",{href:!0});var eVr=s(Rk);fWe=r(eVr,"LEDConfig"),eVr.forEach(t),mWe=r($5e," (LED model)"),$5e.forEach(t),gWe=i(y),mm=n(y,"LI",{});var k5e=s(mm);Voe=n(k5e,"STRONG",{});var oVr=s(Voe);hWe=r(oVr,"longformer"),oVr.forEach(t),pWe=r(k5e," \u2014 "),Bk=n(k5e,"A",{href:!0});var rVr=s(Bk);_We=r(rVr,"LongformerConfig"),rVr.forEach(t),uWe=r(k5e," (Longformer model)"),k5e.forEach(t),bWe=i(y),gm=n(y,"LI",{});var S5e=s(gm);Xoe=n(S5e,"STRONG",{});var tVr=s(Xoe);vWe=r(tVr,"luke"),tVr.forEach(t),FWe=r(S5e," \u2014 "),Pk=n(S5e,"A",{href:!0});var aVr=s(Pk);TWe=r(aVr,"LukeConfig"),aVr.forEach(t),MWe=r(S5e," (LUKE model)"),S5e.forEach(t),EWe=i(y),hm=n(y,"LI",{});var R5e=s(hm);zoe=n(R5e,"STRONG",{});var nVr=s(zoe);CWe=r(nVr,"lxmert"),nVr.forEach(t),wWe=r(R5e," \u2014 "),Ik=n(R5e,"A",{href:!0});var sVr=s(Ik);AWe=r(sVr,"LxmertConfig"),sVr.forEach(t),yWe=r(R5e," (LXMERT model)"),R5e.forEach(t),LWe=i(y),pm=n(y,"LI",{});var B5e=s(pm);Woe=n(B5e,"STRONG",{});var lVr=s(Woe);xWe=r(lVr,"m2m_100"),lVr.forEach(t),$We=r(B5e," \u2014 "),qk=n(B5e,"A",{href:!0});var iVr=s(qk);kWe=r(iVr,"M2M100Config"),iVr.forEach(t),SWe=r(B5e," (M2M100 model)"),B5e.forEach(t),RWe=i(y),_m=n(y,"LI",{});var P5e=s(_m);Qoe=n(P5e,"STRONG",{});var dVr=s(Qoe);BWe=r(dVr,"marian"),dVr.forEach(t),PWe=r(P5e," \u2014 "),Nk=n(P5e,"A",{href:!0});var cVr=s(Nk);IWe=r(cVr,"MarianConfig"),cVr.forEach(t),qWe=r(P5e," (Marian model)"),P5e.forEach(t),NWe=i(y),um=n(y,"LI",{});var I5e=s(um);Hoe=n(I5e,"STRONG",{});var fVr=s(Hoe);jWe=r(fVr,"maskformer"),fVr.forEach(t),DWe=r(I5e," \u2014 "),jk=n(I5e,"A",{href:!0});var mVr=s(jk);GWe=r(mVr,"MaskFormerConfig"),mVr.forEach(t),OWe=r(I5e," (MaskFormer model)"),I5e.forEach(t),VWe=i(y),bm=n(y,"LI",{});var q5e=s(bm);Uoe=n(q5e,"STRONG",{});var gVr=s(Uoe);XWe=r(gVr,"mbart"),gVr.forEach(t),zWe=r(q5e," \u2014 "),Dk=n(q5e,"A",{href:!0});var hVr=s(Dk);WWe=r(hVr,"MBartConfig"),hVr.forEach(t),QWe=r(q5e," (mBART model)"),q5e.forEach(t),HWe=i(y),vm=n(y,"LI",{});var N5e=s(vm);Joe=n(N5e,"STRONG",{});var pVr=s(Joe);UWe=r(pVr,"megatron-bert"),pVr.forEach(t),JWe=r(N5e," \u2014 "),Gk=n(N5e,"A",{href:!0});var _Vr=s(Gk);YWe=r(_Vr,"MegatronBertConfig"),_Vr.forEach(t),KWe=r(N5e," (MegatronBert model)"),N5e.forEach(t),ZWe=i(y),Fm=n(y,"LI",{});var j5e=s(Fm);Yoe=n(j5e,"STRONG",{});var uVr=s(Yoe);eQe=r(uVr,"mobilebert"),uVr.forEach(t),oQe=r(j5e," \u2014 "),Ok=n(j5e,"A",{href:!0});var bVr=s(Ok);rQe=r(bVr,"MobileBertConfig"),bVr.forEach(t),tQe=r(j5e," (MobileBERT model)"),j5e.forEach(t),aQe=i(y),Tm=n(y,"LI",{});var D5e=s(Tm);Koe=n(D5e,"STRONG",{});var vVr=s(Koe);nQe=r(vVr,"mpnet"),vVr.forEach(t),sQe=r(D5e," \u2014 "),Vk=n(D5e,"A",{href:!0});var FVr=s(Vk);lQe=r(FVr,"MPNetConfig"),FVr.forEach(t),iQe=r(D5e," (MPNet model)"),D5e.forEach(t),dQe=i(y),Mm=n(y,"LI",{});var G5e=s(Mm);Zoe=n(G5e,"STRONG",{});var TVr=s(Zoe);cQe=r(TVr,"mt5"),TVr.forEach(t),fQe=r(G5e," \u2014 "),Xk=n(G5e,"A",{href:!0});var MVr=s(Xk);mQe=r(MVr,"MT5Config"),MVr.forEach(t),gQe=r(G5e," (mT5 model)"),G5e.forEach(t),hQe=i(y),Em=n(y,"LI",{});var O5e=s(Em);ere=n(O5e,"STRONG",{});var EVr=s(ere);pQe=r(EVr,"nystromformer"),EVr.forEach(t),_Qe=r(O5e," \u2014 "),zk=n(O5e,"A",{href:!0});var CVr=s(zk);uQe=r(CVr,"NystromformerConfig"),CVr.forEach(t),bQe=r(O5e," (Nystromformer model)"),O5e.forEach(t),vQe=i(y),Cm=n(y,"LI",{});var V5e=s(Cm);ore=n(V5e,"STRONG",{});var wVr=s(ore);FQe=r(wVr,"openai-gpt"),wVr.forEach(t),TQe=r(V5e," \u2014 "),Wk=n(V5e,"A",{href:!0});var AVr=s(Wk);MQe=r(AVr,"OpenAIGPTConfig"),AVr.forEach(t),EQe=r(V5e," (OpenAI GPT model)"),V5e.forEach(t),CQe=i(y),wm=n(y,"LI",{});var X5e=s(wm);rre=n(X5e,"STRONG",{});var yVr=s(rre);wQe=r(yVr,"opt"),yVr.forEach(t),AQe=r(X5e," \u2014 "),Qk=n(X5e,"A",{href:!0});var LVr=s(Qk);yQe=r(LVr,"OPTConfig"),LVr.forEach(t),LQe=r(X5e," (OPT model)"),X5e.forEach(t),xQe=i(y),Am=n(y,"LI",{});var z5e=s(Am);tre=n(z5e,"STRONG",{});var xVr=s(tre);$Qe=r(xVr,"pegasus"),xVr.forEach(t),kQe=r(z5e," \u2014 "),Hk=n(z5e,"A",{href:!0});var $Vr=s(Hk);SQe=r($Vr,"PegasusConfig"),$Vr.forEach(t),RQe=r(z5e," (Pegasus model)"),z5e.forEach(t),BQe=i(y),ym=n(y,"LI",{});var W5e=s(ym);are=n(W5e,"STRONG",{});var kVr=s(are);PQe=r(kVr,"perceiver"),kVr.forEach(t),IQe=r(W5e," \u2014 "),Uk=n(W5e,"A",{href:!0});var SVr=s(Uk);qQe=r(SVr,"PerceiverConfig"),SVr.forEach(t),NQe=r(W5e," (Perceiver model)"),W5e.forEach(t),jQe=i(y),Lm=n(y,"LI",{});var Q5e=s(Lm);nre=n(Q5e,"STRONG",{});var RVr=s(nre);DQe=r(RVr,"plbart"),RVr.forEach(t),GQe=r(Q5e," \u2014 "),Jk=n(Q5e,"A",{href:!0});var BVr=s(Jk);OQe=r(BVr,"PLBartConfig"),BVr.forEach(t),VQe=r(Q5e," (PLBart model)"),Q5e.forEach(t),XQe=i(y),xm=n(y,"LI",{});var H5e=s(xm);sre=n(H5e,"STRONG",{});var PVr=s(sre);zQe=r(PVr,"poolformer"),PVr.forEach(t),WQe=r(H5e," \u2014 "),Yk=n(H5e,"A",{href:!0});var IVr=s(Yk);QQe=r(IVr,"PoolFormerConfig"),IVr.forEach(t),HQe=r(H5e," (PoolFormer model)"),H5e.forEach(t),UQe=i(y),$m=n(y,"LI",{});var U5e=s($m);lre=n(U5e,"STRONG",{});var qVr=s(lre);JQe=r(qVr,"prophetnet"),qVr.forEach(t),YQe=r(U5e," \u2014 "),Kk=n(U5e,"A",{href:!0});var NVr=s(Kk);KQe=r(NVr,"ProphetNetConfig"),NVr.forEach(t),ZQe=r(U5e," (ProphetNet model)"),U5e.forEach(t),eHe=i(y),km=n(y,"LI",{});var J5e=s(km);ire=n(J5e,"STRONG",{});var jVr=s(ire);oHe=r(jVr,"qdqbert"),jVr.forEach(t),rHe=r(J5e," \u2014 "),Zk=n(J5e,"A",{href:!0});var DVr=s(Zk);tHe=r(DVr,"QDQBertConfig"),DVr.forEach(t),aHe=r(J5e," (QDQBert model)"),J5e.forEach(t),nHe=i(y),Sm=n(y,"LI",{});var Y5e=s(Sm);dre=n(Y5e,"STRONG",{});var GVr=s(dre);sHe=r(GVr,"rag"),GVr.forEach(t),lHe=r(Y5e," \u2014 "),eS=n(Y5e,"A",{href:!0});var OVr=s(eS);iHe=r(OVr,"RagConfig"),OVr.forEach(t),dHe=r(Y5e," (RAG model)"),Y5e.forEach(t),cHe=i(y),Rm=n(y,"LI",{});var K5e=s(Rm);cre=n(K5e,"STRONG",{});var VVr=s(cre);fHe=r(VVr,"realm"),VVr.forEach(t),mHe=r(K5e," \u2014 "),oS=n(K5e,"A",{href:!0});var XVr=s(oS);gHe=r(XVr,"RealmConfig"),XVr.forEach(t),hHe=r(K5e," (Realm model)"),K5e.forEach(t),pHe=i(y),Bm=n(y,"LI",{});var Z5e=s(Bm);fre=n(Z5e,"STRONG",{});var zVr=s(fre);_He=r(zVr,"reformer"),zVr.forEach(t),uHe=r(Z5e," \u2014 "),rS=n(Z5e,"A",{href:!0});var WVr=s(rS);bHe=r(WVr,"ReformerConfig"),WVr.forEach(t),vHe=r(Z5e," (Reformer model)"),Z5e.forEach(t),FHe=i(y),Pm=n(y,"LI",{});var e3e=s(Pm);mre=n(e3e,"STRONG",{});var QVr=s(mre);THe=r(QVr,"regnet"),QVr.forEach(t),MHe=r(e3e," \u2014 "),tS=n(e3e,"A",{href:!0});var HVr=s(tS);EHe=r(HVr,"RegNetConfig"),HVr.forEach(t),CHe=r(e3e," (RegNet model)"),e3e.forEach(t),wHe=i(y),Im=n(y,"LI",{});var o3e=s(Im);gre=n(o3e,"STRONG",{});var UVr=s(gre);AHe=r(UVr,"rembert"),UVr.forEach(t),yHe=r(o3e," \u2014 "),aS=n(o3e,"A",{href:!0});var JVr=s(aS);LHe=r(JVr,"RemBertConfig"),JVr.forEach(t),xHe=r(o3e," (RemBERT model)"),o3e.forEach(t),$He=i(y),qm=n(y,"LI",{});var r3e=s(qm);hre=n(r3e,"STRONG",{});var YVr=s(hre);kHe=r(YVr,"resnet"),YVr.forEach(t),SHe=r(r3e," \u2014 "),nS=n(r3e,"A",{href:!0});var KVr=s(nS);RHe=r(KVr,"ResNetConfig"),KVr.forEach(t),BHe=r(r3e," (ResNet model)"),r3e.forEach(t),PHe=i(y),Nm=n(y,"LI",{});var t3e=s(Nm);pre=n(t3e,"STRONG",{});var ZVr=s(pre);IHe=r(ZVr,"retribert"),ZVr.forEach(t),qHe=r(t3e," \u2014 "),sS=n(t3e,"A",{href:!0});var eXr=s(sS);NHe=r(eXr,"RetriBertConfig"),eXr.forEach(t),jHe=r(t3e," (RetriBERT model)"),t3e.forEach(t),DHe=i(y),jm=n(y,"LI",{});var a3e=s(jm);_re=n(a3e,"STRONG",{});var oXr=s(_re);GHe=r(oXr,"roberta"),oXr.forEach(t),OHe=r(a3e," \u2014 "),lS=n(a3e,"A",{href:!0});var rXr=s(lS);VHe=r(rXr,"RobertaConfig"),rXr.forEach(t),XHe=r(a3e," (RoBERTa model)"),a3e.forEach(t),zHe=i(y),Dm=n(y,"LI",{});var n3e=s(Dm);ure=n(n3e,"STRONG",{});var tXr=s(ure);WHe=r(tXr,"roformer"),tXr.forEach(t),QHe=r(n3e," \u2014 "),iS=n(n3e,"A",{href:!0});var aXr=s(iS);HHe=r(aXr,"RoFormerConfig"),aXr.forEach(t),UHe=r(n3e," (RoFormer model)"),n3e.forEach(t),JHe=i(y),Gm=n(y,"LI",{});var s3e=s(Gm);bre=n(s3e,"STRONG",{});var nXr=s(bre);YHe=r(nXr,"segformer"),nXr.forEach(t),KHe=r(s3e," \u2014 "),dS=n(s3e,"A",{href:!0});var sXr=s(dS);ZHe=r(sXr,"SegformerConfig"),sXr.forEach(t),eUe=r(s3e," (SegFormer model)"),s3e.forEach(t),oUe=i(y),Om=n(y,"LI",{});var l3e=s(Om);vre=n(l3e,"STRONG",{});var lXr=s(vre);rUe=r(lXr,"sew"),lXr.forEach(t),tUe=r(l3e," \u2014 "),cS=n(l3e,"A",{href:!0});var iXr=s(cS);aUe=r(iXr,"SEWConfig"),iXr.forEach(t),nUe=r(l3e," (SEW model)"),l3e.forEach(t),sUe=i(y),Vm=n(y,"LI",{});var i3e=s(Vm);Fre=n(i3e,"STRONG",{});var dXr=s(Fre);lUe=r(dXr,"sew-d"),dXr.forEach(t),iUe=r(i3e," \u2014 "),fS=n(i3e,"A",{href:!0});var cXr=s(fS);dUe=r(cXr,"SEWDConfig"),cXr.forEach(t),cUe=r(i3e," (SEW-D model)"),i3e.forEach(t),fUe=i(y),Xm=n(y,"LI",{});var d3e=s(Xm);Tre=n(d3e,"STRONG",{});var fXr=s(Tre);mUe=r(fXr,"speech-encoder-decoder"),fXr.forEach(t),gUe=r(d3e," \u2014 "),mS=n(d3e,"A",{href:!0});var mXr=s(mS);hUe=r(mXr,"SpeechEncoderDecoderConfig"),mXr.forEach(t),pUe=r(d3e," (Speech Encoder decoder model)"),d3e.forEach(t),_Ue=i(y),zm=n(y,"LI",{});var c3e=s(zm);Mre=n(c3e,"STRONG",{});var gXr=s(Mre);uUe=r(gXr,"speech_to_text"),gXr.forEach(t),bUe=r(c3e," \u2014 "),gS=n(c3e,"A",{href:!0});var hXr=s(gS);vUe=r(hXr,"Speech2TextConfig"),hXr.forEach(t),FUe=r(c3e," (Speech2Text model)"),c3e.forEach(t),TUe=i(y),Wm=n(y,"LI",{});var f3e=s(Wm);Ere=n(f3e,"STRONG",{});var pXr=s(Ere);MUe=r(pXr,"speech_to_text_2"),pXr.forEach(t),EUe=r(f3e," \u2014 "),hS=n(f3e,"A",{href:!0});var _Xr=s(hS);CUe=r(_Xr,"Speech2Text2Config"),_Xr.forEach(t),wUe=r(f3e," (Speech2Text2 model)"),f3e.forEach(t),AUe=i(y),Qm=n(y,"LI",{});var m3e=s(Qm);Cre=n(m3e,"STRONG",{});var uXr=s(Cre);yUe=r(uXr,"splinter"),uXr.forEach(t),LUe=r(m3e," \u2014 "),pS=n(m3e,"A",{href:!0});var bXr=s(pS);xUe=r(bXr,"SplinterConfig"),bXr.forEach(t),$Ue=r(m3e," (Splinter model)"),m3e.forEach(t),kUe=i(y),Hm=n(y,"LI",{});var g3e=s(Hm);wre=n(g3e,"STRONG",{});var vXr=s(wre);SUe=r(vXr,"squeezebert"),vXr.forEach(t),RUe=r(g3e," \u2014 "),_S=n(g3e,"A",{href:!0});var FXr=s(_S);BUe=r(FXr,"SqueezeBertConfig"),FXr.forEach(t),PUe=r(g3e," (SqueezeBERT model)"),g3e.forEach(t),IUe=i(y),Um=n(y,"LI",{});var h3e=s(Um);Are=n(h3e,"STRONG",{});var TXr=s(Are);qUe=r(TXr,"swin"),TXr.forEach(t),NUe=r(h3e," \u2014 "),uS=n(h3e,"A",{href:!0});var MXr=s(uS);jUe=r(MXr,"SwinConfig"),MXr.forEach(t),DUe=r(h3e," (Swin model)"),h3e.forEach(t),GUe=i(y),Jm=n(y,"LI",{});var p3e=s(Jm);yre=n(p3e,"STRONG",{});var EXr=s(yre);OUe=r(EXr,"t5"),EXr.forEach(t),VUe=r(p3e," \u2014 "),bS=n(p3e,"A",{href:!0});var CXr=s(bS);XUe=r(CXr,"T5Config"),CXr.forEach(t),zUe=r(p3e," (T5 model)"),p3e.forEach(t),WUe=i(y),Ym=n(y,"LI",{});var _3e=s(Ym);Lre=n(_3e,"STRONG",{});var wXr=s(Lre);QUe=r(wXr,"tapas"),wXr.forEach(t),HUe=r(_3e," \u2014 "),vS=n(_3e,"A",{href:!0});var AXr=s(vS);UUe=r(AXr,"TapasConfig"),AXr.forEach(t),JUe=r(_3e," (TAPAS model)"),_3e.forEach(t),YUe=i(y),Km=n(y,"LI",{});var u3e=s(Km);xre=n(u3e,"STRONG",{});var yXr=s(xre);KUe=r(yXr,"trajectory_transformer"),yXr.forEach(t),ZUe=r(u3e," \u2014 "),FS=n(u3e,"A",{href:!0});var LXr=s(FS);eJe=r(LXr,"TrajectoryTransformerConfig"),LXr.forEach(t),oJe=r(u3e," (Trajectory Transformer model)"),u3e.forEach(t),rJe=i(y),Zm=n(y,"LI",{});var b3e=s(Zm);$re=n(b3e,"STRONG",{});var xXr=s($re);tJe=r(xXr,"transfo-xl"),xXr.forEach(t),aJe=r(b3e," \u2014 "),TS=n(b3e,"A",{href:!0});var $Xr=s(TS);nJe=r($Xr,"TransfoXLConfig"),$Xr.forEach(t),sJe=r(b3e," (Transformer-XL model)"),b3e.forEach(t),lJe=i(y),eg=n(y,"LI",{});var v3e=s(eg);kre=n(v3e,"STRONG",{});var kXr=s(kre);iJe=r(kXr,"trocr"),kXr.forEach(t),dJe=r(v3e," \u2014 "),MS=n(v3e,"A",{href:!0});var SXr=s(MS);cJe=r(SXr,"TrOCRConfig"),SXr.forEach(t),fJe=r(v3e," (TrOCR model)"),v3e.forEach(t),mJe=i(y),og=n(y,"LI",{});var F3e=s(og);Sre=n(F3e,"STRONG",{});var RXr=s(Sre);gJe=r(RXr,"unispeech"),RXr.forEach(t),hJe=r(F3e," \u2014 "),ES=n(F3e,"A",{href:!0});var BXr=s(ES);pJe=r(BXr,"UniSpeechConfig"),BXr.forEach(t),_Je=r(F3e," (UniSpeech model)"),F3e.forEach(t),uJe=i(y),rg=n(y,"LI",{});var T3e=s(rg);Rre=n(T3e,"STRONG",{});var PXr=s(Rre);bJe=r(PXr,"unispeech-sat"),PXr.forEach(t),vJe=r(T3e," \u2014 "),CS=n(T3e,"A",{href:!0});var IXr=s(CS);FJe=r(IXr,"UniSpeechSatConfig"),IXr.forEach(t),TJe=r(T3e," (UniSpeechSat model)"),T3e.forEach(t),MJe=i(y),tg=n(y,"LI",{});var M3e=s(tg);Bre=n(M3e,"STRONG",{});var qXr=s(Bre);EJe=r(qXr,"van"),qXr.forEach(t),CJe=r(M3e," \u2014 "),wS=n(M3e,"A",{href:!0});var NXr=s(wS);wJe=r(NXr,"VanConfig"),NXr.forEach(t),AJe=r(M3e," (VAN model)"),M3e.forEach(t),yJe=i(y),ag=n(y,"LI",{});var E3e=s(ag);Pre=n(E3e,"STRONG",{});var jXr=s(Pre);LJe=r(jXr,"vilt"),jXr.forEach(t),xJe=r(E3e," \u2014 "),AS=n(E3e,"A",{href:!0});var DXr=s(AS);$Je=r(DXr,"ViltConfig"),DXr.forEach(t),kJe=r(E3e," (ViLT model)"),E3e.forEach(t),SJe=i(y),ng=n(y,"LI",{});var C3e=s(ng);Ire=n(C3e,"STRONG",{});var GXr=s(Ire);RJe=r(GXr,"vision-encoder-decoder"),GXr.forEach(t),BJe=r(C3e," \u2014 "),yS=n(C3e,"A",{href:!0});var OXr=s(yS);PJe=r(OXr,"VisionEncoderDecoderConfig"),OXr.forEach(t),IJe=r(C3e," (Vision Encoder decoder model)"),C3e.forEach(t),qJe=i(y),sg=n(y,"LI",{});var w3e=s(sg);qre=n(w3e,"STRONG",{});var VXr=s(qre);NJe=r(VXr,"vision-text-dual-encoder"),VXr.forEach(t),jJe=r(w3e," \u2014 "),LS=n(w3e,"A",{href:!0});var XXr=s(LS);DJe=r(XXr,"VisionTextDualEncoderConfig"),XXr.forEach(t),GJe=r(w3e," (VisionTextDualEncoder model)"),w3e.forEach(t),OJe=i(y),lg=n(y,"LI",{});var A3e=s(lg);Nre=n(A3e,"STRONG",{});var zXr=s(Nre);VJe=r(zXr,"visual_bert"),zXr.forEach(t),XJe=r(A3e," \u2014 "),xS=n(A3e,"A",{href:!0});var WXr=s(xS);zJe=r(WXr,"VisualBertConfig"),WXr.forEach(t),WJe=r(A3e," (VisualBert model)"),A3e.forEach(t),QJe=i(y),ig=n(y,"LI",{});var y3e=s(ig);jre=n(y3e,"STRONG",{});var QXr=s(jre);HJe=r(QXr,"vit"),QXr.forEach(t),UJe=r(y3e," \u2014 "),$S=n(y3e,"A",{href:!0});var HXr=s($S);JJe=r(HXr,"ViTConfig"),HXr.forEach(t),YJe=r(y3e," (ViT model)"),y3e.forEach(t),KJe=i(y),dg=n(y,"LI",{});var L3e=s(dg);Dre=n(L3e,"STRONG",{});var UXr=s(Dre);ZJe=r(UXr,"vit_mae"),UXr.forEach(t),eYe=r(L3e," \u2014 "),kS=n(L3e,"A",{href:!0});var JXr=s(kS);oYe=r(JXr,"ViTMAEConfig"),JXr.forEach(t),rYe=r(L3e," (ViTMAE model)"),L3e.forEach(t),tYe=i(y),cg=n(y,"LI",{});var x3e=s(cg);Gre=n(x3e,"STRONG",{});var YXr=s(Gre);aYe=r(YXr,"wav2vec2"),YXr.forEach(t),nYe=r(x3e," \u2014 "),SS=n(x3e,"A",{href:!0});var KXr=s(SS);sYe=r(KXr,"Wav2Vec2Config"),KXr.forEach(t),lYe=r(x3e," (Wav2Vec2 model)"),x3e.forEach(t),iYe=i(y),fg=n(y,"LI",{});var $3e=s(fg);Ore=n($3e,"STRONG",{});var ZXr=s(Ore);dYe=r(ZXr,"wav2vec2-conformer"),ZXr.forEach(t),cYe=r($3e," \u2014 "),RS=n($3e,"A",{href:!0});var ezr=s(RS);fYe=r(ezr,"Wav2Vec2ConformerConfig"),ezr.forEach(t),mYe=r($3e," (Wav2Vec2-Conformer model)"),$3e.forEach(t),gYe=i(y),mg=n(y,"LI",{});var k3e=s(mg);Vre=n(k3e,"STRONG",{});var ozr=s(Vre);hYe=r(ozr,"wavlm"),ozr.forEach(t),pYe=r(k3e," \u2014 "),BS=n(k3e,"A",{href:!0});var rzr=s(BS);_Ye=r(rzr,"WavLMConfig"),rzr.forEach(t),uYe=r(k3e," (WavLM model)"),k3e.forEach(t),bYe=i(y),gg=n(y,"LI",{});var S3e=s(gg);Xre=n(S3e,"STRONG",{});var tzr=s(Xre);vYe=r(tzr,"xglm"),tzr.forEach(t),FYe=r(S3e," \u2014 "),PS=n(S3e,"A",{href:!0});var azr=s(PS);TYe=r(azr,"XGLMConfig"),azr.forEach(t),MYe=r(S3e," (XGLM model)"),S3e.forEach(t),EYe=i(y),hg=n(y,"LI",{});var R3e=s(hg);zre=n(R3e,"STRONG",{});var nzr=s(zre);CYe=r(nzr,"xlm"),nzr.forEach(t),wYe=r(R3e," \u2014 "),IS=n(R3e,"A",{href:!0});var szr=s(IS);AYe=r(szr,"XLMConfig"),szr.forEach(t),yYe=r(R3e," (XLM model)"),R3e.forEach(t),LYe=i(y),pg=n(y,"LI",{});var B3e=s(pg);Wre=n(B3e,"STRONG",{});var lzr=s(Wre);xYe=r(lzr,"xlm-prophetnet"),lzr.forEach(t),$Ye=r(B3e," \u2014 "),qS=n(B3e,"A",{href:!0});var izr=s(qS);kYe=r(izr,"XLMProphetNetConfig"),izr.forEach(t),SYe=r(B3e," (XLMProphetNet model)"),B3e.forEach(t),RYe=i(y),_g=n(y,"LI",{});var P3e=s(_g);Qre=n(P3e,"STRONG",{});var dzr=s(Qre);BYe=r(dzr,"xlm-roberta"),dzr.forEach(t),PYe=r(P3e," \u2014 "),NS=n(P3e,"A",{href:!0});var czr=s(NS);IYe=r(czr,"XLMRobertaConfig"),czr.forEach(t),qYe=r(P3e," (XLM-RoBERTa model)"),P3e.forEach(t),NYe=i(y),ug=n(y,"LI",{});var I3e=s(ug);Hre=n(I3e,"STRONG",{});var fzr=s(Hre);jYe=r(fzr,"xlm-roberta-xl"),fzr.forEach(t),DYe=r(I3e," \u2014 "),jS=n(I3e,"A",{href:!0});var mzr=s(jS);GYe=r(mzr,"XLMRobertaXLConfig"),mzr.forEach(t),OYe=r(I3e," (XLM-RoBERTa-XL model)"),I3e.forEach(t),VYe=i(y),bg=n(y,"LI",{});var q3e=s(bg);Ure=n(q3e,"STRONG",{});var gzr=s(Ure);XYe=r(gzr,"xlnet"),gzr.forEach(t),zYe=r(q3e," \u2014 "),DS=n(q3e,"A",{href:!0});var hzr=s(DS);WYe=r(hzr,"XLNetConfig"),hzr.forEach(t),QYe=r(q3e," (XLNet model)"),q3e.forEach(t),HYe=i(y),vg=n(y,"LI",{});var N3e=s(vg);Jre=n(N3e,"STRONG",{});var pzr=s(Jre);UYe=r(pzr,"yolos"),pzr.forEach(t),JYe=r(N3e," \u2014 "),GS=n(N3e,"A",{href:!0});var _zr=s(GS);YYe=r(_zr,"YolosConfig"),_zr.forEach(t),KYe=r(N3e," (YOLOS model)"),N3e.forEach(t),ZYe=i(y),Fg=n(y,"LI",{});var j3e=s(Fg);Yre=n(j3e,"STRONG",{});var uzr=s(Yre);eKe=r(uzr,"yoso"),uzr.forEach(t),oKe=r(j3e," \u2014 "),OS=n(j3e,"A",{href:!0});var bzr=s(OS);rKe=r(bzr,"YosoConfig"),bzr.forEach(t),tKe=r(j3e," (YOSO model)"),j3e.forEach(t),y.forEach(t),aKe=i(ot),T(Tg.$$.fragment,ot),ot.forEach(t),nKe=i(et),Mg=n(et,"DIV",{class:!0});var Eje=s(Mg);T(AA.$$.fragment,Eje),sKe=i(Eje),Kre=n(Eje,"P",{});var vzr=s(Kre);lKe=r(vzr,"Register a new configuration for this class."),vzr.forEach(t),Eje.forEach(t),et.forEach(t),Aqe=i(f),Fi=n(f,"H2",{class:!0});var Cje=s(Fi);Eg=n(Cje,"A",{id:!0,class:!0,href:!0});var Fzr=s(Eg);Zre=n(Fzr,"SPAN",{});var Tzr=s(Zre);T(yA.$$.fragment,Tzr),Tzr.forEach(t),Fzr.forEach(t),iKe=i(Cje),ete=n(Cje,"SPAN",{});var Mzr=s(ete);dKe=r(Mzr,"AutoTokenizer"),Mzr.forEach(t),Cje.forEach(t),yqe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(LA.$$.fragment,Is),cKe=i(Is),xA=n(Is,"P",{});var wje=s(xA);fKe=r(wje,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),VS=n(wje,"A",{href:!0});var Ezr=s(VS);mKe=r(Ezr,"AutoTokenizer.from_pretrained()"),Ezr.forEach(t),gKe=r(wje," class method."),wje.forEach(t),hKe=i(Is),$A=n(Is,"P",{});var Aje=s($A);pKe=r(Aje,"This class cannot be instantiated directly using "),ote=n(Aje,"CODE",{});var Czr=s(ote);_Ke=r(Czr,"__init__()"),Czr.forEach(t),uKe=r(Aje," (throws an error)."),Aje.forEach(t),bKe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(kA.$$.fragment,qs),vKe=i(qs),rte=n(qs,"P",{});var wzr=s(rte);FKe=r(wzr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),wzr.forEach(t),TKe=i(qs),Aa=n(qs,"P",{});var Tw=s(Aa);MKe=r(Tw,"The tokenizer class to instantiate is selected based on the "),tte=n(Tw,"CODE",{});var Azr=s(tte);EKe=r(Azr,"model_type"),Azr.forEach(t),CKe=r(Tw,` property of the config object (either
passed as an argument or loaded from `),ate=n(Tw,"CODE",{});var yzr=s(ate);wKe=r(yzr,"pretrained_model_name_or_path"),yzr.forEach(t),AKe=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nte=n(Tw,"CODE",{});var Lzr=s(nte);yKe=r(Lzr,"pretrained_model_name_or_path"),Lzr.forEach(t),LKe=r(Tw,":"),Tw.forEach(t),xKe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Sx=s(Sn);ste=n(Sx,"STRONG",{});var xzr=s(ste);$Ke=r(xzr,"albert"),xzr.forEach(t),kKe=r(Sx," \u2014 "),XS=n(Sx,"A",{href:!0});var $zr=s(XS);SKe=r($zr,"AlbertTokenizer"),$zr.forEach(t),RKe=r(Sx," or "),zS=n(Sx,"A",{href:!0});var kzr=s(zS);BKe=r(kzr,"AlbertTokenizerFast"),kzr.forEach(t),PKe=r(Sx," (ALBERT model)"),Sx.forEach(t),IKe=i(S),Rn=n(S,"LI",{});var Rx=s(Rn);lte=n(Rx,"STRONG",{});var Szr=s(lte);qKe=r(Szr,"bart"),Szr.forEach(t),NKe=r(Rx," \u2014 "),WS=n(Rx,"A",{href:!0});var Rzr=s(WS);jKe=r(Rzr,"BartTokenizer"),Rzr.forEach(t),DKe=r(Rx," or "),QS=n(Rx,"A",{href:!0});var Bzr=s(QS);GKe=r(Bzr,"BartTokenizerFast"),Bzr.forEach(t),OKe=r(Rx," (BART model)"),Rx.forEach(t),VKe=i(S),Bn=n(S,"LI",{});var Bx=s(Bn);ite=n(Bx,"STRONG",{});var Pzr=s(ite);XKe=r(Pzr,"barthez"),Pzr.forEach(t),zKe=r(Bx," \u2014 "),HS=n(Bx,"A",{href:!0});var Izr=s(HS);WKe=r(Izr,"BarthezTokenizer"),Izr.forEach(t),QKe=r(Bx," or "),US=n(Bx,"A",{href:!0});var qzr=s(US);HKe=r(qzr,"BarthezTokenizerFast"),qzr.forEach(t),UKe=r(Bx," (BARThez model)"),Bx.forEach(t),JKe=i(S),Cg=n(S,"LI",{});var D3e=s(Cg);dte=n(D3e,"STRONG",{});var Nzr=s(dte);YKe=r(Nzr,"bartpho"),Nzr.forEach(t),KKe=r(D3e," \u2014 "),JS=n(D3e,"A",{href:!0});var jzr=s(JS);ZKe=r(jzr,"BartphoTokenizer"),jzr.forEach(t),eZe=r(D3e," (BARTpho model)"),D3e.forEach(t),oZe=i(S),Pn=n(S,"LI",{});var Px=s(Pn);cte=n(Px,"STRONG",{});var Dzr=s(cte);rZe=r(Dzr,"bert"),Dzr.forEach(t),tZe=r(Px," \u2014 "),YS=n(Px,"A",{href:!0});var Gzr=s(YS);aZe=r(Gzr,"BertTokenizer"),Gzr.forEach(t),nZe=r(Px," or "),KS=n(Px,"A",{href:!0});var Ozr=s(KS);sZe=r(Ozr,"BertTokenizerFast"),Ozr.forEach(t),lZe=r(Px," (BERT model)"),Px.forEach(t),iZe=i(S),wg=n(S,"LI",{});var G3e=s(wg);fte=n(G3e,"STRONG",{});var Vzr=s(fte);dZe=r(Vzr,"bert-generation"),Vzr.forEach(t),cZe=r(G3e," \u2014 "),ZS=n(G3e,"A",{href:!0});var Xzr=s(ZS);fZe=r(Xzr,"BertGenerationTokenizer"),Xzr.forEach(t),mZe=r(G3e," (Bert Generation model)"),G3e.forEach(t),gZe=i(S),Ag=n(S,"LI",{});var O3e=s(Ag);mte=n(O3e,"STRONG",{});var zzr=s(mte);hZe=r(zzr,"bert-japanese"),zzr.forEach(t),pZe=r(O3e," \u2014 "),eR=n(O3e,"A",{href:!0});var Wzr=s(eR);_Ze=r(Wzr,"BertJapaneseTokenizer"),Wzr.forEach(t),uZe=r(O3e," (BertJapanese model)"),O3e.forEach(t),bZe=i(S),yg=n(S,"LI",{});var V3e=s(yg);gte=n(V3e,"STRONG",{});var Qzr=s(gte);vZe=r(Qzr,"bertweet"),Qzr.forEach(t),FZe=r(V3e," \u2014 "),oR=n(V3e,"A",{href:!0});var Hzr=s(oR);TZe=r(Hzr,"BertweetTokenizer"),Hzr.forEach(t),MZe=r(V3e," (Bertweet model)"),V3e.forEach(t),EZe=i(S),In=n(S,"LI",{});var Ix=s(In);hte=n(Ix,"STRONG",{});var Uzr=s(hte);CZe=r(Uzr,"big_bird"),Uzr.forEach(t),wZe=r(Ix," \u2014 "),rR=n(Ix,"A",{href:!0});var Jzr=s(rR);AZe=r(Jzr,"BigBirdTokenizer"),Jzr.forEach(t),yZe=r(Ix," or "),tR=n(Ix,"A",{href:!0});var Yzr=s(tR);LZe=r(Yzr,"BigBirdTokenizerFast"),Yzr.forEach(t),xZe=r(Ix," (BigBird model)"),Ix.forEach(t),$Ze=i(S),qn=n(S,"LI",{});var qx=s(qn);pte=n(qx,"STRONG",{});var Kzr=s(pte);kZe=r(Kzr,"bigbird_pegasus"),Kzr.forEach(t),SZe=r(qx," \u2014 "),aR=n(qx,"A",{href:!0});var Zzr=s(aR);RZe=r(Zzr,"PegasusTokenizer"),Zzr.forEach(t),BZe=r(qx," or "),nR=n(qx,"A",{href:!0});var eWr=s(nR);PZe=r(eWr,"PegasusTokenizerFast"),eWr.forEach(t),IZe=r(qx," (BigBirdPegasus model)"),qx.forEach(t),qZe=i(S),Nn=n(S,"LI",{});var Nx=s(Nn);_te=n(Nx,"STRONG",{});var oWr=s(_te);NZe=r(oWr,"blenderbot"),oWr.forEach(t),jZe=r(Nx," \u2014 "),sR=n(Nx,"A",{href:!0});var rWr=s(sR);DZe=r(rWr,"BlenderbotTokenizer"),rWr.forEach(t),GZe=r(Nx," or "),lR=n(Nx,"A",{href:!0});var tWr=s(lR);OZe=r(tWr,"BlenderbotTokenizerFast"),tWr.forEach(t),VZe=r(Nx," (Blenderbot model)"),Nx.forEach(t),XZe=i(S),Lg=n(S,"LI",{});var X3e=s(Lg);ute=n(X3e,"STRONG",{});var aWr=s(ute);zZe=r(aWr,"blenderbot-small"),aWr.forEach(t),WZe=r(X3e," \u2014 "),iR=n(X3e,"A",{href:!0});var nWr=s(iR);QZe=r(nWr,"BlenderbotSmallTokenizer"),nWr.forEach(t),HZe=r(X3e," (BlenderbotSmall model)"),X3e.forEach(t),UZe=i(S),xg=n(S,"LI",{});var z3e=s(xg);bte=n(z3e,"STRONG",{});var sWr=s(bte);JZe=r(sWr,"bloom"),sWr.forEach(t),YZe=r(z3e," \u2014 "),dR=n(z3e,"A",{href:!0});var lWr=s(dR);KZe=r(lWr,"BloomTokenizerFast"),lWr.forEach(t),ZZe=r(z3e," (BLOOM model)"),z3e.forEach(t),eeo=i(S),$g=n(S,"LI",{});var W3e=s($g);vte=n(W3e,"STRONG",{});var iWr=s(vte);oeo=r(iWr,"byt5"),iWr.forEach(t),reo=r(W3e," \u2014 "),cR=n(W3e,"A",{href:!0});var dWr=s(cR);teo=r(dWr,"ByT5Tokenizer"),dWr.forEach(t),aeo=r(W3e," (ByT5 model)"),W3e.forEach(t),neo=i(S),jn=n(S,"LI",{});var jx=s(jn);Fte=n(jx,"STRONG",{});var cWr=s(Fte);seo=r(cWr,"camembert"),cWr.forEach(t),leo=r(jx," \u2014 "),fR=n(jx,"A",{href:!0});var fWr=s(fR);ieo=r(fWr,"CamembertTokenizer"),fWr.forEach(t),deo=r(jx," or "),mR=n(jx,"A",{href:!0});var mWr=s(mR);ceo=r(mWr,"CamembertTokenizerFast"),mWr.forEach(t),feo=r(jx," (CamemBERT model)"),jx.forEach(t),meo=i(S),kg=n(S,"LI",{});var Q3e=s(kg);Tte=n(Q3e,"STRONG",{});var gWr=s(Tte);geo=r(gWr,"canine"),gWr.forEach(t),heo=r(Q3e," \u2014 "),gR=n(Q3e,"A",{href:!0});var hWr=s(gR);peo=r(hWr,"CanineTokenizer"),hWr.forEach(t),_eo=r(Q3e," (Canine model)"),Q3e.forEach(t),ueo=i(S),Dn=n(S,"LI",{});var Dx=s(Dn);Mte=n(Dx,"STRONG",{});var pWr=s(Mte);beo=r(pWr,"clip"),pWr.forEach(t),veo=r(Dx," \u2014 "),hR=n(Dx,"A",{href:!0});var _Wr=s(hR);Feo=r(_Wr,"CLIPTokenizer"),_Wr.forEach(t),Teo=r(Dx," or "),pR=n(Dx,"A",{href:!0});var uWr=s(pR);Meo=r(uWr,"CLIPTokenizerFast"),uWr.forEach(t),Eeo=r(Dx," (CLIP model)"),Dx.forEach(t),Ceo=i(S),Gn=n(S,"LI",{});var Gx=s(Gn);Ete=n(Gx,"STRONG",{});var bWr=s(Ete);weo=r(bWr,"convbert"),bWr.forEach(t),Aeo=r(Gx," \u2014 "),_R=n(Gx,"A",{href:!0});var vWr=s(_R);yeo=r(vWr,"ConvBertTokenizer"),vWr.forEach(t),Leo=r(Gx," or "),uR=n(Gx,"A",{href:!0});var FWr=s(uR);xeo=r(FWr,"ConvBertTokenizerFast"),FWr.forEach(t),$eo=r(Gx," (ConvBERT model)"),Gx.forEach(t),keo=i(S),On=n(S,"LI",{});var Ox=s(On);Cte=n(Ox,"STRONG",{});var TWr=s(Cte);Seo=r(TWr,"cpm"),TWr.forEach(t),Reo=r(Ox," \u2014 "),bR=n(Ox,"A",{href:!0});var MWr=s(bR);Beo=r(MWr,"CpmTokenizer"),MWr.forEach(t),Peo=r(Ox," or "),vR=n(Ox,"A",{href:!0});var EWr=s(vR);Ieo=r(EWr,"CpmTokenizerFast"),EWr.forEach(t),qeo=r(Ox," (CPM model)"),Ox.forEach(t),Neo=i(S),Sg=n(S,"LI",{});var H3e=s(Sg);wte=n(H3e,"STRONG",{});var CWr=s(wte);jeo=r(CWr,"ctrl"),CWr.forEach(t),Deo=r(H3e," \u2014 "),FR=n(H3e,"A",{href:!0});var wWr=s(FR);Geo=r(wWr,"CTRLTokenizer"),wWr.forEach(t),Oeo=r(H3e," (CTRL model)"),H3e.forEach(t),Veo=i(S),Vn=n(S,"LI",{});var Vx=s(Vn);Ate=n(Vx,"STRONG",{});var AWr=s(Ate);Xeo=r(AWr,"data2vec-text"),AWr.forEach(t),zeo=r(Vx," \u2014 "),TR=n(Vx,"A",{href:!0});var yWr=s(TR);Weo=r(yWr,"RobertaTokenizer"),yWr.forEach(t),Qeo=r(Vx," or "),MR=n(Vx,"A",{href:!0});var LWr=s(MR);Heo=r(LWr,"RobertaTokenizerFast"),LWr.forEach(t),Ueo=r(Vx," (Data2VecText model)"),Vx.forEach(t),Jeo=i(S),Xn=n(S,"LI",{});var Xx=s(Xn);yte=n(Xx,"STRONG",{});var xWr=s(yte);Yeo=r(xWr,"deberta"),xWr.forEach(t),Keo=r(Xx," \u2014 "),ER=n(Xx,"A",{href:!0});var $Wr=s(ER);Zeo=r($Wr,"DebertaTokenizer"),$Wr.forEach(t),eoo=r(Xx," or "),CR=n(Xx,"A",{href:!0});var kWr=s(CR);ooo=r(kWr,"DebertaTokenizerFast"),kWr.forEach(t),roo=r(Xx," (DeBERTa model)"),Xx.forEach(t),too=i(S),zn=n(S,"LI",{});var zx=s(zn);Lte=n(zx,"STRONG",{});var SWr=s(Lte);aoo=r(SWr,"deberta-v2"),SWr.forEach(t),noo=r(zx," \u2014 "),wR=n(zx,"A",{href:!0});var RWr=s(wR);soo=r(RWr,"DebertaV2Tokenizer"),RWr.forEach(t),loo=r(zx," or "),AR=n(zx,"A",{href:!0});var BWr=s(AR);ioo=r(BWr,"DebertaV2TokenizerFast"),BWr.forEach(t),doo=r(zx," (DeBERTa-v2 model)"),zx.forEach(t),coo=i(S),Wn=n(S,"LI",{});var Wx=s(Wn);xte=n(Wx,"STRONG",{});var PWr=s(xte);foo=r(PWr,"distilbert"),PWr.forEach(t),moo=r(Wx," \u2014 "),yR=n(Wx,"A",{href:!0});var IWr=s(yR);goo=r(IWr,"DistilBertTokenizer"),IWr.forEach(t),hoo=r(Wx," or "),LR=n(Wx,"A",{href:!0});var qWr=s(LR);poo=r(qWr,"DistilBertTokenizerFast"),qWr.forEach(t),_oo=r(Wx," (DistilBERT model)"),Wx.forEach(t),uoo=i(S),Qn=n(S,"LI",{});var Qx=s(Qn);$te=n(Qx,"STRONG",{});var NWr=s($te);boo=r(NWr,"dpr"),NWr.forEach(t),voo=r(Qx," \u2014 "),xR=n(Qx,"A",{href:!0});var jWr=s(xR);Foo=r(jWr,"DPRQuestionEncoderTokenizer"),jWr.forEach(t),Too=r(Qx," or "),$R=n(Qx,"A",{href:!0});var DWr=s($R);Moo=r(DWr,"DPRQuestionEncoderTokenizerFast"),DWr.forEach(t),Eoo=r(Qx," (DPR model)"),Qx.forEach(t),Coo=i(S),Hn=n(S,"LI",{});var Hx=s(Hn);kte=n(Hx,"STRONG",{});var GWr=s(kte);woo=r(GWr,"electra"),GWr.forEach(t),Aoo=r(Hx," \u2014 "),kR=n(Hx,"A",{href:!0});var OWr=s(kR);yoo=r(OWr,"ElectraTokenizer"),OWr.forEach(t),Loo=r(Hx," or "),SR=n(Hx,"A",{href:!0});var VWr=s(SR);xoo=r(VWr,"ElectraTokenizerFast"),VWr.forEach(t),$oo=r(Hx," (ELECTRA model)"),Hx.forEach(t),koo=i(S),Rg=n(S,"LI",{});var U3e=s(Rg);Ste=n(U3e,"STRONG",{});var XWr=s(Ste);Soo=r(XWr,"flaubert"),XWr.forEach(t),Roo=r(U3e," \u2014 "),RR=n(U3e,"A",{href:!0});var zWr=s(RR);Boo=r(zWr,"FlaubertTokenizer"),zWr.forEach(t),Poo=r(U3e," (FlauBERT model)"),U3e.forEach(t),Ioo=i(S),Un=n(S,"LI",{});var Ux=s(Un);Rte=n(Ux,"STRONG",{});var WWr=s(Rte);qoo=r(WWr,"fnet"),WWr.forEach(t),Noo=r(Ux," \u2014 "),BR=n(Ux,"A",{href:!0});var QWr=s(BR);joo=r(QWr,"FNetTokenizer"),QWr.forEach(t),Doo=r(Ux," or "),PR=n(Ux,"A",{href:!0});var HWr=s(PR);Goo=r(HWr,"FNetTokenizerFast"),HWr.forEach(t),Ooo=r(Ux," (FNet model)"),Ux.forEach(t),Voo=i(S),Bg=n(S,"LI",{});var J3e=s(Bg);Bte=n(J3e,"STRONG",{});var UWr=s(Bte);Xoo=r(UWr,"fsmt"),UWr.forEach(t),zoo=r(J3e," \u2014 "),IR=n(J3e,"A",{href:!0});var JWr=s(IR);Woo=r(JWr,"FSMTTokenizer"),JWr.forEach(t),Qoo=r(J3e," (FairSeq Machine-Translation model)"),J3e.forEach(t),Hoo=i(S),Jn=n(S,"LI",{});var Jx=s(Jn);Pte=n(Jx,"STRONG",{});var YWr=s(Pte);Uoo=r(YWr,"funnel"),YWr.forEach(t),Joo=r(Jx," \u2014 "),qR=n(Jx,"A",{href:!0});var KWr=s(qR);Yoo=r(KWr,"FunnelTokenizer"),KWr.forEach(t),Koo=r(Jx," or "),NR=n(Jx,"A",{href:!0});var ZWr=s(NR);Zoo=r(ZWr,"FunnelTokenizerFast"),ZWr.forEach(t),ero=r(Jx," (Funnel Transformer model)"),Jx.forEach(t),oro=i(S),Yn=n(S,"LI",{});var Yx=s(Yn);Ite=n(Yx,"STRONG",{});var eQr=s(Ite);rro=r(eQr,"gpt2"),eQr.forEach(t),tro=r(Yx," \u2014 "),jR=n(Yx,"A",{href:!0});var oQr=s(jR);aro=r(oQr,"GPT2Tokenizer"),oQr.forEach(t),nro=r(Yx," or "),DR=n(Yx,"A",{href:!0});var rQr=s(DR);sro=r(rQr,"GPT2TokenizerFast"),rQr.forEach(t),lro=r(Yx," (OpenAI GPT-2 model)"),Yx.forEach(t),iro=i(S),Kn=n(S,"LI",{});var Kx=s(Kn);qte=n(Kx,"STRONG",{});var tQr=s(qte);dro=r(tQr,"gpt_neo"),tQr.forEach(t),cro=r(Kx," \u2014 "),GR=n(Kx,"A",{href:!0});var aQr=s(GR);fro=r(aQr,"GPT2Tokenizer"),aQr.forEach(t),mro=r(Kx," or "),OR=n(Kx,"A",{href:!0});var nQr=s(OR);gro=r(nQr,"GPT2TokenizerFast"),nQr.forEach(t),hro=r(Kx," (GPT Neo model)"),Kx.forEach(t),pro=i(S),Zn=n(S,"LI",{});var Zx=s(Zn);Nte=n(Zx,"STRONG",{});var sQr=s(Nte);_ro=r(sQr,"gptj"),sQr.forEach(t),uro=r(Zx," \u2014 "),VR=n(Zx,"A",{href:!0});var lQr=s(VR);bro=r(lQr,"GPT2Tokenizer"),lQr.forEach(t),vro=r(Zx," or "),XR=n(Zx,"A",{href:!0});var iQr=s(XR);Fro=r(iQr,"GPT2TokenizerFast"),iQr.forEach(t),Tro=r(Zx," (GPT-J model)"),Zx.forEach(t),Mro=i(S),es=n(S,"LI",{});var e$=s(es);jte=n(e$,"STRONG",{});var dQr=s(jte);Ero=r(dQr,"herbert"),dQr.forEach(t),Cro=r(e$," \u2014 "),zR=n(e$,"A",{href:!0});var cQr=s(zR);wro=r(cQr,"HerbertTokenizer"),cQr.forEach(t),Aro=r(e$," or "),WR=n(e$,"A",{href:!0});var fQr=s(WR);yro=r(fQr,"HerbertTokenizerFast"),fQr.forEach(t),Lro=r(e$," (HerBERT model)"),e$.forEach(t),xro=i(S),Pg=n(S,"LI",{});var Y3e=s(Pg);Dte=n(Y3e,"STRONG",{});var mQr=s(Dte);$ro=r(mQr,"hubert"),mQr.forEach(t),kro=r(Y3e," \u2014 "),QR=n(Y3e,"A",{href:!0});var gQr=s(QR);Sro=r(gQr,"Wav2Vec2CTCTokenizer"),gQr.forEach(t),Rro=r(Y3e," (Hubert model)"),Y3e.forEach(t),Bro=i(S),os=n(S,"LI",{});var o$=s(os);Gte=n(o$,"STRONG",{});var hQr=s(Gte);Pro=r(hQr,"ibert"),hQr.forEach(t),Iro=r(o$," \u2014 "),HR=n(o$,"A",{href:!0});var pQr=s(HR);qro=r(pQr,"RobertaTokenizer"),pQr.forEach(t),Nro=r(o$," or "),UR=n(o$,"A",{href:!0});var _Qr=s(UR);jro=r(_Qr,"RobertaTokenizerFast"),_Qr.forEach(t),Dro=r(o$," (I-BERT model)"),o$.forEach(t),Gro=i(S),rs=n(S,"LI",{});var r$=s(rs);Ote=n(r$,"STRONG",{});var uQr=s(Ote);Oro=r(uQr,"layoutlm"),uQr.forEach(t),Vro=r(r$," \u2014 "),JR=n(r$,"A",{href:!0});var bQr=s(JR);Xro=r(bQr,"LayoutLMTokenizer"),bQr.forEach(t),zro=r(r$," or "),YR=n(r$,"A",{href:!0});var vQr=s(YR);Wro=r(vQr,"LayoutLMTokenizerFast"),vQr.forEach(t),Qro=r(r$," (LayoutLM model)"),r$.forEach(t),Hro=i(S),ts=n(S,"LI",{});var t$=s(ts);Vte=n(t$,"STRONG",{});var FQr=s(Vte);Uro=r(FQr,"layoutlmv2"),FQr.forEach(t),Jro=r(t$," \u2014 "),KR=n(t$,"A",{href:!0});var TQr=s(KR);Yro=r(TQr,"LayoutLMv2Tokenizer"),TQr.forEach(t),Kro=r(t$," or "),ZR=n(t$,"A",{href:!0});var MQr=s(ZR);Zro=r(MQr,"LayoutLMv2TokenizerFast"),MQr.forEach(t),eto=r(t$," (LayoutLMv2 model)"),t$.forEach(t),oto=i(S),as=n(S,"LI",{});var a$=s(as);Xte=n(a$,"STRONG",{});var EQr=s(Xte);rto=r(EQr,"layoutxlm"),EQr.forEach(t),tto=r(a$," \u2014 "),eB=n(a$,"A",{href:!0});var CQr=s(eB);ato=r(CQr,"LayoutXLMTokenizer"),CQr.forEach(t),nto=r(a$," or "),oB=n(a$,"A",{href:!0});var wQr=s(oB);sto=r(wQr,"LayoutXLMTokenizerFast"),wQr.forEach(t),lto=r(a$," (LayoutXLM model)"),a$.forEach(t),ito=i(S),ns=n(S,"LI",{});var n$=s(ns);zte=n(n$,"STRONG",{});var AQr=s(zte);dto=r(AQr,"led"),AQr.forEach(t),cto=r(n$," \u2014 "),rB=n(n$,"A",{href:!0});var yQr=s(rB);fto=r(yQr,"LEDTokenizer"),yQr.forEach(t),mto=r(n$," or "),tB=n(n$,"A",{href:!0});var LQr=s(tB);gto=r(LQr,"LEDTokenizerFast"),LQr.forEach(t),hto=r(n$," (LED model)"),n$.forEach(t),pto=i(S),ss=n(S,"LI",{});var s$=s(ss);Wte=n(s$,"STRONG",{});var xQr=s(Wte);_to=r(xQr,"longformer"),xQr.forEach(t),uto=r(s$," \u2014 "),aB=n(s$,"A",{href:!0});var $Qr=s(aB);bto=r($Qr,"LongformerTokenizer"),$Qr.forEach(t),vto=r(s$," or "),nB=n(s$,"A",{href:!0});var kQr=s(nB);Fto=r(kQr,"LongformerTokenizerFast"),kQr.forEach(t),Tto=r(s$," (Longformer model)"),s$.forEach(t),Mto=i(S),Ig=n(S,"LI",{});var K3e=s(Ig);Qte=n(K3e,"STRONG",{});var SQr=s(Qte);Eto=r(SQr,"luke"),SQr.forEach(t),Cto=r(K3e," \u2014 "),sB=n(K3e,"A",{href:!0});var RQr=s(sB);wto=r(RQr,"LukeTokenizer"),RQr.forEach(t),Ato=r(K3e," (LUKE model)"),K3e.forEach(t),yto=i(S),ls=n(S,"LI",{});var l$=s(ls);Hte=n(l$,"STRONG",{});var BQr=s(Hte);Lto=r(BQr,"lxmert"),BQr.forEach(t),xto=r(l$," \u2014 "),lB=n(l$,"A",{href:!0});var PQr=s(lB);$to=r(PQr,"LxmertTokenizer"),PQr.forEach(t),kto=r(l$," or "),iB=n(l$,"A",{href:!0});var IQr=s(iB);Sto=r(IQr,"LxmertTokenizerFast"),IQr.forEach(t),Rto=r(l$," (LXMERT model)"),l$.forEach(t),Bto=i(S),qg=n(S,"LI",{});var Z3e=s(qg);Ute=n(Z3e,"STRONG",{});var qQr=s(Ute);Pto=r(qQr,"m2m_100"),qQr.forEach(t),Ito=r(Z3e," \u2014 "),dB=n(Z3e,"A",{href:!0});var NQr=s(dB);qto=r(NQr,"M2M100Tokenizer"),NQr.forEach(t),Nto=r(Z3e," (M2M100 model)"),Z3e.forEach(t),jto=i(S),Ng=n(S,"LI",{});var ewe=s(Ng);Jte=n(ewe,"STRONG",{});var jQr=s(Jte);Dto=r(jQr,"marian"),jQr.forEach(t),Gto=r(ewe," \u2014 "),cB=n(ewe,"A",{href:!0});var DQr=s(cB);Oto=r(DQr,"MarianTokenizer"),DQr.forEach(t),Vto=r(ewe," (Marian model)"),ewe.forEach(t),Xto=i(S),is=n(S,"LI",{});var i$=s(is);Yte=n(i$,"STRONG",{});var GQr=s(Yte);zto=r(GQr,"mbart"),GQr.forEach(t),Wto=r(i$," \u2014 "),fB=n(i$,"A",{href:!0});var OQr=s(fB);Qto=r(OQr,"MBartTokenizer"),OQr.forEach(t),Hto=r(i$," or "),mB=n(i$,"A",{href:!0});var VQr=s(mB);Uto=r(VQr,"MBartTokenizerFast"),VQr.forEach(t),Jto=r(i$," (mBART model)"),i$.forEach(t),Yto=i(S),ds=n(S,"LI",{});var d$=s(ds);Kte=n(d$,"STRONG",{});var XQr=s(Kte);Kto=r(XQr,"mbart50"),XQr.forEach(t),Zto=r(d$," \u2014 "),gB=n(d$,"A",{href:!0});var zQr=s(gB);eao=r(zQr,"MBart50Tokenizer"),zQr.forEach(t),oao=r(d$," or "),hB=n(d$,"A",{href:!0});var WQr=s(hB);rao=r(WQr,"MBart50TokenizerFast"),WQr.forEach(t),tao=r(d$," (mBART-50 model)"),d$.forEach(t),aao=i(S),cs=n(S,"LI",{});var c$=s(cs);Zte=n(c$,"STRONG",{});var QQr=s(Zte);nao=r(QQr,"megatron-bert"),QQr.forEach(t),sao=r(c$," \u2014 "),pB=n(c$,"A",{href:!0});var HQr=s(pB);lao=r(HQr,"BertTokenizer"),HQr.forEach(t),iao=r(c$," or "),_B=n(c$,"A",{href:!0});var UQr=s(_B);dao=r(UQr,"BertTokenizerFast"),UQr.forEach(t),cao=r(c$," (MegatronBert model)"),c$.forEach(t),fao=i(S),jg=n(S,"LI",{});var owe=s(jg);eae=n(owe,"STRONG",{});var JQr=s(eae);mao=r(JQr,"mluke"),JQr.forEach(t),gao=r(owe," \u2014 "),uB=n(owe,"A",{href:!0});var YQr=s(uB);hao=r(YQr,"MLukeTokenizer"),YQr.forEach(t),pao=r(owe," (mLUKE model)"),owe.forEach(t),_ao=i(S),fs=n(S,"LI",{});var f$=s(fs);oae=n(f$,"STRONG",{});var KQr=s(oae);uao=r(KQr,"mobilebert"),KQr.forEach(t),bao=r(f$," \u2014 "),bB=n(f$,"A",{href:!0});var ZQr=s(bB);vao=r(ZQr,"MobileBertTokenizer"),ZQr.forEach(t),Fao=r(f$," or "),vB=n(f$,"A",{href:!0});var eHr=s(vB);Tao=r(eHr,"MobileBertTokenizerFast"),eHr.forEach(t),Mao=r(f$," (MobileBERT model)"),f$.forEach(t),Eao=i(S),ms=n(S,"LI",{});var m$=s(ms);rae=n(m$,"STRONG",{});var oHr=s(rae);Cao=r(oHr,"mpnet"),oHr.forEach(t),wao=r(m$," \u2014 "),FB=n(m$,"A",{href:!0});var rHr=s(FB);Aao=r(rHr,"MPNetTokenizer"),rHr.forEach(t),yao=r(m$," or "),TB=n(m$,"A",{href:!0});var tHr=s(TB);Lao=r(tHr,"MPNetTokenizerFast"),tHr.forEach(t),xao=r(m$," (MPNet model)"),m$.forEach(t),$ao=i(S),gs=n(S,"LI",{});var g$=s(gs);tae=n(g$,"STRONG",{});var aHr=s(tae);kao=r(aHr,"mt5"),aHr.forEach(t),Sao=r(g$," \u2014 "),MB=n(g$,"A",{href:!0});var nHr=s(MB);Rao=r(nHr,"MT5Tokenizer"),nHr.forEach(t),Bao=r(g$," or "),EB=n(g$,"A",{href:!0});var sHr=s(EB);Pao=r(sHr,"MT5TokenizerFast"),sHr.forEach(t),Iao=r(g$," (mT5 model)"),g$.forEach(t),qao=i(S),hs=n(S,"LI",{});var h$=s(hs);aae=n(h$,"STRONG",{});var lHr=s(aae);Nao=r(lHr,"nystromformer"),lHr.forEach(t),jao=r(h$," \u2014 "),CB=n(h$,"A",{href:!0});var iHr=s(CB);Dao=r(iHr,"AlbertTokenizer"),iHr.forEach(t),Gao=r(h$," or "),wB=n(h$,"A",{href:!0});var dHr=s(wB);Oao=r(dHr,"AlbertTokenizerFast"),dHr.forEach(t),Vao=r(h$," (Nystromformer model)"),h$.forEach(t),Xao=i(S),ps=n(S,"LI",{});var p$=s(ps);nae=n(p$,"STRONG",{});var cHr=s(nae);zao=r(cHr,"openai-gpt"),cHr.forEach(t),Wao=r(p$," \u2014 "),AB=n(p$,"A",{href:!0});var fHr=s(AB);Qao=r(fHr,"OpenAIGPTTokenizer"),fHr.forEach(t),Hao=r(p$," or "),yB=n(p$,"A",{href:!0});var mHr=s(yB);Uao=r(mHr,"OpenAIGPTTokenizerFast"),mHr.forEach(t),Jao=r(p$," (OpenAI GPT model)"),p$.forEach(t),Yao=i(S),Dg=n(S,"LI",{});var rwe=s(Dg);sae=n(rwe,"STRONG",{});var gHr=s(sae);Kao=r(gHr,"opt"),gHr.forEach(t),Zao=r(rwe," \u2014 "),LB=n(rwe,"A",{href:!0});var hHr=s(LB);eno=r(hHr,"GPT2Tokenizer"),hHr.forEach(t),ono=r(rwe," (OPT model)"),rwe.forEach(t),rno=i(S),_s=n(S,"LI",{});var _$=s(_s);lae=n(_$,"STRONG",{});var pHr=s(lae);tno=r(pHr,"pegasus"),pHr.forEach(t),ano=r(_$," \u2014 "),xB=n(_$,"A",{href:!0});var _Hr=s(xB);nno=r(_Hr,"PegasusTokenizer"),_Hr.forEach(t),sno=r(_$," or "),$B=n(_$,"A",{href:!0});var uHr=s($B);lno=r(uHr,"PegasusTokenizerFast"),uHr.forEach(t),ino=r(_$," (Pegasus model)"),_$.forEach(t),dno=i(S),Gg=n(S,"LI",{});var twe=s(Gg);iae=n(twe,"STRONG",{});var bHr=s(iae);cno=r(bHr,"perceiver"),bHr.forEach(t),fno=r(twe," \u2014 "),kB=n(twe,"A",{href:!0});var vHr=s(kB);mno=r(vHr,"PerceiverTokenizer"),vHr.forEach(t),gno=r(twe," (Perceiver model)"),twe.forEach(t),hno=i(S),Og=n(S,"LI",{});var awe=s(Og);dae=n(awe,"STRONG",{});var FHr=s(dae);pno=r(FHr,"phobert"),FHr.forEach(t),_no=r(awe," \u2014 "),SB=n(awe,"A",{href:!0});var THr=s(SB);uno=r(THr,"PhobertTokenizer"),THr.forEach(t),bno=r(awe," (PhoBERT model)"),awe.forEach(t),vno=i(S),Vg=n(S,"LI",{});var nwe=s(Vg);cae=n(nwe,"STRONG",{});var MHr=s(cae);Fno=r(MHr,"plbart"),MHr.forEach(t),Tno=r(nwe," \u2014 "),RB=n(nwe,"A",{href:!0});var EHr=s(RB);Mno=r(EHr,"PLBartTokenizer"),EHr.forEach(t),Eno=r(nwe," (PLBart model)"),nwe.forEach(t),Cno=i(S),Xg=n(S,"LI",{});var swe=s(Xg);fae=n(swe,"STRONG",{});var CHr=s(fae);wno=r(CHr,"prophetnet"),CHr.forEach(t),Ano=r(swe," \u2014 "),BB=n(swe,"A",{href:!0});var wHr=s(BB);yno=r(wHr,"ProphetNetTokenizer"),wHr.forEach(t),Lno=r(swe," (ProphetNet model)"),swe.forEach(t),xno=i(S),us=n(S,"LI",{});var u$=s(us);mae=n(u$,"STRONG",{});var AHr=s(mae);$no=r(AHr,"qdqbert"),AHr.forEach(t),kno=r(u$," \u2014 "),PB=n(u$,"A",{href:!0});var yHr=s(PB);Sno=r(yHr,"BertTokenizer"),yHr.forEach(t),Rno=r(u$," or "),IB=n(u$,"A",{href:!0});var LHr=s(IB);Bno=r(LHr,"BertTokenizerFast"),LHr.forEach(t),Pno=r(u$," (QDQBert model)"),u$.forEach(t),Ino=i(S),zg=n(S,"LI",{});var lwe=s(zg);gae=n(lwe,"STRONG",{});var xHr=s(gae);qno=r(xHr,"rag"),xHr.forEach(t),Nno=r(lwe," \u2014 "),qB=n(lwe,"A",{href:!0});var $Hr=s(qB);jno=r($Hr,"RagTokenizer"),$Hr.forEach(t),Dno=r(lwe," (RAG model)"),lwe.forEach(t),Gno=i(S),bs=n(S,"LI",{});var b$=s(bs);hae=n(b$,"STRONG",{});var kHr=s(hae);Ono=r(kHr,"realm"),kHr.forEach(t),Vno=r(b$," \u2014 "),NB=n(b$,"A",{href:!0});var SHr=s(NB);Xno=r(SHr,"RealmTokenizer"),SHr.forEach(t),zno=r(b$," or "),jB=n(b$,"A",{href:!0});var RHr=s(jB);Wno=r(RHr,"RealmTokenizerFast"),RHr.forEach(t),Qno=r(b$," (Realm model)"),b$.forEach(t),Hno=i(S),vs=n(S,"LI",{});var v$=s(vs);pae=n(v$,"STRONG",{});var BHr=s(pae);Uno=r(BHr,"reformer"),BHr.forEach(t),Jno=r(v$," \u2014 "),DB=n(v$,"A",{href:!0});var PHr=s(DB);Yno=r(PHr,"ReformerTokenizer"),PHr.forEach(t),Kno=r(v$," or "),GB=n(v$,"A",{href:!0});var IHr=s(GB);Zno=r(IHr,"ReformerTokenizerFast"),IHr.forEach(t),eso=r(v$," (Reformer model)"),v$.forEach(t),oso=i(S),Fs=n(S,"LI",{});var F$=s(Fs);_ae=n(F$,"STRONG",{});var qHr=s(_ae);rso=r(qHr,"rembert"),qHr.forEach(t),tso=r(F$," \u2014 "),OB=n(F$,"A",{href:!0});var NHr=s(OB);aso=r(NHr,"RemBertTokenizer"),NHr.forEach(t),nso=r(F$," or "),VB=n(F$,"A",{href:!0});var jHr=s(VB);sso=r(jHr,"RemBertTokenizerFast"),jHr.forEach(t),lso=r(F$," (RemBERT model)"),F$.forEach(t),iso=i(S),Ts=n(S,"LI",{});var T$=s(Ts);uae=n(T$,"STRONG",{});var DHr=s(uae);dso=r(DHr,"retribert"),DHr.forEach(t),cso=r(T$," \u2014 "),XB=n(T$,"A",{href:!0});var GHr=s(XB);fso=r(GHr,"RetriBertTokenizer"),GHr.forEach(t),mso=r(T$," or "),zB=n(T$,"A",{href:!0});var OHr=s(zB);gso=r(OHr,"RetriBertTokenizerFast"),OHr.forEach(t),hso=r(T$," (RetriBERT model)"),T$.forEach(t),pso=i(S),Ms=n(S,"LI",{});var M$=s(Ms);bae=n(M$,"STRONG",{});var VHr=s(bae);_so=r(VHr,"roberta"),VHr.forEach(t),uso=r(M$," \u2014 "),WB=n(M$,"A",{href:!0});var XHr=s(WB);bso=r(XHr,"RobertaTokenizer"),XHr.forEach(t),vso=r(M$," or "),QB=n(M$,"A",{href:!0});var zHr=s(QB);Fso=r(zHr,"RobertaTokenizerFast"),zHr.forEach(t),Tso=r(M$," (RoBERTa model)"),M$.forEach(t),Mso=i(S),Es=n(S,"LI",{});var E$=s(Es);vae=n(E$,"STRONG",{});var WHr=s(vae);Eso=r(WHr,"roformer"),WHr.forEach(t),Cso=r(E$," \u2014 "),HB=n(E$,"A",{href:!0});var QHr=s(HB);wso=r(QHr,"RoFormerTokenizer"),QHr.forEach(t),Aso=r(E$," or "),UB=n(E$,"A",{href:!0});var HHr=s(UB);yso=r(HHr,"RoFormerTokenizerFast"),HHr.forEach(t),Lso=r(E$," (RoFormer model)"),E$.forEach(t),xso=i(S),Wg=n(S,"LI",{});var iwe=s(Wg);Fae=n(iwe,"STRONG",{});var UHr=s(Fae);$so=r(UHr,"speech_to_text"),UHr.forEach(t),kso=r(iwe," \u2014 "),JB=n(iwe,"A",{href:!0});var JHr=s(JB);Sso=r(JHr,"Speech2TextTokenizer"),JHr.forEach(t),Rso=r(iwe," (Speech2Text model)"),iwe.forEach(t),Bso=i(S),Qg=n(S,"LI",{});var dwe=s(Qg);Tae=n(dwe,"STRONG",{});var YHr=s(Tae);Pso=r(YHr,"speech_to_text_2"),YHr.forEach(t),Iso=r(dwe," \u2014 "),YB=n(dwe,"A",{href:!0});var KHr=s(YB);qso=r(KHr,"Speech2Text2Tokenizer"),KHr.forEach(t),Nso=r(dwe," (Speech2Text2 model)"),dwe.forEach(t),jso=i(S),Cs=n(S,"LI",{});var C$=s(Cs);Mae=n(C$,"STRONG",{});var ZHr=s(Mae);Dso=r(ZHr,"splinter"),ZHr.forEach(t),Gso=r(C$," \u2014 "),KB=n(C$,"A",{href:!0});var eUr=s(KB);Oso=r(eUr,"SplinterTokenizer"),eUr.forEach(t),Vso=r(C$," or "),ZB=n(C$,"A",{href:!0});var oUr=s(ZB);Xso=r(oUr,"SplinterTokenizerFast"),oUr.forEach(t),zso=r(C$," (Splinter model)"),C$.forEach(t),Wso=i(S),ws=n(S,"LI",{});var w$=s(ws);Eae=n(w$,"STRONG",{});var rUr=s(Eae);Qso=r(rUr,"squeezebert"),rUr.forEach(t),Hso=r(w$," \u2014 "),eP=n(w$,"A",{href:!0});var tUr=s(eP);Uso=r(tUr,"SqueezeBertTokenizer"),tUr.forEach(t),Jso=r(w$," or "),oP=n(w$,"A",{href:!0});var aUr=s(oP);Yso=r(aUr,"SqueezeBertTokenizerFast"),aUr.forEach(t),Kso=r(w$," (SqueezeBERT model)"),w$.forEach(t),Zso=i(S),As=n(S,"LI",{});var A$=s(As);Cae=n(A$,"STRONG",{});var nUr=s(Cae);elo=r(nUr,"t5"),nUr.forEach(t),olo=r(A$," \u2014 "),rP=n(A$,"A",{href:!0});var sUr=s(rP);rlo=r(sUr,"T5Tokenizer"),sUr.forEach(t),tlo=r(A$," or "),tP=n(A$,"A",{href:!0});var lUr=s(tP);alo=r(lUr,"T5TokenizerFast"),lUr.forEach(t),nlo=r(A$," (T5 model)"),A$.forEach(t),slo=i(S),Hg=n(S,"LI",{});var cwe=s(Hg);wae=n(cwe,"STRONG",{});var iUr=s(wae);llo=r(iUr,"tapas"),iUr.forEach(t),ilo=r(cwe," \u2014 "),aP=n(cwe,"A",{href:!0});var dUr=s(aP);dlo=r(dUr,"TapasTokenizer"),dUr.forEach(t),clo=r(cwe," (TAPAS model)"),cwe.forEach(t),flo=i(S),Ug=n(S,"LI",{});var fwe=s(Ug);Aae=n(fwe,"STRONG",{});var cUr=s(Aae);mlo=r(cUr,"tapex"),cUr.forEach(t),glo=r(fwe," \u2014 "),nP=n(fwe,"A",{href:!0});var fUr=s(nP);hlo=r(fUr,"TapexTokenizer"),fUr.forEach(t),plo=r(fwe," (TAPEX model)"),fwe.forEach(t),_lo=i(S),Jg=n(S,"LI",{});var mwe=s(Jg);yae=n(mwe,"STRONG",{});var mUr=s(yae);ulo=r(mUr,"transfo-xl"),mUr.forEach(t),blo=r(mwe," \u2014 "),sP=n(mwe,"A",{href:!0});var gUr=s(sP);vlo=r(gUr,"TransfoXLTokenizer"),gUr.forEach(t),Flo=r(mwe," (Transformer-XL model)"),mwe.forEach(t),Tlo=i(S),ys=n(S,"LI",{});var y$=s(ys);Lae=n(y$,"STRONG",{});var hUr=s(Lae);Mlo=r(hUr,"visual_bert"),hUr.forEach(t),Elo=r(y$," \u2014 "),lP=n(y$,"A",{href:!0});var pUr=s(lP);Clo=r(pUr,"BertTokenizer"),pUr.forEach(t),wlo=r(y$," or "),iP=n(y$,"A",{href:!0});var _Ur=s(iP);Alo=r(_Ur,"BertTokenizerFast"),_Ur.forEach(t),ylo=r(y$," (VisualBert model)"),y$.forEach(t),Llo=i(S),Yg=n(S,"LI",{});var gwe=s(Yg);xae=n(gwe,"STRONG",{});var uUr=s(xae);xlo=r(uUr,"wav2vec2"),uUr.forEach(t),$lo=r(gwe," \u2014 "),dP=n(gwe,"A",{href:!0});var bUr=s(dP);klo=r(bUr,"Wav2Vec2CTCTokenizer"),bUr.forEach(t),Slo=r(gwe," (Wav2Vec2 model)"),gwe.forEach(t),Rlo=i(S),Kg=n(S,"LI",{});var hwe=s(Kg);$ae=n(hwe,"STRONG",{});var vUr=s($ae);Blo=r(vUr,"wav2vec2-conformer"),vUr.forEach(t),Plo=r(hwe," \u2014 "),cP=n(hwe,"A",{href:!0});var FUr=s(cP);Ilo=r(FUr,"Wav2Vec2CTCTokenizer"),FUr.forEach(t),qlo=r(hwe," (Wav2Vec2-Conformer model)"),hwe.forEach(t),Nlo=i(S),Zg=n(S,"LI",{});var pwe=s(Zg);kae=n(pwe,"STRONG",{});var TUr=s(kae);jlo=r(TUr,"wav2vec2_phoneme"),TUr.forEach(t),Dlo=r(pwe," \u2014 "),fP=n(pwe,"A",{href:!0});var MUr=s(fP);Glo=r(MUr,"Wav2Vec2PhonemeCTCTokenizer"),MUr.forEach(t),Olo=r(pwe," (Wav2Vec2Phoneme model)"),pwe.forEach(t),Vlo=i(S),Ls=n(S,"LI",{});var L$=s(Ls);Sae=n(L$,"STRONG",{});var EUr=s(Sae);Xlo=r(EUr,"xglm"),EUr.forEach(t),zlo=r(L$," \u2014 "),mP=n(L$,"A",{href:!0});var CUr=s(mP);Wlo=r(CUr,"XGLMTokenizer"),CUr.forEach(t),Qlo=r(L$," or "),gP=n(L$,"A",{href:!0});var wUr=s(gP);Hlo=r(wUr,"XGLMTokenizerFast"),wUr.forEach(t),Ulo=r(L$," (XGLM model)"),L$.forEach(t),Jlo=i(S),eh=n(S,"LI",{});var _we=s(eh);Rae=n(_we,"STRONG",{});var AUr=s(Rae);Ylo=r(AUr,"xlm"),AUr.forEach(t),Klo=r(_we," \u2014 "),hP=n(_we,"A",{href:!0});var yUr=s(hP);Zlo=r(yUr,"XLMTokenizer"),yUr.forEach(t),eio=r(_we," (XLM model)"),_we.forEach(t),oio=i(S),oh=n(S,"LI",{});var uwe=s(oh);Bae=n(uwe,"STRONG",{});var LUr=s(Bae);rio=r(LUr,"xlm-prophetnet"),LUr.forEach(t),tio=r(uwe," \u2014 "),pP=n(uwe,"A",{href:!0});var xUr=s(pP);aio=r(xUr,"XLMProphetNetTokenizer"),xUr.forEach(t),nio=r(uwe," (XLMProphetNet model)"),uwe.forEach(t),sio=i(S),xs=n(S,"LI",{});var x$=s(xs);Pae=n(x$,"STRONG",{});var $Ur=s(Pae);lio=r($Ur,"xlm-roberta"),$Ur.forEach(t),iio=r(x$," \u2014 "),_P=n(x$,"A",{href:!0});var kUr=s(_P);dio=r(kUr,"XLMRobertaTokenizer"),kUr.forEach(t),cio=r(x$," or "),uP=n(x$,"A",{href:!0});var SUr=s(uP);fio=r(SUr,"XLMRobertaTokenizerFast"),SUr.forEach(t),mio=r(x$," (XLM-RoBERTa model)"),x$.forEach(t),gio=i(S),$s=n(S,"LI",{});var $$=s($s);Iae=n($$,"STRONG",{});var RUr=s(Iae);hio=r(RUr,"xlm-roberta-xl"),RUr.forEach(t),pio=r($$," \u2014 "),bP=n($$,"A",{href:!0});var BUr=s(bP);_io=r(BUr,"RobertaTokenizer"),BUr.forEach(t),uio=r($$," or "),vP=n($$,"A",{href:!0});var PUr=s(vP);bio=r(PUr,"RobertaTokenizerFast"),PUr.forEach(t),vio=r($$," (XLM-RoBERTa-XL model)"),$$.forEach(t),Fio=i(S),ks=n(S,"LI",{});var k$=s(ks);qae=n(k$,"STRONG",{});var IUr=s(qae);Tio=r(IUr,"xlnet"),IUr.forEach(t),Mio=r(k$," \u2014 "),FP=n(k$,"A",{href:!0});var qUr=s(FP);Eio=r(qUr,"XLNetTokenizer"),qUr.forEach(t),Cio=r(k$," or "),TP=n(k$,"A",{href:!0});var NUr=s(TP);wio=r(NUr,"XLNetTokenizerFast"),NUr.forEach(t),Aio=r(k$," (XLNet model)"),k$.forEach(t),yio=i(S),Ss=n(S,"LI",{});var S$=s(Ss);Nae=n(S$,"STRONG",{});var jUr=s(Nae);Lio=r(jUr,"yoso"),jUr.forEach(t),xio=r(S$," \u2014 "),MP=n(S$,"A",{href:!0});var DUr=s(MP);$io=r(DUr,"AlbertTokenizer"),DUr.forEach(t),kio=r(S$," or "),EP=n(S$,"A",{href:!0});var GUr=s(EP);Sio=r(GUr,"AlbertTokenizerFast"),GUr.forEach(t),Rio=r(S$," (YOSO model)"),S$.forEach(t),S.forEach(t),Bio=i(qs),T(rh.$$.fragment,qs),qs.forEach(t),Pio=i(Is),th=n(Is,"DIV",{class:!0});var yje=s(th);T(SA.$$.fragment,yje),Iio=i(yje),jae=n(yje,"P",{});var OUr=s(jae);qio=r(OUr,"Register a new tokenizer in this mapping."),OUr.forEach(t),yje.forEach(t),Is.forEach(t),Lqe=i(f),Ti=n(f,"H2",{class:!0});var Lje=s(Ti);ah=n(Lje,"A",{id:!0,class:!0,href:!0});var VUr=s(ah);Dae=n(VUr,"SPAN",{});var XUr=s(Dae);T(RA.$$.fragment,XUr),XUr.forEach(t),VUr.forEach(t),Nio=i(Lje),Gae=n(Lje,"SPAN",{});var zUr=s(Gae);jio=r(zUr,"AutoFeatureExtractor"),zUr.forEach(t),Lje.forEach(t),xqe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(BA.$$.fragment,Ns),Dio=i(Ns),PA=n(Ns,"P",{});var xje=s(PA);Gio=r(xje,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),CP=n(xje,"A",{href:!0});var WUr=s(CP);Oio=r(WUr,"AutoFeatureExtractor.from_pretrained()"),WUr.forEach(t),Vio=r(xje," class method."),xje.forEach(t),Xio=i(Ns),IA=n(Ns,"P",{});var $je=s(IA);zio=r($je,"This class cannot be instantiated directly using "),Oae=n($je,"CODE",{});var QUr=s(Oae);Wio=r(QUr,"__init__()"),QUr.forEach(t),Qio=r($je," (throws an error)."),$je.forEach(t),Hio=i(Ns),He=n(Ns,"DIV",{class:!0});var Zt=s(He);T(qA.$$.fragment,Zt),Uio=i(Zt),Vae=n(Zt,"P",{});var HUr=s(Vae);Jio=r(HUr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),HUr.forEach(t),Yio=i(Zt),ya=n(Zt,"P",{});var Mw=s(ya);Kio=r(Mw,"The feature extractor class to instantiate is selected based on the "),Xae=n(Mw,"CODE",{});var UUr=s(Xae);Zio=r(UUr,"model_type"),UUr.forEach(t),edo=r(Mw,` property of the config object
(either passed as an argument or loaded from `),zae=n(Mw,"CODE",{});var JUr=s(zae);odo=r(JUr,"pretrained_model_name_or_path"),JUr.forEach(t),rdo=r(Mw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Wae=n(Mw,"CODE",{});var YUr=s(Wae);tdo=r(YUr,"pretrained_model_name_or_path"),YUr.forEach(t),ado=r(Mw,":"),Mw.forEach(t),ndo=i(Zt),Z=n(Zt,"UL",{});var re=s(Z);nh=n(re,"LI",{});var bwe=s(nh);Qae=n(bwe,"STRONG",{});var KUr=s(Qae);sdo=r(KUr,"beit"),KUr.forEach(t),ldo=r(bwe," \u2014 "),wP=n(bwe,"A",{href:!0});var ZUr=s(wP);ido=r(ZUr,"BeitFeatureExtractor"),ZUr.forEach(t),ddo=r(bwe," (BEiT model)"),bwe.forEach(t),cdo=i(re),sh=n(re,"LI",{});var vwe=s(sh);Hae=n(vwe,"STRONG",{});var eJr=s(Hae);fdo=r(eJr,"clip"),eJr.forEach(t),mdo=r(vwe," \u2014 "),AP=n(vwe,"A",{href:!0});var oJr=s(AP);gdo=r(oJr,"CLIPFeatureExtractor"),oJr.forEach(t),hdo=r(vwe," (CLIP model)"),vwe.forEach(t),pdo=i(re),lh=n(re,"LI",{});var Fwe=s(lh);Uae=n(Fwe,"STRONG",{});var rJr=s(Uae);_do=r(rJr,"convnext"),rJr.forEach(t),udo=r(Fwe," \u2014 "),yP=n(Fwe,"A",{href:!0});var tJr=s(yP);bdo=r(tJr,"ConvNextFeatureExtractor"),tJr.forEach(t),vdo=r(Fwe," (ConvNext model)"),Fwe.forEach(t),Fdo=i(re),ih=n(re,"LI",{});var Twe=s(ih);Jae=n(Twe,"STRONG",{});var aJr=s(Jae);Tdo=r(aJr,"cvt"),aJr.forEach(t),Mdo=r(Twe," \u2014 "),LP=n(Twe,"A",{href:!0});var nJr=s(LP);Edo=r(nJr,"ConvNextFeatureExtractor"),nJr.forEach(t),Cdo=r(Twe," (CvT model)"),Twe.forEach(t),wdo=i(re),dh=n(re,"LI",{});var Mwe=s(dh);Yae=n(Mwe,"STRONG",{});var sJr=s(Yae);Ado=r(sJr,"data2vec-audio"),sJr.forEach(t),ydo=r(Mwe," \u2014 "),xP=n(Mwe,"A",{href:!0});var lJr=s(xP);Ldo=r(lJr,"Wav2Vec2FeatureExtractor"),lJr.forEach(t),xdo=r(Mwe," (Data2VecAudio model)"),Mwe.forEach(t),$do=i(re),ch=n(re,"LI",{});var Ewe=s(ch);Kae=n(Ewe,"STRONG",{});var iJr=s(Kae);kdo=r(iJr,"data2vec-vision"),iJr.forEach(t),Sdo=r(Ewe," \u2014 "),$P=n(Ewe,"A",{href:!0});var dJr=s($P);Rdo=r(dJr,"BeitFeatureExtractor"),dJr.forEach(t),Bdo=r(Ewe," (Data2VecVision model)"),Ewe.forEach(t),Pdo=i(re),fh=n(re,"LI",{});var Cwe=s(fh);Zae=n(Cwe,"STRONG",{});var cJr=s(Zae);Ido=r(cJr,"deit"),cJr.forEach(t),qdo=r(Cwe," \u2014 "),kP=n(Cwe,"A",{href:!0});var fJr=s(kP);Ndo=r(fJr,"DeiTFeatureExtractor"),fJr.forEach(t),jdo=r(Cwe," (DeiT model)"),Cwe.forEach(t),Ddo=i(re),mh=n(re,"LI",{});var wwe=s(mh);ene=n(wwe,"STRONG",{});var mJr=s(ene);Gdo=r(mJr,"detr"),mJr.forEach(t),Odo=r(wwe," \u2014 "),SP=n(wwe,"A",{href:!0});var gJr=s(SP);Vdo=r(gJr,"DetrFeatureExtractor"),gJr.forEach(t),Xdo=r(wwe," (DETR model)"),wwe.forEach(t),zdo=i(re),gh=n(re,"LI",{});var Awe=s(gh);one=n(Awe,"STRONG",{});var hJr=s(one);Wdo=r(hJr,"dpt"),hJr.forEach(t),Qdo=r(Awe," \u2014 "),RP=n(Awe,"A",{href:!0});var pJr=s(RP);Hdo=r(pJr,"DPTFeatureExtractor"),pJr.forEach(t),Udo=r(Awe," (DPT model)"),Awe.forEach(t),Jdo=i(re),hh=n(re,"LI",{});var ywe=s(hh);rne=n(ywe,"STRONG",{});var _Jr=s(rne);Ydo=r(_Jr,"flava"),_Jr.forEach(t),Kdo=r(ywe," \u2014 "),BP=n(ywe,"A",{href:!0});var uJr=s(BP);Zdo=r(uJr,"FlavaFeatureExtractor"),uJr.forEach(t),eco=r(ywe," (Flava model)"),ywe.forEach(t),oco=i(re),ph=n(re,"LI",{});var Lwe=s(ph);tne=n(Lwe,"STRONG",{});var bJr=s(tne);rco=r(bJr,"glpn"),bJr.forEach(t),tco=r(Lwe," \u2014 "),PP=n(Lwe,"A",{href:!0});var vJr=s(PP);aco=r(vJr,"GLPNFeatureExtractor"),vJr.forEach(t),nco=r(Lwe," (GLPN model)"),Lwe.forEach(t),sco=i(re),_h=n(re,"LI",{});var xwe=s(_h);ane=n(xwe,"STRONG",{});var FJr=s(ane);lco=r(FJr,"hubert"),FJr.forEach(t),ico=r(xwe," \u2014 "),IP=n(xwe,"A",{href:!0});var TJr=s(IP);dco=r(TJr,"Wav2Vec2FeatureExtractor"),TJr.forEach(t),cco=r(xwe," (Hubert model)"),xwe.forEach(t),fco=i(re),uh=n(re,"LI",{});var $we=s(uh);nne=n($we,"STRONG",{});var MJr=s(nne);mco=r(MJr,"layoutlmv2"),MJr.forEach(t),gco=r($we," \u2014 "),qP=n($we,"A",{href:!0});var EJr=s(qP);hco=r(EJr,"LayoutLMv2FeatureExtractor"),EJr.forEach(t),pco=r($we," (LayoutLMv2 model)"),$we.forEach(t),_co=i(re),bh=n(re,"LI",{});var kwe=s(bh);sne=n(kwe,"STRONG",{});var CJr=s(sne);uco=r(CJr,"maskformer"),CJr.forEach(t),bco=r(kwe," \u2014 "),NP=n(kwe,"A",{href:!0});var wJr=s(NP);vco=r(wJr,"MaskFormerFeatureExtractor"),wJr.forEach(t),Fco=r(kwe," (MaskFormer model)"),kwe.forEach(t),Tco=i(re),vh=n(re,"LI",{});var Swe=s(vh);lne=n(Swe,"STRONG",{});var AJr=s(lne);Mco=r(AJr,"perceiver"),AJr.forEach(t),Eco=r(Swe," \u2014 "),jP=n(Swe,"A",{href:!0});var yJr=s(jP);Cco=r(yJr,"PerceiverFeatureExtractor"),yJr.forEach(t),wco=r(Swe," (Perceiver model)"),Swe.forEach(t),Aco=i(re),Fh=n(re,"LI",{});var Rwe=s(Fh);ine=n(Rwe,"STRONG",{});var LJr=s(ine);yco=r(LJr,"poolformer"),LJr.forEach(t),Lco=r(Rwe," \u2014 "),DP=n(Rwe,"A",{href:!0});var xJr=s(DP);xco=r(xJr,"PoolFormerFeatureExtractor"),xJr.forEach(t),$co=r(Rwe," (PoolFormer model)"),Rwe.forEach(t),kco=i(re),Th=n(re,"LI",{});var Bwe=s(Th);dne=n(Bwe,"STRONG",{});var $Jr=s(dne);Sco=r($Jr,"regnet"),$Jr.forEach(t),Rco=r(Bwe," \u2014 "),GP=n(Bwe,"A",{href:!0});var kJr=s(GP);Bco=r(kJr,"ConvNextFeatureExtractor"),kJr.forEach(t),Pco=r(Bwe," (RegNet model)"),Bwe.forEach(t),Ico=i(re),Mh=n(re,"LI",{});var Pwe=s(Mh);cne=n(Pwe,"STRONG",{});var SJr=s(cne);qco=r(SJr,"resnet"),SJr.forEach(t),Nco=r(Pwe," \u2014 "),OP=n(Pwe,"A",{href:!0});var RJr=s(OP);jco=r(RJr,"ConvNextFeatureExtractor"),RJr.forEach(t),Dco=r(Pwe," (ResNet model)"),Pwe.forEach(t),Gco=i(re),Eh=n(re,"LI",{});var Iwe=s(Eh);fne=n(Iwe,"STRONG",{});var BJr=s(fne);Oco=r(BJr,"segformer"),BJr.forEach(t),Vco=r(Iwe," \u2014 "),VP=n(Iwe,"A",{href:!0});var PJr=s(VP);Xco=r(PJr,"SegformerFeatureExtractor"),PJr.forEach(t),zco=r(Iwe," (SegFormer model)"),Iwe.forEach(t),Wco=i(re),Ch=n(re,"LI",{});var qwe=s(Ch);mne=n(qwe,"STRONG",{});var IJr=s(mne);Qco=r(IJr,"speech_to_text"),IJr.forEach(t),Hco=r(qwe," \u2014 "),XP=n(qwe,"A",{href:!0});var qJr=s(XP);Uco=r(qJr,"Speech2TextFeatureExtractor"),qJr.forEach(t),Jco=r(qwe," (Speech2Text model)"),qwe.forEach(t),Yco=i(re),wh=n(re,"LI",{});var Nwe=s(wh);gne=n(Nwe,"STRONG",{});var NJr=s(gne);Kco=r(NJr,"swin"),NJr.forEach(t),Zco=r(Nwe," \u2014 "),zP=n(Nwe,"A",{href:!0});var jJr=s(zP);efo=r(jJr,"ViTFeatureExtractor"),jJr.forEach(t),ofo=r(Nwe," (Swin model)"),Nwe.forEach(t),rfo=i(re),Ah=n(re,"LI",{});var jwe=s(Ah);hne=n(jwe,"STRONG",{});var DJr=s(hne);tfo=r(DJr,"van"),DJr.forEach(t),afo=r(jwe," \u2014 "),WP=n(jwe,"A",{href:!0});var GJr=s(WP);nfo=r(GJr,"ConvNextFeatureExtractor"),GJr.forEach(t),sfo=r(jwe," (VAN model)"),jwe.forEach(t),lfo=i(re),yh=n(re,"LI",{});var Dwe=s(yh);pne=n(Dwe,"STRONG",{});var OJr=s(pne);ifo=r(OJr,"vit"),OJr.forEach(t),dfo=r(Dwe," \u2014 "),QP=n(Dwe,"A",{href:!0});var VJr=s(QP);cfo=r(VJr,"ViTFeatureExtractor"),VJr.forEach(t),ffo=r(Dwe," (ViT model)"),Dwe.forEach(t),mfo=i(re),Lh=n(re,"LI",{});var Gwe=s(Lh);_ne=n(Gwe,"STRONG",{});var XJr=s(_ne);gfo=r(XJr,"vit_mae"),XJr.forEach(t),hfo=r(Gwe," \u2014 "),HP=n(Gwe,"A",{href:!0});var zJr=s(HP);pfo=r(zJr,"ViTFeatureExtractor"),zJr.forEach(t),_fo=r(Gwe," (ViTMAE model)"),Gwe.forEach(t),ufo=i(re),xh=n(re,"LI",{});var Owe=s(xh);une=n(Owe,"STRONG",{});var WJr=s(une);bfo=r(WJr,"wav2vec2"),WJr.forEach(t),vfo=r(Owe," \u2014 "),UP=n(Owe,"A",{href:!0});var QJr=s(UP);Ffo=r(QJr,"Wav2Vec2FeatureExtractor"),QJr.forEach(t),Tfo=r(Owe," (Wav2Vec2 model)"),Owe.forEach(t),Mfo=i(re),$h=n(re,"LI",{});var Vwe=s($h);bne=n(Vwe,"STRONG",{});var HJr=s(bne);Efo=r(HJr,"wav2vec2-conformer"),HJr.forEach(t),Cfo=r(Vwe," \u2014 "),JP=n(Vwe,"A",{href:!0});var UJr=s(JP);wfo=r(UJr,"Wav2Vec2FeatureExtractor"),UJr.forEach(t),Afo=r(Vwe," (Wav2Vec2-Conformer model)"),Vwe.forEach(t),yfo=i(re),kh=n(re,"LI",{});var Xwe=s(kh);vne=n(Xwe,"STRONG",{});var JJr=s(vne);Lfo=r(JJr,"yolos"),JJr.forEach(t),xfo=r(Xwe," \u2014 "),YP=n(Xwe,"A",{href:!0});var YJr=s(YP);$fo=r(YJr,"YolosFeatureExtractor"),YJr.forEach(t),kfo=r(Xwe," (YOLOS model)"),Xwe.forEach(t),re.forEach(t),Sfo=i(Zt),T(Sh.$$.fragment,Zt),Rfo=i(Zt),T(Rh.$$.fragment,Zt),Zt.forEach(t),Bfo=i(Ns),Bh=n(Ns,"DIV",{class:!0});var kje=s(Bh);T(NA.$$.fragment,kje),Pfo=i(kje),Fne=n(kje,"P",{});var KJr=s(Fne);Ifo=r(KJr,"Register a new feature extractor for this class."),KJr.forEach(t),kje.forEach(t),Ns.forEach(t),$qe=i(f),Mi=n(f,"H2",{class:!0});var Sje=s(Mi);Ph=n(Sje,"A",{id:!0,class:!0,href:!0});var ZJr=s(Ph);Tne=n(ZJr,"SPAN",{});var eYr=s(Tne);T(jA.$$.fragment,eYr),eYr.forEach(t),ZJr.forEach(t),qfo=i(Sje),Mne=n(Sje,"SPAN",{});var oYr=s(Mne);Nfo=r(oYr,"AutoProcessor"),oYr.forEach(t),Sje.forEach(t),kqe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(DA.$$.fragment,js),jfo=i(js),GA=n(js,"P",{});var Rje=s(GA);Dfo=r(Rje,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),KP=n(Rje,"A",{href:!0});var rYr=s(KP);Gfo=r(rYr,"AutoProcessor.from_pretrained()"),rYr.forEach(t),Ofo=r(Rje," class method."),Rje.forEach(t),Vfo=i(js),OA=n(js,"P",{});var Bje=s(OA);Xfo=r(Bje,"This class cannot be instantiated directly using "),Ene=n(Bje,"CODE",{});var tYr=s(Ene);zfo=r(tYr,"__init__()"),tYr.forEach(t),Wfo=r(Bje," (throws an error)."),Bje.forEach(t),Qfo=i(js),Ue=n(js,"DIV",{class:!0});var ea=s(Ue);T(VA.$$.fragment,ea),Hfo=i(ea),Cne=n(ea,"P",{});var aYr=s(Cne);Ufo=r(aYr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),aYr.forEach(t),Jfo=i(ea),Ei=n(ea,"P",{});var JK=s(Ei);Yfo=r(JK,"The processor class to instantiate is selected based on the "),wne=n(JK,"CODE",{});var nYr=s(wne);Kfo=r(nYr,"model_type"),nYr.forEach(t),Zfo=r(JK,` property of the config object (either
passed as an argument or loaded from `),Ane=n(JK,"CODE",{});var sYr=s(Ane);emo=r(sYr,"pretrained_model_name_or_path"),sYr.forEach(t),omo=r(JK," if possible):"),JK.forEach(t),rmo=i(ea),pe=n(ea,"UL",{});var be=s(pe);Ih=n(be,"LI",{});var zwe=s(Ih);yne=n(zwe,"STRONG",{});var lYr=s(yne);tmo=r(lYr,"clip"),lYr.forEach(t),amo=r(zwe," \u2014 "),ZP=n(zwe,"A",{href:!0});var iYr=s(ZP);nmo=r(iYr,"CLIPProcessor"),iYr.forEach(t),smo=r(zwe," (CLIP model)"),zwe.forEach(t),lmo=i(be),qh=n(be,"LI",{});var Wwe=s(qh);Lne=n(Wwe,"STRONG",{});var dYr=s(Lne);imo=r(dYr,"flava"),dYr.forEach(t),dmo=r(Wwe," \u2014 "),xne=n(Wwe,"CODE",{});var cYr=s(xne);cmo=r(cYr,"FLAVAProcessor"),cYr.forEach(t),fmo=r(Wwe," (Flava model)"),Wwe.forEach(t),mmo=i(be),Nh=n(be,"LI",{});var Qwe=s(Nh);$ne=n(Qwe,"STRONG",{});var fYr=s($ne);gmo=r(fYr,"layoutlmv2"),fYr.forEach(t),hmo=r(Qwe," \u2014 "),eI=n(Qwe,"A",{href:!0});var mYr=s(eI);pmo=r(mYr,"LayoutLMv2Processor"),mYr.forEach(t),_mo=r(Qwe," (LayoutLMv2 model)"),Qwe.forEach(t),umo=i(be),jh=n(be,"LI",{});var Hwe=s(jh);kne=n(Hwe,"STRONG",{});var gYr=s(kne);bmo=r(gYr,"layoutxlm"),gYr.forEach(t),vmo=r(Hwe," \u2014 "),oI=n(Hwe,"A",{href:!0});var hYr=s(oI);Fmo=r(hYr,"LayoutXLMProcessor"),hYr.forEach(t),Tmo=r(Hwe," (LayoutXLM model)"),Hwe.forEach(t),Mmo=i(be),Dh=n(be,"LI",{});var Uwe=s(Dh);Sne=n(Uwe,"STRONG",{});var pYr=s(Sne);Emo=r(pYr,"sew"),pYr.forEach(t),Cmo=r(Uwe," \u2014 "),rI=n(Uwe,"A",{href:!0});var _Yr=s(rI);wmo=r(_Yr,"Wav2Vec2Processor"),_Yr.forEach(t),Amo=r(Uwe," (SEW model)"),Uwe.forEach(t),ymo=i(be),Gh=n(be,"LI",{});var Jwe=s(Gh);Rne=n(Jwe,"STRONG",{});var uYr=s(Rne);Lmo=r(uYr,"sew-d"),uYr.forEach(t),xmo=r(Jwe," \u2014 "),tI=n(Jwe,"A",{href:!0});var bYr=s(tI);$mo=r(bYr,"Wav2Vec2Processor"),bYr.forEach(t),kmo=r(Jwe," (SEW-D model)"),Jwe.forEach(t),Smo=i(be),Oh=n(be,"LI",{});var Ywe=s(Oh);Bne=n(Ywe,"STRONG",{});var vYr=s(Bne);Rmo=r(vYr,"speech_to_text"),vYr.forEach(t),Bmo=r(Ywe," \u2014 "),aI=n(Ywe,"A",{href:!0});var FYr=s(aI);Pmo=r(FYr,"Speech2TextProcessor"),FYr.forEach(t),Imo=r(Ywe," (Speech2Text model)"),Ywe.forEach(t),qmo=i(be),Vh=n(be,"LI",{});var Kwe=s(Vh);Pne=n(Kwe,"STRONG",{});var TYr=s(Pne);Nmo=r(TYr,"speech_to_text_2"),TYr.forEach(t),jmo=r(Kwe," \u2014 "),nI=n(Kwe,"A",{href:!0});var MYr=s(nI);Dmo=r(MYr,"Speech2Text2Processor"),MYr.forEach(t),Gmo=r(Kwe," (Speech2Text2 model)"),Kwe.forEach(t),Omo=i(be),Xh=n(be,"LI",{});var Zwe=s(Xh);Ine=n(Zwe,"STRONG",{});var EYr=s(Ine);Vmo=r(EYr,"trocr"),EYr.forEach(t),Xmo=r(Zwe," \u2014 "),sI=n(Zwe,"A",{href:!0});var CYr=s(sI);zmo=r(CYr,"TrOCRProcessor"),CYr.forEach(t),Wmo=r(Zwe," (TrOCR model)"),Zwe.forEach(t),Qmo=i(be),zh=n(be,"LI",{});var e6e=s(zh);qne=n(e6e,"STRONG",{});var wYr=s(qne);Hmo=r(wYr,"unispeech"),wYr.forEach(t),Umo=r(e6e," \u2014 "),lI=n(e6e,"A",{href:!0});var AYr=s(lI);Jmo=r(AYr,"Wav2Vec2Processor"),AYr.forEach(t),Ymo=r(e6e," (UniSpeech model)"),e6e.forEach(t),Kmo=i(be),Wh=n(be,"LI",{});var o6e=s(Wh);Nne=n(o6e,"STRONG",{});var yYr=s(Nne);Zmo=r(yYr,"unispeech-sat"),yYr.forEach(t),ego=r(o6e," \u2014 "),iI=n(o6e,"A",{href:!0});var LYr=s(iI);ogo=r(LYr,"Wav2Vec2Processor"),LYr.forEach(t),rgo=r(o6e," (UniSpeechSat model)"),o6e.forEach(t),tgo=i(be),Qh=n(be,"LI",{});var r6e=s(Qh);jne=n(r6e,"STRONG",{});var xYr=s(jne);ago=r(xYr,"vilt"),xYr.forEach(t),ngo=r(r6e," \u2014 "),dI=n(r6e,"A",{href:!0});var $Yr=s(dI);sgo=r($Yr,"ViltProcessor"),$Yr.forEach(t),lgo=r(r6e," (ViLT model)"),r6e.forEach(t),igo=i(be),Hh=n(be,"LI",{});var t6e=s(Hh);Dne=n(t6e,"STRONG",{});var kYr=s(Dne);dgo=r(kYr,"vision-text-dual-encoder"),kYr.forEach(t),cgo=r(t6e," \u2014 "),cI=n(t6e,"A",{href:!0});var SYr=s(cI);fgo=r(SYr,"VisionTextDualEncoderProcessor"),SYr.forEach(t),mgo=r(t6e," (VisionTextDualEncoder model)"),t6e.forEach(t),ggo=i(be),Uh=n(be,"LI",{});var a6e=s(Uh);Gne=n(a6e,"STRONG",{});var RYr=s(Gne);hgo=r(RYr,"wav2vec2"),RYr.forEach(t),pgo=r(a6e," \u2014 "),fI=n(a6e,"A",{href:!0});var BYr=s(fI);_go=r(BYr,"Wav2Vec2Processor"),BYr.forEach(t),ugo=r(a6e," (Wav2Vec2 model)"),a6e.forEach(t),bgo=i(be),Jh=n(be,"LI",{});var n6e=s(Jh);One=n(n6e,"STRONG",{});var PYr=s(One);vgo=r(PYr,"wav2vec2-conformer"),PYr.forEach(t),Fgo=r(n6e," \u2014 "),mI=n(n6e,"A",{href:!0});var IYr=s(mI);Tgo=r(IYr,"Wav2Vec2Processor"),IYr.forEach(t),Mgo=r(n6e," (Wav2Vec2-Conformer model)"),n6e.forEach(t),Ego=i(be),Yh=n(be,"LI",{});var s6e=s(Yh);Vne=n(s6e,"STRONG",{});var qYr=s(Vne);Cgo=r(qYr,"wavlm"),qYr.forEach(t),wgo=r(s6e," \u2014 "),gI=n(s6e,"A",{href:!0});var NYr=s(gI);Ago=r(NYr,"Wav2Vec2Processor"),NYr.forEach(t),ygo=r(s6e," (WavLM model)"),s6e.forEach(t),be.forEach(t),Lgo=i(ea),T(Kh.$$.fragment,ea),xgo=i(ea),T(Zh.$$.fragment,ea),ea.forEach(t),$go=i(js),ep=n(js,"DIV",{class:!0});var Pje=s(ep);T(XA.$$.fragment,Pje),kgo=i(Pje),Xne=n(Pje,"P",{});var jYr=s(Xne);Sgo=r(jYr,"Register a new processor for this class."),jYr.forEach(t),Pje.forEach(t),js.forEach(t),Sqe=i(f),Ci=n(f,"H2",{class:!0});var Ije=s(Ci);op=n(Ije,"A",{id:!0,class:!0,href:!0});var DYr=s(op);zne=n(DYr,"SPAN",{});var GYr=s(zne);T(zA.$$.fragment,GYr),GYr.forEach(t),DYr.forEach(t),Rgo=i(Ije),Wne=n(Ije,"SPAN",{});var OYr=s(Wne);Bgo=r(OYr,"AutoModel"),OYr.forEach(t),Ije.forEach(t),Rqe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(WA.$$.fragment,Ds),Pgo=i(Ds),wi=n(Ds,"P",{});var YK=s(wi);Igo=r(YK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hI=n(YK,"A",{href:!0});var VYr=s(hI);qgo=r(VYr,"from_pretrained()"),VYr.forEach(t),Ngo=r(YK," class method or the "),pI=n(YK,"A",{href:!0});var XYr=s(pI);jgo=r(XYr,"from_config()"),XYr.forEach(t),Dgo=r(YK,` class
method.`),YK.forEach(t),Ggo=i(Ds),QA=n(Ds,"P",{});var qje=s(QA);Ogo=r(qje,"This class cannot be instantiated directly using "),Qne=n(qje,"CODE",{});var zYr=s(Qne);Vgo=r(zYr,"__init__()"),zYr.forEach(t),Xgo=r(qje," (throws an error)."),qje.forEach(t),zgo=i(Ds),tt=n(Ds,"DIV",{class:!0});var Ew=s(tt);T(HA.$$.fragment,Ew),Wgo=i(Ew),Hne=n(Ew,"P",{});var WYr=s(Hne);Qgo=r(WYr,"Instantiates one of the base model classes of the library from a configuration."),WYr.forEach(t),Hgo=i(Ew),Ai=n(Ew,"P",{});var KK=s(Ai);Ugo=r(KK,`Note:
Loading a model from its configuration file does `),Une=n(KK,"STRONG",{});var QYr=s(Une);Jgo=r(QYr,"not"),QYr.forEach(t),Ygo=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_I=n(KK,"A",{href:!0});var HYr=s(_I);Kgo=r(HYr,"from_pretrained()"),HYr.forEach(t),Zgo=r(KK," to load the model weights."),KK.forEach(t),eho=i(Ew),T(rp.$$.fragment,Ew),Ew.forEach(t),oho=i(Ds),Je=n(Ds,"DIV",{class:!0});var oa=s(Je);T(UA.$$.fragment,oa),rho=i(oa),Jne=n(oa,"P",{});var UYr=s(Jne);tho=r(UYr,"Instantiate one of the base model classes of the library from a pretrained model."),UYr.forEach(t),aho=i(oa),La=n(oa,"P",{});var Cw=s(La);nho=r(Cw,"The model class to instantiate is selected based on the "),Yne=n(Cw,"CODE",{});var JYr=s(Yne);sho=r(JYr,"model_type"),JYr.forEach(t),lho=r(Cw,` property of the config object (either
passed as an argument or loaded from `),Kne=n(Cw,"CODE",{});var YYr=s(Kne);iho=r(YYr,"pretrained_model_name_or_path"),YYr.forEach(t),dho=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zne=n(Cw,"CODE",{});var KYr=s(Zne);cho=r(KYr,"pretrained_model_name_or_path"),KYr.forEach(t),fho=r(Cw,":"),Cw.forEach(t),mho=i(oa),x=n(oa,"UL",{});var $=s(x);tp=n($,"LI",{});var l6e=s(tp);ese=n(l6e,"STRONG",{});var ZYr=s(ese);gho=r(ZYr,"albert"),ZYr.forEach(t),hho=r(l6e," \u2014 "),uI=n(l6e,"A",{href:!0});var eKr=s(uI);pho=r(eKr,"AlbertModel"),eKr.forEach(t),_ho=r(l6e," (ALBERT model)"),l6e.forEach(t),uho=i($),ap=n($,"LI",{});var i6e=s(ap);ose=n(i6e,"STRONG",{});var oKr=s(ose);bho=r(oKr,"bart"),oKr.forEach(t),vho=r(i6e," \u2014 "),bI=n(i6e,"A",{href:!0});var rKr=s(bI);Fho=r(rKr,"BartModel"),rKr.forEach(t),Tho=r(i6e," (BART model)"),i6e.forEach(t),Mho=i($),np=n($,"LI",{});var d6e=s(np);rse=n(d6e,"STRONG",{});var tKr=s(rse);Eho=r(tKr,"beit"),tKr.forEach(t),Cho=r(d6e," \u2014 "),vI=n(d6e,"A",{href:!0});var aKr=s(vI);who=r(aKr,"BeitModel"),aKr.forEach(t),Aho=r(d6e," (BEiT model)"),d6e.forEach(t),yho=i($),sp=n($,"LI",{});var c6e=s(sp);tse=n(c6e,"STRONG",{});var nKr=s(tse);Lho=r(nKr,"bert"),nKr.forEach(t),xho=r(c6e," \u2014 "),FI=n(c6e,"A",{href:!0});var sKr=s(FI);$ho=r(sKr,"BertModel"),sKr.forEach(t),kho=r(c6e," (BERT model)"),c6e.forEach(t),Sho=i($),lp=n($,"LI",{});var f6e=s(lp);ase=n(f6e,"STRONG",{});var lKr=s(ase);Rho=r(lKr,"bert-generation"),lKr.forEach(t),Bho=r(f6e," \u2014 "),TI=n(f6e,"A",{href:!0});var iKr=s(TI);Pho=r(iKr,"BertGenerationEncoder"),iKr.forEach(t),Iho=r(f6e," (Bert Generation model)"),f6e.forEach(t),qho=i($),ip=n($,"LI",{});var m6e=s(ip);nse=n(m6e,"STRONG",{});var dKr=s(nse);Nho=r(dKr,"big_bird"),dKr.forEach(t),jho=r(m6e," \u2014 "),MI=n(m6e,"A",{href:!0});var cKr=s(MI);Dho=r(cKr,"BigBirdModel"),cKr.forEach(t),Gho=r(m6e," (BigBird model)"),m6e.forEach(t),Oho=i($),dp=n($,"LI",{});var g6e=s(dp);sse=n(g6e,"STRONG",{});var fKr=s(sse);Vho=r(fKr,"bigbird_pegasus"),fKr.forEach(t),Xho=r(g6e," \u2014 "),EI=n(g6e,"A",{href:!0});var mKr=s(EI);zho=r(mKr,"BigBirdPegasusModel"),mKr.forEach(t),Who=r(g6e," (BigBirdPegasus model)"),g6e.forEach(t),Qho=i($),cp=n($,"LI",{});var h6e=s(cp);lse=n(h6e,"STRONG",{});var gKr=s(lse);Hho=r(gKr,"blenderbot"),gKr.forEach(t),Uho=r(h6e," \u2014 "),CI=n(h6e,"A",{href:!0});var hKr=s(CI);Jho=r(hKr,"BlenderbotModel"),hKr.forEach(t),Yho=r(h6e," (Blenderbot model)"),h6e.forEach(t),Kho=i($),fp=n($,"LI",{});var p6e=s(fp);ise=n(p6e,"STRONG",{});var pKr=s(ise);Zho=r(pKr,"blenderbot-small"),pKr.forEach(t),epo=r(p6e," \u2014 "),wI=n(p6e,"A",{href:!0});var _Kr=s(wI);opo=r(_Kr,"BlenderbotSmallModel"),_Kr.forEach(t),rpo=r(p6e," (BlenderbotSmall model)"),p6e.forEach(t),tpo=i($),mp=n($,"LI",{});var _6e=s(mp);dse=n(_6e,"STRONG",{});var uKr=s(dse);apo=r(uKr,"bloom"),uKr.forEach(t),npo=r(_6e," \u2014 "),AI=n(_6e,"A",{href:!0});var bKr=s(AI);spo=r(bKr,"BloomModel"),bKr.forEach(t),lpo=r(_6e," (BLOOM model)"),_6e.forEach(t),ipo=i($),gp=n($,"LI",{});var u6e=s(gp);cse=n(u6e,"STRONG",{});var vKr=s(cse);dpo=r(vKr,"camembert"),vKr.forEach(t),cpo=r(u6e," \u2014 "),yI=n(u6e,"A",{href:!0});var FKr=s(yI);fpo=r(FKr,"CamembertModel"),FKr.forEach(t),mpo=r(u6e," (CamemBERT model)"),u6e.forEach(t),gpo=i($),hp=n($,"LI",{});var b6e=s(hp);fse=n(b6e,"STRONG",{});var TKr=s(fse);hpo=r(TKr,"canine"),TKr.forEach(t),ppo=r(b6e," \u2014 "),LI=n(b6e,"A",{href:!0});var MKr=s(LI);_po=r(MKr,"CanineModel"),MKr.forEach(t),upo=r(b6e," (Canine model)"),b6e.forEach(t),bpo=i($),pp=n($,"LI",{});var v6e=s(pp);mse=n(v6e,"STRONG",{});var EKr=s(mse);vpo=r(EKr,"clip"),EKr.forEach(t),Fpo=r(v6e," \u2014 "),xI=n(v6e,"A",{href:!0});var CKr=s(xI);Tpo=r(CKr,"CLIPModel"),CKr.forEach(t),Mpo=r(v6e," (CLIP model)"),v6e.forEach(t),Epo=i($),_p=n($,"LI",{});var F6e=s(_p);gse=n(F6e,"STRONG",{});var wKr=s(gse);Cpo=r(wKr,"convbert"),wKr.forEach(t),wpo=r(F6e," \u2014 "),$I=n(F6e,"A",{href:!0});var AKr=s($I);Apo=r(AKr,"ConvBertModel"),AKr.forEach(t),ypo=r(F6e," (ConvBERT model)"),F6e.forEach(t),Lpo=i($),up=n($,"LI",{});var T6e=s(up);hse=n(T6e,"STRONG",{});var yKr=s(hse);xpo=r(yKr,"convnext"),yKr.forEach(t),$po=r(T6e," \u2014 "),kI=n(T6e,"A",{href:!0});var LKr=s(kI);kpo=r(LKr,"ConvNextModel"),LKr.forEach(t),Spo=r(T6e," (ConvNext model)"),T6e.forEach(t),Rpo=i($),bp=n($,"LI",{});var M6e=s(bp);pse=n(M6e,"STRONG",{});var xKr=s(pse);Bpo=r(xKr,"ctrl"),xKr.forEach(t),Ppo=r(M6e," \u2014 "),SI=n(M6e,"A",{href:!0});var $Kr=s(SI);Ipo=r($Kr,"CTRLModel"),$Kr.forEach(t),qpo=r(M6e," (CTRL model)"),M6e.forEach(t),Npo=i($),vp=n($,"LI",{});var E6e=s(vp);_se=n(E6e,"STRONG",{});var kKr=s(_se);jpo=r(kKr,"cvt"),kKr.forEach(t),Dpo=r(E6e," \u2014 "),RI=n(E6e,"A",{href:!0});var SKr=s(RI);Gpo=r(SKr,"CvtModel"),SKr.forEach(t),Opo=r(E6e," (CvT model)"),E6e.forEach(t),Vpo=i($),Fp=n($,"LI",{});var C6e=s(Fp);use=n(C6e,"STRONG",{});var RKr=s(use);Xpo=r(RKr,"data2vec-audio"),RKr.forEach(t),zpo=r(C6e," \u2014 "),BI=n(C6e,"A",{href:!0});var BKr=s(BI);Wpo=r(BKr,"Data2VecAudioModel"),BKr.forEach(t),Qpo=r(C6e," (Data2VecAudio model)"),C6e.forEach(t),Hpo=i($),Tp=n($,"LI",{});var w6e=s(Tp);bse=n(w6e,"STRONG",{});var PKr=s(bse);Upo=r(PKr,"data2vec-text"),PKr.forEach(t),Jpo=r(w6e," \u2014 "),PI=n(w6e,"A",{href:!0});var IKr=s(PI);Ypo=r(IKr,"Data2VecTextModel"),IKr.forEach(t),Kpo=r(w6e," (Data2VecText model)"),w6e.forEach(t),Zpo=i($),Mp=n($,"LI",{});var A6e=s(Mp);vse=n(A6e,"STRONG",{});var qKr=s(vse);e_o=r(qKr,"data2vec-vision"),qKr.forEach(t),o_o=r(A6e," \u2014 "),II=n(A6e,"A",{href:!0});var NKr=s(II);r_o=r(NKr,"Data2VecVisionModel"),NKr.forEach(t),t_o=r(A6e," (Data2VecVision model)"),A6e.forEach(t),a_o=i($),Ep=n($,"LI",{});var y6e=s(Ep);Fse=n(y6e,"STRONG",{});var jKr=s(Fse);n_o=r(jKr,"deberta"),jKr.forEach(t),s_o=r(y6e," \u2014 "),qI=n(y6e,"A",{href:!0});var DKr=s(qI);l_o=r(DKr,"DebertaModel"),DKr.forEach(t),i_o=r(y6e," (DeBERTa model)"),y6e.forEach(t),d_o=i($),Cp=n($,"LI",{});var L6e=s(Cp);Tse=n(L6e,"STRONG",{});var GKr=s(Tse);c_o=r(GKr,"deberta-v2"),GKr.forEach(t),f_o=r(L6e," \u2014 "),NI=n(L6e,"A",{href:!0});var OKr=s(NI);m_o=r(OKr,"DebertaV2Model"),OKr.forEach(t),g_o=r(L6e," (DeBERTa-v2 model)"),L6e.forEach(t),h_o=i($),wp=n($,"LI",{});var x6e=s(wp);Mse=n(x6e,"STRONG",{});var VKr=s(Mse);p_o=r(VKr,"decision_transformer"),VKr.forEach(t),__o=r(x6e," \u2014 "),jI=n(x6e,"A",{href:!0});var XKr=s(jI);u_o=r(XKr,"DecisionTransformerModel"),XKr.forEach(t),b_o=r(x6e," (Decision Transformer model)"),x6e.forEach(t),v_o=i($),Ap=n($,"LI",{});var $6e=s(Ap);Ese=n($6e,"STRONG",{});var zKr=s(Ese);F_o=r(zKr,"deit"),zKr.forEach(t),T_o=r($6e," \u2014 "),DI=n($6e,"A",{href:!0});var WKr=s(DI);M_o=r(WKr,"DeiTModel"),WKr.forEach(t),E_o=r($6e," (DeiT model)"),$6e.forEach(t),C_o=i($),yp=n($,"LI",{});var k6e=s(yp);Cse=n(k6e,"STRONG",{});var QKr=s(Cse);w_o=r(QKr,"detr"),QKr.forEach(t),A_o=r(k6e," \u2014 "),GI=n(k6e,"A",{href:!0});var HKr=s(GI);y_o=r(HKr,"DetrModel"),HKr.forEach(t),L_o=r(k6e," (DETR model)"),k6e.forEach(t),x_o=i($),Lp=n($,"LI",{});var S6e=s(Lp);wse=n(S6e,"STRONG",{});var UKr=s(wse);$_o=r(UKr,"distilbert"),UKr.forEach(t),k_o=r(S6e," \u2014 "),OI=n(S6e,"A",{href:!0});var JKr=s(OI);S_o=r(JKr,"DistilBertModel"),JKr.forEach(t),R_o=r(S6e," (DistilBERT model)"),S6e.forEach(t),B_o=i($),xp=n($,"LI",{});var R6e=s(xp);Ase=n(R6e,"STRONG",{});var YKr=s(Ase);P_o=r(YKr,"dpr"),YKr.forEach(t),I_o=r(R6e," \u2014 "),VI=n(R6e,"A",{href:!0});var KKr=s(VI);q_o=r(KKr,"DPRQuestionEncoder"),KKr.forEach(t),N_o=r(R6e," (DPR model)"),R6e.forEach(t),j_o=i($),$p=n($,"LI",{});var B6e=s($p);yse=n(B6e,"STRONG",{});var ZKr=s(yse);D_o=r(ZKr,"dpt"),ZKr.forEach(t),G_o=r(B6e," \u2014 "),XI=n(B6e,"A",{href:!0});var eZr=s(XI);O_o=r(eZr,"DPTModel"),eZr.forEach(t),V_o=r(B6e," (DPT model)"),B6e.forEach(t),X_o=i($),kp=n($,"LI",{});var P6e=s(kp);Lse=n(P6e,"STRONG",{});var oZr=s(Lse);z_o=r(oZr,"electra"),oZr.forEach(t),W_o=r(P6e," \u2014 "),zI=n(P6e,"A",{href:!0});var rZr=s(zI);Q_o=r(rZr,"ElectraModel"),rZr.forEach(t),H_o=r(P6e," (ELECTRA model)"),P6e.forEach(t),U_o=i($),Sp=n($,"LI",{});var I6e=s(Sp);xse=n(I6e,"STRONG",{});var tZr=s(xse);J_o=r(tZr,"flaubert"),tZr.forEach(t),Y_o=r(I6e," \u2014 "),WI=n(I6e,"A",{href:!0});var aZr=s(WI);K_o=r(aZr,"FlaubertModel"),aZr.forEach(t),Z_o=r(I6e," (FlauBERT model)"),I6e.forEach(t),euo=i($),Rp=n($,"LI",{});var q6e=s(Rp);$se=n(q6e,"STRONG",{});var nZr=s($se);ouo=r(nZr,"flava"),nZr.forEach(t),ruo=r(q6e," \u2014 "),QI=n(q6e,"A",{href:!0});var sZr=s(QI);tuo=r(sZr,"FlavaModel"),sZr.forEach(t),auo=r(q6e," (Flava model)"),q6e.forEach(t),nuo=i($),Bp=n($,"LI",{});var N6e=s(Bp);kse=n(N6e,"STRONG",{});var lZr=s(kse);suo=r(lZr,"fnet"),lZr.forEach(t),luo=r(N6e," \u2014 "),HI=n(N6e,"A",{href:!0});var iZr=s(HI);iuo=r(iZr,"FNetModel"),iZr.forEach(t),duo=r(N6e," (FNet model)"),N6e.forEach(t),cuo=i($),Pp=n($,"LI",{});var j6e=s(Pp);Sse=n(j6e,"STRONG",{});var dZr=s(Sse);fuo=r(dZr,"fsmt"),dZr.forEach(t),muo=r(j6e," \u2014 "),UI=n(j6e,"A",{href:!0});var cZr=s(UI);guo=r(cZr,"FSMTModel"),cZr.forEach(t),huo=r(j6e," (FairSeq Machine-Translation model)"),j6e.forEach(t),puo=i($),Rs=n($,"LI",{});var R$=s(Rs);Rse=n(R$,"STRONG",{});var fZr=s(Rse);_uo=r(fZr,"funnel"),fZr.forEach(t),uuo=r(R$," \u2014 "),JI=n(R$,"A",{href:!0});var mZr=s(JI);buo=r(mZr,"FunnelModel"),mZr.forEach(t),vuo=r(R$," or "),YI=n(R$,"A",{href:!0});var gZr=s(YI);Fuo=r(gZr,"FunnelBaseModel"),gZr.forEach(t),Tuo=r(R$," (Funnel Transformer model)"),R$.forEach(t),Muo=i($),Ip=n($,"LI",{});var D6e=s(Ip);Bse=n(D6e,"STRONG",{});var hZr=s(Bse);Euo=r(hZr,"glpn"),hZr.forEach(t),Cuo=r(D6e," \u2014 "),KI=n(D6e,"A",{href:!0});var pZr=s(KI);wuo=r(pZr,"GLPNModel"),pZr.forEach(t),Auo=r(D6e," (GLPN model)"),D6e.forEach(t),yuo=i($),qp=n($,"LI",{});var G6e=s(qp);Pse=n(G6e,"STRONG",{});var _Zr=s(Pse);Luo=r(_Zr,"gpt2"),_Zr.forEach(t),xuo=r(G6e," \u2014 "),ZI=n(G6e,"A",{href:!0});var uZr=s(ZI);$uo=r(uZr,"GPT2Model"),uZr.forEach(t),kuo=r(G6e," (OpenAI GPT-2 model)"),G6e.forEach(t),Suo=i($),Np=n($,"LI",{});var O6e=s(Np);Ise=n(O6e,"STRONG",{});var bZr=s(Ise);Ruo=r(bZr,"gpt_neo"),bZr.forEach(t),Buo=r(O6e," \u2014 "),eq=n(O6e,"A",{href:!0});var vZr=s(eq);Puo=r(vZr,"GPTNeoModel"),vZr.forEach(t),Iuo=r(O6e," (GPT Neo model)"),O6e.forEach(t),quo=i($),jp=n($,"LI",{});var V6e=s(jp);qse=n(V6e,"STRONG",{});var FZr=s(qse);Nuo=r(FZr,"gptj"),FZr.forEach(t),juo=r(V6e," \u2014 "),oq=n(V6e,"A",{href:!0});var TZr=s(oq);Duo=r(TZr,"GPTJModel"),TZr.forEach(t),Guo=r(V6e," (GPT-J model)"),V6e.forEach(t),Ouo=i($),Dp=n($,"LI",{});var X6e=s(Dp);Nse=n(X6e,"STRONG",{});var MZr=s(Nse);Vuo=r(MZr,"hubert"),MZr.forEach(t),Xuo=r(X6e," \u2014 "),rq=n(X6e,"A",{href:!0});var EZr=s(rq);zuo=r(EZr,"HubertModel"),EZr.forEach(t),Wuo=r(X6e," (Hubert model)"),X6e.forEach(t),Quo=i($),Gp=n($,"LI",{});var z6e=s(Gp);jse=n(z6e,"STRONG",{});var CZr=s(jse);Huo=r(CZr,"ibert"),CZr.forEach(t),Uuo=r(z6e," \u2014 "),tq=n(z6e,"A",{href:!0});var wZr=s(tq);Juo=r(wZr,"IBertModel"),wZr.forEach(t),Yuo=r(z6e," (I-BERT model)"),z6e.forEach(t),Kuo=i($),Op=n($,"LI",{});var W6e=s(Op);Dse=n(W6e,"STRONG",{});var AZr=s(Dse);Zuo=r(AZr,"imagegpt"),AZr.forEach(t),e2o=r(W6e," \u2014 "),aq=n(W6e,"A",{href:!0});var yZr=s(aq);o2o=r(yZr,"ImageGPTModel"),yZr.forEach(t),r2o=r(W6e," (ImageGPT model)"),W6e.forEach(t),t2o=i($),Vp=n($,"LI",{});var Q6e=s(Vp);Gse=n(Q6e,"STRONG",{});var LZr=s(Gse);a2o=r(LZr,"layoutlm"),LZr.forEach(t),n2o=r(Q6e," \u2014 "),nq=n(Q6e,"A",{href:!0});var xZr=s(nq);s2o=r(xZr,"LayoutLMModel"),xZr.forEach(t),l2o=r(Q6e," (LayoutLM model)"),Q6e.forEach(t),i2o=i($),Xp=n($,"LI",{});var H6e=s(Xp);Ose=n(H6e,"STRONG",{});var $Zr=s(Ose);d2o=r($Zr,"layoutlmv2"),$Zr.forEach(t),c2o=r(H6e," \u2014 "),sq=n(H6e,"A",{href:!0});var kZr=s(sq);f2o=r(kZr,"LayoutLMv2Model"),kZr.forEach(t),m2o=r(H6e," (LayoutLMv2 model)"),H6e.forEach(t),g2o=i($),zp=n($,"LI",{});var U6e=s(zp);Vse=n(U6e,"STRONG",{});var SZr=s(Vse);h2o=r(SZr,"led"),SZr.forEach(t),p2o=r(U6e," \u2014 "),lq=n(U6e,"A",{href:!0});var RZr=s(lq);_2o=r(RZr,"LEDModel"),RZr.forEach(t),u2o=r(U6e," (LED model)"),U6e.forEach(t),b2o=i($),Wp=n($,"LI",{});var J6e=s(Wp);Xse=n(J6e,"STRONG",{});var BZr=s(Xse);v2o=r(BZr,"longformer"),BZr.forEach(t),F2o=r(J6e," \u2014 "),iq=n(J6e,"A",{href:!0});var PZr=s(iq);T2o=r(PZr,"LongformerModel"),PZr.forEach(t),M2o=r(J6e," (Longformer model)"),J6e.forEach(t),E2o=i($),Qp=n($,"LI",{});var Y6e=s(Qp);zse=n(Y6e,"STRONG",{});var IZr=s(zse);C2o=r(IZr,"luke"),IZr.forEach(t),w2o=r(Y6e," \u2014 "),dq=n(Y6e,"A",{href:!0});var qZr=s(dq);A2o=r(qZr,"LukeModel"),qZr.forEach(t),y2o=r(Y6e," (LUKE model)"),Y6e.forEach(t),L2o=i($),Hp=n($,"LI",{});var K6e=s(Hp);Wse=n(K6e,"STRONG",{});var NZr=s(Wse);x2o=r(NZr,"lxmert"),NZr.forEach(t),$2o=r(K6e," \u2014 "),cq=n(K6e,"A",{href:!0});var jZr=s(cq);k2o=r(jZr,"LxmertModel"),jZr.forEach(t),S2o=r(K6e," (LXMERT model)"),K6e.forEach(t),R2o=i($),Up=n($,"LI",{});var Z6e=s(Up);Qse=n(Z6e,"STRONG",{});var DZr=s(Qse);B2o=r(DZr,"m2m_100"),DZr.forEach(t),P2o=r(Z6e," \u2014 "),fq=n(Z6e,"A",{href:!0});var GZr=s(fq);I2o=r(GZr,"M2M100Model"),GZr.forEach(t),q2o=r(Z6e," (M2M100 model)"),Z6e.forEach(t),N2o=i($),Jp=n($,"LI",{});var eAe=s(Jp);Hse=n(eAe,"STRONG",{});var OZr=s(Hse);j2o=r(OZr,"marian"),OZr.forEach(t),D2o=r(eAe," \u2014 "),mq=n(eAe,"A",{href:!0});var VZr=s(mq);G2o=r(VZr,"MarianModel"),VZr.forEach(t),O2o=r(eAe," (Marian model)"),eAe.forEach(t),V2o=i($),Yp=n($,"LI",{});var oAe=s(Yp);Use=n(oAe,"STRONG",{});var XZr=s(Use);X2o=r(XZr,"maskformer"),XZr.forEach(t),z2o=r(oAe," \u2014 "),gq=n(oAe,"A",{href:!0});var zZr=s(gq);W2o=r(zZr,"MaskFormerModel"),zZr.forEach(t),Q2o=r(oAe," (MaskFormer model)"),oAe.forEach(t),H2o=i($),Kp=n($,"LI",{});var rAe=s(Kp);Jse=n(rAe,"STRONG",{});var WZr=s(Jse);U2o=r(WZr,"mbart"),WZr.forEach(t),J2o=r(rAe," \u2014 "),hq=n(rAe,"A",{href:!0});var QZr=s(hq);Y2o=r(QZr,"MBartModel"),QZr.forEach(t),K2o=r(rAe," (mBART model)"),rAe.forEach(t),Z2o=i($),Zp=n($,"LI",{});var tAe=s(Zp);Yse=n(tAe,"STRONG",{});var HZr=s(Yse);e1o=r(HZr,"megatron-bert"),HZr.forEach(t),o1o=r(tAe," \u2014 "),pq=n(tAe,"A",{href:!0});var UZr=s(pq);r1o=r(UZr,"MegatronBertModel"),UZr.forEach(t),t1o=r(tAe," (MegatronBert model)"),tAe.forEach(t),a1o=i($),e_=n($,"LI",{});var aAe=s(e_);Kse=n(aAe,"STRONG",{});var JZr=s(Kse);n1o=r(JZr,"mobilebert"),JZr.forEach(t),s1o=r(aAe," \u2014 "),_q=n(aAe,"A",{href:!0});var YZr=s(_q);l1o=r(YZr,"MobileBertModel"),YZr.forEach(t),i1o=r(aAe," (MobileBERT model)"),aAe.forEach(t),d1o=i($),o_=n($,"LI",{});var nAe=s(o_);Zse=n(nAe,"STRONG",{});var KZr=s(Zse);c1o=r(KZr,"mpnet"),KZr.forEach(t),f1o=r(nAe," \u2014 "),uq=n(nAe,"A",{href:!0});var ZZr=s(uq);m1o=r(ZZr,"MPNetModel"),ZZr.forEach(t),g1o=r(nAe," (MPNet model)"),nAe.forEach(t),h1o=i($),r_=n($,"LI",{});var sAe=s(r_);ele=n(sAe,"STRONG",{});var eet=s(ele);p1o=r(eet,"mt5"),eet.forEach(t),_1o=r(sAe," \u2014 "),bq=n(sAe,"A",{href:!0});var oet=s(bq);u1o=r(oet,"MT5Model"),oet.forEach(t),b1o=r(sAe," (mT5 model)"),sAe.forEach(t),v1o=i($),t_=n($,"LI",{});var lAe=s(t_);ole=n(lAe,"STRONG",{});var ret=s(ole);F1o=r(ret,"nystromformer"),ret.forEach(t),T1o=r(lAe," \u2014 "),vq=n(lAe,"A",{href:!0});var tet=s(vq);M1o=r(tet,"NystromformerModel"),tet.forEach(t),E1o=r(lAe," (Nystromformer model)"),lAe.forEach(t),C1o=i($),a_=n($,"LI",{});var iAe=s(a_);rle=n(iAe,"STRONG",{});var aet=s(rle);w1o=r(aet,"openai-gpt"),aet.forEach(t),A1o=r(iAe," \u2014 "),Fq=n(iAe,"A",{href:!0});var net=s(Fq);y1o=r(net,"OpenAIGPTModel"),net.forEach(t),L1o=r(iAe," (OpenAI GPT model)"),iAe.forEach(t),x1o=i($),n_=n($,"LI",{});var dAe=s(n_);tle=n(dAe,"STRONG",{});var set=s(tle);$1o=r(set,"opt"),set.forEach(t),k1o=r(dAe," \u2014 "),Tq=n(dAe,"A",{href:!0});var iet=s(Tq);S1o=r(iet,"OPTModel"),iet.forEach(t),R1o=r(dAe," (OPT model)"),dAe.forEach(t),B1o=i($),s_=n($,"LI",{});var cAe=s(s_);ale=n(cAe,"STRONG",{});var det=s(ale);P1o=r(det,"pegasus"),det.forEach(t),I1o=r(cAe," \u2014 "),Mq=n(cAe,"A",{href:!0});var cet=s(Mq);q1o=r(cet,"PegasusModel"),cet.forEach(t),N1o=r(cAe," (Pegasus model)"),cAe.forEach(t),j1o=i($),l_=n($,"LI",{});var fAe=s(l_);nle=n(fAe,"STRONG",{});var fet=s(nle);D1o=r(fet,"perceiver"),fet.forEach(t),G1o=r(fAe," \u2014 "),Eq=n(fAe,"A",{href:!0});var met=s(Eq);O1o=r(met,"PerceiverModel"),met.forEach(t),V1o=r(fAe," (Perceiver model)"),fAe.forEach(t),X1o=i($),i_=n($,"LI",{});var mAe=s(i_);sle=n(mAe,"STRONG",{});var get=s(sle);z1o=r(get,"plbart"),get.forEach(t),W1o=r(mAe," \u2014 "),Cq=n(mAe,"A",{href:!0});var het=s(Cq);Q1o=r(het,"PLBartModel"),het.forEach(t),H1o=r(mAe," (PLBart model)"),mAe.forEach(t),U1o=i($),d_=n($,"LI",{});var gAe=s(d_);lle=n(gAe,"STRONG",{});var pet=s(lle);J1o=r(pet,"poolformer"),pet.forEach(t),Y1o=r(gAe," \u2014 "),wq=n(gAe,"A",{href:!0});var _et=s(wq);K1o=r(_et,"PoolFormerModel"),_et.forEach(t),Z1o=r(gAe," (PoolFormer model)"),gAe.forEach(t),ebo=i($),c_=n($,"LI",{});var hAe=s(c_);ile=n(hAe,"STRONG",{});var uet=s(ile);obo=r(uet,"prophetnet"),uet.forEach(t),rbo=r(hAe," \u2014 "),Aq=n(hAe,"A",{href:!0});var bet=s(Aq);tbo=r(bet,"ProphetNetModel"),bet.forEach(t),abo=r(hAe," (ProphetNet model)"),hAe.forEach(t),nbo=i($),f_=n($,"LI",{});var pAe=s(f_);dle=n(pAe,"STRONG",{});var vet=s(dle);sbo=r(vet,"qdqbert"),vet.forEach(t),lbo=r(pAe," \u2014 "),yq=n(pAe,"A",{href:!0});var Fet=s(yq);ibo=r(Fet,"QDQBertModel"),Fet.forEach(t),dbo=r(pAe," (QDQBert model)"),pAe.forEach(t),cbo=i($),m_=n($,"LI",{});var _Ae=s(m_);cle=n(_Ae,"STRONG",{});var Tet=s(cle);fbo=r(Tet,"reformer"),Tet.forEach(t),mbo=r(_Ae," \u2014 "),Lq=n(_Ae,"A",{href:!0});var Met=s(Lq);gbo=r(Met,"ReformerModel"),Met.forEach(t),hbo=r(_Ae," (Reformer model)"),_Ae.forEach(t),pbo=i($),g_=n($,"LI",{});var uAe=s(g_);fle=n(uAe,"STRONG",{});var Eet=s(fle);_bo=r(Eet,"regnet"),Eet.forEach(t),ubo=r(uAe," \u2014 "),xq=n(uAe,"A",{href:!0});var Cet=s(xq);bbo=r(Cet,"RegNetModel"),Cet.forEach(t),vbo=r(uAe," (RegNet model)"),uAe.forEach(t),Fbo=i($),h_=n($,"LI",{});var bAe=s(h_);mle=n(bAe,"STRONG",{});var wet=s(mle);Tbo=r(wet,"rembert"),wet.forEach(t),Mbo=r(bAe," \u2014 "),$q=n(bAe,"A",{href:!0});var Aet=s($q);Ebo=r(Aet,"RemBertModel"),Aet.forEach(t),Cbo=r(bAe," (RemBERT model)"),bAe.forEach(t),wbo=i($),p_=n($,"LI",{});var vAe=s(p_);gle=n(vAe,"STRONG",{});var yet=s(gle);Abo=r(yet,"resnet"),yet.forEach(t),ybo=r(vAe," \u2014 "),kq=n(vAe,"A",{href:!0});var Let=s(kq);Lbo=r(Let,"ResNetModel"),Let.forEach(t),xbo=r(vAe," (ResNet model)"),vAe.forEach(t),$bo=i($),__=n($,"LI",{});var FAe=s(__);hle=n(FAe,"STRONG",{});var xet=s(hle);kbo=r(xet,"retribert"),xet.forEach(t),Sbo=r(FAe," \u2014 "),Sq=n(FAe,"A",{href:!0});var $et=s(Sq);Rbo=r($et,"RetriBertModel"),$et.forEach(t),Bbo=r(FAe," (RetriBERT model)"),FAe.forEach(t),Pbo=i($),u_=n($,"LI",{});var TAe=s(u_);ple=n(TAe,"STRONG",{});var ket=s(ple);Ibo=r(ket,"roberta"),ket.forEach(t),qbo=r(TAe," \u2014 "),Rq=n(TAe,"A",{href:!0});var Set=s(Rq);Nbo=r(Set,"RobertaModel"),Set.forEach(t),jbo=r(TAe," (RoBERTa model)"),TAe.forEach(t),Dbo=i($),b_=n($,"LI",{});var MAe=s(b_);_le=n(MAe,"STRONG",{});var Ret=s(_le);Gbo=r(Ret,"roformer"),Ret.forEach(t),Obo=r(MAe," \u2014 "),Bq=n(MAe,"A",{href:!0});var Bet=s(Bq);Vbo=r(Bet,"RoFormerModel"),Bet.forEach(t),Xbo=r(MAe," (RoFormer model)"),MAe.forEach(t),zbo=i($),v_=n($,"LI",{});var EAe=s(v_);ule=n(EAe,"STRONG",{});var Pet=s(ule);Wbo=r(Pet,"segformer"),Pet.forEach(t),Qbo=r(EAe," \u2014 "),Pq=n(EAe,"A",{href:!0});var Iet=s(Pq);Hbo=r(Iet,"SegformerModel"),Iet.forEach(t),Ubo=r(EAe," (SegFormer model)"),EAe.forEach(t),Jbo=i($),F_=n($,"LI",{});var CAe=s(F_);ble=n(CAe,"STRONG",{});var qet=s(ble);Ybo=r(qet,"sew"),qet.forEach(t),Kbo=r(CAe," \u2014 "),Iq=n(CAe,"A",{href:!0});var Net=s(Iq);Zbo=r(Net,"SEWModel"),Net.forEach(t),evo=r(CAe," (SEW model)"),CAe.forEach(t),ovo=i($),T_=n($,"LI",{});var wAe=s(T_);vle=n(wAe,"STRONG",{});var jet=s(vle);rvo=r(jet,"sew-d"),jet.forEach(t),tvo=r(wAe," \u2014 "),qq=n(wAe,"A",{href:!0});var Det=s(qq);avo=r(Det,"SEWDModel"),Det.forEach(t),nvo=r(wAe," (SEW-D model)"),wAe.forEach(t),svo=i($),M_=n($,"LI",{});var AAe=s(M_);Fle=n(AAe,"STRONG",{});var Get=s(Fle);lvo=r(Get,"speech_to_text"),Get.forEach(t),ivo=r(AAe," \u2014 "),Nq=n(AAe,"A",{href:!0});var Oet=s(Nq);dvo=r(Oet,"Speech2TextModel"),Oet.forEach(t),cvo=r(AAe," (Speech2Text model)"),AAe.forEach(t),fvo=i($),E_=n($,"LI",{});var yAe=s(E_);Tle=n(yAe,"STRONG",{});var Vet=s(Tle);mvo=r(Vet,"splinter"),Vet.forEach(t),gvo=r(yAe," \u2014 "),jq=n(yAe,"A",{href:!0});var Xet=s(jq);hvo=r(Xet,"SplinterModel"),Xet.forEach(t),pvo=r(yAe," (Splinter model)"),yAe.forEach(t),_vo=i($),C_=n($,"LI",{});var LAe=s(C_);Mle=n(LAe,"STRONG",{});var zet=s(Mle);uvo=r(zet,"squeezebert"),zet.forEach(t),bvo=r(LAe," \u2014 "),Dq=n(LAe,"A",{href:!0});var Wet=s(Dq);vvo=r(Wet,"SqueezeBertModel"),Wet.forEach(t),Fvo=r(LAe," (SqueezeBERT model)"),LAe.forEach(t),Tvo=i($),w_=n($,"LI",{});var xAe=s(w_);Ele=n(xAe,"STRONG",{});var Qet=s(Ele);Mvo=r(Qet,"swin"),Qet.forEach(t),Evo=r(xAe," \u2014 "),Gq=n(xAe,"A",{href:!0});var Het=s(Gq);Cvo=r(Het,"SwinModel"),Het.forEach(t),wvo=r(xAe," (Swin model)"),xAe.forEach(t),Avo=i($),A_=n($,"LI",{});var $Ae=s(A_);Cle=n($Ae,"STRONG",{});var Uet=s(Cle);yvo=r(Uet,"t5"),Uet.forEach(t),Lvo=r($Ae," \u2014 "),Oq=n($Ae,"A",{href:!0});var Jet=s(Oq);xvo=r(Jet,"T5Model"),Jet.forEach(t),$vo=r($Ae," (T5 model)"),$Ae.forEach(t),kvo=i($),y_=n($,"LI",{});var kAe=s(y_);wle=n(kAe,"STRONG",{});var Yet=s(wle);Svo=r(Yet,"tapas"),Yet.forEach(t),Rvo=r(kAe," \u2014 "),Vq=n(kAe,"A",{href:!0});var Ket=s(Vq);Bvo=r(Ket,"TapasModel"),Ket.forEach(t),Pvo=r(kAe," (TAPAS model)"),kAe.forEach(t),Ivo=i($),L_=n($,"LI",{});var SAe=s(L_);Ale=n(SAe,"STRONG",{});var Zet=s(Ale);qvo=r(Zet,"trajectory_transformer"),Zet.forEach(t),Nvo=r(SAe," \u2014 "),Xq=n(SAe,"A",{href:!0});var eot=s(Xq);jvo=r(eot,"TrajectoryTransformerModel"),eot.forEach(t),Dvo=r(SAe," (Trajectory Transformer model)"),SAe.forEach(t),Gvo=i($),x_=n($,"LI",{});var RAe=s(x_);yle=n(RAe,"STRONG",{});var oot=s(yle);Ovo=r(oot,"transfo-xl"),oot.forEach(t),Vvo=r(RAe," \u2014 "),zq=n(RAe,"A",{href:!0});var rot=s(zq);Xvo=r(rot,"TransfoXLModel"),rot.forEach(t),zvo=r(RAe," (Transformer-XL model)"),RAe.forEach(t),Wvo=i($),$_=n($,"LI",{});var BAe=s($_);Lle=n(BAe,"STRONG",{});var tot=s(Lle);Qvo=r(tot,"unispeech"),tot.forEach(t),Hvo=r(BAe," \u2014 "),Wq=n(BAe,"A",{href:!0});var aot=s(Wq);Uvo=r(aot,"UniSpeechModel"),aot.forEach(t),Jvo=r(BAe," (UniSpeech model)"),BAe.forEach(t),Yvo=i($),k_=n($,"LI",{});var PAe=s(k_);xle=n(PAe,"STRONG",{});var not=s(xle);Kvo=r(not,"unispeech-sat"),not.forEach(t),Zvo=r(PAe," \u2014 "),Qq=n(PAe,"A",{href:!0});var sot=s(Qq);eFo=r(sot,"UniSpeechSatModel"),sot.forEach(t),oFo=r(PAe," (UniSpeechSat model)"),PAe.forEach(t),rFo=i($),S_=n($,"LI",{});var IAe=s(S_);$le=n(IAe,"STRONG",{});var lot=s($le);tFo=r(lot,"van"),lot.forEach(t),aFo=r(IAe," \u2014 "),Hq=n(IAe,"A",{href:!0});var iot=s(Hq);nFo=r(iot,"VanModel"),iot.forEach(t),sFo=r(IAe," (VAN model)"),IAe.forEach(t),lFo=i($),R_=n($,"LI",{});var qAe=s(R_);kle=n(qAe,"STRONG",{});var dot=s(kle);iFo=r(dot,"vilt"),dot.forEach(t),dFo=r(qAe," \u2014 "),Uq=n(qAe,"A",{href:!0});var cot=s(Uq);cFo=r(cot,"ViltModel"),cot.forEach(t),fFo=r(qAe," (ViLT model)"),qAe.forEach(t),mFo=i($),B_=n($,"LI",{});var NAe=s(B_);Sle=n(NAe,"STRONG",{});var fot=s(Sle);gFo=r(fot,"vision-text-dual-encoder"),fot.forEach(t),hFo=r(NAe," \u2014 "),Jq=n(NAe,"A",{href:!0});var mot=s(Jq);pFo=r(mot,"VisionTextDualEncoderModel"),mot.forEach(t),_Fo=r(NAe," (VisionTextDualEncoder model)"),NAe.forEach(t),uFo=i($),P_=n($,"LI",{});var jAe=s(P_);Rle=n(jAe,"STRONG",{});var got=s(Rle);bFo=r(got,"visual_bert"),got.forEach(t),vFo=r(jAe," \u2014 "),Yq=n(jAe,"A",{href:!0});var hot=s(Yq);FFo=r(hot,"VisualBertModel"),hot.forEach(t),TFo=r(jAe," (VisualBert model)"),jAe.forEach(t),MFo=i($),I_=n($,"LI",{});var DAe=s(I_);Ble=n(DAe,"STRONG",{});var pot=s(Ble);EFo=r(pot,"vit"),pot.forEach(t),CFo=r(DAe," \u2014 "),Kq=n(DAe,"A",{href:!0});var _ot=s(Kq);wFo=r(_ot,"ViTModel"),_ot.forEach(t),AFo=r(DAe," (ViT model)"),DAe.forEach(t),yFo=i($),q_=n($,"LI",{});var GAe=s(q_);Ple=n(GAe,"STRONG",{});var uot=s(Ple);LFo=r(uot,"vit_mae"),uot.forEach(t),xFo=r(GAe," \u2014 "),Zq=n(GAe,"A",{href:!0});var bot=s(Zq);$Fo=r(bot,"ViTMAEModel"),bot.forEach(t),kFo=r(GAe," (ViTMAE model)"),GAe.forEach(t),SFo=i($),N_=n($,"LI",{});var OAe=s(N_);Ile=n(OAe,"STRONG",{});var vot=s(Ile);RFo=r(vot,"wav2vec2"),vot.forEach(t),BFo=r(OAe," \u2014 "),eN=n(OAe,"A",{href:!0});var Fot=s(eN);PFo=r(Fot,"Wav2Vec2Model"),Fot.forEach(t),IFo=r(OAe," (Wav2Vec2 model)"),OAe.forEach(t),qFo=i($),j_=n($,"LI",{});var VAe=s(j_);qle=n(VAe,"STRONG",{});var Tot=s(qle);NFo=r(Tot,"wav2vec2-conformer"),Tot.forEach(t),jFo=r(VAe," \u2014 "),oN=n(VAe,"A",{href:!0});var Mot=s(oN);DFo=r(Mot,"Wav2Vec2ConformerModel"),Mot.forEach(t),GFo=r(VAe," (Wav2Vec2-Conformer model)"),VAe.forEach(t),OFo=i($),D_=n($,"LI",{});var XAe=s(D_);Nle=n(XAe,"STRONG",{});var Eot=s(Nle);VFo=r(Eot,"wavlm"),Eot.forEach(t),XFo=r(XAe," \u2014 "),rN=n(XAe,"A",{href:!0});var Cot=s(rN);zFo=r(Cot,"WavLMModel"),Cot.forEach(t),WFo=r(XAe," (WavLM model)"),XAe.forEach(t),QFo=i($),G_=n($,"LI",{});var zAe=s(G_);jle=n(zAe,"STRONG",{});var wot=s(jle);HFo=r(wot,"xglm"),wot.forEach(t),UFo=r(zAe," \u2014 "),tN=n(zAe,"A",{href:!0});var Aot=s(tN);JFo=r(Aot,"XGLMModel"),Aot.forEach(t),YFo=r(zAe," (XGLM model)"),zAe.forEach(t),KFo=i($),O_=n($,"LI",{});var WAe=s(O_);Dle=n(WAe,"STRONG",{});var yot=s(Dle);ZFo=r(yot,"xlm"),yot.forEach(t),e0o=r(WAe," \u2014 "),aN=n(WAe,"A",{href:!0});var Lot=s(aN);o0o=r(Lot,"XLMModel"),Lot.forEach(t),r0o=r(WAe," (XLM model)"),WAe.forEach(t),t0o=i($),V_=n($,"LI",{});var QAe=s(V_);Gle=n(QAe,"STRONG",{});var xot=s(Gle);a0o=r(xot,"xlm-prophetnet"),xot.forEach(t),n0o=r(QAe," \u2014 "),nN=n(QAe,"A",{href:!0});var $ot=s(nN);s0o=r($ot,"XLMProphetNetModel"),$ot.forEach(t),l0o=r(QAe," (XLMProphetNet model)"),QAe.forEach(t),i0o=i($),X_=n($,"LI",{});var HAe=s(X_);Ole=n(HAe,"STRONG",{});var kot=s(Ole);d0o=r(kot,"xlm-roberta"),kot.forEach(t),c0o=r(HAe," \u2014 "),sN=n(HAe,"A",{href:!0});var Sot=s(sN);f0o=r(Sot,"XLMRobertaModel"),Sot.forEach(t),m0o=r(HAe," (XLM-RoBERTa model)"),HAe.forEach(t),g0o=i($),z_=n($,"LI",{});var UAe=s(z_);Vle=n(UAe,"STRONG",{});var Rot=s(Vle);h0o=r(Rot,"xlm-roberta-xl"),Rot.forEach(t),p0o=r(UAe," \u2014 "),lN=n(UAe,"A",{href:!0});var Bot=s(lN);_0o=r(Bot,"XLMRobertaXLModel"),Bot.forEach(t),u0o=r(UAe," (XLM-RoBERTa-XL model)"),UAe.forEach(t),b0o=i($),W_=n($,"LI",{});var JAe=s(W_);Xle=n(JAe,"STRONG",{});var Pot=s(Xle);v0o=r(Pot,"xlnet"),Pot.forEach(t),F0o=r(JAe," \u2014 "),iN=n(JAe,"A",{href:!0});var Iot=s(iN);T0o=r(Iot,"XLNetModel"),Iot.forEach(t),M0o=r(JAe," (XLNet model)"),JAe.forEach(t),E0o=i($),Q_=n($,"LI",{});var YAe=s(Q_);zle=n(YAe,"STRONG",{});var qot=s(zle);C0o=r(qot,"yolos"),qot.forEach(t),w0o=r(YAe," \u2014 "),dN=n(YAe,"A",{href:!0});var Not=s(dN);A0o=r(Not,"YolosModel"),Not.forEach(t),y0o=r(YAe," (YOLOS model)"),YAe.forEach(t),L0o=i($),H_=n($,"LI",{});var KAe=s(H_);Wle=n(KAe,"STRONG",{});var jot=s(Wle);x0o=r(jot,"yoso"),jot.forEach(t),$0o=r(KAe," \u2014 "),cN=n(KAe,"A",{href:!0});var Dot=s(cN);k0o=r(Dot,"YosoModel"),Dot.forEach(t),S0o=r(KAe," (YOSO model)"),KAe.forEach(t),$.forEach(t),R0o=i(oa),U_=n(oa,"P",{});var ZAe=s(U_);B0o=r(ZAe,"The model is set in evaluation mode by default using "),Qle=n(ZAe,"CODE",{});var Got=s(Qle);P0o=r(Got,"model.eval()"),Got.forEach(t),I0o=r(ZAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hle=n(ZAe,"CODE",{});var Oot=s(Hle);q0o=r(Oot,"model.train()"),Oot.forEach(t),ZAe.forEach(t),N0o=i(oa),T(J_.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),Bqe=i(f),yi=n(f,"H2",{class:!0});var Nje=s(yi);Y_=n(Nje,"A",{id:!0,class:!0,href:!0});var Vot=s(Y_);Ule=n(Vot,"SPAN",{});var Xot=s(Ule);T(JA.$$.fragment,Xot),Xot.forEach(t),Vot.forEach(t),j0o=i(Nje),Jle=n(Nje,"SPAN",{});var zot=s(Jle);D0o=r(zot,"AutoModelForPreTraining"),zot.forEach(t),Nje.forEach(t),Pqe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(YA.$$.fragment,Gs),G0o=i(Gs),Li=n(Gs,"P",{});var ZK=s(Li);O0o=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fN=n(ZK,"A",{href:!0});var Wot=s(fN);V0o=r(Wot,"from_pretrained()"),Wot.forEach(t),X0o=r(ZK," class method or the "),mN=n(ZK,"A",{href:!0});var Qot=s(mN);z0o=r(Qot,"from_config()"),Qot.forEach(t),W0o=r(ZK,` class
method.`),ZK.forEach(t),Q0o=i(Gs),KA=n(Gs,"P",{});var jje=s(KA);H0o=r(jje,"This class cannot be instantiated directly using "),Yle=n(jje,"CODE",{});var Hot=s(Yle);U0o=r(Hot,"__init__()"),Hot.forEach(t),J0o=r(jje," (throws an error)."),jje.forEach(t),Y0o=i(Gs),at=n(Gs,"DIV",{class:!0});var ww=s(at);T(ZA.$$.fragment,ww),K0o=i(ww),Kle=n(ww,"P",{});var Uot=s(Kle);Z0o=r(Uot,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Uot.forEach(t),eTo=i(ww),xi=n(ww,"P",{});var eZ=s(xi);oTo=r(eZ,`Note:
Loading a model from its configuration file does `),Zle=n(eZ,"STRONG",{});var Jot=s(Zle);rTo=r(Jot,"not"),Jot.forEach(t),tTo=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gN=n(eZ,"A",{href:!0});var Yot=s(gN);aTo=r(Yot,"from_pretrained()"),Yot.forEach(t),nTo=r(eZ," to load the model weights."),eZ.forEach(t),sTo=i(ww),T(K_.$$.fragment,ww),ww.forEach(t),lTo=i(Gs),Ye=n(Gs,"DIV",{class:!0});var ra=s(Ye);T(ey.$$.fragment,ra),iTo=i(ra),eie=n(ra,"P",{});var Kot=s(eie);dTo=r(Kot,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Kot.forEach(t),cTo=i(ra),xa=n(ra,"P",{});var Aw=s(xa);fTo=r(Aw,"The model class to instantiate is selected based on the "),oie=n(Aw,"CODE",{});var Zot=s(oie);mTo=r(Zot,"model_type"),Zot.forEach(t),gTo=r(Aw,` property of the config object (either
passed as an argument or loaded from `),rie=n(Aw,"CODE",{});var ert=s(rie);hTo=r(ert,"pretrained_model_name_or_path"),ert.forEach(t),pTo=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tie=n(Aw,"CODE",{});var ort=s(tie);_To=r(ort,"pretrained_model_name_or_path"),ort.forEach(t),uTo=r(Aw,":"),Aw.forEach(t),bTo=i(ra),G=n(ra,"UL",{});var O=s(G);Z_=n(O,"LI",{});var eye=s(Z_);aie=n(eye,"STRONG",{});var rrt=s(aie);vTo=r(rrt,"albert"),rrt.forEach(t),FTo=r(eye," \u2014 "),hN=n(eye,"A",{href:!0});var trt=s(hN);TTo=r(trt,"AlbertForPreTraining"),trt.forEach(t),MTo=r(eye," (ALBERT model)"),eye.forEach(t),ETo=i(O),eu=n(O,"LI",{});var oye=s(eu);nie=n(oye,"STRONG",{});var art=s(nie);CTo=r(art,"bart"),art.forEach(t),wTo=r(oye," \u2014 "),pN=n(oye,"A",{href:!0});var nrt=s(pN);ATo=r(nrt,"BartForConditionalGeneration"),nrt.forEach(t),yTo=r(oye," (BART model)"),oye.forEach(t),LTo=i(O),ou=n(O,"LI",{});var rye=s(ou);sie=n(rye,"STRONG",{});var srt=s(sie);xTo=r(srt,"bert"),srt.forEach(t),$To=r(rye," \u2014 "),_N=n(rye,"A",{href:!0});var lrt=s(_N);kTo=r(lrt,"BertForPreTraining"),lrt.forEach(t),STo=r(rye," (BERT model)"),rye.forEach(t),RTo=i(O),ru=n(O,"LI",{});var tye=s(ru);lie=n(tye,"STRONG",{});var irt=s(lie);BTo=r(irt,"big_bird"),irt.forEach(t),PTo=r(tye," \u2014 "),uN=n(tye,"A",{href:!0});var drt=s(uN);ITo=r(drt,"BigBirdForPreTraining"),drt.forEach(t),qTo=r(tye," (BigBird model)"),tye.forEach(t),NTo=i(O),tu=n(O,"LI",{});var aye=s(tu);iie=n(aye,"STRONG",{});var crt=s(iie);jTo=r(crt,"bloom"),crt.forEach(t),DTo=r(aye," \u2014 "),bN=n(aye,"A",{href:!0});var frt=s(bN);GTo=r(frt,"BloomForCausalLM"),frt.forEach(t),OTo=r(aye," (BLOOM model)"),aye.forEach(t),VTo=i(O),au=n(O,"LI",{});var nye=s(au);die=n(nye,"STRONG",{});var mrt=s(die);XTo=r(mrt,"camembert"),mrt.forEach(t),zTo=r(nye," \u2014 "),vN=n(nye,"A",{href:!0});var grt=s(vN);WTo=r(grt,"CamembertForMaskedLM"),grt.forEach(t),QTo=r(nye," (CamemBERT model)"),nye.forEach(t),HTo=i(O),nu=n(O,"LI",{});var sye=s(nu);cie=n(sye,"STRONG",{});var hrt=s(cie);UTo=r(hrt,"ctrl"),hrt.forEach(t),JTo=r(sye," \u2014 "),FN=n(sye,"A",{href:!0});var prt=s(FN);YTo=r(prt,"CTRLLMHeadModel"),prt.forEach(t),KTo=r(sye," (CTRL model)"),sye.forEach(t),ZTo=i(O),su=n(O,"LI",{});var lye=s(su);fie=n(lye,"STRONG",{});var _rt=s(fie);e7o=r(_rt,"data2vec-text"),_rt.forEach(t),o7o=r(lye," \u2014 "),TN=n(lye,"A",{href:!0});var urt=s(TN);r7o=r(urt,"Data2VecTextForMaskedLM"),urt.forEach(t),t7o=r(lye," (Data2VecText model)"),lye.forEach(t),a7o=i(O),lu=n(O,"LI",{});var iye=s(lu);mie=n(iye,"STRONG",{});var brt=s(mie);n7o=r(brt,"deberta"),brt.forEach(t),s7o=r(iye," \u2014 "),MN=n(iye,"A",{href:!0});var vrt=s(MN);l7o=r(vrt,"DebertaForMaskedLM"),vrt.forEach(t),i7o=r(iye," (DeBERTa model)"),iye.forEach(t),d7o=i(O),iu=n(O,"LI",{});var dye=s(iu);gie=n(dye,"STRONG",{});var Frt=s(gie);c7o=r(Frt,"deberta-v2"),Frt.forEach(t),f7o=r(dye," \u2014 "),EN=n(dye,"A",{href:!0});var Trt=s(EN);m7o=r(Trt,"DebertaV2ForMaskedLM"),Trt.forEach(t),g7o=r(dye," (DeBERTa-v2 model)"),dye.forEach(t),h7o=i(O),du=n(O,"LI",{});var cye=s(du);hie=n(cye,"STRONG",{});var Mrt=s(hie);p7o=r(Mrt,"distilbert"),Mrt.forEach(t),_7o=r(cye," \u2014 "),CN=n(cye,"A",{href:!0});var Ert=s(CN);u7o=r(Ert,"DistilBertForMaskedLM"),Ert.forEach(t),b7o=r(cye," (DistilBERT model)"),cye.forEach(t),v7o=i(O),cu=n(O,"LI",{});var fye=s(cu);pie=n(fye,"STRONG",{});var Crt=s(pie);F7o=r(Crt,"electra"),Crt.forEach(t),T7o=r(fye," \u2014 "),wN=n(fye,"A",{href:!0});var wrt=s(wN);M7o=r(wrt,"ElectraForPreTraining"),wrt.forEach(t),E7o=r(fye," (ELECTRA model)"),fye.forEach(t),C7o=i(O),fu=n(O,"LI",{});var mye=s(fu);_ie=n(mye,"STRONG",{});var Art=s(_ie);w7o=r(Art,"flaubert"),Art.forEach(t),A7o=r(mye," \u2014 "),AN=n(mye,"A",{href:!0});var yrt=s(AN);y7o=r(yrt,"FlaubertWithLMHeadModel"),yrt.forEach(t),L7o=r(mye," (FlauBERT model)"),mye.forEach(t),x7o=i(O),mu=n(O,"LI",{});var gye=s(mu);uie=n(gye,"STRONG",{});var Lrt=s(uie);$7o=r(Lrt,"flava"),Lrt.forEach(t),k7o=r(gye," \u2014 "),yN=n(gye,"A",{href:!0});var xrt=s(yN);S7o=r(xrt,"FlavaForPreTraining"),xrt.forEach(t),R7o=r(gye," (Flava model)"),gye.forEach(t),B7o=i(O),gu=n(O,"LI",{});var hye=s(gu);bie=n(hye,"STRONG",{});var $rt=s(bie);P7o=r($rt,"fnet"),$rt.forEach(t),I7o=r(hye," \u2014 "),LN=n(hye,"A",{href:!0});var krt=s(LN);q7o=r(krt,"FNetForPreTraining"),krt.forEach(t),N7o=r(hye," (FNet model)"),hye.forEach(t),j7o=i(O),hu=n(O,"LI",{});var pye=s(hu);vie=n(pye,"STRONG",{});var Srt=s(vie);D7o=r(Srt,"fsmt"),Srt.forEach(t),G7o=r(pye," \u2014 "),xN=n(pye,"A",{href:!0});var Rrt=s(xN);O7o=r(Rrt,"FSMTForConditionalGeneration"),Rrt.forEach(t),V7o=r(pye," (FairSeq Machine-Translation model)"),pye.forEach(t),X7o=i(O),pu=n(O,"LI",{});var _ye=s(pu);Fie=n(_ye,"STRONG",{});var Brt=s(Fie);z7o=r(Brt,"funnel"),Brt.forEach(t),W7o=r(_ye," \u2014 "),$N=n(_ye,"A",{href:!0});var Prt=s($N);Q7o=r(Prt,"FunnelForPreTraining"),Prt.forEach(t),H7o=r(_ye," (Funnel Transformer model)"),_ye.forEach(t),U7o=i(O),_u=n(O,"LI",{});var uye=s(_u);Tie=n(uye,"STRONG",{});var Irt=s(Tie);J7o=r(Irt,"gpt2"),Irt.forEach(t),Y7o=r(uye," \u2014 "),kN=n(uye,"A",{href:!0});var qrt=s(kN);K7o=r(qrt,"GPT2LMHeadModel"),qrt.forEach(t),Z7o=r(uye," (OpenAI GPT-2 model)"),uye.forEach(t),eMo=i(O),uu=n(O,"LI",{});var bye=s(uu);Mie=n(bye,"STRONG",{});var Nrt=s(Mie);oMo=r(Nrt,"ibert"),Nrt.forEach(t),rMo=r(bye," \u2014 "),SN=n(bye,"A",{href:!0});var jrt=s(SN);tMo=r(jrt,"IBertForMaskedLM"),jrt.forEach(t),aMo=r(bye," (I-BERT model)"),bye.forEach(t),nMo=i(O),bu=n(O,"LI",{});var vye=s(bu);Eie=n(vye,"STRONG",{});var Drt=s(Eie);sMo=r(Drt,"layoutlm"),Drt.forEach(t),lMo=r(vye," \u2014 "),RN=n(vye,"A",{href:!0});var Grt=s(RN);iMo=r(Grt,"LayoutLMForMaskedLM"),Grt.forEach(t),dMo=r(vye," (LayoutLM model)"),vye.forEach(t),cMo=i(O),vu=n(O,"LI",{});var Fye=s(vu);Cie=n(Fye,"STRONG",{});var Ort=s(Cie);fMo=r(Ort,"longformer"),Ort.forEach(t),mMo=r(Fye," \u2014 "),BN=n(Fye,"A",{href:!0});var Vrt=s(BN);gMo=r(Vrt,"LongformerForMaskedLM"),Vrt.forEach(t),hMo=r(Fye," (Longformer model)"),Fye.forEach(t),pMo=i(O),Fu=n(O,"LI",{});var Tye=s(Fu);wie=n(Tye,"STRONG",{});var Xrt=s(wie);_Mo=r(Xrt,"lxmert"),Xrt.forEach(t),uMo=r(Tye," \u2014 "),PN=n(Tye,"A",{href:!0});var zrt=s(PN);bMo=r(zrt,"LxmertForPreTraining"),zrt.forEach(t),vMo=r(Tye," (LXMERT model)"),Tye.forEach(t),FMo=i(O),Tu=n(O,"LI",{});var Mye=s(Tu);Aie=n(Mye,"STRONG",{});var Wrt=s(Aie);TMo=r(Wrt,"megatron-bert"),Wrt.forEach(t),MMo=r(Mye," \u2014 "),IN=n(Mye,"A",{href:!0});var Qrt=s(IN);EMo=r(Qrt,"MegatronBertForPreTraining"),Qrt.forEach(t),CMo=r(Mye," (MegatronBert model)"),Mye.forEach(t),wMo=i(O),Mu=n(O,"LI",{});var Eye=s(Mu);yie=n(Eye,"STRONG",{});var Hrt=s(yie);AMo=r(Hrt,"mobilebert"),Hrt.forEach(t),yMo=r(Eye," \u2014 "),qN=n(Eye,"A",{href:!0});var Urt=s(qN);LMo=r(Urt,"MobileBertForPreTraining"),Urt.forEach(t),xMo=r(Eye," (MobileBERT model)"),Eye.forEach(t),$Mo=i(O),Eu=n(O,"LI",{});var Cye=s(Eu);Lie=n(Cye,"STRONG",{});var Jrt=s(Lie);kMo=r(Jrt,"mpnet"),Jrt.forEach(t),SMo=r(Cye," \u2014 "),NN=n(Cye,"A",{href:!0});var Yrt=s(NN);RMo=r(Yrt,"MPNetForMaskedLM"),Yrt.forEach(t),BMo=r(Cye," (MPNet model)"),Cye.forEach(t),PMo=i(O),Cu=n(O,"LI",{});var wye=s(Cu);xie=n(wye,"STRONG",{});var Krt=s(xie);IMo=r(Krt,"openai-gpt"),Krt.forEach(t),qMo=r(wye," \u2014 "),jN=n(wye,"A",{href:!0});var Zrt=s(jN);NMo=r(Zrt,"OpenAIGPTLMHeadModel"),Zrt.forEach(t),jMo=r(wye," (OpenAI GPT model)"),wye.forEach(t),DMo=i(O),wu=n(O,"LI",{});var Aye=s(wu);$ie=n(Aye,"STRONG",{});var ett=s($ie);GMo=r(ett,"retribert"),ett.forEach(t),OMo=r(Aye," \u2014 "),DN=n(Aye,"A",{href:!0});var ott=s(DN);VMo=r(ott,"RetriBertModel"),ott.forEach(t),XMo=r(Aye," (RetriBERT model)"),Aye.forEach(t),zMo=i(O),Au=n(O,"LI",{});var yye=s(Au);kie=n(yye,"STRONG",{});var rtt=s(kie);WMo=r(rtt,"roberta"),rtt.forEach(t),QMo=r(yye," \u2014 "),GN=n(yye,"A",{href:!0});var ttt=s(GN);HMo=r(ttt,"RobertaForMaskedLM"),ttt.forEach(t),UMo=r(yye," (RoBERTa model)"),yye.forEach(t),JMo=i(O),yu=n(O,"LI",{});var Lye=s(yu);Sie=n(Lye,"STRONG",{});var att=s(Sie);YMo=r(att,"splinter"),att.forEach(t),KMo=r(Lye," \u2014 "),ON=n(Lye,"A",{href:!0});var ntt=s(ON);ZMo=r(ntt,"SplinterForPreTraining"),ntt.forEach(t),e4o=r(Lye," (Splinter model)"),Lye.forEach(t),o4o=i(O),Lu=n(O,"LI",{});var xye=s(Lu);Rie=n(xye,"STRONG",{});var stt=s(Rie);r4o=r(stt,"squeezebert"),stt.forEach(t),t4o=r(xye," \u2014 "),VN=n(xye,"A",{href:!0});var ltt=s(VN);a4o=r(ltt,"SqueezeBertForMaskedLM"),ltt.forEach(t),n4o=r(xye," (SqueezeBERT model)"),xye.forEach(t),s4o=i(O),xu=n(O,"LI",{});var $ye=s(xu);Bie=n($ye,"STRONG",{});var itt=s(Bie);l4o=r(itt,"t5"),itt.forEach(t),i4o=r($ye," \u2014 "),XN=n($ye,"A",{href:!0});var dtt=s(XN);d4o=r(dtt,"T5ForConditionalGeneration"),dtt.forEach(t),c4o=r($ye," (T5 model)"),$ye.forEach(t),f4o=i(O),$u=n(O,"LI",{});var kye=s($u);Pie=n(kye,"STRONG",{});var ctt=s(Pie);m4o=r(ctt,"tapas"),ctt.forEach(t),g4o=r(kye," \u2014 "),zN=n(kye,"A",{href:!0});var ftt=s(zN);h4o=r(ftt,"TapasForMaskedLM"),ftt.forEach(t),p4o=r(kye," (TAPAS model)"),kye.forEach(t),_4o=i(O),ku=n(O,"LI",{});var Sye=s(ku);Iie=n(Sye,"STRONG",{});var mtt=s(Iie);u4o=r(mtt,"transfo-xl"),mtt.forEach(t),b4o=r(Sye," \u2014 "),WN=n(Sye,"A",{href:!0});var gtt=s(WN);v4o=r(gtt,"TransfoXLLMHeadModel"),gtt.forEach(t),F4o=r(Sye," (Transformer-XL model)"),Sye.forEach(t),T4o=i(O),Su=n(O,"LI",{});var Rye=s(Su);qie=n(Rye,"STRONG",{});var htt=s(qie);M4o=r(htt,"unispeech"),htt.forEach(t),E4o=r(Rye," \u2014 "),QN=n(Rye,"A",{href:!0});var ptt=s(QN);C4o=r(ptt,"UniSpeechForPreTraining"),ptt.forEach(t),w4o=r(Rye," (UniSpeech model)"),Rye.forEach(t),A4o=i(O),Ru=n(O,"LI",{});var Bye=s(Ru);Nie=n(Bye,"STRONG",{});var _tt=s(Nie);y4o=r(_tt,"unispeech-sat"),_tt.forEach(t),L4o=r(Bye," \u2014 "),HN=n(Bye,"A",{href:!0});var utt=s(HN);x4o=r(utt,"UniSpeechSatForPreTraining"),utt.forEach(t),$4o=r(Bye," (UniSpeechSat model)"),Bye.forEach(t),k4o=i(O),Bu=n(O,"LI",{});var Pye=s(Bu);jie=n(Pye,"STRONG",{});var btt=s(jie);S4o=r(btt,"visual_bert"),btt.forEach(t),R4o=r(Pye," \u2014 "),UN=n(Pye,"A",{href:!0});var vtt=s(UN);B4o=r(vtt,"VisualBertForPreTraining"),vtt.forEach(t),P4o=r(Pye," (VisualBert model)"),Pye.forEach(t),I4o=i(O),Pu=n(O,"LI",{});var Iye=s(Pu);Die=n(Iye,"STRONG",{});var Ftt=s(Die);q4o=r(Ftt,"vit_mae"),Ftt.forEach(t),N4o=r(Iye," \u2014 "),JN=n(Iye,"A",{href:!0});var Ttt=s(JN);j4o=r(Ttt,"ViTMAEForPreTraining"),Ttt.forEach(t),D4o=r(Iye," (ViTMAE model)"),Iye.forEach(t),G4o=i(O),Iu=n(O,"LI",{});var qye=s(Iu);Gie=n(qye,"STRONG",{});var Mtt=s(Gie);O4o=r(Mtt,"wav2vec2"),Mtt.forEach(t),V4o=r(qye," \u2014 "),YN=n(qye,"A",{href:!0});var Ett=s(YN);X4o=r(Ett,"Wav2Vec2ForPreTraining"),Ett.forEach(t),z4o=r(qye," (Wav2Vec2 model)"),qye.forEach(t),W4o=i(O),qu=n(O,"LI",{});var Nye=s(qu);Oie=n(Nye,"STRONG",{});var Ctt=s(Oie);Q4o=r(Ctt,"wav2vec2-conformer"),Ctt.forEach(t),H4o=r(Nye," \u2014 "),KN=n(Nye,"A",{href:!0});var wtt=s(KN);U4o=r(wtt,"Wav2Vec2ConformerForPreTraining"),wtt.forEach(t),J4o=r(Nye," (Wav2Vec2-Conformer model)"),Nye.forEach(t),Y4o=i(O),Nu=n(O,"LI",{});var jye=s(Nu);Vie=n(jye,"STRONG",{});var Att=s(Vie);K4o=r(Att,"xlm"),Att.forEach(t),Z4o=r(jye," \u2014 "),ZN=n(jye,"A",{href:!0});var ytt=s(ZN);eEo=r(ytt,"XLMWithLMHeadModel"),ytt.forEach(t),oEo=r(jye," (XLM model)"),jye.forEach(t),rEo=i(O),ju=n(O,"LI",{});var Dye=s(ju);Xie=n(Dye,"STRONG",{});var Ltt=s(Xie);tEo=r(Ltt,"xlm-roberta"),Ltt.forEach(t),aEo=r(Dye," \u2014 "),ej=n(Dye,"A",{href:!0});var xtt=s(ej);nEo=r(xtt,"XLMRobertaForMaskedLM"),xtt.forEach(t),sEo=r(Dye," (XLM-RoBERTa model)"),Dye.forEach(t),lEo=i(O),Du=n(O,"LI",{});var Gye=s(Du);zie=n(Gye,"STRONG",{});var $tt=s(zie);iEo=r($tt,"xlm-roberta-xl"),$tt.forEach(t),dEo=r(Gye," \u2014 "),oj=n(Gye,"A",{href:!0});var ktt=s(oj);cEo=r(ktt,"XLMRobertaXLForMaskedLM"),ktt.forEach(t),fEo=r(Gye," (XLM-RoBERTa-XL model)"),Gye.forEach(t),mEo=i(O),Gu=n(O,"LI",{});var Oye=s(Gu);Wie=n(Oye,"STRONG",{});var Stt=s(Wie);gEo=r(Stt,"xlnet"),Stt.forEach(t),hEo=r(Oye," \u2014 "),rj=n(Oye,"A",{href:!0});var Rtt=s(rj);pEo=r(Rtt,"XLNetLMHeadModel"),Rtt.forEach(t),_Eo=r(Oye," (XLNet model)"),Oye.forEach(t),O.forEach(t),uEo=i(ra),Ou=n(ra,"P",{});var Vye=s(Ou);bEo=r(Vye,"The model is set in evaluation mode by default using "),Qie=n(Vye,"CODE",{});var Btt=s(Qie);vEo=r(Btt,"model.eval()"),Btt.forEach(t),FEo=r(Vye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hie=n(Vye,"CODE",{});var Ptt=s(Hie);TEo=r(Ptt,"model.train()"),Ptt.forEach(t),Vye.forEach(t),MEo=i(ra),T(Vu.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),Iqe=i(f),$i=n(f,"H2",{class:!0});var Dje=s($i);Xu=n(Dje,"A",{id:!0,class:!0,href:!0});var Itt=s(Xu);Uie=n(Itt,"SPAN",{});var qtt=s(Uie);T(oy.$$.fragment,qtt),qtt.forEach(t),Itt.forEach(t),EEo=i(Dje),Jie=n(Dje,"SPAN",{});var Ntt=s(Jie);CEo=r(Ntt,"AutoModelForCausalLM"),Ntt.forEach(t),Dje.forEach(t),qqe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(ry.$$.fragment,Os),wEo=i(Os),ki=n(Os,"P",{});var oZ=s(ki);AEo=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tj=n(oZ,"A",{href:!0});var jtt=s(tj);yEo=r(jtt,"from_pretrained()"),jtt.forEach(t),LEo=r(oZ," class method or the "),aj=n(oZ,"A",{href:!0});var Dtt=s(aj);xEo=r(Dtt,"from_config()"),Dtt.forEach(t),$Eo=r(oZ,` class
method.`),oZ.forEach(t),kEo=i(Os),ty=n(Os,"P",{});var Gje=s(ty);SEo=r(Gje,"This class cannot be instantiated directly using "),Yie=n(Gje,"CODE",{});var Gtt=s(Yie);REo=r(Gtt,"__init__()"),Gtt.forEach(t),BEo=r(Gje," (throws an error)."),Gje.forEach(t),PEo=i(Os),nt=n(Os,"DIV",{class:!0});var yw=s(nt);T(ay.$$.fragment,yw),IEo=i(yw),Kie=n(yw,"P",{});var Ott=s(Kie);qEo=r(Ott,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ott.forEach(t),NEo=i(yw),Si=n(yw,"P",{});var rZ=s(Si);jEo=r(rZ,`Note:
Loading a model from its configuration file does `),Zie=n(rZ,"STRONG",{});var Vtt=s(Zie);DEo=r(Vtt,"not"),Vtt.forEach(t),GEo=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nj=n(rZ,"A",{href:!0});var Xtt=s(nj);OEo=r(Xtt,"from_pretrained()"),Xtt.forEach(t),VEo=r(rZ," to load the model weights."),rZ.forEach(t),XEo=i(yw),T(zu.$$.fragment,yw),yw.forEach(t),zEo=i(Os),Ke=n(Os,"DIV",{class:!0});var ta=s(Ke);T(ny.$$.fragment,ta),WEo=i(ta),ede=n(ta,"P",{});var ztt=s(ede);QEo=r(ztt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ztt.forEach(t),HEo=i(ta),$a=n(ta,"P",{});var Lw=s($a);UEo=r(Lw,"The model class to instantiate is selected based on the "),ode=n(Lw,"CODE",{});var Wtt=s(ode);JEo=r(Wtt,"model_type"),Wtt.forEach(t),YEo=r(Lw,` property of the config object (either
passed as an argument or loaded from `),rde=n(Lw,"CODE",{});var Qtt=s(rde);KEo=r(Qtt,"pretrained_model_name_or_path"),Qtt.forEach(t),ZEo=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tde=n(Lw,"CODE",{});var Htt=s(tde);eCo=r(Htt,"pretrained_model_name_or_path"),Htt.forEach(t),oCo=r(Lw,":"),Lw.forEach(t),rCo=i(ta),z=n(ta,"UL",{});var W=s(z);Wu=n(W,"LI",{});var Xye=s(Wu);ade=n(Xye,"STRONG",{});var Utt=s(ade);tCo=r(Utt,"bart"),Utt.forEach(t),aCo=r(Xye," \u2014 "),sj=n(Xye,"A",{href:!0});var Jtt=s(sj);nCo=r(Jtt,"BartForCausalLM"),Jtt.forEach(t),sCo=r(Xye," (BART model)"),Xye.forEach(t),lCo=i(W),Qu=n(W,"LI",{});var zye=s(Qu);nde=n(zye,"STRONG",{});var Ytt=s(nde);iCo=r(Ytt,"bert"),Ytt.forEach(t),dCo=r(zye," \u2014 "),lj=n(zye,"A",{href:!0});var Ktt=s(lj);cCo=r(Ktt,"BertLMHeadModel"),Ktt.forEach(t),fCo=r(zye," (BERT model)"),zye.forEach(t),mCo=i(W),Hu=n(W,"LI",{});var Wye=s(Hu);sde=n(Wye,"STRONG",{});var Ztt=s(sde);gCo=r(Ztt,"bert-generation"),Ztt.forEach(t),hCo=r(Wye," \u2014 "),ij=n(Wye,"A",{href:!0});var eat=s(ij);pCo=r(eat,"BertGenerationDecoder"),eat.forEach(t),_Co=r(Wye," (Bert Generation model)"),Wye.forEach(t),uCo=i(W),Uu=n(W,"LI",{});var Qye=s(Uu);lde=n(Qye,"STRONG",{});var oat=s(lde);bCo=r(oat,"big_bird"),oat.forEach(t),vCo=r(Qye," \u2014 "),dj=n(Qye,"A",{href:!0});var rat=s(dj);FCo=r(rat,"BigBirdForCausalLM"),rat.forEach(t),TCo=r(Qye," (BigBird model)"),Qye.forEach(t),MCo=i(W),Ju=n(W,"LI",{});var Hye=s(Ju);ide=n(Hye,"STRONG",{});var tat=s(ide);ECo=r(tat,"bigbird_pegasus"),tat.forEach(t),CCo=r(Hye," \u2014 "),cj=n(Hye,"A",{href:!0});var aat=s(cj);wCo=r(aat,"BigBirdPegasusForCausalLM"),aat.forEach(t),ACo=r(Hye," (BigBirdPegasus model)"),Hye.forEach(t),yCo=i(W),Yu=n(W,"LI",{});var Uye=s(Yu);dde=n(Uye,"STRONG",{});var nat=s(dde);LCo=r(nat,"blenderbot"),nat.forEach(t),xCo=r(Uye," \u2014 "),fj=n(Uye,"A",{href:!0});var sat=s(fj);$Co=r(sat,"BlenderbotForCausalLM"),sat.forEach(t),kCo=r(Uye," (Blenderbot model)"),Uye.forEach(t),SCo=i(W),Ku=n(W,"LI",{});var Jye=s(Ku);cde=n(Jye,"STRONG",{});var lat=s(cde);RCo=r(lat,"blenderbot-small"),lat.forEach(t),BCo=r(Jye," \u2014 "),mj=n(Jye,"A",{href:!0});var iat=s(mj);PCo=r(iat,"BlenderbotSmallForCausalLM"),iat.forEach(t),ICo=r(Jye," (BlenderbotSmall model)"),Jye.forEach(t),qCo=i(W),Zu=n(W,"LI",{});var Yye=s(Zu);fde=n(Yye,"STRONG",{});var dat=s(fde);NCo=r(dat,"bloom"),dat.forEach(t),jCo=r(Yye," \u2014 "),gj=n(Yye,"A",{href:!0});var cat=s(gj);DCo=r(cat,"BloomForCausalLM"),cat.forEach(t),GCo=r(Yye," (BLOOM model)"),Yye.forEach(t),OCo=i(W),e2=n(W,"LI",{});var Kye=s(e2);mde=n(Kye,"STRONG",{});var fat=s(mde);VCo=r(fat,"camembert"),fat.forEach(t),XCo=r(Kye," \u2014 "),hj=n(Kye,"A",{href:!0});var mat=s(hj);zCo=r(mat,"CamembertForCausalLM"),mat.forEach(t),WCo=r(Kye," (CamemBERT model)"),Kye.forEach(t),QCo=i(W),o2=n(W,"LI",{});var Zye=s(o2);gde=n(Zye,"STRONG",{});var gat=s(gde);HCo=r(gat,"ctrl"),gat.forEach(t),UCo=r(Zye," \u2014 "),pj=n(Zye,"A",{href:!0});var hat=s(pj);JCo=r(hat,"CTRLLMHeadModel"),hat.forEach(t),YCo=r(Zye," (CTRL model)"),Zye.forEach(t),KCo=i(W),r2=n(W,"LI",{});var eLe=s(r2);hde=n(eLe,"STRONG",{});var pat=s(hde);ZCo=r(pat,"data2vec-text"),pat.forEach(t),e5o=r(eLe," \u2014 "),_j=n(eLe,"A",{href:!0});var _at=s(_j);o5o=r(_at,"Data2VecTextForCausalLM"),_at.forEach(t),r5o=r(eLe," (Data2VecText model)"),eLe.forEach(t),t5o=i(W),t2=n(W,"LI",{});var oLe=s(t2);pde=n(oLe,"STRONG",{});var uat=s(pde);a5o=r(uat,"electra"),uat.forEach(t),n5o=r(oLe," \u2014 "),uj=n(oLe,"A",{href:!0});var bat=s(uj);s5o=r(bat,"ElectraForCausalLM"),bat.forEach(t),l5o=r(oLe," (ELECTRA model)"),oLe.forEach(t),i5o=i(W),a2=n(W,"LI",{});var rLe=s(a2);_de=n(rLe,"STRONG",{});var vat=s(_de);d5o=r(vat,"gpt2"),vat.forEach(t),c5o=r(rLe," \u2014 "),bj=n(rLe,"A",{href:!0});var Fat=s(bj);f5o=r(Fat,"GPT2LMHeadModel"),Fat.forEach(t),m5o=r(rLe," (OpenAI GPT-2 model)"),rLe.forEach(t),g5o=i(W),n2=n(W,"LI",{});var tLe=s(n2);ude=n(tLe,"STRONG",{});var Tat=s(ude);h5o=r(Tat,"gpt_neo"),Tat.forEach(t),p5o=r(tLe," \u2014 "),vj=n(tLe,"A",{href:!0});var Mat=s(vj);_5o=r(Mat,"GPTNeoForCausalLM"),Mat.forEach(t),u5o=r(tLe," (GPT Neo model)"),tLe.forEach(t),b5o=i(W),s2=n(W,"LI",{});var aLe=s(s2);bde=n(aLe,"STRONG",{});var Eat=s(bde);v5o=r(Eat,"gptj"),Eat.forEach(t),F5o=r(aLe," \u2014 "),Fj=n(aLe,"A",{href:!0});var Cat=s(Fj);T5o=r(Cat,"GPTJForCausalLM"),Cat.forEach(t),M5o=r(aLe," (GPT-J model)"),aLe.forEach(t),E5o=i(W),l2=n(W,"LI",{});var nLe=s(l2);vde=n(nLe,"STRONG",{});var wat=s(vde);C5o=r(wat,"marian"),wat.forEach(t),w5o=r(nLe," \u2014 "),Tj=n(nLe,"A",{href:!0});var Aat=s(Tj);A5o=r(Aat,"MarianForCausalLM"),Aat.forEach(t),y5o=r(nLe," (Marian model)"),nLe.forEach(t),L5o=i(W),i2=n(W,"LI",{});var sLe=s(i2);Fde=n(sLe,"STRONG",{});var yat=s(Fde);x5o=r(yat,"mbart"),yat.forEach(t),$5o=r(sLe," \u2014 "),Mj=n(sLe,"A",{href:!0});var Lat=s(Mj);k5o=r(Lat,"MBartForCausalLM"),Lat.forEach(t),S5o=r(sLe," (mBART model)"),sLe.forEach(t),R5o=i(W),d2=n(W,"LI",{});var lLe=s(d2);Tde=n(lLe,"STRONG",{});var xat=s(Tde);B5o=r(xat,"megatron-bert"),xat.forEach(t),P5o=r(lLe," \u2014 "),Ej=n(lLe,"A",{href:!0});var $at=s(Ej);I5o=r($at,"MegatronBertForCausalLM"),$at.forEach(t),q5o=r(lLe," (MegatronBert model)"),lLe.forEach(t),N5o=i(W),c2=n(W,"LI",{});var iLe=s(c2);Mde=n(iLe,"STRONG",{});var kat=s(Mde);j5o=r(kat,"openai-gpt"),kat.forEach(t),D5o=r(iLe," \u2014 "),Cj=n(iLe,"A",{href:!0});var Sat=s(Cj);G5o=r(Sat,"OpenAIGPTLMHeadModel"),Sat.forEach(t),O5o=r(iLe," (OpenAI GPT model)"),iLe.forEach(t),V5o=i(W),f2=n(W,"LI",{});var dLe=s(f2);Ede=n(dLe,"STRONG",{});var Rat=s(Ede);X5o=r(Rat,"opt"),Rat.forEach(t),z5o=r(dLe," \u2014 "),wj=n(dLe,"A",{href:!0});var Bat=s(wj);W5o=r(Bat,"OPTForCausalLM"),Bat.forEach(t),Q5o=r(dLe," (OPT model)"),dLe.forEach(t),H5o=i(W),m2=n(W,"LI",{});var cLe=s(m2);Cde=n(cLe,"STRONG",{});var Pat=s(Cde);U5o=r(Pat,"pegasus"),Pat.forEach(t),J5o=r(cLe," \u2014 "),Aj=n(cLe,"A",{href:!0});var Iat=s(Aj);Y5o=r(Iat,"PegasusForCausalLM"),Iat.forEach(t),K5o=r(cLe," (Pegasus model)"),cLe.forEach(t),Z5o=i(W),g2=n(W,"LI",{});var fLe=s(g2);wde=n(fLe,"STRONG",{});var qat=s(wde);e3o=r(qat,"plbart"),qat.forEach(t),o3o=r(fLe," \u2014 "),yj=n(fLe,"A",{href:!0});var Nat=s(yj);r3o=r(Nat,"PLBartForCausalLM"),Nat.forEach(t),t3o=r(fLe," (PLBart model)"),fLe.forEach(t),a3o=i(W),h2=n(W,"LI",{});var mLe=s(h2);Ade=n(mLe,"STRONG",{});var jat=s(Ade);n3o=r(jat,"prophetnet"),jat.forEach(t),s3o=r(mLe," \u2014 "),Lj=n(mLe,"A",{href:!0});var Dat=s(Lj);l3o=r(Dat,"ProphetNetForCausalLM"),Dat.forEach(t),i3o=r(mLe," (ProphetNet model)"),mLe.forEach(t),d3o=i(W),p2=n(W,"LI",{});var gLe=s(p2);yde=n(gLe,"STRONG",{});var Gat=s(yde);c3o=r(Gat,"qdqbert"),Gat.forEach(t),f3o=r(gLe," \u2014 "),xj=n(gLe,"A",{href:!0});var Oat=s(xj);m3o=r(Oat,"QDQBertLMHeadModel"),Oat.forEach(t),g3o=r(gLe," (QDQBert model)"),gLe.forEach(t),h3o=i(W),_2=n(W,"LI",{});var hLe=s(_2);Lde=n(hLe,"STRONG",{});var Vat=s(Lde);p3o=r(Vat,"reformer"),Vat.forEach(t),_3o=r(hLe," \u2014 "),$j=n(hLe,"A",{href:!0});var Xat=s($j);u3o=r(Xat,"ReformerModelWithLMHead"),Xat.forEach(t),b3o=r(hLe," (Reformer model)"),hLe.forEach(t),v3o=i(W),u2=n(W,"LI",{});var pLe=s(u2);xde=n(pLe,"STRONG",{});var zat=s(xde);F3o=r(zat,"rembert"),zat.forEach(t),T3o=r(pLe," \u2014 "),kj=n(pLe,"A",{href:!0});var Wat=s(kj);M3o=r(Wat,"RemBertForCausalLM"),Wat.forEach(t),E3o=r(pLe," (RemBERT model)"),pLe.forEach(t),C3o=i(W),b2=n(W,"LI",{});var _Le=s(b2);$de=n(_Le,"STRONG",{});var Qat=s($de);w3o=r(Qat,"roberta"),Qat.forEach(t),A3o=r(_Le," \u2014 "),Sj=n(_Le,"A",{href:!0});var Hat=s(Sj);y3o=r(Hat,"RobertaForCausalLM"),Hat.forEach(t),L3o=r(_Le," (RoBERTa model)"),_Le.forEach(t),x3o=i(W),v2=n(W,"LI",{});var uLe=s(v2);kde=n(uLe,"STRONG",{});var Uat=s(kde);$3o=r(Uat,"roformer"),Uat.forEach(t),k3o=r(uLe," \u2014 "),Rj=n(uLe,"A",{href:!0});var Jat=s(Rj);S3o=r(Jat,"RoFormerForCausalLM"),Jat.forEach(t),R3o=r(uLe," (RoFormer model)"),uLe.forEach(t),B3o=i(W),F2=n(W,"LI",{});var bLe=s(F2);Sde=n(bLe,"STRONG",{});var Yat=s(Sde);P3o=r(Yat,"speech_to_text_2"),Yat.forEach(t),I3o=r(bLe," \u2014 "),Bj=n(bLe,"A",{href:!0});var Kat=s(Bj);q3o=r(Kat,"Speech2Text2ForCausalLM"),Kat.forEach(t),N3o=r(bLe," (Speech2Text2 model)"),bLe.forEach(t),j3o=i(W),T2=n(W,"LI",{});var vLe=s(T2);Rde=n(vLe,"STRONG",{});var Zat=s(Rde);D3o=r(Zat,"transfo-xl"),Zat.forEach(t),G3o=r(vLe," \u2014 "),Pj=n(vLe,"A",{href:!0});var ent=s(Pj);O3o=r(ent,"TransfoXLLMHeadModel"),ent.forEach(t),V3o=r(vLe," (Transformer-XL model)"),vLe.forEach(t),X3o=i(W),M2=n(W,"LI",{});var FLe=s(M2);Bde=n(FLe,"STRONG",{});var ont=s(Bde);z3o=r(ont,"trocr"),ont.forEach(t),W3o=r(FLe," \u2014 "),Ij=n(FLe,"A",{href:!0});var rnt=s(Ij);Q3o=r(rnt,"TrOCRForCausalLM"),rnt.forEach(t),H3o=r(FLe," (TrOCR model)"),FLe.forEach(t),U3o=i(W),E2=n(W,"LI",{});var TLe=s(E2);Pde=n(TLe,"STRONG",{});var tnt=s(Pde);J3o=r(tnt,"xglm"),tnt.forEach(t),Y3o=r(TLe," \u2014 "),qj=n(TLe,"A",{href:!0});var ant=s(qj);K3o=r(ant,"XGLMForCausalLM"),ant.forEach(t),Z3o=r(TLe," (XGLM model)"),TLe.forEach(t),ewo=i(W),C2=n(W,"LI",{});var MLe=s(C2);Ide=n(MLe,"STRONG",{});var nnt=s(Ide);owo=r(nnt,"xlm"),nnt.forEach(t),rwo=r(MLe," \u2014 "),Nj=n(MLe,"A",{href:!0});var snt=s(Nj);two=r(snt,"XLMWithLMHeadModel"),snt.forEach(t),awo=r(MLe," (XLM model)"),MLe.forEach(t),nwo=i(W),w2=n(W,"LI",{});var ELe=s(w2);qde=n(ELe,"STRONG",{});var lnt=s(qde);swo=r(lnt,"xlm-prophetnet"),lnt.forEach(t),lwo=r(ELe," \u2014 "),jj=n(ELe,"A",{href:!0});var int=s(jj);iwo=r(int,"XLMProphetNetForCausalLM"),int.forEach(t),dwo=r(ELe," (XLMProphetNet model)"),ELe.forEach(t),cwo=i(W),A2=n(W,"LI",{});var CLe=s(A2);Nde=n(CLe,"STRONG",{});var dnt=s(Nde);fwo=r(dnt,"xlm-roberta"),dnt.forEach(t),mwo=r(CLe," \u2014 "),Dj=n(CLe,"A",{href:!0});var cnt=s(Dj);gwo=r(cnt,"XLMRobertaForCausalLM"),cnt.forEach(t),hwo=r(CLe," (XLM-RoBERTa model)"),CLe.forEach(t),pwo=i(W),y2=n(W,"LI",{});var wLe=s(y2);jde=n(wLe,"STRONG",{});var fnt=s(jde);_wo=r(fnt,"xlm-roberta-xl"),fnt.forEach(t),uwo=r(wLe," \u2014 "),Gj=n(wLe,"A",{href:!0});var mnt=s(Gj);bwo=r(mnt,"XLMRobertaXLForCausalLM"),mnt.forEach(t),vwo=r(wLe," (XLM-RoBERTa-XL model)"),wLe.forEach(t),Fwo=i(W),L2=n(W,"LI",{});var ALe=s(L2);Dde=n(ALe,"STRONG",{});var gnt=s(Dde);Two=r(gnt,"xlnet"),gnt.forEach(t),Mwo=r(ALe," \u2014 "),Oj=n(ALe,"A",{href:!0});var hnt=s(Oj);Ewo=r(hnt,"XLNetLMHeadModel"),hnt.forEach(t),Cwo=r(ALe," (XLNet model)"),ALe.forEach(t),W.forEach(t),wwo=i(ta),x2=n(ta,"P",{});var yLe=s(x2);Awo=r(yLe,"The model is set in evaluation mode by default using "),Gde=n(yLe,"CODE",{});var pnt=s(Gde);ywo=r(pnt,"model.eval()"),pnt.forEach(t),Lwo=r(yLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ode=n(yLe,"CODE",{});var _nt=s(Ode);xwo=r(_nt,"model.train()"),_nt.forEach(t),yLe.forEach(t),$wo=i(ta),T($2.$$.fragment,ta),ta.forEach(t),Os.forEach(t),Nqe=i(f),Ri=n(f,"H2",{class:!0});var Oje=s(Ri);k2=n(Oje,"A",{id:!0,class:!0,href:!0});var unt=s(k2);Vde=n(unt,"SPAN",{});var bnt=s(Vde);T(sy.$$.fragment,bnt),bnt.forEach(t),unt.forEach(t),kwo=i(Oje),Xde=n(Oje,"SPAN",{});var vnt=s(Xde);Swo=r(vnt,"AutoModelForMaskedLM"),vnt.forEach(t),Oje.forEach(t),jqe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(ly.$$.fragment,Vs),Rwo=i(Vs),Bi=n(Vs,"P",{});var tZ=s(Bi);Bwo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Vj=n(tZ,"A",{href:!0});var Fnt=s(Vj);Pwo=r(Fnt,"from_pretrained()"),Fnt.forEach(t),Iwo=r(tZ," class method or the "),Xj=n(tZ,"A",{href:!0});var Tnt=s(Xj);qwo=r(Tnt,"from_config()"),Tnt.forEach(t),Nwo=r(tZ,` class
method.`),tZ.forEach(t),jwo=i(Vs),iy=n(Vs,"P",{});var Vje=s(iy);Dwo=r(Vje,"This class cannot be instantiated directly using "),zde=n(Vje,"CODE",{});var Mnt=s(zde);Gwo=r(Mnt,"__init__()"),Mnt.forEach(t),Owo=r(Vje," (throws an error)."),Vje.forEach(t),Vwo=i(Vs),st=n(Vs,"DIV",{class:!0});var xw=s(st);T(dy.$$.fragment,xw),Xwo=i(xw),Wde=n(xw,"P",{});var Ent=s(Wde);zwo=r(Ent,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ent.forEach(t),Wwo=i(xw),Pi=n(xw,"P",{});var aZ=s(Pi);Qwo=r(aZ,`Note:
Loading a model from its configuration file does `),Qde=n(aZ,"STRONG",{});var Cnt=s(Qde);Hwo=r(Cnt,"not"),Cnt.forEach(t),Uwo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zj=n(aZ,"A",{href:!0});var wnt=s(zj);Jwo=r(wnt,"from_pretrained()"),wnt.forEach(t),Ywo=r(aZ," to load the model weights."),aZ.forEach(t),Kwo=i(xw),T(S2.$$.fragment,xw),xw.forEach(t),Zwo=i(Vs),Ze=n(Vs,"DIV",{class:!0});var aa=s(Ze);T(cy.$$.fragment,aa),e6o=i(aa),Hde=n(aa,"P",{});var Ant=s(Hde);o6o=r(Ant,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ant.forEach(t),r6o=i(aa),ka=n(aa,"P",{});var $w=s(ka);t6o=r($w,"The model class to instantiate is selected based on the "),Ude=n($w,"CODE",{});var ynt=s(Ude);a6o=r(ynt,"model_type"),ynt.forEach(t),n6o=r($w,` property of the config object (either
passed as an argument or loaded from `),Jde=n($w,"CODE",{});var Lnt=s(Jde);s6o=r(Lnt,"pretrained_model_name_or_path"),Lnt.forEach(t),l6o=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yde=n($w,"CODE",{});var xnt=s(Yde);i6o=r(xnt,"pretrained_model_name_or_path"),xnt.forEach(t),d6o=r($w,":"),$w.forEach(t),c6o=i(aa),Q=n(aa,"UL",{});var H=s(Q);R2=n(H,"LI",{});var LLe=s(R2);Kde=n(LLe,"STRONG",{});var $nt=s(Kde);f6o=r($nt,"albert"),$nt.forEach(t),m6o=r(LLe," \u2014 "),Wj=n(LLe,"A",{href:!0});var knt=s(Wj);g6o=r(knt,"AlbertForMaskedLM"),knt.forEach(t),h6o=r(LLe," (ALBERT model)"),LLe.forEach(t),p6o=i(H),B2=n(H,"LI",{});var xLe=s(B2);Zde=n(xLe,"STRONG",{});var Snt=s(Zde);_6o=r(Snt,"bart"),Snt.forEach(t),u6o=r(xLe," \u2014 "),Qj=n(xLe,"A",{href:!0});var Rnt=s(Qj);b6o=r(Rnt,"BartForConditionalGeneration"),Rnt.forEach(t),v6o=r(xLe," (BART model)"),xLe.forEach(t),F6o=i(H),P2=n(H,"LI",{});var $Le=s(P2);ece=n($Le,"STRONG",{});var Bnt=s(ece);T6o=r(Bnt,"bert"),Bnt.forEach(t),M6o=r($Le," \u2014 "),Hj=n($Le,"A",{href:!0});var Pnt=s(Hj);E6o=r(Pnt,"BertForMaskedLM"),Pnt.forEach(t),C6o=r($Le," (BERT model)"),$Le.forEach(t),w6o=i(H),I2=n(H,"LI",{});var kLe=s(I2);oce=n(kLe,"STRONG",{});var Int=s(oce);A6o=r(Int,"big_bird"),Int.forEach(t),y6o=r(kLe," \u2014 "),Uj=n(kLe,"A",{href:!0});var qnt=s(Uj);L6o=r(qnt,"BigBirdForMaskedLM"),qnt.forEach(t),x6o=r(kLe," (BigBird model)"),kLe.forEach(t),$6o=i(H),q2=n(H,"LI",{});var SLe=s(q2);rce=n(SLe,"STRONG",{});var Nnt=s(rce);k6o=r(Nnt,"camembert"),Nnt.forEach(t),S6o=r(SLe," \u2014 "),Jj=n(SLe,"A",{href:!0});var jnt=s(Jj);R6o=r(jnt,"CamembertForMaskedLM"),jnt.forEach(t),B6o=r(SLe," (CamemBERT model)"),SLe.forEach(t),P6o=i(H),N2=n(H,"LI",{});var RLe=s(N2);tce=n(RLe,"STRONG",{});var Dnt=s(tce);I6o=r(Dnt,"convbert"),Dnt.forEach(t),q6o=r(RLe," \u2014 "),Yj=n(RLe,"A",{href:!0});var Gnt=s(Yj);N6o=r(Gnt,"ConvBertForMaskedLM"),Gnt.forEach(t),j6o=r(RLe," (ConvBERT model)"),RLe.forEach(t),D6o=i(H),j2=n(H,"LI",{});var BLe=s(j2);ace=n(BLe,"STRONG",{});var Ont=s(ace);G6o=r(Ont,"data2vec-text"),Ont.forEach(t),O6o=r(BLe," \u2014 "),Kj=n(BLe,"A",{href:!0});var Vnt=s(Kj);V6o=r(Vnt,"Data2VecTextForMaskedLM"),Vnt.forEach(t),X6o=r(BLe," (Data2VecText model)"),BLe.forEach(t),z6o=i(H),D2=n(H,"LI",{});var PLe=s(D2);nce=n(PLe,"STRONG",{});var Xnt=s(nce);W6o=r(Xnt,"deberta"),Xnt.forEach(t),Q6o=r(PLe," \u2014 "),Zj=n(PLe,"A",{href:!0});var znt=s(Zj);H6o=r(znt,"DebertaForMaskedLM"),znt.forEach(t),U6o=r(PLe," (DeBERTa model)"),PLe.forEach(t),J6o=i(H),G2=n(H,"LI",{});var ILe=s(G2);sce=n(ILe,"STRONG",{});var Wnt=s(sce);Y6o=r(Wnt,"deberta-v2"),Wnt.forEach(t),K6o=r(ILe," \u2014 "),eD=n(ILe,"A",{href:!0});var Qnt=s(eD);Z6o=r(Qnt,"DebertaV2ForMaskedLM"),Qnt.forEach(t),eAo=r(ILe," (DeBERTa-v2 model)"),ILe.forEach(t),oAo=i(H),O2=n(H,"LI",{});var qLe=s(O2);lce=n(qLe,"STRONG",{});var Hnt=s(lce);rAo=r(Hnt,"distilbert"),Hnt.forEach(t),tAo=r(qLe," \u2014 "),oD=n(qLe,"A",{href:!0});var Unt=s(oD);aAo=r(Unt,"DistilBertForMaskedLM"),Unt.forEach(t),nAo=r(qLe," (DistilBERT model)"),qLe.forEach(t),sAo=i(H),V2=n(H,"LI",{});var NLe=s(V2);ice=n(NLe,"STRONG",{});var Jnt=s(ice);lAo=r(Jnt,"electra"),Jnt.forEach(t),iAo=r(NLe," \u2014 "),rD=n(NLe,"A",{href:!0});var Ynt=s(rD);dAo=r(Ynt,"ElectraForMaskedLM"),Ynt.forEach(t),cAo=r(NLe," (ELECTRA model)"),NLe.forEach(t),fAo=i(H),X2=n(H,"LI",{});var jLe=s(X2);dce=n(jLe,"STRONG",{});var Knt=s(dce);mAo=r(Knt,"flaubert"),Knt.forEach(t),gAo=r(jLe," \u2014 "),tD=n(jLe,"A",{href:!0});var Znt=s(tD);hAo=r(Znt,"FlaubertWithLMHeadModel"),Znt.forEach(t),pAo=r(jLe," (FlauBERT model)"),jLe.forEach(t),_Ao=i(H),z2=n(H,"LI",{});var DLe=s(z2);cce=n(DLe,"STRONG",{});var est=s(cce);uAo=r(est,"fnet"),est.forEach(t),bAo=r(DLe," \u2014 "),aD=n(DLe,"A",{href:!0});var ost=s(aD);vAo=r(ost,"FNetForMaskedLM"),ost.forEach(t),FAo=r(DLe," (FNet model)"),DLe.forEach(t),TAo=i(H),W2=n(H,"LI",{});var GLe=s(W2);fce=n(GLe,"STRONG",{});var rst=s(fce);MAo=r(rst,"funnel"),rst.forEach(t),EAo=r(GLe," \u2014 "),nD=n(GLe,"A",{href:!0});var tst=s(nD);CAo=r(tst,"FunnelForMaskedLM"),tst.forEach(t),wAo=r(GLe," (Funnel Transformer model)"),GLe.forEach(t),AAo=i(H),Q2=n(H,"LI",{});var OLe=s(Q2);mce=n(OLe,"STRONG",{});var ast=s(mce);yAo=r(ast,"ibert"),ast.forEach(t),LAo=r(OLe," \u2014 "),sD=n(OLe,"A",{href:!0});var nst=s(sD);xAo=r(nst,"IBertForMaskedLM"),nst.forEach(t),$Ao=r(OLe," (I-BERT model)"),OLe.forEach(t),kAo=i(H),H2=n(H,"LI",{});var VLe=s(H2);gce=n(VLe,"STRONG",{});var sst=s(gce);SAo=r(sst,"layoutlm"),sst.forEach(t),RAo=r(VLe," \u2014 "),lD=n(VLe,"A",{href:!0});var lst=s(lD);BAo=r(lst,"LayoutLMForMaskedLM"),lst.forEach(t),PAo=r(VLe," (LayoutLM model)"),VLe.forEach(t),IAo=i(H),U2=n(H,"LI",{});var XLe=s(U2);hce=n(XLe,"STRONG",{});var ist=s(hce);qAo=r(ist,"longformer"),ist.forEach(t),NAo=r(XLe," \u2014 "),iD=n(XLe,"A",{href:!0});var dst=s(iD);jAo=r(dst,"LongformerForMaskedLM"),dst.forEach(t),DAo=r(XLe," (Longformer model)"),XLe.forEach(t),GAo=i(H),J2=n(H,"LI",{});var zLe=s(J2);pce=n(zLe,"STRONG",{});var cst=s(pce);OAo=r(cst,"mbart"),cst.forEach(t),VAo=r(zLe," \u2014 "),dD=n(zLe,"A",{href:!0});var fst=s(dD);XAo=r(fst,"MBartForConditionalGeneration"),fst.forEach(t),zAo=r(zLe," (mBART model)"),zLe.forEach(t),WAo=i(H),Y2=n(H,"LI",{});var WLe=s(Y2);_ce=n(WLe,"STRONG",{});var mst=s(_ce);QAo=r(mst,"megatron-bert"),mst.forEach(t),HAo=r(WLe," \u2014 "),cD=n(WLe,"A",{href:!0});var gst=s(cD);UAo=r(gst,"MegatronBertForMaskedLM"),gst.forEach(t),JAo=r(WLe," (MegatronBert model)"),WLe.forEach(t),YAo=i(H),K2=n(H,"LI",{});var QLe=s(K2);uce=n(QLe,"STRONG",{});var hst=s(uce);KAo=r(hst,"mobilebert"),hst.forEach(t),ZAo=r(QLe," \u2014 "),fD=n(QLe,"A",{href:!0});var pst=s(fD);eyo=r(pst,"MobileBertForMaskedLM"),pst.forEach(t),oyo=r(QLe," (MobileBERT model)"),QLe.forEach(t),ryo=i(H),Z2=n(H,"LI",{});var HLe=s(Z2);bce=n(HLe,"STRONG",{});var _st=s(bce);tyo=r(_st,"mpnet"),_st.forEach(t),ayo=r(HLe," \u2014 "),mD=n(HLe,"A",{href:!0});var ust=s(mD);nyo=r(ust,"MPNetForMaskedLM"),ust.forEach(t),syo=r(HLe," (MPNet model)"),HLe.forEach(t),lyo=i(H),e1=n(H,"LI",{});var ULe=s(e1);vce=n(ULe,"STRONG",{});var bst=s(vce);iyo=r(bst,"nystromformer"),bst.forEach(t),dyo=r(ULe," \u2014 "),gD=n(ULe,"A",{href:!0});var vst=s(gD);cyo=r(vst,"NystromformerForMaskedLM"),vst.forEach(t),fyo=r(ULe," (Nystromformer model)"),ULe.forEach(t),myo=i(H),o1=n(H,"LI",{});var JLe=s(o1);Fce=n(JLe,"STRONG",{});var Fst=s(Fce);gyo=r(Fst,"perceiver"),Fst.forEach(t),hyo=r(JLe," \u2014 "),hD=n(JLe,"A",{href:!0});var Tst=s(hD);pyo=r(Tst,"PerceiverForMaskedLM"),Tst.forEach(t),_yo=r(JLe," (Perceiver model)"),JLe.forEach(t),uyo=i(H),r1=n(H,"LI",{});var YLe=s(r1);Tce=n(YLe,"STRONG",{});var Mst=s(Tce);byo=r(Mst,"qdqbert"),Mst.forEach(t),vyo=r(YLe," \u2014 "),pD=n(YLe,"A",{href:!0});var Est=s(pD);Fyo=r(Est,"QDQBertForMaskedLM"),Est.forEach(t),Tyo=r(YLe," (QDQBert model)"),YLe.forEach(t),Myo=i(H),t1=n(H,"LI",{});var KLe=s(t1);Mce=n(KLe,"STRONG",{});var Cst=s(Mce);Eyo=r(Cst,"reformer"),Cst.forEach(t),Cyo=r(KLe," \u2014 "),_D=n(KLe,"A",{href:!0});var wst=s(_D);wyo=r(wst,"ReformerForMaskedLM"),wst.forEach(t),Ayo=r(KLe," (Reformer model)"),KLe.forEach(t),yyo=i(H),a1=n(H,"LI",{});var ZLe=s(a1);Ece=n(ZLe,"STRONG",{});var Ast=s(Ece);Lyo=r(Ast,"rembert"),Ast.forEach(t),xyo=r(ZLe," \u2014 "),uD=n(ZLe,"A",{href:!0});var yst=s(uD);$yo=r(yst,"RemBertForMaskedLM"),yst.forEach(t),kyo=r(ZLe," (RemBERT model)"),ZLe.forEach(t),Syo=i(H),n1=n(H,"LI",{});var e8e=s(n1);Cce=n(e8e,"STRONG",{});var Lst=s(Cce);Ryo=r(Lst,"roberta"),Lst.forEach(t),Byo=r(e8e," \u2014 "),bD=n(e8e,"A",{href:!0});var xst=s(bD);Pyo=r(xst,"RobertaForMaskedLM"),xst.forEach(t),Iyo=r(e8e," (RoBERTa model)"),e8e.forEach(t),qyo=i(H),s1=n(H,"LI",{});var o8e=s(s1);wce=n(o8e,"STRONG",{});var $st=s(wce);Nyo=r($st,"roformer"),$st.forEach(t),jyo=r(o8e," \u2014 "),vD=n(o8e,"A",{href:!0});var kst=s(vD);Dyo=r(kst,"RoFormerForMaskedLM"),kst.forEach(t),Gyo=r(o8e," (RoFormer model)"),o8e.forEach(t),Oyo=i(H),l1=n(H,"LI",{});var r8e=s(l1);Ace=n(r8e,"STRONG",{});var Sst=s(Ace);Vyo=r(Sst,"squeezebert"),Sst.forEach(t),Xyo=r(r8e," \u2014 "),FD=n(r8e,"A",{href:!0});var Rst=s(FD);zyo=r(Rst,"SqueezeBertForMaskedLM"),Rst.forEach(t),Wyo=r(r8e," (SqueezeBERT model)"),r8e.forEach(t),Qyo=i(H),i1=n(H,"LI",{});var t8e=s(i1);yce=n(t8e,"STRONG",{});var Bst=s(yce);Hyo=r(Bst,"tapas"),Bst.forEach(t),Uyo=r(t8e," \u2014 "),TD=n(t8e,"A",{href:!0});var Pst=s(TD);Jyo=r(Pst,"TapasForMaskedLM"),Pst.forEach(t),Yyo=r(t8e," (TAPAS model)"),t8e.forEach(t),Kyo=i(H),d1=n(H,"LI",{});var a8e=s(d1);Lce=n(a8e,"STRONG",{});var Ist=s(Lce);Zyo=r(Ist,"wav2vec2"),Ist.forEach(t),eLo=r(a8e," \u2014 "),xce=n(a8e,"CODE",{});var qst=s(xce);oLo=r(qst,"Wav2Vec2ForMaskedLM"),qst.forEach(t),rLo=r(a8e," (Wav2Vec2 model)"),a8e.forEach(t),tLo=i(H),c1=n(H,"LI",{});var n8e=s(c1);$ce=n(n8e,"STRONG",{});var Nst=s($ce);aLo=r(Nst,"xlm"),Nst.forEach(t),nLo=r(n8e," \u2014 "),MD=n(n8e,"A",{href:!0});var jst=s(MD);sLo=r(jst,"XLMWithLMHeadModel"),jst.forEach(t),lLo=r(n8e," (XLM model)"),n8e.forEach(t),iLo=i(H),f1=n(H,"LI",{});var s8e=s(f1);kce=n(s8e,"STRONG",{});var Dst=s(kce);dLo=r(Dst,"xlm-roberta"),Dst.forEach(t),cLo=r(s8e," \u2014 "),ED=n(s8e,"A",{href:!0});var Gst=s(ED);fLo=r(Gst,"XLMRobertaForMaskedLM"),Gst.forEach(t),mLo=r(s8e," (XLM-RoBERTa model)"),s8e.forEach(t),gLo=i(H),m1=n(H,"LI",{});var l8e=s(m1);Sce=n(l8e,"STRONG",{});var Ost=s(Sce);hLo=r(Ost,"xlm-roberta-xl"),Ost.forEach(t),pLo=r(l8e," \u2014 "),CD=n(l8e,"A",{href:!0});var Vst=s(CD);_Lo=r(Vst,"XLMRobertaXLForMaskedLM"),Vst.forEach(t),uLo=r(l8e," (XLM-RoBERTa-XL model)"),l8e.forEach(t),bLo=i(H),g1=n(H,"LI",{});var i8e=s(g1);Rce=n(i8e,"STRONG",{});var Xst=s(Rce);vLo=r(Xst,"yoso"),Xst.forEach(t),FLo=r(i8e," \u2014 "),wD=n(i8e,"A",{href:!0});var zst=s(wD);TLo=r(zst,"YosoForMaskedLM"),zst.forEach(t),MLo=r(i8e," (YOSO model)"),i8e.forEach(t),H.forEach(t),ELo=i(aa),h1=n(aa,"P",{});var d8e=s(h1);CLo=r(d8e,"The model is set in evaluation mode by default using "),Bce=n(d8e,"CODE",{});var Wst=s(Bce);wLo=r(Wst,"model.eval()"),Wst.forEach(t),ALo=r(d8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pce=n(d8e,"CODE",{});var Qst=s(Pce);yLo=r(Qst,"model.train()"),Qst.forEach(t),d8e.forEach(t),LLo=i(aa),T(p1.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),Dqe=i(f),Ii=n(f,"H2",{class:!0});var Xje=s(Ii);_1=n(Xje,"A",{id:!0,class:!0,href:!0});var Hst=s(_1);Ice=n(Hst,"SPAN",{});var Ust=s(Ice);T(fy.$$.fragment,Ust),Ust.forEach(t),Hst.forEach(t),xLo=i(Xje),qce=n(Xje,"SPAN",{});var Jst=s(qce);$Lo=r(Jst,"AutoModelForSeq2SeqLM"),Jst.forEach(t),Xje.forEach(t),Gqe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(my.$$.fragment,Xs),kLo=i(Xs),qi=n(Xs,"P",{});var nZ=s(qi);SLo=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),AD=n(nZ,"A",{href:!0});var Yst=s(AD);RLo=r(Yst,"from_pretrained()"),Yst.forEach(t),BLo=r(nZ," class method or the "),yD=n(nZ,"A",{href:!0});var Kst=s(yD);PLo=r(Kst,"from_config()"),Kst.forEach(t),ILo=r(nZ,` class
method.`),nZ.forEach(t),qLo=i(Xs),gy=n(Xs,"P",{});var zje=s(gy);NLo=r(zje,"This class cannot be instantiated directly using "),Nce=n(zje,"CODE",{});var Zst=s(Nce);jLo=r(Zst,"__init__()"),Zst.forEach(t),DLo=r(zje," (throws an error)."),zje.forEach(t),GLo=i(Xs),lt=n(Xs,"DIV",{class:!0});var kw=s(lt);T(hy.$$.fragment,kw),OLo=i(kw),jce=n(kw,"P",{});var elt=s(jce);VLo=r(elt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),elt.forEach(t),XLo=i(kw),Ni=n(kw,"P",{});var sZ=s(Ni);zLo=r(sZ,`Note:
Loading a model from its configuration file does `),Dce=n(sZ,"STRONG",{});var olt=s(Dce);WLo=r(olt,"not"),olt.forEach(t),QLo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LD=n(sZ,"A",{href:!0});var rlt=s(LD);HLo=r(rlt,"from_pretrained()"),rlt.forEach(t),ULo=r(sZ," to load the model weights."),sZ.forEach(t),JLo=i(kw),T(u1.$$.fragment,kw),kw.forEach(t),YLo=i(Xs),eo=n(Xs,"DIV",{class:!0});var na=s(eo);T(py.$$.fragment,na),KLo=i(na),Gce=n(na,"P",{});var tlt=s(Gce);ZLo=r(tlt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tlt.forEach(t),e8o=i(na),Sa=n(na,"P",{});var Sw=s(Sa);o8o=r(Sw,"The model class to instantiate is selected based on the "),Oce=n(Sw,"CODE",{});var alt=s(Oce);r8o=r(alt,"model_type"),alt.forEach(t),t8o=r(Sw,` property of the config object (either
passed as an argument or loaded from `),Vce=n(Sw,"CODE",{});var nlt=s(Vce);a8o=r(nlt,"pretrained_model_name_or_path"),nlt.forEach(t),n8o=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xce=n(Sw,"CODE",{});var slt=s(Xce);s8o=r(slt,"pretrained_model_name_or_path"),slt.forEach(t),l8o=r(Sw,":"),Sw.forEach(t),i8o=i(na),_e=n(na,"UL",{});var ve=s(_e);b1=n(ve,"LI",{});var c8e=s(b1);zce=n(c8e,"STRONG",{});var llt=s(zce);d8o=r(llt,"bart"),llt.forEach(t),c8o=r(c8e," \u2014 "),xD=n(c8e,"A",{href:!0});var ilt=s(xD);f8o=r(ilt,"BartForConditionalGeneration"),ilt.forEach(t),m8o=r(c8e," (BART model)"),c8e.forEach(t),g8o=i(ve),v1=n(ve,"LI",{});var f8e=s(v1);Wce=n(f8e,"STRONG",{});var dlt=s(Wce);h8o=r(dlt,"bigbird_pegasus"),dlt.forEach(t),p8o=r(f8e," \u2014 "),$D=n(f8e,"A",{href:!0});var clt=s($D);_8o=r(clt,"BigBirdPegasusForConditionalGeneration"),clt.forEach(t),u8o=r(f8e," (BigBirdPegasus model)"),f8e.forEach(t),b8o=i(ve),F1=n(ve,"LI",{});var m8e=s(F1);Qce=n(m8e,"STRONG",{});var flt=s(Qce);v8o=r(flt,"blenderbot"),flt.forEach(t),F8o=r(m8e," \u2014 "),kD=n(m8e,"A",{href:!0});var mlt=s(kD);T8o=r(mlt,"BlenderbotForConditionalGeneration"),mlt.forEach(t),M8o=r(m8e," (Blenderbot model)"),m8e.forEach(t),E8o=i(ve),T1=n(ve,"LI",{});var g8e=s(T1);Hce=n(g8e,"STRONG",{});var glt=s(Hce);C8o=r(glt,"blenderbot-small"),glt.forEach(t),w8o=r(g8e," \u2014 "),SD=n(g8e,"A",{href:!0});var hlt=s(SD);A8o=r(hlt,"BlenderbotSmallForConditionalGeneration"),hlt.forEach(t),y8o=r(g8e," (BlenderbotSmall model)"),g8e.forEach(t),L8o=i(ve),M1=n(ve,"LI",{});var h8e=s(M1);Uce=n(h8e,"STRONG",{});var plt=s(Uce);x8o=r(plt,"encoder-decoder"),plt.forEach(t),$8o=r(h8e," \u2014 "),RD=n(h8e,"A",{href:!0});var _lt=s(RD);k8o=r(_lt,"EncoderDecoderModel"),_lt.forEach(t),S8o=r(h8e," (Encoder decoder model)"),h8e.forEach(t),R8o=i(ve),E1=n(ve,"LI",{});var p8e=s(E1);Jce=n(p8e,"STRONG",{});var ult=s(Jce);B8o=r(ult,"fsmt"),ult.forEach(t),P8o=r(p8e," \u2014 "),BD=n(p8e,"A",{href:!0});var blt=s(BD);I8o=r(blt,"FSMTForConditionalGeneration"),blt.forEach(t),q8o=r(p8e," (FairSeq Machine-Translation model)"),p8e.forEach(t),N8o=i(ve),C1=n(ve,"LI",{});var _8e=s(C1);Yce=n(_8e,"STRONG",{});var vlt=s(Yce);j8o=r(vlt,"led"),vlt.forEach(t),D8o=r(_8e," \u2014 "),PD=n(_8e,"A",{href:!0});var Flt=s(PD);G8o=r(Flt,"LEDForConditionalGeneration"),Flt.forEach(t),O8o=r(_8e," (LED model)"),_8e.forEach(t),V8o=i(ve),w1=n(ve,"LI",{});var u8e=s(w1);Kce=n(u8e,"STRONG",{});var Tlt=s(Kce);X8o=r(Tlt,"m2m_100"),Tlt.forEach(t),z8o=r(u8e," \u2014 "),ID=n(u8e,"A",{href:!0});var Mlt=s(ID);W8o=r(Mlt,"M2M100ForConditionalGeneration"),Mlt.forEach(t),Q8o=r(u8e," (M2M100 model)"),u8e.forEach(t),H8o=i(ve),A1=n(ve,"LI",{});var b8e=s(A1);Zce=n(b8e,"STRONG",{});var Elt=s(Zce);U8o=r(Elt,"marian"),Elt.forEach(t),J8o=r(b8e," \u2014 "),qD=n(b8e,"A",{href:!0});var Clt=s(qD);Y8o=r(Clt,"MarianMTModel"),Clt.forEach(t),K8o=r(b8e," (Marian model)"),b8e.forEach(t),Z8o=i(ve),y1=n(ve,"LI",{});var v8e=s(y1);efe=n(v8e,"STRONG",{});var wlt=s(efe);e9o=r(wlt,"mbart"),wlt.forEach(t),o9o=r(v8e," \u2014 "),ND=n(v8e,"A",{href:!0});var Alt=s(ND);r9o=r(Alt,"MBartForConditionalGeneration"),Alt.forEach(t),t9o=r(v8e," (mBART model)"),v8e.forEach(t),a9o=i(ve),L1=n(ve,"LI",{});var F8e=s(L1);ofe=n(F8e,"STRONG",{});var ylt=s(ofe);n9o=r(ylt,"mt5"),ylt.forEach(t),s9o=r(F8e," \u2014 "),jD=n(F8e,"A",{href:!0});var Llt=s(jD);l9o=r(Llt,"MT5ForConditionalGeneration"),Llt.forEach(t),i9o=r(F8e," (mT5 model)"),F8e.forEach(t),d9o=i(ve),x1=n(ve,"LI",{});var T8e=s(x1);rfe=n(T8e,"STRONG",{});var xlt=s(rfe);c9o=r(xlt,"pegasus"),xlt.forEach(t),f9o=r(T8e," \u2014 "),DD=n(T8e,"A",{href:!0});var $lt=s(DD);m9o=r($lt,"PegasusForConditionalGeneration"),$lt.forEach(t),g9o=r(T8e," (Pegasus model)"),T8e.forEach(t),h9o=i(ve),$1=n(ve,"LI",{});var M8e=s($1);tfe=n(M8e,"STRONG",{});var klt=s(tfe);p9o=r(klt,"plbart"),klt.forEach(t),_9o=r(M8e," \u2014 "),GD=n(M8e,"A",{href:!0});var Slt=s(GD);u9o=r(Slt,"PLBartForConditionalGeneration"),Slt.forEach(t),b9o=r(M8e," (PLBart model)"),M8e.forEach(t),v9o=i(ve),k1=n(ve,"LI",{});var E8e=s(k1);afe=n(E8e,"STRONG",{});var Rlt=s(afe);F9o=r(Rlt,"prophetnet"),Rlt.forEach(t),T9o=r(E8e," \u2014 "),OD=n(E8e,"A",{href:!0});var Blt=s(OD);M9o=r(Blt,"ProphetNetForConditionalGeneration"),Blt.forEach(t),E9o=r(E8e," (ProphetNet model)"),E8e.forEach(t),C9o=i(ve),S1=n(ve,"LI",{});var C8e=s(S1);nfe=n(C8e,"STRONG",{});var Plt=s(nfe);w9o=r(Plt,"t5"),Plt.forEach(t),A9o=r(C8e," \u2014 "),VD=n(C8e,"A",{href:!0});var Ilt=s(VD);y9o=r(Ilt,"T5ForConditionalGeneration"),Ilt.forEach(t),L9o=r(C8e," (T5 model)"),C8e.forEach(t),x9o=i(ve),R1=n(ve,"LI",{});var w8e=s(R1);sfe=n(w8e,"STRONG",{});var qlt=s(sfe);$9o=r(qlt,"xlm-prophetnet"),qlt.forEach(t),k9o=r(w8e," \u2014 "),XD=n(w8e,"A",{href:!0});var Nlt=s(XD);S9o=r(Nlt,"XLMProphetNetForConditionalGeneration"),Nlt.forEach(t),R9o=r(w8e," (XLMProphetNet model)"),w8e.forEach(t),ve.forEach(t),B9o=i(na),B1=n(na,"P",{});var A8e=s(B1);P9o=r(A8e,"The model is set in evaluation mode by default using "),lfe=n(A8e,"CODE",{});var jlt=s(lfe);I9o=r(jlt,"model.eval()"),jlt.forEach(t),q9o=r(A8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=n(A8e,"CODE",{});var Dlt=s(ife);N9o=r(Dlt,"model.train()"),Dlt.forEach(t),A8e.forEach(t),j9o=i(na),T(P1.$$.fragment,na),na.forEach(t),Xs.forEach(t),Oqe=i(f),ji=n(f,"H2",{class:!0});var Wje=s(ji);I1=n(Wje,"A",{id:!0,class:!0,href:!0});var Glt=s(I1);dfe=n(Glt,"SPAN",{});var Olt=s(dfe);T(_y.$$.fragment,Olt),Olt.forEach(t),Glt.forEach(t),D9o=i(Wje),cfe=n(Wje,"SPAN",{});var Vlt=s(cfe);G9o=r(Vlt,"AutoModelForSequenceClassification"),Vlt.forEach(t),Wje.forEach(t),Vqe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(uy.$$.fragment,zs),O9o=i(zs),Di=n(zs,"P",{});var lZ=s(Di);V9o=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zD=n(lZ,"A",{href:!0});var Xlt=s(zD);X9o=r(Xlt,"from_pretrained()"),Xlt.forEach(t),z9o=r(lZ," class method or the "),WD=n(lZ,"A",{href:!0});var zlt=s(WD);W9o=r(zlt,"from_config()"),zlt.forEach(t),Q9o=r(lZ,` class
method.`),lZ.forEach(t),H9o=i(zs),by=n(zs,"P",{});var Qje=s(by);U9o=r(Qje,"This class cannot be instantiated directly using "),ffe=n(Qje,"CODE",{});var Wlt=s(ffe);J9o=r(Wlt,"__init__()"),Wlt.forEach(t),Y9o=r(Qje," (throws an error)."),Qje.forEach(t),K9o=i(zs),it=n(zs,"DIV",{class:!0});var Rw=s(it);T(vy.$$.fragment,Rw),Z9o=i(Rw),mfe=n(Rw,"P",{});var Qlt=s(mfe);exo=r(Qlt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Qlt.forEach(t),oxo=i(Rw),Gi=n(Rw,"P",{});var iZ=s(Gi);rxo=r(iZ,`Note:
Loading a model from its configuration file does `),gfe=n(iZ,"STRONG",{});var Hlt=s(gfe);txo=r(Hlt,"not"),Hlt.forEach(t),axo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QD=n(iZ,"A",{href:!0});var Ult=s(QD);nxo=r(Ult,"from_pretrained()"),Ult.forEach(t),sxo=r(iZ," to load the model weights."),iZ.forEach(t),lxo=i(Rw),T(q1.$$.fragment,Rw),Rw.forEach(t),ixo=i(zs),oo=n(zs,"DIV",{class:!0});var sa=s(oo);T(Fy.$$.fragment,sa),dxo=i(sa),hfe=n(sa,"P",{});var Jlt=s(hfe);cxo=r(Jlt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Jlt.forEach(t),fxo=i(sa),Ra=n(sa,"P",{});var Bw=s(Ra);mxo=r(Bw,"The model class to instantiate is selected based on the "),pfe=n(Bw,"CODE",{});var Ylt=s(pfe);gxo=r(Ylt,"model_type"),Ylt.forEach(t),hxo=r(Bw,` property of the config object (either
passed as an argument or loaded from `),_fe=n(Bw,"CODE",{});var Klt=s(_fe);pxo=r(Klt,"pretrained_model_name_or_path"),Klt.forEach(t),_xo=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=n(Bw,"CODE",{});var Zlt=s(ufe);uxo=r(Zlt,"pretrained_model_name_or_path"),Zlt.forEach(t),bxo=r(Bw,":"),Bw.forEach(t),vxo=i(sa),q=n(sa,"UL",{});var j=s(q);N1=n(j,"LI",{});var y8e=s(N1);bfe=n(y8e,"STRONG",{});var eit=s(bfe);Fxo=r(eit,"albert"),eit.forEach(t),Txo=r(y8e," \u2014 "),HD=n(y8e,"A",{href:!0});var oit=s(HD);Mxo=r(oit,"AlbertForSequenceClassification"),oit.forEach(t),Exo=r(y8e," (ALBERT model)"),y8e.forEach(t),Cxo=i(j),j1=n(j,"LI",{});var L8e=s(j1);vfe=n(L8e,"STRONG",{});var rit=s(vfe);wxo=r(rit,"bart"),rit.forEach(t),Axo=r(L8e," \u2014 "),UD=n(L8e,"A",{href:!0});var tit=s(UD);yxo=r(tit,"BartForSequenceClassification"),tit.forEach(t),Lxo=r(L8e," (BART model)"),L8e.forEach(t),xxo=i(j),D1=n(j,"LI",{});var x8e=s(D1);Ffe=n(x8e,"STRONG",{});var ait=s(Ffe);$xo=r(ait,"bert"),ait.forEach(t),kxo=r(x8e," \u2014 "),JD=n(x8e,"A",{href:!0});var nit=s(JD);Sxo=r(nit,"BertForSequenceClassification"),nit.forEach(t),Rxo=r(x8e," (BERT model)"),x8e.forEach(t),Bxo=i(j),G1=n(j,"LI",{});var $8e=s(G1);Tfe=n($8e,"STRONG",{});var sit=s(Tfe);Pxo=r(sit,"big_bird"),sit.forEach(t),Ixo=r($8e," \u2014 "),YD=n($8e,"A",{href:!0});var lit=s(YD);qxo=r(lit,"BigBirdForSequenceClassification"),lit.forEach(t),Nxo=r($8e," (BigBird model)"),$8e.forEach(t),jxo=i(j),O1=n(j,"LI",{});var k8e=s(O1);Mfe=n(k8e,"STRONG",{});var iit=s(Mfe);Dxo=r(iit,"bigbird_pegasus"),iit.forEach(t),Gxo=r(k8e," \u2014 "),KD=n(k8e,"A",{href:!0});var dit=s(KD);Oxo=r(dit,"BigBirdPegasusForSequenceClassification"),dit.forEach(t),Vxo=r(k8e," (BigBirdPegasus model)"),k8e.forEach(t),Xxo=i(j),V1=n(j,"LI",{});var S8e=s(V1);Efe=n(S8e,"STRONG",{});var cit=s(Efe);zxo=r(cit,"camembert"),cit.forEach(t),Wxo=r(S8e," \u2014 "),ZD=n(S8e,"A",{href:!0});var fit=s(ZD);Qxo=r(fit,"CamembertForSequenceClassification"),fit.forEach(t),Hxo=r(S8e," (CamemBERT model)"),S8e.forEach(t),Uxo=i(j),X1=n(j,"LI",{});var R8e=s(X1);Cfe=n(R8e,"STRONG",{});var mit=s(Cfe);Jxo=r(mit,"canine"),mit.forEach(t),Yxo=r(R8e," \u2014 "),eG=n(R8e,"A",{href:!0});var git=s(eG);Kxo=r(git,"CanineForSequenceClassification"),git.forEach(t),Zxo=r(R8e," (Canine model)"),R8e.forEach(t),e$o=i(j),z1=n(j,"LI",{});var B8e=s(z1);wfe=n(B8e,"STRONG",{});var hit=s(wfe);o$o=r(hit,"convbert"),hit.forEach(t),r$o=r(B8e," \u2014 "),oG=n(B8e,"A",{href:!0});var pit=s(oG);t$o=r(pit,"ConvBertForSequenceClassification"),pit.forEach(t),a$o=r(B8e," (ConvBERT model)"),B8e.forEach(t),n$o=i(j),W1=n(j,"LI",{});var P8e=s(W1);Afe=n(P8e,"STRONG",{});var _it=s(Afe);s$o=r(_it,"ctrl"),_it.forEach(t),l$o=r(P8e," \u2014 "),rG=n(P8e,"A",{href:!0});var uit=s(rG);i$o=r(uit,"CTRLForSequenceClassification"),uit.forEach(t),d$o=r(P8e," (CTRL model)"),P8e.forEach(t),c$o=i(j),Q1=n(j,"LI",{});var I8e=s(Q1);yfe=n(I8e,"STRONG",{});var bit=s(yfe);f$o=r(bit,"data2vec-text"),bit.forEach(t),m$o=r(I8e," \u2014 "),tG=n(I8e,"A",{href:!0});var vit=s(tG);g$o=r(vit,"Data2VecTextForSequenceClassification"),vit.forEach(t),h$o=r(I8e," (Data2VecText model)"),I8e.forEach(t),p$o=i(j),H1=n(j,"LI",{});var q8e=s(H1);Lfe=n(q8e,"STRONG",{});var Fit=s(Lfe);_$o=r(Fit,"deberta"),Fit.forEach(t),u$o=r(q8e," \u2014 "),aG=n(q8e,"A",{href:!0});var Tit=s(aG);b$o=r(Tit,"DebertaForSequenceClassification"),Tit.forEach(t),v$o=r(q8e," (DeBERTa model)"),q8e.forEach(t),F$o=i(j),U1=n(j,"LI",{});var N8e=s(U1);xfe=n(N8e,"STRONG",{});var Mit=s(xfe);T$o=r(Mit,"deberta-v2"),Mit.forEach(t),M$o=r(N8e," \u2014 "),nG=n(N8e,"A",{href:!0});var Eit=s(nG);E$o=r(Eit,"DebertaV2ForSequenceClassification"),Eit.forEach(t),C$o=r(N8e," (DeBERTa-v2 model)"),N8e.forEach(t),w$o=i(j),J1=n(j,"LI",{});var j8e=s(J1);$fe=n(j8e,"STRONG",{});var Cit=s($fe);A$o=r(Cit,"distilbert"),Cit.forEach(t),y$o=r(j8e," \u2014 "),sG=n(j8e,"A",{href:!0});var wit=s(sG);L$o=r(wit,"DistilBertForSequenceClassification"),wit.forEach(t),x$o=r(j8e," (DistilBERT model)"),j8e.forEach(t),$$o=i(j),Y1=n(j,"LI",{});var D8e=s(Y1);kfe=n(D8e,"STRONG",{});var Ait=s(kfe);k$o=r(Ait,"electra"),Ait.forEach(t),S$o=r(D8e," \u2014 "),lG=n(D8e,"A",{href:!0});var yit=s(lG);R$o=r(yit,"ElectraForSequenceClassification"),yit.forEach(t),B$o=r(D8e," (ELECTRA model)"),D8e.forEach(t),P$o=i(j),K1=n(j,"LI",{});var G8e=s(K1);Sfe=n(G8e,"STRONG",{});var Lit=s(Sfe);I$o=r(Lit,"flaubert"),Lit.forEach(t),q$o=r(G8e," \u2014 "),iG=n(G8e,"A",{href:!0});var xit=s(iG);N$o=r(xit,"FlaubertForSequenceClassification"),xit.forEach(t),j$o=r(G8e," (FlauBERT model)"),G8e.forEach(t),D$o=i(j),Z1=n(j,"LI",{});var O8e=s(Z1);Rfe=n(O8e,"STRONG",{});var $it=s(Rfe);G$o=r($it,"fnet"),$it.forEach(t),O$o=r(O8e," \u2014 "),dG=n(O8e,"A",{href:!0});var kit=s(dG);V$o=r(kit,"FNetForSequenceClassification"),kit.forEach(t),X$o=r(O8e," (FNet model)"),O8e.forEach(t),z$o=i(j),eb=n(j,"LI",{});var V8e=s(eb);Bfe=n(V8e,"STRONG",{});var Sit=s(Bfe);W$o=r(Sit,"funnel"),Sit.forEach(t),Q$o=r(V8e," \u2014 "),cG=n(V8e,"A",{href:!0});var Rit=s(cG);H$o=r(Rit,"FunnelForSequenceClassification"),Rit.forEach(t),U$o=r(V8e," (Funnel Transformer model)"),V8e.forEach(t),J$o=i(j),ob=n(j,"LI",{});var X8e=s(ob);Pfe=n(X8e,"STRONG",{});var Bit=s(Pfe);Y$o=r(Bit,"gpt2"),Bit.forEach(t),K$o=r(X8e," \u2014 "),fG=n(X8e,"A",{href:!0});var Pit=s(fG);Z$o=r(Pit,"GPT2ForSequenceClassification"),Pit.forEach(t),eko=r(X8e," (OpenAI GPT-2 model)"),X8e.forEach(t),oko=i(j),rb=n(j,"LI",{});var z8e=s(rb);Ife=n(z8e,"STRONG",{});var Iit=s(Ife);rko=r(Iit,"gpt_neo"),Iit.forEach(t),tko=r(z8e," \u2014 "),mG=n(z8e,"A",{href:!0});var qit=s(mG);ako=r(qit,"GPTNeoForSequenceClassification"),qit.forEach(t),nko=r(z8e," (GPT Neo model)"),z8e.forEach(t),sko=i(j),tb=n(j,"LI",{});var W8e=s(tb);qfe=n(W8e,"STRONG",{});var Nit=s(qfe);lko=r(Nit,"gptj"),Nit.forEach(t),iko=r(W8e," \u2014 "),gG=n(W8e,"A",{href:!0});var jit=s(gG);dko=r(jit,"GPTJForSequenceClassification"),jit.forEach(t),cko=r(W8e," (GPT-J model)"),W8e.forEach(t),fko=i(j),ab=n(j,"LI",{});var Q8e=s(ab);Nfe=n(Q8e,"STRONG",{});var Dit=s(Nfe);mko=r(Dit,"ibert"),Dit.forEach(t),gko=r(Q8e," \u2014 "),hG=n(Q8e,"A",{href:!0});var Git=s(hG);hko=r(Git,"IBertForSequenceClassification"),Git.forEach(t),pko=r(Q8e," (I-BERT model)"),Q8e.forEach(t),_ko=i(j),nb=n(j,"LI",{});var H8e=s(nb);jfe=n(H8e,"STRONG",{});var Oit=s(jfe);uko=r(Oit,"layoutlm"),Oit.forEach(t),bko=r(H8e," \u2014 "),pG=n(H8e,"A",{href:!0});var Vit=s(pG);vko=r(Vit,"LayoutLMForSequenceClassification"),Vit.forEach(t),Fko=r(H8e," (LayoutLM model)"),H8e.forEach(t),Tko=i(j),sb=n(j,"LI",{});var U8e=s(sb);Dfe=n(U8e,"STRONG",{});var Xit=s(Dfe);Mko=r(Xit,"layoutlmv2"),Xit.forEach(t),Eko=r(U8e," \u2014 "),_G=n(U8e,"A",{href:!0});var zit=s(_G);Cko=r(zit,"LayoutLMv2ForSequenceClassification"),zit.forEach(t),wko=r(U8e," (LayoutLMv2 model)"),U8e.forEach(t),Ako=i(j),lb=n(j,"LI",{});var J8e=s(lb);Gfe=n(J8e,"STRONG",{});var Wit=s(Gfe);yko=r(Wit,"led"),Wit.forEach(t),Lko=r(J8e," \u2014 "),uG=n(J8e,"A",{href:!0});var Qit=s(uG);xko=r(Qit,"LEDForSequenceClassification"),Qit.forEach(t),$ko=r(J8e," (LED model)"),J8e.forEach(t),kko=i(j),ib=n(j,"LI",{});var Y8e=s(ib);Ofe=n(Y8e,"STRONG",{});var Hit=s(Ofe);Sko=r(Hit,"longformer"),Hit.forEach(t),Rko=r(Y8e," \u2014 "),bG=n(Y8e,"A",{href:!0});var Uit=s(bG);Bko=r(Uit,"LongformerForSequenceClassification"),Uit.forEach(t),Pko=r(Y8e," (Longformer model)"),Y8e.forEach(t),Iko=i(j),db=n(j,"LI",{});var K8e=s(db);Vfe=n(K8e,"STRONG",{});var Jit=s(Vfe);qko=r(Jit,"mbart"),Jit.forEach(t),Nko=r(K8e," \u2014 "),vG=n(K8e,"A",{href:!0});var Yit=s(vG);jko=r(Yit,"MBartForSequenceClassification"),Yit.forEach(t),Dko=r(K8e," (mBART model)"),K8e.forEach(t),Gko=i(j),cb=n(j,"LI",{});var Z8e=s(cb);Xfe=n(Z8e,"STRONG",{});var Kit=s(Xfe);Oko=r(Kit,"megatron-bert"),Kit.forEach(t),Vko=r(Z8e," \u2014 "),FG=n(Z8e,"A",{href:!0});var Zit=s(FG);Xko=r(Zit,"MegatronBertForSequenceClassification"),Zit.forEach(t),zko=r(Z8e," (MegatronBert model)"),Z8e.forEach(t),Wko=i(j),fb=n(j,"LI",{});var e9e=s(fb);zfe=n(e9e,"STRONG",{});var edt=s(zfe);Qko=r(edt,"mobilebert"),edt.forEach(t),Hko=r(e9e," \u2014 "),TG=n(e9e,"A",{href:!0});var odt=s(TG);Uko=r(odt,"MobileBertForSequenceClassification"),odt.forEach(t),Jko=r(e9e," (MobileBERT model)"),e9e.forEach(t),Yko=i(j),mb=n(j,"LI",{});var o9e=s(mb);Wfe=n(o9e,"STRONG",{});var rdt=s(Wfe);Kko=r(rdt,"mpnet"),rdt.forEach(t),Zko=r(o9e," \u2014 "),MG=n(o9e,"A",{href:!0});var tdt=s(MG);eSo=r(tdt,"MPNetForSequenceClassification"),tdt.forEach(t),oSo=r(o9e," (MPNet model)"),o9e.forEach(t),rSo=i(j),gb=n(j,"LI",{});var r9e=s(gb);Qfe=n(r9e,"STRONG",{});var adt=s(Qfe);tSo=r(adt,"nystromformer"),adt.forEach(t),aSo=r(r9e," \u2014 "),EG=n(r9e,"A",{href:!0});var ndt=s(EG);nSo=r(ndt,"NystromformerForSequenceClassification"),ndt.forEach(t),sSo=r(r9e," (Nystromformer model)"),r9e.forEach(t),lSo=i(j),hb=n(j,"LI",{});var t9e=s(hb);Hfe=n(t9e,"STRONG",{});var sdt=s(Hfe);iSo=r(sdt,"openai-gpt"),sdt.forEach(t),dSo=r(t9e," \u2014 "),CG=n(t9e,"A",{href:!0});var ldt=s(CG);cSo=r(ldt,"OpenAIGPTForSequenceClassification"),ldt.forEach(t),fSo=r(t9e," (OpenAI GPT model)"),t9e.forEach(t),mSo=i(j),pb=n(j,"LI",{});var a9e=s(pb);Ufe=n(a9e,"STRONG",{});var idt=s(Ufe);gSo=r(idt,"perceiver"),idt.forEach(t),hSo=r(a9e," \u2014 "),wG=n(a9e,"A",{href:!0});var ddt=s(wG);pSo=r(ddt,"PerceiverForSequenceClassification"),ddt.forEach(t),_So=r(a9e," (Perceiver model)"),a9e.forEach(t),uSo=i(j),_b=n(j,"LI",{});var n9e=s(_b);Jfe=n(n9e,"STRONG",{});var cdt=s(Jfe);bSo=r(cdt,"plbart"),cdt.forEach(t),vSo=r(n9e," \u2014 "),AG=n(n9e,"A",{href:!0});var fdt=s(AG);FSo=r(fdt,"PLBartForSequenceClassification"),fdt.forEach(t),TSo=r(n9e," (PLBart model)"),n9e.forEach(t),MSo=i(j),ub=n(j,"LI",{});var s9e=s(ub);Yfe=n(s9e,"STRONG",{});var mdt=s(Yfe);ESo=r(mdt,"qdqbert"),mdt.forEach(t),CSo=r(s9e," \u2014 "),yG=n(s9e,"A",{href:!0});var gdt=s(yG);wSo=r(gdt,"QDQBertForSequenceClassification"),gdt.forEach(t),ASo=r(s9e," (QDQBert model)"),s9e.forEach(t),ySo=i(j),bb=n(j,"LI",{});var l9e=s(bb);Kfe=n(l9e,"STRONG",{});var hdt=s(Kfe);LSo=r(hdt,"reformer"),hdt.forEach(t),xSo=r(l9e," \u2014 "),LG=n(l9e,"A",{href:!0});var pdt=s(LG);$So=r(pdt,"ReformerForSequenceClassification"),pdt.forEach(t),kSo=r(l9e," (Reformer model)"),l9e.forEach(t),SSo=i(j),vb=n(j,"LI",{});var i9e=s(vb);Zfe=n(i9e,"STRONG",{});var _dt=s(Zfe);RSo=r(_dt,"rembert"),_dt.forEach(t),BSo=r(i9e," \u2014 "),xG=n(i9e,"A",{href:!0});var udt=s(xG);PSo=r(udt,"RemBertForSequenceClassification"),udt.forEach(t),ISo=r(i9e," (RemBERT model)"),i9e.forEach(t),qSo=i(j),Fb=n(j,"LI",{});var d9e=s(Fb);eme=n(d9e,"STRONG",{});var bdt=s(eme);NSo=r(bdt,"roberta"),bdt.forEach(t),jSo=r(d9e," \u2014 "),$G=n(d9e,"A",{href:!0});var vdt=s($G);DSo=r(vdt,"RobertaForSequenceClassification"),vdt.forEach(t),GSo=r(d9e," (RoBERTa model)"),d9e.forEach(t),OSo=i(j),Tb=n(j,"LI",{});var c9e=s(Tb);ome=n(c9e,"STRONG",{});var Fdt=s(ome);VSo=r(Fdt,"roformer"),Fdt.forEach(t),XSo=r(c9e," \u2014 "),kG=n(c9e,"A",{href:!0});var Tdt=s(kG);zSo=r(Tdt,"RoFormerForSequenceClassification"),Tdt.forEach(t),WSo=r(c9e," (RoFormer model)"),c9e.forEach(t),QSo=i(j),Mb=n(j,"LI",{});var f9e=s(Mb);rme=n(f9e,"STRONG",{});var Mdt=s(rme);HSo=r(Mdt,"squeezebert"),Mdt.forEach(t),USo=r(f9e," \u2014 "),SG=n(f9e,"A",{href:!0});var Edt=s(SG);JSo=r(Edt,"SqueezeBertForSequenceClassification"),Edt.forEach(t),YSo=r(f9e," (SqueezeBERT model)"),f9e.forEach(t),KSo=i(j),Eb=n(j,"LI",{});var m9e=s(Eb);tme=n(m9e,"STRONG",{});var Cdt=s(tme);ZSo=r(Cdt,"tapas"),Cdt.forEach(t),eRo=r(m9e," \u2014 "),RG=n(m9e,"A",{href:!0});var wdt=s(RG);oRo=r(wdt,"TapasForSequenceClassification"),wdt.forEach(t),rRo=r(m9e," (TAPAS model)"),m9e.forEach(t),tRo=i(j),Cb=n(j,"LI",{});var g9e=s(Cb);ame=n(g9e,"STRONG",{});var Adt=s(ame);aRo=r(Adt,"transfo-xl"),Adt.forEach(t),nRo=r(g9e," \u2014 "),BG=n(g9e,"A",{href:!0});var ydt=s(BG);sRo=r(ydt,"TransfoXLForSequenceClassification"),ydt.forEach(t),lRo=r(g9e," (Transformer-XL model)"),g9e.forEach(t),iRo=i(j),wb=n(j,"LI",{});var h9e=s(wb);nme=n(h9e,"STRONG",{});var Ldt=s(nme);dRo=r(Ldt,"xlm"),Ldt.forEach(t),cRo=r(h9e," \u2014 "),PG=n(h9e,"A",{href:!0});var xdt=s(PG);fRo=r(xdt,"XLMForSequenceClassification"),xdt.forEach(t),mRo=r(h9e," (XLM model)"),h9e.forEach(t),gRo=i(j),Ab=n(j,"LI",{});var p9e=s(Ab);sme=n(p9e,"STRONG",{});var $dt=s(sme);hRo=r($dt,"xlm-roberta"),$dt.forEach(t),pRo=r(p9e," \u2014 "),IG=n(p9e,"A",{href:!0});var kdt=s(IG);_Ro=r(kdt,"XLMRobertaForSequenceClassification"),kdt.forEach(t),uRo=r(p9e," (XLM-RoBERTa model)"),p9e.forEach(t),bRo=i(j),yb=n(j,"LI",{});var _9e=s(yb);lme=n(_9e,"STRONG",{});var Sdt=s(lme);vRo=r(Sdt,"xlm-roberta-xl"),Sdt.forEach(t),FRo=r(_9e," \u2014 "),qG=n(_9e,"A",{href:!0});var Rdt=s(qG);TRo=r(Rdt,"XLMRobertaXLForSequenceClassification"),Rdt.forEach(t),MRo=r(_9e," (XLM-RoBERTa-XL model)"),_9e.forEach(t),ERo=i(j),Lb=n(j,"LI",{});var u9e=s(Lb);ime=n(u9e,"STRONG",{});var Bdt=s(ime);CRo=r(Bdt,"xlnet"),Bdt.forEach(t),wRo=r(u9e," \u2014 "),NG=n(u9e,"A",{href:!0});var Pdt=s(NG);ARo=r(Pdt,"XLNetForSequenceClassification"),Pdt.forEach(t),yRo=r(u9e," (XLNet model)"),u9e.forEach(t),LRo=i(j),xb=n(j,"LI",{});var b9e=s(xb);dme=n(b9e,"STRONG",{});var Idt=s(dme);xRo=r(Idt,"yoso"),Idt.forEach(t),$Ro=r(b9e," \u2014 "),jG=n(b9e,"A",{href:!0});var qdt=s(jG);kRo=r(qdt,"YosoForSequenceClassification"),qdt.forEach(t),SRo=r(b9e," (YOSO model)"),b9e.forEach(t),j.forEach(t),RRo=i(sa),$b=n(sa,"P",{});var v9e=s($b);BRo=r(v9e,"The model is set in evaluation mode by default using "),cme=n(v9e,"CODE",{});var Ndt=s(cme);PRo=r(Ndt,"model.eval()"),Ndt.forEach(t),IRo=r(v9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=n(v9e,"CODE",{});var jdt=s(fme);qRo=r(jdt,"model.train()"),jdt.forEach(t),v9e.forEach(t),NRo=i(sa),T(kb.$$.fragment,sa),sa.forEach(t),zs.forEach(t),Xqe=i(f),Oi=n(f,"H2",{class:!0});var Hje=s(Oi);Sb=n(Hje,"A",{id:!0,class:!0,href:!0});var Ddt=s(Sb);mme=n(Ddt,"SPAN",{});var Gdt=s(mme);T(Ty.$$.fragment,Gdt),Gdt.forEach(t),Ddt.forEach(t),jRo=i(Hje),gme=n(Hje,"SPAN",{});var Odt=s(gme);DRo=r(Odt,"AutoModelForMultipleChoice"),Odt.forEach(t),Hje.forEach(t),zqe=i(f),Bo=n(f,"DIV",{class:!0});var Ws=s(Bo);T(My.$$.fragment,Ws),GRo=i(Ws),Vi=n(Ws,"P",{});var dZ=s(Vi);ORo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DG=n(dZ,"A",{href:!0});var Vdt=s(DG);VRo=r(Vdt,"from_pretrained()"),Vdt.forEach(t),XRo=r(dZ," class method or the "),GG=n(dZ,"A",{href:!0});var Xdt=s(GG);zRo=r(Xdt,"from_config()"),Xdt.forEach(t),WRo=r(dZ,` class
method.`),dZ.forEach(t),QRo=i(Ws),Ey=n(Ws,"P",{});var Uje=s(Ey);HRo=r(Uje,"This class cannot be instantiated directly using "),hme=n(Uje,"CODE",{});var zdt=s(hme);URo=r(zdt,"__init__()"),zdt.forEach(t),JRo=r(Uje," (throws an error)."),Uje.forEach(t),YRo=i(Ws),dt=n(Ws,"DIV",{class:!0});var Pw=s(dt);T(Cy.$$.fragment,Pw),KRo=i(Pw),pme=n(Pw,"P",{});var Wdt=s(pme);ZRo=r(Wdt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Wdt.forEach(t),eBo=i(Pw),Xi=n(Pw,"P",{});var cZ=s(Xi);oBo=r(cZ,`Note:
Loading a model from its configuration file does `),_me=n(cZ,"STRONG",{});var Qdt=s(_me);rBo=r(Qdt,"not"),Qdt.forEach(t),tBo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OG=n(cZ,"A",{href:!0});var Hdt=s(OG);aBo=r(Hdt,"from_pretrained()"),Hdt.forEach(t),nBo=r(cZ," to load the model weights."),cZ.forEach(t),sBo=i(Pw),T(Rb.$$.fragment,Pw),Pw.forEach(t),lBo=i(Ws),ro=n(Ws,"DIV",{class:!0});var la=s(ro);T(wy.$$.fragment,la),iBo=i(la),ume=n(la,"P",{});var Udt=s(ume);dBo=r(Udt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Udt.forEach(t),cBo=i(la),Ba=n(la,"P",{});var Iw=s(Ba);fBo=r(Iw,"The model class to instantiate is selected based on the "),bme=n(Iw,"CODE",{});var Jdt=s(bme);mBo=r(Jdt,"model_type"),Jdt.forEach(t),gBo=r(Iw,` property of the config object (either
passed as an argument or loaded from `),vme=n(Iw,"CODE",{});var Ydt=s(vme);hBo=r(Ydt,"pretrained_model_name_or_path"),Ydt.forEach(t),pBo=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fme=n(Iw,"CODE",{});var Kdt=s(Fme);_Bo=r(Kdt,"pretrained_model_name_or_path"),Kdt.forEach(t),uBo=r(Iw,":"),Iw.forEach(t),bBo=i(la),Y=n(la,"UL",{});var K=s(Y);Bb=n(K,"LI",{});var F9e=s(Bb);Tme=n(F9e,"STRONG",{});var Zdt=s(Tme);vBo=r(Zdt,"albert"),Zdt.forEach(t),FBo=r(F9e," \u2014 "),VG=n(F9e,"A",{href:!0});var ect=s(VG);TBo=r(ect,"AlbertForMultipleChoice"),ect.forEach(t),MBo=r(F9e," (ALBERT model)"),F9e.forEach(t),EBo=i(K),Pb=n(K,"LI",{});var T9e=s(Pb);Mme=n(T9e,"STRONG",{});var oct=s(Mme);CBo=r(oct,"bert"),oct.forEach(t),wBo=r(T9e," \u2014 "),XG=n(T9e,"A",{href:!0});var rct=s(XG);ABo=r(rct,"BertForMultipleChoice"),rct.forEach(t),yBo=r(T9e," (BERT model)"),T9e.forEach(t),LBo=i(K),Ib=n(K,"LI",{});var M9e=s(Ib);Eme=n(M9e,"STRONG",{});var tct=s(Eme);xBo=r(tct,"big_bird"),tct.forEach(t),$Bo=r(M9e," \u2014 "),zG=n(M9e,"A",{href:!0});var act=s(zG);kBo=r(act,"BigBirdForMultipleChoice"),act.forEach(t),SBo=r(M9e," (BigBird model)"),M9e.forEach(t),RBo=i(K),qb=n(K,"LI",{});var E9e=s(qb);Cme=n(E9e,"STRONG",{});var nct=s(Cme);BBo=r(nct,"camembert"),nct.forEach(t),PBo=r(E9e," \u2014 "),WG=n(E9e,"A",{href:!0});var sct=s(WG);IBo=r(sct,"CamembertForMultipleChoice"),sct.forEach(t),qBo=r(E9e," (CamemBERT model)"),E9e.forEach(t),NBo=i(K),Nb=n(K,"LI",{});var C9e=s(Nb);wme=n(C9e,"STRONG",{});var lct=s(wme);jBo=r(lct,"canine"),lct.forEach(t),DBo=r(C9e," \u2014 "),QG=n(C9e,"A",{href:!0});var ict=s(QG);GBo=r(ict,"CanineForMultipleChoice"),ict.forEach(t),OBo=r(C9e," (Canine model)"),C9e.forEach(t),VBo=i(K),jb=n(K,"LI",{});var w9e=s(jb);Ame=n(w9e,"STRONG",{});var dct=s(Ame);XBo=r(dct,"convbert"),dct.forEach(t),zBo=r(w9e," \u2014 "),HG=n(w9e,"A",{href:!0});var cct=s(HG);WBo=r(cct,"ConvBertForMultipleChoice"),cct.forEach(t),QBo=r(w9e," (ConvBERT model)"),w9e.forEach(t),HBo=i(K),Db=n(K,"LI",{});var A9e=s(Db);yme=n(A9e,"STRONG",{});var fct=s(yme);UBo=r(fct,"data2vec-text"),fct.forEach(t),JBo=r(A9e," \u2014 "),UG=n(A9e,"A",{href:!0});var mct=s(UG);YBo=r(mct,"Data2VecTextForMultipleChoice"),mct.forEach(t),KBo=r(A9e," (Data2VecText model)"),A9e.forEach(t),ZBo=i(K),Gb=n(K,"LI",{});var y9e=s(Gb);Lme=n(y9e,"STRONG",{});var gct=s(Lme);ePo=r(gct,"deberta-v2"),gct.forEach(t),oPo=r(y9e," \u2014 "),JG=n(y9e,"A",{href:!0});var hct=s(JG);rPo=r(hct,"DebertaV2ForMultipleChoice"),hct.forEach(t),tPo=r(y9e," (DeBERTa-v2 model)"),y9e.forEach(t),aPo=i(K),Ob=n(K,"LI",{});var L9e=s(Ob);xme=n(L9e,"STRONG",{});var pct=s(xme);nPo=r(pct,"distilbert"),pct.forEach(t),sPo=r(L9e," \u2014 "),YG=n(L9e,"A",{href:!0});var _ct=s(YG);lPo=r(_ct,"DistilBertForMultipleChoice"),_ct.forEach(t),iPo=r(L9e," (DistilBERT model)"),L9e.forEach(t),dPo=i(K),Vb=n(K,"LI",{});var x9e=s(Vb);$me=n(x9e,"STRONG",{});var uct=s($me);cPo=r(uct,"electra"),uct.forEach(t),fPo=r(x9e," \u2014 "),KG=n(x9e,"A",{href:!0});var bct=s(KG);mPo=r(bct,"ElectraForMultipleChoice"),bct.forEach(t),gPo=r(x9e," (ELECTRA model)"),x9e.forEach(t),hPo=i(K),Xb=n(K,"LI",{});var $9e=s(Xb);kme=n($9e,"STRONG",{});var vct=s(kme);pPo=r(vct,"flaubert"),vct.forEach(t),_Po=r($9e," \u2014 "),ZG=n($9e,"A",{href:!0});var Fct=s(ZG);uPo=r(Fct,"FlaubertForMultipleChoice"),Fct.forEach(t),bPo=r($9e," (FlauBERT model)"),$9e.forEach(t),vPo=i(K),zb=n(K,"LI",{});var k9e=s(zb);Sme=n(k9e,"STRONG",{});var Tct=s(Sme);FPo=r(Tct,"fnet"),Tct.forEach(t),TPo=r(k9e," \u2014 "),eO=n(k9e,"A",{href:!0});var Mct=s(eO);MPo=r(Mct,"FNetForMultipleChoice"),Mct.forEach(t),EPo=r(k9e," (FNet model)"),k9e.forEach(t),CPo=i(K),Wb=n(K,"LI",{});var S9e=s(Wb);Rme=n(S9e,"STRONG",{});var Ect=s(Rme);wPo=r(Ect,"funnel"),Ect.forEach(t),APo=r(S9e," \u2014 "),oO=n(S9e,"A",{href:!0});var Cct=s(oO);yPo=r(Cct,"FunnelForMultipleChoice"),Cct.forEach(t),LPo=r(S9e," (Funnel Transformer model)"),S9e.forEach(t),xPo=i(K),Qb=n(K,"LI",{});var R9e=s(Qb);Bme=n(R9e,"STRONG",{});var wct=s(Bme);$Po=r(wct,"ibert"),wct.forEach(t),kPo=r(R9e," \u2014 "),rO=n(R9e,"A",{href:!0});var Act=s(rO);SPo=r(Act,"IBertForMultipleChoice"),Act.forEach(t),RPo=r(R9e," (I-BERT model)"),R9e.forEach(t),BPo=i(K),Hb=n(K,"LI",{});var B9e=s(Hb);Pme=n(B9e,"STRONG",{});var yct=s(Pme);PPo=r(yct,"longformer"),yct.forEach(t),IPo=r(B9e," \u2014 "),tO=n(B9e,"A",{href:!0});var Lct=s(tO);qPo=r(Lct,"LongformerForMultipleChoice"),Lct.forEach(t),NPo=r(B9e," (Longformer model)"),B9e.forEach(t),jPo=i(K),Ub=n(K,"LI",{});var P9e=s(Ub);Ime=n(P9e,"STRONG",{});var xct=s(Ime);DPo=r(xct,"megatron-bert"),xct.forEach(t),GPo=r(P9e," \u2014 "),aO=n(P9e,"A",{href:!0});var $ct=s(aO);OPo=r($ct,"MegatronBertForMultipleChoice"),$ct.forEach(t),VPo=r(P9e," (MegatronBert model)"),P9e.forEach(t),XPo=i(K),Jb=n(K,"LI",{});var I9e=s(Jb);qme=n(I9e,"STRONG",{});var kct=s(qme);zPo=r(kct,"mobilebert"),kct.forEach(t),WPo=r(I9e," \u2014 "),nO=n(I9e,"A",{href:!0});var Sct=s(nO);QPo=r(Sct,"MobileBertForMultipleChoice"),Sct.forEach(t),HPo=r(I9e," (MobileBERT model)"),I9e.forEach(t),UPo=i(K),Yb=n(K,"LI",{});var q9e=s(Yb);Nme=n(q9e,"STRONG",{});var Rct=s(Nme);JPo=r(Rct,"mpnet"),Rct.forEach(t),YPo=r(q9e," \u2014 "),sO=n(q9e,"A",{href:!0});var Bct=s(sO);KPo=r(Bct,"MPNetForMultipleChoice"),Bct.forEach(t),ZPo=r(q9e," (MPNet model)"),q9e.forEach(t),eIo=i(K),Kb=n(K,"LI",{});var N9e=s(Kb);jme=n(N9e,"STRONG",{});var Pct=s(jme);oIo=r(Pct,"nystromformer"),Pct.forEach(t),rIo=r(N9e," \u2014 "),lO=n(N9e,"A",{href:!0});var Ict=s(lO);tIo=r(Ict,"NystromformerForMultipleChoice"),Ict.forEach(t),aIo=r(N9e," (Nystromformer model)"),N9e.forEach(t),nIo=i(K),Zb=n(K,"LI",{});var j9e=s(Zb);Dme=n(j9e,"STRONG",{});var qct=s(Dme);sIo=r(qct,"qdqbert"),qct.forEach(t),lIo=r(j9e," \u2014 "),iO=n(j9e,"A",{href:!0});var Nct=s(iO);iIo=r(Nct,"QDQBertForMultipleChoice"),Nct.forEach(t),dIo=r(j9e," (QDQBert model)"),j9e.forEach(t),cIo=i(K),ev=n(K,"LI",{});var D9e=s(ev);Gme=n(D9e,"STRONG",{});var jct=s(Gme);fIo=r(jct,"rembert"),jct.forEach(t),mIo=r(D9e," \u2014 "),dO=n(D9e,"A",{href:!0});var Dct=s(dO);gIo=r(Dct,"RemBertForMultipleChoice"),Dct.forEach(t),hIo=r(D9e," (RemBERT model)"),D9e.forEach(t),pIo=i(K),ov=n(K,"LI",{});var G9e=s(ov);Ome=n(G9e,"STRONG",{});var Gct=s(Ome);_Io=r(Gct,"roberta"),Gct.forEach(t),uIo=r(G9e," \u2014 "),cO=n(G9e,"A",{href:!0});var Oct=s(cO);bIo=r(Oct,"RobertaForMultipleChoice"),Oct.forEach(t),vIo=r(G9e," (RoBERTa model)"),G9e.forEach(t),FIo=i(K),rv=n(K,"LI",{});var O9e=s(rv);Vme=n(O9e,"STRONG",{});var Vct=s(Vme);TIo=r(Vct,"roformer"),Vct.forEach(t),MIo=r(O9e," \u2014 "),fO=n(O9e,"A",{href:!0});var Xct=s(fO);EIo=r(Xct,"RoFormerForMultipleChoice"),Xct.forEach(t),CIo=r(O9e," (RoFormer model)"),O9e.forEach(t),wIo=i(K),tv=n(K,"LI",{});var V9e=s(tv);Xme=n(V9e,"STRONG",{});var zct=s(Xme);AIo=r(zct,"squeezebert"),zct.forEach(t),yIo=r(V9e," \u2014 "),mO=n(V9e,"A",{href:!0});var Wct=s(mO);LIo=r(Wct,"SqueezeBertForMultipleChoice"),Wct.forEach(t),xIo=r(V9e," (SqueezeBERT model)"),V9e.forEach(t),$Io=i(K),av=n(K,"LI",{});var X9e=s(av);zme=n(X9e,"STRONG",{});var Qct=s(zme);kIo=r(Qct,"xlm"),Qct.forEach(t),SIo=r(X9e," \u2014 "),gO=n(X9e,"A",{href:!0});var Hct=s(gO);RIo=r(Hct,"XLMForMultipleChoice"),Hct.forEach(t),BIo=r(X9e," (XLM model)"),X9e.forEach(t),PIo=i(K),nv=n(K,"LI",{});var z9e=s(nv);Wme=n(z9e,"STRONG",{});var Uct=s(Wme);IIo=r(Uct,"xlm-roberta"),Uct.forEach(t),qIo=r(z9e," \u2014 "),hO=n(z9e,"A",{href:!0});var Jct=s(hO);NIo=r(Jct,"XLMRobertaForMultipleChoice"),Jct.forEach(t),jIo=r(z9e," (XLM-RoBERTa model)"),z9e.forEach(t),DIo=i(K),sv=n(K,"LI",{});var W9e=s(sv);Qme=n(W9e,"STRONG",{});var Yct=s(Qme);GIo=r(Yct,"xlm-roberta-xl"),Yct.forEach(t),OIo=r(W9e," \u2014 "),pO=n(W9e,"A",{href:!0});var Kct=s(pO);VIo=r(Kct,"XLMRobertaXLForMultipleChoice"),Kct.forEach(t),XIo=r(W9e," (XLM-RoBERTa-XL model)"),W9e.forEach(t),zIo=i(K),lv=n(K,"LI",{});var Q9e=s(lv);Hme=n(Q9e,"STRONG",{});var Zct=s(Hme);WIo=r(Zct,"xlnet"),Zct.forEach(t),QIo=r(Q9e," \u2014 "),_O=n(Q9e,"A",{href:!0});var eft=s(_O);HIo=r(eft,"XLNetForMultipleChoice"),eft.forEach(t),UIo=r(Q9e," (XLNet model)"),Q9e.forEach(t),JIo=i(K),iv=n(K,"LI",{});var H9e=s(iv);Ume=n(H9e,"STRONG",{});var oft=s(Ume);YIo=r(oft,"yoso"),oft.forEach(t),KIo=r(H9e," \u2014 "),uO=n(H9e,"A",{href:!0});var rft=s(uO);ZIo=r(rft,"YosoForMultipleChoice"),rft.forEach(t),eqo=r(H9e," (YOSO model)"),H9e.forEach(t),K.forEach(t),oqo=i(la),dv=n(la,"P",{});var U9e=s(dv);rqo=r(U9e,"The model is set in evaluation mode by default using "),Jme=n(U9e,"CODE",{});var tft=s(Jme);tqo=r(tft,"model.eval()"),tft.forEach(t),aqo=r(U9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yme=n(U9e,"CODE",{});var aft=s(Yme);nqo=r(aft,"model.train()"),aft.forEach(t),U9e.forEach(t),sqo=i(la),T(cv.$$.fragment,la),la.forEach(t),Ws.forEach(t),Wqe=i(f),zi=n(f,"H2",{class:!0});var Jje=s(zi);fv=n(Jje,"A",{id:!0,class:!0,href:!0});var nft=s(fv);Kme=n(nft,"SPAN",{});var sft=s(Kme);T(Ay.$$.fragment,sft),sft.forEach(t),nft.forEach(t),lqo=i(Jje),Zme=n(Jje,"SPAN",{});var lft=s(Zme);iqo=r(lft,"AutoModelForNextSentencePrediction"),lft.forEach(t),Jje.forEach(t),Qqe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(yy.$$.fragment,Qs),dqo=i(Qs),Wi=n(Qs,"P",{});var fZ=s(Wi);cqo=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bO=n(fZ,"A",{href:!0});var ift=s(bO);fqo=r(ift,"from_pretrained()"),ift.forEach(t),mqo=r(fZ," class method or the "),vO=n(fZ,"A",{href:!0});var dft=s(vO);gqo=r(dft,"from_config()"),dft.forEach(t),hqo=r(fZ,` class
method.`),fZ.forEach(t),pqo=i(Qs),Ly=n(Qs,"P",{});var Yje=s(Ly);_qo=r(Yje,"This class cannot be instantiated directly using "),ege=n(Yje,"CODE",{});var cft=s(ege);uqo=r(cft,"__init__()"),cft.forEach(t),bqo=r(Yje," (throws an error)."),Yje.forEach(t),vqo=i(Qs),ct=n(Qs,"DIV",{class:!0});var qw=s(ct);T(xy.$$.fragment,qw),Fqo=i(qw),oge=n(qw,"P",{});var fft=s(oge);Tqo=r(fft,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),fft.forEach(t),Mqo=i(qw),Qi=n(qw,"P",{});var mZ=s(Qi);Eqo=r(mZ,`Note:
Loading a model from its configuration file does `),rge=n(mZ,"STRONG",{});var mft=s(rge);Cqo=r(mft,"not"),mft.forEach(t),wqo=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=n(mZ,"A",{href:!0});var gft=s(FO);Aqo=r(gft,"from_pretrained()"),gft.forEach(t),yqo=r(mZ," to load the model weights."),mZ.forEach(t),Lqo=i(qw),T(mv.$$.fragment,qw),qw.forEach(t),xqo=i(Qs),to=n(Qs,"DIV",{class:!0});var ia=s(to);T($y.$$.fragment,ia),$qo=i(ia),tge=n(ia,"P",{});var hft=s(tge);kqo=r(hft,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hft.forEach(t),Sqo=i(ia),Pa=n(ia,"P",{});var Nw=s(Pa);Rqo=r(Nw,"The model class to instantiate is selected based on the "),age=n(Nw,"CODE",{});var pft=s(age);Bqo=r(pft,"model_type"),pft.forEach(t),Pqo=r(Nw,` property of the config object (either
passed as an argument or loaded from `),nge=n(Nw,"CODE",{});var _ft=s(nge);Iqo=r(_ft,"pretrained_model_name_or_path"),_ft.forEach(t),qqo=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sge=n(Nw,"CODE",{});var uft=s(sge);Nqo=r(uft,"pretrained_model_name_or_path"),uft.forEach(t),jqo=r(Nw,":"),Nw.forEach(t),Dqo=i(ia),Yr=n(ia,"UL",{});var Hs=s(Yr);gv=n(Hs,"LI",{});var J9e=s(gv);lge=n(J9e,"STRONG",{});var bft=s(lge);Gqo=r(bft,"bert"),bft.forEach(t),Oqo=r(J9e," \u2014 "),TO=n(J9e,"A",{href:!0});var vft=s(TO);Vqo=r(vft,"BertForNextSentencePrediction"),vft.forEach(t),Xqo=r(J9e," (BERT model)"),J9e.forEach(t),zqo=i(Hs),hv=n(Hs,"LI",{});var Y9e=s(hv);ige=n(Y9e,"STRONG",{});var Fft=s(ige);Wqo=r(Fft,"fnet"),Fft.forEach(t),Qqo=r(Y9e," \u2014 "),MO=n(Y9e,"A",{href:!0});var Tft=s(MO);Hqo=r(Tft,"FNetForNextSentencePrediction"),Tft.forEach(t),Uqo=r(Y9e," (FNet model)"),Y9e.forEach(t),Jqo=i(Hs),pv=n(Hs,"LI",{});var K9e=s(pv);dge=n(K9e,"STRONG",{});var Mft=s(dge);Yqo=r(Mft,"megatron-bert"),Mft.forEach(t),Kqo=r(K9e," \u2014 "),EO=n(K9e,"A",{href:!0});var Eft=s(EO);Zqo=r(Eft,"MegatronBertForNextSentencePrediction"),Eft.forEach(t),eNo=r(K9e," (MegatronBert model)"),K9e.forEach(t),oNo=i(Hs),_v=n(Hs,"LI",{});var Z9e=s(_v);cge=n(Z9e,"STRONG",{});var Cft=s(cge);rNo=r(Cft,"mobilebert"),Cft.forEach(t),tNo=r(Z9e," \u2014 "),CO=n(Z9e,"A",{href:!0});var wft=s(CO);aNo=r(wft,"MobileBertForNextSentencePrediction"),wft.forEach(t),nNo=r(Z9e," (MobileBERT model)"),Z9e.forEach(t),sNo=i(Hs),uv=n(Hs,"LI",{});var exe=s(uv);fge=n(exe,"STRONG",{});var Aft=s(fge);lNo=r(Aft,"qdqbert"),Aft.forEach(t),iNo=r(exe," \u2014 "),wO=n(exe,"A",{href:!0});var yft=s(wO);dNo=r(yft,"QDQBertForNextSentencePrediction"),yft.forEach(t),cNo=r(exe," (QDQBert model)"),exe.forEach(t),Hs.forEach(t),fNo=i(ia),bv=n(ia,"P",{});var oxe=s(bv);mNo=r(oxe,"The model is set in evaluation mode by default using "),mge=n(oxe,"CODE",{});var Lft=s(mge);gNo=r(Lft,"model.eval()"),Lft.forEach(t),hNo=r(oxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gge=n(oxe,"CODE",{});var xft=s(gge);pNo=r(xft,"model.train()"),xft.forEach(t),oxe.forEach(t),_No=i(ia),T(vv.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),Hqe=i(f),Hi=n(f,"H2",{class:!0});var Kje=s(Hi);Fv=n(Kje,"A",{id:!0,class:!0,href:!0});var $ft=s(Fv);hge=n($ft,"SPAN",{});var kft=s(hge);T(ky.$$.fragment,kft),kft.forEach(t),$ft.forEach(t),uNo=i(Kje),pge=n(Kje,"SPAN",{});var Sft=s(pge);bNo=r(Sft,"AutoModelForTokenClassification"),Sft.forEach(t),Kje.forEach(t),Uqe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(Sy.$$.fragment,Us),vNo=i(Us),Ui=n(Us,"P",{});var gZ=s(Ui);FNo=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),AO=n(gZ,"A",{href:!0});var Rft=s(AO);TNo=r(Rft,"from_pretrained()"),Rft.forEach(t),MNo=r(gZ," class method or the "),yO=n(gZ,"A",{href:!0});var Bft=s(yO);ENo=r(Bft,"from_config()"),Bft.forEach(t),CNo=r(gZ,` class
method.`),gZ.forEach(t),wNo=i(Us),Ry=n(Us,"P",{});var Zje=s(Ry);ANo=r(Zje,"This class cannot be instantiated directly using "),_ge=n(Zje,"CODE",{});var Pft=s(_ge);yNo=r(Pft,"__init__()"),Pft.forEach(t),LNo=r(Zje," (throws an error)."),Zje.forEach(t),xNo=i(Us),ft=n(Us,"DIV",{class:!0});var jw=s(ft);T(By.$$.fragment,jw),$No=i(jw),uge=n(jw,"P",{});var Ift=s(uge);kNo=r(Ift,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ift.forEach(t),SNo=i(jw),Ji=n(jw,"P",{});var hZ=s(Ji);RNo=r(hZ,`Note:
Loading a model from its configuration file does `),bge=n(hZ,"STRONG",{});var qft=s(bge);BNo=r(qft,"not"),qft.forEach(t),PNo=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LO=n(hZ,"A",{href:!0});var Nft=s(LO);INo=r(Nft,"from_pretrained()"),Nft.forEach(t),qNo=r(hZ," to load the model weights."),hZ.forEach(t),NNo=i(jw),T(Tv.$$.fragment,jw),jw.forEach(t),jNo=i(Us),ao=n(Us,"DIV",{class:!0});var da=s(ao);T(Py.$$.fragment,da),DNo=i(da),vge=n(da,"P",{});var jft=s(vge);GNo=r(jft,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jft.forEach(t),ONo=i(da),Ia=n(da,"P",{});var Dw=s(Ia);VNo=r(Dw,"The model class to instantiate is selected based on the "),Fge=n(Dw,"CODE",{});var Dft=s(Fge);XNo=r(Dft,"model_type"),Dft.forEach(t),zNo=r(Dw,` property of the config object (either
passed as an argument or loaded from `),Tge=n(Dw,"CODE",{});var Gft=s(Tge);WNo=r(Gft,"pretrained_model_name_or_path"),Gft.forEach(t),QNo=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mge=n(Dw,"CODE",{});var Oft=s(Mge);HNo=r(Oft,"pretrained_model_name_or_path"),Oft.forEach(t),UNo=r(Dw,":"),Dw.forEach(t),JNo=i(da),U=n(da,"UL",{});var J=s(U);Mv=n(J,"LI",{});var rxe=s(Mv);Ege=n(rxe,"STRONG",{});var Vft=s(Ege);YNo=r(Vft,"albert"),Vft.forEach(t),KNo=r(rxe," \u2014 "),xO=n(rxe,"A",{href:!0});var Xft=s(xO);ZNo=r(Xft,"AlbertForTokenClassification"),Xft.forEach(t),ejo=r(rxe," (ALBERT model)"),rxe.forEach(t),ojo=i(J),Ev=n(J,"LI",{});var txe=s(Ev);Cge=n(txe,"STRONG",{});var zft=s(Cge);rjo=r(zft,"bert"),zft.forEach(t),tjo=r(txe," \u2014 "),$O=n(txe,"A",{href:!0});var Wft=s($O);ajo=r(Wft,"BertForTokenClassification"),Wft.forEach(t),njo=r(txe," (BERT model)"),txe.forEach(t),sjo=i(J),Cv=n(J,"LI",{});var axe=s(Cv);wge=n(axe,"STRONG",{});var Qft=s(wge);ljo=r(Qft,"big_bird"),Qft.forEach(t),ijo=r(axe," \u2014 "),kO=n(axe,"A",{href:!0});var Hft=s(kO);djo=r(Hft,"BigBirdForTokenClassification"),Hft.forEach(t),cjo=r(axe," (BigBird model)"),axe.forEach(t),fjo=i(J),wv=n(J,"LI",{});var nxe=s(wv);Age=n(nxe,"STRONG",{});var Uft=s(Age);mjo=r(Uft,"camembert"),Uft.forEach(t),gjo=r(nxe," \u2014 "),SO=n(nxe,"A",{href:!0});var Jft=s(SO);hjo=r(Jft,"CamembertForTokenClassification"),Jft.forEach(t),pjo=r(nxe," (CamemBERT model)"),nxe.forEach(t),_jo=i(J),Av=n(J,"LI",{});var sxe=s(Av);yge=n(sxe,"STRONG",{});var Yft=s(yge);ujo=r(Yft,"canine"),Yft.forEach(t),bjo=r(sxe," \u2014 "),RO=n(sxe,"A",{href:!0});var Kft=s(RO);vjo=r(Kft,"CanineForTokenClassification"),Kft.forEach(t),Fjo=r(sxe," (Canine model)"),sxe.forEach(t),Tjo=i(J),yv=n(J,"LI",{});var lxe=s(yv);Lge=n(lxe,"STRONG",{});var Zft=s(Lge);Mjo=r(Zft,"convbert"),Zft.forEach(t),Ejo=r(lxe," \u2014 "),BO=n(lxe,"A",{href:!0});var emt=s(BO);Cjo=r(emt,"ConvBertForTokenClassification"),emt.forEach(t),wjo=r(lxe," (ConvBERT model)"),lxe.forEach(t),Ajo=i(J),Lv=n(J,"LI",{});var ixe=s(Lv);xge=n(ixe,"STRONG",{});var omt=s(xge);yjo=r(omt,"data2vec-text"),omt.forEach(t),Ljo=r(ixe," \u2014 "),PO=n(ixe,"A",{href:!0});var rmt=s(PO);xjo=r(rmt,"Data2VecTextForTokenClassification"),rmt.forEach(t),$jo=r(ixe," (Data2VecText model)"),ixe.forEach(t),kjo=i(J),xv=n(J,"LI",{});var dxe=s(xv);$ge=n(dxe,"STRONG",{});var tmt=s($ge);Sjo=r(tmt,"deberta"),tmt.forEach(t),Rjo=r(dxe," \u2014 "),IO=n(dxe,"A",{href:!0});var amt=s(IO);Bjo=r(amt,"DebertaForTokenClassification"),amt.forEach(t),Pjo=r(dxe," (DeBERTa model)"),dxe.forEach(t),Ijo=i(J),$v=n(J,"LI",{});var cxe=s($v);kge=n(cxe,"STRONG",{});var nmt=s(kge);qjo=r(nmt,"deberta-v2"),nmt.forEach(t),Njo=r(cxe," \u2014 "),qO=n(cxe,"A",{href:!0});var smt=s(qO);jjo=r(smt,"DebertaV2ForTokenClassification"),smt.forEach(t),Djo=r(cxe," (DeBERTa-v2 model)"),cxe.forEach(t),Gjo=i(J),kv=n(J,"LI",{});var fxe=s(kv);Sge=n(fxe,"STRONG",{});var lmt=s(Sge);Ojo=r(lmt,"distilbert"),lmt.forEach(t),Vjo=r(fxe," \u2014 "),NO=n(fxe,"A",{href:!0});var imt=s(NO);Xjo=r(imt,"DistilBertForTokenClassification"),imt.forEach(t),zjo=r(fxe," (DistilBERT model)"),fxe.forEach(t),Wjo=i(J),Sv=n(J,"LI",{});var mxe=s(Sv);Rge=n(mxe,"STRONG",{});var dmt=s(Rge);Qjo=r(dmt,"electra"),dmt.forEach(t),Hjo=r(mxe," \u2014 "),jO=n(mxe,"A",{href:!0});var cmt=s(jO);Ujo=r(cmt,"ElectraForTokenClassification"),cmt.forEach(t),Jjo=r(mxe," (ELECTRA model)"),mxe.forEach(t),Yjo=i(J),Rv=n(J,"LI",{});var gxe=s(Rv);Bge=n(gxe,"STRONG",{});var fmt=s(Bge);Kjo=r(fmt,"flaubert"),fmt.forEach(t),Zjo=r(gxe," \u2014 "),DO=n(gxe,"A",{href:!0});var mmt=s(DO);eDo=r(mmt,"FlaubertForTokenClassification"),mmt.forEach(t),oDo=r(gxe," (FlauBERT model)"),gxe.forEach(t),rDo=i(J),Bv=n(J,"LI",{});var hxe=s(Bv);Pge=n(hxe,"STRONG",{});var gmt=s(Pge);tDo=r(gmt,"fnet"),gmt.forEach(t),aDo=r(hxe," \u2014 "),GO=n(hxe,"A",{href:!0});var hmt=s(GO);nDo=r(hmt,"FNetForTokenClassification"),hmt.forEach(t),sDo=r(hxe," (FNet model)"),hxe.forEach(t),lDo=i(J),Pv=n(J,"LI",{});var pxe=s(Pv);Ige=n(pxe,"STRONG",{});var pmt=s(Ige);iDo=r(pmt,"funnel"),pmt.forEach(t),dDo=r(pxe," \u2014 "),OO=n(pxe,"A",{href:!0});var _mt=s(OO);cDo=r(_mt,"FunnelForTokenClassification"),_mt.forEach(t),fDo=r(pxe," (Funnel Transformer model)"),pxe.forEach(t),mDo=i(J),Iv=n(J,"LI",{});var _xe=s(Iv);qge=n(_xe,"STRONG",{});var umt=s(qge);gDo=r(umt,"gpt2"),umt.forEach(t),hDo=r(_xe," \u2014 "),VO=n(_xe,"A",{href:!0});var bmt=s(VO);pDo=r(bmt,"GPT2ForTokenClassification"),bmt.forEach(t),_Do=r(_xe," (OpenAI GPT-2 model)"),_xe.forEach(t),uDo=i(J),qv=n(J,"LI",{});var uxe=s(qv);Nge=n(uxe,"STRONG",{});var vmt=s(Nge);bDo=r(vmt,"ibert"),vmt.forEach(t),vDo=r(uxe," \u2014 "),XO=n(uxe,"A",{href:!0});var Fmt=s(XO);FDo=r(Fmt,"IBertForTokenClassification"),Fmt.forEach(t),TDo=r(uxe," (I-BERT model)"),uxe.forEach(t),MDo=i(J),Nv=n(J,"LI",{});var bxe=s(Nv);jge=n(bxe,"STRONG",{});var Tmt=s(jge);EDo=r(Tmt,"layoutlm"),Tmt.forEach(t),CDo=r(bxe," \u2014 "),zO=n(bxe,"A",{href:!0});var Mmt=s(zO);wDo=r(Mmt,"LayoutLMForTokenClassification"),Mmt.forEach(t),ADo=r(bxe," (LayoutLM model)"),bxe.forEach(t),yDo=i(J),jv=n(J,"LI",{});var vxe=s(jv);Dge=n(vxe,"STRONG",{});var Emt=s(Dge);LDo=r(Emt,"layoutlmv2"),Emt.forEach(t),xDo=r(vxe," \u2014 "),WO=n(vxe,"A",{href:!0});var Cmt=s(WO);$Do=r(Cmt,"LayoutLMv2ForTokenClassification"),Cmt.forEach(t),kDo=r(vxe," (LayoutLMv2 model)"),vxe.forEach(t),SDo=i(J),Dv=n(J,"LI",{});var Fxe=s(Dv);Gge=n(Fxe,"STRONG",{});var wmt=s(Gge);RDo=r(wmt,"longformer"),wmt.forEach(t),BDo=r(Fxe," \u2014 "),QO=n(Fxe,"A",{href:!0});var Amt=s(QO);PDo=r(Amt,"LongformerForTokenClassification"),Amt.forEach(t),IDo=r(Fxe," (Longformer model)"),Fxe.forEach(t),qDo=i(J),Gv=n(J,"LI",{});var Txe=s(Gv);Oge=n(Txe,"STRONG",{});var ymt=s(Oge);NDo=r(ymt,"megatron-bert"),ymt.forEach(t),jDo=r(Txe," \u2014 "),HO=n(Txe,"A",{href:!0});var Lmt=s(HO);DDo=r(Lmt,"MegatronBertForTokenClassification"),Lmt.forEach(t),GDo=r(Txe," (MegatronBert model)"),Txe.forEach(t),ODo=i(J),Ov=n(J,"LI",{});var Mxe=s(Ov);Vge=n(Mxe,"STRONG",{});var xmt=s(Vge);VDo=r(xmt,"mobilebert"),xmt.forEach(t),XDo=r(Mxe," \u2014 "),UO=n(Mxe,"A",{href:!0});var $mt=s(UO);zDo=r($mt,"MobileBertForTokenClassification"),$mt.forEach(t),WDo=r(Mxe," (MobileBERT model)"),Mxe.forEach(t),QDo=i(J),Vv=n(J,"LI",{});var Exe=s(Vv);Xge=n(Exe,"STRONG",{});var kmt=s(Xge);HDo=r(kmt,"mpnet"),kmt.forEach(t),UDo=r(Exe," \u2014 "),JO=n(Exe,"A",{href:!0});var Smt=s(JO);JDo=r(Smt,"MPNetForTokenClassification"),Smt.forEach(t),YDo=r(Exe," (MPNet model)"),Exe.forEach(t),KDo=i(J),Xv=n(J,"LI",{});var Cxe=s(Xv);zge=n(Cxe,"STRONG",{});var Rmt=s(zge);ZDo=r(Rmt,"nystromformer"),Rmt.forEach(t),eGo=r(Cxe," \u2014 "),YO=n(Cxe,"A",{href:!0});var Bmt=s(YO);oGo=r(Bmt,"NystromformerForTokenClassification"),Bmt.forEach(t),rGo=r(Cxe," (Nystromformer model)"),Cxe.forEach(t),tGo=i(J),zv=n(J,"LI",{});var wxe=s(zv);Wge=n(wxe,"STRONG",{});var Pmt=s(Wge);aGo=r(Pmt,"qdqbert"),Pmt.forEach(t),nGo=r(wxe," \u2014 "),KO=n(wxe,"A",{href:!0});var Imt=s(KO);sGo=r(Imt,"QDQBertForTokenClassification"),Imt.forEach(t),lGo=r(wxe," (QDQBert model)"),wxe.forEach(t),iGo=i(J),Wv=n(J,"LI",{});var Axe=s(Wv);Qge=n(Axe,"STRONG",{});var qmt=s(Qge);dGo=r(qmt,"rembert"),qmt.forEach(t),cGo=r(Axe," \u2014 "),ZO=n(Axe,"A",{href:!0});var Nmt=s(ZO);fGo=r(Nmt,"RemBertForTokenClassification"),Nmt.forEach(t),mGo=r(Axe," (RemBERT model)"),Axe.forEach(t),gGo=i(J),Qv=n(J,"LI",{});var yxe=s(Qv);Hge=n(yxe,"STRONG",{});var jmt=s(Hge);hGo=r(jmt,"roberta"),jmt.forEach(t),pGo=r(yxe," \u2014 "),eV=n(yxe,"A",{href:!0});var Dmt=s(eV);_Go=r(Dmt,"RobertaForTokenClassification"),Dmt.forEach(t),uGo=r(yxe," (RoBERTa model)"),yxe.forEach(t),bGo=i(J),Hv=n(J,"LI",{});var Lxe=s(Hv);Uge=n(Lxe,"STRONG",{});var Gmt=s(Uge);vGo=r(Gmt,"roformer"),Gmt.forEach(t),FGo=r(Lxe," \u2014 "),oV=n(Lxe,"A",{href:!0});var Omt=s(oV);TGo=r(Omt,"RoFormerForTokenClassification"),Omt.forEach(t),MGo=r(Lxe," (RoFormer model)"),Lxe.forEach(t),EGo=i(J),Uv=n(J,"LI",{});var xxe=s(Uv);Jge=n(xxe,"STRONG",{});var Vmt=s(Jge);CGo=r(Vmt,"squeezebert"),Vmt.forEach(t),wGo=r(xxe," \u2014 "),rV=n(xxe,"A",{href:!0});var Xmt=s(rV);AGo=r(Xmt,"SqueezeBertForTokenClassification"),Xmt.forEach(t),yGo=r(xxe," (SqueezeBERT model)"),xxe.forEach(t),LGo=i(J),Jv=n(J,"LI",{});var $xe=s(Jv);Yge=n($xe,"STRONG",{});var zmt=s(Yge);xGo=r(zmt,"xlm"),zmt.forEach(t),$Go=r($xe," \u2014 "),tV=n($xe,"A",{href:!0});var Wmt=s(tV);kGo=r(Wmt,"XLMForTokenClassification"),Wmt.forEach(t),SGo=r($xe," (XLM model)"),$xe.forEach(t),RGo=i(J),Yv=n(J,"LI",{});var kxe=s(Yv);Kge=n(kxe,"STRONG",{});var Qmt=s(Kge);BGo=r(Qmt,"xlm-roberta"),Qmt.forEach(t),PGo=r(kxe," \u2014 "),aV=n(kxe,"A",{href:!0});var Hmt=s(aV);IGo=r(Hmt,"XLMRobertaForTokenClassification"),Hmt.forEach(t),qGo=r(kxe," (XLM-RoBERTa model)"),kxe.forEach(t),NGo=i(J),Kv=n(J,"LI",{});var Sxe=s(Kv);Zge=n(Sxe,"STRONG",{});var Umt=s(Zge);jGo=r(Umt,"xlm-roberta-xl"),Umt.forEach(t),DGo=r(Sxe," \u2014 "),nV=n(Sxe,"A",{href:!0});var Jmt=s(nV);GGo=r(Jmt,"XLMRobertaXLForTokenClassification"),Jmt.forEach(t),OGo=r(Sxe," (XLM-RoBERTa-XL model)"),Sxe.forEach(t),VGo=i(J),Zv=n(J,"LI",{});var Rxe=s(Zv);ehe=n(Rxe,"STRONG",{});var Ymt=s(ehe);XGo=r(Ymt,"xlnet"),Ymt.forEach(t),zGo=r(Rxe," \u2014 "),sV=n(Rxe,"A",{href:!0});var Kmt=s(sV);WGo=r(Kmt,"XLNetForTokenClassification"),Kmt.forEach(t),QGo=r(Rxe," (XLNet model)"),Rxe.forEach(t),HGo=i(J),eF=n(J,"LI",{});var Bxe=s(eF);ohe=n(Bxe,"STRONG",{});var Zmt=s(ohe);UGo=r(Zmt,"yoso"),Zmt.forEach(t),JGo=r(Bxe," \u2014 "),lV=n(Bxe,"A",{href:!0});var egt=s(lV);YGo=r(egt,"YosoForTokenClassification"),egt.forEach(t),KGo=r(Bxe," (YOSO model)"),Bxe.forEach(t),J.forEach(t),ZGo=i(da),oF=n(da,"P",{});var Pxe=s(oF);eOo=r(Pxe,"The model is set in evaluation mode by default using "),rhe=n(Pxe,"CODE",{});var ogt=s(rhe);oOo=r(ogt,"model.eval()"),ogt.forEach(t),rOo=r(Pxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),the=n(Pxe,"CODE",{});var rgt=s(the);tOo=r(rgt,"model.train()"),rgt.forEach(t),Pxe.forEach(t),aOo=i(da),T(rF.$$.fragment,da),da.forEach(t),Us.forEach(t),Jqe=i(f),Yi=n(f,"H2",{class:!0});var eDe=s(Yi);tF=n(eDe,"A",{id:!0,class:!0,href:!0});var tgt=s(tF);ahe=n(tgt,"SPAN",{});var agt=s(ahe);T(Iy.$$.fragment,agt),agt.forEach(t),tgt.forEach(t),nOo=i(eDe),nhe=n(eDe,"SPAN",{});var ngt=s(nhe);sOo=r(ngt,"AutoModelForQuestionAnswering"),ngt.forEach(t),eDe.forEach(t),Yqe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(qy.$$.fragment,Js),lOo=i(Js),Ki=n(Js,"P",{});var pZ=s(Ki);iOo=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iV=n(pZ,"A",{href:!0});var sgt=s(iV);dOo=r(sgt,"from_pretrained()"),sgt.forEach(t),cOo=r(pZ," class method or the "),dV=n(pZ,"A",{href:!0});var lgt=s(dV);fOo=r(lgt,"from_config()"),lgt.forEach(t),mOo=r(pZ,` class
method.`),pZ.forEach(t),gOo=i(Js),Ny=n(Js,"P",{});var oDe=s(Ny);hOo=r(oDe,"This class cannot be instantiated directly using "),she=n(oDe,"CODE",{});var igt=s(she);pOo=r(igt,"__init__()"),igt.forEach(t),_Oo=r(oDe," (throws an error)."),oDe.forEach(t),uOo=i(Js),mt=n(Js,"DIV",{class:!0});var Gw=s(mt);T(jy.$$.fragment,Gw),bOo=i(Gw),lhe=n(Gw,"P",{});var dgt=s(lhe);vOo=r(dgt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dgt.forEach(t),FOo=i(Gw),Zi=n(Gw,"P",{});var _Z=s(Zi);TOo=r(_Z,`Note:
Loading a model from its configuration file does `),ihe=n(_Z,"STRONG",{});var cgt=s(ihe);MOo=r(cgt,"not"),cgt.forEach(t),EOo=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=n(_Z,"A",{href:!0});var fgt=s(cV);COo=r(fgt,"from_pretrained()"),fgt.forEach(t),wOo=r(_Z," to load the model weights."),_Z.forEach(t),AOo=i(Gw),T(aF.$$.fragment,Gw),Gw.forEach(t),yOo=i(Js),no=n(Js,"DIV",{class:!0});var ca=s(no);T(Dy.$$.fragment,ca),LOo=i(ca),dhe=n(ca,"P",{});var mgt=s(dhe);xOo=r(mgt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mgt.forEach(t),$Oo=i(ca),qa=n(ca,"P",{});var Ow=s(qa);kOo=r(Ow,"The model class to instantiate is selected based on the "),che=n(Ow,"CODE",{});var ggt=s(che);SOo=r(ggt,"model_type"),ggt.forEach(t),ROo=r(Ow,` property of the config object (either
passed as an argument or loaded from `),fhe=n(Ow,"CODE",{});var hgt=s(fhe);BOo=r(hgt,"pretrained_model_name_or_path"),hgt.forEach(t),POo=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=n(Ow,"CODE",{});var pgt=s(mhe);IOo=r(pgt,"pretrained_model_name_or_path"),pgt.forEach(t),qOo=r(Ow,":"),Ow.forEach(t),NOo=i(ca),V=n(ca,"UL",{});var X=s(V);nF=n(X,"LI",{});var Ixe=s(nF);ghe=n(Ixe,"STRONG",{});var _gt=s(ghe);jOo=r(_gt,"albert"),_gt.forEach(t),DOo=r(Ixe," \u2014 "),fV=n(Ixe,"A",{href:!0});var ugt=s(fV);GOo=r(ugt,"AlbertForQuestionAnswering"),ugt.forEach(t),OOo=r(Ixe," (ALBERT model)"),Ixe.forEach(t),VOo=i(X),sF=n(X,"LI",{});var qxe=s(sF);hhe=n(qxe,"STRONG",{});var bgt=s(hhe);XOo=r(bgt,"bart"),bgt.forEach(t),zOo=r(qxe," \u2014 "),mV=n(qxe,"A",{href:!0});var vgt=s(mV);WOo=r(vgt,"BartForQuestionAnswering"),vgt.forEach(t),QOo=r(qxe," (BART model)"),qxe.forEach(t),HOo=i(X),lF=n(X,"LI",{});var Nxe=s(lF);phe=n(Nxe,"STRONG",{});var Fgt=s(phe);UOo=r(Fgt,"bert"),Fgt.forEach(t),JOo=r(Nxe," \u2014 "),gV=n(Nxe,"A",{href:!0});var Tgt=s(gV);YOo=r(Tgt,"BertForQuestionAnswering"),Tgt.forEach(t),KOo=r(Nxe," (BERT model)"),Nxe.forEach(t),ZOo=i(X),iF=n(X,"LI",{});var jxe=s(iF);_he=n(jxe,"STRONG",{});var Mgt=s(_he);eVo=r(Mgt,"big_bird"),Mgt.forEach(t),oVo=r(jxe," \u2014 "),hV=n(jxe,"A",{href:!0});var Egt=s(hV);rVo=r(Egt,"BigBirdForQuestionAnswering"),Egt.forEach(t),tVo=r(jxe," (BigBird model)"),jxe.forEach(t),aVo=i(X),dF=n(X,"LI",{});var Dxe=s(dF);uhe=n(Dxe,"STRONG",{});var Cgt=s(uhe);nVo=r(Cgt,"bigbird_pegasus"),Cgt.forEach(t),sVo=r(Dxe," \u2014 "),pV=n(Dxe,"A",{href:!0});var wgt=s(pV);lVo=r(wgt,"BigBirdPegasusForQuestionAnswering"),wgt.forEach(t),iVo=r(Dxe," (BigBirdPegasus model)"),Dxe.forEach(t),dVo=i(X),cF=n(X,"LI",{});var Gxe=s(cF);bhe=n(Gxe,"STRONG",{});var Agt=s(bhe);cVo=r(Agt,"camembert"),Agt.forEach(t),fVo=r(Gxe," \u2014 "),_V=n(Gxe,"A",{href:!0});var ygt=s(_V);mVo=r(ygt,"CamembertForQuestionAnswering"),ygt.forEach(t),gVo=r(Gxe," (CamemBERT model)"),Gxe.forEach(t),hVo=i(X),fF=n(X,"LI",{});var Oxe=s(fF);vhe=n(Oxe,"STRONG",{});var Lgt=s(vhe);pVo=r(Lgt,"canine"),Lgt.forEach(t),_Vo=r(Oxe," \u2014 "),uV=n(Oxe,"A",{href:!0});var xgt=s(uV);uVo=r(xgt,"CanineForQuestionAnswering"),xgt.forEach(t),bVo=r(Oxe," (Canine model)"),Oxe.forEach(t),vVo=i(X),mF=n(X,"LI",{});var Vxe=s(mF);Fhe=n(Vxe,"STRONG",{});var $gt=s(Fhe);FVo=r($gt,"convbert"),$gt.forEach(t),TVo=r(Vxe," \u2014 "),bV=n(Vxe,"A",{href:!0});var kgt=s(bV);MVo=r(kgt,"ConvBertForQuestionAnswering"),kgt.forEach(t),EVo=r(Vxe," (ConvBERT model)"),Vxe.forEach(t),CVo=i(X),gF=n(X,"LI",{});var Xxe=s(gF);The=n(Xxe,"STRONG",{});var Sgt=s(The);wVo=r(Sgt,"data2vec-text"),Sgt.forEach(t),AVo=r(Xxe," \u2014 "),vV=n(Xxe,"A",{href:!0});var Rgt=s(vV);yVo=r(Rgt,"Data2VecTextForQuestionAnswering"),Rgt.forEach(t),LVo=r(Xxe," (Data2VecText model)"),Xxe.forEach(t),xVo=i(X),hF=n(X,"LI",{});var zxe=s(hF);Mhe=n(zxe,"STRONG",{});var Bgt=s(Mhe);$Vo=r(Bgt,"deberta"),Bgt.forEach(t),kVo=r(zxe," \u2014 "),FV=n(zxe,"A",{href:!0});var Pgt=s(FV);SVo=r(Pgt,"DebertaForQuestionAnswering"),Pgt.forEach(t),RVo=r(zxe," (DeBERTa model)"),zxe.forEach(t),BVo=i(X),pF=n(X,"LI",{});var Wxe=s(pF);Ehe=n(Wxe,"STRONG",{});var Igt=s(Ehe);PVo=r(Igt,"deberta-v2"),Igt.forEach(t),IVo=r(Wxe," \u2014 "),TV=n(Wxe,"A",{href:!0});var qgt=s(TV);qVo=r(qgt,"DebertaV2ForQuestionAnswering"),qgt.forEach(t),NVo=r(Wxe," (DeBERTa-v2 model)"),Wxe.forEach(t),jVo=i(X),_F=n(X,"LI",{});var Qxe=s(_F);Che=n(Qxe,"STRONG",{});var Ngt=s(Che);DVo=r(Ngt,"distilbert"),Ngt.forEach(t),GVo=r(Qxe," \u2014 "),MV=n(Qxe,"A",{href:!0});var jgt=s(MV);OVo=r(jgt,"DistilBertForQuestionAnswering"),jgt.forEach(t),VVo=r(Qxe," (DistilBERT model)"),Qxe.forEach(t),XVo=i(X),uF=n(X,"LI",{});var Hxe=s(uF);whe=n(Hxe,"STRONG",{});var Dgt=s(whe);zVo=r(Dgt,"electra"),Dgt.forEach(t),WVo=r(Hxe," \u2014 "),EV=n(Hxe,"A",{href:!0});var Ggt=s(EV);QVo=r(Ggt,"ElectraForQuestionAnswering"),Ggt.forEach(t),HVo=r(Hxe," (ELECTRA model)"),Hxe.forEach(t),UVo=i(X),bF=n(X,"LI",{});var Uxe=s(bF);Ahe=n(Uxe,"STRONG",{});var Ogt=s(Ahe);JVo=r(Ogt,"flaubert"),Ogt.forEach(t),YVo=r(Uxe," \u2014 "),CV=n(Uxe,"A",{href:!0});var Vgt=s(CV);KVo=r(Vgt,"FlaubertForQuestionAnsweringSimple"),Vgt.forEach(t),ZVo=r(Uxe," (FlauBERT model)"),Uxe.forEach(t),eXo=i(X),vF=n(X,"LI",{});var Jxe=s(vF);yhe=n(Jxe,"STRONG",{});var Xgt=s(yhe);oXo=r(Xgt,"fnet"),Xgt.forEach(t),rXo=r(Jxe," \u2014 "),wV=n(Jxe,"A",{href:!0});var zgt=s(wV);tXo=r(zgt,"FNetForQuestionAnswering"),zgt.forEach(t),aXo=r(Jxe," (FNet model)"),Jxe.forEach(t),nXo=i(X),FF=n(X,"LI",{});var Yxe=s(FF);Lhe=n(Yxe,"STRONG",{});var Wgt=s(Lhe);sXo=r(Wgt,"funnel"),Wgt.forEach(t),lXo=r(Yxe," \u2014 "),AV=n(Yxe,"A",{href:!0});var Qgt=s(AV);iXo=r(Qgt,"FunnelForQuestionAnswering"),Qgt.forEach(t),dXo=r(Yxe," (Funnel Transformer model)"),Yxe.forEach(t),cXo=i(X),TF=n(X,"LI",{});var Kxe=s(TF);xhe=n(Kxe,"STRONG",{});var Hgt=s(xhe);fXo=r(Hgt,"gptj"),Hgt.forEach(t),mXo=r(Kxe," \u2014 "),yV=n(Kxe,"A",{href:!0});var Ugt=s(yV);gXo=r(Ugt,"GPTJForQuestionAnswering"),Ugt.forEach(t),hXo=r(Kxe," (GPT-J model)"),Kxe.forEach(t),pXo=i(X),MF=n(X,"LI",{});var Zxe=s(MF);$he=n(Zxe,"STRONG",{});var Jgt=s($he);_Xo=r(Jgt,"ibert"),Jgt.forEach(t),uXo=r(Zxe," \u2014 "),LV=n(Zxe,"A",{href:!0});var Ygt=s(LV);bXo=r(Ygt,"IBertForQuestionAnswering"),Ygt.forEach(t),vXo=r(Zxe," (I-BERT model)"),Zxe.forEach(t),FXo=i(X),EF=n(X,"LI",{});var e$e=s(EF);khe=n(e$e,"STRONG",{});var Kgt=s(khe);TXo=r(Kgt,"layoutlmv2"),Kgt.forEach(t),MXo=r(e$e," \u2014 "),xV=n(e$e,"A",{href:!0});var Zgt=s(xV);EXo=r(Zgt,"LayoutLMv2ForQuestionAnswering"),Zgt.forEach(t),CXo=r(e$e," (LayoutLMv2 model)"),e$e.forEach(t),wXo=i(X),CF=n(X,"LI",{});var o$e=s(CF);She=n(o$e,"STRONG",{});var eht=s(She);AXo=r(eht,"led"),eht.forEach(t),yXo=r(o$e," \u2014 "),$V=n(o$e,"A",{href:!0});var oht=s($V);LXo=r(oht,"LEDForQuestionAnswering"),oht.forEach(t),xXo=r(o$e," (LED model)"),o$e.forEach(t),$Xo=i(X),wF=n(X,"LI",{});var r$e=s(wF);Rhe=n(r$e,"STRONG",{});var rht=s(Rhe);kXo=r(rht,"longformer"),rht.forEach(t),SXo=r(r$e," \u2014 "),kV=n(r$e,"A",{href:!0});var tht=s(kV);RXo=r(tht,"LongformerForQuestionAnswering"),tht.forEach(t),BXo=r(r$e," (Longformer model)"),r$e.forEach(t),PXo=i(X),AF=n(X,"LI",{});var t$e=s(AF);Bhe=n(t$e,"STRONG",{});var aht=s(Bhe);IXo=r(aht,"lxmert"),aht.forEach(t),qXo=r(t$e," \u2014 "),SV=n(t$e,"A",{href:!0});var nht=s(SV);NXo=r(nht,"LxmertForQuestionAnswering"),nht.forEach(t),jXo=r(t$e," (LXMERT model)"),t$e.forEach(t),DXo=i(X),yF=n(X,"LI",{});var a$e=s(yF);Phe=n(a$e,"STRONG",{});var sht=s(Phe);GXo=r(sht,"mbart"),sht.forEach(t),OXo=r(a$e," \u2014 "),RV=n(a$e,"A",{href:!0});var lht=s(RV);VXo=r(lht,"MBartForQuestionAnswering"),lht.forEach(t),XXo=r(a$e," (mBART model)"),a$e.forEach(t),zXo=i(X),LF=n(X,"LI",{});var n$e=s(LF);Ihe=n(n$e,"STRONG",{});var iht=s(Ihe);WXo=r(iht,"megatron-bert"),iht.forEach(t),QXo=r(n$e," \u2014 "),BV=n(n$e,"A",{href:!0});var dht=s(BV);HXo=r(dht,"MegatronBertForQuestionAnswering"),dht.forEach(t),UXo=r(n$e," (MegatronBert model)"),n$e.forEach(t),JXo=i(X),xF=n(X,"LI",{});var s$e=s(xF);qhe=n(s$e,"STRONG",{});var cht=s(qhe);YXo=r(cht,"mobilebert"),cht.forEach(t),KXo=r(s$e," \u2014 "),PV=n(s$e,"A",{href:!0});var fht=s(PV);ZXo=r(fht,"MobileBertForQuestionAnswering"),fht.forEach(t),ezo=r(s$e," (MobileBERT model)"),s$e.forEach(t),ozo=i(X),$F=n(X,"LI",{});var l$e=s($F);Nhe=n(l$e,"STRONG",{});var mht=s(Nhe);rzo=r(mht,"mpnet"),mht.forEach(t),tzo=r(l$e," \u2014 "),IV=n(l$e,"A",{href:!0});var ght=s(IV);azo=r(ght,"MPNetForQuestionAnswering"),ght.forEach(t),nzo=r(l$e," (MPNet model)"),l$e.forEach(t),szo=i(X),kF=n(X,"LI",{});var i$e=s(kF);jhe=n(i$e,"STRONG",{});var hht=s(jhe);lzo=r(hht,"nystromformer"),hht.forEach(t),izo=r(i$e," \u2014 "),qV=n(i$e,"A",{href:!0});var pht=s(qV);dzo=r(pht,"NystromformerForQuestionAnswering"),pht.forEach(t),czo=r(i$e," (Nystromformer model)"),i$e.forEach(t),fzo=i(X),SF=n(X,"LI",{});var d$e=s(SF);Dhe=n(d$e,"STRONG",{});var _ht=s(Dhe);mzo=r(_ht,"qdqbert"),_ht.forEach(t),gzo=r(d$e," \u2014 "),NV=n(d$e,"A",{href:!0});var uht=s(NV);hzo=r(uht,"QDQBertForQuestionAnswering"),uht.forEach(t),pzo=r(d$e," (QDQBert model)"),d$e.forEach(t),_zo=i(X),RF=n(X,"LI",{});var c$e=s(RF);Ghe=n(c$e,"STRONG",{});var bht=s(Ghe);uzo=r(bht,"reformer"),bht.forEach(t),bzo=r(c$e," \u2014 "),jV=n(c$e,"A",{href:!0});var vht=s(jV);vzo=r(vht,"ReformerForQuestionAnswering"),vht.forEach(t),Fzo=r(c$e," (Reformer model)"),c$e.forEach(t),Tzo=i(X),BF=n(X,"LI",{});var f$e=s(BF);Ohe=n(f$e,"STRONG",{});var Fht=s(Ohe);Mzo=r(Fht,"rembert"),Fht.forEach(t),Ezo=r(f$e," \u2014 "),DV=n(f$e,"A",{href:!0});var Tht=s(DV);Czo=r(Tht,"RemBertForQuestionAnswering"),Tht.forEach(t),wzo=r(f$e," (RemBERT model)"),f$e.forEach(t),Azo=i(X),PF=n(X,"LI",{});var m$e=s(PF);Vhe=n(m$e,"STRONG",{});var Mht=s(Vhe);yzo=r(Mht,"roberta"),Mht.forEach(t),Lzo=r(m$e," \u2014 "),GV=n(m$e,"A",{href:!0});var Eht=s(GV);xzo=r(Eht,"RobertaForQuestionAnswering"),Eht.forEach(t),$zo=r(m$e," (RoBERTa model)"),m$e.forEach(t),kzo=i(X),IF=n(X,"LI",{});var g$e=s(IF);Xhe=n(g$e,"STRONG",{});var Cht=s(Xhe);Szo=r(Cht,"roformer"),Cht.forEach(t),Rzo=r(g$e," \u2014 "),OV=n(g$e,"A",{href:!0});var wht=s(OV);Bzo=r(wht,"RoFormerForQuestionAnswering"),wht.forEach(t),Pzo=r(g$e," (RoFormer model)"),g$e.forEach(t),Izo=i(X),qF=n(X,"LI",{});var h$e=s(qF);zhe=n(h$e,"STRONG",{});var Aht=s(zhe);qzo=r(Aht,"splinter"),Aht.forEach(t),Nzo=r(h$e," \u2014 "),VV=n(h$e,"A",{href:!0});var yht=s(VV);jzo=r(yht,"SplinterForQuestionAnswering"),yht.forEach(t),Dzo=r(h$e," (Splinter model)"),h$e.forEach(t),Gzo=i(X),NF=n(X,"LI",{});var p$e=s(NF);Whe=n(p$e,"STRONG",{});var Lht=s(Whe);Ozo=r(Lht,"squeezebert"),Lht.forEach(t),Vzo=r(p$e," \u2014 "),XV=n(p$e,"A",{href:!0});var xht=s(XV);Xzo=r(xht,"SqueezeBertForQuestionAnswering"),xht.forEach(t),zzo=r(p$e," (SqueezeBERT model)"),p$e.forEach(t),Wzo=i(X),jF=n(X,"LI",{});var _$e=s(jF);Qhe=n(_$e,"STRONG",{});var $ht=s(Qhe);Qzo=r($ht,"xlm"),$ht.forEach(t),Hzo=r(_$e," \u2014 "),zV=n(_$e,"A",{href:!0});var kht=s(zV);Uzo=r(kht,"XLMForQuestionAnsweringSimple"),kht.forEach(t),Jzo=r(_$e," (XLM model)"),_$e.forEach(t),Yzo=i(X),DF=n(X,"LI",{});var u$e=s(DF);Hhe=n(u$e,"STRONG",{});var Sht=s(Hhe);Kzo=r(Sht,"xlm-roberta"),Sht.forEach(t),Zzo=r(u$e," \u2014 "),WV=n(u$e,"A",{href:!0});var Rht=s(WV);eWo=r(Rht,"XLMRobertaForQuestionAnswering"),Rht.forEach(t),oWo=r(u$e," (XLM-RoBERTa model)"),u$e.forEach(t),rWo=i(X),GF=n(X,"LI",{});var b$e=s(GF);Uhe=n(b$e,"STRONG",{});var Bht=s(Uhe);tWo=r(Bht,"xlm-roberta-xl"),Bht.forEach(t),aWo=r(b$e," \u2014 "),QV=n(b$e,"A",{href:!0});var Pht=s(QV);nWo=r(Pht,"XLMRobertaXLForQuestionAnswering"),Pht.forEach(t),sWo=r(b$e," (XLM-RoBERTa-XL model)"),b$e.forEach(t),lWo=i(X),OF=n(X,"LI",{});var v$e=s(OF);Jhe=n(v$e,"STRONG",{});var Iht=s(Jhe);iWo=r(Iht,"xlnet"),Iht.forEach(t),dWo=r(v$e," \u2014 "),HV=n(v$e,"A",{href:!0});var qht=s(HV);cWo=r(qht,"XLNetForQuestionAnsweringSimple"),qht.forEach(t),fWo=r(v$e," (XLNet model)"),v$e.forEach(t),mWo=i(X),VF=n(X,"LI",{});var F$e=s(VF);Yhe=n(F$e,"STRONG",{});var Nht=s(Yhe);gWo=r(Nht,"yoso"),Nht.forEach(t),hWo=r(F$e," \u2014 "),UV=n(F$e,"A",{href:!0});var jht=s(UV);pWo=r(jht,"YosoForQuestionAnswering"),jht.forEach(t),_Wo=r(F$e," (YOSO model)"),F$e.forEach(t),X.forEach(t),uWo=i(ca),XF=n(ca,"P",{});var T$e=s(XF);bWo=r(T$e,"The model is set in evaluation mode by default using "),Khe=n(T$e,"CODE",{});var Dht=s(Khe);vWo=r(Dht,"model.eval()"),Dht.forEach(t),FWo=r(T$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=n(T$e,"CODE",{});var Ght=s(Zhe);TWo=r(Ght,"model.train()"),Ght.forEach(t),T$e.forEach(t),MWo=i(ca),T(zF.$$.fragment,ca),ca.forEach(t),Js.forEach(t),Kqe=i(f),ed=n(f,"H2",{class:!0});var rDe=s(ed);WF=n(rDe,"A",{id:!0,class:!0,href:!0});var Oht=s(WF);epe=n(Oht,"SPAN",{});var Vht=s(epe);T(Gy.$$.fragment,Vht),Vht.forEach(t),Oht.forEach(t),EWo=i(rDe),ope=n(rDe,"SPAN",{});var Xht=s(ope);CWo=r(Xht,"AutoModelForTableQuestionAnswering"),Xht.forEach(t),rDe.forEach(t),Zqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(Oy.$$.fragment,Ys),wWo=i(Ys),od=n(Ys,"P",{});var uZ=s(od);AWo=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),JV=n(uZ,"A",{href:!0});var zht=s(JV);yWo=r(zht,"from_pretrained()"),zht.forEach(t),LWo=r(uZ," class method or the "),YV=n(uZ,"A",{href:!0});var Wht=s(YV);xWo=r(Wht,"from_config()"),Wht.forEach(t),$Wo=r(uZ,` class
method.`),uZ.forEach(t),kWo=i(Ys),Vy=n(Ys,"P",{});var tDe=s(Vy);SWo=r(tDe,"This class cannot be instantiated directly using "),rpe=n(tDe,"CODE",{});var Qht=s(rpe);RWo=r(Qht,"__init__()"),Qht.forEach(t),BWo=r(tDe," (throws an error)."),tDe.forEach(t),PWo=i(Ys),gt=n(Ys,"DIV",{class:!0});var Vw=s(gt);T(Xy.$$.fragment,Vw),IWo=i(Vw),tpe=n(Vw,"P",{});var Hht=s(tpe);qWo=r(Hht,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Hht.forEach(t),NWo=i(Vw),rd=n(Vw,"P",{});var bZ=s(rd);jWo=r(bZ,`Note:
Loading a model from its configuration file does `),ape=n(bZ,"STRONG",{});var Uht=s(ape);DWo=r(Uht,"not"),Uht.forEach(t),GWo=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=n(bZ,"A",{href:!0});var Jht=s(KV);OWo=r(Jht,"from_pretrained()"),Jht.forEach(t),VWo=r(bZ," to load the model weights."),bZ.forEach(t),XWo=i(Vw),T(QF.$$.fragment,Vw),Vw.forEach(t),zWo=i(Ys),so=n(Ys,"DIV",{class:!0});var fa=s(so);T(zy.$$.fragment,fa),WWo=i(fa),npe=n(fa,"P",{});var Yht=s(npe);QWo=r(Yht,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Yht.forEach(t),HWo=i(fa),Na=n(fa,"P",{});var Xw=s(Na);UWo=r(Xw,"The model class to instantiate is selected based on the "),spe=n(Xw,"CODE",{});var Kht=s(spe);JWo=r(Kht,"model_type"),Kht.forEach(t),YWo=r(Xw,` property of the config object (either
passed as an argument or loaded from `),lpe=n(Xw,"CODE",{});var Zht=s(lpe);KWo=r(Zht,"pretrained_model_name_or_path"),Zht.forEach(t),ZWo=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=n(Xw,"CODE",{});var ept=s(ipe);eQo=r(ept,"pretrained_model_name_or_path"),ept.forEach(t),oQo=r(Xw,":"),Xw.forEach(t),rQo=i(fa),dpe=n(fa,"UL",{});var opt=s(dpe);HF=n(opt,"LI",{});var M$e=s(HF);cpe=n(M$e,"STRONG",{});var rpt=s(cpe);tQo=r(rpt,"tapas"),rpt.forEach(t),aQo=r(M$e," \u2014 "),ZV=n(M$e,"A",{href:!0});var tpt=s(ZV);nQo=r(tpt,"TapasForQuestionAnswering"),tpt.forEach(t),sQo=r(M$e," (TAPAS model)"),M$e.forEach(t),opt.forEach(t),lQo=i(fa),UF=n(fa,"P",{});var E$e=s(UF);iQo=r(E$e,"The model is set in evaluation mode by default using "),fpe=n(E$e,"CODE",{});var apt=s(fpe);dQo=r(apt,"model.eval()"),apt.forEach(t),cQo=r(E$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=n(E$e,"CODE",{});var npt=s(mpe);fQo=r(npt,"model.train()"),npt.forEach(t),E$e.forEach(t),mQo=i(fa),T(JF.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),eNe=i(f),td=n(f,"H2",{class:!0});var aDe=s(td);YF=n(aDe,"A",{id:!0,class:!0,href:!0});var spt=s(YF);gpe=n(spt,"SPAN",{});var lpt=s(gpe);T(Wy.$$.fragment,lpt),lpt.forEach(t),spt.forEach(t),gQo=i(aDe),hpe=n(aDe,"SPAN",{});var ipt=s(hpe);hQo=r(ipt,"AutoModelForImageClassification"),ipt.forEach(t),aDe.forEach(t),oNe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(Qy.$$.fragment,Ks),pQo=i(Ks),ad=n(Ks,"P",{});var vZ=s(ad);_Qo=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),eX=n(vZ,"A",{href:!0});var dpt=s(eX);uQo=r(dpt,"from_pretrained()"),dpt.forEach(t),bQo=r(vZ," class method or the "),oX=n(vZ,"A",{href:!0});var cpt=s(oX);vQo=r(cpt,"from_config()"),cpt.forEach(t),FQo=r(vZ,` class
method.`),vZ.forEach(t),TQo=i(Ks),Hy=n(Ks,"P",{});var nDe=s(Hy);MQo=r(nDe,"This class cannot be instantiated directly using "),ppe=n(nDe,"CODE",{});var fpt=s(ppe);EQo=r(fpt,"__init__()"),fpt.forEach(t),CQo=r(nDe," (throws an error)."),nDe.forEach(t),wQo=i(Ks),ht=n(Ks,"DIV",{class:!0});var zw=s(ht);T(Uy.$$.fragment,zw),AQo=i(zw),_pe=n(zw,"P",{});var mpt=s(_pe);yQo=r(mpt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mpt.forEach(t),LQo=i(zw),nd=n(zw,"P",{});var FZ=s(nd);xQo=r(FZ,`Note:
Loading a model from its configuration file does `),upe=n(FZ,"STRONG",{});var gpt=s(upe);$Qo=r(gpt,"not"),gpt.forEach(t),kQo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=n(FZ,"A",{href:!0});var hpt=s(rX);SQo=r(hpt,"from_pretrained()"),hpt.forEach(t),RQo=r(FZ," to load the model weights."),FZ.forEach(t),BQo=i(zw),T(KF.$$.fragment,zw),zw.forEach(t),PQo=i(Ks),lo=n(Ks,"DIV",{class:!0});var ma=s(lo);T(Jy.$$.fragment,ma),IQo=i(ma),bpe=n(ma,"P",{});var ppt=s(bpe);qQo=r(ppt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ppt.forEach(t),NQo=i(ma),ja=n(ma,"P",{});var Ww=s(ja);jQo=r(Ww,"The model class to instantiate is selected based on the "),vpe=n(Ww,"CODE",{});var _pt=s(vpe);DQo=r(_pt,"model_type"),_pt.forEach(t),GQo=r(Ww,` property of the config object (either
passed as an argument or loaded from `),Fpe=n(Ww,"CODE",{});var upt=s(Fpe);OQo=r(upt,"pretrained_model_name_or_path"),upt.forEach(t),VQo=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=n(Ww,"CODE",{});var bpt=s(Tpe);XQo=r(bpt,"pretrained_model_name_or_path"),bpt.forEach(t),zQo=r(Ww,":"),Ww.forEach(t),WQo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);ZF=n(Te,"LI",{});var C$e=s(ZF);Mpe=n(C$e,"STRONG",{});var vpt=s(Mpe);QQo=r(vpt,"beit"),vpt.forEach(t),HQo=r(C$e," \u2014 "),tX=n(C$e,"A",{href:!0});var Fpt=s(tX);UQo=r(Fpt,"BeitForImageClassification"),Fpt.forEach(t),JQo=r(C$e," (BEiT model)"),C$e.forEach(t),YQo=i(Te),e0=n(Te,"LI",{});var w$e=s(e0);Epe=n(w$e,"STRONG",{});var Tpt=s(Epe);KQo=r(Tpt,"convnext"),Tpt.forEach(t),ZQo=r(w$e," \u2014 "),aX=n(w$e,"A",{href:!0});var Mpt=s(aX);eHo=r(Mpt,"ConvNextForImageClassification"),Mpt.forEach(t),oHo=r(w$e," (ConvNext model)"),w$e.forEach(t),rHo=i(Te),o0=n(Te,"LI",{});var A$e=s(o0);Cpe=n(A$e,"STRONG",{});var Ept=s(Cpe);tHo=r(Ept,"cvt"),Ept.forEach(t),aHo=r(A$e," \u2014 "),nX=n(A$e,"A",{href:!0});var Cpt=s(nX);nHo=r(Cpt,"CvtForImageClassification"),Cpt.forEach(t),sHo=r(A$e," (CvT model)"),A$e.forEach(t),lHo=i(Te),r0=n(Te,"LI",{});var y$e=s(r0);wpe=n(y$e,"STRONG",{});var wpt=s(wpe);iHo=r(wpt,"data2vec-vision"),wpt.forEach(t),dHo=r(y$e," \u2014 "),sX=n(y$e,"A",{href:!0});var Apt=s(sX);cHo=r(Apt,"Data2VecVisionForImageClassification"),Apt.forEach(t),fHo=r(y$e," (Data2VecVision model)"),y$e.forEach(t),mHo=i(Te),Bs=n(Te,"LI",{});var B$=s(Bs);Ape=n(B$,"STRONG",{});var ypt=s(Ape);gHo=r(ypt,"deit"),ypt.forEach(t),hHo=r(B$," \u2014 "),lX=n(B$,"A",{href:!0});var Lpt=s(lX);pHo=r(Lpt,"DeiTForImageClassification"),Lpt.forEach(t),_Ho=r(B$," or "),iX=n(B$,"A",{href:!0});var xpt=s(iX);uHo=r(xpt,"DeiTForImageClassificationWithTeacher"),xpt.forEach(t),bHo=r(B$," (DeiT model)"),B$.forEach(t),vHo=i(Te),t0=n(Te,"LI",{});var L$e=s(t0);ype=n(L$e,"STRONG",{});var $pt=s(ype);FHo=r($pt,"imagegpt"),$pt.forEach(t),THo=r(L$e," \u2014 "),dX=n(L$e,"A",{href:!0});var kpt=s(dX);MHo=r(kpt,"ImageGPTForImageClassification"),kpt.forEach(t),EHo=r(L$e," (ImageGPT model)"),L$e.forEach(t),CHo=i(Te),pt=n(Te,"LI",{});var gf=s(pt);Lpe=n(gf,"STRONG",{});var Spt=s(Lpe);wHo=r(Spt,"perceiver"),Spt.forEach(t),AHo=r(gf," \u2014 "),cX=n(gf,"A",{href:!0});var Rpt=s(cX);yHo=r(Rpt,"PerceiverForImageClassificationLearned"),Rpt.forEach(t),LHo=r(gf," or "),fX=n(gf,"A",{href:!0});var Bpt=s(fX);xHo=r(Bpt,"PerceiverForImageClassificationFourier"),Bpt.forEach(t),$Ho=r(gf," or "),mX=n(gf,"A",{href:!0});var Ppt=s(mX);kHo=r(Ppt,"PerceiverForImageClassificationConvProcessing"),Ppt.forEach(t),SHo=r(gf," (Perceiver model)"),gf.forEach(t),RHo=i(Te),a0=n(Te,"LI",{});var x$e=s(a0);xpe=n(x$e,"STRONG",{});var Ipt=s(xpe);BHo=r(Ipt,"poolformer"),Ipt.forEach(t),PHo=r(x$e," \u2014 "),gX=n(x$e,"A",{href:!0});var qpt=s(gX);IHo=r(qpt,"PoolFormerForImageClassification"),qpt.forEach(t),qHo=r(x$e," (PoolFormer model)"),x$e.forEach(t),NHo=i(Te),n0=n(Te,"LI",{});var $$e=s(n0);$pe=n($$e,"STRONG",{});var Npt=s($pe);jHo=r(Npt,"regnet"),Npt.forEach(t),DHo=r($$e," \u2014 "),hX=n($$e,"A",{href:!0});var jpt=s(hX);GHo=r(jpt,"RegNetForImageClassification"),jpt.forEach(t),OHo=r($$e," (RegNet model)"),$$e.forEach(t),VHo=i(Te),s0=n(Te,"LI",{});var k$e=s(s0);kpe=n(k$e,"STRONG",{});var Dpt=s(kpe);XHo=r(Dpt,"resnet"),Dpt.forEach(t),zHo=r(k$e," \u2014 "),pX=n(k$e,"A",{href:!0});var Gpt=s(pX);WHo=r(Gpt,"ResNetForImageClassification"),Gpt.forEach(t),QHo=r(k$e," (ResNet model)"),k$e.forEach(t),HHo=i(Te),l0=n(Te,"LI",{});var S$e=s(l0);Spe=n(S$e,"STRONG",{});var Opt=s(Spe);UHo=r(Opt,"segformer"),Opt.forEach(t),JHo=r(S$e," \u2014 "),_X=n(S$e,"A",{href:!0});var Vpt=s(_X);YHo=r(Vpt,"SegformerForImageClassification"),Vpt.forEach(t),KHo=r(S$e," (SegFormer model)"),S$e.forEach(t),ZHo=i(Te),i0=n(Te,"LI",{});var R$e=s(i0);Rpe=n(R$e,"STRONG",{});var Xpt=s(Rpe);eUo=r(Xpt,"swin"),Xpt.forEach(t),oUo=r(R$e," \u2014 "),uX=n(R$e,"A",{href:!0});var zpt=s(uX);rUo=r(zpt,"SwinForImageClassification"),zpt.forEach(t),tUo=r(R$e," (Swin model)"),R$e.forEach(t),aUo=i(Te),d0=n(Te,"LI",{});var B$e=s(d0);Bpe=n(B$e,"STRONG",{});var Wpt=s(Bpe);nUo=r(Wpt,"van"),Wpt.forEach(t),sUo=r(B$e," \u2014 "),bX=n(B$e,"A",{href:!0});var Qpt=s(bX);lUo=r(Qpt,"VanForImageClassification"),Qpt.forEach(t),iUo=r(B$e," (VAN model)"),B$e.forEach(t),dUo=i(Te),c0=n(Te,"LI",{});var P$e=s(c0);Ppe=n(P$e,"STRONG",{});var Hpt=s(Ppe);cUo=r(Hpt,"vit"),Hpt.forEach(t),fUo=r(P$e," \u2014 "),vX=n(P$e,"A",{href:!0});var Upt=s(vX);mUo=r(Upt,"ViTForImageClassification"),Upt.forEach(t),gUo=r(P$e," (ViT model)"),P$e.forEach(t),Te.forEach(t),hUo=i(ma),f0=n(ma,"P",{});var I$e=s(f0);pUo=r(I$e,"The model is set in evaluation mode by default using "),Ipe=n(I$e,"CODE",{});var Jpt=s(Ipe);_Uo=r(Jpt,"model.eval()"),Jpt.forEach(t),uUo=r(I$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=n(I$e,"CODE",{});var Ypt=s(qpe);bUo=r(Ypt,"model.train()"),Ypt.forEach(t),I$e.forEach(t),vUo=i(ma),T(m0.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),rNe=i(f),sd=n(f,"H2",{class:!0});var sDe=s(sd);g0=n(sDe,"A",{id:!0,class:!0,href:!0});var Kpt=s(g0);Npe=n(Kpt,"SPAN",{});var Zpt=s(Npe);T(Yy.$$.fragment,Zpt),Zpt.forEach(t),Kpt.forEach(t),FUo=i(sDe),jpe=n(sDe,"SPAN",{});var e_t=s(jpe);TUo=r(e_t,"AutoModelForVision2Seq"),e_t.forEach(t),sDe.forEach(t),tNe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(Ky.$$.fragment,Zs),MUo=i(Zs),ld=n(Zs,"P",{});var TZ=s(ld);EUo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FX=n(TZ,"A",{href:!0});var o_t=s(FX);CUo=r(o_t,"from_pretrained()"),o_t.forEach(t),wUo=r(TZ," class method or the "),TX=n(TZ,"A",{href:!0});var r_t=s(TX);AUo=r(r_t,"from_config()"),r_t.forEach(t),yUo=r(TZ,` class
method.`),TZ.forEach(t),LUo=i(Zs),Zy=n(Zs,"P",{});var lDe=s(Zy);xUo=r(lDe,"This class cannot be instantiated directly using "),Dpe=n(lDe,"CODE",{});var t_t=s(Dpe);$Uo=r(t_t,"__init__()"),t_t.forEach(t),kUo=r(lDe," (throws an error)."),lDe.forEach(t),SUo=i(Zs),_t=n(Zs,"DIV",{class:!0});var Qw=s(_t);T(eL.$$.fragment,Qw),RUo=i(Qw),Gpe=n(Qw,"P",{});var a_t=s(Gpe);BUo=r(a_t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),a_t.forEach(t),PUo=i(Qw),id=n(Qw,"P",{});var MZ=s(id);IUo=r(MZ,`Note:
Loading a model from its configuration file does `),Ope=n(MZ,"STRONG",{});var n_t=s(Ope);qUo=r(n_t,"not"),n_t.forEach(t),NUo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(MZ,"A",{href:!0});var s_t=s(MX);jUo=r(s_t,"from_pretrained()"),s_t.forEach(t),DUo=r(MZ," to load the model weights."),MZ.forEach(t),GUo=i(Qw),T(h0.$$.fragment,Qw),Qw.forEach(t),OUo=i(Zs),io=n(Zs,"DIV",{class:!0});var ga=s(io);T(oL.$$.fragment,ga),VUo=i(ga),Vpe=n(ga,"P",{});var l_t=s(Vpe);XUo=r(l_t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),l_t.forEach(t),zUo=i(ga),Da=n(ga,"P",{});var Hw=s(Da);WUo=r(Hw,"The model class to instantiate is selected based on the "),Xpe=n(Hw,"CODE",{});var i_t=s(Xpe);QUo=r(i_t,"model_type"),i_t.forEach(t),HUo=r(Hw,` property of the config object (either
passed as an argument or loaded from `),zpe=n(Hw,"CODE",{});var d_t=s(zpe);UUo=r(d_t,"pretrained_model_name_or_path"),d_t.forEach(t),JUo=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=n(Hw,"CODE",{});var c_t=s(Wpe);YUo=r(c_t,"pretrained_model_name_or_path"),c_t.forEach(t),KUo=r(Hw,":"),Hw.forEach(t),ZUo=i(ga),Qpe=n(ga,"UL",{});var f_t=s(Qpe);p0=n(f_t,"LI",{});var q$e=s(p0);Hpe=n(q$e,"STRONG",{});var m_t=s(Hpe);eJo=r(m_t,"vision-encoder-decoder"),m_t.forEach(t),oJo=r(q$e," \u2014 "),EX=n(q$e,"A",{href:!0});var g_t=s(EX);rJo=r(g_t,"VisionEncoderDecoderModel"),g_t.forEach(t),tJo=r(q$e," (Vision Encoder decoder model)"),q$e.forEach(t),f_t.forEach(t),aJo=i(ga),_0=n(ga,"P",{});var N$e=s(_0);nJo=r(N$e,"The model is set in evaluation mode by default using "),Upe=n(N$e,"CODE",{});var h_t=s(Upe);sJo=r(h_t,"model.eval()"),h_t.forEach(t),lJo=r(N$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=n(N$e,"CODE",{});var p_t=s(Jpe);iJo=r(p_t,"model.train()"),p_t.forEach(t),N$e.forEach(t),dJo=i(ga),T(u0.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),aNe=i(f),dd=n(f,"H2",{class:!0});var iDe=s(dd);b0=n(iDe,"A",{id:!0,class:!0,href:!0});var __t=s(b0);Ype=n(__t,"SPAN",{});var u_t=s(Ype);T(rL.$$.fragment,u_t),u_t.forEach(t),__t.forEach(t),cJo=i(iDe),Kpe=n(iDe,"SPAN",{});var b_t=s(Kpe);fJo=r(b_t,"AutoModelForAudioClassification"),b_t.forEach(t),iDe.forEach(t),nNe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(tL.$$.fragment,el),mJo=i(el),cd=n(el,"P",{});var EZ=s(cd);gJo=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),CX=n(EZ,"A",{href:!0});var v_t=s(CX);hJo=r(v_t,"from_pretrained()"),v_t.forEach(t),pJo=r(EZ," class method or the "),wX=n(EZ,"A",{href:!0});var F_t=s(wX);_Jo=r(F_t,"from_config()"),F_t.forEach(t),uJo=r(EZ,` class
method.`),EZ.forEach(t),bJo=i(el),aL=n(el,"P",{});var dDe=s(aL);vJo=r(dDe,"This class cannot be instantiated directly using "),Zpe=n(dDe,"CODE",{});var T_t=s(Zpe);FJo=r(T_t,"__init__()"),T_t.forEach(t),TJo=r(dDe," (throws an error)."),dDe.forEach(t),MJo=i(el),ut=n(el,"DIV",{class:!0});var Uw=s(ut);T(nL.$$.fragment,Uw),EJo=i(Uw),e_e=n(Uw,"P",{});var M_t=s(e_e);CJo=r(M_t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),M_t.forEach(t),wJo=i(Uw),fd=n(Uw,"P",{});var CZ=s(fd);AJo=r(CZ,`Note:
Loading a model from its configuration file does `),o_e=n(CZ,"STRONG",{});var E_t=s(o_e);yJo=r(E_t,"not"),E_t.forEach(t),LJo=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=n(CZ,"A",{href:!0});var C_t=s(AX);xJo=r(C_t,"from_pretrained()"),C_t.forEach(t),$Jo=r(CZ," to load the model weights."),CZ.forEach(t),kJo=i(Uw),T(v0.$$.fragment,Uw),Uw.forEach(t),SJo=i(el),co=n(el,"DIV",{class:!0});var ha=s(co);T(sL.$$.fragment,ha),RJo=i(ha),r_e=n(ha,"P",{});var w_t=s(r_e);BJo=r(w_t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),w_t.forEach(t),PJo=i(ha),Ga=n(ha,"P",{});var Jw=s(Ga);IJo=r(Jw,"The model class to instantiate is selected based on the "),t_e=n(Jw,"CODE",{});var A_t=s(t_e);qJo=r(A_t,"model_type"),A_t.forEach(t),NJo=r(Jw,` property of the config object (either
passed as an argument or loaded from `),a_e=n(Jw,"CODE",{});var y_t=s(a_e);jJo=r(y_t,"pretrained_model_name_or_path"),y_t.forEach(t),DJo=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=n(Jw,"CODE",{});var L_t=s(n_e);GJo=r(L_t,"pretrained_model_name_or_path"),L_t.forEach(t),OJo=r(Jw,":"),Jw.forEach(t),VJo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);F0=n(Oe,"LI",{});var j$e=s(F0);s_e=n(j$e,"STRONG",{});var x_t=s(s_e);XJo=r(x_t,"data2vec-audio"),x_t.forEach(t),zJo=r(j$e," \u2014 "),yX=n(j$e,"A",{href:!0});var $_t=s(yX);WJo=r($_t,"Data2VecAudioForSequenceClassification"),$_t.forEach(t),QJo=r(j$e," (Data2VecAudio model)"),j$e.forEach(t),HJo=i(Oe),T0=n(Oe,"LI",{});var D$e=s(T0);l_e=n(D$e,"STRONG",{});var k_t=s(l_e);UJo=r(k_t,"hubert"),k_t.forEach(t),JJo=r(D$e," \u2014 "),LX=n(D$e,"A",{href:!0});var S_t=s(LX);YJo=r(S_t,"HubertForSequenceClassification"),S_t.forEach(t),KJo=r(D$e," (Hubert model)"),D$e.forEach(t),ZJo=i(Oe),M0=n(Oe,"LI",{});var G$e=s(M0);i_e=n(G$e,"STRONG",{});var R_t=s(i_e);eYo=r(R_t,"sew"),R_t.forEach(t),oYo=r(G$e," \u2014 "),xX=n(G$e,"A",{href:!0});var B_t=s(xX);rYo=r(B_t,"SEWForSequenceClassification"),B_t.forEach(t),tYo=r(G$e," (SEW model)"),G$e.forEach(t),aYo=i(Oe),E0=n(Oe,"LI",{});var O$e=s(E0);d_e=n(O$e,"STRONG",{});var P_t=s(d_e);nYo=r(P_t,"sew-d"),P_t.forEach(t),sYo=r(O$e," \u2014 "),$X=n(O$e,"A",{href:!0});var I_t=s($X);lYo=r(I_t,"SEWDForSequenceClassification"),I_t.forEach(t),iYo=r(O$e," (SEW-D model)"),O$e.forEach(t),dYo=i(Oe),C0=n(Oe,"LI",{});var V$e=s(C0);c_e=n(V$e,"STRONG",{});var q_t=s(c_e);cYo=r(q_t,"unispeech"),q_t.forEach(t),fYo=r(V$e," \u2014 "),kX=n(V$e,"A",{href:!0});var N_t=s(kX);mYo=r(N_t,"UniSpeechForSequenceClassification"),N_t.forEach(t),gYo=r(V$e," (UniSpeech model)"),V$e.forEach(t),hYo=i(Oe),w0=n(Oe,"LI",{});var X$e=s(w0);f_e=n(X$e,"STRONG",{});var j_t=s(f_e);pYo=r(j_t,"unispeech-sat"),j_t.forEach(t),_Yo=r(X$e," \u2014 "),SX=n(X$e,"A",{href:!0});var D_t=s(SX);uYo=r(D_t,"UniSpeechSatForSequenceClassification"),D_t.forEach(t),bYo=r(X$e," (UniSpeechSat model)"),X$e.forEach(t),vYo=i(Oe),A0=n(Oe,"LI",{});var z$e=s(A0);m_e=n(z$e,"STRONG",{});var G_t=s(m_e);FYo=r(G_t,"wav2vec2"),G_t.forEach(t),TYo=r(z$e," \u2014 "),RX=n(z$e,"A",{href:!0});var O_t=s(RX);MYo=r(O_t,"Wav2Vec2ForSequenceClassification"),O_t.forEach(t),EYo=r(z$e," (Wav2Vec2 model)"),z$e.forEach(t),CYo=i(Oe),y0=n(Oe,"LI",{});var W$e=s(y0);g_e=n(W$e,"STRONG",{});var V_t=s(g_e);wYo=r(V_t,"wav2vec2-conformer"),V_t.forEach(t),AYo=r(W$e," \u2014 "),BX=n(W$e,"A",{href:!0});var X_t=s(BX);yYo=r(X_t,"Wav2Vec2ConformerForSequenceClassification"),X_t.forEach(t),LYo=r(W$e," (Wav2Vec2-Conformer model)"),W$e.forEach(t),xYo=i(Oe),L0=n(Oe,"LI",{});var Q$e=s(L0);h_e=n(Q$e,"STRONG",{});var z_t=s(h_e);$Yo=r(z_t,"wavlm"),z_t.forEach(t),kYo=r(Q$e," \u2014 "),PX=n(Q$e,"A",{href:!0});var W_t=s(PX);SYo=r(W_t,"WavLMForSequenceClassification"),W_t.forEach(t),RYo=r(Q$e," (WavLM model)"),Q$e.forEach(t),Oe.forEach(t),BYo=i(ha),x0=n(ha,"P",{});var H$e=s(x0);PYo=r(H$e,"The model is set in evaluation mode by default using "),p_e=n(H$e,"CODE",{});var Q_t=s(p_e);IYo=r(Q_t,"model.eval()"),Q_t.forEach(t),qYo=r(H$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),__e=n(H$e,"CODE",{});var H_t=s(__e);NYo=r(H_t,"model.train()"),H_t.forEach(t),H$e.forEach(t),jYo=i(ha),T($0.$$.fragment,ha),ha.forEach(t),el.forEach(t),sNe=i(f),md=n(f,"H2",{class:!0});var cDe=s(md);k0=n(cDe,"A",{id:!0,class:!0,href:!0});var U_t=s(k0);u_e=n(U_t,"SPAN",{});var J_t=s(u_e);T(lL.$$.fragment,J_t),J_t.forEach(t),U_t.forEach(t),DYo=i(cDe),b_e=n(cDe,"SPAN",{});var Y_t=s(b_e);GYo=r(Y_t,"AutoModelForAudioFrameClassification"),Y_t.forEach(t),cDe.forEach(t),lNe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(iL.$$.fragment,ol),OYo=i(ol),gd=n(ol,"P",{});var wZ=s(gd);VYo=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),IX=n(wZ,"A",{href:!0});var K_t=s(IX);XYo=r(K_t,"from_pretrained()"),K_t.forEach(t),zYo=r(wZ," class method or the "),qX=n(wZ,"A",{href:!0});var Z_t=s(qX);WYo=r(Z_t,"from_config()"),Z_t.forEach(t),QYo=r(wZ,` class
method.`),wZ.forEach(t),HYo=i(ol),dL=n(ol,"P",{});var fDe=s(dL);UYo=r(fDe,"This class cannot be instantiated directly using "),v_e=n(fDe,"CODE",{});var eut=s(v_e);JYo=r(eut,"__init__()"),eut.forEach(t),YYo=r(fDe," (throws an error)."),fDe.forEach(t),KYo=i(ol),bt=n(ol,"DIV",{class:!0});var Yw=s(bt);T(cL.$$.fragment,Yw),ZYo=i(Yw),F_e=n(Yw,"P",{});var out=s(F_e);eKo=r(out,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),out.forEach(t),oKo=i(Yw),hd=n(Yw,"P",{});var AZ=s(hd);rKo=r(AZ,`Note:
Loading a model from its configuration file does `),T_e=n(AZ,"STRONG",{});var rut=s(T_e);tKo=r(rut,"not"),rut.forEach(t),aKo=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=n(AZ,"A",{href:!0});var tut=s(NX);nKo=r(tut,"from_pretrained()"),tut.forEach(t),sKo=r(AZ," to load the model weights."),AZ.forEach(t),lKo=i(Yw),T(S0.$$.fragment,Yw),Yw.forEach(t),iKo=i(ol),fo=n(ol,"DIV",{class:!0});var pa=s(fo);T(fL.$$.fragment,pa),dKo=i(pa),M_e=n(pa,"P",{});var aut=s(M_e);cKo=r(aut,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),aut.forEach(t),fKo=i(pa),Oa=n(pa,"P",{});var Kw=s(Oa);mKo=r(Kw,"The model class to instantiate is selected based on the "),E_e=n(Kw,"CODE",{});var nut=s(E_e);gKo=r(nut,"model_type"),nut.forEach(t),hKo=r(Kw,` property of the config object (either
passed as an argument or loaded from `),C_e=n(Kw,"CODE",{});var sut=s(C_e);pKo=r(sut,"pretrained_model_name_or_path"),sut.forEach(t),_Ko=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=n(Kw,"CODE",{});var lut=s(w_e);uKo=r(lut,"pretrained_model_name_or_path"),lut.forEach(t),bKo=r(Kw,":"),Kw.forEach(t),vKo=i(pa),Kr=n(pa,"UL",{});var rl=s(Kr);R0=n(rl,"LI",{});var U$e=s(R0);A_e=n(U$e,"STRONG",{});var iut=s(A_e);FKo=r(iut,"data2vec-audio"),iut.forEach(t),TKo=r(U$e," \u2014 "),jX=n(U$e,"A",{href:!0});var dut=s(jX);MKo=r(dut,"Data2VecAudioForAudioFrameClassification"),dut.forEach(t),EKo=r(U$e," (Data2VecAudio model)"),U$e.forEach(t),CKo=i(rl),B0=n(rl,"LI",{});var J$e=s(B0);y_e=n(J$e,"STRONG",{});var cut=s(y_e);wKo=r(cut,"unispeech-sat"),cut.forEach(t),AKo=r(J$e," \u2014 "),DX=n(J$e,"A",{href:!0});var fut=s(DX);yKo=r(fut,"UniSpeechSatForAudioFrameClassification"),fut.forEach(t),LKo=r(J$e," (UniSpeechSat model)"),J$e.forEach(t),xKo=i(rl),P0=n(rl,"LI",{});var Y$e=s(P0);L_e=n(Y$e,"STRONG",{});var mut=s(L_e);$Ko=r(mut,"wav2vec2"),mut.forEach(t),kKo=r(Y$e," \u2014 "),GX=n(Y$e,"A",{href:!0});var gut=s(GX);SKo=r(gut,"Wav2Vec2ForAudioFrameClassification"),gut.forEach(t),RKo=r(Y$e," (Wav2Vec2 model)"),Y$e.forEach(t),BKo=i(rl),I0=n(rl,"LI",{});var K$e=s(I0);x_e=n(K$e,"STRONG",{});var hut=s(x_e);PKo=r(hut,"wav2vec2-conformer"),hut.forEach(t),IKo=r(K$e," \u2014 "),OX=n(K$e,"A",{href:!0});var put=s(OX);qKo=r(put,"Wav2Vec2ConformerForAudioFrameClassification"),put.forEach(t),NKo=r(K$e," (Wav2Vec2-Conformer model)"),K$e.forEach(t),jKo=i(rl),q0=n(rl,"LI",{});var Z$e=s(q0);$_e=n(Z$e,"STRONG",{});var _ut=s($_e);DKo=r(_ut,"wavlm"),_ut.forEach(t),GKo=r(Z$e," \u2014 "),VX=n(Z$e,"A",{href:!0});var uut=s(VX);OKo=r(uut,"WavLMForAudioFrameClassification"),uut.forEach(t),VKo=r(Z$e," (WavLM model)"),Z$e.forEach(t),rl.forEach(t),XKo=i(pa),N0=n(pa,"P",{});var eke=s(N0);zKo=r(eke,"The model is set in evaluation mode by default using "),k_e=n(eke,"CODE",{});var but=s(k_e);WKo=r(but,"model.eval()"),but.forEach(t),QKo=r(eke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S_e=n(eke,"CODE",{});var vut=s(S_e);HKo=r(vut,"model.train()"),vut.forEach(t),eke.forEach(t),UKo=i(pa),T(j0.$$.fragment,pa),pa.forEach(t),ol.forEach(t),iNe=i(f),pd=n(f,"H2",{class:!0});var mDe=s(pd);D0=n(mDe,"A",{id:!0,class:!0,href:!0});var Fut=s(D0);R_e=n(Fut,"SPAN",{});var Tut=s(R_e);T(mL.$$.fragment,Tut),Tut.forEach(t),Fut.forEach(t),JKo=i(mDe),B_e=n(mDe,"SPAN",{});var Mut=s(B_e);YKo=r(Mut,"AutoModelForCTC"),Mut.forEach(t),mDe.forEach(t),dNe=i(f),Vo=n(f,"DIV",{class:!0});var tl=s(Vo);T(gL.$$.fragment,tl),KKo=i(tl),_d=n(tl,"P",{});var yZ=s(_d);ZKo=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),XX=n(yZ,"A",{href:!0});var Eut=s(XX);eZo=r(Eut,"from_pretrained()"),Eut.forEach(t),oZo=r(yZ," class method or the "),zX=n(yZ,"A",{href:!0});var Cut=s(zX);rZo=r(Cut,"from_config()"),Cut.forEach(t),tZo=r(yZ,` class
method.`),yZ.forEach(t),aZo=i(tl),hL=n(tl,"P",{});var gDe=s(hL);nZo=r(gDe,"This class cannot be instantiated directly using "),P_e=n(gDe,"CODE",{});var wut=s(P_e);sZo=r(wut,"__init__()"),wut.forEach(t),lZo=r(gDe," (throws an error)."),gDe.forEach(t),iZo=i(tl),vt=n(tl,"DIV",{class:!0});var Zw=s(vt);T(pL.$$.fragment,Zw),dZo=i(Zw),I_e=n(Zw,"P",{});var Aut=s(I_e);cZo=r(Aut,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Aut.forEach(t),fZo=i(Zw),ud=n(Zw,"P",{});var LZ=s(ud);mZo=r(LZ,`Note:
Loading a model from its configuration file does `),q_e=n(LZ,"STRONG",{});var yut=s(q_e);gZo=r(yut,"not"),yut.forEach(t),hZo=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(LZ,"A",{href:!0});var Lut=s(WX);pZo=r(Lut,"from_pretrained()"),Lut.forEach(t),_Zo=r(LZ," to load the model weights."),LZ.forEach(t),uZo=i(Zw),T(G0.$$.fragment,Zw),Zw.forEach(t),bZo=i(tl),mo=n(tl,"DIV",{class:!0});var _a=s(mo);T(_L.$$.fragment,_a),vZo=i(_a),N_e=n(_a,"P",{});var xut=s(N_e);FZo=r(xut,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),xut.forEach(t),TZo=i(_a),Va=n(_a,"P",{});var e6=s(Va);MZo=r(e6,"The model class to instantiate is selected based on the "),j_e=n(e6,"CODE",{});var $ut=s(j_e);EZo=r($ut,"model_type"),$ut.forEach(t),CZo=r(e6,` property of the config object (either
passed as an argument or loaded from `),D_e=n(e6,"CODE",{});var kut=s(D_e);wZo=r(kut,"pretrained_model_name_or_path"),kut.forEach(t),AZo=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=n(e6,"CODE",{});var Sut=s(G_e);yZo=r(Sut,"pretrained_model_name_or_path"),Sut.forEach(t),LZo=r(e6,":"),e6.forEach(t),xZo=i(_a),Se=n(_a,"UL",{});var Ve=s(Se);O0=n(Ve,"LI",{});var oke=s(O0);O_e=n(oke,"STRONG",{});var Rut=s(O_e);$Zo=r(Rut,"data2vec-audio"),Rut.forEach(t),kZo=r(oke," \u2014 "),QX=n(oke,"A",{href:!0});var But=s(QX);SZo=r(But,"Data2VecAudioForCTC"),But.forEach(t),RZo=r(oke," (Data2VecAudio model)"),oke.forEach(t),BZo=i(Ve),V0=n(Ve,"LI",{});var rke=s(V0);V_e=n(rke,"STRONG",{});var Put=s(V_e);PZo=r(Put,"hubert"),Put.forEach(t),IZo=r(rke," \u2014 "),HX=n(rke,"A",{href:!0});var Iut=s(HX);qZo=r(Iut,"HubertForCTC"),Iut.forEach(t),NZo=r(rke," (Hubert model)"),rke.forEach(t),jZo=i(Ve),X0=n(Ve,"LI",{});var tke=s(X0);X_e=n(tke,"STRONG",{});var qut=s(X_e);DZo=r(qut,"sew"),qut.forEach(t),GZo=r(tke," \u2014 "),UX=n(tke,"A",{href:!0});var Nut=s(UX);OZo=r(Nut,"SEWForCTC"),Nut.forEach(t),VZo=r(tke," (SEW model)"),tke.forEach(t),XZo=i(Ve),z0=n(Ve,"LI",{});var ake=s(z0);z_e=n(ake,"STRONG",{});var jut=s(z_e);zZo=r(jut,"sew-d"),jut.forEach(t),WZo=r(ake," \u2014 "),JX=n(ake,"A",{href:!0});var Dut=s(JX);QZo=r(Dut,"SEWDForCTC"),Dut.forEach(t),HZo=r(ake," (SEW-D model)"),ake.forEach(t),UZo=i(Ve),W0=n(Ve,"LI",{});var nke=s(W0);W_e=n(nke,"STRONG",{});var Gut=s(W_e);JZo=r(Gut,"unispeech"),Gut.forEach(t),YZo=r(nke," \u2014 "),YX=n(nke,"A",{href:!0});var Out=s(YX);KZo=r(Out,"UniSpeechForCTC"),Out.forEach(t),ZZo=r(nke," (UniSpeech model)"),nke.forEach(t),eer=i(Ve),Q0=n(Ve,"LI",{});var ske=s(Q0);Q_e=n(ske,"STRONG",{});var Vut=s(Q_e);oer=r(Vut,"unispeech-sat"),Vut.forEach(t),rer=r(ske," \u2014 "),KX=n(ske,"A",{href:!0});var Xut=s(KX);ter=r(Xut,"UniSpeechSatForCTC"),Xut.forEach(t),aer=r(ske," (UniSpeechSat model)"),ske.forEach(t),ner=i(Ve),H0=n(Ve,"LI",{});var lke=s(H0);H_e=n(lke,"STRONG",{});var zut=s(H_e);ser=r(zut,"wav2vec2"),zut.forEach(t),ler=r(lke," \u2014 "),ZX=n(lke,"A",{href:!0});var Wut=s(ZX);ier=r(Wut,"Wav2Vec2ForCTC"),Wut.forEach(t),der=r(lke," (Wav2Vec2 model)"),lke.forEach(t),cer=i(Ve),U0=n(Ve,"LI",{});var ike=s(U0);U_e=n(ike,"STRONG",{});var Qut=s(U_e);fer=r(Qut,"wav2vec2-conformer"),Qut.forEach(t),mer=r(ike," \u2014 "),ez=n(ike,"A",{href:!0});var Hut=s(ez);ger=r(Hut,"Wav2Vec2ConformerForCTC"),Hut.forEach(t),her=r(ike," (Wav2Vec2-Conformer model)"),ike.forEach(t),per=i(Ve),J0=n(Ve,"LI",{});var dke=s(J0);J_e=n(dke,"STRONG",{});var Uut=s(J_e);_er=r(Uut,"wavlm"),Uut.forEach(t),uer=r(dke," \u2014 "),oz=n(dke,"A",{href:!0});var Jut=s(oz);ber=r(Jut,"WavLMForCTC"),Jut.forEach(t),ver=r(dke," (WavLM model)"),dke.forEach(t),Ve.forEach(t),Fer=i(_a),Y0=n(_a,"P",{});var cke=s(Y0);Ter=r(cke,"The model is set in evaluation mode by default using "),Y_e=n(cke,"CODE",{});var Yut=s(Y_e);Mer=r(Yut,"model.eval()"),Yut.forEach(t),Eer=r(cke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K_e=n(cke,"CODE",{});var Kut=s(K_e);Cer=r(Kut,"model.train()"),Kut.forEach(t),cke.forEach(t),wer=i(_a),T(K0.$$.fragment,_a),_a.forEach(t),tl.forEach(t),cNe=i(f),bd=n(f,"H2",{class:!0});var hDe=s(bd);Z0=n(hDe,"A",{id:!0,class:!0,href:!0});var Zut=s(Z0);Z_e=n(Zut,"SPAN",{});var e2t=s(Z_e);T(uL.$$.fragment,e2t),e2t.forEach(t),Zut.forEach(t),Aer=i(hDe),eue=n(hDe,"SPAN",{});var o2t=s(eue);yer=r(o2t,"AutoModelForSpeechSeq2Seq"),o2t.forEach(t),hDe.forEach(t),fNe=i(f),Xo=n(f,"DIV",{class:!0});var al=s(Xo);T(bL.$$.fragment,al),Ler=i(al),vd=n(al,"P",{});var xZ=s(vd);xer=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),rz=n(xZ,"A",{href:!0});var r2t=s(rz);$er=r(r2t,"from_pretrained()"),r2t.forEach(t),ker=r(xZ," class method or the "),tz=n(xZ,"A",{href:!0});var t2t=s(tz);Ser=r(t2t,"from_config()"),t2t.forEach(t),Rer=r(xZ,` class
method.`),xZ.forEach(t),Ber=i(al),vL=n(al,"P",{});var pDe=s(vL);Per=r(pDe,"This class cannot be instantiated directly using "),oue=n(pDe,"CODE",{});var a2t=s(oue);Ier=r(a2t,"__init__()"),a2t.forEach(t),qer=r(pDe," (throws an error)."),pDe.forEach(t),Ner=i(al),Ft=n(al,"DIV",{class:!0});var o6=s(Ft);T(FL.$$.fragment,o6),jer=i(o6),rue=n(o6,"P",{});var n2t=s(rue);Der=r(n2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),n2t.forEach(t),Ger=i(o6),Fd=n(o6,"P",{});var $Z=s(Fd);Oer=r($Z,`Note:
Loading a model from its configuration file does `),tue=n($Z,"STRONG",{});var s2t=s(tue);Ver=r(s2t,"not"),s2t.forEach(t),Xer=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),az=n($Z,"A",{href:!0});var l2t=s(az);zer=r(l2t,"from_pretrained()"),l2t.forEach(t),Wer=r($Z," to load the model weights."),$Z.forEach(t),Qer=i(o6),T(eT.$$.fragment,o6),o6.forEach(t),Her=i(al),go=n(al,"DIV",{class:!0});var ua=s(go);T(TL.$$.fragment,ua),Uer=i(ua),aue=n(ua,"P",{});var i2t=s(aue);Jer=r(i2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),i2t.forEach(t),Yer=i(ua),Xa=n(ua,"P",{});var r6=s(Xa);Ker=r(r6,"The model class to instantiate is selected based on the "),nue=n(r6,"CODE",{});var d2t=s(nue);Zer=r(d2t,"model_type"),d2t.forEach(t),eor=r(r6,` property of the config object (either
passed as an argument or loaded from `),sue=n(r6,"CODE",{});var c2t=s(sue);oor=r(c2t,"pretrained_model_name_or_path"),c2t.forEach(t),ror=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lue=n(r6,"CODE",{});var f2t=s(lue);tor=r(f2t,"pretrained_model_name_or_path"),f2t.forEach(t),aor=r(r6,":"),r6.forEach(t),nor=i(ua),ML=n(ua,"UL",{});var _De=s(ML);oT=n(_De,"LI",{});var fke=s(oT);iue=n(fke,"STRONG",{});var m2t=s(iue);sor=r(m2t,"speech-encoder-decoder"),m2t.forEach(t),lor=r(fke," \u2014 "),nz=n(fke,"A",{href:!0});var g2t=s(nz);ior=r(g2t,"SpeechEncoderDecoderModel"),g2t.forEach(t),dor=r(fke," (Speech Encoder decoder model)"),fke.forEach(t),cor=i(_De),rT=n(_De,"LI",{});var mke=s(rT);due=n(mke,"STRONG",{});var h2t=s(due);mor=r(h2t,"speech_to_text"),h2t.forEach(t),gor=r(mke," \u2014 "),sz=n(mke,"A",{href:!0});var p2t=s(sz);hor=r(p2t,"Speech2TextForConditionalGeneration"),p2t.forEach(t),por=r(mke," (Speech2Text model)"),mke.forEach(t),_De.forEach(t),_or=i(ua),tT=n(ua,"P",{});var gke=s(tT);uor=r(gke,"The model is set in evaluation mode by default using "),cue=n(gke,"CODE",{});var _2t=s(cue);bor=r(_2t,"model.eval()"),_2t.forEach(t),vor=r(gke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fue=n(gke,"CODE",{});var u2t=s(fue);For=r(u2t,"model.train()"),u2t.forEach(t),gke.forEach(t),Tor=i(ua),T(aT.$$.fragment,ua),ua.forEach(t),al.forEach(t),mNe=i(f),Td=n(f,"H2",{class:!0});var uDe=s(Td);nT=n(uDe,"A",{id:!0,class:!0,href:!0});var b2t=s(nT);mue=n(b2t,"SPAN",{});var v2t=s(mue);T(EL.$$.fragment,v2t),v2t.forEach(t),b2t.forEach(t),Mor=i(uDe),gue=n(uDe,"SPAN",{});var F2t=s(gue);Eor=r(F2t,"AutoModelForAudioXVector"),F2t.forEach(t),uDe.forEach(t),gNe=i(f),zo=n(f,"DIV",{class:!0});var nl=s(zo);T(CL.$$.fragment,nl),Cor=i(nl),Md=n(nl,"P",{});var kZ=s(Md);wor=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),lz=n(kZ,"A",{href:!0});var T2t=s(lz);Aor=r(T2t,"from_pretrained()"),T2t.forEach(t),yor=r(kZ," class method or the "),iz=n(kZ,"A",{href:!0});var M2t=s(iz);Lor=r(M2t,"from_config()"),M2t.forEach(t),xor=r(kZ,` class
method.`),kZ.forEach(t),$or=i(nl),wL=n(nl,"P",{});var bDe=s(wL);kor=r(bDe,"This class cannot be instantiated directly using "),hue=n(bDe,"CODE",{});var E2t=s(hue);Sor=r(E2t,"__init__()"),E2t.forEach(t),Ror=r(bDe," (throws an error)."),bDe.forEach(t),Bor=i(nl),Tt=n(nl,"DIV",{class:!0});var t6=s(Tt);T(AL.$$.fragment,t6),Por=i(t6),pue=n(t6,"P",{});var C2t=s(pue);Ior=r(C2t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),C2t.forEach(t),qor=i(t6),Ed=n(t6,"P",{});var SZ=s(Ed);Nor=r(SZ,`Note:
Loading a model from its configuration file does `),_ue=n(SZ,"STRONG",{});var w2t=s(_ue);jor=r(w2t,"not"),w2t.forEach(t),Dor=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=n(SZ,"A",{href:!0});var A2t=s(dz);Gor=r(A2t,"from_pretrained()"),A2t.forEach(t),Oor=r(SZ," to load the model weights."),SZ.forEach(t),Vor=i(t6),T(sT.$$.fragment,t6),t6.forEach(t),Xor=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(yL.$$.fragment,ba),zor=i(ba),uue=n(ba,"P",{});var y2t=s(uue);Wor=r(y2t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),y2t.forEach(t),Qor=i(ba),za=n(ba,"P",{});var a6=s(za);Hor=r(a6,"The model class to instantiate is selected based on the "),bue=n(a6,"CODE",{});var L2t=s(bue);Uor=r(L2t,"model_type"),L2t.forEach(t),Jor=r(a6,` property of the config object (either
passed as an argument or loaded from `),vue=n(a6,"CODE",{});var x2t=s(vue);Yor=r(x2t,"pretrained_model_name_or_path"),x2t.forEach(t),Kor=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fue=n(a6,"CODE",{});var $2t=s(Fue);Zor=r($2t,"pretrained_model_name_or_path"),$2t.forEach(t),err=r(a6,":"),a6.forEach(t),orr=i(ba),Zr=n(ba,"UL",{});var sl=s(Zr);lT=n(sl,"LI",{});var hke=s(lT);Tue=n(hke,"STRONG",{});var k2t=s(Tue);rrr=r(k2t,"data2vec-audio"),k2t.forEach(t),trr=r(hke," \u2014 "),cz=n(hke,"A",{href:!0});var S2t=s(cz);arr=r(S2t,"Data2VecAudioForXVector"),S2t.forEach(t),nrr=r(hke," (Data2VecAudio model)"),hke.forEach(t),srr=i(sl),iT=n(sl,"LI",{});var pke=s(iT);Mue=n(pke,"STRONG",{});var R2t=s(Mue);lrr=r(R2t,"unispeech-sat"),R2t.forEach(t),irr=r(pke," \u2014 "),fz=n(pke,"A",{href:!0});var B2t=s(fz);drr=r(B2t,"UniSpeechSatForXVector"),B2t.forEach(t),crr=r(pke," (UniSpeechSat model)"),pke.forEach(t),frr=i(sl),dT=n(sl,"LI",{});var _ke=s(dT);Eue=n(_ke,"STRONG",{});var P2t=s(Eue);mrr=r(P2t,"wav2vec2"),P2t.forEach(t),grr=r(_ke," \u2014 "),mz=n(_ke,"A",{href:!0});var I2t=s(mz);hrr=r(I2t,"Wav2Vec2ForXVector"),I2t.forEach(t),prr=r(_ke," (Wav2Vec2 model)"),_ke.forEach(t),_rr=i(sl),cT=n(sl,"LI",{});var uke=s(cT);Cue=n(uke,"STRONG",{});var q2t=s(Cue);urr=r(q2t,"wav2vec2-conformer"),q2t.forEach(t),brr=r(uke," \u2014 "),gz=n(uke,"A",{href:!0});var N2t=s(gz);vrr=r(N2t,"Wav2Vec2ConformerForXVector"),N2t.forEach(t),Frr=r(uke," (Wav2Vec2-Conformer model)"),uke.forEach(t),Trr=i(sl),fT=n(sl,"LI",{});var bke=s(fT);wue=n(bke,"STRONG",{});var j2t=s(wue);Mrr=r(j2t,"wavlm"),j2t.forEach(t),Err=r(bke," \u2014 "),hz=n(bke,"A",{href:!0});var D2t=s(hz);Crr=r(D2t,"WavLMForXVector"),D2t.forEach(t),wrr=r(bke," (WavLM model)"),bke.forEach(t),sl.forEach(t),Arr=i(ba),mT=n(ba,"P",{});var vke=s(mT);yrr=r(vke,"The model is set in evaluation mode by default using "),Aue=n(vke,"CODE",{});var G2t=s(Aue);Lrr=r(G2t,"model.eval()"),G2t.forEach(t),xrr=r(vke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yue=n(vke,"CODE",{});var O2t=s(yue);$rr=r(O2t,"model.train()"),O2t.forEach(t),vke.forEach(t),krr=i(ba),T(gT.$$.fragment,ba),ba.forEach(t),nl.forEach(t),hNe=i(f),Cd=n(f,"H2",{class:!0});var vDe=s(Cd);hT=n(vDe,"A",{id:!0,class:!0,href:!0});var V2t=s(hT);Lue=n(V2t,"SPAN",{});var X2t=s(Lue);T(LL.$$.fragment,X2t),X2t.forEach(t),V2t.forEach(t),Srr=i(vDe),xue=n(vDe,"SPAN",{});var z2t=s(xue);Rrr=r(z2t,"AutoModelForMaskedImageModeling"),z2t.forEach(t),vDe.forEach(t),pNe=i(f),Wo=n(f,"DIV",{class:!0});var ll=s(Wo);T(xL.$$.fragment,ll),Brr=i(ll),wd=n(ll,"P",{});var RZ=s(wd);Prr=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),pz=n(RZ,"A",{href:!0});var W2t=s(pz);Irr=r(W2t,"from_pretrained()"),W2t.forEach(t),qrr=r(RZ," class method or the "),_z=n(RZ,"A",{href:!0});var Q2t=s(_z);Nrr=r(Q2t,"from_config()"),Q2t.forEach(t),jrr=r(RZ,` class
method.`),RZ.forEach(t),Drr=i(ll),$L=n(ll,"P",{});var FDe=s($L);Grr=r(FDe,"This class cannot be instantiated directly using "),$ue=n(FDe,"CODE",{});var H2t=s($ue);Orr=r(H2t,"__init__()"),H2t.forEach(t),Vrr=r(FDe," (throws an error)."),FDe.forEach(t),Xrr=i(ll),Mt=n(ll,"DIV",{class:!0});var n6=s(Mt);T(kL.$$.fragment,n6),zrr=i(n6),kue=n(n6,"P",{});var U2t=s(kue);Wrr=r(U2t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),U2t.forEach(t),Qrr=i(n6),Ad=n(n6,"P",{});var BZ=s(Ad);Hrr=r(BZ,`Note:
Loading a model from its configuration file does `),Sue=n(BZ,"STRONG",{});var J2t=s(Sue);Urr=r(J2t,"not"),J2t.forEach(t),Jrr=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=n(BZ,"A",{href:!0});var Y2t=s(uz);Yrr=r(Y2t,"from_pretrained()"),Y2t.forEach(t),Krr=r(BZ," to load the model weights."),BZ.forEach(t),Zrr=i(n6),T(pT.$$.fragment,n6),n6.forEach(t),etr=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(SL.$$.fragment,va),otr=i(va),Rue=n(va,"P",{});var K2t=s(Rue);rtr=r(K2t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),K2t.forEach(t),ttr=i(va),Wa=n(va,"P",{});var s6=s(Wa);atr=r(s6,"The model class to instantiate is selected based on the "),Bue=n(s6,"CODE",{});var Z2t=s(Bue);ntr=r(Z2t,"model_type"),Z2t.forEach(t),str=r(s6,` property of the config object (either
passed as an argument or loaded from `),Pue=n(s6,"CODE",{});var e1t=s(Pue);ltr=r(e1t,"pretrained_model_name_or_path"),e1t.forEach(t),itr=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=n(s6,"CODE",{});var o1t=s(Iue);dtr=r(o1t,"pretrained_model_name_or_path"),o1t.forEach(t),ctr=r(s6,":"),s6.forEach(t),ftr=i(va),yd=n(va,"UL",{});var PZ=s(yd);_T=n(PZ,"LI",{});var Fke=s(_T);que=n(Fke,"STRONG",{});var r1t=s(que);mtr=r(r1t,"deit"),r1t.forEach(t),gtr=r(Fke," \u2014 "),bz=n(Fke,"A",{href:!0});var t1t=s(bz);htr=r(t1t,"DeiTForMaskedImageModeling"),t1t.forEach(t),ptr=r(Fke," (DeiT model)"),Fke.forEach(t),_tr=i(PZ),uT=n(PZ,"LI",{});var Tke=s(uT);Nue=n(Tke,"STRONG",{});var a1t=s(Nue);utr=r(a1t,"swin"),a1t.forEach(t),btr=r(Tke," \u2014 "),vz=n(Tke,"A",{href:!0});var n1t=s(vz);vtr=r(n1t,"SwinForMaskedImageModeling"),n1t.forEach(t),Ftr=r(Tke," (Swin model)"),Tke.forEach(t),Ttr=i(PZ),bT=n(PZ,"LI",{});var Mke=s(bT);jue=n(Mke,"STRONG",{});var s1t=s(jue);Mtr=r(s1t,"vit"),s1t.forEach(t),Etr=r(Mke," \u2014 "),Fz=n(Mke,"A",{href:!0});var l1t=s(Fz);Ctr=r(l1t,"ViTForMaskedImageModeling"),l1t.forEach(t),wtr=r(Mke," (ViT model)"),Mke.forEach(t),PZ.forEach(t),Atr=i(va),vT=n(va,"P",{});var Eke=s(vT);ytr=r(Eke,"The model is set in evaluation mode by default using "),Due=n(Eke,"CODE",{});var i1t=s(Due);Ltr=r(i1t,"model.eval()"),i1t.forEach(t),xtr=r(Eke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=n(Eke,"CODE",{});var d1t=s(Gue);$tr=r(d1t,"model.train()"),d1t.forEach(t),Eke.forEach(t),ktr=i(va),T(FT.$$.fragment,va),va.forEach(t),ll.forEach(t),_Ne=i(f),Ld=n(f,"H2",{class:!0});var TDe=s(Ld);TT=n(TDe,"A",{id:!0,class:!0,href:!0});var c1t=s(TT);Oue=n(c1t,"SPAN",{});var f1t=s(Oue);T(RL.$$.fragment,f1t),f1t.forEach(t),c1t.forEach(t),Str=i(TDe),Vue=n(TDe,"SPAN",{});var m1t=s(Vue);Rtr=r(m1t,"AutoModelForObjectDetection"),m1t.forEach(t),TDe.forEach(t),uNe=i(f),Qo=n(f,"DIV",{class:!0});var il=s(Qo);T(BL.$$.fragment,il),Btr=i(il),xd=n(il,"P",{});var IZ=s(xd);Ptr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Tz=n(IZ,"A",{href:!0});var g1t=s(Tz);Itr=r(g1t,"from_pretrained()"),g1t.forEach(t),qtr=r(IZ," class method or the "),Mz=n(IZ,"A",{href:!0});var h1t=s(Mz);Ntr=r(h1t,"from_config()"),h1t.forEach(t),jtr=r(IZ,` class
method.`),IZ.forEach(t),Dtr=i(il),PL=n(il,"P",{});var MDe=s(PL);Gtr=r(MDe,"This class cannot be instantiated directly using "),Xue=n(MDe,"CODE",{});var p1t=s(Xue);Otr=r(p1t,"__init__()"),p1t.forEach(t),Vtr=r(MDe," (throws an error)."),MDe.forEach(t),Xtr=i(il),Et=n(il,"DIV",{class:!0});var l6=s(Et);T(IL.$$.fragment,l6),ztr=i(l6),zue=n(l6,"P",{});var _1t=s(zue);Wtr=r(_1t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),_1t.forEach(t),Qtr=i(l6),$d=n(l6,"P",{});var qZ=s($d);Htr=r(qZ,`Note:
Loading a model from its configuration file does `),Wue=n(qZ,"STRONG",{});var u1t=s(Wue);Utr=r(u1t,"not"),u1t.forEach(t),Jtr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=n(qZ,"A",{href:!0});var b1t=s(Ez);Ytr=r(b1t,"from_pretrained()"),b1t.forEach(t),Ktr=r(qZ," to load the model weights."),qZ.forEach(t),Ztr=i(l6),T(MT.$$.fragment,l6),l6.forEach(t),ear=i(il),_o=n(il,"DIV",{class:!0});var Fa=s(_o);T(qL.$$.fragment,Fa),oar=i(Fa),Que=n(Fa,"P",{});var v1t=s(Que);rar=r(v1t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),v1t.forEach(t),tar=i(Fa),Qa=n(Fa,"P",{});var i6=s(Qa);aar=r(i6,"The model class to instantiate is selected based on the "),Hue=n(i6,"CODE",{});var F1t=s(Hue);nar=r(F1t,"model_type"),F1t.forEach(t),sar=r(i6,` property of the config object (either
passed as an argument or loaded from `),Uue=n(i6,"CODE",{});var T1t=s(Uue);lar=r(T1t,"pretrained_model_name_or_path"),T1t.forEach(t),iar=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=n(i6,"CODE",{});var M1t=s(Jue);dar=r(M1t,"pretrained_model_name_or_path"),M1t.forEach(t),car=r(i6,":"),i6.forEach(t),far=i(Fa),NL=n(Fa,"UL",{});var EDe=s(NL);ET=n(EDe,"LI",{});var Cke=s(ET);Yue=n(Cke,"STRONG",{});var E1t=s(Yue);mar=r(E1t,"detr"),E1t.forEach(t),gar=r(Cke," \u2014 "),Cz=n(Cke,"A",{href:!0});var C1t=s(Cz);har=r(C1t,"DetrForObjectDetection"),C1t.forEach(t),par=r(Cke," (DETR model)"),Cke.forEach(t),_ar=i(EDe),CT=n(EDe,"LI",{});var wke=s(CT);Kue=n(wke,"STRONG",{});var w1t=s(Kue);uar=r(w1t,"yolos"),w1t.forEach(t),bar=r(wke," \u2014 "),wz=n(wke,"A",{href:!0});var A1t=s(wz);Far=r(A1t,"YolosForObjectDetection"),A1t.forEach(t),Tar=r(wke," (YOLOS model)"),wke.forEach(t),EDe.forEach(t),Mar=i(Fa),wT=n(Fa,"P",{});var Ake=s(wT);Ear=r(Ake,"The model is set in evaluation mode by default using "),Zue=n(Ake,"CODE",{});var y1t=s(Zue);Car=r(y1t,"model.eval()"),y1t.forEach(t),war=r(Ake,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e2e=n(Ake,"CODE",{});var L1t=s(e2e);Aar=r(L1t,"model.train()"),L1t.forEach(t),Ake.forEach(t),yar=i(Fa),T(AT.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),bNe=i(f),kd=n(f,"H2",{class:!0});var CDe=s(kd);yT=n(CDe,"A",{id:!0,class:!0,href:!0});var x1t=s(yT);o2e=n(x1t,"SPAN",{});var $1t=s(o2e);T(jL.$$.fragment,$1t),$1t.forEach(t),x1t.forEach(t),Lar=i(CDe),r2e=n(CDe,"SPAN",{});var k1t=s(r2e);xar=r(k1t,"AutoModelForImageSegmentation"),k1t.forEach(t),CDe.forEach(t),vNe=i(f),Ho=n(f,"DIV",{class:!0});var dl=s(Ho);T(DL.$$.fragment,dl),$ar=i(dl),Sd=n(dl,"P",{});var NZ=s(Sd);kar=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Az=n(NZ,"A",{href:!0});var S1t=s(Az);Sar=r(S1t,"from_pretrained()"),S1t.forEach(t),Rar=r(NZ," class method or the "),yz=n(NZ,"A",{href:!0});var R1t=s(yz);Bar=r(R1t,"from_config()"),R1t.forEach(t),Par=r(NZ,` class
method.`),NZ.forEach(t),Iar=i(dl),GL=n(dl,"P",{});var wDe=s(GL);qar=r(wDe,"This class cannot be instantiated directly using "),t2e=n(wDe,"CODE",{});var B1t=s(t2e);Nar=r(B1t,"__init__()"),B1t.forEach(t),jar=r(wDe," (throws an error)."),wDe.forEach(t),Dar=i(dl),Ct=n(dl,"DIV",{class:!0});var d6=s(Ct);T(OL.$$.fragment,d6),Gar=i(d6),a2e=n(d6,"P",{});var P1t=s(a2e);Oar=r(P1t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),P1t.forEach(t),Var=i(d6),Rd=n(d6,"P",{});var jZ=s(Rd);Xar=r(jZ,`Note:
Loading a model from its configuration file does `),n2e=n(jZ,"STRONG",{});var I1t=s(n2e);zar=r(I1t,"not"),I1t.forEach(t),War=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=n(jZ,"A",{href:!0});var q1t=s(Lz);Qar=r(q1t,"from_pretrained()"),q1t.forEach(t),Har=r(jZ," to load the model weights."),jZ.forEach(t),Uar=i(d6),T(LT.$$.fragment,d6),d6.forEach(t),Jar=i(dl),uo=n(dl,"DIV",{class:!0});var Ta=s(uo);T(VL.$$.fragment,Ta),Yar=i(Ta),s2e=n(Ta,"P",{});var N1t=s(s2e);Kar=r(N1t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),N1t.forEach(t),Zar=i(Ta),Ha=n(Ta,"P",{});var c6=s(Ha);enr=r(c6,"The model class to instantiate is selected based on the "),l2e=n(c6,"CODE",{});var j1t=s(l2e);onr=r(j1t,"model_type"),j1t.forEach(t),rnr=r(c6,` property of the config object (either
passed as an argument or loaded from `),i2e=n(c6,"CODE",{});var D1t=s(i2e);tnr=r(D1t,"pretrained_model_name_or_path"),D1t.forEach(t),anr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=n(c6,"CODE",{});var G1t=s(d2e);nnr=r(G1t,"pretrained_model_name_or_path"),G1t.forEach(t),snr=r(c6,":"),c6.forEach(t),lnr=i(Ta),c2e=n(Ta,"UL",{});var O1t=s(c2e);xT=n(O1t,"LI",{});var yke=s(xT);f2e=n(yke,"STRONG",{});var V1t=s(f2e);inr=r(V1t,"detr"),V1t.forEach(t),dnr=r(yke," \u2014 "),xz=n(yke,"A",{href:!0});var X1t=s(xz);cnr=r(X1t,"DetrForSegmentation"),X1t.forEach(t),fnr=r(yke," (DETR model)"),yke.forEach(t),O1t.forEach(t),mnr=i(Ta),$T=n(Ta,"P",{});var Lke=s($T);gnr=r(Lke,"The model is set in evaluation mode by default using "),m2e=n(Lke,"CODE",{});var z1t=s(m2e);hnr=r(z1t,"model.eval()"),z1t.forEach(t),pnr=r(Lke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g2e=n(Lke,"CODE",{});var W1t=s(g2e);_nr=r(W1t,"model.train()"),W1t.forEach(t),Lke.forEach(t),unr=i(Ta),T(kT.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),FNe=i(f),Bd=n(f,"H2",{class:!0});var ADe=s(Bd);ST=n(ADe,"A",{id:!0,class:!0,href:!0});var Q1t=s(ST);h2e=n(Q1t,"SPAN",{});var H1t=s(h2e);T(XL.$$.fragment,H1t),H1t.forEach(t),Q1t.forEach(t),bnr=i(ADe),p2e=n(ADe,"SPAN",{});var U1t=s(p2e);vnr=r(U1t,"AutoModelForSemanticSegmentation"),U1t.forEach(t),ADe.forEach(t),TNe=i(f),Uo=n(f,"DIV",{class:!0});var cl=s(Uo);T(zL.$$.fragment,cl),Fnr=i(cl),Pd=n(cl,"P",{});var DZ=s(Pd);Tnr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),$z=n(DZ,"A",{href:!0});var J1t=s($z);Mnr=r(J1t,"from_pretrained()"),J1t.forEach(t),Enr=r(DZ," class method or the "),kz=n(DZ,"A",{href:!0});var Y1t=s(kz);Cnr=r(Y1t,"from_config()"),Y1t.forEach(t),wnr=r(DZ,` class
method.`),DZ.forEach(t),Anr=i(cl),WL=n(cl,"P",{});var yDe=s(WL);ynr=r(yDe,"This class cannot be instantiated directly using "),_2e=n(yDe,"CODE",{});var K1t=s(_2e);Lnr=r(K1t,"__init__()"),K1t.forEach(t),xnr=r(yDe," (throws an error)."),yDe.forEach(t),$nr=i(cl),wt=n(cl,"DIV",{class:!0});var f6=s(wt);T(QL.$$.fragment,f6),knr=i(f6),u2e=n(f6,"P",{});var Z1t=s(u2e);Snr=r(Z1t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Z1t.forEach(t),Rnr=i(f6),Id=n(f6,"P",{});var GZ=s(Id);Bnr=r(GZ,`Note:
Loading a model from its configuration file does `),b2e=n(GZ,"STRONG",{});var ebt=s(b2e);Pnr=r(ebt,"not"),ebt.forEach(t),Inr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=n(GZ,"A",{href:!0});var obt=s(Sz);qnr=r(obt,"from_pretrained()"),obt.forEach(t),Nnr=r(GZ," to load the model weights."),GZ.forEach(t),jnr=i(f6),T(RT.$$.fragment,f6),f6.forEach(t),Dnr=i(cl),bo=n(cl,"DIV",{class:!0});var Ma=s(bo);T(HL.$$.fragment,Ma),Gnr=i(Ma),v2e=n(Ma,"P",{});var rbt=s(v2e);Onr=r(rbt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),rbt.forEach(t),Vnr=i(Ma),Ua=n(Ma,"P",{});var m6=s(Ua);Xnr=r(m6,"The model class to instantiate is selected based on the "),F2e=n(m6,"CODE",{});var tbt=s(F2e);znr=r(tbt,"model_type"),tbt.forEach(t),Wnr=r(m6,` property of the config object (either
passed as an argument or loaded from `),T2e=n(m6,"CODE",{});var abt=s(T2e);Qnr=r(abt,"pretrained_model_name_or_path"),abt.forEach(t),Hnr=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=n(m6,"CODE",{});var nbt=s(M2e);Unr=r(nbt,"pretrained_model_name_or_path"),nbt.forEach(t),Jnr=r(m6,":"),m6.forEach(t),Ynr=i(Ma),Ja=n(Ma,"UL",{});var g6=s(Ja);BT=n(g6,"LI",{});var xke=s(BT);E2e=n(xke,"STRONG",{});var sbt=s(E2e);Knr=r(sbt,"beit"),sbt.forEach(t),Znr=r(xke," \u2014 "),Rz=n(xke,"A",{href:!0});var lbt=s(Rz);esr=r(lbt,"BeitForSemanticSegmentation"),lbt.forEach(t),osr=r(xke," (BEiT model)"),xke.forEach(t),rsr=i(g6),PT=n(g6,"LI",{});var $ke=s(PT);C2e=n($ke,"STRONG",{});var ibt=s(C2e);tsr=r(ibt,"data2vec-vision"),ibt.forEach(t),asr=r($ke," \u2014 "),Bz=n($ke,"A",{href:!0});var dbt=s(Bz);nsr=r(dbt,"Data2VecVisionForSemanticSegmentation"),dbt.forEach(t),ssr=r($ke," (Data2VecVision model)"),$ke.forEach(t),lsr=i(g6),IT=n(g6,"LI",{});var kke=s(IT);w2e=n(kke,"STRONG",{});var cbt=s(w2e);isr=r(cbt,"dpt"),cbt.forEach(t),dsr=r(kke," \u2014 "),Pz=n(kke,"A",{href:!0});var fbt=s(Pz);csr=r(fbt,"DPTForSemanticSegmentation"),fbt.forEach(t),fsr=r(kke," (DPT model)"),kke.forEach(t),msr=i(g6),qT=n(g6,"LI",{});var Ske=s(qT);A2e=n(Ske,"STRONG",{});var mbt=s(A2e);gsr=r(mbt,"segformer"),mbt.forEach(t),hsr=r(Ske," \u2014 "),Iz=n(Ske,"A",{href:!0});var gbt=s(Iz);psr=r(gbt,"SegformerForSemanticSegmentation"),gbt.forEach(t),_sr=r(Ske," (SegFormer model)"),Ske.forEach(t),g6.forEach(t),usr=i(Ma),NT=n(Ma,"P",{});var Rke=s(NT);bsr=r(Rke,"The model is set in evaluation mode by default using "),y2e=n(Rke,"CODE",{});var hbt=s(y2e);vsr=r(hbt,"model.eval()"),hbt.forEach(t),Fsr=r(Rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L2e=n(Rke,"CODE",{});var pbt=s(L2e);Tsr=r(pbt,"model.train()"),pbt.forEach(t),Rke.forEach(t),Msr=i(Ma),T(jT.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),MNe=i(f),qd=n(f,"H2",{class:!0});var LDe=s(qd);DT=n(LDe,"A",{id:!0,class:!0,href:!0});var _bt=s(DT);x2e=n(_bt,"SPAN",{});var ubt=s(x2e);T(UL.$$.fragment,ubt),ubt.forEach(t),_bt.forEach(t),Esr=i(LDe),$2e=n(LDe,"SPAN",{});var bbt=s($2e);Csr=r(bbt,"AutoModelForInstanceSegmentation"),bbt.forEach(t),LDe.forEach(t),ENe=i(f),Jo=n(f,"DIV",{class:!0});var fl=s(Jo);T(JL.$$.fragment,fl),wsr=i(fl),Nd=n(fl,"P",{});var OZ=s(Nd);Asr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),qz=n(OZ,"A",{href:!0});var vbt=s(qz);ysr=r(vbt,"from_pretrained()"),vbt.forEach(t),Lsr=r(OZ," class method or the "),Nz=n(OZ,"A",{href:!0});var Fbt=s(Nz);xsr=r(Fbt,"from_config()"),Fbt.forEach(t),$sr=r(OZ,` class
method.`),OZ.forEach(t),ksr=i(fl),YL=n(fl,"P",{});var xDe=s(YL);Ssr=r(xDe,"This class cannot be instantiated directly using "),k2e=n(xDe,"CODE",{});var Tbt=s(k2e);Rsr=r(Tbt,"__init__()"),Tbt.forEach(t),Bsr=r(xDe," (throws an error)."),xDe.forEach(t),Psr=i(fl),At=n(fl,"DIV",{class:!0});var h6=s(At);T(KL.$$.fragment,h6),Isr=i(h6),S2e=n(h6,"P",{});var Mbt=s(S2e);qsr=r(Mbt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Mbt.forEach(t),Nsr=i(h6),jd=n(h6,"P",{});var VZ=s(jd);jsr=r(VZ,`Note:
Loading a model from its configuration file does `),R2e=n(VZ,"STRONG",{});var Ebt=s(R2e);Dsr=r(Ebt,"not"),Ebt.forEach(t),Gsr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=n(VZ,"A",{href:!0});var Cbt=s(jz);Osr=r(Cbt,"from_pretrained()"),Cbt.forEach(t),Vsr=r(VZ," to load the model weights."),VZ.forEach(t),Xsr=i(h6),T(GT.$$.fragment,h6),h6.forEach(t),zsr=i(fl),vo=n(fl,"DIV",{class:!0});var Ea=s(vo);T(ZL.$$.fragment,Ea),Wsr=i(Ea),B2e=n(Ea,"P",{});var wbt=s(B2e);Qsr=r(wbt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),wbt.forEach(t),Hsr=i(Ea),Ya=n(Ea,"P",{});var p6=s(Ya);Usr=r(p6,"The model class to instantiate is selected based on the "),P2e=n(p6,"CODE",{});var Abt=s(P2e);Jsr=r(Abt,"model_type"),Abt.forEach(t),Ysr=r(p6,` property of the config object (either
passed as an argument or loaded from `),I2e=n(p6,"CODE",{});var ybt=s(I2e);Ksr=r(ybt,"pretrained_model_name_or_path"),ybt.forEach(t),Zsr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=n(p6,"CODE",{});var Lbt=s(q2e);elr=r(Lbt,"pretrained_model_name_or_path"),Lbt.forEach(t),olr=r(p6,":"),p6.forEach(t),rlr=i(Ea),N2e=n(Ea,"UL",{});var xbt=s(N2e);OT=n(xbt,"LI",{});var Bke=s(OT);j2e=n(Bke,"STRONG",{});var $bt=s(j2e);tlr=r($bt,"maskformer"),$bt.forEach(t),alr=r(Bke," \u2014 "),Dz=n(Bke,"A",{href:!0});var kbt=s(Dz);nlr=r(kbt,"MaskFormerForInstanceSegmentation"),kbt.forEach(t),slr=r(Bke," (MaskFormer model)"),Bke.forEach(t),xbt.forEach(t),llr=i(Ea),VT=n(Ea,"P",{});var Pke=s(VT);ilr=r(Pke,"The model is set in evaluation mode by default using "),D2e=n(Pke,"CODE",{});var Sbt=s(D2e);dlr=r(Sbt,"model.eval()"),Sbt.forEach(t),clr=r(Pke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G2e=n(Pke,"CODE",{});var Rbt=s(G2e);flr=r(Rbt,"model.train()"),Rbt.forEach(t),Pke.forEach(t),mlr=i(Ea),T(XT.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),CNe=i(f),Dd=n(f,"H2",{class:!0});var $De=s(Dd);zT=n($De,"A",{id:!0,class:!0,href:!0});var Bbt=s(zT);O2e=n(Bbt,"SPAN",{});var Pbt=s(O2e);T(e8.$$.fragment,Pbt),Pbt.forEach(t),Bbt.forEach(t),glr=i($De),V2e=n($De,"SPAN",{});var Ibt=s(V2e);hlr=r(Ibt,"TFAutoModel"),Ibt.forEach(t),$De.forEach(t),wNe=i(f),Yo=n(f,"DIV",{class:!0});var ml=s(Yo);T(o8.$$.fragment,ml),plr=i(ml),Gd=n(ml,"P",{});var XZ=s(Gd);_lr=r(XZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Gz=n(XZ,"A",{href:!0});var qbt=s(Gz);ulr=r(qbt,"from_pretrained()"),qbt.forEach(t),blr=r(XZ," class method or the "),Oz=n(XZ,"A",{href:!0});var Nbt=s(Oz);vlr=r(Nbt,"from_config()"),Nbt.forEach(t),Flr=r(XZ,` class
method.`),XZ.forEach(t),Tlr=i(ml),r8=n(ml,"P",{});var kDe=s(r8);Mlr=r(kDe,"This class cannot be instantiated directly using "),X2e=n(kDe,"CODE",{});var jbt=s(X2e);Elr=r(jbt,"__init__()"),jbt.forEach(t),Clr=r(kDe," (throws an error)."),kDe.forEach(t),wlr=i(ml),yt=n(ml,"DIV",{class:!0});var _6=s(yt);T(t8.$$.fragment,_6),Alr=i(_6),z2e=n(_6,"P",{});var Dbt=s(z2e);ylr=r(Dbt,"Instantiates one of the base model classes of the library from a configuration."),Dbt.forEach(t),Llr=i(_6),Od=n(_6,"P",{});var zZ=s(Od);xlr=r(zZ,`Note:
Loading a model from its configuration file does `),W2e=n(zZ,"STRONG",{});var Gbt=s(W2e);$lr=r(Gbt,"not"),Gbt.forEach(t),klr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(zZ,"A",{href:!0});var Obt=s(Vz);Slr=r(Obt,"from_pretrained()"),Obt.forEach(t),Rlr=r(zZ," to load the model weights."),zZ.forEach(t),Blr=i(_6),T(WT.$$.fragment,_6),_6.forEach(t),Plr=i(ml),wr=n(ml,"DIV",{class:!0});var gl=s(wr);T(a8.$$.fragment,gl),Ilr=i(gl),Q2e=n(gl,"P",{});var Vbt=s(Q2e);qlr=r(Vbt,"Instantiate one of the base model classes of the library from a pretrained model."),Vbt.forEach(t),Nlr=i(gl),Ka=n(gl,"P",{});var u6=s(Ka);jlr=r(u6,"The model class to instantiate is selected based on the "),H2e=n(u6,"CODE",{});var Xbt=s(H2e);Dlr=r(Xbt,"model_type"),Xbt.forEach(t),Glr=r(u6,` property of the config object (either
passed as an argument or loaded from `),U2e=n(u6,"CODE",{});var zbt=s(U2e);Olr=r(zbt,"pretrained_model_name_or_path"),zbt.forEach(t),Vlr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=n(u6,"CODE",{});var Wbt=s(J2e);Xlr=r(Wbt,"pretrained_model_name_or_path"),Wbt.forEach(t),zlr=r(u6,":"),u6.forEach(t),Wlr=i(gl),N=n(gl,"UL",{});var D=s(N);QT=n(D,"LI",{});var Ike=s(QT);Y2e=n(Ike,"STRONG",{});var Qbt=s(Y2e);Qlr=r(Qbt,"albert"),Qbt.forEach(t),Hlr=r(Ike," \u2014 "),Xz=n(Ike,"A",{href:!0});var Hbt=s(Xz);Ulr=r(Hbt,"TFAlbertModel"),Hbt.forEach(t),Jlr=r(Ike," (ALBERT model)"),Ike.forEach(t),Ylr=i(D),HT=n(D,"LI",{});var qke=s(HT);K2e=n(qke,"STRONG",{});var Ubt=s(K2e);Klr=r(Ubt,"bart"),Ubt.forEach(t),Zlr=r(qke," \u2014 "),zz=n(qke,"A",{href:!0});var Jbt=s(zz);eir=r(Jbt,"TFBartModel"),Jbt.forEach(t),oir=r(qke," (BART model)"),qke.forEach(t),rir=i(D),UT=n(D,"LI",{});var Nke=s(UT);Z2e=n(Nke,"STRONG",{});var Ybt=s(Z2e);tir=r(Ybt,"bert"),Ybt.forEach(t),air=r(Nke," \u2014 "),Wz=n(Nke,"A",{href:!0});var Kbt=s(Wz);nir=r(Kbt,"TFBertModel"),Kbt.forEach(t),sir=r(Nke," (BERT model)"),Nke.forEach(t),lir=i(D),JT=n(D,"LI",{});var jke=s(JT);e1e=n(jke,"STRONG",{});var Zbt=s(e1e);iir=r(Zbt,"blenderbot"),Zbt.forEach(t),dir=r(jke," \u2014 "),Qz=n(jke,"A",{href:!0});var evt=s(Qz);cir=r(evt,"TFBlenderbotModel"),evt.forEach(t),fir=r(jke," (Blenderbot model)"),jke.forEach(t),mir=i(D),YT=n(D,"LI",{});var Dke=s(YT);o1e=n(Dke,"STRONG",{});var ovt=s(o1e);gir=r(ovt,"blenderbot-small"),ovt.forEach(t),hir=r(Dke," \u2014 "),Hz=n(Dke,"A",{href:!0});var rvt=s(Hz);pir=r(rvt,"TFBlenderbotSmallModel"),rvt.forEach(t),_ir=r(Dke," (BlenderbotSmall model)"),Dke.forEach(t),uir=i(D),KT=n(D,"LI",{});var Gke=s(KT);r1e=n(Gke,"STRONG",{});var tvt=s(r1e);bir=r(tvt,"camembert"),tvt.forEach(t),vir=r(Gke," \u2014 "),Uz=n(Gke,"A",{href:!0});var avt=s(Uz);Fir=r(avt,"TFCamembertModel"),avt.forEach(t),Tir=r(Gke," (CamemBERT model)"),Gke.forEach(t),Mir=i(D),ZT=n(D,"LI",{});var Oke=s(ZT);t1e=n(Oke,"STRONG",{});var nvt=s(t1e);Eir=r(nvt,"clip"),nvt.forEach(t),Cir=r(Oke," \u2014 "),Jz=n(Oke,"A",{href:!0});var svt=s(Jz);wir=r(svt,"TFCLIPModel"),svt.forEach(t),Air=r(Oke," (CLIP model)"),Oke.forEach(t),yir=i(D),e7=n(D,"LI",{});var Vke=s(e7);a1e=n(Vke,"STRONG",{});var lvt=s(a1e);Lir=r(lvt,"convbert"),lvt.forEach(t),xir=r(Vke," \u2014 "),Yz=n(Vke,"A",{href:!0});var ivt=s(Yz);$ir=r(ivt,"TFConvBertModel"),ivt.forEach(t),kir=r(Vke," (ConvBERT model)"),Vke.forEach(t),Sir=i(D),o7=n(D,"LI",{});var Xke=s(o7);n1e=n(Xke,"STRONG",{});var dvt=s(n1e);Rir=r(dvt,"convnext"),dvt.forEach(t),Bir=r(Xke," \u2014 "),Kz=n(Xke,"A",{href:!0});var cvt=s(Kz);Pir=r(cvt,"TFConvNextModel"),cvt.forEach(t),Iir=r(Xke," (ConvNext model)"),Xke.forEach(t),qir=i(D),r7=n(D,"LI",{});var zke=s(r7);s1e=n(zke,"STRONG",{});var fvt=s(s1e);Nir=r(fvt,"ctrl"),fvt.forEach(t),jir=r(zke," \u2014 "),Zz=n(zke,"A",{href:!0});var mvt=s(Zz);Dir=r(mvt,"TFCTRLModel"),mvt.forEach(t),Gir=r(zke," (CTRL model)"),zke.forEach(t),Oir=i(D),t7=n(D,"LI",{});var Wke=s(t7);l1e=n(Wke,"STRONG",{});var gvt=s(l1e);Vir=r(gvt,"data2vec-vision"),gvt.forEach(t),Xir=r(Wke," \u2014 "),eW=n(Wke,"A",{href:!0});var hvt=s(eW);zir=r(hvt,"TFData2VecVisionModel"),hvt.forEach(t),Wir=r(Wke," (Data2VecVision model)"),Wke.forEach(t),Qir=i(D),a7=n(D,"LI",{});var Qke=s(a7);i1e=n(Qke,"STRONG",{});var pvt=s(i1e);Hir=r(pvt,"deberta"),pvt.forEach(t),Uir=r(Qke," \u2014 "),oW=n(Qke,"A",{href:!0});var _vt=s(oW);Jir=r(_vt,"TFDebertaModel"),_vt.forEach(t),Yir=r(Qke," (DeBERTa model)"),Qke.forEach(t),Kir=i(D),n7=n(D,"LI",{});var Hke=s(n7);d1e=n(Hke,"STRONG",{});var uvt=s(d1e);Zir=r(uvt,"deberta-v2"),uvt.forEach(t),edr=r(Hke," \u2014 "),rW=n(Hke,"A",{href:!0});var bvt=s(rW);odr=r(bvt,"TFDebertaV2Model"),bvt.forEach(t),rdr=r(Hke," (DeBERTa-v2 model)"),Hke.forEach(t),tdr=i(D),s7=n(D,"LI",{});var Uke=s(s7);c1e=n(Uke,"STRONG",{});var vvt=s(c1e);adr=r(vvt,"distilbert"),vvt.forEach(t),ndr=r(Uke," \u2014 "),tW=n(Uke,"A",{href:!0});var Fvt=s(tW);sdr=r(Fvt,"TFDistilBertModel"),Fvt.forEach(t),ldr=r(Uke," (DistilBERT model)"),Uke.forEach(t),idr=i(D),l7=n(D,"LI",{});var Jke=s(l7);f1e=n(Jke,"STRONG",{});var Tvt=s(f1e);ddr=r(Tvt,"dpr"),Tvt.forEach(t),cdr=r(Jke," \u2014 "),aW=n(Jke,"A",{href:!0});var Mvt=s(aW);fdr=r(Mvt,"TFDPRQuestionEncoder"),Mvt.forEach(t),mdr=r(Jke," (DPR model)"),Jke.forEach(t),gdr=i(D),i7=n(D,"LI",{});var Yke=s(i7);m1e=n(Yke,"STRONG",{});var Evt=s(m1e);hdr=r(Evt,"electra"),Evt.forEach(t),pdr=r(Yke," \u2014 "),nW=n(Yke,"A",{href:!0});var Cvt=s(nW);_dr=r(Cvt,"TFElectraModel"),Cvt.forEach(t),udr=r(Yke," (ELECTRA model)"),Yke.forEach(t),bdr=i(D),d7=n(D,"LI",{});var Kke=s(d7);g1e=n(Kke,"STRONG",{});var wvt=s(g1e);vdr=r(wvt,"flaubert"),wvt.forEach(t),Fdr=r(Kke," \u2014 "),sW=n(Kke,"A",{href:!0});var Avt=s(sW);Tdr=r(Avt,"TFFlaubertModel"),Avt.forEach(t),Mdr=r(Kke," (FlauBERT model)"),Kke.forEach(t),Edr=i(D),Ps=n(D,"LI",{});var P$=s(Ps);h1e=n(P$,"STRONG",{});var yvt=s(h1e);Cdr=r(yvt,"funnel"),yvt.forEach(t),wdr=r(P$," \u2014 "),lW=n(P$,"A",{href:!0});var Lvt=s(lW);Adr=r(Lvt,"TFFunnelModel"),Lvt.forEach(t),ydr=r(P$," or "),iW=n(P$,"A",{href:!0});var xvt=s(iW);Ldr=r(xvt,"TFFunnelBaseModel"),xvt.forEach(t),xdr=r(P$," (Funnel Transformer model)"),P$.forEach(t),$dr=i(D),c7=n(D,"LI",{});var Zke=s(c7);p1e=n(Zke,"STRONG",{});var $vt=s(p1e);kdr=r($vt,"gpt2"),$vt.forEach(t),Sdr=r(Zke," \u2014 "),dW=n(Zke,"A",{href:!0});var kvt=s(dW);Rdr=r(kvt,"TFGPT2Model"),kvt.forEach(t),Bdr=r(Zke," (OpenAI GPT-2 model)"),Zke.forEach(t),Pdr=i(D),f7=n(D,"LI",{});var eSe=s(f7);_1e=n(eSe,"STRONG",{});var Svt=s(_1e);Idr=r(Svt,"gptj"),Svt.forEach(t),qdr=r(eSe," \u2014 "),cW=n(eSe,"A",{href:!0});var Rvt=s(cW);Ndr=r(Rvt,"TFGPTJModel"),Rvt.forEach(t),jdr=r(eSe," (GPT-J model)"),eSe.forEach(t),Ddr=i(D),m7=n(D,"LI",{});var oSe=s(m7);u1e=n(oSe,"STRONG",{});var Bvt=s(u1e);Gdr=r(Bvt,"hubert"),Bvt.forEach(t),Odr=r(oSe," \u2014 "),fW=n(oSe,"A",{href:!0});var Pvt=s(fW);Vdr=r(Pvt,"TFHubertModel"),Pvt.forEach(t),Xdr=r(oSe," (Hubert model)"),oSe.forEach(t),zdr=i(D),g7=n(D,"LI",{});var rSe=s(g7);b1e=n(rSe,"STRONG",{});var Ivt=s(b1e);Wdr=r(Ivt,"layoutlm"),Ivt.forEach(t),Qdr=r(rSe," \u2014 "),mW=n(rSe,"A",{href:!0});var qvt=s(mW);Hdr=r(qvt,"TFLayoutLMModel"),qvt.forEach(t),Udr=r(rSe," (LayoutLM model)"),rSe.forEach(t),Jdr=i(D),h7=n(D,"LI",{});var tSe=s(h7);v1e=n(tSe,"STRONG",{});var Nvt=s(v1e);Ydr=r(Nvt,"led"),Nvt.forEach(t),Kdr=r(tSe," \u2014 "),gW=n(tSe,"A",{href:!0});var jvt=s(gW);Zdr=r(jvt,"TFLEDModel"),jvt.forEach(t),ecr=r(tSe," (LED model)"),tSe.forEach(t),ocr=i(D),p7=n(D,"LI",{});var aSe=s(p7);F1e=n(aSe,"STRONG",{});var Dvt=s(F1e);rcr=r(Dvt,"longformer"),Dvt.forEach(t),tcr=r(aSe," \u2014 "),hW=n(aSe,"A",{href:!0});var Gvt=s(hW);acr=r(Gvt,"TFLongformerModel"),Gvt.forEach(t),ncr=r(aSe," (Longformer model)"),aSe.forEach(t),scr=i(D),_7=n(D,"LI",{});var nSe=s(_7);T1e=n(nSe,"STRONG",{});var Ovt=s(T1e);lcr=r(Ovt,"lxmert"),Ovt.forEach(t),icr=r(nSe," \u2014 "),pW=n(nSe,"A",{href:!0});var Vvt=s(pW);dcr=r(Vvt,"TFLxmertModel"),Vvt.forEach(t),ccr=r(nSe," (LXMERT model)"),nSe.forEach(t),fcr=i(D),u7=n(D,"LI",{});var sSe=s(u7);M1e=n(sSe,"STRONG",{});var Xvt=s(M1e);mcr=r(Xvt,"marian"),Xvt.forEach(t),gcr=r(sSe," \u2014 "),_W=n(sSe,"A",{href:!0});var zvt=s(_W);hcr=r(zvt,"TFMarianModel"),zvt.forEach(t),pcr=r(sSe," (Marian model)"),sSe.forEach(t),_cr=i(D),b7=n(D,"LI",{});var lSe=s(b7);E1e=n(lSe,"STRONG",{});var Wvt=s(E1e);ucr=r(Wvt,"mbart"),Wvt.forEach(t),bcr=r(lSe," \u2014 "),uW=n(lSe,"A",{href:!0});var Qvt=s(uW);vcr=r(Qvt,"TFMBartModel"),Qvt.forEach(t),Fcr=r(lSe," (mBART model)"),lSe.forEach(t),Tcr=i(D),v7=n(D,"LI",{});var iSe=s(v7);C1e=n(iSe,"STRONG",{});var Hvt=s(C1e);Mcr=r(Hvt,"mobilebert"),Hvt.forEach(t),Ecr=r(iSe," \u2014 "),bW=n(iSe,"A",{href:!0});var Uvt=s(bW);Ccr=r(Uvt,"TFMobileBertModel"),Uvt.forEach(t),wcr=r(iSe," (MobileBERT model)"),iSe.forEach(t),Acr=i(D),F7=n(D,"LI",{});var dSe=s(F7);w1e=n(dSe,"STRONG",{});var Jvt=s(w1e);ycr=r(Jvt,"mpnet"),Jvt.forEach(t),Lcr=r(dSe," \u2014 "),vW=n(dSe,"A",{href:!0});var Yvt=s(vW);xcr=r(Yvt,"TFMPNetModel"),Yvt.forEach(t),$cr=r(dSe," (MPNet model)"),dSe.forEach(t),kcr=i(D),T7=n(D,"LI",{});var cSe=s(T7);A1e=n(cSe,"STRONG",{});var Kvt=s(A1e);Scr=r(Kvt,"mt5"),Kvt.forEach(t),Rcr=r(cSe," \u2014 "),FW=n(cSe,"A",{href:!0});var Zvt=s(FW);Bcr=r(Zvt,"TFMT5Model"),Zvt.forEach(t),Pcr=r(cSe," (mT5 model)"),cSe.forEach(t),Icr=i(D),M7=n(D,"LI",{});var fSe=s(M7);y1e=n(fSe,"STRONG",{});var eFt=s(y1e);qcr=r(eFt,"openai-gpt"),eFt.forEach(t),Ncr=r(fSe," \u2014 "),TW=n(fSe,"A",{href:!0});var oFt=s(TW);jcr=r(oFt,"TFOpenAIGPTModel"),oFt.forEach(t),Dcr=r(fSe," (OpenAI GPT model)"),fSe.forEach(t),Gcr=i(D),E7=n(D,"LI",{});var mSe=s(E7);L1e=n(mSe,"STRONG",{});var rFt=s(L1e);Ocr=r(rFt,"pegasus"),rFt.forEach(t),Vcr=r(mSe," \u2014 "),MW=n(mSe,"A",{href:!0});var tFt=s(MW);Xcr=r(tFt,"TFPegasusModel"),tFt.forEach(t),zcr=r(mSe," (Pegasus model)"),mSe.forEach(t),Wcr=i(D),C7=n(D,"LI",{});var gSe=s(C7);x1e=n(gSe,"STRONG",{});var aFt=s(x1e);Qcr=r(aFt,"rembert"),aFt.forEach(t),Hcr=r(gSe," \u2014 "),EW=n(gSe,"A",{href:!0});var nFt=s(EW);Ucr=r(nFt,"TFRemBertModel"),nFt.forEach(t),Jcr=r(gSe," (RemBERT model)"),gSe.forEach(t),Ycr=i(D),w7=n(D,"LI",{});var hSe=s(w7);$1e=n(hSe,"STRONG",{});var sFt=s($1e);Kcr=r(sFt,"roberta"),sFt.forEach(t),Zcr=r(hSe," \u2014 "),CW=n(hSe,"A",{href:!0});var lFt=s(CW);efr=r(lFt,"TFRobertaModel"),lFt.forEach(t),ofr=r(hSe," (RoBERTa model)"),hSe.forEach(t),rfr=i(D),A7=n(D,"LI",{});var pSe=s(A7);k1e=n(pSe,"STRONG",{});var iFt=s(k1e);tfr=r(iFt,"roformer"),iFt.forEach(t),afr=r(pSe," \u2014 "),wW=n(pSe,"A",{href:!0});var dFt=s(wW);nfr=r(dFt,"TFRoFormerModel"),dFt.forEach(t),sfr=r(pSe," (RoFormer model)"),pSe.forEach(t),lfr=i(D),y7=n(D,"LI",{});var _Se=s(y7);S1e=n(_Se,"STRONG",{});var cFt=s(S1e);ifr=r(cFt,"speech_to_text"),cFt.forEach(t),dfr=r(_Se," \u2014 "),AW=n(_Se,"A",{href:!0});var fFt=s(AW);cfr=r(fFt,"TFSpeech2TextModel"),fFt.forEach(t),ffr=r(_Se," (Speech2Text model)"),_Se.forEach(t),mfr=i(D),L7=n(D,"LI",{});var uSe=s(L7);R1e=n(uSe,"STRONG",{});var mFt=s(R1e);gfr=r(mFt,"swin"),mFt.forEach(t),hfr=r(uSe," \u2014 "),yW=n(uSe,"A",{href:!0});var gFt=s(yW);pfr=r(gFt,"TFSwinModel"),gFt.forEach(t),_fr=r(uSe," (Swin model)"),uSe.forEach(t),ufr=i(D),x7=n(D,"LI",{});var bSe=s(x7);B1e=n(bSe,"STRONG",{});var hFt=s(B1e);bfr=r(hFt,"t5"),hFt.forEach(t),vfr=r(bSe," \u2014 "),LW=n(bSe,"A",{href:!0});var pFt=s(LW);Ffr=r(pFt,"TFT5Model"),pFt.forEach(t),Tfr=r(bSe," (T5 model)"),bSe.forEach(t),Mfr=i(D),$7=n(D,"LI",{});var vSe=s($7);P1e=n(vSe,"STRONG",{});var _Ft=s(P1e);Efr=r(_Ft,"tapas"),_Ft.forEach(t),Cfr=r(vSe," \u2014 "),xW=n(vSe,"A",{href:!0});var uFt=s(xW);wfr=r(uFt,"TFTapasModel"),uFt.forEach(t),Afr=r(vSe," (TAPAS model)"),vSe.forEach(t),yfr=i(D),k7=n(D,"LI",{});var FSe=s(k7);I1e=n(FSe,"STRONG",{});var bFt=s(I1e);Lfr=r(bFt,"transfo-xl"),bFt.forEach(t),xfr=r(FSe," \u2014 "),$W=n(FSe,"A",{href:!0});var vFt=s($W);$fr=r(vFt,"TFTransfoXLModel"),vFt.forEach(t),kfr=r(FSe," (Transformer-XL model)"),FSe.forEach(t),Sfr=i(D),S7=n(D,"LI",{});var TSe=s(S7);q1e=n(TSe,"STRONG",{});var FFt=s(q1e);Rfr=r(FFt,"vit"),FFt.forEach(t),Bfr=r(TSe," \u2014 "),kW=n(TSe,"A",{href:!0});var TFt=s(kW);Pfr=r(TFt,"TFViTModel"),TFt.forEach(t),Ifr=r(TSe," (ViT model)"),TSe.forEach(t),qfr=i(D),R7=n(D,"LI",{});var MSe=s(R7);N1e=n(MSe,"STRONG",{});var MFt=s(N1e);Nfr=r(MFt,"vit_mae"),MFt.forEach(t),jfr=r(MSe," \u2014 "),SW=n(MSe,"A",{href:!0});var EFt=s(SW);Dfr=r(EFt,"TFViTMAEModel"),EFt.forEach(t),Gfr=r(MSe," (ViTMAE model)"),MSe.forEach(t),Ofr=i(D),B7=n(D,"LI",{});var ESe=s(B7);j1e=n(ESe,"STRONG",{});var CFt=s(j1e);Vfr=r(CFt,"wav2vec2"),CFt.forEach(t),Xfr=r(ESe," \u2014 "),RW=n(ESe,"A",{href:!0});var wFt=s(RW);zfr=r(wFt,"TFWav2Vec2Model"),wFt.forEach(t),Wfr=r(ESe," (Wav2Vec2 model)"),ESe.forEach(t),Qfr=i(D),P7=n(D,"LI",{});var CSe=s(P7);D1e=n(CSe,"STRONG",{});var AFt=s(D1e);Hfr=r(AFt,"xlm"),AFt.forEach(t),Ufr=r(CSe," \u2014 "),BW=n(CSe,"A",{href:!0});var yFt=s(BW);Jfr=r(yFt,"TFXLMModel"),yFt.forEach(t),Yfr=r(CSe," (XLM model)"),CSe.forEach(t),Kfr=i(D),I7=n(D,"LI",{});var wSe=s(I7);G1e=n(wSe,"STRONG",{});var LFt=s(G1e);Zfr=r(LFt,"xlm-roberta"),LFt.forEach(t),emr=r(wSe," \u2014 "),PW=n(wSe,"A",{href:!0});var xFt=s(PW);omr=r(xFt,"TFXLMRobertaModel"),xFt.forEach(t),rmr=r(wSe," (XLM-RoBERTa model)"),wSe.forEach(t),tmr=i(D),q7=n(D,"LI",{});var ASe=s(q7);O1e=n(ASe,"STRONG",{});var $Ft=s(O1e);amr=r($Ft,"xlnet"),$Ft.forEach(t),nmr=r(ASe," \u2014 "),IW=n(ASe,"A",{href:!0});var kFt=s(IW);smr=r(kFt,"TFXLNetModel"),kFt.forEach(t),lmr=r(ASe," (XLNet model)"),ASe.forEach(t),D.forEach(t),imr=i(gl),T(N7.$$.fragment,gl),gl.forEach(t),ml.forEach(t),ANe=i(f),Vd=n(f,"H2",{class:!0});var SDe=s(Vd);j7=n(SDe,"A",{id:!0,class:!0,href:!0});var SFt=s(j7);V1e=n(SFt,"SPAN",{});var RFt=s(V1e);T(n8.$$.fragment,RFt),RFt.forEach(t),SFt.forEach(t),dmr=i(SDe),X1e=n(SDe,"SPAN",{});var BFt=s(X1e);cmr=r(BFt,"TFAutoModelForPreTraining"),BFt.forEach(t),SDe.forEach(t),yNe=i(f),Ko=n(f,"DIV",{class:!0});var hl=s(Ko);T(s8.$$.fragment,hl),fmr=i(hl),Xd=n(hl,"P",{});var WZ=s(Xd);mmr=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),qW=n(WZ,"A",{href:!0});var PFt=s(qW);gmr=r(PFt,"from_pretrained()"),PFt.forEach(t),hmr=r(WZ," class method or the "),NW=n(WZ,"A",{href:!0});var IFt=s(NW);pmr=r(IFt,"from_config()"),IFt.forEach(t),_mr=r(WZ,` class
method.`),WZ.forEach(t),umr=i(hl),l8=n(hl,"P",{});var RDe=s(l8);bmr=r(RDe,"This class cannot be instantiated directly using "),z1e=n(RDe,"CODE",{});var qFt=s(z1e);vmr=r(qFt,"__init__()"),qFt.forEach(t),Fmr=r(RDe," (throws an error)."),RDe.forEach(t),Tmr=i(hl),Lt=n(hl,"DIV",{class:!0});var b6=s(Lt);T(i8.$$.fragment,b6),Mmr=i(b6),W1e=n(b6,"P",{});var NFt=s(W1e);Emr=r(NFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),NFt.forEach(t),Cmr=i(b6),zd=n(b6,"P",{});var QZ=s(zd);wmr=r(QZ,`Note:
Loading a model from its configuration file does `),Q1e=n(QZ,"STRONG",{});var jFt=s(Q1e);Amr=r(jFt,"not"),jFt.forEach(t),ymr=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=n(QZ,"A",{href:!0});var DFt=s(jW);Lmr=r(DFt,"from_pretrained()"),DFt.forEach(t),xmr=r(QZ," to load the model weights."),QZ.forEach(t),$mr=i(b6),T(D7.$$.fragment,b6),b6.forEach(t),kmr=i(hl),Ar=n(hl,"DIV",{class:!0});var pl=s(Ar);T(d8.$$.fragment,pl),Smr=i(pl),H1e=n(pl,"P",{});var GFt=s(H1e);Rmr=r(GFt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),GFt.forEach(t),Bmr=i(pl),Za=n(pl,"P",{});var v6=s(Za);Pmr=r(v6,"The model class to instantiate is selected based on the "),U1e=n(v6,"CODE",{});var OFt=s(U1e);Imr=r(OFt,"model_type"),OFt.forEach(t),qmr=r(v6,` property of the config object (either
passed as an argument or loaded from `),J1e=n(v6,"CODE",{});var VFt=s(J1e);Nmr=r(VFt,"pretrained_model_name_or_path"),VFt.forEach(t),jmr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=n(v6,"CODE",{});var XFt=s(Y1e);Dmr=r(XFt,"pretrained_model_name_or_path"),XFt.forEach(t),Gmr=r(v6,":"),v6.forEach(t),Omr=i(pl),se=n(pl,"UL",{});var le=s(se);G7=n(le,"LI",{});var ySe=s(G7);K1e=n(ySe,"STRONG",{});var zFt=s(K1e);Vmr=r(zFt,"albert"),zFt.forEach(t),Xmr=r(ySe," \u2014 "),DW=n(ySe,"A",{href:!0});var WFt=s(DW);zmr=r(WFt,"TFAlbertForPreTraining"),WFt.forEach(t),Wmr=r(ySe," (ALBERT model)"),ySe.forEach(t),Qmr=i(le),O7=n(le,"LI",{});var LSe=s(O7);Z1e=n(LSe,"STRONG",{});var QFt=s(Z1e);Hmr=r(QFt,"bart"),QFt.forEach(t),Umr=r(LSe," \u2014 "),GW=n(LSe,"A",{href:!0});var HFt=s(GW);Jmr=r(HFt,"TFBartForConditionalGeneration"),HFt.forEach(t),Ymr=r(LSe," (BART model)"),LSe.forEach(t),Kmr=i(le),V7=n(le,"LI",{});var xSe=s(V7);ebe=n(xSe,"STRONG",{});var UFt=s(ebe);Zmr=r(UFt,"bert"),UFt.forEach(t),egr=r(xSe," \u2014 "),OW=n(xSe,"A",{href:!0});var JFt=s(OW);ogr=r(JFt,"TFBertForPreTraining"),JFt.forEach(t),rgr=r(xSe," (BERT model)"),xSe.forEach(t),tgr=i(le),X7=n(le,"LI",{});var $Se=s(X7);obe=n($Se,"STRONG",{});var YFt=s(obe);agr=r(YFt,"camembert"),YFt.forEach(t),ngr=r($Se," \u2014 "),VW=n($Se,"A",{href:!0});var KFt=s(VW);sgr=r(KFt,"TFCamembertForMaskedLM"),KFt.forEach(t),lgr=r($Se," (CamemBERT model)"),$Se.forEach(t),igr=i(le),z7=n(le,"LI",{});var kSe=s(z7);rbe=n(kSe,"STRONG",{});var ZFt=s(rbe);dgr=r(ZFt,"ctrl"),ZFt.forEach(t),cgr=r(kSe," \u2014 "),XW=n(kSe,"A",{href:!0});var e0t=s(XW);fgr=r(e0t,"TFCTRLLMHeadModel"),e0t.forEach(t),mgr=r(kSe," (CTRL model)"),kSe.forEach(t),ggr=i(le),W7=n(le,"LI",{});var SSe=s(W7);tbe=n(SSe,"STRONG",{});var o0t=s(tbe);hgr=r(o0t,"distilbert"),o0t.forEach(t),pgr=r(SSe," \u2014 "),zW=n(SSe,"A",{href:!0});var r0t=s(zW);_gr=r(r0t,"TFDistilBertForMaskedLM"),r0t.forEach(t),ugr=r(SSe," (DistilBERT model)"),SSe.forEach(t),bgr=i(le),Q7=n(le,"LI",{});var RSe=s(Q7);abe=n(RSe,"STRONG",{});var t0t=s(abe);vgr=r(t0t,"electra"),t0t.forEach(t),Fgr=r(RSe," \u2014 "),WW=n(RSe,"A",{href:!0});var a0t=s(WW);Tgr=r(a0t,"TFElectraForPreTraining"),a0t.forEach(t),Mgr=r(RSe," (ELECTRA model)"),RSe.forEach(t),Egr=i(le),H7=n(le,"LI",{});var BSe=s(H7);nbe=n(BSe,"STRONG",{});var n0t=s(nbe);Cgr=r(n0t,"flaubert"),n0t.forEach(t),wgr=r(BSe," \u2014 "),QW=n(BSe,"A",{href:!0});var s0t=s(QW);Agr=r(s0t,"TFFlaubertWithLMHeadModel"),s0t.forEach(t),ygr=r(BSe," (FlauBERT model)"),BSe.forEach(t),Lgr=i(le),U7=n(le,"LI",{});var PSe=s(U7);sbe=n(PSe,"STRONG",{});var l0t=s(sbe);xgr=r(l0t,"funnel"),l0t.forEach(t),$gr=r(PSe," \u2014 "),HW=n(PSe,"A",{href:!0});var i0t=s(HW);kgr=r(i0t,"TFFunnelForPreTraining"),i0t.forEach(t),Sgr=r(PSe," (Funnel Transformer model)"),PSe.forEach(t),Rgr=i(le),J7=n(le,"LI",{});var ISe=s(J7);lbe=n(ISe,"STRONG",{});var d0t=s(lbe);Bgr=r(d0t,"gpt2"),d0t.forEach(t),Pgr=r(ISe," \u2014 "),UW=n(ISe,"A",{href:!0});var c0t=s(UW);Igr=r(c0t,"TFGPT2LMHeadModel"),c0t.forEach(t),qgr=r(ISe," (OpenAI GPT-2 model)"),ISe.forEach(t),Ngr=i(le),Y7=n(le,"LI",{});var qSe=s(Y7);ibe=n(qSe,"STRONG",{});var f0t=s(ibe);jgr=r(f0t,"layoutlm"),f0t.forEach(t),Dgr=r(qSe," \u2014 "),JW=n(qSe,"A",{href:!0});var m0t=s(JW);Ggr=r(m0t,"TFLayoutLMForMaskedLM"),m0t.forEach(t),Ogr=r(qSe," (LayoutLM model)"),qSe.forEach(t),Vgr=i(le),K7=n(le,"LI",{});var NSe=s(K7);dbe=n(NSe,"STRONG",{});var g0t=s(dbe);Xgr=r(g0t,"lxmert"),g0t.forEach(t),zgr=r(NSe," \u2014 "),YW=n(NSe,"A",{href:!0});var h0t=s(YW);Wgr=r(h0t,"TFLxmertForPreTraining"),h0t.forEach(t),Qgr=r(NSe," (LXMERT model)"),NSe.forEach(t),Hgr=i(le),Z7=n(le,"LI",{});var jSe=s(Z7);cbe=n(jSe,"STRONG",{});var p0t=s(cbe);Ugr=r(p0t,"mobilebert"),p0t.forEach(t),Jgr=r(jSe," \u2014 "),KW=n(jSe,"A",{href:!0});var _0t=s(KW);Ygr=r(_0t,"TFMobileBertForPreTraining"),_0t.forEach(t),Kgr=r(jSe," (MobileBERT model)"),jSe.forEach(t),Zgr=i(le),eM=n(le,"LI",{});var DSe=s(eM);fbe=n(DSe,"STRONG",{});var u0t=s(fbe);ehr=r(u0t,"mpnet"),u0t.forEach(t),ohr=r(DSe," \u2014 "),ZW=n(DSe,"A",{href:!0});var b0t=s(ZW);rhr=r(b0t,"TFMPNetForMaskedLM"),b0t.forEach(t),thr=r(DSe," (MPNet model)"),DSe.forEach(t),ahr=i(le),oM=n(le,"LI",{});var GSe=s(oM);mbe=n(GSe,"STRONG",{});var v0t=s(mbe);nhr=r(v0t,"openai-gpt"),v0t.forEach(t),shr=r(GSe," \u2014 "),eQ=n(GSe,"A",{href:!0});var F0t=s(eQ);lhr=r(F0t,"TFOpenAIGPTLMHeadModel"),F0t.forEach(t),ihr=r(GSe," (OpenAI GPT model)"),GSe.forEach(t),dhr=i(le),rM=n(le,"LI",{});var OSe=s(rM);gbe=n(OSe,"STRONG",{});var T0t=s(gbe);chr=r(T0t,"roberta"),T0t.forEach(t),fhr=r(OSe," \u2014 "),oQ=n(OSe,"A",{href:!0});var M0t=s(oQ);mhr=r(M0t,"TFRobertaForMaskedLM"),M0t.forEach(t),ghr=r(OSe," (RoBERTa model)"),OSe.forEach(t),hhr=i(le),tM=n(le,"LI",{});var VSe=s(tM);hbe=n(VSe,"STRONG",{});var E0t=s(hbe);phr=r(E0t,"t5"),E0t.forEach(t),_hr=r(VSe," \u2014 "),rQ=n(VSe,"A",{href:!0});var C0t=s(rQ);uhr=r(C0t,"TFT5ForConditionalGeneration"),C0t.forEach(t),bhr=r(VSe," (T5 model)"),VSe.forEach(t),vhr=i(le),aM=n(le,"LI",{});var XSe=s(aM);pbe=n(XSe,"STRONG",{});var w0t=s(pbe);Fhr=r(w0t,"tapas"),w0t.forEach(t),Thr=r(XSe," \u2014 "),tQ=n(XSe,"A",{href:!0});var A0t=s(tQ);Mhr=r(A0t,"TFTapasForMaskedLM"),A0t.forEach(t),Ehr=r(XSe," (TAPAS model)"),XSe.forEach(t),Chr=i(le),nM=n(le,"LI",{});var zSe=s(nM);_be=n(zSe,"STRONG",{});var y0t=s(_be);whr=r(y0t,"transfo-xl"),y0t.forEach(t),Ahr=r(zSe," \u2014 "),aQ=n(zSe,"A",{href:!0});var L0t=s(aQ);yhr=r(L0t,"TFTransfoXLLMHeadModel"),L0t.forEach(t),Lhr=r(zSe," (Transformer-XL model)"),zSe.forEach(t),xhr=i(le),sM=n(le,"LI",{});var WSe=s(sM);ube=n(WSe,"STRONG",{});var x0t=s(ube);$hr=r(x0t,"vit_mae"),x0t.forEach(t),khr=r(WSe," \u2014 "),nQ=n(WSe,"A",{href:!0});var $0t=s(nQ);Shr=r($0t,"TFViTMAEForPreTraining"),$0t.forEach(t),Rhr=r(WSe," (ViTMAE model)"),WSe.forEach(t),Bhr=i(le),lM=n(le,"LI",{});var QSe=s(lM);bbe=n(QSe,"STRONG",{});var k0t=s(bbe);Phr=r(k0t,"xlm"),k0t.forEach(t),Ihr=r(QSe," \u2014 "),sQ=n(QSe,"A",{href:!0});var S0t=s(sQ);qhr=r(S0t,"TFXLMWithLMHeadModel"),S0t.forEach(t),Nhr=r(QSe," (XLM model)"),QSe.forEach(t),jhr=i(le),iM=n(le,"LI",{});var HSe=s(iM);vbe=n(HSe,"STRONG",{});var R0t=s(vbe);Dhr=r(R0t,"xlm-roberta"),R0t.forEach(t),Ghr=r(HSe," \u2014 "),lQ=n(HSe,"A",{href:!0});var B0t=s(lQ);Ohr=r(B0t,"TFXLMRobertaForMaskedLM"),B0t.forEach(t),Vhr=r(HSe," (XLM-RoBERTa model)"),HSe.forEach(t),Xhr=i(le),dM=n(le,"LI",{});var USe=s(dM);Fbe=n(USe,"STRONG",{});var P0t=s(Fbe);zhr=r(P0t,"xlnet"),P0t.forEach(t),Whr=r(USe," \u2014 "),iQ=n(USe,"A",{href:!0});var I0t=s(iQ);Qhr=r(I0t,"TFXLNetLMHeadModel"),I0t.forEach(t),Hhr=r(USe," (XLNet model)"),USe.forEach(t),le.forEach(t),Uhr=i(pl),T(cM.$$.fragment,pl),pl.forEach(t),hl.forEach(t),LNe=i(f),Wd=n(f,"H2",{class:!0});var BDe=s(Wd);fM=n(BDe,"A",{id:!0,class:!0,href:!0});var q0t=s(fM);Tbe=n(q0t,"SPAN",{});var N0t=s(Tbe);T(c8.$$.fragment,N0t),N0t.forEach(t),q0t.forEach(t),Jhr=i(BDe),Mbe=n(BDe,"SPAN",{});var j0t=s(Mbe);Yhr=r(j0t,"TFAutoModelForCausalLM"),j0t.forEach(t),BDe.forEach(t),xNe=i(f),Zo=n(f,"DIV",{class:!0});var _l=s(Zo);T(f8.$$.fragment,_l),Khr=i(_l),Qd=n(_l,"P",{});var HZ=s(Qd);Zhr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dQ=n(HZ,"A",{href:!0});var D0t=s(dQ);epr=r(D0t,"from_pretrained()"),D0t.forEach(t),opr=r(HZ," class method or the "),cQ=n(HZ,"A",{href:!0});var G0t=s(cQ);rpr=r(G0t,"from_config()"),G0t.forEach(t),tpr=r(HZ,` class
method.`),HZ.forEach(t),apr=i(_l),m8=n(_l,"P",{});var PDe=s(m8);npr=r(PDe,"This class cannot be instantiated directly using "),Ebe=n(PDe,"CODE",{});var O0t=s(Ebe);spr=r(O0t,"__init__()"),O0t.forEach(t),lpr=r(PDe," (throws an error)."),PDe.forEach(t),ipr=i(_l),xt=n(_l,"DIV",{class:!0});var F6=s(xt);T(g8.$$.fragment,F6),dpr=i(F6),Cbe=n(F6,"P",{});var V0t=s(Cbe);cpr=r(V0t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),V0t.forEach(t),fpr=i(F6),Hd=n(F6,"P",{});var UZ=s(Hd);mpr=r(UZ,`Note:
Loading a model from its configuration file does `),wbe=n(UZ,"STRONG",{});var X0t=s(wbe);gpr=r(X0t,"not"),X0t.forEach(t),hpr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=n(UZ,"A",{href:!0});var z0t=s(fQ);ppr=r(z0t,"from_pretrained()"),z0t.forEach(t),_pr=r(UZ," to load the model weights."),UZ.forEach(t),upr=i(F6),T(mM.$$.fragment,F6),F6.forEach(t),bpr=i(_l),yr=n(_l,"DIV",{class:!0});var ul=s(yr);T(h8.$$.fragment,ul),vpr=i(ul),Abe=n(ul,"P",{});var W0t=s(Abe);Fpr=r(W0t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),W0t.forEach(t),Tpr=i(ul),en=n(ul,"P",{});var T6=s(en);Mpr=r(T6,"The model class to instantiate is selected based on the "),ybe=n(T6,"CODE",{});var Q0t=s(ybe);Epr=r(Q0t,"model_type"),Q0t.forEach(t),Cpr=r(T6,` property of the config object (either
passed as an argument or loaded from `),Lbe=n(T6,"CODE",{});var H0t=s(Lbe);wpr=r(H0t,"pretrained_model_name_or_path"),H0t.forEach(t),Apr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=n(T6,"CODE",{});var U0t=s(xbe);ypr=r(U0t,"pretrained_model_name_or_path"),U0t.forEach(t),Lpr=r(T6,":"),T6.forEach(t),xpr=i(ul),Me=n(ul,"UL",{});var Ce=s(Me);gM=n(Ce,"LI",{});var JSe=s(gM);$be=n(JSe,"STRONG",{});var J0t=s($be);$pr=r(J0t,"bert"),J0t.forEach(t),kpr=r(JSe," \u2014 "),mQ=n(JSe,"A",{href:!0});var Y0t=s(mQ);Spr=r(Y0t,"TFBertLMHeadModel"),Y0t.forEach(t),Rpr=r(JSe," (BERT model)"),JSe.forEach(t),Bpr=i(Ce),hM=n(Ce,"LI",{});var YSe=s(hM);kbe=n(YSe,"STRONG",{});var K0t=s(kbe);Ppr=r(K0t,"camembert"),K0t.forEach(t),Ipr=r(YSe," \u2014 "),gQ=n(YSe,"A",{href:!0});var Z0t=s(gQ);qpr=r(Z0t,"TFCamembertForCausalLM"),Z0t.forEach(t),Npr=r(YSe," (CamemBERT model)"),YSe.forEach(t),jpr=i(Ce),pM=n(Ce,"LI",{});var KSe=s(pM);Sbe=n(KSe,"STRONG",{});var eTt=s(Sbe);Dpr=r(eTt,"ctrl"),eTt.forEach(t),Gpr=r(KSe," \u2014 "),hQ=n(KSe,"A",{href:!0});var oTt=s(hQ);Opr=r(oTt,"TFCTRLLMHeadModel"),oTt.forEach(t),Vpr=r(KSe," (CTRL model)"),KSe.forEach(t),Xpr=i(Ce),_M=n(Ce,"LI",{});var ZSe=s(_M);Rbe=n(ZSe,"STRONG",{});var rTt=s(Rbe);zpr=r(rTt,"gpt2"),rTt.forEach(t),Wpr=r(ZSe," \u2014 "),pQ=n(ZSe,"A",{href:!0});var tTt=s(pQ);Qpr=r(tTt,"TFGPT2LMHeadModel"),tTt.forEach(t),Hpr=r(ZSe," (OpenAI GPT-2 model)"),ZSe.forEach(t),Upr=i(Ce),uM=n(Ce,"LI",{});var eRe=s(uM);Bbe=n(eRe,"STRONG",{});var aTt=s(Bbe);Jpr=r(aTt,"gptj"),aTt.forEach(t),Ypr=r(eRe," \u2014 "),_Q=n(eRe,"A",{href:!0});var nTt=s(_Q);Kpr=r(nTt,"TFGPTJForCausalLM"),nTt.forEach(t),Zpr=r(eRe," (GPT-J model)"),eRe.forEach(t),e_r=i(Ce),bM=n(Ce,"LI",{});var oRe=s(bM);Pbe=n(oRe,"STRONG",{});var sTt=s(Pbe);o_r=r(sTt,"openai-gpt"),sTt.forEach(t),r_r=r(oRe," \u2014 "),uQ=n(oRe,"A",{href:!0});var lTt=s(uQ);t_r=r(lTt,"TFOpenAIGPTLMHeadModel"),lTt.forEach(t),a_r=r(oRe," (OpenAI GPT model)"),oRe.forEach(t),n_r=i(Ce),vM=n(Ce,"LI",{});var rRe=s(vM);Ibe=n(rRe,"STRONG",{});var iTt=s(Ibe);s_r=r(iTt,"rembert"),iTt.forEach(t),l_r=r(rRe," \u2014 "),bQ=n(rRe,"A",{href:!0});var dTt=s(bQ);i_r=r(dTt,"TFRemBertForCausalLM"),dTt.forEach(t),d_r=r(rRe," (RemBERT model)"),rRe.forEach(t),c_r=i(Ce),FM=n(Ce,"LI",{});var tRe=s(FM);qbe=n(tRe,"STRONG",{});var cTt=s(qbe);f_r=r(cTt,"roberta"),cTt.forEach(t),m_r=r(tRe," \u2014 "),vQ=n(tRe,"A",{href:!0});var fTt=s(vQ);g_r=r(fTt,"TFRobertaForCausalLM"),fTt.forEach(t),h_r=r(tRe," (RoBERTa model)"),tRe.forEach(t),p_r=i(Ce),TM=n(Ce,"LI",{});var aRe=s(TM);Nbe=n(aRe,"STRONG",{});var mTt=s(Nbe);__r=r(mTt,"roformer"),mTt.forEach(t),u_r=r(aRe," \u2014 "),FQ=n(aRe,"A",{href:!0});var gTt=s(FQ);b_r=r(gTt,"TFRoFormerForCausalLM"),gTt.forEach(t),v_r=r(aRe," (RoFormer model)"),aRe.forEach(t),F_r=i(Ce),MM=n(Ce,"LI",{});var nRe=s(MM);jbe=n(nRe,"STRONG",{});var hTt=s(jbe);T_r=r(hTt,"transfo-xl"),hTt.forEach(t),M_r=r(nRe," \u2014 "),TQ=n(nRe,"A",{href:!0});var pTt=s(TQ);E_r=r(pTt,"TFTransfoXLLMHeadModel"),pTt.forEach(t),C_r=r(nRe," (Transformer-XL model)"),nRe.forEach(t),w_r=i(Ce),EM=n(Ce,"LI",{});var sRe=s(EM);Dbe=n(sRe,"STRONG",{});var _Tt=s(Dbe);A_r=r(_Tt,"xlm"),_Tt.forEach(t),y_r=r(sRe," \u2014 "),MQ=n(sRe,"A",{href:!0});var uTt=s(MQ);L_r=r(uTt,"TFXLMWithLMHeadModel"),uTt.forEach(t),x_r=r(sRe," (XLM model)"),sRe.forEach(t),$_r=i(Ce),CM=n(Ce,"LI",{});var lRe=s(CM);Gbe=n(lRe,"STRONG",{});var bTt=s(Gbe);k_r=r(bTt,"xlnet"),bTt.forEach(t),S_r=r(lRe," \u2014 "),EQ=n(lRe,"A",{href:!0});var vTt=s(EQ);R_r=r(vTt,"TFXLNetLMHeadModel"),vTt.forEach(t),B_r=r(lRe," (XLNet model)"),lRe.forEach(t),Ce.forEach(t),P_r=i(ul),T(wM.$$.fragment,ul),ul.forEach(t),_l.forEach(t),$Ne=i(f),Ud=n(f,"H2",{class:!0});var IDe=s(Ud);AM=n(IDe,"A",{id:!0,class:!0,href:!0});var FTt=s(AM);Obe=n(FTt,"SPAN",{});var TTt=s(Obe);T(p8.$$.fragment,TTt),TTt.forEach(t),FTt.forEach(t),I_r=i(IDe),Vbe=n(IDe,"SPAN",{});var MTt=s(Vbe);q_r=r(MTt,"TFAutoModelForImageClassification"),MTt.forEach(t),IDe.forEach(t),kNe=i(f),er=n(f,"DIV",{class:!0});var bl=s(er);T(_8.$$.fragment,bl),N_r=i(bl),Jd=n(bl,"P",{});var JZ=s(Jd);j_r=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CQ=n(JZ,"A",{href:!0});var ETt=s(CQ);D_r=r(ETt,"from_pretrained()"),ETt.forEach(t),G_r=r(JZ," class method or the "),wQ=n(JZ,"A",{href:!0});var CTt=s(wQ);O_r=r(CTt,"from_config()"),CTt.forEach(t),V_r=r(JZ,` class
method.`),JZ.forEach(t),X_r=i(bl),u8=n(bl,"P",{});var qDe=s(u8);z_r=r(qDe,"This class cannot be instantiated directly using "),Xbe=n(qDe,"CODE",{});var wTt=s(Xbe);W_r=r(wTt,"__init__()"),wTt.forEach(t),Q_r=r(qDe," (throws an error)."),qDe.forEach(t),H_r=i(bl),$t=n(bl,"DIV",{class:!0});var M6=s($t);T(b8.$$.fragment,M6),U_r=i(M6),zbe=n(M6,"P",{});var ATt=s(zbe);J_r=r(ATt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ATt.forEach(t),Y_r=i(M6),Yd=n(M6,"P",{});var YZ=s(Yd);K_r=r(YZ,`Note:
Loading a model from its configuration file does `),Wbe=n(YZ,"STRONG",{});var yTt=s(Wbe);Z_r=r(yTt,"not"),yTt.forEach(t),eur=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AQ=n(YZ,"A",{href:!0});var LTt=s(AQ);our=r(LTt,"from_pretrained()"),LTt.forEach(t),rur=r(YZ," to load the model weights."),YZ.forEach(t),tur=i(M6),T(yM.$$.fragment,M6),M6.forEach(t),aur=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(v8.$$.fragment,vl),nur=i(vl),Qbe=n(vl,"P",{});var xTt=s(Qbe);sur=r(xTt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xTt.forEach(t),lur=i(vl),on=n(vl,"P",{});var E6=s(on);iur=r(E6,"The model class to instantiate is selected based on the "),Hbe=n(E6,"CODE",{});var $Tt=s(Hbe);dur=r($Tt,"model_type"),$Tt.forEach(t),cur=r(E6,` property of the config object (either
passed as an argument or loaded from `),Ube=n(E6,"CODE",{});var kTt=s(Ube);fur=r(kTt,"pretrained_model_name_or_path"),kTt.forEach(t),mur=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=n(E6,"CODE",{});var STt=s(Jbe);gur=r(STt,"pretrained_model_name_or_path"),STt.forEach(t),hur=r(E6,":"),E6.forEach(t),pur=i(vl),rn=n(vl,"UL",{});var C6=s(rn);LM=n(C6,"LI",{});var iRe=s(LM);Ybe=n(iRe,"STRONG",{});var RTt=s(Ybe);_ur=r(RTt,"convnext"),RTt.forEach(t),uur=r(iRe," \u2014 "),yQ=n(iRe,"A",{href:!0});var BTt=s(yQ);bur=r(BTt,"TFConvNextForImageClassification"),BTt.forEach(t),vur=r(iRe," (ConvNext model)"),iRe.forEach(t),Fur=i(C6),xM=n(C6,"LI",{});var dRe=s(xM);Kbe=n(dRe,"STRONG",{});var PTt=s(Kbe);Tur=r(PTt,"data2vec-vision"),PTt.forEach(t),Mur=r(dRe," \u2014 "),LQ=n(dRe,"A",{href:!0});var ITt=s(LQ);Eur=r(ITt,"TFData2VecVisionForImageClassification"),ITt.forEach(t),Cur=r(dRe," (Data2VecVision model)"),dRe.forEach(t),wur=i(C6),$M=n(C6,"LI",{});var cRe=s($M);Zbe=n(cRe,"STRONG",{});var qTt=s(Zbe);Aur=r(qTt,"swin"),qTt.forEach(t),yur=r(cRe," \u2014 "),xQ=n(cRe,"A",{href:!0});var NTt=s(xQ);Lur=r(NTt,"TFSwinForImageClassification"),NTt.forEach(t),xur=r(cRe," (Swin model)"),cRe.forEach(t),$ur=i(C6),kM=n(C6,"LI",{});var fRe=s(kM);eve=n(fRe,"STRONG",{});var jTt=s(eve);kur=r(jTt,"vit"),jTt.forEach(t),Sur=r(fRe," \u2014 "),$Q=n(fRe,"A",{href:!0});var DTt=s($Q);Rur=r(DTt,"TFViTForImageClassification"),DTt.forEach(t),Bur=r(fRe," (ViT model)"),fRe.forEach(t),C6.forEach(t),Pur=i(vl),T(SM.$$.fragment,vl),vl.forEach(t),bl.forEach(t),SNe=i(f),Kd=n(f,"H2",{class:!0});var NDe=s(Kd);RM=n(NDe,"A",{id:!0,class:!0,href:!0});var GTt=s(RM);ove=n(GTt,"SPAN",{});var OTt=s(ove);T(F8.$$.fragment,OTt),OTt.forEach(t),GTt.forEach(t),Iur=i(NDe),rve=n(NDe,"SPAN",{});var VTt=s(rve);qur=r(VTt,"TFAutoModelForMaskedLM"),VTt.forEach(t),NDe.forEach(t),RNe=i(f),or=n(f,"DIV",{class:!0});var Fl=s(or);T(T8.$$.fragment,Fl),Nur=i(Fl),Zd=n(Fl,"P",{});var KZ=s(Zd);jur=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kQ=n(KZ,"A",{href:!0});var XTt=s(kQ);Dur=r(XTt,"from_pretrained()"),XTt.forEach(t),Gur=r(KZ," class method or the "),SQ=n(KZ,"A",{href:!0});var zTt=s(SQ);Our=r(zTt,"from_config()"),zTt.forEach(t),Vur=r(KZ,` class
method.`),KZ.forEach(t),Xur=i(Fl),M8=n(Fl,"P",{});var jDe=s(M8);zur=r(jDe,"This class cannot be instantiated directly using "),tve=n(jDe,"CODE",{});var WTt=s(tve);Wur=r(WTt,"__init__()"),WTt.forEach(t),Qur=r(jDe," (throws an error)."),jDe.forEach(t),Hur=i(Fl),kt=n(Fl,"DIV",{class:!0});var w6=s(kt);T(E8.$$.fragment,w6),Uur=i(w6),ave=n(w6,"P",{});var QTt=s(ave);Jur=r(QTt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),QTt.forEach(t),Yur=i(w6),ec=n(w6,"P",{});var ZZ=s(ec);Kur=r(ZZ,`Note:
Loading a model from its configuration file does `),nve=n(ZZ,"STRONG",{});var HTt=s(nve);Zur=r(HTt,"not"),HTt.forEach(t),e2r=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=n(ZZ,"A",{href:!0});var UTt=s(RQ);o2r=r(UTt,"from_pretrained()"),UTt.forEach(t),r2r=r(ZZ," to load the model weights."),ZZ.forEach(t),t2r=i(w6),T(BM.$$.fragment,w6),w6.forEach(t),a2r=i(Fl),xr=n(Fl,"DIV",{class:!0});var Tl=s(xr);T(C8.$$.fragment,Tl),n2r=i(Tl),sve=n(Tl,"P",{});var JTt=s(sve);s2r=r(JTt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),JTt.forEach(t),l2r=i(Tl),tn=n(Tl,"P",{});var A6=s(tn);i2r=r(A6,"The model class to instantiate is selected based on the "),lve=n(A6,"CODE",{});var YTt=s(lve);d2r=r(YTt,"model_type"),YTt.forEach(t),c2r=r(A6,` property of the config object (either
passed as an argument or loaded from `),ive=n(A6,"CODE",{});var KTt=s(ive);f2r=r(KTt,"pretrained_model_name_or_path"),KTt.forEach(t),m2r=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=n(A6,"CODE",{});var ZTt=s(dve);g2r=r(ZTt,"pretrained_model_name_or_path"),ZTt.forEach(t),h2r=r(A6,":"),A6.forEach(t),p2r=i(Tl),ie=n(Tl,"UL",{});var fe=s(ie);PM=n(fe,"LI",{});var mRe=s(PM);cve=n(mRe,"STRONG",{});var e7t=s(cve);_2r=r(e7t,"albert"),e7t.forEach(t),u2r=r(mRe," \u2014 "),BQ=n(mRe,"A",{href:!0});var o7t=s(BQ);b2r=r(o7t,"TFAlbertForMaskedLM"),o7t.forEach(t),v2r=r(mRe," (ALBERT model)"),mRe.forEach(t),F2r=i(fe),IM=n(fe,"LI",{});var gRe=s(IM);fve=n(gRe,"STRONG",{});var r7t=s(fve);T2r=r(r7t,"bert"),r7t.forEach(t),M2r=r(gRe," \u2014 "),PQ=n(gRe,"A",{href:!0});var t7t=s(PQ);E2r=r(t7t,"TFBertForMaskedLM"),t7t.forEach(t),C2r=r(gRe," (BERT model)"),gRe.forEach(t),w2r=i(fe),qM=n(fe,"LI",{});var hRe=s(qM);mve=n(hRe,"STRONG",{});var a7t=s(mve);A2r=r(a7t,"camembert"),a7t.forEach(t),y2r=r(hRe," \u2014 "),IQ=n(hRe,"A",{href:!0});var n7t=s(IQ);L2r=r(n7t,"TFCamembertForMaskedLM"),n7t.forEach(t),x2r=r(hRe," (CamemBERT model)"),hRe.forEach(t),$2r=i(fe),NM=n(fe,"LI",{});var pRe=s(NM);gve=n(pRe,"STRONG",{});var s7t=s(gve);k2r=r(s7t,"convbert"),s7t.forEach(t),S2r=r(pRe," \u2014 "),qQ=n(pRe,"A",{href:!0});var l7t=s(qQ);R2r=r(l7t,"TFConvBertForMaskedLM"),l7t.forEach(t),B2r=r(pRe," (ConvBERT model)"),pRe.forEach(t),P2r=i(fe),jM=n(fe,"LI",{});var _Re=s(jM);hve=n(_Re,"STRONG",{});var i7t=s(hve);I2r=r(i7t,"deberta"),i7t.forEach(t),q2r=r(_Re," \u2014 "),NQ=n(_Re,"A",{href:!0});var d7t=s(NQ);N2r=r(d7t,"TFDebertaForMaskedLM"),d7t.forEach(t),j2r=r(_Re," (DeBERTa model)"),_Re.forEach(t),D2r=i(fe),DM=n(fe,"LI",{});var uRe=s(DM);pve=n(uRe,"STRONG",{});var c7t=s(pve);G2r=r(c7t,"deberta-v2"),c7t.forEach(t),O2r=r(uRe," \u2014 "),jQ=n(uRe,"A",{href:!0});var f7t=s(jQ);V2r=r(f7t,"TFDebertaV2ForMaskedLM"),f7t.forEach(t),X2r=r(uRe," (DeBERTa-v2 model)"),uRe.forEach(t),z2r=i(fe),GM=n(fe,"LI",{});var bRe=s(GM);_ve=n(bRe,"STRONG",{});var m7t=s(_ve);W2r=r(m7t,"distilbert"),m7t.forEach(t),Q2r=r(bRe," \u2014 "),DQ=n(bRe,"A",{href:!0});var g7t=s(DQ);H2r=r(g7t,"TFDistilBertForMaskedLM"),g7t.forEach(t),U2r=r(bRe," (DistilBERT model)"),bRe.forEach(t),J2r=i(fe),OM=n(fe,"LI",{});var vRe=s(OM);uve=n(vRe,"STRONG",{});var h7t=s(uve);Y2r=r(h7t,"electra"),h7t.forEach(t),K2r=r(vRe," \u2014 "),GQ=n(vRe,"A",{href:!0});var p7t=s(GQ);Z2r=r(p7t,"TFElectraForMaskedLM"),p7t.forEach(t),e1r=r(vRe," (ELECTRA model)"),vRe.forEach(t),o1r=i(fe),VM=n(fe,"LI",{});var FRe=s(VM);bve=n(FRe,"STRONG",{});var _7t=s(bve);r1r=r(_7t,"flaubert"),_7t.forEach(t),t1r=r(FRe," \u2014 "),OQ=n(FRe,"A",{href:!0});var u7t=s(OQ);a1r=r(u7t,"TFFlaubertWithLMHeadModel"),u7t.forEach(t),n1r=r(FRe," (FlauBERT model)"),FRe.forEach(t),s1r=i(fe),XM=n(fe,"LI",{});var TRe=s(XM);vve=n(TRe,"STRONG",{});var b7t=s(vve);l1r=r(b7t,"funnel"),b7t.forEach(t),i1r=r(TRe," \u2014 "),VQ=n(TRe,"A",{href:!0});var v7t=s(VQ);d1r=r(v7t,"TFFunnelForMaskedLM"),v7t.forEach(t),c1r=r(TRe," (Funnel Transformer model)"),TRe.forEach(t),f1r=i(fe),zM=n(fe,"LI",{});var MRe=s(zM);Fve=n(MRe,"STRONG",{});var F7t=s(Fve);m1r=r(F7t,"layoutlm"),F7t.forEach(t),g1r=r(MRe," \u2014 "),XQ=n(MRe,"A",{href:!0});var T7t=s(XQ);h1r=r(T7t,"TFLayoutLMForMaskedLM"),T7t.forEach(t),p1r=r(MRe," (LayoutLM model)"),MRe.forEach(t),_1r=i(fe),WM=n(fe,"LI",{});var ERe=s(WM);Tve=n(ERe,"STRONG",{});var M7t=s(Tve);u1r=r(M7t,"longformer"),M7t.forEach(t),b1r=r(ERe," \u2014 "),zQ=n(ERe,"A",{href:!0});var E7t=s(zQ);v1r=r(E7t,"TFLongformerForMaskedLM"),E7t.forEach(t),F1r=r(ERe," (Longformer model)"),ERe.forEach(t),T1r=i(fe),QM=n(fe,"LI",{});var CRe=s(QM);Mve=n(CRe,"STRONG",{});var C7t=s(Mve);M1r=r(C7t,"mobilebert"),C7t.forEach(t),E1r=r(CRe," \u2014 "),WQ=n(CRe,"A",{href:!0});var w7t=s(WQ);C1r=r(w7t,"TFMobileBertForMaskedLM"),w7t.forEach(t),w1r=r(CRe," (MobileBERT model)"),CRe.forEach(t),A1r=i(fe),HM=n(fe,"LI",{});var wRe=s(HM);Eve=n(wRe,"STRONG",{});var A7t=s(Eve);y1r=r(A7t,"mpnet"),A7t.forEach(t),L1r=r(wRe," \u2014 "),QQ=n(wRe,"A",{href:!0});var y7t=s(QQ);x1r=r(y7t,"TFMPNetForMaskedLM"),y7t.forEach(t),$1r=r(wRe," (MPNet model)"),wRe.forEach(t),k1r=i(fe),UM=n(fe,"LI",{});var ARe=s(UM);Cve=n(ARe,"STRONG",{});var L7t=s(Cve);S1r=r(L7t,"rembert"),L7t.forEach(t),R1r=r(ARe," \u2014 "),HQ=n(ARe,"A",{href:!0});var x7t=s(HQ);B1r=r(x7t,"TFRemBertForMaskedLM"),x7t.forEach(t),P1r=r(ARe," (RemBERT model)"),ARe.forEach(t),I1r=i(fe),JM=n(fe,"LI",{});var yRe=s(JM);wve=n(yRe,"STRONG",{});var $7t=s(wve);q1r=r($7t,"roberta"),$7t.forEach(t),N1r=r(yRe," \u2014 "),UQ=n(yRe,"A",{href:!0});var k7t=s(UQ);j1r=r(k7t,"TFRobertaForMaskedLM"),k7t.forEach(t),D1r=r(yRe," (RoBERTa model)"),yRe.forEach(t),G1r=i(fe),YM=n(fe,"LI",{});var LRe=s(YM);Ave=n(LRe,"STRONG",{});var S7t=s(Ave);O1r=r(S7t,"roformer"),S7t.forEach(t),V1r=r(LRe," \u2014 "),JQ=n(LRe,"A",{href:!0});var R7t=s(JQ);X1r=r(R7t,"TFRoFormerForMaskedLM"),R7t.forEach(t),z1r=r(LRe," (RoFormer model)"),LRe.forEach(t),W1r=i(fe),KM=n(fe,"LI",{});var xRe=s(KM);yve=n(xRe,"STRONG",{});var B7t=s(yve);Q1r=r(B7t,"tapas"),B7t.forEach(t),H1r=r(xRe," \u2014 "),YQ=n(xRe,"A",{href:!0});var P7t=s(YQ);U1r=r(P7t,"TFTapasForMaskedLM"),P7t.forEach(t),J1r=r(xRe," (TAPAS model)"),xRe.forEach(t),Y1r=i(fe),ZM=n(fe,"LI",{});var $Re=s(ZM);Lve=n($Re,"STRONG",{});var I7t=s(Lve);K1r=r(I7t,"xlm"),I7t.forEach(t),Z1r=r($Re," \u2014 "),KQ=n($Re,"A",{href:!0});var q7t=s(KQ);ebr=r(q7t,"TFXLMWithLMHeadModel"),q7t.forEach(t),obr=r($Re," (XLM model)"),$Re.forEach(t),rbr=i(fe),e4=n(fe,"LI",{});var kRe=s(e4);xve=n(kRe,"STRONG",{});var N7t=s(xve);tbr=r(N7t,"xlm-roberta"),N7t.forEach(t),abr=r(kRe," \u2014 "),ZQ=n(kRe,"A",{href:!0});var j7t=s(ZQ);nbr=r(j7t,"TFXLMRobertaForMaskedLM"),j7t.forEach(t),sbr=r(kRe," (XLM-RoBERTa model)"),kRe.forEach(t),fe.forEach(t),lbr=i(Tl),T(o4.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),BNe=i(f),oc=n(f,"H2",{class:!0});var DDe=s(oc);r4=n(DDe,"A",{id:!0,class:!0,href:!0});var D7t=s(r4);$ve=n(D7t,"SPAN",{});var G7t=s($ve);T(w8.$$.fragment,G7t),G7t.forEach(t),D7t.forEach(t),ibr=i(DDe),kve=n(DDe,"SPAN",{});var O7t=s(kve);dbr=r(O7t,"TFAutoModelForSeq2SeqLM"),O7t.forEach(t),DDe.forEach(t),PNe=i(f),rr=n(f,"DIV",{class:!0});var Ml=s(rr);T(A8.$$.fragment,Ml),cbr=i(Ml),rc=n(Ml,"P",{});var eee=s(rc);fbr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eH=n(eee,"A",{href:!0});var V7t=s(eH);mbr=r(V7t,"from_pretrained()"),V7t.forEach(t),gbr=r(eee," class method or the "),oH=n(eee,"A",{href:!0});var X7t=s(oH);hbr=r(X7t,"from_config()"),X7t.forEach(t),pbr=r(eee,` class
method.`),eee.forEach(t),_br=i(Ml),y8=n(Ml,"P",{});var GDe=s(y8);ubr=r(GDe,"This class cannot be instantiated directly using "),Sve=n(GDe,"CODE",{});var z7t=s(Sve);bbr=r(z7t,"__init__()"),z7t.forEach(t),vbr=r(GDe," (throws an error)."),GDe.forEach(t),Fbr=i(Ml),St=n(Ml,"DIV",{class:!0});var y6=s(St);T(L8.$$.fragment,y6),Tbr=i(y6),Rve=n(y6,"P",{});var W7t=s(Rve);Mbr=r(W7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),W7t.forEach(t),Ebr=i(y6),tc=n(y6,"P",{});var oee=s(tc);Cbr=r(oee,`Note:
Loading a model from its configuration file does `),Bve=n(oee,"STRONG",{});var Q7t=s(Bve);wbr=r(Q7t,"not"),Q7t.forEach(t),Abr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n(oee,"A",{href:!0});var H7t=s(rH);ybr=r(H7t,"from_pretrained()"),H7t.forEach(t),Lbr=r(oee," to load the model weights."),oee.forEach(t),xbr=i(y6),T(t4.$$.fragment,y6),y6.forEach(t),$br=i(Ml),$r=n(Ml,"DIV",{class:!0});var El=s($r);T(x8.$$.fragment,El),kbr=i(El),Pve=n(El,"P",{});var U7t=s(Pve);Sbr=r(U7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),U7t.forEach(t),Rbr=i(El),an=n(El,"P",{});var L6=s(an);Bbr=r(L6,"The model class to instantiate is selected based on the "),Ive=n(L6,"CODE",{});var J7t=s(Ive);Pbr=r(J7t,"model_type"),J7t.forEach(t),Ibr=r(L6,` property of the config object (either
passed as an argument or loaded from `),qve=n(L6,"CODE",{});var Y7t=s(qve);qbr=r(Y7t,"pretrained_model_name_or_path"),Y7t.forEach(t),Nbr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=n(L6,"CODE",{});var K7t=s(Nve);jbr=r(K7t,"pretrained_model_name_or_path"),K7t.forEach(t),Dbr=r(L6,":"),L6.forEach(t),Gbr=i(El),ye=n(El,"UL",{});var Pe=s(ye);a4=n(Pe,"LI",{});var SRe=s(a4);jve=n(SRe,"STRONG",{});var Z7t=s(jve);Obr=r(Z7t,"bart"),Z7t.forEach(t),Vbr=r(SRe," \u2014 "),tH=n(SRe,"A",{href:!0});var eMt=s(tH);Xbr=r(eMt,"TFBartForConditionalGeneration"),eMt.forEach(t),zbr=r(SRe," (BART model)"),SRe.forEach(t),Wbr=i(Pe),n4=n(Pe,"LI",{});var RRe=s(n4);Dve=n(RRe,"STRONG",{});var oMt=s(Dve);Qbr=r(oMt,"blenderbot"),oMt.forEach(t),Hbr=r(RRe," \u2014 "),aH=n(RRe,"A",{href:!0});var rMt=s(aH);Ubr=r(rMt,"TFBlenderbotForConditionalGeneration"),rMt.forEach(t),Jbr=r(RRe," (Blenderbot model)"),RRe.forEach(t),Ybr=i(Pe),s4=n(Pe,"LI",{});var BRe=s(s4);Gve=n(BRe,"STRONG",{});var tMt=s(Gve);Kbr=r(tMt,"blenderbot-small"),tMt.forEach(t),Zbr=r(BRe," \u2014 "),nH=n(BRe,"A",{href:!0});var aMt=s(nH);evr=r(aMt,"TFBlenderbotSmallForConditionalGeneration"),aMt.forEach(t),ovr=r(BRe," (BlenderbotSmall model)"),BRe.forEach(t),rvr=i(Pe),l4=n(Pe,"LI",{});var PRe=s(l4);Ove=n(PRe,"STRONG",{});var nMt=s(Ove);tvr=r(nMt,"encoder-decoder"),nMt.forEach(t),avr=r(PRe," \u2014 "),sH=n(PRe,"A",{href:!0});var sMt=s(sH);nvr=r(sMt,"TFEncoderDecoderModel"),sMt.forEach(t),svr=r(PRe," (Encoder decoder model)"),PRe.forEach(t),lvr=i(Pe),i4=n(Pe,"LI",{});var IRe=s(i4);Vve=n(IRe,"STRONG",{});var lMt=s(Vve);ivr=r(lMt,"led"),lMt.forEach(t),dvr=r(IRe," \u2014 "),lH=n(IRe,"A",{href:!0});var iMt=s(lH);cvr=r(iMt,"TFLEDForConditionalGeneration"),iMt.forEach(t),fvr=r(IRe," (LED model)"),IRe.forEach(t),mvr=i(Pe),d4=n(Pe,"LI",{});var qRe=s(d4);Xve=n(qRe,"STRONG",{});var dMt=s(Xve);gvr=r(dMt,"marian"),dMt.forEach(t),hvr=r(qRe," \u2014 "),iH=n(qRe,"A",{href:!0});var cMt=s(iH);pvr=r(cMt,"TFMarianMTModel"),cMt.forEach(t),_vr=r(qRe," (Marian model)"),qRe.forEach(t),uvr=i(Pe),c4=n(Pe,"LI",{});var NRe=s(c4);zve=n(NRe,"STRONG",{});var fMt=s(zve);bvr=r(fMt,"mbart"),fMt.forEach(t),vvr=r(NRe," \u2014 "),dH=n(NRe,"A",{href:!0});var mMt=s(dH);Fvr=r(mMt,"TFMBartForConditionalGeneration"),mMt.forEach(t),Tvr=r(NRe," (mBART model)"),NRe.forEach(t),Mvr=i(Pe),f4=n(Pe,"LI",{});var jRe=s(f4);Wve=n(jRe,"STRONG",{});var gMt=s(Wve);Evr=r(gMt,"mt5"),gMt.forEach(t),Cvr=r(jRe," \u2014 "),cH=n(jRe,"A",{href:!0});var hMt=s(cH);wvr=r(hMt,"TFMT5ForConditionalGeneration"),hMt.forEach(t),Avr=r(jRe," (mT5 model)"),jRe.forEach(t),yvr=i(Pe),m4=n(Pe,"LI",{});var DRe=s(m4);Qve=n(DRe,"STRONG",{});var pMt=s(Qve);Lvr=r(pMt,"pegasus"),pMt.forEach(t),xvr=r(DRe," \u2014 "),fH=n(DRe,"A",{href:!0});var _Mt=s(fH);$vr=r(_Mt,"TFPegasusForConditionalGeneration"),_Mt.forEach(t),kvr=r(DRe," (Pegasus model)"),DRe.forEach(t),Svr=i(Pe),g4=n(Pe,"LI",{});var GRe=s(g4);Hve=n(GRe,"STRONG",{});var uMt=s(Hve);Rvr=r(uMt,"t5"),uMt.forEach(t),Bvr=r(GRe," \u2014 "),mH=n(GRe,"A",{href:!0});var bMt=s(mH);Pvr=r(bMt,"TFT5ForConditionalGeneration"),bMt.forEach(t),Ivr=r(GRe," (T5 model)"),GRe.forEach(t),Pe.forEach(t),qvr=i(El),T(h4.$$.fragment,El),El.forEach(t),Ml.forEach(t),INe=i(f),ac=n(f,"H2",{class:!0});var ODe=s(ac);p4=n(ODe,"A",{id:!0,class:!0,href:!0});var vMt=s(p4);Uve=n(vMt,"SPAN",{});var FMt=s(Uve);T($8.$$.fragment,FMt),FMt.forEach(t),vMt.forEach(t),Nvr=i(ODe),Jve=n(ODe,"SPAN",{});var TMt=s(Jve);jvr=r(TMt,"TFAutoModelForSequenceClassification"),TMt.forEach(t),ODe.forEach(t),qNe=i(f),tr=n(f,"DIV",{class:!0});var Cl=s(tr);T(k8.$$.fragment,Cl),Dvr=i(Cl),nc=n(Cl,"P",{});var ree=s(nc);Gvr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gH=n(ree,"A",{href:!0});var MMt=s(gH);Ovr=r(MMt,"from_pretrained()"),MMt.forEach(t),Vvr=r(ree," class method or the "),hH=n(ree,"A",{href:!0});var EMt=s(hH);Xvr=r(EMt,"from_config()"),EMt.forEach(t),zvr=r(ree,` class
method.`),ree.forEach(t),Wvr=i(Cl),S8=n(Cl,"P",{});var VDe=s(S8);Qvr=r(VDe,"This class cannot be instantiated directly using "),Yve=n(VDe,"CODE",{});var CMt=s(Yve);Hvr=r(CMt,"__init__()"),CMt.forEach(t),Uvr=r(VDe," (throws an error)."),VDe.forEach(t),Jvr=i(Cl),Rt=n(Cl,"DIV",{class:!0});var x6=s(Rt);T(R8.$$.fragment,x6),Yvr=i(x6),Kve=n(x6,"P",{});var wMt=s(Kve);Kvr=r(wMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wMt.forEach(t),Zvr=i(x6),sc=n(x6,"P",{});var tee=s(sc);eFr=r(tee,`Note:
Loading a model from its configuration file does `),Zve=n(tee,"STRONG",{});var AMt=s(Zve);oFr=r(AMt,"not"),AMt.forEach(t),rFr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=n(tee,"A",{href:!0});var yMt=s(pH);tFr=r(yMt,"from_pretrained()"),yMt.forEach(t),aFr=r(tee," to load the model weights."),tee.forEach(t),nFr=i(x6),T(_4.$$.fragment,x6),x6.forEach(t),sFr=i(Cl),kr=n(Cl,"DIV",{class:!0});var wl=s(kr);T(B8.$$.fragment,wl),lFr=i(wl),eFe=n(wl,"P",{});var LMt=s(eFe);iFr=r(LMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),LMt.forEach(t),dFr=i(wl),nn=n(wl,"P",{});var $6=s(nn);cFr=r($6,"The model class to instantiate is selected based on the "),oFe=n($6,"CODE",{});var xMt=s(oFe);fFr=r(xMt,"model_type"),xMt.forEach(t),mFr=r($6,` property of the config object (either
passed as an argument or loaded from `),rFe=n($6,"CODE",{});var $Mt=s(rFe);gFr=r($Mt,"pretrained_model_name_or_path"),$Mt.forEach(t),hFr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=n($6,"CODE",{});var kMt=s(tFe);pFr=r(kMt,"pretrained_model_name_or_path"),kMt.forEach(t),_Fr=r($6,":"),$6.forEach(t),uFr=i(wl),ee=n(wl,"UL",{});var ae=s(ee);u4=n(ae,"LI",{});var ORe=s(u4);aFe=n(ORe,"STRONG",{});var SMt=s(aFe);bFr=r(SMt,"albert"),SMt.forEach(t),vFr=r(ORe," \u2014 "),_H=n(ORe,"A",{href:!0});var RMt=s(_H);FFr=r(RMt,"TFAlbertForSequenceClassification"),RMt.forEach(t),TFr=r(ORe," (ALBERT model)"),ORe.forEach(t),MFr=i(ae),b4=n(ae,"LI",{});var VRe=s(b4);nFe=n(VRe,"STRONG",{});var BMt=s(nFe);EFr=r(BMt,"bert"),BMt.forEach(t),CFr=r(VRe," \u2014 "),uH=n(VRe,"A",{href:!0});var PMt=s(uH);wFr=r(PMt,"TFBertForSequenceClassification"),PMt.forEach(t),AFr=r(VRe," (BERT model)"),VRe.forEach(t),yFr=i(ae),v4=n(ae,"LI",{});var XRe=s(v4);sFe=n(XRe,"STRONG",{});var IMt=s(sFe);LFr=r(IMt,"camembert"),IMt.forEach(t),xFr=r(XRe," \u2014 "),bH=n(XRe,"A",{href:!0});var qMt=s(bH);$Fr=r(qMt,"TFCamembertForSequenceClassification"),qMt.forEach(t),kFr=r(XRe," (CamemBERT model)"),XRe.forEach(t),SFr=i(ae),F4=n(ae,"LI",{});var zRe=s(F4);lFe=n(zRe,"STRONG",{});var NMt=s(lFe);RFr=r(NMt,"convbert"),NMt.forEach(t),BFr=r(zRe," \u2014 "),vH=n(zRe,"A",{href:!0});var jMt=s(vH);PFr=r(jMt,"TFConvBertForSequenceClassification"),jMt.forEach(t),IFr=r(zRe," (ConvBERT model)"),zRe.forEach(t),qFr=i(ae),T4=n(ae,"LI",{});var WRe=s(T4);iFe=n(WRe,"STRONG",{});var DMt=s(iFe);NFr=r(DMt,"ctrl"),DMt.forEach(t),jFr=r(WRe," \u2014 "),FH=n(WRe,"A",{href:!0});var GMt=s(FH);DFr=r(GMt,"TFCTRLForSequenceClassification"),GMt.forEach(t),GFr=r(WRe," (CTRL model)"),WRe.forEach(t),OFr=i(ae),M4=n(ae,"LI",{});var QRe=s(M4);dFe=n(QRe,"STRONG",{});var OMt=s(dFe);VFr=r(OMt,"deberta"),OMt.forEach(t),XFr=r(QRe," \u2014 "),TH=n(QRe,"A",{href:!0});var VMt=s(TH);zFr=r(VMt,"TFDebertaForSequenceClassification"),VMt.forEach(t),WFr=r(QRe," (DeBERTa model)"),QRe.forEach(t),QFr=i(ae),E4=n(ae,"LI",{});var HRe=s(E4);cFe=n(HRe,"STRONG",{});var XMt=s(cFe);HFr=r(XMt,"deberta-v2"),XMt.forEach(t),UFr=r(HRe," \u2014 "),MH=n(HRe,"A",{href:!0});var zMt=s(MH);JFr=r(zMt,"TFDebertaV2ForSequenceClassification"),zMt.forEach(t),YFr=r(HRe," (DeBERTa-v2 model)"),HRe.forEach(t),KFr=i(ae),C4=n(ae,"LI",{});var URe=s(C4);fFe=n(URe,"STRONG",{});var WMt=s(fFe);ZFr=r(WMt,"distilbert"),WMt.forEach(t),e0r=r(URe," \u2014 "),EH=n(URe,"A",{href:!0});var QMt=s(EH);o0r=r(QMt,"TFDistilBertForSequenceClassification"),QMt.forEach(t),r0r=r(URe," (DistilBERT model)"),URe.forEach(t),t0r=i(ae),w4=n(ae,"LI",{});var JRe=s(w4);mFe=n(JRe,"STRONG",{});var HMt=s(mFe);a0r=r(HMt,"electra"),HMt.forEach(t),n0r=r(JRe," \u2014 "),CH=n(JRe,"A",{href:!0});var UMt=s(CH);s0r=r(UMt,"TFElectraForSequenceClassification"),UMt.forEach(t),l0r=r(JRe," (ELECTRA model)"),JRe.forEach(t),i0r=i(ae),A4=n(ae,"LI",{});var YRe=s(A4);gFe=n(YRe,"STRONG",{});var JMt=s(gFe);d0r=r(JMt,"flaubert"),JMt.forEach(t),c0r=r(YRe," \u2014 "),wH=n(YRe,"A",{href:!0});var YMt=s(wH);f0r=r(YMt,"TFFlaubertForSequenceClassification"),YMt.forEach(t),m0r=r(YRe," (FlauBERT model)"),YRe.forEach(t),g0r=i(ae),y4=n(ae,"LI",{});var KRe=s(y4);hFe=n(KRe,"STRONG",{});var KMt=s(hFe);h0r=r(KMt,"funnel"),KMt.forEach(t),p0r=r(KRe," \u2014 "),AH=n(KRe,"A",{href:!0});var ZMt=s(AH);_0r=r(ZMt,"TFFunnelForSequenceClassification"),ZMt.forEach(t),u0r=r(KRe," (Funnel Transformer model)"),KRe.forEach(t),b0r=i(ae),L4=n(ae,"LI",{});var ZRe=s(L4);pFe=n(ZRe,"STRONG",{});var e4t=s(pFe);v0r=r(e4t,"gpt2"),e4t.forEach(t),F0r=r(ZRe," \u2014 "),yH=n(ZRe,"A",{href:!0});var o4t=s(yH);T0r=r(o4t,"TFGPT2ForSequenceClassification"),o4t.forEach(t),M0r=r(ZRe," (OpenAI GPT-2 model)"),ZRe.forEach(t),E0r=i(ae),x4=n(ae,"LI",{});var eBe=s(x4);_Fe=n(eBe,"STRONG",{});var r4t=s(_Fe);C0r=r(r4t,"gptj"),r4t.forEach(t),w0r=r(eBe," \u2014 "),LH=n(eBe,"A",{href:!0});var t4t=s(LH);A0r=r(t4t,"TFGPTJForSequenceClassification"),t4t.forEach(t),y0r=r(eBe," (GPT-J model)"),eBe.forEach(t),L0r=i(ae),$4=n(ae,"LI",{});var oBe=s($4);uFe=n(oBe,"STRONG",{});var a4t=s(uFe);x0r=r(a4t,"layoutlm"),a4t.forEach(t),$0r=r(oBe," \u2014 "),xH=n(oBe,"A",{href:!0});var n4t=s(xH);k0r=r(n4t,"TFLayoutLMForSequenceClassification"),n4t.forEach(t),S0r=r(oBe," (LayoutLM model)"),oBe.forEach(t),R0r=i(ae),k4=n(ae,"LI",{});var rBe=s(k4);bFe=n(rBe,"STRONG",{});var s4t=s(bFe);B0r=r(s4t,"longformer"),s4t.forEach(t),P0r=r(rBe," \u2014 "),$H=n(rBe,"A",{href:!0});var l4t=s($H);I0r=r(l4t,"TFLongformerForSequenceClassification"),l4t.forEach(t),q0r=r(rBe," (Longformer model)"),rBe.forEach(t),N0r=i(ae),S4=n(ae,"LI",{});var tBe=s(S4);vFe=n(tBe,"STRONG",{});var i4t=s(vFe);j0r=r(i4t,"mobilebert"),i4t.forEach(t),D0r=r(tBe," \u2014 "),kH=n(tBe,"A",{href:!0});var d4t=s(kH);G0r=r(d4t,"TFMobileBertForSequenceClassification"),d4t.forEach(t),O0r=r(tBe," (MobileBERT model)"),tBe.forEach(t),V0r=i(ae),R4=n(ae,"LI",{});var aBe=s(R4);FFe=n(aBe,"STRONG",{});var c4t=s(FFe);X0r=r(c4t,"mpnet"),c4t.forEach(t),z0r=r(aBe," \u2014 "),SH=n(aBe,"A",{href:!0});var f4t=s(SH);W0r=r(f4t,"TFMPNetForSequenceClassification"),f4t.forEach(t),Q0r=r(aBe," (MPNet model)"),aBe.forEach(t),H0r=i(ae),B4=n(ae,"LI",{});var nBe=s(B4);TFe=n(nBe,"STRONG",{});var m4t=s(TFe);U0r=r(m4t,"openai-gpt"),m4t.forEach(t),J0r=r(nBe," \u2014 "),RH=n(nBe,"A",{href:!0});var g4t=s(RH);Y0r=r(g4t,"TFOpenAIGPTForSequenceClassification"),g4t.forEach(t),K0r=r(nBe," (OpenAI GPT model)"),nBe.forEach(t),Z0r=i(ae),P4=n(ae,"LI",{});var sBe=s(P4);MFe=n(sBe,"STRONG",{});var h4t=s(MFe);eTr=r(h4t,"rembert"),h4t.forEach(t),oTr=r(sBe," \u2014 "),BH=n(sBe,"A",{href:!0});var p4t=s(BH);rTr=r(p4t,"TFRemBertForSequenceClassification"),p4t.forEach(t),tTr=r(sBe," (RemBERT model)"),sBe.forEach(t),aTr=i(ae),I4=n(ae,"LI",{});var lBe=s(I4);EFe=n(lBe,"STRONG",{});var _4t=s(EFe);nTr=r(_4t,"roberta"),_4t.forEach(t),sTr=r(lBe," \u2014 "),PH=n(lBe,"A",{href:!0});var u4t=s(PH);lTr=r(u4t,"TFRobertaForSequenceClassification"),u4t.forEach(t),iTr=r(lBe," (RoBERTa model)"),lBe.forEach(t),dTr=i(ae),q4=n(ae,"LI",{});var iBe=s(q4);CFe=n(iBe,"STRONG",{});var b4t=s(CFe);cTr=r(b4t,"roformer"),b4t.forEach(t),fTr=r(iBe," \u2014 "),IH=n(iBe,"A",{href:!0});var v4t=s(IH);mTr=r(v4t,"TFRoFormerForSequenceClassification"),v4t.forEach(t),gTr=r(iBe," (RoFormer model)"),iBe.forEach(t),hTr=i(ae),N4=n(ae,"LI",{});var dBe=s(N4);wFe=n(dBe,"STRONG",{});var F4t=s(wFe);pTr=r(F4t,"tapas"),F4t.forEach(t),_Tr=r(dBe," \u2014 "),qH=n(dBe,"A",{href:!0});var T4t=s(qH);uTr=r(T4t,"TFTapasForSequenceClassification"),T4t.forEach(t),bTr=r(dBe," (TAPAS model)"),dBe.forEach(t),vTr=i(ae),j4=n(ae,"LI",{});var cBe=s(j4);AFe=n(cBe,"STRONG",{});var M4t=s(AFe);FTr=r(M4t,"transfo-xl"),M4t.forEach(t),TTr=r(cBe," \u2014 "),NH=n(cBe,"A",{href:!0});var E4t=s(NH);MTr=r(E4t,"TFTransfoXLForSequenceClassification"),E4t.forEach(t),ETr=r(cBe," (Transformer-XL model)"),cBe.forEach(t),CTr=i(ae),D4=n(ae,"LI",{});var fBe=s(D4);yFe=n(fBe,"STRONG",{});var C4t=s(yFe);wTr=r(C4t,"xlm"),C4t.forEach(t),ATr=r(fBe," \u2014 "),jH=n(fBe,"A",{href:!0});var w4t=s(jH);yTr=r(w4t,"TFXLMForSequenceClassification"),w4t.forEach(t),LTr=r(fBe," (XLM model)"),fBe.forEach(t),xTr=i(ae),G4=n(ae,"LI",{});var mBe=s(G4);LFe=n(mBe,"STRONG",{});var A4t=s(LFe);$Tr=r(A4t,"xlm-roberta"),A4t.forEach(t),kTr=r(mBe," \u2014 "),DH=n(mBe,"A",{href:!0});var y4t=s(DH);STr=r(y4t,"TFXLMRobertaForSequenceClassification"),y4t.forEach(t),RTr=r(mBe," (XLM-RoBERTa model)"),mBe.forEach(t),BTr=i(ae),O4=n(ae,"LI",{});var gBe=s(O4);xFe=n(gBe,"STRONG",{});var L4t=s(xFe);PTr=r(L4t,"xlnet"),L4t.forEach(t),ITr=r(gBe," \u2014 "),GH=n(gBe,"A",{href:!0});var x4t=s(GH);qTr=r(x4t,"TFXLNetForSequenceClassification"),x4t.forEach(t),NTr=r(gBe," (XLNet model)"),gBe.forEach(t),ae.forEach(t),jTr=i(wl),T(V4.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),NNe=i(f),lc=n(f,"H2",{class:!0});var XDe=s(lc);X4=n(XDe,"A",{id:!0,class:!0,href:!0});var $4t=s(X4);$Fe=n($4t,"SPAN",{});var k4t=s($Fe);T(P8.$$.fragment,k4t),k4t.forEach(t),$4t.forEach(t),DTr=i(XDe),kFe=n(XDe,"SPAN",{});var S4t=s(kFe);GTr=r(S4t,"TFAutoModelForMultipleChoice"),S4t.forEach(t),XDe.forEach(t),jNe=i(f),ar=n(f,"DIV",{class:!0});var Al=s(ar);T(I8.$$.fragment,Al),OTr=i(Al),ic=n(Al,"P",{});var aee=s(ic);VTr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OH=n(aee,"A",{href:!0});var R4t=s(OH);XTr=r(R4t,"from_pretrained()"),R4t.forEach(t),zTr=r(aee," class method or the "),VH=n(aee,"A",{href:!0});var B4t=s(VH);WTr=r(B4t,"from_config()"),B4t.forEach(t),QTr=r(aee,` class
method.`),aee.forEach(t),HTr=i(Al),q8=n(Al,"P",{});var zDe=s(q8);UTr=r(zDe,"This class cannot be instantiated directly using "),SFe=n(zDe,"CODE",{});var P4t=s(SFe);JTr=r(P4t,"__init__()"),P4t.forEach(t),YTr=r(zDe," (throws an error)."),zDe.forEach(t),KTr=i(Al),Bt=n(Al,"DIV",{class:!0});var k6=s(Bt);T(N8.$$.fragment,k6),ZTr=i(k6),RFe=n(k6,"P",{});var I4t=s(RFe);e7r=r(I4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),I4t.forEach(t),o7r=i(k6),dc=n(k6,"P",{});var nee=s(dc);r7r=r(nee,`Note:
Loading a model from its configuration file does `),BFe=n(nee,"STRONG",{});var q4t=s(BFe);t7r=r(q4t,"not"),q4t.forEach(t),a7r=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(nee,"A",{href:!0});var N4t=s(XH);n7r=r(N4t,"from_pretrained()"),N4t.forEach(t),s7r=r(nee," to load the model weights."),nee.forEach(t),l7r=i(k6),T(z4.$$.fragment,k6),k6.forEach(t),i7r=i(Al),Sr=n(Al,"DIV",{class:!0});var yl=s(Sr);T(j8.$$.fragment,yl),d7r=i(yl),PFe=n(yl,"P",{});var j4t=s(PFe);c7r=r(j4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),j4t.forEach(t),f7r=i(yl),sn=n(yl,"P",{});var S6=s(sn);m7r=r(S6,"The model class to instantiate is selected based on the "),IFe=n(S6,"CODE",{});var D4t=s(IFe);g7r=r(D4t,"model_type"),D4t.forEach(t),h7r=r(S6,` property of the config object (either
passed as an argument or loaded from `),qFe=n(S6,"CODE",{});var G4t=s(qFe);p7r=r(G4t,"pretrained_model_name_or_path"),G4t.forEach(t),_7r=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=n(S6,"CODE",{});var O4t=s(NFe);u7r=r(O4t,"pretrained_model_name_or_path"),O4t.forEach(t),b7r=r(S6,":"),S6.forEach(t),v7r=i(yl),he=n(yl,"UL",{});var ue=s(he);W4=n(ue,"LI",{});var hBe=s(W4);jFe=n(hBe,"STRONG",{});var V4t=s(jFe);F7r=r(V4t,"albert"),V4t.forEach(t),T7r=r(hBe," \u2014 "),zH=n(hBe,"A",{href:!0});var X4t=s(zH);M7r=r(X4t,"TFAlbertForMultipleChoice"),X4t.forEach(t),E7r=r(hBe," (ALBERT model)"),hBe.forEach(t),C7r=i(ue),Q4=n(ue,"LI",{});var pBe=s(Q4);DFe=n(pBe,"STRONG",{});var z4t=s(DFe);w7r=r(z4t,"bert"),z4t.forEach(t),A7r=r(pBe," \u2014 "),WH=n(pBe,"A",{href:!0});var W4t=s(WH);y7r=r(W4t,"TFBertForMultipleChoice"),W4t.forEach(t),L7r=r(pBe," (BERT model)"),pBe.forEach(t),x7r=i(ue),H4=n(ue,"LI",{});var _Be=s(H4);GFe=n(_Be,"STRONG",{});var Q4t=s(GFe);$7r=r(Q4t,"camembert"),Q4t.forEach(t),k7r=r(_Be," \u2014 "),QH=n(_Be,"A",{href:!0});var H4t=s(QH);S7r=r(H4t,"TFCamembertForMultipleChoice"),H4t.forEach(t),R7r=r(_Be," (CamemBERT model)"),_Be.forEach(t),B7r=i(ue),U4=n(ue,"LI",{});var uBe=s(U4);OFe=n(uBe,"STRONG",{});var U4t=s(OFe);P7r=r(U4t,"convbert"),U4t.forEach(t),I7r=r(uBe," \u2014 "),HH=n(uBe,"A",{href:!0});var J4t=s(HH);q7r=r(J4t,"TFConvBertForMultipleChoice"),J4t.forEach(t),N7r=r(uBe," (ConvBERT model)"),uBe.forEach(t),j7r=i(ue),J4=n(ue,"LI",{});var bBe=s(J4);VFe=n(bBe,"STRONG",{});var Y4t=s(VFe);D7r=r(Y4t,"distilbert"),Y4t.forEach(t),G7r=r(bBe," \u2014 "),UH=n(bBe,"A",{href:!0});var K4t=s(UH);O7r=r(K4t,"TFDistilBertForMultipleChoice"),K4t.forEach(t),V7r=r(bBe," (DistilBERT model)"),bBe.forEach(t),X7r=i(ue),Y4=n(ue,"LI",{});var vBe=s(Y4);XFe=n(vBe,"STRONG",{});var Z4t=s(XFe);z7r=r(Z4t,"electra"),Z4t.forEach(t),W7r=r(vBe," \u2014 "),JH=n(vBe,"A",{href:!0});var eEt=s(JH);Q7r=r(eEt,"TFElectraForMultipleChoice"),eEt.forEach(t),H7r=r(vBe," (ELECTRA model)"),vBe.forEach(t),U7r=i(ue),K4=n(ue,"LI",{});var FBe=s(K4);zFe=n(FBe,"STRONG",{});var oEt=s(zFe);J7r=r(oEt,"flaubert"),oEt.forEach(t),Y7r=r(FBe," \u2014 "),YH=n(FBe,"A",{href:!0});var rEt=s(YH);K7r=r(rEt,"TFFlaubertForMultipleChoice"),rEt.forEach(t),Z7r=r(FBe," (FlauBERT model)"),FBe.forEach(t),eMr=i(ue),Z4=n(ue,"LI",{});var TBe=s(Z4);WFe=n(TBe,"STRONG",{});var tEt=s(WFe);oMr=r(tEt,"funnel"),tEt.forEach(t),rMr=r(TBe," \u2014 "),KH=n(TBe,"A",{href:!0});var aEt=s(KH);tMr=r(aEt,"TFFunnelForMultipleChoice"),aEt.forEach(t),aMr=r(TBe," (Funnel Transformer model)"),TBe.forEach(t),nMr=i(ue),eE=n(ue,"LI",{});var MBe=s(eE);QFe=n(MBe,"STRONG",{});var nEt=s(QFe);sMr=r(nEt,"longformer"),nEt.forEach(t),lMr=r(MBe," \u2014 "),ZH=n(MBe,"A",{href:!0});var sEt=s(ZH);iMr=r(sEt,"TFLongformerForMultipleChoice"),sEt.forEach(t),dMr=r(MBe," (Longformer model)"),MBe.forEach(t),cMr=i(ue),oE=n(ue,"LI",{});var EBe=s(oE);HFe=n(EBe,"STRONG",{});var lEt=s(HFe);fMr=r(lEt,"mobilebert"),lEt.forEach(t),mMr=r(EBe," \u2014 "),eU=n(EBe,"A",{href:!0});var iEt=s(eU);gMr=r(iEt,"TFMobileBertForMultipleChoice"),iEt.forEach(t),hMr=r(EBe," (MobileBERT model)"),EBe.forEach(t),pMr=i(ue),rE=n(ue,"LI",{});var CBe=s(rE);UFe=n(CBe,"STRONG",{});var dEt=s(UFe);_Mr=r(dEt,"mpnet"),dEt.forEach(t),uMr=r(CBe," \u2014 "),oU=n(CBe,"A",{href:!0});var cEt=s(oU);bMr=r(cEt,"TFMPNetForMultipleChoice"),cEt.forEach(t),vMr=r(CBe," (MPNet model)"),CBe.forEach(t),FMr=i(ue),tE=n(ue,"LI",{});var wBe=s(tE);JFe=n(wBe,"STRONG",{});var fEt=s(JFe);TMr=r(fEt,"rembert"),fEt.forEach(t),MMr=r(wBe," \u2014 "),rU=n(wBe,"A",{href:!0});var mEt=s(rU);EMr=r(mEt,"TFRemBertForMultipleChoice"),mEt.forEach(t),CMr=r(wBe," (RemBERT model)"),wBe.forEach(t),wMr=i(ue),aE=n(ue,"LI",{});var ABe=s(aE);YFe=n(ABe,"STRONG",{});var gEt=s(YFe);AMr=r(gEt,"roberta"),gEt.forEach(t),yMr=r(ABe," \u2014 "),tU=n(ABe,"A",{href:!0});var hEt=s(tU);LMr=r(hEt,"TFRobertaForMultipleChoice"),hEt.forEach(t),xMr=r(ABe," (RoBERTa model)"),ABe.forEach(t),$Mr=i(ue),nE=n(ue,"LI",{});var yBe=s(nE);KFe=n(yBe,"STRONG",{});var pEt=s(KFe);kMr=r(pEt,"roformer"),pEt.forEach(t),SMr=r(yBe," \u2014 "),aU=n(yBe,"A",{href:!0});var _Et=s(aU);RMr=r(_Et,"TFRoFormerForMultipleChoice"),_Et.forEach(t),BMr=r(yBe," (RoFormer model)"),yBe.forEach(t),PMr=i(ue),sE=n(ue,"LI",{});var LBe=s(sE);ZFe=n(LBe,"STRONG",{});var uEt=s(ZFe);IMr=r(uEt,"xlm"),uEt.forEach(t),qMr=r(LBe," \u2014 "),nU=n(LBe,"A",{href:!0});var bEt=s(nU);NMr=r(bEt,"TFXLMForMultipleChoice"),bEt.forEach(t),jMr=r(LBe," (XLM model)"),LBe.forEach(t),DMr=i(ue),lE=n(ue,"LI",{});var xBe=s(lE);e0e=n(xBe,"STRONG",{});var vEt=s(e0e);GMr=r(vEt,"xlm-roberta"),vEt.forEach(t),OMr=r(xBe," \u2014 "),sU=n(xBe,"A",{href:!0});var FEt=s(sU);VMr=r(FEt,"TFXLMRobertaForMultipleChoice"),FEt.forEach(t),XMr=r(xBe," (XLM-RoBERTa model)"),xBe.forEach(t),zMr=i(ue),iE=n(ue,"LI",{});var $Be=s(iE);o0e=n($Be,"STRONG",{});var TEt=s(o0e);WMr=r(TEt,"xlnet"),TEt.forEach(t),QMr=r($Be," \u2014 "),lU=n($Be,"A",{href:!0});var MEt=s(lU);HMr=r(MEt,"TFXLNetForMultipleChoice"),MEt.forEach(t),UMr=r($Be," (XLNet model)"),$Be.forEach(t),ue.forEach(t),JMr=i(yl),T(dE.$$.fragment,yl),yl.forEach(t),Al.forEach(t),DNe=i(f),cc=n(f,"H2",{class:!0});var WDe=s(cc);cE=n(WDe,"A",{id:!0,class:!0,href:!0});var EEt=s(cE);r0e=n(EEt,"SPAN",{});var CEt=s(r0e);T(D8.$$.fragment,CEt),CEt.forEach(t),EEt.forEach(t),YMr=i(WDe),t0e=n(WDe,"SPAN",{});var wEt=s(t0e);KMr=r(wEt,"TFAutoModelForNextSentencePrediction"),wEt.forEach(t),WDe.forEach(t),GNe=i(f),nr=n(f,"DIV",{class:!0});var Ll=s(nr);T(G8.$$.fragment,Ll),ZMr=i(Ll),fc=n(Ll,"P",{});var see=s(fc);e4r=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iU=n(see,"A",{href:!0});var AEt=s(iU);o4r=r(AEt,"from_pretrained()"),AEt.forEach(t),r4r=r(see," class method or the "),dU=n(see,"A",{href:!0});var yEt=s(dU);t4r=r(yEt,"from_config()"),yEt.forEach(t),a4r=r(see,` class
method.`),see.forEach(t),n4r=i(Ll),O8=n(Ll,"P",{});var QDe=s(O8);s4r=r(QDe,"This class cannot be instantiated directly using "),a0e=n(QDe,"CODE",{});var LEt=s(a0e);l4r=r(LEt,"__init__()"),LEt.forEach(t),i4r=r(QDe," (throws an error)."),QDe.forEach(t),d4r=i(Ll),Pt=n(Ll,"DIV",{class:!0});var R6=s(Pt);T(V8.$$.fragment,R6),c4r=i(R6),n0e=n(R6,"P",{});var xEt=s(n0e);f4r=r(xEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),xEt.forEach(t),m4r=i(R6),mc=n(R6,"P",{});var lee=s(mc);g4r=r(lee,`Note:
Loading a model from its configuration file does `),s0e=n(lee,"STRONG",{});var $Et=s(s0e);h4r=r($Et,"not"),$Et.forEach(t),p4r=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=n(lee,"A",{href:!0});var kEt=s(cU);_4r=r(kEt,"from_pretrained()"),kEt.forEach(t),u4r=r(lee," to load the model weights."),lee.forEach(t),b4r=i(R6),T(fE.$$.fragment,R6),R6.forEach(t),v4r=i(Ll),Rr=n(Ll,"DIV",{class:!0});var xl=s(Rr);T(X8.$$.fragment,xl),F4r=i(xl),l0e=n(xl,"P",{});var SEt=s(l0e);T4r=r(SEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),SEt.forEach(t),M4r=i(xl),ln=n(xl,"P",{});var B6=s(ln);E4r=r(B6,"The model class to instantiate is selected based on the "),i0e=n(B6,"CODE",{});var REt=s(i0e);C4r=r(REt,"model_type"),REt.forEach(t),w4r=r(B6,` property of the config object (either
passed as an argument or loaded from `),d0e=n(B6,"CODE",{});var BEt=s(d0e);A4r=r(BEt,"pretrained_model_name_or_path"),BEt.forEach(t),y4r=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c0e=n(B6,"CODE",{});var PEt=s(c0e);L4r=r(PEt,"pretrained_model_name_or_path"),PEt.forEach(t),x4r=r(B6,":"),B6.forEach(t),$4r=i(xl),z8=n(xl,"UL",{});var HDe=s(z8);mE=n(HDe,"LI",{});var kBe=s(mE);f0e=n(kBe,"STRONG",{});var IEt=s(f0e);k4r=r(IEt,"bert"),IEt.forEach(t),S4r=r(kBe," \u2014 "),fU=n(kBe,"A",{href:!0});var qEt=s(fU);R4r=r(qEt,"TFBertForNextSentencePrediction"),qEt.forEach(t),B4r=r(kBe," (BERT model)"),kBe.forEach(t),P4r=i(HDe),gE=n(HDe,"LI",{});var SBe=s(gE);m0e=n(SBe,"STRONG",{});var NEt=s(m0e);I4r=r(NEt,"mobilebert"),NEt.forEach(t),q4r=r(SBe," \u2014 "),mU=n(SBe,"A",{href:!0});var jEt=s(mU);N4r=r(jEt,"TFMobileBertForNextSentencePrediction"),jEt.forEach(t),j4r=r(SBe," (MobileBERT model)"),SBe.forEach(t),HDe.forEach(t),D4r=i(xl),T(hE.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),ONe=i(f),gc=n(f,"H2",{class:!0});var UDe=s(gc);pE=n(UDe,"A",{id:!0,class:!0,href:!0});var DEt=s(pE);g0e=n(DEt,"SPAN",{});var GEt=s(g0e);T(W8.$$.fragment,GEt),GEt.forEach(t),DEt.forEach(t),G4r=i(UDe),h0e=n(UDe,"SPAN",{});var OEt=s(h0e);O4r=r(OEt,"TFAutoModelForTableQuestionAnswering"),OEt.forEach(t),UDe.forEach(t),VNe=i(f),sr=n(f,"DIV",{class:!0});var $l=s(sr);T(Q8.$$.fragment,$l),V4r=i($l),hc=n($l,"P",{});var iee=s(hc);X4r=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gU=n(iee,"A",{href:!0});var VEt=s(gU);z4r=r(VEt,"from_pretrained()"),VEt.forEach(t),W4r=r(iee," class method or the "),hU=n(iee,"A",{href:!0});var XEt=s(hU);Q4r=r(XEt,"from_config()"),XEt.forEach(t),H4r=r(iee,` class
method.`),iee.forEach(t),U4r=i($l),H8=n($l,"P",{});var JDe=s(H8);J4r=r(JDe,"This class cannot be instantiated directly using "),p0e=n(JDe,"CODE",{});var zEt=s(p0e);Y4r=r(zEt,"__init__()"),zEt.forEach(t),K4r=r(JDe," (throws an error)."),JDe.forEach(t),Z4r=i($l),It=n($l,"DIV",{class:!0});var P6=s(It);T(U8.$$.fragment,P6),eEr=i(P6),_0e=n(P6,"P",{});var WEt=s(_0e);oEr=r(WEt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),WEt.forEach(t),rEr=i(P6),pc=n(P6,"P",{});var dee=s(pc);tEr=r(dee,`Note:
Loading a model from its configuration file does `),u0e=n(dee,"STRONG",{});var QEt=s(u0e);aEr=r(QEt,"not"),QEt.forEach(t),nEr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(dee,"A",{href:!0});var HEt=s(pU);sEr=r(HEt,"from_pretrained()"),HEt.forEach(t),lEr=r(dee," to load the model weights."),dee.forEach(t),iEr=i(P6),T(_E.$$.fragment,P6),P6.forEach(t),dEr=i($l),Br=n($l,"DIV",{class:!0});var kl=s(Br);T(J8.$$.fragment,kl),cEr=i(kl),b0e=n(kl,"P",{});var UEt=s(b0e);fEr=r(UEt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),UEt.forEach(t),mEr=i(kl),dn=n(kl,"P",{});var I6=s(dn);gEr=r(I6,"The model class to instantiate is selected based on the "),v0e=n(I6,"CODE",{});var JEt=s(v0e);hEr=r(JEt,"model_type"),JEt.forEach(t),pEr=r(I6,` property of the config object (either
passed as an argument or loaded from `),F0e=n(I6,"CODE",{});var YEt=s(F0e);_Er=r(YEt,"pretrained_model_name_or_path"),YEt.forEach(t),uEr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T0e=n(I6,"CODE",{});var KEt=s(T0e);bEr=r(KEt,"pretrained_model_name_or_path"),KEt.forEach(t),vEr=r(I6,":"),I6.forEach(t),FEr=i(kl),M0e=n(kl,"UL",{});var ZEt=s(M0e);uE=n(ZEt,"LI",{});var RBe=s(uE);E0e=n(RBe,"STRONG",{});var eCt=s(E0e);TEr=r(eCt,"tapas"),eCt.forEach(t),MEr=r(RBe," \u2014 "),_U=n(RBe,"A",{href:!0});var oCt=s(_U);EEr=r(oCt,"TFTapasForQuestionAnswering"),oCt.forEach(t),CEr=r(RBe," (TAPAS model)"),RBe.forEach(t),ZEt.forEach(t),wEr=i(kl),T(bE.$$.fragment,kl),kl.forEach(t),$l.forEach(t),XNe=i(f),_c=n(f,"H2",{class:!0});var YDe=s(_c);vE=n(YDe,"A",{id:!0,class:!0,href:!0});var rCt=s(vE);C0e=n(rCt,"SPAN",{});var tCt=s(C0e);T(Y8.$$.fragment,tCt),tCt.forEach(t),rCt.forEach(t),AEr=i(YDe),w0e=n(YDe,"SPAN",{});var aCt=s(w0e);yEr=r(aCt,"TFAutoModelForTokenClassification"),aCt.forEach(t),YDe.forEach(t),zNe=i(f),lr=n(f,"DIV",{class:!0});var Sl=s(lr);T(K8.$$.fragment,Sl),LEr=i(Sl),uc=n(Sl,"P",{});var cee=s(uc);xEr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uU=n(cee,"A",{href:!0});var nCt=s(uU);$Er=r(nCt,"from_pretrained()"),nCt.forEach(t),kEr=r(cee," class method or the "),bU=n(cee,"A",{href:!0});var sCt=s(bU);SEr=r(sCt,"from_config()"),sCt.forEach(t),REr=r(cee,` class
method.`),cee.forEach(t),BEr=i(Sl),Z8=n(Sl,"P",{});var KDe=s(Z8);PEr=r(KDe,"This class cannot be instantiated directly using "),A0e=n(KDe,"CODE",{});var lCt=s(A0e);IEr=r(lCt,"__init__()"),lCt.forEach(t),qEr=r(KDe," (throws an error)."),KDe.forEach(t),NEr=i(Sl),qt=n(Sl,"DIV",{class:!0});var q6=s(qt);T(e9.$$.fragment,q6),jEr=i(q6),y0e=n(q6,"P",{});var iCt=s(y0e);DEr=r(iCt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),iCt.forEach(t),GEr=i(q6),bc=n(q6,"P",{});var fee=s(bc);OEr=r(fee,`Note:
Loading a model from its configuration file does `),L0e=n(fee,"STRONG",{});var dCt=s(L0e);VEr=r(dCt,"not"),dCt.forEach(t),XEr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(fee,"A",{href:!0});var cCt=s(vU);zEr=r(cCt,"from_pretrained()"),cCt.forEach(t),WEr=r(fee," to load the model weights."),fee.forEach(t),QEr=i(q6),T(FE.$$.fragment,q6),q6.forEach(t),HEr=i(Sl),Pr=n(Sl,"DIV",{class:!0});var Rl=s(Pr);T(o9.$$.fragment,Rl),UEr=i(Rl),x0e=n(Rl,"P",{});var fCt=s(x0e);JEr=r(fCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fCt.forEach(t),YEr=i(Rl),cn=n(Rl,"P",{});var N6=s(cn);KEr=r(N6,"The model class to instantiate is selected based on the "),$0e=n(N6,"CODE",{});var mCt=s($0e);ZEr=r(mCt,"model_type"),mCt.forEach(t),eCr=r(N6,` property of the config object (either
passed as an argument or loaded from `),k0e=n(N6,"CODE",{});var gCt=s(k0e);oCr=r(gCt,"pretrained_model_name_or_path"),gCt.forEach(t),rCr=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S0e=n(N6,"CODE",{});var hCt=s(S0e);tCr=r(hCt,"pretrained_model_name_or_path"),hCt.forEach(t),aCr=r(N6,":"),N6.forEach(t),nCr=i(Rl),de=n(Rl,"UL",{});var me=s(de);TE=n(me,"LI",{});var BBe=s(TE);R0e=n(BBe,"STRONG",{});var pCt=s(R0e);sCr=r(pCt,"albert"),pCt.forEach(t),lCr=r(BBe," \u2014 "),FU=n(BBe,"A",{href:!0});var _Ct=s(FU);iCr=r(_Ct,"TFAlbertForTokenClassification"),_Ct.forEach(t),dCr=r(BBe," (ALBERT model)"),BBe.forEach(t),cCr=i(me),ME=n(me,"LI",{});var PBe=s(ME);B0e=n(PBe,"STRONG",{});var uCt=s(B0e);fCr=r(uCt,"bert"),uCt.forEach(t),mCr=r(PBe," \u2014 "),TU=n(PBe,"A",{href:!0});var bCt=s(TU);gCr=r(bCt,"TFBertForTokenClassification"),bCt.forEach(t),hCr=r(PBe," (BERT model)"),PBe.forEach(t),pCr=i(me),EE=n(me,"LI",{});var IBe=s(EE);P0e=n(IBe,"STRONG",{});var vCt=s(P0e);_Cr=r(vCt,"camembert"),vCt.forEach(t),uCr=r(IBe," \u2014 "),MU=n(IBe,"A",{href:!0});var FCt=s(MU);bCr=r(FCt,"TFCamembertForTokenClassification"),FCt.forEach(t),vCr=r(IBe," (CamemBERT model)"),IBe.forEach(t),FCr=i(me),CE=n(me,"LI",{});var qBe=s(CE);I0e=n(qBe,"STRONG",{});var TCt=s(I0e);TCr=r(TCt,"convbert"),TCt.forEach(t),MCr=r(qBe," \u2014 "),EU=n(qBe,"A",{href:!0});var MCt=s(EU);ECr=r(MCt,"TFConvBertForTokenClassification"),MCt.forEach(t),CCr=r(qBe," (ConvBERT model)"),qBe.forEach(t),wCr=i(me),wE=n(me,"LI",{});var NBe=s(wE);q0e=n(NBe,"STRONG",{});var ECt=s(q0e);ACr=r(ECt,"deberta"),ECt.forEach(t),yCr=r(NBe," \u2014 "),CU=n(NBe,"A",{href:!0});var CCt=s(CU);LCr=r(CCt,"TFDebertaForTokenClassification"),CCt.forEach(t),xCr=r(NBe," (DeBERTa model)"),NBe.forEach(t),$Cr=i(me),AE=n(me,"LI",{});var jBe=s(AE);N0e=n(jBe,"STRONG",{});var wCt=s(N0e);kCr=r(wCt,"deberta-v2"),wCt.forEach(t),SCr=r(jBe," \u2014 "),wU=n(jBe,"A",{href:!0});var ACt=s(wU);RCr=r(ACt,"TFDebertaV2ForTokenClassification"),ACt.forEach(t),BCr=r(jBe," (DeBERTa-v2 model)"),jBe.forEach(t),PCr=i(me),yE=n(me,"LI",{});var DBe=s(yE);j0e=n(DBe,"STRONG",{});var yCt=s(j0e);ICr=r(yCt,"distilbert"),yCt.forEach(t),qCr=r(DBe," \u2014 "),AU=n(DBe,"A",{href:!0});var LCt=s(AU);NCr=r(LCt,"TFDistilBertForTokenClassification"),LCt.forEach(t),jCr=r(DBe," (DistilBERT model)"),DBe.forEach(t),DCr=i(me),LE=n(me,"LI",{});var GBe=s(LE);D0e=n(GBe,"STRONG",{});var xCt=s(D0e);GCr=r(xCt,"electra"),xCt.forEach(t),OCr=r(GBe," \u2014 "),yU=n(GBe,"A",{href:!0});var $Ct=s(yU);VCr=r($Ct,"TFElectraForTokenClassification"),$Ct.forEach(t),XCr=r(GBe," (ELECTRA model)"),GBe.forEach(t),zCr=i(me),xE=n(me,"LI",{});var OBe=s(xE);G0e=n(OBe,"STRONG",{});var kCt=s(G0e);WCr=r(kCt,"flaubert"),kCt.forEach(t),QCr=r(OBe," \u2014 "),LU=n(OBe,"A",{href:!0});var SCt=s(LU);HCr=r(SCt,"TFFlaubertForTokenClassification"),SCt.forEach(t),UCr=r(OBe," (FlauBERT model)"),OBe.forEach(t),JCr=i(me),$E=n(me,"LI",{});var VBe=s($E);O0e=n(VBe,"STRONG",{});var RCt=s(O0e);YCr=r(RCt,"funnel"),RCt.forEach(t),KCr=r(VBe," \u2014 "),xU=n(VBe,"A",{href:!0});var BCt=s(xU);ZCr=r(BCt,"TFFunnelForTokenClassification"),BCt.forEach(t),e5r=r(VBe," (Funnel Transformer model)"),VBe.forEach(t),o5r=i(me),kE=n(me,"LI",{});var XBe=s(kE);V0e=n(XBe,"STRONG",{});var PCt=s(V0e);r5r=r(PCt,"layoutlm"),PCt.forEach(t),t5r=r(XBe," \u2014 "),$U=n(XBe,"A",{href:!0});var ICt=s($U);a5r=r(ICt,"TFLayoutLMForTokenClassification"),ICt.forEach(t),n5r=r(XBe," (LayoutLM model)"),XBe.forEach(t),s5r=i(me),SE=n(me,"LI",{});var zBe=s(SE);X0e=n(zBe,"STRONG",{});var qCt=s(X0e);l5r=r(qCt,"longformer"),qCt.forEach(t),i5r=r(zBe," \u2014 "),kU=n(zBe,"A",{href:!0});var NCt=s(kU);d5r=r(NCt,"TFLongformerForTokenClassification"),NCt.forEach(t),c5r=r(zBe," (Longformer model)"),zBe.forEach(t),f5r=i(me),RE=n(me,"LI",{});var WBe=s(RE);z0e=n(WBe,"STRONG",{});var jCt=s(z0e);m5r=r(jCt,"mobilebert"),jCt.forEach(t),g5r=r(WBe," \u2014 "),SU=n(WBe,"A",{href:!0});var DCt=s(SU);h5r=r(DCt,"TFMobileBertForTokenClassification"),DCt.forEach(t),p5r=r(WBe," (MobileBERT model)"),WBe.forEach(t),_5r=i(me),BE=n(me,"LI",{});var QBe=s(BE);W0e=n(QBe,"STRONG",{});var GCt=s(W0e);u5r=r(GCt,"mpnet"),GCt.forEach(t),b5r=r(QBe," \u2014 "),RU=n(QBe,"A",{href:!0});var OCt=s(RU);v5r=r(OCt,"TFMPNetForTokenClassification"),OCt.forEach(t),F5r=r(QBe," (MPNet model)"),QBe.forEach(t),T5r=i(me),PE=n(me,"LI",{});var HBe=s(PE);Q0e=n(HBe,"STRONG",{});var VCt=s(Q0e);M5r=r(VCt,"rembert"),VCt.forEach(t),E5r=r(HBe," \u2014 "),BU=n(HBe,"A",{href:!0});var XCt=s(BU);C5r=r(XCt,"TFRemBertForTokenClassification"),XCt.forEach(t),w5r=r(HBe," (RemBERT model)"),HBe.forEach(t),A5r=i(me),IE=n(me,"LI",{});var UBe=s(IE);H0e=n(UBe,"STRONG",{});var zCt=s(H0e);y5r=r(zCt,"roberta"),zCt.forEach(t),L5r=r(UBe," \u2014 "),PU=n(UBe,"A",{href:!0});var WCt=s(PU);x5r=r(WCt,"TFRobertaForTokenClassification"),WCt.forEach(t),$5r=r(UBe," (RoBERTa model)"),UBe.forEach(t),k5r=i(me),qE=n(me,"LI",{});var JBe=s(qE);U0e=n(JBe,"STRONG",{});var QCt=s(U0e);S5r=r(QCt,"roformer"),QCt.forEach(t),R5r=r(JBe," \u2014 "),IU=n(JBe,"A",{href:!0});var HCt=s(IU);B5r=r(HCt,"TFRoFormerForTokenClassification"),HCt.forEach(t),P5r=r(JBe," (RoFormer model)"),JBe.forEach(t),I5r=i(me),NE=n(me,"LI",{});var YBe=s(NE);J0e=n(YBe,"STRONG",{});var UCt=s(J0e);q5r=r(UCt,"xlm"),UCt.forEach(t),N5r=r(YBe," \u2014 "),qU=n(YBe,"A",{href:!0});var JCt=s(qU);j5r=r(JCt,"TFXLMForTokenClassification"),JCt.forEach(t),D5r=r(YBe," (XLM model)"),YBe.forEach(t),G5r=i(me),jE=n(me,"LI",{});var KBe=s(jE);Y0e=n(KBe,"STRONG",{});var YCt=s(Y0e);O5r=r(YCt,"xlm-roberta"),YCt.forEach(t),V5r=r(KBe," \u2014 "),NU=n(KBe,"A",{href:!0});var KCt=s(NU);X5r=r(KCt,"TFXLMRobertaForTokenClassification"),KCt.forEach(t),z5r=r(KBe," (XLM-RoBERTa model)"),KBe.forEach(t),W5r=i(me),DE=n(me,"LI",{});var ZBe=s(DE);K0e=n(ZBe,"STRONG",{});var ZCt=s(K0e);Q5r=r(ZCt,"xlnet"),ZCt.forEach(t),H5r=r(ZBe," \u2014 "),jU=n(ZBe,"A",{href:!0});var e5t=s(jU);U5r=r(e5t,"TFXLNetForTokenClassification"),e5t.forEach(t),J5r=r(ZBe," (XLNet model)"),ZBe.forEach(t),me.forEach(t),Y5r=i(Rl),T(GE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),WNe=i(f),vc=n(f,"H2",{class:!0});var ZDe=s(vc);OE=n(ZDe,"A",{id:!0,class:!0,href:!0});var o5t=s(OE);Z0e=n(o5t,"SPAN",{});var r5t=s(Z0e);T(r9.$$.fragment,r5t),r5t.forEach(t),o5t.forEach(t),K5r=i(ZDe),eTe=n(ZDe,"SPAN",{});var t5t=s(eTe);Z5r=r(t5t,"TFAutoModelForQuestionAnswering"),t5t.forEach(t),ZDe.forEach(t),QNe=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(t9.$$.fragment,Bl),e3r=i(Bl),Fc=n(Bl,"P",{});var mee=s(Fc);o3r=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DU=n(mee,"A",{href:!0});var a5t=s(DU);r3r=r(a5t,"from_pretrained()"),a5t.forEach(t),t3r=r(mee," class method or the "),GU=n(mee,"A",{href:!0});var n5t=s(GU);a3r=r(n5t,"from_config()"),n5t.forEach(t),n3r=r(mee,` class
method.`),mee.forEach(t),s3r=i(Bl),a9=n(Bl,"P",{});var eGe=s(a9);l3r=r(eGe,"This class cannot be instantiated directly using "),oTe=n(eGe,"CODE",{});var s5t=s(oTe);i3r=r(s5t,"__init__()"),s5t.forEach(t),d3r=r(eGe," (throws an error)."),eGe.forEach(t),c3r=i(Bl),Nt=n(Bl,"DIV",{class:!0});var j6=s(Nt);T(n9.$$.fragment,j6),f3r=i(j6),rTe=n(j6,"P",{});var l5t=s(rTe);m3r=r(l5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),l5t.forEach(t),g3r=i(j6),Tc=n(j6,"P",{});var gee=s(Tc);h3r=r(gee,`Note:
Loading a model from its configuration file does `),tTe=n(gee,"STRONG",{});var i5t=s(tTe);p3r=r(i5t,"not"),i5t.forEach(t),_3r=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),OU=n(gee,"A",{href:!0});var d5t=s(OU);u3r=r(d5t,"from_pretrained()"),d5t.forEach(t),b3r=r(gee," to load the model weights."),gee.forEach(t),v3r=i(j6),T(VE.$$.fragment,j6),j6.forEach(t),F3r=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Pl=s(Ir);T(s9.$$.fragment,Pl),T3r=i(Pl),aTe=n(Pl,"P",{});var c5t=s(aTe);M3r=r(c5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),c5t.forEach(t),E3r=i(Pl),fn=n(Pl,"P",{});var D6=s(fn);C3r=r(D6,"The model class to instantiate is selected based on the "),nTe=n(D6,"CODE",{});var f5t=s(nTe);w3r=r(f5t,"model_type"),f5t.forEach(t),A3r=r(D6,` property of the config object (either
passed as an argument or loaded from `),sTe=n(D6,"CODE",{});var m5t=s(sTe);y3r=r(m5t,"pretrained_model_name_or_path"),m5t.forEach(t),L3r=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=n(D6,"CODE",{});var g5t=s(lTe);x3r=r(g5t,"pretrained_model_name_or_path"),g5t.forEach(t),$3r=r(D6,":"),D6.forEach(t),k3r=i(Pl),ce=n(Pl,"UL",{});var ge=s(ce);XE=n(ge,"LI",{});var ePe=s(XE);iTe=n(ePe,"STRONG",{});var h5t=s(iTe);S3r=r(h5t,"albert"),h5t.forEach(t),R3r=r(ePe," \u2014 "),VU=n(ePe,"A",{href:!0});var p5t=s(VU);B3r=r(p5t,"TFAlbertForQuestionAnswering"),p5t.forEach(t),P3r=r(ePe," (ALBERT model)"),ePe.forEach(t),I3r=i(ge),zE=n(ge,"LI",{});var oPe=s(zE);dTe=n(oPe,"STRONG",{});var _5t=s(dTe);q3r=r(_5t,"bert"),_5t.forEach(t),N3r=r(oPe," \u2014 "),XU=n(oPe,"A",{href:!0});var u5t=s(XU);j3r=r(u5t,"TFBertForQuestionAnswering"),u5t.forEach(t),D3r=r(oPe," (BERT model)"),oPe.forEach(t),G3r=i(ge),WE=n(ge,"LI",{});var rPe=s(WE);cTe=n(rPe,"STRONG",{});var b5t=s(cTe);O3r=r(b5t,"camembert"),b5t.forEach(t),V3r=r(rPe," \u2014 "),zU=n(rPe,"A",{href:!0});var v5t=s(zU);X3r=r(v5t,"TFCamembertForQuestionAnswering"),v5t.forEach(t),z3r=r(rPe," (CamemBERT model)"),rPe.forEach(t),W3r=i(ge),QE=n(ge,"LI",{});var tPe=s(QE);fTe=n(tPe,"STRONG",{});var F5t=s(fTe);Q3r=r(F5t,"convbert"),F5t.forEach(t),H3r=r(tPe," \u2014 "),WU=n(tPe,"A",{href:!0});var T5t=s(WU);U3r=r(T5t,"TFConvBertForQuestionAnswering"),T5t.forEach(t),J3r=r(tPe," (ConvBERT model)"),tPe.forEach(t),Y3r=i(ge),HE=n(ge,"LI",{});var aPe=s(HE);mTe=n(aPe,"STRONG",{});var M5t=s(mTe);K3r=r(M5t,"deberta"),M5t.forEach(t),Z3r=r(aPe," \u2014 "),QU=n(aPe,"A",{href:!0});var E5t=s(QU);ewr=r(E5t,"TFDebertaForQuestionAnswering"),E5t.forEach(t),owr=r(aPe," (DeBERTa model)"),aPe.forEach(t),rwr=i(ge),UE=n(ge,"LI",{});var nPe=s(UE);gTe=n(nPe,"STRONG",{});var C5t=s(gTe);twr=r(C5t,"deberta-v2"),C5t.forEach(t),awr=r(nPe," \u2014 "),HU=n(nPe,"A",{href:!0});var w5t=s(HU);nwr=r(w5t,"TFDebertaV2ForQuestionAnswering"),w5t.forEach(t),swr=r(nPe," (DeBERTa-v2 model)"),nPe.forEach(t),lwr=i(ge),JE=n(ge,"LI",{});var sPe=s(JE);hTe=n(sPe,"STRONG",{});var A5t=s(hTe);iwr=r(A5t,"distilbert"),A5t.forEach(t),dwr=r(sPe," \u2014 "),UU=n(sPe,"A",{href:!0});var y5t=s(UU);cwr=r(y5t,"TFDistilBertForQuestionAnswering"),y5t.forEach(t),fwr=r(sPe," (DistilBERT model)"),sPe.forEach(t),mwr=i(ge),YE=n(ge,"LI",{});var lPe=s(YE);pTe=n(lPe,"STRONG",{});var L5t=s(pTe);gwr=r(L5t,"electra"),L5t.forEach(t),hwr=r(lPe," \u2014 "),JU=n(lPe,"A",{href:!0});var x5t=s(JU);pwr=r(x5t,"TFElectraForQuestionAnswering"),x5t.forEach(t),_wr=r(lPe," (ELECTRA model)"),lPe.forEach(t),uwr=i(ge),KE=n(ge,"LI",{});var iPe=s(KE);_Te=n(iPe,"STRONG",{});var $5t=s(_Te);bwr=r($5t,"flaubert"),$5t.forEach(t),vwr=r(iPe," \u2014 "),YU=n(iPe,"A",{href:!0});var k5t=s(YU);Fwr=r(k5t,"TFFlaubertForQuestionAnsweringSimple"),k5t.forEach(t),Twr=r(iPe," (FlauBERT model)"),iPe.forEach(t),Mwr=i(ge),ZE=n(ge,"LI",{});var dPe=s(ZE);uTe=n(dPe,"STRONG",{});var S5t=s(uTe);Ewr=r(S5t,"funnel"),S5t.forEach(t),Cwr=r(dPe," \u2014 "),KU=n(dPe,"A",{href:!0});var R5t=s(KU);wwr=r(R5t,"TFFunnelForQuestionAnswering"),R5t.forEach(t),Awr=r(dPe," (Funnel Transformer model)"),dPe.forEach(t),ywr=i(ge),eC=n(ge,"LI",{});var cPe=s(eC);bTe=n(cPe,"STRONG",{});var B5t=s(bTe);Lwr=r(B5t,"gptj"),B5t.forEach(t),xwr=r(cPe," \u2014 "),ZU=n(cPe,"A",{href:!0});var P5t=s(ZU);$wr=r(P5t,"TFGPTJForQuestionAnswering"),P5t.forEach(t),kwr=r(cPe," (GPT-J model)"),cPe.forEach(t),Swr=i(ge),oC=n(ge,"LI",{});var fPe=s(oC);vTe=n(fPe,"STRONG",{});var I5t=s(vTe);Rwr=r(I5t,"longformer"),I5t.forEach(t),Bwr=r(fPe," \u2014 "),eJ=n(fPe,"A",{href:!0});var q5t=s(eJ);Pwr=r(q5t,"TFLongformerForQuestionAnswering"),q5t.forEach(t),Iwr=r(fPe," (Longformer model)"),fPe.forEach(t),qwr=i(ge),rC=n(ge,"LI",{});var mPe=s(rC);FTe=n(mPe,"STRONG",{});var N5t=s(FTe);Nwr=r(N5t,"mobilebert"),N5t.forEach(t),jwr=r(mPe," \u2014 "),oJ=n(mPe,"A",{href:!0});var j5t=s(oJ);Dwr=r(j5t,"TFMobileBertForQuestionAnswering"),j5t.forEach(t),Gwr=r(mPe," (MobileBERT model)"),mPe.forEach(t),Owr=i(ge),tC=n(ge,"LI",{});var gPe=s(tC);TTe=n(gPe,"STRONG",{});var D5t=s(TTe);Vwr=r(D5t,"mpnet"),D5t.forEach(t),Xwr=r(gPe," \u2014 "),rJ=n(gPe,"A",{href:!0});var G5t=s(rJ);zwr=r(G5t,"TFMPNetForQuestionAnswering"),G5t.forEach(t),Wwr=r(gPe," (MPNet model)"),gPe.forEach(t),Qwr=i(ge),aC=n(ge,"LI",{});var hPe=s(aC);MTe=n(hPe,"STRONG",{});var O5t=s(MTe);Hwr=r(O5t,"rembert"),O5t.forEach(t),Uwr=r(hPe," \u2014 "),tJ=n(hPe,"A",{href:!0});var V5t=s(tJ);Jwr=r(V5t,"TFRemBertForQuestionAnswering"),V5t.forEach(t),Ywr=r(hPe," (RemBERT model)"),hPe.forEach(t),Kwr=i(ge),nC=n(ge,"LI",{});var pPe=s(nC);ETe=n(pPe,"STRONG",{});var X5t=s(ETe);Zwr=r(X5t,"roberta"),X5t.forEach(t),e6r=r(pPe," \u2014 "),aJ=n(pPe,"A",{href:!0});var z5t=s(aJ);o6r=r(z5t,"TFRobertaForQuestionAnswering"),z5t.forEach(t),r6r=r(pPe," (RoBERTa model)"),pPe.forEach(t),t6r=i(ge),sC=n(ge,"LI",{});var _Pe=s(sC);CTe=n(_Pe,"STRONG",{});var W5t=s(CTe);a6r=r(W5t,"roformer"),W5t.forEach(t),n6r=r(_Pe," \u2014 "),nJ=n(_Pe,"A",{href:!0});var Q5t=s(nJ);s6r=r(Q5t,"TFRoFormerForQuestionAnswering"),Q5t.forEach(t),l6r=r(_Pe," (RoFormer model)"),_Pe.forEach(t),i6r=i(ge),lC=n(ge,"LI",{});var uPe=s(lC);wTe=n(uPe,"STRONG",{});var H5t=s(wTe);d6r=r(H5t,"xlm"),H5t.forEach(t),c6r=r(uPe," \u2014 "),sJ=n(uPe,"A",{href:!0});var U5t=s(sJ);f6r=r(U5t,"TFXLMForQuestionAnsweringSimple"),U5t.forEach(t),m6r=r(uPe," (XLM model)"),uPe.forEach(t),g6r=i(ge),iC=n(ge,"LI",{});var bPe=s(iC);ATe=n(bPe,"STRONG",{});var J5t=s(ATe);h6r=r(J5t,"xlm-roberta"),J5t.forEach(t),p6r=r(bPe," \u2014 "),lJ=n(bPe,"A",{href:!0});var Y5t=s(lJ);_6r=r(Y5t,"TFXLMRobertaForQuestionAnswering"),Y5t.forEach(t),u6r=r(bPe," (XLM-RoBERTa model)"),bPe.forEach(t),b6r=i(ge),dC=n(ge,"LI",{});var vPe=s(dC);yTe=n(vPe,"STRONG",{});var K5t=s(yTe);v6r=r(K5t,"xlnet"),K5t.forEach(t),F6r=r(vPe," \u2014 "),iJ=n(vPe,"A",{href:!0});var Z5t=s(iJ);T6r=r(Z5t,"TFXLNetForQuestionAnsweringSimple"),Z5t.forEach(t),M6r=r(vPe," (XLNet model)"),vPe.forEach(t),ge.forEach(t),E6r=i(Pl),T(cC.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),HNe=i(f),Mc=n(f,"H2",{class:!0});var oGe=s(Mc);fC=n(oGe,"A",{id:!0,class:!0,href:!0});var e3t=s(fC);LTe=n(e3t,"SPAN",{});var o3t=s(LTe);T(l9.$$.fragment,o3t),o3t.forEach(t),e3t.forEach(t),C6r=i(oGe),xTe=n(oGe,"SPAN",{});var r3t=s(xTe);w6r=r(r3t,"TFAutoModelForVision2Seq"),r3t.forEach(t),oGe.forEach(t),UNe=i(f),dr=n(f,"DIV",{class:!0});var Il=s(dr);T(i9.$$.fragment,Il),A6r=i(Il),Ec=n(Il,"P",{});var hee=s(Ec);y6r=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dJ=n(hee,"A",{href:!0});var t3t=s(dJ);L6r=r(t3t,"from_pretrained()"),t3t.forEach(t),x6r=r(hee," class method or the "),cJ=n(hee,"A",{href:!0});var a3t=s(cJ);$6r=r(a3t,"from_config()"),a3t.forEach(t),k6r=r(hee,` class
method.`),hee.forEach(t),S6r=i(Il),d9=n(Il,"P",{});var rGe=s(d9);R6r=r(rGe,"This class cannot be instantiated directly using "),$Te=n(rGe,"CODE",{});var n3t=s($Te);B6r=r(n3t,"__init__()"),n3t.forEach(t),P6r=r(rGe," (throws an error)."),rGe.forEach(t),I6r=i(Il),jt=n(Il,"DIV",{class:!0});var G6=s(jt);T(c9.$$.fragment,G6),q6r=i(G6),kTe=n(G6,"P",{});var s3t=s(kTe);N6r=r(s3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),s3t.forEach(t),j6r=i(G6),Cc=n(G6,"P",{});var pee=s(Cc);D6r=r(pee,`Note:
Loading a model from its configuration file does `),STe=n(pee,"STRONG",{});var l3t=s(STe);G6r=r(l3t,"not"),l3t.forEach(t),O6r=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fJ=n(pee,"A",{href:!0});var i3t=s(fJ);V6r=r(i3t,"from_pretrained()"),i3t.forEach(t),X6r=r(pee," to load the model weights."),pee.forEach(t),z6r=i(G6),T(mC.$$.fragment,G6),G6.forEach(t),W6r=i(Il),qr=n(Il,"DIV",{class:!0});var ql=s(qr);T(f9.$$.fragment,ql),Q6r=i(ql),RTe=n(ql,"P",{});var d3t=s(RTe);H6r=r(d3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),d3t.forEach(t),U6r=i(ql),mn=n(ql,"P",{});var O6=s(mn);J6r=r(O6,"The model class to instantiate is selected based on the "),BTe=n(O6,"CODE",{});var c3t=s(BTe);Y6r=r(c3t,"model_type"),c3t.forEach(t),K6r=r(O6,` property of the config object (either
passed as an argument or loaded from `),PTe=n(O6,"CODE",{});var f3t=s(PTe);Z6r=r(f3t,"pretrained_model_name_or_path"),f3t.forEach(t),eAr=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ITe=n(O6,"CODE",{});var m3t=s(ITe);oAr=r(m3t,"pretrained_model_name_or_path"),m3t.forEach(t),rAr=r(O6,":"),O6.forEach(t),tAr=i(ql),qTe=n(ql,"UL",{});var g3t=s(qTe);gC=n(g3t,"LI",{});var FPe=s(gC);NTe=n(FPe,"STRONG",{});var h3t=s(NTe);aAr=r(h3t,"vision-encoder-decoder"),h3t.forEach(t),nAr=r(FPe," \u2014 "),mJ=n(FPe,"A",{href:!0});var p3t=s(mJ);sAr=r(p3t,"TFVisionEncoderDecoderModel"),p3t.forEach(t),lAr=r(FPe," (Vision Encoder decoder model)"),FPe.forEach(t),g3t.forEach(t),iAr=i(ql),T(hC.$$.fragment,ql),ql.forEach(t),Il.forEach(t),JNe=i(f),wc=n(f,"H2",{class:!0});var tGe=s(wc);pC=n(tGe,"A",{id:!0,class:!0,href:!0});var _3t=s(pC);jTe=n(_3t,"SPAN",{});var u3t=s(jTe);T(m9.$$.fragment,u3t),u3t.forEach(t),_3t.forEach(t),dAr=i(tGe),DTe=n(tGe,"SPAN",{});var b3t=s(DTe);cAr=r(b3t,"TFAutoModelForSpeechSeq2Seq"),b3t.forEach(t),tGe.forEach(t),YNe=i(f),cr=n(f,"DIV",{class:!0});var Nl=s(cr);T(g9.$$.fragment,Nl),fAr=i(Nl),Ac=n(Nl,"P",{});var _ee=s(Ac);mAr=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gJ=n(_ee,"A",{href:!0});var v3t=s(gJ);gAr=r(v3t,"from_pretrained()"),v3t.forEach(t),hAr=r(_ee," class method or the "),hJ=n(_ee,"A",{href:!0});var F3t=s(hJ);pAr=r(F3t,"from_config()"),F3t.forEach(t),_Ar=r(_ee,` class
method.`),_ee.forEach(t),uAr=i(Nl),h9=n(Nl,"P",{});var aGe=s(h9);bAr=r(aGe,"This class cannot be instantiated directly using "),GTe=n(aGe,"CODE",{});var T3t=s(GTe);vAr=r(T3t,"__init__()"),T3t.forEach(t),FAr=r(aGe," (throws an error)."),aGe.forEach(t),TAr=i(Nl),Dt=n(Nl,"DIV",{class:!0});var V6=s(Dt);T(p9.$$.fragment,V6),MAr=i(V6),OTe=n(V6,"P",{});var M3t=s(OTe);EAr=r(M3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),M3t.forEach(t),CAr=i(V6),yc=n(V6,"P",{});var uee=s(yc);wAr=r(uee,`Note:
Loading a model from its configuration file does `),VTe=n(uee,"STRONG",{});var E3t=s(VTe);AAr=r(E3t,"not"),E3t.forEach(t),yAr=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=n(uee,"A",{href:!0});var C3t=s(pJ);LAr=r(C3t,"from_pretrained()"),C3t.forEach(t),xAr=r(uee," to load the model weights."),uee.forEach(t),$Ar=i(V6),T(_C.$$.fragment,V6),V6.forEach(t),kAr=i(Nl),Nr=n(Nl,"DIV",{class:!0});var jl=s(Nr);T(_9.$$.fragment,jl),SAr=i(jl),XTe=n(jl,"P",{});var w3t=s(XTe);RAr=r(w3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),w3t.forEach(t),BAr=i(jl),gn=n(jl,"P",{});var X6=s(gn);PAr=r(X6,"The model class to instantiate is selected based on the "),zTe=n(X6,"CODE",{});var A3t=s(zTe);IAr=r(A3t,"model_type"),A3t.forEach(t),qAr=r(X6,` property of the config object (either
passed as an argument or loaded from `),WTe=n(X6,"CODE",{});var y3t=s(WTe);NAr=r(y3t,"pretrained_model_name_or_path"),y3t.forEach(t),jAr=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=n(X6,"CODE",{});var L3t=s(QTe);DAr=r(L3t,"pretrained_model_name_or_path"),L3t.forEach(t),GAr=r(X6,":"),X6.forEach(t),OAr=i(jl),HTe=n(jl,"UL",{});var x3t=s(HTe);uC=n(x3t,"LI",{});var TPe=s(uC);UTe=n(TPe,"STRONG",{});var $3t=s(UTe);VAr=r($3t,"speech_to_text"),$3t.forEach(t),XAr=r(TPe," \u2014 "),_J=n(TPe,"A",{href:!0});var k3t=s(_J);zAr=r(k3t,"TFSpeech2TextForConditionalGeneration"),k3t.forEach(t),WAr=r(TPe," (Speech2Text model)"),TPe.forEach(t),x3t.forEach(t),QAr=i(jl),T(bC.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),KNe=i(f),Lc=n(f,"H2",{class:!0});var nGe=s(Lc);vC=n(nGe,"A",{id:!0,class:!0,href:!0});var S3t=s(vC);JTe=n(S3t,"SPAN",{});var R3t=s(JTe);T(u9.$$.fragment,R3t),R3t.forEach(t),S3t.forEach(t),HAr=i(nGe),YTe=n(nGe,"SPAN",{});var B3t=s(YTe);UAr=r(B3t,"FlaxAutoModel"),B3t.forEach(t),nGe.forEach(t),ZNe=i(f),fr=n(f,"DIV",{class:!0});var Dl=s(fr);T(b9.$$.fragment,Dl),JAr=i(Dl),xc=n(Dl,"P",{});var bee=s(xc);YAr=r(bee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uJ=n(bee,"A",{href:!0});var P3t=s(uJ);KAr=r(P3t,"from_pretrained()"),P3t.forEach(t),ZAr=r(bee," class method or the "),bJ=n(bee,"A",{href:!0});var I3t=s(bJ);eyr=r(I3t,"from_config()"),I3t.forEach(t),oyr=r(bee,` class
method.`),bee.forEach(t),ryr=i(Dl),v9=n(Dl,"P",{});var sGe=s(v9);tyr=r(sGe,"This class cannot be instantiated directly using "),KTe=n(sGe,"CODE",{});var q3t=s(KTe);ayr=r(q3t,"__init__()"),q3t.forEach(t),nyr=r(sGe," (throws an error)."),sGe.forEach(t),syr=i(Dl),Gt=n(Dl,"DIV",{class:!0});var z6=s(Gt);T(F9.$$.fragment,z6),lyr=i(z6),ZTe=n(z6,"P",{});var N3t=s(ZTe);iyr=r(N3t,"Instantiates one of the base model classes of the library from a configuration."),N3t.forEach(t),dyr=i(z6),$c=n(z6,"P",{});var vee=s($c);cyr=r(vee,`Note:
Loading a model from its configuration file does `),e7e=n(vee,"STRONG",{});var j3t=s(e7e);fyr=r(j3t,"not"),j3t.forEach(t),myr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=n(vee,"A",{href:!0});var D3t=s(vJ);gyr=r(D3t,"from_pretrained()"),D3t.forEach(t),hyr=r(vee," to load the model weights."),vee.forEach(t),pyr=i(z6),T(FC.$$.fragment,z6),z6.forEach(t),_yr=i(Dl),jr=n(Dl,"DIV",{class:!0});var Gl=s(jr);T(T9.$$.fragment,Gl),uyr=i(Gl),o7e=n(Gl,"P",{});var G3t=s(o7e);byr=r(G3t,"Instantiate one of the base model classes of the library from a pretrained model."),G3t.forEach(t),vyr=i(Gl),hn=n(Gl,"P",{});var W6=s(hn);Fyr=r(W6,"The model class to instantiate is selected based on the "),r7e=n(W6,"CODE",{});var O3t=s(r7e);Tyr=r(O3t,"model_type"),O3t.forEach(t),Myr=r(W6,` property of the config object (either
passed as an argument or loaded from `),t7e=n(W6,"CODE",{});var V3t=s(t7e);Eyr=r(V3t,"pretrained_model_name_or_path"),V3t.forEach(t),Cyr=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a7e=n(W6,"CODE",{});var X3t=s(a7e);wyr=r(X3t,"pretrained_model_name_or_path"),X3t.forEach(t),Ayr=r(W6,":"),W6.forEach(t),yyr=i(Gl),te=n(Gl,"UL",{});var ne=s(te);TC=n(ne,"LI",{});var MPe=s(TC);n7e=n(MPe,"STRONG",{});var z3t=s(n7e);Lyr=r(z3t,"albert"),z3t.forEach(t),xyr=r(MPe," \u2014 "),FJ=n(MPe,"A",{href:!0});var W3t=s(FJ);$yr=r(W3t,"FlaxAlbertModel"),W3t.forEach(t),kyr=r(MPe," (ALBERT model)"),MPe.forEach(t),Syr=i(ne),MC=n(ne,"LI",{});var EPe=s(MC);s7e=n(EPe,"STRONG",{});var Q3t=s(s7e);Ryr=r(Q3t,"bart"),Q3t.forEach(t),Byr=r(EPe," \u2014 "),TJ=n(EPe,"A",{href:!0});var H3t=s(TJ);Pyr=r(H3t,"FlaxBartModel"),H3t.forEach(t),Iyr=r(EPe," (BART model)"),EPe.forEach(t),qyr=i(ne),EC=n(ne,"LI",{});var CPe=s(EC);l7e=n(CPe,"STRONG",{});var U3t=s(l7e);Nyr=r(U3t,"beit"),U3t.forEach(t),jyr=r(CPe," \u2014 "),MJ=n(CPe,"A",{href:!0});var J3t=s(MJ);Dyr=r(J3t,"FlaxBeitModel"),J3t.forEach(t),Gyr=r(CPe," (BEiT model)"),CPe.forEach(t),Oyr=i(ne),CC=n(ne,"LI",{});var wPe=s(CC);i7e=n(wPe,"STRONG",{});var Y3t=s(i7e);Vyr=r(Y3t,"bert"),Y3t.forEach(t),Xyr=r(wPe," \u2014 "),EJ=n(wPe,"A",{href:!0});var K3t=s(EJ);zyr=r(K3t,"FlaxBertModel"),K3t.forEach(t),Wyr=r(wPe," (BERT model)"),wPe.forEach(t),Qyr=i(ne),wC=n(ne,"LI",{});var APe=s(wC);d7e=n(APe,"STRONG",{});var Z3t=s(d7e);Hyr=r(Z3t,"big_bird"),Z3t.forEach(t),Uyr=r(APe," \u2014 "),CJ=n(APe,"A",{href:!0});var ewt=s(CJ);Jyr=r(ewt,"FlaxBigBirdModel"),ewt.forEach(t),Yyr=r(APe," (BigBird model)"),APe.forEach(t),Kyr=i(ne),AC=n(ne,"LI",{});var yPe=s(AC);c7e=n(yPe,"STRONG",{});var owt=s(c7e);Zyr=r(owt,"blenderbot"),owt.forEach(t),eLr=r(yPe," \u2014 "),wJ=n(yPe,"A",{href:!0});var rwt=s(wJ);oLr=r(rwt,"FlaxBlenderbotModel"),rwt.forEach(t),rLr=r(yPe," (Blenderbot model)"),yPe.forEach(t),tLr=i(ne),yC=n(ne,"LI",{});var LPe=s(yC);f7e=n(LPe,"STRONG",{});var twt=s(f7e);aLr=r(twt,"blenderbot-small"),twt.forEach(t),nLr=r(LPe," \u2014 "),AJ=n(LPe,"A",{href:!0});var awt=s(AJ);sLr=r(awt,"FlaxBlenderbotSmallModel"),awt.forEach(t),lLr=r(LPe," (BlenderbotSmall model)"),LPe.forEach(t),iLr=i(ne),LC=n(ne,"LI",{});var xPe=s(LC);m7e=n(xPe,"STRONG",{});var nwt=s(m7e);dLr=r(nwt,"clip"),nwt.forEach(t),cLr=r(xPe," \u2014 "),yJ=n(xPe,"A",{href:!0});var swt=s(yJ);fLr=r(swt,"FlaxCLIPModel"),swt.forEach(t),mLr=r(xPe," (CLIP model)"),xPe.forEach(t),gLr=i(ne),xC=n(ne,"LI",{});var $Pe=s(xC);g7e=n($Pe,"STRONG",{});var lwt=s(g7e);hLr=r(lwt,"distilbert"),lwt.forEach(t),pLr=r($Pe," \u2014 "),LJ=n($Pe,"A",{href:!0});var iwt=s(LJ);_Lr=r(iwt,"FlaxDistilBertModel"),iwt.forEach(t),uLr=r($Pe," (DistilBERT model)"),$Pe.forEach(t),bLr=i(ne),$C=n(ne,"LI",{});var kPe=s($C);h7e=n(kPe,"STRONG",{});var dwt=s(h7e);vLr=r(dwt,"electra"),dwt.forEach(t),FLr=r(kPe," \u2014 "),xJ=n(kPe,"A",{href:!0});var cwt=s(xJ);TLr=r(cwt,"FlaxElectraModel"),cwt.forEach(t),MLr=r(kPe," (ELECTRA model)"),kPe.forEach(t),ELr=i(ne),kC=n(ne,"LI",{});var SPe=s(kC);p7e=n(SPe,"STRONG",{});var fwt=s(p7e);CLr=r(fwt,"gpt2"),fwt.forEach(t),wLr=r(SPe," \u2014 "),$J=n(SPe,"A",{href:!0});var mwt=s($J);ALr=r(mwt,"FlaxGPT2Model"),mwt.forEach(t),yLr=r(SPe," (OpenAI GPT-2 model)"),SPe.forEach(t),LLr=i(ne),SC=n(ne,"LI",{});var RPe=s(SC);_7e=n(RPe,"STRONG",{});var gwt=s(_7e);xLr=r(gwt,"gpt_neo"),gwt.forEach(t),$Lr=r(RPe," \u2014 "),kJ=n(RPe,"A",{href:!0});var hwt=s(kJ);kLr=r(hwt,"FlaxGPTNeoModel"),hwt.forEach(t),SLr=r(RPe," (GPT Neo model)"),RPe.forEach(t),RLr=i(ne),RC=n(ne,"LI",{});var BPe=s(RC);u7e=n(BPe,"STRONG",{});var pwt=s(u7e);BLr=r(pwt,"gptj"),pwt.forEach(t),PLr=r(BPe," \u2014 "),SJ=n(BPe,"A",{href:!0});var _wt=s(SJ);ILr=r(_wt,"FlaxGPTJModel"),_wt.forEach(t),qLr=r(BPe," (GPT-J model)"),BPe.forEach(t),NLr=i(ne),BC=n(ne,"LI",{});var PPe=s(BC);b7e=n(PPe,"STRONG",{});var uwt=s(b7e);jLr=r(uwt,"marian"),uwt.forEach(t),DLr=r(PPe," \u2014 "),RJ=n(PPe,"A",{href:!0});var bwt=s(RJ);GLr=r(bwt,"FlaxMarianModel"),bwt.forEach(t),OLr=r(PPe," (Marian model)"),PPe.forEach(t),VLr=i(ne),PC=n(ne,"LI",{});var IPe=s(PC);v7e=n(IPe,"STRONG",{});var vwt=s(v7e);XLr=r(vwt,"mbart"),vwt.forEach(t),zLr=r(IPe," \u2014 "),BJ=n(IPe,"A",{href:!0});var Fwt=s(BJ);WLr=r(Fwt,"FlaxMBartModel"),Fwt.forEach(t),QLr=r(IPe," (mBART model)"),IPe.forEach(t),HLr=i(ne),IC=n(ne,"LI",{});var qPe=s(IC);F7e=n(qPe,"STRONG",{});var Twt=s(F7e);ULr=r(Twt,"mt5"),Twt.forEach(t),JLr=r(qPe," \u2014 "),PJ=n(qPe,"A",{href:!0});var Mwt=s(PJ);YLr=r(Mwt,"FlaxMT5Model"),Mwt.forEach(t),KLr=r(qPe," (mT5 model)"),qPe.forEach(t),ZLr=i(ne),qC=n(ne,"LI",{});var NPe=s(qC);T7e=n(NPe,"STRONG",{});var Ewt=s(T7e);e8r=r(Ewt,"pegasus"),Ewt.forEach(t),o8r=r(NPe," \u2014 "),IJ=n(NPe,"A",{href:!0});var Cwt=s(IJ);r8r=r(Cwt,"FlaxPegasusModel"),Cwt.forEach(t),t8r=r(NPe," (Pegasus model)"),NPe.forEach(t),a8r=i(ne),NC=n(ne,"LI",{});var jPe=s(NC);M7e=n(jPe,"STRONG",{});var wwt=s(M7e);n8r=r(wwt,"roberta"),wwt.forEach(t),s8r=r(jPe," \u2014 "),qJ=n(jPe,"A",{href:!0});var Awt=s(qJ);l8r=r(Awt,"FlaxRobertaModel"),Awt.forEach(t),i8r=r(jPe," (RoBERTa model)"),jPe.forEach(t),d8r=i(ne),jC=n(ne,"LI",{});var DPe=s(jC);E7e=n(DPe,"STRONG",{});var ywt=s(E7e);c8r=r(ywt,"roformer"),ywt.forEach(t),f8r=r(DPe," \u2014 "),NJ=n(DPe,"A",{href:!0});var Lwt=s(NJ);m8r=r(Lwt,"FlaxRoFormerModel"),Lwt.forEach(t),g8r=r(DPe," (RoFormer model)"),DPe.forEach(t),h8r=i(ne),DC=n(ne,"LI",{});var GPe=s(DC);C7e=n(GPe,"STRONG",{});var xwt=s(C7e);p8r=r(xwt,"t5"),xwt.forEach(t),_8r=r(GPe," \u2014 "),jJ=n(GPe,"A",{href:!0});var $wt=s(jJ);u8r=r($wt,"FlaxT5Model"),$wt.forEach(t),b8r=r(GPe," (T5 model)"),GPe.forEach(t),v8r=i(ne),GC=n(ne,"LI",{});var OPe=s(GC);w7e=n(OPe,"STRONG",{});var kwt=s(w7e);F8r=r(kwt,"vision-text-dual-encoder"),kwt.forEach(t),T8r=r(OPe," \u2014 "),DJ=n(OPe,"A",{href:!0});var Swt=s(DJ);M8r=r(Swt,"FlaxVisionTextDualEncoderModel"),Swt.forEach(t),E8r=r(OPe," (VisionTextDualEncoder model)"),OPe.forEach(t),C8r=i(ne),OC=n(ne,"LI",{});var VPe=s(OC);A7e=n(VPe,"STRONG",{});var Rwt=s(A7e);w8r=r(Rwt,"vit"),Rwt.forEach(t),A8r=r(VPe," \u2014 "),GJ=n(VPe,"A",{href:!0});var Bwt=s(GJ);y8r=r(Bwt,"FlaxViTModel"),Bwt.forEach(t),L8r=r(VPe," (ViT model)"),VPe.forEach(t),x8r=i(ne),VC=n(ne,"LI",{});var XPe=s(VC);y7e=n(XPe,"STRONG",{});var Pwt=s(y7e);$8r=r(Pwt,"wav2vec2"),Pwt.forEach(t),k8r=r(XPe," \u2014 "),OJ=n(XPe,"A",{href:!0});var Iwt=s(OJ);S8r=r(Iwt,"FlaxWav2Vec2Model"),Iwt.forEach(t),R8r=r(XPe," (Wav2Vec2 model)"),XPe.forEach(t),B8r=i(ne),XC=n(ne,"LI",{});var zPe=s(XC);L7e=n(zPe,"STRONG",{});var qwt=s(L7e);P8r=r(qwt,"xglm"),qwt.forEach(t),I8r=r(zPe," \u2014 "),VJ=n(zPe,"A",{href:!0});var Nwt=s(VJ);q8r=r(Nwt,"FlaxXGLMModel"),Nwt.forEach(t),N8r=r(zPe," (XGLM model)"),zPe.forEach(t),j8r=i(ne),zC=n(ne,"LI",{});var WPe=s(zC);x7e=n(WPe,"STRONG",{});var jwt=s(x7e);D8r=r(jwt,"xlm-roberta"),jwt.forEach(t),G8r=r(WPe," \u2014 "),XJ=n(WPe,"A",{href:!0});var Dwt=s(XJ);O8r=r(Dwt,"FlaxXLMRobertaModel"),Dwt.forEach(t),V8r=r(WPe," (XLM-RoBERTa model)"),WPe.forEach(t),ne.forEach(t),X8r=i(Gl),T(WC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),eje=i(f),kc=n(f,"H2",{class:!0});var lGe=s(kc);QC=n(lGe,"A",{id:!0,class:!0,href:!0});var Gwt=s(QC);$7e=n(Gwt,"SPAN",{});var Owt=s($7e);T(M9.$$.fragment,Owt),Owt.forEach(t),Gwt.forEach(t),z8r=i(lGe),k7e=n(lGe,"SPAN",{});var Vwt=s(k7e);W8r=r(Vwt,"FlaxAutoModelForCausalLM"),Vwt.forEach(t),lGe.forEach(t),oje=i(f),mr=n(f,"DIV",{class:!0});var Ol=s(mr);T(E9.$$.fragment,Ol),Q8r=i(Ol),Sc=n(Ol,"P",{});var Fee=s(Sc);H8r=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zJ=n(Fee,"A",{href:!0});var Xwt=s(zJ);U8r=r(Xwt,"from_pretrained()"),Xwt.forEach(t),J8r=r(Fee," class method or the "),WJ=n(Fee,"A",{href:!0});var zwt=s(WJ);Y8r=r(zwt,"from_config()"),zwt.forEach(t),K8r=r(Fee,` class
method.`),Fee.forEach(t),Z8r=i(Ol),C9=n(Ol,"P",{});var iGe=s(C9);e9r=r(iGe,"This class cannot be instantiated directly using "),S7e=n(iGe,"CODE",{});var Wwt=s(S7e);o9r=r(Wwt,"__init__()"),Wwt.forEach(t),r9r=r(iGe," (throws an error)."),iGe.forEach(t),t9r=i(Ol),Ot=n(Ol,"DIV",{class:!0});var Q6=s(Ot);T(w9.$$.fragment,Q6),a9r=i(Q6),R7e=n(Q6,"P",{});var Qwt=s(R7e);n9r=r(Qwt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Qwt.forEach(t),s9r=i(Q6),Rc=n(Q6,"P",{});var Tee=s(Rc);l9r=r(Tee,`Note:
Loading a model from its configuration file does `),B7e=n(Tee,"STRONG",{});var Hwt=s(B7e);i9r=r(Hwt,"not"),Hwt.forEach(t),d9r=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(Tee,"A",{href:!0});var Uwt=s(QJ);c9r=r(Uwt,"from_pretrained()"),Uwt.forEach(t),f9r=r(Tee," to load the model weights."),Tee.forEach(t),m9r=i(Q6),T(HC.$$.fragment,Q6),Q6.forEach(t),g9r=i(Ol),Dr=n(Ol,"DIV",{class:!0});var Vl=s(Dr);T(A9.$$.fragment,Vl),h9r=i(Vl),P7e=n(Vl,"P",{});var Jwt=s(P7e);p9r=r(Jwt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Jwt.forEach(t),_9r=i(Vl),pn=n(Vl,"P",{});var H6=s(pn);u9r=r(H6,"The model class to instantiate is selected based on the "),I7e=n(H6,"CODE",{});var Ywt=s(I7e);b9r=r(Ywt,"model_type"),Ywt.forEach(t),v9r=r(H6,` property of the config object (either
passed as an argument or loaded from `),q7e=n(H6,"CODE",{});var Kwt=s(q7e);F9r=r(Kwt,"pretrained_model_name_or_path"),Kwt.forEach(t),T9r=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N7e=n(H6,"CODE",{});var Zwt=s(N7e);M9r=r(Zwt,"pretrained_model_name_or_path"),Zwt.forEach(t),E9r=r(H6,":"),H6.forEach(t),C9r=i(Vl),Re=n(Vl,"UL",{});var Xe=s(Re);UC=n(Xe,"LI",{});var QPe=s(UC);j7e=n(QPe,"STRONG",{});var e6t=s(j7e);w9r=r(e6t,"bart"),e6t.forEach(t),A9r=r(QPe," \u2014 "),HJ=n(QPe,"A",{href:!0});var o6t=s(HJ);y9r=r(o6t,"FlaxBartForCausalLM"),o6t.forEach(t),L9r=r(QPe," (BART model)"),QPe.forEach(t),x9r=i(Xe),JC=n(Xe,"LI",{});var HPe=s(JC);D7e=n(HPe,"STRONG",{});var r6t=s(D7e);$9r=r(r6t,"bert"),r6t.forEach(t),k9r=r(HPe," \u2014 "),UJ=n(HPe,"A",{href:!0});var t6t=s(UJ);S9r=r(t6t,"FlaxBertForCausalLM"),t6t.forEach(t),R9r=r(HPe," (BERT model)"),HPe.forEach(t),B9r=i(Xe),YC=n(Xe,"LI",{});var UPe=s(YC);G7e=n(UPe,"STRONG",{});var a6t=s(G7e);P9r=r(a6t,"big_bird"),a6t.forEach(t),I9r=r(UPe," \u2014 "),JJ=n(UPe,"A",{href:!0});var n6t=s(JJ);q9r=r(n6t,"FlaxBigBirdForCausalLM"),n6t.forEach(t),N9r=r(UPe," (BigBird model)"),UPe.forEach(t),j9r=i(Xe),KC=n(Xe,"LI",{});var JPe=s(KC);O7e=n(JPe,"STRONG",{});var s6t=s(O7e);D9r=r(s6t,"electra"),s6t.forEach(t),G9r=r(JPe," \u2014 "),YJ=n(JPe,"A",{href:!0});var l6t=s(YJ);O9r=r(l6t,"FlaxElectraForCausalLM"),l6t.forEach(t),V9r=r(JPe," (ELECTRA model)"),JPe.forEach(t),X9r=i(Xe),ZC=n(Xe,"LI",{});var YPe=s(ZC);V7e=n(YPe,"STRONG",{});var i6t=s(V7e);z9r=r(i6t,"gpt2"),i6t.forEach(t),W9r=r(YPe," \u2014 "),KJ=n(YPe,"A",{href:!0});var d6t=s(KJ);Q9r=r(d6t,"FlaxGPT2LMHeadModel"),d6t.forEach(t),H9r=r(YPe," (OpenAI GPT-2 model)"),YPe.forEach(t),U9r=i(Xe),e5=n(Xe,"LI",{});var KPe=s(e5);X7e=n(KPe,"STRONG",{});var c6t=s(X7e);J9r=r(c6t,"gpt_neo"),c6t.forEach(t),Y9r=r(KPe," \u2014 "),ZJ=n(KPe,"A",{href:!0});var f6t=s(ZJ);K9r=r(f6t,"FlaxGPTNeoForCausalLM"),f6t.forEach(t),Z9r=r(KPe," (GPT Neo model)"),KPe.forEach(t),exr=i(Xe),o5=n(Xe,"LI",{});var ZPe=s(o5);z7e=n(ZPe,"STRONG",{});var m6t=s(z7e);oxr=r(m6t,"gptj"),m6t.forEach(t),rxr=r(ZPe," \u2014 "),eY=n(ZPe,"A",{href:!0});var g6t=s(eY);txr=r(g6t,"FlaxGPTJForCausalLM"),g6t.forEach(t),axr=r(ZPe," (GPT-J model)"),ZPe.forEach(t),nxr=i(Xe),r5=n(Xe,"LI",{});var eIe=s(r5);W7e=n(eIe,"STRONG",{});var h6t=s(W7e);sxr=r(h6t,"roberta"),h6t.forEach(t),lxr=r(eIe," \u2014 "),oY=n(eIe,"A",{href:!0});var p6t=s(oY);ixr=r(p6t,"FlaxRobertaForCausalLM"),p6t.forEach(t),dxr=r(eIe," (RoBERTa model)"),eIe.forEach(t),cxr=i(Xe),t5=n(Xe,"LI",{});var oIe=s(t5);Q7e=n(oIe,"STRONG",{});var _6t=s(Q7e);fxr=r(_6t,"xglm"),_6t.forEach(t),mxr=r(oIe," \u2014 "),rY=n(oIe,"A",{href:!0});var u6t=s(rY);gxr=r(u6t,"FlaxXGLMForCausalLM"),u6t.forEach(t),hxr=r(oIe," (XGLM model)"),oIe.forEach(t),Xe.forEach(t),pxr=i(Vl),T(a5.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),rje=i(f),Bc=n(f,"H2",{class:!0});var dGe=s(Bc);n5=n(dGe,"A",{id:!0,class:!0,href:!0});var b6t=s(n5);H7e=n(b6t,"SPAN",{});var v6t=s(H7e);T(y9.$$.fragment,v6t),v6t.forEach(t),b6t.forEach(t),_xr=i(dGe),U7e=n(dGe,"SPAN",{});var F6t=s(U7e);uxr=r(F6t,"FlaxAutoModelForPreTraining"),F6t.forEach(t),dGe.forEach(t),tje=i(f),gr=n(f,"DIV",{class:!0});var Xl=s(gr);T(L9.$$.fragment,Xl),bxr=i(Xl),Pc=n(Xl,"P",{});var Mee=s(Pc);vxr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tY=n(Mee,"A",{href:!0});var T6t=s(tY);Fxr=r(T6t,"from_pretrained()"),T6t.forEach(t),Txr=r(Mee," class method or the "),aY=n(Mee,"A",{href:!0});var M6t=s(aY);Mxr=r(M6t,"from_config()"),M6t.forEach(t),Exr=r(Mee,` class
method.`),Mee.forEach(t),Cxr=i(Xl),x9=n(Xl,"P",{});var cGe=s(x9);wxr=r(cGe,"This class cannot be instantiated directly using "),J7e=n(cGe,"CODE",{});var E6t=s(J7e);Axr=r(E6t,"__init__()"),E6t.forEach(t),yxr=r(cGe," (throws an error)."),cGe.forEach(t),Lxr=i(Xl),Vt=n(Xl,"DIV",{class:!0});var U6=s(Vt);T($9.$$.fragment,U6),xxr=i(U6),Y7e=n(U6,"P",{});var C6t=s(Y7e);$xr=r(C6t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),C6t.forEach(t),kxr=i(U6),Ic=n(U6,"P",{});var Eee=s(Ic);Sxr=r(Eee,`Note:
Loading a model from its configuration file does `),K7e=n(Eee,"STRONG",{});var w6t=s(K7e);Rxr=r(w6t,"not"),w6t.forEach(t),Bxr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=n(Eee,"A",{href:!0});var A6t=s(nY);Pxr=r(A6t,"from_pretrained()"),A6t.forEach(t),Ixr=r(Eee," to load the model weights."),Eee.forEach(t),qxr=i(U6),T(s5.$$.fragment,U6),U6.forEach(t),Nxr=i(Xl),Gr=n(Xl,"DIV",{class:!0});var zl=s(Gr);T(k9.$$.fragment,zl),jxr=i(zl),Z7e=n(zl,"P",{});var y6t=s(Z7e);Dxr=r(y6t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),y6t.forEach(t),Gxr=i(zl),_n=n(zl,"P",{});var J6=s(_n);Oxr=r(J6,"The model class to instantiate is selected based on the "),eMe=n(J6,"CODE",{});var L6t=s(eMe);Vxr=r(L6t,"model_type"),L6t.forEach(t),Xxr=r(J6,` property of the config object (either
passed as an argument or loaded from `),oMe=n(J6,"CODE",{});var x6t=s(oMe);zxr=r(x6t,"pretrained_model_name_or_path"),x6t.forEach(t),Wxr=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rMe=n(J6,"CODE",{});var $6t=s(rMe);Qxr=r($6t,"pretrained_model_name_or_path"),$6t.forEach(t),Hxr=r(J6,":"),J6.forEach(t),Uxr=i(zl),Ee=n(zl,"UL",{});var we=s(Ee);l5=n(we,"LI",{});var rIe=s(l5);tMe=n(rIe,"STRONG",{});var k6t=s(tMe);Jxr=r(k6t,"albert"),k6t.forEach(t),Yxr=r(rIe," \u2014 "),sY=n(rIe,"A",{href:!0});var S6t=s(sY);Kxr=r(S6t,"FlaxAlbertForPreTraining"),S6t.forEach(t),Zxr=r(rIe," (ALBERT model)"),rIe.forEach(t),e$r=i(we),i5=n(we,"LI",{});var tIe=s(i5);aMe=n(tIe,"STRONG",{});var R6t=s(aMe);o$r=r(R6t,"bart"),R6t.forEach(t),r$r=r(tIe," \u2014 "),lY=n(tIe,"A",{href:!0});var B6t=s(lY);t$r=r(B6t,"FlaxBartForConditionalGeneration"),B6t.forEach(t),a$r=r(tIe," (BART model)"),tIe.forEach(t),n$r=i(we),d5=n(we,"LI",{});var aIe=s(d5);nMe=n(aIe,"STRONG",{});var P6t=s(nMe);s$r=r(P6t,"bert"),P6t.forEach(t),l$r=r(aIe," \u2014 "),iY=n(aIe,"A",{href:!0});var I6t=s(iY);i$r=r(I6t,"FlaxBertForPreTraining"),I6t.forEach(t),d$r=r(aIe," (BERT model)"),aIe.forEach(t),c$r=i(we),c5=n(we,"LI",{});var nIe=s(c5);sMe=n(nIe,"STRONG",{});var q6t=s(sMe);f$r=r(q6t,"big_bird"),q6t.forEach(t),m$r=r(nIe," \u2014 "),dY=n(nIe,"A",{href:!0});var N6t=s(dY);g$r=r(N6t,"FlaxBigBirdForPreTraining"),N6t.forEach(t),h$r=r(nIe," (BigBird model)"),nIe.forEach(t),p$r=i(we),f5=n(we,"LI",{});var sIe=s(f5);lMe=n(sIe,"STRONG",{});var j6t=s(lMe);_$r=r(j6t,"electra"),j6t.forEach(t),u$r=r(sIe," \u2014 "),cY=n(sIe,"A",{href:!0});var D6t=s(cY);b$r=r(D6t,"FlaxElectraForPreTraining"),D6t.forEach(t),v$r=r(sIe," (ELECTRA model)"),sIe.forEach(t),F$r=i(we),m5=n(we,"LI",{});var lIe=s(m5);iMe=n(lIe,"STRONG",{});var G6t=s(iMe);T$r=r(G6t,"mbart"),G6t.forEach(t),M$r=r(lIe," \u2014 "),fY=n(lIe,"A",{href:!0});var O6t=s(fY);E$r=r(O6t,"FlaxMBartForConditionalGeneration"),O6t.forEach(t),C$r=r(lIe," (mBART model)"),lIe.forEach(t),w$r=i(we),g5=n(we,"LI",{});var iIe=s(g5);dMe=n(iIe,"STRONG",{});var V6t=s(dMe);A$r=r(V6t,"mt5"),V6t.forEach(t),y$r=r(iIe," \u2014 "),mY=n(iIe,"A",{href:!0});var X6t=s(mY);L$r=r(X6t,"FlaxMT5ForConditionalGeneration"),X6t.forEach(t),x$r=r(iIe," (mT5 model)"),iIe.forEach(t),$$r=i(we),h5=n(we,"LI",{});var dIe=s(h5);cMe=n(dIe,"STRONG",{});var z6t=s(cMe);k$r=r(z6t,"roberta"),z6t.forEach(t),S$r=r(dIe," \u2014 "),gY=n(dIe,"A",{href:!0});var W6t=s(gY);R$r=r(W6t,"FlaxRobertaForMaskedLM"),W6t.forEach(t),B$r=r(dIe," (RoBERTa model)"),dIe.forEach(t),P$r=i(we),p5=n(we,"LI",{});var cIe=s(p5);fMe=n(cIe,"STRONG",{});var Q6t=s(fMe);I$r=r(Q6t,"roformer"),Q6t.forEach(t),q$r=r(cIe," \u2014 "),hY=n(cIe,"A",{href:!0});var H6t=s(hY);N$r=r(H6t,"FlaxRoFormerForMaskedLM"),H6t.forEach(t),j$r=r(cIe," (RoFormer model)"),cIe.forEach(t),D$r=i(we),_5=n(we,"LI",{});var fIe=s(_5);mMe=n(fIe,"STRONG",{});var U6t=s(mMe);G$r=r(U6t,"t5"),U6t.forEach(t),O$r=r(fIe," \u2014 "),pY=n(fIe,"A",{href:!0});var J6t=s(pY);V$r=r(J6t,"FlaxT5ForConditionalGeneration"),J6t.forEach(t),X$r=r(fIe," (T5 model)"),fIe.forEach(t),z$r=i(we),u5=n(we,"LI",{});var mIe=s(u5);gMe=n(mIe,"STRONG",{});var Y6t=s(gMe);W$r=r(Y6t,"wav2vec2"),Y6t.forEach(t),Q$r=r(mIe," \u2014 "),_Y=n(mIe,"A",{href:!0});var K6t=s(_Y);H$r=r(K6t,"FlaxWav2Vec2ForPreTraining"),K6t.forEach(t),U$r=r(mIe," (Wav2Vec2 model)"),mIe.forEach(t),J$r=i(we),b5=n(we,"LI",{});var gIe=s(b5);hMe=n(gIe,"STRONG",{});var Z6t=s(hMe);Y$r=r(Z6t,"xlm-roberta"),Z6t.forEach(t),K$r=r(gIe," \u2014 "),uY=n(gIe,"A",{href:!0});var eAt=s(uY);Z$r=r(eAt,"FlaxXLMRobertaForMaskedLM"),eAt.forEach(t),ekr=r(gIe," (XLM-RoBERTa model)"),gIe.forEach(t),we.forEach(t),okr=i(zl),T(v5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),aje=i(f),qc=n(f,"H2",{class:!0});var fGe=s(qc);F5=n(fGe,"A",{id:!0,class:!0,href:!0});var oAt=s(F5);pMe=n(oAt,"SPAN",{});var rAt=s(pMe);T(S9.$$.fragment,rAt),rAt.forEach(t),oAt.forEach(t),rkr=i(fGe),_Me=n(fGe,"SPAN",{});var tAt=s(_Me);tkr=r(tAt,"FlaxAutoModelForMaskedLM"),tAt.forEach(t),fGe.forEach(t),nje=i(f),hr=n(f,"DIV",{class:!0});var Wl=s(hr);T(R9.$$.fragment,Wl),akr=i(Wl),Nc=n(Wl,"P",{});var Cee=s(Nc);nkr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bY=n(Cee,"A",{href:!0});var aAt=s(bY);skr=r(aAt,"from_pretrained()"),aAt.forEach(t),lkr=r(Cee," class method or the "),vY=n(Cee,"A",{href:!0});var nAt=s(vY);ikr=r(nAt,"from_config()"),nAt.forEach(t),dkr=r(Cee,` class
method.`),Cee.forEach(t),ckr=i(Wl),B9=n(Wl,"P",{});var mGe=s(B9);fkr=r(mGe,"This class cannot be instantiated directly using "),uMe=n(mGe,"CODE",{});var sAt=s(uMe);mkr=r(sAt,"__init__()"),sAt.forEach(t),gkr=r(mGe," (throws an error)."),mGe.forEach(t),hkr=i(Wl),Xt=n(Wl,"DIV",{class:!0});var Y6=s(Xt);T(P9.$$.fragment,Y6),pkr=i(Y6),bMe=n(Y6,"P",{});var lAt=s(bMe);_kr=r(lAt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lAt.forEach(t),ukr=i(Y6),jc=n(Y6,"P",{});var wee=s(jc);bkr=r(wee,`Note:
Loading a model from its configuration file does `),vMe=n(wee,"STRONG",{});var iAt=s(vMe);vkr=r(iAt,"not"),iAt.forEach(t),Fkr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=n(wee,"A",{href:!0});var dAt=s(FY);Tkr=r(dAt,"from_pretrained()"),dAt.forEach(t),Mkr=r(wee," to load the model weights."),wee.forEach(t),Ekr=i(Y6),T(T5.$$.fragment,Y6),Y6.forEach(t),Ckr=i(Wl),Or=n(Wl,"DIV",{class:!0});var Ql=s(Or);T(I9.$$.fragment,Ql),wkr=i(Ql),FMe=n(Ql,"P",{});var cAt=s(FMe);Akr=r(cAt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cAt.forEach(t),ykr=i(Ql),un=n(Ql,"P",{});var K6=s(un);Lkr=r(K6,"The model class to instantiate is selected based on the "),TMe=n(K6,"CODE",{});var fAt=s(TMe);xkr=r(fAt,"model_type"),fAt.forEach(t),$kr=r(K6,` property of the config object (either
passed as an argument or loaded from `),MMe=n(K6,"CODE",{});var mAt=s(MMe);kkr=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),Skr=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EMe=n(K6,"CODE",{});var gAt=s(EMe);Rkr=r(gAt,"pretrained_model_name_or_path"),gAt.forEach(t),Bkr=r(K6,":"),K6.forEach(t),Pkr=i(Ql),Le=n(Ql,"UL",{});var Ie=s(Le);M5=n(Ie,"LI",{});var hIe=s(M5);CMe=n(hIe,"STRONG",{});var hAt=s(CMe);Ikr=r(hAt,"albert"),hAt.forEach(t),qkr=r(hIe," \u2014 "),TY=n(hIe,"A",{href:!0});var pAt=s(TY);Nkr=r(pAt,"FlaxAlbertForMaskedLM"),pAt.forEach(t),jkr=r(hIe," (ALBERT model)"),hIe.forEach(t),Dkr=i(Ie),E5=n(Ie,"LI",{});var pIe=s(E5);wMe=n(pIe,"STRONG",{});var _At=s(wMe);Gkr=r(_At,"bart"),_At.forEach(t),Okr=r(pIe," \u2014 "),MY=n(pIe,"A",{href:!0});var uAt=s(MY);Vkr=r(uAt,"FlaxBartForConditionalGeneration"),uAt.forEach(t),Xkr=r(pIe," (BART model)"),pIe.forEach(t),zkr=i(Ie),C5=n(Ie,"LI",{});var _Ie=s(C5);AMe=n(_Ie,"STRONG",{});var bAt=s(AMe);Wkr=r(bAt,"bert"),bAt.forEach(t),Qkr=r(_Ie," \u2014 "),EY=n(_Ie,"A",{href:!0});var vAt=s(EY);Hkr=r(vAt,"FlaxBertForMaskedLM"),vAt.forEach(t),Ukr=r(_Ie," (BERT model)"),_Ie.forEach(t),Jkr=i(Ie),w5=n(Ie,"LI",{});var uIe=s(w5);yMe=n(uIe,"STRONG",{});var FAt=s(yMe);Ykr=r(FAt,"big_bird"),FAt.forEach(t),Kkr=r(uIe," \u2014 "),CY=n(uIe,"A",{href:!0});var TAt=s(CY);Zkr=r(TAt,"FlaxBigBirdForMaskedLM"),TAt.forEach(t),eSr=r(uIe," (BigBird model)"),uIe.forEach(t),oSr=i(Ie),A5=n(Ie,"LI",{});var bIe=s(A5);LMe=n(bIe,"STRONG",{});var MAt=s(LMe);rSr=r(MAt,"distilbert"),MAt.forEach(t),tSr=r(bIe," \u2014 "),wY=n(bIe,"A",{href:!0});var EAt=s(wY);aSr=r(EAt,"FlaxDistilBertForMaskedLM"),EAt.forEach(t),nSr=r(bIe," (DistilBERT model)"),bIe.forEach(t),sSr=i(Ie),y5=n(Ie,"LI",{});var vIe=s(y5);xMe=n(vIe,"STRONG",{});var CAt=s(xMe);lSr=r(CAt,"electra"),CAt.forEach(t),iSr=r(vIe," \u2014 "),AY=n(vIe,"A",{href:!0});var wAt=s(AY);dSr=r(wAt,"FlaxElectraForMaskedLM"),wAt.forEach(t),cSr=r(vIe," (ELECTRA model)"),vIe.forEach(t),fSr=i(Ie),L5=n(Ie,"LI",{});var FIe=s(L5);$Me=n(FIe,"STRONG",{});var AAt=s($Me);mSr=r(AAt,"mbart"),AAt.forEach(t),gSr=r(FIe," \u2014 "),yY=n(FIe,"A",{href:!0});var yAt=s(yY);hSr=r(yAt,"FlaxMBartForConditionalGeneration"),yAt.forEach(t),pSr=r(FIe," (mBART model)"),FIe.forEach(t),_Sr=i(Ie),x5=n(Ie,"LI",{});var TIe=s(x5);kMe=n(TIe,"STRONG",{});var LAt=s(kMe);uSr=r(LAt,"roberta"),LAt.forEach(t),bSr=r(TIe," \u2014 "),LY=n(TIe,"A",{href:!0});var xAt=s(LY);vSr=r(xAt,"FlaxRobertaForMaskedLM"),xAt.forEach(t),FSr=r(TIe," (RoBERTa model)"),TIe.forEach(t),TSr=i(Ie),$5=n(Ie,"LI",{});var MIe=s($5);SMe=n(MIe,"STRONG",{});var $At=s(SMe);MSr=r($At,"roformer"),$At.forEach(t),ESr=r(MIe," \u2014 "),xY=n(MIe,"A",{href:!0});var kAt=s(xY);CSr=r(kAt,"FlaxRoFormerForMaskedLM"),kAt.forEach(t),wSr=r(MIe," (RoFormer model)"),MIe.forEach(t),ASr=i(Ie),k5=n(Ie,"LI",{});var EIe=s(k5);RMe=n(EIe,"STRONG",{});var SAt=s(RMe);ySr=r(SAt,"xlm-roberta"),SAt.forEach(t),LSr=r(EIe," \u2014 "),$Y=n(EIe,"A",{href:!0});var RAt=s($Y);xSr=r(RAt,"FlaxXLMRobertaForMaskedLM"),RAt.forEach(t),$Sr=r(EIe," (XLM-RoBERTa model)"),EIe.forEach(t),Ie.forEach(t),kSr=i(Ql),T(S5.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),sje=i(f),Dc=n(f,"H2",{class:!0});var gGe=s(Dc);R5=n(gGe,"A",{id:!0,class:!0,href:!0});var BAt=s(R5);BMe=n(BAt,"SPAN",{});var PAt=s(BMe);T(q9.$$.fragment,PAt),PAt.forEach(t),BAt.forEach(t),SSr=i(gGe),PMe=n(gGe,"SPAN",{});var IAt=s(PMe);RSr=r(IAt,"FlaxAutoModelForSeq2SeqLM"),IAt.forEach(t),gGe.forEach(t),lje=i(f),pr=n(f,"DIV",{class:!0});var Hl=s(pr);T(N9.$$.fragment,Hl),BSr=i(Hl),Gc=n(Hl,"P",{});var Aee=s(Gc);PSr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kY=n(Aee,"A",{href:!0});var qAt=s(kY);ISr=r(qAt,"from_pretrained()"),qAt.forEach(t),qSr=r(Aee," class method or the "),SY=n(Aee,"A",{href:!0});var NAt=s(SY);NSr=r(NAt,"from_config()"),NAt.forEach(t),jSr=r(Aee,` class
method.`),Aee.forEach(t),DSr=i(Hl),j9=n(Hl,"P",{});var hGe=s(j9);GSr=r(hGe,"This class cannot be instantiated directly using "),IMe=n(hGe,"CODE",{});var jAt=s(IMe);OSr=r(jAt,"__init__()"),jAt.forEach(t),VSr=r(hGe," (throws an error)."),hGe.forEach(t),XSr=i(Hl),zt=n(Hl,"DIV",{class:!0});var Z6=s(zt);T(D9.$$.fragment,Z6),zSr=i(Z6),qMe=n(Z6,"P",{});var DAt=s(qMe);WSr=r(DAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),DAt.forEach(t),QSr=i(Z6),Oc=n(Z6,"P",{});var yee=s(Oc);HSr=r(yee,`Note:
Loading a model from its configuration file does `),NMe=n(yee,"STRONG",{});var GAt=s(NMe);USr=r(GAt,"not"),GAt.forEach(t),JSr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(yee,"A",{href:!0});var OAt=s(RY);YSr=r(OAt,"from_pretrained()"),OAt.forEach(t),KSr=r(yee," to load the model weights."),yee.forEach(t),ZSr=i(Z6),T(B5.$$.fragment,Z6),Z6.forEach(t),eRr=i(Hl),Vr=n(Hl,"DIV",{class:!0});var Ul=s(Vr);T(G9.$$.fragment,Ul),oRr=i(Ul),jMe=n(Ul,"P",{});var VAt=s(jMe);rRr=r(VAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),VAt.forEach(t),tRr=i(Ul),bn=n(Ul,"P",{});var eA=s(bn);aRr=r(eA,"The model class to instantiate is selected based on the "),DMe=n(eA,"CODE",{});var XAt=s(DMe);nRr=r(XAt,"model_type"),XAt.forEach(t),sRr=r(eA,` property of the config object (either
passed as an argument or loaded from `),GMe=n(eA,"CODE",{});var zAt=s(GMe);lRr=r(zAt,"pretrained_model_name_or_path"),zAt.forEach(t),iRr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OMe=n(eA,"CODE",{});var WAt=s(OMe);dRr=r(WAt,"pretrained_model_name_or_path"),WAt.forEach(t),cRr=r(eA,":"),eA.forEach(t),fRr=i(Ul),Be=n(Ul,"UL",{});var ze=s(Be);P5=n(ze,"LI",{});var CIe=s(P5);VMe=n(CIe,"STRONG",{});var QAt=s(VMe);mRr=r(QAt,"bart"),QAt.forEach(t),gRr=r(CIe," \u2014 "),BY=n(CIe,"A",{href:!0});var HAt=s(BY);hRr=r(HAt,"FlaxBartForConditionalGeneration"),HAt.forEach(t),pRr=r(CIe," (BART model)"),CIe.forEach(t),_Rr=i(ze),I5=n(ze,"LI",{});var wIe=s(I5);XMe=n(wIe,"STRONG",{});var UAt=s(XMe);uRr=r(UAt,"blenderbot"),UAt.forEach(t),bRr=r(wIe," \u2014 "),PY=n(wIe,"A",{href:!0});var JAt=s(PY);vRr=r(JAt,"FlaxBlenderbotForConditionalGeneration"),JAt.forEach(t),FRr=r(wIe," (Blenderbot model)"),wIe.forEach(t),TRr=i(ze),q5=n(ze,"LI",{});var AIe=s(q5);zMe=n(AIe,"STRONG",{});var YAt=s(zMe);MRr=r(YAt,"blenderbot-small"),YAt.forEach(t),ERr=r(AIe," \u2014 "),IY=n(AIe,"A",{href:!0});var KAt=s(IY);CRr=r(KAt,"FlaxBlenderbotSmallForConditionalGeneration"),KAt.forEach(t),wRr=r(AIe," (BlenderbotSmall model)"),AIe.forEach(t),ARr=i(ze),N5=n(ze,"LI",{});var yIe=s(N5);WMe=n(yIe,"STRONG",{});var ZAt=s(WMe);yRr=r(ZAt,"encoder-decoder"),ZAt.forEach(t),LRr=r(yIe," \u2014 "),qY=n(yIe,"A",{href:!0});var eyt=s(qY);xRr=r(eyt,"FlaxEncoderDecoderModel"),eyt.forEach(t),$Rr=r(yIe," (Encoder decoder model)"),yIe.forEach(t),kRr=i(ze),j5=n(ze,"LI",{});var LIe=s(j5);QMe=n(LIe,"STRONG",{});var oyt=s(QMe);SRr=r(oyt,"marian"),oyt.forEach(t),RRr=r(LIe," \u2014 "),NY=n(LIe,"A",{href:!0});var ryt=s(NY);BRr=r(ryt,"FlaxMarianMTModel"),ryt.forEach(t),PRr=r(LIe," (Marian model)"),LIe.forEach(t),IRr=i(ze),D5=n(ze,"LI",{});var xIe=s(D5);HMe=n(xIe,"STRONG",{});var tyt=s(HMe);qRr=r(tyt,"mbart"),tyt.forEach(t),NRr=r(xIe," \u2014 "),jY=n(xIe,"A",{href:!0});var ayt=s(jY);jRr=r(ayt,"FlaxMBartForConditionalGeneration"),ayt.forEach(t),DRr=r(xIe," (mBART model)"),xIe.forEach(t),GRr=i(ze),G5=n(ze,"LI",{});var $Ie=s(G5);UMe=n($Ie,"STRONG",{});var nyt=s(UMe);ORr=r(nyt,"mt5"),nyt.forEach(t),VRr=r($Ie," \u2014 "),DY=n($Ie,"A",{href:!0});var syt=s(DY);XRr=r(syt,"FlaxMT5ForConditionalGeneration"),syt.forEach(t),zRr=r($Ie," (mT5 model)"),$Ie.forEach(t),WRr=i(ze),O5=n(ze,"LI",{});var kIe=s(O5);JMe=n(kIe,"STRONG",{});var lyt=s(JMe);QRr=r(lyt,"pegasus"),lyt.forEach(t),HRr=r(kIe," \u2014 "),GY=n(kIe,"A",{href:!0});var iyt=s(GY);URr=r(iyt,"FlaxPegasusForConditionalGeneration"),iyt.forEach(t),JRr=r(kIe," (Pegasus model)"),kIe.forEach(t),YRr=i(ze),V5=n(ze,"LI",{});var SIe=s(V5);YMe=n(SIe,"STRONG",{});var dyt=s(YMe);KRr=r(dyt,"t5"),dyt.forEach(t),ZRr=r(SIe," \u2014 "),OY=n(SIe,"A",{href:!0});var cyt=s(OY);eBr=r(cyt,"FlaxT5ForConditionalGeneration"),cyt.forEach(t),oBr=r(SIe," (T5 model)"),SIe.forEach(t),ze.forEach(t),rBr=i(Ul),T(X5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),ije=i(f),Vc=n(f,"H2",{class:!0});var pGe=s(Vc);z5=n(pGe,"A",{id:!0,class:!0,href:!0});var fyt=s(z5);KMe=n(fyt,"SPAN",{});var myt=s(KMe);T(O9.$$.fragment,myt),myt.forEach(t),fyt.forEach(t),tBr=i(pGe),ZMe=n(pGe,"SPAN",{});var gyt=s(ZMe);aBr=r(gyt,"FlaxAutoModelForSequenceClassification"),gyt.forEach(t),pGe.forEach(t),dje=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(V9.$$.fragment,Jl),nBr=i(Jl),Xc=n(Jl,"P",{});var Lee=s(Xc);sBr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VY=n(Lee,"A",{href:!0});var hyt=s(VY);lBr=r(hyt,"from_pretrained()"),hyt.forEach(t),iBr=r(Lee," class method or the "),XY=n(Lee,"A",{href:!0});var pyt=s(XY);dBr=r(pyt,"from_config()"),pyt.forEach(t),cBr=r(Lee,` class
method.`),Lee.forEach(t),fBr=i(Jl),X9=n(Jl,"P",{});var _Ge=s(X9);mBr=r(_Ge,"This class cannot be instantiated directly using "),e4e=n(_Ge,"CODE",{});var _yt=s(e4e);gBr=r(_yt,"__init__()"),_yt.forEach(t),hBr=r(_Ge," (throws an error)."),_Ge.forEach(t),pBr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var oA=s(Wt);T(z9.$$.fragment,oA),_Br=i(oA),o4e=n(oA,"P",{});var uyt=s(o4e);uBr=r(uyt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),uyt.forEach(t),bBr=i(oA),zc=n(oA,"P",{});var xee=s(zc);vBr=r(xee,`Note:
Loading a model from its configuration file does `),r4e=n(xee,"STRONG",{});var byt=s(r4e);FBr=r(byt,"not"),byt.forEach(t),TBr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zY=n(xee,"A",{href:!0});var vyt=s(zY);MBr=r(vyt,"from_pretrained()"),vyt.forEach(t),EBr=r(xee," to load the model weights."),xee.forEach(t),CBr=i(oA),T(W5.$$.fragment,oA),oA.forEach(t),wBr=i(Jl),Xr=n(Jl,"DIV",{class:!0});var Yl=s(Xr);T(W9.$$.fragment,Yl),ABr=i(Yl),t4e=n(Yl,"P",{});var Fyt=s(t4e);yBr=r(Fyt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Fyt.forEach(t),LBr=i(Yl),vn=n(Yl,"P",{});var rA=s(vn);xBr=r(rA,"The model class to instantiate is selected based on the "),a4e=n(rA,"CODE",{});var Tyt=s(a4e);$Br=r(Tyt,"model_type"),Tyt.forEach(t),kBr=r(rA,` property of the config object (either
passed as an argument or loaded from `),n4e=n(rA,"CODE",{});var Myt=s(n4e);SBr=r(Myt,"pretrained_model_name_or_path"),Myt.forEach(t),RBr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=n(rA,"CODE",{});var Eyt=s(s4e);BBr=r(Eyt,"pretrained_model_name_or_path"),Eyt.forEach(t),PBr=r(rA,":"),rA.forEach(t),IBr=i(Yl),xe=n(Yl,"UL",{});var qe=s(xe);Q5=n(qe,"LI",{});var RIe=s(Q5);l4e=n(RIe,"STRONG",{});var Cyt=s(l4e);qBr=r(Cyt,"albert"),Cyt.forEach(t),NBr=r(RIe," \u2014 "),WY=n(RIe,"A",{href:!0});var wyt=s(WY);jBr=r(wyt,"FlaxAlbertForSequenceClassification"),wyt.forEach(t),DBr=r(RIe," (ALBERT model)"),RIe.forEach(t),GBr=i(qe),H5=n(qe,"LI",{});var BIe=s(H5);i4e=n(BIe,"STRONG",{});var Ayt=s(i4e);OBr=r(Ayt,"bart"),Ayt.forEach(t),VBr=r(BIe," \u2014 "),QY=n(BIe,"A",{href:!0});var yyt=s(QY);XBr=r(yyt,"FlaxBartForSequenceClassification"),yyt.forEach(t),zBr=r(BIe," (BART model)"),BIe.forEach(t),WBr=i(qe),U5=n(qe,"LI",{});var PIe=s(U5);d4e=n(PIe,"STRONG",{});var Lyt=s(d4e);QBr=r(Lyt,"bert"),Lyt.forEach(t),HBr=r(PIe," \u2014 "),HY=n(PIe,"A",{href:!0});var xyt=s(HY);UBr=r(xyt,"FlaxBertForSequenceClassification"),xyt.forEach(t),JBr=r(PIe," (BERT model)"),PIe.forEach(t),YBr=i(qe),J5=n(qe,"LI",{});var IIe=s(J5);c4e=n(IIe,"STRONG",{});var $yt=s(c4e);KBr=r($yt,"big_bird"),$yt.forEach(t),ZBr=r(IIe," \u2014 "),UY=n(IIe,"A",{href:!0});var kyt=s(UY);ePr=r(kyt,"FlaxBigBirdForSequenceClassification"),kyt.forEach(t),oPr=r(IIe," (BigBird model)"),IIe.forEach(t),rPr=i(qe),Y5=n(qe,"LI",{});var qIe=s(Y5);f4e=n(qIe,"STRONG",{});var Syt=s(f4e);tPr=r(Syt,"distilbert"),Syt.forEach(t),aPr=r(qIe," \u2014 "),JY=n(qIe,"A",{href:!0});var Ryt=s(JY);nPr=r(Ryt,"FlaxDistilBertForSequenceClassification"),Ryt.forEach(t),sPr=r(qIe," (DistilBERT model)"),qIe.forEach(t),lPr=i(qe),K5=n(qe,"LI",{});var NIe=s(K5);m4e=n(NIe,"STRONG",{});var Byt=s(m4e);iPr=r(Byt,"electra"),Byt.forEach(t),dPr=r(NIe," \u2014 "),YY=n(NIe,"A",{href:!0});var Pyt=s(YY);cPr=r(Pyt,"FlaxElectraForSequenceClassification"),Pyt.forEach(t),fPr=r(NIe," (ELECTRA model)"),NIe.forEach(t),mPr=i(qe),Z5=n(qe,"LI",{});var jIe=s(Z5);g4e=n(jIe,"STRONG",{});var Iyt=s(g4e);gPr=r(Iyt,"mbart"),Iyt.forEach(t),hPr=r(jIe," \u2014 "),KY=n(jIe,"A",{href:!0});var qyt=s(KY);pPr=r(qyt,"FlaxMBartForSequenceClassification"),qyt.forEach(t),_Pr=r(jIe," (mBART model)"),jIe.forEach(t),uPr=i(qe),e3=n(qe,"LI",{});var DIe=s(e3);h4e=n(DIe,"STRONG",{});var Nyt=s(h4e);bPr=r(Nyt,"roberta"),Nyt.forEach(t),vPr=r(DIe," \u2014 "),ZY=n(DIe,"A",{href:!0});var jyt=s(ZY);FPr=r(jyt,"FlaxRobertaForSequenceClassification"),jyt.forEach(t),TPr=r(DIe," (RoBERTa model)"),DIe.forEach(t),MPr=i(qe),o3=n(qe,"LI",{});var GIe=s(o3);p4e=n(GIe,"STRONG",{});var Dyt=s(p4e);EPr=r(Dyt,"roformer"),Dyt.forEach(t),CPr=r(GIe," \u2014 "),eK=n(GIe,"A",{href:!0});var Gyt=s(eK);wPr=r(Gyt,"FlaxRoFormerForSequenceClassification"),Gyt.forEach(t),APr=r(GIe," (RoFormer model)"),GIe.forEach(t),yPr=i(qe),r3=n(qe,"LI",{});var OIe=s(r3);_4e=n(OIe,"STRONG",{});var Oyt=s(_4e);LPr=r(Oyt,"xlm-roberta"),Oyt.forEach(t),xPr=r(OIe," \u2014 "),oK=n(OIe,"A",{href:!0});var Vyt=s(oK);$Pr=r(Vyt,"FlaxXLMRobertaForSequenceClassification"),Vyt.forEach(t),kPr=r(OIe," (XLM-RoBERTa model)"),OIe.forEach(t),qe.forEach(t),SPr=i(Yl),T(t3.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),cje=i(f),Wc=n(f,"H2",{class:!0});var uGe=s(Wc);a3=n(uGe,"A",{id:!0,class:!0,href:!0});var Xyt=s(a3);u4e=n(Xyt,"SPAN",{});var zyt=s(u4e);T(Q9.$$.fragment,zyt),zyt.forEach(t),Xyt.forEach(t),RPr=i(uGe),b4e=n(uGe,"SPAN",{});var Wyt=s(b4e);BPr=r(Wyt,"FlaxAutoModelForQuestionAnswering"),Wyt.forEach(t),uGe.forEach(t),fje=i(f),ur=n(f,"DIV",{class:!0});var Kl=s(ur);T(H9.$$.fragment,Kl),PPr=i(Kl),Qc=n(Kl,"P",{});var $ee=s(Qc);IPr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rK=n($ee,"A",{href:!0});var Qyt=s(rK);qPr=r(Qyt,"from_pretrained()"),Qyt.forEach(t),NPr=r($ee," class method or the "),tK=n($ee,"A",{href:!0});var Hyt=s(tK);jPr=r(Hyt,"from_config()"),Hyt.forEach(t),DPr=r($ee,` class
method.`),$ee.forEach(t),GPr=i(Kl),U9=n(Kl,"P",{});var bGe=s(U9);OPr=r(bGe,"This class cannot be instantiated directly using "),v4e=n(bGe,"CODE",{});var Uyt=s(v4e);VPr=r(Uyt,"__init__()"),Uyt.forEach(t),XPr=r(bGe," (throws an error)."),bGe.forEach(t),zPr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var tA=s(Qt);T(J9.$$.fragment,tA),WPr=i(tA),F4e=n(tA,"P",{});var Jyt=s(F4e);QPr=r(Jyt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Jyt.forEach(t),HPr=i(tA),Hc=n(tA,"P",{});var kee=s(Hc);UPr=r(kee,`Note:
Loading a model from its configuration file does `),T4e=n(kee,"STRONG",{});var Yyt=s(T4e);JPr=r(Yyt,"not"),Yyt.forEach(t),YPr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(kee,"A",{href:!0});var Kyt=s(aK);KPr=r(Kyt,"from_pretrained()"),Kyt.forEach(t),ZPr=r(kee," to load the model weights."),kee.forEach(t),eIr=i(tA),T(n3.$$.fragment,tA),tA.forEach(t),oIr=i(Kl),zr=n(Kl,"DIV",{class:!0});var Zl=s(zr);T(Y9.$$.fragment,Zl),rIr=i(Zl),M4e=n(Zl,"P",{});var Zyt=s(M4e);tIr=r(Zyt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Zyt.forEach(t),aIr=i(Zl),Fn=n(Zl,"P",{});var aA=s(Fn);nIr=r(aA,"The model class to instantiate is selected based on the "),E4e=n(aA,"CODE",{});var eLt=s(E4e);sIr=r(eLt,"model_type"),eLt.forEach(t),lIr=r(aA,` property of the config object (either
passed as an argument or loaded from `),C4e=n(aA,"CODE",{});var oLt=s(C4e);iIr=r(oLt,"pretrained_model_name_or_path"),oLt.forEach(t),dIr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=n(aA,"CODE",{});var rLt=s(w4e);cIr=r(rLt,"pretrained_model_name_or_path"),rLt.forEach(t),fIr=r(aA,":"),aA.forEach(t),mIr=i(Zl),$e=n(Zl,"UL",{});var Ne=s($e);s3=n(Ne,"LI",{});var VIe=s(s3);A4e=n(VIe,"STRONG",{});var tLt=s(A4e);gIr=r(tLt,"albert"),tLt.forEach(t),hIr=r(VIe," \u2014 "),nK=n(VIe,"A",{href:!0});var aLt=s(nK);pIr=r(aLt,"FlaxAlbertForQuestionAnswering"),aLt.forEach(t),_Ir=r(VIe," (ALBERT model)"),VIe.forEach(t),uIr=i(Ne),l3=n(Ne,"LI",{});var XIe=s(l3);y4e=n(XIe,"STRONG",{});var nLt=s(y4e);bIr=r(nLt,"bart"),nLt.forEach(t),vIr=r(XIe," \u2014 "),sK=n(XIe,"A",{href:!0});var sLt=s(sK);FIr=r(sLt,"FlaxBartForQuestionAnswering"),sLt.forEach(t),TIr=r(XIe," (BART model)"),XIe.forEach(t),MIr=i(Ne),i3=n(Ne,"LI",{});var zIe=s(i3);L4e=n(zIe,"STRONG",{});var lLt=s(L4e);EIr=r(lLt,"bert"),lLt.forEach(t),CIr=r(zIe," \u2014 "),lK=n(zIe,"A",{href:!0});var iLt=s(lK);wIr=r(iLt,"FlaxBertForQuestionAnswering"),iLt.forEach(t),AIr=r(zIe," (BERT model)"),zIe.forEach(t),yIr=i(Ne),d3=n(Ne,"LI",{});var WIe=s(d3);x4e=n(WIe,"STRONG",{});var dLt=s(x4e);LIr=r(dLt,"big_bird"),dLt.forEach(t),xIr=r(WIe," \u2014 "),iK=n(WIe,"A",{href:!0});var cLt=s(iK);$Ir=r(cLt,"FlaxBigBirdForQuestionAnswering"),cLt.forEach(t),kIr=r(WIe," (BigBird model)"),WIe.forEach(t),SIr=i(Ne),c3=n(Ne,"LI",{});var QIe=s(c3);$4e=n(QIe,"STRONG",{});var fLt=s($4e);RIr=r(fLt,"distilbert"),fLt.forEach(t),BIr=r(QIe," \u2014 "),dK=n(QIe,"A",{href:!0});var mLt=s(dK);PIr=r(mLt,"FlaxDistilBertForQuestionAnswering"),mLt.forEach(t),IIr=r(QIe," (DistilBERT model)"),QIe.forEach(t),qIr=i(Ne),f3=n(Ne,"LI",{});var HIe=s(f3);k4e=n(HIe,"STRONG",{});var gLt=s(k4e);NIr=r(gLt,"electra"),gLt.forEach(t),jIr=r(HIe," \u2014 "),cK=n(HIe,"A",{href:!0});var hLt=s(cK);DIr=r(hLt,"FlaxElectraForQuestionAnswering"),hLt.forEach(t),GIr=r(HIe," (ELECTRA model)"),HIe.forEach(t),OIr=i(Ne),m3=n(Ne,"LI",{});var UIe=s(m3);S4e=n(UIe,"STRONG",{});var pLt=s(S4e);VIr=r(pLt,"mbart"),pLt.forEach(t),XIr=r(UIe," \u2014 "),fK=n(UIe,"A",{href:!0});var _Lt=s(fK);zIr=r(_Lt,"FlaxMBartForQuestionAnswering"),_Lt.forEach(t),WIr=r(UIe," (mBART model)"),UIe.forEach(t),QIr=i(Ne),g3=n(Ne,"LI",{});var JIe=s(g3);R4e=n(JIe,"STRONG",{});var uLt=s(R4e);HIr=r(uLt,"roberta"),uLt.forEach(t),UIr=r(JIe," \u2014 "),mK=n(JIe,"A",{href:!0});var bLt=s(mK);JIr=r(bLt,"FlaxRobertaForQuestionAnswering"),bLt.forEach(t),YIr=r(JIe," (RoBERTa model)"),JIe.forEach(t),KIr=i(Ne),h3=n(Ne,"LI",{});var YIe=s(h3);B4e=n(YIe,"STRONG",{});var vLt=s(B4e);ZIr=r(vLt,"roformer"),vLt.forEach(t),eqr=r(YIe," \u2014 "),gK=n(YIe,"A",{href:!0});var FLt=s(gK);oqr=r(FLt,"FlaxRoFormerForQuestionAnswering"),FLt.forEach(t),rqr=r(YIe," (RoFormer model)"),YIe.forEach(t),tqr=i(Ne),p3=n(Ne,"LI",{});var KIe=s(p3);P4e=n(KIe,"STRONG",{});var TLt=s(P4e);aqr=r(TLt,"xlm-roberta"),TLt.forEach(t),nqr=r(KIe," \u2014 "),hK=n(KIe,"A",{href:!0});var MLt=s(hK);sqr=r(MLt,"FlaxXLMRobertaForQuestionAnswering"),MLt.forEach(t),lqr=r(KIe," (XLM-RoBERTa model)"),KIe.forEach(t),Ne.forEach(t),iqr=i(Zl),T(_3.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),mje=i(f),Uc=n(f,"H2",{class:!0});var vGe=s(Uc);u3=n(vGe,"A",{id:!0,class:!0,href:!0});var ELt=s(u3);I4e=n(ELt,"SPAN",{});var CLt=s(I4e);T(K9.$$.fragment,CLt),CLt.forEach(t),ELt.forEach(t),dqr=i(vGe),q4e=n(vGe,"SPAN",{});var wLt=s(q4e);cqr=r(wLt,"FlaxAutoModelForTokenClassification"),wLt.forEach(t),vGe.forEach(t),gje=i(f),br=n(f,"DIV",{class:!0});var ei=s(br);T(Z9.$$.fragment,ei),fqr=i(ei),Jc=n(ei,"P",{});var See=s(Jc);mqr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pK=n(See,"A",{href:!0});var ALt=s(pK);gqr=r(ALt,"from_pretrained()"),ALt.forEach(t),hqr=r(See," class method or the "),_K=n(See,"A",{href:!0});var yLt=s(_K);pqr=r(yLt,"from_config()"),yLt.forEach(t),_qr=r(See,` class
method.`),See.forEach(t),uqr=i(ei),ex=n(ei,"P",{});var FGe=s(ex);bqr=r(FGe,"This class cannot be instantiated directly using "),N4e=n(FGe,"CODE",{});var LLt=s(N4e);vqr=r(LLt,"__init__()"),LLt.forEach(t),Fqr=r(FGe," (throws an error)."),FGe.forEach(t),Tqr=i(ei),Ht=n(ei,"DIV",{class:!0});var nA=s(Ht);T(ox.$$.fragment,nA),Mqr=i(nA),j4e=n(nA,"P",{});var xLt=s(j4e);Eqr=r(xLt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),xLt.forEach(t),Cqr=i(nA),Yc=n(nA,"P",{});var Ree=s(Yc);wqr=r(Ree,`Note:
Loading a model from its configuration file does `),D4e=n(Ree,"STRONG",{});var $Lt=s(D4e);Aqr=r($Lt,"not"),$Lt.forEach(t),yqr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(Ree,"A",{href:!0});var kLt=s(uK);Lqr=r(kLt,"from_pretrained()"),kLt.forEach(t),xqr=r(Ree," to load the model weights."),Ree.forEach(t),$qr=i(nA),T(b3.$$.fragment,nA),nA.forEach(t),kqr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(rx.$$.fragment,oi),Sqr=i(oi),G4e=n(oi,"P",{});var SLt=s(G4e);Rqr=r(SLt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),SLt.forEach(t),Bqr=i(oi),Tn=n(oi,"P",{});var sA=s(Tn);Pqr=r(sA,"The model class to instantiate is selected based on the "),O4e=n(sA,"CODE",{});var RLt=s(O4e);Iqr=r(RLt,"model_type"),RLt.forEach(t),qqr=r(sA,` property of the config object (either
passed as an argument or loaded from `),V4e=n(sA,"CODE",{});var BLt=s(V4e);Nqr=r(BLt,"pretrained_model_name_or_path"),BLt.forEach(t),jqr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=n(sA,"CODE",{});var PLt=s(X4e);Dqr=r(PLt,"pretrained_model_name_or_path"),PLt.forEach(t),Gqr=r(sA,":"),sA.forEach(t),Oqr=i(oi),De=n(oi,"UL",{});var Fo=s(De);v3=n(Fo,"LI",{});var ZIe=s(v3);z4e=n(ZIe,"STRONG",{});var ILt=s(z4e);Vqr=r(ILt,"albert"),ILt.forEach(t),Xqr=r(ZIe," \u2014 "),bK=n(ZIe,"A",{href:!0});var qLt=s(bK);zqr=r(qLt,"FlaxAlbertForTokenClassification"),qLt.forEach(t),Wqr=r(ZIe," (ALBERT model)"),ZIe.forEach(t),Qqr=i(Fo),F3=n(Fo,"LI",{});var eqe=s(F3);W4e=n(eqe,"STRONG",{});var NLt=s(W4e);Hqr=r(NLt,"bert"),NLt.forEach(t),Uqr=r(eqe," \u2014 "),vK=n(eqe,"A",{href:!0});var jLt=s(vK);Jqr=r(jLt,"FlaxBertForTokenClassification"),jLt.forEach(t),Yqr=r(eqe," (BERT model)"),eqe.forEach(t),Kqr=i(Fo),T3=n(Fo,"LI",{});var oqe=s(T3);Q4e=n(oqe,"STRONG",{});var DLt=s(Q4e);Zqr=r(DLt,"big_bird"),DLt.forEach(t),eNr=r(oqe," \u2014 "),FK=n(oqe,"A",{href:!0});var GLt=s(FK);oNr=r(GLt,"FlaxBigBirdForTokenClassification"),GLt.forEach(t),rNr=r(oqe," (BigBird model)"),oqe.forEach(t),tNr=i(Fo),M3=n(Fo,"LI",{});var rqe=s(M3);H4e=n(rqe,"STRONG",{});var OLt=s(H4e);aNr=r(OLt,"distilbert"),OLt.forEach(t),nNr=r(rqe," \u2014 "),TK=n(rqe,"A",{href:!0});var VLt=s(TK);sNr=r(VLt,"FlaxDistilBertForTokenClassification"),VLt.forEach(t),lNr=r(rqe," (DistilBERT model)"),rqe.forEach(t),iNr=i(Fo),E3=n(Fo,"LI",{});var tqe=s(E3);U4e=n(tqe,"STRONG",{});var XLt=s(U4e);dNr=r(XLt,"electra"),XLt.forEach(t),cNr=r(tqe," \u2014 "),MK=n(tqe,"A",{href:!0});var zLt=s(MK);fNr=r(zLt,"FlaxElectraForTokenClassification"),zLt.forEach(t),mNr=r(tqe," (ELECTRA model)"),tqe.forEach(t),gNr=i(Fo),C3=n(Fo,"LI",{});var aqe=s(C3);J4e=n(aqe,"STRONG",{});var WLt=s(J4e);hNr=r(WLt,"roberta"),WLt.forEach(t),pNr=r(aqe," \u2014 "),EK=n(aqe,"A",{href:!0});var QLt=s(EK);_Nr=r(QLt,"FlaxRobertaForTokenClassification"),QLt.forEach(t),uNr=r(aqe," (RoBERTa model)"),aqe.forEach(t),bNr=i(Fo),w3=n(Fo,"LI",{});var nqe=s(w3);Y4e=n(nqe,"STRONG",{});var HLt=s(Y4e);vNr=r(HLt,"roformer"),HLt.forEach(t),FNr=r(nqe," \u2014 "),CK=n(nqe,"A",{href:!0});var ULt=s(CK);TNr=r(ULt,"FlaxRoFormerForTokenClassification"),ULt.forEach(t),MNr=r(nqe," (RoFormer model)"),nqe.forEach(t),ENr=i(Fo),A3=n(Fo,"LI",{});var sqe=s(A3);K4e=n(sqe,"STRONG",{});var JLt=s(K4e);CNr=r(JLt,"xlm-roberta"),JLt.forEach(t),wNr=r(sqe," \u2014 "),wK=n(sqe,"A",{href:!0});var YLt=s(wK);ANr=r(YLt,"FlaxXLMRobertaForTokenClassification"),YLt.forEach(t),yNr=r(sqe," (XLM-RoBERTa model)"),sqe.forEach(t),Fo.forEach(t),LNr=i(oi),T(y3.$$.fragment,oi),oi.forEach(t),ei.forEach(t),hje=i(f),Kc=n(f,"H2",{class:!0});var TGe=s(Kc);L3=n(TGe,"A",{id:!0,class:!0,href:!0});var KLt=s(L3);Z4e=n(KLt,"SPAN",{});var ZLt=s(Z4e);T(tx.$$.fragment,ZLt),ZLt.forEach(t),KLt.forEach(t),xNr=i(TGe),eEe=n(TGe,"SPAN",{});var e8t=s(eEe);$Nr=r(e8t,"FlaxAutoModelForMultipleChoice"),e8t.forEach(t),TGe.forEach(t),pje=i(f),vr=n(f,"DIV",{class:!0});var ri=s(vr);T(ax.$$.fragment,ri),kNr=i(ri),Zc=n(ri,"P",{});var Bee=s(Zc);SNr=r(Bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AK=n(Bee,"A",{href:!0});var o8t=s(AK);RNr=r(o8t,"from_pretrained()"),o8t.forEach(t),BNr=r(Bee," class method or the "),yK=n(Bee,"A",{href:!0});var r8t=s(yK);PNr=r(r8t,"from_config()"),r8t.forEach(t),INr=r(Bee,` class
method.`),Bee.forEach(t),qNr=i(ri),nx=n(ri,"P",{});var MGe=s(nx);NNr=r(MGe,"This class cannot be instantiated directly using "),oEe=n(MGe,"CODE",{});var t8t=s(oEe);jNr=r(t8t,"__init__()"),t8t.forEach(t),DNr=r(MGe," (throws an error)."),MGe.forEach(t),GNr=i(ri),Ut=n(ri,"DIV",{class:!0});var lA=s(Ut);T(sx.$$.fragment,lA),ONr=i(lA),rEe=n(lA,"P",{});var a8t=s(rEe);VNr=r(a8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),a8t.forEach(t),XNr=i(lA),ef=n(lA,"P",{});var Pee=s(ef);zNr=r(Pee,`Note:
Loading a model from its configuration file does `),tEe=n(Pee,"STRONG",{});var n8t=s(tEe);WNr=r(n8t,"not"),n8t.forEach(t),QNr=r(Pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=n(Pee,"A",{href:!0});var s8t=s(LK);HNr=r(s8t,"from_pretrained()"),s8t.forEach(t),UNr=r(Pee," to load the model weights."),Pee.forEach(t),JNr=i(lA),T(x3.$$.fragment,lA),lA.forEach(t),YNr=i(ri),Qr=n(ri,"DIV",{class:!0});var ti=s(Qr);T(lx.$$.fragment,ti),KNr=i(ti),aEe=n(ti,"P",{});var l8t=s(aEe);ZNr=r(l8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),l8t.forEach(t),ejr=i(ti),Mn=n(ti,"P",{});var iA=s(Mn);ojr=r(iA,"The model class to instantiate is selected based on the "),nEe=n(iA,"CODE",{});var i8t=s(nEe);rjr=r(i8t,"model_type"),i8t.forEach(t),tjr=r(iA,` property of the config object (either
passed as an argument or loaded from `),sEe=n(iA,"CODE",{});var d8t=s(sEe);ajr=r(d8t,"pretrained_model_name_or_path"),d8t.forEach(t),njr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lEe=n(iA,"CODE",{});var c8t=s(lEe);sjr=r(c8t,"pretrained_model_name_or_path"),c8t.forEach(t),ljr=r(iA,":"),iA.forEach(t),ijr=i(ti),Ge=n(ti,"UL",{});var To=s(Ge);$3=n(To,"LI",{});var lqe=s($3);iEe=n(lqe,"STRONG",{});var f8t=s(iEe);djr=r(f8t,"albert"),f8t.forEach(t),cjr=r(lqe," \u2014 "),xK=n(lqe,"A",{href:!0});var m8t=s(xK);fjr=r(m8t,"FlaxAlbertForMultipleChoice"),m8t.forEach(t),mjr=r(lqe," (ALBERT model)"),lqe.forEach(t),gjr=i(To),k3=n(To,"LI",{});var iqe=s(k3);dEe=n(iqe,"STRONG",{});var g8t=s(dEe);hjr=r(g8t,"bert"),g8t.forEach(t),pjr=r(iqe," \u2014 "),$K=n(iqe,"A",{href:!0});var h8t=s($K);_jr=r(h8t,"FlaxBertForMultipleChoice"),h8t.forEach(t),ujr=r(iqe," (BERT model)"),iqe.forEach(t),bjr=i(To),S3=n(To,"LI",{});var dqe=s(S3);cEe=n(dqe,"STRONG",{});var p8t=s(cEe);vjr=r(p8t,"big_bird"),p8t.forEach(t),Fjr=r(dqe," \u2014 "),kK=n(dqe,"A",{href:!0});var _8t=s(kK);Tjr=r(_8t,"FlaxBigBirdForMultipleChoice"),_8t.forEach(t),Mjr=r(dqe," (BigBird model)"),dqe.forEach(t),Ejr=i(To),R3=n(To,"LI",{});var cqe=s(R3);fEe=n(cqe,"STRONG",{});var u8t=s(fEe);Cjr=r(u8t,"distilbert"),u8t.forEach(t),wjr=r(cqe," \u2014 "),SK=n(cqe,"A",{href:!0});var b8t=s(SK);Ajr=r(b8t,"FlaxDistilBertForMultipleChoice"),b8t.forEach(t),yjr=r(cqe," (DistilBERT model)"),cqe.forEach(t),Ljr=i(To),B3=n(To,"LI",{});var fqe=s(B3);mEe=n(fqe,"STRONG",{});var v8t=s(mEe);xjr=r(v8t,"electra"),v8t.forEach(t),$jr=r(fqe," \u2014 "),RK=n(fqe,"A",{href:!0});var F8t=s(RK);kjr=r(F8t,"FlaxElectraForMultipleChoice"),F8t.forEach(t),Sjr=r(fqe," (ELECTRA model)"),fqe.forEach(t),Rjr=i(To),P3=n(To,"LI",{});var mqe=s(P3);gEe=n(mqe,"STRONG",{});var T8t=s(gEe);Bjr=r(T8t,"roberta"),T8t.forEach(t),Pjr=r(mqe," \u2014 "),BK=n(mqe,"A",{href:!0});var M8t=s(BK);Ijr=r(M8t,"FlaxRobertaForMultipleChoice"),M8t.forEach(t),qjr=r(mqe," (RoBERTa model)"),mqe.forEach(t),Njr=i(To),I3=n(To,"LI",{});var gqe=s(I3);hEe=n(gqe,"STRONG",{});var E8t=s(hEe);jjr=r(E8t,"roformer"),E8t.forEach(t),Djr=r(gqe," \u2014 "),PK=n(gqe,"A",{href:!0});var C8t=s(PK);Gjr=r(C8t,"FlaxRoFormerForMultipleChoice"),C8t.forEach(t),Ojr=r(gqe," (RoFormer model)"),gqe.forEach(t),Vjr=i(To),q3=n(To,"LI",{});var hqe=s(q3);pEe=n(hqe,"STRONG",{});var w8t=s(pEe);Xjr=r(w8t,"xlm-roberta"),w8t.forEach(t),zjr=r(hqe," \u2014 "),IK=n(hqe,"A",{href:!0});var A8t=s(IK);Wjr=r(A8t,"FlaxXLMRobertaForMultipleChoice"),A8t.forEach(t),Qjr=r(hqe," (XLM-RoBERTa model)"),hqe.forEach(t),To.forEach(t),Hjr=i(ti),T(N3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),_je=i(f),of=n(f,"H2",{class:!0});var EGe=s(of);j3=n(EGe,"A",{id:!0,class:!0,href:!0});var y8t=s(j3);_Ee=n(y8t,"SPAN",{});var L8t=s(_Ee);T(ix.$$.fragment,L8t),L8t.forEach(t),y8t.forEach(t),Ujr=i(EGe),uEe=n(EGe,"SPAN",{});var x8t=s(uEe);Jjr=r(x8t,"FlaxAutoModelForNextSentencePrediction"),x8t.forEach(t),EGe.forEach(t),uje=i(f),Fr=n(f,"DIV",{class:!0});var ai=s(Fr);T(dx.$$.fragment,ai),Yjr=i(ai),rf=n(ai,"P",{});var Iee=s(rf);Kjr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qK=n(Iee,"A",{href:!0});var $8t=s(qK);Zjr=r($8t,"from_pretrained()"),$8t.forEach(t),eDr=r(Iee," class method or the "),NK=n(Iee,"A",{href:!0});var k8t=s(NK);oDr=r(k8t,"from_config()"),k8t.forEach(t),rDr=r(Iee,` class
method.`),Iee.forEach(t),tDr=i(ai),cx=n(ai,"P",{});var CGe=s(cx);aDr=r(CGe,"This class cannot be instantiated directly using "),bEe=n(CGe,"CODE",{});var S8t=s(bEe);nDr=r(S8t,"__init__()"),S8t.forEach(t),sDr=r(CGe," (throws an error)."),CGe.forEach(t),lDr=i(ai),Jt=n(ai,"DIV",{class:!0});var dA=s(Jt);T(fx.$$.fragment,dA),iDr=i(dA),vEe=n(dA,"P",{});var R8t=s(vEe);dDr=r(R8t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),R8t.forEach(t),cDr=i(dA),tf=n(dA,"P",{});var qee=s(tf);fDr=r(qee,`Note:
Loading a model from its configuration file does `),FEe=n(qee,"STRONG",{});var B8t=s(FEe);mDr=r(B8t,"not"),B8t.forEach(t),gDr=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(qee,"A",{href:!0});var P8t=s(jK);hDr=r(P8t,"from_pretrained()"),P8t.forEach(t),pDr=r(qee," to load the model weights."),qee.forEach(t),_Dr=i(dA),T(D3.$$.fragment,dA),dA.forEach(t),uDr=i(ai),Hr=n(ai,"DIV",{class:!0});var ni=s(Hr);T(mx.$$.fragment,ni),bDr=i(ni),TEe=n(ni,"P",{});var I8t=s(TEe);vDr=r(I8t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),I8t.forEach(t),FDr=i(ni),En=n(ni,"P",{});var cA=s(En);TDr=r(cA,"The model class to instantiate is selected based on the "),MEe=n(cA,"CODE",{});var q8t=s(MEe);MDr=r(q8t,"model_type"),q8t.forEach(t),EDr=r(cA,` property of the config object (either
passed as an argument or loaded from `),EEe=n(cA,"CODE",{});var N8t=s(EEe);CDr=r(N8t,"pretrained_model_name_or_path"),N8t.forEach(t),wDr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CEe=n(cA,"CODE",{});var j8t=s(CEe);ADr=r(j8t,"pretrained_model_name_or_path"),j8t.forEach(t),yDr=r(cA,":"),cA.forEach(t),LDr=i(ni),wEe=n(ni,"UL",{});var D8t=s(wEe);G3=n(D8t,"LI",{});var pqe=s(G3);AEe=n(pqe,"STRONG",{});var G8t=s(AEe);xDr=r(G8t,"bert"),G8t.forEach(t),$Dr=r(pqe," \u2014 "),DK=n(pqe,"A",{href:!0});var O8t=s(DK);kDr=r(O8t,"FlaxBertForNextSentencePrediction"),O8t.forEach(t),SDr=r(pqe," (BERT model)"),pqe.forEach(t),D8t.forEach(t),RDr=i(ni),T(O3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),bje=i(f),af=n(f,"H2",{class:!0});var wGe=s(af);V3=n(wGe,"A",{id:!0,class:!0,href:!0});var V8t=s(V3);yEe=n(V8t,"SPAN",{});var X8t=s(yEe);T(gx.$$.fragment,X8t),X8t.forEach(t),V8t.forEach(t),BDr=i(wGe),LEe=n(wGe,"SPAN",{});var z8t=s(LEe);PDr=r(z8t,"FlaxAutoModelForImageClassification"),z8t.forEach(t),wGe.forEach(t),vje=i(f),Tr=n(f,"DIV",{class:!0});var si=s(Tr);T(hx.$$.fragment,si),IDr=i(si),nf=n(si,"P",{});var Nee=s(nf);qDr=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),GK=n(Nee,"A",{href:!0});var W8t=s(GK);NDr=r(W8t,"from_pretrained()"),W8t.forEach(t),jDr=r(Nee," class method or the "),OK=n(Nee,"A",{href:!0});var Q8t=s(OK);DDr=r(Q8t,"from_config()"),Q8t.forEach(t),GDr=r(Nee,` class
method.`),Nee.forEach(t),ODr=i(si),px=n(si,"P",{});var AGe=s(px);VDr=r(AGe,"This class cannot be instantiated directly using "),xEe=n(AGe,"CODE",{});var H8t=s(xEe);XDr=r(H8t,"__init__()"),H8t.forEach(t),zDr=r(AGe," (throws an error)."),AGe.forEach(t),WDr=i(si),Yt=n(si,"DIV",{class:!0});var fA=s(Yt);T(_x.$$.fragment,fA),QDr=i(fA),$Ee=n(fA,"P",{});var U8t=s($Ee);HDr=r(U8t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),U8t.forEach(t),UDr=i(fA),sf=n(fA,"P",{});var jee=s(sf);JDr=r(jee,`Note:
Loading a model from its configuration file does `),kEe=n(jee,"STRONG",{});var J8t=s(kEe);YDr=r(J8t,"not"),J8t.forEach(t),KDr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=n(jee,"A",{href:!0});var Y8t=s(VK);ZDr=r(Y8t,"from_pretrained()"),Y8t.forEach(t),eGr=r(jee," to load the model weights."),jee.forEach(t),oGr=i(fA),T(X3.$$.fragment,fA),fA.forEach(t),rGr=i(si),Ur=n(si,"DIV",{class:!0});var li=s(Ur);T(ux.$$.fragment,li),tGr=i(li),SEe=n(li,"P",{});var K8t=s(SEe);aGr=r(K8t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),K8t.forEach(t),nGr=i(li),Cn=n(li,"P",{});var mA=s(Cn);sGr=r(mA,"The model class to instantiate is selected based on the "),REe=n(mA,"CODE",{});var Z8t=s(REe);lGr=r(Z8t,"model_type"),Z8t.forEach(t),iGr=r(mA,` property of the config object (either
passed as an argument or loaded from `),BEe=n(mA,"CODE",{});var e9t=s(BEe);dGr=r(e9t,"pretrained_model_name_or_path"),e9t.forEach(t),cGr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PEe=n(mA,"CODE",{});var o9t=s(PEe);fGr=r(o9t,"pretrained_model_name_or_path"),o9t.forEach(t),mGr=r(mA,":"),mA.forEach(t),gGr=i(li),bx=n(li,"UL",{});var yGe=s(bx);z3=n(yGe,"LI",{});var _qe=s(z3);IEe=n(_qe,"STRONG",{});var r9t=s(IEe);hGr=r(r9t,"beit"),r9t.forEach(t),pGr=r(_qe," \u2014 "),XK=n(_qe,"A",{href:!0});var t9t=s(XK);_Gr=r(t9t,"FlaxBeitForImageClassification"),t9t.forEach(t),uGr=r(_qe," (BEiT model)"),_qe.forEach(t),bGr=i(yGe),W3=n(yGe,"LI",{});var uqe=s(W3);qEe=n(uqe,"STRONG",{});var a9t=s(qEe);vGr=r(a9t,"vit"),a9t.forEach(t),FGr=r(uqe," \u2014 "),zK=n(uqe,"A",{href:!0});var n9t=s(zK);TGr=r(n9t,"FlaxViTForImageClassification"),n9t.forEach(t),MGr=r(uqe," (ViT model)"),uqe.forEach(t),yGe.forEach(t),EGr=i(li),T(Q3.$$.fragment,li),li.forEach(t),si.forEach(t),Fje=i(f),lf=n(f,"H2",{class:!0});var LGe=s(lf);H3=n(LGe,"A",{id:!0,class:!0,href:!0});var s9t=s(H3);NEe=n(s9t,"SPAN",{});var l9t=s(NEe);T(vx.$$.fragment,l9t),l9t.forEach(t),s9t.forEach(t),CGr=i(LGe),jEe=n(LGe,"SPAN",{});var i9t=s(jEe);wGr=r(i9t,"FlaxAutoModelForVision2Seq"),i9t.forEach(t),LGe.forEach(t),Tje=i(f),Mr=n(f,"DIV",{class:!0});var ii=s(Mr);T(Fx.$$.fragment,ii),AGr=i(ii),df=n(ii,"P",{});var Dee=s(df);yGr=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WK=n(Dee,"A",{href:!0});var d9t=s(WK);LGr=r(d9t,"from_pretrained()"),d9t.forEach(t),xGr=r(Dee," class method or the "),QK=n(Dee,"A",{href:!0});var c9t=s(QK);$Gr=r(c9t,"from_config()"),c9t.forEach(t),kGr=r(Dee,` class
method.`),Dee.forEach(t),SGr=i(ii),Tx=n(ii,"P",{});var xGe=s(Tx);RGr=r(xGe,"This class cannot be instantiated directly using "),DEe=n(xGe,"CODE",{});var f9t=s(DEe);BGr=r(f9t,"__init__()"),f9t.forEach(t),PGr=r(xGe," (throws an error)."),xGe.forEach(t),IGr=i(ii),Kt=n(ii,"DIV",{class:!0});var gA=s(Kt);T(Mx.$$.fragment,gA),qGr=i(gA),GEe=n(gA,"P",{});var m9t=s(GEe);NGr=r(m9t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),m9t.forEach(t),jGr=i(gA),cf=n(gA,"P",{});var Gee=s(cf);DGr=r(Gee,`Note:
Loading a model from its configuration file does `),OEe=n(Gee,"STRONG",{});var g9t=s(OEe);GGr=r(g9t,"not"),g9t.forEach(t),OGr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=n(Gee,"A",{href:!0});var h9t=s(HK);VGr=r(h9t,"from_pretrained()"),h9t.forEach(t),XGr=r(Gee," to load the model weights."),Gee.forEach(t),zGr=i(gA),T(U3.$$.fragment,gA),gA.forEach(t),WGr=i(ii),Jr=n(ii,"DIV",{class:!0});var di=s(Jr);T(Ex.$$.fragment,di),QGr=i(di),VEe=n(di,"P",{});var p9t=s(VEe);HGr=r(p9t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),p9t.forEach(t),UGr=i(di),wn=n(di,"P",{});var hA=s(wn);JGr=r(hA,"The model class to instantiate is selected based on the "),XEe=n(hA,"CODE",{});var _9t=s(XEe);YGr=r(_9t,"model_type"),_9t.forEach(t),KGr=r(hA,` property of the config object (either
passed as an argument or loaded from `),zEe=n(hA,"CODE",{});var u9t=s(zEe);ZGr=r(u9t,"pretrained_model_name_or_path"),u9t.forEach(t),eOr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WEe=n(hA,"CODE",{});var b9t=s(WEe);oOr=r(b9t,"pretrained_model_name_or_path"),b9t.forEach(t),rOr=r(hA,":"),hA.forEach(t),tOr=i(di),QEe=n(di,"UL",{});var v9t=s(QEe);J3=n(v9t,"LI",{});var bqe=s(J3);HEe=n(bqe,"STRONG",{});var F9t=s(HEe);aOr=r(F9t,"vision-encoder-decoder"),F9t.forEach(t),nOr=r(bqe," \u2014 "),UK=n(bqe,"A",{href:!0});var T9t=s(UK);sOr=r(T9t,"FlaxVisionEncoderDecoderModel"),T9t.forEach(t),lOr=r(bqe," (Vision Encoder decoder model)"),bqe.forEach(t),v9t.forEach(t),iOr=i(di),T(Y3.$$.fragment,di),di.forEach(t),ii.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(w$t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertModel"),c(bf,"id","extending-the-auto-classes"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#extending-the-auto-classes"),c(ui,"class","relative group"),c(Ff,"id","transformers.AutoConfig"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#transformers.AutoConfig"),c(bi,"class","relative group"),c(O$,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(V$,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig"),c(X$,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig"),c(z$,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig"),c(W$,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig"),c(Q$,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(H$,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig"),c(U$,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(J$,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Y$,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(K$,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomConfig"),c(Z$,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig"),c(ek,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig"),c(ok,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig"),c(rk,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig"),c(tk,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig"),c(ak,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig"),c(nk,"href","/docs/transformers/pr_17202/en/model_doc/cvt#transformers.CvtConfig"),c(sk,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(lk,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(ik,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(dk,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig"),c(ck,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(fk,"href","/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(mk,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig"),c(gk,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig"),c(hk,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig"),c(pk,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRConfig"),c(_k,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTConfig"),c(uk,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig"),c(bk,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(vk,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Fk,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaConfig"),c(Tk,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig"),c(Mk,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig"),c(Ek,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig"),c(Ck,"href","/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNConfig"),c(wk,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config"),c(Ak,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(yk,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig"),c(Lk,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig"),c(xk,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig"),c($k,"href","/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(kk,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Sk,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Rk,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig"),c(Bk,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig"),c(Pk,"href","/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeConfig"),c(Ik,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig"),c(qk,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Config"),c(Nk,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig"),c(jk,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Dk,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig"),c(Gk,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Ok,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Vk,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig"),c(Xk,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config"),c(zk,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Wk,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Qk,"href","/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTConfig"),c(Hk,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig"),c(Uk,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Jk,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig"),c(Yk,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Kk,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Zk,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(eS,"href","/docs/transformers/pr_17202/en/model_doc/rag#transformers.RagConfig"),c(oS,"href","/docs/transformers/pr_17202/en/model_doc/realm#transformers.RealmConfig"),c(rS,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig"),c(tS,"href","/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetConfig"),c(aS,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig"),c(nS,"href","/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetConfig"),c(sS,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertConfig"),c(lS,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig"),c(iS,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig"),c(dS,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig"),c(cS,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig"),c(fS,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig"),c(mS,"href","/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(gS,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(hS,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(pS,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterConfig"),c(_S,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(uS,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig"),c(bS,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config"),c(vS,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig"),c(FS,"href","/docs/transformers/pr_17202/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(TS,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(MS,"href","/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRConfig"),c(ES,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(CS,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(wS,"href","/docs/transformers/pr_17202/en/model_doc/van#transformers.VanConfig"),c(AS,"href","/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltConfig"),c(yS,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(LS,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(xS,"href","/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertConfig"),c($S,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig"),c(kS,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(SS,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(RS,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(BS,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig"),c(PS,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig"),c(IS,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig"),c(qS,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(NS,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(jS,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(DS,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig"),c(GS,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosConfig"),c(OS,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eg,"id","transformers.AutoTokenizer"),c(Eg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eg,"href","#transformers.AutoTokenizer"),c(Fi,"class","relative group"),c(VS,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(XS,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizer"),c(zS,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(WS,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartTokenizer"),c(QS,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartTokenizerFast"),c(HS,"href","/docs/transformers/pr_17202/en/model_doc/barthez#transformers.BarthezTokenizer"),c(US,"href","/docs/transformers/pr_17202/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(JS,"href","/docs/transformers/pr_17202/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(YS,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(KS,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(ZS,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(eR,"href","/docs/transformers/pr_17202/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(oR,"href","/docs/transformers/pr_17202/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(rR,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(tR,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(aR,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(nR,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(sR,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(lR,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(iR,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(dR,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(cR,"href","/docs/transformers/pr_17202/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(fR,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertTokenizer"),c(mR,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(gR,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineTokenizer"),c(hR,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPTokenizer"),c(pR,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(_R,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(uR,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(bR,"href","/docs/transformers/pr_17202/en/model_doc/cpm#transformers.CpmTokenizer"),c(vR,"href","/docs/transformers/pr_17202/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(FR,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(TR,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c(MR,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ER,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaTokenizer"),c(CR,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(wR,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(AR,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(yR,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(LR,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(xR,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c($R,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(kR,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraTokenizer"),c(SR,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(RR,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(BR,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetTokenizer"),c(PR,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(IR,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(qR,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelTokenizer"),c(NR,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(jR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(DR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(GR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(OR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(VR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(XR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(zR,"href","/docs/transformers/pr_17202/en/model_doc/herbert#transformers.HerbertTokenizer"),c(WR,"href","/docs/transformers/pr_17202/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(QR,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(HR,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c(UR,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(JR,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(YR,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(KR,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(ZR,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(eB,"href","/docs/transformers/pr_17202/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(oB,"href","/docs/transformers/pr_17202/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(rB,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDTokenizer"),c(tB,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDTokenizerFast"),c(aB,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerTokenizer"),c(nB,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(sB,"href","/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeTokenizer"),c(lB,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(iB,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(dB,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(cB,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianTokenizer"),c(fB,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartTokenizer"),c(mB,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(gB,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(hB,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(pB,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(_B,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(uB,"href","/docs/transformers/pr_17202/en/model_doc/mluke#transformers.MLukeTokenizer"),c(bB,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(vB,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(FB,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(TB,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(MB,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Tokenizer"),c(EB,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5TokenizerFast"),c(CB,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizer"),c(wB,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(AB,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(yB,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(LB,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xB,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizer"),c($B,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(kB,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(SB,"href","/docs/transformers/pr_17202/en/model_doc/phobert#transformers.PhobertTokenizer"),c(RB,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartTokenizer"),c(BB,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(PB,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(IB,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(qB,"href","/docs/transformers/pr_17202/en/model_doc/rag#transformers.RagTokenizer"),c(NB,"href","/docs/transformers/pr_17202/en/model_doc/realm#transformers.RealmTokenizer"),c(jB,"href","/docs/transformers/pr_17202/en/model_doc/realm#transformers.RealmTokenizerFast"),c(DB,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerTokenizer"),c(GB,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(OB,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertTokenizer"),c(VB,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(XB,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(zB,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(WB,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c(QB,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(HB,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(UB,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(JB,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(YB,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(KB,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterTokenizer"),c(ZB,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(eP,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(oP,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(rP,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Tokenizer"),c(tP,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5TokenizerFast"),c(aP,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasTokenizer"),c(nP,"href","/docs/transformers/pr_17202/en/model_doc/tapex#transformers.TapexTokenizer"),c(sP,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(lP,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(iP,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(dP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(cP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(fP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(mP,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMTokenizer"),c(gP,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(hP,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMTokenizer"),c(pP,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(_P,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(uP,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(bP,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c(vP,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(FP,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(TP,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(MP,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizer"),c(EP,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(th,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ah,"id","transformers.AutoFeatureExtractor"),c(ah,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ah,"href","#transformers.AutoFeatureExtractor"),c(Ti,"class","relative group"),c(CP,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(wP,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(AP,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(yP,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(LP,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(xP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($P,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(kP,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(SP,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(RP,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(BP,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(PP,"href","/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(IP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(qP,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(NP,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(jP,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(DP,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(GP,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(OP,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(VP,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(XP,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(zP,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(WP,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(QP,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(HP,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(UP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(JP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(YP,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ph,"id","transformers.AutoProcessor"),c(Ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ph,"href","#transformers.AutoProcessor"),c(Mi,"class","relative group"),c(KP,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(ZP,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPProcessor"),c(eI,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(oI,"href","/docs/transformers/pr_17202/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(rI,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tI,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(aI,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(nI,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(sI,"href","/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRProcessor"),c(lI,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(iI,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(dI,"href","/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltProcessor"),c(cI,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(fI,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(mI,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(gI,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ep,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(op,"id","transformers.AutoModel"),c(op,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(op,"href","#transformers.AutoModel"),c(Ci,"class","relative group"),c(hI,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pI,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_I,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uI,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertModel"),c(bI,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartModel"),c(vI,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitModel"),c(FI,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertModel"),c(TI,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(MI,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdModel"),c(EI,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(CI,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(wI,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(AI,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomModel"),c(yI,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertModel"),c(LI,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineModel"),c(xI,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPModel"),c($I,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertModel"),c(kI,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextModel"),c(SI,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLModel"),c(RI,"href","/docs/transformers/pr_17202/en/model_doc/cvt#transformers.CvtModel"),c(BI,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(PI,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(II,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(qI,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaModel"),c(NI,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(jI,"href","/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(DI,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTModel"),c(GI,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrModel"),c(OI,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertModel"),c(VI,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(XI,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTModel"),c(zI,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraModel"),c(WI,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertModel"),c(QI,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaModel"),c(HI,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetModel"),c(UI,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTModel"),c(JI,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelModel"),c(YI,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelBaseModel"),c(KI,"href","/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNModel"),c(ZI,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Model"),c(eq,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(oq,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJModel"),c(rq,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertModel"),c(tq,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertModel"),c(aq,"href","/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(nq,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(sq,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(lq,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDModel"),c(iq,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerModel"),c(dq,"href","/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeModel"),c(cq,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertModel"),c(fq,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Model"),c(mq,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianModel"),c(gq,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerModel"),c(hq,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartModel"),c(pq,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(_q,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertModel"),c(uq,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetModel"),c(bq,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Model"),c(vq,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Fq,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Tq,"href","/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTModel"),c(Mq,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusModel"),c(Eq,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverModel"),c(Cq,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartModel"),c(wq,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Aq,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(yq,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Lq,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModel"),c(xq,"href","/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetModel"),c($q,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertModel"),c(kq,"href","/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetModel"),c(Sq,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel"),c(Rq,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaModel"),c(Bq,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerModel"),c(Pq,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerModel"),c(Iq,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWModel"),c(qq,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDModel"),c(Nq,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(jq,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterModel"),c(Dq,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Gq,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinModel"),c(Oq,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Model"),c(Vq,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasModel"),c(Xq,"href","/docs/transformers/pr_17202/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(zq,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Wq,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Qq,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Hq,"href","/docs/transformers/pr_17202/en/model_doc/van#transformers.VanModel"),c(Uq,"href","/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltModel"),c(Jq,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Yq,"href","/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Kq,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTModel"),c(Zq,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(eN,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(oN,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(rN,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMModel"),c(tN,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMModel"),c(aN,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMModel"),c(nN,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(sN,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(lN,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(iN,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetModel"),c(dN,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosModel"),c(cN,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y_,"id","transformers.AutoModelForPreTraining"),c(Y_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y_,"href","#transformers.AutoModelForPreTraining"),c(yi,"class","relative group"),c(fN,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mN,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gN,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hN,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForPreTraining"),c(pN,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(_N,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForPreTraining"),c(uN,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(bN,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomForCausalLM"),c(vN,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(FN,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(TN,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(MN,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(EN,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(CN,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(wN,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForPreTraining"),c(AN,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(yN,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaForPreTraining"),c(LN,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForPreTraining"),c(xN,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c($N,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(kN,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(SN,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(RN,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(BN,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(PN,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(IN,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(qN,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(NN,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(jN,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(DN,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel"),c(GN,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(ON,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(VN,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(XN,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(zN,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(WN,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(QN,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(HN,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(UN,"href","/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(JN,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(YN,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(KN,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(ZN,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ej,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(oj,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(rj,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xu,"id","transformers.AutoModelForCausalLM"),c(Xu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xu,"href","#transformers.AutoModelForCausalLM"),c($i,"class","relative group"),c(tj,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aj,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nj,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sj,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForCausalLM"),c(lj,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertLMHeadModel"),c(ij,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(dj,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(cj,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(fj,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(mj,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(gj,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomForCausalLM"),c(hj,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(pj,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(_j,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(uj,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForCausalLM"),c(bj,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(vj,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Fj,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Tj,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianForCausalLM"),c(Mj,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Ej,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Cj,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(wj,"href","/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTForCausalLM"),c(Aj,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(yj,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Lj,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(xj,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c($j,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(kj,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Sj,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Rj,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Bj,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Pj,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Ij,"href","/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(qj,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Nj,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(jj,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(Dj,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Gj,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Oj,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k2,"id","transformers.AutoModelForMaskedLM"),c(k2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k2,"href","#transformers.AutoModelForMaskedLM"),c(Ri,"class","relative group"),c(Vj,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xj,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zj,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wj,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Qj,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Hj,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMaskedLM"),c(Uj,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(Jj,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Yj,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(eD,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(oD,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(rD,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(tD,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(aD,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(nD,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(sD,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(lD,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(iD,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(dD,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(cD,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(fD,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(mD,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(gD,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(hD,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(pD,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(_D,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(uD,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(bD,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(vD,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(FD,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(TD,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(MD,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ED,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(CD,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(wD,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_1,"id","transformers.AutoModelForSeq2SeqLM"),c(_1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ii,"class","relative group"),c(AD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xD,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration"),c($D,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(kD,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(SD,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(RD,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(BD,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(PD,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(ID,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(qD,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianMTModel"),c(ND,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(jD,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(DD,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(GD,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(OD,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(VD,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(XD,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I1,"id","transformers.AutoModelForSequenceClassification"),c(I1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I1,"href","#transformers.AutoModelForSequenceClassification"),c(ji,"class","relative group"),c(zD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HD,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c($G,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sb,"id","transformers.AutoModelForMultipleChoice"),c(Sb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sb,"href","#transformers.AutoModelForMultipleChoice"),c(Oi,"class","relative group"),c(DG,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GG,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OG,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VG,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(XG,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMultipleChoice"),c(zG,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(WG,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(QG,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(HG,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(UG,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(JG,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(YG,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(KG,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(eO,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(oO,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(rO,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(tO,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(aO,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(nO,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(sO,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(lO,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(iO,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(dO,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(cO,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(fO,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(mO,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(gO,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(hO,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(pO,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(_O,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(uO,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fv,"id","transformers.AutoModelForNextSentencePrediction"),c(fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fv,"href","#transformers.AutoModelForNextSentencePrediction"),c(zi,"class","relative group"),c(bO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TO,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(MO,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(EO,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(CO,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(wO,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fv,"id","transformers.AutoModelForTokenClassification"),c(Fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fv,"href","#transformers.AutoModelForTokenClassification"),c(Hi,"class","relative group"),c(AO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xO,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForTokenClassification"),c($O,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForTokenClassification"),c(kO,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(SO,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(RO,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForTokenClassification"),c(BO,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(PO,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(IO,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(qO,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(NO,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(jO,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(DO,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(GO,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(OO,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(VO,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(XO,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(zO,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(WO,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(QO,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(HO,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(UO,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(JO,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(YO,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(KO,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(ZO,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(eV,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(oV,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(rV,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(tV,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(aV,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(nV,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(sV,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(lV,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tF,"id","transformers.AutoModelForQuestionAnswering"),c(tF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tF,"href","#transformers.AutoModelForQuestionAnswering"),c(Yi,"class","relative group"),c(iV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fV,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(wV,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c($V,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(WV,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(UV,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WF,"id","transformers.AutoModelForTableQuestionAnswering"),c(WF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ed,"class","relative group"),c(JV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZV,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YF,"id","transformers.AutoModelForImageClassification"),c(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YF,"href","#transformers.AutoModelForImageClassification"),c(td,"class","relative group"),c(eX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tX,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForImageClassification"),c(aX,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(nX,"href","/docs/transformers/pr_17202/en/model_doc/cvt#transformers.CvtForImageClassification"),c(sX,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(lX,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassification"),c(iX,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(dX,"href","/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(cX,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(fX,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(mX,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(gX,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(hX,"href","/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(pX,"href","/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(_X,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(uX,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForImageClassification"),c(bX,"href","/docs/transformers/pr_17202/en/model_doc/van#transformers.VanForImageClassification"),c(vX,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g0,"id","transformers.AutoModelForVision2Seq"),c(g0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g0,"href","#transformers.AutoModelForVision2Seq"),c(sd,"class","relative group"),c(FX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b0,"id","transformers.AutoModelForAudioClassification"),c(b0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b0,"href","#transformers.AutoModelForAudioClassification"),c(dd,"class","relative group"),c(CX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yX,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForSequenceClassification"),c($X,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(kX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(SX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(RX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(BX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(PX,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k0,"id","transformers.AutoModelForAudioFrameClassification"),c(k0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k0,"href","#transformers.AutoModelForAudioFrameClassification"),c(md,"class","relative group"),c(IX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jX,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(DX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(GX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(OX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(VX,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D0,"id","transformers.AutoModelForCTC"),c(D0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D0,"href","#transformers.AutoModelForCTC"),c(pd,"class","relative group"),c(XX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QX,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(HX,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForCTC"),c(UX,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForCTC"),c(JX,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForCTC"),c(YX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(KX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(ZX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(ez,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(oz,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z0,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Z0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z0,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(bd,"class","relative group"),c(rz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(az,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nz,"href","/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(sz,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.AutoModelForAudioXVector"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.AutoModelForAudioXVector"),c(Td,"class","relative group"),c(lz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cz,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(fz,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(mz,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(gz,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(hz,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hT,"id","transformers.AutoModelForMaskedImageModeling"),c(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Cd,"class","relative group"),c(pz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_z,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bz,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(vz,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Fz,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TT,"id","transformers.AutoModelForObjectDetection"),c(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TT,"href","#transformers.AutoModelForObjectDetection"),c(Ld,"class","relative group"),c(Tz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ez,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cz,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForObjectDetection"),c(wz,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yT,"id","transformers.AutoModelForImageSegmentation"),c(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yT,"href","#transformers.AutoModelForImageSegmentation"),c(kd,"class","relative group"),c(Az,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xz,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.AutoModelForSemanticSegmentation"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c($z,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rz,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Bz,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(Pz,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Iz,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.AutoModelForInstanceSegmentation"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(qz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dz,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zT,"id","transformers.TFAutoModel"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.TFAutoModel"),c(Dd,"class","relative group"),c(Gz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertModel"),c(zz,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartModel"),c(Wz,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertModel"),c(Qz,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Hz,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Uz,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertModel"),c(Jz,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.TFCLIPModel"),c(Yz,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertModel"),c(Kz,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextModel"),c(Zz,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLModel"),c(eW,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(oW,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaModel"),c(rW,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(tW,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(aW,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(nW,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraModel"),c(sW,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(lW,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelModel"),c(iW,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(dW,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2Model"),c(cW,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJModel"),c(fW,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.TFHubertModel"),c(mW,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(gW,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDModel"),c(hW,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerModel"),c(pW,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertModel"),c(_W,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianModel"),c(uW,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartModel"),c(bW,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(vW,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetModel"),c(FW,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5Model"),c(TW,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(MW,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusModel"),c(EW,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertModel"),c(CW,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaModel"),c(wW,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerModel"),c(AW,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(yW,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.TFSwinModel"),c(LW,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5Model"),c(xW,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasModel"),c($W,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(kW,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTModel"),c(SW,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(RW,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(BW,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMModel"),c(PW,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(IW,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j7,"id","transformers.TFAutoModelForPreTraining"),c(j7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j7,"href","#transformers.TFAutoModelForPreTraining"),c(Vd,"class","relative group"),c(qW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DW,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(GW,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(OW,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForPreTraining"),c(VW,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(XW,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(zW,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(WW,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(QW,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(HW,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(UW,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(JW,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(YW,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(KW,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(ZW,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(eQ,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(oQ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(rQ,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(tQ,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(aQ,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(nQ,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(sQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(lQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(iQ,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fM,"id","transformers.TFAutoModelForCausalLM"),c(fM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fM,"href","#transformers.TFAutoModelForCausalLM"),c(Wd,"class","relative group"),c(dQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mQ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(gQ,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(hQ,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(pQ,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(_Q,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(uQ,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(bQ,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(vQ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(FQ,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(TQ,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(MQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(EQ,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AM,"id","transformers.TFAutoModelForImageClassification"),c(AM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AM,"href","#transformers.TFAutoModelForImageClassification"),c(Ud,"class","relative group"),c(CQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yQ,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(LQ,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(xQ,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.TFSwinForImageClassification"),c($Q,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RM,"id","transformers.TFAutoModelForMaskedLM"),c(RM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RM,"href","#transformers.TFAutoModelForMaskedLM"),c(Kd,"class","relative group"),c(kQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BQ,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(PQ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(IQ,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(qQ,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(jQ,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(DQ,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(GQ,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(OQ,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(VQ,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(XQ,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(WQ,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(HQ,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(JQ,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(YQ,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(KQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(ZQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(r4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(oc,"class","relative group"),c(eH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tH,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(aH,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(nH,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(sH,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(lH,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(iH,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianMTModel"),c(dH,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(cH,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(fH,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(mH,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p4,"id","transformers.TFAutoModelForSequenceClassification"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.TFAutoModelForSequenceClassification"),c(ac,"class","relative group"),c(gH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_H,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(uH,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(bH,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(vH,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(FH,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(TH,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(MH,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(EH,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(CH,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(wH,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(AH,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(yH,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(LH,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(xH,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c($H,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(kH,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(SH,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(RH,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(BH,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(PH,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(IH,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(qH,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(NH,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(jH,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(DH,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(GH,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X4,"id","transformers.TFAutoModelForMultipleChoice"),c(X4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X4,"href","#transformers.TFAutoModelForMultipleChoice"),c(lc,"class","relative group"),c(OH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(WH,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(QH,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(HH,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(UH,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(JH,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(YH,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(KH,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(ZH,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(eU,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(oU,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(rU,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(tU,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(aU,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(nU,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(sU,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(lU,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(cE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(cc,"class","relative group"),c(iU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fU,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(mU,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(gc,"class","relative group"),c(gU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_U,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vE,"id","transformers.TFAutoModelForTokenClassification"),c(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vE,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(uU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(TU,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(MU,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(EU,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(CU,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(wU,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(AU,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(yU,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(LU,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(xU,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c($U,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(kU,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(SU,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(RU,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(BU,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(PU,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(IU,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(qU,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(NU,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(jU,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OE,"id","transformers.TFAutoModelForQuestionAnswering"),c(OE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(vc,"class","relative group"),c(DU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VU,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(YU,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(KU,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(ZU,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(eJ,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(oJ,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(rJ,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(tJ,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(aJ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(nJ,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(sJ,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(lJ,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(iJ,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fC,"id","transformers.TFAutoModelForVision2Seq"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.TFAutoModelForVision2Seq"),c(Mc,"class","relative group"),c(dJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mJ,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(wc,"class","relative group"),c(gJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_J,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vC,"id","transformers.FlaxAutoModel"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.FlaxAutoModel"),c(Lc,"class","relative group"),c(uJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FJ,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertModel"),c(TJ,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartModel"),c(MJ,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitModel"),c(EJ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertModel"),c(CJ,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(wJ,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(AJ,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(yJ,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.FlaxCLIPModel"),c(LJ,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(xJ,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraModel"),c($J,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(kJ,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(SJ,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(RJ,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianModel"),c(BJ,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartModel"),c(PJ,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5Model"),c(IJ,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(qJ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(NJ,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(jJ,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5Model"),c(DJ,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(GJ,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTModel"),c(OJ,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(VJ,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(XJ,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QC,"id","transformers.FlaxAutoModelForCausalLM"),c(QC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QC,"href","#transformers.FlaxAutoModelForCausalLM"),c(kc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(UJ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(JJ,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(YJ,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(KJ,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(ZJ,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(eY,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(oY,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(rY,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n5,"id","transformers.FlaxAutoModelForPreTraining"),c(n5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(tY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sY,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(lY,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(iY,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(dY,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(cY,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(fY,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(mY,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(gY,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(hY,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(pY,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(_Y,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(uY,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F5,"id","transformers.FlaxAutoModelForMaskedLM"),c(F5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(bY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TY,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(MY,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(EY,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(CY,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(wY,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(AY,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(yY,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(LY,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(xY,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c($Y,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(R5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Dc,"class","relative group"),c(kY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BY,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(PY,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(IY,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(qY,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(NY,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(jY,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(DY,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(GY,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(OY,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Vc,"class","relative group"),c(VY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WY,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(QY,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(HY,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(UY,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(JY,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(YY,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(KY,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(ZY,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(eK,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(oK,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(a3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Wc,"class","relative group"),c(rK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(sK,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(lK,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(iK,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(dK,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(cK,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(fK,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(mK,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(gK,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(hK,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u3,"id","transformers.FlaxAutoModelForTokenClassification"),c(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Uc,"class","relative group"),c(pK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_K,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bK,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(vK,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(FK,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(TK,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(MK,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(EK,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(CK,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(wK,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(L3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Kc,"class","relative group"),c(AK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xK,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c($K,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(kK,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(SK,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(RK,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(BK,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(PK,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(IK,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(j3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(of,"class","relative group"),c(qK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V3,"id","transformers.FlaxAutoModelForImageClassification"),c(V3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V3,"href","#transformers.FlaxAutoModelForImageClassification"),c(af,"class","relative group"),c(GK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XK,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(zK,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H3,"id","transformers.FlaxAutoModelForVision2Seq"),c(H3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(lf,"class","relative group"),c(WK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UK,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,ci),b(f,hf,u),b(f,rt,u),e(rt,fi),e(rt,mi),e(mi,pA),e(rt,pf),b(f,je,u),b(f,We,u),e(We,gi),e(We,yn),e(yn,_A),e(We,Ln),e(We,xn),e(xn,uA),e(We,hi),e(We,$n),e($n,bA),e(We,pi),b(f,_f,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,I$),e(Ae,_i),e(_i,q$),e(Ae,N$),b(f,Eo,u),b(f,wa,u),e(wa,j$),e(wa,uf),e(uf,D$),e(wa,$Ge),b(f,vqe,u),b(f,ui,u),e(ui,bf),e(bf,Oee),M(vA,Oee,null),e(ui,kGe),e(ui,Vee),e(Vee,SGe),b(f,Fqe,u),b(f,kn,u),e(kn,RGe),e(kn,Xee),e(Xee,BGe),e(kn,PGe),e(kn,zee),e(zee,IGe),e(kn,qGe),b(f,Tqe,u),M(FA,f,u),b(f,Mqe,u),b(f,G$,u),e(G$,NGe),b(f,Eqe,u),M(vf,f,u),b(f,Cqe,u),b(f,bi,u),e(bi,Ff),e(Ff,Wee),M(TA,Wee,null),e(bi,jGe),e(bi,Qee),e(Qee,DGe),b(f,wqe,u),b(f,Co,u),M(MA,Co,null),e(Co,GGe),e(Co,EA),e(EA,OGe),e(EA,O$),e(O$,VGe),e(EA,XGe),e(Co,zGe),e(Co,CA),e(CA,WGe),e(CA,Hee),e(Hee,QGe),e(CA,HGe),e(Co,UGe),e(Co,Er),M(wA,Er,null),e(Er,JGe),e(Er,Uee),e(Uee,YGe),e(Er,KGe),e(Er,vi),e(vi,ZGe),e(vi,Jee),e(Jee,eOe),e(vi,oOe),e(vi,Yee),e(Yee,rOe),e(vi,tOe),e(Er,aOe),e(Er,A),e(A,Tf),e(Tf,Kee),e(Kee,nOe),e(Tf,sOe),e(Tf,V$),e(V$,lOe),e(Tf,iOe),e(A,dOe),e(A,Mf),e(Mf,Zee),e(Zee,cOe),e(Mf,fOe),e(Mf,X$),e(X$,mOe),e(Mf,gOe),e(A,hOe),e(A,Ef),e(Ef,eoe),e(eoe,pOe),e(Ef,_Oe),e(Ef,z$),e(z$,uOe),e(Ef,bOe),e(A,vOe),e(A,Cf),e(Cf,ooe),e(ooe,FOe),e(Cf,TOe),e(Cf,W$),e(W$,MOe),e(Cf,EOe),e(A,COe),e(A,wf),e(wf,roe),e(roe,wOe),e(wf,AOe),e(wf,Q$),e(Q$,yOe),e(wf,LOe),e(A,xOe),e(A,Af),e(Af,toe),e(toe,$Oe),e(Af,kOe),e(Af,H$),e(H$,SOe),e(Af,ROe),e(A,BOe),e(A,yf),e(yf,aoe),e(aoe,POe),e(yf,IOe),e(yf,U$),e(U$,qOe),e(yf,NOe),e(A,jOe),e(A,Lf),e(Lf,noe),e(noe,DOe),e(Lf,GOe),e(Lf,J$),e(J$,OOe),e(Lf,VOe),e(A,XOe),e(A,xf),e(xf,soe),e(soe,zOe),e(xf,WOe),e(xf,Y$),e(Y$,QOe),e(xf,HOe),e(A,UOe),e(A,$f),e($f,loe),e(loe,JOe),e($f,YOe),e($f,K$),e(K$,KOe),e($f,ZOe),e(A,eVe),e(A,kf),e(kf,ioe),e(ioe,oVe),e(kf,rVe),e(kf,Z$),e(Z$,tVe),e(kf,aVe),e(A,nVe),e(A,Sf),e(Sf,doe),e(doe,sVe),e(Sf,lVe),e(Sf,ek),e(ek,iVe),e(Sf,dVe),e(A,cVe),e(A,Rf),e(Rf,coe),e(coe,fVe),e(Rf,mVe),e(Rf,ok),e(ok,gVe),e(Rf,hVe),e(A,pVe),e(A,Bf),e(Bf,foe),e(foe,_Ve),e(Bf,uVe),e(Bf,rk),e(rk,bVe),e(Bf,vVe),e(A,FVe),e(A,Pf),e(Pf,moe),e(moe,TVe),e(Pf,MVe),e(Pf,tk),e(tk,EVe),e(Pf,CVe),e(A,wVe),e(A,If),e(If,goe),e(goe,AVe),e(If,yVe),e(If,ak),e(ak,LVe),e(If,xVe),e(A,$Ve),e(A,qf),e(qf,hoe),e(hoe,kVe),e(qf,SVe),e(qf,nk),e(nk,RVe),e(qf,BVe),e(A,PVe),e(A,Nf),e(Nf,poe),e(poe,IVe),e(Nf,qVe),e(Nf,sk),e(sk,NVe),e(Nf,jVe),e(A,DVe),e(A,jf),e(jf,_oe),e(_oe,GVe),e(jf,OVe),e(jf,lk),e(lk,VVe),e(jf,XVe),e(A,zVe),e(A,Df),e(Df,uoe),e(uoe,WVe),e(Df,QVe),e(Df,ik),e(ik,HVe),e(Df,UVe),e(A,JVe),e(A,Gf),e(Gf,boe),e(boe,YVe),e(Gf,KVe),e(Gf,dk),e(dk,ZVe),e(Gf,eXe),e(A,oXe),e(A,Of),e(Of,voe),e(voe,rXe),e(Of,tXe),e(Of,ck),e(ck,aXe),e(Of,nXe),e(A,sXe),e(A,Vf),e(Vf,Foe),e(Foe,lXe),e(Vf,iXe),e(Vf,fk),e(fk,dXe),e(Vf,cXe),e(A,fXe),e(A,Xf),e(Xf,Toe),e(Toe,mXe),e(Xf,gXe),e(Xf,mk),e(mk,hXe),e(Xf,pXe),e(A,_Xe),e(A,zf),e(zf,Moe),e(Moe,uXe),e(zf,bXe),e(zf,gk),e(gk,vXe),e(zf,FXe),e(A,TXe),e(A,Wf),e(Wf,Eoe),e(Eoe,MXe),e(Wf,EXe),e(Wf,hk),e(hk,CXe),e(Wf,wXe),e(A,AXe),e(A,Qf),e(Qf,Coe),e(Coe,yXe),e(Qf,LXe),e(Qf,pk),e(pk,xXe),e(Qf,$Xe),e(A,kXe),e(A,Hf),e(Hf,woe),e(woe,SXe),e(Hf,RXe),e(Hf,_k),e(_k,BXe),e(Hf,PXe),e(A,IXe),e(A,Uf),e(Uf,Aoe),e(Aoe,qXe),e(Uf,NXe),e(Uf,uk),e(uk,jXe),e(Uf,DXe),e(A,GXe),e(A,Jf),e(Jf,yoe),e(yoe,OXe),e(Jf,VXe),e(Jf,bk),e(bk,XXe),e(Jf,zXe),e(A,WXe),e(A,Yf),e(Yf,Loe),e(Loe,QXe),e(Yf,HXe),e(Yf,vk),e(vk,UXe),e(Yf,JXe),e(A,YXe),e(A,Kf),e(Kf,xoe),e(xoe,KXe),e(Kf,ZXe),e(Kf,Fk),e(Fk,eze),e(Kf,oze),e(A,rze),e(A,Zf),e(Zf,$oe),e($oe,tze),e(Zf,aze),e(Zf,Tk),e(Tk,nze),e(Zf,sze),e(A,lze),e(A,em),e(em,koe),e(koe,ize),e(em,dze),e(em,Mk),e(Mk,cze),e(em,fze),e(A,mze),e(A,om),e(om,Soe),e(Soe,gze),e(om,hze),e(om,Ek),e(Ek,pze),e(om,_ze),e(A,uze),e(A,rm),e(rm,Roe),e(Roe,bze),e(rm,vze),e(rm,Ck),e(Ck,Fze),e(rm,Tze),e(A,Mze),e(A,tm),e(tm,Boe),e(Boe,Eze),e(tm,Cze),e(tm,wk),e(wk,wze),e(tm,Aze),e(A,yze),e(A,am),e(am,Poe),e(Poe,Lze),e(am,xze),e(am,Ak),e(Ak,$ze),e(am,kze),e(A,Sze),e(A,nm),e(nm,Ioe),e(Ioe,Rze),e(nm,Bze),e(nm,yk),e(yk,Pze),e(nm,Ize),e(A,qze),e(A,sm),e(sm,qoe),e(qoe,Nze),e(sm,jze),e(sm,Lk),e(Lk,Dze),e(sm,Gze),e(A,Oze),e(A,lm),e(lm,Noe),e(Noe,Vze),e(lm,Xze),e(lm,xk),e(xk,zze),e(lm,Wze),e(A,Qze),e(A,im),e(im,joe),e(joe,Hze),e(im,Uze),e(im,$k),e($k,Jze),e(im,Yze),e(A,Kze),e(A,dm),e(dm,Doe),e(Doe,Zze),e(dm,eWe),e(dm,kk),e(kk,oWe),e(dm,rWe),e(A,tWe),e(A,cm),e(cm,Goe),e(Goe,aWe),e(cm,nWe),e(cm,Sk),e(Sk,sWe),e(cm,lWe),e(A,iWe),e(A,fm),e(fm,Ooe),e(Ooe,dWe),e(fm,cWe),e(fm,Rk),e(Rk,fWe),e(fm,mWe),e(A,gWe),e(A,mm),e(mm,Voe),e(Voe,hWe),e(mm,pWe),e(mm,Bk),e(Bk,_We),e(mm,uWe),e(A,bWe),e(A,gm),e(gm,Xoe),e(Xoe,vWe),e(gm,FWe),e(gm,Pk),e(Pk,TWe),e(gm,MWe),e(A,EWe),e(A,hm),e(hm,zoe),e(zoe,CWe),e(hm,wWe),e(hm,Ik),e(Ik,AWe),e(hm,yWe),e(A,LWe),e(A,pm),e(pm,Woe),e(Woe,xWe),e(pm,$We),e(pm,qk),e(qk,kWe),e(pm,SWe),e(A,RWe),e(A,_m),e(_m,Qoe),e(Qoe,BWe),e(_m,PWe),e(_m,Nk),e(Nk,IWe),e(_m,qWe),e(A,NWe),e(A,um),e(um,Hoe),e(Hoe,jWe),e(um,DWe),e(um,jk),e(jk,GWe),e(um,OWe),e(A,VWe),e(A,bm),e(bm,Uoe),e(Uoe,XWe),e(bm,zWe),e(bm,Dk),e(Dk,WWe),e(bm,QWe),e(A,HWe),e(A,vm),e(vm,Joe),e(Joe,UWe),e(vm,JWe),e(vm,Gk),e(Gk,YWe),e(vm,KWe),e(A,ZWe),e(A,Fm),e(Fm,Yoe),e(Yoe,eQe),e(Fm,oQe),e(Fm,Ok),e(Ok,rQe),e(Fm,tQe),e(A,aQe),e(A,Tm),e(Tm,Koe),e(Koe,nQe),e(Tm,sQe),e(Tm,Vk),e(Vk,lQe),e(Tm,iQe),e(A,dQe),e(A,Mm),e(Mm,Zoe),e(Zoe,cQe),e(Mm,fQe),e(Mm,Xk),e(Xk,mQe),e(Mm,gQe),e(A,hQe),e(A,Em),e(Em,ere),e(ere,pQe),e(Em,_Qe),e(Em,zk),e(zk,uQe),e(Em,bQe),e(A,vQe),e(A,Cm),e(Cm,ore),e(ore,FQe),e(Cm,TQe),e(Cm,Wk),e(Wk,MQe),e(Cm,EQe),e(A,CQe),e(A,wm),e(wm,rre),e(rre,wQe),e(wm,AQe),e(wm,Qk),e(Qk,yQe),e(wm,LQe),e(A,xQe),e(A,Am),e(Am,tre),e(tre,$Qe),e(Am,kQe),e(Am,Hk),e(Hk,SQe),e(Am,RQe),e(A,BQe),e(A,ym),e(ym,are),e(are,PQe),e(ym,IQe),e(ym,Uk),e(Uk,qQe),e(ym,NQe),e(A,jQe),e(A,Lm),e(Lm,nre),e(nre,DQe),e(Lm,GQe),e(Lm,Jk),e(Jk,OQe),e(Lm,VQe),e(A,XQe),e(A,xm),e(xm,sre),e(sre,zQe),e(xm,WQe),e(xm,Yk),e(Yk,QQe),e(xm,HQe),e(A,UQe),e(A,$m),e($m,lre),e(lre,JQe),e($m,YQe),e($m,Kk),e(Kk,KQe),e($m,ZQe),e(A,eHe),e(A,km),e(km,ire),e(ire,oHe),e(km,rHe),e(km,Zk),e(Zk,tHe),e(km,aHe),e(A,nHe),e(A,Sm),e(Sm,dre),e(dre,sHe),e(Sm,lHe),e(Sm,eS),e(eS,iHe),e(Sm,dHe),e(A,cHe),e(A,Rm),e(Rm,cre),e(cre,fHe),e(Rm,mHe),e(Rm,oS),e(oS,gHe),e(Rm,hHe),e(A,pHe),e(A,Bm),e(Bm,fre),e(fre,_He),e(Bm,uHe),e(Bm,rS),e(rS,bHe),e(Bm,vHe),e(A,FHe),e(A,Pm),e(Pm,mre),e(mre,THe),e(Pm,MHe),e(Pm,tS),e(tS,EHe),e(Pm,CHe),e(A,wHe),e(A,Im),e(Im,gre),e(gre,AHe),e(Im,yHe),e(Im,aS),e(aS,LHe),e(Im,xHe),e(A,$He),e(A,qm),e(qm,hre),e(hre,kHe),e(qm,SHe),e(qm,nS),e(nS,RHe),e(qm,BHe),e(A,PHe),e(A,Nm),e(Nm,pre),e(pre,IHe),e(Nm,qHe),e(Nm,sS),e(sS,NHe),e(Nm,jHe),e(A,DHe),e(A,jm),e(jm,_re),e(_re,GHe),e(jm,OHe),e(jm,lS),e(lS,VHe),e(jm,XHe),e(A,zHe),e(A,Dm),e(Dm,ure),e(ure,WHe),e(Dm,QHe),e(Dm,iS),e(iS,HHe),e(Dm,UHe),e(A,JHe),e(A,Gm),e(Gm,bre),e(bre,YHe),e(Gm,KHe),e(Gm,dS),e(dS,ZHe),e(Gm,eUe),e(A,oUe),e(A,Om),e(Om,vre),e(vre,rUe),e(Om,tUe),e(Om,cS),e(cS,aUe),e(Om,nUe),e(A,sUe),e(A,Vm),e(Vm,Fre),e(Fre,lUe),e(Vm,iUe),e(Vm,fS),e(fS,dUe),e(Vm,cUe),e(A,fUe),e(A,Xm),e(Xm,Tre),e(Tre,mUe),e(Xm,gUe),e(Xm,mS),e(mS,hUe),e(Xm,pUe),e(A,_Ue),e(A,zm),e(zm,Mre),e(Mre,uUe),e(zm,bUe),e(zm,gS),e(gS,vUe),e(zm,FUe),e(A,TUe),e(A,Wm),e(Wm,Ere),e(Ere,MUe),e(Wm,EUe),e(Wm,hS),e(hS,CUe),e(Wm,wUe),e(A,AUe),e(A,Qm),e(Qm,Cre),e(Cre,yUe),e(Qm,LUe),e(Qm,pS),e(pS,xUe),e(Qm,$Ue),e(A,kUe),e(A,Hm),e(Hm,wre),e(wre,SUe),e(Hm,RUe),e(Hm,_S),e(_S,BUe),e(Hm,PUe),e(A,IUe),e(A,Um),e(Um,Are),e(Are,qUe),e(Um,NUe),e(Um,uS),e(uS,jUe),e(Um,DUe),e(A,GUe),e(A,Jm),e(Jm,yre),e(yre,OUe),e(Jm,VUe),e(Jm,bS),e(bS,XUe),e(Jm,zUe),e(A,WUe),e(A,Ym),e(Ym,Lre),e(Lre,QUe),e(Ym,HUe),e(Ym,vS),e(vS,UUe),e(Ym,JUe),e(A,YUe),e(A,Km),e(Km,xre),e(xre,KUe),e(Km,ZUe),e(Km,FS),e(FS,eJe),e(Km,oJe),e(A,rJe),e(A,Zm),e(Zm,$re),e($re,tJe),e(Zm,aJe),e(Zm,TS),e(TS,nJe),e(Zm,sJe),e(A,lJe),e(A,eg),e(eg,kre),e(kre,iJe),e(eg,dJe),e(eg,MS),e(MS,cJe),e(eg,fJe),e(A,mJe),e(A,og),e(og,Sre),e(Sre,gJe),e(og,hJe),e(og,ES),e(ES,pJe),e(og,_Je),e(A,uJe),e(A,rg),e(rg,Rre),e(Rre,bJe),e(rg,vJe),e(rg,CS),e(CS,FJe),e(rg,TJe),e(A,MJe),e(A,tg),e(tg,Bre),e(Bre,EJe),e(tg,CJe),e(tg,wS),e(wS,wJe),e(tg,AJe),e(A,yJe),e(A,ag),e(ag,Pre),e(Pre,LJe),e(ag,xJe),e(ag,AS),e(AS,$Je),e(ag,kJe),e(A,SJe),e(A,ng),e(ng,Ire),e(Ire,RJe),e(ng,BJe),e(ng,yS),e(yS,PJe),e(ng,IJe),e(A,qJe),e(A,sg),e(sg,qre),e(qre,NJe),e(sg,jJe),e(sg,LS),e(LS,DJe),e(sg,GJe),e(A,OJe),e(A,lg),e(lg,Nre),e(Nre,VJe),e(lg,XJe),e(lg,xS),e(xS,zJe),e(lg,WJe),e(A,QJe),e(A,ig),e(ig,jre),e(jre,HJe),e(ig,UJe),e(ig,$S),e($S,JJe),e(ig,YJe),e(A,KJe),e(A,dg),e(dg,Dre),e(Dre,ZJe),e(dg,eYe),e(dg,kS),e(kS,oYe),e(dg,rYe),e(A,tYe),e(A,cg),e(cg,Gre),e(Gre,aYe),e(cg,nYe),e(cg,SS),e(SS,sYe),e(cg,lYe),e(A,iYe),e(A,fg),e(fg,Ore),e(Ore,dYe),e(fg,cYe),e(fg,RS),e(RS,fYe),e(fg,mYe),e(A,gYe),e(A,mg),e(mg,Vre),e(Vre,hYe),e(mg,pYe),e(mg,BS),e(BS,_Ye),e(mg,uYe),e(A,bYe),e(A,gg),e(gg,Xre),e(Xre,vYe),e(gg,FYe),e(gg,PS),e(PS,TYe),e(gg,MYe),e(A,EYe),e(A,hg),e(hg,zre),e(zre,CYe),e(hg,wYe),e(hg,IS),e(IS,AYe),e(hg,yYe),e(A,LYe),e(A,pg),e(pg,Wre),e(Wre,xYe),e(pg,$Ye),e(pg,qS),e(qS,kYe),e(pg,SYe),e(A,RYe),e(A,_g),e(_g,Qre),e(Qre,BYe),e(_g,PYe),e(_g,NS),e(NS,IYe),e(_g,qYe),e(A,NYe),e(A,ug),e(ug,Hre),e(Hre,jYe),e(ug,DYe),e(ug,jS),e(jS,GYe),e(ug,OYe),e(A,VYe),e(A,bg),e(bg,Ure),e(Ure,XYe),e(bg,zYe),e(bg,DS),e(DS,WYe),e(bg,QYe),e(A,HYe),e(A,vg),e(vg,Jre),e(Jre,UYe),e(vg,JYe),e(vg,GS),e(GS,YYe),e(vg,KYe),e(A,ZYe),e(A,Fg),e(Fg,Yre),e(Yre,eKe),e(Fg,oKe),e(Fg,OS),e(OS,rKe),e(Fg,tKe),e(Er,aKe),M(Tg,Er,null),e(Co,nKe),e(Co,Mg),M(AA,Mg,null),e(Mg,sKe),e(Mg,Kre),e(Kre,lKe),b(f,Aqe,u),b(f,Fi,u),e(Fi,Eg),e(Eg,Zre),M(yA,Zre,null),e(Fi,iKe),e(Fi,ete),e(ete,dKe),b(f,yqe,u),b(f,wo,u),M(LA,wo,null),e(wo,cKe),e(wo,xA),e(xA,fKe),e(xA,VS),e(VS,mKe),e(xA,gKe),e(wo,hKe),e(wo,$A),e($A,pKe),e($A,ote),e(ote,_Ke),e($A,uKe),e(wo,bKe),e(wo,Cr),M(kA,Cr,null),e(Cr,vKe),e(Cr,rte),e(rte,FKe),e(Cr,TKe),e(Cr,Aa),e(Aa,MKe),e(Aa,tte),e(tte,EKe),e(Aa,CKe),e(Aa,ate),e(ate,wKe),e(Aa,AKe),e(Aa,nte),e(nte,yKe),e(Aa,LKe),e(Cr,xKe),e(Cr,k),e(k,Sn),e(Sn,ste),e(ste,$Ke),e(Sn,kKe),e(Sn,XS),e(XS,SKe),e(Sn,RKe),e(Sn,zS),e(zS,BKe),e(Sn,PKe),e(k,IKe),e(k,Rn),e(Rn,lte),e(lte,qKe),e(Rn,NKe),e(Rn,WS),e(WS,jKe),e(Rn,DKe),e(Rn,QS),e(QS,GKe),e(Rn,OKe),e(k,VKe),e(k,Bn),e(Bn,ite),e(ite,XKe),e(Bn,zKe),e(Bn,HS),e(HS,WKe),e(Bn,QKe),e(Bn,US),e(US,HKe),e(Bn,UKe),e(k,JKe),e(k,Cg),e(Cg,dte),e(dte,YKe),e(Cg,KKe),e(Cg,JS),e(JS,ZKe),e(Cg,eZe),e(k,oZe),e(k,Pn),e(Pn,cte),e(cte,rZe),e(Pn,tZe),e(Pn,YS),e(YS,aZe),e(Pn,nZe),e(Pn,KS),e(KS,sZe),e(Pn,lZe),e(k,iZe),e(k,wg),e(wg,fte),e(fte,dZe),e(wg,cZe),e(wg,ZS),e(ZS,fZe),e(wg,mZe),e(k,gZe),e(k,Ag),e(Ag,mte),e(mte,hZe),e(Ag,pZe),e(Ag,eR),e(eR,_Ze),e(Ag,uZe),e(k,bZe),e(k,yg),e(yg,gte),e(gte,vZe),e(yg,FZe),e(yg,oR),e(oR,TZe),e(yg,MZe),e(k,EZe),e(k,In),e(In,hte),e(hte,CZe),e(In,wZe),e(In,rR),e(rR,AZe),e(In,yZe),e(In,tR),e(tR,LZe),e(In,xZe),e(k,$Ze),e(k,qn),e(qn,pte),e(pte,kZe),e(qn,SZe),e(qn,aR),e(aR,RZe),e(qn,BZe),e(qn,nR),e(nR,PZe),e(qn,IZe),e(k,qZe),e(k,Nn),e(Nn,_te),e(_te,NZe),e(Nn,jZe),e(Nn,sR),e(sR,DZe),e(Nn,GZe),e(Nn,lR),e(lR,OZe),e(Nn,VZe),e(k,XZe),e(k,Lg),e(Lg,ute),e(ute,zZe),e(Lg,WZe),e(Lg,iR),e(iR,QZe),e(Lg,HZe),e(k,UZe),e(k,xg),e(xg,bte),e(bte,JZe),e(xg,YZe),e(xg,dR),e(dR,KZe),e(xg,ZZe),e(k,eeo),e(k,$g),e($g,vte),e(vte,oeo),e($g,reo),e($g,cR),e(cR,teo),e($g,aeo),e(k,neo),e(k,jn),e(jn,Fte),e(Fte,seo),e(jn,leo),e(jn,fR),e(fR,ieo),e(jn,deo),e(jn,mR),e(mR,ceo),e(jn,feo),e(k,meo),e(k,kg),e(kg,Tte),e(Tte,geo),e(kg,heo),e(kg,gR),e(gR,peo),e(kg,_eo),e(k,ueo),e(k,Dn),e(Dn,Mte),e(Mte,beo),e(Dn,veo),e(Dn,hR),e(hR,Feo),e(Dn,Teo),e(Dn,pR),e(pR,Meo),e(Dn,Eeo),e(k,Ceo),e(k,Gn),e(Gn,Ete),e(Ete,weo),e(Gn,Aeo),e(Gn,_R),e(_R,yeo),e(Gn,Leo),e(Gn,uR),e(uR,xeo),e(Gn,$eo),e(k,keo),e(k,On),e(On,Cte),e(Cte,Seo),e(On,Reo),e(On,bR),e(bR,Beo),e(On,Peo),e(On,vR),e(vR,Ieo),e(On,qeo),e(k,Neo),e(k,Sg),e(Sg,wte),e(wte,jeo),e(Sg,Deo),e(Sg,FR),e(FR,Geo),e(Sg,Oeo),e(k,Veo),e(k,Vn),e(Vn,Ate),e(Ate,Xeo),e(Vn,zeo),e(Vn,TR),e(TR,Weo),e(Vn,Qeo),e(Vn,MR),e(MR,Heo),e(Vn,Ueo),e(k,Jeo),e(k,Xn),e(Xn,yte),e(yte,Yeo),e(Xn,Keo),e(Xn,ER),e(ER,Zeo),e(Xn,eoo),e(Xn,CR),e(CR,ooo),e(Xn,roo),e(k,too),e(k,zn),e(zn,Lte),e(Lte,aoo),e(zn,noo),e(zn,wR),e(wR,soo),e(zn,loo),e(zn,AR),e(AR,ioo),e(zn,doo),e(k,coo),e(k,Wn),e(Wn,xte),e(xte,foo),e(Wn,moo),e(Wn,yR),e(yR,goo),e(Wn,hoo),e(Wn,LR),e(LR,poo),e(Wn,_oo),e(k,uoo),e(k,Qn),e(Qn,$te),e($te,boo),e(Qn,voo),e(Qn,xR),e(xR,Foo),e(Qn,Too),e(Qn,$R),e($R,Moo),e(Qn,Eoo),e(k,Coo),e(k,Hn),e(Hn,kte),e(kte,woo),e(Hn,Aoo),e(Hn,kR),e(kR,yoo),e(Hn,Loo),e(Hn,SR),e(SR,xoo),e(Hn,$oo),e(k,koo),e(k,Rg),e(Rg,Ste),e(Ste,Soo),e(Rg,Roo),e(Rg,RR),e(RR,Boo),e(Rg,Poo),e(k,Ioo),e(k,Un),e(Un,Rte),e(Rte,qoo),e(Un,Noo),e(Un,BR),e(BR,joo),e(Un,Doo),e(Un,PR),e(PR,Goo),e(Un,Ooo),e(k,Voo),e(k,Bg),e(Bg,Bte),e(Bte,Xoo),e(Bg,zoo),e(Bg,IR),e(IR,Woo),e(Bg,Qoo),e(k,Hoo),e(k,Jn),e(Jn,Pte),e(Pte,Uoo),e(Jn,Joo),e(Jn,qR),e(qR,Yoo),e(Jn,Koo),e(Jn,NR),e(NR,Zoo),e(Jn,ero),e(k,oro),e(k,Yn),e(Yn,Ite),e(Ite,rro),e(Yn,tro),e(Yn,jR),e(jR,aro),e(Yn,nro),e(Yn,DR),e(DR,sro),e(Yn,lro),e(k,iro),e(k,Kn),e(Kn,qte),e(qte,dro),e(Kn,cro),e(Kn,GR),e(GR,fro),e(Kn,mro),e(Kn,OR),e(OR,gro),e(Kn,hro),e(k,pro),e(k,Zn),e(Zn,Nte),e(Nte,_ro),e(Zn,uro),e(Zn,VR),e(VR,bro),e(Zn,vro),e(Zn,XR),e(XR,Fro),e(Zn,Tro),e(k,Mro),e(k,es),e(es,jte),e(jte,Ero),e(es,Cro),e(es,zR),e(zR,wro),e(es,Aro),e(es,WR),e(WR,yro),e(es,Lro),e(k,xro),e(k,Pg),e(Pg,Dte),e(Dte,$ro),e(Pg,kro),e(Pg,QR),e(QR,Sro),e(Pg,Rro),e(k,Bro),e(k,os),e(os,Gte),e(Gte,Pro),e(os,Iro),e(os,HR),e(HR,qro),e(os,Nro),e(os,UR),e(UR,jro),e(os,Dro),e(k,Gro),e(k,rs),e(rs,Ote),e(Ote,Oro),e(rs,Vro),e(rs,JR),e(JR,Xro),e(rs,zro),e(rs,YR),e(YR,Wro),e(rs,Qro),e(k,Hro),e(k,ts),e(ts,Vte),e(Vte,Uro),e(ts,Jro),e(ts,KR),e(KR,Yro),e(ts,Kro),e(ts,ZR),e(ZR,Zro),e(ts,eto),e(k,oto),e(k,as),e(as,Xte),e(Xte,rto),e(as,tto),e(as,eB),e(eB,ato),e(as,nto),e(as,oB),e(oB,sto),e(as,lto),e(k,ito),e(k,ns),e(ns,zte),e(zte,dto),e(ns,cto),e(ns,rB),e(rB,fto),e(ns,mto),e(ns,tB),e(tB,gto),e(ns,hto),e(k,pto),e(k,ss),e(ss,Wte),e(Wte,_to),e(ss,uto),e(ss,aB),e(aB,bto),e(ss,vto),e(ss,nB),e(nB,Fto),e(ss,Tto),e(k,Mto),e(k,Ig),e(Ig,Qte),e(Qte,Eto),e(Ig,Cto),e(Ig,sB),e(sB,wto),e(Ig,Ato),e(k,yto),e(k,ls),e(ls,Hte),e(Hte,Lto),e(ls,xto),e(ls,lB),e(lB,$to),e(ls,kto),e(ls,iB),e(iB,Sto),e(ls,Rto),e(k,Bto),e(k,qg),e(qg,Ute),e(Ute,Pto),e(qg,Ito),e(qg,dB),e(dB,qto),e(qg,Nto),e(k,jto),e(k,Ng),e(Ng,Jte),e(Jte,Dto),e(Ng,Gto),e(Ng,cB),e(cB,Oto),e(Ng,Vto),e(k,Xto),e(k,is),e(is,Yte),e(Yte,zto),e(is,Wto),e(is,fB),e(fB,Qto),e(is,Hto),e(is,mB),e(mB,Uto),e(is,Jto),e(k,Yto),e(k,ds),e(ds,Kte),e(Kte,Kto),e(ds,Zto),e(ds,gB),e(gB,eao),e(ds,oao),e(ds,hB),e(hB,rao),e(ds,tao),e(k,aao),e(k,cs),e(cs,Zte),e(Zte,nao),e(cs,sao),e(cs,pB),e(pB,lao),e(cs,iao),e(cs,_B),e(_B,dao),e(cs,cao),e(k,fao),e(k,jg),e(jg,eae),e(eae,mao),e(jg,gao),e(jg,uB),e(uB,hao),e(jg,pao),e(k,_ao),e(k,fs),e(fs,oae),e(oae,uao),e(fs,bao),e(fs,bB),e(bB,vao),e(fs,Fao),e(fs,vB),e(vB,Tao),e(fs,Mao),e(k,Eao),e(k,ms),e(ms,rae),e(rae,Cao),e(ms,wao),e(ms,FB),e(FB,Aao),e(ms,yao),e(ms,TB),e(TB,Lao),e(ms,xao),e(k,$ao),e(k,gs),e(gs,tae),e(tae,kao),e(gs,Sao),e(gs,MB),e(MB,Rao),e(gs,Bao),e(gs,EB),e(EB,Pao),e(gs,Iao),e(k,qao),e(k,hs),e(hs,aae),e(aae,Nao),e(hs,jao),e(hs,CB),e(CB,Dao),e(hs,Gao),e(hs,wB),e(wB,Oao),e(hs,Vao),e(k,Xao),e(k,ps),e(ps,nae),e(nae,zao),e(ps,Wao),e(ps,AB),e(AB,Qao),e(ps,Hao),e(ps,yB),e(yB,Uao),e(ps,Jao),e(k,Yao),e(k,Dg),e(Dg,sae),e(sae,Kao),e(Dg,Zao),e(Dg,LB),e(LB,eno),e(Dg,ono),e(k,rno),e(k,_s),e(_s,lae),e(lae,tno),e(_s,ano),e(_s,xB),e(xB,nno),e(_s,sno),e(_s,$B),e($B,lno),e(_s,ino),e(k,dno),e(k,Gg),e(Gg,iae),e(iae,cno),e(Gg,fno),e(Gg,kB),e(kB,mno),e(Gg,gno),e(k,hno),e(k,Og),e(Og,dae),e(dae,pno),e(Og,_no),e(Og,SB),e(SB,uno),e(Og,bno),e(k,vno),e(k,Vg),e(Vg,cae),e(cae,Fno),e(Vg,Tno),e(Vg,RB),e(RB,Mno),e(Vg,Eno),e(k,Cno),e(k,Xg),e(Xg,fae),e(fae,wno),e(Xg,Ano),e(Xg,BB),e(BB,yno),e(Xg,Lno),e(k,xno),e(k,us),e(us,mae),e(mae,$no),e(us,kno),e(us,PB),e(PB,Sno),e(us,Rno),e(us,IB),e(IB,Bno),e(us,Pno),e(k,Ino),e(k,zg),e(zg,gae),e(gae,qno),e(zg,Nno),e(zg,qB),e(qB,jno),e(zg,Dno),e(k,Gno),e(k,bs),e(bs,hae),e(hae,Ono),e(bs,Vno),e(bs,NB),e(NB,Xno),e(bs,zno),e(bs,jB),e(jB,Wno),e(bs,Qno),e(k,Hno),e(k,vs),e(vs,pae),e(pae,Uno),e(vs,Jno),e(vs,DB),e(DB,Yno),e(vs,Kno),e(vs,GB),e(GB,Zno),e(vs,eso),e(k,oso),e(k,Fs),e(Fs,_ae),e(_ae,rso),e(Fs,tso),e(Fs,OB),e(OB,aso),e(Fs,nso),e(Fs,VB),e(VB,sso),e(Fs,lso),e(k,iso),e(k,Ts),e(Ts,uae),e(uae,dso),e(Ts,cso),e(Ts,XB),e(XB,fso),e(Ts,mso),e(Ts,zB),e(zB,gso),e(Ts,hso),e(k,pso),e(k,Ms),e(Ms,bae),e(bae,_so),e(Ms,uso),e(Ms,WB),e(WB,bso),e(Ms,vso),e(Ms,QB),e(QB,Fso),e(Ms,Tso),e(k,Mso),e(k,Es),e(Es,vae),e(vae,Eso),e(Es,Cso),e(Es,HB),e(HB,wso),e(Es,Aso),e(Es,UB),e(UB,yso),e(Es,Lso),e(k,xso),e(k,Wg),e(Wg,Fae),e(Fae,$so),e(Wg,kso),e(Wg,JB),e(JB,Sso),e(Wg,Rso),e(k,Bso),e(k,Qg),e(Qg,Tae),e(Tae,Pso),e(Qg,Iso),e(Qg,YB),e(YB,qso),e(Qg,Nso),e(k,jso),e(k,Cs),e(Cs,Mae),e(Mae,Dso),e(Cs,Gso),e(Cs,KB),e(KB,Oso),e(Cs,Vso),e(Cs,ZB),e(ZB,Xso),e(Cs,zso),e(k,Wso),e(k,ws),e(ws,Eae),e(Eae,Qso),e(ws,Hso),e(ws,eP),e(eP,Uso),e(ws,Jso),e(ws,oP),e(oP,Yso),e(ws,Kso),e(k,Zso),e(k,As),e(As,Cae),e(Cae,elo),e(As,olo),e(As,rP),e(rP,rlo),e(As,tlo),e(As,tP),e(tP,alo),e(As,nlo),e(k,slo),e(k,Hg),e(Hg,wae),e(wae,llo),e(Hg,ilo),e(Hg,aP),e(aP,dlo),e(Hg,clo),e(k,flo),e(k,Ug),e(Ug,Aae),e(Aae,mlo),e(Ug,glo),e(Ug,nP),e(nP,hlo),e(Ug,plo),e(k,_lo),e(k,Jg),e(Jg,yae),e(yae,ulo),e(Jg,blo),e(Jg,sP),e(sP,vlo),e(Jg,Flo),e(k,Tlo),e(k,ys),e(ys,Lae),e(Lae,Mlo),e(ys,Elo),e(ys,lP),e(lP,Clo),e(ys,wlo),e(ys,iP),e(iP,Alo),e(ys,ylo),e(k,Llo),e(k,Yg),e(Yg,xae),e(xae,xlo),e(Yg,$lo),e(Yg,dP),e(dP,klo),e(Yg,Slo),e(k,Rlo),e(k,Kg),e(Kg,$ae),e($ae,Blo),e(Kg,Plo),e(Kg,cP),e(cP,Ilo),e(Kg,qlo),e(k,Nlo),e(k,Zg),e(Zg,kae),e(kae,jlo),e(Zg,Dlo),e(Zg,fP),e(fP,Glo),e(Zg,Olo),e(k,Vlo),e(k,Ls),e(Ls,Sae),e(Sae,Xlo),e(Ls,zlo),e(Ls,mP),e(mP,Wlo),e(Ls,Qlo),e(Ls,gP),e(gP,Hlo),e(Ls,Ulo),e(k,Jlo),e(k,eh),e(eh,Rae),e(Rae,Ylo),e(eh,Klo),e(eh,hP),e(hP,Zlo),e(eh,eio),e(k,oio),e(k,oh),e(oh,Bae),e(Bae,rio),e(oh,tio),e(oh,pP),e(pP,aio),e(oh,nio),e(k,sio),e(k,xs),e(xs,Pae),e(Pae,lio),e(xs,iio),e(xs,_P),e(_P,dio),e(xs,cio),e(xs,uP),e(uP,fio),e(xs,mio),e(k,gio),e(k,$s),e($s,Iae),e(Iae,hio),e($s,pio),e($s,bP),e(bP,_io),e($s,uio),e($s,vP),e(vP,bio),e($s,vio),e(k,Fio),e(k,ks),e(ks,qae),e(qae,Tio),e(ks,Mio),e(ks,FP),e(FP,Eio),e(ks,Cio),e(ks,TP),e(TP,wio),e(ks,Aio),e(k,yio),e(k,Ss),e(Ss,Nae),e(Nae,Lio),e(Ss,xio),e(Ss,MP),e(MP,$io),e(Ss,kio),e(Ss,EP),e(EP,Sio),e(Ss,Rio),e(Cr,Bio),M(rh,Cr,null),e(wo,Pio),e(wo,th),M(SA,th,null),e(th,Iio),e(th,jae),e(jae,qio),b(f,Lqe,u),b(f,Ti,u),e(Ti,ah),e(ah,Dae),M(RA,Dae,null),e(Ti,Nio),e(Ti,Gae),e(Gae,jio),b(f,xqe,u),b(f,Ao,u),M(BA,Ao,null),e(Ao,Dio),e(Ao,PA),e(PA,Gio),e(PA,CP),e(CP,Oio),e(PA,Vio),e(Ao,Xio),e(Ao,IA),e(IA,zio),e(IA,Oae),e(Oae,Wio),e(IA,Qio),e(Ao,Hio),e(Ao,He),M(qA,He,null),e(He,Uio),e(He,Vae),e(Vae,Jio),e(He,Yio),e(He,ya),e(ya,Kio),e(ya,Xae),e(Xae,Zio),e(ya,edo),e(ya,zae),e(zae,odo),e(ya,rdo),e(ya,Wae),e(Wae,tdo),e(ya,ado),e(He,ndo),e(He,Z),e(Z,nh),e(nh,Qae),e(Qae,sdo),e(nh,ldo),e(nh,wP),e(wP,ido),e(nh,ddo),e(Z,cdo),e(Z,sh),e(sh,Hae),e(Hae,fdo),e(sh,mdo),e(sh,AP),e(AP,gdo),e(sh,hdo),e(Z,pdo),e(Z,lh),e(lh,Uae),e(Uae,_do),e(lh,udo),e(lh,yP),e(yP,bdo),e(lh,vdo),e(Z,Fdo),e(Z,ih),e(ih,Jae),e(Jae,Tdo),e(ih,Mdo),e(ih,LP),e(LP,Edo),e(ih,Cdo),e(Z,wdo),e(Z,dh),e(dh,Yae),e(Yae,Ado),e(dh,ydo),e(dh,xP),e(xP,Ldo),e(dh,xdo),e(Z,$do),e(Z,ch),e(ch,Kae),e(Kae,kdo),e(ch,Sdo),e(ch,$P),e($P,Rdo),e(ch,Bdo),e(Z,Pdo),e(Z,fh),e(fh,Zae),e(Zae,Ido),e(fh,qdo),e(fh,kP),e(kP,Ndo),e(fh,jdo),e(Z,Ddo),e(Z,mh),e(mh,ene),e(ene,Gdo),e(mh,Odo),e(mh,SP),e(SP,Vdo),e(mh,Xdo),e(Z,zdo),e(Z,gh),e(gh,one),e(one,Wdo),e(gh,Qdo),e(gh,RP),e(RP,Hdo),e(gh,Udo),e(Z,Jdo),e(Z,hh),e(hh,rne),e(rne,Ydo),e(hh,Kdo),e(hh,BP),e(BP,Zdo),e(hh,eco),e(Z,oco),e(Z,ph),e(ph,tne),e(tne,rco),e(ph,tco),e(ph,PP),e(PP,aco),e(ph,nco),e(Z,sco),e(Z,_h),e(_h,ane),e(ane,lco),e(_h,ico),e(_h,IP),e(IP,dco),e(_h,cco),e(Z,fco),e(Z,uh),e(uh,nne),e(nne,mco),e(uh,gco),e(uh,qP),e(qP,hco),e(uh,pco),e(Z,_co),e(Z,bh),e(bh,sne),e(sne,uco),e(bh,bco),e(bh,NP),e(NP,vco),e(bh,Fco),e(Z,Tco),e(Z,vh),e(vh,lne),e(lne,Mco),e(vh,Eco),e(vh,jP),e(jP,Cco),e(vh,wco),e(Z,Aco),e(Z,Fh),e(Fh,ine),e(ine,yco),e(Fh,Lco),e(Fh,DP),e(DP,xco),e(Fh,$co),e(Z,kco),e(Z,Th),e(Th,dne),e(dne,Sco),e(Th,Rco),e(Th,GP),e(GP,Bco),e(Th,Pco),e(Z,Ico),e(Z,Mh),e(Mh,cne),e(cne,qco),e(Mh,Nco),e(Mh,OP),e(OP,jco),e(Mh,Dco),e(Z,Gco),e(Z,Eh),e(Eh,fne),e(fne,Oco),e(Eh,Vco),e(Eh,VP),e(VP,Xco),e(Eh,zco),e(Z,Wco),e(Z,Ch),e(Ch,mne),e(mne,Qco),e(Ch,Hco),e(Ch,XP),e(XP,Uco),e(Ch,Jco),e(Z,Yco),e(Z,wh),e(wh,gne),e(gne,Kco),e(wh,Zco),e(wh,zP),e(zP,efo),e(wh,ofo),e(Z,rfo),e(Z,Ah),e(Ah,hne),e(hne,tfo),e(Ah,afo),e(Ah,WP),e(WP,nfo),e(Ah,sfo),e(Z,lfo),e(Z,yh),e(yh,pne),e(pne,ifo),e(yh,dfo),e(yh,QP),e(QP,cfo),e(yh,ffo),e(Z,mfo),e(Z,Lh),e(Lh,_ne),e(_ne,gfo),e(Lh,hfo),e(Lh,HP),e(HP,pfo),e(Lh,_fo),e(Z,ufo),e(Z,xh),e(xh,une),e(une,bfo),e(xh,vfo),e(xh,UP),e(UP,Ffo),e(xh,Tfo),e(Z,Mfo),e(Z,$h),e($h,bne),e(bne,Efo),e($h,Cfo),e($h,JP),e(JP,wfo),e($h,Afo),e(Z,yfo),e(Z,kh),e(kh,vne),e(vne,Lfo),e(kh,xfo),e(kh,YP),e(YP,$fo),e(kh,kfo),e(He,Sfo),M(Sh,He,null),e(He,Rfo),M(Rh,He,null),e(Ao,Bfo),e(Ao,Bh),M(NA,Bh,null),e(Bh,Pfo),e(Bh,Fne),e(Fne,Ifo),b(f,$qe,u),b(f,Mi,u),e(Mi,Ph),e(Ph,Tne),M(jA,Tne,null),e(Mi,qfo),e(Mi,Mne),e(Mne,Nfo),b(f,kqe,u),b(f,yo,u),M(DA,yo,null),e(yo,jfo),e(yo,GA),e(GA,Dfo),e(GA,KP),e(KP,Gfo),e(GA,Ofo),e(yo,Vfo),e(yo,OA),e(OA,Xfo),e(OA,Ene),e(Ene,zfo),e(OA,Wfo),e(yo,Qfo),e(yo,Ue),M(VA,Ue,null),e(Ue,Hfo),e(Ue,Cne),e(Cne,Ufo),e(Ue,Jfo),e(Ue,Ei),e(Ei,Yfo),e(Ei,wne),e(wne,Kfo),e(Ei,Zfo),e(Ei,Ane),e(Ane,emo),e(Ei,omo),e(Ue,rmo),e(Ue,pe),e(pe,Ih),e(Ih,yne),e(yne,tmo),e(Ih,amo),e(Ih,ZP),e(ZP,nmo),e(Ih,smo),e(pe,lmo),e(pe,qh),e(qh,Lne),e(Lne,imo),e(qh,dmo),e(qh,xne),e(xne,cmo),e(qh,fmo),e(pe,mmo),e(pe,Nh),e(Nh,$ne),e($ne,gmo),e(Nh,hmo),e(Nh,eI),e(eI,pmo),e(Nh,_mo),e(pe,umo),e(pe,jh),e(jh,kne),e(kne,bmo),e(jh,vmo),e(jh,oI),e(oI,Fmo),e(jh,Tmo),e(pe,Mmo),e(pe,Dh),e(Dh,Sne),e(Sne,Emo),e(Dh,Cmo),e(Dh,rI),e(rI,wmo),e(Dh,Amo),e(pe,ymo),e(pe,Gh),e(Gh,Rne),e(Rne,Lmo),e(Gh,xmo),e(Gh,tI),e(tI,$mo),e(Gh,kmo),e(pe,Smo),e(pe,Oh),e(Oh,Bne),e(Bne,Rmo),e(Oh,Bmo),e(Oh,aI),e(aI,Pmo),e(Oh,Imo),e(pe,qmo),e(pe,Vh),e(Vh,Pne),e(Pne,Nmo),e(Vh,jmo),e(Vh,nI),e(nI,Dmo),e(Vh,Gmo),e(pe,Omo),e(pe,Xh),e(Xh,Ine),e(Ine,Vmo),e(Xh,Xmo),e(Xh,sI),e(sI,zmo),e(Xh,Wmo),e(pe,Qmo),e(pe,zh),e(zh,qne),e(qne,Hmo),e(zh,Umo),e(zh,lI),e(lI,Jmo),e(zh,Ymo),e(pe,Kmo),e(pe,Wh),e(Wh,Nne),e(Nne,Zmo),e(Wh,ego),e(Wh,iI),e(iI,ogo),e(Wh,rgo),e(pe,tgo),e(pe,Qh),e(Qh,jne),e(jne,ago),e(Qh,ngo),e(Qh,dI),e(dI,sgo),e(Qh,lgo),e(pe,igo),e(pe,Hh),e(Hh,Dne),e(Dne,dgo),e(Hh,cgo),e(Hh,cI),e(cI,fgo),e(Hh,mgo),e(pe,ggo),e(pe,Uh),e(Uh,Gne),e(Gne,hgo),e(Uh,pgo),e(Uh,fI),e(fI,_go),e(Uh,ugo),e(pe,bgo),e(pe,Jh),e(Jh,One),e(One,vgo),e(Jh,Fgo),e(Jh,mI),e(mI,Tgo),e(Jh,Mgo),e(pe,Ego),e(pe,Yh),e(Yh,Vne),e(Vne,Cgo),e(Yh,wgo),e(Yh,gI),e(gI,Ago),e(Yh,ygo),e(Ue,Lgo),M(Kh,Ue,null),e(Ue,xgo),M(Zh,Ue,null),e(yo,$go),e(yo,ep),M(XA,ep,null),e(ep,kgo),e(ep,Xne),e(Xne,Sgo),b(f,Sqe,u),b(f,Ci,u),e(Ci,op),e(op,zne),M(zA,zne,null),e(Ci,Rgo),e(Ci,Wne),e(Wne,Bgo),b(f,Rqe,u),b(f,Lo,u),M(WA,Lo,null),e(Lo,Pgo),e(Lo,wi),e(wi,Igo),e(wi,hI),e(hI,qgo),e(wi,Ngo),e(wi,pI),e(pI,jgo),e(wi,Dgo),e(Lo,Ggo),e(Lo,QA),e(QA,Ogo),e(QA,Qne),e(Qne,Vgo),e(QA,Xgo),e(Lo,zgo),e(Lo,tt),M(HA,tt,null),e(tt,Wgo),e(tt,Hne),e(Hne,Qgo),e(tt,Hgo),e(tt,Ai),e(Ai,Ugo),e(Ai,Une),e(Une,Jgo),e(Ai,Ygo),e(Ai,_I),e(_I,Kgo),e(Ai,Zgo),e(tt,eho),M(rp,tt,null),e(Lo,oho),e(Lo,Je),M(UA,Je,null),e(Je,rho),e(Je,Jne),e(Jne,tho),e(Je,aho),e(Je,La),e(La,nho),e(La,Yne),e(Yne,sho),e(La,lho),e(La,Kne),e(Kne,iho),e(La,dho),e(La,Zne),e(Zne,cho),e(La,fho),e(Je,mho),e(Je,x),e(x,tp),e(tp,ese),e(ese,gho),e(tp,hho),e(tp,uI),e(uI,pho),e(tp,_ho),e(x,uho),e(x,ap),e(ap,ose),e(ose,bho),e(ap,vho),e(ap,bI),e(bI,Fho),e(ap,Tho),e(x,Mho),e(x,np),e(np,rse),e(rse,Eho),e(np,Cho),e(np,vI),e(vI,who),e(np,Aho),e(x,yho),e(x,sp),e(sp,tse),e(tse,Lho),e(sp,xho),e(sp,FI),e(FI,$ho),e(sp,kho),e(x,Sho),e(x,lp),e(lp,ase),e(ase,Rho),e(lp,Bho),e(lp,TI),e(TI,Pho),e(lp,Iho),e(x,qho),e(x,ip),e(ip,nse),e(nse,Nho),e(ip,jho),e(ip,MI),e(MI,Dho),e(ip,Gho),e(x,Oho),e(x,dp),e(dp,sse),e(sse,Vho),e(dp,Xho),e(dp,EI),e(EI,zho),e(dp,Who),e(x,Qho),e(x,cp),e(cp,lse),e(lse,Hho),e(cp,Uho),e(cp,CI),e(CI,Jho),e(cp,Yho),e(x,Kho),e(x,fp),e(fp,ise),e(ise,Zho),e(fp,epo),e(fp,wI),e(wI,opo),e(fp,rpo),e(x,tpo),e(x,mp),e(mp,dse),e(dse,apo),e(mp,npo),e(mp,AI),e(AI,spo),e(mp,lpo),e(x,ipo),e(x,gp),e(gp,cse),e(cse,dpo),e(gp,cpo),e(gp,yI),e(yI,fpo),e(gp,mpo),e(x,gpo),e(x,hp),e(hp,fse),e(fse,hpo),e(hp,ppo),e(hp,LI),e(LI,_po),e(hp,upo),e(x,bpo),e(x,pp),e(pp,mse),e(mse,vpo),e(pp,Fpo),e(pp,xI),e(xI,Tpo),e(pp,Mpo),e(x,Epo),e(x,_p),e(_p,gse),e(gse,Cpo),e(_p,wpo),e(_p,$I),e($I,Apo),e(_p,ypo),e(x,Lpo),e(x,up),e(up,hse),e(hse,xpo),e(up,$po),e(up,kI),e(kI,kpo),e(up,Spo),e(x,Rpo),e(x,bp),e(bp,pse),e(pse,Bpo),e(bp,Ppo),e(bp,SI),e(SI,Ipo),e(bp,qpo),e(x,Npo),e(x,vp),e(vp,_se),e(_se,jpo),e(vp,Dpo),e(vp,RI),e(RI,Gpo),e(vp,Opo),e(x,Vpo),e(x,Fp),e(Fp,use),e(use,Xpo),e(Fp,zpo),e(Fp,BI),e(BI,Wpo),e(Fp,Qpo),e(x,Hpo),e(x,Tp),e(Tp,bse),e(bse,Upo),e(Tp,Jpo),e(Tp,PI),e(PI,Ypo),e(Tp,Kpo),e(x,Zpo),e(x,Mp),e(Mp,vse),e(vse,e_o),e(Mp,o_o),e(Mp,II),e(II,r_o),e(Mp,t_o),e(x,a_o),e(x,Ep),e(Ep,Fse),e(Fse,n_o),e(Ep,s_o),e(Ep,qI),e(qI,l_o),e(Ep,i_o),e(x,d_o),e(x,Cp),e(Cp,Tse),e(Tse,c_o),e(Cp,f_o),e(Cp,NI),e(NI,m_o),e(Cp,g_o),e(x,h_o),e(x,wp),e(wp,Mse),e(Mse,p_o),e(wp,__o),e(wp,jI),e(jI,u_o),e(wp,b_o),e(x,v_o),e(x,Ap),e(Ap,Ese),e(Ese,F_o),e(Ap,T_o),e(Ap,DI),e(DI,M_o),e(Ap,E_o),e(x,C_o),e(x,yp),e(yp,Cse),e(Cse,w_o),e(yp,A_o),e(yp,GI),e(GI,y_o),e(yp,L_o),e(x,x_o),e(x,Lp),e(Lp,wse),e(wse,$_o),e(Lp,k_o),e(Lp,OI),e(OI,S_o),e(Lp,R_o),e(x,B_o),e(x,xp),e(xp,Ase),e(Ase,P_o),e(xp,I_o),e(xp,VI),e(VI,q_o),e(xp,N_o),e(x,j_o),e(x,$p),e($p,yse),e(yse,D_o),e($p,G_o),e($p,XI),e(XI,O_o),e($p,V_o),e(x,X_o),e(x,kp),e(kp,Lse),e(Lse,z_o),e(kp,W_o),e(kp,zI),e(zI,Q_o),e(kp,H_o),e(x,U_o),e(x,Sp),e(Sp,xse),e(xse,J_o),e(Sp,Y_o),e(Sp,WI),e(WI,K_o),e(Sp,Z_o),e(x,euo),e(x,Rp),e(Rp,$se),e($se,ouo),e(Rp,ruo),e(Rp,QI),e(QI,tuo),e(Rp,auo),e(x,nuo),e(x,Bp),e(Bp,kse),e(kse,suo),e(Bp,luo),e(Bp,HI),e(HI,iuo),e(Bp,duo),e(x,cuo),e(x,Pp),e(Pp,Sse),e(Sse,fuo),e(Pp,muo),e(Pp,UI),e(UI,guo),e(Pp,huo),e(x,puo),e(x,Rs),e(Rs,Rse),e(Rse,_uo),e(Rs,uuo),e(Rs,JI),e(JI,buo),e(Rs,vuo),e(Rs,YI),e(YI,Fuo),e(Rs,Tuo),e(x,Muo),e(x,Ip),e(Ip,Bse),e(Bse,Euo),e(Ip,Cuo),e(Ip,KI),e(KI,wuo),e(Ip,Auo),e(x,yuo),e(x,qp),e(qp,Pse),e(Pse,Luo),e(qp,xuo),e(qp,ZI),e(ZI,$uo),e(qp,kuo),e(x,Suo),e(x,Np),e(Np,Ise),e(Ise,Ruo),e(Np,Buo),e(Np,eq),e(eq,Puo),e(Np,Iuo),e(x,quo),e(x,jp),e(jp,qse),e(qse,Nuo),e(jp,juo),e(jp,oq),e(oq,Duo),e(jp,Guo),e(x,Ouo),e(x,Dp),e(Dp,Nse),e(Nse,Vuo),e(Dp,Xuo),e(Dp,rq),e(rq,zuo),e(Dp,Wuo),e(x,Quo),e(x,Gp),e(Gp,jse),e(jse,Huo),e(Gp,Uuo),e(Gp,tq),e(tq,Juo),e(Gp,Yuo),e(x,Kuo),e(x,Op),e(Op,Dse),e(Dse,Zuo),e(Op,e2o),e(Op,aq),e(aq,o2o),e(Op,r2o),e(x,t2o),e(x,Vp),e(Vp,Gse),e(Gse,a2o),e(Vp,n2o),e(Vp,nq),e(nq,s2o),e(Vp,l2o),e(x,i2o),e(x,Xp),e(Xp,Ose),e(Ose,d2o),e(Xp,c2o),e(Xp,sq),e(sq,f2o),e(Xp,m2o),e(x,g2o),e(x,zp),e(zp,Vse),e(Vse,h2o),e(zp,p2o),e(zp,lq),e(lq,_2o),e(zp,u2o),e(x,b2o),e(x,Wp),e(Wp,Xse),e(Xse,v2o),e(Wp,F2o),e(Wp,iq),e(iq,T2o),e(Wp,M2o),e(x,E2o),e(x,Qp),e(Qp,zse),e(zse,C2o),e(Qp,w2o),e(Qp,dq),e(dq,A2o),e(Qp,y2o),e(x,L2o),e(x,Hp),e(Hp,Wse),e(Wse,x2o),e(Hp,$2o),e(Hp,cq),e(cq,k2o),e(Hp,S2o),e(x,R2o),e(x,Up),e(Up,Qse),e(Qse,B2o),e(Up,P2o),e(Up,fq),e(fq,I2o),e(Up,q2o),e(x,N2o),e(x,Jp),e(Jp,Hse),e(Hse,j2o),e(Jp,D2o),e(Jp,mq),e(mq,G2o),e(Jp,O2o),e(x,V2o),e(x,Yp),e(Yp,Use),e(Use,X2o),e(Yp,z2o),e(Yp,gq),e(gq,W2o),e(Yp,Q2o),e(x,H2o),e(x,Kp),e(Kp,Jse),e(Jse,U2o),e(Kp,J2o),e(Kp,hq),e(hq,Y2o),e(Kp,K2o),e(x,Z2o),e(x,Zp),e(Zp,Yse),e(Yse,e1o),e(Zp,o1o),e(Zp,pq),e(pq,r1o),e(Zp,t1o),e(x,a1o),e(x,e_),e(e_,Kse),e(Kse,n1o),e(e_,s1o),e(e_,_q),e(_q,l1o),e(e_,i1o),e(x,d1o),e(x,o_),e(o_,Zse),e(Zse,c1o),e(o_,f1o),e(o_,uq),e(uq,m1o),e(o_,g1o),e(x,h1o),e(x,r_),e(r_,ele),e(ele,p1o),e(r_,_1o),e(r_,bq),e(bq,u1o),e(r_,b1o),e(x,v1o),e(x,t_),e(t_,ole),e(ole,F1o),e(t_,T1o),e(t_,vq),e(vq,M1o),e(t_,E1o),e(x,C1o),e(x,a_),e(a_,rle),e(rle,w1o),e(a_,A1o),e(a_,Fq),e(Fq,y1o),e(a_,L1o),e(x,x1o),e(x,n_),e(n_,tle),e(tle,$1o),e(n_,k1o),e(n_,Tq),e(Tq,S1o),e(n_,R1o),e(x,B1o),e(x,s_),e(s_,ale),e(ale,P1o),e(s_,I1o),e(s_,Mq),e(Mq,q1o),e(s_,N1o),e(x,j1o),e(x,l_),e(l_,nle),e(nle,D1o),e(l_,G1o),e(l_,Eq),e(Eq,O1o),e(l_,V1o),e(x,X1o),e(x,i_),e(i_,sle),e(sle,z1o),e(i_,W1o),e(i_,Cq),e(Cq,Q1o),e(i_,H1o),e(x,U1o),e(x,d_),e(d_,lle),e(lle,J1o),e(d_,Y1o),e(d_,wq),e(wq,K1o),e(d_,Z1o),e(x,ebo),e(x,c_),e(c_,ile),e(ile,obo),e(c_,rbo),e(c_,Aq),e(Aq,tbo),e(c_,abo),e(x,nbo),e(x,f_),e(f_,dle),e(dle,sbo),e(f_,lbo),e(f_,yq),e(yq,ibo),e(f_,dbo),e(x,cbo),e(x,m_),e(m_,cle),e(cle,fbo),e(m_,mbo),e(m_,Lq),e(Lq,gbo),e(m_,hbo),e(x,pbo),e(x,g_),e(g_,fle),e(fle,_bo),e(g_,ubo),e(g_,xq),e(xq,bbo),e(g_,vbo),e(x,Fbo),e(x,h_),e(h_,mle),e(mle,Tbo),e(h_,Mbo),e(h_,$q),e($q,Ebo),e(h_,Cbo),e(x,wbo),e(x,p_),e(p_,gle),e(gle,Abo),e(p_,ybo),e(p_,kq),e(kq,Lbo),e(p_,xbo),e(x,$bo),e(x,__),e(__,hle),e(hle,kbo),e(__,Sbo),e(__,Sq),e(Sq,Rbo),e(__,Bbo),e(x,Pbo),e(x,u_),e(u_,ple),e(ple,Ibo),e(u_,qbo),e(u_,Rq),e(Rq,Nbo),e(u_,jbo),e(x,Dbo),e(x,b_),e(b_,_le),e(_le,Gbo),e(b_,Obo),e(b_,Bq),e(Bq,Vbo),e(b_,Xbo),e(x,zbo),e(x,v_),e(v_,ule),e(ule,Wbo),e(v_,Qbo),e(v_,Pq),e(Pq,Hbo),e(v_,Ubo),e(x,Jbo),e(x,F_),e(F_,ble),e(ble,Ybo),e(F_,Kbo),e(F_,Iq),e(Iq,Zbo),e(F_,evo),e(x,ovo),e(x,T_),e(T_,vle),e(vle,rvo),e(T_,tvo),e(T_,qq),e(qq,avo),e(T_,nvo),e(x,svo),e(x,M_),e(M_,Fle),e(Fle,lvo),e(M_,ivo),e(M_,Nq),e(Nq,dvo),e(M_,cvo),e(x,fvo),e(x,E_),e(E_,Tle),e(Tle,mvo),e(E_,gvo),e(E_,jq),e(jq,hvo),e(E_,pvo),e(x,_vo),e(x,C_),e(C_,Mle),e(Mle,uvo),e(C_,bvo),e(C_,Dq),e(Dq,vvo),e(C_,Fvo),e(x,Tvo),e(x,w_),e(w_,Ele),e(Ele,Mvo),e(w_,Evo),e(w_,Gq),e(Gq,Cvo),e(w_,wvo),e(x,Avo),e(x,A_),e(A_,Cle),e(Cle,yvo),e(A_,Lvo),e(A_,Oq),e(Oq,xvo),e(A_,$vo),e(x,kvo),e(x,y_),e(y_,wle),e(wle,Svo),e(y_,Rvo),e(y_,Vq),e(Vq,Bvo),e(y_,Pvo),e(x,Ivo),e(x,L_),e(L_,Ale),e(Ale,qvo),e(L_,Nvo),e(L_,Xq),e(Xq,jvo),e(L_,Dvo),e(x,Gvo),e(x,x_),e(x_,yle),e(yle,Ovo),e(x_,Vvo),e(x_,zq),e(zq,Xvo),e(x_,zvo),e(x,Wvo),e(x,$_),e($_,Lle),e(Lle,Qvo),e($_,Hvo),e($_,Wq),e(Wq,Uvo),e($_,Jvo),e(x,Yvo),e(x,k_),e(k_,xle),e(xle,Kvo),e(k_,Zvo),e(k_,Qq),e(Qq,eFo),e(k_,oFo),e(x,rFo),e(x,S_),e(S_,$le),e($le,tFo),e(S_,aFo),e(S_,Hq),e(Hq,nFo),e(S_,sFo),e(x,lFo),e(x,R_),e(R_,kle),e(kle,iFo),e(R_,dFo),e(R_,Uq),e(Uq,cFo),e(R_,fFo),e(x,mFo),e(x,B_),e(B_,Sle),e(Sle,gFo),e(B_,hFo),e(B_,Jq),e(Jq,pFo),e(B_,_Fo),e(x,uFo),e(x,P_),e(P_,Rle),e(Rle,bFo),e(P_,vFo),e(P_,Yq),e(Yq,FFo),e(P_,TFo),e(x,MFo),e(x,I_),e(I_,Ble),e(Ble,EFo),e(I_,CFo),e(I_,Kq),e(Kq,wFo),e(I_,AFo),e(x,yFo),e(x,q_),e(q_,Ple),e(Ple,LFo),e(q_,xFo),e(q_,Zq),e(Zq,$Fo),e(q_,kFo),e(x,SFo),e(x,N_),e(N_,Ile),e(Ile,RFo),e(N_,BFo),e(N_,eN),e(eN,PFo),e(N_,IFo),e(x,qFo),e(x,j_),e(j_,qle),e(qle,NFo),e(j_,jFo),e(j_,oN),e(oN,DFo),e(j_,GFo),e(x,OFo),e(x,D_),e(D_,Nle),e(Nle,VFo),e(D_,XFo),e(D_,rN),e(rN,zFo),e(D_,WFo),e(x,QFo),e(x,G_),e(G_,jle),e(jle,HFo),e(G_,UFo),e(G_,tN),e(tN,JFo),e(G_,YFo),e(x,KFo),e(x,O_),e(O_,Dle),e(Dle,ZFo),e(O_,e0o),e(O_,aN),e(aN,o0o),e(O_,r0o),e(x,t0o),e(x,V_),e(V_,Gle),e(Gle,a0o),e(V_,n0o),e(V_,nN),e(nN,s0o),e(V_,l0o),e(x,i0o),e(x,X_),e(X_,Ole),e(Ole,d0o),e(X_,c0o),e(X_,sN),e(sN,f0o),e(X_,m0o),e(x,g0o),e(x,z_),e(z_,Vle),e(Vle,h0o),e(z_,p0o),e(z_,lN),e(lN,_0o),e(z_,u0o),e(x,b0o),e(x,W_),e(W_,Xle),e(Xle,v0o),e(W_,F0o),e(W_,iN),e(iN,T0o),e(W_,M0o),e(x,E0o),e(x,Q_),e(Q_,zle),e(zle,C0o),e(Q_,w0o),e(Q_,dN),e(dN,A0o),e(Q_,y0o),e(x,L0o),e(x,H_),e(H_,Wle),e(Wle,x0o),e(H_,$0o),e(H_,cN),e(cN,k0o),e(H_,S0o),e(Je,R0o),e(Je,U_),e(U_,B0o),e(U_,Qle),e(Qle,P0o),e(U_,I0o),e(U_,Hle),e(Hle,q0o),e(Je,N0o),M(J_,Je,null),b(f,Bqe,u),b(f,yi,u),e(yi,Y_),e(Y_,Ule),M(JA,Ule,null),e(yi,j0o),e(yi,Jle),e(Jle,D0o),b(f,Pqe,u),b(f,xo,u),M(YA,xo,null),e(xo,G0o),e(xo,Li),e(Li,O0o),e(Li,fN),e(fN,V0o),e(Li,X0o),e(Li,mN),e(mN,z0o),e(Li,W0o),e(xo,Q0o),e(xo,KA),e(KA,H0o),e(KA,Yle),e(Yle,U0o),e(KA,J0o),e(xo,Y0o),e(xo,at),M(ZA,at,null),e(at,K0o),e(at,Kle),e(Kle,Z0o),e(at,eTo),e(at,xi),e(xi,oTo),e(xi,Zle),e(Zle,rTo),e(xi,tTo),e(xi,gN),e(gN,aTo),e(xi,nTo),e(at,sTo),M(K_,at,null),e(xo,lTo),e(xo,Ye),M(ey,Ye,null),e(Ye,iTo),e(Ye,eie),e(eie,dTo),e(Ye,cTo),e(Ye,xa),e(xa,fTo),e(xa,oie),e(oie,mTo),e(xa,gTo),e(xa,rie),e(rie,hTo),e(xa,pTo),e(xa,tie),e(tie,_To),e(xa,uTo),e(Ye,bTo),e(Ye,G),e(G,Z_),e(Z_,aie),e(aie,vTo),e(Z_,FTo),e(Z_,hN),e(hN,TTo),e(Z_,MTo),e(G,ETo),e(G,eu),e(eu,nie),e(nie,CTo),e(eu,wTo),e(eu,pN),e(pN,ATo),e(eu,yTo),e(G,LTo),e(G,ou),e(ou,sie),e(sie,xTo),e(ou,$To),e(ou,_N),e(_N,kTo),e(ou,STo),e(G,RTo),e(G,ru),e(ru,lie),e(lie,BTo),e(ru,PTo),e(ru,uN),e(uN,ITo),e(ru,qTo),e(G,NTo),e(G,tu),e(tu,iie),e(iie,jTo),e(tu,DTo),e(tu,bN),e(bN,GTo),e(tu,OTo),e(G,VTo),e(G,au),e(au,die),e(die,XTo),e(au,zTo),e(au,vN),e(vN,WTo),e(au,QTo),e(G,HTo),e(G,nu),e(nu,cie),e(cie,UTo),e(nu,JTo),e(nu,FN),e(FN,YTo),e(nu,KTo),e(G,ZTo),e(G,su),e(su,fie),e(fie,e7o),e(su,o7o),e(su,TN),e(TN,r7o),e(su,t7o),e(G,a7o),e(G,lu),e(lu,mie),e(mie,n7o),e(lu,s7o),e(lu,MN),e(MN,l7o),e(lu,i7o),e(G,d7o),e(G,iu),e(iu,gie),e(gie,c7o),e(iu,f7o),e(iu,EN),e(EN,m7o),e(iu,g7o),e(G,h7o),e(G,du),e(du,hie),e(hie,p7o),e(du,_7o),e(du,CN),e(CN,u7o),e(du,b7o),e(G,v7o),e(G,cu),e(cu,pie),e(pie,F7o),e(cu,T7o),e(cu,wN),e(wN,M7o),e(cu,E7o),e(G,C7o),e(G,fu),e(fu,_ie),e(_ie,w7o),e(fu,A7o),e(fu,AN),e(AN,y7o),e(fu,L7o),e(G,x7o),e(G,mu),e(mu,uie),e(uie,$7o),e(mu,k7o),e(mu,yN),e(yN,S7o),e(mu,R7o),e(G,B7o),e(G,gu),e(gu,bie),e(bie,P7o),e(gu,I7o),e(gu,LN),e(LN,q7o),e(gu,N7o),e(G,j7o),e(G,hu),e(hu,vie),e(vie,D7o),e(hu,G7o),e(hu,xN),e(xN,O7o),e(hu,V7o),e(G,X7o),e(G,pu),e(pu,Fie),e(Fie,z7o),e(pu,W7o),e(pu,$N),e($N,Q7o),e(pu,H7o),e(G,U7o),e(G,_u),e(_u,Tie),e(Tie,J7o),e(_u,Y7o),e(_u,kN),e(kN,K7o),e(_u,Z7o),e(G,eMo),e(G,uu),e(uu,Mie),e(Mie,oMo),e(uu,rMo),e(uu,SN),e(SN,tMo),e(uu,aMo),e(G,nMo),e(G,bu),e(bu,Eie),e(Eie,sMo),e(bu,lMo),e(bu,RN),e(RN,iMo),e(bu,dMo),e(G,cMo),e(G,vu),e(vu,Cie),e(Cie,fMo),e(vu,mMo),e(vu,BN),e(BN,gMo),e(vu,hMo),e(G,pMo),e(G,Fu),e(Fu,wie),e(wie,_Mo),e(Fu,uMo),e(Fu,PN),e(PN,bMo),e(Fu,vMo),e(G,FMo),e(G,Tu),e(Tu,Aie),e(Aie,TMo),e(Tu,MMo),e(Tu,IN),e(IN,EMo),e(Tu,CMo),e(G,wMo),e(G,Mu),e(Mu,yie),e(yie,AMo),e(Mu,yMo),e(Mu,qN),e(qN,LMo),e(Mu,xMo),e(G,$Mo),e(G,Eu),e(Eu,Lie),e(Lie,kMo),e(Eu,SMo),e(Eu,NN),e(NN,RMo),e(Eu,BMo),e(G,PMo),e(G,Cu),e(Cu,xie),e(xie,IMo),e(Cu,qMo),e(Cu,jN),e(jN,NMo),e(Cu,jMo),e(G,DMo),e(G,wu),e(wu,$ie),e($ie,GMo),e(wu,OMo),e(wu,DN),e(DN,VMo),e(wu,XMo),e(G,zMo),e(G,Au),e(Au,kie),e(kie,WMo),e(Au,QMo),e(Au,GN),e(GN,HMo),e(Au,UMo),e(G,JMo),e(G,yu),e(yu,Sie),e(Sie,YMo),e(yu,KMo),e(yu,ON),e(ON,ZMo),e(yu,e4o),e(G,o4o),e(G,Lu),e(Lu,Rie),e(Rie,r4o),e(Lu,t4o),e(Lu,VN),e(VN,a4o),e(Lu,n4o),e(G,s4o),e(G,xu),e(xu,Bie),e(Bie,l4o),e(xu,i4o),e(xu,XN),e(XN,d4o),e(xu,c4o),e(G,f4o),e(G,$u),e($u,Pie),e(Pie,m4o),e($u,g4o),e($u,zN),e(zN,h4o),e($u,p4o),e(G,_4o),e(G,ku),e(ku,Iie),e(Iie,u4o),e(ku,b4o),e(ku,WN),e(WN,v4o),e(ku,F4o),e(G,T4o),e(G,Su),e(Su,qie),e(qie,M4o),e(Su,E4o),e(Su,QN),e(QN,C4o),e(Su,w4o),e(G,A4o),e(G,Ru),e(Ru,Nie),e(Nie,y4o),e(Ru,L4o),e(Ru,HN),e(HN,x4o),e(Ru,$4o),e(G,k4o),e(G,Bu),e(Bu,jie),e(jie,S4o),e(Bu,R4o),e(Bu,UN),e(UN,B4o),e(Bu,P4o),e(G,I4o),e(G,Pu),e(Pu,Die),e(Die,q4o),e(Pu,N4o),e(Pu,JN),e(JN,j4o),e(Pu,D4o),e(G,G4o),e(G,Iu),e(Iu,Gie),e(Gie,O4o),e(Iu,V4o),e(Iu,YN),e(YN,X4o),e(Iu,z4o),e(G,W4o),e(G,qu),e(qu,Oie),e(Oie,Q4o),e(qu,H4o),e(qu,KN),e(KN,U4o),e(qu,J4o),e(G,Y4o),e(G,Nu),e(Nu,Vie),e(Vie,K4o),e(Nu,Z4o),e(Nu,ZN),e(ZN,eEo),e(Nu,oEo),e(G,rEo),e(G,ju),e(ju,Xie),e(Xie,tEo),e(ju,aEo),e(ju,ej),e(ej,nEo),e(ju,sEo),e(G,lEo),e(G,Du),e(Du,zie),e(zie,iEo),e(Du,dEo),e(Du,oj),e(oj,cEo),e(Du,fEo),e(G,mEo),e(G,Gu),e(Gu,Wie),e(Wie,gEo),e(Gu,hEo),e(Gu,rj),e(rj,pEo),e(Gu,_Eo),e(Ye,uEo),e(Ye,Ou),e(Ou,bEo),e(Ou,Qie),e(Qie,vEo),e(Ou,FEo),e(Ou,Hie),e(Hie,TEo),e(Ye,MEo),M(Vu,Ye,null),b(f,Iqe,u),b(f,$i,u),e($i,Xu),e(Xu,Uie),M(oy,Uie,null),e($i,EEo),e($i,Jie),e(Jie,CEo),b(f,qqe,u),b(f,$o,u),M(ry,$o,null),e($o,wEo),e($o,ki),e(ki,AEo),e(ki,tj),e(tj,yEo),e(ki,LEo),e(ki,aj),e(aj,xEo),e(ki,$Eo),e($o,kEo),e($o,ty),e(ty,SEo),e(ty,Yie),e(Yie,REo),e(ty,BEo),e($o,PEo),e($o,nt),M(ay,nt,null),e(nt,IEo),e(nt,Kie),e(Kie,qEo),e(nt,NEo),e(nt,Si),e(Si,jEo),e(Si,Zie),e(Zie,DEo),e(Si,GEo),e(Si,nj),e(nj,OEo),e(Si,VEo),e(nt,XEo),M(zu,nt,null),e($o,zEo),e($o,Ke),M(ny,Ke,null),e(Ke,WEo),e(Ke,ede),e(ede,QEo),e(Ke,HEo),e(Ke,$a),e($a,UEo),e($a,ode),e(ode,JEo),e($a,YEo),e($a,rde),e(rde,KEo),e($a,ZEo),e($a,tde),e(tde,eCo),e($a,oCo),e(Ke,rCo),e(Ke,z),e(z,Wu),e(Wu,ade),e(ade,tCo),e(Wu,aCo),e(Wu,sj),e(sj,nCo),e(Wu,sCo),e(z,lCo),e(z,Qu),e(Qu,nde),e(nde,iCo),e(Qu,dCo),e(Qu,lj),e(lj,cCo),e(Qu,fCo),e(z,mCo),e(z,Hu),e(Hu,sde),e(sde,gCo),e(Hu,hCo),e(Hu,ij),e(ij,pCo),e(Hu,_Co),e(z,uCo),e(z,Uu),e(Uu,lde),e(lde,bCo),e(Uu,vCo),e(Uu,dj),e(dj,FCo),e(Uu,TCo),e(z,MCo),e(z,Ju),e(Ju,ide),e(ide,ECo),e(Ju,CCo),e(Ju,cj),e(cj,wCo),e(Ju,ACo),e(z,yCo),e(z,Yu),e(Yu,dde),e(dde,LCo),e(Yu,xCo),e(Yu,fj),e(fj,$Co),e(Yu,kCo),e(z,SCo),e(z,Ku),e(Ku,cde),e(cde,RCo),e(Ku,BCo),e(Ku,mj),e(mj,PCo),e(Ku,ICo),e(z,qCo),e(z,Zu),e(Zu,fde),e(fde,NCo),e(Zu,jCo),e(Zu,gj),e(gj,DCo),e(Zu,GCo),e(z,OCo),e(z,e2),e(e2,mde),e(mde,VCo),e(e2,XCo),e(e2,hj),e(hj,zCo),e(e2,WCo),e(z,QCo),e(z,o2),e(o2,gde),e(gde,HCo),e(o2,UCo),e(o2,pj),e(pj,JCo),e(o2,YCo),e(z,KCo),e(z,r2),e(r2,hde),e(hde,ZCo),e(r2,e5o),e(r2,_j),e(_j,o5o),e(r2,r5o),e(z,t5o),e(z,t2),e(t2,pde),e(pde,a5o),e(t2,n5o),e(t2,uj),e(uj,s5o),e(t2,l5o),e(z,i5o),e(z,a2),e(a2,_de),e(_de,d5o),e(a2,c5o),e(a2,bj),e(bj,f5o),e(a2,m5o),e(z,g5o),e(z,n2),e(n2,ude),e(ude,h5o),e(n2,p5o),e(n2,vj),e(vj,_5o),e(n2,u5o),e(z,b5o),e(z,s2),e(s2,bde),e(bde,v5o),e(s2,F5o),e(s2,Fj),e(Fj,T5o),e(s2,M5o),e(z,E5o),e(z,l2),e(l2,vde),e(vde,C5o),e(l2,w5o),e(l2,Tj),e(Tj,A5o),e(l2,y5o),e(z,L5o),e(z,i2),e(i2,Fde),e(Fde,x5o),e(i2,$5o),e(i2,Mj),e(Mj,k5o),e(i2,S5o),e(z,R5o),e(z,d2),e(d2,Tde),e(Tde,B5o),e(d2,P5o),e(d2,Ej),e(Ej,I5o),e(d2,q5o),e(z,N5o),e(z,c2),e(c2,Mde),e(Mde,j5o),e(c2,D5o),e(c2,Cj),e(Cj,G5o),e(c2,O5o),e(z,V5o),e(z,f2),e(f2,Ede),e(Ede,X5o),e(f2,z5o),e(f2,wj),e(wj,W5o),e(f2,Q5o),e(z,H5o),e(z,m2),e(m2,Cde),e(Cde,U5o),e(m2,J5o),e(m2,Aj),e(Aj,Y5o),e(m2,K5o),e(z,Z5o),e(z,g2),e(g2,wde),e(wde,e3o),e(g2,o3o),e(g2,yj),e(yj,r3o),e(g2,t3o),e(z,a3o),e(z,h2),e(h2,Ade),e(Ade,n3o),e(h2,s3o),e(h2,Lj),e(Lj,l3o),e(h2,i3o),e(z,d3o),e(z,p2),e(p2,yde),e(yde,c3o),e(p2,f3o),e(p2,xj),e(xj,m3o),e(p2,g3o),e(z,h3o),e(z,_2),e(_2,Lde),e(Lde,p3o),e(_2,_3o),e(_2,$j),e($j,u3o),e(_2,b3o),e(z,v3o),e(z,u2),e(u2,xde),e(xde,F3o),e(u2,T3o),e(u2,kj),e(kj,M3o),e(u2,E3o),e(z,C3o),e(z,b2),e(b2,$de),e($de,w3o),e(b2,A3o),e(b2,Sj),e(Sj,y3o),e(b2,L3o),e(z,x3o),e(z,v2),e(v2,kde),e(kde,$3o),e(v2,k3o),e(v2,Rj),e(Rj,S3o),e(v2,R3o),e(z,B3o),e(z,F2),e(F2,Sde),e(Sde,P3o),e(F2,I3o),e(F2,Bj),e(Bj,q3o),e(F2,N3o),e(z,j3o),e(z,T2),e(T2,Rde),e(Rde,D3o),e(T2,G3o),e(T2,Pj),e(Pj,O3o),e(T2,V3o),e(z,X3o),e(z,M2),e(M2,Bde),e(Bde,z3o),e(M2,W3o),e(M2,Ij),e(Ij,Q3o),e(M2,H3o),e(z,U3o),e(z,E2),e(E2,Pde),e(Pde,J3o),e(E2,Y3o),e(E2,qj),e(qj,K3o),e(E2,Z3o),e(z,ewo),e(z,C2),e(C2,Ide),e(Ide,owo),e(C2,rwo),e(C2,Nj),e(Nj,two),e(C2,awo),e(z,nwo),e(z,w2),e(w2,qde),e(qde,swo),e(w2,lwo),e(w2,jj),e(jj,iwo),e(w2,dwo),e(z,cwo),e(z,A2),e(A2,Nde),e(Nde,fwo),e(A2,mwo),e(A2,Dj),e(Dj,gwo),e(A2,hwo),e(z,pwo),e(z,y2),e(y2,jde),e(jde,_wo),e(y2,uwo),e(y2,Gj),e(Gj,bwo),e(y2,vwo),e(z,Fwo),e(z,L2),e(L2,Dde),e(Dde,Two),e(L2,Mwo),e(L2,Oj),e(Oj,Ewo),e(L2,Cwo),e(Ke,wwo),e(Ke,x2),e(x2,Awo),e(x2,Gde),e(Gde,ywo),e(x2,Lwo),e(x2,Ode),e(Ode,xwo),e(Ke,$wo),M($2,Ke,null),b(f,Nqe,u),b(f,Ri,u),e(Ri,k2),e(k2,Vde),M(sy,Vde,null),e(Ri,kwo),e(Ri,Xde),e(Xde,Swo),b(f,jqe,u),b(f,ko,u),M(ly,ko,null),e(ko,Rwo),e(ko,Bi),e(Bi,Bwo),e(Bi,Vj),e(Vj,Pwo),e(Bi,Iwo),e(Bi,Xj),e(Xj,qwo),e(Bi,Nwo),e(ko,jwo),e(ko,iy),e(iy,Dwo),e(iy,zde),e(zde,Gwo),e(iy,Owo),e(ko,Vwo),e(ko,st),M(dy,st,null),e(st,Xwo),e(st,Wde),e(Wde,zwo),e(st,Wwo),e(st,Pi),e(Pi,Qwo),e(Pi,Qde),e(Qde,Hwo),e(Pi,Uwo),e(Pi,zj),e(zj,Jwo),e(Pi,Ywo),e(st,Kwo),M(S2,st,null),e(ko,Zwo),e(ko,Ze),M(cy,Ze,null),e(Ze,e6o),e(Ze,Hde),e(Hde,o6o),e(Ze,r6o),e(Ze,ka),e(ka,t6o),e(ka,Ude),e(Ude,a6o),e(ka,n6o),e(ka,Jde),e(Jde,s6o),e(ka,l6o),e(ka,Yde),e(Yde,i6o),e(ka,d6o),e(Ze,c6o),e(Ze,Q),e(Q,R2),e(R2,Kde),e(Kde,f6o),e(R2,m6o),e(R2,Wj),e(Wj,g6o),e(R2,h6o),e(Q,p6o),e(Q,B2),e(B2,Zde),e(Zde,_6o),e(B2,u6o),e(B2,Qj),e(Qj,b6o),e(B2,v6o),e(Q,F6o),e(Q,P2),e(P2,ece),e(ece,T6o),e(P2,M6o),e(P2,Hj),e(Hj,E6o),e(P2,C6o),e(Q,w6o),e(Q,I2),e(I2,oce),e(oce,A6o),e(I2,y6o),e(I2,Uj),e(Uj,L6o),e(I2,x6o),e(Q,$6o),e(Q,q2),e(q2,rce),e(rce,k6o),e(q2,S6o),e(q2,Jj),e(Jj,R6o),e(q2,B6o),e(Q,P6o),e(Q,N2),e(N2,tce),e(tce,I6o),e(N2,q6o),e(N2,Yj),e(Yj,N6o),e(N2,j6o),e(Q,D6o),e(Q,j2),e(j2,ace),e(ace,G6o),e(j2,O6o),e(j2,Kj),e(Kj,V6o),e(j2,X6o),e(Q,z6o),e(Q,D2),e(D2,nce),e(nce,W6o),e(D2,Q6o),e(D2,Zj),e(Zj,H6o),e(D2,U6o),e(Q,J6o),e(Q,G2),e(G2,sce),e(sce,Y6o),e(G2,K6o),e(G2,eD),e(eD,Z6o),e(G2,eAo),e(Q,oAo),e(Q,O2),e(O2,lce),e(lce,rAo),e(O2,tAo),e(O2,oD),e(oD,aAo),e(O2,nAo),e(Q,sAo),e(Q,V2),e(V2,ice),e(ice,lAo),e(V2,iAo),e(V2,rD),e(rD,dAo),e(V2,cAo),e(Q,fAo),e(Q,X2),e(X2,dce),e(dce,mAo),e(X2,gAo),e(X2,tD),e(tD,hAo),e(X2,pAo),e(Q,_Ao),e(Q,z2),e(z2,cce),e(cce,uAo),e(z2,bAo),e(z2,aD),e(aD,vAo),e(z2,FAo),e(Q,TAo),e(Q,W2),e(W2,fce),e(fce,MAo),e(W2,EAo),e(W2,nD),e(nD,CAo),e(W2,wAo),e(Q,AAo),e(Q,Q2),e(Q2,mce),e(mce,yAo),e(Q2,LAo),e(Q2,sD),e(sD,xAo),e(Q2,$Ao),e(Q,kAo),e(Q,H2),e(H2,gce),e(gce,SAo),e(H2,RAo),e(H2,lD),e(lD,BAo),e(H2,PAo),e(Q,IAo),e(Q,U2),e(U2,hce),e(hce,qAo),e(U2,NAo),e(U2,iD),e(iD,jAo),e(U2,DAo),e(Q,GAo),e(Q,J2),e(J2,pce),e(pce,OAo),e(J2,VAo),e(J2,dD),e(dD,XAo),e(J2,zAo),e(Q,WAo),e(Q,Y2),e(Y2,_ce),e(_ce,QAo),e(Y2,HAo),e(Y2,cD),e(cD,UAo),e(Y2,JAo),e(Q,YAo),e(Q,K2),e(K2,uce),e(uce,KAo),e(K2,ZAo),e(K2,fD),e(fD,eyo),e(K2,oyo),e(Q,ryo),e(Q,Z2),e(Z2,bce),e(bce,tyo),e(Z2,ayo),e(Z2,mD),e(mD,nyo),e(Z2,syo),e(Q,lyo),e(Q,e1),e(e1,vce),e(vce,iyo),e(e1,dyo),e(e1,gD),e(gD,cyo),e(e1,fyo),e(Q,myo),e(Q,o1),e(o1,Fce),e(Fce,gyo),e(o1,hyo),e(o1,hD),e(hD,pyo),e(o1,_yo),e(Q,uyo),e(Q,r1),e(r1,Tce),e(Tce,byo),e(r1,vyo),e(r1,pD),e(pD,Fyo),e(r1,Tyo),e(Q,Myo),e(Q,t1),e(t1,Mce),e(Mce,Eyo),e(t1,Cyo),e(t1,_D),e(_D,wyo),e(t1,Ayo),e(Q,yyo),e(Q,a1),e(a1,Ece),e(Ece,Lyo),e(a1,xyo),e(a1,uD),e(uD,$yo),e(a1,kyo),e(Q,Syo),e(Q,n1),e(n1,Cce),e(Cce,Ryo),e(n1,Byo),e(n1,bD),e(bD,Pyo),e(n1,Iyo),e(Q,qyo),e(Q,s1),e(s1,wce),e(wce,Nyo),e(s1,jyo),e(s1,vD),e(vD,Dyo),e(s1,Gyo),e(Q,Oyo),e(Q,l1),e(l1,Ace),e(Ace,Vyo),e(l1,Xyo),e(l1,FD),e(FD,zyo),e(l1,Wyo),e(Q,Qyo),e(Q,i1),e(i1,yce),e(yce,Hyo),e(i1,Uyo),e(i1,TD),e(TD,Jyo),e(i1,Yyo),e(Q,Kyo),e(Q,d1),e(d1,Lce),e(Lce,Zyo),e(d1,eLo),e(d1,xce),e(xce,oLo),e(d1,rLo),e(Q,tLo),e(Q,c1),e(c1,$ce),e($ce,aLo),e(c1,nLo),e(c1,MD),e(MD,sLo),e(c1,lLo),e(Q,iLo),e(Q,f1),e(f1,kce),e(kce,dLo),e(f1,cLo),e(f1,ED),e(ED,fLo),e(f1,mLo),e(Q,gLo),e(Q,m1),e(m1,Sce),e(Sce,hLo),e(m1,pLo),e(m1,CD),e(CD,_Lo),e(m1,uLo),e(Q,bLo),e(Q,g1),e(g1,Rce),e(Rce,vLo),e(g1,FLo),e(g1,wD),e(wD,TLo),e(g1,MLo),e(Ze,ELo),e(Ze,h1),e(h1,CLo),e(h1,Bce),e(Bce,wLo),e(h1,ALo),e(h1,Pce),e(Pce,yLo),e(Ze,LLo),M(p1,Ze,null),b(f,Dqe,u),b(f,Ii,u),e(Ii,_1),e(_1,Ice),M(fy,Ice,null),e(Ii,xLo),e(Ii,qce),e(qce,$Lo),b(f,Gqe,u),b(f,So,u),M(my,So,null),e(So,kLo),e(So,qi),e(qi,SLo),e(qi,AD),e(AD,RLo),e(qi,BLo),e(qi,yD),e(yD,PLo),e(qi,ILo),e(So,qLo),e(So,gy),e(gy,NLo),e(gy,Nce),e(Nce,jLo),e(gy,DLo),e(So,GLo),e(So,lt),M(hy,lt,null),e(lt,OLo),e(lt,jce),e(jce,VLo),e(lt,XLo),e(lt,Ni),e(Ni,zLo),e(Ni,Dce),e(Dce,WLo),e(Ni,QLo),e(Ni,LD),e(LD,HLo),e(Ni,ULo),e(lt,JLo),M(u1,lt,null),e(So,YLo),e(So,eo),M(py,eo,null),e(eo,KLo),e(eo,Gce),e(Gce,ZLo),e(eo,e8o),e(eo,Sa),e(Sa,o8o),e(Sa,Oce),e(Oce,r8o),e(Sa,t8o),e(Sa,Vce),e(Vce,a8o),e(Sa,n8o),e(Sa,Xce),e(Xce,s8o),e(Sa,l8o),e(eo,i8o),e(eo,_e),e(_e,b1),e(b1,zce),e(zce,d8o),e(b1,c8o),e(b1,xD),e(xD,f8o),e(b1,m8o),e(_e,g8o),e(_e,v1),e(v1,Wce),e(Wce,h8o),e(v1,p8o),e(v1,$D),e($D,_8o),e(v1,u8o),e(_e,b8o),e(_e,F1),e(F1,Qce),e(Qce,v8o),e(F1,F8o),e(F1,kD),e(kD,T8o),e(F1,M8o),e(_e,E8o),e(_e,T1),e(T1,Hce),e(Hce,C8o),e(T1,w8o),e(T1,SD),e(SD,A8o),e(T1,y8o),e(_e,L8o),e(_e,M1),e(M1,Uce),e(Uce,x8o),e(M1,$8o),e(M1,RD),e(RD,k8o),e(M1,S8o),e(_e,R8o),e(_e,E1),e(E1,Jce),e(Jce,B8o),e(E1,P8o),e(E1,BD),e(BD,I8o),e(E1,q8o),e(_e,N8o),e(_e,C1),e(C1,Yce),e(Yce,j8o),e(C1,D8o),e(C1,PD),e(PD,G8o),e(C1,O8o),e(_e,V8o),e(_e,w1),e(w1,Kce),e(Kce,X8o),e(w1,z8o),e(w1,ID),e(ID,W8o),e(w1,Q8o),e(_e,H8o),e(_e,A1),e(A1,Zce),e(Zce,U8o),e(A1,J8o),e(A1,qD),e(qD,Y8o),e(A1,K8o),e(_e,Z8o),e(_e,y1),e(y1,efe),e(efe,e9o),e(y1,o9o),e(y1,ND),e(ND,r9o),e(y1,t9o),e(_e,a9o),e(_e,L1),e(L1,ofe),e(ofe,n9o),e(L1,s9o),e(L1,jD),e(jD,l9o),e(L1,i9o),e(_e,d9o),e(_e,x1),e(x1,rfe),e(rfe,c9o),e(x1,f9o),e(x1,DD),e(DD,m9o),e(x1,g9o),e(_e,h9o),e(_e,$1),e($1,tfe),e(tfe,p9o),e($1,_9o),e($1,GD),e(GD,u9o),e($1,b9o),e(_e,v9o),e(_e,k1),e(k1,afe),e(afe,F9o),e(k1,T9o),e(k1,OD),e(OD,M9o),e(k1,E9o),e(_e,C9o),e(_e,S1),e(S1,nfe),e(nfe,w9o),e(S1,A9o),e(S1,VD),e(VD,y9o),e(S1,L9o),e(_e,x9o),e(_e,R1),e(R1,sfe),e(sfe,$9o),e(R1,k9o),e(R1,XD),e(XD,S9o),e(R1,R9o),e(eo,B9o),e(eo,B1),e(B1,P9o),e(B1,lfe),e(lfe,I9o),e(B1,q9o),e(B1,ife),e(ife,N9o),e(eo,j9o),M(P1,eo,null),b(f,Oqe,u),b(f,ji,u),e(ji,I1),e(I1,dfe),M(_y,dfe,null),e(ji,D9o),e(ji,cfe),e(cfe,G9o),b(f,Vqe,u),b(f,Ro,u),M(uy,Ro,null),e(Ro,O9o),e(Ro,Di),e(Di,V9o),e(Di,zD),e(zD,X9o),e(Di,z9o),e(Di,WD),e(WD,W9o),e(Di,Q9o),e(Ro,H9o),e(Ro,by),e(by,U9o),e(by,ffe),e(ffe,J9o),e(by,Y9o),e(Ro,K9o),e(Ro,it),M(vy,it,null),e(it,Z9o),e(it,mfe),e(mfe,exo),e(it,oxo),e(it,Gi),e(Gi,rxo),e(Gi,gfe),e(gfe,txo),e(Gi,axo),e(Gi,QD),e(QD,nxo),e(Gi,sxo),e(it,lxo),M(q1,it,null),e(Ro,ixo),e(Ro,oo),M(Fy,oo,null),e(oo,dxo),e(oo,hfe),e(hfe,cxo),e(oo,fxo),e(oo,Ra),e(Ra,mxo),e(Ra,pfe),e(pfe,gxo),e(Ra,hxo),e(Ra,_fe),e(_fe,pxo),e(Ra,_xo),e(Ra,ufe),e(ufe,uxo),e(Ra,bxo),e(oo,vxo),e(oo,q),e(q,N1),e(N1,bfe),e(bfe,Fxo),e(N1,Txo),e(N1,HD),e(HD,Mxo),e(N1,Exo),e(q,Cxo),e(q,j1),e(j1,vfe),e(vfe,wxo),e(j1,Axo),e(j1,UD),e(UD,yxo),e(j1,Lxo),e(q,xxo),e(q,D1),e(D1,Ffe),e(Ffe,$xo),e(D1,kxo),e(D1,JD),e(JD,Sxo),e(D1,Rxo),e(q,Bxo),e(q,G1),e(G1,Tfe),e(Tfe,Pxo),e(G1,Ixo),e(G1,YD),e(YD,qxo),e(G1,Nxo),e(q,jxo),e(q,O1),e(O1,Mfe),e(Mfe,Dxo),e(O1,Gxo),e(O1,KD),e(KD,Oxo),e(O1,Vxo),e(q,Xxo),e(q,V1),e(V1,Efe),e(Efe,zxo),e(V1,Wxo),e(V1,ZD),e(ZD,Qxo),e(V1,Hxo),e(q,Uxo),e(q,X1),e(X1,Cfe),e(Cfe,Jxo),e(X1,Yxo),e(X1,eG),e(eG,Kxo),e(X1,Zxo),e(q,e$o),e(q,z1),e(z1,wfe),e(wfe,o$o),e(z1,r$o),e(z1,oG),e(oG,t$o),e(z1,a$o),e(q,n$o),e(q,W1),e(W1,Afe),e(Afe,s$o),e(W1,l$o),e(W1,rG),e(rG,i$o),e(W1,d$o),e(q,c$o),e(q,Q1),e(Q1,yfe),e(yfe,f$o),e(Q1,m$o),e(Q1,tG),e(tG,g$o),e(Q1,h$o),e(q,p$o),e(q,H1),e(H1,Lfe),e(Lfe,_$o),e(H1,u$o),e(H1,aG),e(aG,b$o),e(H1,v$o),e(q,F$o),e(q,U1),e(U1,xfe),e(xfe,T$o),e(U1,M$o),e(U1,nG),e(nG,E$o),e(U1,C$o),e(q,w$o),e(q,J1),e(J1,$fe),e($fe,A$o),e(J1,y$o),e(J1,sG),e(sG,L$o),e(J1,x$o),e(q,$$o),e(q,Y1),e(Y1,kfe),e(kfe,k$o),e(Y1,S$o),e(Y1,lG),e(lG,R$o),e(Y1,B$o),e(q,P$o),e(q,K1),e(K1,Sfe),e(Sfe,I$o),e(K1,q$o),e(K1,iG),e(iG,N$o),e(K1,j$o),e(q,D$o),e(q,Z1),e(Z1,Rfe),e(Rfe,G$o),e(Z1,O$o),e(Z1,dG),e(dG,V$o),e(Z1,X$o),e(q,z$o),e(q,eb),e(eb,Bfe),e(Bfe,W$o),e(eb,Q$o),e(eb,cG),e(cG,H$o),e(eb,U$o),e(q,J$o),e(q,ob),e(ob,Pfe),e(Pfe,Y$o),e(ob,K$o),e(ob,fG),e(fG,Z$o),e(ob,eko),e(q,oko),e(q,rb),e(rb,Ife),e(Ife,rko),e(rb,tko),e(rb,mG),e(mG,ako),e(rb,nko),e(q,sko),e(q,tb),e(tb,qfe),e(qfe,lko),e(tb,iko),e(tb,gG),e(gG,dko),e(tb,cko),e(q,fko),e(q,ab),e(ab,Nfe),e(Nfe,mko),e(ab,gko),e(ab,hG),e(hG,hko),e(ab,pko),e(q,_ko),e(q,nb),e(nb,jfe),e(jfe,uko),e(nb,bko),e(nb,pG),e(pG,vko),e(nb,Fko),e(q,Tko),e(q,sb),e(sb,Dfe),e(Dfe,Mko),e(sb,Eko),e(sb,_G),e(_G,Cko),e(sb,wko),e(q,Ako),e(q,lb),e(lb,Gfe),e(Gfe,yko),e(lb,Lko),e(lb,uG),e(uG,xko),e(lb,$ko),e(q,kko),e(q,ib),e(ib,Ofe),e(Ofe,Sko),e(ib,Rko),e(ib,bG),e(bG,Bko),e(ib,Pko),e(q,Iko),e(q,db),e(db,Vfe),e(Vfe,qko),e(db,Nko),e(db,vG),e(vG,jko),e(db,Dko),e(q,Gko),e(q,cb),e(cb,Xfe),e(Xfe,Oko),e(cb,Vko),e(cb,FG),e(FG,Xko),e(cb,zko),e(q,Wko),e(q,fb),e(fb,zfe),e(zfe,Qko),e(fb,Hko),e(fb,TG),e(TG,Uko),e(fb,Jko),e(q,Yko),e(q,mb),e(mb,Wfe),e(Wfe,Kko),e(mb,Zko),e(mb,MG),e(MG,eSo),e(mb,oSo),e(q,rSo),e(q,gb),e(gb,Qfe),e(Qfe,tSo),e(gb,aSo),e(gb,EG),e(EG,nSo),e(gb,sSo),e(q,lSo),e(q,hb),e(hb,Hfe),e(Hfe,iSo),e(hb,dSo),e(hb,CG),e(CG,cSo),e(hb,fSo),e(q,mSo),e(q,pb),e(pb,Ufe),e(Ufe,gSo),e(pb,hSo),e(pb,wG),e(wG,pSo),e(pb,_So),e(q,uSo),e(q,_b),e(_b,Jfe),e(Jfe,bSo),e(_b,vSo),e(_b,AG),e(AG,FSo),e(_b,TSo),e(q,MSo),e(q,ub),e(ub,Yfe),e(Yfe,ESo),e(ub,CSo),e(ub,yG),e(yG,wSo),e(ub,ASo),e(q,ySo),e(q,bb),e(bb,Kfe),e(Kfe,LSo),e(bb,xSo),e(bb,LG),e(LG,$So),e(bb,kSo),e(q,SSo),e(q,vb),e(vb,Zfe),e(Zfe,RSo),e(vb,BSo),e(vb,xG),e(xG,PSo),e(vb,ISo),e(q,qSo),e(q,Fb),e(Fb,eme),e(eme,NSo),e(Fb,jSo),e(Fb,$G),e($G,DSo),e(Fb,GSo),e(q,OSo),e(q,Tb),e(Tb,ome),e(ome,VSo),e(Tb,XSo),e(Tb,kG),e(kG,zSo),e(Tb,WSo),e(q,QSo),e(q,Mb),e(Mb,rme),e(rme,HSo),e(Mb,USo),e(Mb,SG),e(SG,JSo),e(Mb,YSo),e(q,KSo),e(q,Eb),e(Eb,tme),e(tme,ZSo),e(Eb,eRo),e(Eb,RG),e(RG,oRo),e(Eb,rRo),e(q,tRo),e(q,Cb),e(Cb,ame),e(ame,aRo),e(Cb,nRo),e(Cb,BG),e(BG,sRo),e(Cb,lRo),e(q,iRo),e(q,wb),e(wb,nme),e(nme,dRo),e(wb,cRo),e(wb,PG),e(PG,fRo),e(wb,mRo),e(q,gRo),e(q,Ab),e(Ab,sme),e(sme,hRo),e(Ab,pRo),e(Ab,IG),e(IG,_Ro),e(Ab,uRo),e(q,bRo),e(q,yb),e(yb,lme),e(lme,vRo),e(yb,FRo),e(yb,qG),e(qG,TRo),e(yb,MRo),e(q,ERo),e(q,Lb),e(Lb,ime),e(ime,CRo),e(Lb,wRo),e(Lb,NG),e(NG,ARo),e(Lb,yRo),e(q,LRo),e(q,xb),e(xb,dme),e(dme,xRo),e(xb,$Ro),e(xb,jG),e(jG,kRo),e(xb,SRo),e(oo,RRo),e(oo,$b),e($b,BRo),e($b,cme),e(cme,PRo),e($b,IRo),e($b,fme),e(fme,qRo),e(oo,NRo),M(kb,oo,null),b(f,Xqe,u),b(f,Oi,u),e(Oi,Sb),e(Sb,mme),M(Ty,mme,null),e(Oi,jRo),e(Oi,gme),e(gme,DRo),b(f,zqe,u),b(f,Bo,u),M(My,Bo,null),e(Bo,GRo),e(Bo,Vi),e(Vi,ORo),e(Vi,DG),e(DG,VRo),e(Vi,XRo),e(Vi,GG),e(GG,zRo),e(Vi,WRo),e(Bo,QRo),e(Bo,Ey),e(Ey,HRo),e(Ey,hme),e(hme,URo),e(Ey,JRo),e(Bo,YRo),e(Bo,dt),M(Cy,dt,null),e(dt,KRo),e(dt,pme),e(pme,ZRo),e(dt,eBo),e(dt,Xi),e(Xi,oBo),e(Xi,_me),e(_me,rBo),e(Xi,tBo),e(Xi,OG),e(OG,aBo),e(Xi,nBo),e(dt,sBo),M(Rb,dt,null),e(Bo,lBo),e(Bo,ro),M(wy,ro,null),e(ro,iBo),e(ro,ume),e(ume,dBo),e(ro,cBo),e(ro,Ba),e(Ba,fBo),e(Ba,bme),e(bme,mBo),e(Ba,gBo),e(Ba,vme),e(vme,hBo),e(Ba,pBo),e(Ba,Fme),e(Fme,_Bo),e(Ba,uBo),e(ro,bBo),e(ro,Y),e(Y,Bb),e(Bb,Tme),e(Tme,vBo),e(Bb,FBo),e(Bb,VG),e(VG,TBo),e(Bb,MBo),e(Y,EBo),e(Y,Pb),e(Pb,Mme),e(Mme,CBo),e(Pb,wBo),e(Pb,XG),e(XG,ABo),e(Pb,yBo),e(Y,LBo),e(Y,Ib),e(Ib,Eme),e(Eme,xBo),e(Ib,$Bo),e(Ib,zG),e(zG,kBo),e(Ib,SBo),e(Y,RBo),e(Y,qb),e(qb,Cme),e(Cme,BBo),e(qb,PBo),e(qb,WG),e(WG,IBo),e(qb,qBo),e(Y,NBo),e(Y,Nb),e(Nb,wme),e(wme,jBo),e(Nb,DBo),e(Nb,QG),e(QG,GBo),e(Nb,OBo),e(Y,VBo),e(Y,jb),e(jb,Ame),e(Ame,XBo),e(jb,zBo),e(jb,HG),e(HG,WBo),e(jb,QBo),e(Y,HBo),e(Y,Db),e(Db,yme),e(yme,UBo),e(Db,JBo),e(Db,UG),e(UG,YBo),e(Db,KBo),e(Y,ZBo),e(Y,Gb),e(Gb,Lme),e(Lme,ePo),e(Gb,oPo),e(Gb,JG),e(JG,rPo),e(Gb,tPo),e(Y,aPo),e(Y,Ob),e(Ob,xme),e(xme,nPo),e(Ob,sPo),e(Ob,YG),e(YG,lPo),e(Ob,iPo),e(Y,dPo),e(Y,Vb),e(Vb,$me),e($me,cPo),e(Vb,fPo),e(Vb,KG),e(KG,mPo),e(Vb,gPo),e(Y,hPo),e(Y,Xb),e(Xb,kme),e(kme,pPo),e(Xb,_Po),e(Xb,ZG),e(ZG,uPo),e(Xb,bPo),e(Y,vPo),e(Y,zb),e(zb,Sme),e(Sme,FPo),e(zb,TPo),e(zb,eO),e(eO,MPo),e(zb,EPo),e(Y,CPo),e(Y,Wb),e(Wb,Rme),e(Rme,wPo),e(Wb,APo),e(Wb,oO),e(oO,yPo),e(Wb,LPo),e(Y,xPo),e(Y,Qb),e(Qb,Bme),e(Bme,$Po),e(Qb,kPo),e(Qb,rO),e(rO,SPo),e(Qb,RPo),e(Y,BPo),e(Y,Hb),e(Hb,Pme),e(Pme,PPo),e(Hb,IPo),e(Hb,tO),e(tO,qPo),e(Hb,NPo),e(Y,jPo),e(Y,Ub),e(Ub,Ime),e(Ime,DPo),e(Ub,GPo),e(Ub,aO),e(aO,OPo),e(Ub,VPo),e(Y,XPo),e(Y,Jb),e(Jb,qme),e(qme,zPo),e(Jb,WPo),e(Jb,nO),e(nO,QPo),e(Jb,HPo),e(Y,UPo),e(Y,Yb),e(Yb,Nme),e(Nme,JPo),e(Yb,YPo),e(Yb,sO),e(sO,KPo),e(Yb,ZPo),e(Y,eIo),e(Y,Kb),e(Kb,jme),e(jme,oIo),e(Kb,rIo),e(Kb,lO),e(lO,tIo),e(Kb,aIo),e(Y,nIo),e(Y,Zb),e(Zb,Dme),e(Dme,sIo),e(Zb,lIo),e(Zb,iO),e(iO,iIo),e(Zb,dIo),e(Y,cIo),e(Y,ev),e(ev,Gme),e(Gme,fIo),e(ev,mIo),e(ev,dO),e(dO,gIo),e(ev,hIo),e(Y,pIo),e(Y,ov),e(ov,Ome),e(Ome,_Io),e(ov,uIo),e(ov,cO),e(cO,bIo),e(ov,vIo),e(Y,FIo),e(Y,rv),e(rv,Vme),e(Vme,TIo),e(rv,MIo),e(rv,fO),e(fO,EIo),e(rv,CIo),e(Y,wIo),e(Y,tv),e(tv,Xme),e(Xme,AIo),e(tv,yIo),e(tv,mO),e(mO,LIo),e(tv,xIo),e(Y,$Io),e(Y,av),e(av,zme),e(zme,kIo),e(av,SIo),e(av,gO),e(gO,RIo),e(av,BIo),e(Y,PIo),e(Y,nv),e(nv,Wme),e(Wme,IIo),e(nv,qIo),e(nv,hO),e(hO,NIo),e(nv,jIo),e(Y,DIo),e(Y,sv),e(sv,Qme),e(Qme,GIo),e(sv,OIo),e(sv,pO),e(pO,VIo),e(sv,XIo),e(Y,zIo),e(Y,lv),e(lv,Hme),e(Hme,WIo),e(lv,QIo),e(lv,_O),e(_O,HIo),e(lv,UIo),e(Y,JIo),e(Y,iv),e(iv,Ume),e(Ume,YIo),e(iv,KIo),e(iv,uO),e(uO,ZIo),e(iv,eqo),e(ro,oqo),e(ro,dv),e(dv,rqo),e(dv,Jme),e(Jme,tqo),e(dv,aqo),e(dv,Yme),e(Yme,nqo),e(ro,sqo),M(cv,ro,null),b(f,Wqe,u),b(f,zi,u),e(zi,fv),e(fv,Kme),M(Ay,Kme,null),e(zi,lqo),e(zi,Zme),e(Zme,iqo),b(f,Qqe,u),b(f,Po,u),M(yy,Po,null),e(Po,dqo),e(Po,Wi),e(Wi,cqo),e(Wi,bO),e(bO,fqo),e(Wi,mqo),e(Wi,vO),e(vO,gqo),e(Wi,hqo),e(Po,pqo),e(Po,Ly),e(Ly,_qo),e(Ly,ege),e(ege,uqo),e(Ly,bqo),e(Po,vqo),e(Po,ct),M(xy,ct,null),e(ct,Fqo),e(ct,oge),e(oge,Tqo),e(ct,Mqo),e(ct,Qi),e(Qi,Eqo),e(Qi,rge),e(rge,Cqo),e(Qi,wqo),e(Qi,FO),e(FO,Aqo),e(Qi,yqo),e(ct,Lqo),M(mv,ct,null),e(Po,xqo),e(Po,to),M($y,to,null),e(to,$qo),e(to,tge),e(tge,kqo),e(to,Sqo),e(to,Pa),e(Pa,Rqo),e(Pa,age),e(age,Bqo),e(Pa,Pqo),e(Pa,nge),e(nge,Iqo),e(Pa,qqo),e(Pa,sge),e(sge,Nqo),e(Pa,jqo),e(to,Dqo),e(to,Yr),e(Yr,gv),e(gv,lge),e(lge,Gqo),e(gv,Oqo),e(gv,TO),e(TO,Vqo),e(gv,Xqo),e(Yr,zqo),e(Yr,hv),e(hv,ige),e(ige,Wqo),e(hv,Qqo),e(hv,MO),e(MO,Hqo),e(hv,Uqo),e(Yr,Jqo),e(Yr,pv),e(pv,dge),e(dge,Yqo),e(pv,Kqo),e(pv,EO),e(EO,Zqo),e(pv,eNo),e(Yr,oNo),e(Yr,_v),e(_v,cge),e(cge,rNo),e(_v,tNo),e(_v,CO),e(CO,aNo),e(_v,nNo),e(Yr,sNo),e(Yr,uv),e(uv,fge),e(fge,lNo),e(uv,iNo),e(uv,wO),e(wO,dNo),e(uv,cNo),e(to,fNo),e(to,bv),e(bv,mNo),e(bv,mge),e(mge,gNo),e(bv,hNo),e(bv,gge),e(gge,pNo),e(to,_No),M(vv,to,null),b(f,Hqe,u),b(f,Hi,u),e(Hi,Fv),e(Fv,hge),M(ky,hge,null),e(Hi,uNo),e(Hi,pge),e(pge,bNo),b(f,Uqe,u),b(f,Io,u),M(Sy,Io,null),e(Io,vNo),e(Io,Ui),e(Ui,FNo),e(Ui,AO),e(AO,TNo),e(Ui,MNo),e(Ui,yO),e(yO,ENo),e(Ui,CNo),e(Io,wNo),e(Io,Ry),e(Ry,ANo),e(Ry,_ge),e(_ge,yNo),e(Ry,LNo),e(Io,xNo),e(Io,ft),M(By,ft,null),e(ft,$No),e(ft,uge),e(uge,kNo),e(ft,SNo),e(ft,Ji),e(Ji,RNo),e(Ji,bge),e(bge,BNo),e(Ji,PNo),e(Ji,LO),e(LO,INo),e(Ji,qNo),e(ft,NNo),M(Tv,ft,null),e(Io,jNo),e(Io,ao),M(Py,ao,null),e(ao,DNo),e(ao,vge),e(vge,GNo),e(ao,ONo),e(ao,Ia),e(Ia,VNo),e(Ia,Fge),e(Fge,XNo),e(Ia,zNo),e(Ia,Tge),e(Tge,WNo),e(Ia,QNo),e(Ia,Mge),e(Mge,HNo),e(Ia,UNo),e(ao,JNo),e(ao,U),e(U,Mv),e(Mv,Ege),e(Ege,YNo),e(Mv,KNo),e(Mv,xO),e(xO,ZNo),e(Mv,ejo),e(U,ojo),e(U,Ev),e(Ev,Cge),e(Cge,rjo),e(Ev,tjo),e(Ev,$O),e($O,ajo),e(Ev,njo),e(U,sjo),e(U,Cv),e(Cv,wge),e(wge,ljo),e(Cv,ijo),e(Cv,kO),e(kO,djo),e(Cv,cjo),e(U,fjo),e(U,wv),e(wv,Age),e(Age,mjo),e(wv,gjo),e(wv,SO),e(SO,hjo),e(wv,pjo),e(U,_jo),e(U,Av),e(Av,yge),e(yge,ujo),e(Av,bjo),e(Av,RO),e(RO,vjo),e(Av,Fjo),e(U,Tjo),e(U,yv),e(yv,Lge),e(Lge,Mjo),e(yv,Ejo),e(yv,BO),e(BO,Cjo),e(yv,wjo),e(U,Ajo),e(U,Lv),e(Lv,xge),e(xge,yjo),e(Lv,Ljo),e(Lv,PO),e(PO,xjo),e(Lv,$jo),e(U,kjo),e(U,xv),e(xv,$ge),e($ge,Sjo),e(xv,Rjo),e(xv,IO),e(IO,Bjo),e(xv,Pjo),e(U,Ijo),e(U,$v),e($v,kge),e(kge,qjo),e($v,Njo),e($v,qO),e(qO,jjo),e($v,Djo),e(U,Gjo),e(U,kv),e(kv,Sge),e(Sge,Ojo),e(kv,Vjo),e(kv,NO),e(NO,Xjo),e(kv,zjo),e(U,Wjo),e(U,Sv),e(Sv,Rge),e(Rge,Qjo),e(Sv,Hjo),e(Sv,jO),e(jO,Ujo),e(Sv,Jjo),e(U,Yjo),e(U,Rv),e(Rv,Bge),e(Bge,Kjo),e(Rv,Zjo),e(Rv,DO),e(DO,eDo),e(Rv,oDo),e(U,rDo),e(U,Bv),e(Bv,Pge),e(Pge,tDo),e(Bv,aDo),e(Bv,GO),e(GO,nDo),e(Bv,sDo),e(U,lDo),e(U,Pv),e(Pv,Ige),e(Ige,iDo),e(Pv,dDo),e(Pv,OO),e(OO,cDo),e(Pv,fDo),e(U,mDo),e(U,Iv),e(Iv,qge),e(qge,gDo),e(Iv,hDo),e(Iv,VO),e(VO,pDo),e(Iv,_Do),e(U,uDo),e(U,qv),e(qv,Nge),e(Nge,bDo),e(qv,vDo),e(qv,XO),e(XO,FDo),e(qv,TDo),e(U,MDo),e(U,Nv),e(Nv,jge),e(jge,EDo),e(Nv,CDo),e(Nv,zO),e(zO,wDo),e(Nv,ADo),e(U,yDo),e(U,jv),e(jv,Dge),e(Dge,LDo),e(jv,xDo),e(jv,WO),e(WO,$Do),e(jv,kDo),e(U,SDo),e(U,Dv),e(Dv,Gge),e(Gge,RDo),e(Dv,BDo),e(Dv,QO),e(QO,PDo),e(Dv,IDo),e(U,qDo),e(U,Gv),e(Gv,Oge),e(Oge,NDo),e(Gv,jDo),e(Gv,HO),e(HO,DDo),e(Gv,GDo),e(U,ODo),e(U,Ov),e(Ov,Vge),e(Vge,VDo),e(Ov,XDo),e(Ov,UO),e(UO,zDo),e(Ov,WDo),e(U,QDo),e(U,Vv),e(Vv,Xge),e(Xge,HDo),e(Vv,UDo),e(Vv,JO),e(JO,JDo),e(Vv,YDo),e(U,KDo),e(U,Xv),e(Xv,zge),e(zge,ZDo),e(Xv,eGo),e(Xv,YO),e(YO,oGo),e(Xv,rGo),e(U,tGo),e(U,zv),e(zv,Wge),e(Wge,aGo),e(zv,nGo),e(zv,KO),e(KO,sGo),e(zv,lGo),e(U,iGo),e(U,Wv),e(Wv,Qge),e(Qge,dGo),e(Wv,cGo),e(Wv,ZO),e(ZO,fGo),e(Wv,mGo),e(U,gGo),e(U,Qv),e(Qv,Hge),e(Hge,hGo),e(Qv,pGo),e(Qv,eV),e(eV,_Go),e(Qv,uGo),e(U,bGo),e(U,Hv),e(Hv,Uge),e(Uge,vGo),e(Hv,FGo),e(Hv,oV),e(oV,TGo),e(Hv,MGo),e(U,EGo),e(U,Uv),e(Uv,Jge),e(Jge,CGo),e(Uv,wGo),e(Uv,rV),e(rV,AGo),e(Uv,yGo),e(U,LGo),e(U,Jv),e(Jv,Yge),e(Yge,xGo),e(Jv,$Go),e(Jv,tV),e(tV,kGo),e(Jv,SGo),e(U,RGo),e(U,Yv),e(Yv,Kge),e(Kge,BGo),e(Yv,PGo),e(Yv,aV),e(aV,IGo),e(Yv,qGo),e(U,NGo),e(U,Kv),e(Kv,Zge),e(Zge,jGo),e(Kv,DGo),e(Kv,nV),e(nV,GGo),e(Kv,OGo),e(U,VGo),e(U,Zv),e(Zv,ehe),e(ehe,XGo),e(Zv,zGo),e(Zv,sV),e(sV,WGo),e(Zv,QGo),e(U,HGo),e(U,eF),e(eF,ohe),e(ohe,UGo),e(eF,JGo),e(eF,lV),e(lV,YGo),e(eF,KGo),e(ao,ZGo),e(ao,oF),e(oF,eOo),e(oF,rhe),e(rhe,oOo),e(oF,rOo),e(oF,the),e(the,tOo),e(ao,aOo),M(rF,ao,null),b(f,Jqe,u),b(f,Yi,u),e(Yi,tF),e(tF,ahe),M(Iy,ahe,null),e(Yi,nOo),e(Yi,nhe),e(nhe,sOo),b(f,Yqe,u),b(f,qo,u),M(qy,qo,null),e(qo,lOo),e(qo,Ki),e(Ki,iOo),e(Ki,iV),e(iV,dOo),e(Ki,cOo),e(Ki,dV),e(dV,fOo),e(Ki,mOo),e(qo,gOo),e(qo,Ny),e(Ny,hOo),e(Ny,she),e(she,pOo),e(Ny,_Oo),e(qo,uOo),e(qo,mt),M(jy,mt,null),e(mt,bOo),e(mt,lhe),e(lhe,vOo),e(mt,FOo),e(mt,Zi),e(Zi,TOo),e(Zi,ihe),e(ihe,MOo),e(Zi,EOo),e(Zi,cV),e(cV,COo),e(Zi,wOo),e(mt,AOo),M(aF,mt,null),e(qo,yOo),e(qo,no),M(Dy,no,null),e(no,LOo),e(no,dhe),e(dhe,xOo),e(no,$Oo),e(no,qa),e(qa,kOo),e(qa,che),e(che,SOo),e(qa,ROo),e(qa,fhe),e(fhe,BOo),e(qa,POo),e(qa,mhe),e(mhe,IOo),e(qa,qOo),e(no,NOo),e(no,V),e(V,nF),e(nF,ghe),e(ghe,jOo),e(nF,DOo),e(nF,fV),e(fV,GOo),e(nF,OOo),e(V,VOo),e(V,sF),e(sF,hhe),e(hhe,XOo),e(sF,zOo),e(sF,mV),e(mV,WOo),e(sF,QOo),e(V,HOo),e(V,lF),e(lF,phe),e(phe,UOo),e(lF,JOo),e(lF,gV),e(gV,YOo),e(lF,KOo),e(V,ZOo),e(V,iF),e(iF,_he),e(_he,eVo),e(iF,oVo),e(iF,hV),e(hV,rVo),e(iF,tVo),e(V,aVo),e(V,dF),e(dF,uhe),e(uhe,nVo),e(dF,sVo),e(dF,pV),e(pV,lVo),e(dF,iVo),e(V,dVo),e(V,cF),e(cF,bhe),e(bhe,cVo),e(cF,fVo),e(cF,_V),e(_V,mVo),e(cF,gVo),e(V,hVo),e(V,fF),e(fF,vhe),e(vhe,pVo),e(fF,_Vo),e(fF,uV),e(uV,uVo),e(fF,bVo),e(V,vVo),e(V,mF),e(mF,Fhe),e(Fhe,FVo),e(mF,TVo),e(mF,bV),e(bV,MVo),e(mF,EVo),e(V,CVo),e(V,gF),e(gF,The),e(The,wVo),e(gF,AVo),e(gF,vV),e(vV,yVo),e(gF,LVo),e(V,xVo),e(V,hF),e(hF,Mhe),e(Mhe,$Vo),e(hF,kVo),e(hF,FV),e(FV,SVo),e(hF,RVo),e(V,BVo),e(V,pF),e(pF,Ehe),e(Ehe,PVo),e(pF,IVo),e(pF,TV),e(TV,qVo),e(pF,NVo),e(V,jVo),e(V,_F),e(_F,Che),e(Che,DVo),e(_F,GVo),e(_F,MV),e(MV,OVo),e(_F,VVo),e(V,XVo),e(V,uF),e(uF,whe),e(whe,zVo),e(uF,WVo),e(uF,EV),e(EV,QVo),e(uF,HVo),e(V,UVo),e(V,bF),e(bF,Ahe),e(Ahe,JVo),e(bF,YVo),e(bF,CV),e(CV,KVo),e(bF,ZVo),e(V,eXo),e(V,vF),e(vF,yhe),e(yhe,oXo),e(vF,rXo),e(vF,wV),e(wV,tXo),e(vF,aXo),e(V,nXo),e(V,FF),e(FF,Lhe),e(Lhe,sXo),e(FF,lXo),e(FF,AV),e(AV,iXo),e(FF,dXo),e(V,cXo),e(V,TF),e(TF,xhe),e(xhe,fXo),e(TF,mXo),e(TF,yV),e(yV,gXo),e(TF,hXo),e(V,pXo),e(V,MF),e(MF,$he),e($he,_Xo),e(MF,uXo),e(MF,LV),e(LV,bXo),e(MF,vXo),e(V,FXo),e(V,EF),e(EF,khe),e(khe,TXo),e(EF,MXo),e(EF,xV),e(xV,EXo),e(EF,CXo),e(V,wXo),e(V,CF),e(CF,She),e(She,AXo),e(CF,yXo),e(CF,$V),e($V,LXo),e(CF,xXo),e(V,$Xo),e(V,wF),e(wF,Rhe),e(Rhe,kXo),e(wF,SXo),e(wF,kV),e(kV,RXo),e(wF,BXo),e(V,PXo),e(V,AF),e(AF,Bhe),e(Bhe,IXo),e(AF,qXo),e(AF,SV),e(SV,NXo),e(AF,jXo),e(V,DXo),e(V,yF),e(yF,Phe),e(Phe,GXo),e(yF,OXo),e(yF,RV),e(RV,VXo),e(yF,XXo),e(V,zXo),e(V,LF),e(LF,Ihe),e(Ihe,WXo),e(LF,QXo),e(LF,BV),e(BV,HXo),e(LF,UXo),e(V,JXo),e(V,xF),e(xF,qhe),e(qhe,YXo),e(xF,KXo),e(xF,PV),e(PV,ZXo),e(xF,ezo),e(V,ozo),e(V,$F),e($F,Nhe),e(Nhe,rzo),e($F,tzo),e($F,IV),e(IV,azo),e($F,nzo),e(V,szo),e(V,kF),e(kF,jhe),e(jhe,lzo),e(kF,izo),e(kF,qV),e(qV,dzo),e(kF,czo),e(V,fzo),e(V,SF),e(SF,Dhe),e(Dhe,mzo),e(SF,gzo),e(SF,NV),e(NV,hzo),e(SF,pzo),e(V,_zo),e(V,RF),e(RF,Ghe),e(Ghe,uzo),e(RF,bzo),e(RF,jV),e(jV,vzo),e(RF,Fzo),e(V,Tzo),e(V,BF),e(BF,Ohe),e(Ohe,Mzo),e(BF,Ezo),e(BF,DV),e(DV,Czo),e(BF,wzo),e(V,Azo),e(V,PF),e(PF,Vhe),e(Vhe,yzo),e(PF,Lzo),e(PF,GV),e(GV,xzo),e(PF,$zo),e(V,kzo),e(V,IF),e(IF,Xhe),e(Xhe,Szo),e(IF,Rzo),e(IF,OV),e(OV,Bzo),e(IF,Pzo),e(V,Izo),e(V,qF),e(qF,zhe),e(zhe,qzo),e(qF,Nzo),e(qF,VV),e(VV,jzo),e(qF,Dzo),e(V,Gzo),e(V,NF),e(NF,Whe),e(Whe,Ozo),e(NF,Vzo),e(NF,XV),e(XV,Xzo),e(NF,zzo),e(V,Wzo),e(V,jF),e(jF,Qhe),e(Qhe,Qzo),e(jF,Hzo),e(jF,zV),e(zV,Uzo),e(jF,Jzo),e(V,Yzo),e(V,DF),e(DF,Hhe),e(Hhe,Kzo),e(DF,Zzo),e(DF,WV),e(WV,eWo),e(DF,oWo),e(V,rWo),e(V,GF),e(GF,Uhe),e(Uhe,tWo),e(GF,aWo),e(GF,QV),e(QV,nWo),e(GF,sWo),e(V,lWo),e(V,OF),e(OF,Jhe),e(Jhe,iWo),e(OF,dWo),e(OF,HV),e(HV,cWo),e(OF,fWo),e(V,mWo),e(V,VF),e(VF,Yhe),e(Yhe,gWo),e(VF,hWo),e(VF,UV),e(UV,pWo),e(VF,_Wo),e(no,uWo),e(no,XF),e(XF,bWo),e(XF,Khe),e(Khe,vWo),e(XF,FWo),e(XF,Zhe),e(Zhe,TWo),e(no,MWo),M(zF,no,null),b(f,Kqe,u),b(f,ed,u),e(ed,WF),e(WF,epe),M(Gy,epe,null),e(ed,EWo),e(ed,ope),e(ope,CWo),b(f,Zqe,u),b(f,No,u),M(Oy,No,null),e(No,wWo),e(No,od),e(od,AWo),e(od,JV),e(JV,yWo),e(od,LWo),e(od,YV),e(YV,xWo),e(od,$Wo),e(No,kWo),e(No,Vy),e(Vy,SWo),e(Vy,rpe),e(rpe,RWo),e(Vy,BWo),e(No,PWo),e(No,gt),M(Xy,gt,null),e(gt,IWo),e(gt,tpe),e(tpe,qWo),e(gt,NWo),e(gt,rd),e(rd,jWo),e(rd,ape),e(ape,DWo),e(rd,GWo),e(rd,KV),e(KV,OWo),e(rd,VWo),e(gt,XWo),M(QF,gt,null),e(No,zWo),e(No,so),M(zy,so,null),e(so,WWo),e(so,npe),e(npe,QWo),e(so,HWo),e(so,Na),e(Na,UWo),e(Na,spe),e(spe,JWo),e(Na,YWo),e(Na,lpe),e(lpe,KWo),e(Na,ZWo),e(Na,ipe),e(ipe,eQo),e(Na,oQo),e(so,rQo),e(so,dpe),e(dpe,HF),e(HF,cpe),e(cpe,tQo),e(HF,aQo),e(HF,ZV),e(ZV,nQo),e(HF,sQo),e(so,lQo),e(so,UF),e(UF,iQo),e(UF,fpe),e(fpe,dQo),e(UF,cQo),e(UF,mpe),e(mpe,fQo),e(so,mQo),M(JF,so,null),b(f,eNe,u),b(f,td,u),e(td,YF),e(YF,gpe),M(Wy,gpe,null),e(td,gQo),e(td,hpe),e(hpe,hQo),b(f,oNe,u),b(f,jo,u),M(Qy,jo,null),e(jo,pQo),e(jo,ad),e(ad,_Qo),e(ad,eX),e(eX,uQo),e(ad,bQo),e(ad,oX),e(oX,vQo),e(ad,FQo),e(jo,TQo),e(jo,Hy),e(Hy,MQo),e(Hy,ppe),e(ppe,EQo),e(Hy,CQo),e(jo,wQo),e(jo,ht),M(Uy,ht,null),e(ht,AQo),e(ht,_pe),e(_pe,yQo),e(ht,LQo),e(ht,nd),e(nd,xQo),e(nd,upe),e(upe,$Qo),e(nd,kQo),e(nd,rX),e(rX,SQo),e(nd,RQo),e(ht,BQo),M(KF,ht,null),e(jo,PQo),e(jo,lo),M(Jy,lo,null),e(lo,IQo),e(lo,bpe),e(bpe,qQo),e(lo,NQo),e(lo,ja),e(ja,jQo),e(ja,vpe),e(vpe,DQo),e(ja,GQo),e(ja,Fpe),e(Fpe,OQo),e(ja,VQo),e(ja,Tpe),e(Tpe,XQo),e(ja,zQo),e(lo,WQo),e(lo,Fe),e(Fe,ZF),e(ZF,Mpe),e(Mpe,QQo),e(ZF,HQo),e(ZF,tX),e(tX,UQo),e(ZF,JQo),e(Fe,YQo),e(Fe,e0),e(e0,Epe),e(Epe,KQo),e(e0,ZQo),e(e0,aX),e(aX,eHo),e(e0,oHo),e(Fe,rHo),e(Fe,o0),e(o0,Cpe),e(Cpe,tHo),e(o0,aHo),e(o0,nX),e(nX,nHo),e(o0,sHo),e(Fe,lHo),e(Fe,r0),e(r0,wpe),e(wpe,iHo),e(r0,dHo),e(r0,sX),e(sX,cHo),e(r0,fHo),e(Fe,mHo),e(Fe,Bs),e(Bs,Ape),e(Ape,gHo),e(Bs,hHo),e(Bs,lX),e(lX,pHo),e(Bs,_Ho),e(Bs,iX),e(iX,uHo),e(Bs,bHo),e(Fe,vHo),e(Fe,t0),e(t0,ype),e(ype,FHo),e(t0,THo),e(t0,dX),e(dX,MHo),e(t0,EHo),e(Fe,CHo),e(Fe,pt),e(pt,Lpe),e(Lpe,wHo),e(pt,AHo),e(pt,cX),e(cX,yHo),e(pt,LHo),e(pt,fX),e(fX,xHo),e(pt,$Ho),e(pt,mX),e(mX,kHo),e(pt,SHo),e(Fe,RHo),e(Fe,a0),e(a0,xpe),e(xpe,BHo),e(a0,PHo),e(a0,gX),e(gX,IHo),e(a0,qHo),e(Fe,NHo),e(Fe,n0),e(n0,$pe),e($pe,jHo),e(n0,DHo),e(n0,hX),e(hX,GHo),e(n0,OHo),e(Fe,VHo),e(Fe,s0),e(s0,kpe),e(kpe,XHo),e(s0,zHo),e(s0,pX),e(pX,WHo),e(s0,QHo),e(Fe,HHo),e(Fe,l0),e(l0,Spe),e(Spe,UHo),e(l0,JHo),e(l0,_X),e(_X,YHo),e(l0,KHo),e(Fe,ZHo),e(Fe,i0),e(i0,Rpe),e(Rpe,eUo),e(i0,oUo),e(i0,uX),e(uX,rUo),e(i0,tUo),e(Fe,aUo),e(Fe,d0),e(d0,Bpe),e(Bpe,nUo),e(d0,sUo),e(d0,bX),e(bX,lUo),e(d0,iUo),e(Fe,dUo),e(Fe,c0),e(c0,Ppe),e(Ppe,cUo),e(c0,fUo),e(c0,vX),e(vX,mUo),e(c0,gUo),e(lo,hUo),e(lo,f0),e(f0,pUo),e(f0,Ipe),e(Ipe,_Uo),e(f0,uUo),e(f0,qpe),e(qpe,bUo),e(lo,vUo),M(m0,lo,null),b(f,rNe,u),b(f,sd,u),e(sd,g0),e(g0,Npe),M(Yy,Npe,null),e(sd,FUo),e(sd,jpe),e(jpe,TUo),b(f,tNe,u),b(f,Do,u),M(Ky,Do,null),e(Do,MUo),e(Do,ld),e(ld,EUo),e(ld,FX),e(FX,CUo),e(ld,wUo),e(ld,TX),e(TX,AUo),e(ld,yUo),e(Do,LUo),e(Do,Zy),e(Zy,xUo),e(Zy,Dpe),e(Dpe,$Uo),e(Zy,kUo),e(Do,SUo),e(Do,_t),M(eL,_t,null),e(_t,RUo),e(_t,Gpe),e(Gpe,BUo),e(_t,PUo),e(_t,id),e(id,IUo),e(id,Ope),e(Ope,qUo),e(id,NUo),e(id,MX),e(MX,jUo),e(id,DUo),e(_t,GUo),M(h0,_t,null),e(Do,OUo),e(Do,io),M(oL,io,null),e(io,VUo),e(io,Vpe),e(Vpe,XUo),e(io,zUo),e(io,Da),e(Da,WUo),e(Da,Xpe),e(Xpe,QUo),e(Da,HUo),e(Da,zpe),e(zpe,UUo),e(Da,JUo),e(Da,Wpe),e(Wpe,YUo),e(Da,KUo),e(io,ZUo),e(io,Qpe),e(Qpe,p0),e(p0,Hpe),e(Hpe,eJo),e(p0,oJo),e(p0,EX),e(EX,rJo),e(p0,tJo),e(io,aJo),e(io,_0),e(_0,nJo),e(_0,Upe),e(Upe,sJo),e(_0,lJo),e(_0,Jpe),e(Jpe,iJo),e(io,dJo),M(u0,io,null),b(f,aNe,u),b(f,dd,u),e(dd,b0),e(b0,Ype),M(rL,Ype,null),e(dd,cJo),e(dd,Kpe),e(Kpe,fJo),b(f,nNe,u),b(f,Go,u),M(tL,Go,null),e(Go,mJo),e(Go,cd),e(cd,gJo),e(cd,CX),e(CX,hJo),e(cd,pJo),e(cd,wX),e(wX,_Jo),e(cd,uJo),e(Go,bJo),e(Go,aL),e(aL,vJo),e(aL,Zpe),e(Zpe,FJo),e(aL,TJo),e(Go,MJo),e(Go,ut),M(nL,ut,null),e(ut,EJo),e(ut,e_e),e(e_e,CJo),e(ut,wJo),e(ut,fd),e(fd,AJo),e(fd,o_e),e(o_e,yJo),e(fd,LJo),e(fd,AX),e(AX,xJo),e(fd,$Jo),e(ut,kJo),M(v0,ut,null),e(Go,SJo),e(Go,co),M(sL,co,null),e(co,RJo),e(co,r_e),e(r_e,BJo),e(co,PJo),e(co,Ga),e(Ga,IJo),e(Ga,t_e),e(t_e,qJo),e(Ga,NJo),e(Ga,a_e),e(a_e,jJo),e(Ga,DJo),e(Ga,n_e),e(n_e,GJo),e(Ga,OJo),e(co,VJo),e(co,ke),e(ke,F0),e(F0,s_e),e(s_e,XJo),e(F0,zJo),e(F0,yX),e(yX,WJo),e(F0,QJo),e(ke,HJo),e(ke,T0),e(T0,l_e),e(l_e,UJo),e(T0,JJo),e(T0,LX),e(LX,YJo),e(T0,KJo),e(ke,ZJo),e(ke,M0),e(M0,i_e),e(i_e,eYo),e(M0,oYo),e(M0,xX),e(xX,rYo),e(M0,tYo),e(ke,aYo),e(ke,E0),e(E0,d_e),e(d_e,nYo),e(E0,sYo),e(E0,$X),e($X,lYo),e(E0,iYo),e(ke,dYo),e(ke,C0),e(C0,c_e),e(c_e,cYo),e(C0,fYo),e(C0,kX),e(kX,mYo),e(C0,gYo),e(ke,hYo),e(ke,w0),e(w0,f_e),e(f_e,pYo),e(w0,_Yo),e(w0,SX),e(SX,uYo),e(w0,bYo),e(ke,vYo),e(ke,A0),e(A0,m_e),e(m_e,FYo),e(A0,TYo),e(A0,RX),e(RX,MYo),e(A0,EYo),e(ke,CYo),e(ke,y0),e(y0,g_e),e(g_e,wYo),e(y0,AYo),e(y0,BX),e(BX,yYo),e(y0,LYo),e(ke,xYo),e(ke,L0),e(L0,h_e),e(h_e,$Yo),e(L0,kYo),e(L0,PX),e(PX,SYo),e(L0,RYo),e(co,BYo),e(co,x0),e(x0,PYo),e(x0,p_e),e(p_e,IYo),e(x0,qYo),e(x0,__e),e(__e,NYo),e(co,jYo),M($0,co,null),b(f,sNe,u),b(f,md,u),e(md,k0),e(k0,u_e),M(lL,u_e,null),e(md,DYo),e(md,b_e),e(b_e,GYo),b(f,lNe,u),b(f,Oo,u),M(iL,Oo,null),e(Oo,OYo),e(Oo,gd),e(gd,VYo),e(gd,IX),e(IX,XYo),e(gd,zYo),e(gd,qX),e(qX,WYo),e(gd,QYo),e(Oo,HYo),e(Oo,dL),e(dL,UYo),e(dL,v_e),e(v_e,JYo),e(dL,YYo),e(Oo,KYo),e(Oo,bt),M(cL,bt,null),e(bt,ZYo),e(bt,F_e),e(F_e,eKo),e(bt,oKo),e(bt,hd),e(hd,rKo),e(hd,T_e),e(T_e,tKo),e(hd,aKo),e(hd,NX),e(NX,nKo),e(hd,sKo),e(bt,lKo),M(S0,bt,null),e(Oo,iKo),e(Oo,fo),M(fL,fo,null),e(fo,dKo),e(fo,M_e),e(M_e,cKo),e(fo,fKo),e(fo,Oa),e(Oa,mKo),e(Oa,E_e),e(E_e,gKo),e(Oa,hKo),e(Oa,C_e),e(C_e,pKo),e(Oa,_Ko),e(Oa,w_e),e(w_e,uKo),e(Oa,bKo),e(fo,vKo),e(fo,Kr),e(Kr,R0),e(R0,A_e),e(A_e,FKo),e(R0,TKo),e(R0,jX),e(jX,MKo),e(R0,EKo),e(Kr,CKo),e(Kr,B0),e(B0,y_e),e(y_e,wKo),e(B0,AKo),e(B0,DX),e(DX,yKo),e(B0,LKo),e(Kr,xKo),e(Kr,P0),e(P0,L_e),e(L_e,$Ko),e(P0,kKo),e(P0,GX),e(GX,SKo),e(P0,RKo),e(Kr,BKo),e(Kr,I0),e(I0,x_e),e(x_e,PKo),e(I0,IKo),e(I0,OX),e(OX,qKo),e(I0,NKo),e(Kr,jKo),e(Kr,q0),e(q0,$_e),e($_e,DKo),e(q0,GKo),e(q0,VX),e(VX,OKo),e(q0,VKo),e(fo,XKo),e(fo,N0),e(N0,zKo),e(N0,k_e),e(k_e,WKo),e(N0,QKo),e(N0,S_e),e(S_e,HKo),e(fo,UKo),M(j0,fo,null),b(f,iNe,u),b(f,pd,u),e(pd,D0),e(D0,R_e),M(mL,R_e,null),e(pd,JKo),e(pd,B_e),e(B_e,YKo),b(f,dNe,u),b(f,Vo,u),M(gL,Vo,null),e(Vo,KKo),e(Vo,_d),e(_d,ZKo),e(_d,XX),e(XX,eZo),e(_d,oZo),e(_d,zX),e(zX,rZo),e(_d,tZo),e(Vo,aZo),e(Vo,hL),e(hL,nZo),e(hL,P_e),e(P_e,sZo),e(hL,lZo),e(Vo,iZo),e(Vo,vt),M(pL,vt,null),e(vt,dZo),e(vt,I_e),e(I_e,cZo),e(vt,fZo),e(vt,ud),e(ud,mZo),e(ud,q_e),e(q_e,gZo),e(ud,hZo),e(ud,WX),e(WX,pZo),e(ud,_Zo),e(vt,uZo),M(G0,vt,null),e(Vo,bZo),e(Vo,mo),M(_L,mo,null),e(mo,vZo),e(mo,N_e),e(N_e,FZo),e(mo,TZo),e(mo,Va),e(Va,MZo),e(Va,j_e),e(j_e,EZo),e(Va,CZo),e(Va,D_e),e(D_e,wZo),e(Va,AZo),e(Va,G_e),e(G_e,yZo),e(Va,LZo),e(mo,xZo),e(mo,Se),e(Se,O0),e(O0,O_e),e(O_e,$Zo),e(O0,kZo),e(O0,QX),e(QX,SZo),e(O0,RZo),e(Se,BZo),e(Se,V0),e(V0,V_e),e(V_e,PZo),e(V0,IZo),e(V0,HX),e(HX,qZo),e(V0,NZo),e(Se,jZo),e(Se,X0),e(X0,X_e),e(X_e,DZo),e(X0,GZo),e(X0,UX),e(UX,OZo),e(X0,VZo),e(Se,XZo),e(Se,z0),e(z0,z_e),e(z_e,zZo),e(z0,WZo),e(z0,JX),e(JX,QZo),e(z0,HZo),e(Se,UZo),e(Se,W0),e(W0,W_e),e(W_e,JZo),e(W0,YZo),e(W0,YX),e(YX,KZo),e(W0,ZZo),e(Se,eer),e(Se,Q0),e(Q0,Q_e),e(Q_e,oer),e(Q0,rer),e(Q0,KX),e(KX,ter),e(Q0,aer),e(Se,ner),e(Se,H0),e(H0,H_e),e(H_e,ser),e(H0,ler),e(H0,ZX),e(ZX,ier),e(H0,der),e(Se,cer),e(Se,U0),e(U0,U_e),e(U_e,fer),e(U0,mer),e(U0,ez),e(ez,ger),e(U0,her),e(Se,per),e(Se,J0),e(J0,J_e),e(J_e,_er),e(J0,uer),e(J0,oz),e(oz,ber),e(J0,ver),e(mo,Fer),e(mo,Y0),e(Y0,Ter),e(Y0,Y_e),e(Y_e,Mer),e(Y0,Eer),e(Y0,K_e),e(K_e,Cer),e(mo,wer),M(K0,mo,null),b(f,cNe,u),b(f,bd,u),e(bd,Z0),e(Z0,Z_e),M(uL,Z_e,null),e(bd,Aer),e(bd,eue),e(eue,yer),b(f,fNe,u),b(f,Xo,u),M(bL,Xo,null),e(Xo,Ler),e(Xo,vd),e(vd,xer),e(vd,rz),e(rz,$er),e(vd,ker),e(vd,tz),e(tz,Ser),e(vd,Rer),e(Xo,Ber),e(Xo,vL),e(vL,Per),e(vL,oue),e(oue,Ier),e(vL,qer),e(Xo,Ner),e(Xo,Ft),M(FL,Ft,null),e(Ft,jer),e(Ft,rue),e(rue,Der),e(Ft,Ger),e(Ft,Fd),e(Fd,Oer),e(Fd,tue),e(tue,Ver),e(Fd,Xer),e(Fd,az),e(az,zer),e(Fd,Wer),e(Ft,Qer),M(eT,Ft,null),e(Xo,Her),e(Xo,go),M(TL,go,null),e(go,Uer),e(go,aue),e(aue,Jer),e(go,Yer),e(go,Xa),e(Xa,Ker),e(Xa,nue),e(nue,Zer),e(Xa,eor),e(Xa,sue),e(sue,oor),e(Xa,ror),e(Xa,lue),e(lue,tor),e(Xa,aor),e(go,nor),e(go,ML),e(ML,oT),e(oT,iue),e(iue,sor),e(oT,lor),e(oT,nz),e(nz,ior),e(oT,dor),e(ML,cor),e(ML,rT),e(rT,due),e(due,mor),e(rT,gor),e(rT,sz),e(sz,hor),e(rT,por),e(go,_or),e(go,tT),e(tT,uor),e(tT,cue),e(cue,bor),e(tT,vor),e(tT,fue),e(fue,For),e(go,Tor),M(aT,go,null),b(f,mNe,u),b(f,Td,u),e(Td,nT),e(nT,mue),M(EL,mue,null),e(Td,Mor),e(Td,gue),e(gue,Eor),b(f,gNe,u),b(f,zo,u),M(CL,zo,null),e(zo,Cor),e(zo,Md),e(Md,wor),e(Md,lz),e(lz,Aor),e(Md,yor),e(Md,iz),e(iz,Lor),e(Md,xor),e(zo,$or),e(zo,wL),e(wL,kor),e(wL,hue),e(hue,Sor),e(wL,Ror),e(zo,Bor),e(zo,Tt),M(AL,Tt,null),e(Tt,Por),e(Tt,pue),e(pue,Ior),e(Tt,qor),e(Tt,Ed),e(Ed,Nor),e(Ed,_ue),e(_ue,jor),e(Ed,Dor),e(Ed,dz),e(dz,Gor),e(Ed,Oor),e(Tt,Vor),M(sT,Tt,null),e(zo,Xor),e(zo,ho),M(yL,ho,null),e(ho,zor),e(ho,uue),e(uue,Wor),e(ho,Qor),e(ho,za),e(za,Hor),e(za,bue),e(bue,Uor),e(za,Jor),e(za,vue),e(vue,Yor),e(za,Kor),e(za,Fue),e(Fue,Zor),e(za,err),e(ho,orr),e(ho,Zr),e(Zr,lT),e(lT,Tue),e(Tue,rrr),e(lT,trr),e(lT,cz),e(cz,arr),e(lT,nrr),e(Zr,srr),e(Zr,iT),e(iT,Mue),e(Mue,lrr),e(iT,irr),e(iT,fz),e(fz,drr),e(iT,crr),e(Zr,frr),e(Zr,dT),e(dT,Eue),e(Eue,mrr),e(dT,grr),e(dT,mz),e(mz,hrr),e(dT,prr),e(Zr,_rr),e(Zr,cT),e(cT,Cue),e(Cue,urr),e(cT,brr),e(cT,gz),e(gz,vrr),e(cT,Frr),e(Zr,Trr),e(Zr,fT),e(fT,wue),e(wue,Mrr),e(fT,Err),e(fT,hz),e(hz,Crr),e(fT,wrr),e(ho,Arr),e(ho,mT),e(mT,yrr),e(mT,Aue),e(Aue,Lrr),e(mT,xrr),e(mT,yue),e(yue,$rr),e(ho,krr),M(gT,ho,null),b(f,hNe,u),b(f,Cd,u),e(Cd,hT),e(hT,Lue),M(LL,Lue,null),e(Cd,Srr),e(Cd,xue),e(xue,Rrr),b(f,pNe,u),b(f,Wo,u),M(xL,Wo,null),e(Wo,Brr),e(Wo,wd),e(wd,Prr),e(wd,pz),e(pz,Irr),e(wd,qrr),e(wd,_z),e(_z,Nrr),e(wd,jrr),e(Wo,Drr),e(Wo,$L),e($L,Grr),e($L,$ue),e($ue,Orr),e($L,Vrr),e(Wo,Xrr),e(Wo,Mt),M(kL,Mt,null),e(Mt,zrr),e(Mt,kue),e(kue,Wrr),e(Mt,Qrr),e(Mt,Ad),e(Ad,Hrr),e(Ad,Sue),e(Sue,Urr),e(Ad,Jrr),e(Ad,uz),e(uz,Yrr),e(Ad,Krr),e(Mt,Zrr),M(pT,Mt,null),e(Wo,etr),e(Wo,po),M(SL,po,null),e(po,otr),e(po,Rue),e(Rue,rtr),e(po,ttr),e(po,Wa),e(Wa,atr),e(Wa,Bue),e(Bue,ntr),e(Wa,str),e(Wa,Pue),e(Pue,ltr),e(Wa,itr),e(Wa,Iue),e(Iue,dtr),e(Wa,ctr),e(po,ftr),e(po,yd),e(yd,_T),e(_T,que),e(que,mtr),e(_T,gtr),e(_T,bz),e(bz,htr),e(_T,ptr),e(yd,_tr),e(yd,uT),e(uT,Nue),e(Nue,utr),e(uT,btr),e(uT,vz),e(vz,vtr),e(uT,Ftr),e(yd,Ttr),e(yd,bT),e(bT,jue),e(jue,Mtr),e(bT,Etr),e(bT,Fz),e(Fz,Ctr),e(bT,wtr),e(po,Atr),e(po,vT),e(vT,ytr),e(vT,Due),e(Due,Ltr),e(vT,xtr),e(vT,Gue),e(Gue,$tr),e(po,ktr),M(FT,po,null),b(f,_Ne,u),b(f,Ld,u),e(Ld,TT),e(TT,Oue),M(RL,Oue,null),e(Ld,Str),e(Ld,Vue),e(Vue,Rtr),b(f,uNe,u),b(f,Qo,u),M(BL,Qo,null),e(Qo,Btr),e(Qo,xd),e(xd,Ptr),e(xd,Tz),e(Tz,Itr),e(xd,qtr),e(xd,Mz),e(Mz,Ntr),e(xd,jtr),e(Qo,Dtr),e(Qo,PL),e(PL,Gtr),e(PL,Xue),e(Xue,Otr),e(PL,Vtr),e(Qo,Xtr),e(Qo,Et),M(IL,Et,null),e(Et,ztr),e(Et,zue),e(zue,Wtr),e(Et,Qtr),e(Et,$d),e($d,Htr),e($d,Wue),e(Wue,Utr),e($d,Jtr),e($d,Ez),e(Ez,Ytr),e($d,Ktr),e(Et,Ztr),M(MT,Et,null),e(Qo,ear),e(Qo,_o),M(qL,_o,null),e(_o,oar),e(_o,Que),e(Que,rar),e(_o,tar),e(_o,Qa),e(Qa,aar),e(Qa,Hue),e(Hue,nar),e(Qa,sar),e(Qa,Uue),e(Uue,lar),e(Qa,iar),e(Qa,Jue),e(Jue,dar),e(Qa,car),e(_o,far),e(_o,NL),e(NL,ET),e(ET,Yue),e(Yue,mar),e(ET,gar),e(ET,Cz),e(Cz,har),e(ET,par),e(NL,_ar),e(NL,CT),e(CT,Kue),e(Kue,uar),e(CT,bar),e(CT,wz),e(wz,Far),e(CT,Tar),e(_o,Mar),e(_o,wT),e(wT,Ear),e(wT,Zue),e(Zue,Car),e(wT,war),e(wT,e2e),e(e2e,Aar),e(_o,yar),M(AT,_o,null),b(f,bNe,u),b(f,kd,u),e(kd,yT),e(yT,o2e),M(jL,o2e,null),e(kd,Lar),e(kd,r2e),e(r2e,xar),b(f,vNe,u),b(f,Ho,u),M(DL,Ho,null),e(Ho,$ar),e(Ho,Sd),e(Sd,kar),e(Sd,Az),e(Az,Sar),e(Sd,Rar),e(Sd,yz),e(yz,Bar),e(Sd,Par),e(Ho,Iar),e(Ho,GL),e(GL,qar),e(GL,t2e),e(t2e,Nar),e(GL,jar),e(Ho,Dar),e(Ho,Ct),M(OL,Ct,null),e(Ct,Gar),e(Ct,a2e),e(a2e,Oar),e(Ct,Var),e(Ct,Rd),e(Rd,Xar),e(Rd,n2e),e(n2e,zar),e(Rd,War),e(Rd,Lz),e(Lz,Qar),e(Rd,Har),e(Ct,Uar),M(LT,Ct,null),e(Ho,Jar),e(Ho,uo),M(VL,uo,null),e(uo,Yar),e(uo,s2e),e(s2e,Kar),e(uo,Zar),e(uo,Ha),e(Ha,enr),e(Ha,l2e),e(l2e,onr),e(Ha,rnr),e(Ha,i2e),e(i2e,tnr),e(Ha,anr),e(Ha,d2e),e(d2e,nnr),e(Ha,snr),e(uo,lnr),e(uo,c2e),e(c2e,xT),e(xT,f2e),e(f2e,inr),e(xT,dnr),e(xT,xz),e(xz,cnr),e(xT,fnr),e(uo,mnr),e(uo,$T),e($T,gnr),e($T,m2e),e(m2e,hnr),e($T,pnr),e($T,g2e),e(g2e,_nr),e(uo,unr),M(kT,uo,null),b(f,FNe,u),b(f,Bd,u),e(Bd,ST),e(ST,h2e),M(XL,h2e,null),e(Bd,bnr),e(Bd,p2e),e(p2e,vnr),b(f,TNe,u),b(f,Uo,u),M(zL,Uo,null),e(Uo,Fnr),e(Uo,Pd),e(Pd,Tnr),e(Pd,$z),e($z,Mnr),e(Pd,Enr),e(Pd,kz),e(kz,Cnr),e(Pd,wnr),e(Uo,Anr),e(Uo,WL),e(WL,ynr),e(WL,_2e),e(_2e,Lnr),e(WL,xnr),e(Uo,$nr),e(Uo,wt),M(QL,wt,null),e(wt,knr),e(wt,u2e),e(u2e,Snr),e(wt,Rnr),e(wt,Id),e(Id,Bnr),e(Id,b2e),e(b2e,Pnr),e(Id,Inr),e(Id,Sz),e(Sz,qnr),e(Id,Nnr),e(wt,jnr),M(RT,wt,null),e(Uo,Dnr),e(Uo,bo),M(HL,bo,null),e(bo,Gnr),e(bo,v2e),e(v2e,Onr),e(bo,Vnr),e(bo,Ua),e(Ua,Xnr),e(Ua,F2e),e(F2e,znr),e(Ua,Wnr),e(Ua,T2e),e(T2e,Qnr),e(Ua,Hnr),e(Ua,M2e),e(M2e,Unr),e(Ua,Jnr),e(bo,Ynr),e(bo,Ja),e(Ja,BT),e(BT,E2e),e(E2e,Knr),e(BT,Znr),e(BT,Rz),e(Rz,esr),e(BT,osr),e(Ja,rsr),e(Ja,PT),e(PT,C2e),e(C2e,tsr),e(PT,asr),e(PT,Bz),e(Bz,nsr),e(PT,ssr),e(Ja,lsr),e(Ja,IT),e(IT,w2e),e(w2e,isr),e(IT,dsr),e(IT,Pz),e(Pz,csr),e(IT,fsr),e(Ja,msr),e(Ja,qT),e(qT,A2e),e(A2e,gsr),e(qT,hsr),e(qT,Iz),e(Iz,psr),e(qT,_sr),e(bo,usr),e(bo,NT),e(NT,bsr),e(NT,y2e),e(y2e,vsr),e(NT,Fsr),e(NT,L2e),e(L2e,Tsr),e(bo,Msr),M(jT,bo,null),b(f,MNe,u),b(f,qd,u),e(qd,DT),e(DT,x2e),M(UL,x2e,null),e(qd,Esr),e(qd,$2e),e($2e,Csr),b(f,ENe,u),b(f,Jo,u),M(JL,Jo,null),e(Jo,wsr),e(Jo,Nd),e(Nd,Asr),e(Nd,qz),e(qz,ysr),e(Nd,Lsr),e(Nd,Nz),e(Nz,xsr),e(Nd,$sr),e(Jo,ksr),e(Jo,YL),e(YL,Ssr),e(YL,k2e),e(k2e,Rsr),e(YL,Bsr),e(Jo,Psr),e(Jo,At),M(KL,At,null),e(At,Isr),e(At,S2e),e(S2e,qsr),e(At,Nsr),e(At,jd),e(jd,jsr),e(jd,R2e),e(R2e,Dsr),e(jd,Gsr),e(jd,jz),e(jz,Osr),e(jd,Vsr),e(At,Xsr),M(GT,At,null),e(Jo,zsr),e(Jo,vo),M(ZL,vo,null),e(vo,Wsr),e(vo,B2e),e(B2e,Qsr),e(vo,Hsr),e(vo,Ya),e(Ya,Usr),e(Ya,P2e),e(P2e,Jsr),e(Ya,Ysr),e(Ya,I2e),e(I2e,Ksr),e(Ya,Zsr),e(Ya,q2e),e(q2e,elr),e(Ya,olr),e(vo,rlr),e(vo,N2e),e(N2e,OT),e(OT,j2e),e(j2e,tlr),e(OT,alr),e(OT,Dz),e(Dz,nlr),e(OT,slr),e(vo,llr),e(vo,VT),e(VT,ilr),e(VT,D2e),e(D2e,dlr),e(VT,clr),e(VT,G2e),e(G2e,flr),e(vo,mlr),M(XT,vo,null),b(f,CNe,u),b(f,Dd,u),e(Dd,zT),e(zT,O2e),M(e8,O2e,null),e(Dd,glr),e(Dd,V2e),e(V2e,hlr),b(f,wNe,u),b(f,Yo,u),M(o8,Yo,null),e(Yo,plr),e(Yo,Gd),e(Gd,_lr),e(Gd,Gz),e(Gz,ulr),e(Gd,blr),e(Gd,Oz),e(Oz,vlr),e(Gd,Flr),e(Yo,Tlr),e(Yo,r8),e(r8,Mlr),e(r8,X2e),e(X2e,Elr),e(r8,Clr),e(Yo,wlr),e(Yo,yt),M(t8,yt,null),e(yt,Alr),e(yt,z2e),e(z2e,ylr),e(yt,Llr),e(yt,Od),e(Od,xlr),e(Od,W2e),e(W2e,$lr),e(Od,klr),e(Od,Vz),e(Vz,Slr),e(Od,Rlr),e(yt,Blr),M(WT,yt,null),e(Yo,Plr),e(Yo,wr),M(a8,wr,null),e(wr,Ilr),e(wr,Q2e),e(Q2e,qlr),e(wr,Nlr),e(wr,Ka),e(Ka,jlr),e(Ka,H2e),e(H2e,Dlr),e(Ka,Glr),e(Ka,U2e),e(U2e,Olr),e(Ka,Vlr),e(Ka,J2e),e(J2e,Xlr),e(Ka,zlr),e(wr,Wlr),e(wr,N),e(N,QT),e(QT,Y2e),e(Y2e,Qlr),e(QT,Hlr),e(QT,Xz),e(Xz,Ulr),e(QT,Jlr),e(N,Ylr),e(N,HT),e(HT,K2e),e(K2e,Klr),e(HT,Zlr),e(HT,zz),e(zz,eir),e(HT,oir),e(N,rir),e(N,UT),e(UT,Z2e),e(Z2e,tir),e(UT,air),e(UT,Wz),e(Wz,nir),e(UT,sir),e(N,lir),e(N,JT),e(JT,e1e),e(e1e,iir),e(JT,dir),e(JT,Qz),e(Qz,cir),e(JT,fir),e(N,mir),e(N,YT),e(YT,o1e),e(o1e,gir),e(YT,hir),e(YT,Hz),e(Hz,pir),e(YT,_ir),e(N,uir),e(N,KT),e(KT,r1e),e(r1e,bir),e(KT,vir),e(KT,Uz),e(Uz,Fir),e(KT,Tir),e(N,Mir),e(N,ZT),e(ZT,t1e),e(t1e,Eir),e(ZT,Cir),e(ZT,Jz),e(Jz,wir),e(ZT,Air),e(N,yir),e(N,e7),e(e7,a1e),e(a1e,Lir),e(e7,xir),e(e7,Yz),e(Yz,$ir),e(e7,kir),e(N,Sir),e(N,o7),e(o7,n1e),e(n1e,Rir),e(o7,Bir),e(o7,Kz),e(Kz,Pir),e(o7,Iir),e(N,qir),e(N,r7),e(r7,s1e),e(s1e,Nir),e(r7,jir),e(r7,Zz),e(Zz,Dir),e(r7,Gir),e(N,Oir),e(N,t7),e(t7,l1e),e(l1e,Vir),e(t7,Xir),e(t7,eW),e(eW,zir),e(t7,Wir),e(N,Qir),e(N,a7),e(a7,i1e),e(i1e,Hir),e(a7,Uir),e(a7,oW),e(oW,Jir),e(a7,Yir),e(N,Kir),e(N,n7),e(n7,d1e),e(d1e,Zir),e(n7,edr),e(n7,rW),e(rW,odr),e(n7,rdr),e(N,tdr),e(N,s7),e(s7,c1e),e(c1e,adr),e(s7,ndr),e(s7,tW),e(tW,sdr),e(s7,ldr),e(N,idr),e(N,l7),e(l7,f1e),e(f1e,ddr),e(l7,cdr),e(l7,aW),e(aW,fdr),e(l7,mdr),e(N,gdr),e(N,i7),e(i7,m1e),e(m1e,hdr),e(i7,pdr),e(i7,nW),e(nW,_dr),e(i7,udr),e(N,bdr),e(N,d7),e(d7,g1e),e(g1e,vdr),e(d7,Fdr),e(d7,sW),e(sW,Tdr),e(d7,Mdr),e(N,Edr),e(N,Ps),e(Ps,h1e),e(h1e,Cdr),e(Ps,wdr),e(Ps,lW),e(lW,Adr),e(Ps,ydr),e(Ps,iW),e(iW,Ldr),e(Ps,xdr),e(N,$dr),e(N,c7),e(c7,p1e),e(p1e,kdr),e(c7,Sdr),e(c7,dW),e(dW,Rdr),e(c7,Bdr),e(N,Pdr),e(N,f7),e(f7,_1e),e(_1e,Idr),e(f7,qdr),e(f7,cW),e(cW,Ndr),e(f7,jdr),e(N,Ddr),e(N,m7),e(m7,u1e),e(u1e,Gdr),e(m7,Odr),e(m7,fW),e(fW,Vdr),e(m7,Xdr),e(N,zdr),e(N,g7),e(g7,b1e),e(b1e,Wdr),e(g7,Qdr),e(g7,mW),e(mW,Hdr),e(g7,Udr),e(N,Jdr),e(N,h7),e(h7,v1e),e(v1e,Ydr),e(h7,Kdr),e(h7,gW),e(gW,Zdr),e(h7,ecr),e(N,ocr),e(N,p7),e(p7,F1e),e(F1e,rcr),e(p7,tcr),e(p7,hW),e(hW,acr),e(p7,ncr),e(N,scr),e(N,_7),e(_7,T1e),e(T1e,lcr),e(_7,icr),e(_7,pW),e(pW,dcr),e(_7,ccr),e(N,fcr),e(N,u7),e(u7,M1e),e(M1e,mcr),e(u7,gcr),e(u7,_W),e(_W,hcr),e(u7,pcr),e(N,_cr),e(N,b7),e(b7,E1e),e(E1e,ucr),e(b7,bcr),e(b7,uW),e(uW,vcr),e(b7,Fcr),e(N,Tcr),e(N,v7),e(v7,C1e),e(C1e,Mcr),e(v7,Ecr),e(v7,bW),e(bW,Ccr),e(v7,wcr),e(N,Acr),e(N,F7),e(F7,w1e),e(w1e,ycr),e(F7,Lcr),e(F7,vW),e(vW,xcr),e(F7,$cr),e(N,kcr),e(N,T7),e(T7,A1e),e(A1e,Scr),e(T7,Rcr),e(T7,FW),e(FW,Bcr),e(T7,Pcr),e(N,Icr),e(N,M7),e(M7,y1e),e(y1e,qcr),e(M7,Ncr),e(M7,TW),e(TW,jcr),e(M7,Dcr),e(N,Gcr),e(N,E7),e(E7,L1e),e(L1e,Ocr),e(E7,Vcr),e(E7,MW),e(MW,Xcr),e(E7,zcr),e(N,Wcr),e(N,C7),e(C7,x1e),e(x1e,Qcr),e(C7,Hcr),e(C7,EW),e(EW,Ucr),e(C7,Jcr),e(N,Ycr),e(N,w7),e(w7,$1e),e($1e,Kcr),e(w7,Zcr),e(w7,CW),e(CW,efr),e(w7,ofr),e(N,rfr),e(N,A7),e(A7,k1e),e(k1e,tfr),e(A7,afr),e(A7,wW),e(wW,nfr),e(A7,sfr),e(N,lfr),e(N,y7),e(y7,S1e),e(S1e,ifr),e(y7,dfr),e(y7,AW),e(AW,cfr),e(y7,ffr),e(N,mfr),e(N,L7),e(L7,R1e),e(R1e,gfr),e(L7,hfr),e(L7,yW),e(yW,pfr),e(L7,_fr),e(N,ufr),e(N,x7),e(x7,B1e),e(B1e,bfr),e(x7,vfr),e(x7,LW),e(LW,Ffr),e(x7,Tfr),e(N,Mfr),e(N,$7),e($7,P1e),e(P1e,Efr),e($7,Cfr),e($7,xW),e(xW,wfr),e($7,Afr),e(N,yfr),e(N,k7),e(k7,I1e),e(I1e,Lfr),e(k7,xfr),e(k7,$W),e($W,$fr),e(k7,kfr),e(N,Sfr),e(N,S7),e(S7,q1e),e(q1e,Rfr),e(S7,Bfr),e(S7,kW),e(kW,Pfr),e(S7,Ifr),e(N,qfr),e(N,R7),e(R7,N1e),e(N1e,Nfr),e(R7,jfr),e(R7,SW),e(SW,Dfr),e(R7,Gfr),e(N,Ofr),e(N,B7),e(B7,j1e),e(j1e,Vfr),e(B7,Xfr),e(B7,RW),e(RW,zfr),e(B7,Wfr),e(N,Qfr),e(N,P7),e(P7,D1e),e(D1e,Hfr),e(P7,Ufr),e(P7,BW),e(BW,Jfr),e(P7,Yfr),e(N,Kfr),e(N,I7),e(I7,G1e),e(G1e,Zfr),e(I7,emr),e(I7,PW),e(PW,omr),e(I7,rmr),e(N,tmr),e(N,q7),e(q7,O1e),e(O1e,amr),e(q7,nmr),e(q7,IW),e(IW,smr),e(q7,lmr),e(wr,imr),M(N7,wr,null),b(f,ANe,u),b(f,Vd,u),e(Vd,j7),e(j7,V1e),M(n8,V1e,null),e(Vd,dmr),e(Vd,X1e),e(X1e,cmr),b(f,yNe,u),b(f,Ko,u),M(s8,Ko,null),e(Ko,fmr),e(Ko,Xd),e(Xd,mmr),e(Xd,qW),e(qW,gmr),e(Xd,hmr),e(Xd,NW),e(NW,pmr),e(Xd,_mr),e(Ko,umr),e(Ko,l8),e(l8,bmr),e(l8,z1e),e(z1e,vmr),e(l8,Fmr),e(Ko,Tmr),e(Ko,Lt),M(i8,Lt,null),e(Lt,Mmr),e(Lt,W1e),e(W1e,Emr),e(Lt,Cmr),e(Lt,zd),e(zd,wmr),e(zd,Q1e),e(Q1e,Amr),e(zd,ymr),e(zd,jW),e(jW,Lmr),e(zd,xmr),e(Lt,$mr),M(D7,Lt,null),e(Ko,kmr),e(Ko,Ar),M(d8,Ar,null),e(Ar,Smr),e(Ar,H1e),e(H1e,Rmr),e(Ar,Bmr),e(Ar,Za),e(Za,Pmr),e(Za,U1e),e(U1e,Imr),e(Za,qmr),e(Za,J1e),e(J1e,Nmr),e(Za,jmr),e(Za,Y1e),e(Y1e,Dmr),e(Za,Gmr),e(Ar,Omr),e(Ar,se),e(se,G7),e(G7,K1e),e(K1e,Vmr),e(G7,Xmr),e(G7,DW),e(DW,zmr),e(G7,Wmr),e(se,Qmr),e(se,O7),e(O7,Z1e),e(Z1e,Hmr),e(O7,Umr),e(O7,GW),e(GW,Jmr),e(O7,Ymr),e(se,Kmr),e(se,V7),e(V7,ebe),e(ebe,Zmr),e(V7,egr),e(V7,OW),e(OW,ogr),e(V7,rgr),e(se,tgr),e(se,X7),e(X7,obe),e(obe,agr),e(X7,ngr),e(X7,VW),e(VW,sgr),e(X7,lgr),e(se,igr),e(se,z7),e(z7,rbe),e(rbe,dgr),e(z7,cgr),e(z7,XW),e(XW,fgr),e(z7,mgr),e(se,ggr),e(se,W7),e(W7,tbe),e(tbe,hgr),e(W7,pgr),e(W7,zW),e(zW,_gr),e(W7,ugr),e(se,bgr),e(se,Q7),e(Q7,abe),e(abe,vgr),e(Q7,Fgr),e(Q7,WW),e(WW,Tgr),e(Q7,Mgr),e(se,Egr),e(se,H7),e(H7,nbe),e(nbe,Cgr),e(H7,wgr),e(H7,QW),e(QW,Agr),e(H7,ygr),e(se,Lgr),e(se,U7),e(U7,sbe),e(sbe,xgr),e(U7,$gr),e(U7,HW),e(HW,kgr),e(U7,Sgr),e(se,Rgr),e(se,J7),e(J7,lbe),e(lbe,Bgr),e(J7,Pgr),e(J7,UW),e(UW,Igr),e(J7,qgr),e(se,Ngr),e(se,Y7),e(Y7,ibe),e(ibe,jgr),e(Y7,Dgr),e(Y7,JW),e(JW,Ggr),e(Y7,Ogr),e(se,Vgr),e(se,K7),e(K7,dbe),e(dbe,Xgr),e(K7,zgr),e(K7,YW),e(YW,Wgr),e(K7,Qgr),e(se,Hgr),e(se,Z7),e(Z7,cbe),e(cbe,Ugr),e(Z7,Jgr),e(Z7,KW),e(KW,Ygr),e(Z7,Kgr),e(se,Zgr),e(se,eM),e(eM,fbe),e(fbe,ehr),e(eM,ohr),e(eM,ZW),e(ZW,rhr),e(eM,thr),e(se,ahr),e(se,oM),e(oM,mbe),e(mbe,nhr),e(oM,shr),e(oM,eQ),e(eQ,lhr),e(oM,ihr),e(se,dhr),e(se,rM),e(rM,gbe),e(gbe,chr),e(rM,fhr),e(rM,oQ),e(oQ,mhr),e(rM,ghr),e(se,hhr),e(se,tM),e(tM,hbe),e(hbe,phr),e(tM,_hr),e(tM,rQ),e(rQ,uhr),e(tM,bhr),e(se,vhr),e(se,aM),e(aM,pbe),e(pbe,Fhr),e(aM,Thr),e(aM,tQ),e(tQ,Mhr),e(aM,Ehr),e(se,Chr),e(se,nM),e(nM,_be),e(_be,whr),e(nM,Ahr),e(nM,aQ),e(aQ,yhr),e(nM,Lhr),e(se,xhr),e(se,sM),e(sM,ube),e(ube,$hr),e(sM,khr),e(sM,nQ),e(nQ,Shr),e(sM,Rhr),e(se,Bhr),e(se,lM),e(lM,bbe),e(bbe,Phr),e(lM,Ihr),e(lM,sQ),e(sQ,qhr),e(lM,Nhr),e(se,jhr),e(se,iM),e(iM,vbe),e(vbe,Dhr),e(iM,Ghr),e(iM,lQ),e(lQ,Ohr),e(iM,Vhr),e(se,Xhr),e(se,dM),e(dM,Fbe),e(Fbe,zhr),e(dM,Whr),e(dM,iQ),e(iQ,Qhr),e(dM,Hhr),e(Ar,Uhr),M(cM,Ar,null),b(f,LNe,u),b(f,Wd,u),e(Wd,fM),e(fM,Tbe),M(c8,Tbe,null),e(Wd,Jhr),e(Wd,Mbe),e(Mbe,Yhr),b(f,xNe,u),b(f,Zo,u),M(f8,Zo,null),e(Zo,Khr),e(Zo,Qd),e(Qd,Zhr),e(Qd,dQ),e(dQ,epr),e(Qd,opr),e(Qd,cQ),e(cQ,rpr),e(Qd,tpr),e(Zo,apr),e(Zo,m8),e(m8,npr),e(m8,Ebe),e(Ebe,spr),e(m8,lpr),e(Zo,ipr),e(Zo,xt),M(g8,xt,null),e(xt,dpr),e(xt,Cbe),e(Cbe,cpr),e(xt,fpr),e(xt,Hd),e(Hd,mpr),e(Hd,wbe),e(wbe,gpr),e(Hd,hpr),e(Hd,fQ),e(fQ,ppr),e(Hd,_pr),e(xt,upr),M(mM,xt,null),e(Zo,bpr),e(Zo,yr),M(h8,yr,null),e(yr,vpr),e(yr,Abe),e(Abe,Fpr),e(yr,Tpr),e(yr,en),e(en,Mpr),e(en,ybe),e(ybe,Epr),e(en,Cpr),e(en,Lbe),e(Lbe,wpr),e(en,Apr),e(en,xbe),e(xbe,ypr),e(en,Lpr),e(yr,xpr),e(yr,Me),e(Me,gM),e(gM,$be),e($be,$pr),e(gM,kpr),e(gM,mQ),e(mQ,Spr),e(gM,Rpr),e(Me,Bpr),e(Me,hM),e(hM,kbe),e(kbe,Ppr),e(hM,Ipr),e(hM,gQ),e(gQ,qpr),e(hM,Npr),e(Me,jpr),e(Me,pM),e(pM,Sbe),e(Sbe,Dpr),e(pM,Gpr),e(pM,hQ),e(hQ,Opr),e(pM,Vpr),e(Me,Xpr),e(Me,_M),e(_M,Rbe),e(Rbe,zpr),e(_M,Wpr),e(_M,pQ),e(pQ,Qpr),e(_M,Hpr),e(Me,Upr),e(Me,uM),e(uM,Bbe),e(Bbe,Jpr),e(uM,Ypr),e(uM,_Q),e(_Q,Kpr),e(uM,Zpr),e(Me,e_r),e(Me,bM),e(bM,Pbe),e(Pbe,o_r),e(bM,r_r),e(bM,uQ),e(uQ,t_r),e(bM,a_r),e(Me,n_r),e(Me,vM),e(vM,Ibe),e(Ibe,s_r),e(vM,l_r),e(vM,bQ),e(bQ,i_r),e(vM,d_r),e(Me,c_r),e(Me,FM),e(FM,qbe),e(qbe,f_r),e(FM,m_r),e(FM,vQ),e(vQ,g_r),e(FM,h_r),e(Me,p_r),e(Me,TM),e(TM,Nbe),e(Nbe,__r),e(TM,u_r),e(TM,FQ),e(FQ,b_r),e(TM,v_r),e(Me,F_r),e(Me,MM),e(MM,jbe),e(jbe,T_r),e(MM,M_r),e(MM,TQ),e(TQ,E_r),e(MM,C_r),e(Me,w_r),e(Me,EM),e(EM,Dbe),e(Dbe,A_r),e(EM,y_r),e(EM,MQ),e(MQ,L_r),e(EM,x_r),e(Me,$_r),e(Me,CM),e(CM,Gbe),e(Gbe,k_r),e(CM,S_r),e(CM,EQ),e(EQ,R_r),e(CM,B_r),e(yr,P_r),M(wM,yr,null),b(f,$Ne,u),b(f,Ud,u),e(Ud,AM),e(AM,Obe),M(p8,Obe,null),e(Ud,I_r),e(Ud,Vbe),e(Vbe,q_r),b(f,kNe,u),b(f,er,u),M(_8,er,null),e(er,N_r),e(er,Jd),e(Jd,j_r),e(Jd,CQ),e(CQ,D_r),e(Jd,G_r),e(Jd,wQ),e(wQ,O_r),e(Jd,V_r),e(er,X_r),e(er,u8),e(u8,z_r),e(u8,Xbe),e(Xbe,W_r),e(u8,Q_r),e(er,H_r),e(er,$t),M(b8,$t,null),e($t,U_r),e($t,zbe),e(zbe,J_r),e($t,Y_r),e($t,Yd),e(Yd,K_r),e(Yd,Wbe),e(Wbe,Z_r),e(Yd,eur),e(Yd,AQ),e(AQ,our),e(Yd,rur),e($t,tur),M(yM,$t,null),e(er,aur),e(er,Lr),M(v8,Lr,null),e(Lr,nur),e(Lr,Qbe),e(Qbe,sur),e(Lr,lur),e(Lr,on),e(on,iur),e(on,Hbe),e(Hbe,dur),e(on,cur),e(on,Ube),e(Ube,fur),e(on,mur),e(on,Jbe),e(Jbe,gur),e(on,hur),e(Lr,pur),e(Lr,rn),e(rn,LM),e(LM,Ybe),e(Ybe,_ur),e(LM,uur),e(LM,yQ),e(yQ,bur),e(LM,vur),e(rn,Fur),e(rn,xM),e(xM,Kbe),e(Kbe,Tur),e(xM,Mur),e(xM,LQ),e(LQ,Eur),e(xM,Cur),e(rn,wur),e(rn,$M),e($M,Zbe),e(Zbe,Aur),e($M,yur),e($M,xQ),e(xQ,Lur),e($M,xur),e(rn,$ur),e(rn,kM),e(kM,eve),e(eve,kur),e(kM,Sur),e(kM,$Q),e($Q,Rur),e(kM,Bur),e(Lr,Pur),M(SM,Lr,null),b(f,SNe,u),b(f,Kd,u),e(Kd,RM),e(RM,ove),M(F8,ove,null),e(Kd,Iur),e(Kd,rve),e(rve,qur),b(f,RNe,u),b(f,or,u),M(T8,or,null),e(or,Nur),e(or,Zd),e(Zd,jur),e(Zd,kQ),e(kQ,Dur),e(Zd,Gur),e(Zd,SQ),e(SQ,Our),e(Zd,Vur),e(or,Xur),e(or,M8),e(M8,zur),e(M8,tve),e(tve,Wur),e(M8,Qur),e(or,Hur),e(or,kt),M(E8,kt,null),e(kt,Uur),e(kt,ave),e(ave,Jur),e(kt,Yur),e(kt,ec),e(ec,Kur),e(ec,nve),e(nve,Zur),e(ec,e2r),e(ec,RQ),e(RQ,o2r),e(ec,r2r),e(kt,t2r),M(BM,kt,null),e(or,a2r),e(or,xr),M(C8,xr,null),e(xr,n2r),e(xr,sve),e(sve,s2r),e(xr,l2r),e(xr,tn),e(tn,i2r),e(tn,lve),e(lve,d2r),e(tn,c2r),e(tn,ive),e(ive,f2r),e(tn,m2r),e(tn,dve),e(dve,g2r),e(tn,h2r),e(xr,p2r),e(xr,ie),e(ie,PM),e(PM,cve),e(cve,_2r),e(PM,u2r),e(PM,BQ),e(BQ,b2r),e(PM,v2r),e(ie,F2r),e(ie,IM),e(IM,fve),e(fve,T2r),e(IM,M2r),e(IM,PQ),e(PQ,E2r),e(IM,C2r),e(ie,w2r),e(ie,qM),e(qM,mve),e(mve,A2r),e(qM,y2r),e(qM,IQ),e(IQ,L2r),e(qM,x2r),e(ie,$2r),e(ie,NM),e(NM,gve),e(gve,k2r),e(NM,S2r),e(NM,qQ),e(qQ,R2r),e(NM,B2r),e(ie,P2r),e(ie,jM),e(jM,hve),e(hve,I2r),e(jM,q2r),e(jM,NQ),e(NQ,N2r),e(jM,j2r),e(ie,D2r),e(ie,DM),e(DM,pve),e(pve,G2r),e(DM,O2r),e(DM,jQ),e(jQ,V2r),e(DM,X2r),e(ie,z2r),e(ie,GM),e(GM,_ve),e(_ve,W2r),e(GM,Q2r),e(GM,DQ),e(DQ,H2r),e(GM,U2r),e(ie,J2r),e(ie,OM),e(OM,uve),e(uve,Y2r),e(OM,K2r),e(OM,GQ),e(GQ,Z2r),e(OM,e1r),e(ie,o1r),e(ie,VM),e(VM,bve),e(bve,r1r),e(VM,t1r),e(VM,OQ),e(OQ,a1r),e(VM,n1r),e(ie,s1r),e(ie,XM),e(XM,vve),e(vve,l1r),e(XM,i1r),e(XM,VQ),e(VQ,d1r),e(XM,c1r),e(ie,f1r),e(ie,zM),e(zM,Fve),e(Fve,m1r),e(zM,g1r),e(zM,XQ),e(XQ,h1r),e(zM,p1r),e(ie,_1r),e(ie,WM),e(WM,Tve),e(Tve,u1r),e(WM,b1r),e(WM,zQ),e(zQ,v1r),e(WM,F1r),e(ie,T1r),e(ie,QM),e(QM,Mve),e(Mve,M1r),e(QM,E1r),e(QM,WQ),e(WQ,C1r),e(QM,w1r),e(ie,A1r),e(ie,HM),e(HM,Eve),e(Eve,y1r),e(HM,L1r),e(HM,QQ),e(QQ,x1r),e(HM,$1r),e(ie,k1r),e(ie,UM),e(UM,Cve),e(Cve,S1r),e(UM,R1r),e(UM,HQ),e(HQ,B1r),e(UM,P1r),e(ie,I1r),e(ie,JM),e(JM,wve),e(wve,q1r),e(JM,N1r),e(JM,UQ),e(UQ,j1r),e(JM,D1r),e(ie,G1r),e(ie,YM),e(YM,Ave),e(Ave,O1r),e(YM,V1r),e(YM,JQ),e(JQ,X1r),e(YM,z1r),e(ie,W1r),e(ie,KM),e(KM,yve),e(yve,Q1r),e(KM,H1r),e(KM,YQ),e(YQ,U1r),e(KM,J1r),e(ie,Y1r),e(ie,ZM),e(ZM,Lve),e(Lve,K1r),e(ZM,Z1r),e(ZM,KQ),e(KQ,ebr),e(ZM,obr),e(ie,rbr),e(ie,e4),e(e4,xve),e(xve,tbr),e(e4,abr),e(e4,ZQ),e(ZQ,nbr),e(e4,sbr),e(xr,lbr),M(o4,xr,null),b(f,BNe,u),b(f,oc,u),e(oc,r4),e(r4,$ve),M(w8,$ve,null),e(oc,ibr),e(oc,kve),e(kve,dbr),b(f,PNe,u),b(f,rr,u),M(A8,rr,null),e(rr,cbr),e(rr,rc),e(rc,fbr),e(rc,eH),e(eH,mbr),e(rc,gbr),e(rc,oH),e(oH,hbr),e(rc,pbr),e(rr,_br),e(rr,y8),e(y8,ubr),e(y8,Sve),e(Sve,bbr),e(y8,vbr),e(rr,Fbr),e(rr,St),M(L8,St,null),e(St,Tbr),e(St,Rve),e(Rve,Mbr),e(St,Ebr),e(St,tc),e(tc,Cbr),e(tc,Bve),e(Bve,wbr),e(tc,Abr),e(tc,rH),e(rH,ybr),e(tc,Lbr),e(St,xbr),M(t4,St,null),e(rr,$br),e(rr,$r),M(x8,$r,null),e($r,kbr),e($r,Pve),e(Pve,Sbr),e($r,Rbr),e($r,an),e(an,Bbr),e(an,Ive),e(Ive,Pbr),e(an,Ibr),e(an,qve),e(qve,qbr),e(an,Nbr),e(an,Nve),e(Nve,jbr),e(an,Dbr),e($r,Gbr),e($r,ye),e(ye,a4),e(a4,jve),e(jve,Obr),e(a4,Vbr),e(a4,tH),e(tH,Xbr),e(a4,zbr),e(ye,Wbr),e(ye,n4),e(n4,Dve),e(Dve,Qbr),e(n4,Hbr),e(n4,aH),e(aH,Ubr),e(n4,Jbr),e(ye,Ybr),e(ye,s4),e(s4,Gve),e(Gve,Kbr),e(s4,Zbr),e(s4,nH),e(nH,evr),e(s4,ovr),e(ye,rvr),e(ye,l4),e(l4,Ove),e(Ove,tvr),e(l4,avr),e(l4,sH),e(sH,nvr),e(l4,svr),e(ye,lvr),e(ye,i4),e(i4,Vve),e(Vve,ivr),e(i4,dvr),e(i4,lH),e(lH,cvr),e(i4,fvr),e(ye,mvr),e(ye,d4),e(d4,Xve),e(Xve,gvr),e(d4,hvr),e(d4,iH),e(iH,pvr),e(d4,_vr),e(ye,uvr),e(ye,c4),e(c4,zve),e(zve,bvr),e(c4,vvr),e(c4,dH),e(dH,Fvr),e(c4,Tvr),e(ye,Mvr),e(ye,f4),e(f4,Wve),e(Wve,Evr),e(f4,Cvr),e(f4,cH),e(cH,wvr),e(f4,Avr),e(ye,yvr),e(ye,m4),e(m4,Qve),e(Qve,Lvr),e(m4,xvr),e(m4,fH),e(fH,$vr),e(m4,kvr),e(ye,Svr),e(ye,g4),e(g4,Hve),e(Hve,Rvr),e(g4,Bvr),e(g4,mH),e(mH,Pvr),e(g4,Ivr),e($r,qvr),M(h4,$r,null),b(f,INe,u),b(f,ac,u),e(ac,p4),e(p4,Uve),M($8,Uve,null),e(ac,Nvr),e(ac,Jve),e(Jve,jvr),b(f,qNe,u),b(f,tr,u),M(k8,tr,null),e(tr,Dvr),e(tr,nc),e(nc,Gvr),e(nc,gH),e(gH,Ovr),e(nc,Vvr),e(nc,hH),e(hH,Xvr),e(nc,zvr),e(tr,Wvr),e(tr,S8),e(S8,Qvr),e(S8,Yve),e(Yve,Hvr),e(S8,Uvr),e(tr,Jvr),e(tr,Rt),M(R8,Rt,null),e(Rt,Yvr),e(Rt,Kve),e(Kve,Kvr),e(Rt,Zvr),e(Rt,sc),e(sc,eFr),e(sc,Zve),e(Zve,oFr),e(sc,rFr),e(sc,pH),e(pH,tFr),e(sc,aFr),e(Rt,nFr),M(_4,Rt,null),e(tr,sFr),e(tr,kr),M(B8,kr,null),e(kr,lFr),e(kr,eFe),e(eFe,iFr),e(kr,dFr),e(kr,nn),e(nn,cFr),e(nn,oFe),e(oFe,fFr),e(nn,mFr),e(nn,rFe),e(rFe,gFr),e(nn,hFr),e(nn,tFe),e(tFe,pFr),e(nn,_Fr),e(kr,uFr),e(kr,ee),e(ee,u4),e(u4,aFe),e(aFe,bFr),e(u4,vFr),e(u4,_H),e(_H,FFr),e(u4,TFr),e(ee,MFr),e(ee,b4),e(b4,nFe),e(nFe,EFr),e(b4,CFr),e(b4,uH),e(uH,wFr),e(b4,AFr),e(ee,yFr),e(ee,v4),e(v4,sFe),e(sFe,LFr),e(v4,xFr),e(v4,bH),e(bH,$Fr),e(v4,kFr),e(ee,SFr),e(ee,F4),e(F4,lFe),e(lFe,RFr),e(F4,BFr),e(F4,vH),e(vH,PFr),e(F4,IFr),e(ee,qFr),e(ee,T4),e(T4,iFe),e(iFe,NFr),e(T4,jFr),e(T4,FH),e(FH,DFr),e(T4,GFr),e(ee,OFr),e(ee,M4),e(M4,dFe),e(dFe,VFr),e(M4,XFr),e(M4,TH),e(TH,zFr),e(M4,WFr),e(ee,QFr),e(ee,E4),e(E4,cFe),e(cFe,HFr),e(E4,UFr),e(E4,MH),e(MH,JFr),e(E4,YFr),e(ee,KFr),e(ee,C4),e(C4,fFe),e(fFe,ZFr),e(C4,e0r),e(C4,EH),e(EH,o0r),e(C4,r0r),e(ee,t0r),e(ee,w4),e(w4,mFe),e(mFe,a0r),e(w4,n0r),e(w4,CH),e(CH,s0r),e(w4,l0r),e(ee,i0r),e(ee,A4),e(A4,gFe),e(gFe,d0r),e(A4,c0r),e(A4,wH),e(wH,f0r),e(A4,m0r),e(ee,g0r),e(ee,y4),e(y4,hFe),e(hFe,h0r),e(y4,p0r),e(y4,AH),e(AH,_0r),e(y4,u0r),e(ee,b0r),e(ee,L4),e(L4,pFe),e(pFe,v0r),e(L4,F0r),e(L4,yH),e(yH,T0r),e(L4,M0r),e(ee,E0r),e(ee,x4),e(x4,_Fe),e(_Fe,C0r),e(x4,w0r),e(x4,LH),e(LH,A0r),e(x4,y0r),e(ee,L0r),e(ee,$4),e($4,uFe),e(uFe,x0r),e($4,$0r),e($4,xH),e(xH,k0r),e($4,S0r),e(ee,R0r),e(ee,k4),e(k4,bFe),e(bFe,B0r),e(k4,P0r),e(k4,$H),e($H,I0r),e(k4,q0r),e(ee,N0r),e(ee,S4),e(S4,vFe),e(vFe,j0r),e(S4,D0r),e(S4,kH),e(kH,G0r),e(S4,O0r),e(ee,V0r),e(ee,R4),e(R4,FFe),e(FFe,X0r),e(R4,z0r),e(R4,SH),e(SH,W0r),e(R4,Q0r),e(ee,H0r),e(ee,B4),e(B4,TFe),e(TFe,U0r),e(B4,J0r),e(B4,RH),e(RH,Y0r),e(B4,K0r),e(ee,Z0r),e(ee,P4),e(P4,MFe),e(MFe,eTr),e(P4,oTr),e(P4,BH),e(BH,rTr),e(P4,tTr),e(ee,aTr),e(ee,I4),e(I4,EFe),e(EFe,nTr),e(I4,sTr),e(I4,PH),e(PH,lTr),e(I4,iTr),e(ee,dTr),e(ee,q4),e(q4,CFe),e(CFe,cTr),e(q4,fTr),e(q4,IH),e(IH,mTr),e(q4,gTr),e(ee,hTr),e(ee,N4),e(N4,wFe),e(wFe,pTr),e(N4,_Tr),e(N4,qH),e(qH,uTr),e(N4,bTr),e(ee,vTr),e(ee,j4),e(j4,AFe),e(AFe,FTr),e(j4,TTr),e(j4,NH),e(NH,MTr),e(j4,ETr),e(ee,CTr),e(ee,D4),e(D4,yFe),e(yFe,wTr),e(D4,ATr),e(D4,jH),e(jH,yTr),e(D4,LTr),e(ee,xTr),e(ee,G4),e(G4,LFe),e(LFe,$Tr),e(G4,kTr),e(G4,DH),e(DH,STr),e(G4,RTr),e(ee,BTr),e(ee,O4),e(O4,xFe),e(xFe,PTr),e(O4,ITr),e(O4,GH),e(GH,qTr),e(O4,NTr),e(kr,jTr),M(V4,kr,null),b(f,NNe,u),b(f,lc,u),e(lc,X4),e(X4,$Fe),M(P8,$Fe,null),e(lc,DTr),e(lc,kFe),e(kFe,GTr),b(f,jNe,u),b(f,ar,u),M(I8,ar,null),e(ar,OTr),e(ar,ic),e(ic,VTr),e(ic,OH),e(OH,XTr),e(ic,zTr),e(ic,VH),e(VH,WTr),e(ic,QTr),e(ar,HTr),e(ar,q8),e(q8,UTr),e(q8,SFe),e(SFe,JTr),e(q8,YTr),e(ar,KTr),e(ar,Bt),M(N8,Bt,null),e(Bt,ZTr),e(Bt,RFe),e(RFe,e7r),e(Bt,o7r),e(Bt,dc),e(dc,r7r),e(dc,BFe),e(BFe,t7r),e(dc,a7r),e(dc,XH),e(XH,n7r),e(dc,s7r),e(Bt,l7r),M(z4,Bt,null),e(ar,i7r),e(ar,Sr),M(j8,Sr,null),e(Sr,d7r),e(Sr,PFe),e(PFe,c7r),e(Sr,f7r),e(Sr,sn),e(sn,m7r),e(sn,IFe),e(IFe,g7r),e(sn,h7r),e(sn,qFe),e(qFe,p7r),e(sn,_7r),e(sn,NFe),e(NFe,u7r),e(sn,b7r),e(Sr,v7r),e(Sr,he),e(he,W4),e(W4,jFe),e(jFe,F7r),e(W4,T7r),e(W4,zH),e(zH,M7r),e(W4,E7r),e(he,C7r),e(he,Q4),e(Q4,DFe),e(DFe,w7r),e(Q4,A7r),e(Q4,WH),e(WH,y7r),e(Q4,L7r),e(he,x7r),e(he,H4),e(H4,GFe),e(GFe,$7r),e(H4,k7r),e(H4,QH),e(QH,S7r),e(H4,R7r),e(he,B7r),e(he,U4),e(U4,OFe),e(OFe,P7r),e(U4,I7r),e(U4,HH),e(HH,q7r),e(U4,N7r),e(he,j7r),e(he,J4),e(J4,VFe),e(VFe,D7r),e(J4,G7r),e(J4,UH),e(UH,O7r),e(J4,V7r),e(he,X7r),e(he,Y4),e(Y4,XFe),e(XFe,z7r),e(Y4,W7r),e(Y4,JH),e(JH,Q7r),e(Y4,H7r),e(he,U7r),e(he,K4),e(K4,zFe),e(zFe,J7r),e(K4,Y7r),e(K4,YH),e(YH,K7r),e(K4,Z7r),e(he,eMr),e(he,Z4),e(Z4,WFe),e(WFe,oMr),e(Z4,rMr),e(Z4,KH),e(KH,tMr),e(Z4,aMr),e(he,nMr),e(he,eE),e(eE,QFe),e(QFe,sMr),e(eE,lMr),e(eE,ZH),e(ZH,iMr),e(eE,dMr),e(he,cMr),e(he,oE),e(oE,HFe),e(HFe,fMr),e(oE,mMr),e(oE,eU),e(eU,gMr),e(oE,hMr),e(he,pMr),e(he,rE),e(rE,UFe),e(UFe,_Mr),e(rE,uMr),e(rE,oU),e(oU,bMr),e(rE,vMr),e(he,FMr),e(he,tE),e(tE,JFe),e(JFe,TMr),e(tE,MMr),e(tE,rU),e(rU,EMr),e(tE,CMr),e(he,wMr),e(he,aE),e(aE,YFe),e(YFe,AMr),e(aE,yMr),e(aE,tU),e(tU,LMr),e(aE,xMr),e(he,$Mr),e(he,nE),e(nE,KFe),e(KFe,kMr),e(nE,SMr),e(nE,aU),e(aU,RMr),e(nE,BMr),e(he,PMr),e(he,sE),e(sE,ZFe),e(ZFe,IMr),e(sE,qMr),e(sE,nU),e(nU,NMr),e(sE,jMr),e(he,DMr),e(he,lE),e(lE,e0e),e(e0e,GMr),e(lE,OMr),e(lE,sU),e(sU,VMr),e(lE,XMr),e(he,zMr),e(he,iE),e(iE,o0e),e(o0e,WMr),e(iE,QMr),e(iE,lU),e(lU,HMr),e(iE,UMr),e(Sr,JMr),M(dE,Sr,null),b(f,DNe,u),b(f,cc,u),e(cc,cE),e(cE,r0e),M(D8,r0e,null),e(cc,YMr),e(cc,t0e),e(t0e,KMr),b(f,GNe,u),b(f,nr,u),M(G8,nr,null),e(nr,ZMr),e(nr,fc),e(fc,e4r),e(fc,iU),e(iU,o4r),e(fc,r4r),e(fc,dU),e(dU,t4r),e(fc,a4r),e(nr,n4r),e(nr,O8),e(O8,s4r),e(O8,a0e),e(a0e,l4r),e(O8,i4r),e(nr,d4r),e(nr,Pt),M(V8,Pt,null),e(Pt,c4r),e(Pt,n0e),e(n0e,f4r),e(Pt,m4r),e(Pt,mc),e(mc,g4r),e(mc,s0e),e(s0e,h4r),e(mc,p4r),e(mc,cU),e(cU,_4r),e(mc,u4r),e(Pt,b4r),M(fE,Pt,null),e(nr,v4r),e(nr,Rr),M(X8,Rr,null),e(Rr,F4r),e(Rr,l0e),e(l0e,T4r),e(Rr,M4r),e(Rr,ln),e(ln,E4r),e(ln,i0e),e(i0e,C4r),e(ln,w4r),e(ln,d0e),e(d0e,A4r),e(ln,y4r),e(ln,c0e),e(c0e,L4r),e(ln,x4r),e(Rr,$4r),e(Rr,z8),e(z8,mE),e(mE,f0e),e(f0e,k4r),e(mE,S4r),e(mE,fU),e(fU,R4r),e(mE,B4r),e(z8,P4r),e(z8,gE),e(gE,m0e),e(m0e,I4r),e(gE,q4r),e(gE,mU),e(mU,N4r),e(gE,j4r),e(Rr,D4r),M(hE,Rr,null),b(f,ONe,u),b(f,gc,u),e(gc,pE),e(pE,g0e),M(W8,g0e,null),e(gc,G4r),e(gc,h0e),e(h0e,O4r),b(f,VNe,u),b(f,sr,u),M(Q8,sr,null),e(sr,V4r),e(sr,hc),e(hc,X4r),e(hc,gU),e(gU,z4r),e(hc,W4r),e(hc,hU),e(hU,Q4r),e(hc,H4r),e(sr,U4r),e(sr,H8),e(H8,J4r),e(H8,p0e),e(p0e,Y4r),e(H8,K4r),e(sr,Z4r),e(sr,It),M(U8,It,null),e(It,eEr),e(It,_0e),e(_0e,oEr),e(It,rEr),e(It,pc),e(pc,tEr),e(pc,u0e),e(u0e,aEr),e(pc,nEr),e(pc,pU),e(pU,sEr),e(pc,lEr),e(It,iEr),M(_E,It,null),e(sr,dEr),e(sr,Br),M(J8,Br,null),e(Br,cEr),e(Br,b0e),e(b0e,fEr),e(Br,mEr),e(Br,dn),e(dn,gEr),e(dn,v0e),e(v0e,hEr),e(dn,pEr),e(dn,F0e),e(F0e,_Er),e(dn,uEr),e(dn,T0e),e(T0e,bEr),e(dn,vEr),e(Br,FEr),e(Br,M0e),e(M0e,uE),e(uE,E0e),e(E0e,TEr),e(uE,MEr),e(uE,_U),e(_U,EEr),e(uE,CEr),e(Br,wEr),M(bE,Br,null),b(f,XNe,u),b(f,_c,u),e(_c,vE),e(vE,C0e),M(Y8,C0e,null),e(_c,AEr),e(_c,w0e),e(w0e,yEr),b(f,zNe,u),b(f,lr,u),M(K8,lr,null),e(lr,LEr),e(lr,uc),e(uc,xEr),e(uc,uU),e(uU,$Er),e(uc,kEr),e(uc,bU),e(bU,SEr),e(uc,REr),e(lr,BEr),e(lr,Z8),e(Z8,PEr),e(Z8,A0e),e(A0e,IEr),e(Z8,qEr),e(lr,NEr),e(lr,qt),M(e9,qt,null),e(qt,jEr),e(qt,y0e),e(y0e,DEr),e(qt,GEr),e(qt,bc),e(bc,OEr),e(bc,L0e),e(L0e,VEr),e(bc,XEr),e(bc,vU),e(vU,zEr),e(bc,WEr),e(qt,QEr),M(FE,qt,null),e(lr,HEr),e(lr,Pr),M(o9,Pr,null),e(Pr,UEr),e(Pr,x0e),e(x0e,JEr),e(Pr,YEr),e(Pr,cn),e(cn,KEr),e(cn,$0e),e($0e,ZEr),e(cn,eCr),e(cn,k0e),e(k0e,oCr),e(cn,rCr),e(cn,S0e),e(S0e,tCr),e(cn,aCr),e(Pr,nCr),e(Pr,de),e(de,TE),e(TE,R0e),e(R0e,sCr),e(TE,lCr),e(TE,FU),e(FU,iCr),e(TE,dCr),e(de,cCr),e(de,ME),e(ME,B0e),e(B0e,fCr),e(ME,mCr),e(ME,TU),e(TU,gCr),e(ME,hCr),e(de,pCr),e(de,EE),e(EE,P0e),e(P0e,_Cr),e(EE,uCr),e(EE,MU),e(MU,bCr),e(EE,vCr),e(de,FCr),e(de,CE),e(CE,I0e),e(I0e,TCr),e(CE,MCr),e(CE,EU),e(EU,ECr),e(CE,CCr),e(de,wCr),e(de,wE),e(wE,q0e),e(q0e,ACr),e(wE,yCr),e(wE,CU),e(CU,LCr),e(wE,xCr),e(de,$Cr),e(de,AE),e(AE,N0e),e(N0e,kCr),e(AE,SCr),e(AE,wU),e(wU,RCr),e(AE,BCr),e(de,PCr),e(de,yE),e(yE,j0e),e(j0e,ICr),e(yE,qCr),e(yE,AU),e(AU,NCr),e(yE,jCr),e(de,DCr),e(de,LE),e(LE,D0e),e(D0e,GCr),e(LE,OCr),e(LE,yU),e(yU,VCr),e(LE,XCr),e(de,zCr),e(de,xE),e(xE,G0e),e(G0e,WCr),e(xE,QCr),e(xE,LU),e(LU,HCr),e(xE,UCr),e(de,JCr),e(de,$E),e($E,O0e),e(O0e,YCr),e($E,KCr),e($E,xU),e(xU,ZCr),e($E,e5r),e(de,o5r),e(de,kE),e(kE,V0e),e(V0e,r5r),e(kE,t5r),e(kE,$U),e($U,a5r),e(kE,n5r),e(de,s5r),e(de,SE),e(SE,X0e),e(X0e,l5r),e(SE,i5r),e(SE,kU),e(kU,d5r),e(SE,c5r),e(de,f5r),e(de,RE),e(RE,z0e),e(z0e,m5r),e(RE,g5r),e(RE,SU),e(SU,h5r),e(RE,p5r),e(de,_5r),e(de,BE),e(BE,W0e),e(W0e,u5r),e(BE,b5r),e(BE,RU),e(RU,v5r),e(BE,F5r),e(de,T5r),e(de,PE),e(PE,Q0e),e(Q0e,M5r),e(PE,E5r),e(PE,BU),e(BU,C5r),e(PE,w5r),e(de,A5r),e(de,IE),e(IE,H0e),e(H0e,y5r),e(IE,L5r),e(IE,PU),e(PU,x5r),e(IE,$5r),e(de,k5r),e(de,qE),e(qE,U0e),e(U0e,S5r),e(qE,R5r),e(qE,IU),e(IU,B5r),e(qE,P5r),e(de,I5r),e(de,NE),e(NE,J0e),e(J0e,q5r),e(NE,N5r),e(NE,qU),e(qU,j5r),e(NE,D5r),e(de,G5r),e(de,jE),e(jE,Y0e),e(Y0e,O5r),e(jE,V5r),e(jE,NU),e(NU,X5r),e(jE,z5r),e(de,W5r),e(de,DE),e(DE,K0e),e(K0e,Q5r),e(DE,H5r),e(DE,jU),e(jU,U5r),e(DE,J5r),e(Pr,Y5r),M(GE,Pr,null),b(f,WNe,u),b(f,vc,u),e(vc,OE),e(OE,Z0e),M(r9,Z0e,null),e(vc,K5r),e(vc,eTe),e(eTe,Z5r),b(f,QNe,u),b(f,ir,u),M(t9,ir,null),e(ir,e3r),e(ir,Fc),e(Fc,o3r),e(Fc,DU),e(DU,r3r),e(Fc,t3r),e(Fc,GU),e(GU,a3r),e(Fc,n3r),e(ir,s3r),e(ir,a9),e(a9,l3r),e(a9,oTe),e(oTe,i3r),e(a9,d3r),e(ir,c3r),e(ir,Nt),M(n9,Nt,null),e(Nt,f3r),e(Nt,rTe),e(rTe,m3r),e(Nt,g3r),e(Nt,Tc),e(Tc,h3r),e(Tc,tTe),e(tTe,p3r),e(Tc,_3r),e(Tc,OU),e(OU,u3r),e(Tc,b3r),e(Nt,v3r),M(VE,Nt,null),e(ir,F3r),e(ir,Ir),M(s9,Ir,null),e(Ir,T3r),e(Ir,aTe),e(aTe,M3r),e(Ir,E3r),e(Ir,fn),e(fn,C3r),e(fn,nTe),e(nTe,w3r),e(fn,A3r),e(fn,sTe),e(sTe,y3r),e(fn,L3r),e(fn,lTe),e(lTe,x3r),e(fn,$3r),e(Ir,k3r),e(Ir,ce),e(ce,XE),e(XE,iTe),e(iTe,S3r),e(XE,R3r),e(XE,VU),e(VU,B3r),e(XE,P3r),e(ce,I3r),e(ce,zE),e(zE,dTe),e(dTe,q3r),e(zE,N3r),e(zE,XU),e(XU,j3r),e(zE,D3r),e(ce,G3r),e(ce,WE),e(WE,cTe),e(cTe,O3r),e(WE,V3r),e(WE,zU),e(zU,X3r),e(WE,z3r),e(ce,W3r),e(ce,QE),e(QE,fTe),e(fTe,Q3r),e(QE,H3r),e(QE,WU),e(WU,U3r),e(QE,J3r),e(ce,Y3r),e(ce,HE),e(HE,mTe),e(mTe,K3r),e(HE,Z3r),e(HE,QU),e(QU,ewr),e(HE,owr),e(ce,rwr),e(ce,UE),e(UE,gTe),e(gTe,twr),e(UE,awr),e(UE,HU),e(HU,nwr),e(UE,swr),e(ce,lwr),e(ce,JE),e(JE,hTe),e(hTe,iwr),e(JE,dwr),e(JE,UU),e(UU,cwr),e(JE,fwr),e(ce,mwr),e(ce,YE),e(YE,pTe),e(pTe,gwr),e(YE,hwr),e(YE,JU),e(JU,pwr),e(YE,_wr),e(ce,uwr),e(ce,KE),e(KE,_Te),e(_Te,bwr),e(KE,vwr),e(KE,YU),e(YU,Fwr),e(KE,Twr),e(ce,Mwr),e(ce,ZE),e(ZE,uTe),e(uTe,Ewr),e(ZE,Cwr),e(ZE,KU),e(KU,wwr),e(ZE,Awr),e(ce,ywr),e(ce,eC),e(eC,bTe),e(bTe,Lwr),e(eC,xwr),e(eC,ZU),e(ZU,$wr),e(eC,kwr),e(ce,Swr),e(ce,oC),e(oC,vTe),e(vTe,Rwr),e(oC,Bwr),e(oC,eJ),e(eJ,Pwr),e(oC,Iwr),e(ce,qwr),e(ce,rC),e(rC,FTe),e(FTe,Nwr),e(rC,jwr),e(rC,oJ),e(oJ,Dwr),e(rC,Gwr),e(ce,Owr),e(ce,tC),e(tC,TTe),e(TTe,Vwr),e(tC,Xwr),e(tC,rJ),e(rJ,zwr),e(tC,Wwr),e(ce,Qwr),e(ce,aC),e(aC,MTe),e(MTe,Hwr),e(aC,Uwr),e(aC,tJ),e(tJ,Jwr),e(aC,Ywr),e(ce,Kwr),e(ce,nC),e(nC,ETe),e(ETe,Zwr),e(nC,e6r),e(nC,aJ),e(aJ,o6r),e(nC,r6r),e(ce,t6r),e(ce,sC),e(sC,CTe),e(CTe,a6r),e(sC,n6r),e(sC,nJ),e(nJ,s6r),e(sC,l6r),e(ce,i6r),e(ce,lC),e(lC,wTe),e(wTe,d6r),e(lC,c6r),e(lC,sJ),e(sJ,f6r),e(lC,m6r),e(ce,g6r),e(ce,iC),e(iC,ATe),e(ATe,h6r),e(iC,p6r),e(iC,lJ),e(lJ,_6r),e(iC,u6r),e(ce,b6r),e(ce,dC),e(dC,yTe),e(yTe,v6r),e(dC,F6r),e(dC,iJ),e(iJ,T6r),e(dC,M6r),e(Ir,E6r),M(cC,Ir,null),b(f,HNe,u),b(f,Mc,u),e(Mc,fC),e(fC,LTe),M(l9,LTe,null),e(Mc,C6r),e(Mc,xTe),e(xTe,w6r),b(f,UNe,u),b(f,dr,u),M(i9,dr,null),e(dr,A6r),e(dr,Ec),e(Ec,y6r),e(Ec,dJ),e(dJ,L6r),e(Ec,x6r),e(Ec,cJ),e(cJ,$6r),e(Ec,k6r),e(dr,S6r),e(dr,d9),e(d9,R6r),e(d9,$Te),e($Te,B6r),e(d9,P6r),e(dr,I6r),e(dr,jt),M(c9,jt,null),e(jt,q6r),e(jt,kTe),e(kTe,N6r),e(jt,j6r),e(jt,Cc),e(Cc,D6r),e(Cc,STe),e(STe,G6r),e(Cc,O6r),e(Cc,fJ),e(fJ,V6r),e(Cc,X6r),e(jt,z6r),M(mC,jt,null),e(dr,W6r),e(dr,qr),M(f9,qr,null),e(qr,Q6r),e(qr,RTe),e(RTe,H6r),e(qr,U6r),e(qr,mn),e(mn,J6r),e(mn,BTe),e(BTe,Y6r),e(mn,K6r),e(mn,PTe),e(PTe,Z6r),e(mn,eAr),e(mn,ITe),e(ITe,oAr),e(mn,rAr),e(qr,tAr),e(qr,qTe),e(qTe,gC),e(gC,NTe),e(NTe,aAr),e(gC,nAr),e(gC,mJ),e(mJ,sAr),e(gC,lAr),e(qr,iAr),M(hC,qr,null),b(f,JNe,u),b(f,wc,u),e(wc,pC),e(pC,jTe),M(m9,jTe,null),e(wc,dAr),e(wc,DTe),e(DTe,cAr),b(f,YNe,u),b(f,cr,u),M(g9,cr,null),e(cr,fAr),e(cr,Ac),e(Ac,mAr),e(Ac,gJ),e(gJ,gAr),e(Ac,hAr),e(Ac,hJ),e(hJ,pAr),e(Ac,_Ar),e(cr,uAr),e(cr,h9),e(h9,bAr),e(h9,GTe),e(GTe,vAr),e(h9,FAr),e(cr,TAr),e(cr,Dt),M(p9,Dt,null),e(Dt,MAr),e(Dt,OTe),e(OTe,EAr),e(Dt,CAr),e(Dt,yc),e(yc,wAr),e(yc,VTe),e(VTe,AAr),e(yc,yAr),e(yc,pJ),e(pJ,LAr),e(yc,xAr),e(Dt,$Ar),M(_C,Dt,null),e(cr,kAr),e(cr,Nr),M(_9,Nr,null),e(Nr,SAr),e(Nr,XTe),e(XTe,RAr),e(Nr,BAr),e(Nr,gn),e(gn,PAr),e(gn,zTe),e(zTe,IAr),e(gn,qAr),e(gn,WTe),e(WTe,NAr),e(gn,jAr),e(gn,QTe),e(QTe,DAr),e(gn,GAr),e(Nr,OAr),e(Nr,HTe),e(HTe,uC),e(uC,UTe),e(UTe,VAr),e(uC,XAr),e(uC,_J),e(_J,zAr),e(uC,WAr),e(Nr,QAr),M(bC,Nr,null),b(f,KNe,u),b(f,Lc,u),e(Lc,vC),e(vC,JTe),M(u9,JTe,null),e(Lc,HAr),e(Lc,YTe),e(YTe,UAr),b(f,ZNe,u),b(f,fr,u),M(b9,fr,null),e(fr,JAr),e(fr,xc),e(xc,YAr),e(xc,uJ),e(uJ,KAr),e(xc,ZAr),e(xc,bJ),e(bJ,eyr),e(xc,oyr),e(fr,ryr),e(fr,v9),e(v9,tyr),e(v9,KTe),e(KTe,ayr),e(v9,nyr),e(fr,syr),e(fr,Gt),M(F9,Gt,null),e(Gt,lyr),e(Gt,ZTe),e(ZTe,iyr),e(Gt,dyr),e(Gt,$c),e($c,cyr),e($c,e7e),e(e7e,fyr),e($c,myr),e($c,vJ),e(vJ,gyr),e($c,hyr),e(Gt,pyr),M(FC,Gt,null),e(fr,_yr),e(fr,jr),M(T9,jr,null),e(jr,uyr),e(jr,o7e),e(o7e,byr),e(jr,vyr),e(jr,hn),e(hn,Fyr),e(hn,r7e),e(r7e,Tyr),e(hn,Myr),e(hn,t7e),e(t7e,Eyr),e(hn,Cyr),e(hn,a7e),e(a7e,wyr),e(hn,Ayr),e(jr,yyr),e(jr,te),e(te,TC),e(TC,n7e),e(n7e,Lyr),e(TC,xyr),e(TC,FJ),e(FJ,$yr),e(TC,kyr),e(te,Syr),e(te,MC),e(MC,s7e),e(s7e,Ryr),e(MC,Byr),e(MC,TJ),e(TJ,Pyr),e(MC,Iyr),e(te,qyr),e(te,EC),e(EC,l7e),e(l7e,Nyr),e(EC,jyr),e(EC,MJ),e(MJ,Dyr),e(EC,Gyr),e(te,Oyr),e(te,CC),e(CC,i7e),e(i7e,Vyr),e(CC,Xyr),e(CC,EJ),e(EJ,zyr),e(CC,Wyr),e(te,Qyr),e(te,wC),e(wC,d7e),e(d7e,Hyr),e(wC,Uyr),e(wC,CJ),e(CJ,Jyr),e(wC,Yyr),e(te,Kyr),e(te,AC),e(AC,c7e),e(c7e,Zyr),e(AC,eLr),e(AC,wJ),e(wJ,oLr),e(AC,rLr),e(te,tLr),e(te,yC),e(yC,f7e),e(f7e,aLr),e(yC,nLr),e(yC,AJ),e(AJ,sLr),e(yC,lLr),e(te,iLr),e(te,LC),e(LC,m7e),e(m7e,dLr),e(LC,cLr),e(LC,yJ),e(yJ,fLr),e(LC,mLr),e(te,gLr),e(te,xC),e(xC,g7e),e(g7e,hLr),e(xC,pLr),e(xC,LJ),e(LJ,_Lr),e(xC,uLr),e(te,bLr),e(te,$C),e($C,h7e),e(h7e,vLr),e($C,FLr),e($C,xJ),e(xJ,TLr),e($C,MLr),e(te,ELr),e(te,kC),e(kC,p7e),e(p7e,CLr),e(kC,wLr),e(kC,$J),e($J,ALr),e(kC,yLr),e(te,LLr),e(te,SC),e(SC,_7e),e(_7e,xLr),e(SC,$Lr),e(SC,kJ),e(kJ,kLr),e(SC,SLr),e(te,RLr),e(te,RC),e(RC,u7e),e(u7e,BLr),e(RC,PLr),e(RC,SJ),e(SJ,ILr),e(RC,qLr),e(te,NLr),e(te,BC),e(BC,b7e),e(b7e,jLr),e(BC,DLr),e(BC,RJ),e(RJ,GLr),e(BC,OLr),e(te,VLr),e(te,PC),e(PC,v7e),e(v7e,XLr),e(PC,zLr),e(PC,BJ),e(BJ,WLr),e(PC,QLr),e(te,HLr),e(te,IC),e(IC,F7e),e(F7e,ULr),e(IC,JLr),e(IC,PJ),e(PJ,YLr),e(IC,KLr),e(te,ZLr),e(te,qC),e(qC,T7e),e(T7e,e8r),e(qC,o8r),e(qC,IJ),e(IJ,r8r),e(qC,t8r),e(te,a8r),e(te,NC),e(NC,M7e),e(M7e,n8r),e(NC,s8r),e(NC,qJ),e(qJ,l8r),e(NC,i8r),e(te,d8r),e(te,jC),e(jC,E7e),e(E7e,c8r),e(jC,f8r),e(jC,NJ),e(NJ,m8r),e(jC,g8r),e(te,h8r),e(te,DC),e(DC,C7e),e(C7e,p8r),e(DC,_8r),e(DC,jJ),e(jJ,u8r),e(DC,b8r),e(te,v8r),e(te,GC),e(GC,w7e),e(w7e,F8r),e(GC,T8r),e(GC,DJ),e(DJ,M8r),e(GC,E8r),e(te,C8r),e(te,OC),e(OC,A7e),e(A7e,w8r),e(OC,A8r),e(OC,GJ),e(GJ,y8r),e(OC,L8r),e(te,x8r),e(te,VC),e(VC,y7e),e(y7e,$8r),e(VC,k8r),e(VC,OJ),e(OJ,S8r),e(VC,R8r),e(te,B8r),e(te,XC),e(XC,L7e),e(L7e,P8r),e(XC,I8r),e(XC,VJ),e(VJ,q8r),e(XC,N8r),e(te,j8r),e(te,zC),e(zC,x7e),e(x7e,D8r),e(zC,G8r),e(zC,XJ),e(XJ,O8r),e(zC,V8r),e(jr,X8r),M(WC,jr,null),b(f,eje,u),b(f,kc,u),e(kc,QC),e(QC,$7e),M(M9,$7e,null),e(kc,z8r),e(kc,k7e),e(k7e,W8r),b(f,oje,u),b(f,mr,u),M(E9,mr,null),e(mr,Q8r),e(mr,Sc),e(Sc,H8r),e(Sc,zJ),e(zJ,U8r),e(Sc,J8r),e(Sc,WJ),e(WJ,Y8r),e(Sc,K8r),e(mr,Z8r),e(mr,C9),e(C9,e9r),e(C9,S7e),e(S7e,o9r),e(C9,r9r),e(mr,t9r),e(mr,Ot),M(w9,Ot,null),e(Ot,a9r),e(Ot,R7e),e(R7e,n9r),e(Ot,s9r),e(Ot,Rc),e(Rc,l9r),e(Rc,B7e),e(B7e,i9r),e(Rc,d9r),e(Rc,QJ),e(QJ,c9r),e(Rc,f9r),e(Ot,m9r),M(HC,Ot,null),e(mr,g9r),e(mr,Dr),M(A9,Dr,null),e(Dr,h9r),e(Dr,P7e),e(P7e,p9r),e(Dr,_9r),e(Dr,pn),e(pn,u9r),e(pn,I7e),e(I7e,b9r),e(pn,v9r),e(pn,q7e),e(q7e,F9r),e(pn,T9r),e(pn,N7e),e(N7e,M9r),e(pn,E9r),e(Dr,C9r),e(Dr,Re),e(Re,UC),e(UC,j7e),e(j7e,w9r),e(UC,A9r),e(UC,HJ),e(HJ,y9r),e(UC,L9r),e(Re,x9r),e(Re,JC),e(JC,D7e),e(D7e,$9r),e(JC,k9r),e(JC,UJ),e(UJ,S9r),e(JC,R9r),e(Re,B9r),e(Re,YC),e(YC,G7e),e(G7e,P9r),e(YC,I9r),e(YC,JJ),e(JJ,q9r),e(YC,N9r),e(Re,j9r),e(Re,KC),e(KC,O7e),e(O7e,D9r),e(KC,G9r),e(KC,YJ),e(YJ,O9r),e(KC,V9r),e(Re,X9r),e(Re,ZC),e(ZC,V7e),e(V7e,z9r),e(ZC,W9r),e(ZC,KJ),e(KJ,Q9r),e(ZC,H9r),e(Re,U9r),e(Re,e5),e(e5,X7e),e(X7e,J9r),e(e5,Y9r),e(e5,ZJ),e(ZJ,K9r),e(e5,Z9r),e(Re,exr),e(Re,o5),e(o5,z7e),e(z7e,oxr),e(o5,rxr),e(o5,eY),e(eY,txr),e(o5,axr),e(Re,nxr),e(Re,r5),e(r5,W7e),e(W7e,sxr),e(r5,lxr),e(r5,oY),e(oY,ixr),e(r5,dxr),e(Re,cxr),e(Re,t5),e(t5,Q7e),e(Q7e,fxr),e(t5,mxr),e(t5,rY),e(rY,gxr),e(t5,hxr),e(Dr,pxr),M(a5,Dr,null),b(f,rje,u),b(f,Bc,u),e(Bc,n5),e(n5,H7e),M(y9,H7e,null),e(Bc,_xr),e(Bc,U7e),e(U7e,uxr),b(f,tje,u),b(f,gr,u),M(L9,gr,null),e(gr,bxr),e(gr,Pc),e(Pc,vxr),e(Pc,tY),e(tY,Fxr),e(Pc,Txr),e(Pc,aY),e(aY,Mxr),e(Pc,Exr),e(gr,Cxr),e(gr,x9),e(x9,wxr),e(x9,J7e),e(J7e,Axr),e(x9,yxr),e(gr,Lxr),e(gr,Vt),M($9,Vt,null),e(Vt,xxr),e(Vt,Y7e),e(Y7e,$xr),e(Vt,kxr),e(Vt,Ic),e(Ic,Sxr),e(Ic,K7e),e(K7e,Rxr),e(Ic,Bxr),e(Ic,nY),e(nY,Pxr),e(Ic,Ixr),e(Vt,qxr),M(s5,Vt,null),e(gr,Nxr),e(gr,Gr),M(k9,Gr,null),e(Gr,jxr),e(Gr,Z7e),e(Z7e,Dxr),e(Gr,Gxr),e(Gr,_n),e(_n,Oxr),e(_n,eMe),e(eMe,Vxr),e(_n,Xxr),e(_n,oMe),e(oMe,zxr),e(_n,Wxr),e(_n,rMe),e(rMe,Qxr),e(_n,Hxr),e(Gr,Uxr),e(Gr,Ee),e(Ee,l5),e(l5,tMe),e(tMe,Jxr),e(l5,Yxr),e(l5,sY),e(sY,Kxr),e(l5,Zxr),e(Ee,e$r),e(Ee,i5),e(i5,aMe),e(aMe,o$r),e(i5,r$r),e(i5,lY),e(lY,t$r),e(i5,a$r),e(Ee,n$r),e(Ee,d5),e(d5,nMe),e(nMe,s$r),e(d5,l$r),e(d5,iY),e(iY,i$r),e(d5,d$r),e(Ee,c$r),e(Ee,c5),e(c5,sMe),e(sMe,f$r),e(c5,m$r),e(c5,dY),e(dY,g$r),e(c5,h$r),e(Ee,p$r),e(Ee,f5),e(f5,lMe),e(lMe,_$r),e(f5,u$r),e(f5,cY),e(cY,b$r),e(f5,v$r),e(Ee,F$r),e(Ee,m5),e(m5,iMe),e(iMe,T$r),e(m5,M$r),e(m5,fY),e(fY,E$r),e(m5,C$r),e(Ee,w$r),e(Ee,g5),e(g5,dMe),e(dMe,A$r),e(g5,y$r),e(g5,mY),e(mY,L$r),e(g5,x$r),e(Ee,$$r),e(Ee,h5),e(h5,cMe),e(cMe,k$r),e(h5,S$r),e(h5,gY),e(gY,R$r),e(h5,B$r),e(Ee,P$r),e(Ee,p5),e(p5,fMe),e(fMe,I$r),e(p5,q$r),e(p5,hY),e(hY,N$r),e(p5,j$r),e(Ee,D$r),e(Ee,_5),e(_5,mMe),e(mMe,G$r),e(_5,O$r),e(_5,pY),e(pY,V$r),e(_5,X$r),e(Ee,z$r),e(Ee,u5),e(u5,gMe),e(gMe,W$r),e(u5,Q$r),e(u5,_Y),e(_Y,H$r),e(u5,U$r),e(Ee,J$r),e(Ee,b5),e(b5,hMe),e(hMe,Y$r),e(b5,K$r),e(b5,uY),e(uY,Z$r),e(b5,ekr),e(Gr,okr),M(v5,Gr,null),b(f,aje,u),b(f,qc,u),e(qc,F5),e(F5,pMe),M(S9,pMe,null),e(qc,rkr),e(qc,_Me),e(_Me,tkr),b(f,nje,u),b(f,hr,u),M(R9,hr,null),e(hr,akr),e(hr,Nc),e(Nc,nkr),e(Nc,bY),e(bY,skr),e(Nc,lkr),e(Nc,vY),e(vY,ikr),e(Nc,dkr),e(hr,ckr),e(hr,B9),e(B9,fkr),e(B9,uMe),e(uMe,mkr),e(B9,gkr),e(hr,hkr),e(hr,Xt),M(P9,Xt,null),e(Xt,pkr),e(Xt,bMe),e(bMe,_kr),e(Xt,ukr),e(Xt,jc),e(jc,bkr),e(jc,vMe),e(vMe,vkr),e(jc,Fkr),e(jc,FY),e(FY,Tkr),e(jc,Mkr),e(Xt,Ekr),M(T5,Xt,null),e(hr,Ckr),e(hr,Or),M(I9,Or,null),e(Or,wkr),e(Or,FMe),e(FMe,Akr),e(Or,ykr),e(Or,un),e(un,Lkr),e(un,TMe),e(TMe,xkr),e(un,$kr),e(un,MMe),e(MMe,kkr),e(un,Skr),e(un,EMe),e(EMe,Rkr),e(un,Bkr),e(Or,Pkr),e(Or,Le),e(Le,M5),e(M5,CMe),e(CMe,Ikr),e(M5,qkr),e(M5,TY),e(TY,Nkr),e(M5,jkr),e(Le,Dkr),e(Le,E5),e(E5,wMe),e(wMe,Gkr),e(E5,Okr),e(E5,MY),e(MY,Vkr),e(E5,Xkr),e(Le,zkr),e(Le,C5),e(C5,AMe),e(AMe,Wkr),e(C5,Qkr),e(C5,EY),e(EY,Hkr),e(C5,Ukr),e(Le,Jkr),e(Le,w5),e(w5,yMe),e(yMe,Ykr),e(w5,Kkr),e(w5,CY),e(CY,Zkr),e(w5,eSr),e(Le,oSr),e(Le,A5),e(A5,LMe),e(LMe,rSr),e(A5,tSr),e(A5,wY),e(wY,aSr),e(A5,nSr),e(Le,sSr),e(Le,y5),e(y5,xMe),e(xMe,lSr),e(y5,iSr),e(y5,AY),e(AY,dSr),e(y5,cSr),e(Le,fSr),e(Le,L5),e(L5,$Me),e($Me,mSr),e(L5,gSr),e(L5,yY),e(yY,hSr),e(L5,pSr),e(Le,_Sr),e(Le,x5),e(x5,kMe),e(kMe,uSr),e(x5,bSr),e(x5,LY),e(LY,vSr),e(x5,FSr),e(Le,TSr),e(Le,$5),e($5,SMe),e(SMe,MSr),e($5,ESr),e($5,xY),e(xY,CSr),e($5,wSr),e(Le,ASr),e(Le,k5),e(k5,RMe),e(RMe,ySr),e(k5,LSr),e(k5,$Y),e($Y,xSr),e(k5,$Sr),e(Or,kSr),M(S5,Or,null),b(f,sje,u),b(f,Dc,u),e(Dc,R5),e(R5,BMe),M(q9,BMe,null),e(Dc,SSr),e(Dc,PMe),e(PMe,RSr),b(f,lje,u),b(f,pr,u),M(N9,pr,null),e(pr,BSr),e(pr,Gc),e(Gc,PSr),e(Gc,kY),e(kY,ISr),e(Gc,qSr),e(Gc,SY),e(SY,NSr),e(Gc,jSr),e(pr,DSr),e(pr,j9),e(j9,GSr),e(j9,IMe),e(IMe,OSr),e(j9,VSr),e(pr,XSr),e(pr,zt),M(D9,zt,null),e(zt,zSr),e(zt,qMe),e(qMe,WSr),e(zt,QSr),e(zt,Oc),e(Oc,HSr),e(Oc,NMe),e(NMe,USr),e(Oc,JSr),e(Oc,RY),e(RY,YSr),e(Oc,KSr),e(zt,ZSr),M(B5,zt,null),e(pr,eRr),e(pr,Vr),M(G9,Vr,null),e(Vr,oRr),e(Vr,jMe),e(jMe,rRr),e(Vr,tRr),e(Vr,bn),e(bn,aRr),e(bn,DMe),e(DMe,nRr),e(bn,sRr),e(bn,GMe),e(GMe,lRr),e(bn,iRr),e(bn,OMe),e(OMe,dRr),e(bn,cRr),e(Vr,fRr),e(Vr,Be),e(Be,P5),e(P5,VMe),e(VMe,mRr),e(P5,gRr),e(P5,BY),e(BY,hRr),e(P5,pRr),e(Be,_Rr),e(Be,I5),e(I5,XMe),e(XMe,uRr),e(I5,bRr),e(I5,PY),e(PY,vRr),e(I5,FRr),e(Be,TRr),e(Be,q5),e(q5,zMe),e(zMe,MRr),e(q5,ERr),e(q5,IY),e(IY,CRr),e(q5,wRr),e(Be,ARr),e(Be,N5),e(N5,WMe),e(WMe,yRr),e(N5,LRr),e(N5,qY),e(qY,xRr),e(N5,$Rr),e(Be,kRr),e(Be,j5),e(j5,QMe),e(QMe,SRr),e(j5,RRr),e(j5,NY),e(NY,BRr),e(j5,PRr),e(Be,IRr),e(Be,D5),e(D5,HMe),e(HMe,qRr),e(D5,NRr),e(D5,jY),e(jY,jRr),e(D5,DRr),e(Be,GRr),e(Be,G5),e(G5,UMe),e(UMe,ORr),e(G5,VRr),e(G5,DY),e(DY,XRr),e(G5,zRr),e(Be,WRr),e(Be,O5),e(O5,JMe),e(JMe,QRr),e(O5,HRr),e(O5,GY),e(GY,URr),e(O5,JRr),e(Be,YRr),e(Be,V5),e(V5,YMe),e(YMe,KRr),e(V5,ZRr),e(V5,OY),e(OY,eBr),e(V5,oBr),e(Vr,rBr),M(X5,Vr,null),b(f,ije,u),b(f,Vc,u),e(Vc,z5),e(z5,KMe),M(O9,KMe,null),e(Vc,tBr),e(Vc,ZMe),e(ZMe,aBr),b(f,dje,u),b(f,_r,u),M(V9,_r,null),e(_r,nBr),e(_r,Xc),e(Xc,sBr),e(Xc,VY),e(VY,lBr),e(Xc,iBr),e(Xc,XY),e(XY,dBr),e(Xc,cBr),e(_r,fBr),e(_r,X9),e(X9,mBr),e(X9,e4e),e(e4e,gBr),e(X9,hBr),e(_r,pBr),e(_r,Wt),M(z9,Wt,null),e(Wt,_Br),e(Wt,o4e),e(o4e,uBr),e(Wt,bBr),e(Wt,zc),e(zc,vBr),e(zc,r4e),e(r4e,FBr),e(zc,TBr),e(zc,zY),e(zY,MBr),e(zc,EBr),e(Wt,CBr),M(W5,Wt,null),e(_r,wBr),e(_r,Xr),M(W9,Xr,null),e(Xr,ABr),e(Xr,t4e),e(t4e,yBr),e(Xr,LBr),e(Xr,vn),e(vn,xBr),e(vn,a4e),e(a4e,$Br),e(vn,kBr),e(vn,n4e),e(n4e,SBr),e(vn,RBr),e(vn,s4e),e(s4e,BBr),e(vn,PBr),e(Xr,IBr),e(Xr,xe),e(xe,Q5),e(Q5,l4e),e(l4e,qBr),e(Q5,NBr),e(Q5,WY),e(WY,jBr),e(Q5,DBr),e(xe,GBr),e(xe,H5),e(H5,i4e),e(i4e,OBr),e(H5,VBr),e(H5,QY),e(QY,XBr),e(H5,zBr),e(xe,WBr),e(xe,U5),e(U5,d4e),e(d4e,QBr),e(U5,HBr),e(U5,HY),e(HY,UBr),e(U5,JBr),e(xe,YBr),e(xe,J5),e(J5,c4e),e(c4e,KBr),e(J5,ZBr),e(J5,UY),e(UY,ePr),e(J5,oPr),e(xe,rPr),e(xe,Y5),e(Y5,f4e),e(f4e,tPr),e(Y5,aPr),e(Y5,JY),e(JY,nPr),e(Y5,sPr),e(xe,lPr),e(xe,K5),e(K5,m4e),e(m4e,iPr),e(K5,dPr),e(K5,YY),e(YY,cPr),e(K5,fPr),e(xe,mPr),e(xe,Z5),e(Z5,g4e),e(g4e,gPr),e(Z5,hPr),e(Z5,KY),e(KY,pPr),e(Z5,_Pr),e(xe,uPr),e(xe,e3),e(e3,h4e),e(h4e,bPr),e(e3,vPr),e(e3,ZY),e(ZY,FPr),e(e3,TPr),e(xe,MPr),e(xe,o3),e(o3,p4e),e(p4e,EPr),e(o3,CPr),e(o3,eK),e(eK,wPr),e(o3,APr),e(xe,yPr),e(xe,r3),e(r3,_4e),e(_4e,LPr),e(r3,xPr),e(r3,oK),e(oK,$Pr),e(r3,kPr),e(Xr,SPr),M(t3,Xr,null),b(f,cje,u),b(f,Wc,u),e(Wc,a3),e(a3,u4e),M(Q9,u4e,null),e(Wc,RPr),e(Wc,b4e),e(b4e,BPr),b(f,fje,u),b(f,ur,u),M(H9,ur,null),e(ur,PPr),e(ur,Qc),e(Qc,IPr),e(Qc,rK),e(rK,qPr),e(Qc,NPr),e(Qc,tK),e(tK,jPr),e(Qc,DPr),e(ur,GPr),e(ur,U9),e(U9,OPr),e(U9,v4e),e(v4e,VPr),e(U9,XPr),e(ur,zPr),e(ur,Qt),M(J9,Qt,null),e(Qt,WPr),e(Qt,F4e),e(F4e,QPr),e(Qt,HPr),e(Qt,Hc),e(Hc,UPr),e(Hc,T4e),e(T4e,JPr),e(Hc,YPr),e(Hc,aK),e(aK,KPr),e(Hc,ZPr),e(Qt,eIr),M(n3,Qt,null),e(ur,oIr),e(ur,zr),M(Y9,zr,null),e(zr,rIr),e(zr,M4e),e(M4e,tIr),e(zr,aIr),e(zr,Fn),e(Fn,nIr),e(Fn,E4e),e(E4e,sIr),e(Fn,lIr),e(Fn,C4e),e(C4e,iIr),e(Fn,dIr),e(Fn,w4e),e(w4e,cIr),e(Fn,fIr),e(zr,mIr),e(zr,$e),e($e,s3),e(s3,A4e),e(A4e,gIr),e(s3,hIr),e(s3,nK),e(nK,pIr),e(s3,_Ir),e($e,uIr),e($e,l3),e(l3,y4e),e(y4e,bIr),e(l3,vIr),e(l3,sK),e(sK,FIr),e(l3,TIr),e($e,MIr),e($e,i3),e(i3,L4e),e(L4e,EIr),e(i3,CIr),e(i3,lK),e(lK,wIr),e(i3,AIr),e($e,yIr),e($e,d3),e(d3,x4e),e(x4e,LIr),e(d3,xIr),e(d3,iK),e(iK,$Ir),e(d3,kIr),e($e,SIr),e($e,c3),e(c3,$4e),e($4e,RIr),e(c3,BIr),e(c3,dK),e(dK,PIr),e(c3,IIr),e($e,qIr),e($e,f3),e(f3,k4e),e(k4e,NIr),e(f3,jIr),e(f3,cK),e(cK,DIr),e(f3,GIr),e($e,OIr),e($e,m3),e(m3,S4e),e(S4e,VIr),e(m3,XIr),e(m3,fK),e(fK,zIr),e(m3,WIr),e($e,QIr),e($e,g3),e(g3,R4e),e(R4e,HIr),e(g3,UIr),e(g3,mK),e(mK,JIr),e(g3,YIr),e($e,KIr),e($e,h3),e(h3,B4e),e(B4e,ZIr),e(h3,eqr),e(h3,gK),e(gK,oqr),e(h3,rqr),e($e,tqr),e($e,p3),e(p3,P4e),e(P4e,aqr),e(p3,nqr),e(p3,hK),e(hK,sqr),e(p3,lqr),e(zr,iqr),M(_3,zr,null),b(f,mje,u),b(f,Uc,u),e(Uc,u3),e(u3,I4e),M(K9,I4e,null),e(Uc,dqr),e(Uc,q4e),e(q4e,cqr),b(f,gje,u),b(f,br,u),M(Z9,br,null),e(br,fqr),e(br,Jc),e(Jc,mqr),e(Jc,pK),e(pK,gqr),e(Jc,hqr),e(Jc,_K),e(_K,pqr),e(Jc,_qr),e(br,uqr),e(br,ex),e(ex,bqr),e(ex,N4e),e(N4e,vqr),e(ex,Fqr),e(br,Tqr),e(br,Ht),M(ox,Ht,null),e(Ht,Mqr),e(Ht,j4e),e(j4e,Eqr),e(Ht,Cqr),e(Ht,Yc),e(Yc,wqr),e(Yc,D4e),e(D4e,Aqr),e(Yc,yqr),e(Yc,uK),e(uK,Lqr),e(Yc,xqr),e(Ht,$qr),M(b3,Ht,null),e(br,kqr),e(br,Wr),M(rx,Wr,null),e(Wr,Sqr),e(Wr,G4e),e(G4e,Rqr),e(Wr,Bqr),e(Wr,Tn),e(Tn,Pqr),e(Tn,O4e),e(O4e,Iqr),e(Tn,qqr),e(Tn,V4e),e(V4e,Nqr),e(Tn,jqr),e(Tn,X4e),e(X4e,Dqr),e(Tn,Gqr),e(Wr,Oqr),e(Wr,De),e(De,v3),e(v3,z4e),e(z4e,Vqr),e(v3,Xqr),e(v3,bK),e(bK,zqr),e(v3,Wqr),e(De,Qqr),e(De,F3),e(F3,W4e),e(W4e,Hqr),e(F3,Uqr),e(F3,vK),e(vK,Jqr),e(F3,Yqr),e(De,Kqr),e(De,T3),e(T3,Q4e),e(Q4e,Zqr),e(T3,eNr),e(T3,FK),e(FK,oNr),e(T3,rNr),e(De,tNr),e(De,M3),e(M3,H4e),e(H4e,aNr),e(M3,nNr),e(M3,TK),e(TK,sNr),e(M3,lNr),e(De,iNr),e(De,E3),e(E3,U4e),e(U4e,dNr),e(E3,cNr),e(E3,MK),e(MK,fNr),e(E3,mNr),e(De,gNr),e(De,C3),e(C3,J4e),e(J4e,hNr),e(C3,pNr),e(C3,EK),e(EK,_Nr),e(C3,uNr),e(De,bNr),e(De,w3),e(w3,Y4e),e(Y4e,vNr),e(w3,FNr),e(w3,CK),e(CK,TNr),e(w3,MNr),e(De,ENr),e(De,A3),e(A3,K4e),e(K4e,CNr),e(A3,wNr),e(A3,wK),e(wK,ANr),e(A3,yNr),e(Wr,LNr),M(y3,Wr,null),b(f,hje,u),b(f,Kc,u),e(Kc,L3),e(L3,Z4e),M(tx,Z4e,null),e(Kc,xNr),e(Kc,eEe),e(eEe,$Nr),b(f,pje,u),b(f,vr,u),M(ax,vr,null),e(vr,kNr),e(vr,Zc),e(Zc,SNr),e(Zc,AK),e(AK,RNr),e(Zc,BNr),e(Zc,yK),e(yK,PNr),e(Zc,INr),e(vr,qNr),e(vr,nx),e(nx,NNr),e(nx,oEe),e(oEe,jNr),e(nx,DNr),e(vr,GNr),e(vr,Ut),M(sx,Ut,null),e(Ut,ONr),e(Ut,rEe),e(rEe,VNr),e(Ut,XNr),e(Ut,ef),e(ef,zNr),e(ef,tEe),e(tEe,WNr),e(ef,QNr),e(ef,LK),e(LK,HNr),e(ef,UNr),e(Ut,JNr),M(x3,Ut,null),e(vr,YNr),e(vr,Qr),M(lx,Qr,null),e(Qr,KNr),e(Qr,aEe),e(aEe,ZNr),e(Qr,ejr),e(Qr,Mn),e(Mn,ojr),e(Mn,nEe),e(nEe,rjr),e(Mn,tjr),e(Mn,sEe),e(sEe,ajr),e(Mn,njr),e(Mn,lEe),e(lEe,sjr),e(Mn,ljr),e(Qr,ijr),e(Qr,Ge),e(Ge,$3),e($3,iEe),e(iEe,djr),e($3,cjr),e($3,xK),e(xK,fjr),e($3,mjr),e(Ge,gjr),e(Ge,k3),e(k3,dEe),e(dEe,hjr),e(k3,pjr),e(k3,$K),e($K,_jr),e(k3,ujr),e(Ge,bjr),e(Ge,S3),e(S3,cEe),e(cEe,vjr),e(S3,Fjr),e(S3,kK),e(kK,Tjr),e(S3,Mjr),e(Ge,Ejr),e(Ge,R3),e(R3,fEe),e(fEe,Cjr),e(R3,wjr),e(R3,SK),e(SK,Ajr),e(R3,yjr),e(Ge,Ljr),e(Ge,B3),e(B3,mEe),e(mEe,xjr),e(B3,$jr),e(B3,RK),e(RK,kjr),e(B3,Sjr),e(Ge,Rjr),e(Ge,P3),e(P3,gEe),e(gEe,Bjr),e(P3,Pjr),e(P3,BK),e(BK,Ijr),e(P3,qjr),e(Ge,Njr),e(Ge,I3),e(I3,hEe),e(hEe,jjr),e(I3,Djr),e(I3,PK),e(PK,Gjr),e(I3,Ojr),e(Ge,Vjr),e(Ge,q3),e(q3,pEe),e(pEe,Xjr),e(q3,zjr),e(q3,IK),e(IK,Wjr),e(q3,Qjr),e(Qr,Hjr),M(N3,Qr,null),b(f,_je,u),b(f,of,u),e(of,j3),e(j3,_Ee),M(ix,_Ee,null),e(of,Ujr),e(of,uEe),e(uEe,Jjr),b(f,uje,u),b(f,Fr,u),M(dx,Fr,null),e(Fr,Yjr),e(Fr,rf),e(rf,Kjr),e(rf,qK),e(qK,Zjr),e(rf,eDr),e(rf,NK),e(NK,oDr),e(rf,rDr),e(Fr,tDr),e(Fr,cx),e(cx,aDr),e(cx,bEe),e(bEe,nDr),e(cx,sDr),e(Fr,lDr),e(Fr,Jt),M(fx,Jt,null),e(Jt,iDr),e(Jt,vEe),e(vEe,dDr),e(Jt,cDr),e(Jt,tf),e(tf,fDr),e(tf,FEe),e(FEe,mDr),e(tf,gDr),e(tf,jK),e(jK,hDr),e(tf,pDr),e(Jt,_Dr),M(D3,Jt,null),e(Fr,uDr),e(Fr,Hr),M(mx,Hr,null),e(Hr,bDr),e(Hr,TEe),e(TEe,vDr),e(Hr,FDr),e(Hr,En),e(En,TDr),e(En,MEe),e(MEe,MDr),e(En,EDr),e(En,EEe),e(EEe,CDr),e(En,wDr),e(En,CEe),e(CEe,ADr),e(En,yDr),e(Hr,LDr),e(Hr,wEe),e(wEe,G3),e(G3,AEe),e(AEe,xDr),e(G3,$Dr),e(G3,DK),e(DK,kDr),e(G3,SDr),e(Hr,RDr),M(O3,Hr,null),b(f,bje,u),b(f,af,u),e(af,V3),e(V3,yEe),M(gx,yEe,null),e(af,BDr),e(af,LEe),e(LEe,PDr),b(f,vje,u),b(f,Tr,u),M(hx,Tr,null),e(Tr,IDr),e(Tr,nf),e(nf,qDr),e(nf,GK),e(GK,NDr),e(nf,jDr),e(nf,OK),e(OK,DDr),e(nf,GDr),e(Tr,ODr),e(Tr,px),e(px,VDr),e(px,xEe),e(xEe,XDr),e(px,zDr),e(Tr,WDr),e(Tr,Yt),M(_x,Yt,null),e(Yt,QDr),e(Yt,$Ee),e($Ee,HDr),e(Yt,UDr),e(Yt,sf),e(sf,JDr),e(sf,kEe),e(kEe,YDr),e(sf,KDr),e(sf,VK),e(VK,ZDr),e(sf,eGr),e(Yt,oGr),M(X3,Yt,null),e(Tr,rGr),e(Tr,Ur),M(ux,Ur,null),e(Ur,tGr),e(Ur,SEe),e(SEe,aGr),e(Ur,nGr),e(Ur,Cn),e(Cn,sGr),e(Cn,REe),e(REe,lGr),e(Cn,iGr),e(Cn,BEe),e(BEe,dGr),e(Cn,cGr),e(Cn,PEe),e(PEe,fGr),e(Cn,mGr),e(Ur,gGr),e(Ur,bx),e(bx,z3),e(z3,IEe),e(IEe,hGr),e(z3,pGr),e(z3,XK),e(XK,_Gr),e(z3,uGr),e(bx,bGr),e(bx,W3),e(W3,qEe),e(qEe,vGr),e(W3,FGr),e(W3,zK),e(zK,TGr),e(W3,MGr),e(Ur,EGr),M(Q3,Ur,null),b(f,Fje,u),b(f,lf,u),e(lf,H3),e(H3,NEe),M(vx,NEe,null),e(lf,CGr),e(lf,jEe),e(jEe,wGr),b(f,Tje,u),b(f,Mr,u),M(Fx,Mr,null),e(Mr,AGr),e(Mr,df),e(df,yGr),e(df,WK),e(WK,LGr),e(df,xGr),e(df,QK),e(QK,$Gr),e(df,kGr),e(Mr,SGr),e(Mr,Tx),e(Tx,RGr),e(Tx,DEe),e(DEe,BGr),e(Tx,PGr),e(Mr,IGr),e(Mr,Kt),M(Mx,Kt,null),e(Kt,qGr),e(Kt,GEe),e(GEe,NGr),e(Kt,jGr),e(Kt,cf),e(cf,DGr),e(cf,OEe),e(OEe,GGr),e(cf,OGr),e(cf,HK),e(HK,VGr),e(cf,XGr),e(Kt,zGr),M(U3,Kt,null),e(Mr,WGr),e(Mr,Jr),M(Ex,Jr,null),e(Jr,QGr),e(Jr,VEe),e(VEe,HGr),e(Jr,UGr),e(Jr,wn),e(wn,JGr),e(wn,XEe),e(XEe,YGr),e(wn,KGr),e(wn,zEe),e(zEe,ZGr),e(wn,eOr),e(wn,WEe),e(WEe,oOr),e(wn,rOr),e(Jr,tOr),e(Jr,QEe),e(QEe,J3),e(J3,HEe),e(HEe,aOr),e(J3,nOr),e(J3,UK),e(UK,sOr),e(J3,lOr),e(Jr,iOr),M(Y3,Jr,null),Mje=!0},p(f,[u]){const Cx={};u&2&&(Cx.$$scope={dirty:u,ctx:f}),vf.$set(Cx);const UEe={};u&2&&(UEe.$$scope={dirty:u,ctx:f}),Tg.$set(UEe);const JEe={};u&2&&(JEe.$$scope={dirty:u,ctx:f}),rh.$set(JEe);const YEe={};u&2&&(YEe.$$scope={dirty:u,ctx:f}),Sh.$set(YEe);const wx={};u&2&&(wx.$$scope={dirty:u,ctx:f}),Rh.$set(wx);const KEe={};u&2&&(KEe.$$scope={dirty:u,ctx:f}),Kh.$set(KEe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),Zh.$set(An);const ZEe={};u&2&&(ZEe.$$scope={dirty:u,ctx:f}),rp.$set(ZEe);const eCe={};u&2&&(eCe.$$scope={dirty:u,ctx:f}),J_.$set(eCe);const oCe={};u&2&&(oCe.$$scope={dirty:u,ctx:f}),K_.$set(oCe);const Ax={};u&2&&(Ax.$$scope={dirty:u,ctx:f}),Vu.$set(Ax);const rCe={};u&2&&(rCe.$$scope={dirty:u,ctx:f}),zu.$set(rCe);const yx={};u&2&&(yx.$$scope={dirty:u,ctx:f}),$2.$set(yx);const tCe={};u&2&&(tCe.$$scope={dirty:u,ctx:f}),S2.$set(tCe);const Lx={};u&2&&(Lx.$$scope={dirty:u,ctx:f}),p1.$set(Lx);const aCe={};u&2&&(aCe.$$scope={dirty:u,ctx:f}),u1.$set(aCe);const nCe={};u&2&&(nCe.$$scope={dirty:u,ctx:f}),P1.$set(nCe);const sCe={};u&2&&(sCe.$$scope={dirty:u,ctx:f}),q1.$set(sCe);const ff={};u&2&&(ff.$$scope={dirty:u,ctx:f}),kb.$set(ff);const lCe={};u&2&&(lCe.$$scope={dirty:u,ctx:f}),Rb.$set(lCe);const iCe={};u&2&&(iCe.$$scope={dirty:u,ctx:f}),cv.$set(iCe);const dCe={};u&2&&(dCe.$$scope={dirty:u,ctx:f}),mv.$set(dCe);const xx={};u&2&&(xx.$$scope={dirty:u,ctx:f}),vv.$set(xx);const cCe={};u&2&&(cCe.$$scope={dirty:u,ctx:f}),Tv.$set(cCe);const fCe={};u&2&&(fCe.$$scope={dirty:u,ctx:f}),rF.$set(fCe);const mCe={};u&2&&(mCe.$$scope={dirty:u,ctx:f}),aF.$set(mCe);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),zF.$set(et);const $x={};u&2&&($x.$$scope={dirty:u,ctx:f}),QF.$set($x);const gCe={};u&2&&(gCe.$$scope={dirty:u,ctx:f}),JF.$set(gCe);const kx={};u&2&&(kx.$$scope={dirty:u,ctx:f}),KF.$set(kx);const hCe={};u&2&&(hCe.$$scope={dirty:u,ctx:f}),m0.$set(hCe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),h0.$set(ot);const pCe={};u&2&&(pCe.$$scope={dirty:u,ctx:f}),u0.$set(pCe);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),v0.$set(mf);const _Ce={};u&2&&(_Ce.$$scope={dirty:u,ctx:f}),$0.$set(_Ce);const uCe={};u&2&&(uCe.$$scope={dirty:u,ctx:f}),S0.$set(uCe);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),j0.$set(y);const K3={};u&2&&(K3.$$scope={dirty:u,ctx:f}),G0.$set(K3);const bCe={};u&2&&(bCe.$$scope={dirty:u,ctx:f}),K0.$set(bCe);const vCe={};u&2&&(vCe.$$scope={dirty:u,ctx:f}),eT.$set(vCe);const Z3={};u&2&&(Z3.$$scope={dirty:u,ctx:f}),aT.$set(Z3);const FCe={};u&2&&(FCe.$$scope={dirty:u,ctx:f}),sT.$set(FCe);const TCe={};u&2&&(TCe.$$scope={dirty:u,ctx:f}),gT.$set(TCe);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),pT.$set(ew);const MCe={};u&2&&(MCe.$$scope={dirty:u,ctx:f}),FT.$set(MCe);const ECe={};u&2&&(ECe.$$scope={dirty:u,ctx:f}),MT.$set(ECe);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),AT.$set(ow);const CCe={};u&2&&(CCe.$$scope={dirty:u,ctx:f}),LT.$set(CCe);const wCe={};u&2&&(wCe.$$scope={dirty:u,ctx:f}),kT.$set(wCe);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),RT.$set(rw);const ACe={};u&2&&(ACe.$$scope={dirty:u,ctx:f}),jT.$set(ACe);const yCe={};u&2&&(yCe.$$scope={dirty:u,ctx:f}),GT.$set(yCe);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),XT.$set(tw);const LCe={};u&2&&(LCe.$$scope={dirty:u,ctx:f}),WT.$set(LCe);const xCe={};u&2&&(xCe.$$scope={dirty:u,ctx:f}),N7.$set(xCe);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),D7.$set(aw);const $Ce={};u&2&&($Ce.$$scope={dirty:u,ctx:f}),cM.$set($Ce);const kCe={};u&2&&(kCe.$$scope={dirty:u,ctx:f}),mM.$set(kCe);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),wM.$set(nw);const SCe={};u&2&&(SCe.$$scope={dirty:u,ctx:f}),yM.$set(SCe);const RCe={};u&2&&(RCe.$$scope={dirty:u,ctx:f}),SM.$set(RCe);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),BM.$set(sw);const BCe={};u&2&&(BCe.$$scope={dirty:u,ctx:f}),o4.$set(BCe);const PCe={};u&2&&(PCe.$$scope={dirty:u,ctx:f}),t4.$set(PCe);const lw={};u&2&&(lw.$$scope={dirty:u,ctx:f}),h4.$set(lw);const ICe={};u&2&&(ICe.$$scope={dirty:u,ctx:f}),_4.$set(ICe);const qCe={};u&2&&(qCe.$$scope={dirty:u,ctx:f}),V4.$set(qCe);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),z4.$set(iw);const NCe={};u&2&&(NCe.$$scope={dirty:u,ctx:f}),dE.$set(NCe);const jCe={};u&2&&(jCe.$$scope={dirty:u,ctx:f}),fE.$set(jCe);const dw={};u&2&&(dw.$$scope={dirty:u,ctx:f}),hE.$set(dw);const DCe={};u&2&&(DCe.$$scope={dirty:u,ctx:f}),_E.$set(DCe);const GCe={};u&2&&(GCe.$$scope={dirty:u,ctx:f}),bE.$set(GCe);const cw={};u&2&&(cw.$$scope={dirty:u,ctx:f}),FE.$set(cw);const OCe={};u&2&&(OCe.$$scope={dirty:u,ctx:f}),GE.$set(OCe);const VCe={};u&2&&(VCe.$$scope={dirty:u,ctx:f}),VE.$set(VCe);const fw={};u&2&&(fw.$$scope={dirty:u,ctx:f}),cC.$set(fw);const XCe={};u&2&&(XCe.$$scope={dirty:u,ctx:f}),mC.$set(XCe);const zCe={};u&2&&(zCe.$$scope={dirty:u,ctx:f}),hC.$set(zCe);const mw={};u&2&&(mw.$$scope={dirty:u,ctx:f}),_C.$set(mw);const WCe={};u&2&&(WCe.$$scope={dirty:u,ctx:f}),bC.$set(WCe);const QCe={};u&2&&(QCe.$$scope={dirty:u,ctx:f}),FC.$set(QCe);const gw={};u&2&&(gw.$$scope={dirty:u,ctx:f}),WC.$set(gw);const HCe={};u&2&&(HCe.$$scope={dirty:u,ctx:f}),HC.$set(HCe);const UCe={};u&2&&(UCe.$$scope={dirty:u,ctx:f}),a5.$set(UCe);const hw={};u&2&&(hw.$$scope={dirty:u,ctx:f}),s5.$set(hw);const JCe={};u&2&&(JCe.$$scope={dirty:u,ctx:f}),v5.$set(JCe);const YCe={};u&2&&(YCe.$$scope={dirty:u,ctx:f}),T5.$set(YCe);const pw={};u&2&&(pw.$$scope={dirty:u,ctx:f}),S5.$set(pw);const KCe={};u&2&&(KCe.$$scope={dirty:u,ctx:f}),B5.$set(KCe);const ZCe={};u&2&&(ZCe.$$scope={dirty:u,ctx:f}),X5.$set(ZCe);const _w={};u&2&&(_w.$$scope={dirty:u,ctx:f}),W5.$set(_w);const e5e={};u&2&&(e5e.$$scope={dirty:u,ctx:f}),t3.$set(e5e);const o5e={};u&2&&(o5e.$$scope={dirty:u,ctx:f}),n3.$set(o5e);const uw={};u&2&&(uw.$$scope={dirty:u,ctx:f}),_3.$set(uw);const r5e={};u&2&&(r5e.$$scope={dirty:u,ctx:f}),b3.$set(r5e);const t5e={};u&2&&(t5e.$$scope={dirty:u,ctx:f}),y3.$set(t5e);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),x3.$set(bw);const a5e={};u&2&&(a5e.$$scope={dirty:u,ctx:f}),N3.$set(a5e);const n5e={};u&2&&(n5e.$$scope={dirty:u,ctx:f}),D3.$set(n5e);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),O3.$set(vw);const s5e={};u&2&&(s5e.$$scope={dirty:u,ctx:f}),X3.$set(s5e);const l5e={};u&2&&(l5e.$$scope={dirty:u,ctx:f}),Q3.$set(l5e);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),U3.$set(Fw);const i5e={};u&2&&(i5e.$$scope={dirty:u,ctx:f}),Y3.$set(i5e)},i(f){Mje||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(vA.$$.fragment,f),E(FA.$$.fragment,f),E(vf.$$.fragment,f),E(TA.$$.fragment,f),E(MA.$$.fragment,f),E(wA.$$.fragment,f),E(Tg.$$.fragment,f),E(AA.$$.fragment,f),E(yA.$$.fragment,f),E(LA.$$.fragment,f),E(kA.$$.fragment,f),E(rh.$$.fragment,f),E(SA.$$.fragment,f),E(RA.$$.fragment,f),E(BA.$$.fragment,f),E(qA.$$.fragment,f),E(Sh.$$.fragment,f),E(Rh.$$.fragment,f),E(NA.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(VA.$$.fragment,f),E(Kh.$$.fragment,f),E(Zh.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(HA.$$.fragment,f),E(rp.$$.fragment,f),E(UA.$$.fragment,f),E(J_.$$.fragment,f),E(JA.$$.fragment,f),E(YA.$$.fragment,f),E(ZA.$$.fragment,f),E(K_.$$.fragment,f),E(ey.$$.fragment,f),E(Vu.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(zu.$$.fragment,f),E(ny.$$.fragment,f),E($2.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(S2.$$.fragment,f),E(cy.$$.fragment,f),E(p1.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(u1.$$.fragment,f),E(py.$$.fragment,f),E(P1.$$.fragment,f),E(_y.$$.fragment,f),E(uy.$$.fragment,f),E(vy.$$.fragment,f),E(q1.$$.fragment,f),E(Fy.$$.fragment,f),E(kb.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(Rb.$$.fragment,f),E(wy.$$.fragment,f),E(cv.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(mv.$$.fragment,f),E($y.$$.fragment,f),E(vv.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(By.$$.fragment,f),E(Tv.$$.fragment,f),E(Py.$$.fragment,f),E(rF.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(aF.$$.fragment,f),E(Dy.$$.fragment,f),E(zF.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(QF.$$.fragment,f),E(zy.$$.fragment,f),E(JF.$$.fragment,f),E(Wy.$$.fragment,f),E(Qy.$$.fragment,f),E(Uy.$$.fragment,f),E(KF.$$.fragment,f),E(Jy.$$.fragment,f),E(m0.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(eL.$$.fragment,f),E(h0.$$.fragment,f),E(oL.$$.fragment,f),E(u0.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(nL.$$.fragment,f),E(v0.$$.fragment,f),E(sL.$$.fragment,f),E($0.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(cL.$$.fragment,f),E(S0.$$.fragment,f),E(fL.$$.fragment,f),E(j0.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(pL.$$.fragment,f),E(G0.$$.fragment,f),E(_L.$$.fragment,f),E(K0.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(eT.$$.fragment,f),E(TL.$$.fragment,f),E(aT.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(sT.$$.fragment,f),E(yL.$$.fragment,f),E(gT.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(pT.$$.fragment,f),E(SL.$$.fragment,f),E(FT.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(MT.$$.fragment,f),E(qL.$$.fragment,f),E(AT.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(LT.$$.fragment,f),E(VL.$$.fragment,f),E(kT.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(RT.$$.fragment,f),E(HL.$$.fragment,f),E(jT.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(GT.$$.fragment,f),E(ZL.$$.fragment,f),E(XT.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(WT.$$.fragment,f),E(a8.$$.fragment,f),E(N7.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(D7.$$.fragment,f),E(d8.$$.fragment,f),E(cM.$$.fragment,f),E(c8.$$.fragment,f),E(f8.$$.fragment,f),E(g8.$$.fragment,f),E(mM.$$.fragment,f),E(h8.$$.fragment,f),E(wM.$$.fragment,f),E(p8.$$.fragment,f),E(_8.$$.fragment,f),E(b8.$$.fragment,f),E(yM.$$.fragment,f),E(v8.$$.fragment,f),E(SM.$$.fragment,f),E(F8.$$.fragment,f),E(T8.$$.fragment,f),E(E8.$$.fragment,f),E(BM.$$.fragment,f),E(C8.$$.fragment,f),E(o4.$$.fragment,f),E(w8.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(t4.$$.fragment,f),E(x8.$$.fragment,f),E(h4.$$.fragment,f),E($8.$$.fragment,f),E(k8.$$.fragment,f),E(R8.$$.fragment,f),E(_4.$$.fragment,f),E(B8.$$.fragment,f),E(V4.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(z4.$$.fragment,f),E(j8.$$.fragment,f),E(dE.$$.fragment,f),E(D8.$$.fragment,f),E(G8.$$.fragment,f),E(V8.$$.fragment,f),E(fE.$$.fragment,f),E(X8.$$.fragment,f),E(hE.$$.fragment,f),E(W8.$$.fragment,f),E(Q8.$$.fragment,f),E(U8.$$.fragment,f),E(_E.$$.fragment,f),E(J8.$$.fragment,f),E(bE.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(e9.$$.fragment,f),E(FE.$$.fragment,f),E(o9.$$.fragment,f),E(GE.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(VE.$$.fragment,f),E(s9.$$.fragment,f),E(cC.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(mC.$$.fragment,f),E(f9.$$.fragment,f),E(hC.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(_C.$$.fragment,f),E(_9.$$.fragment,f),E(bC.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(F9.$$.fragment,f),E(FC.$$.fragment,f),E(T9.$$.fragment,f),E(WC.$$.fragment,f),E(M9.$$.fragment,f),E(E9.$$.fragment,f),E(w9.$$.fragment,f),E(HC.$$.fragment,f),E(A9.$$.fragment,f),E(a5.$$.fragment,f),E(y9.$$.fragment,f),E(L9.$$.fragment,f),E($9.$$.fragment,f),E(s5.$$.fragment,f),E(k9.$$.fragment,f),E(v5.$$.fragment,f),E(S9.$$.fragment,f),E(R9.$$.fragment,f),E(P9.$$.fragment,f),E(T5.$$.fragment,f),E(I9.$$.fragment,f),E(S5.$$.fragment,f),E(q9.$$.fragment,f),E(N9.$$.fragment,f),E(D9.$$.fragment,f),E(B5.$$.fragment,f),E(G9.$$.fragment,f),E(X5.$$.fragment,f),E(O9.$$.fragment,f),E(V9.$$.fragment,f),E(z9.$$.fragment,f),E(W5.$$.fragment,f),E(W9.$$.fragment,f),E(t3.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(J9.$$.fragment,f),E(n3.$$.fragment,f),E(Y9.$$.fragment,f),E(_3.$$.fragment,f),E(K9.$$.fragment,f),E(Z9.$$.fragment,f),E(ox.$$.fragment,f),E(b3.$$.fragment,f),E(rx.$$.fragment,f),E(y3.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(x3.$$.fragment,f),E(lx.$$.fragment,f),E(N3.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(D3.$$.fragment,f),E(mx.$$.fragment,f),E(O3.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(_x.$$.fragment,f),E(X3.$$.fragment,f),E(ux.$$.fragment,f),E(Q3.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(U3.$$.fragment,f),E(Ex.$$.fragment,f),E(Y3.$$.fragment,f),Mje=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(vA.$$.fragment,f),C(FA.$$.fragment,f),C(vf.$$.fragment,f),C(TA.$$.fragment,f),C(MA.$$.fragment,f),C(wA.$$.fragment,f),C(Tg.$$.fragment,f),C(AA.$$.fragment,f),C(yA.$$.fragment,f),C(LA.$$.fragment,f),C(kA.$$.fragment,f),C(rh.$$.fragment,f),C(SA.$$.fragment,f),C(RA.$$.fragment,f),C(BA.$$.fragment,f),C(qA.$$.fragment,f),C(Sh.$$.fragment,f),C(Rh.$$.fragment,f),C(NA.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(VA.$$.fragment,f),C(Kh.$$.fragment,f),C(Zh.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(HA.$$.fragment,f),C(rp.$$.fragment,f),C(UA.$$.fragment,f),C(J_.$$.fragment,f),C(JA.$$.fragment,f),C(YA.$$.fragment,f),C(ZA.$$.fragment,f),C(K_.$$.fragment,f),C(ey.$$.fragment,f),C(Vu.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(zu.$$.fragment,f),C(ny.$$.fragment,f),C($2.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(S2.$$.fragment,f),C(cy.$$.fragment,f),C(p1.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(u1.$$.fragment,f),C(py.$$.fragment,f),C(P1.$$.fragment,f),C(_y.$$.fragment,f),C(uy.$$.fragment,f),C(vy.$$.fragment,f),C(q1.$$.fragment,f),C(Fy.$$.fragment,f),C(kb.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(Rb.$$.fragment,f),C(wy.$$.fragment,f),C(cv.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(mv.$$.fragment,f),C($y.$$.fragment,f),C(vv.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(By.$$.fragment,f),C(Tv.$$.fragment,f),C(Py.$$.fragment,f),C(rF.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(aF.$$.fragment,f),C(Dy.$$.fragment,f),C(zF.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(QF.$$.fragment,f),C(zy.$$.fragment,f),C(JF.$$.fragment,f),C(Wy.$$.fragment,f),C(Qy.$$.fragment,f),C(Uy.$$.fragment,f),C(KF.$$.fragment,f),C(Jy.$$.fragment,f),C(m0.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(eL.$$.fragment,f),C(h0.$$.fragment,f),C(oL.$$.fragment,f),C(u0.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(nL.$$.fragment,f),C(v0.$$.fragment,f),C(sL.$$.fragment,f),C($0.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(cL.$$.fragment,f),C(S0.$$.fragment,f),C(fL.$$.fragment,f),C(j0.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(pL.$$.fragment,f),C(G0.$$.fragment,f),C(_L.$$.fragment,f),C(K0.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(eT.$$.fragment,f),C(TL.$$.fragment,f),C(aT.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(sT.$$.fragment,f),C(yL.$$.fragment,f),C(gT.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(pT.$$.fragment,f),C(SL.$$.fragment,f),C(FT.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(MT.$$.fragment,f),C(qL.$$.fragment,f),C(AT.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(LT.$$.fragment,f),C(VL.$$.fragment,f),C(kT.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(RT.$$.fragment,f),C(HL.$$.fragment,f),C(jT.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(GT.$$.fragment,f),C(ZL.$$.fragment,f),C(XT.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(WT.$$.fragment,f),C(a8.$$.fragment,f),C(N7.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(D7.$$.fragment,f),C(d8.$$.fragment,f),C(cM.$$.fragment,f),C(c8.$$.fragment,f),C(f8.$$.fragment,f),C(g8.$$.fragment,f),C(mM.$$.fragment,f),C(h8.$$.fragment,f),C(wM.$$.fragment,f),C(p8.$$.fragment,f),C(_8.$$.fragment,f),C(b8.$$.fragment,f),C(yM.$$.fragment,f),C(v8.$$.fragment,f),C(SM.$$.fragment,f),C(F8.$$.fragment,f),C(T8.$$.fragment,f),C(E8.$$.fragment,f),C(BM.$$.fragment,f),C(C8.$$.fragment,f),C(o4.$$.fragment,f),C(w8.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(t4.$$.fragment,f),C(x8.$$.fragment,f),C(h4.$$.fragment,f),C($8.$$.fragment,f),C(k8.$$.fragment,f),C(R8.$$.fragment,f),C(_4.$$.fragment,f),C(B8.$$.fragment,f),C(V4.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(z4.$$.fragment,f),C(j8.$$.fragment,f),C(dE.$$.fragment,f),C(D8.$$.fragment,f),C(G8.$$.fragment,f),C(V8.$$.fragment,f),C(fE.$$.fragment,f),C(X8.$$.fragment,f),C(hE.$$.fragment,f),C(W8.$$.fragment,f),C(Q8.$$.fragment,f),C(U8.$$.fragment,f),C(_E.$$.fragment,f),C(J8.$$.fragment,f),C(bE.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(e9.$$.fragment,f),C(FE.$$.fragment,f),C(o9.$$.fragment,f),C(GE.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(VE.$$.fragment,f),C(s9.$$.fragment,f),C(cC.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(mC.$$.fragment,f),C(f9.$$.fragment,f),C(hC.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(_C.$$.fragment,f),C(_9.$$.fragment,f),C(bC.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(F9.$$.fragment,f),C(FC.$$.fragment,f),C(T9.$$.fragment,f),C(WC.$$.fragment,f),C(M9.$$.fragment,f),C(E9.$$.fragment,f),C(w9.$$.fragment,f),C(HC.$$.fragment,f),C(A9.$$.fragment,f),C(a5.$$.fragment,f),C(y9.$$.fragment,f),C(L9.$$.fragment,f),C($9.$$.fragment,f),C(s5.$$.fragment,f),C(k9.$$.fragment,f),C(v5.$$.fragment,f),C(S9.$$.fragment,f),C(R9.$$.fragment,f),C(P9.$$.fragment,f),C(T5.$$.fragment,f),C(I9.$$.fragment,f),C(S5.$$.fragment,f),C(q9.$$.fragment,f),C(N9.$$.fragment,f),C(D9.$$.fragment,f),C(B5.$$.fragment,f),C(G9.$$.fragment,f),C(X5.$$.fragment,f),C(O9.$$.fragment,f),C(V9.$$.fragment,f),C(z9.$$.fragment,f),C(W5.$$.fragment,f),C(W9.$$.fragment,f),C(t3.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(J9.$$.fragment,f),C(n3.$$.fragment,f),C(Y9.$$.fragment,f),C(_3.$$.fragment,f),C(K9.$$.fragment,f),C(Z9.$$.fragment,f),C(ox.$$.fragment,f),C(b3.$$.fragment,f),C(rx.$$.fragment,f),C(y3.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(x3.$$.fragment,f),C(lx.$$.fragment,f),C(N3.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(D3.$$.fragment,f),C(mx.$$.fragment,f),C(O3.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(_x.$$.fragment,f),C(X3.$$.fragment,f),C(ux.$$.fragment,f),C(Q3.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(U3.$$.fragment,f),C(Ex.$$.fragment,f),C(Y3.$$.fragment,f),Mje=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(hf),f&&t(rt),f&&t(je),f&&t(We),f&&t(_f),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(vqe),f&&t(ui),w(vA),f&&t(Fqe),f&&t(kn),f&&t(Tqe),w(FA,f),f&&t(Mqe),f&&t(G$),f&&t(Eqe),w(vf,f),f&&t(Cqe),f&&t(bi),w(TA),f&&t(wqe),f&&t(Co),w(MA),w(wA),w(Tg),w(AA),f&&t(Aqe),f&&t(Fi),w(yA),f&&t(yqe),f&&t(wo),w(LA),w(kA),w(rh),w(SA),f&&t(Lqe),f&&t(Ti),w(RA),f&&t(xqe),f&&t(Ao),w(BA),w(qA),w(Sh),w(Rh),w(NA),f&&t($qe),f&&t(Mi),w(jA),f&&t(kqe),f&&t(yo),w(DA),w(VA),w(Kh),w(Zh),w(XA),f&&t(Sqe),f&&t(Ci),w(zA),f&&t(Rqe),f&&t(Lo),w(WA),w(HA),w(rp),w(UA),w(J_),f&&t(Bqe),f&&t(yi),w(JA),f&&t(Pqe),f&&t(xo),w(YA),w(ZA),w(K_),w(ey),w(Vu),f&&t(Iqe),f&&t($i),w(oy),f&&t(qqe),f&&t($o),w(ry),w(ay),w(zu),w(ny),w($2),f&&t(Nqe),f&&t(Ri),w(sy),f&&t(jqe),f&&t(ko),w(ly),w(dy),w(S2),w(cy),w(p1),f&&t(Dqe),f&&t(Ii),w(fy),f&&t(Gqe),f&&t(So),w(my),w(hy),w(u1),w(py),w(P1),f&&t(Oqe),f&&t(ji),w(_y),f&&t(Vqe),f&&t(Ro),w(uy),w(vy),w(q1),w(Fy),w(kb),f&&t(Xqe),f&&t(Oi),w(Ty),f&&t(zqe),f&&t(Bo),w(My),w(Cy),w(Rb),w(wy),w(cv),f&&t(Wqe),f&&t(zi),w(Ay),f&&t(Qqe),f&&t(Po),w(yy),w(xy),w(mv),w($y),w(vv),f&&t(Hqe),f&&t(Hi),w(ky),f&&t(Uqe),f&&t(Io),w(Sy),w(By),w(Tv),w(Py),w(rF),f&&t(Jqe),f&&t(Yi),w(Iy),f&&t(Yqe),f&&t(qo),w(qy),w(jy),w(aF),w(Dy),w(zF),f&&t(Kqe),f&&t(ed),w(Gy),f&&t(Zqe),f&&t(No),w(Oy),w(Xy),w(QF),w(zy),w(JF),f&&t(eNe),f&&t(td),w(Wy),f&&t(oNe),f&&t(jo),w(Qy),w(Uy),w(KF),w(Jy),w(m0),f&&t(rNe),f&&t(sd),w(Yy),f&&t(tNe),f&&t(Do),w(Ky),w(eL),w(h0),w(oL),w(u0),f&&t(aNe),f&&t(dd),w(rL),f&&t(nNe),f&&t(Go),w(tL),w(nL),w(v0),w(sL),w($0),f&&t(sNe),f&&t(md),w(lL),f&&t(lNe),f&&t(Oo),w(iL),w(cL),w(S0),w(fL),w(j0),f&&t(iNe),f&&t(pd),w(mL),f&&t(dNe),f&&t(Vo),w(gL),w(pL),w(G0),w(_L),w(K0),f&&t(cNe),f&&t(bd),w(uL),f&&t(fNe),f&&t(Xo),w(bL),w(FL),w(eT),w(TL),w(aT),f&&t(mNe),f&&t(Td),w(EL),f&&t(gNe),f&&t(zo),w(CL),w(AL),w(sT),w(yL),w(gT),f&&t(hNe),f&&t(Cd),w(LL),f&&t(pNe),f&&t(Wo),w(xL),w(kL),w(pT),w(SL),w(FT),f&&t(_Ne),f&&t(Ld),w(RL),f&&t(uNe),f&&t(Qo),w(BL),w(IL),w(MT),w(qL),w(AT),f&&t(bNe),f&&t(kd),w(jL),f&&t(vNe),f&&t(Ho),w(DL),w(OL),w(LT),w(VL),w(kT),f&&t(FNe),f&&t(Bd),w(XL),f&&t(TNe),f&&t(Uo),w(zL),w(QL),w(RT),w(HL),w(jT),f&&t(MNe),f&&t(qd),w(UL),f&&t(ENe),f&&t(Jo),w(JL),w(KL),w(GT),w(ZL),w(XT),f&&t(CNe),f&&t(Dd),w(e8),f&&t(wNe),f&&t(Yo),w(o8),w(t8),w(WT),w(a8),w(N7),f&&t(ANe),f&&t(Vd),w(n8),f&&t(yNe),f&&t(Ko),w(s8),w(i8),w(D7),w(d8),w(cM),f&&t(LNe),f&&t(Wd),w(c8),f&&t(xNe),f&&t(Zo),w(f8),w(g8),w(mM),w(h8),w(wM),f&&t($Ne),f&&t(Ud),w(p8),f&&t(kNe),f&&t(er),w(_8),w(b8),w(yM),w(v8),w(SM),f&&t(SNe),f&&t(Kd),w(F8),f&&t(RNe),f&&t(or),w(T8),w(E8),w(BM),w(C8),w(o4),f&&t(BNe),f&&t(oc),w(w8),f&&t(PNe),f&&t(rr),w(A8),w(L8),w(t4),w(x8),w(h4),f&&t(INe),f&&t(ac),w($8),f&&t(qNe),f&&t(tr),w(k8),w(R8),w(_4),w(B8),w(V4),f&&t(NNe),f&&t(lc),w(P8),f&&t(jNe),f&&t(ar),w(I8),w(N8),w(z4),w(j8),w(dE),f&&t(DNe),f&&t(cc),w(D8),f&&t(GNe),f&&t(nr),w(G8),w(V8),w(fE),w(X8),w(hE),f&&t(ONe),f&&t(gc),w(W8),f&&t(VNe),f&&t(sr),w(Q8),w(U8),w(_E),w(J8),w(bE),f&&t(XNe),f&&t(_c),w(Y8),f&&t(zNe),f&&t(lr),w(K8),w(e9),w(FE),w(o9),w(GE),f&&t(WNe),f&&t(vc),w(r9),f&&t(QNe),f&&t(ir),w(t9),w(n9),w(VE),w(s9),w(cC),f&&t(HNe),f&&t(Mc),w(l9),f&&t(UNe),f&&t(dr),w(i9),w(c9),w(mC),w(f9),w(hC),f&&t(JNe),f&&t(wc),w(m9),f&&t(YNe),f&&t(cr),w(g9),w(p9),w(_C),w(_9),w(bC),f&&t(KNe),f&&t(Lc),w(u9),f&&t(ZNe),f&&t(fr),w(b9),w(F9),w(FC),w(T9),w(WC),f&&t(eje),f&&t(kc),w(M9),f&&t(oje),f&&t(mr),w(E9),w(w9),w(HC),w(A9),w(a5),f&&t(rje),f&&t(Bc),w(y9),f&&t(tje),f&&t(gr),w(L9),w($9),w(s5),w(k9),w(v5),f&&t(aje),f&&t(qc),w(S9),f&&t(nje),f&&t(hr),w(R9),w(P9),w(T5),w(I9),w(S5),f&&t(sje),f&&t(Dc),w(q9),f&&t(lje),f&&t(pr),w(N9),w(D9),w(B5),w(G9),w(X5),f&&t(ije),f&&t(Vc),w(O9),f&&t(dje),f&&t(_r),w(V9),w(z9),w(W5),w(W9),w(t3),f&&t(cje),f&&t(Wc),w(Q9),f&&t(fje),f&&t(ur),w(H9),w(J9),w(n3),w(Y9),w(_3),f&&t(mje),f&&t(Uc),w(K9),f&&t(gje),f&&t(br),w(Z9),w(ox),w(b3),w(rx),w(y3),f&&t(hje),f&&t(Kc),w(tx),f&&t(pje),f&&t(vr),w(ax),w(sx),w(x3),w(lx),w(N3),f&&t(_je),f&&t(of),w(ix),f&&t(uje),f&&t(Fr),w(dx),w(fx),w(D3),w(mx),w(O3),f&&t(bje),f&&t(af),w(gx),f&&t(vje),f&&t(Tr),w(hx),w(_x),w(X3),w(ux),w(Q3),f&&t(Fje),f&&t(lf),w(vx),f&&t(Tje),f&&t(Mr),w(Fx),w(Mx),w(U3),w(Ex),w(Y3)}}}const w$t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function A$t(L){return A9t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class R$t extends M9t{constructor(g){super();E9t(this,g,A$t,C$t,C9t,{})}}export{R$t as default,w$t as metadata};
