import{S as lkt,i as ikt,s as dkt,e as a,k as l,w as F,t as o,M as ckt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as fkt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as TXr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function mkt(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,LA,_f,je,We,hi,yn,xA,Ln,xn,$A,pi,$n,kA,_i,uf,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),LA=o(")."),_f=l(),je=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),xA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),$A=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),kA=o(` attribute is set to the same class you use when registering the model (here
`),_i=a("code"),uf=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var J$=s(p);m=r(J$,"NewModelConfig"),J$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ui=s(d);h=r(ui,"PretrainedConfig"),ui.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var Y$=s(fi);pf=r(Y$,"model_type"),Y$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var K$=s(mi);gi=r(K$,'"new-model"'),K$.forEach(t),LA=r(Ae,")."),Ae.forEach(t),_f=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),xA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var Z$=s(Ln);xn=r(Z$,"PreTrainedModel"),Z$.forEach(t),$A=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),kA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),_i=n(Eo,"CODE",{});var ek=s(_i);uf=r(ek,"NewModelConfig"),ek.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,rt),e(g,mi),e(mi,gi),e(g,LA),b(Qe,_f,Ae),b(Qe,je,Ae),e(je,We),e(je,hi),e(hi,yn),e(je,xA),e(je,Ln),e(Ln,xn),e(je,$A),e(je,pi),e(pi,$n),e(je,kA),e(je,_i),e(_i,uf),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(_f),Qe&&t(je)}}}function gkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pkt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function _kt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ukt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function bkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ekt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ckt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Akt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ykt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $kt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Skt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ikt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Okt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ukt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ykt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ESt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ASt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ySt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ISt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function USt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dRt(L){let g,v,p,m,_,d,h,Mo,fi,pf,rt,mi,gi,LA,_f,je,We,hi,yn,xA,Ln,xn,$A,pi,$n,kA,_i,uf,Ca,Qe,Ae,J$,ui,Y$,K$,Eo,wa,Z$,bf,ek,xOe,bqe,bi,vf,_oe,SA,$Oe,uoe,kOe,vqe,kn,SOe,boe,ROe,POe,voe,BOe,IOe,Fqe,RA,Tqe,ok,NOe,Mqe,Ff,Eqe,vi,Tf,Foe,PA,qOe,Toe,jOe,Cqe,Co,BA,DOe,IA,GOe,rk,OOe,VOe,XOe,NA,zOe,Moe,WOe,QOe,HOe,Er,qA,UOe,Eoe,JOe,YOe,Fi,KOe,Coe,ZOe,eVe,woe,oVe,rVe,tVe,A,Mf,Aoe,aVe,nVe,tk,sVe,lVe,iVe,Ef,yoe,dVe,cVe,ak,fVe,mVe,gVe,Cf,Loe,hVe,pVe,nk,_Ve,uVe,bVe,wf,xoe,vVe,FVe,sk,TVe,MVe,EVe,Af,$oe,CVe,wVe,lk,AVe,yVe,LVe,yf,koe,xVe,$Ve,ik,kVe,SVe,RVe,Lf,Soe,PVe,BVe,dk,IVe,NVe,qVe,xf,Roe,jVe,DVe,ck,GVe,OVe,VVe,$f,Poe,XVe,zVe,fk,WVe,QVe,HVe,kf,Boe,UVe,JVe,mk,YVe,KVe,ZVe,Sf,Ioe,eXe,oXe,gk,rXe,tXe,aXe,Rf,Noe,nXe,sXe,hk,lXe,iXe,dXe,Pf,qoe,cXe,fXe,pk,mXe,gXe,hXe,Bf,joe,pXe,_Xe,_k,uXe,bXe,vXe,If,Doe,FXe,TXe,uk,MXe,EXe,CXe,Nf,Goe,wXe,AXe,bk,yXe,LXe,xXe,qf,Ooe,$Xe,kXe,vk,SXe,RXe,PXe,jf,Voe,BXe,IXe,Fk,NXe,qXe,jXe,Df,Xoe,DXe,GXe,Tk,OXe,VXe,XXe,Gf,zoe,zXe,WXe,Mk,QXe,HXe,UXe,Of,Woe,JXe,YXe,Ek,KXe,ZXe,eze,Vf,Qoe,oze,rze,Ck,tze,aze,nze,Xf,Hoe,sze,lze,wk,ize,dze,cze,zf,Uoe,fze,mze,Ak,gze,hze,pze,Wf,Joe,_ze,uze,yk,bze,vze,Fze,Qf,Yoe,Tze,Mze,Lk,Eze,Cze,wze,Hf,Koe,Aze,yze,xk,Lze,xze,$ze,Uf,Zoe,kze,Sze,$k,Rze,Pze,Bze,Jf,ere,Ize,Nze,kk,qze,jze,Dze,Yf,ore,Gze,Oze,Sk,Vze,Xze,zze,Kf,rre,Wze,Qze,Rk,Hze,Uze,Jze,Zf,tre,Yze,Kze,Pk,Zze,eWe,oWe,em,are,rWe,tWe,Bk,aWe,nWe,sWe,om,nre,lWe,iWe,Ik,dWe,cWe,fWe,rm,sre,mWe,gWe,Nk,hWe,pWe,_We,tm,lre,uWe,bWe,qk,vWe,FWe,TWe,am,ire,MWe,EWe,jk,CWe,wWe,AWe,nm,dre,yWe,LWe,Dk,xWe,$We,kWe,sm,cre,SWe,RWe,Gk,PWe,BWe,IWe,lm,fre,NWe,qWe,Ok,jWe,DWe,GWe,im,mre,OWe,VWe,Vk,XWe,zWe,WWe,dm,gre,QWe,HWe,Xk,UWe,JWe,YWe,cm,hre,KWe,ZWe,zk,eQe,oQe,rQe,fm,pre,tQe,aQe,Wk,nQe,sQe,lQe,mm,_re,iQe,dQe,Qk,cQe,fQe,mQe,gm,ure,gQe,hQe,Hk,pQe,_Qe,uQe,hm,bre,bQe,vQe,Uk,FQe,TQe,MQe,pm,vre,EQe,CQe,Jk,wQe,AQe,yQe,_m,Fre,LQe,xQe,Yk,$Qe,kQe,SQe,um,Tre,RQe,PQe,Kk,BQe,IQe,NQe,bm,Mre,qQe,jQe,Zk,DQe,GQe,OQe,vm,Ere,VQe,XQe,eS,zQe,WQe,QQe,Fm,Cre,HQe,UQe,oS,JQe,YQe,KQe,Tm,wre,ZQe,eHe,rS,oHe,rHe,tHe,Mm,Are,aHe,nHe,tS,sHe,lHe,iHe,Em,yre,dHe,cHe,aS,fHe,mHe,gHe,Cm,Lre,hHe,pHe,nS,_He,uHe,bHe,wm,xre,vHe,FHe,sS,THe,MHe,EHe,Am,$re,CHe,wHe,lS,AHe,yHe,LHe,ym,kre,xHe,$He,iS,kHe,SHe,RHe,Lm,Sre,PHe,BHe,dS,IHe,NHe,qHe,xm,Rre,jHe,DHe,cS,GHe,OHe,VHe,$m,Pre,XHe,zHe,fS,WHe,QHe,HHe,km,Bre,UHe,JHe,mS,YHe,KHe,ZHe,Sm,Ire,eUe,oUe,gS,rUe,tUe,aUe,Rm,Nre,nUe,sUe,hS,lUe,iUe,dUe,Pm,qre,cUe,fUe,pS,mUe,gUe,hUe,Bm,jre,pUe,_Ue,_S,uUe,bUe,vUe,Im,Dre,FUe,TUe,uS,MUe,EUe,CUe,Nm,Gre,wUe,AUe,bS,yUe,LUe,xUe,qm,Ore,$Ue,kUe,vS,SUe,RUe,PUe,jm,Vre,BUe,IUe,FS,NUe,qUe,jUe,Dm,Xre,DUe,GUe,TS,OUe,VUe,XUe,Gm,zre,zUe,WUe,MS,QUe,HUe,UUe,Om,Wre,JUe,YUe,ES,KUe,ZUe,eJe,Vm,Qre,oJe,rJe,CS,tJe,aJe,nJe,Xm,Hre,sJe,lJe,wS,iJe,dJe,cJe,zm,Ure,fJe,mJe,AS,gJe,hJe,pJe,Wm,Jre,_Je,uJe,yS,bJe,vJe,FJe,Qm,Yre,TJe,MJe,LS,EJe,CJe,wJe,Hm,Kre,AJe,yJe,xS,LJe,xJe,$Je,Um,Zre,kJe,SJe,$S,RJe,PJe,BJe,Jm,ete,IJe,NJe,kS,qJe,jJe,DJe,Ym,ote,GJe,OJe,SS,VJe,XJe,zJe,Km,rte,WJe,QJe,RS,HJe,UJe,JJe,Zm,tte,YJe,KJe,PS,ZJe,eYe,oYe,eg,ate,rYe,tYe,BS,aYe,nYe,sYe,og,nte,lYe,iYe,IS,dYe,cYe,fYe,rg,ste,mYe,gYe,NS,hYe,pYe,_Ye,tg,lte,uYe,bYe,qS,vYe,FYe,TYe,ag,ite,MYe,EYe,jS,CYe,wYe,AYe,ng,dte,yYe,LYe,DS,xYe,$Ye,kYe,sg,cte,SYe,RYe,GS,PYe,BYe,IYe,lg,fte,NYe,qYe,OS,jYe,DYe,GYe,ig,mte,OYe,VYe,VS,XYe,zYe,WYe,dg,gte,QYe,HYe,XS,UYe,JYe,YYe,cg,hte,KYe,ZYe,zS,eKe,oKe,rKe,fg,pte,tKe,aKe,WS,nKe,sKe,lKe,mg,_te,iKe,dKe,QS,cKe,fKe,mKe,gg,ute,gKe,hKe,HS,pKe,_Ke,uKe,hg,bte,bKe,vKe,US,FKe,TKe,MKe,pg,vte,EKe,CKe,JS,wKe,AKe,yKe,_g,Fte,LKe,xKe,YS,$Ke,kKe,SKe,ug,Tte,RKe,PKe,KS,BKe,IKe,NKe,bg,Mte,qKe,jKe,ZS,DKe,GKe,OKe,vg,Ete,VKe,XKe,eR,zKe,WKe,QKe,Fg,Cte,HKe,UKe,oR,JKe,YKe,KKe,Tg,wte,ZKe,eZe,rR,oZe,rZe,tZe,Mg,Ate,aZe,nZe,tR,sZe,lZe,iZe,Eg,yte,dZe,cZe,aR,fZe,mZe,gZe,Cg,hZe,wg,jA,pZe,Lte,_Ze,wqe,Ti,Ag,xte,DA,uZe,$te,bZe,Aqe,wo,GA,vZe,OA,FZe,nR,TZe,MZe,EZe,VA,CZe,kte,wZe,AZe,yZe,Cr,XA,LZe,Ste,xZe,$Ze,Aa,kZe,Rte,SZe,RZe,Pte,PZe,BZe,Bte,IZe,NZe,qZe,k,Sn,Ite,jZe,DZe,sR,GZe,OZe,lR,VZe,XZe,zZe,Rn,Nte,WZe,QZe,iR,HZe,UZe,dR,JZe,YZe,KZe,Pn,qte,ZZe,eeo,cR,oeo,reo,fR,teo,aeo,neo,yg,jte,seo,leo,mR,ieo,deo,ceo,Bn,Dte,feo,meo,gR,geo,heo,hR,peo,_eo,ueo,Lg,Gte,beo,veo,pR,Feo,Teo,Meo,xg,Ote,Eeo,Ceo,_R,weo,Aeo,yeo,$g,Vte,Leo,xeo,uR,$eo,keo,Seo,In,Xte,Reo,Peo,bR,Beo,Ieo,vR,Neo,qeo,jeo,Nn,zte,Deo,Geo,FR,Oeo,Veo,TR,Xeo,zeo,Weo,qn,Wte,Qeo,Heo,MR,Ueo,Jeo,ER,Yeo,Keo,Zeo,kg,Qte,eoo,ooo,CR,roo,too,aoo,Sg,Hte,noo,soo,wR,loo,ioo,doo,Rg,Ute,coo,foo,AR,moo,goo,hoo,jn,Jte,poo,_oo,yR,uoo,boo,LR,voo,Foo,Too,Pg,Yte,Moo,Eoo,xR,Coo,woo,Aoo,Dn,Kte,yoo,Loo,$R,xoo,$oo,kR,koo,Soo,Roo,Gn,Zte,Poo,Boo,SR,Ioo,Noo,RR,qoo,joo,Doo,On,eae,Goo,Ooo,PR,Voo,Xoo,BR,zoo,Woo,Qoo,Bg,oae,Hoo,Uoo,IR,Joo,Yoo,Koo,Vn,rae,Zoo,ero,NR,oro,rro,qR,tro,aro,nro,Xn,tae,sro,lro,jR,iro,dro,DR,cro,fro,mro,zn,aae,gro,hro,GR,pro,_ro,OR,uro,bro,vro,Wn,nae,Fro,Tro,VR,Mro,Ero,XR,Cro,wro,Aro,Qn,sae,yro,Lro,zR,xro,$ro,WR,kro,Sro,Rro,Hn,lae,Pro,Bro,QR,Iro,Nro,HR,qro,jro,Dro,Ig,iae,Gro,Oro,UR,Vro,Xro,zro,Un,dae,Wro,Qro,JR,Hro,Uro,YR,Jro,Yro,Kro,Ng,cae,Zro,eto,KR,oto,rto,tto,Jn,fae,ato,nto,ZR,sto,lto,eP,ito,dto,cto,Yn,mae,fto,mto,oP,gto,hto,rP,pto,_to,uto,Kn,gae,bto,vto,tP,Fto,Tto,aP,Mto,Eto,Cto,qg,hae,wto,Ato,nP,yto,Lto,xto,Zn,pae,$to,kto,sP,Sto,Rto,lP,Pto,Bto,Ito,es,_ae,Nto,qto,iP,jto,Dto,dP,Gto,Oto,Vto,jg,uae,Xto,zto,cP,Wto,Qto,Hto,os,bae,Uto,Jto,fP,Yto,Kto,mP,Zto,eao,oao,rs,vae,rao,tao,gP,aao,nao,hP,sao,lao,iao,ts,Fae,dao,cao,pP,fao,mao,_P,gao,hao,pao,as,Tae,_ao,uao,uP,bao,vao,bP,Fao,Tao,Mao,ns,Mae,Eao,Cao,vP,wao,Aao,FP,yao,Lao,xao,ss,Eae,$ao,kao,TP,Sao,Rao,MP,Pao,Bao,Iao,ls,Cae,Nao,qao,EP,jao,Dao,CP,Gao,Oao,Vao,Dg,wae,Xao,zao,wP,Wao,Qao,Hao,is,Aae,Uao,Jao,AP,Yao,Kao,yP,Zao,eno,ono,Gg,yae,rno,tno,LP,ano,nno,sno,Og,Lae,lno,ino,xP,dno,cno,fno,ds,xae,mno,gno,$P,hno,pno,kP,_no,uno,bno,cs,$ae,vno,Fno,SP,Tno,Mno,RP,Eno,Cno,wno,fs,kae,Ano,yno,PP,Lno,xno,BP,$no,kno,Sno,Vg,Sae,Rno,Pno,IP,Bno,Ino,Nno,ms,Rae,qno,jno,NP,Dno,Gno,qP,Ono,Vno,Xno,gs,Pae,zno,Wno,jP,Qno,Hno,DP,Uno,Jno,Yno,hs,Bae,Kno,Zno,GP,eso,oso,OP,rso,tso,aso,ps,Iae,nso,sso,VP,lso,iso,XP,dso,cso,fso,_s,Nae,mso,gso,zP,hso,pso,WP,_so,uso,bso,Xg,qae,vso,Fso,QP,Tso,Mso,Eso,us,jae,Cso,wso,HP,Aso,yso,UP,Lso,xso,$so,zg,Dae,kso,Sso,JP,Rso,Pso,Bso,Wg,Gae,Iso,Nso,YP,qso,jso,Dso,Qg,Oae,Gso,Oso,KP,Vso,Xso,zso,Hg,Vae,Wso,Qso,ZP,Hso,Uso,Jso,bs,Xae,Yso,Kso,eB,Zso,elo,oB,olo,rlo,tlo,Ug,zae,alo,nlo,rB,slo,llo,ilo,vs,Wae,dlo,clo,tB,flo,mlo,aB,glo,hlo,plo,Fs,Qae,_lo,ulo,nB,blo,vlo,sB,Flo,Tlo,Mlo,Ts,Hae,Elo,Clo,lB,wlo,Alo,iB,ylo,Llo,xlo,Ms,Uae,$lo,klo,dB,Slo,Rlo,cB,Plo,Blo,Ilo,Es,Jae,Nlo,qlo,fB,jlo,Dlo,mB,Glo,Olo,Vlo,Cs,Yae,Xlo,zlo,gB,Wlo,Qlo,hB,Hlo,Ulo,Jlo,Jg,Kae,Ylo,Klo,pB,Zlo,eio,oio,Yg,Zae,rio,tio,_B,aio,nio,sio,ws,ene,lio,iio,uB,dio,cio,bB,fio,mio,gio,As,one,hio,pio,vB,_io,uio,FB,bio,vio,Fio,ys,rne,Tio,Mio,TB,Eio,Cio,MB,wio,Aio,yio,Kg,tne,Lio,xio,EB,$io,kio,Sio,Zg,ane,Rio,Pio,CB,Bio,Iio,Nio,eh,nne,qio,jio,wB,Dio,Gio,Oio,Ls,sne,Vio,Xio,AB,zio,Wio,yB,Qio,Hio,Uio,oh,lne,Jio,Yio,LB,Kio,Zio,edo,rh,ine,odo,rdo,xB,tdo,ado,ndo,th,dne,sdo,ldo,$B,ido,ddo,cdo,xs,cne,fdo,mdo,kB,gdo,hdo,SB,pdo,_do,udo,ah,fne,bdo,vdo,RB,Fdo,Tdo,Mdo,nh,mne,Edo,Cdo,PB,wdo,Ado,ydo,$s,gne,Ldo,xdo,BB,$do,kdo,IB,Sdo,Rdo,Pdo,ks,hne,Bdo,Ido,NB,Ndo,qdo,qB,jdo,Ddo,Gdo,Ss,pne,Odo,Vdo,jB,Xdo,zdo,DB,Wdo,Qdo,Hdo,Rs,_ne,Udo,Jdo,GB,Ydo,Kdo,OB,Zdo,eco,oco,sh,rco,lh,zA,tco,une,aco,yqe,Mi,ih,bne,WA,nco,vne,sco,Lqe,Ao,QA,lco,HA,ico,VB,dco,cco,fco,UA,mco,Fne,gco,hco,pco,He,JA,_co,Tne,uco,bco,ya,vco,Mne,Fco,Tco,Ene,Mco,Eco,Cne,Cco,wco,Aco,Y,dh,wne,yco,Lco,XB,xco,$co,kco,ch,Ane,Sco,Rco,zB,Pco,Bco,Ico,fh,yne,Nco,qco,WB,jco,Dco,Gco,mh,Lne,Oco,Vco,QB,Xco,zco,Wco,gh,xne,Qco,Hco,HB,Uco,Jco,Yco,hh,$ne,Kco,Zco,UB,efo,ofo,rfo,ph,kne,tfo,afo,JB,nfo,sfo,lfo,_h,Sne,ifo,dfo,YB,cfo,ffo,mfo,uh,Rne,gfo,hfo,KB,pfo,_fo,ufo,bh,Pne,bfo,vfo,ZB,Ffo,Tfo,Mfo,vh,Bne,Efo,Cfo,eI,wfo,Afo,yfo,Fh,Ine,Lfo,xfo,oI,$fo,kfo,Sfo,Th,Nne,Rfo,Pfo,rI,Bfo,Ifo,Nfo,Mh,qne,qfo,jfo,tI,Dfo,Gfo,Ofo,Eh,jne,Vfo,Xfo,aI,zfo,Wfo,Qfo,Ch,Dne,Hfo,Ufo,nI,Jfo,Yfo,Kfo,wh,Gne,Zfo,emo,sI,omo,rmo,tmo,Ah,One,amo,nmo,lI,smo,lmo,imo,yh,Vne,dmo,cmo,iI,fmo,mmo,gmo,Lh,Xne,hmo,pmo,dI,_mo,umo,bmo,xh,zne,vmo,Fmo,cI,Tmo,Mmo,Emo,$h,Wne,Cmo,wmo,fI,Amo,ymo,Lmo,kh,Qne,xmo,$mo,mI,kmo,Smo,Rmo,Sh,Hne,Pmo,Bmo,gI,Imo,Nmo,qmo,Rh,Une,jmo,Dmo,hI,Gmo,Omo,Vmo,Ph,Jne,Xmo,zmo,pI,Wmo,Qmo,Hmo,Bh,Yne,Umo,Jmo,_I,Ymo,Kmo,Zmo,Ih,Kne,ego,ogo,uI,rgo,tgo,ago,Nh,Zne,ngo,sgo,bI,lgo,igo,dgo,qh,cgo,jh,fgo,Dh,YA,mgo,ese,ggo,xqe,Ei,Gh,ose,KA,hgo,rse,pgo,$qe,yo,ZA,_go,ey,ugo,vI,bgo,vgo,Fgo,oy,Tgo,tse,Mgo,Ego,Cgo,Ue,ry,wgo,ase,Ago,ygo,Ci,Lgo,nse,xgo,$go,sse,kgo,Sgo,Rgo,he,Oh,lse,Pgo,Bgo,FI,Igo,Ngo,qgo,Vh,ise,jgo,Dgo,dse,Ggo,Ogo,Vgo,Xh,cse,Xgo,zgo,TI,Wgo,Qgo,Hgo,zh,fse,Ugo,Jgo,MI,Ygo,Kgo,Zgo,Wh,mse,eho,oho,EI,rho,tho,aho,Qh,gse,nho,sho,CI,lho,iho,dho,Hh,hse,cho,fho,wI,mho,gho,hho,Uh,pse,pho,_ho,AI,uho,bho,vho,Jh,_se,Fho,Tho,yI,Mho,Eho,Cho,Yh,use,who,Aho,LI,yho,Lho,xho,Kh,bse,$ho,kho,xI,Sho,Rho,Pho,Zh,vse,Bho,Iho,$I,Nho,qho,jho,ep,Fse,Dho,Gho,kI,Oho,Vho,Xho,op,Tse,zho,Who,SI,Qho,Hho,Uho,rp,Mse,Jho,Yho,RI,Kho,Zho,epo,tp,Ese,opo,rpo,PI,tpo,apo,npo,ap,Cse,spo,lpo,BI,ipo,dpo,cpo,np,fpo,sp,mpo,lp,ty,gpo,wse,hpo,kqe,wi,ip,Ase,ay,ppo,yse,_po,Sqe,Lo,ny,upo,Ai,bpo,II,vpo,Fpo,NI,Tpo,Mpo,Epo,sy,Cpo,Lse,wpo,Apo,ypo,tt,ly,Lpo,xse,xpo,$po,yi,kpo,$se,Spo,Rpo,qI,Ppo,Bpo,Ipo,dp,Npo,Je,iy,qpo,kse,jpo,Dpo,La,Gpo,Sse,Opo,Vpo,Rse,Xpo,zpo,Pse,Wpo,Qpo,Hpo,x,cp,Bse,Upo,Jpo,jI,Ypo,Kpo,Zpo,fp,Ise,e_o,o_o,DI,r_o,t_o,a_o,mp,Nse,n_o,s_o,GI,l_o,i_o,d_o,gp,qse,c_o,f_o,OI,m_o,g_o,h_o,hp,jse,p_o,__o,VI,u_o,b_o,v_o,pp,Dse,F_o,T_o,XI,M_o,E_o,C_o,_p,Gse,w_o,A_o,zI,y_o,L_o,x_o,up,Ose,$_o,k_o,WI,S_o,R_o,P_o,bp,Vse,B_o,I_o,QI,N_o,q_o,j_o,vp,Xse,D_o,G_o,HI,O_o,V_o,X_o,Fp,zse,z_o,W_o,UI,Q_o,H_o,U_o,Tp,Wse,J_o,Y_o,JI,K_o,Z_o,euo,Mp,Qse,ouo,ruo,YI,tuo,auo,nuo,Ep,Hse,suo,luo,KI,iuo,duo,cuo,Cp,Use,fuo,muo,ZI,guo,huo,puo,wp,Jse,_uo,uuo,eN,buo,vuo,Fuo,Ap,Yse,Tuo,Muo,oN,Euo,Cuo,wuo,yp,Kse,Auo,yuo,rN,Luo,xuo,$uo,Lp,Zse,kuo,Suo,tN,Ruo,Puo,Buo,xp,ele,Iuo,Nuo,aN,quo,juo,Duo,$p,ole,Guo,Ouo,nN,Vuo,Xuo,zuo,kp,rle,Wuo,Quo,sN,Huo,Uuo,Juo,Sp,tle,Yuo,Kuo,lN,Zuo,e2o,o2o,Rp,ale,r2o,t2o,iN,a2o,n2o,s2o,Pp,nle,l2o,i2o,dN,d2o,c2o,f2o,Bp,sle,m2o,g2o,cN,h2o,p2o,_2o,Ip,lle,u2o,b2o,fN,v2o,F2o,T2o,Np,ile,M2o,E2o,mN,C2o,w2o,A2o,qp,dle,y2o,L2o,gN,x2o,$2o,k2o,jp,cle,S2o,R2o,hN,P2o,B2o,I2o,Dp,fle,N2o,q2o,pN,j2o,D2o,G2o,Gp,mle,O2o,V2o,_N,X2o,z2o,W2o,Op,gle,Q2o,H2o,uN,U2o,J2o,Y2o,Ps,hle,K2o,Z2o,bN,e1o,o1o,vN,r1o,t1o,a1o,Vp,ple,n1o,s1o,FN,l1o,i1o,d1o,Xp,_le,c1o,f1o,TN,m1o,g1o,h1o,zp,ule,p1o,_1o,MN,u1o,b1o,v1o,Wp,ble,F1o,T1o,EN,M1o,E1o,C1o,Qp,vle,w1o,A1o,CN,y1o,L1o,x1o,Hp,Fle,$1o,k1o,wN,S1o,R1o,P1o,Up,Tle,B1o,I1o,AN,N1o,q1o,j1o,Jp,Mle,D1o,G1o,yN,O1o,V1o,X1o,Yp,Ele,z1o,W1o,LN,Q1o,H1o,U1o,Kp,Cle,J1o,Y1o,xN,K1o,Z1o,ebo,Zp,wle,obo,rbo,$N,tbo,abo,nbo,e_,Ale,sbo,lbo,kN,ibo,dbo,cbo,o_,yle,fbo,mbo,SN,gbo,hbo,pbo,r_,Lle,_bo,ubo,RN,bbo,vbo,Fbo,t_,xle,Tbo,Mbo,PN,Ebo,Cbo,wbo,a_,$le,Abo,ybo,BN,Lbo,xbo,$bo,n_,kle,kbo,Sbo,IN,Rbo,Pbo,Bbo,s_,Sle,Ibo,Nbo,NN,qbo,jbo,Dbo,l_,Rle,Gbo,Obo,qN,Vbo,Xbo,zbo,i_,Ple,Wbo,Qbo,jN,Hbo,Ubo,Jbo,d_,Ble,Ybo,Kbo,DN,Zbo,evo,ovo,c_,Ile,rvo,tvo,GN,avo,nvo,svo,f_,Nle,lvo,ivo,ON,dvo,cvo,fvo,m_,qle,mvo,gvo,VN,hvo,pvo,_vo,g_,jle,uvo,bvo,XN,vvo,Fvo,Tvo,h_,Dle,Mvo,Evo,zN,Cvo,wvo,Avo,p_,Gle,yvo,Lvo,WN,xvo,$vo,kvo,__,Ole,Svo,Rvo,QN,Pvo,Bvo,Ivo,u_,Vle,Nvo,qvo,HN,jvo,Dvo,Gvo,b_,Xle,Ovo,Vvo,UN,Xvo,zvo,Wvo,v_,zle,Qvo,Hvo,JN,Uvo,Jvo,Yvo,F_,Wle,Kvo,Zvo,YN,e0o,o0o,r0o,T_,Qle,t0o,a0o,KN,n0o,s0o,l0o,M_,Hle,i0o,d0o,ZN,c0o,f0o,m0o,E_,Ule,g0o,h0o,eq,p0o,_0o,u0o,C_,Jle,b0o,v0o,oq,F0o,T0o,M0o,w_,Yle,E0o,C0o,rq,w0o,A0o,y0o,A_,Kle,L0o,x0o,tq,$0o,k0o,S0o,y_,Zle,R0o,P0o,aq,B0o,I0o,N0o,L_,eie,q0o,j0o,nq,D0o,G0o,O0o,x_,oie,V0o,X0o,sq,z0o,W0o,Q0o,$_,rie,H0o,U0o,lq,J0o,Y0o,K0o,k_,tie,Z0o,eFo,iq,oFo,rFo,tFo,S_,aie,aFo,nFo,dq,sFo,lFo,iFo,R_,nie,dFo,cFo,cq,fFo,mFo,gFo,P_,sie,hFo,pFo,fq,_Fo,uFo,bFo,B_,lie,vFo,FFo,mq,TFo,MFo,EFo,I_,iie,CFo,wFo,gq,AFo,yFo,LFo,N_,die,xFo,$Fo,hq,kFo,SFo,RFo,q_,cie,PFo,BFo,pq,IFo,NFo,qFo,j_,fie,jFo,DFo,_q,GFo,OFo,VFo,D_,mie,XFo,zFo,uq,WFo,QFo,HFo,G_,gie,UFo,JFo,bq,YFo,KFo,ZFo,O_,hie,eTo,oTo,vq,rTo,tTo,aTo,V_,pie,nTo,sTo,Fq,lTo,iTo,dTo,X_,_ie,cTo,fTo,Tq,mTo,gTo,hTo,z_,uie,pTo,_To,Mq,uTo,bTo,vTo,W_,bie,FTo,TTo,Eq,MTo,ETo,CTo,Q_,vie,wTo,ATo,Cq,yTo,LTo,xTo,H_,Fie,$To,kTo,wq,STo,RTo,PTo,U_,Tie,BTo,ITo,Aq,NTo,qTo,jTo,J_,Mie,DTo,GTo,yq,OTo,VTo,XTo,Y_,Eie,zTo,WTo,Lq,QTo,HTo,UTo,K_,Cie,JTo,YTo,xq,KTo,ZTo,e7o,Z_,wie,o7o,r7o,$q,t7o,a7o,n7o,eu,Aie,s7o,l7o,kq,i7o,d7o,c7o,ou,yie,f7o,m7o,Sq,g7o,h7o,p7o,ru,Lie,_7o,u7o,Rq,b7o,v7o,F7o,tu,xie,T7o,M7o,Pq,E7o,C7o,w7o,au,A7o,$ie,y7o,L7o,kie,x7o,$7o,nu,Rqe,Li,su,Sie,dy,k7o,Rie,S7o,Pqe,xo,cy,R7o,xi,P7o,Bq,B7o,I7o,Iq,N7o,q7o,j7o,fy,D7o,Pie,G7o,O7o,V7o,at,my,X7o,Bie,z7o,W7o,$i,Q7o,Iie,H7o,U7o,Nq,J7o,Y7o,K7o,lu,Z7o,Ye,gy,eMo,Nie,oMo,rMo,xa,tMo,qie,aMo,nMo,jie,sMo,lMo,Die,iMo,dMo,cMo,G,iu,Gie,fMo,mMo,qq,gMo,hMo,pMo,du,Oie,_Mo,uMo,jq,bMo,vMo,FMo,cu,Vie,TMo,MMo,Dq,EMo,CMo,wMo,fu,Xie,AMo,yMo,Gq,LMo,xMo,$Mo,mu,zie,kMo,SMo,Oq,RMo,PMo,BMo,gu,Wie,IMo,NMo,Vq,qMo,jMo,DMo,hu,Qie,GMo,OMo,Xq,VMo,XMo,zMo,pu,Hie,WMo,QMo,zq,HMo,UMo,JMo,_u,Uie,YMo,KMo,Wq,ZMo,e4o,o4o,uu,Jie,r4o,t4o,Qq,a4o,n4o,s4o,bu,Yie,l4o,i4o,Hq,d4o,c4o,f4o,vu,Kie,m4o,g4o,Uq,h4o,p4o,_4o,Fu,Zie,u4o,b4o,Jq,v4o,F4o,T4o,Tu,ede,M4o,E4o,Yq,C4o,w4o,A4o,Mu,ode,y4o,L4o,Kq,x4o,$4o,k4o,Eu,rde,S4o,R4o,Zq,P4o,B4o,I4o,Cu,tde,N4o,q4o,ej,j4o,D4o,G4o,wu,ade,O4o,V4o,oj,X4o,z4o,W4o,Au,nde,Q4o,H4o,rj,U4o,J4o,Y4o,yu,sde,K4o,Z4o,tj,eEo,oEo,rEo,Lu,lde,tEo,aEo,aj,nEo,sEo,lEo,xu,ide,iEo,dEo,nj,cEo,fEo,mEo,$u,dde,gEo,hEo,sj,pEo,_Eo,uEo,ku,cde,bEo,vEo,lj,FEo,TEo,MEo,Su,fde,EEo,CEo,ij,wEo,AEo,yEo,Ru,mde,LEo,xEo,dj,$Eo,kEo,SEo,Pu,gde,REo,PEo,cj,BEo,IEo,NEo,Bu,hde,qEo,jEo,fj,DEo,GEo,OEo,Iu,pde,VEo,XEo,mj,zEo,WEo,QEo,Nu,_de,HEo,UEo,gj,JEo,YEo,KEo,qu,ude,ZEo,eCo,hj,oCo,rCo,tCo,ju,bde,aCo,nCo,pj,sCo,lCo,iCo,Du,vde,dCo,cCo,_j,fCo,mCo,gCo,Gu,Fde,hCo,pCo,uj,_Co,uCo,bCo,Ou,Tde,vCo,FCo,bj,TCo,MCo,ECo,Vu,Mde,CCo,wCo,vj,ACo,yCo,LCo,Xu,Ede,xCo,$Co,Fj,kCo,SCo,RCo,zu,Cde,PCo,BCo,Tj,ICo,NCo,qCo,Wu,wde,jCo,DCo,Mj,GCo,OCo,VCo,Qu,Ade,XCo,zCo,Ej,WCo,QCo,HCo,Hu,yde,UCo,JCo,Cj,YCo,KCo,ZCo,Uu,Lde,e5o,o5o,wj,r5o,t5o,a5o,Ju,xde,n5o,s5o,Aj,l5o,i5o,d5o,Yu,c5o,$de,f5o,m5o,kde,g5o,h5o,Ku,Bqe,ki,Zu,Sde,hy,p5o,Rde,_5o,Iqe,$o,py,u5o,Si,b5o,yj,v5o,F5o,Lj,T5o,M5o,E5o,_y,C5o,Pde,w5o,A5o,y5o,nt,uy,L5o,Bde,x5o,$5o,Ri,k5o,Ide,S5o,R5o,xj,P5o,B5o,I5o,e2,N5o,Ke,by,q5o,Nde,j5o,D5o,$a,G5o,qde,O5o,V5o,jde,X5o,z5o,Dde,W5o,Q5o,H5o,z,o2,Gde,U5o,J5o,$j,Y5o,K5o,Z5o,r2,Ode,e3o,o3o,kj,r3o,t3o,a3o,t2,Vde,n3o,s3o,Sj,l3o,i3o,d3o,a2,Xde,c3o,f3o,Rj,m3o,g3o,h3o,n2,zde,p3o,_3o,Pj,u3o,b3o,v3o,s2,Wde,F3o,T3o,Bj,M3o,E3o,C3o,l2,Qde,w3o,A3o,Ij,y3o,L3o,x3o,i2,Hde,$3o,k3o,Nj,S3o,R3o,P3o,d2,Ude,B3o,I3o,qj,N3o,q3o,j3o,c2,Jde,D3o,G3o,jj,O3o,V3o,X3o,f2,Yde,z3o,W3o,Dj,Q3o,H3o,U3o,m2,Kde,J3o,Y3o,Gj,K3o,Z3o,ewo,g2,Zde,owo,rwo,Oj,two,awo,nwo,h2,ece,swo,lwo,Vj,iwo,dwo,cwo,p2,oce,fwo,mwo,Xj,gwo,hwo,pwo,_2,rce,_wo,uwo,zj,bwo,vwo,Fwo,u2,tce,Two,Mwo,Wj,Ewo,Cwo,wwo,b2,ace,Awo,ywo,Qj,Lwo,xwo,$wo,v2,nce,kwo,Swo,Hj,Rwo,Pwo,Bwo,F2,sce,Iwo,Nwo,Uj,qwo,jwo,Dwo,T2,lce,Gwo,Owo,Jj,Vwo,Xwo,zwo,M2,ice,Wwo,Qwo,Yj,Hwo,Uwo,Jwo,E2,dce,Ywo,Kwo,Kj,Zwo,e6o,o6o,C2,cce,r6o,t6o,Zj,a6o,n6o,s6o,w2,fce,l6o,i6o,eD,d6o,c6o,f6o,A2,mce,m6o,g6o,oD,h6o,p6o,_6o,y2,gce,u6o,b6o,rD,v6o,F6o,T6o,L2,hce,M6o,E6o,tD,C6o,w6o,A6o,x2,pce,y6o,L6o,aD,x6o,$6o,k6o,$2,_ce,S6o,R6o,nD,P6o,B6o,I6o,k2,uce,N6o,q6o,sD,j6o,D6o,G6o,S2,bce,O6o,V6o,lD,X6o,z6o,W6o,R2,vce,Q6o,H6o,iD,U6o,J6o,Y6o,P2,Fce,K6o,Z6o,dD,eAo,oAo,rAo,B2,Tce,tAo,aAo,cD,nAo,sAo,lAo,I2,Mce,iAo,dAo,fD,cAo,fAo,mAo,N2,Ece,gAo,hAo,mD,pAo,_Ao,uAo,q2,Cce,bAo,vAo,gD,FAo,TAo,MAo,j2,EAo,wce,CAo,wAo,Ace,AAo,yAo,D2,Nqe,Pi,G2,yce,vy,LAo,Lce,xAo,qqe,ko,Fy,$Ao,Bi,kAo,hD,SAo,RAo,pD,PAo,BAo,IAo,Ty,NAo,xce,qAo,jAo,DAo,st,My,GAo,$ce,OAo,VAo,Ii,XAo,kce,zAo,WAo,_D,QAo,HAo,UAo,O2,JAo,Ze,Ey,YAo,Sce,KAo,ZAo,ka,eyo,Rce,oyo,ryo,Pce,tyo,ayo,Bce,nyo,syo,lyo,Q,V2,Ice,iyo,dyo,uD,cyo,fyo,myo,X2,Nce,gyo,hyo,bD,pyo,_yo,uyo,z2,qce,byo,vyo,vD,Fyo,Tyo,Myo,W2,jce,Eyo,Cyo,FD,wyo,Ayo,yyo,Q2,Dce,Lyo,xyo,TD,$yo,kyo,Syo,H2,Gce,Ryo,Pyo,MD,Byo,Iyo,Nyo,U2,Oce,qyo,jyo,ED,Dyo,Gyo,Oyo,J2,Vce,Vyo,Xyo,CD,zyo,Wyo,Qyo,Y2,Xce,Hyo,Uyo,wD,Jyo,Yyo,Kyo,K2,zce,Zyo,eLo,AD,oLo,rLo,tLo,Z2,Wce,aLo,nLo,yD,sLo,lLo,iLo,e1,Qce,dLo,cLo,LD,fLo,mLo,gLo,o1,Hce,hLo,pLo,xD,_Lo,uLo,bLo,r1,Uce,vLo,FLo,$D,TLo,MLo,ELo,t1,Jce,CLo,wLo,kD,ALo,yLo,LLo,a1,Yce,xLo,$Lo,SD,kLo,SLo,RLo,n1,Kce,PLo,BLo,RD,ILo,NLo,qLo,s1,Zce,jLo,DLo,PD,GLo,OLo,VLo,l1,efe,XLo,zLo,BD,WLo,QLo,HLo,i1,ofe,ULo,JLo,ID,YLo,KLo,ZLo,d1,rfe,e8o,o8o,ND,r8o,t8o,a8o,c1,tfe,n8o,s8o,qD,l8o,i8o,d8o,f1,afe,c8o,f8o,jD,m8o,g8o,h8o,m1,nfe,p8o,_8o,DD,u8o,b8o,v8o,g1,sfe,F8o,T8o,GD,M8o,E8o,C8o,h1,lfe,w8o,A8o,OD,y8o,L8o,x8o,p1,ife,$8o,k8o,VD,S8o,R8o,P8o,_1,dfe,B8o,I8o,XD,N8o,q8o,j8o,u1,cfe,D8o,G8o,zD,O8o,V8o,X8o,b1,ffe,z8o,W8o,WD,Q8o,H8o,U8o,v1,mfe,J8o,Y8o,gfe,K8o,Z8o,e9o,F1,hfe,o9o,r9o,QD,t9o,a9o,n9o,T1,pfe,s9o,l9o,HD,i9o,d9o,c9o,M1,_fe,f9o,m9o,UD,g9o,h9o,p9o,E1,ufe,_9o,u9o,JD,b9o,v9o,F9o,C1,T9o,bfe,M9o,E9o,vfe,C9o,w9o,w1,jqe,Ni,A1,Ffe,Cy,A9o,Tfe,y9o,Dqe,So,wy,L9o,qi,x9o,YD,$9o,k9o,KD,S9o,R9o,P9o,Ay,B9o,Mfe,I9o,N9o,q9o,lt,yy,j9o,Efe,D9o,G9o,ji,O9o,Cfe,V9o,X9o,ZD,z9o,W9o,Q9o,y1,H9o,eo,Ly,U9o,wfe,J9o,Y9o,Sa,K9o,Afe,Z9o,exo,yfe,oxo,rxo,Lfe,txo,axo,nxo,_e,L1,xfe,sxo,lxo,eG,ixo,dxo,cxo,x1,$fe,fxo,mxo,oG,gxo,hxo,pxo,$1,kfe,_xo,uxo,rG,bxo,vxo,Fxo,k1,Sfe,Txo,Mxo,tG,Exo,Cxo,wxo,S1,Rfe,Axo,yxo,aG,Lxo,xxo,$xo,R1,Pfe,kxo,Sxo,nG,Rxo,Pxo,Bxo,P1,Bfe,Ixo,Nxo,sG,qxo,jxo,Dxo,B1,Ife,Gxo,Oxo,lG,Vxo,Xxo,zxo,I1,Nfe,Wxo,Qxo,iG,Hxo,Uxo,Jxo,N1,qfe,Yxo,Kxo,dG,Zxo,e$o,o$o,q1,jfe,r$o,t$o,cG,a$o,n$o,s$o,j1,Dfe,l$o,i$o,fG,d$o,c$o,f$o,D1,Gfe,m$o,g$o,mG,h$o,p$o,_$o,G1,Ofe,u$o,b$o,gG,v$o,F$o,T$o,O1,Vfe,M$o,E$o,hG,C$o,w$o,A$o,V1,Xfe,y$o,L$o,pG,x$o,$$o,k$o,X1,S$o,zfe,R$o,P$o,Wfe,B$o,I$o,z1,Gqe,Di,W1,Qfe,xy,N$o,Hfe,q$o,Oqe,Ro,$y,j$o,Gi,D$o,_G,G$o,O$o,uG,V$o,X$o,z$o,ky,W$o,Ufe,Q$o,H$o,U$o,it,Sy,J$o,Jfe,Y$o,K$o,Oi,Z$o,Yfe,eko,oko,bG,rko,tko,ako,Q1,nko,oo,Ry,sko,Kfe,lko,iko,Ra,dko,Zfe,cko,fko,eme,mko,gko,ome,hko,pko,_ko,N,H1,rme,uko,bko,vG,vko,Fko,Tko,U1,tme,Mko,Eko,FG,Cko,wko,Ako,J1,ame,yko,Lko,TG,xko,$ko,kko,Y1,nme,Sko,Rko,MG,Pko,Bko,Iko,K1,sme,Nko,qko,EG,jko,Dko,Gko,Z1,lme,Oko,Vko,CG,Xko,zko,Wko,eb,ime,Qko,Hko,wG,Uko,Jko,Yko,ob,dme,Kko,Zko,AG,eSo,oSo,rSo,rb,cme,tSo,aSo,yG,nSo,sSo,lSo,tb,fme,iSo,dSo,LG,cSo,fSo,mSo,ab,mme,gSo,hSo,xG,pSo,_So,uSo,nb,gme,bSo,vSo,$G,FSo,TSo,MSo,sb,hme,ESo,CSo,kG,wSo,ASo,ySo,lb,pme,LSo,xSo,SG,$So,kSo,SSo,ib,_me,RSo,PSo,RG,BSo,ISo,NSo,db,ume,qSo,jSo,PG,DSo,GSo,OSo,cb,bme,VSo,XSo,BG,zSo,WSo,QSo,fb,vme,HSo,USo,IG,JSo,YSo,KSo,mb,Fme,ZSo,eRo,NG,oRo,rRo,tRo,gb,Tme,aRo,nRo,qG,sRo,lRo,iRo,hb,Mme,dRo,cRo,jG,fRo,mRo,gRo,pb,Eme,hRo,pRo,DG,_Ro,uRo,bRo,_b,Cme,vRo,FRo,GG,TRo,MRo,ERo,ub,wme,CRo,wRo,OG,ARo,yRo,LRo,bb,Ame,xRo,$Ro,VG,kRo,SRo,RRo,vb,yme,PRo,BRo,XG,IRo,NRo,qRo,Fb,Lme,jRo,DRo,zG,GRo,ORo,VRo,Tb,xme,XRo,zRo,WG,WRo,QRo,HRo,Mb,$me,URo,JRo,QG,YRo,KRo,ZRo,Eb,kme,ePo,oPo,HG,rPo,tPo,aPo,Cb,Sme,nPo,sPo,UG,lPo,iPo,dPo,wb,Rme,cPo,fPo,JG,mPo,gPo,hPo,Ab,Pme,pPo,_Po,YG,uPo,bPo,vPo,yb,Bme,FPo,TPo,KG,MPo,EPo,CPo,Lb,Ime,wPo,APo,ZG,yPo,LPo,xPo,xb,Nme,$Po,kPo,eO,SPo,RPo,PPo,$b,qme,BPo,IPo,oO,NPo,qPo,jPo,kb,jme,DPo,GPo,rO,OPo,VPo,XPo,Sb,Dme,zPo,WPo,tO,QPo,HPo,UPo,Rb,Gme,JPo,YPo,aO,KPo,ZPo,eBo,Pb,Ome,oBo,rBo,nO,tBo,aBo,nBo,Bb,Vme,sBo,lBo,sO,iBo,dBo,cBo,Ib,Xme,fBo,mBo,lO,gBo,hBo,pBo,Nb,zme,_Bo,uBo,iO,bBo,vBo,FBo,qb,Wme,TBo,MBo,dO,EBo,CBo,wBo,jb,Qme,ABo,yBo,cO,LBo,xBo,$Bo,Db,Hme,kBo,SBo,fO,RBo,PBo,BBo,Gb,IBo,Ume,NBo,qBo,Jme,jBo,DBo,Ob,Vqe,Vi,Vb,Yme,Py,GBo,Kme,OBo,Xqe,Po,By,VBo,Xi,XBo,mO,zBo,WBo,gO,QBo,HBo,UBo,Iy,JBo,Zme,YBo,KBo,ZBo,dt,Ny,eIo,ege,oIo,rIo,zi,tIo,oge,aIo,nIo,hO,sIo,lIo,iIo,Xb,dIo,ro,qy,cIo,rge,fIo,mIo,Pa,gIo,tge,hIo,pIo,age,_Io,uIo,nge,bIo,vIo,FIo,K,zb,sge,TIo,MIo,pO,EIo,CIo,wIo,Wb,lge,AIo,yIo,_O,LIo,xIo,$Io,Qb,ige,kIo,SIo,uO,RIo,PIo,BIo,Hb,dge,IIo,NIo,bO,qIo,jIo,DIo,Ub,cge,GIo,OIo,vO,VIo,XIo,zIo,Jb,fge,WIo,QIo,FO,HIo,UIo,JIo,Yb,mge,YIo,KIo,TO,ZIo,eNo,oNo,Kb,gge,rNo,tNo,MO,aNo,nNo,sNo,Zb,hge,lNo,iNo,EO,dNo,cNo,fNo,ev,pge,mNo,gNo,CO,hNo,pNo,_No,ov,_ge,uNo,bNo,wO,vNo,FNo,TNo,rv,uge,MNo,ENo,AO,CNo,wNo,ANo,tv,bge,yNo,LNo,yO,xNo,$No,kNo,av,vge,SNo,RNo,LO,PNo,BNo,INo,nv,Fge,NNo,qNo,xO,jNo,DNo,GNo,sv,Tge,ONo,VNo,$O,XNo,zNo,WNo,lv,Mge,QNo,HNo,kO,UNo,JNo,YNo,iv,Ege,KNo,ZNo,SO,eqo,oqo,rqo,dv,Cge,tqo,aqo,RO,nqo,sqo,lqo,cv,wge,iqo,dqo,PO,cqo,fqo,mqo,fv,Age,gqo,hqo,BO,pqo,_qo,uqo,mv,yge,bqo,vqo,IO,Fqo,Tqo,Mqo,gv,Lge,Eqo,Cqo,NO,wqo,Aqo,yqo,hv,xge,Lqo,xqo,qO,$qo,kqo,Sqo,pv,$ge,Rqo,Pqo,jO,Bqo,Iqo,Nqo,_v,kge,qqo,jqo,DO,Dqo,Gqo,Oqo,uv,Sge,Vqo,Xqo,GO,zqo,Wqo,Qqo,bv,Rge,Hqo,Uqo,OO,Jqo,Yqo,Kqo,vv,Pge,Zqo,ejo,VO,ojo,rjo,tjo,Fv,ajo,Bge,njo,sjo,Ige,ljo,ijo,Tv,zqe,Wi,Mv,Nge,jy,djo,qge,cjo,Wqe,Bo,Dy,fjo,Qi,mjo,XO,gjo,hjo,zO,pjo,_jo,ujo,Gy,bjo,jge,vjo,Fjo,Tjo,ct,Oy,Mjo,Dge,Ejo,Cjo,Hi,wjo,Gge,Ajo,yjo,WO,Ljo,xjo,$jo,Ev,kjo,to,Vy,Sjo,Oge,Rjo,Pjo,Ba,Bjo,Vge,Ijo,Njo,Xge,qjo,jjo,zge,Djo,Gjo,Ojo,Yr,Cv,Wge,Vjo,Xjo,QO,zjo,Wjo,Qjo,wv,Qge,Hjo,Ujo,HO,Jjo,Yjo,Kjo,Av,Hge,Zjo,eDo,UO,oDo,rDo,tDo,yv,Uge,aDo,nDo,JO,sDo,lDo,iDo,Lv,Jge,dDo,cDo,YO,fDo,mDo,gDo,xv,hDo,Yge,pDo,_Do,Kge,uDo,bDo,$v,Qqe,Ui,kv,Zge,Xy,vDo,ehe,FDo,Hqe,Io,zy,TDo,Ji,MDo,KO,EDo,CDo,ZO,wDo,ADo,yDo,Wy,LDo,ohe,xDo,$Do,kDo,ft,Qy,SDo,rhe,RDo,PDo,Yi,BDo,the,IDo,NDo,eV,qDo,jDo,DDo,Sv,GDo,ao,Hy,ODo,ahe,VDo,XDo,Ia,zDo,nhe,WDo,QDo,she,HDo,UDo,lhe,JDo,YDo,KDo,H,Rv,ihe,ZDo,eGo,oV,oGo,rGo,tGo,Pv,dhe,aGo,nGo,rV,sGo,lGo,iGo,Bv,che,dGo,cGo,tV,fGo,mGo,gGo,Iv,fhe,hGo,pGo,aV,_Go,uGo,bGo,Nv,mhe,vGo,FGo,nV,TGo,MGo,EGo,qv,ghe,CGo,wGo,sV,AGo,yGo,LGo,jv,hhe,xGo,$Go,lV,kGo,SGo,RGo,Dv,phe,PGo,BGo,iV,IGo,NGo,qGo,Gv,_he,jGo,DGo,dV,GGo,OGo,VGo,Ov,uhe,XGo,zGo,cV,WGo,QGo,HGo,Vv,bhe,UGo,JGo,fV,YGo,KGo,ZGo,Xv,vhe,eOo,oOo,mV,rOo,tOo,aOo,zv,Fhe,nOo,sOo,gV,lOo,iOo,dOo,Wv,The,cOo,fOo,hV,mOo,gOo,hOo,Qv,Mhe,pOo,_Oo,pV,uOo,bOo,vOo,Hv,Ehe,FOo,TOo,_V,MOo,EOo,COo,Uv,Che,wOo,AOo,uV,yOo,LOo,xOo,Jv,whe,$Oo,kOo,bV,SOo,ROo,POo,Yv,Ahe,BOo,IOo,vV,NOo,qOo,jOo,Kv,yhe,DOo,GOo,FV,OOo,VOo,XOo,Zv,Lhe,zOo,WOo,TV,QOo,HOo,UOo,e0,xhe,JOo,YOo,MV,KOo,ZOo,eVo,o0,$he,oVo,rVo,EV,tVo,aVo,nVo,r0,khe,sVo,lVo,CV,iVo,dVo,cVo,t0,She,fVo,mVo,wV,gVo,hVo,pVo,a0,Rhe,_Vo,uVo,AV,bVo,vVo,FVo,n0,Phe,TVo,MVo,yV,EVo,CVo,wVo,s0,Bhe,AVo,yVo,LV,LVo,xVo,$Vo,l0,Ihe,kVo,SVo,xV,RVo,PVo,BVo,i0,Nhe,IVo,NVo,$V,qVo,jVo,DVo,d0,qhe,GVo,OVo,kV,VVo,XVo,zVo,c0,jhe,WVo,QVo,SV,HVo,UVo,JVo,f0,Dhe,YVo,KVo,RV,ZVo,eXo,oXo,m0,Ghe,rXo,tXo,PV,aXo,nXo,sXo,g0,lXo,Ohe,iXo,dXo,Vhe,cXo,fXo,h0,Uqe,Ki,p0,Xhe,Uy,mXo,zhe,gXo,Jqe,No,Jy,hXo,Zi,pXo,BV,_Xo,uXo,IV,bXo,vXo,FXo,Yy,TXo,Whe,MXo,EXo,CXo,mt,Ky,wXo,Qhe,AXo,yXo,ed,LXo,Hhe,xXo,$Xo,NV,kXo,SXo,RXo,_0,PXo,no,Zy,BXo,Uhe,IXo,NXo,Na,qXo,Jhe,jXo,DXo,Yhe,GXo,OXo,Khe,VXo,XXo,zXo,V,u0,Zhe,WXo,QXo,qV,HXo,UXo,JXo,b0,epe,YXo,KXo,jV,ZXo,ezo,ozo,v0,ope,rzo,tzo,DV,azo,nzo,szo,F0,rpe,lzo,izo,GV,dzo,czo,fzo,T0,tpe,mzo,gzo,OV,hzo,pzo,_zo,M0,ape,uzo,bzo,VV,vzo,Fzo,Tzo,E0,npe,Mzo,Ezo,XV,Czo,wzo,Azo,C0,spe,yzo,Lzo,zV,xzo,$zo,kzo,w0,lpe,Szo,Rzo,WV,Pzo,Bzo,Izo,A0,ipe,Nzo,qzo,QV,jzo,Dzo,Gzo,y0,dpe,Ozo,Vzo,HV,Xzo,zzo,Wzo,L0,cpe,Qzo,Hzo,UV,Uzo,Jzo,Yzo,x0,fpe,Kzo,Zzo,JV,eWo,oWo,rWo,$0,mpe,tWo,aWo,YV,nWo,sWo,lWo,k0,gpe,iWo,dWo,KV,cWo,fWo,mWo,S0,hpe,gWo,hWo,ZV,pWo,_Wo,uWo,R0,ppe,bWo,vWo,eX,FWo,TWo,MWo,P0,_pe,EWo,CWo,oX,wWo,AWo,yWo,B0,upe,LWo,xWo,rX,$Wo,kWo,SWo,I0,bpe,RWo,PWo,tX,BWo,IWo,NWo,N0,vpe,qWo,jWo,aX,DWo,GWo,OWo,q0,Fpe,VWo,XWo,nX,zWo,WWo,QWo,j0,Tpe,HWo,UWo,sX,JWo,YWo,KWo,D0,Mpe,ZWo,eQo,lX,oQo,rQo,tQo,G0,Epe,aQo,nQo,iX,sQo,lQo,iQo,O0,Cpe,dQo,cQo,dX,fQo,mQo,gQo,V0,wpe,hQo,pQo,cX,_Qo,uQo,bQo,X0,Ape,vQo,FQo,fX,TQo,MQo,EQo,z0,ype,CQo,wQo,mX,AQo,yQo,LQo,W0,Lpe,xQo,$Qo,gX,kQo,SQo,RQo,Q0,xpe,PQo,BQo,hX,IQo,NQo,qQo,H0,$pe,jQo,DQo,pX,GQo,OQo,VQo,U0,kpe,XQo,zQo,_X,WQo,QQo,HQo,J0,Spe,UQo,JQo,uX,YQo,KQo,ZQo,Y0,Rpe,eHo,oHo,bX,rHo,tHo,aHo,K0,Ppe,nHo,sHo,vX,lHo,iHo,dHo,Z0,Bpe,cHo,fHo,FX,mHo,gHo,hHo,eF,Ipe,pHo,_Ho,TX,uHo,bHo,vHo,oF,Npe,FHo,THo,MX,MHo,EHo,CHo,rF,qpe,wHo,AHo,EX,yHo,LHo,xHo,tF,$Ho,jpe,kHo,SHo,Dpe,RHo,PHo,aF,Yqe,od,nF,Gpe,eL,BHo,Ope,IHo,Kqe,qo,oL,NHo,rd,qHo,CX,jHo,DHo,wX,GHo,OHo,VHo,rL,XHo,Vpe,zHo,WHo,QHo,gt,tL,HHo,Xpe,UHo,JHo,td,YHo,zpe,KHo,ZHo,AX,eUo,oUo,rUo,sF,tUo,so,aL,aUo,Wpe,nUo,sUo,qa,lUo,Qpe,iUo,dUo,Hpe,cUo,fUo,Upe,mUo,gUo,hUo,Jpe,lF,Ype,pUo,_Uo,yX,uUo,bUo,vUo,iF,FUo,Kpe,TUo,MUo,Zpe,EUo,CUo,dF,Zqe,ad,cF,e_e,nL,wUo,o_e,AUo,eje,jo,sL,yUo,nd,LUo,LX,xUo,$Uo,xX,kUo,SUo,RUo,lL,PUo,r_e,BUo,IUo,NUo,ht,iL,qUo,t_e,jUo,DUo,sd,GUo,a_e,OUo,VUo,$X,XUo,zUo,WUo,fF,QUo,lo,dL,HUo,n_e,UUo,JUo,ja,YUo,s_e,KUo,ZUo,l_e,eJo,oJo,i_e,rJo,tJo,aJo,Fe,mF,d_e,nJo,sJo,kX,lJo,iJo,dJo,gF,c_e,cJo,fJo,SX,mJo,gJo,hJo,hF,f_e,pJo,_Jo,RX,uJo,bJo,vJo,pF,m_e,FJo,TJo,PX,MJo,EJo,CJo,Bs,g_e,wJo,AJo,BX,yJo,LJo,IX,xJo,$Jo,kJo,_F,h_e,SJo,RJo,NX,PJo,BJo,IJo,pt,p_e,NJo,qJo,qX,jJo,DJo,jX,GJo,OJo,DX,VJo,XJo,zJo,uF,__e,WJo,QJo,GX,HJo,UJo,JJo,bF,u_e,YJo,KJo,OX,ZJo,eYo,oYo,vF,b_e,rYo,tYo,VX,aYo,nYo,sYo,FF,v_e,lYo,iYo,XX,dYo,cYo,fYo,TF,F_e,mYo,gYo,zX,hYo,pYo,_Yo,MF,T_e,uYo,bYo,WX,vYo,FYo,TYo,EF,M_e,MYo,EYo,QX,CYo,wYo,AYo,CF,yYo,E_e,LYo,xYo,C_e,$Yo,kYo,wF,oje,ld,AF,w_e,cL,SYo,A_e,RYo,rje,Do,fL,PYo,id,BYo,HX,IYo,NYo,UX,qYo,jYo,DYo,mL,GYo,y_e,OYo,VYo,XYo,_t,gL,zYo,L_e,WYo,QYo,dd,HYo,x_e,UYo,JYo,JX,YYo,KYo,ZYo,yF,eKo,io,hL,oKo,$_e,rKo,tKo,Da,aKo,k_e,nKo,sKo,S_e,lKo,iKo,R_e,dKo,cKo,fKo,P_e,LF,B_e,mKo,gKo,YX,hKo,pKo,_Ko,xF,uKo,I_e,bKo,vKo,N_e,FKo,TKo,$F,tje,cd,kF,q_e,pL,MKo,j_e,EKo,aje,Go,_L,CKo,fd,wKo,KX,AKo,yKo,ZX,LKo,xKo,$Ko,uL,kKo,D_e,SKo,RKo,PKo,ut,bL,BKo,G_e,IKo,NKo,md,qKo,O_e,jKo,DKo,ez,GKo,OKo,VKo,SF,XKo,co,vL,zKo,V_e,WKo,QKo,Ga,HKo,X_e,UKo,JKo,z_e,YKo,KKo,W_e,ZKo,eZo,oZo,ke,RF,Q_e,rZo,tZo,oz,aZo,nZo,sZo,PF,H_e,lZo,iZo,rz,dZo,cZo,fZo,BF,U_e,mZo,gZo,tz,hZo,pZo,_Zo,IF,J_e,uZo,bZo,az,vZo,FZo,TZo,NF,Y_e,MZo,EZo,nz,CZo,wZo,AZo,qF,K_e,yZo,LZo,sz,xZo,$Zo,kZo,jF,Z_e,SZo,RZo,lz,PZo,BZo,IZo,DF,eue,NZo,qZo,iz,jZo,DZo,GZo,GF,oue,OZo,VZo,dz,XZo,zZo,WZo,OF,QZo,rue,HZo,UZo,tue,JZo,YZo,VF,nje,gd,XF,aue,FL,KZo,nue,ZZo,sje,Oo,TL,eer,hd,oer,cz,rer,ter,fz,aer,ner,ser,ML,ler,sue,ier,der,cer,bt,EL,fer,lue,mer,ger,pd,her,iue,per,_er,mz,uer,ber,ver,zF,Fer,fo,CL,Ter,due,Mer,Eer,Oa,Cer,cue,wer,Aer,fue,yer,Ler,mue,xer,$er,ker,Kr,WF,gue,Ser,Rer,gz,Per,Ber,Ier,QF,hue,Ner,qer,hz,jer,Der,Ger,HF,pue,Oer,Ver,pz,Xer,zer,Wer,UF,_ue,Qer,Her,_z,Uer,Jer,Yer,JF,uue,Ker,Zer,uz,eor,oor,ror,YF,tor,bue,aor,nor,vue,sor,lor,KF,lje,_d,ZF,Fue,wL,ior,Tue,dor,ije,Vo,AL,cor,ud,mor,bz,gor,hor,vz,por,_or,uor,yL,bor,Mue,vor,For,Tor,vt,LL,Mor,Eue,Eor,Cor,bd,wor,Cue,Aor,yor,Fz,Lor,xor,$or,eT,kor,mo,xL,Sor,wue,Ror,Por,Va,Bor,Aue,Ior,Nor,yue,qor,jor,Lue,Dor,Gor,Oor,Se,oT,xue,Vor,Xor,Tz,zor,Wor,Qor,rT,$ue,Hor,Uor,Mz,Jor,Yor,Kor,tT,kue,Zor,err,Ez,orr,rrr,trr,aT,Sue,arr,nrr,Cz,srr,lrr,irr,nT,Rue,drr,crr,wz,frr,mrr,grr,sT,Pue,hrr,prr,Az,_rr,urr,brr,lT,Bue,vrr,Frr,yz,Trr,Mrr,Err,iT,Iue,Crr,wrr,Lz,Arr,yrr,Lrr,dT,Nue,xrr,$rr,xz,krr,Srr,Rrr,cT,Prr,que,Brr,Irr,jue,Nrr,qrr,fT,dje,vd,mT,Due,$L,jrr,Gue,Drr,cje,Xo,kL,Grr,Fd,Orr,$z,Vrr,Xrr,kz,zrr,Wrr,Qrr,SL,Hrr,Oue,Urr,Jrr,Yrr,Ft,RL,Krr,Vue,Zrr,etr,Td,otr,Xue,rtr,ttr,Sz,atr,ntr,str,gT,ltr,go,PL,itr,zue,dtr,ctr,Xa,ftr,Wue,mtr,gtr,Que,htr,ptr,Hue,_tr,utr,btr,BL,hT,Uue,vtr,Ftr,Rz,Ttr,Mtr,Etr,pT,Jue,Ctr,wtr,Pz,Atr,ytr,Ltr,_T,xtr,Yue,$tr,ktr,Kue,Str,Rtr,uT,fje,Md,bT,Zue,IL,Ptr,e2e,Btr,mje,zo,NL,Itr,Ed,Ntr,Bz,qtr,jtr,Iz,Dtr,Gtr,Otr,qL,Vtr,o2e,Xtr,ztr,Wtr,Tt,jL,Qtr,r2e,Htr,Utr,Cd,Jtr,t2e,Ytr,Ktr,Nz,Ztr,ear,oar,vT,rar,ho,DL,tar,a2e,aar,nar,za,sar,n2e,lar,iar,s2e,dar,car,l2e,far,mar,gar,Zr,FT,i2e,har,par,qz,_ar,uar,bar,TT,d2e,Far,Tar,jz,Mar,Ear,Car,MT,c2e,war,Aar,Dz,yar,Lar,xar,ET,f2e,$ar,kar,Gz,Sar,Rar,Par,CT,m2e,Bar,Iar,Oz,Nar,qar,jar,wT,Dar,g2e,Gar,Oar,h2e,Var,Xar,AT,gje,wd,yT,p2e,GL,zar,_2e,War,hje,Wo,OL,Qar,Ad,Har,Vz,Uar,Jar,Xz,Yar,Kar,Zar,VL,enr,u2e,onr,rnr,tnr,Mt,XL,anr,b2e,nnr,snr,yd,lnr,v2e,inr,dnr,zz,cnr,fnr,mnr,LT,gnr,po,zL,hnr,F2e,pnr,_nr,Wa,unr,T2e,bnr,vnr,M2e,Fnr,Tnr,E2e,Mnr,Enr,Cnr,Ld,xT,C2e,wnr,Anr,Wz,ynr,Lnr,xnr,$T,w2e,$nr,knr,Qz,Snr,Rnr,Pnr,kT,A2e,Bnr,Inr,Hz,Nnr,qnr,jnr,ST,Dnr,y2e,Gnr,Onr,L2e,Vnr,Xnr,RT,pje,xd,PT,x2e,WL,znr,$2e,Wnr,_je,Qo,QL,Qnr,$d,Hnr,Uz,Unr,Jnr,Jz,Ynr,Knr,Znr,HL,esr,k2e,osr,rsr,tsr,Et,UL,asr,S2e,nsr,ssr,kd,lsr,R2e,isr,dsr,Yz,csr,fsr,msr,BT,gsr,_o,JL,hsr,P2e,psr,_sr,Qa,usr,B2e,bsr,vsr,I2e,Fsr,Tsr,N2e,Msr,Esr,Csr,YL,IT,q2e,wsr,Asr,Kz,ysr,Lsr,xsr,NT,j2e,$sr,ksr,Zz,Ssr,Rsr,Psr,qT,Bsr,D2e,Isr,Nsr,G2e,qsr,jsr,jT,uje,Sd,DT,O2e,KL,Dsr,V2e,Gsr,bje,Ho,ZL,Osr,Rd,Vsr,eW,Xsr,zsr,oW,Wsr,Qsr,Hsr,e8,Usr,X2e,Jsr,Ysr,Ksr,Ct,o8,Zsr,z2e,elr,olr,Pd,rlr,W2e,tlr,alr,rW,nlr,slr,llr,GT,ilr,uo,r8,dlr,Q2e,clr,flr,Ha,mlr,H2e,glr,hlr,U2e,plr,_lr,J2e,ulr,blr,vlr,Y2e,OT,K2e,Flr,Tlr,tW,Mlr,Elr,Clr,VT,wlr,Z2e,Alr,ylr,e1e,Llr,xlr,XT,vje,Bd,zT,o1e,t8,$lr,r1e,klr,Fje,Uo,a8,Slr,Id,Rlr,aW,Plr,Blr,nW,Ilr,Nlr,qlr,n8,jlr,t1e,Dlr,Glr,Olr,wt,s8,Vlr,a1e,Xlr,zlr,Nd,Wlr,n1e,Qlr,Hlr,sW,Ulr,Jlr,Ylr,WT,Klr,bo,l8,Zlr,s1e,eir,oir,Ua,rir,l1e,tir,air,i1e,nir,sir,d1e,lir,iir,dir,Ja,QT,c1e,cir,fir,lW,mir,gir,hir,HT,f1e,pir,_ir,iW,uir,bir,vir,UT,m1e,Fir,Tir,dW,Mir,Eir,Cir,JT,g1e,wir,Air,cW,yir,Lir,xir,YT,$ir,h1e,kir,Sir,p1e,Rir,Pir,KT,Tje,qd,ZT,_1e,i8,Bir,u1e,Iir,Mje,Jo,d8,Nir,jd,qir,fW,jir,Dir,mW,Gir,Oir,Vir,c8,Xir,b1e,zir,Wir,Qir,At,f8,Hir,v1e,Uir,Jir,Dd,Yir,F1e,Kir,Zir,gW,edr,odr,rdr,e7,tdr,vo,m8,adr,T1e,ndr,sdr,Ya,ldr,M1e,idr,ddr,E1e,cdr,fdr,C1e,mdr,gdr,hdr,w1e,o7,A1e,pdr,_dr,hW,udr,bdr,vdr,r7,Fdr,y1e,Tdr,Mdr,L1e,Edr,Cdr,t7,Eje,Gd,a7,x1e,g8,wdr,$1e,Adr,Cje,Yo,h8,ydr,Od,Ldr,pW,xdr,$dr,_W,kdr,Sdr,Rdr,p8,Pdr,k1e,Bdr,Idr,Ndr,yt,_8,qdr,S1e,jdr,Ddr,Vd,Gdr,R1e,Odr,Vdr,uW,Xdr,zdr,Wdr,n7,Qdr,wr,u8,Hdr,P1e,Udr,Jdr,Ka,Ydr,B1e,Kdr,Zdr,I1e,ecr,ocr,N1e,rcr,tcr,acr,q,s7,q1e,ncr,scr,bW,lcr,icr,dcr,l7,j1e,ccr,fcr,vW,mcr,gcr,hcr,i7,D1e,pcr,_cr,FW,ucr,bcr,vcr,d7,G1e,Fcr,Tcr,TW,Mcr,Ecr,Ccr,c7,O1e,wcr,Acr,MW,ycr,Lcr,xcr,f7,V1e,$cr,kcr,EW,Scr,Rcr,Pcr,m7,X1e,Bcr,Icr,CW,Ncr,qcr,jcr,g7,z1e,Dcr,Gcr,wW,Ocr,Vcr,Xcr,h7,W1e,zcr,Wcr,AW,Qcr,Hcr,Ucr,p7,Q1e,Jcr,Ycr,yW,Kcr,Zcr,efr,_7,H1e,ofr,rfr,LW,tfr,afr,nfr,u7,U1e,sfr,lfr,xW,ifr,dfr,cfr,b7,J1e,ffr,mfr,$W,gfr,hfr,pfr,v7,Y1e,_fr,ufr,kW,bfr,vfr,Ffr,F7,K1e,Tfr,Mfr,SW,Efr,Cfr,wfr,T7,Z1e,Afr,yfr,RW,Lfr,xfr,$fr,M7,ebe,kfr,Sfr,PW,Rfr,Pfr,Bfr,Is,obe,Ifr,Nfr,BW,qfr,jfr,IW,Dfr,Gfr,Ofr,E7,rbe,Vfr,Xfr,NW,zfr,Wfr,Qfr,C7,tbe,Hfr,Ufr,qW,Jfr,Yfr,Kfr,w7,abe,Zfr,emr,jW,omr,rmr,tmr,A7,nbe,amr,nmr,DW,smr,lmr,imr,y7,sbe,dmr,cmr,GW,fmr,mmr,gmr,L7,lbe,hmr,pmr,OW,_mr,umr,bmr,x7,ibe,vmr,Fmr,VW,Tmr,Mmr,Emr,$7,dbe,Cmr,wmr,XW,Amr,ymr,Lmr,k7,cbe,xmr,$mr,zW,kmr,Smr,Rmr,S7,fbe,Pmr,Bmr,WW,Imr,Nmr,qmr,R7,mbe,jmr,Dmr,QW,Gmr,Omr,Vmr,P7,gbe,Xmr,zmr,HW,Wmr,Qmr,Hmr,B7,hbe,Umr,Jmr,UW,Ymr,Kmr,Zmr,I7,pbe,egr,ogr,JW,rgr,tgr,agr,N7,_be,ngr,sgr,YW,lgr,igr,dgr,q7,ube,cgr,fgr,KW,mgr,ggr,hgr,j7,bbe,pgr,_gr,ZW,ugr,bgr,vgr,D7,vbe,Fgr,Tgr,eQ,Mgr,Egr,Cgr,G7,Fbe,wgr,Agr,oQ,ygr,Lgr,xgr,O7,Tbe,$gr,kgr,rQ,Sgr,Rgr,Pgr,V7,Mbe,Bgr,Igr,tQ,Ngr,qgr,jgr,X7,Ebe,Dgr,Ggr,aQ,Ogr,Vgr,Xgr,z7,Cbe,zgr,Wgr,nQ,Qgr,Hgr,Ugr,W7,wbe,Jgr,Ygr,sQ,Kgr,Zgr,ehr,Q7,Abe,ohr,rhr,lQ,thr,ahr,nhr,H7,ybe,shr,lhr,iQ,ihr,dhr,chr,U7,Lbe,fhr,mhr,dQ,ghr,hhr,phr,J7,xbe,_hr,uhr,cQ,bhr,vhr,Fhr,Y7,wje,Xd,K7,$be,b8,Thr,kbe,Mhr,Aje,Ko,v8,Ehr,zd,Chr,fQ,whr,Ahr,mQ,yhr,Lhr,xhr,F8,$hr,Sbe,khr,Shr,Rhr,Lt,T8,Phr,Rbe,Bhr,Ihr,Wd,Nhr,Pbe,qhr,jhr,gQ,Dhr,Ghr,Ohr,Z7,Vhr,Ar,M8,Xhr,Bbe,zhr,Whr,Za,Qhr,Ibe,Hhr,Uhr,Nbe,Jhr,Yhr,qbe,Khr,Zhr,epr,se,eM,jbe,opr,rpr,hQ,tpr,apr,npr,oM,Dbe,spr,lpr,pQ,ipr,dpr,cpr,rM,Gbe,fpr,mpr,_Q,gpr,hpr,ppr,tM,Obe,_pr,upr,uQ,bpr,vpr,Fpr,aM,Vbe,Tpr,Mpr,bQ,Epr,Cpr,wpr,nM,Xbe,Apr,ypr,vQ,Lpr,xpr,$pr,sM,zbe,kpr,Spr,FQ,Rpr,Ppr,Bpr,lM,Wbe,Ipr,Npr,TQ,qpr,jpr,Dpr,iM,Qbe,Gpr,Opr,MQ,Vpr,Xpr,zpr,dM,Hbe,Wpr,Qpr,EQ,Hpr,Upr,Jpr,cM,Ube,Ypr,Kpr,CQ,Zpr,e_r,o_r,fM,Jbe,r_r,t_r,wQ,a_r,n_r,s_r,mM,Ybe,l_r,i_r,AQ,d_r,c_r,f_r,gM,Kbe,m_r,g_r,yQ,h_r,p_r,__r,hM,Zbe,u_r,b_r,LQ,v_r,F_r,T_r,pM,eve,M_r,E_r,xQ,C_r,w_r,A_r,_M,ove,y_r,L_r,$Q,x_r,$_r,k_r,uM,rve,S_r,R_r,kQ,P_r,B_r,I_r,bM,tve,N_r,q_r,SQ,j_r,D_r,G_r,vM,ave,O_r,V_r,RQ,X_r,z_r,W_r,FM,nve,Q_r,H_r,PQ,U_r,J_r,Y_r,TM,sve,K_r,Z_r,BQ,eur,our,rur,MM,lve,tur,aur,IQ,nur,sur,lur,EM,yje,Qd,CM,ive,E8,iur,dve,dur,Lje,Zo,C8,cur,Hd,fur,NQ,mur,gur,qQ,hur,pur,_ur,w8,uur,cve,bur,vur,Fur,xt,A8,Tur,fve,Mur,Eur,Ud,Cur,mve,wur,Aur,jQ,yur,Lur,xur,wM,$ur,yr,y8,kur,gve,Sur,Rur,en,Pur,hve,Bur,Iur,pve,Nur,qur,_ve,jur,Dur,Gur,Me,AM,uve,Our,Vur,DQ,Xur,zur,Wur,yM,bve,Qur,Hur,GQ,Uur,Jur,Yur,LM,vve,Kur,Zur,OQ,e2r,o2r,r2r,xM,Fve,t2r,a2r,VQ,n2r,s2r,l2r,$M,Tve,i2r,d2r,XQ,c2r,f2r,m2r,kM,Mve,g2r,h2r,zQ,p2r,_2r,u2r,SM,Eve,b2r,v2r,WQ,F2r,T2r,M2r,RM,Cve,E2r,C2r,QQ,w2r,A2r,y2r,PM,wve,L2r,x2r,HQ,$2r,k2r,S2r,BM,Ave,R2r,P2r,UQ,B2r,I2r,N2r,IM,yve,q2r,j2r,JQ,D2r,G2r,O2r,NM,Lve,V2r,X2r,YQ,z2r,W2r,Q2r,qM,xje,Jd,jM,xve,L8,H2r,$ve,U2r,$je,er,x8,J2r,Yd,Y2r,KQ,K2r,Z2r,ZQ,e1r,o1r,r1r,$8,t1r,kve,a1r,n1r,s1r,$t,k8,l1r,Sve,i1r,d1r,Kd,c1r,Rve,f1r,m1r,eH,g1r,h1r,p1r,DM,_1r,Lr,S8,u1r,Pve,b1r,v1r,on,F1r,Bve,T1r,M1r,Ive,E1r,C1r,Nve,w1r,A1r,y1r,rn,GM,qve,L1r,x1r,oH,$1r,k1r,S1r,OM,jve,R1r,P1r,rH,B1r,I1r,N1r,VM,Dve,q1r,j1r,tH,D1r,G1r,O1r,XM,Gve,V1r,X1r,aH,z1r,W1r,Q1r,zM,kje,Zd,WM,Ove,R8,H1r,Vve,U1r,Sje,or,P8,J1r,ec,Y1r,nH,K1r,Z1r,sH,ebr,obr,rbr,B8,tbr,Xve,abr,nbr,sbr,kt,I8,lbr,zve,ibr,dbr,oc,cbr,Wve,fbr,mbr,lH,gbr,hbr,pbr,QM,_br,xr,N8,ubr,Qve,bbr,vbr,tn,Fbr,Hve,Tbr,Mbr,Uve,Ebr,Cbr,Jve,wbr,Abr,ybr,ie,HM,Yve,Lbr,xbr,iH,$br,kbr,Sbr,UM,Kve,Rbr,Pbr,dH,Bbr,Ibr,Nbr,JM,Zve,qbr,jbr,cH,Dbr,Gbr,Obr,YM,e0e,Vbr,Xbr,fH,zbr,Wbr,Qbr,KM,o0e,Hbr,Ubr,mH,Jbr,Ybr,Kbr,ZM,r0e,Zbr,evr,gH,ovr,rvr,tvr,e4,t0e,avr,nvr,hH,svr,lvr,ivr,o4,a0e,dvr,cvr,pH,fvr,mvr,gvr,r4,n0e,hvr,pvr,_H,_vr,uvr,bvr,t4,s0e,vvr,Fvr,uH,Tvr,Mvr,Evr,a4,l0e,Cvr,wvr,bH,Avr,yvr,Lvr,n4,i0e,xvr,$vr,vH,kvr,Svr,Rvr,s4,d0e,Pvr,Bvr,FH,Ivr,Nvr,qvr,l4,c0e,jvr,Dvr,TH,Gvr,Ovr,Vvr,i4,f0e,Xvr,zvr,MH,Wvr,Qvr,Hvr,d4,m0e,Uvr,Jvr,EH,Yvr,Kvr,Zvr,c4,g0e,e0r,o0r,CH,r0r,t0r,a0r,f4,h0e,n0r,s0r,wH,l0r,i0r,d0r,m4,p0e,c0r,f0r,AH,m0r,g0r,h0r,g4,_0e,p0r,_0r,yH,u0r,b0r,v0r,h4,Rje,rc,p4,u0e,q8,F0r,b0e,T0r,Pje,rr,j8,M0r,tc,E0r,LH,C0r,w0r,xH,A0r,y0r,L0r,D8,x0r,v0e,$0r,k0r,S0r,St,G8,R0r,F0e,P0r,B0r,ac,I0r,T0e,N0r,q0r,$H,j0r,D0r,G0r,_4,O0r,$r,O8,V0r,M0e,X0r,z0r,an,W0r,E0e,Q0r,H0r,C0e,U0r,J0r,w0e,Y0r,K0r,Z0r,ye,u4,A0e,eFr,oFr,kH,rFr,tFr,aFr,b4,y0e,nFr,sFr,SH,lFr,iFr,dFr,v4,L0e,cFr,fFr,RH,mFr,gFr,hFr,F4,x0e,pFr,_Fr,PH,uFr,bFr,vFr,T4,$0e,FFr,TFr,BH,MFr,EFr,CFr,M4,k0e,wFr,AFr,IH,yFr,LFr,xFr,E4,S0e,$Fr,kFr,NH,SFr,RFr,PFr,C4,R0e,BFr,IFr,qH,NFr,qFr,jFr,w4,P0e,DFr,GFr,jH,OFr,VFr,XFr,A4,B0e,zFr,WFr,DH,QFr,HFr,UFr,y4,Bje,nc,L4,I0e,V8,JFr,N0e,YFr,Ije,tr,X8,KFr,sc,ZFr,GH,eTr,oTr,OH,rTr,tTr,aTr,z8,nTr,q0e,sTr,lTr,iTr,Rt,W8,dTr,j0e,cTr,fTr,lc,mTr,D0e,gTr,hTr,VH,pTr,_Tr,uTr,x4,bTr,kr,Q8,vTr,G0e,FTr,TTr,nn,MTr,O0e,ETr,CTr,V0e,wTr,ATr,X0e,yTr,LTr,xTr,oe,$4,z0e,$Tr,kTr,XH,STr,RTr,PTr,k4,W0e,BTr,ITr,zH,NTr,qTr,jTr,S4,Q0e,DTr,GTr,WH,OTr,VTr,XTr,R4,H0e,zTr,WTr,QH,QTr,HTr,UTr,P4,U0e,JTr,YTr,HH,KTr,ZTr,e7r,B4,J0e,o7r,r7r,UH,t7r,a7r,n7r,I4,Y0e,s7r,l7r,JH,i7r,d7r,c7r,N4,K0e,f7r,m7r,YH,g7r,h7r,p7r,q4,Z0e,_7r,u7r,KH,b7r,v7r,F7r,j4,eFe,T7r,M7r,ZH,E7r,C7r,w7r,D4,oFe,A7r,y7r,eU,L7r,x7r,$7r,G4,rFe,k7r,S7r,oU,R7r,P7r,B7r,O4,tFe,I7r,N7r,rU,q7r,j7r,D7r,V4,aFe,G7r,O7r,tU,V7r,X7r,z7r,X4,nFe,W7r,Q7r,aU,H7r,U7r,J7r,z4,sFe,Y7r,K7r,nU,Z7r,eMr,oMr,W4,lFe,rMr,tMr,sU,aMr,nMr,sMr,Q4,iFe,lMr,iMr,lU,dMr,cMr,fMr,H4,dFe,mMr,gMr,iU,hMr,pMr,_Mr,U4,cFe,uMr,bMr,dU,vMr,FMr,TMr,J4,fFe,MMr,EMr,cU,CMr,wMr,AMr,Y4,mFe,yMr,LMr,fU,xMr,$Mr,kMr,K4,gFe,SMr,RMr,mU,PMr,BMr,IMr,Z4,hFe,NMr,qMr,gU,jMr,DMr,GMr,eE,pFe,OMr,VMr,hU,XMr,zMr,WMr,oE,_Fe,QMr,HMr,pU,UMr,JMr,YMr,rE,Nje,ic,tE,uFe,H8,KMr,bFe,ZMr,qje,ar,U8,e4r,dc,o4r,_U,r4r,t4r,uU,a4r,n4r,s4r,J8,l4r,vFe,i4r,d4r,c4r,Pt,Y8,f4r,FFe,m4r,g4r,cc,h4r,TFe,p4r,_4r,bU,u4r,b4r,v4r,aE,F4r,Sr,K8,T4r,MFe,M4r,E4r,sn,C4r,EFe,w4r,A4r,CFe,y4r,L4r,wFe,x4r,$4r,k4r,pe,nE,AFe,S4r,R4r,vU,P4r,B4r,I4r,sE,yFe,N4r,q4r,FU,j4r,D4r,G4r,lE,LFe,O4r,V4r,TU,X4r,z4r,W4r,iE,xFe,Q4r,H4r,MU,U4r,J4r,Y4r,dE,$Fe,K4r,Z4r,EU,eEr,oEr,rEr,cE,kFe,tEr,aEr,CU,nEr,sEr,lEr,fE,SFe,iEr,dEr,wU,cEr,fEr,mEr,mE,RFe,gEr,hEr,AU,pEr,_Er,uEr,gE,PFe,bEr,vEr,yU,FEr,TEr,MEr,hE,BFe,EEr,CEr,LU,wEr,AEr,yEr,pE,IFe,LEr,xEr,xU,$Er,kEr,SEr,_E,NFe,REr,PEr,$U,BEr,IEr,NEr,uE,qFe,qEr,jEr,kU,DEr,GEr,OEr,bE,jFe,VEr,XEr,SU,zEr,WEr,QEr,vE,DFe,HEr,UEr,RU,JEr,YEr,KEr,FE,GFe,ZEr,eCr,PU,oCr,rCr,tCr,TE,OFe,aCr,nCr,BU,sCr,lCr,iCr,ME,jje,fc,EE,VFe,Z8,dCr,XFe,cCr,Dje,nr,e9,fCr,mc,mCr,IU,gCr,hCr,NU,pCr,_Cr,uCr,o9,bCr,zFe,vCr,FCr,TCr,Bt,r9,MCr,WFe,ECr,CCr,gc,wCr,QFe,ACr,yCr,qU,LCr,xCr,$Cr,CE,kCr,Rr,t9,SCr,HFe,RCr,PCr,ln,BCr,UFe,ICr,NCr,JFe,qCr,jCr,YFe,DCr,GCr,OCr,a9,wE,KFe,VCr,XCr,jU,zCr,WCr,QCr,AE,ZFe,HCr,UCr,DU,JCr,YCr,KCr,yE,Gje,hc,LE,eTe,n9,ZCr,oTe,e5r,Oje,sr,s9,o5r,pc,r5r,GU,t5r,a5r,OU,n5r,s5r,l5r,l9,i5r,rTe,d5r,c5r,f5r,It,i9,m5r,tTe,g5r,h5r,_c,p5r,aTe,_5r,u5r,VU,b5r,v5r,F5r,xE,T5r,Pr,d9,M5r,nTe,E5r,C5r,dn,w5r,sTe,A5r,y5r,lTe,L5r,x5r,iTe,$5r,k5r,S5r,dTe,$E,cTe,R5r,P5r,XU,B5r,I5r,N5r,kE,Vje,uc,SE,fTe,c9,q5r,mTe,j5r,Xje,lr,f9,D5r,bc,G5r,zU,O5r,V5r,WU,X5r,z5r,W5r,m9,Q5r,gTe,H5r,U5r,J5r,Nt,g9,Y5r,hTe,K5r,Z5r,vc,e3r,pTe,o3r,r3r,QU,t3r,a3r,n3r,RE,s3r,Br,h9,l3r,_Te,i3r,d3r,cn,c3r,uTe,f3r,m3r,bTe,g3r,h3r,vTe,p3r,_3r,u3r,de,PE,FTe,b3r,v3r,HU,F3r,T3r,M3r,BE,TTe,E3r,C3r,UU,w3r,A3r,y3r,IE,MTe,L3r,x3r,JU,$3r,k3r,S3r,NE,ETe,R3r,P3r,YU,B3r,I3r,N3r,qE,CTe,q3r,j3r,KU,D3r,G3r,O3r,jE,wTe,V3r,X3r,ZU,z3r,W3r,Q3r,DE,ATe,H3r,U3r,eJ,J3r,Y3r,K3r,GE,yTe,Z3r,ewr,oJ,owr,rwr,twr,OE,LTe,awr,nwr,rJ,swr,lwr,iwr,VE,xTe,dwr,cwr,tJ,fwr,mwr,gwr,XE,$Te,hwr,pwr,aJ,_wr,uwr,bwr,zE,kTe,vwr,Fwr,nJ,Twr,Mwr,Ewr,WE,STe,Cwr,wwr,sJ,Awr,ywr,Lwr,QE,RTe,xwr,$wr,lJ,kwr,Swr,Rwr,HE,PTe,Pwr,Bwr,iJ,Iwr,Nwr,qwr,UE,BTe,jwr,Dwr,dJ,Gwr,Owr,Vwr,JE,ITe,Xwr,zwr,cJ,Wwr,Qwr,Hwr,YE,NTe,Uwr,Jwr,fJ,Ywr,Kwr,Zwr,KE,qTe,e6r,o6r,mJ,r6r,t6r,a6r,ZE,jTe,n6r,s6r,gJ,l6r,i6r,d6r,eC,zje,Fc,oC,DTe,p9,c6r,GTe,f6r,Wje,ir,_9,m6r,Tc,g6r,hJ,h6r,p6r,pJ,_6r,u6r,b6r,u9,v6r,OTe,F6r,T6r,M6r,qt,b9,E6r,VTe,C6r,w6r,Mc,A6r,XTe,y6r,L6r,_J,x6r,$6r,k6r,rC,S6r,Ir,v9,R6r,zTe,P6r,B6r,fn,I6r,WTe,N6r,q6r,QTe,j6r,D6r,HTe,G6r,O6r,V6r,ce,tC,UTe,X6r,z6r,uJ,W6r,Q6r,H6r,aC,JTe,U6r,J6r,bJ,Y6r,K6r,Z6r,nC,YTe,eAr,oAr,vJ,rAr,tAr,aAr,sC,KTe,nAr,sAr,FJ,lAr,iAr,dAr,lC,ZTe,cAr,fAr,TJ,mAr,gAr,hAr,iC,e7e,pAr,_Ar,MJ,uAr,bAr,vAr,dC,o7e,FAr,TAr,EJ,MAr,EAr,CAr,cC,r7e,wAr,AAr,CJ,yAr,LAr,xAr,fC,t7e,$Ar,kAr,wJ,SAr,RAr,PAr,mC,a7e,BAr,IAr,AJ,NAr,qAr,jAr,gC,n7e,DAr,GAr,yJ,OAr,VAr,XAr,hC,s7e,zAr,WAr,LJ,QAr,HAr,UAr,pC,l7e,JAr,YAr,xJ,KAr,ZAr,eyr,_C,i7e,oyr,ryr,$J,tyr,ayr,nyr,uC,d7e,syr,lyr,kJ,iyr,dyr,cyr,bC,c7e,fyr,myr,SJ,gyr,hyr,pyr,vC,f7e,_yr,uyr,RJ,byr,vyr,Fyr,FC,m7e,Tyr,Myr,PJ,Eyr,Cyr,wyr,TC,g7e,Ayr,yyr,BJ,Lyr,xyr,$yr,MC,h7e,kyr,Syr,IJ,Ryr,Pyr,Byr,EC,Qje,Ec,CC,p7e,F9,Iyr,_7e,Nyr,Hje,dr,T9,qyr,Cc,jyr,NJ,Dyr,Gyr,qJ,Oyr,Vyr,Xyr,M9,zyr,u7e,Wyr,Qyr,Hyr,jt,E9,Uyr,b7e,Jyr,Yyr,wc,Kyr,v7e,Zyr,eLr,jJ,oLr,rLr,tLr,wC,aLr,Nr,C9,nLr,F7e,sLr,lLr,mn,iLr,T7e,dLr,cLr,M7e,fLr,mLr,E7e,gLr,hLr,pLr,C7e,AC,w7e,_Lr,uLr,DJ,bLr,vLr,FLr,yC,Uje,Ac,LC,A7e,w9,TLr,y7e,MLr,Jje,cr,A9,ELr,yc,CLr,GJ,wLr,ALr,OJ,yLr,LLr,xLr,y9,$Lr,L7e,kLr,SLr,RLr,Dt,L9,PLr,x7e,BLr,ILr,Lc,NLr,$7e,qLr,jLr,VJ,DLr,GLr,OLr,xC,VLr,qr,x9,XLr,k7e,zLr,WLr,gn,QLr,S7e,HLr,ULr,R7e,JLr,YLr,P7e,KLr,ZLr,e8r,B7e,$C,I7e,o8r,r8r,XJ,t8r,a8r,n8r,kC,Yje,xc,SC,N7e,$9,s8r,q7e,l8r,Kje,fr,k9,i8r,$c,d8r,zJ,c8r,f8r,WJ,m8r,g8r,h8r,S9,p8r,j7e,_8r,u8r,b8r,Gt,R9,v8r,D7e,F8r,T8r,kc,M8r,G7e,E8r,C8r,QJ,w8r,A8r,y8r,RC,L8r,jr,P9,x8r,O7e,$8r,k8r,hn,S8r,V7e,R8r,P8r,X7e,B8r,I8r,z7e,N8r,q8r,j8r,te,PC,W7e,D8r,G8r,HJ,O8r,V8r,X8r,BC,Q7e,z8r,W8r,UJ,Q8r,H8r,U8r,IC,H7e,J8r,Y8r,JJ,K8r,Z8r,e9r,NC,U7e,o9r,r9r,YJ,t9r,a9r,n9r,qC,J7e,s9r,l9r,KJ,i9r,d9r,c9r,jC,Y7e,f9r,m9r,ZJ,g9r,h9r,p9r,DC,K7e,_9r,u9r,eY,b9r,v9r,F9r,GC,Z7e,T9r,M9r,oY,E9r,C9r,w9r,OC,eMe,A9r,y9r,rY,L9r,x9r,$9r,VC,oMe,k9r,S9r,tY,R9r,P9r,B9r,XC,rMe,I9r,N9r,aY,q9r,j9r,D9r,zC,tMe,G9r,O9r,nY,V9r,X9r,z9r,WC,aMe,W9r,Q9r,sY,H9r,U9r,J9r,QC,nMe,Y9r,K9r,lY,Z9r,exr,oxr,HC,sMe,rxr,txr,iY,axr,nxr,sxr,UC,lMe,lxr,ixr,dY,dxr,cxr,fxr,JC,iMe,mxr,gxr,cY,hxr,pxr,_xr,YC,dMe,uxr,bxr,fY,vxr,Fxr,Txr,KC,cMe,Mxr,Exr,mY,Cxr,wxr,Axr,ZC,fMe,yxr,Lxr,gY,xxr,$xr,kxr,e5,mMe,Sxr,Rxr,hY,Pxr,Bxr,Ixr,o5,gMe,Nxr,qxr,pY,jxr,Dxr,Gxr,r5,hMe,Oxr,Vxr,_Y,Xxr,zxr,Wxr,t5,pMe,Qxr,Hxr,uY,Uxr,Jxr,Yxr,a5,_Me,Kxr,Zxr,bY,e$r,o$r,r$r,n5,Zje,Sc,s5,uMe,B9,t$r,bMe,a$r,eDe,mr,I9,n$r,Rc,s$r,vY,l$r,i$r,FY,d$r,c$r,f$r,N9,m$r,vMe,g$r,h$r,p$r,Ot,q9,_$r,FMe,u$r,b$r,Pc,v$r,TMe,F$r,T$r,TY,M$r,E$r,C$r,l5,w$r,Dr,j9,A$r,MMe,y$r,L$r,pn,x$r,EMe,$$r,k$r,CMe,S$r,R$r,wMe,P$r,B$r,I$r,Re,i5,AMe,N$r,q$r,MY,j$r,D$r,G$r,d5,yMe,O$r,V$r,EY,X$r,z$r,W$r,c5,LMe,Q$r,H$r,CY,U$r,J$r,Y$r,f5,xMe,K$r,Z$r,wY,ekr,okr,rkr,m5,$Me,tkr,akr,AY,nkr,skr,lkr,g5,kMe,ikr,dkr,yY,ckr,fkr,mkr,h5,SMe,gkr,hkr,LY,pkr,_kr,ukr,p5,RMe,bkr,vkr,xY,Fkr,Tkr,Mkr,_5,PMe,Ekr,Ckr,$Y,wkr,Akr,ykr,u5,oDe,Bc,b5,BMe,D9,Lkr,IMe,xkr,rDe,gr,G9,$kr,Ic,kkr,kY,Skr,Rkr,SY,Pkr,Bkr,Ikr,O9,Nkr,NMe,qkr,jkr,Dkr,Vt,V9,Gkr,qMe,Okr,Vkr,Nc,Xkr,jMe,zkr,Wkr,RY,Qkr,Hkr,Ukr,v5,Jkr,Gr,X9,Ykr,DMe,Kkr,Zkr,_n,eSr,GMe,oSr,rSr,OMe,tSr,aSr,VMe,nSr,sSr,lSr,Ee,F5,XMe,iSr,dSr,PY,cSr,fSr,mSr,T5,zMe,gSr,hSr,BY,pSr,_Sr,uSr,M5,WMe,bSr,vSr,IY,FSr,TSr,MSr,E5,QMe,ESr,CSr,NY,wSr,ASr,ySr,C5,HMe,LSr,xSr,qY,$Sr,kSr,SSr,w5,UMe,RSr,PSr,jY,BSr,ISr,NSr,A5,JMe,qSr,jSr,DY,DSr,GSr,OSr,y5,YMe,VSr,XSr,GY,zSr,WSr,QSr,L5,KMe,HSr,USr,OY,JSr,YSr,KSr,x5,ZMe,ZSr,eRr,VY,oRr,rRr,tRr,$5,e4e,aRr,nRr,XY,sRr,lRr,iRr,k5,o4e,dRr,cRr,zY,fRr,mRr,gRr,S5,tDe,qc,R5,r4e,z9,hRr,t4e,pRr,aDe,hr,W9,_Rr,jc,uRr,WY,bRr,vRr,QY,FRr,TRr,MRr,Q9,ERr,a4e,CRr,wRr,ARr,Xt,H9,yRr,n4e,LRr,xRr,Dc,$Rr,s4e,kRr,SRr,HY,RRr,PRr,BRr,P5,IRr,Or,U9,NRr,l4e,qRr,jRr,un,DRr,i4e,GRr,ORr,d4e,VRr,XRr,c4e,zRr,WRr,QRr,Le,B5,f4e,HRr,URr,UY,JRr,YRr,KRr,I5,m4e,ZRr,ePr,JY,oPr,rPr,tPr,N5,g4e,aPr,nPr,YY,sPr,lPr,iPr,q5,h4e,dPr,cPr,KY,fPr,mPr,gPr,j5,p4e,hPr,pPr,ZY,_Pr,uPr,bPr,D5,_4e,vPr,FPr,eK,TPr,MPr,EPr,G5,u4e,CPr,wPr,oK,APr,yPr,LPr,O5,b4e,xPr,$Pr,rK,kPr,SPr,RPr,V5,v4e,PPr,BPr,tK,IPr,NPr,qPr,X5,F4e,jPr,DPr,aK,GPr,OPr,VPr,z5,nDe,Gc,W5,T4e,J9,XPr,M4e,zPr,sDe,pr,Y9,WPr,Oc,QPr,nK,HPr,UPr,sK,JPr,YPr,KPr,K9,ZPr,E4e,eBr,oBr,rBr,zt,Z9,tBr,C4e,aBr,nBr,Vc,sBr,w4e,lBr,iBr,lK,dBr,cBr,fBr,Q5,mBr,Vr,ex,gBr,A4e,hBr,pBr,bn,_Br,y4e,uBr,bBr,L4e,vBr,FBr,x4e,TBr,MBr,EBr,Pe,H5,$4e,CBr,wBr,iK,ABr,yBr,LBr,U5,k4e,xBr,$Br,dK,kBr,SBr,RBr,J5,S4e,PBr,BBr,cK,IBr,NBr,qBr,Y5,R4e,jBr,DBr,fK,GBr,OBr,VBr,K5,P4e,XBr,zBr,mK,WBr,QBr,HBr,Z5,B4e,UBr,JBr,gK,YBr,KBr,ZBr,e3,I4e,eIr,oIr,hK,rIr,tIr,aIr,o3,N4e,nIr,sIr,pK,lIr,iIr,dIr,r3,q4e,cIr,fIr,_K,mIr,gIr,hIr,t3,lDe,Xc,a3,j4e,ox,pIr,D4e,_Ir,iDe,_r,rx,uIr,zc,bIr,uK,vIr,FIr,bK,TIr,MIr,EIr,tx,CIr,G4e,wIr,AIr,yIr,Wt,ax,LIr,O4e,xIr,$Ir,Wc,kIr,V4e,SIr,RIr,vK,PIr,BIr,IIr,n3,NIr,Xr,nx,qIr,X4e,jIr,DIr,vn,GIr,z4e,OIr,VIr,W4e,XIr,zIr,Q4e,WIr,QIr,HIr,xe,s3,H4e,UIr,JIr,FK,YIr,KIr,ZIr,l3,U4e,eNr,oNr,TK,rNr,tNr,aNr,i3,J4e,nNr,sNr,MK,lNr,iNr,dNr,d3,Y4e,cNr,fNr,EK,mNr,gNr,hNr,c3,K4e,pNr,_Nr,CK,uNr,bNr,vNr,f3,Z4e,FNr,TNr,wK,MNr,ENr,CNr,m3,eEe,wNr,ANr,AK,yNr,LNr,xNr,g3,oEe,$Nr,kNr,yK,SNr,RNr,PNr,h3,rEe,BNr,INr,LK,NNr,qNr,jNr,p3,tEe,DNr,GNr,xK,ONr,VNr,XNr,_3,dDe,Qc,u3,aEe,sx,zNr,nEe,WNr,cDe,ur,lx,QNr,Hc,HNr,$K,UNr,JNr,kK,YNr,KNr,ZNr,ix,eqr,sEe,oqr,rqr,tqr,Qt,dx,aqr,lEe,nqr,sqr,Uc,lqr,iEe,iqr,dqr,SK,cqr,fqr,mqr,b3,gqr,zr,cx,hqr,dEe,pqr,_qr,Fn,uqr,cEe,bqr,vqr,fEe,Fqr,Tqr,mEe,Mqr,Eqr,Cqr,$e,v3,gEe,wqr,Aqr,RK,yqr,Lqr,xqr,F3,hEe,$qr,kqr,PK,Sqr,Rqr,Pqr,T3,pEe,Bqr,Iqr,BK,Nqr,qqr,jqr,M3,_Ee,Dqr,Gqr,IK,Oqr,Vqr,Xqr,E3,uEe,zqr,Wqr,NK,Qqr,Hqr,Uqr,C3,bEe,Jqr,Yqr,qK,Kqr,Zqr,ejr,w3,vEe,ojr,rjr,jK,tjr,ajr,njr,A3,FEe,sjr,ljr,DK,ijr,djr,cjr,y3,TEe,fjr,mjr,GK,gjr,hjr,pjr,L3,MEe,_jr,ujr,OK,bjr,vjr,Fjr,x3,fDe,Jc,$3,EEe,fx,Tjr,CEe,Mjr,mDe,br,mx,Ejr,Yc,Cjr,VK,wjr,Ajr,XK,yjr,Ljr,xjr,gx,$jr,wEe,kjr,Sjr,Rjr,Ht,hx,Pjr,AEe,Bjr,Ijr,Kc,Njr,yEe,qjr,jjr,zK,Djr,Gjr,Ojr,k3,Vjr,Wr,px,Xjr,LEe,zjr,Wjr,Tn,Qjr,xEe,Hjr,Ujr,$Ee,Jjr,Yjr,kEe,Kjr,Zjr,eDr,De,S3,SEe,oDr,rDr,WK,tDr,aDr,nDr,R3,REe,sDr,lDr,QK,iDr,dDr,cDr,P3,PEe,fDr,mDr,HK,gDr,hDr,pDr,B3,BEe,_Dr,uDr,UK,bDr,vDr,FDr,I3,IEe,TDr,MDr,JK,EDr,CDr,wDr,N3,NEe,ADr,yDr,YK,LDr,xDr,$Dr,q3,qEe,kDr,SDr,KK,RDr,PDr,BDr,j3,jEe,IDr,NDr,ZK,qDr,jDr,DDr,D3,gDe,Zc,G3,DEe,_x,GDr,GEe,ODr,hDe,vr,ux,VDr,ef,XDr,eZ,zDr,WDr,oZ,QDr,HDr,UDr,bx,JDr,OEe,YDr,KDr,ZDr,Ut,vx,eGr,VEe,oGr,rGr,of,tGr,XEe,aGr,nGr,rZ,sGr,lGr,iGr,O3,dGr,Qr,Fx,cGr,zEe,fGr,mGr,Mn,gGr,WEe,hGr,pGr,QEe,_Gr,uGr,HEe,bGr,vGr,FGr,Ge,V3,UEe,TGr,MGr,tZ,EGr,CGr,wGr,X3,JEe,AGr,yGr,aZ,LGr,xGr,$Gr,z3,YEe,kGr,SGr,nZ,RGr,PGr,BGr,W3,KEe,IGr,NGr,sZ,qGr,jGr,DGr,Q3,ZEe,GGr,OGr,lZ,VGr,XGr,zGr,H3,eCe,WGr,QGr,iZ,HGr,UGr,JGr,U3,oCe,YGr,KGr,dZ,ZGr,eOr,oOr,J3,rCe,rOr,tOr,cZ,aOr,nOr,sOr,Y3,pDe,rf,K3,tCe,Tx,lOr,aCe,iOr,_De,Fr,Mx,dOr,tf,cOr,fZ,fOr,mOr,mZ,gOr,hOr,pOr,Ex,_Or,nCe,uOr,bOr,vOr,Jt,Cx,FOr,sCe,TOr,MOr,af,EOr,lCe,COr,wOr,gZ,AOr,yOr,LOr,Z3,xOr,Hr,wx,$Or,iCe,kOr,SOr,En,ROr,dCe,POr,BOr,cCe,IOr,NOr,fCe,qOr,jOr,DOr,mCe,ew,gCe,GOr,OOr,hZ,VOr,XOr,zOr,ow,uDe,nf,rw,hCe,Ax,WOr,pCe,QOr,bDe,Tr,yx,HOr,sf,UOr,pZ,JOr,YOr,_Z,KOr,ZOr,eVr,Lx,oVr,_Ce,rVr,tVr,aVr,Yt,xx,nVr,uCe,sVr,lVr,lf,iVr,bCe,dVr,cVr,uZ,fVr,mVr,gVr,tw,hVr,Ur,$x,pVr,vCe,_Vr,uVr,Cn,bVr,FCe,vVr,FVr,TCe,TVr,MVr,MCe,EVr,CVr,wVr,kx,aw,ECe,AVr,yVr,bZ,LVr,xVr,$Vr,nw,CCe,kVr,SVr,vZ,RVr,PVr,BVr,sw,vDe,df,lw,wCe,Sx,IVr,ACe,NVr,FDe,Mr,Rx,qVr,cf,jVr,FZ,DVr,GVr,TZ,OVr,VVr,XVr,Px,zVr,yCe,WVr,QVr,HVr,Kt,Bx,UVr,LCe,JVr,YVr,ff,KVr,xCe,ZVr,eXr,MZ,oXr,rXr,tXr,iw,aXr,Jr,Ix,nXr,$Ce,sXr,lXr,wn,iXr,kCe,dXr,cXr,SCe,fXr,mXr,RCe,gXr,hXr,pXr,PCe,dw,BCe,_Xr,uXr,EZ,bXr,vXr,FXr,cw,TDe;return d=new re({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),SA=new re({}),RA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new TXr({props:{warning:!0,$$slots:{default:[mkt]},$$scope:{ctx:L}}}),PA=new re({}),BA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/configuration_auto.py#L585"}}),qA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/configuration_auto.py#L608"}}),Cg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[gkt]},$$scope:{ctx:L}}}),jA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/configuration_auto.py#L731"}}),DA=new re({}),GA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/tokenization_auto.py#L391"}}),XA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17202/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/tokenization_auto.py#L405"}}),sh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[hkt]},$$scope:{ctx:L}}}),zA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/tokenization_auto.py#L601"}}),WA=new re({}),QA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),JA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17202/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/feature_extraction_auto.py#L204"}}),qh=new TXr({props:{$$slots:{default:[pkt]},$$scope:{ctx:L}}}),jh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[_kt]},$$scope:{ctx:L}}}),YA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/feature_extraction_auto.py#L331"}}),KA=new re({}),ZA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/processing_auto.py#L88"}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/processing_auto.py#L102"}}),np=new TXr({props:{$$slots:{default:[ukt]},$$scope:{ctx:L}}}),sp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[bkt]},$$scope:{ctx:L}}}),ty=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/processing_auto.py#L255"}}),ay=new re({}),ny=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L739"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),dp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[vkt]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),nu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Fkt]},$$scope:{ctx:L}}}),dy=new re({}),cy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L746"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),lu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Tkt]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),Ku=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Mkt]},$$scope:{ctx:L}}}),hy=new re({}),py=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L761"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),e2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Ekt]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),D2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Ckt]},$$scope:{ctx:L}}}),vy=new re({}),Fy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L768"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),O2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[wkt]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),w1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Akt]},$$scope:{ctx:L}}}),Cy=new re({}),wy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L775"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),y1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ykt]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),z1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Lkt]},$$scope:{ctx:L}}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L784"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Q1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[xkt]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),Ob=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[$kt]},$$scope:{ctx:L}}}),Py=new re({}),By=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L818"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Xb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[kkt]},$$scope:{ctx:L}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),Tv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Skt]},$$scope:{ctx:L}}}),jy=new re({}),Dy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L825"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Ev=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Rkt]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),$v=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Pkt]},$$scope:{ctx:L}}}),Xy=new re({}),zy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L811"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Sv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Bkt]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),h0=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Ikt]},$$scope:{ctx:L}}}),Uy=new re({}),Jy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L793"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),_0=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Nkt]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),aF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[qkt]},$$scope:{ctx:L}}}),eL=new re({}),oL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L800"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),sF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[jkt]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),dF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Dkt]},$$scope:{ctx:L}}}),nL=new re({}),sL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L834"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),fF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Gkt]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),wF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Okt]},$$scope:{ctx:L}}}),cL=new re({}),fL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L873"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),yF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Vkt]},$$scope:{ctx:L}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),$F=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Xkt]},$$scope:{ctx:L}}}),pL=new re({}),_L=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L880"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),SF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[zkt]},$$scope:{ctx:L}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Wkt]},$$scope:{ctx:L}}}),FL=new re({}),TL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L903"}}),EL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Qkt]},$$scope:{ctx:L}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Hkt]},$$scope:{ctx:L}}}),wL=new re({}),AL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L887"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),fT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),$L=new re({}),kL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L894"}}),RL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),gT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Ykt]},$$scope:{ctx:L}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),uT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Kkt]},$$scope:{ctx:L}}}),IL=new re({}),NL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L912"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Zkt]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[eSt]},$$scope:{ctx:L}}}),GL=new re({}),OL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L919"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),LT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[oSt]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[rSt]},$$scope:{ctx:L}}}),WL=new re({}),QL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L866"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),KL=new re({}),ZL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L841"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[nSt]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),XT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),t8=new re({}),a8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L848"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),WT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[iSt]},$$scope:{ctx:L}}}),i8=new re({}),d8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L857"}}),f8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),e7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[dSt]},$$scope:{ctx:L}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),t7=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[cSt]},$$scope:{ctx:L}}}),g8=new re({}),h8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),_8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),n7=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[fSt]},$$scope:{ctx:L}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),Y7=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[mSt]},$$scope:{ctx:L}}}),b8=new re({}),v8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),T8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Z7=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[gSt]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),EM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[hSt]},$$scope:{ctx:L}}}),E8=new re({}),C8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),wM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[pSt]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),qM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[_St]},$$scope:{ctx:L}}}),L8=new re({}),x8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),DM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[uSt]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),zM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[bSt]},$$scope:{ctx:L}}}),R8=new re({}),P8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),I8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),QM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[vSt]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[FSt]},$$scope:{ctx:L}}}),q8=new re({}),j8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),G8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),_4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[TSt]},$$scope:{ctx:L}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),y4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[MSt]},$$scope:{ctx:L}}}),V8=new re({}),X8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),W8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),x4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[ESt]},$$scope:{ctx:L}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),rE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[CSt]},$$scope:{ctx:L}}}),H8=new re({}),U8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),aE=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[wSt]},$$scope:{ctx:L}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ASt]},$$scope:{ctx:L}}}),Z8=new re({}),e9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),r9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[ySt]},$$scope:{ctx:L}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),yE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[LSt]},$$scope:{ctx:L}}}),n9=new re({}),s9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),i9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),xE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[xSt]},$$scope:{ctx:L}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),kE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[$St]},$$scope:{ctx:L}}}),c9=new re({}),f9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),g9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),RE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[kSt]},$$scope:{ctx:L}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),eC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[SSt]},$$scope:{ctx:L}}}),p9=new re({}),_9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),b9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),rC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[RSt]},$$scope:{ctx:L}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[PSt]},$$scope:{ctx:L}}}),F9=new re({}),T9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),E9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[BSt]},$$scope:{ctx:L}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),yC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ISt]},$$scope:{ctx:L}}}),w9=new re({}),A9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),L9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),xC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[NSt]},$$scope:{ctx:L}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),kC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[qSt]},$$scope:{ctx:L}}}),$9=new re({}),k9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),R9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),RC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[jSt]},$$scope:{ctx:L}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),n5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[DSt]},$$scope:{ctx:L}}}),B9=new re({}),I9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),q9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),l5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[GSt]},$$scope:{ctx:L}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),u5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[OSt]},$$scope:{ctx:L}}}),D9=new re({}),G9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),V9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),v5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[VSt]},$$scope:{ctx:L}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),S5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[XSt]},$$scope:{ctx:L}}}),z9=new re({}),W9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),H9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),P5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[zSt]},$$scope:{ctx:L}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),z5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[WSt]},$$scope:{ctx:L}}}),J9=new re({}),Y9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Q5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[QSt]},$$scope:{ctx:L}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),t3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[HSt]},$$scope:{ctx:L}}}),ox=new re({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),n3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[USt]},$$scope:{ctx:L}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),_3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[JSt]},$$scope:{ctx:L}}}),sx=new re({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),b3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[YSt]},$$scope:{ctx:L}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),x3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[KSt]},$$scope:{ctx:L}}}),fx=new re({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),k3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[ZSt]},$$scope:{ctx:L}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),D3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[eRt]},$$scope:{ctx:L}}}),_x=new re({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),O3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[oRt]},$$scope:{ctx:L}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),Y3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[rRt]},$$scope:{ctx:L}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Z3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[tRt]},$$scope:{ctx:L}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[aRt]},$$scope:{ctx:L}}}),Ax=new re({}),yx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[nRt]},$$scope:{ctx:L}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[sRt]},$$scope:{ctx:L}}}),Sx=new re({}),Rx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),iw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[lRt]},$$scope:{ctx:L}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),cw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[iRt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),LA=o("from_pretrained()"),_f=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),xA=o("AutoConfig"),Ln=o(", "),xn=a("a"),$A=o("AutoModel"),pi=o(`, and
`),$n=a("a"),kA=o("AutoTokenizer"),_i=o(" will directly create a class of the relevant architecture. For instance"),uf=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),J$=o("will create a model that is an instance of "),ui=a("a"),Y$=o("BertModel"),K$=o("."),Eo=l(),wa=a("p"),Z$=o("There is one class of "),bf=a("code"),ek=o("AutoModel"),xOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),bqe=l(),bi=a("h2"),vf=a("a"),_oe=a("span"),F(SA.$$.fragment),$Oe=l(),uoe=a("span"),kOe=o("Extending the Auto Classes"),vqe=l(),kn=a("p"),SOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),boe=a("code"),ROe=o("NewModel"),POe=o(", make sure you have a "),voe=a("code"),BOe=o("NewModelConfig"),IOe=o(` then you can add those to the auto
classes like this:`),Fqe=l(),F(RA.$$.fragment),Tqe=l(),ok=a("p"),NOe=o("You will then be able to use the auto classes like you would usually do!"),Mqe=l(),F(Ff.$$.fragment),Eqe=l(),vi=a("h2"),Tf=a("a"),Foe=a("span"),F(PA.$$.fragment),qOe=l(),Toe=a("span"),jOe=o("AutoConfig"),Cqe=l(),Co=a("div"),F(BA.$$.fragment),DOe=l(),IA=a("p"),GOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),rk=a("a"),OOe=o("from_pretrained()"),VOe=o(" class method."),XOe=l(),NA=a("p"),zOe=o("This class cannot be instantiated directly using "),Moe=a("code"),WOe=o("__init__()"),QOe=o(" (throws an error)."),HOe=l(),Er=a("div"),F(qA.$$.fragment),UOe=l(),Eoe=a("p"),JOe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),YOe=l(),Fi=a("p"),KOe=o("The configuration class to instantiate is selected based on the "),Coe=a("code"),ZOe=o("model_type"),eVe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),woe=a("code"),oVe=o("pretrained_model_name_or_path"),rVe=o(":"),tVe=l(),A=a("ul"),Mf=a("li"),Aoe=a("strong"),aVe=o("albert"),nVe=o(" \u2014 "),tk=a("a"),sVe=o("AlbertConfig"),lVe=o(" (ALBERT model)"),iVe=l(),Ef=a("li"),yoe=a("strong"),dVe=o("bart"),cVe=o(" \u2014 "),ak=a("a"),fVe=o("BartConfig"),mVe=o(" (BART model)"),gVe=l(),Cf=a("li"),Loe=a("strong"),hVe=o("beit"),pVe=o(" \u2014 "),nk=a("a"),_Ve=o("BeitConfig"),uVe=o(" (BEiT model)"),bVe=l(),wf=a("li"),xoe=a("strong"),vVe=o("bert"),FVe=o(" \u2014 "),sk=a("a"),TVe=o("BertConfig"),MVe=o(" (BERT model)"),EVe=l(),Af=a("li"),$oe=a("strong"),CVe=o("bert-generation"),wVe=o(" \u2014 "),lk=a("a"),AVe=o("BertGenerationConfig"),yVe=o(" (Bert Generation model)"),LVe=l(),yf=a("li"),koe=a("strong"),xVe=o("big_bird"),$Ve=o(" \u2014 "),ik=a("a"),kVe=o("BigBirdConfig"),SVe=o(" (BigBird model)"),RVe=l(),Lf=a("li"),Soe=a("strong"),PVe=o("bigbird_pegasus"),BVe=o(" \u2014 "),dk=a("a"),IVe=o("BigBirdPegasusConfig"),NVe=o(" (BigBirdPegasus model)"),qVe=l(),xf=a("li"),Roe=a("strong"),jVe=o("blenderbot"),DVe=o(" \u2014 "),ck=a("a"),GVe=o("BlenderbotConfig"),OVe=o(" (Blenderbot model)"),VVe=l(),$f=a("li"),Poe=a("strong"),XVe=o("blenderbot-small"),zVe=o(" \u2014 "),fk=a("a"),WVe=o("BlenderbotSmallConfig"),QVe=o(" (BlenderbotSmall model)"),HVe=l(),kf=a("li"),Boe=a("strong"),UVe=o("bloom"),JVe=o(" \u2014 "),mk=a("a"),YVe=o("BloomConfig"),KVe=o(" (BLOOM model)"),ZVe=l(),Sf=a("li"),Ioe=a("strong"),eXe=o("camembert"),oXe=o(" \u2014 "),gk=a("a"),rXe=o("CamembertConfig"),tXe=o(" (CamemBERT model)"),aXe=l(),Rf=a("li"),Noe=a("strong"),nXe=o("canine"),sXe=o(" \u2014 "),hk=a("a"),lXe=o("CanineConfig"),iXe=o(" (Canine model)"),dXe=l(),Pf=a("li"),qoe=a("strong"),cXe=o("clip"),fXe=o(" \u2014 "),pk=a("a"),mXe=o("CLIPConfig"),gXe=o(" (CLIP model)"),hXe=l(),Bf=a("li"),joe=a("strong"),pXe=o("convbert"),_Xe=o(" \u2014 "),_k=a("a"),uXe=o("ConvBertConfig"),bXe=o(" (ConvBERT model)"),vXe=l(),If=a("li"),Doe=a("strong"),FXe=o("convnext"),TXe=o(" \u2014 "),uk=a("a"),MXe=o("ConvNextConfig"),EXe=o(" (ConvNext model)"),CXe=l(),Nf=a("li"),Goe=a("strong"),wXe=o("ctrl"),AXe=o(" \u2014 "),bk=a("a"),yXe=o("CTRLConfig"),LXe=o(" (CTRL model)"),xXe=l(),qf=a("li"),Ooe=a("strong"),$Xe=o("cvt"),kXe=o(" \u2014 "),vk=a("a"),SXe=o("CvtConfig"),RXe=o(" (CvT model)"),PXe=l(),jf=a("li"),Voe=a("strong"),BXe=o("data2vec-audio"),IXe=o(" \u2014 "),Fk=a("a"),NXe=o("Data2VecAudioConfig"),qXe=o(" (Data2VecAudio model)"),jXe=l(),Df=a("li"),Xoe=a("strong"),DXe=o("data2vec-text"),GXe=o(" \u2014 "),Tk=a("a"),OXe=o("Data2VecTextConfig"),VXe=o(" (Data2VecText model)"),XXe=l(),Gf=a("li"),zoe=a("strong"),zXe=o("data2vec-vision"),WXe=o(" \u2014 "),Mk=a("a"),QXe=o("Data2VecVisionConfig"),HXe=o(" (Data2VecVision model)"),UXe=l(),Of=a("li"),Woe=a("strong"),JXe=o("deberta"),YXe=o(" \u2014 "),Ek=a("a"),KXe=o("DebertaConfig"),ZXe=o(" (DeBERTa model)"),eze=l(),Vf=a("li"),Qoe=a("strong"),oze=o("deberta-v2"),rze=o(" \u2014 "),Ck=a("a"),tze=o("DebertaV2Config"),aze=o(" (DeBERTa-v2 model)"),nze=l(),Xf=a("li"),Hoe=a("strong"),sze=o("decision_transformer"),lze=o(" \u2014 "),wk=a("a"),ize=o("DecisionTransformerConfig"),dze=o(" (Decision Transformer model)"),cze=l(),zf=a("li"),Uoe=a("strong"),fze=o("deit"),mze=o(" \u2014 "),Ak=a("a"),gze=o("DeiTConfig"),hze=o(" (DeiT model)"),pze=l(),Wf=a("li"),Joe=a("strong"),_ze=o("detr"),uze=o(" \u2014 "),yk=a("a"),bze=o("DetrConfig"),vze=o(" (DETR model)"),Fze=l(),Qf=a("li"),Yoe=a("strong"),Tze=o("distilbert"),Mze=o(" \u2014 "),Lk=a("a"),Eze=o("DistilBertConfig"),Cze=o(" (DistilBERT model)"),wze=l(),Hf=a("li"),Koe=a("strong"),Aze=o("dpr"),yze=o(" \u2014 "),xk=a("a"),Lze=o("DPRConfig"),xze=o(" (DPR model)"),$ze=l(),Uf=a("li"),Zoe=a("strong"),kze=o("dpt"),Sze=o(" \u2014 "),$k=a("a"),Rze=o("DPTConfig"),Pze=o(" (DPT model)"),Bze=l(),Jf=a("li"),ere=a("strong"),Ize=o("electra"),Nze=o(" \u2014 "),kk=a("a"),qze=o("ElectraConfig"),jze=o(" (ELECTRA model)"),Dze=l(),Yf=a("li"),ore=a("strong"),Gze=o("encoder-decoder"),Oze=o(" \u2014 "),Sk=a("a"),Vze=o("EncoderDecoderConfig"),Xze=o(" (Encoder decoder model)"),zze=l(),Kf=a("li"),rre=a("strong"),Wze=o("flaubert"),Qze=o(" \u2014 "),Rk=a("a"),Hze=o("FlaubertConfig"),Uze=o(" (FlauBERT model)"),Jze=l(),Zf=a("li"),tre=a("strong"),Yze=o("flava"),Kze=o(" \u2014 "),Pk=a("a"),Zze=o("FlavaConfig"),eWe=o(" (Flava model)"),oWe=l(),em=a("li"),are=a("strong"),rWe=o("fnet"),tWe=o(" \u2014 "),Bk=a("a"),aWe=o("FNetConfig"),nWe=o(" (FNet model)"),sWe=l(),om=a("li"),nre=a("strong"),lWe=o("fsmt"),iWe=o(" \u2014 "),Ik=a("a"),dWe=o("FSMTConfig"),cWe=o(" (FairSeq Machine-Translation model)"),fWe=l(),rm=a("li"),sre=a("strong"),mWe=o("funnel"),gWe=o(" \u2014 "),Nk=a("a"),hWe=o("FunnelConfig"),pWe=o(" (Funnel Transformer model)"),_We=l(),tm=a("li"),lre=a("strong"),uWe=o("glpn"),bWe=o(" \u2014 "),qk=a("a"),vWe=o("GLPNConfig"),FWe=o(" (GLPN model)"),TWe=l(),am=a("li"),ire=a("strong"),MWe=o("gpt2"),EWe=o(" \u2014 "),jk=a("a"),CWe=o("GPT2Config"),wWe=o(" (OpenAI GPT-2 model)"),AWe=l(),nm=a("li"),dre=a("strong"),yWe=o("gpt_neo"),LWe=o(" \u2014 "),Dk=a("a"),xWe=o("GPTNeoConfig"),$We=o(" (GPT Neo model)"),kWe=l(),sm=a("li"),cre=a("strong"),SWe=o("gpt_neox"),RWe=o(" \u2014 "),Gk=a("a"),PWe=o("GPTNeoXConfig"),BWe=o(" (GPT NeoX model)"),IWe=l(),lm=a("li"),fre=a("strong"),NWe=o("gptj"),qWe=o(" \u2014 "),Ok=a("a"),jWe=o("GPTJConfig"),DWe=o(" (GPT-J model)"),GWe=l(),im=a("li"),mre=a("strong"),OWe=o("hubert"),VWe=o(" \u2014 "),Vk=a("a"),XWe=o("HubertConfig"),zWe=o(" (Hubert model)"),WWe=l(),dm=a("li"),gre=a("strong"),QWe=o("ibert"),HWe=o(" \u2014 "),Xk=a("a"),UWe=o("IBertConfig"),JWe=o(" (I-BERT model)"),YWe=l(),cm=a("li"),hre=a("strong"),KWe=o("imagegpt"),ZWe=o(" \u2014 "),zk=a("a"),eQe=o("ImageGPTConfig"),oQe=o(" (ImageGPT model)"),rQe=l(),fm=a("li"),pre=a("strong"),tQe=o("layoutlm"),aQe=o(" \u2014 "),Wk=a("a"),nQe=o("LayoutLMConfig"),sQe=o(" (LayoutLM model)"),lQe=l(),mm=a("li"),_re=a("strong"),iQe=o("layoutlmv2"),dQe=o(" \u2014 "),Qk=a("a"),cQe=o("LayoutLMv2Config"),fQe=o(" (LayoutLMv2 model)"),mQe=l(),gm=a("li"),ure=a("strong"),gQe=o("layoutlmv3"),hQe=o(" \u2014 "),Hk=a("a"),pQe=o("LayoutLMv3Config"),_Qe=o(" (LayoutLMv3 model)"),uQe=l(),hm=a("li"),bre=a("strong"),bQe=o("led"),vQe=o(" \u2014 "),Uk=a("a"),FQe=o("LEDConfig"),TQe=o(" (LED model)"),MQe=l(),pm=a("li"),vre=a("strong"),EQe=o("longformer"),CQe=o(" \u2014 "),Jk=a("a"),wQe=o("LongformerConfig"),AQe=o(" (Longformer model)"),yQe=l(),_m=a("li"),Fre=a("strong"),LQe=o("luke"),xQe=o(" \u2014 "),Yk=a("a"),$Qe=o("LukeConfig"),kQe=o(" (LUKE model)"),SQe=l(),um=a("li"),Tre=a("strong"),RQe=o("lxmert"),PQe=o(" \u2014 "),Kk=a("a"),BQe=o("LxmertConfig"),IQe=o(" (LXMERT model)"),NQe=l(),bm=a("li"),Mre=a("strong"),qQe=o("m2m_100"),jQe=o(" \u2014 "),Zk=a("a"),DQe=o("M2M100Config"),GQe=o(" (M2M100 model)"),OQe=l(),vm=a("li"),Ere=a("strong"),VQe=o("marian"),XQe=o(" \u2014 "),eS=a("a"),zQe=o("MarianConfig"),WQe=o(" (Marian model)"),QQe=l(),Fm=a("li"),Cre=a("strong"),HQe=o("maskformer"),UQe=o(" \u2014 "),oS=a("a"),JQe=o("MaskFormerConfig"),YQe=o(" (MaskFormer model)"),KQe=l(),Tm=a("li"),wre=a("strong"),ZQe=o("mbart"),eHe=o(" \u2014 "),rS=a("a"),oHe=o("MBartConfig"),rHe=o(" (mBART model)"),tHe=l(),Mm=a("li"),Are=a("strong"),aHe=o("megatron-bert"),nHe=o(" \u2014 "),tS=a("a"),sHe=o("MegatronBertConfig"),lHe=o(" (MegatronBert model)"),iHe=l(),Em=a("li"),yre=a("strong"),dHe=o("mobilebert"),cHe=o(" \u2014 "),aS=a("a"),fHe=o("MobileBertConfig"),mHe=o(" (MobileBERT model)"),gHe=l(),Cm=a("li"),Lre=a("strong"),hHe=o("mpnet"),pHe=o(" \u2014 "),nS=a("a"),_He=o("MPNetConfig"),uHe=o(" (MPNet model)"),bHe=l(),wm=a("li"),xre=a("strong"),vHe=o("mt5"),FHe=o(" \u2014 "),sS=a("a"),THe=o("MT5Config"),MHe=o(" (mT5 model)"),EHe=l(),Am=a("li"),$re=a("strong"),CHe=o("nystromformer"),wHe=o(" \u2014 "),lS=a("a"),AHe=o("NystromformerConfig"),yHe=o(" (Nystromformer model)"),LHe=l(),ym=a("li"),kre=a("strong"),xHe=o("openai-gpt"),$He=o(" \u2014 "),iS=a("a"),kHe=o("OpenAIGPTConfig"),SHe=o(" (OpenAI GPT model)"),RHe=l(),Lm=a("li"),Sre=a("strong"),PHe=o("opt"),BHe=o(" \u2014 "),dS=a("a"),IHe=o("OPTConfig"),NHe=o(" (OPT model)"),qHe=l(),xm=a("li"),Rre=a("strong"),jHe=o("pegasus"),DHe=o(" \u2014 "),cS=a("a"),GHe=o("PegasusConfig"),OHe=o(" (Pegasus model)"),VHe=l(),$m=a("li"),Pre=a("strong"),XHe=o("perceiver"),zHe=o(" \u2014 "),fS=a("a"),WHe=o("PerceiverConfig"),QHe=o(" (Perceiver model)"),HHe=l(),km=a("li"),Bre=a("strong"),UHe=o("plbart"),JHe=o(" \u2014 "),mS=a("a"),YHe=o("PLBartConfig"),KHe=o(" (PLBart model)"),ZHe=l(),Sm=a("li"),Ire=a("strong"),eUe=o("poolformer"),oUe=o(" \u2014 "),gS=a("a"),rUe=o("PoolFormerConfig"),tUe=o(" (PoolFormer model)"),aUe=l(),Rm=a("li"),Nre=a("strong"),nUe=o("prophetnet"),sUe=o(" \u2014 "),hS=a("a"),lUe=o("ProphetNetConfig"),iUe=o(" (ProphetNet model)"),dUe=l(),Pm=a("li"),qre=a("strong"),cUe=o("qdqbert"),fUe=o(" \u2014 "),pS=a("a"),mUe=o("QDQBertConfig"),gUe=o(" (QDQBert model)"),hUe=l(),Bm=a("li"),jre=a("strong"),pUe=o("rag"),_Ue=o(" \u2014 "),_S=a("a"),uUe=o("RagConfig"),bUe=o(" (RAG model)"),vUe=l(),Im=a("li"),Dre=a("strong"),FUe=o("realm"),TUe=o(" \u2014 "),uS=a("a"),MUe=o("RealmConfig"),EUe=o(" (Realm model)"),CUe=l(),Nm=a("li"),Gre=a("strong"),wUe=o("reformer"),AUe=o(" \u2014 "),bS=a("a"),yUe=o("ReformerConfig"),LUe=o(" (Reformer model)"),xUe=l(),qm=a("li"),Ore=a("strong"),$Ue=o("regnet"),kUe=o(" \u2014 "),vS=a("a"),SUe=o("RegNetConfig"),RUe=o(" (RegNet model)"),PUe=l(),jm=a("li"),Vre=a("strong"),BUe=o("rembert"),IUe=o(" \u2014 "),FS=a("a"),NUe=o("RemBertConfig"),qUe=o(" (RemBERT model)"),jUe=l(),Dm=a("li"),Xre=a("strong"),DUe=o("resnet"),GUe=o(" \u2014 "),TS=a("a"),OUe=o("ResNetConfig"),VUe=o(" (ResNet model)"),XUe=l(),Gm=a("li"),zre=a("strong"),zUe=o("retribert"),WUe=o(" \u2014 "),MS=a("a"),QUe=o("RetriBertConfig"),HUe=o(" (RetriBERT model)"),UUe=l(),Om=a("li"),Wre=a("strong"),JUe=o("roberta"),YUe=o(" \u2014 "),ES=a("a"),KUe=o("RobertaConfig"),ZUe=o(" (RoBERTa model)"),eJe=l(),Vm=a("li"),Qre=a("strong"),oJe=o("roformer"),rJe=o(" \u2014 "),CS=a("a"),tJe=o("RoFormerConfig"),aJe=o(" (RoFormer model)"),nJe=l(),Xm=a("li"),Hre=a("strong"),sJe=o("segformer"),lJe=o(" \u2014 "),wS=a("a"),iJe=o("SegformerConfig"),dJe=o(" (SegFormer model)"),cJe=l(),zm=a("li"),Ure=a("strong"),fJe=o("sew"),mJe=o(" \u2014 "),AS=a("a"),gJe=o("SEWConfig"),hJe=o(" (SEW model)"),pJe=l(),Wm=a("li"),Jre=a("strong"),_Je=o("sew-d"),uJe=o(" \u2014 "),yS=a("a"),bJe=o("SEWDConfig"),vJe=o(" (SEW-D model)"),FJe=l(),Qm=a("li"),Yre=a("strong"),TJe=o("speech-encoder-decoder"),MJe=o(" \u2014 "),LS=a("a"),EJe=o("SpeechEncoderDecoderConfig"),CJe=o(" (Speech Encoder decoder model)"),wJe=l(),Hm=a("li"),Kre=a("strong"),AJe=o("speech_to_text"),yJe=o(" \u2014 "),xS=a("a"),LJe=o("Speech2TextConfig"),xJe=o(" (Speech2Text model)"),$Je=l(),Um=a("li"),Zre=a("strong"),kJe=o("speech_to_text_2"),SJe=o(" \u2014 "),$S=a("a"),RJe=o("Speech2Text2Config"),PJe=o(" (Speech2Text2 model)"),BJe=l(),Jm=a("li"),ete=a("strong"),IJe=o("splinter"),NJe=o(" \u2014 "),kS=a("a"),qJe=o("SplinterConfig"),jJe=o(" (Splinter model)"),DJe=l(),Ym=a("li"),ote=a("strong"),GJe=o("squeezebert"),OJe=o(" \u2014 "),SS=a("a"),VJe=o("SqueezeBertConfig"),XJe=o(" (SqueezeBERT model)"),zJe=l(),Km=a("li"),rte=a("strong"),WJe=o("swin"),QJe=o(" \u2014 "),RS=a("a"),HJe=o("SwinConfig"),UJe=o(" (Swin model)"),JJe=l(),Zm=a("li"),tte=a("strong"),YJe=o("t5"),KJe=o(" \u2014 "),PS=a("a"),ZJe=o("T5Config"),eYe=o(" (T5 model)"),oYe=l(),eg=a("li"),ate=a("strong"),rYe=o("tapas"),tYe=o(" \u2014 "),BS=a("a"),aYe=o("TapasConfig"),nYe=o(" (TAPAS model)"),sYe=l(),og=a("li"),nte=a("strong"),lYe=o("trajectory_transformer"),iYe=o(" \u2014 "),IS=a("a"),dYe=o("TrajectoryTransformerConfig"),cYe=o(" (Trajectory Transformer model)"),fYe=l(),rg=a("li"),ste=a("strong"),mYe=o("transfo-xl"),gYe=o(" \u2014 "),NS=a("a"),hYe=o("TransfoXLConfig"),pYe=o(" (Transformer-XL model)"),_Ye=l(),tg=a("li"),lte=a("strong"),uYe=o("trocr"),bYe=o(" \u2014 "),qS=a("a"),vYe=o("TrOCRConfig"),FYe=o(" (TrOCR model)"),TYe=l(),ag=a("li"),ite=a("strong"),MYe=o("unispeech"),EYe=o(" \u2014 "),jS=a("a"),CYe=o("UniSpeechConfig"),wYe=o(" (UniSpeech model)"),AYe=l(),ng=a("li"),dte=a("strong"),yYe=o("unispeech-sat"),LYe=o(" \u2014 "),DS=a("a"),xYe=o("UniSpeechSatConfig"),$Ye=o(" (UniSpeechSat model)"),kYe=l(),sg=a("li"),cte=a("strong"),SYe=o("van"),RYe=o(" \u2014 "),GS=a("a"),PYe=o("VanConfig"),BYe=o(" (VAN model)"),IYe=l(),lg=a("li"),fte=a("strong"),NYe=o("vilt"),qYe=o(" \u2014 "),OS=a("a"),jYe=o("ViltConfig"),DYe=o(" (ViLT model)"),GYe=l(),ig=a("li"),mte=a("strong"),OYe=o("vision-encoder-decoder"),VYe=o(" \u2014 "),VS=a("a"),XYe=o("VisionEncoderDecoderConfig"),zYe=o(" (Vision Encoder decoder model)"),WYe=l(),dg=a("li"),gte=a("strong"),QYe=o("vision-text-dual-encoder"),HYe=o(" \u2014 "),XS=a("a"),UYe=o("VisionTextDualEncoderConfig"),JYe=o(" (VisionTextDualEncoder model)"),YYe=l(),cg=a("li"),hte=a("strong"),KYe=o("visual_bert"),ZYe=o(" \u2014 "),zS=a("a"),eKe=o("VisualBertConfig"),oKe=o(" (VisualBert model)"),rKe=l(),fg=a("li"),pte=a("strong"),tKe=o("vit"),aKe=o(" \u2014 "),WS=a("a"),nKe=o("ViTConfig"),sKe=o(" (ViT model)"),lKe=l(),mg=a("li"),_te=a("strong"),iKe=o("vit_mae"),dKe=o(" \u2014 "),QS=a("a"),cKe=o("ViTMAEConfig"),fKe=o(" (ViTMAE model)"),mKe=l(),gg=a("li"),ute=a("strong"),gKe=o("wav2vec2"),hKe=o(" \u2014 "),HS=a("a"),pKe=o("Wav2Vec2Config"),_Ke=o(" (Wav2Vec2 model)"),uKe=l(),hg=a("li"),bte=a("strong"),bKe=o("wav2vec2-conformer"),vKe=o(" \u2014 "),US=a("a"),FKe=o("Wav2Vec2ConformerConfig"),TKe=o(" (Wav2Vec2-Conformer model)"),MKe=l(),pg=a("li"),vte=a("strong"),EKe=o("wavlm"),CKe=o(" \u2014 "),JS=a("a"),wKe=o("WavLMConfig"),AKe=o(" (WavLM model)"),yKe=l(),_g=a("li"),Fte=a("strong"),LKe=o("xglm"),xKe=o(" \u2014 "),YS=a("a"),$Ke=o("XGLMConfig"),kKe=o(" (XGLM model)"),SKe=l(),ug=a("li"),Tte=a("strong"),RKe=o("xlm"),PKe=o(" \u2014 "),KS=a("a"),BKe=o("XLMConfig"),IKe=o(" (XLM model)"),NKe=l(),bg=a("li"),Mte=a("strong"),qKe=o("xlm-prophetnet"),jKe=o(" \u2014 "),ZS=a("a"),DKe=o("XLMProphetNetConfig"),GKe=o(" (XLMProphetNet model)"),OKe=l(),vg=a("li"),Ete=a("strong"),VKe=o("xlm-roberta"),XKe=o(" \u2014 "),eR=a("a"),zKe=o("XLMRobertaConfig"),WKe=o(" (XLM-RoBERTa model)"),QKe=l(),Fg=a("li"),Cte=a("strong"),HKe=o("xlm-roberta-xl"),UKe=o(" \u2014 "),oR=a("a"),JKe=o("XLMRobertaXLConfig"),YKe=o(" (XLM-RoBERTa-XL model)"),KKe=l(),Tg=a("li"),wte=a("strong"),ZKe=o("xlnet"),eZe=o(" \u2014 "),rR=a("a"),oZe=o("XLNetConfig"),rZe=o(" (XLNet model)"),tZe=l(),Mg=a("li"),Ate=a("strong"),aZe=o("yolos"),nZe=o(" \u2014 "),tR=a("a"),sZe=o("YolosConfig"),lZe=o(" (YOLOS model)"),iZe=l(),Eg=a("li"),yte=a("strong"),dZe=o("yoso"),cZe=o(" \u2014 "),aR=a("a"),fZe=o("YosoConfig"),mZe=o(" (YOSO model)"),gZe=l(),F(Cg.$$.fragment),hZe=l(),wg=a("div"),F(jA.$$.fragment),pZe=l(),Lte=a("p"),_Ze=o("Register a new configuration for this class."),wqe=l(),Ti=a("h2"),Ag=a("a"),xte=a("span"),F(DA.$$.fragment),uZe=l(),$te=a("span"),bZe=o("AutoTokenizer"),Aqe=l(),wo=a("div"),F(GA.$$.fragment),vZe=l(),OA=a("p"),FZe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),nR=a("a"),TZe=o("AutoTokenizer.from_pretrained()"),MZe=o(" class method."),EZe=l(),VA=a("p"),CZe=o("This class cannot be instantiated directly using "),kte=a("code"),wZe=o("__init__()"),AZe=o(" (throws an error)."),yZe=l(),Cr=a("div"),F(XA.$$.fragment),LZe=l(),Ste=a("p"),xZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),$Ze=l(),Aa=a("p"),kZe=o("The tokenizer class to instantiate is selected based on the "),Rte=a("code"),SZe=o("model_type"),RZe=o(` property of the config object (either
passed as an argument or loaded from `),Pte=a("code"),PZe=o("pretrained_model_name_or_path"),BZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bte=a("code"),IZe=o("pretrained_model_name_or_path"),NZe=o(":"),qZe=l(),k=a("ul"),Sn=a("li"),Ite=a("strong"),jZe=o("albert"),DZe=o(" \u2014 "),sR=a("a"),GZe=o("AlbertTokenizer"),OZe=o(" or "),lR=a("a"),VZe=o("AlbertTokenizerFast"),XZe=o(" (ALBERT model)"),zZe=l(),Rn=a("li"),Nte=a("strong"),WZe=o("bart"),QZe=o(" \u2014 "),iR=a("a"),HZe=o("BartTokenizer"),UZe=o(" or "),dR=a("a"),JZe=o("BartTokenizerFast"),YZe=o(" (BART model)"),KZe=l(),Pn=a("li"),qte=a("strong"),ZZe=o("barthez"),eeo=o(" \u2014 "),cR=a("a"),oeo=o("BarthezTokenizer"),reo=o(" or "),fR=a("a"),teo=o("BarthezTokenizerFast"),aeo=o(" (BARThez model)"),neo=l(),yg=a("li"),jte=a("strong"),seo=o("bartpho"),leo=o(" \u2014 "),mR=a("a"),ieo=o("BartphoTokenizer"),deo=o(" (BARTpho model)"),ceo=l(),Bn=a("li"),Dte=a("strong"),feo=o("bert"),meo=o(" \u2014 "),gR=a("a"),geo=o("BertTokenizer"),heo=o(" or "),hR=a("a"),peo=o("BertTokenizerFast"),_eo=o(" (BERT model)"),ueo=l(),Lg=a("li"),Gte=a("strong"),beo=o("bert-generation"),veo=o(" \u2014 "),pR=a("a"),Feo=o("BertGenerationTokenizer"),Teo=o(" (Bert Generation model)"),Meo=l(),xg=a("li"),Ote=a("strong"),Eeo=o("bert-japanese"),Ceo=o(" \u2014 "),_R=a("a"),weo=o("BertJapaneseTokenizer"),Aeo=o(" (BertJapanese model)"),yeo=l(),$g=a("li"),Vte=a("strong"),Leo=o("bertweet"),xeo=o(" \u2014 "),uR=a("a"),$eo=o("BertweetTokenizer"),keo=o(" (Bertweet model)"),Seo=l(),In=a("li"),Xte=a("strong"),Reo=o("big_bird"),Peo=o(" \u2014 "),bR=a("a"),Beo=o("BigBirdTokenizer"),Ieo=o(" or "),vR=a("a"),Neo=o("BigBirdTokenizerFast"),qeo=o(" (BigBird model)"),jeo=l(),Nn=a("li"),zte=a("strong"),Deo=o("bigbird_pegasus"),Geo=o(" \u2014 "),FR=a("a"),Oeo=o("PegasusTokenizer"),Veo=o(" or "),TR=a("a"),Xeo=o("PegasusTokenizerFast"),zeo=o(" (BigBirdPegasus model)"),Weo=l(),qn=a("li"),Wte=a("strong"),Qeo=o("blenderbot"),Heo=o(" \u2014 "),MR=a("a"),Ueo=o("BlenderbotTokenizer"),Jeo=o(" or "),ER=a("a"),Yeo=o("BlenderbotTokenizerFast"),Keo=o(" (Blenderbot model)"),Zeo=l(),kg=a("li"),Qte=a("strong"),eoo=o("blenderbot-small"),ooo=o(" \u2014 "),CR=a("a"),roo=o("BlenderbotSmallTokenizer"),too=o(" (BlenderbotSmall model)"),aoo=l(),Sg=a("li"),Hte=a("strong"),noo=o("bloom"),soo=o(" \u2014 "),wR=a("a"),loo=o("BloomTokenizerFast"),ioo=o(" (BLOOM model)"),doo=l(),Rg=a("li"),Ute=a("strong"),coo=o("byt5"),foo=o(" \u2014 "),AR=a("a"),moo=o("ByT5Tokenizer"),goo=o(" (ByT5 model)"),hoo=l(),jn=a("li"),Jte=a("strong"),poo=o("camembert"),_oo=o(" \u2014 "),yR=a("a"),uoo=o("CamembertTokenizer"),boo=o(" or "),LR=a("a"),voo=o("CamembertTokenizerFast"),Foo=o(" (CamemBERT model)"),Too=l(),Pg=a("li"),Yte=a("strong"),Moo=o("canine"),Eoo=o(" \u2014 "),xR=a("a"),Coo=o("CanineTokenizer"),woo=o(" (Canine model)"),Aoo=l(),Dn=a("li"),Kte=a("strong"),yoo=o("clip"),Loo=o(" \u2014 "),$R=a("a"),xoo=o("CLIPTokenizer"),$oo=o(" or "),kR=a("a"),koo=o("CLIPTokenizerFast"),Soo=o(" (CLIP model)"),Roo=l(),Gn=a("li"),Zte=a("strong"),Poo=o("convbert"),Boo=o(" \u2014 "),SR=a("a"),Ioo=o("ConvBertTokenizer"),Noo=o(" or "),RR=a("a"),qoo=o("ConvBertTokenizerFast"),joo=o(" (ConvBERT model)"),Doo=l(),On=a("li"),eae=a("strong"),Goo=o("cpm"),Ooo=o(" \u2014 "),PR=a("a"),Voo=o("CpmTokenizer"),Xoo=o(" or "),BR=a("a"),zoo=o("CpmTokenizerFast"),Woo=o(" (CPM model)"),Qoo=l(),Bg=a("li"),oae=a("strong"),Hoo=o("ctrl"),Uoo=o(" \u2014 "),IR=a("a"),Joo=o("CTRLTokenizer"),Yoo=o(" (CTRL model)"),Koo=l(),Vn=a("li"),rae=a("strong"),Zoo=o("data2vec-text"),ero=o(" \u2014 "),NR=a("a"),oro=o("RobertaTokenizer"),rro=o(" or "),qR=a("a"),tro=o("RobertaTokenizerFast"),aro=o(" (Data2VecText model)"),nro=l(),Xn=a("li"),tae=a("strong"),sro=o("deberta"),lro=o(" \u2014 "),jR=a("a"),iro=o("DebertaTokenizer"),dro=o(" or "),DR=a("a"),cro=o("DebertaTokenizerFast"),fro=o(" (DeBERTa model)"),mro=l(),zn=a("li"),aae=a("strong"),gro=o("deberta-v2"),hro=o(" \u2014 "),GR=a("a"),pro=o("DebertaV2Tokenizer"),_ro=o(" or "),OR=a("a"),uro=o("DebertaV2TokenizerFast"),bro=o(" (DeBERTa-v2 model)"),vro=l(),Wn=a("li"),nae=a("strong"),Fro=o("distilbert"),Tro=o(" \u2014 "),VR=a("a"),Mro=o("DistilBertTokenizer"),Ero=o(" or "),XR=a("a"),Cro=o("DistilBertTokenizerFast"),wro=o(" (DistilBERT model)"),Aro=l(),Qn=a("li"),sae=a("strong"),yro=o("dpr"),Lro=o(" \u2014 "),zR=a("a"),xro=o("DPRQuestionEncoderTokenizer"),$ro=o(" or "),WR=a("a"),kro=o("DPRQuestionEncoderTokenizerFast"),Sro=o(" (DPR model)"),Rro=l(),Hn=a("li"),lae=a("strong"),Pro=o("electra"),Bro=o(" \u2014 "),QR=a("a"),Iro=o("ElectraTokenizer"),Nro=o(" or "),HR=a("a"),qro=o("ElectraTokenizerFast"),jro=o(" (ELECTRA model)"),Dro=l(),Ig=a("li"),iae=a("strong"),Gro=o("flaubert"),Oro=o(" \u2014 "),UR=a("a"),Vro=o("FlaubertTokenizer"),Xro=o(" (FlauBERT model)"),zro=l(),Un=a("li"),dae=a("strong"),Wro=o("fnet"),Qro=o(" \u2014 "),JR=a("a"),Hro=o("FNetTokenizer"),Uro=o(" or "),YR=a("a"),Jro=o("FNetTokenizerFast"),Yro=o(" (FNet model)"),Kro=l(),Ng=a("li"),cae=a("strong"),Zro=o("fsmt"),eto=o(" \u2014 "),KR=a("a"),oto=o("FSMTTokenizer"),rto=o(" (FairSeq Machine-Translation model)"),tto=l(),Jn=a("li"),fae=a("strong"),ato=o("funnel"),nto=o(" \u2014 "),ZR=a("a"),sto=o("FunnelTokenizer"),lto=o(" or "),eP=a("a"),ito=o("FunnelTokenizerFast"),dto=o(" (Funnel Transformer model)"),cto=l(),Yn=a("li"),mae=a("strong"),fto=o("gpt2"),mto=o(" \u2014 "),oP=a("a"),gto=o("GPT2Tokenizer"),hto=o(" or "),rP=a("a"),pto=o("GPT2TokenizerFast"),_to=o(" (OpenAI GPT-2 model)"),uto=l(),Kn=a("li"),gae=a("strong"),bto=o("gpt_neo"),vto=o(" \u2014 "),tP=a("a"),Fto=o("GPT2Tokenizer"),Tto=o(" or "),aP=a("a"),Mto=o("GPT2TokenizerFast"),Eto=o(" (GPT Neo model)"),Cto=l(),qg=a("li"),hae=a("strong"),wto=o("gpt_neox"),Ato=o(" \u2014 "),nP=a("a"),yto=o("GPTNeoXTokenizerFast"),Lto=o(" (GPT NeoX model)"),xto=l(),Zn=a("li"),pae=a("strong"),$to=o("gptj"),kto=o(" \u2014 "),sP=a("a"),Sto=o("GPT2Tokenizer"),Rto=o(" or "),lP=a("a"),Pto=o("GPT2TokenizerFast"),Bto=o(" (GPT-J model)"),Ito=l(),es=a("li"),_ae=a("strong"),Nto=o("herbert"),qto=o(" \u2014 "),iP=a("a"),jto=o("HerbertTokenizer"),Dto=o(" or "),dP=a("a"),Gto=o("HerbertTokenizerFast"),Oto=o(" (HerBERT model)"),Vto=l(),jg=a("li"),uae=a("strong"),Xto=o("hubert"),zto=o(" \u2014 "),cP=a("a"),Wto=o("Wav2Vec2CTCTokenizer"),Qto=o(" (Hubert model)"),Hto=l(),os=a("li"),bae=a("strong"),Uto=o("ibert"),Jto=o(" \u2014 "),fP=a("a"),Yto=o("RobertaTokenizer"),Kto=o(" or "),mP=a("a"),Zto=o("RobertaTokenizerFast"),eao=o(" (I-BERT model)"),oao=l(),rs=a("li"),vae=a("strong"),rao=o("layoutlm"),tao=o(" \u2014 "),gP=a("a"),aao=o("LayoutLMTokenizer"),nao=o(" or "),hP=a("a"),sao=o("LayoutLMTokenizerFast"),lao=o(" (LayoutLM model)"),iao=l(),ts=a("li"),Fae=a("strong"),dao=o("layoutlmv2"),cao=o(" \u2014 "),pP=a("a"),fao=o("LayoutLMv2Tokenizer"),mao=o(" or "),_P=a("a"),gao=o("LayoutLMv2TokenizerFast"),hao=o(" (LayoutLMv2 model)"),pao=l(),as=a("li"),Tae=a("strong"),_ao=o("layoutlmv3"),uao=o(" \u2014 "),uP=a("a"),bao=o("LayoutLMv3Tokenizer"),vao=o(" or "),bP=a("a"),Fao=o("LayoutLMv3TokenizerFast"),Tao=o(" (LayoutLMv3 model)"),Mao=l(),ns=a("li"),Mae=a("strong"),Eao=o("layoutxlm"),Cao=o(" \u2014 "),vP=a("a"),wao=o("LayoutXLMTokenizer"),Aao=o(" or "),FP=a("a"),yao=o("LayoutXLMTokenizerFast"),Lao=o(" (LayoutXLM model)"),xao=l(),ss=a("li"),Eae=a("strong"),$ao=o("led"),kao=o(" \u2014 "),TP=a("a"),Sao=o("LEDTokenizer"),Rao=o(" or "),MP=a("a"),Pao=o("LEDTokenizerFast"),Bao=o(" (LED model)"),Iao=l(),ls=a("li"),Cae=a("strong"),Nao=o("longformer"),qao=o(" \u2014 "),EP=a("a"),jao=o("LongformerTokenizer"),Dao=o(" or "),CP=a("a"),Gao=o("LongformerTokenizerFast"),Oao=o(" (Longformer model)"),Vao=l(),Dg=a("li"),wae=a("strong"),Xao=o("luke"),zao=o(" \u2014 "),wP=a("a"),Wao=o("LukeTokenizer"),Qao=o(" (LUKE model)"),Hao=l(),is=a("li"),Aae=a("strong"),Uao=o("lxmert"),Jao=o(" \u2014 "),AP=a("a"),Yao=o("LxmertTokenizer"),Kao=o(" or "),yP=a("a"),Zao=o("LxmertTokenizerFast"),eno=o(" (LXMERT model)"),ono=l(),Gg=a("li"),yae=a("strong"),rno=o("m2m_100"),tno=o(" \u2014 "),LP=a("a"),ano=o("M2M100Tokenizer"),nno=o(" (M2M100 model)"),sno=l(),Og=a("li"),Lae=a("strong"),lno=o("marian"),ino=o(" \u2014 "),xP=a("a"),dno=o("MarianTokenizer"),cno=o(" (Marian model)"),fno=l(),ds=a("li"),xae=a("strong"),mno=o("mbart"),gno=o(" \u2014 "),$P=a("a"),hno=o("MBartTokenizer"),pno=o(" or "),kP=a("a"),_no=o("MBartTokenizerFast"),uno=o(" (mBART model)"),bno=l(),cs=a("li"),$ae=a("strong"),vno=o("mbart50"),Fno=o(" \u2014 "),SP=a("a"),Tno=o("MBart50Tokenizer"),Mno=o(" or "),RP=a("a"),Eno=o("MBart50TokenizerFast"),Cno=o(" (mBART-50 model)"),wno=l(),fs=a("li"),kae=a("strong"),Ano=o("megatron-bert"),yno=o(" \u2014 "),PP=a("a"),Lno=o("BertTokenizer"),xno=o(" or "),BP=a("a"),$no=o("BertTokenizerFast"),kno=o(" (MegatronBert model)"),Sno=l(),Vg=a("li"),Sae=a("strong"),Rno=o("mluke"),Pno=o(" \u2014 "),IP=a("a"),Bno=o("MLukeTokenizer"),Ino=o(" (mLUKE model)"),Nno=l(),ms=a("li"),Rae=a("strong"),qno=o("mobilebert"),jno=o(" \u2014 "),NP=a("a"),Dno=o("MobileBertTokenizer"),Gno=o(" or "),qP=a("a"),Ono=o("MobileBertTokenizerFast"),Vno=o(" (MobileBERT model)"),Xno=l(),gs=a("li"),Pae=a("strong"),zno=o("mpnet"),Wno=o(" \u2014 "),jP=a("a"),Qno=o("MPNetTokenizer"),Hno=o(" or "),DP=a("a"),Uno=o("MPNetTokenizerFast"),Jno=o(" (MPNet model)"),Yno=l(),hs=a("li"),Bae=a("strong"),Kno=o("mt5"),Zno=o(" \u2014 "),GP=a("a"),eso=o("MT5Tokenizer"),oso=o(" or "),OP=a("a"),rso=o("MT5TokenizerFast"),tso=o(" (mT5 model)"),aso=l(),ps=a("li"),Iae=a("strong"),nso=o("nystromformer"),sso=o(" \u2014 "),VP=a("a"),lso=o("AlbertTokenizer"),iso=o(" or "),XP=a("a"),dso=o("AlbertTokenizerFast"),cso=o(" (Nystromformer model)"),fso=l(),_s=a("li"),Nae=a("strong"),mso=o("openai-gpt"),gso=o(" \u2014 "),zP=a("a"),hso=o("OpenAIGPTTokenizer"),pso=o(" or "),WP=a("a"),_so=o("OpenAIGPTTokenizerFast"),uso=o(" (OpenAI GPT model)"),bso=l(),Xg=a("li"),qae=a("strong"),vso=o("opt"),Fso=o(" \u2014 "),QP=a("a"),Tso=o("GPT2Tokenizer"),Mso=o(" (OPT model)"),Eso=l(),us=a("li"),jae=a("strong"),Cso=o("pegasus"),wso=o(" \u2014 "),HP=a("a"),Aso=o("PegasusTokenizer"),yso=o(" or "),UP=a("a"),Lso=o("PegasusTokenizerFast"),xso=o(" (Pegasus model)"),$so=l(),zg=a("li"),Dae=a("strong"),kso=o("perceiver"),Sso=o(" \u2014 "),JP=a("a"),Rso=o("PerceiverTokenizer"),Pso=o(" (Perceiver model)"),Bso=l(),Wg=a("li"),Gae=a("strong"),Iso=o("phobert"),Nso=o(" \u2014 "),YP=a("a"),qso=o("PhobertTokenizer"),jso=o(" (PhoBERT model)"),Dso=l(),Qg=a("li"),Oae=a("strong"),Gso=o("plbart"),Oso=o(" \u2014 "),KP=a("a"),Vso=o("PLBartTokenizer"),Xso=o(" (PLBart model)"),zso=l(),Hg=a("li"),Vae=a("strong"),Wso=o("prophetnet"),Qso=o(" \u2014 "),ZP=a("a"),Hso=o("ProphetNetTokenizer"),Uso=o(" (ProphetNet model)"),Jso=l(),bs=a("li"),Xae=a("strong"),Yso=o("qdqbert"),Kso=o(" \u2014 "),eB=a("a"),Zso=o("BertTokenizer"),elo=o(" or "),oB=a("a"),olo=o("BertTokenizerFast"),rlo=o(" (QDQBert model)"),tlo=l(),Ug=a("li"),zae=a("strong"),alo=o("rag"),nlo=o(" \u2014 "),rB=a("a"),slo=o("RagTokenizer"),llo=o(" (RAG model)"),ilo=l(),vs=a("li"),Wae=a("strong"),dlo=o("realm"),clo=o(" \u2014 "),tB=a("a"),flo=o("RealmTokenizer"),mlo=o(" or "),aB=a("a"),glo=o("RealmTokenizerFast"),hlo=o(" (Realm model)"),plo=l(),Fs=a("li"),Qae=a("strong"),_lo=o("reformer"),ulo=o(" \u2014 "),nB=a("a"),blo=o("ReformerTokenizer"),vlo=o(" or "),sB=a("a"),Flo=o("ReformerTokenizerFast"),Tlo=o(" (Reformer model)"),Mlo=l(),Ts=a("li"),Hae=a("strong"),Elo=o("rembert"),Clo=o(" \u2014 "),lB=a("a"),wlo=o("RemBertTokenizer"),Alo=o(" or "),iB=a("a"),ylo=o("RemBertTokenizerFast"),Llo=o(" (RemBERT model)"),xlo=l(),Ms=a("li"),Uae=a("strong"),$lo=o("retribert"),klo=o(" \u2014 "),dB=a("a"),Slo=o("RetriBertTokenizer"),Rlo=o(" or "),cB=a("a"),Plo=o("RetriBertTokenizerFast"),Blo=o(" (RetriBERT model)"),Ilo=l(),Es=a("li"),Jae=a("strong"),Nlo=o("roberta"),qlo=o(" \u2014 "),fB=a("a"),jlo=o("RobertaTokenizer"),Dlo=o(" or "),mB=a("a"),Glo=o("RobertaTokenizerFast"),Olo=o(" (RoBERTa model)"),Vlo=l(),Cs=a("li"),Yae=a("strong"),Xlo=o("roformer"),zlo=o(" \u2014 "),gB=a("a"),Wlo=o("RoFormerTokenizer"),Qlo=o(" or "),hB=a("a"),Hlo=o("RoFormerTokenizerFast"),Ulo=o(" (RoFormer model)"),Jlo=l(),Jg=a("li"),Kae=a("strong"),Ylo=o("speech_to_text"),Klo=o(" \u2014 "),pB=a("a"),Zlo=o("Speech2TextTokenizer"),eio=o(" (Speech2Text model)"),oio=l(),Yg=a("li"),Zae=a("strong"),rio=o("speech_to_text_2"),tio=o(" \u2014 "),_B=a("a"),aio=o("Speech2Text2Tokenizer"),nio=o(" (Speech2Text2 model)"),sio=l(),ws=a("li"),ene=a("strong"),lio=o("splinter"),iio=o(" \u2014 "),uB=a("a"),dio=o("SplinterTokenizer"),cio=o(" or "),bB=a("a"),fio=o("SplinterTokenizerFast"),mio=o(" (Splinter model)"),gio=l(),As=a("li"),one=a("strong"),hio=o("squeezebert"),pio=o(" \u2014 "),vB=a("a"),_io=o("SqueezeBertTokenizer"),uio=o(" or "),FB=a("a"),bio=o("SqueezeBertTokenizerFast"),vio=o(" (SqueezeBERT model)"),Fio=l(),ys=a("li"),rne=a("strong"),Tio=o("t5"),Mio=o(" \u2014 "),TB=a("a"),Eio=o("T5Tokenizer"),Cio=o(" or "),MB=a("a"),wio=o("T5TokenizerFast"),Aio=o(" (T5 model)"),yio=l(),Kg=a("li"),tne=a("strong"),Lio=o("tapas"),xio=o(" \u2014 "),EB=a("a"),$io=o("TapasTokenizer"),kio=o(" (TAPAS model)"),Sio=l(),Zg=a("li"),ane=a("strong"),Rio=o("tapex"),Pio=o(" \u2014 "),CB=a("a"),Bio=o("TapexTokenizer"),Iio=o(" (TAPEX model)"),Nio=l(),eh=a("li"),nne=a("strong"),qio=o("transfo-xl"),jio=o(" \u2014 "),wB=a("a"),Dio=o("TransfoXLTokenizer"),Gio=o(" (Transformer-XL model)"),Oio=l(),Ls=a("li"),sne=a("strong"),Vio=o("visual_bert"),Xio=o(" \u2014 "),AB=a("a"),zio=o("BertTokenizer"),Wio=o(" or "),yB=a("a"),Qio=o("BertTokenizerFast"),Hio=o(" (VisualBert model)"),Uio=l(),oh=a("li"),lne=a("strong"),Jio=o("wav2vec2"),Yio=o(" \u2014 "),LB=a("a"),Kio=o("Wav2Vec2CTCTokenizer"),Zio=o(" (Wav2Vec2 model)"),edo=l(),rh=a("li"),ine=a("strong"),odo=o("wav2vec2-conformer"),rdo=o(" \u2014 "),xB=a("a"),tdo=o("Wav2Vec2CTCTokenizer"),ado=o(" (Wav2Vec2-Conformer model)"),ndo=l(),th=a("li"),dne=a("strong"),sdo=o("wav2vec2_phoneme"),ldo=o(" \u2014 "),$B=a("a"),ido=o("Wav2Vec2PhonemeCTCTokenizer"),ddo=o(" (Wav2Vec2Phoneme model)"),cdo=l(),xs=a("li"),cne=a("strong"),fdo=o("xglm"),mdo=o(" \u2014 "),kB=a("a"),gdo=o("XGLMTokenizer"),hdo=o(" or "),SB=a("a"),pdo=o("XGLMTokenizerFast"),_do=o(" (XGLM model)"),udo=l(),ah=a("li"),fne=a("strong"),bdo=o("xlm"),vdo=o(" \u2014 "),RB=a("a"),Fdo=o("XLMTokenizer"),Tdo=o(" (XLM model)"),Mdo=l(),nh=a("li"),mne=a("strong"),Edo=o("xlm-prophetnet"),Cdo=o(" \u2014 "),PB=a("a"),wdo=o("XLMProphetNetTokenizer"),Ado=o(" (XLMProphetNet model)"),ydo=l(),$s=a("li"),gne=a("strong"),Ldo=o("xlm-roberta"),xdo=o(" \u2014 "),BB=a("a"),$do=o("XLMRobertaTokenizer"),kdo=o(" or "),IB=a("a"),Sdo=o("XLMRobertaTokenizerFast"),Rdo=o(" (XLM-RoBERTa model)"),Pdo=l(),ks=a("li"),hne=a("strong"),Bdo=o("xlm-roberta-xl"),Ido=o(" \u2014 "),NB=a("a"),Ndo=o("RobertaTokenizer"),qdo=o(" or "),qB=a("a"),jdo=o("RobertaTokenizerFast"),Ddo=o(" (XLM-RoBERTa-XL model)"),Gdo=l(),Ss=a("li"),pne=a("strong"),Odo=o("xlnet"),Vdo=o(" \u2014 "),jB=a("a"),Xdo=o("XLNetTokenizer"),zdo=o(" or "),DB=a("a"),Wdo=o("XLNetTokenizerFast"),Qdo=o(" (XLNet model)"),Hdo=l(),Rs=a("li"),_ne=a("strong"),Udo=o("yoso"),Jdo=o(" \u2014 "),GB=a("a"),Ydo=o("AlbertTokenizer"),Kdo=o(" or "),OB=a("a"),Zdo=o("AlbertTokenizerFast"),eco=o(" (YOSO model)"),oco=l(),F(sh.$$.fragment),rco=l(),lh=a("div"),F(zA.$$.fragment),tco=l(),une=a("p"),aco=o("Register a new tokenizer in this mapping."),yqe=l(),Mi=a("h2"),ih=a("a"),bne=a("span"),F(WA.$$.fragment),nco=l(),vne=a("span"),sco=o("AutoFeatureExtractor"),Lqe=l(),Ao=a("div"),F(QA.$$.fragment),lco=l(),HA=a("p"),ico=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),VB=a("a"),dco=o("AutoFeatureExtractor.from_pretrained()"),cco=o(" class method."),fco=l(),UA=a("p"),mco=o("This class cannot be instantiated directly using "),Fne=a("code"),gco=o("__init__()"),hco=o(" (throws an error)."),pco=l(),He=a("div"),F(JA.$$.fragment),_co=l(),Tne=a("p"),uco=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),bco=l(),ya=a("p"),vco=o("The feature extractor class to instantiate is selected based on the "),Mne=a("code"),Fco=o("model_type"),Tco=o(` property of the config object
(either passed as an argument or loaded from `),Ene=a("code"),Mco=o("pretrained_model_name_or_path"),Eco=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Cne=a("code"),Cco=o("pretrained_model_name_or_path"),wco=o(":"),Aco=l(),Y=a("ul"),dh=a("li"),wne=a("strong"),yco=o("beit"),Lco=o(" \u2014 "),XB=a("a"),xco=o("BeitFeatureExtractor"),$co=o(" (BEiT model)"),kco=l(),ch=a("li"),Ane=a("strong"),Sco=o("clip"),Rco=o(" \u2014 "),zB=a("a"),Pco=o("CLIPFeatureExtractor"),Bco=o(" (CLIP model)"),Ico=l(),fh=a("li"),yne=a("strong"),Nco=o("convnext"),qco=o(" \u2014 "),WB=a("a"),jco=o("ConvNextFeatureExtractor"),Dco=o(" (ConvNext model)"),Gco=l(),mh=a("li"),Lne=a("strong"),Oco=o("cvt"),Vco=o(" \u2014 "),QB=a("a"),Xco=o("ConvNextFeatureExtractor"),zco=o(" (CvT model)"),Wco=l(),gh=a("li"),xne=a("strong"),Qco=o("data2vec-audio"),Hco=o(" \u2014 "),HB=a("a"),Uco=o("Wav2Vec2FeatureExtractor"),Jco=o(" (Data2VecAudio model)"),Yco=l(),hh=a("li"),$ne=a("strong"),Kco=o("data2vec-vision"),Zco=o(" \u2014 "),UB=a("a"),efo=o("BeitFeatureExtractor"),ofo=o(" (Data2VecVision model)"),rfo=l(),ph=a("li"),kne=a("strong"),tfo=o("deit"),afo=o(" \u2014 "),JB=a("a"),nfo=o("DeiTFeatureExtractor"),sfo=o(" (DeiT model)"),lfo=l(),_h=a("li"),Sne=a("strong"),ifo=o("detr"),dfo=o(" \u2014 "),YB=a("a"),cfo=o("DetrFeatureExtractor"),ffo=o(" (DETR model)"),mfo=l(),uh=a("li"),Rne=a("strong"),gfo=o("dpt"),hfo=o(" \u2014 "),KB=a("a"),pfo=o("DPTFeatureExtractor"),_fo=o(" (DPT model)"),ufo=l(),bh=a("li"),Pne=a("strong"),bfo=o("flava"),vfo=o(" \u2014 "),ZB=a("a"),Ffo=o("FlavaFeatureExtractor"),Tfo=o(" (Flava model)"),Mfo=l(),vh=a("li"),Bne=a("strong"),Efo=o("glpn"),Cfo=o(" \u2014 "),eI=a("a"),wfo=o("GLPNFeatureExtractor"),Afo=o(" (GLPN model)"),yfo=l(),Fh=a("li"),Ine=a("strong"),Lfo=o("hubert"),xfo=o(" \u2014 "),oI=a("a"),$fo=o("Wav2Vec2FeatureExtractor"),kfo=o(" (Hubert model)"),Sfo=l(),Th=a("li"),Nne=a("strong"),Rfo=o("imagegpt"),Pfo=o(" \u2014 "),rI=a("a"),Bfo=o("ImageGPTFeatureExtractor"),Ifo=o(" (ImageGPT model)"),Nfo=l(),Mh=a("li"),qne=a("strong"),qfo=o("layoutlmv2"),jfo=o(" \u2014 "),tI=a("a"),Dfo=o("LayoutLMv2FeatureExtractor"),Gfo=o(" (LayoutLMv2 model)"),Ofo=l(),Eh=a("li"),jne=a("strong"),Vfo=o("layoutlmv3"),Xfo=o(" \u2014 "),aI=a("a"),zfo=o("LayoutLMv3FeatureExtractor"),Wfo=o(" (LayoutLMv3 model)"),Qfo=l(),Ch=a("li"),Dne=a("strong"),Hfo=o("maskformer"),Ufo=o(" \u2014 "),nI=a("a"),Jfo=o("MaskFormerFeatureExtractor"),Yfo=o(" (MaskFormer model)"),Kfo=l(),wh=a("li"),Gne=a("strong"),Zfo=o("perceiver"),emo=o(" \u2014 "),sI=a("a"),omo=o("PerceiverFeatureExtractor"),rmo=o(" (Perceiver model)"),tmo=l(),Ah=a("li"),One=a("strong"),amo=o("poolformer"),nmo=o(" \u2014 "),lI=a("a"),smo=o("PoolFormerFeatureExtractor"),lmo=o(" (PoolFormer model)"),imo=l(),yh=a("li"),Vne=a("strong"),dmo=o("regnet"),cmo=o(" \u2014 "),iI=a("a"),fmo=o("ConvNextFeatureExtractor"),mmo=o(" (RegNet model)"),gmo=l(),Lh=a("li"),Xne=a("strong"),hmo=o("resnet"),pmo=o(" \u2014 "),dI=a("a"),_mo=o("ConvNextFeatureExtractor"),umo=o(" (ResNet model)"),bmo=l(),xh=a("li"),zne=a("strong"),vmo=o("segformer"),Fmo=o(" \u2014 "),cI=a("a"),Tmo=o("SegformerFeatureExtractor"),Mmo=o(" (SegFormer model)"),Emo=l(),$h=a("li"),Wne=a("strong"),Cmo=o("speech_to_text"),wmo=o(" \u2014 "),fI=a("a"),Amo=o("Speech2TextFeatureExtractor"),ymo=o(" (Speech2Text model)"),Lmo=l(),kh=a("li"),Qne=a("strong"),xmo=o("swin"),$mo=o(" \u2014 "),mI=a("a"),kmo=o("ViTFeatureExtractor"),Smo=o(" (Swin model)"),Rmo=l(),Sh=a("li"),Hne=a("strong"),Pmo=o("van"),Bmo=o(" \u2014 "),gI=a("a"),Imo=o("ConvNextFeatureExtractor"),Nmo=o(" (VAN model)"),qmo=l(),Rh=a("li"),Une=a("strong"),jmo=o("vit"),Dmo=o(" \u2014 "),hI=a("a"),Gmo=o("ViTFeatureExtractor"),Omo=o(" (ViT model)"),Vmo=l(),Ph=a("li"),Jne=a("strong"),Xmo=o("vit_mae"),zmo=o(" \u2014 "),pI=a("a"),Wmo=o("ViTFeatureExtractor"),Qmo=o(" (ViTMAE model)"),Hmo=l(),Bh=a("li"),Yne=a("strong"),Umo=o("wav2vec2"),Jmo=o(" \u2014 "),_I=a("a"),Ymo=o("Wav2Vec2FeatureExtractor"),Kmo=o(" (Wav2Vec2 model)"),Zmo=l(),Ih=a("li"),Kne=a("strong"),ego=o("wav2vec2-conformer"),ogo=o(" \u2014 "),uI=a("a"),rgo=o("Wav2Vec2FeatureExtractor"),tgo=o(" (Wav2Vec2-Conformer model)"),ago=l(),Nh=a("li"),Zne=a("strong"),ngo=o("yolos"),sgo=o(" \u2014 "),bI=a("a"),lgo=o("YolosFeatureExtractor"),igo=o(" (YOLOS model)"),dgo=l(),F(qh.$$.fragment),cgo=l(),F(jh.$$.fragment),fgo=l(),Dh=a("div"),F(YA.$$.fragment),mgo=l(),ese=a("p"),ggo=o("Register a new feature extractor for this class."),xqe=l(),Ei=a("h2"),Gh=a("a"),ose=a("span"),F(KA.$$.fragment),hgo=l(),rse=a("span"),pgo=o("AutoProcessor"),$qe=l(),yo=a("div"),F(ZA.$$.fragment),_go=l(),ey=a("p"),ugo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),vI=a("a"),bgo=o("AutoProcessor.from_pretrained()"),vgo=o(" class method."),Fgo=l(),oy=a("p"),Tgo=o("This class cannot be instantiated directly using "),tse=a("code"),Mgo=o("__init__()"),Ego=o(" (throws an error)."),Cgo=l(),Ue=a("div"),F(ry.$$.fragment),wgo=l(),ase=a("p"),Ago=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ygo=l(),Ci=a("p"),Lgo=o("The processor class to instantiate is selected based on the "),nse=a("code"),xgo=o("model_type"),$go=o(` property of the config object (either
passed as an argument or loaded from `),sse=a("code"),kgo=o("pretrained_model_name_or_path"),Sgo=o(" if possible):"),Rgo=l(),he=a("ul"),Oh=a("li"),lse=a("strong"),Pgo=o("clip"),Bgo=o(" \u2014 "),FI=a("a"),Igo=o("CLIPProcessor"),Ngo=o(" (CLIP model)"),qgo=l(),Vh=a("li"),ise=a("strong"),jgo=o("flava"),Dgo=o(" \u2014 "),dse=a("code"),Ggo=o("FLAVAProcessor"),Ogo=o(" (Flava model)"),Vgo=l(),Xh=a("li"),cse=a("strong"),Xgo=o("layoutlmv2"),zgo=o(" \u2014 "),TI=a("a"),Wgo=o("LayoutLMv2Processor"),Qgo=o(" (LayoutLMv2 model)"),Hgo=l(),zh=a("li"),fse=a("strong"),Ugo=o("layoutlmv3"),Jgo=o(" \u2014 "),MI=a("a"),Ygo=o("LayoutLMv3Processor"),Kgo=o(" (LayoutLMv3 model)"),Zgo=l(),Wh=a("li"),mse=a("strong"),eho=o("layoutxlm"),oho=o(" \u2014 "),EI=a("a"),rho=o("LayoutXLMProcessor"),tho=o(" (LayoutXLM model)"),aho=l(),Qh=a("li"),gse=a("strong"),nho=o("sew"),sho=o(" \u2014 "),CI=a("a"),lho=o("Wav2Vec2Processor"),iho=o(" (SEW model)"),dho=l(),Hh=a("li"),hse=a("strong"),cho=o("sew-d"),fho=o(" \u2014 "),wI=a("a"),mho=o("Wav2Vec2Processor"),gho=o(" (SEW-D model)"),hho=l(),Uh=a("li"),pse=a("strong"),pho=o("speech_to_text"),_ho=o(" \u2014 "),AI=a("a"),uho=o("Speech2TextProcessor"),bho=o(" (Speech2Text model)"),vho=l(),Jh=a("li"),_se=a("strong"),Fho=o("speech_to_text_2"),Tho=o(" \u2014 "),yI=a("a"),Mho=o("Speech2Text2Processor"),Eho=o(" (Speech2Text2 model)"),Cho=l(),Yh=a("li"),use=a("strong"),who=o("trocr"),Aho=o(" \u2014 "),LI=a("a"),yho=o("TrOCRProcessor"),Lho=o(" (TrOCR model)"),xho=l(),Kh=a("li"),bse=a("strong"),$ho=o("unispeech"),kho=o(" \u2014 "),xI=a("a"),Sho=o("Wav2Vec2Processor"),Rho=o(" (UniSpeech model)"),Pho=l(),Zh=a("li"),vse=a("strong"),Bho=o("unispeech-sat"),Iho=o(" \u2014 "),$I=a("a"),Nho=o("Wav2Vec2Processor"),qho=o(" (UniSpeechSat model)"),jho=l(),ep=a("li"),Fse=a("strong"),Dho=o("vilt"),Gho=o(" \u2014 "),kI=a("a"),Oho=o("ViltProcessor"),Vho=o(" (ViLT model)"),Xho=l(),op=a("li"),Tse=a("strong"),zho=o("vision-text-dual-encoder"),Who=o(" \u2014 "),SI=a("a"),Qho=o("VisionTextDualEncoderProcessor"),Hho=o(" (VisionTextDualEncoder model)"),Uho=l(),rp=a("li"),Mse=a("strong"),Jho=o("wav2vec2"),Yho=o(" \u2014 "),RI=a("a"),Kho=o("Wav2Vec2Processor"),Zho=o(" (Wav2Vec2 model)"),epo=l(),tp=a("li"),Ese=a("strong"),opo=o("wav2vec2-conformer"),rpo=o(" \u2014 "),PI=a("a"),tpo=o("Wav2Vec2Processor"),apo=o(" (Wav2Vec2-Conformer model)"),npo=l(),ap=a("li"),Cse=a("strong"),spo=o("wavlm"),lpo=o(" \u2014 "),BI=a("a"),ipo=o("Wav2Vec2Processor"),dpo=o(" (WavLM model)"),cpo=l(),F(np.$$.fragment),fpo=l(),F(sp.$$.fragment),mpo=l(),lp=a("div"),F(ty.$$.fragment),gpo=l(),wse=a("p"),hpo=o("Register a new processor for this class."),kqe=l(),wi=a("h2"),ip=a("a"),Ase=a("span"),F(ay.$$.fragment),ppo=l(),yse=a("span"),_po=o("AutoModel"),Sqe=l(),Lo=a("div"),F(ny.$$.fragment),upo=l(),Ai=a("p"),bpo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),II=a("a"),vpo=o("from_pretrained()"),Fpo=o(" class method or the "),NI=a("a"),Tpo=o("from_config()"),Mpo=o(` class
method.`),Epo=l(),sy=a("p"),Cpo=o("This class cannot be instantiated directly using "),Lse=a("code"),wpo=o("__init__()"),Apo=o(" (throws an error)."),ypo=l(),tt=a("div"),F(ly.$$.fragment),Lpo=l(),xse=a("p"),xpo=o("Instantiates one of the base model classes of the library from a configuration."),$po=l(),yi=a("p"),kpo=o(`Note:
Loading a model from its configuration file does `),$se=a("strong"),Spo=o("not"),Rpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qI=a("a"),Ppo=o("from_pretrained()"),Bpo=o(" to load the model weights."),Ipo=l(),F(dp.$$.fragment),Npo=l(),Je=a("div"),F(iy.$$.fragment),qpo=l(),kse=a("p"),jpo=o("Instantiate one of the base model classes of the library from a pretrained model."),Dpo=l(),La=a("p"),Gpo=o("The model class to instantiate is selected based on the "),Sse=a("code"),Opo=o("model_type"),Vpo=o(` property of the config object (either
passed as an argument or loaded from `),Rse=a("code"),Xpo=o("pretrained_model_name_or_path"),zpo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pse=a("code"),Wpo=o("pretrained_model_name_or_path"),Qpo=o(":"),Hpo=l(),x=a("ul"),cp=a("li"),Bse=a("strong"),Upo=o("albert"),Jpo=o(" \u2014 "),jI=a("a"),Ypo=o("AlbertModel"),Kpo=o(" (ALBERT model)"),Zpo=l(),fp=a("li"),Ise=a("strong"),e_o=o("bart"),o_o=o(" \u2014 "),DI=a("a"),r_o=o("BartModel"),t_o=o(" (BART model)"),a_o=l(),mp=a("li"),Nse=a("strong"),n_o=o("beit"),s_o=o(" \u2014 "),GI=a("a"),l_o=o("BeitModel"),i_o=o(" (BEiT model)"),d_o=l(),gp=a("li"),qse=a("strong"),c_o=o("bert"),f_o=o(" \u2014 "),OI=a("a"),m_o=o("BertModel"),g_o=o(" (BERT model)"),h_o=l(),hp=a("li"),jse=a("strong"),p_o=o("bert-generation"),__o=o(" \u2014 "),VI=a("a"),u_o=o("BertGenerationEncoder"),b_o=o(" (Bert Generation model)"),v_o=l(),pp=a("li"),Dse=a("strong"),F_o=o("big_bird"),T_o=o(" \u2014 "),XI=a("a"),M_o=o("BigBirdModel"),E_o=o(" (BigBird model)"),C_o=l(),_p=a("li"),Gse=a("strong"),w_o=o("bigbird_pegasus"),A_o=o(" \u2014 "),zI=a("a"),y_o=o("BigBirdPegasusModel"),L_o=o(" (BigBirdPegasus model)"),x_o=l(),up=a("li"),Ose=a("strong"),$_o=o("blenderbot"),k_o=o(" \u2014 "),WI=a("a"),S_o=o("BlenderbotModel"),R_o=o(" (Blenderbot model)"),P_o=l(),bp=a("li"),Vse=a("strong"),B_o=o("blenderbot-small"),I_o=o(" \u2014 "),QI=a("a"),N_o=o("BlenderbotSmallModel"),q_o=o(" (BlenderbotSmall model)"),j_o=l(),vp=a("li"),Xse=a("strong"),D_o=o("bloom"),G_o=o(" \u2014 "),HI=a("a"),O_o=o("BloomModel"),V_o=o(" (BLOOM model)"),X_o=l(),Fp=a("li"),zse=a("strong"),z_o=o("camembert"),W_o=o(" \u2014 "),UI=a("a"),Q_o=o("CamembertModel"),H_o=o(" (CamemBERT model)"),U_o=l(),Tp=a("li"),Wse=a("strong"),J_o=o("canine"),Y_o=o(" \u2014 "),JI=a("a"),K_o=o("CanineModel"),Z_o=o(" (Canine model)"),euo=l(),Mp=a("li"),Qse=a("strong"),ouo=o("clip"),ruo=o(" \u2014 "),YI=a("a"),tuo=o("CLIPModel"),auo=o(" (CLIP model)"),nuo=l(),Ep=a("li"),Hse=a("strong"),suo=o("convbert"),luo=o(" \u2014 "),KI=a("a"),iuo=o("ConvBertModel"),duo=o(" (ConvBERT model)"),cuo=l(),Cp=a("li"),Use=a("strong"),fuo=o("convnext"),muo=o(" \u2014 "),ZI=a("a"),guo=o("ConvNextModel"),huo=o(" (ConvNext model)"),puo=l(),wp=a("li"),Jse=a("strong"),_uo=o("ctrl"),uuo=o(" \u2014 "),eN=a("a"),buo=o("CTRLModel"),vuo=o(" (CTRL model)"),Fuo=l(),Ap=a("li"),Yse=a("strong"),Tuo=o("cvt"),Muo=o(" \u2014 "),oN=a("a"),Euo=o("CvtModel"),Cuo=o(" (CvT model)"),wuo=l(),yp=a("li"),Kse=a("strong"),Auo=o("data2vec-audio"),yuo=o(" \u2014 "),rN=a("a"),Luo=o("Data2VecAudioModel"),xuo=o(" (Data2VecAudio model)"),$uo=l(),Lp=a("li"),Zse=a("strong"),kuo=o("data2vec-text"),Suo=o(" \u2014 "),tN=a("a"),Ruo=o("Data2VecTextModel"),Puo=o(" (Data2VecText model)"),Buo=l(),xp=a("li"),ele=a("strong"),Iuo=o("data2vec-vision"),Nuo=o(" \u2014 "),aN=a("a"),quo=o("Data2VecVisionModel"),juo=o(" (Data2VecVision model)"),Duo=l(),$p=a("li"),ole=a("strong"),Guo=o("deberta"),Ouo=o(" \u2014 "),nN=a("a"),Vuo=o("DebertaModel"),Xuo=o(" (DeBERTa model)"),zuo=l(),kp=a("li"),rle=a("strong"),Wuo=o("deberta-v2"),Quo=o(" \u2014 "),sN=a("a"),Huo=o("DebertaV2Model"),Uuo=o(" (DeBERTa-v2 model)"),Juo=l(),Sp=a("li"),tle=a("strong"),Yuo=o("decision_transformer"),Kuo=o(" \u2014 "),lN=a("a"),Zuo=o("DecisionTransformerModel"),e2o=o(" (Decision Transformer model)"),o2o=l(),Rp=a("li"),ale=a("strong"),r2o=o("deit"),t2o=o(" \u2014 "),iN=a("a"),a2o=o("DeiTModel"),n2o=o(" (DeiT model)"),s2o=l(),Pp=a("li"),nle=a("strong"),l2o=o("detr"),i2o=o(" \u2014 "),dN=a("a"),d2o=o("DetrModel"),c2o=o(" (DETR model)"),f2o=l(),Bp=a("li"),sle=a("strong"),m2o=o("distilbert"),g2o=o(" \u2014 "),cN=a("a"),h2o=o("DistilBertModel"),p2o=o(" (DistilBERT model)"),_2o=l(),Ip=a("li"),lle=a("strong"),u2o=o("dpr"),b2o=o(" \u2014 "),fN=a("a"),v2o=o("DPRQuestionEncoder"),F2o=o(" (DPR model)"),T2o=l(),Np=a("li"),ile=a("strong"),M2o=o("dpt"),E2o=o(" \u2014 "),mN=a("a"),C2o=o("DPTModel"),w2o=o(" (DPT model)"),A2o=l(),qp=a("li"),dle=a("strong"),y2o=o("electra"),L2o=o(" \u2014 "),gN=a("a"),x2o=o("ElectraModel"),$2o=o(" (ELECTRA model)"),k2o=l(),jp=a("li"),cle=a("strong"),S2o=o("flaubert"),R2o=o(" \u2014 "),hN=a("a"),P2o=o("FlaubertModel"),B2o=o(" (FlauBERT model)"),I2o=l(),Dp=a("li"),fle=a("strong"),N2o=o("flava"),q2o=o(" \u2014 "),pN=a("a"),j2o=o("FlavaModel"),D2o=o(" (Flava model)"),G2o=l(),Gp=a("li"),mle=a("strong"),O2o=o("fnet"),V2o=o(" \u2014 "),_N=a("a"),X2o=o("FNetModel"),z2o=o(" (FNet model)"),W2o=l(),Op=a("li"),gle=a("strong"),Q2o=o("fsmt"),H2o=o(" \u2014 "),uN=a("a"),U2o=o("FSMTModel"),J2o=o(" (FairSeq Machine-Translation model)"),Y2o=l(),Ps=a("li"),hle=a("strong"),K2o=o("funnel"),Z2o=o(" \u2014 "),bN=a("a"),e1o=o("FunnelModel"),o1o=o(" or "),vN=a("a"),r1o=o("FunnelBaseModel"),t1o=o(" (Funnel Transformer model)"),a1o=l(),Vp=a("li"),ple=a("strong"),n1o=o("glpn"),s1o=o(" \u2014 "),FN=a("a"),l1o=o("GLPNModel"),i1o=o(" (GLPN model)"),d1o=l(),Xp=a("li"),_le=a("strong"),c1o=o("gpt2"),f1o=o(" \u2014 "),TN=a("a"),m1o=o("GPT2Model"),g1o=o(" (OpenAI GPT-2 model)"),h1o=l(),zp=a("li"),ule=a("strong"),p1o=o("gpt_neo"),_1o=o(" \u2014 "),MN=a("a"),u1o=o("GPTNeoModel"),b1o=o(" (GPT Neo model)"),v1o=l(),Wp=a("li"),ble=a("strong"),F1o=o("gpt_neox"),T1o=o(" \u2014 "),EN=a("a"),M1o=o("GPTNeoXModel"),E1o=o(" (GPT NeoX model)"),C1o=l(),Qp=a("li"),vle=a("strong"),w1o=o("gptj"),A1o=o(" \u2014 "),CN=a("a"),y1o=o("GPTJModel"),L1o=o(" (GPT-J model)"),x1o=l(),Hp=a("li"),Fle=a("strong"),$1o=o("hubert"),k1o=o(" \u2014 "),wN=a("a"),S1o=o("HubertModel"),R1o=o(" (Hubert model)"),P1o=l(),Up=a("li"),Tle=a("strong"),B1o=o("ibert"),I1o=o(" \u2014 "),AN=a("a"),N1o=o("IBertModel"),q1o=o(" (I-BERT model)"),j1o=l(),Jp=a("li"),Mle=a("strong"),D1o=o("imagegpt"),G1o=o(" \u2014 "),yN=a("a"),O1o=o("ImageGPTModel"),V1o=o(" (ImageGPT model)"),X1o=l(),Yp=a("li"),Ele=a("strong"),z1o=o("layoutlm"),W1o=o(" \u2014 "),LN=a("a"),Q1o=o("LayoutLMModel"),H1o=o(" (LayoutLM model)"),U1o=l(),Kp=a("li"),Cle=a("strong"),J1o=o("layoutlmv2"),Y1o=o(" \u2014 "),xN=a("a"),K1o=o("LayoutLMv2Model"),Z1o=o(" (LayoutLMv2 model)"),ebo=l(),Zp=a("li"),wle=a("strong"),obo=o("layoutlmv3"),rbo=o(" \u2014 "),$N=a("a"),tbo=o("LayoutLMv3Model"),abo=o(" (LayoutLMv3 model)"),nbo=l(),e_=a("li"),Ale=a("strong"),sbo=o("led"),lbo=o(" \u2014 "),kN=a("a"),ibo=o("LEDModel"),dbo=o(" (LED model)"),cbo=l(),o_=a("li"),yle=a("strong"),fbo=o("longformer"),mbo=o(" \u2014 "),SN=a("a"),gbo=o("LongformerModel"),hbo=o(" (Longformer model)"),pbo=l(),r_=a("li"),Lle=a("strong"),_bo=o("luke"),ubo=o(" \u2014 "),RN=a("a"),bbo=o("LukeModel"),vbo=o(" (LUKE model)"),Fbo=l(),t_=a("li"),xle=a("strong"),Tbo=o("lxmert"),Mbo=o(" \u2014 "),PN=a("a"),Ebo=o("LxmertModel"),Cbo=o(" (LXMERT model)"),wbo=l(),a_=a("li"),$le=a("strong"),Abo=o("m2m_100"),ybo=o(" \u2014 "),BN=a("a"),Lbo=o("M2M100Model"),xbo=o(" (M2M100 model)"),$bo=l(),n_=a("li"),kle=a("strong"),kbo=o("marian"),Sbo=o(" \u2014 "),IN=a("a"),Rbo=o("MarianModel"),Pbo=o(" (Marian model)"),Bbo=l(),s_=a("li"),Sle=a("strong"),Ibo=o("maskformer"),Nbo=o(" \u2014 "),NN=a("a"),qbo=o("MaskFormerModel"),jbo=o(" (MaskFormer model)"),Dbo=l(),l_=a("li"),Rle=a("strong"),Gbo=o("mbart"),Obo=o(" \u2014 "),qN=a("a"),Vbo=o("MBartModel"),Xbo=o(" (mBART model)"),zbo=l(),i_=a("li"),Ple=a("strong"),Wbo=o("megatron-bert"),Qbo=o(" \u2014 "),jN=a("a"),Hbo=o("MegatronBertModel"),Ubo=o(" (MegatronBert model)"),Jbo=l(),d_=a("li"),Ble=a("strong"),Ybo=o("mobilebert"),Kbo=o(" \u2014 "),DN=a("a"),Zbo=o("MobileBertModel"),evo=o(" (MobileBERT model)"),ovo=l(),c_=a("li"),Ile=a("strong"),rvo=o("mpnet"),tvo=o(" \u2014 "),GN=a("a"),avo=o("MPNetModel"),nvo=o(" (MPNet model)"),svo=l(),f_=a("li"),Nle=a("strong"),lvo=o("mt5"),ivo=o(" \u2014 "),ON=a("a"),dvo=o("MT5Model"),cvo=o(" (mT5 model)"),fvo=l(),m_=a("li"),qle=a("strong"),mvo=o("nystromformer"),gvo=o(" \u2014 "),VN=a("a"),hvo=o("NystromformerModel"),pvo=o(" (Nystromformer model)"),_vo=l(),g_=a("li"),jle=a("strong"),uvo=o("openai-gpt"),bvo=o(" \u2014 "),XN=a("a"),vvo=o("OpenAIGPTModel"),Fvo=o(" (OpenAI GPT model)"),Tvo=l(),h_=a("li"),Dle=a("strong"),Mvo=o("opt"),Evo=o(" \u2014 "),zN=a("a"),Cvo=o("OPTModel"),wvo=o(" (OPT model)"),Avo=l(),p_=a("li"),Gle=a("strong"),yvo=o("pegasus"),Lvo=o(" \u2014 "),WN=a("a"),xvo=o("PegasusModel"),$vo=o(" (Pegasus model)"),kvo=l(),__=a("li"),Ole=a("strong"),Svo=o("perceiver"),Rvo=o(" \u2014 "),QN=a("a"),Pvo=o("PerceiverModel"),Bvo=o(" (Perceiver model)"),Ivo=l(),u_=a("li"),Vle=a("strong"),Nvo=o("plbart"),qvo=o(" \u2014 "),HN=a("a"),jvo=o("PLBartModel"),Dvo=o(" (PLBart model)"),Gvo=l(),b_=a("li"),Xle=a("strong"),Ovo=o("poolformer"),Vvo=o(" \u2014 "),UN=a("a"),Xvo=o("PoolFormerModel"),zvo=o(" (PoolFormer model)"),Wvo=l(),v_=a("li"),zle=a("strong"),Qvo=o("prophetnet"),Hvo=o(" \u2014 "),JN=a("a"),Uvo=o("ProphetNetModel"),Jvo=o(" (ProphetNet model)"),Yvo=l(),F_=a("li"),Wle=a("strong"),Kvo=o("qdqbert"),Zvo=o(" \u2014 "),YN=a("a"),e0o=o("QDQBertModel"),o0o=o(" (QDQBert model)"),r0o=l(),T_=a("li"),Qle=a("strong"),t0o=o("reformer"),a0o=o(" \u2014 "),KN=a("a"),n0o=o("ReformerModel"),s0o=o(" (Reformer model)"),l0o=l(),M_=a("li"),Hle=a("strong"),i0o=o("regnet"),d0o=o(" \u2014 "),ZN=a("a"),c0o=o("RegNetModel"),f0o=o(" (RegNet model)"),m0o=l(),E_=a("li"),Ule=a("strong"),g0o=o("rembert"),h0o=o(" \u2014 "),eq=a("a"),p0o=o("RemBertModel"),_0o=o(" (RemBERT model)"),u0o=l(),C_=a("li"),Jle=a("strong"),b0o=o("resnet"),v0o=o(" \u2014 "),oq=a("a"),F0o=o("ResNetModel"),T0o=o(" (ResNet model)"),M0o=l(),w_=a("li"),Yle=a("strong"),E0o=o("retribert"),C0o=o(" \u2014 "),rq=a("a"),w0o=o("RetriBertModel"),A0o=o(" (RetriBERT model)"),y0o=l(),A_=a("li"),Kle=a("strong"),L0o=o("roberta"),x0o=o(" \u2014 "),tq=a("a"),$0o=o("RobertaModel"),k0o=o(" (RoBERTa model)"),S0o=l(),y_=a("li"),Zle=a("strong"),R0o=o("roformer"),P0o=o(" \u2014 "),aq=a("a"),B0o=o("RoFormerModel"),I0o=o(" (RoFormer model)"),N0o=l(),L_=a("li"),eie=a("strong"),q0o=o("segformer"),j0o=o(" \u2014 "),nq=a("a"),D0o=o("SegformerModel"),G0o=o(" (SegFormer model)"),O0o=l(),x_=a("li"),oie=a("strong"),V0o=o("sew"),X0o=o(" \u2014 "),sq=a("a"),z0o=o("SEWModel"),W0o=o(" (SEW model)"),Q0o=l(),$_=a("li"),rie=a("strong"),H0o=o("sew-d"),U0o=o(" \u2014 "),lq=a("a"),J0o=o("SEWDModel"),Y0o=o(" (SEW-D model)"),K0o=l(),k_=a("li"),tie=a("strong"),Z0o=o("speech_to_text"),eFo=o(" \u2014 "),iq=a("a"),oFo=o("Speech2TextModel"),rFo=o(" (Speech2Text model)"),tFo=l(),S_=a("li"),aie=a("strong"),aFo=o("splinter"),nFo=o(" \u2014 "),dq=a("a"),sFo=o("SplinterModel"),lFo=o(" (Splinter model)"),iFo=l(),R_=a("li"),nie=a("strong"),dFo=o("squeezebert"),cFo=o(" \u2014 "),cq=a("a"),fFo=o("SqueezeBertModel"),mFo=o(" (SqueezeBERT model)"),gFo=l(),P_=a("li"),sie=a("strong"),hFo=o("swin"),pFo=o(" \u2014 "),fq=a("a"),_Fo=o("SwinModel"),uFo=o(" (Swin model)"),bFo=l(),B_=a("li"),lie=a("strong"),vFo=o("t5"),FFo=o(" \u2014 "),mq=a("a"),TFo=o("T5Model"),MFo=o(" (T5 model)"),EFo=l(),I_=a("li"),iie=a("strong"),CFo=o("tapas"),wFo=o(" \u2014 "),gq=a("a"),AFo=o("TapasModel"),yFo=o(" (TAPAS model)"),LFo=l(),N_=a("li"),die=a("strong"),xFo=o("trajectory_transformer"),$Fo=o(" \u2014 "),hq=a("a"),kFo=o("TrajectoryTransformerModel"),SFo=o(" (Trajectory Transformer model)"),RFo=l(),q_=a("li"),cie=a("strong"),PFo=o("transfo-xl"),BFo=o(" \u2014 "),pq=a("a"),IFo=o("TransfoXLModel"),NFo=o(" (Transformer-XL model)"),qFo=l(),j_=a("li"),fie=a("strong"),jFo=o("unispeech"),DFo=o(" \u2014 "),_q=a("a"),GFo=o("UniSpeechModel"),OFo=o(" (UniSpeech model)"),VFo=l(),D_=a("li"),mie=a("strong"),XFo=o("unispeech-sat"),zFo=o(" \u2014 "),uq=a("a"),WFo=o("UniSpeechSatModel"),QFo=o(" (UniSpeechSat model)"),HFo=l(),G_=a("li"),gie=a("strong"),UFo=o("van"),JFo=o(" \u2014 "),bq=a("a"),YFo=o("VanModel"),KFo=o(" (VAN model)"),ZFo=l(),O_=a("li"),hie=a("strong"),eTo=o("vilt"),oTo=o(" \u2014 "),vq=a("a"),rTo=o("ViltModel"),tTo=o(" (ViLT model)"),aTo=l(),V_=a("li"),pie=a("strong"),nTo=o("vision-text-dual-encoder"),sTo=o(" \u2014 "),Fq=a("a"),lTo=o("VisionTextDualEncoderModel"),iTo=o(" (VisionTextDualEncoder model)"),dTo=l(),X_=a("li"),_ie=a("strong"),cTo=o("visual_bert"),fTo=o(" \u2014 "),Tq=a("a"),mTo=o("VisualBertModel"),gTo=o(" (VisualBert model)"),hTo=l(),z_=a("li"),uie=a("strong"),pTo=o("vit"),_To=o(" \u2014 "),Mq=a("a"),uTo=o("ViTModel"),bTo=o(" (ViT model)"),vTo=l(),W_=a("li"),bie=a("strong"),FTo=o("vit_mae"),TTo=o(" \u2014 "),Eq=a("a"),MTo=o("ViTMAEModel"),ETo=o(" (ViTMAE model)"),CTo=l(),Q_=a("li"),vie=a("strong"),wTo=o("wav2vec2"),ATo=o(" \u2014 "),Cq=a("a"),yTo=o("Wav2Vec2Model"),LTo=o(" (Wav2Vec2 model)"),xTo=l(),H_=a("li"),Fie=a("strong"),$To=o("wav2vec2-conformer"),kTo=o(" \u2014 "),wq=a("a"),STo=o("Wav2Vec2ConformerModel"),RTo=o(" (Wav2Vec2-Conformer model)"),PTo=l(),U_=a("li"),Tie=a("strong"),BTo=o("wavlm"),ITo=o(" \u2014 "),Aq=a("a"),NTo=o("WavLMModel"),qTo=o(" (WavLM model)"),jTo=l(),J_=a("li"),Mie=a("strong"),DTo=o("xglm"),GTo=o(" \u2014 "),yq=a("a"),OTo=o("XGLMModel"),VTo=o(" (XGLM model)"),XTo=l(),Y_=a("li"),Eie=a("strong"),zTo=o("xlm"),WTo=o(" \u2014 "),Lq=a("a"),QTo=o("XLMModel"),HTo=o(" (XLM model)"),UTo=l(),K_=a("li"),Cie=a("strong"),JTo=o("xlm-prophetnet"),YTo=o(" \u2014 "),xq=a("a"),KTo=o("XLMProphetNetModel"),ZTo=o(" (XLMProphetNet model)"),e7o=l(),Z_=a("li"),wie=a("strong"),o7o=o("xlm-roberta"),r7o=o(" \u2014 "),$q=a("a"),t7o=o("XLMRobertaModel"),a7o=o(" (XLM-RoBERTa model)"),n7o=l(),eu=a("li"),Aie=a("strong"),s7o=o("xlm-roberta-xl"),l7o=o(" \u2014 "),kq=a("a"),i7o=o("XLMRobertaXLModel"),d7o=o(" (XLM-RoBERTa-XL model)"),c7o=l(),ou=a("li"),yie=a("strong"),f7o=o("xlnet"),m7o=o(" \u2014 "),Sq=a("a"),g7o=o("XLNetModel"),h7o=o(" (XLNet model)"),p7o=l(),ru=a("li"),Lie=a("strong"),_7o=o("yolos"),u7o=o(" \u2014 "),Rq=a("a"),b7o=o("YolosModel"),v7o=o(" (YOLOS model)"),F7o=l(),tu=a("li"),xie=a("strong"),T7o=o("yoso"),M7o=o(" \u2014 "),Pq=a("a"),E7o=o("YosoModel"),C7o=o(" (YOSO model)"),w7o=l(),au=a("p"),A7o=o("The model is set in evaluation mode by default using "),$ie=a("code"),y7o=o("model.eval()"),L7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kie=a("code"),x7o=o("model.train()"),$7o=l(),F(nu.$$.fragment),Rqe=l(),Li=a("h2"),su=a("a"),Sie=a("span"),F(dy.$$.fragment),k7o=l(),Rie=a("span"),S7o=o("AutoModelForPreTraining"),Pqe=l(),xo=a("div"),F(cy.$$.fragment),R7o=l(),xi=a("p"),P7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Bq=a("a"),B7o=o("from_pretrained()"),I7o=o(" class method or the "),Iq=a("a"),N7o=o("from_config()"),q7o=o(` class
method.`),j7o=l(),fy=a("p"),D7o=o("This class cannot be instantiated directly using "),Pie=a("code"),G7o=o("__init__()"),O7o=o(" (throws an error)."),V7o=l(),at=a("div"),F(my.$$.fragment),X7o=l(),Bie=a("p"),z7o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),W7o=l(),$i=a("p"),Q7o=o(`Note:
Loading a model from its configuration file does `),Iie=a("strong"),H7o=o("not"),U7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nq=a("a"),J7o=o("from_pretrained()"),Y7o=o(" to load the model weights."),K7o=l(),F(lu.$$.fragment),Z7o=l(),Ye=a("div"),F(gy.$$.fragment),eMo=l(),Nie=a("p"),oMo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rMo=l(),xa=a("p"),tMo=o("The model class to instantiate is selected based on the "),qie=a("code"),aMo=o("model_type"),nMo=o(` property of the config object (either
passed as an argument or loaded from `),jie=a("code"),sMo=o("pretrained_model_name_or_path"),lMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=a("code"),iMo=o("pretrained_model_name_or_path"),dMo=o(":"),cMo=l(),G=a("ul"),iu=a("li"),Gie=a("strong"),fMo=o("albert"),mMo=o(" \u2014 "),qq=a("a"),gMo=o("AlbertForPreTraining"),hMo=o(" (ALBERT model)"),pMo=l(),du=a("li"),Oie=a("strong"),_Mo=o("bart"),uMo=o(" \u2014 "),jq=a("a"),bMo=o("BartForConditionalGeneration"),vMo=o(" (BART model)"),FMo=l(),cu=a("li"),Vie=a("strong"),TMo=o("bert"),MMo=o(" \u2014 "),Dq=a("a"),EMo=o("BertForPreTraining"),CMo=o(" (BERT model)"),wMo=l(),fu=a("li"),Xie=a("strong"),AMo=o("big_bird"),yMo=o(" \u2014 "),Gq=a("a"),LMo=o("BigBirdForPreTraining"),xMo=o(" (BigBird model)"),$Mo=l(),mu=a("li"),zie=a("strong"),kMo=o("bloom"),SMo=o(" \u2014 "),Oq=a("a"),RMo=o("BloomForCausalLM"),PMo=o(" (BLOOM model)"),BMo=l(),gu=a("li"),Wie=a("strong"),IMo=o("camembert"),NMo=o(" \u2014 "),Vq=a("a"),qMo=o("CamembertForMaskedLM"),jMo=o(" (CamemBERT model)"),DMo=l(),hu=a("li"),Qie=a("strong"),GMo=o("ctrl"),OMo=o(" \u2014 "),Xq=a("a"),VMo=o("CTRLLMHeadModel"),XMo=o(" (CTRL model)"),zMo=l(),pu=a("li"),Hie=a("strong"),WMo=o("data2vec-text"),QMo=o(" \u2014 "),zq=a("a"),HMo=o("Data2VecTextForMaskedLM"),UMo=o(" (Data2VecText model)"),JMo=l(),_u=a("li"),Uie=a("strong"),YMo=o("deberta"),KMo=o(" \u2014 "),Wq=a("a"),ZMo=o("DebertaForMaskedLM"),e4o=o(" (DeBERTa model)"),o4o=l(),uu=a("li"),Jie=a("strong"),r4o=o("deberta-v2"),t4o=o(" \u2014 "),Qq=a("a"),a4o=o("DebertaV2ForMaskedLM"),n4o=o(" (DeBERTa-v2 model)"),s4o=l(),bu=a("li"),Yie=a("strong"),l4o=o("distilbert"),i4o=o(" \u2014 "),Hq=a("a"),d4o=o("DistilBertForMaskedLM"),c4o=o(" (DistilBERT model)"),f4o=l(),vu=a("li"),Kie=a("strong"),m4o=o("electra"),g4o=o(" \u2014 "),Uq=a("a"),h4o=o("ElectraForPreTraining"),p4o=o(" (ELECTRA model)"),_4o=l(),Fu=a("li"),Zie=a("strong"),u4o=o("flaubert"),b4o=o(" \u2014 "),Jq=a("a"),v4o=o("FlaubertWithLMHeadModel"),F4o=o(" (FlauBERT model)"),T4o=l(),Tu=a("li"),ede=a("strong"),M4o=o("flava"),E4o=o(" \u2014 "),Yq=a("a"),C4o=o("FlavaForPreTraining"),w4o=o(" (Flava model)"),A4o=l(),Mu=a("li"),ode=a("strong"),y4o=o("fnet"),L4o=o(" \u2014 "),Kq=a("a"),x4o=o("FNetForPreTraining"),$4o=o(" (FNet model)"),k4o=l(),Eu=a("li"),rde=a("strong"),S4o=o("fsmt"),R4o=o(" \u2014 "),Zq=a("a"),P4o=o("FSMTForConditionalGeneration"),B4o=o(" (FairSeq Machine-Translation model)"),I4o=l(),Cu=a("li"),tde=a("strong"),N4o=o("funnel"),q4o=o(" \u2014 "),ej=a("a"),j4o=o("FunnelForPreTraining"),D4o=o(" (Funnel Transformer model)"),G4o=l(),wu=a("li"),ade=a("strong"),O4o=o("gpt2"),V4o=o(" \u2014 "),oj=a("a"),X4o=o("GPT2LMHeadModel"),z4o=o(" (OpenAI GPT-2 model)"),W4o=l(),Au=a("li"),nde=a("strong"),Q4o=o("ibert"),H4o=o(" \u2014 "),rj=a("a"),U4o=o("IBertForMaskedLM"),J4o=o(" (I-BERT model)"),Y4o=l(),yu=a("li"),sde=a("strong"),K4o=o("layoutlm"),Z4o=o(" \u2014 "),tj=a("a"),eEo=o("LayoutLMForMaskedLM"),oEo=o(" (LayoutLM model)"),rEo=l(),Lu=a("li"),lde=a("strong"),tEo=o("longformer"),aEo=o(" \u2014 "),aj=a("a"),nEo=o("LongformerForMaskedLM"),sEo=o(" (Longformer model)"),lEo=l(),xu=a("li"),ide=a("strong"),iEo=o("lxmert"),dEo=o(" \u2014 "),nj=a("a"),cEo=o("LxmertForPreTraining"),fEo=o(" (LXMERT model)"),mEo=l(),$u=a("li"),dde=a("strong"),gEo=o("megatron-bert"),hEo=o(" \u2014 "),sj=a("a"),pEo=o("MegatronBertForPreTraining"),_Eo=o(" (MegatronBert model)"),uEo=l(),ku=a("li"),cde=a("strong"),bEo=o("mobilebert"),vEo=o(" \u2014 "),lj=a("a"),FEo=o("MobileBertForPreTraining"),TEo=o(" (MobileBERT model)"),MEo=l(),Su=a("li"),fde=a("strong"),EEo=o("mpnet"),CEo=o(" \u2014 "),ij=a("a"),wEo=o("MPNetForMaskedLM"),AEo=o(" (MPNet model)"),yEo=l(),Ru=a("li"),mde=a("strong"),LEo=o("openai-gpt"),xEo=o(" \u2014 "),dj=a("a"),$Eo=o("OpenAIGPTLMHeadModel"),kEo=o(" (OpenAI GPT model)"),SEo=l(),Pu=a("li"),gde=a("strong"),REo=o("retribert"),PEo=o(" \u2014 "),cj=a("a"),BEo=o("RetriBertModel"),IEo=o(" (RetriBERT model)"),NEo=l(),Bu=a("li"),hde=a("strong"),qEo=o("roberta"),jEo=o(" \u2014 "),fj=a("a"),DEo=o("RobertaForMaskedLM"),GEo=o(" (RoBERTa model)"),OEo=l(),Iu=a("li"),pde=a("strong"),VEo=o("splinter"),XEo=o(" \u2014 "),mj=a("a"),zEo=o("SplinterForPreTraining"),WEo=o(" (Splinter model)"),QEo=l(),Nu=a("li"),_de=a("strong"),HEo=o("squeezebert"),UEo=o(" \u2014 "),gj=a("a"),JEo=o("SqueezeBertForMaskedLM"),YEo=o(" (SqueezeBERT model)"),KEo=l(),qu=a("li"),ude=a("strong"),ZEo=o("t5"),eCo=o(" \u2014 "),hj=a("a"),oCo=o("T5ForConditionalGeneration"),rCo=o(" (T5 model)"),tCo=l(),ju=a("li"),bde=a("strong"),aCo=o("tapas"),nCo=o(" \u2014 "),pj=a("a"),sCo=o("TapasForMaskedLM"),lCo=o(" (TAPAS model)"),iCo=l(),Du=a("li"),vde=a("strong"),dCo=o("transfo-xl"),cCo=o(" \u2014 "),_j=a("a"),fCo=o("TransfoXLLMHeadModel"),mCo=o(" (Transformer-XL model)"),gCo=l(),Gu=a("li"),Fde=a("strong"),hCo=o("unispeech"),pCo=o(" \u2014 "),uj=a("a"),_Co=o("UniSpeechForPreTraining"),uCo=o(" (UniSpeech model)"),bCo=l(),Ou=a("li"),Tde=a("strong"),vCo=o("unispeech-sat"),FCo=o(" \u2014 "),bj=a("a"),TCo=o("UniSpeechSatForPreTraining"),MCo=o(" (UniSpeechSat model)"),ECo=l(),Vu=a("li"),Mde=a("strong"),CCo=o("visual_bert"),wCo=o(" \u2014 "),vj=a("a"),ACo=o("VisualBertForPreTraining"),yCo=o(" (VisualBert model)"),LCo=l(),Xu=a("li"),Ede=a("strong"),xCo=o("vit_mae"),$Co=o(" \u2014 "),Fj=a("a"),kCo=o("ViTMAEForPreTraining"),SCo=o(" (ViTMAE model)"),RCo=l(),zu=a("li"),Cde=a("strong"),PCo=o("wav2vec2"),BCo=o(" \u2014 "),Tj=a("a"),ICo=o("Wav2Vec2ForPreTraining"),NCo=o(" (Wav2Vec2 model)"),qCo=l(),Wu=a("li"),wde=a("strong"),jCo=o("wav2vec2-conformer"),DCo=o(" \u2014 "),Mj=a("a"),GCo=o("Wav2Vec2ConformerForPreTraining"),OCo=o(" (Wav2Vec2-Conformer model)"),VCo=l(),Qu=a("li"),Ade=a("strong"),XCo=o("xlm"),zCo=o(" \u2014 "),Ej=a("a"),WCo=o("XLMWithLMHeadModel"),QCo=o(" (XLM model)"),HCo=l(),Hu=a("li"),yde=a("strong"),UCo=o("xlm-roberta"),JCo=o(" \u2014 "),Cj=a("a"),YCo=o("XLMRobertaForMaskedLM"),KCo=o(" (XLM-RoBERTa model)"),ZCo=l(),Uu=a("li"),Lde=a("strong"),e5o=o("xlm-roberta-xl"),o5o=o(" \u2014 "),wj=a("a"),r5o=o("XLMRobertaXLForMaskedLM"),t5o=o(" (XLM-RoBERTa-XL model)"),a5o=l(),Ju=a("li"),xde=a("strong"),n5o=o("xlnet"),s5o=o(" \u2014 "),Aj=a("a"),l5o=o("XLNetLMHeadModel"),i5o=o(" (XLNet model)"),d5o=l(),Yu=a("p"),c5o=o("The model is set in evaluation mode by default using "),$de=a("code"),f5o=o("model.eval()"),m5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kde=a("code"),g5o=o("model.train()"),h5o=l(),F(Ku.$$.fragment),Bqe=l(),ki=a("h2"),Zu=a("a"),Sde=a("span"),F(hy.$$.fragment),p5o=l(),Rde=a("span"),_5o=o("AutoModelForCausalLM"),Iqe=l(),$o=a("div"),F(py.$$.fragment),u5o=l(),Si=a("p"),b5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yj=a("a"),v5o=o("from_pretrained()"),F5o=o(" class method or the "),Lj=a("a"),T5o=o("from_config()"),M5o=o(` class
method.`),E5o=l(),_y=a("p"),C5o=o("This class cannot be instantiated directly using "),Pde=a("code"),w5o=o("__init__()"),A5o=o(" (throws an error)."),y5o=l(),nt=a("div"),F(uy.$$.fragment),L5o=l(),Bde=a("p"),x5o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$5o=l(),Ri=a("p"),k5o=o(`Note:
Loading a model from its configuration file does `),Ide=a("strong"),S5o=o("not"),R5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xj=a("a"),P5o=o("from_pretrained()"),B5o=o(" to load the model weights."),I5o=l(),F(e2.$$.fragment),N5o=l(),Ke=a("div"),F(by.$$.fragment),q5o=l(),Nde=a("p"),j5o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),D5o=l(),$a=a("p"),G5o=o("The model class to instantiate is selected based on the "),qde=a("code"),O5o=o("model_type"),V5o=o(` property of the config object (either
passed as an argument or loaded from `),jde=a("code"),X5o=o("pretrained_model_name_or_path"),z5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dde=a("code"),W5o=o("pretrained_model_name_or_path"),Q5o=o(":"),H5o=l(),z=a("ul"),o2=a("li"),Gde=a("strong"),U5o=o("bart"),J5o=o(" \u2014 "),$j=a("a"),Y5o=o("BartForCausalLM"),K5o=o(" (BART model)"),Z5o=l(),r2=a("li"),Ode=a("strong"),e3o=o("bert"),o3o=o(" \u2014 "),kj=a("a"),r3o=o("BertLMHeadModel"),t3o=o(" (BERT model)"),a3o=l(),t2=a("li"),Vde=a("strong"),n3o=o("bert-generation"),s3o=o(" \u2014 "),Sj=a("a"),l3o=o("BertGenerationDecoder"),i3o=o(" (Bert Generation model)"),d3o=l(),a2=a("li"),Xde=a("strong"),c3o=o("big_bird"),f3o=o(" \u2014 "),Rj=a("a"),m3o=o("BigBirdForCausalLM"),g3o=o(" (BigBird model)"),h3o=l(),n2=a("li"),zde=a("strong"),p3o=o("bigbird_pegasus"),_3o=o(" \u2014 "),Pj=a("a"),u3o=o("BigBirdPegasusForCausalLM"),b3o=o(" (BigBirdPegasus model)"),v3o=l(),s2=a("li"),Wde=a("strong"),F3o=o("blenderbot"),T3o=o(" \u2014 "),Bj=a("a"),M3o=o("BlenderbotForCausalLM"),E3o=o(" (Blenderbot model)"),C3o=l(),l2=a("li"),Qde=a("strong"),w3o=o("blenderbot-small"),A3o=o(" \u2014 "),Ij=a("a"),y3o=o("BlenderbotSmallForCausalLM"),L3o=o(" (BlenderbotSmall model)"),x3o=l(),i2=a("li"),Hde=a("strong"),$3o=o("bloom"),k3o=o(" \u2014 "),Nj=a("a"),S3o=o("BloomForCausalLM"),R3o=o(" (BLOOM model)"),P3o=l(),d2=a("li"),Ude=a("strong"),B3o=o("camembert"),I3o=o(" \u2014 "),qj=a("a"),N3o=o("CamembertForCausalLM"),q3o=o(" (CamemBERT model)"),j3o=l(),c2=a("li"),Jde=a("strong"),D3o=o("ctrl"),G3o=o(" \u2014 "),jj=a("a"),O3o=o("CTRLLMHeadModel"),V3o=o(" (CTRL model)"),X3o=l(),f2=a("li"),Yde=a("strong"),z3o=o("data2vec-text"),W3o=o(" \u2014 "),Dj=a("a"),Q3o=o("Data2VecTextForCausalLM"),H3o=o(" (Data2VecText model)"),U3o=l(),m2=a("li"),Kde=a("strong"),J3o=o("electra"),Y3o=o(" \u2014 "),Gj=a("a"),K3o=o("ElectraForCausalLM"),Z3o=o(" (ELECTRA model)"),ewo=l(),g2=a("li"),Zde=a("strong"),owo=o("gpt2"),rwo=o(" \u2014 "),Oj=a("a"),two=o("GPT2LMHeadModel"),awo=o(" (OpenAI GPT-2 model)"),nwo=l(),h2=a("li"),ece=a("strong"),swo=o("gpt_neo"),lwo=o(" \u2014 "),Vj=a("a"),iwo=o("GPTNeoForCausalLM"),dwo=o(" (GPT Neo model)"),cwo=l(),p2=a("li"),oce=a("strong"),fwo=o("gpt_neox"),mwo=o(" \u2014 "),Xj=a("a"),gwo=o("GPTNeoXForCausalLM"),hwo=o(" (GPT NeoX model)"),pwo=l(),_2=a("li"),rce=a("strong"),_wo=o("gptj"),uwo=o(" \u2014 "),zj=a("a"),bwo=o("GPTJForCausalLM"),vwo=o(" (GPT-J model)"),Fwo=l(),u2=a("li"),tce=a("strong"),Two=o("marian"),Mwo=o(" \u2014 "),Wj=a("a"),Ewo=o("MarianForCausalLM"),Cwo=o(" (Marian model)"),wwo=l(),b2=a("li"),ace=a("strong"),Awo=o("mbart"),ywo=o(" \u2014 "),Qj=a("a"),Lwo=o("MBartForCausalLM"),xwo=o(" (mBART model)"),$wo=l(),v2=a("li"),nce=a("strong"),kwo=o("megatron-bert"),Swo=o(" \u2014 "),Hj=a("a"),Rwo=o("MegatronBertForCausalLM"),Pwo=o(" (MegatronBert model)"),Bwo=l(),F2=a("li"),sce=a("strong"),Iwo=o("openai-gpt"),Nwo=o(" \u2014 "),Uj=a("a"),qwo=o("OpenAIGPTLMHeadModel"),jwo=o(" (OpenAI GPT model)"),Dwo=l(),T2=a("li"),lce=a("strong"),Gwo=o("opt"),Owo=o(" \u2014 "),Jj=a("a"),Vwo=o("OPTForCausalLM"),Xwo=o(" (OPT model)"),zwo=l(),M2=a("li"),ice=a("strong"),Wwo=o("pegasus"),Qwo=o(" \u2014 "),Yj=a("a"),Hwo=o("PegasusForCausalLM"),Uwo=o(" (Pegasus model)"),Jwo=l(),E2=a("li"),dce=a("strong"),Ywo=o("plbart"),Kwo=o(" \u2014 "),Kj=a("a"),Zwo=o("PLBartForCausalLM"),e6o=o(" (PLBart model)"),o6o=l(),C2=a("li"),cce=a("strong"),r6o=o("prophetnet"),t6o=o(" \u2014 "),Zj=a("a"),a6o=o("ProphetNetForCausalLM"),n6o=o(" (ProphetNet model)"),s6o=l(),w2=a("li"),fce=a("strong"),l6o=o("qdqbert"),i6o=o(" \u2014 "),eD=a("a"),d6o=o("QDQBertLMHeadModel"),c6o=o(" (QDQBert model)"),f6o=l(),A2=a("li"),mce=a("strong"),m6o=o("reformer"),g6o=o(" \u2014 "),oD=a("a"),h6o=o("ReformerModelWithLMHead"),p6o=o(" (Reformer model)"),_6o=l(),y2=a("li"),gce=a("strong"),u6o=o("rembert"),b6o=o(" \u2014 "),rD=a("a"),v6o=o("RemBertForCausalLM"),F6o=o(" (RemBERT model)"),T6o=l(),L2=a("li"),hce=a("strong"),M6o=o("roberta"),E6o=o(" \u2014 "),tD=a("a"),C6o=o("RobertaForCausalLM"),w6o=o(" (RoBERTa model)"),A6o=l(),x2=a("li"),pce=a("strong"),y6o=o("roformer"),L6o=o(" \u2014 "),aD=a("a"),x6o=o("RoFormerForCausalLM"),$6o=o(" (RoFormer model)"),k6o=l(),$2=a("li"),_ce=a("strong"),S6o=o("speech_to_text_2"),R6o=o(" \u2014 "),nD=a("a"),P6o=o("Speech2Text2ForCausalLM"),B6o=o(" (Speech2Text2 model)"),I6o=l(),k2=a("li"),uce=a("strong"),N6o=o("transfo-xl"),q6o=o(" \u2014 "),sD=a("a"),j6o=o("TransfoXLLMHeadModel"),D6o=o(" (Transformer-XL model)"),G6o=l(),S2=a("li"),bce=a("strong"),O6o=o("trocr"),V6o=o(" \u2014 "),lD=a("a"),X6o=o("TrOCRForCausalLM"),z6o=o(" (TrOCR model)"),W6o=l(),R2=a("li"),vce=a("strong"),Q6o=o("xglm"),H6o=o(" \u2014 "),iD=a("a"),U6o=o("XGLMForCausalLM"),J6o=o(" (XGLM model)"),Y6o=l(),P2=a("li"),Fce=a("strong"),K6o=o("xlm"),Z6o=o(" \u2014 "),dD=a("a"),eAo=o("XLMWithLMHeadModel"),oAo=o(" (XLM model)"),rAo=l(),B2=a("li"),Tce=a("strong"),tAo=o("xlm-prophetnet"),aAo=o(" \u2014 "),cD=a("a"),nAo=o("XLMProphetNetForCausalLM"),sAo=o(" (XLMProphetNet model)"),lAo=l(),I2=a("li"),Mce=a("strong"),iAo=o("xlm-roberta"),dAo=o(" \u2014 "),fD=a("a"),cAo=o("XLMRobertaForCausalLM"),fAo=o(" (XLM-RoBERTa model)"),mAo=l(),N2=a("li"),Ece=a("strong"),gAo=o("xlm-roberta-xl"),hAo=o(" \u2014 "),mD=a("a"),pAo=o("XLMRobertaXLForCausalLM"),_Ao=o(" (XLM-RoBERTa-XL model)"),uAo=l(),q2=a("li"),Cce=a("strong"),bAo=o("xlnet"),vAo=o(" \u2014 "),gD=a("a"),FAo=o("XLNetLMHeadModel"),TAo=o(" (XLNet model)"),MAo=l(),j2=a("p"),EAo=o("The model is set in evaluation mode by default using "),wce=a("code"),CAo=o("model.eval()"),wAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ace=a("code"),AAo=o("model.train()"),yAo=l(),F(D2.$$.fragment),Nqe=l(),Pi=a("h2"),G2=a("a"),yce=a("span"),F(vy.$$.fragment),LAo=l(),Lce=a("span"),xAo=o("AutoModelForMaskedLM"),qqe=l(),ko=a("div"),F(Fy.$$.fragment),$Ao=l(),Bi=a("p"),kAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hD=a("a"),SAo=o("from_pretrained()"),RAo=o(" class method or the "),pD=a("a"),PAo=o("from_config()"),BAo=o(` class
method.`),IAo=l(),Ty=a("p"),NAo=o("This class cannot be instantiated directly using "),xce=a("code"),qAo=o("__init__()"),jAo=o(" (throws an error)."),DAo=l(),st=a("div"),F(My.$$.fragment),GAo=l(),$ce=a("p"),OAo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),VAo=l(),Ii=a("p"),XAo=o(`Note:
Loading a model from its configuration file does `),kce=a("strong"),zAo=o("not"),WAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_D=a("a"),QAo=o("from_pretrained()"),HAo=o(" to load the model weights."),UAo=l(),F(O2.$$.fragment),JAo=l(),Ze=a("div"),F(Ey.$$.fragment),YAo=l(),Sce=a("p"),KAo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ZAo=l(),ka=a("p"),eyo=o("The model class to instantiate is selected based on the "),Rce=a("code"),oyo=o("model_type"),ryo=o(` property of the config object (either
passed as an argument or loaded from `),Pce=a("code"),tyo=o("pretrained_model_name_or_path"),ayo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bce=a("code"),nyo=o("pretrained_model_name_or_path"),syo=o(":"),lyo=l(),Q=a("ul"),V2=a("li"),Ice=a("strong"),iyo=o("albert"),dyo=o(" \u2014 "),uD=a("a"),cyo=o("AlbertForMaskedLM"),fyo=o(" (ALBERT model)"),myo=l(),X2=a("li"),Nce=a("strong"),gyo=o("bart"),hyo=o(" \u2014 "),bD=a("a"),pyo=o("BartForConditionalGeneration"),_yo=o(" (BART model)"),uyo=l(),z2=a("li"),qce=a("strong"),byo=o("bert"),vyo=o(" \u2014 "),vD=a("a"),Fyo=o("BertForMaskedLM"),Tyo=o(" (BERT model)"),Myo=l(),W2=a("li"),jce=a("strong"),Eyo=o("big_bird"),Cyo=o(" \u2014 "),FD=a("a"),wyo=o("BigBirdForMaskedLM"),Ayo=o(" (BigBird model)"),yyo=l(),Q2=a("li"),Dce=a("strong"),Lyo=o("camembert"),xyo=o(" \u2014 "),TD=a("a"),$yo=o("CamembertForMaskedLM"),kyo=o(" (CamemBERT model)"),Syo=l(),H2=a("li"),Gce=a("strong"),Ryo=o("convbert"),Pyo=o(" \u2014 "),MD=a("a"),Byo=o("ConvBertForMaskedLM"),Iyo=o(" (ConvBERT model)"),Nyo=l(),U2=a("li"),Oce=a("strong"),qyo=o("data2vec-text"),jyo=o(" \u2014 "),ED=a("a"),Dyo=o("Data2VecTextForMaskedLM"),Gyo=o(" (Data2VecText model)"),Oyo=l(),J2=a("li"),Vce=a("strong"),Vyo=o("deberta"),Xyo=o(" \u2014 "),CD=a("a"),zyo=o("DebertaForMaskedLM"),Wyo=o(" (DeBERTa model)"),Qyo=l(),Y2=a("li"),Xce=a("strong"),Hyo=o("deberta-v2"),Uyo=o(" \u2014 "),wD=a("a"),Jyo=o("DebertaV2ForMaskedLM"),Yyo=o(" (DeBERTa-v2 model)"),Kyo=l(),K2=a("li"),zce=a("strong"),Zyo=o("distilbert"),eLo=o(" \u2014 "),AD=a("a"),oLo=o("DistilBertForMaskedLM"),rLo=o(" (DistilBERT model)"),tLo=l(),Z2=a("li"),Wce=a("strong"),aLo=o("electra"),nLo=o(" \u2014 "),yD=a("a"),sLo=o("ElectraForMaskedLM"),lLo=o(" (ELECTRA model)"),iLo=l(),e1=a("li"),Qce=a("strong"),dLo=o("flaubert"),cLo=o(" \u2014 "),LD=a("a"),fLo=o("FlaubertWithLMHeadModel"),mLo=o(" (FlauBERT model)"),gLo=l(),o1=a("li"),Hce=a("strong"),hLo=o("fnet"),pLo=o(" \u2014 "),xD=a("a"),_Lo=o("FNetForMaskedLM"),uLo=o(" (FNet model)"),bLo=l(),r1=a("li"),Uce=a("strong"),vLo=o("funnel"),FLo=o(" \u2014 "),$D=a("a"),TLo=o("FunnelForMaskedLM"),MLo=o(" (Funnel Transformer model)"),ELo=l(),t1=a("li"),Jce=a("strong"),CLo=o("ibert"),wLo=o(" \u2014 "),kD=a("a"),ALo=o("IBertForMaskedLM"),yLo=o(" (I-BERT model)"),LLo=l(),a1=a("li"),Yce=a("strong"),xLo=o("layoutlm"),$Lo=o(" \u2014 "),SD=a("a"),kLo=o("LayoutLMForMaskedLM"),SLo=o(" (LayoutLM model)"),RLo=l(),n1=a("li"),Kce=a("strong"),PLo=o("longformer"),BLo=o(" \u2014 "),RD=a("a"),ILo=o("LongformerForMaskedLM"),NLo=o(" (Longformer model)"),qLo=l(),s1=a("li"),Zce=a("strong"),jLo=o("mbart"),DLo=o(" \u2014 "),PD=a("a"),GLo=o("MBartForConditionalGeneration"),OLo=o(" (mBART model)"),VLo=l(),l1=a("li"),efe=a("strong"),XLo=o("megatron-bert"),zLo=o(" \u2014 "),BD=a("a"),WLo=o("MegatronBertForMaskedLM"),QLo=o(" (MegatronBert model)"),HLo=l(),i1=a("li"),ofe=a("strong"),ULo=o("mobilebert"),JLo=o(" \u2014 "),ID=a("a"),YLo=o("MobileBertForMaskedLM"),KLo=o(" (MobileBERT model)"),ZLo=l(),d1=a("li"),rfe=a("strong"),e8o=o("mpnet"),o8o=o(" \u2014 "),ND=a("a"),r8o=o("MPNetForMaskedLM"),t8o=o(" (MPNet model)"),a8o=l(),c1=a("li"),tfe=a("strong"),n8o=o("nystromformer"),s8o=o(" \u2014 "),qD=a("a"),l8o=o("NystromformerForMaskedLM"),i8o=o(" (Nystromformer model)"),d8o=l(),f1=a("li"),afe=a("strong"),c8o=o("perceiver"),f8o=o(" \u2014 "),jD=a("a"),m8o=o("PerceiverForMaskedLM"),g8o=o(" (Perceiver model)"),h8o=l(),m1=a("li"),nfe=a("strong"),p8o=o("qdqbert"),_8o=o(" \u2014 "),DD=a("a"),u8o=o("QDQBertForMaskedLM"),b8o=o(" (QDQBert model)"),v8o=l(),g1=a("li"),sfe=a("strong"),F8o=o("reformer"),T8o=o(" \u2014 "),GD=a("a"),M8o=o("ReformerForMaskedLM"),E8o=o(" (Reformer model)"),C8o=l(),h1=a("li"),lfe=a("strong"),w8o=o("rembert"),A8o=o(" \u2014 "),OD=a("a"),y8o=o("RemBertForMaskedLM"),L8o=o(" (RemBERT model)"),x8o=l(),p1=a("li"),ife=a("strong"),$8o=o("roberta"),k8o=o(" \u2014 "),VD=a("a"),S8o=o("RobertaForMaskedLM"),R8o=o(" (RoBERTa model)"),P8o=l(),_1=a("li"),dfe=a("strong"),B8o=o("roformer"),I8o=o(" \u2014 "),XD=a("a"),N8o=o("RoFormerForMaskedLM"),q8o=o(" (RoFormer model)"),j8o=l(),u1=a("li"),cfe=a("strong"),D8o=o("squeezebert"),G8o=o(" \u2014 "),zD=a("a"),O8o=o("SqueezeBertForMaskedLM"),V8o=o(" (SqueezeBERT model)"),X8o=l(),b1=a("li"),ffe=a("strong"),z8o=o("tapas"),W8o=o(" \u2014 "),WD=a("a"),Q8o=o("TapasForMaskedLM"),H8o=o(" (TAPAS model)"),U8o=l(),v1=a("li"),mfe=a("strong"),J8o=o("wav2vec2"),Y8o=o(" \u2014 "),gfe=a("code"),K8o=o("Wav2Vec2ForMaskedLM"),Z8o=o(" (Wav2Vec2 model)"),e9o=l(),F1=a("li"),hfe=a("strong"),o9o=o("xlm"),r9o=o(" \u2014 "),QD=a("a"),t9o=o("XLMWithLMHeadModel"),a9o=o(" (XLM model)"),n9o=l(),T1=a("li"),pfe=a("strong"),s9o=o("xlm-roberta"),l9o=o(" \u2014 "),HD=a("a"),i9o=o("XLMRobertaForMaskedLM"),d9o=o(" (XLM-RoBERTa model)"),c9o=l(),M1=a("li"),_fe=a("strong"),f9o=o("xlm-roberta-xl"),m9o=o(" \u2014 "),UD=a("a"),g9o=o("XLMRobertaXLForMaskedLM"),h9o=o(" (XLM-RoBERTa-XL model)"),p9o=l(),E1=a("li"),ufe=a("strong"),_9o=o("yoso"),u9o=o(" \u2014 "),JD=a("a"),b9o=o("YosoForMaskedLM"),v9o=o(" (YOSO model)"),F9o=l(),C1=a("p"),T9o=o("The model is set in evaluation mode by default using "),bfe=a("code"),M9o=o("model.eval()"),E9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=a("code"),C9o=o("model.train()"),w9o=l(),F(w1.$$.fragment),jqe=l(),Ni=a("h2"),A1=a("a"),Ffe=a("span"),F(Cy.$$.fragment),A9o=l(),Tfe=a("span"),y9o=o("AutoModelForSeq2SeqLM"),Dqe=l(),So=a("div"),F(wy.$$.fragment),L9o=l(),qi=a("p"),x9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),YD=a("a"),$9o=o("from_pretrained()"),k9o=o(" class method or the "),KD=a("a"),S9o=o("from_config()"),R9o=o(` class
method.`),P9o=l(),Ay=a("p"),B9o=o("This class cannot be instantiated directly using "),Mfe=a("code"),I9o=o("__init__()"),N9o=o(" (throws an error)."),q9o=l(),lt=a("div"),F(yy.$$.fragment),j9o=l(),Efe=a("p"),D9o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),G9o=l(),ji=a("p"),O9o=o(`Note:
Loading a model from its configuration file does `),Cfe=a("strong"),V9o=o("not"),X9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=a("a"),z9o=o("from_pretrained()"),W9o=o(" to load the model weights."),Q9o=l(),F(y1.$$.fragment),H9o=l(),eo=a("div"),F(Ly.$$.fragment),U9o=l(),wfe=a("p"),J9o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Y9o=l(),Sa=a("p"),K9o=o("The model class to instantiate is selected based on the "),Afe=a("code"),Z9o=o("model_type"),exo=o(` property of the config object (either
passed as an argument or loaded from `),yfe=a("code"),oxo=o("pretrained_model_name_or_path"),rxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=a("code"),txo=o("pretrained_model_name_or_path"),axo=o(":"),nxo=l(),_e=a("ul"),L1=a("li"),xfe=a("strong"),sxo=o("bart"),lxo=o(" \u2014 "),eG=a("a"),ixo=o("BartForConditionalGeneration"),dxo=o(" (BART model)"),cxo=l(),x1=a("li"),$fe=a("strong"),fxo=o("bigbird_pegasus"),mxo=o(" \u2014 "),oG=a("a"),gxo=o("BigBirdPegasusForConditionalGeneration"),hxo=o(" (BigBirdPegasus model)"),pxo=l(),$1=a("li"),kfe=a("strong"),_xo=o("blenderbot"),uxo=o(" \u2014 "),rG=a("a"),bxo=o("BlenderbotForConditionalGeneration"),vxo=o(" (Blenderbot model)"),Fxo=l(),k1=a("li"),Sfe=a("strong"),Txo=o("blenderbot-small"),Mxo=o(" \u2014 "),tG=a("a"),Exo=o("BlenderbotSmallForConditionalGeneration"),Cxo=o(" (BlenderbotSmall model)"),wxo=l(),S1=a("li"),Rfe=a("strong"),Axo=o("encoder-decoder"),yxo=o(" \u2014 "),aG=a("a"),Lxo=o("EncoderDecoderModel"),xxo=o(" (Encoder decoder model)"),$xo=l(),R1=a("li"),Pfe=a("strong"),kxo=o("fsmt"),Sxo=o(" \u2014 "),nG=a("a"),Rxo=o("FSMTForConditionalGeneration"),Pxo=o(" (FairSeq Machine-Translation model)"),Bxo=l(),P1=a("li"),Bfe=a("strong"),Ixo=o("led"),Nxo=o(" \u2014 "),sG=a("a"),qxo=o("LEDForConditionalGeneration"),jxo=o(" (LED model)"),Dxo=l(),B1=a("li"),Ife=a("strong"),Gxo=o("m2m_100"),Oxo=o(" \u2014 "),lG=a("a"),Vxo=o("M2M100ForConditionalGeneration"),Xxo=o(" (M2M100 model)"),zxo=l(),I1=a("li"),Nfe=a("strong"),Wxo=o("marian"),Qxo=o(" \u2014 "),iG=a("a"),Hxo=o("MarianMTModel"),Uxo=o(" (Marian model)"),Jxo=l(),N1=a("li"),qfe=a("strong"),Yxo=o("mbart"),Kxo=o(" \u2014 "),dG=a("a"),Zxo=o("MBartForConditionalGeneration"),e$o=o(" (mBART model)"),o$o=l(),q1=a("li"),jfe=a("strong"),r$o=o("mt5"),t$o=o(" \u2014 "),cG=a("a"),a$o=o("MT5ForConditionalGeneration"),n$o=o(" (mT5 model)"),s$o=l(),j1=a("li"),Dfe=a("strong"),l$o=o("pegasus"),i$o=o(" \u2014 "),fG=a("a"),d$o=o("PegasusForConditionalGeneration"),c$o=o(" (Pegasus model)"),f$o=l(),D1=a("li"),Gfe=a("strong"),m$o=o("plbart"),g$o=o(" \u2014 "),mG=a("a"),h$o=o("PLBartForConditionalGeneration"),p$o=o(" (PLBart model)"),_$o=l(),G1=a("li"),Ofe=a("strong"),u$o=o("prophetnet"),b$o=o(" \u2014 "),gG=a("a"),v$o=o("ProphetNetForConditionalGeneration"),F$o=o(" (ProphetNet model)"),T$o=l(),O1=a("li"),Vfe=a("strong"),M$o=o("t5"),E$o=o(" \u2014 "),hG=a("a"),C$o=o("T5ForConditionalGeneration"),w$o=o(" (T5 model)"),A$o=l(),V1=a("li"),Xfe=a("strong"),y$o=o("xlm-prophetnet"),L$o=o(" \u2014 "),pG=a("a"),x$o=o("XLMProphetNetForConditionalGeneration"),$$o=o(" (XLMProphetNet model)"),k$o=l(),X1=a("p"),S$o=o("The model is set in evaluation mode by default using "),zfe=a("code"),R$o=o("model.eval()"),P$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wfe=a("code"),B$o=o("model.train()"),I$o=l(),F(z1.$$.fragment),Gqe=l(),Di=a("h2"),W1=a("a"),Qfe=a("span"),F(xy.$$.fragment),N$o=l(),Hfe=a("span"),q$o=o("AutoModelForSequenceClassification"),Oqe=l(),Ro=a("div"),F($y.$$.fragment),j$o=l(),Gi=a("p"),D$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_G=a("a"),G$o=o("from_pretrained()"),O$o=o(" class method or the "),uG=a("a"),V$o=o("from_config()"),X$o=o(` class
method.`),z$o=l(),ky=a("p"),W$o=o("This class cannot be instantiated directly using "),Ufe=a("code"),Q$o=o("__init__()"),H$o=o(" (throws an error)."),U$o=l(),it=a("div"),F(Sy.$$.fragment),J$o=l(),Jfe=a("p"),Y$o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),K$o=l(),Oi=a("p"),Z$o=o(`Note:
Loading a model from its configuration file does `),Yfe=a("strong"),eko=o("not"),oko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=a("a"),rko=o("from_pretrained()"),tko=o(" to load the model weights."),ako=l(),F(Q1.$$.fragment),nko=l(),oo=a("div"),F(Ry.$$.fragment),sko=l(),Kfe=a("p"),lko=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iko=l(),Ra=a("p"),dko=o("The model class to instantiate is selected based on the "),Zfe=a("code"),cko=o("model_type"),fko=o(` property of the config object (either
passed as an argument or loaded from `),eme=a("code"),mko=o("pretrained_model_name_or_path"),gko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=a("code"),hko=o("pretrained_model_name_or_path"),pko=o(":"),_ko=l(),N=a("ul"),H1=a("li"),rme=a("strong"),uko=o("albert"),bko=o(" \u2014 "),vG=a("a"),vko=o("AlbertForSequenceClassification"),Fko=o(" (ALBERT model)"),Tko=l(),U1=a("li"),tme=a("strong"),Mko=o("bart"),Eko=o(" \u2014 "),FG=a("a"),Cko=o("BartForSequenceClassification"),wko=o(" (BART model)"),Ako=l(),J1=a("li"),ame=a("strong"),yko=o("bert"),Lko=o(" \u2014 "),TG=a("a"),xko=o("BertForSequenceClassification"),$ko=o(" (BERT model)"),kko=l(),Y1=a("li"),nme=a("strong"),Sko=o("big_bird"),Rko=o(" \u2014 "),MG=a("a"),Pko=o("BigBirdForSequenceClassification"),Bko=o(" (BigBird model)"),Iko=l(),K1=a("li"),sme=a("strong"),Nko=o("bigbird_pegasus"),qko=o(" \u2014 "),EG=a("a"),jko=o("BigBirdPegasusForSequenceClassification"),Dko=o(" (BigBirdPegasus model)"),Gko=l(),Z1=a("li"),lme=a("strong"),Oko=o("camembert"),Vko=o(" \u2014 "),CG=a("a"),Xko=o("CamembertForSequenceClassification"),zko=o(" (CamemBERT model)"),Wko=l(),eb=a("li"),ime=a("strong"),Qko=o("canine"),Hko=o(" \u2014 "),wG=a("a"),Uko=o("CanineForSequenceClassification"),Jko=o(" (Canine model)"),Yko=l(),ob=a("li"),dme=a("strong"),Kko=o("convbert"),Zko=o(" \u2014 "),AG=a("a"),eSo=o("ConvBertForSequenceClassification"),oSo=o(" (ConvBERT model)"),rSo=l(),rb=a("li"),cme=a("strong"),tSo=o("ctrl"),aSo=o(" \u2014 "),yG=a("a"),nSo=o("CTRLForSequenceClassification"),sSo=o(" (CTRL model)"),lSo=l(),tb=a("li"),fme=a("strong"),iSo=o("data2vec-text"),dSo=o(" \u2014 "),LG=a("a"),cSo=o("Data2VecTextForSequenceClassification"),fSo=o(" (Data2VecText model)"),mSo=l(),ab=a("li"),mme=a("strong"),gSo=o("deberta"),hSo=o(" \u2014 "),xG=a("a"),pSo=o("DebertaForSequenceClassification"),_So=o(" (DeBERTa model)"),uSo=l(),nb=a("li"),gme=a("strong"),bSo=o("deberta-v2"),vSo=o(" \u2014 "),$G=a("a"),FSo=o("DebertaV2ForSequenceClassification"),TSo=o(" (DeBERTa-v2 model)"),MSo=l(),sb=a("li"),hme=a("strong"),ESo=o("distilbert"),CSo=o(" \u2014 "),kG=a("a"),wSo=o("DistilBertForSequenceClassification"),ASo=o(" (DistilBERT model)"),ySo=l(),lb=a("li"),pme=a("strong"),LSo=o("electra"),xSo=o(" \u2014 "),SG=a("a"),$So=o("ElectraForSequenceClassification"),kSo=o(" (ELECTRA model)"),SSo=l(),ib=a("li"),_me=a("strong"),RSo=o("flaubert"),PSo=o(" \u2014 "),RG=a("a"),BSo=o("FlaubertForSequenceClassification"),ISo=o(" (FlauBERT model)"),NSo=l(),db=a("li"),ume=a("strong"),qSo=o("fnet"),jSo=o(" \u2014 "),PG=a("a"),DSo=o("FNetForSequenceClassification"),GSo=o(" (FNet model)"),OSo=l(),cb=a("li"),bme=a("strong"),VSo=o("funnel"),XSo=o(" \u2014 "),BG=a("a"),zSo=o("FunnelForSequenceClassification"),WSo=o(" (Funnel Transformer model)"),QSo=l(),fb=a("li"),vme=a("strong"),HSo=o("gpt2"),USo=o(" \u2014 "),IG=a("a"),JSo=o("GPT2ForSequenceClassification"),YSo=o(" (OpenAI GPT-2 model)"),KSo=l(),mb=a("li"),Fme=a("strong"),ZSo=o("gpt_neo"),eRo=o(" \u2014 "),NG=a("a"),oRo=o("GPTNeoForSequenceClassification"),rRo=o(" (GPT Neo model)"),tRo=l(),gb=a("li"),Tme=a("strong"),aRo=o("gptj"),nRo=o(" \u2014 "),qG=a("a"),sRo=o("GPTJForSequenceClassification"),lRo=o(" (GPT-J model)"),iRo=l(),hb=a("li"),Mme=a("strong"),dRo=o("ibert"),cRo=o(" \u2014 "),jG=a("a"),fRo=o("IBertForSequenceClassification"),mRo=o(" (I-BERT model)"),gRo=l(),pb=a("li"),Eme=a("strong"),hRo=o("layoutlm"),pRo=o(" \u2014 "),DG=a("a"),_Ro=o("LayoutLMForSequenceClassification"),uRo=o(" (LayoutLM model)"),bRo=l(),_b=a("li"),Cme=a("strong"),vRo=o("layoutlmv2"),FRo=o(" \u2014 "),GG=a("a"),TRo=o("LayoutLMv2ForSequenceClassification"),MRo=o(" (LayoutLMv2 model)"),ERo=l(),ub=a("li"),wme=a("strong"),CRo=o("layoutlmv3"),wRo=o(" \u2014 "),OG=a("a"),ARo=o("LayoutLMv3ForSequenceClassification"),yRo=o(" (LayoutLMv3 model)"),LRo=l(),bb=a("li"),Ame=a("strong"),xRo=o("led"),$Ro=o(" \u2014 "),VG=a("a"),kRo=o("LEDForSequenceClassification"),SRo=o(" (LED model)"),RRo=l(),vb=a("li"),yme=a("strong"),PRo=o("longformer"),BRo=o(" \u2014 "),XG=a("a"),IRo=o("LongformerForSequenceClassification"),NRo=o(" (Longformer model)"),qRo=l(),Fb=a("li"),Lme=a("strong"),jRo=o("mbart"),DRo=o(" \u2014 "),zG=a("a"),GRo=o("MBartForSequenceClassification"),ORo=o(" (mBART model)"),VRo=l(),Tb=a("li"),xme=a("strong"),XRo=o("megatron-bert"),zRo=o(" \u2014 "),WG=a("a"),WRo=o("MegatronBertForSequenceClassification"),QRo=o(" (MegatronBert model)"),HRo=l(),Mb=a("li"),$me=a("strong"),URo=o("mobilebert"),JRo=o(" \u2014 "),QG=a("a"),YRo=o("MobileBertForSequenceClassification"),KRo=o(" (MobileBERT model)"),ZRo=l(),Eb=a("li"),kme=a("strong"),ePo=o("mpnet"),oPo=o(" \u2014 "),HG=a("a"),rPo=o("MPNetForSequenceClassification"),tPo=o(" (MPNet model)"),aPo=l(),Cb=a("li"),Sme=a("strong"),nPo=o("nystromformer"),sPo=o(" \u2014 "),UG=a("a"),lPo=o("NystromformerForSequenceClassification"),iPo=o(" (Nystromformer model)"),dPo=l(),wb=a("li"),Rme=a("strong"),cPo=o("openai-gpt"),fPo=o(" \u2014 "),JG=a("a"),mPo=o("OpenAIGPTForSequenceClassification"),gPo=o(" (OpenAI GPT model)"),hPo=l(),Ab=a("li"),Pme=a("strong"),pPo=o("perceiver"),_Po=o(" \u2014 "),YG=a("a"),uPo=o("PerceiverForSequenceClassification"),bPo=o(" (Perceiver model)"),vPo=l(),yb=a("li"),Bme=a("strong"),FPo=o("plbart"),TPo=o(" \u2014 "),KG=a("a"),MPo=o("PLBartForSequenceClassification"),EPo=o(" (PLBart model)"),CPo=l(),Lb=a("li"),Ime=a("strong"),wPo=o("qdqbert"),APo=o(" \u2014 "),ZG=a("a"),yPo=o("QDQBertForSequenceClassification"),LPo=o(" (QDQBert model)"),xPo=l(),xb=a("li"),Nme=a("strong"),$Po=o("reformer"),kPo=o(" \u2014 "),eO=a("a"),SPo=o("ReformerForSequenceClassification"),RPo=o(" (Reformer model)"),PPo=l(),$b=a("li"),qme=a("strong"),BPo=o("rembert"),IPo=o(" \u2014 "),oO=a("a"),NPo=o("RemBertForSequenceClassification"),qPo=o(" (RemBERT model)"),jPo=l(),kb=a("li"),jme=a("strong"),DPo=o("roberta"),GPo=o(" \u2014 "),rO=a("a"),OPo=o("RobertaForSequenceClassification"),VPo=o(" (RoBERTa model)"),XPo=l(),Sb=a("li"),Dme=a("strong"),zPo=o("roformer"),WPo=o(" \u2014 "),tO=a("a"),QPo=o("RoFormerForSequenceClassification"),HPo=o(" (RoFormer model)"),UPo=l(),Rb=a("li"),Gme=a("strong"),JPo=o("squeezebert"),YPo=o(" \u2014 "),aO=a("a"),KPo=o("SqueezeBertForSequenceClassification"),ZPo=o(" (SqueezeBERT model)"),eBo=l(),Pb=a("li"),Ome=a("strong"),oBo=o("tapas"),rBo=o(" \u2014 "),nO=a("a"),tBo=o("TapasForSequenceClassification"),aBo=o(" (TAPAS model)"),nBo=l(),Bb=a("li"),Vme=a("strong"),sBo=o("transfo-xl"),lBo=o(" \u2014 "),sO=a("a"),iBo=o("TransfoXLForSequenceClassification"),dBo=o(" (Transformer-XL model)"),cBo=l(),Ib=a("li"),Xme=a("strong"),fBo=o("xlm"),mBo=o(" \u2014 "),lO=a("a"),gBo=o("XLMForSequenceClassification"),hBo=o(" (XLM model)"),pBo=l(),Nb=a("li"),zme=a("strong"),_Bo=o("xlm-roberta"),uBo=o(" \u2014 "),iO=a("a"),bBo=o("XLMRobertaForSequenceClassification"),vBo=o(" (XLM-RoBERTa model)"),FBo=l(),qb=a("li"),Wme=a("strong"),TBo=o("xlm-roberta-xl"),MBo=o(" \u2014 "),dO=a("a"),EBo=o("XLMRobertaXLForSequenceClassification"),CBo=o(" (XLM-RoBERTa-XL model)"),wBo=l(),jb=a("li"),Qme=a("strong"),ABo=o("xlnet"),yBo=o(" \u2014 "),cO=a("a"),LBo=o("XLNetForSequenceClassification"),xBo=o(" (XLNet model)"),$Bo=l(),Db=a("li"),Hme=a("strong"),kBo=o("yoso"),SBo=o(" \u2014 "),fO=a("a"),RBo=o("YosoForSequenceClassification"),PBo=o(" (YOSO model)"),BBo=l(),Gb=a("p"),IBo=o("The model is set in evaluation mode by default using "),Ume=a("code"),NBo=o("model.eval()"),qBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jme=a("code"),jBo=o("model.train()"),DBo=l(),F(Ob.$$.fragment),Vqe=l(),Vi=a("h2"),Vb=a("a"),Yme=a("span"),F(Py.$$.fragment),GBo=l(),Kme=a("span"),OBo=o("AutoModelForMultipleChoice"),Xqe=l(),Po=a("div"),F(By.$$.fragment),VBo=l(),Xi=a("p"),XBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mO=a("a"),zBo=o("from_pretrained()"),WBo=o(" class method or the "),gO=a("a"),QBo=o("from_config()"),HBo=o(` class
method.`),UBo=l(),Iy=a("p"),JBo=o("This class cannot be instantiated directly using "),Zme=a("code"),YBo=o("__init__()"),KBo=o(" (throws an error)."),ZBo=l(),dt=a("div"),F(Ny.$$.fragment),eIo=l(),ege=a("p"),oIo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rIo=l(),zi=a("p"),tIo=o(`Note:
Loading a model from its configuration file does `),oge=a("strong"),aIo=o("not"),nIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=a("a"),sIo=o("from_pretrained()"),lIo=o(" to load the model weights."),iIo=l(),F(Xb.$$.fragment),dIo=l(),ro=a("div"),F(qy.$$.fragment),cIo=l(),rge=a("p"),fIo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mIo=l(),Pa=a("p"),gIo=o("The model class to instantiate is selected based on the "),tge=a("code"),hIo=o("model_type"),pIo=o(` property of the config object (either
passed as an argument or loaded from `),age=a("code"),_Io=o("pretrained_model_name_or_path"),uIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nge=a("code"),bIo=o("pretrained_model_name_or_path"),vIo=o(":"),FIo=l(),K=a("ul"),zb=a("li"),sge=a("strong"),TIo=o("albert"),MIo=o(" \u2014 "),pO=a("a"),EIo=o("AlbertForMultipleChoice"),CIo=o(" (ALBERT model)"),wIo=l(),Wb=a("li"),lge=a("strong"),AIo=o("bert"),yIo=o(" \u2014 "),_O=a("a"),LIo=o("BertForMultipleChoice"),xIo=o(" (BERT model)"),$Io=l(),Qb=a("li"),ige=a("strong"),kIo=o("big_bird"),SIo=o(" \u2014 "),uO=a("a"),RIo=o("BigBirdForMultipleChoice"),PIo=o(" (BigBird model)"),BIo=l(),Hb=a("li"),dge=a("strong"),IIo=o("camembert"),NIo=o(" \u2014 "),bO=a("a"),qIo=o("CamembertForMultipleChoice"),jIo=o(" (CamemBERT model)"),DIo=l(),Ub=a("li"),cge=a("strong"),GIo=o("canine"),OIo=o(" \u2014 "),vO=a("a"),VIo=o("CanineForMultipleChoice"),XIo=o(" (Canine model)"),zIo=l(),Jb=a("li"),fge=a("strong"),WIo=o("convbert"),QIo=o(" \u2014 "),FO=a("a"),HIo=o("ConvBertForMultipleChoice"),UIo=o(" (ConvBERT model)"),JIo=l(),Yb=a("li"),mge=a("strong"),YIo=o("data2vec-text"),KIo=o(" \u2014 "),TO=a("a"),ZIo=o("Data2VecTextForMultipleChoice"),eNo=o(" (Data2VecText model)"),oNo=l(),Kb=a("li"),gge=a("strong"),rNo=o("deberta-v2"),tNo=o(" \u2014 "),MO=a("a"),aNo=o("DebertaV2ForMultipleChoice"),nNo=o(" (DeBERTa-v2 model)"),sNo=l(),Zb=a("li"),hge=a("strong"),lNo=o("distilbert"),iNo=o(" \u2014 "),EO=a("a"),dNo=o("DistilBertForMultipleChoice"),cNo=o(" (DistilBERT model)"),fNo=l(),ev=a("li"),pge=a("strong"),mNo=o("electra"),gNo=o(" \u2014 "),CO=a("a"),hNo=o("ElectraForMultipleChoice"),pNo=o(" (ELECTRA model)"),_No=l(),ov=a("li"),_ge=a("strong"),uNo=o("flaubert"),bNo=o(" \u2014 "),wO=a("a"),vNo=o("FlaubertForMultipleChoice"),FNo=o(" (FlauBERT model)"),TNo=l(),rv=a("li"),uge=a("strong"),MNo=o("fnet"),ENo=o(" \u2014 "),AO=a("a"),CNo=o("FNetForMultipleChoice"),wNo=o(" (FNet model)"),ANo=l(),tv=a("li"),bge=a("strong"),yNo=o("funnel"),LNo=o(" \u2014 "),yO=a("a"),xNo=o("FunnelForMultipleChoice"),$No=o(" (Funnel Transformer model)"),kNo=l(),av=a("li"),vge=a("strong"),SNo=o("ibert"),RNo=o(" \u2014 "),LO=a("a"),PNo=o("IBertForMultipleChoice"),BNo=o(" (I-BERT model)"),INo=l(),nv=a("li"),Fge=a("strong"),NNo=o("longformer"),qNo=o(" \u2014 "),xO=a("a"),jNo=o("LongformerForMultipleChoice"),DNo=o(" (Longformer model)"),GNo=l(),sv=a("li"),Tge=a("strong"),ONo=o("megatron-bert"),VNo=o(" \u2014 "),$O=a("a"),XNo=o("MegatronBertForMultipleChoice"),zNo=o(" (MegatronBert model)"),WNo=l(),lv=a("li"),Mge=a("strong"),QNo=o("mobilebert"),HNo=o(" \u2014 "),kO=a("a"),UNo=o("MobileBertForMultipleChoice"),JNo=o(" (MobileBERT model)"),YNo=l(),iv=a("li"),Ege=a("strong"),KNo=o("mpnet"),ZNo=o(" \u2014 "),SO=a("a"),eqo=o("MPNetForMultipleChoice"),oqo=o(" (MPNet model)"),rqo=l(),dv=a("li"),Cge=a("strong"),tqo=o("nystromformer"),aqo=o(" \u2014 "),RO=a("a"),nqo=o("NystromformerForMultipleChoice"),sqo=o(" (Nystromformer model)"),lqo=l(),cv=a("li"),wge=a("strong"),iqo=o("qdqbert"),dqo=o(" \u2014 "),PO=a("a"),cqo=o("QDQBertForMultipleChoice"),fqo=o(" (QDQBert model)"),mqo=l(),fv=a("li"),Age=a("strong"),gqo=o("rembert"),hqo=o(" \u2014 "),BO=a("a"),pqo=o("RemBertForMultipleChoice"),_qo=o(" (RemBERT model)"),uqo=l(),mv=a("li"),yge=a("strong"),bqo=o("roberta"),vqo=o(" \u2014 "),IO=a("a"),Fqo=o("RobertaForMultipleChoice"),Tqo=o(" (RoBERTa model)"),Mqo=l(),gv=a("li"),Lge=a("strong"),Eqo=o("roformer"),Cqo=o(" \u2014 "),NO=a("a"),wqo=o("RoFormerForMultipleChoice"),Aqo=o(" (RoFormer model)"),yqo=l(),hv=a("li"),xge=a("strong"),Lqo=o("squeezebert"),xqo=o(" \u2014 "),qO=a("a"),$qo=o("SqueezeBertForMultipleChoice"),kqo=o(" (SqueezeBERT model)"),Sqo=l(),pv=a("li"),$ge=a("strong"),Rqo=o("xlm"),Pqo=o(" \u2014 "),jO=a("a"),Bqo=o("XLMForMultipleChoice"),Iqo=o(" (XLM model)"),Nqo=l(),_v=a("li"),kge=a("strong"),qqo=o("xlm-roberta"),jqo=o(" \u2014 "),DO=a("a"),Dqo=o("XLMRobertaForMultipleChoice"),Gqo=o(" (XLM-RoBERTa model)"),Oqo=l(),uv=a("li"),Sge=a("strong"),Vqo=o("xlm-roberta-xl"),Xqo=o(" \u2014 "),GO=a("a"),zqo=o("XLMRobertaXLForMultipleChoice"),Wqo=o(" (XLM-RoBERTa-XL model)"),Qqo=l(),bv=a("li"),Rge=a("strong"),Hqo=o("xlnet"),Uqo=o(" \u2014 "),OO=a("a"),Jqo=o("XLNetForMultipleChoice"),Yqo=o(" (XLNet model)"),Kqo=l(),vv=a("li"),Pge=a("strong"),Zqo=o("yoso"),ejo=o(" \u2014 "),VO=a("a"),ojo=o("YosoForMultipleChoice"),rjo=o(" (YOSO model)"),tjo=l(),Fv=a("p"),ajo=o("The model is set in evaluation mode by default using "),Bge=a("code"),njo=o("model.eval()"),sjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ige=a("code"),ljo=o("model.train()"),ijo=l(),F(Tv.$$.fragment),zqe=l(),Wi=a("h2"),Mv=a("a"),Nge=a("span"),F(jy.$$.fragment),djo=l(),qge=a("span"),cjo=o("AutoModelForNextSentencePrediction"),Wqe=l(),Bo=a("div"),F(Dy.$$.fragment),fjo=l(),Qi=a("p"),mjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XO=a("a"),gjo=o("from_pretrained()"),hjo=o(" class method or the "),zO=a("a"),pjo=o("from_config()"),_jo=o(` class
method.`),ujo=l(),Gy=a("p"),bjo=o("This class cannot be instantiated directly using "),jge=a("code"),vjo=o("__init__()"),Fjo=o(" (throws an error)."),Tjo=l(),ct=a("div"),F(Oy.$$.fragment),Mjo=l(),Dge=a("p"),Ejo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Cjo=l(),Hi=a("p"),wjo=o(`Note:
Loading a model from its configuration file does `),Gge=a("strong"),Ajo=o("not"),yjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=a("a"),Ljo=o("from_pretrained()"),xjo=o(" to load the model weights."),$jo=l(),F(Ev.$$.fragment),kjo=l(),to=a("div"),F(Vy.$$.fragment),Sjo=l(),Oge=a("p"),Rjo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Pjo=l(),Ba=a("p"),Bjo=o("The model class to instantiate is selected based on the "),Vge=a("code"),Ijo=o("model_type"),Njo=o(` property of the config object (either
passed as an argument or loaded from `),Xge=a("code"),qjo=o("pretrained_model_name_or_path"),jjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zge=a("code"),Djo=o("pretrained_model_name_or_path"),Gjo=o(":"),Ojo=l(),Yr=a("ul"),Cv=a("li"),Wge=a("strong"),Vjo=o("bert"),Xjo=o(" \u2014 "),QO=a("a"),zjo=o("BertForNextSentencePrediction"),Wjo=o(" (BERT model)"),Qjo=l(),wv=a("li"),Qge=a("strong"),Hjo=o("fnet"),Ujo=o(" \u2014 "),HO=a("a"),Jjo=o("FNetForNextSentencePrediction"),Yjo=o(" (FNet model)"),Kjo=l(),Av=a("li"),Hge=a("strong"),Zjo=o("megatron-bert"),eDo=o(" \u2014 "),UO=a("a"),oDo=o("MegatronBertForNextSentencePrediction"),rDo=o(" (MegatronBert model)"),tDo=l(),yv=a("li"),Uge=a("strong"),aDo=o("mobilebert"),nDo=o(" \u2014 "),JO=a("a"),sDo=o("MobileBertForNextSentencePrediction"),lDo=o(" (MobileBERT model)"),iDo=l(),Lv=a("li"),Jge=a("strong"),dDo=o("qdqbert"),cDo=o(" \u2014 "),YO=a("a"),fDo=o("QDQBertForNextSentencePrediction"),mDo=o(" (QDQBert model)"),gDo=l(),xv=a("p"),hDo=o("The model is set in evaluation mode by default using "),Yge=a("code"),pDo=o("model.eval()"),_Do=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=a("code"),uDo=o("model.train()"),bDo=l(),F($v.$$.fragment),Qqe=l(),Ui=a("h2"),kv=a("a"),Zge=a("span"),F(Xy.$$.fragment),vDo=l(),ehe=a("span"),FDo=o("AutoModelForTokenClassification"),Hqe=l(),Io=a("div"),F(zy.$$.fragment),TDo=l(),Ji=a("p"),MDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),KO=a("a"),EDo=o("from_pretrained()"),CDo=o(" class method or the "),ZO=a("a"),wDo=o("from_config()"),ADo=o(` class
method.`),yDo=l(),Wy=a("p"),LDo=o("This class cannot be instantiated directly using "),ohe=a("code"),xDo=o("__init__()"),$Do=o(" (throws an error)."),kDo=l(),ft=a("div"),F(Qy.$$.fragment),SDo=l(),rhe=a("p"),RDo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),PDo=l(),Yi=a("p"),BDo=o(`Note:
Loading a model from its configuration file does `),the=a("strong"),IDo=o("not"),NDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eV=a("a"),qDo=o("from_pretrained()"),jDo=o(" to load the model weights."),DDo=l(),F(Sv.$$.fragment),GDo=l(),ao=a("div"),F(Hy.$$.fragment),ODo=l(),ahe=a("p"),VDo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),XDo=l(),Ia=a("p"),zDo=o("The model class to instantiate is selected based on the "),nhe=a("code"),WDo=o("model_type"),QDo=o(` property of the config object (either
passed as an argument or loaded from `),she=a("code"),HDo=o("pretrained_model_name_or_path"),UDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lhe=a("code"),JDo=o("pretrained_model_name_or_path"),YDo=o(":"),KDo=l(),H=a("ul"),Rv=a("li"),ihe=a("strong"),ZDo=o("albert"),eGo=o(" \u2014 "),oV=a("a"),oGo=o("AlbertForTokenClassification"),rGo=o(" (ALBERT model)"),tGo=l(),Pv=a("li"),dhe=a("strong"),aGo=o("bert"),nGo=o(" \u2014 "),rV=a("a"),sGo=o("BertForTokenClassification"),lGo=o(" (BERT model)"),iGo=l(),Bv=a("li"),che=a("strong"),dGo=o("big_bird"),cGo=o(" \u2014 "),tV=a("a"),fGo=o("BigBirdForTokenClassification"),mGo=o(" (BigBird model)"),gGo=l(),Iv=a("li"),fhe=a("strong"),hGo=o("camembert"),pGo=o(" \u2014 "),aV=a("a"),_Go=o("CamembertForTokenClassification"),uGo=o(" (CamemBERT model)"),bGo=l(),Nv=a("li"),mhe=a("strong"),vGo=o("canine"),FGo=o(" \u2014 "),nV=a("a"),TGo=o("CanineForTokenClassification"),MGo=o(" (Canine model)"),EGo=l(),qv=a("li"),ghe=a("strong"),CGo=o("convbert"),wGo=o(" \u2014 "),sV=a("a"),AGo=o("ConvBertForTokenClassification"),yGo=o(" (ConvBERT model)"),LGo=l(),jv=a("li"),hhe=a("strong"),xGo=o("data2vec-text"),$Go=o(" \u2014 "),lV=a("a"),kGo=o("Data2VecTextForTokenClassification"),SGo=o(" (Data2VecText model)"),RGo=l(),Dv=a("li"),phe=a("strong"),PGo=o("deberta"),BGo=o(" \u2014 "),iV=a("a"),IGo=o("DebertaForTokenClassification"),NGo=o(" (DeBERTa model)"),qGo=l(),Gv=a("li"),_he=a("strong"),jGo=o("deberta-v2"),DGo=o(" \u2014 "),dV=a("a"),GGo=o("DebertaV2ForTokenClassification"),OGo=o(" (DeBERTa-v2 model)"),VGo=l(),Ov=a("li"),uhe=a("strong"),XGo=o("distilbert"),zGo=o(" \u2014 "),cV=a("a"),WGo=o("DistilBertForTokenClassification"),QGo=o(" (DistilBERT model)"),HGo=l(),Vv=a("li"),bhe=a("strong"),UGo=o("electra"),JGo=o(" \u2014 "),fV=a("a"),YGo=o("ElectraForTokenClassification"),KGo=o(" (ELECTRA model)"),ZGo=l(),Xv=a("li"),vhe=a("strong"),eOo=o("flaubert"),oOo=o(" \u2014 "),mV=a("a"),rOo=o("FlaubertForTokenClassification"),tOo=o(" (FlauBERT model)"),aOo=l(),zv=a("li"),Fhe=a("strong"),nOo=o("fnet"),sOo=o(" \u2014 "),gV=a("a"),lOo=o("FNetForTokenClassification"),iOo=o(" (FNet model)"),dOo=l(),Wv=a("li"),The=a("strong"),cOo=o("funnel"),fOo=o(" \u2014 "),hV=a("a"),mOo=o("FunnelForTokenClassification"),gOo=o(" (Funnel Transformer model)"),hOo=l(),Qv=a("li"),Mhe=a("strong"),pOo=o("gpt2"),_Oo=o(" \u2014 "),pV=a("a"),uOo=o("GPT2ForTokenClassification"),bOo=o(" (OpenAI GPT-2 model)"),vOo=l(),Hv=a("li"),Ehe=a("strong"),FOo=o("ibert"),TOo=o(" \u2014 "),_V=a("a"),MOo=o("IBertForTokenClassification"),EOo=o(" (I-BERT model)"),COo=l(),Uv=a("li"),Che=a("strong"),wOo=o("layoutlm"),AOo=o(" \u2014 "),uV=a("a"),yOo=o("LayoutLMForTokenClassification"),LOo=o(" (LayoutLM model)"),xOo=l(),Jv=a("li"),whe=a("strong"),$Oo=o("layoutlmv2"),kOo=o(" \u2014 "),bV=a("a"),SOo=o("LayoutLMv2ForTokenClassification"),ROo=o(" (LayoutLMv2 model)"),POo=l(),Yv=a("li"),Ahe=a("strong"),BOo=o("layoutlmv3"),IOo=o(" \u2014 "),vV=a("a"),NOo=o("LayoutLMv3ForTokenClassification"),qOo=o(" (LayoutLMv3 model)"),jOo=l(),Kv=a("li"),yhe=a("strong"),DOo=o("longformer"),GOo=o(" \u2014 "),FV=a("a"),OOo=o("LongformerForTokenClassification"),VOo=o(" (Longformer model)"),XOo=l(),Zv=a("li"),Lhe=a("strong"),zOo=o("megatron-bert"),WOo=o(" \u2014 "),TV=a("a"),QOo=o("MegatronBertForTokenClassification"),HOo=o(" (MegatronBert model)"),UOo=l(),e0=a("li"),xhe=a("strong"),JOo=o("mobilebert"),YOo=o(" \u2014 "),MV=a("a"),KOo=o("MobileBertForTokenClassification"),ZOo=o(" (MobileBERT model)"),eVo=l(),o0=a("li"),$he=a("strong"),oVo=o("mpnet"),rVo=o(" \u2014 "),EV=a("a"),tVo=o("MPNetForTokenClassification"),aVo=o(" (MPNet model)"),nVo=l(),r0=a("li"),khe=a("strong"),sVo=o("nystromformer"),lVo=o(" \u2014 "),CV=a("a"),iVo=o("NystromformerForTokenClassification"),dVo=o(" (Nystromformer model)"),cVo=l(),t0=a("li"),She=a("strong"),fVo=o("qdqbert"),mVo=o(" \u2014 "),wV=a("a"),gVo=o("QDQBertForTokenClassification"),hVo=o(" (QDQBert model)"),pVo=l(),a0=a("li"),Rhe=a("strong"),_Vo=o("rembert"),uVo=o(" \u2014 "),AV=a("a"),bVo=o("RemBertForTokenClassification"),vVo=o(" (RemBERT model)"),FVo=l(),n0=a("li"),Phe=a("strong"),TVo=o("roberta"),MVo=o(" \u2014 "),yV=a("a"),EVo=o("RobertaForTokenClassification"),CVo=o(" (RoBERTa model)"),wVo=l(),s0=a("li"),Bhe=a("strong"),AVo=o("roformer"),yVo=o(" \u2014 "),LV=a("a"),LVo=o("RoFormerForTokenClassification"),xVo=o(" (RoFormer model)"),$Vo=l(),l0=a("li"),Ihe=a("strong"),kVo=o("squeezebert"),SVo=o(" \u2014 "),xV=a("a"),RVo=o("SqueezeBertForTokenClassification"),PVo=o(" (SqueezeBERT model)"),BVo=l(),i0=a("li"),Nhe=a("strong"),IVo=o("xlm"),NVo=o(" \u2014 "),$V=a("a"),qVo=o("XLMForTokenClassification"),jVo=o(" (XLM model)"),DVo=l(),d0=a("li"),qhe=a("strong"),GVo=o("xlm-roberta"),OVo=o(" \u2014 "),kV=a("a"),VVo=o("XLMRobertaForTokenClassification"),XVo=o(" (XLM-RoBERTa model)"),zVo=l(),c0=a("li"),jhe=a("strong"),WVo=o("xlm-roberta-xl"),QVo=o(" \u2014 "),SV=a("a"),HVo=o("XLMRobertaXLForTokenClassification"),UVo=o(" (XLM-RoBERTa-XL model)"),JVo=l(),f0=a("li"),Dhe=a("strong"),YVo=o("xlnet"),KVo=o(" \u2014 "),RV=a("a"),ZVo=o("XLNetForTokenClassification"),eXo=o(" (XLNet model)"),oXo=l(),m0=a("li"),Ghe=a("strong"),rXo=o("yoso"),tXo=o(" \u2014 "),PV=a("a"),aXo=o("YosoForTokenClassification"),nXo=o(" (YOSO model)"),sXo=l(),g0=a("p"),lXo=o("The model is set in evaluation mode by default using "),Ohe=a("code"),iXo=o("model.eval()"),dXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vhe=a("code"),cXo=o("model.train()"),fXo=l(),F(h0.$$.fragment),Uqe=l(),Ki=a("h2"),p0=a("a"),Xhe=a("span"),F(Uy.$$.fragment),mXo=l(),zhe=a("span"),gXo=o("AutoModelForQuestionAnswering"),Jqe=l(),No=a("div"),F(Jy.$$.fragment),hXo=l(),Zi=a("p"),pXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BV=a("a"),_Xo=o("from_pretrained()"),uXo=o(" class method or the "),IV=a("a"),bXo=o("from_config()"),vXo=o(` class
method.`),FXo=l(),Yy=a("p"),TXo=o("This class cannot be instantiated directly using "),Whe=a("code"),MXo=o("__init__()"),EXo=o(" (throws an error)."),CXo=l(),mt=a("div"),F(Ky.$$.fragment),wXo=l(),Qhe=a("p"),AXo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yXo=l(),ed=a("p"),LXo=o(`Note:
Loading a model from its configuration file does `),Hhe=a("strong"),xXo=o("not"),$Xo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=a("a"),kXo=o("from_pretrained()"),SXo=o(" to load the model weights."),RXo=l(),F(_0.$$.fragment),PXo=l(),no=a("div"),F(Zy.$$.fragment),BXo=l(),Uhe=a("p"),IXo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),NXo=l(),Na=a("p"),qXo=o("The model class to instantiate is selected based on the "),Jhe=a("code"),jXo=o("model_type"),DXo=o(` property of the config object (either
passed as an argument or loaded from `),Yhe=a("code"),GXo=o("pretrained_model_name_or_path"),OXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Khe=a("code"),VXo=o("pretrained_model_name_or_path"),XXo=o(":"),zXo=l(),V=a("ul"),u0=a("li"),Zhe=a("strong"),WXo=o("albert"),QXo=o(" \u2014 "),qV=a("a"),HXo=o("AlbertForQuestionAnswering"),UXo=o(" (ALBERT model)"),JXo=l(),b0=a("li"),epe=a("strong"),YXo=o("bart"),KXo=o(" \u2014 "),jV=a("a"),ZXo=o("BartForQuestionAnswering"),ezo=o(" (BART model)"),ozo=l(),v0=a("li"),ope=a("strong"),rzo=o("bert"),tzo=o(" \u2014 "),DV=a("a"),azo=o("BertForQuestionAnswering"),nzo=o(" (BERT model)"),szo=l(),F0=a("li"),rpe=a("strong"),lzo=o("big_bird"),izo=o(" \u2014 "),GV=a("a"),dzo=o("BigBirdForQuestionAnswering"),czo=o(" (BigBird model)"),fzo=l(),T0=a("li"),tpe=a("strong"),mzo=o("bigbird_pegasus"),gzo=o(" \u2014 "),OV=a("a"),hzo=o("BigBirdPegasusForQuestionAnswering"),pzo=o(" (BigBirdPegasus model)"),_zo=l(),M0=a("li"),ape=a("strong"),uzo=o("camembert"),bzo=o(" \u2014 "),VV=a("a"),vzo=o("CamembertForQuestionAnswering"),Fzo=o(" (CamemBERT model)"),Tzo=l(),E0=a("li"),npe=a("strong"),Mzo=o("canine"),Ezo=o(" \u2014 "),XV=a("a"),Czo=o("CanineForQuestionAnswering"),wzo=o(" (Canine model)"),Azo=l(),C0=a("li"),spe=a("strong"),yzo=o("convbert"),Lzo=o(" \u2014 "),zV=a("a"),xzo=o("ConvBertForQuestionAnswering"),$zo=o(" (ConvBERT model)"),kzo=l(),w0=a("li"),lpe=a("strong"),Szo=o("data2vec-text"),Rzo=o(" \u2014 "),WV=a("a"),Pzo=o("Data2VecTextForQuestionAnswering"),Bzo=o(" (Data2VecText model)"),Izo=l(),A0=a("li"),ipe=a("strong"),Nzo=o("deberta"),qzo=o(" \u2014 "),QV=a("a"),jzo=o("DebertaForQuestionAnswering"),Dzo=o(" (DeBERTa model)"),Gzo=l(),y0=a("li"),dpe=a("strong"),Ozo=o("deberta-v2"),Vzo=o(" \u2014 "),HV=a("a"),Xzo=o("DebertaV2ForQuestionAnswering"),zzo=o(" (DeBERTa-v2 model)"),Wzo=l(),L0=a("li"),cpe=a("strong"),Qzo=o("distilbert"),Hzo=o(" \u2014 "),UV=a("a"),Uzo=o("DistilBertForQuestionAnswering"),Jzo=o(" (DistilBERT model)"),Yzo=l(),x0=a("li"),fpe=a("strong"),Kzo=o("electra"),Zzo=o(" \u2014 "),JV=a("a"),eWo=o("ElectraForQuestionAnswering"),oWo=o(" (ELECTRA model)"),rWo=l(),$0=a("li"),mpe=a("strong"),tWo=o("flaubert"),aWo=o(" \u2014 "),YV=a("a"),nWo=o("FlaubertForQuestionAnsweringSimple"),sWo=o(" (FlauBERT model)"),lWo=l(),k0=a("li"),gpe=a("strong"),iWo=o("fnet"),dWo=o(" \u2014 "),KV=a("a"),cWo=o("FNetForQuestionAnswering"),fWo=o(" (FNet model)"),mWo=l(),S0=a("li"),hpe=a("strong"),gWo=o("funnel"),hWo=o(" \u2014 "),ZV=a("a"),pWo=o("FunnelForQuestionAnswering"),_Wo=o(" (Funnel Transformer model)"),uWo=l(),R0=a("li"),ppe=a("strong"),bWo=o("gptj"),vWo=o(" \u2014 "),eX=a("a"),FWo=o("GPTJForQuestionAnswering"),TWo=o(" (GPT-J model)"),MWo=l(),P0=a("li"),_pe=a("strong"),EWo=o("ibert"),CWo=o(" \u2014 "),oX=a("a"),wWo=o("IBertForQuestionAnswering"),AWo=o(" (I-BERT model)"),yWo=l(),B0=a("li"),upe=a("strong"),LWo=o("layoutlmv2"),xWo=o(" \u2014 "),rX=a("a"),$Wo=o("LayoutLMv2ForQuestionAnswering"),kWo=o(" (LayoutLMv2 model)"),SWo=l(),I0=a("li"),bpe=a("strong"),RWo=o("layoutlmv3"),PWo=o(" \u2014 "),tX=a("a"),BWo=o("LayoutLMv3ForQuestionAnswering"),IWo=o(" (LayoutLMv3 model)"),NWo=l(),N0=a("li"),vpe=a("strong"),qWo=o("led"),jWo=o(" \u2014 "),aX=a("a"),DWo=o("LEDForQuestionAnswering"),GWo=o(" (LED model)"),OWo=l(),q0=a("li"),Fpe=a("strong"),VWo=o("longformer"),XWo=o(" \u2014 "),nX=a("a"),zWo=o("LongformerForQuestionAnswering"),WWo=o(" (Longformer model)"),QWo=l(),j0=a("li"),Tpe=a("strong"),HWo=o("lxmert"),UWo=o(" \u2014 "),sX=a("a"),JWo=o("LxmertForQuestionAnswering"),YWo=o(" (LXMERT model)"),KWo=l(),D0=a("li"),Mpe=a("strong"),ZWo=o("mbart"),eQo=o(" \u2014 "),lX=a("a"),oQo=o("MBartForQuestionAnswering"),rQo=o(" (mBART model)"),tQo=l(),G0=a("li"),Epe=a("strong"),aQo=o("megatron-bert"),nQo=o(" \u2014 "),iX=a("a"),sQo=o("MegatronBertForQuestionAnswering"),lQo=o(" (MegatronBert model)"),iQo=l(),O0=a("li"),Cpe=a("strong"),dQo=o("mobilebert"),cQo=o(" \u2014 "),dX=a("a"),fQo=o("MobileBertForQuestionAnswering"),mQo=o(" (MobileBERT model)"),gQo=l(),V0=a("li"),wpe=a("strong"),hQo=o("mpnet"),pQo=o(" \u2014 "),cX=a("a"),_Qo=o("MPNetForQuestionAnswering"),uQo=o(" (MPNet model)"),bQo=l(),X0=a("li"),Ape=a("strong"),vQo=o("nystromformer"),FQo=o(" \u2014 "),fX=a("a"),TQo=o("NystromformerForQuestionAnswering"),MQo=o(" (Nystromformer model)"),EQo=l(),z0=a("li"),ype=a("strong"),CQo=o("qdqbert"),wQo=o(" \u2014 "),mX=a("a"),AQo=o("QDQBertForQuestionAnswering"),yQo=o(" (QDQBert model)"),LQo=l(),W0=a("li"),Lpe=a("strong"),xQo=o("reformer"),$Qo=o(" \u2014 "),gX=a("a"),kQo=o("ReformerForQuestionAnswering"),SQo=o(" (Reformer model)"),RQo=l(),Q0=a("li"),xpe=a("strong"),PQo=o("rembert"),BQo=o(" \u2014 "),hX=a("a"),IQo=o("RemBertForQuestionAnswering"),NQo=o(" (RemBERT model)"),qQo=l(),H0=a("li"),$pe=a("strong"),jQo=o("roberta"),DQo=o(" \u2014 "),pX=a("a"),GQo=o("RobertaForQuestionAnswering"),OQo=o(" (RoBERTa model)"),VQo=l(),U0=a("li"),kpe=a("strong"),XQo=o("roformer"),zQo=o(" \u2014 "),_X=a("a"),WQo=o("RoFormerForQuestionAnswering"),QQo=o(" (RoFormer model)"),HQo=l(),J0=a("li"),Spe=a("strong"),UQo=o("splinter"),JQo=o(" \u2014 "),uX=a("a"),YQo=o("SplinterForQuestionAnswering"),KQo=o(" (Splinter model)"),ZQo=l(),Y0=a("li"),Rpe=a("strong"),eHo=o("squeezebert"),oHo=o(" \u2014 "),bX=a("a"),rHo=o("SqueezeBertForQuestionAnswering"),tHo=o(" (SqueezeBERT model)"),aHo=l(),K0=a("li"),Ppe=a("strong"),nHo=o("xlm"),sHo=o(" \u2014 "),vX=a("a"),lHo=o("XLMForQuestionAnsweringSimple"),iHo=o(" (XLM model)"),dHo=l(),Z0=a("li"),Bpe=a("strong"),cHo=o("xlm-roberta"),fHo=o(" \u2014 "),FX=a("a"),mHo=o("XLMRobertaForQuestionAnswering"),gHo=o(" (XLM-RoBERTa model)"),hHo=l(),eF=a("li"),Ipe=a("strong"),pHo=o("xlm-roberta-xl"),_Ho=o(" \u2014 "),TX=a("a"),uHo=o("XLMRobertaXLForQuestionAnswering"),bHo=o(" (XLM-RoBERTa-XL model)"),vHo=l(),oF=a("li"),Npe=a("strong"),FHo=o("xlnet"),THo=o(" \u2014 "),MX=a("a"),MHo=o("XLNetForQuestionAnsweringSimple"),EHo=o(" (XLNet model)"),CHo=l(),rF=a("li"),qpe=a("strong"),wHo=o("yoso"),AHo=o(" \u2014 "),EX=a("a"),yHo=o("YosoForQuestionAnswering"),LHo=o(" (YOSO model)"),xHo=l(),tF=a("p"),$Ho=o("The model is set in evaluation mode by default using "),jpe=a("code"),kHo=o("model.eval()"),SHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dpe=a("code"),RHo=o("model.train()"),PHo=l(),F(aF.$$.fragment),Yqe=l(),od=a("h2"),nF=a("a"),Gpe=a("span"),F(eL.$$.fragment),BHo=l(),Ope=a("span"),IHo=o("AutoModelForTableQuestionAnswering"),Kqe=l(),qo=a("div"),F(oL.$$.fragment),NHo=l(),rd=a("p"),qHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),CX=a("a"),jHo=o("from_pretrained()"),DHo=o(" class method or the "),wX=a("a"),GHo=o("from_config()"),OHo=o(` class
method.`),VHo=l(),rL=a("p"),XHo=o("This class cannot be instantiated directly using "),Vpe=a("code"),zHo=o("__init__()"),WHo=o(" (throws an error)."),QHo=l(),gt=a("div"),F(tL.$$.fragment),HHo=l(),Xpe=a("p"),UHo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),JHo=l(),td=a("p"),YHo=o(`Note:
Loading a model from its configuration file does `),zpe=a("strong"),KHo=o("not"),ZHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=a("a"),eUo=o("from_pretrained()"),oUo=o(" to load the model weights."),rUo=l(),F(sF.$$.fragment),tUo=l(),so=a("div"),F(aL.$$.fragment),aUo=l(),Wpe=a("p"),nUo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),sUo=l(),qa=a("p"),lUo=o("The model class to instantiate is selected based on the "),Qpe=a("code"),iUo=o("model_type"),dUo=o(` property of the config object (either
passed as an argument or loaded from `),Hpe=a("code"),cUo=o("pretrained_model_name_or_path"),fUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=a("code"),mUo=o("pretrained_model_name_or_path"),gUo=o(":"),hUo=l(),Jpe=a("ul"),lF=a("li"),Ype=a("strong"),pUo=o("tapas"),_Uo=o(" \u2014 "),yX=a("a"),uUo=o("TapasForQuestionAnswering"),bUo=o(" (TAPAS model)"),vUo=l(),iF=a("p"),FUo=o("The model is set in evaluation mode by default using "),Kpe=a("code"),TUo=o("model.eval()"),MUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zpe=a("code"),EUo=o("model.train()"),CUo=l(),F(dF.$$.fragment),Zqe=l(),ad=a("h2"),cF=a("a"),e_e=a("span"),F(nL.$$.fragment),wUo=l(),o_e=a("span"),AUo=o("AutoModelForImageClassification"),eje=l(),jo=a("div"),F(sL.$$.fragment),yUo=l(),nd=a("p"),LUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LX=a("a"),xUo=o("from_pretrained()"),$Uo=o(" class method or the "),xX=a("a"),kUo=o("from_config()"),SUo=o(` class
method.`),RUo=l(),lL=a("p"),PUo=o("This class cannot be instantiated directly using "),r_e=a("code"),BUo=o("__init__()"),IUo=o(" (throws an error)."),NUo=l(),ht=a("div"),F(iL.$$.fragment),qUo=l(),t_e=a("p"),jUo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DUo=l(),sd=a("p"),GUo=o(`Note:
Loading a model from its configuration file does `),a_e=a("strong"),OUo=o("not"),VUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=a("a"),XUo=o("from_pretrained()"),zUo=o(" to load the model weights."),WUo=l(),F(fF.$$.fragment),QUo=l(),lo=a("div"),F(dL.$$.fragment),HUo=l(),n_e=a("p"),UUo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),JUo=l(),ja=a("p"),YUo=o("The model class to instantiate is selected based on the "),s_e=a("code"),KUo=o("model_type"),ZUo=o(` property of the config object (either
passed as an argument or loaded from `),l_e=a("code"),eJo=o("pretrained_model_name_or_path"),oJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i_e=a("code"),rJo=o("pretrained_model_name_or_path"),tJo=o(":"),aJo=l(),Fe=a("ul"),mF=a("li"),d_e=a("strong"),nJo=o("beit"),sJo=o(" \u2014 "),kX=a("a"),lJo=o("BeitForImageClassification"),iJo=o(" (BEiT model)"),dJo=l(),gF=a("li"),c_e=a("strong"),cJo=o("convnext"),fJo=o(" \u2014 "),SX=a("a"),mJo=o("ConvNextForImageClassification"),gJo=o(" (ConvNext model)"),hJo=l(),hF=a("li"),f_e=a("strong"),pJo=o("cvt"),_Jo=o(" \u2014 "),RX=a("a"),uJo=o("CvtForImageClassification"),bJo=o(" (CvT model)"),vJo=l(),pF=a("li"),m_e=a("strong"),FJo=o("data2vec-vision"),TJo=o(" \u2014 "),PX=a("a"),MJo=o("Data2VecVisionForImageClassification"),EJo=o(" (Data2VecVision model)"),CJo=l(),Bs=a("li"),g_e=a("strong"),wJo=o("deit"),AJo=o(" \u2014 "),BX=a("a"),yJo=o("DeiTForImageClassification"),LJo=o(" or "),IX=a("a"),xJo=o("DeiTForImageClassificationWithTeacher"),$Jo=o(" (DeiT model)"),kJo=l(),_F=a("li"),h_e=a("strong"),SJo=o("imagegpt"),RJo=o(" \u2014 "),NX=a("a"),PJo=o("ImageGPTForImageClassification"),BJo=o(" (ImageGPT model)"),IJo=l(),pt=a("li"),p_e=a("strong"),NJo=o("perceiver"),qJo=o(" \u2014 "),qX=a("a"),jJo=o("PerceiverForImageClassificationLearned"),DJo=o(" or "),jX=a("a"),GJo=o("PerceiverForImageClassificationFourier"),OJo=o(" or "),DX=a("a"),VJo=o("PerceiverForImageClassificationConvProcessing"),XJo=o(" (Perceiver model)"),zJo=l(),uF=a("li"),__e=a("strong"),WJo=o("poolformer"),QJo=o(" \u2014 "),GX=a("a"),HJo=o("PoolFormerForImageClassification"),UJo=o(" (PoolFormer model)"),JJo=l(),bF=a("li"),u_e=a("strong"),YJo=o("regnet"),KJo=o(" \u2014 "),OX=a("a"),ZJo=o("RegNetForImageClassification"),eYo=o(" (RegNet model)"),oYo=l(),vF=a("li"),b_e=a("strong"),rYo=o("resnet"),tYo=o(" \u2014 "),VX=a("a"),aYo=o("ResNetForImageClassification"),nYo=o(" (ResNet model)"),sYo=l(),FF=a("li"),v_e=a("strong"),lYo=o("segformer"),iYo=o(" \u2014 "),XX=a("a"),dYo=o("SegformerForImageClassification"),cYo=o(" (SegFormer model)"),fYo=l(),TF=a("li"),F_e=a("strong"),mYo=o("swin"),gYo=o(" \u2014 "),zX=a("a"),hYo=o("SwinForImageClassification"),pYo=o(" (Swin model)"),_Yo=l(),MF=a("li"),T_e=a("strong"),uYo=o("van"),bYo=o(" \u2014 "),WX=a("a"),vYo=o("VanForImageClassification"),FYo=o(" (VAN model)"),TYo=l(),EF=a("li"),M_e=a("strong"),MYo=o("vit"),EYo=o(" \u2014 "),QX=a("a"),CYo=o("ViTForImageClassification"),wYo=o(" (ViT model)"),AYo=l(),CF=a("p"),yYo=o("The model is set in evaluation mode by default using "),E_e=a("code"),LYo=o("model.eval()"),xYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=a("code"),$Yo=o("model.train()"),kYo=l(),F(wF.$$.fragment),oje=l(),ld=a("h2"),AF=a("a"),w_e=a("span"),F(cL.$$.fragment),SYo=l(),A_e=a("span"),RYo=o("AutoModelForVision2Seq"),rje=l(),Do=a("div"),F(fL.$$.fragment),PYo=l(),id=a("p"),BYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HX=a("a"),IYo=o("from_pretrained()"),NYo=o(" class method or the "),UX=a("a"),qYo=o("from_config()"),jYo=o(` class
method.`),DYo=l(),mL=a("p"),GYo=o("This class cannot be instantiated directly using "),y_e=a("code"),OYo=o("__init__()"),VYo=o(" (throws an error)."),XYo=l(),_t=a("div"),F(gL.$$.fragment),zYo=l(),L_e=a("p"),WYo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),QYo=l(),dd=a("p"),HYo=o(`Note:
Loading a model from its configuration file does `),x_e=a("strong"),UYo=o("not"),JYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=a("a"),YYo=o("from_pretrained()"),KYo=o(" to load the model weights."),ZYo=l(),F(yF.$$.fragment),eKo=l(),io=a("div"),F(hL.$$.fragment),oKo=l(),$_e=a("p"),rKo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),tKo=l(),Da=a("p"),aKo=o("The model class to instantiate is selected based on the "),k_e=a("code"),nKo=o("model_type"),sKo=o(` property of the config object (either
passed as an argument or loaded from `),S_e=a("code"),lKo=o("pretrained_model_name_or_path"),iKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=a("code"),dKo=o("pretrained_model_name_or_path"),cKo=o(":"),fKo=l(),P_e=a("ul"),LF=a("li"),B_e=a("strong"),mKo=o("vision-encoder-decoder"),gKo=o(" \u2014 "),YX=a("a"),hKo=o("VisionEncoderDecoderModel"),pKo=o(" (Vision Encoder decoder model)"),_Ko=l(),xF=a("p"),uKo=o("The model is set in evaluation mode by default using "),I_e=a("code"),bKo=o("model.eval()"),vKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N_e=a("code"),FKo=o("model.train()"),TKo=l(),F($F.$$.fragment),tje=l(),cd=a("h2"),kF=a("a"),q_e=a("span"),F(pL.$$.fragment),MKo=l(),j_e=a("span"),EKo=o("AutoModelForAudioClassification"),aje=l(),Go=a("div"),F(_L.$$.fragment),CKo=l(),fd=a("p"),wKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),KX=a("a"),AKo=o("from_pretrained()"),yKo=o(" class method or the "),ZX=a("a"),LKo=o("from_config()"),xKo=o(` class
method.`),$Ko=l(),uL=a("p"),kKo=o("This class cannot be instantiated directly using "),D_e=a("code"),SKo=o("__init__()"),RKo=o(" (throws an error)."),PKo=l(),ut=a("div"),F(bL.$$.fragment),BKo=l(),G_e=a("p"),IKo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),NKo=l(),md=a("p"),qKo=o(`Note:
Loading a model from its configuration file does `),O_e=a("strong"),jKo=o("not"),DKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=a("a"),GKo=o("from_pretrained()"),OKo=o(" to load the model weights."),VKo=l(),F(SF.$$.fragment),XKo=l(),co=a("div"),F(vL.$$.fragment),zKo=l(),V_e=a("p"),WKo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),QKo=l(),Ga=a("p"),HKo=o("The model class to instantiate is selected based on the "),X_e=a("code"),UKo=o("model_type"),JKo=o(` property of the config object (either
passed as an argument or loaded from `),z_e=a("code"),YKo=o("pretrained_model_name_or_path"),KKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=a("code"),ZKo=o("pretrained_model_name_or_path"),eZo=o(":"),oZo=l(),ke=a("ul"),RF=a("li"),Q_e=a("strong"),rZo=o("data2vec-audio"),tZo=o(" \u2014 "),oz=a("a"),aZo=o("Data2VecAudioForSequenceClassification"),nZo=o(" (Data2VecAudio model)"),sZo=l(),PF=a("li"),H_e=a("strong"),lZo=o("hubert"),iZo=o(" \u2014 "),rz=a("a"),dZo=o("HubertForSequenceClassification"),cZo=o(" (Hubert model)"),fZo=l(),BF=a("li"),U_e=a("strong"),mZo=o("sew"),gZo=o(" \u2014 "),tz=a("a"),hZo=o("SEWForSequenceClassification"),pZo=o(" (SEW model)"),_Zo=l(),IF=a("li"),J_e=a("strong"),uZo=o("sew-d"),bZo=o(" \u2014 "),az=a("a"),vZo=o("SEWDForSequenceClassification"),FZo=o(" (SEW-D model)"),TZo=l(),NF=a("li"),Y_e=a("strong"),MZo=o("unispeech"),EZo=o(" \u2014 "),nz=a("a"),CZo=o("UniSpeechForSequenceClassification"),wZo=o(" (UniSpeech model)"),AZo=l(),qF=a("li"),K_e=a("strong"),yZo=o("unispeech-sat"),LZo=o(" \u2014 "),sz=a("a"),xZo=o("UniSpeechSatForSequenceClassification"),$Zo=o(" (UniSpeechSat model)"),kZo=l(),jF=a("li"),Z_e=a("strong"),SZo=o("wav2vec2"),RZo=o(" \u2014 "),lz=a("a"),PZo=o("Wav2Vec2ForSequenceClassification"),BZo=o(" (Wav2Vec2 model)"),IZo=l(),DF=a("li"),eue=a("strong"),NZo=o("wav2vec2-conformer"),qZo=o(" \u2014 "),iz=a("a"),jZo=o("Wav2Vec2ConformerForSequenceClassification"),DZo=o(" (Wav2Vec2-Conformer model)"),GZo=l(),GF=a("li"),oue=a("strong"),OZo=o("wavlm"),VZo=o(" \u2014 "),dz=a("a"),XZo=o("WavLMForSequenceClassification"),zZo=o(" (WavLM model)"),WZo=l(),OF=a("p"),QZo=o("The model is set in evaluation mode by default using "),rue=a("code"),HZo=o("model.eval()"),UZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tue=a("code"),JZo=o("model.train()"),YZo=l(),F(VF.$$.fragment),nje=l(),gd=a("h2"),XF=a("a"),aue=a("span"),F(FL.$$.fragment),KZo=l(),nue=a("span"),ZZo=o("AutoModelForAudioFrameClassification"),sje=l(),Oo=a("div"),F(TL.$$.fragment),eer=l(),hd=a("p"),oer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cz=a("a"),rer=o("from_pretrained()"),ter=o(" class method or the "),fz=a("a"),aer=o("from_config()"),ner=o(` class
method.`),ser=l(),ML=a("p"),ler=o("This class cannot be instantiated directly using "),sue=a("code"),ier=o("__init__()"),der=o(" (throws an error)."),cer=l(),bt=a("div"),F(EL.$$.fragment),fer=l(),lue=a("p"),mer=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ger=l(),pd=a("p"),her=o(`Note:
Loading a model from its configuration file does `),iue=a("strong"),per=o("not"),_er=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=a("a"),uer=o("from_pretrained()"),ber=o(" to load the model weights."),ver=l(),F(zF.$$.fragment),Fer=l(),fo=a("div"),F(CL.$$.fragment),Ter=l(),due=a("p"),Mer=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Eer=l(),Oa=a("p"),Cer=o("The model class to instantiate is selected based on the "),cue=a("code"),wer=o("model_type"),Aer=o(` property of the config object (either
passed as an argument or loaded from `),fue=a("code"),yer=o("pretrained_model_name_or_path"),Ler=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mue=a("code"),xer=o("pretrained_model_name_or_path"),$er=o(":"),ker=l(),Kr=a("ul"),WF=a("li"),gue=a("strong"),Ser=o("data2vec-audio"),Rer=o(" \u2014 "),gz=a("a"),Per=o("Data2VecAudioForAudioFrameClassification"),Ber=o(" (Data2VecAudio model)"),Ier=l(),QF=a("li"),hue=a("strong"),Ner=o("unispeech-sat"),qer=o(" \u2014 "),hz=a("a"),jer=o("UniSpeechSatForAudioFrameClassification"),Der=o(" (UniSpeechSat model)"),Ger=l(),HF=a("li"),pue=a("strong"),Oer=o("wav2vec2"),Ver=o(" \u2014 "),pz=a("a"),Xer=o("Wav2Vec2ForAudioFrameClassification"),zer=o(" (Wav2Vec2 model)"),Wer=l(),UF=a("li"),_ue=a("strong"),Qer=o("wav2vec2-conformer"),Her=o(" \u2014 "),_z=a("a"),Uer=o("Wav2Vec2ConformerForAudioFrameClassification"),Jer=o(" (Wav2Vec2-Conformer model)"),Yer=l(),JF=a("li"),uue=a("strong"),Ker=o("wavlm"),Zer=o(" \u2014 "),uz=a("a"),eor=o("WavLMForAudioFrameClassification"),oor=o(" (WavLM model)"),ror=l(),YF=a("p"),tor=o("The model is set in evaluation mode by default using "),bue=a("code"),aor=o("model.eval()"),nor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=a("code"),sor=o("model.train()"),lor=l(),F(KF.$$.fragment),lje=l(),_d=a("h2"),ZF=a("a"),Fue=a("span"),F(wL.$$.fragment),ior=l(),Tue=a("span"),dor=o("AutoModelForCTC"),ije=l(),Vo=a("div"),F(AL.$$.fragment),cor=l(),ud=a("p"),mor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),bz=a("a"),gor=o("from_pretrained()"),hor=o(" class method or the "),vz=a("a"),por=o("from_config()"),_or=o(` class
method.`),uor=l(),yL=a("p"),bor=o("This class cannot be instantiated directly using "),Mue=a("code"),vor=o("__init__()"),For=o(" (throws an error)."),Tor=l(),vt=a("div"),F(LL.$$.fragment),Mor=l(),Eue=a("p"),Eor=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Cor=l(),bd=a("p"),wor=o(`Note:
Loading a model from its configuration file does `),Cue=a("strong"),Aor=o("not"),yor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=a("a"),Lor=o("from_pretrained()"),xor=o(" to load the model weights."),$or=l(),F(eT.$$.fragment),kor=l(),mo=a("div"),F(xL.$$.fragment),Sor=l(),wue=a("p"),Ror=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Por=l(),Va=a("p"),Bor=o("The model class to instantiate is selected based on the "),Aue=a("code"),Ior=o("model_type"),Nor=o(` property of the config object (either
passed as an argument or loaded from `),yue=a("code"),qor=o("pretrained_model_name_or_path"),jor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=a("code"),Dor=o("pretrained_model_name_or_path"),Gor=o(":"),Oor=l(),Se=a("ul"),oT=a("li"),xue=a("strong"),Vor=o("data2vec-audio"),Xor=o(" \u2014 "),Tz=a("a"),zor=o("Data2VecAudioForCTC"),Wor=o(" (Data2VecAudio model)"),Qor=l(),rT=a("li"),$ue=a("strong"),Hor=o("hubert"),Uor=o(" \u2014 "),Mz=a("a"),Jor=o("HubertForCTC"),Yor=o(" (Hubert model)"),Kor=l(),tT=a("li"),kue=a("strong"),Zor=o("sew"),err=o(" \u2014 "),Ez=a("a"),orr=o("SEWForCTC"),rrr=o(" (SEW model)"),trr=l(),aT=a("li"),Sue=a("strong"),arr=o("sew-d"),nrr=o(" \u2014 "),Cz=a("a"),srr=o("SEWDForCTC"),lrr=o(" (SEW-D model)"),irr=l(),nT=a("li"),Rue=a("strong"),drr=o("unispeech"),crr=o(" \u2014 "),wz=a("a"),frr=o("UniSpeechForCTC"),mrr=o(" (UniSpeech model)"),grr=l(),sT=a("li"),Pue=a("strong"),hrr=o("unispeech-sat"),prr=o(" \u2014 "),Az=a("a"),_rr=o("UniSpeechSatForCTC"),urr=o(" (UniSpeechSat model)"),brr=l(),lT=a("li"),Bue=a("strong"),vrr=o("wav2vec2"),Frr=o(" \u2014 "),yz=a("a"),Trr=o("Wav2Vec2ForCTC"),Mrr=o(" (Wav2Vec2 model)"),Err=l(),iT=a("li"),Iue=a("strong"),Crr=o("wav2vec2-conformer"),wrr=o(" \u2014 "),Lz=a("a"),Arr=o("Wav2Vec2ConformerForCTC"),yrr=o(" (Wav2Vec2-Conformer model)"),Lrr=l(),dT=a("li"),Nue=a("strong"),xrr=o("wavlm"),$rr=o(" \u2014 "),xz=a("a"),krr=o("WavLMForCTC"),Srr=o(" (WavLM model)"),Rrr=l(),cT=a("p"),Prr=o("The model is set in evaluation mode by default using "),que=a("code"),Brr=o("model.eval()"),Irr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jue=a("code"),Nrr=o("model.train()"),qrr=l(),F(fT.$$.fragment),dje=l(),vd=a("h2"),mT=a("a"),Due=a("span"),F($L.$$.fragment),jrr=l(),Gue=a("span"),Drr=o("AutoModelForSpeechSeq2Seq"),cje=l(),Xo=a("div"),F(kL.$$.fragment),Grr=l(),Fd=a("p"),Orr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),$z=a("a"),Vrr=o("from_pretrained()"),Xrr=o(" class method or the "),kz=a("a"),zrr=o("from_config()"),Wrr=o(` class
method.`),Qrr=l(),SL=a("p"),Hrr=o("This class cannot be instantiated directly using "),Oue=a("code"),Urr=o("__init__()"),Jrr=o(" (throws an error)."),Yrr=l(),Ft=a("div"),F(RL.$$.fragment),Krr=l(),Vue=a("p"),Zrr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),etr=l(),Td=a("p"),otr=o(`Note:
Loading a model from its configuration file does `),Xue=a("strong"),rtr=o("not"),ttr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=a("a"),atr=o("from_pretrained()"),ntr=o(" to load the model weights."),str=l(),F(gT.$$.fragment),ltr=l(),go=a("div"),F(PL.$$.fragment),itr=l(),zue=a("p"),dtr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ctr=l(),Xa=a("p"),ftr=o("The model class to instantiate is selected based on the "),Wue=a("code"),mtr=o("model_type"),gtr=o(` property of the config object (either
passed as an argument or loaded from `),Que=a("code"),htr=o("pretrained_model_name_or_path"),ptr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=a("code"),_tr=o("pretrained_model_name_or_path"),utr=o(":"),btr=l(),BL=a("ul"),hT=a("li"),Uue=a("strong"),vtr=o("speech-encoder-decoder"),Ftr=o(" \u2014 "),Rz=a("a"),Ttr=o("SpeechEncoderDecoderModel"),Mtr=o(" (Speech Encoder decoder model)"),Etr=l(),pT=a("li"),Jue=a("strong"),Ctr=o("speech_to_text"),wtr=o(" \u2014 "),Pz=a("a"),Atr=o("Speech2TextForConditionalGeneration"),ytr=o(" (Speech2Text model)"),Ltr=l(),_T=a("p"),xtr=o("The model is set in evaluation mode by default using "),Yue=a("code"),$tr=o("model.eval()"),ktr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kue=a("code"),Str=o("model.train()"),Rtr=l(),F(uT.$$.fragment),fje=l(),Md=a("h2"),bT=a("a"),Zue=a("span"),F(IL.$$.fragment),Ptr=l(),e2e=a("span"),Btr=o("AutoModelForAudioXVector"),mje=l(),zo=a("div"),F(NL.$$.fragment),Itr=l(),Ed=a("p"),Ntr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Bz=a("a"),qtr=o("from_pretrained()"),jtr=o(" class method or the "),Iz=a("a"),Dtr=o("from_config()"),Gtr=o(` class
method.`),Otr=l(),qL=a("p"),Vtr=o("This class cannot be instantiated directly using "),o2e=a("code"),Xtr=o("__init__()"),ztr=o(" (throws an error)."),Wtr=l(),Tt=a("div"),F(jL.$$.fragment),Qtr=l(),r2e=a("p"),Htr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Utr=l(),Cd=a("p"),Jtr=o(`Note:
Loading a model from its configuration file does `),t2e=a("strong"),Ytr=o("not"),Ktr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),Ztr=o("from_pretrained()"),ear=o(" to load the model weights."),oar=l(),F(vT.$$.fragment),rar=l(),ho=a("div"),F(DL.$$.fragment),tar=l(),a2e=a("p"),aar=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),nar=l(),za=a("p"),sar=o("The model class to instantiate is selected based on the "),n2e=a("code"),lar=o("model_type"),iar=o(` property of the config object (either
passed as an argument or loaded from `),s2e=a("code"),dar=o("pretrained_model_name_or_path"),car=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=a("code"),far=o("pretrained_model_name_or_path"),mar=o(":"),gar=l(),Zr=a("ul"),FT=a("li"),i2e=a("strong"),har=o("data2vec-audio"),par=o(" \u2014 "),qz=a("a"),_ar=o("Data2VecAudioForXVector"),uar=o(" (Data2VecAudio model)"),bar=l(),TT=a("li"),d2e=a("strong"),Far=o("unispeech-sat"),Tar=o(" \u2014 "),jz=a("a"),Mar=o("UniSpeechSatForXVector"),Ear=o(" (UniSpeechSat model)"),Car=l(),MT=a("li"),c2e=a("strong"),war=o("wav2vec2"),Aar=o(" \u2014 "),Dz=a("a"),yar=o("Wav2Vec2ForXVector"),Lar=o(" (Wav2Vec2 model)"),xar=l(),ET=a("li"),f2e=a("strong"),$ar=o("wav2vec2-conformer"),kar=o(" \u2014 "),Gz=a("a"),Sar=o("Wav2Vec2ConformerForXVector"),Rar=o(" (Wav2Vec2-Conformer model)"),Par=l(),CT=a("li"),m2e=a("strong"),Bar=o("wavlm"),Iar=o(" \u2014 "),Oz=a("a"),Nar=o("WavLMForXVector"),qar=o(" (WavLM model)"),jar=l(),wT=a("p"),Dar=o("The model is set in evaluation mode by default using "),g2e=a("code"),Gar=o("model.eval()"),Oar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h2e=a("code"),Var=o("model.train()"),Xar=l(),F(AT.$$.fragment),gje=l(),wd=a("h2"),yT=a("a"),p2e=a("span"),F(GL.$$.fragment),zar=l(),_2e=a("span"),War=o("AutoModelForMaskedImageModeling"),hje=l(),Wo=a("div"),F(OL.$$.fragment),Qar=l(),Ad=a("p"),Har=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Vz=a("a"),Uar=o("from_pretrained()"),Jar=o(" class method or the "),Xz=a("a"),Yar=o("from_config()"),Kar=o(` class
method.`),Zar=l(),VL=a("p"),enr=o("This class cannot be instantiated directly using "),u2e=a("code"),onr=o("__init__()"),rnr=o(" (throws an error)."),tnr=l(),Mt=a("div"),F(XL.$$.fragment),anr=l(),b2e=a("p"),nnr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),snr=l(),yd=a("p"),lnr=o(`Note:
Loading a model from its configuration file does `),v2e=a("strong"),inr=o("not"),dnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=a("a"),cnr=o("from_pretrained()"),fnr=o(" to load the model weights."),mnr=l(),F(LT.$$.fragment),gnr=l(),po=a("div"),F(zL.$$.fragment),hnr=l(),F2e=a("p"),pnr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),_nr=l(),Wa=a("p"),unr=o("The model class to instantiate is selected based on the "),T2e=a("code"),bnr=o("model_type"),vnr=o(` property of the config object (either
passed as an argument or loaded from `),M2e=a("code"),Fnr=o("pretrained_model_name_or_path"),Tnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=a("code"),Mnr=o("pretrained_model_name_or_path"),Enr=o(":"),Cnr=l(),Ld=a("ul"),xT=a("li"),C2e=a("strong"),wnr=o("deit"),Anr=o(" \u2014 "),Wz=a("a"),ynr=o("DeiTForMaskedImageModeling"),Lnr=o(" (DeiT model)"),xnr=l(),$T=a("li"),w2e=a("strong"),$nr=o("swin"),knr=o(" \u2014 "),Qz=a("a"),Snr=o("SwinForMaskedImageModeling"),Rnr=o(" (Swin model)"),Pnr=l(),kT=a("li"),A2e=a("strong"),Bnr=o("vit"),Inr=o(" \u2014 "),Hz=a("a"),Nnr=o("ViTForMaskedImageModeling"),qnr=o(" (ViT model)"),jnr=l(),ST=a("p"),Dnr=o("The model is set in evaluation mode by default using "),y2e=a("code"),Gnr=o("model.eval()"),Onr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L2e=a("code"),Vnr=o("model.train()"),Xnr=l(),F(RT.$$.fragment),pje=l(),xd=a("h2"),PT=a("a"),x2e=a("span"),F(WL.$$.fragment),znr=l(),$2e=a("span"),Wnr=o("AutoModelForObjectDetection"),_je=l(),Qo=a("div"),F(QL.$$.fragment),Qnr=l(),$d=a("p"),Hnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Uz=a("a"),Unr=o("from_pretrained()"),Jnr=o(" class method or the "),Jz=a("a"),Ynr=o("from_config()"),Knr=o(` class
method.`),Znr=l(),HL=a("p"),esr=o("This class cannot be instantiated directly using "),k2e=a("code"),osr=o("__init__()"),rsr=o(" (throws an error)."),tsr=l(),Et=a("div"),F(UL.$$.fragment),asr=l(),S2e=a("p"),nsr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),ssr=l(),kd=a("p"),lsr=o(`Note:
Loading a model from its configuration file does `),R2e=a("strong"),isr=o("not"),dsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=a("a"),csr=o("from_pretrained()"),fsr=o(" to load the model weights."),msr=l(),F(BT.$$.fragment),gsr=l(),_o=a("div"),F(JL.$$.fragment),hsr=l(),P2e=a("p"),psr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_sr=l(),Qa=a("p"),usr=o("The model class to instantiate is selected based on the "),B2e=a("code"),bsr=o("model_type"),vsr=o(` property of the config object (either
passed as an argument or loaded from `),I2e=a("code"),Fsr=o("pretrained_model_name_or_path"),Tsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=a("code"),Msr=o("pretrained_model_name_or_path"),Esr=o(":"),Csr=l(),YL=a("ul"),IT=a("li"),q2e=a("strong"),wsr=o("detr"),Asr=o(" \u2014 "),Kz=a("a"),ysr=o("DetrForObjectDetection"),Lsr=o(" (DETR model)"),xsr=l(),NT=a("li"),j2e=a("strong"),$sr=o("yolos"),ksr=o(" \u2014 "),Zz=a("a"),Ssr=o("YolosForObjectDetection"),Rsr=o(" (YOLOS model)"),Psr=l(),qT=a("p"),Bsr=o("The model is set in evaluation mode by default using "),D2e=a("code"),Isr=o("model.eval()"),Nsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G2e=a("code"),qsr=o("model.train()"),jsr=l(),F(jT.$$.fragment),uje=l(),Sd=a("h2"),DT=a("a"),O2e=a("span"),F(KL.$$.fragment),Dsr=l(),V2e=a("span"),Gsr=o("AutoModelForImageSegmentation"),bje=l(),Ho=a("div"),F(ZL.$$.fragment),Osr=l(),Rd=a("p"),Vsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),eW=a("a"),Xsr=o("from_pretrained()"),zsr=o(" class method or the "),oW=a("a"),Wsr=o("from_config()"),Qsr=o(` class
method.`),Hsr=l(),e8=a("p"),Usr=o("This class cannot be instantiated directly using "),X2e=a("code"),Jsr=o("__init__()"),Ysr=o(" (throws an error)."),Ksr=l(),Ct=a("div"),F(o8.$$.fragment),Zsr=l(),z2e=a("p"),elr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),olr=l(),Pd=a("p"),rlr=o(`Note:
Loading a model from its configuration file does `),W2e=a("strong"),tlr=o("not"),alr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=a("a"),nlr=o("from_pretrained()"),slr=o(" to load the model weights."),llr=l(),F(GT.$$.fragment),ilr=l(),uo=a("div"),F(r8.$$.fragment),dlr=l(),Q2e=a("p"),clr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),flr=l(),Ha=a("p"),mlr=o("The model class to instantiate is selected based on the "),H2e=a("code"),glr=o("model_type"),hlr=o(` property of the config object (either
passed as an argument or loaded from `),U2e=a("code"),plr=o("pretrained_model_name_or_path"),_lr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=a("code"),ulr=o("pretrained_model_name_or_path"),blr=o(":"),vlr=l(),Y2e=a("ul"),OT=a("li"),K2e=a("strong"),Flr=o("detr"),Tlr=o(" \u2014 "),tW=a("a"),Mlr=o("DetrForSegmentation"),Elr=o(" (DETR model)"),Clr=l(),VT=a("p"),wlr=o("The model is set in evaluation mode by default using "),Z2e=a("code"),Alr=o("model.eval()"),ylr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e1e=a("code"),Llr=o("model.train()"),xlr=l(),F(XT.$$.fragment),vje=l(),Bd=a("h2"),zT=a("a"),o1e=a("span"),F(t8.$$.fragment),$lr=l(),r1e=a("span"),klr=o("AutoModelForSemanticSegmentation"),Fje=l(),Uo=a("div"),F(a8.$$.fragment),Slr=l(),Id=a("p"),Rlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),aW=a("a"),Plr=o("from_pretrained()"),Blr=o(" class method or the "),nW=a("a"),Ilr=o("from_config()"),Nlr=o(` class
method.`),qlr=l(),n8=a("p"),jlr=o("This class cannot be instantiated directly using "),t1e=a("code"),Dlr=o("__init__()"),Glr=o(" (throws an error)."),Olr=l(),wt=a("div"),F(s8.$$.fragment),Vlr=l(),a1e=a("p"),Xlr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),zlr=l(),Nd=a("p"),Wlr=o(`Note:
Loading a model from its configuration file does `),n1e=a("strong"),Qlr=o("not"),Hlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=a("a"),Ulr=o("from_pretrained()"),Jlr=o(" to load the model weights."),Ylr=l(),F(WT.$$.fragment),Klr=l(),bo=a("div"),F(l8.$$.fragment),Zlr=l(),s1e=a("p"),eir=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),oir=l(),Ua=a("p"),rir=o("The model class to instantiate is selected based on the "),l1e=a("code"),tir=o("model_type"),air=o(` property of the config object (either
passed as an argument or loaded from `),i1e=a("code"),nir=o("pretrained_model_name_or_path"),sir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=a("code"),lir=o("pretrained_model_name_or_path"),iir=o(":"),dir=l(),Ja=a("ul"),QT=a("li"),c1e=a("strong"),cir=o("beit"),fir=o(" \u2014 "),lW=a("a"),mir=o("BeitForSemanticSegmentation"),gir=o(" (BEiT model)"),hir=l(),HT=a("li"),f1e=a("strong"),pir=o("data2vec-vision"),_ir=o(" \u2014 "),iW=a("a"),uir=o("Data2VecVisionForSemanticSegmentation"),bir=o(" (Data2VecVision model)"),vir=l(),UT=a("li"),m1e=a("strong"),Fir=o("dpt"),Tir=o(" \u2014 "),dW=a("a"),Mir=o("DPTForSemanticSegmentation"),Eir=o(" (DPT model)"),Cir=l(),JT=a("li"),g1e=a("strong"),wir=o("segformer"),Air=o(" \u2014 "),cW=a("a"),yir=o("SegformerForSemanticSegmentation"),Lir=o(" (SegFormer model)"),xir=l(),YT=a("p"),$ir=o("The model is set in evaluation mode by default using "),h1e=a("code"),kir=o("model.eval()"),Sir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=a("code"),Rir=o("model.train()"),Pir=l(),F(KT.$$.fragment),Tje=l(),qd=a("h2"),ZT=a("a"),_1e=a("span"),F(i8.$$.fragment),Bir=l(),u1e=a("span"),Iir=o("AutoModelForInstanceSegmentation"),Mje=l(),Jo=a("div"),F(d8.$$.fragment),Nir=l(),jd=a("p"),qir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),fW=a("a"),jir=o("from_pretrained()"),Dir=o(" class method or the "),mW=a("a"),Gir=o("from_config()"),Oir=o(` class
method.`),Vir=l(),c8=a("p"),Xir=o("This class cannot be instantiated directly using "),b1e=a("code"),zir=o("__init__()"),Wir=o(" (throws an error)."),Qir=l(),At=a("div"),F(f8.$$.fragment),Hir=l(),v1e=a("p"),Uir=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Jir=l(),Dd=a("p"),Yir=o(`Note:
Loading a model from its configuration file does `),F1e=a("strong"),Kir=o("not"),Zir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=a("a"),edr=o("from_pretrained()"),odr=o(" to load the model weights."),rdr=l(),F(e7.$$.fragment),tdr=l(),vo=a("div"),F(m8.$$.fragment),adr=l(),T1e=a("p"),ndr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),sdr=l(),Ya=a("p"),ldr=o("The model class to instantiate is selected based on the "),M1e=a("code"),idr=o("model_type"),ddr=o(` property of the config object (either
passed as an argument or loaded from `),E1e=a("code"),cdr=o("pretrained_model_name_or_path"),fdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=a("code"),mdr=o("pretrained_model_name_or_path"),gdr=o(":"),hdr=l(),w1e=a("ul"),o7=a("li"),A1e=a("strong"),pdr=o("maskformer"),_dr=o(" \u2014 "),hW=a("a"),udr=o("MaskFormerForInstanceSegmentation"),bdr=o(" (MaskFormer model)"),vdr=l(),r7=a("p"),Fdr=o("The model is set in evaluation mode by default using "),y1e=a("code"),Tdr=o("model.eval()"),Mdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L1e=a("code"),Edr=o("model.train()"),Cdr=l(),F(t7.$$.fragment),Eje=l(),Gd=a("h2"),a7=a("a"),x1e=a("span"),F(g8.$$.fragment),wdr=l(),$1e=a("span"),Adr=o("TFAutoModel"),Cje=l(),Yo=a("div"),F(h8.$$.fragment),ydr=l(),Od=a("p"),Ldr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pW=a("a"),xdr=o("from_pretrained()"),$dr=o(" class method or the "),_W=a("a"),kdr=o("from_config()"),Sdr=o(` class
method.`),Rdr=l(),p8=a("p"),Pdr=o("This class cannot be instantiated directly using "),k1e=a("code"),Bdr=o("__init__()"),Idr=o(" (throws an error)."),Ndr=l(),yt=a("div"),F(_8.$$.fragment),qdr=l(),S1e=a("p"),jdr=o("Instantiates one of the base model classes of the library from a configuration."),Ddr=l(),Vd=a("p"),Gdr=o(`Note:
Loading a model from its configuration file does `),R1e=a("strong"),Odr=o("not"),Vdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),Xdr=o("from_pretrained()"),zdr=o(" to load the model weights."),Wdr=l(),F(n7.$$.fragment),Qdr=l(),wr=a("div"),F(u8.$$.fragment),Hdr=l(),P1e=a("p"),Udr=o("Instantiate one of the base model classes of the library from a pretrained model."),Jdr=l(),Ka=a("p"),Ydr=o("The model class to instantiate is selected based on the "),B1e=a("code"),Kdr=o("model_type"),Zdr=o(` property of the config object (either
passed as an argument or loaded from `),I1e=a("code"),ecr=o("pretrained_model_name_or_path"),ocr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=a("code"),rcr=o("pretrained_model_name_or_path"),tcr=o(":"),acr=l(),q=a("ul"),s7=a("li"),q1e=a("strong"),ncr=o("albert"),scr=o(" \u2014 "),bW=a("a"),lcr=o("TFAlbertModel"),icr=o(" (ALBERT model)"),dcr=l(),l7=a("li"),j1e=a("strong"),ccr=o("bart"),fcr=o(" \u2014 "),vW=a("a"),mcr=o("TFBartModel"),gcr=o(" (BART model)"),hcr=l(),i7=a("li"),D1e=a("strong"),pcr=o("bert"),_cr=o(" \u2014 "),FW=a("a"),ucr=o("TFBertModel"),bcr=o(" (BERT model)"),vcr=l(),d7=a("li"),G1e=a("strong"),Fcr=o("blenderbot"),Tcr=o(" \u2014 "),TW=a("a"),Mcr=o("TFBlenderbotModel"),Ecr=o(" (Blenderbot model)"),Ccr=l(),c7=a("li"),O1e=a("strong"),wcr=o("blenderbot-small"),Acr=o(" \u2014 "),MW=a("a"),ycr=o("TFBlenderbotSmallModel"),Lcr=o(" (BlenderbotSmall model)"),xcr=l(),f7=a("li"),V1e=a("strong"),$cr=o("camembert"),kcr=o(" \u2014 "),EW=a("a"),Scr=o("TFCamembertModel"),Rcr=o(" (CamemBERT model)"),Pcr=l(),m7=a("li"),X1e=a("strong"),Bcr=o("clip"),Icr=o(" \u2014 "),CW=a("a"),Ncr=o("TFCLIPModel"),qcr=o(" (CLIP model)"),jcr=l(),g7=a("li"),z1e=a("strong"),Dcr=o("convbert"),Gcr=o(" \u2014 "),wW=a("a"),Ocr=o("TFConvBertModel"),Vcr=o(" (ConvBERT model)"),Xcr=l(),h7=a("li"),W1e=a("strong"),zcr=o("convnext"),Wcr=o(" \u2014 "),AW=a("a"),Qcr=o("TFConvNextModel"),Hcr=o(" (ConvNext model)"),Ucr=l(),p7=a("li"),Q1e=a("strong"),Jcr=o("ctrl"),Ycr=o(" \u2014 "),yW=a("a"),Kcr=o("TFCTRLModel"),Zcr=o(" (CTRL model)"),efr=l(),_7=a("li"),H1e=a("strong"),ofr=o("data2vec-vision"),rfr=o(" \u2014 "),LW=a("a"),tfr=o("TFData2VecVisionModel"),afr=o(" (Data2VecVision model)"),nfr=l(),u7=a("li"),U1e=a("strong"),sfr=o("deberta"),lfr=o(" \u2014 "),xW=a("a"),ifr=o("TFDebertaModel"),dfr=o(" (DeBERTa model)"),cfr=l(),b7=a("li"),J1e=a("strong"),ffr=o("deberta-v2"),mfr=o(" \u2014 "),$W=a("a"),gfr=o("TFDebertaV2Model"),hfr=o(" (DeBERTa-v2 model)"),pfr=l(),v7=a("li"),Y1e=a("strong"),_fr=o("distilbert"),ufr=o(" \u2014 "),kW=a("a"),bfr=o("TFDistilBertModel"),vfr=o(" (DistilBERT model)"),Ffr=l(),F7=a("li"),K1e=a("strong"),Tfr=o("dpr"),Mfr=o(" \u2014 "),SW=a("a"),Efr=o("TFDPRQuestionEncoder"),Cfr=o(" (DPR model)"),wfr=l(),T7=a("li"),Z1e=a("strong"),Afr=o("electra"),yfr=o(" \u2014 "),RW=a("a"),Lfr=o("TFElectraModel"),xfr=o(" (ELECTRA model)"),$fr=l(),M7=a("li"),ebe=a("strong"),kfr=o("flaubert"),Sfr=o(" \u2014 "),PW=a("a"),Rfr=o("TFFlaubertModel"),Pfr=o(" (FlauBERT model)"),Bfr=l(),Is=a("li"),obe=a("strong"),Ifr=o("funnel"),Nfr=o(" \u2014 "),BW=a("a"),qfr=o("TFFunnelModel"),jfr=o(" or "),IW=a("a"),Dfr=o("TFFunnelBaseModel"),Gfr=o(" (Funnel Transformer model)"),Ofr=l(),E7=a("li"),rbe=a("strong"),Vfr=o("gpt2"),Xfr=o(" \u2014 "),NW=a("a"),zfr=o("TFGPT2Model"),Wfr=o(" (OpenAI GPT-2 model)"),Qfr=l(),C7=a("li"),tbe=a("strong"),Hfr=o("gptj"),Ufr=o(" \u2014 "),qW=a("a"),Jfr=o("TFGPTJModel"),Yfr=o(" (GPT-J model)"),Kfr=l(),w7=a("li"),abe=a("strong"),Zfr=o("hubert"),emr=o(" \u2014 "),jW=a("a"),omr=o("TFHubertModel"),rmr=o(" (Hubert model)"),tmr=l(),A7=a("li"),nbe=a("strong"),amr=o("layoutlm"),nmr=o(" \u2014 "),DW=a("a"),smr=o("TFLayoutLMModel"),lmr=o(" (LayoutLM model)"),imr=l(),y7=a("li"),sbe=a("strong"),dmr=o("led"),cmr=o(" \u2014 "),GW=a("a"),fmr=o("TFLEDModel"),mmr=o(" (LED model)"),gmr=l(),L7=a("li"),lbe=a("strong"),hmr=o("longformer"),pmr=o(" \u2014 "),OW=a("a"),_mr=o("TFLongformerModel"),umr=o(" (Longformer model)"),bmr=l(),x7=a("li"),ibe=a("strong"),vmr=o("lxmert"),Fmr=o(" \u2014 "),VW=a("a"),Tmr=o("TFLxmertModel"),Mmr=o(" (LXMERT model)"),Emr=l(),$7=a("li"),dbe=a("strong"),Cmr=o("marian"),wmr=o(" \u2014 "),XW=a("a"),Amr=o("TFMarianModel"),ymr=o(" (Marian model)"),Lmr=l(),k7=a("li"),cbe=a("strong"),xmr=o("mbart"),$mr=o(" \u2014 "),zW=a("a"),kmr=o("TFMBartModel"),Smr=o(" (mBART model)"),Rmr=l(),S7=a("li"),fbe=a("strong"),Pmr=o("mobilebert"),Bmr=o(" \u2014 "),WW=a("a"),Imr=o("TFMobileBertModel"),Nmr=o(" (MobileBERT model)"),qmr=l(),R7=a("li"),mbe=a("strong"),jmr=o("mpnet"),Dmr=o(" \u2014 "),QW=a("a"),Gmr=o("TFMPNetModel"),Omr=o(" (MPNet model)"),Vmr=l(),P7=a("li"),gbe=a("strong"),Xmr=o("mt5"),zmr=o(" \u2014 "),HW=a("a"),Wmr=o("TFMT5Model"),Qmr=o(" (mT5 model)"),Hmr=l(),B7=a("li"),hbe=a("strong"),Umr=o("openai-gpt"),Jmr=o(" \u2014 "),UW=a("a"),Ymr=o("TFOpenAIGPTModel"),Kmr=o(" (OpenAI GPT model)"),Zmr=l(),I7=a("li"),pbe=a("strong"),egr=o("pegasus"),ogr=o(" \u2014 "),JW=a("a"),rgr=o("TFPegasusModel"),tgr=o(" (Pegasus model)"),agr=l(),N7=a("li"),_be=a("strong"),ngr=o("rembert"),sgr=o(" \u2014 "),YW=a("a"),lgr=o("TFRemBertModel"),igr=o(" (RemBERT model)"),dgr=l(),q7=a("li"),ube=a("strong"),cgr=o("roberta"),fgr=o(" \u2014 "),KW=a("a"),mgr=o("TFRobertaModel"),ggr=o(" (RoBERTa model)"),hgr=l(),j7=a("li"),bbe=a("strong"),pgr=o("roformer"),_gr=o(" \u2014 "),ZW=a("a"),ugr=o("TFRoFormerModel"),bgr=o(" (RoFormer model)"),vgr=l(),D7=a("li"),vbe=a("strong"),Fgr=o("speech_to_text"),Tgr=o(" \u2014 "),eQ=a("a"),Mgr=o("TFSpeech2TextModel"),Egr=o(" (Speech2Text model)"),Cgr=l(),G7=a("li"),Fbe=a("strong"),wgr=o("swin"),Agr=o(" \u2014 "),oQ=a("a"),ygr=o("TFSwinModel"),Lgr=o(" (Swin model)"),xgr=l(),O7=a("li"),Tbe=a("strong"),$gr=o("t5"),kgr=o(" \u2014 "),rQ=a("a"),Sgr=o("TFT5Model"),Rgr=o(" (T5 model)"),Pgr=l(),V7=a("li"),Mbe=a("strong"),Bgr=o("tapas"),Igr=o(" \u2014 "),tQ=a("a"),Ngr=o("TFTapasModel"),qgr=o(" (TAPAS model)"),jgr=l(),X7=a("li"),Ebe=a("strong"),Dgr=o("transfo-xl"),Ggr=o(" \u2014 "),aQ=a("a"),Ogr=o("TFTransfoXLModel"),Vgr=o(" (Transformer-XL model)"),Xgr=l(),z7=a("li"),Cbe=a("strong"),zgr=o("vit"),Wgr=o(" \u2014 "),nQ=a("a"),Qgr=o("TFViTModel"),Hgr=o(" (ViT model)"),Ugr=l(),W7=a("li"),wbe=a("strong"),Jgr=o("vit_mae"),Ygr=o(" \u2014 "),sQ=a("a"),Kgr=o("TFViTMAEModel"),Zgr=o(" (ViTMAE model)"),ehr=l(),Q7=a("li"),Abe=a("strong"),ohr=o("wav2vec2"),rhr=o(" \u2014 "),lQ=a("a"),thr=o("TFWav2Vec2Model"),ahr=o(" (Wav2Vec2 model)"),nhr=l(),H7=a("li"),ybe=a("strong"),shr=o("xlm"),lhr=o(" \u2014 "),iQ=a("a"),ihr=o("TFXLMModel"),dhr=o(" (XLM model)"),chr=l(),U7=a("li"),Lbe=a("strong"),fhr=o("xlm-roberta"),mhr=o(" \u2014 "),dQ=a("a"),ghr=o("TFXLMRobertaModel"),hhr=o(" (XLM-RoBERTa model)"),phr=l(),J7=a("li"),xbe=a("strong"),_hr=o("xlnet"),uhr=o(" \u2014 "),cQ=a("a"),bhr=o("TFXLNetModel"),vhr=o(" (XLNet model)"),Fhr=l(),F(Y7.$$.fragment),wje=l(),Xd=a("h2"),K7=a("a"),$be=a("span"),F(b8.$$.fragment),Thr=l(),kbe=a("span"),Mhr=o("TFAutoModelForPreTraining"),Aje=l(),Ko=a("div"),F(v8.$$.fragment),Ehr=l(),zd=a("p"),Chr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fQ=a("a"),whr=o("from_pretrained()"),Ahr=o(" class method or the "),mQ=a("a"),yhr=o("from_config()"),Lhr=o(` class
method.`),xhr=l(),F8=a("p"),$hr=o("This class cannot be instantiated directly using "),Sbe=a("code"),khr=o("__init__()"),Shr=o(" (throws an error)."),Rhr=l(),Lt=a("div"),F(T8.$$.fragment),Phr=l(),Rbe=a("p"),Bhr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ihr=l(),Wd=a("p"),Nhr=o(`Note:
Loading a model from its configuration file does `),Pbe=a("strong"),qhr=o("not"),jhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=a("a"),Dhr=o("from_pretrained()"),Ghr=o(" to load the model weights."),Ohr=l(),F(Z7.$$.fragment),Vhr=l(),Ar=a("div"),F(M8.$$.fragment),Xhr=l(),Bbe=a("p"),zhr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Whr=l(),Za=a("p"),Qhr=o("The model class to instantiate is selected based on the "),Ibe=a("code"),Hhr=o("model_type"),Uhr=o(` property of the config object (either
passed as an argument or loaded from `),Nbe=a("code"),Jhr=o("pretrained_model_name_or_path"),Yhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qbe=a("code"),Khr=o("pretrained_model_name_or_path"),Zhr=o(":"),epr=l(),se=a("ul"),eM=a("li"),jbe=a("strong"),opr=o("albert"),rpr=o(" \u2014 "),hQ=a("a"),tpr=o("TFAlbertForPreTraining"),apr=o(" (ALBERT model)"),npr=l(),oM=a("li"),Dbe=a("strong"),spr=o("bart"),lpr=o(" \u2014 "),pQ=a("a"),ipr=o("TFBartForConditionalGeneration"),dpr=o(" (BART model)"),cpr=l(),rM=a("li"),Gbe=a("strong"),fpr=o("bert"),mpr=o(" \u2014 "),_Q=a("a"),gpr=o("TFBertForPreTraining"),hpr=o(" (BERT model)"),ppr=l(),tM=a("li"),Obe=a("strong"),_pr=o("camembert"),upr=o(" \u2014 "),uQ=a("a"),bpr=o("TFCamembertForMaskedLM"),vpr=o(" (CamemBERT model)"),Fpr=l(),aM=a("li"),Vbe=a("strong"),Tpr=o("ctrl"),Mpr=o(" \u2014 "),bQ=a("a"),Epr=o("TFCTRLLMHeadModel"),Cpr=o(" (CTRL model)"),wpr=l(),nM=a("li"),Xbe=a("strong"),Apr=o("distilbert"),ypr=o(" \u2014 "),vQ=a("a"),Lpr=o("TFDistilBertForMaskedLM"),xpr=o(" (DistilBERT model)"),$pr=l(),sM=a("li"),zbe=a("strong"),kpr=o("electra"),Spr=o(" \u2014 "),FQ=a("a"),Rpr=o("TFElectraForPreTraining"),Ppr=o(" (ELECTRA model)"),Bpr=l(),lM=a("li"),Wbe=a("strong"),Ipr=o("flaubert"),Npr=o(" \u2014 "),TQ=a("a"),qpr=o("TFFlaubertWithLMHeadModel"),jpr=o(" (FlauBERT model)"),Dpr=l(),iM=a("li"),Qbe=a("strong"),Gpr=o("funnel"),Opr=o(" \u2014 "),MQ=a("a"),Vpr=o("TFFunnelForPreTraining"),Xpr=o(" (Funnel Transformer model)"),zpr=l(),dM=a("li"),Hbe=a("strong"),Wpr=o("gpt2"),Qpr=o(" \u2014 "),EQ=a("a"),Hpr=o("TFGPT2LMHeadModel"),Upr=o(" (OpenAI GPT-2 model)"),Jpr=l(),cM=a("li"),Ube=a("strong"),Ypr=o("layoutlm"),Kpr=o(" \u2014 "),CQ=a("a"),Zpr=o("TFLayoutLMForMaskedLM"),e_r=o(" (LayoutLM model)"),o_r=l(),fM=a("li"),Jbe=a("strong"),r_r=o("lxmert"),t_r=o(" \u2014 "),wQ=a("a"),a_r=o("TFLxmertForPreTraining"),n_r=o(" (LXMERT model)"),s_r=l(),mM=a("li"),Ybe=a("strong"),l_r=o("mobilebert"),i_r=o(" \u2014 "),AQ=a("a"),d_r=o("TFMobileBertForPreTraining"),c_r=o(" (MobileBERT model)"),f_r=l(),gM=a("li"),Kbe=a("strong"),m_r=o("mpnet"),g_r=o(" \u2014 "),yQ=a("a"),h_r=o("TFMPNetForMaskedLM"),p_r=o(" (MPNet model)"),__r=l(),hM=a("li"),Zbe=a("strong"),u_r=o("openai-gpt"),b_r=o(" \u2014 "),LQ=a("a"),v_r=o("TFOpenAIGPTLMHeadModel"),F_r=o(" (OpenAI GPT model)"),T_r=l(),pM=a("li"),eve=a("strong"),M_r=o("roberta"),E_r=o(" \u2014 "),xQ=a("a"),C_r=o("TFRobertaForMaskedLM"),w_r=o(" (RoBERTa model)"),A_r=l(),_M=a("li"),ove=a("strong"),y_r=o("t5"),L_r=o(" \u2014 "),$Q=a("a"),x_r=o("TFT5ForConditionalGeneration"),$_r=o(" (T5 model)"),k_r=l(),uM=a("li"),rve=a("strong"),S_r=o("tapas"),R_r=o(" \u2014 "),kQ=a("a"),P_r=o("TFTapasForMaskedLM"),B_r=o(" (TAPAS model)"),I_r=l(),bM=a("li"),tve=a("strong"),N_r=o("transfo-xl"),q_r=o(" \u2014 "),SQ=a("a"),j_r=o("TFTransfoXLLMHeadModel"),D_r=o(" (Transformer-XL model)"),G_r=l(),vM=a("li"),ave=a("strong"),O_r=o("vit_mae"),V_r=o(" \u2014 "),RQ=a("a"),X_r=o("TFViTMAEForPreTraining"),z_r=o(" (ViTMAE model)"),W_r=l(),FM=a("li"),nve=a("strong"),Q_r=o("xlm"),H_r=o(" \u2014 "),PQ=a("a"),U_r=o("TFXLMWithLMHeadModel"),J_r=o(" (XLM model)"),Y_r=l(),TM=a("li"),sve=a("strong"),K_r=o("xlm-roberta"),Z_r=o(" \u2014 "),BQ=a("a"),eur=o("TFXLMRobertaForMaskedLM"),our=o(" (XLM-RoBERTa model)"),rur=l(),MM=a("li"),lve=a("strong"),tur=o("xlnet"),aur=o(" \u2014 "),IQ=a("a"),nur=o("TFXLNetLMHeadModel"),sur=o(" (XLNet model)"),lur=l(),F(EM.$$.fragment),yje=l(),Qd=a("h2"),CM=a("a"),ive=a("span"),F(E8.$$.fragment),iur=l(),dve=a("span"),dur=o("TFAutoModelForCausalLM"),Lje=l(),Zo=a("div"),F(C8.$$.fragment),cur=l(),Hd=a("p"),fur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),NQ=a("a"),mur=o("from_pretrained()"),gur=o(" class method or the "),qQ=a("a"),hur=o("from_config()"),pur=o(` class
method.`),_ur=l(),w8=a("p"),uur=o("This class cannot be instantiated directly using "),cve=a("code"),bur=o("__init__()"),vur=o(" (throws an error)."),Fur=l(),xt=a("div"),F(A8.$$.fragment),Tur=l(),fve=a("p"),Mur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Eur=l(),Ud=a("p"),Cur=o(`Note:
Loading a model from its configuration file does `),mve=a("strong"),wur=o("not"),Aur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=a("a"),yur=o("from_pretrained()"),Lur=o(" to load the model weights."),xur=l(),F(wM.$$.fragment),$ur=l(),yr=a("div"),F(y8.$$.fragment),kur=l(),gve=a("p"),Sur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Rur=l(),en=a("p"),Pur=o("The model class to instantiate is selected based on the "),hve=a("code"),Bur=o("model_type"),Iur=o(` property of the config object (either
passed as an argument or loaded from `),pve=a("code"),Nur=o("pretrained_model_name_or_path"),qur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=a("code"),jur=o("pretrained_model_name_or_path"),Dur=o(":"),Gur=l(),Me=a("ul"),AM=a("li"),uve=a("strong"),Our=o("bert"),Vur=o(" \u2014 "),DQ=a("a"),Xur=o("TFBertLMHeadModel"),zur=o(" (BERT model)"),Wur=l(),yM=a("li"),bve=a("strong"),Qur=o("camembert"),Hur=o(" \u2014 "),GQ=a("a"),Uur=o("TFCamembertForCausalLM"),Jur=o(" (CamemBERT model)"),Yur=l(),LM=a("li"),vve=a("strong"),Kur=o("ctrl"),Zur=o(" \u2014 "),OQ=a("a"),e2r=o("TFCTRLLMHeadModel"),o2r=o(" (CTRL model)"),r2r=l(),xM=a("li"),Fve=a("strong"),t2r=o("gpt2"),a2r=o(" \u2014 "),VQ=a("a"),n2r=o("TFGPT2LMHeadModel"),s2r=o(" (OpenAI GPT-2 model)"),l2r=l(),$M=a("li"),Tve=a("strong"),i2r=o("gptj"),d2r=o(" \u2014 "),XQ=a("a"),c2r=o("TFGPTJForCausalLM"),f2r=o(" (GPT-J model)"),m2r=l(),kM=a("li"),Mve=a("strong"),g2r=o("openai-gpt"),h2r=o(" \u2014 "),zQ=a("a"),p2r=o("TFOpenAIGPTLMHeadModel"),_2r=o(" (OpenAI GPT model)"),u2r=l(),SM=a("li"),Eve=a("strong"),b2r=o("rembert"),v2r=o(" \u2014 "),WQ=a("a"),F2r=o("TFRemBertForCausalLM"),T2r=o(" (RemBERT model)"),M2r=l(),RM=a("li"),Cve=a("strong"),E2r=o("roberta"),C2r=o(" \u2014 "),QQ=a("a"),w2r=o("TFRobertaForCausalLM"),A2r=o(" (RoBERTa model)"),y2r=l(),PM=a("li"),wve=a("strong"),L2r=o("roformer"),x2r=o(" \u2014 "),HQ=a("a"),$2r=o("TFRoFormerForCausalLM"),k2r=o(" (RoFormer model)"),S2r=l(),BM=a("li"),Ave=a("strong"),R2r=o("transfo-xl"),P2r=o(" \u2014 "),UQ=a("a"),B2r=o("TFTransfoXLLMHeadModel"),I2r=o(" (Transformer-XL model)"),N2r=l(),IM=a("li"),yve=a("strong"),q2r=o("xlm"),j2r=o(" \u2014 "),JQ=a("a"),D2r=o("TFXLMWithLMHeadModel"),G2r=o(" (XLM model)"),O2r=l(),NM=a("li"),Lve=a("strong"),V2r=o("xlnet"),X2r=o(" \u2014 "),YQ=a("a"),z2r=o("TFXLNetLMHeadModel"),W2r=o(" (XLNet model)"),Q2r=l(),F(qM.$$.fragment),xje=l(),Jd=a("h2"),jM=a("a"),xve=a("span"),F(L8.$$.fragment),H2r=l(),$ve=a("span"),U2r=o("TFAutoModelForImageClassification"),$je=l(),er=a("div"),F(x8.$$.fragment),J2r=l(),Yd=a("p"),Y2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KQ=a("a"),K2r=o("from_pretrained()"),Z2r=o(" class method or the "),ZQ=a("a"),e1r=o("from_config()"),o1r=o(` class
method.`),r1r=l(),$8=a("p"),t1r=o("This class cannot be instantiated directly using "),kve=a("code"),a1r=o("__init__()"),n1r=o(" (throws an error)."),s1r=l(),$t=a("div"),F(k8.$$.fragment),l1r=l(),Sve=a("p"),i1r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),d1r=l(),Kd=a("p"),c1r=o(`Note:
Loading a model from its configuration file does `),Rve=a("strong"),f1r=o("not"),m1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=a("a"),g1r=o("from_pretrained()"),h1r=o(" to load the model weights."),p1r=l(),F(DM.$$.fragment),_1r=l(),Lr=a("div"),F(S8.$$.fragment),u1r=l(),Pve=a("p"),b1r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),v1r=l(),on=a("p"),F1r=o("The model class to instantiate is selected based on the "),Bve=a("code"),T1r=o("model_type"),M1r=o(` property of the config object (either
passed as an argument or loaded from `),Ive=a("code"),E1r=o("pretrained_model_name_or_path"),C1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=a("code"),w1r=o("pretrained_model_name_or_path"),A1r=o(":"),y1r=l(),rn=a("ul"),GM=a("li"),qve=a("strong"),L1r=o("convnext"),x1r=o(" \u2014 "),oH=a("a"),$1r=o("TFConvNextForImageClassification"),k1r=o(" (ConvNext model)"),S1r=l(),OM=a("li"),jve=a("strong"),R1r=o("data2vec-vision"),P1r=o(" \u2014 "),rH=a("a"),B1r=o("TFData2VecVisionForImageClassification"),I1r=o(" (Data2VecVision model)"),N1r=l(),VM=a("li"),Dve=a("strong"),q1r=o("swin"),j1r=o(" \u2014 "),tH=a("a"),D1r=o("TFSwinForImageClassification"),G1r=o(" (Swin model)"),O1r=l(),XM=a("li"),Gve=a("strong"),V1r=o("vit"),X1r=o(" \u2014 "),aH=a("a"),z1r=o("TFViTForImageClassification"),W1r=o(" (ViT model)"),Q1r=l(),F(zM.$$.fragment),kje=l(),Zd=a("h2"),WM=a("a"),Ove=a("span"),F(R8.$$.fragment),H1r=l(),Vve=a("span"),U1r=o("TFAutoModelForMaskedLM"),Sje=l(),or=a("div"),F(P8.$$.fragment),J1r=l(),ec=a("p"),Y1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nH=a("a"),K1r=o("from_pretrained()"),Z1r=o(" class method or the "),sH=a("a"),ebr=o("from_config()"),obr=o(` class
method.`),rbr=l(),B8=a("p"),tbr=o("This class cannot be instantiated directly using "),Xve=a("code"),abr=o("__init__()"),nbr=o(" (throws an error)."),sbr=l(),kt=a("div"),F(I8.$$.fragment),lbr=l(),zve=a("p"),ibr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),dbr=l(),oc=a("p"),cbr=o(`Note:
Loading a model from its configuration file does `),Wve=a("strong"),fbr=o("not"),mbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),gbr=o("from_pretrained()"),hbr=o(" to load the model weights."),pbr=l(),F(QM.$$.fragment),_br=l(),xr=a("div"),F(N8.$$.fragment),ubr=l(),Qve=a("p"),bbr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vbr=l(),tn=a("p"),Fbr=o("The model class to instantiate is selected based on the "),Hve=a("code"),Tbr=o("model_type"),Mbr=o(` property of the config object (either
passed as an argument or loaded from `),Uve=a("code"),Ebr=o("pretrained_model_name_or_path"),Cbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=a("code"),wbr=o("pretrained_model_name_or_path"),Abr=o(":"),ybr=l(),ie=a("ul"),HM=a("li"),Yve=a("strong"),Lbr=o("albert"),xbr=o(" \u2014 "),iH=a("a"),$br=o("TFAlbertForMaskedLM"),kbr=o(" (ALBERT model)"),Sbr=l(),UM=a("li"),Kve=a("strong"),Rbr=o("bert"),Pbr=o(" \u2014 "),dH=a("a"),Bbr=o("TFBertForMaskedLM"),Ibr=o(" (BERT model)"),Nbr=l(),JM=a("li"),Zve=a("strong"),qbr=o("camembert"),jbr=o(" \u2014 "),cH=a("a"),Dbr=o("TFCamembertForMaskedLM"),Gbr=o(" (CamemBERT model)"),Obr=l(),YM=a("li"),e0e=a("strong"),Vbr=o("convbert"),Xbr=o(" \u2014 "),fH=a("a"),zbr=o("TFConvBertForMaskedLM"),Wbr=o(" (ConvBERT model)"),Qbr=l(),KM=a("li"),o0e=a("strong"),Hbr=o("deberta"),Ubr=o(" \u2014 "),mH=a("a"),Jbr=o("TFDebertaForMaskedLM"),Ybr=o(" (DeBERTa model)"),Kbr=l(),ZM=a("li"),r0e=a("strong"),Zbr=o("deberta-v2"),evr=o(" \u2014 "),gH=a("a"),ovr=o("TFDebertaV2ForMaskedLM"),rvr=o(" (DeBERTa-v2 model)"),tvr=l(),e4=a("li"),t0e=a("strong"),avr=o("distilbert"),nvr=o(" \u2014 "),hH=a("a"),svr=o("TFDistilBertForMaskedLM"),lvr=o(" (DistilBERT model)"),ivr=l(),o4=a("li"),a0e=a("strong"),dvr=o("electra"),cvr=o(" \u2014 "),pH=a("a"),fvr=o("TFElectraForMaskedLM"),mvr=o(" (ELECTRA model)"),gvr=l(),r4=a("li"),n0e=a("strong"),hvr=o("flaubert"),pvr=o(" \u2014 "),_H=a("a"),_vr=o("TFFlaubertWithLMHeadModel"),uvr=o(" (FlauBERT model)"),bvr=l(),t4=a("li"),s0e=a("strong"),vvr=o("funnel"),Fvr=o(" \u2014 "),uH=a("a"),Tvr=o("TFFunnelForMaskedLM"),Mvr=o(" (Funnel Transformer model)"),Evr=l(),a4=a("li"),l0e=a("strong"),Cvr=o("layoutlm"),wvr=o(" \u2014 "),bH=a("a"),Avr=o("TFLayoutLMForMaskedLM"),yvr=o(" (LayoutLM model)"),Lvr=l(),n4=a("li"),i0e=a("strong"),xvr=o("longformer"),$vr=o(" \u2014 "),vH=a("a"),kvr=o("TFLongformerForMaskedLM"),Svr=o(" (Longformer model)"),Rvr=l(),s4=a("li"),d0e=a("strong"),Pvr=o("mobilebert"),Bvr=o(" \u2014 "),FH=a("a"),Ivr=o("TFMobileBertForMaskedLM"),Nvr=o(" (MobileBERT model)"),qvr=l(),l4=a("li"),c0e=a("strong"),jvr=o("mpnet"),Dvr=o(" \u2014 "),TH=a("a"),Gvr=o("TFMPNetForMaskedLM"),Ovr=o(" (MPNet model)"),Vvr=l(),i4=a("li"),f0e=a("strong"),Xvr=o("rembert"),zvr=o(" \u2014 "),MH=a("a"),Wvr=o("TFRemBertForMaskedLM"),Qvr=o(" (RemBERT model)"),Hvr=l(),d4=a("li"),m0e=a("strong"),Uvr=o("roberta"),Jvr=o(" \u2014 "),EH=a("a"),Yvr=o("TFRobertaForMaskedLM"),Kvr=o(" (RoBERTa model)"),Zvr=l(),c4=a("li"),g0e=a("strong"),e0r=o("roformer"),o0r=o(" \u2014 "),CH=a("a"),r0r=o("TFRoFormerForMaskedLM"),t0r=o(" (RoFormer model)"),a0r=l(),f4=a("li"),h0e=a("strong"),n0r=o("tapas"),s0r=o(" \u2014 "),wH=a("a"),l0r=o("TFTapasForMaskedLM"),i0r=o(" (TAPAS model)"),d0r=l(),m4=a("li"),p0e=a("strong"),c0r=o("xlm"),f0r=o(" \u2014 "),AH=a("a"),m0r=o("TFXLMWithLMHeadModel"),g0r=o(" (XLM model)"),h0r=l(),g4=a("li"),_0e=a("strong"),p0r=o("xlm-roberta"),_0r=o(" \u2014 "),yH=a("a"),u0r=o("TFXLMRobertaForMaskedLM"),b0r=o(" (XLM-RoBERTa model)"),v0r=l(),F(h4.$$.fragment),Rje=l(),rc=a("h2"),p4=a("a"),u0e=a("span"),F(q8.$$.fragment),F0r=l(),b0e=a("span"),T0r=o("TFAutoModelForSeq2SeqLM"),Pje=l(),rr=a("div"),F(j8.$$.fragment),M0r=l(),tc=a("p"),E0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LH=a("a"),C0r=o("from_pretrained()"),w0r=o(" class method or the "),xH=a("a"),A0r=o("from_config()"),y0r=o(` class
method.`),L0r=l(),D8=a("p"),x0r=o("This class cannot be instantiated directly using "),v0e=a("code"),$0r=o("__init__()"),k0r=o(" (throws an error)."),S0r=l(),St=a("div"),F(G8.$$.fragment),R0r=l(),F0e=a("p"),P0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),B0r=l(),ac=a("p"),I0r=o(`Note:
Loading a model from its configuration file does `),T0e=a("strong"),N0r=o("not"),q0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),j0r=o("from_pretrained()"),D0r=o(" to load the model weights."),G0r=l(),F(_4.$$.fragment),O0r=l(),$r=a("div"),F(O8.$$.fragment),V0r=l(),M0e=a("p"),X0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),z0r=l(),an=a("p"),W0r=o("The model class to instantiate is selected based on the "),E0e=a("code"),Q0r=o("model_type"),H0r=o(` property of the config object (either
passed as an argument or loaded from `),C0e=a("code"),U0r=o("pretrained_model_name_or_path"),J0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w0e=a("code"),Y0r=o("pretrained_model_name_or_path"),K0r=o(":"),Z0r=l(),ye=a("ul"),u4=a("li"),A0e=a("strong"),eFr=o("bart"),oFr=o(" \u2014 "),kH=a("a"),rFr=o("TFBartForConditionalGeneration"),tFr=o(" (BART model)"),aFr=l(),b4=a("li"),y0e=a("strong"),nFr=o("blenderbot"),sFr=o(" \u2014 "),SH=a("a"),lFr=o("TFBlenderbotForConditionalGeneration"),iFr=o(" (Blenderbot model)"),dFr=l(),v4=a("li"),L0e=a("strong"),cFr=o("blenderbot-small"),fFr=o(" \u2014 "),RH=a("a"),mFr=o("TFBlenderbotSmallForConditionalGeneration"),gFr=o(" (BlenderbotSmall model)"),hFr=l(),F4=a("li"),x0e=a("strong"),pFr=o("encoder-decoder"),_Fr=o(" \u2014 "),PH=a("a"),uFr=o("TFEncoderDecoderModel"),bFr=o(" (Encoder decoder model)"),vFr=l(),T4=a("li"),$0e=a("strong"),FFr=o("led"),TFr=o(" \u2014 "),BH=a("a"),MFr=o("TFLEDForConditionalGeneration"),EFr=o(" (LED model)"),CFr=l(),M4=a("li"),k0e=a("strong"),wFr=o("marian"),AFr=o(" \u2014 "),IH=a("a"),yFr=o("TFMarianMTModel"),LFr=o(" (Marian model)"),xFr=l(),E4=a("li"),S0e=a("strong"),$Fr=o("mbart"),kFr=o(" \u2014 "),NH=a("a"),SFr=o("TFMBartForConditionalGeneration"),RFr=o(" (mBART model)"),PFr=l(),C4=a("li"),R0e=a("strong"),BFr=o("mt5"),IFr=o(" \u2014 "),qH=a("a"),NFr=o("TFMT5ForConditionalGeneration"),qFr=o(" (mT5 model)"),jFr=l(),w4=a("li"),P0e=a("strong"),DFr=o("pegasus"),GFr=o(" \u2014 "),jH=a("a"),OFr=o("TFPegasusForConditionalGeneration"),VFr=o(" (Pegasus model)"),XFr=l(),A4=a("li"),B0e=a("strong"),zFr=o("t5"),WFr=o(" \u2014 "),DH=a("a"),QFr=o("TFT5ForConditionalGeneration"),HFr=o(" (T5 model)"),UFr=l(),F(y4.$$.fragment),Bje=l(),nc=a("h2"),L4=a("a"),I0e=a("span"),F(V8.$$.fragment),JFr=l(),N0e=a("span"),YFr=o("TFAutoModelForSequenceClassification"),Ije=l(),tr=a("div"),F(X8.$$.fragment),KFr=l(),sc=a("p"),ZFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GH=a("a"),eTr=o("from_pretrained()"),oTr=o(" class method or the "),OH=a("a"),rTr=o("from_config()"),tTr=o(` class
method.`),aTr=l(),z8=a("p"),nTr=o("This class cannot be instantiated directly using "),q0e=a("code"),sTr=o("__init__()"),lTr=o(" (throws an error)."),iTr=l(),Rt=a("div"),F(W8.$$.fragment),dTr=l(),j0e=a("p"),cTr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),fTr=l(),lc=a("p"),mTr=o(`Note:
Loading a model from its configuration file does `),D0e=a("strong"),gTr=o("not"),hTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=a("a"),pTr=o("from_pretrained()"),_Tr=o(" to load the model weights."),uTr=l(),F(x4.$$.fragment),bTr=l(),kr=a("div"),F(Q8.$$.fragment),vTr=l(),G0e=a("p"),FTr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),TTr=l(),nn=a("p"),MTr=o("The model class to instantiate is selected based on the "),O0e=a("code"),ETr=o("model_type"),CTr=o(` property of the config object (either
passed as an argument or loaded from `),V0e=a("code"),wTr=o("pretrained_model_name_or_path"),ATr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X0e=a("code"),yTr=o("pretrained_model_name_or_path"),LTr=o(":"),xTr=l(),oe=a("ul"),$4=a("li"),z0e=a("strong"),$Tr=o("albert"),kTr=o(" \u2014 "),XH=a("a"),STr=o("TFAlbertForSequenceClassification"),RTr=o(" (ALBERT model)"),PTr=l(),k4=a("li"),W0e=a("strong"),BTr=o("bert"),ITr=o(" \u2014 "),zH=a("a"),NTr=o("TFBertForSequenceClassification"),qTr=o(" (BERT model)"),jTr=l(),S4=a("li"),Q0e=a("strong"),DTr=o("camembert"),GTr=o(" \u2014 "),WH=a("a"),OTr=o("TFCamembertForSequenceClassification"),VTr=o(" (CamemBERT model)"),XTr=l(),R4=a("li"),H0e=a("strong"),zTr=o("convbert"),WTr=o(" \u2014 "),QH=a("a"),QTr=o("TFConvBertForSequenceClassification"),HTr=o(" (ConvBERT model)"),UTr=l(),P4=a("li"),U0e=a("strong"),JTr=o("ctrl"),YTr=o(" \u2014 "),HH=a("a"),KTr=o("TFCTRLForSequenceClassification"),ZTr=o(" (CTRL model)"),e7r=l(),B4=a("li"),J0e=a("strong"),o7r=o("deberta"),r7r=o(" \u2014 "),UH=a("a"),t7r=o("TFDebertaForSequenceClassification"),a7r=o(" (DeBERTa model)"),n7r=l(),I4=a("li"),Y0e=a("strong"),s7r=o("deberta-v2"),l7r=o(" \u2014 "),JH=a("a"),i7r=o("TFDebertaV2ForSequenceClassification"),d7r=o(" (DeBERTa-v2 model)"),c7r=l(),N4=a("li"),K0e=a("strong"),f7r=o("distilbert"),m7r=o(" \u2014 "),YH=a("a"),g7r=o("TFDistilBertForSequenceClassification"),h7r=o(" (DistilBERT model)"),p7r=l(),q4=a("li"),Z0e=a("strong"),_7r=o("electra"),u7r=o(" \u2014 "),KH=a("a"),b7r=o("TFElectraForSequenceClassification"),v7r=o(" (ELECTRA model)"),F7r=l(),j4=a("li"),eFe=a("strong"),T7r=o("flaubert"),M7r=o(" \u2014 "),ZH=a("a"),E7r=o("TFFlaubertForSequenceClassification"),C7r=o(" (FlauBERT model)"),w7r=l(),D4=a("li"),oFe=a("strong"),A7r=o("funnel"),y7r=o(" \u2014 "),eU=a("a"),L7r=o("TFFunnelForSequenceClassification"),x7r=o(" (Funnel Transformer model)"),$7r=l(),G4=a("li"),rFe=a("strong"),k7r=o("gpt2"),S7r=o(" \u2014 "),oU=a("a"),R7r=o("TFGPT2ForSequenceClassification"),P7r=o(" (OpenAI GPT-2 model)"),B7r=l(),O4=a("li"),tFe=a("strong"),I7r=o("gptj"),N7r=o(" \u2014 "),rU=a("a"),q7r=o("TFGPTJForSequenceClassification"),j7r=o(" (GPT-J model)"),D7r=l(),V4=a("li"),aFe=a("strong"),G7r=o("layoutlm"),O7r=o(" \u2014 "),tU=a("a"),V7r=o("TFLayoutLMForSequenceClassification"),X7r=o(" (LayoutLM model)"),z7r=l(),X4=a("li"),nFe=a("strong"),W7r=o("longformer"),Q7r=o(" \u2014 "),aU=a("a"),H7r=o("TFLongformerForSequenceClassification"),U7r=o(" (Longformer model)"),J7r=l(),z4=a("li"),sFe=a("strong"),Y7r=o("mobilebert"),K7r=o(" \u2014 "),nU=a("a"),Z7r=o("TFMobileBertForSequenceClassification"),eMr=o(" (MobileBERT model)"),oMr=l(),W4=a("li"),lFe=a("strong"),rMr=o("mpnet"),tMr=o(" \u2014 "),sU=a("a"),aMr=o("TFMPNetForSequenceClassification"),nMr=o(" (MPNet model)"),sMr=l(),Q4=a("li"),iFe=a("strong"),lMr=o("openai-gpt"),iMr=o(" \u2014 "),lU=a("a"),dMr=o("TFOpenAIGPTForSequenceClassification"),cMr=o(" (OpenAI GPT model)"),fMr=l(),H4=a("li"),dFe=a("strong"),mMr=o("rembert"),gMr=o(" \u2014 "),iU=a("a"),hMr=o("TFRemBertForSequenceClassification"),pMr=o(" (RemBERT model)"),_Mr=l(),U4=a("li"),cFe=a("strong"),uMr=o("roberta"),bMr=o(" \u2014 "),dU=a("a"),vMr=o("TFRobertaForSequenceClassification"),FMr=o(" (RoBERTa model)"),TMr=l(),J4=a("li"),fFe=a("strong"),MMr=o("roformer"),EMr=o(" \u2014 "),cU=a("a"),CMr=o("TFRoFormerForSequenceClassification"),wMr=o(" (RoFormer model)"),AMr=l(),Y4=a("li"),mFe=a("strong"),yMr=o("tapas"),LMr=o(" \u2014 "),fU=a("a"),xMr=o("TFTapasForSequenceClassification"),$Mr=o(" (TAPAS model)"),kMr=l(),K4=a("li"),gFe=a("strong"),SMr=o("transfo-xl"),RMr=o(" \u2014 "),mU=a("a"),PMr=o("TFTransfoXLForSequenceClassification"),BMr=o(" (Transformer-XL model)"),IMr=l(),Z4=a("li"),hFe=a("strong"),NMr=o("xlm"),qMr=o(" \u2014 "),gU=a("a"),jMr=o("TFXLMForSequenceClassification"),DMr=o(" (XLM model)"),GMr=l(),eE=a("li"),pFe=a("strong"),OMr=o("xlm-roberta"),VMr=o(" \u2014 "),hU=a("a"),XMr=o("TFXLMRobertaForSequenceClassification"),zMr=o(" (XLM-RoBERTa model)"),WMr=l(),oE=a("li"),_Fe=a("strong"),QMr=o("xlnet"),HMr=o(" \u2014 "),pU=a("a"),UMr=o("TFXLNetForSequenceClassification"),JMr=o(" (XLNet model)"),YMr=l(),F(rE.$$.fragment),Nje=l(),ic=a("h2"),tE=a("a"),uFe=a("span"),F(H8.$$.fragment),KMr=l(),bFe=a("span"),ZMr=o("TFAutoModelForMultipleChoice"),qje=l(),ar=a("div"),F(U8.$$.fragment),e4r=l(),dc=a("p"),o4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_U=a("a"),r4r=o("from_pretrained()"),t4r=o(" class method or the "),uU=a("a"),a4r=o("from_config()"),n4r=o(` class
method.`),s4r=l(),J8=a("p"),l4r=o("This class cannot be instantiated directly using "),vFe=a("code"),i4r=o("__init__()"),d4r=o(" (throws an error)."),c4r=l(),Pt=a("div"),F(Y8.$$.fragment),f4r=l(),FFe=a("p"),m4r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),g4r=l(),cc=a("p"),h4r=o(`Note:
Loading a model from its configuration file does `),TFe=a("strong"),p4r=o("not"),_4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=a("a"),u4r=o("from_pretrained()"),b4r=o(" to load the model weights."),v4r=l(),F(aE.$$.fragment),F4r=l(),Sr=a("div"),F(K8.$$.fragment),T4r=l(),MFe=a("p"),M4r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),E4r=l(),sn=a("p"),C4r=o("The model class to instantiate is selected based on the "),EFe=a("code"),w4r=o("model_type"),A4r=o(` property of the config object (either
passed as an argument or loaded from `),CFe=a("code"),y4r=o("pretrained_model_name_or_path"),L4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=a("code"),x4r=o("pretrained_model_name_or_path"),$4r=o(":"),k4r=l(),pe=a("ul"),nE=a("li"),AFe=a("strong"),S4r=o("albert"),R4r=o(" \u2014 "),vU=a("a"),P4r=o("TFAlbertForMultipleChoice"),B4r=o(" (ALBERT model)"),I4r=l(),sE=a("li"),yFe=a("strong"),N4r=o("bert"),q4r=o(" \u2014 "),FU=a("a"),j4r=o("TFBertForMultipleChoice"),D4r=o(" (BERT model)"),G4r=l(),lE=a("li"),LFe=a("strong"),O4r=o("camembert"),V4r=o(" \u2014 "),TU=a("a"),X4r=o("TFCamembertForMultipleChoice"),z4r=o(" (CamemBERT model)"),W4r=l(),iE=a("li"),xFe=a("strong"),Q4r=o("convbert"),H4r=o(" \u2014 "),MU=a("a"),U4r=o("TFConvBertForMultipleChoice"),J4r=o(" (ConvBERT model)"),Y4r=l(),dE=a("li"),$Fe=a("strong"),K4r=o("distilbert"),Z4r=o(" \u2014 "),EU=a("a"),eEr=o("TFDistilBertForMultipleChoice"),oEr=o(" (DistilBERT model)"),rEr=l(),cE=a("li"),kFe=a("strong"),tEr=o("electra"),aEr=o(" \u2014 "),CU=a("a"),nEr=o("TFElectraForMultipleChoice"),sEr=o(" (ELECTRA model)"),lEr=l(),fE=a("li"),SFe=a("strong"),iEr=o("flaubert"),dEr=o(" \u2014 "),wU=a("a"),cEr=o("TFFlaubertForMultipleChoice"),fEr=o(" (FlauBERT model)"),mEr=l(),mE=a("li"),RFe=a("strong"),gEr=o("funnel"),hEr=o(" \u2014 "),AU=a("a"),pEr=o("TFFunnelForMultipleChoice"),_Er=o(" (Funnel Transformer model)"),uEr=l(),gE=a("li"),PFe=a("strong"),bEr=o("longformer"),vEr=o(" \u2014 "),yU=a("a"),FEr=o("TFLongformerForMultipleChoice"),TEr=o(" (Longformer model)"),MEr=l(),hE=a("li"),BFe=a("strong"),EEr=o("mobilebert"),CEr=o(" \u2014 "),LU=a("a"),wEr=o("TFMobileBertForMultipleChoice"),AEr=o(" (MobileBERT model)"),yEr=l(),pE=a("li"),IFe=a("strong"),LEr=o("mpnet"),xEr=o(" \u2014 "),xU=a("a"),$Er=o("TFMPNetForMultipleChoice"),kEr=o(" (MPNet model)"),SEr=l(),_E=a("li"),NFe=a("strong"),REr=o("rembert"),PEr=o(" \u2014 "),$U=a("a"),BEr=o("TFRemBertForMultipleChoice"),IEr=o(" (RemBERT model)"),NEr=l(),uE=a("li"),qFe=a("strong"),qEr=o("roberta"),jEr=o(" \u2014 "),kU=a("a"),DEr=o("TFRobertaForMultipleChoice"),GEr=o(" (RoBERTa model)"),OEr=l(),bE=a("li"),jFe=a("strong"),VEr=o("roformer"),XEr=o(" \u2014 "),SU=a("a"),zEr=o("TFRoFormerForMultipleChoice"),WEr=o(" (RoFormer model)"),QEr=l(),vE=a("li"),DFe=a("strong"),HEr=o("xlm"),UEr=o(" \u2014 "),RU=a("a"),JEr=o("TFXLMForMultipleChoice"),YEr=o(" (XLM model)"),KEr=l(),FE=a("li"),GFe=a("strong"),ZEr=o("xlm-roberta"),eCr=o(" \u2014 "),PU=a("a"),oCr=o("TFXLMRobertaForMultipleChoice"),rCr=o(" (XLM-RoBERTa model)"),tCr=l(),TE=a("li"),OFe=a("strong"),aCr=o("xlnet"),nCr=o(" \u2014 "),BU=a("a"),sCr=o("TFXLNetForMultipleChoice"),lCr=o(" (XLNet model)"),iCr=l(),F(ME.$$.fragment),jje=l(),fc=a("h2"),EE=a("a"),VFe=a("span"),F(Z8.$$.fragment),dCr=l(),XFe=a("span"),cCr=o("TFAutoModelForNextSentencePrediction"),Dje=l(),nr=a("div"),F(e9.$$.fragment),fCr=l(),mc=a("p"),mCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IU=a("a"),gCr=o("from_pretrained()"),hCr=o(" class method or the "),NU=a("a"),pCr=o("from_config()"),_Cr=o(` class
method.`),uCr=l(),o9=a("p"),bCr=o("This class cannot be instantiated directly using "),zFe=a("code"),vCr=o("__init__()"),FCr=o(" (throws an error)."),TCr=l(),Bt=a("div"),F(r9.$$.fragment),MCr=l(),WFe=a("p"),ECr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CCr=l(),gc=a("p"),wCr=o(`Note:
Loading a model from its configuration file does `),QFe=a("strong"),ACr=o("not"),yCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=a("a"),LCr=o("from_pretrained()"),xCr=o(" to load the model weights."),$Cr=l(),F(CE.$$.fragment),kCr=l(),Rr=a("div"),F(t9.$$.fragment),SCr=l(),HFe=a("p"),RCr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),PCr=l(),ln=a("p"),BCr=o("The model class to instantiate is selected based on the "),UFe=a("code"),ICr=o("model_type"),NCr=o(` property of the config object (either
passed as an argument or loaded from `),JFe=a("code"),qCr=o("pretrained_model_name_or_path"),jCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YFe=a("code"),DCr=o("pretrained_model_name_or_path"),GCr=o(":"),OCr=l(),a9=a("ul"),wE=a("li"),KFe=a("strong"),VCr=o("bert"),XCr=o(" \u2014 "),jU=a("a"),zCr=o("TFBertForNextSentencePrediction"),WCr=o(" (BERT model)"),QCr=l(),AE=a("li"),ZFe=a("strong"),HCr=o("mobilebert"),UCr=o(" \u2014 "),DU=a("a"),JCr=o("TFMobileBertForNextSentencePrediction"),YCr=o(" (MobileBERT model)"),KCr=l(),F(yE.$$.fragment),Gje=l(),hc=a("h2"),LE=a("a"),eTe=a("span"),F(n9.$$.fragment),ZCr=l(),oTe=a("span"),e5r=o("TFAutoModelForTableQuestionAnswering"),Oje=l(),sr=a("div"),F(s9.$$.fragment),o5r=l(),pc=a("p"),r5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),GU=a("a"),t5r=o("from_pretrained()"),a5r=o(" class method or the "),OU=a("a"),n5r=o("from_config()"),s5r=o(` class
method.`),l5r=l(),l9=a("p"),i5r=o("This class cannot be instantiated directly using "),rTe=a("code"),d5r=o("__init__()"),c5r=o(" (throws an error)."),f5r=l(),It=a("div"),F(i9.$$.fragment),m5r=l(),tTe=a("p"),g5r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),h5r=l(),_c=a("p"),p5r=o(`Note:
Loading a model from its configuration file does `),aTe=a("strong"),_5r=o("not"),u5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=a("a"),b5r=o("from_pretrained()"),v5r=o(" to load the model weights."),F5r=l(),F(xE.$$.fragment),T5r=l(),Pr=a("div"),F(d9.$$.fragment),M5r=l(),nTe=a("p"),E5r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),C5r=l(),dn=a("p"),w5r=o("The model class to instantiate is selected based on the "),sTe=a("code"),A5r=o("model_type"),y5r=o(` property of the config object (either
passed as an argument or loaded from `),lTe=a("code"),L5r=o("pretrained_model_name_or_path"),x5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iTe=a("code"),$5r=o("pretrained_model_name_or_path"),k5r=o(":"),S5r=l(),dTe=a("ul"),$E=a("li"),cTe=a("strong"),R5r=o("tapas"),P5r=o(" \u2014 "),XU=a("a"),B5r=o("TFTapasForQuestionAnswering"),I5r=o(" (TAPAS model)"),N5r=l(),F(kE.$$.fragment),Vje=l(),uc=a("h2"),SE=a("a"),fTe=a("span"),F(c9.$$.fragment),q5r=l(),mTe=a("span"),j5r=o("TFAutoModelForTokenClassification"),Xje=l(),lr=a("div"),F(f9.$$.fragment),D5r=l(),bc=a("p"),G5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zU=a("a"),O5r=o("from_pretrained()"),V5r=o(" class method or the "),WU=a("a"),X5r=o("from_config()"),z5r=o(` class
method.`),W5r=l(),m9=a("p"),Q5r=o("This class cannot be instantiated directly using "),gTe=a("code"),H5r=o("__init__()"),U5r=o(" (throws an error)."),J5r=l(),Nt=a("div"),F(g9.$$.fragment),Y5r=l(),hTe=a("p"),K5r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Z5r=l(),vc=a("p"),e3r=o(`Note:
Loading a model from its configuration file does `),pTe=a("strong"),o3r=o("not"),r3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),t3r=o("from_pretrained()"),a3r=o(" to load the model weights."),n3r=l(),F(RE.$$.fragment),s3r=l(),Br=a("div"),F(h9.$$.fragment),l3r=l(),_Te=a("p"),i3r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),d3r=l(),cn=a("p"),c3r=o("The model class to instantiate is selected based on the "),uTe=a("code"),f3r=o("model_type"),m3r=o(` property of the config object (either
passed as an argument or loaded from `),bTe=a("code"),g3r=o("pretrained_model_name_or_path"),h3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=a("code"),p3r=o("pretrained_model_name_or_path"),_3r=o(":"),u3r=l(),de=a("ul"),PE=a("li"),FTe=a("strong"),b3r=o("albert"),v3r=o(" \u2014 "),HU=a("a"),F3r=o("TFAlbertForTokenClassification"),T3r=o(" (ALBERT model)"),M3r=l(),BE=a("li"),TTe=a("strong"),E3r=o("bert"),C3r=o(" \u2014 "),UU=a("a"),w3r=o("TFBertForTokenClassification"),A3r=o(" (BERT model)"),y3r=l(),IE=a("li"),MTe=a("strong"),L3r=o("camembert"),x3r=o(" \u2014 "),JU=a("a"),$3r=o("TFCamembertForTokenClassification"),k3r=o(" (CamemBERT model)"),S3r=l(),NE=a("li"),ETe=a("strong"),R3r=o("convbert"),P3r=o(" \u2014 "),YU=a("a"),B3r=o("TFConvBertForTokenClassification"),I3r=o(" (ConvBERT model)"),N3r=l(),qE=a("li"),CTe=a("strong"),q3r=o("deberta"),j3r=o(" \u2014 "),KU=a("a"),D3r=o("TFDebertaForTokenClassification"),G3r=o(" (DeBERTa model)"),O3r=l(),jE=a("li"),wTe=a("strong"),V3r=o("deberta-v2"),X3r=o(" \u2014 "),ZU=a("a"),z3r=o("TFDebertaV2ForTokenClassification"),W3r=o(" (DeBERTa-v2 model)"),Q3r=l(),DE=a("li"),ATe=a("strong"),H3r=o("distilbert"),U3r=o(" \u2014 "),eJ=a("a"),J3r=o("TFDistilBertForTokenClassification"),Y3r=o(" (DistilBERT model)"),K3r=l(),GE=a("li"),yTe=a("strong"),Z3r=o("electra"),ewr=o(" \u2014 "),oJ=a("a"),owr=o("TFElectraForTokenClassification"),rwr=o(" (ELECTRA model)"),twr=l(),OE=a("li"),LTe=a("strong"),awr=o("flaubert"),nwr=o(" \u2014 "),rJ=a("a"),swr=o("TFFlaubertForTokenClassification"),lwr=o(" (FlauBERT model)"),iwr=l(),VE=a("li"),xTe=a("strong"),dwr=o("funnel"),cwr=o(" \u2014 "),tJ=a("a"),fwr=o("TFFunnelForTokenClassification"),mwr=o(" (Funnel Transformer model)"),gwr=l(),XE=a("li"),$Te=a("strong"),hwr=o("layoutlm"),pwr=o(" \u2014 "),aJ=a("a"),_wr=o("TFLayoutLMForTokenClassification"),uwr=o(" (LayoutLM model)"),bwr=l(),zE=a("li"),kTe=a("strong"),vwr=o("longformer"),Fwr=o(" \u2014 "),nJ=a("a"),Twr=o("TFLongformerForTokenClassification"),Mwr=o(" (Longformer model)"),Ewr=l(),WE=a("li"),STe=a("strong"),Cwr=o("mobilebert"),wwr=o(" \u2014 "),sJ=a("a"),Awr=o("TFMobileBertForTokenClassification"),ywr=o(" (MobileBERT model)"),Lwr=l(),QE=a("li"),RTe=a("strong"),xwr=o("mpnet"),$wr=o(" \u2014 "),lJ=a("a"),kwr=o("TFMPNetForTokenClassification"),Swr=o(" (MPNet model)"),Rwr=l(),HE=a("li"),PTe=a("strong"),Pwr=o("rembert"),Bwr=o(" \u2014 "),iJ=a("a"),Iwr=o("TFRemBertForTokenClassification"),Nwr=o(" (RemBERT model)"),qwr=l(),UE=a("li"),BTe=a("strong"),jwr=o("roberta"),Dwr=o(" \u2014 "),dJ=a("a"),Gwr=o("TFRobertaForTokenClassification"),Owr=o(" (RoBERTa model)"),Vwr=l(),JE=a("li"),ITe=a("strong"),Xwr=o("roformer"),zwr=o(" \u2014 "),cJ=a("a"),Wwr=o("TFRoFormerForTokenClassification"),Qwr=o(" (RoFormer model)"),Hwr=l(),YE=a("li"),NTe=a("strong"),Uwr=o("xlm"),Jwr=o(" \u2014 "),fJ=a("a"),Ywr=o("TFXLMForTokenClassification"),Kwr=o(" (XLM model)"),Zwr=l(),KE=a("li"),qTe=a("strong"),e6r=o("xlm-roberta"),o6r=o(" \u2014 "),mJ=a("a"),r6r=o("TFXLMRobertaForTokenClassification"),t6r=o(" (XLM-RoBERTa model)"),a6r=l(),ZE=a("li"),jTe=a("strong"),n6r=o("xlnet"),s6r=o(" \u2014 "),gJ=a("a"),l6r=o("TFXLNetForTokenClassification"),i6r=o(" (XLNet model)"),d6r=l(),F(eC.$$.fragment),zje=l(),Fc=a("h2"),oC=a("a"),DTe=a("span"),F(p9.$$.fragment),c6r=l(),GTe=a("span"),f6r=o("TFAutoModelForQuestionAnswering"),Wje=l(),ir=a("div"),F(_9.$$.fragment),m6r=l(),Tc=a("p"),g6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hJ=a("a"),h6r=o("from_pretrained()"),p6r=o(" class method or the "),pJ=a("a"),_6r=o("from_config()"),u6r=o(` class
method.`),b6r=l(),u9=a("p"),v6r=o("This class cannot be instantiated directly using "),OTe=a("code"),F6r=o("__init__()"),T6r=o(" (throws an error)."),M6r=l(),qt=a("div"),F(b9.$$.fragment),E6r=l(),VTe=a("p"),C6r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),w6r=l(),Mc=a("p"),A6r=o(`Note:
Loading a model from its configuration file does `),XTe=a("strong"),y6r=o("not"),L6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=a("a"),x6r=o("from_pretrained()"),$6r=o(" to load the model weights."),k6r=l(),F(rC.$$.fragment),S6r=l(),Ir=a("div"),F(v9.$$.fragment),R6r=l(),zTe=a("p"),P6r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),B6r=l(),fn=a("p"),I6r=o("The model class to instantiate is selected based on the "),WTe=a("code"),N6r=o("model_type"),q6r=o(` property of the config object (either
passed as an argument or loaded from `),QTe=a("code"),j6r=o("pretrained_model_name_or_path"),D6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=a("code"),G6r=o("pretrained_model_name_or_path"),O6r=o(":"),V6r=l(),ce=a("ul"),tC=a("li"),UTe=a("strong"),X6r=o("albert"),z6r=o(" \u2014 "),uJ=a("a"),W6r=o("TFAlbertForQuestionAnswering"),Q6r=o(" (ALBERT model)"),H6r=l(),aC=a("li"),JTe=a("strong"),U6r=o("bert"),J6r=o(" \u2014 "),bJ=a("a"),Y6r=o("TFBertForQuestionAnswering"),K6r=o(" (BERT model)"),Z6r=l(),nC=a("li"),YTe=a("strong"),eAr=o("camembert"),oAr=o(" \u2014 "),vJ=a("a"),rAr=o("TFCamembertForQuestionAnswering"),tAr=o(" (CamemBERT model)"),aAr=l(),sC=a("li"),KTe=a("strong"),nAr=o("convbert"),sAr=o(" \u2014 "),FJ=a("a"),lAr=o("TFConvBertForQuestionAnswering"),iAr=o(" (ConvBERT model)"),dAr=l(),lC=a("li"),ZTe=a("strong"),cAr=o("deberta"),fAr=o(" \u2014 "),TJ=a("a"),mAr=o("TFDebertaForQuestionAnswering"),gAr=o(" (DeBERTa model)"),hAr=l(),iC=a("li"),e7e=a("strong"),pAr=o("deberta-v2"),_Ar=o(" \u2014 "),MJ=a("a"),uAr=o("TFDebertaV2ForQuestionAnswering"),bAr=o(" (DeBERTa-v2 model)"),vAr=l(),dC=a("li"),o7e=a("strong"),FAr=o("distilbert"),TAr=o(" \u2014 "),EJ=a("a"),MAr=o("TFDistilBertForQuestionAnswering"),EAr=o(" (DistilBERT model)"),CAr=l(),cC=a("li"),r7e=a("strong"),wAr=o("electra"),AAr=o(" \u2014 "),CJ=a("a"),yAr=o("TFElectraForQuestionAnswering"),LAr=o(" (ELECTRA model)"),xAr=l(),fC=a("li"),t7e=a("strong"),$Ar=o("flaubert"),kAr=o(" \u2014 "),wJ=a("a"),SAr=o("TFFlaubertForQuestionAnsweringSimple"),RAr=o(" (FlauBERT model)"),PAr=l(),mC=a("li"),a7e=a("strong"),BAr=o("funnel"),IAr=o(" \u2014 "),AJ=a("a"),NAr=o("TFFunnelForQuestionAnswering"),qAr=o(" (Funnel Transformer model)"),jAr=l(),gC=a("li"),n7e=a("strong"),DAr=o("gptj"),GAr=o(" \u2014 "),yJ=a("a"),OAr=o("TFGPTJForQuestionAnswering"),VAr=o(" (GPT-J model)"),XAr=l(),hC=a("li"),s7e=a("strong"),zAr=o("longformer"),WAr=o(" \u2014 "),LJ=a("a"),QAr=o("TFLongformerForQuestionAnswering"),HAr=o(" (Longformer model)"),UAr=l(),pC=a("li"),l7e=a("strong"),JAr=o("mobilebert"),YAr=o(" \u2014 "),xJ=a("a"),KAr=o("TFMobileBertForQuestionAnswering"),ZAr=o(" (MobileBERT model)"),eyr=l(),_C=a("li"),i7e=a("strong"),oyr=o("mpnet"),ryr=o(" \u2014 "),$J=a("a"),tyr=o("TFMPNetForQuestionAnswering"),ayr=o(" (MPNet model)"),nyr=l(),uC=a("li"),d7e=a("strong"),syr=o("rembert"),lyr=o(" \u2014 "),kJ=a("a"),iyr=o("TFRemBertForQuestionAnswering"),dyr=o(" (RemBERT model)"),cyr=l(),bC=a("li"),c7e=a("strong"),fyr=o("roberta"),myr=o(" \u2014 "),SJ=a("a"),gyr=o("TFRobertaForQuestionAnswering"),hyr=o(" (RoBERTa model)"),pyr=l(),vC=a("li"),f7e=a("strong"),_yr=o("roformer"),uyr=o(" \u2014 "),RJ=a("a"),byr=o("TFRoFormerForQuestionAnswering"),vyr=o(" (RoFormer model)"),Fyr=l(),FC=a("li"),m7e=a("strong"),Tyr=o("xlm"),Myr=o(" \u2014 "),PJ=a("a"),Eyr=o("TFXLMForQuestionAnsweringSimple"),Cyr=o(" (XLM model)"),wyr=l(),TC=a("li"),g7e=a("strong"),Ayr=o("xlm-roberta"),yyr=o(" \u2014 "),BJ=a("a"),Lyr=o("TFXLMRobertaForQuestionAnswering"),xyr=o(" (XLM-RoBERTa model)"),$yr=l(),MC=a("li"),h7e=a("strong"),kyr=o("xlnet"),Syr=o(" \u2014 "),IJ=a("a"),Ryr=o("TFXLNetForQuestionAnsweringSimple"),Pyr=o(" (XLNet model)"),Byr=l(),F(EC.$$.fragment),Qje=l(),Ec=a("h2"),CC=a("a"),p7e=a("span"),F(F9.$$.fragment),Iyr=l(),_7e=a("span"),Nyr=o("TFAutoModelForVision2Seq"),Hje=l(),dr=a("div"),F(T9.$$.fragment),qyr=l(),Cc=a("p"),jyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NJ=a("a"),Dyr=o("from_pretrained()"),Gyr=o(" class method or the "),qJ=a("a"),Oyr=o("from_config()"),Vyr=o(` class
method.`),Xyr=l(),M9=a("p"),zyr=o("This class cannot be instantiated directly using "),u7e=a("code"),Wyr=o("__init__()"),Qyr=o(" (throws an error)."),Hyr=l(),jt=a("div"),F(E9.$$.fragment),Uyr=l(),b7e=a("p"),Jyr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Yyr=l(),wc=a("p"),Kyr=o(`Note:
Loading a model from its configuration file does `),v7e=a("strong"),Zyr=o("not"),eLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),oLr=o("from_pretrained()"),rLr=o(" to load the model weights."),tLr=l(),F(wC.$$.fragment),aLr=l(),Nr=a("div"),F(C9.$$.fragment),nLr=l(),F7e=a("p"),sLr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lLr=l(),mn=a("p"),iLr=o("The model class to instantiate is selected based on the "),T7e=a("code"),dLr=o("model_type"),cLr=o(` property of the config object (either
passed as an argument or loaded from `),M7e=a("code"),fLr=o("pretrained_model_name_or_path"),mLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E7e=a("code"),gLr=o("pretrained_model_name_or_path"),hLr=o(":"),pLr=l(),C7e=a("ul"),AC=a("li"),w7e=a("strong"),_Lr=o("vision-encoder-decoder"),uLr=o(" \u2014 "),DJ=a("a"),bLr=o("TFVisionEncoderDecoderModel"),vLr=o(" (Vision Encoder decoder model)"),FLr=l(),F(yC.$$.fragment),Uje=l(),Ac=a("h2"),LC=a("a"),A7e=a("span"),F(w9.$$.fragment),TLr=l(),y7e=a("span"),MLr=o("TFAutoModelForSpeechSeq2Seq"),Jje=l(),cr=a("div"),F(A9.$$.fragment),ELr=l(),yc=a("p"),CLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),GJ=a("a"),wLr=o("from_pretrained()"),ALr=o(" class method or the "),OJ=a("a"),yLr=o("from_config()"),LLr=o(` class
method.`),xLr=l(),y9=a("p"),$Lr=o("This class cannot be instantiated directly using "),L7e=a("code"),kLr=o("__init__()"),SLr=o(" (throws an error)."),RLr=l(),Dt=a("div"),F(L9.$$.fragment),PLr=l(),x7e=a("p"),BLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ILr=l(),Lc=a("p"),NLr=o(`Note:
Loading a model from its configuration file does `),$7e=a("strong"),qLr=o("not"),jLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),DLr=o("from_pretrained()"),GLr=o(" to load the model weights."),OLr=l(),F(xC.$$.fragment),VLr=l(),qr=a("div"),F(x9.$$.fragment),XLr=l(),k7e=a("p"),zLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),WLr=l(),gn=a("p"),QLr=o("The model class to instantiate is selected based on the "),S7e=a("code"),HLr=o("model_type"),ULr=o(` property of the config object (either
passed as an argument or loaded from `),R7e=a("code"),JLr=o("pretrained_model_name_or_path"),YLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P7e=a("code"),KLr=o("pretrained_model_name_or_path"),ZLr=o(":"),e8r=l(),B7e=a("ul"),$C=a("li"),I7e=a("strong"),o8r=o("speech_to_text"),r8r=o(" \u2014 "),XJ=a("a"),t8r=o("TFSpeech2TextForConditionalGeneration"),a8r=o(" (Speech2Text model)"),n8r=l(),F(kC.$$.fragment),Yje=l(),xc=a("h2"),SC=a("a"),N7e=a("span"),F($9.$$.fragment),s8r=l(),q7e=a("span"),l8r=o("FlaxAutoModel"),Kje=l(),fr=a("div"),F(k9.$$.fragment),i8r=l(),$c=a("p"),d8r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zJ=a("a"),c8r=o("from_pretrained()"),f8r=o(" class method or the "),WJ=a("a"),m8r=o("from_config()"),g8r=o(` class
method.`),h8r=l(),S9=a("p"),p8r=o("This class cannot be instantiated directly using "),j7e=a("code"),_8r=o("__init__()"),u8r=o(" (throws an error)."),b8r=l(),Gt=a("div"),F(R9.$$.fragment),v8r=l(),D7e=a("p"),F8r=o("Instantiates one of the base model classes of the library from a configuration."),T8r=l(),kc=a("p"),M8r=o(`Note:
Loading a model from its configuration file does `),G7e=a("strong"),E8r=o("not"),C8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),w8r=o("from_pretrained()"),A8r=o(" to load the model weights."),y8r=l(),F(RC.$$.fragment),L8r=l(),jr=a("div"),F(P9.$$.fragment),x8r=l(),O7e=a("p"),$8r=o("Instantiate one of the base model classes of the library from a pretrained model."),k8r=l(),hn=a("p"),S8r=o("The model class to instantiate is selected based on the "),V7e=a("code"),R8r=o("model_type"),P8r=o(` property of the config object (either
passed as an argument or loaded from `),X7e=a("code"),B8r=o("pretrained_model_name_or_path"),I8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=a("code"),N8r=o("pretrained_model_name_or_path"),q8r=o(":"),j8r=l(),te=a("ul"),PC=a("li"),W7e=a("strong"),D8r=o("albert"),G8r=o(" \u2014 "),HJ=a("a"),O8r=o("FlaxAlbertModel"),V8r=o(" (ALBERT model)"),X8r=l(),BC=a("li"),Q7e=a("strong"),z8r=o("bart"),W8r=o(" \u2014 "),UJ=a("a"),Q8r=o("FlaxBartModel"),H8r=o(" (BART model)"),U8r=l(),IC=a("li"),H7e=a("strong"),J8r=o("beit"),Y8r=o(" \u2014 "),JJ=a("a"),K8r=o("FlaxBeitModel"),Z8r=o(" (BEiT model)"),e9r=l(),NC=a("li"),U7e=a("strong"),o9r=o("bert"),r9r=o(" \u2014 "),YJ=a("a"),t9r=o("FlaxBertModel"),a9r=o(" (BERT model)"),n9r=l(),qC=a("li"),J7e=a("strong"),s9r=o("big_bird"),l9r=o(" \u2014 "),KJ=a("a"),i9r=o("FlaxBigBirdModel"),d9r=o(" (BigBird model)"),c9r=l(),jC=a("li"),Y7e=a("strong"),f9r=o("blenderbot"),m9r=o(" \u2014 "),ZJ=a("a"),g9r=o("FlaxBlenderbotModel"),h9r=o(" (Blenderbot model)"),p9r=l(),DC=a("li"),K7e=a("strong"),_9r=o("blenderbot-small"),u9r=o(" \u2014 "),eY=a("a"),b9r=o("FlaxBlenderbotSmallModel"),v9r=o(" (BlenderbotSmall model)"),F9r=l(),GC=a("li"),Z7e=a("strong"),T9r=o("clip"),M9r=o(" \u2014 "),oY=a("a"),E9r=o("FlaxCLIPModel"),C9r=o(" (CLIP model)"),w9r=l(),OC=a("li"),eMe=a("strong"),A9r=o("distilbert"),y9r=o(" \u2014 "),rY=a("a"),L9r=o("FlaxDistilBertModel"),x9r=o(" (DistilBERT model)"),$9r=l(),VC=a("li"),oMe=a("strong"),k9r=o("electra"),S9r=o(" \u2014 "),tY=a("a"),R9r=o("FlaxElectraModel"),P9r=o(" (ELECTRA model)"),B9r=l(),XC=a("li"),rMe=a("strong"),I9r=o("gpt2"),N9r=o(" \u2014 "),aY=a("a"),q9r=o("FlaxGPT2Model"),j9r=o(" (OpenAI GPT-2 model)"),D9r=l(),zC=a("li"),tMe=a("strong"),G9r=o("gpt_neo"),O9r=o(" \u2014 "),nY=a("a"),V9r=o("FlaxGPTNeoModel"),X9r=o(" (GPT Neo model)"),z9r=l(),WC=a("li"),aMe=a("strong"),W9r=o("gptj"),Q9r=o(" \u2014 "),sY=a("a"),H9r=o("FlaxGPTJModel"),U9r=o(" (GPT-J model)"),J9r=l(),QC=a("li"),nMe=a("strong"),Y9r=o("marian"),K9r=o(" \u2014 "),lY=a("a"),Z9r=o("FlaxMarianModel"),exr=o(" (Marian model)"),oxr=l(),HC=a("li"),sMe=a("strong"),rxr=o("mbart"),txr=o(" \u2014 "),iY=a("a"),axr=o("FlaxMBartModel"),nxr=o(" (mBART model)"),sxr=l(),UC=a("li"),lMe=a("strong"),lxr=o("mt5"),ixr=o(" \u2014 "),dY=a("a"),dxr=o("FlaxMT5Model"),cxr=o(" (mT5 model)"),fxr=l(),JC=a("li"),iMe=a("strong"),mxr=o("pegasus"),gxr=o(" \u2014 "),cY=a("a"),hxr=o("FlaxPegasusModel"),pxr=o(" (Pegasus model)"),_xr=l(),YC=a("li"),dMe=a("strong"),uxr=o("roberta"),bxr=o(" \u2014 "),fY=a("a"),vxr=o("FlaxRobertaModel"),Fxr=o(" (RoBERTa model)"),Txr=l(),KC=a("li"),cMe=a("strong"),Mxr=o("roformer"),Exr=o(" \u2014 "),mY=a("a"),Cxr=o("FlaxRoFormerModel"),wxr=o(" (RoFormer model)"),Axr=l(),ZC=a("li"),fMe=a("strong"),yxr=o("t5"),Lxr=o(" \u2014 "),gY=a("a"),xxr=o("FlaxT5Model"),$xr=o(" (T5 model)"),kxr=l(),e5=a("li"),mMe=a("strong"),Sxr=o("vision-text-dual-encoder"),Rxr=o(" \u2014 "),hY=a("a"),Pxr=o("FlaxVisionTextDualEncoderModel"),Bxr=o(" (VisionTextDualEncoder model)"),Ixr=l(),o5=a("li"),gMe=a("strong"),Nxr=o("vit"),qxr=o(" \u2014 "),pY=a("a"),jxr=o("FlaxViTModel"),Dxr=o(" (ViT model)"),Gxr=l(),r5=a("li"),hMe=a("strong"),Oxr=o("wav2vec2"),Vxr=o(" \u2014 "),_Y=a("a"),Xxr=o("FlaxWav2Vec2Model"),zxr=o(" (Wav2Vec2 model)"),Wxr=l(),t5=a("li"),pMe=a("strong"),Qxr=o("xglm"),Hxr=o(" \u2014 "),uY=a("a"),Uxr=o("FlaxXGLMModel"),Jxr=o(" (XGLM model)"),Yxr=l(),a5=a("li"),_Me=a("strong"),Kxr=o("xlm-roberta"),Zxr=o(" \u2014 "),bY=a("a"),e$r=o("FlaxXLMRobertaModel"),o$r=o(" (XLM-RoBERTa model)"),r$r=l(),F(n5.$$.fragment),Zje=l(),Sc=a("h2"),s5=a("a"),uMe=a("span"),F(B9.$$.fragment),t$r=l(),bMe=a("span"),a$r=o("FlaxAutoModelForCausalLM"),eDe=l(),mr=a("div"),F(I9.$$.fragment),n$r=l(),Rc=a("p"),s$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vY=a("a"),l$r=o("from_pretrained()"),i$r=o(" class method or the "),FY=a("a"),d$r=o("from_config()"),c$r=o(` class
method.`),f$r=l(),N9=a("p"),m$r=o("This class cannot be instantiated directly using "),vMe=a("code"),g$r=o("__init__()"),h$r=o(" (throws an error)."),p$r=l(),Ot=a("div"),F(q9.$$.fragment),_$r=l(),FMe=a("p"),u$r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),b$r=l(),Pc=a("p"),v$r=o(`Note:
Loading a model from its configuration file does `),TMe=a("strong"),F$r=o("not"),T$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=a("a"),M$r=o("from_pretrained()"),E$r=o(" to load the model weights."),C$r=l(),F(l5.$$.fragment),w$r=l(),Dr=a("div"),F(j9.$$.fragment),A$r=l(),MMe=a("p"),y$r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),L$r=l(),pn=a("p"),x$r=o("The model class to instantiate is selected based on the "),EMe=a("code"),$$r=o("model_type"),k$r=o(` property of the config object (either
passed as an argument or loaded from `),CMe=a("code"),S$r=o("pretrained_model_name_or_path"),R$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=a("code"),P$r=o("pretrained_model_name_or_path"),B$r=o(":"),I$r=l(),Re=a("ul"),i5=a("li"),AMe=a("strong"),N$r=o("bart"),q$r=o(" \u2014 "),MY=a("a"),j$r=o("FlaxBartForCausalLM"),D$r=o(" (BART model)"),G$r=l(),d5=a("li"),yMe=a("strong"),O$r=o("bert"),V$r=o(" \u2014 "),EY=a("a"),X$r=o("FlaxBertForCausalLM"),z$r=o(" (BERT model)"),W$r=l(),c5=a("li"),LMe=a("strong"),Q$r=o("big_bird"),H$r=o(" \u2014 "),CY=a("a"),U$r=o("FlaxBigBirdForCausalLM"),J$r=o(" (BigBird model)"),Y$r=l(),f5=a("li"),xMe=a("strong"),K$r=o("electra"),Z$r=o(" \u2014 "),wY=a("a"),ekr=o("FlaxElectraForCausalLM"),okr=o(" (ELECTRA model)"),rkr=l(),m5=a("li"),$Me=a("strong"),tkr=o("gpt2"),akr=o(" \u2014 "),AY=a("a"),nkr=o("FlaxGPT2LMHeadModel"),skr=o(" (OpenAI GPT-2 model)"),lkr=l(),g5=a("li"),kMe=a("strong"),ikr=o("gpt_neo"),dkr=o(" \u2014 "),yY=a("a"),ckr=o("FlaxGPTNeoForCausalLM"),fkr=o(" (GPT Neo model)"),mkr=l(),h5=a("li"),SMe=a("strong"),gkr=o("gptj"),hkr=o(" \u2014 "),LY=a("a"),pkr=o("FlaxGPTJForCausalLM"),_kr=o(" (GPT-J model)"),ukr=l(),p5=a("li"),RMe=a("strong"),bkr=o("roberta"),vkr=o(" \u2014 "),xY=a("a"),Fkr=o("FlaxRobertaForCausalLM"),Tkr=o(" (RoBERTa model)"),Mkr=l(),_5=a("li"),PMe=a("strong"),Ekr=o("xglm"),Ckr=o(" \u2014 "),$Y=a("a"),wkr=o("FlaxXGLMForCausalLM"),Akr=o(" (XGLM model)"),ykr=l(),F(u5.$$.fragment),oDe=l(),Bc=a("h2"),b5=a("a"),BMe=a("span"),F(D9.$$.fragment),Lkr=l(),IMe=a("span"),xkr=o("FlaxAutoModelForPreTraining"),rDe=l(),gr=a("div"),F(G9.$$.fragment),$kr=l(),Ic=a("p"),kkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kY=a("a"),Skr=o("from_pretrained()"),Rkr=o(" class method or the "),SY=a("a"),Pkr=o("from_config()"),Bkr=o(` class
method.`),Ikr=l(),O9=a("p"),Nkr=o("This class cannot be instantiated directly using "),NMe=a("code"),qkr=o("__init__()"),jkr=o(" (throws an error)."),Dkr=l(),Vt=a("div"),F(V9.$$.fragment),Gkr=l(),qMe=a("p"),Okr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Vkr=l(),Nc=a("p"),Xkr=o(`Note:
Loading a model from its configuration file does `),jMe=a("strong"),zkr=o("not"),Wkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),Qkr=o("from_pretrained()"),Hkr=o(" to load the model weights."),Ukr=l(),F(v5.$$.fragment),Jkr=l(),Gr=a("div"),F(X9.$$.fragment),Ykr=l(),DMe=a("p"),Kkr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Zkr=l(),_n=a("p"),eSr=o("The model class to instantiate is selected based on the "),GMe=a("code"),oSr=o("model_type"),rSr=o(` property of the config object (either
passed as an argument or loaded from `),OMe=a("code"),tSr=o("pretrained_model_name_or_path"),aSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=a("code"),nSr=o("pretrained_model_name_or_path"),sSr=o(":"),lSr=l(),Ee=a("ul"),F5=a("li"),XMe=a("strong"),iSr=o("albert"),dSr=o(" \u2014 "),PY=a("a"),cSr=o("FlaxAlbertForPreTraining"),fSr=o(" (ALBERT model)"),mSr=l(),T5=a("li"),zMe=a("strong"),gSr=o("bart"),hSr=o(" \u2014 "),BY=a("a"),pSr=o("FlaxBartForConditionalGeneration"),_Sr=o(" (BART model)"),uSr=l(),M5=a("li"),WMe=a("strong"),bSr=o("bert"),vSr=o(" \u2014 "),IY=a("a"),FSr=o("FlaxBertForPreTraining"),TSr=o(" (BERT model)"),MSr=l(),E5=a("li"),QMe=a("strong"),ESr=o("big_bird"),CSr=o(" \u2014 "),NY=a("a"),wSr=o("FlaxBigBirdForPreTraining"),ASr=o(" (BigBird model)"),ySr=l(),C5=a("li"),HMe=a("strong"),LSr=o("electra"),xSr=o(" \u2014 "),qY=a("a"),$Sr=o("FlaxElectraForPreTraining"),kSr=o(" (ELECTRA model)"),SSr=l(),w5=a("li"),UMe=a("strong"),RSr=o("mbart"),PSr=o(" \u2014 "),jY=a("a"),BSr=o("FlaxMBartForConditionalGeneration"),ISr=o(" (mBART model)"),NSr=l(),A5=a("li"),JMe=a("strong"),qSr=o("mt5"),jSr=o(" \u2014 "),DY=a("a"),DSr=o("FlaxMT5ForConditionalGeneration"),GSr=o(" (mT5 model)"),OSr=l(),y5=a("li"),YMe=a("strong"),VSr=o("roberta"),XSr=o(" \u2014 "),GY=a("a"),zSr=o("FlaxRobertaForMaskedLM"),WSr=o(" (RoBERTa model)"),QSr=l(),L5=a("li"),KMe=a("strong"),HSr=o("roformer"),USr=o(" \u2014 "),OY=a("a"),JSr=o("FlaxRoFormerForMaskedLM"),YSr=o(" (RoFormer model)"),KSr=l(),x5=a("li"),ZMe=a("strong"),ZSr=o("t5"),eRr=o(" \u2014 "),VY=a("a"),oRr=o("FlaxT5ForConditionalGeneration"),rRr=o(" (T5 model)"),tRr=l(),$5=a("li"),e4e=a("strong"),aRr=o("wav2vec2"),nRr=o(" \u2014 "),XY=a("a"),sRr=o("FlaxWav2Vec2ForPreTraining"),lRr=o(" (Wav2Vec2 model)"),iRr=l(),k5=a("li"),o4e=a("strong"),dRr=o("xlm-roberta"),cRr=o(" \u2014 "),zY=a("a"),fRr=o("FlaxXLMRobertaForMaskedLM"),mRr=o(" (XLM-RoBERTa model)"),gRr=l(),F(S5.$$.fragment),tDe=l(),qc=a("h2"),R5=a("a"),r4e=a("span"),F(z9.$$.fragment),hRr=l(),t4e=a("span"),pRr=o("FlaxAutoModelForMaskedLM"),aDe=l(),hr=a("div"),F(W9.$$.fragment),_Rr=l(),jc=a("p"),uRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WY=a("a"),bRr=o("from_pretrained()"),vRr=o(" class method or the "),QY=a("a"),FRr=o("from_config()"),TRr=o(` class
method.`),MRr=l(),Q9=a("p"),ERr=o("This class cannot be instantiated directly using "),a4e=a("code"),CRr=o("__init__()"),wRr=o(" (throws an error)."),ARr=l(),Xt=a("div"),F(H9.$$.fragment),yRr=l(),n4e=a("p"),LRr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xRr=l(),Dc=a("p"),$Rr=o(`Note:
Loading a model from its configuration file does `),s4e=a("strong"),kRr=o("not"),SRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=a("a"),RRr=o("from_pretrained()"),PRr=o(" to load the model weights."),BRr=l(),F(P5.$$.fragment),IRr=l(),Or=a("div"),F(U9.$$.fragment),NRr=l(),l4e=a("p"),qRr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jRr=l(),un=a("p"),DRr=o("The model class to instantiate is selected based on the "),i4e=a("code"),GRr=o("model_type"),ORr=o(` property of the config object (either
passed as an argument or loaded from `),d4e=a("code"),VRr=o("pretrained_model_name_or_path"),XRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=a("code"),zRr=o("pretrained_model_name_or_path"),WRr=o(":"),QRr=l(),Le=a("ul"),B5=a("li"),f4e=a("strong"),HRr=o("albert"),URr=o(" \u2014 "),UY=a("a"),JRr=o("FlaxAlbertForMaskedLM"),YRr=o(" (ALBERT model)"),KRr=l(),I5=a("li"),m4e=a("strong"),ZRr=o("bart"),ePr=o(" \u2014 "),JY=a("a"),oPr=o("FlaxBartForConditionalGeneration"),rPr=o(" (BART model)"),tPr=l(),N5=a("li"),g4e=a("strong"),aPr=o("bert"),nPr=o(" \u2014 "),YY=a("a"),sPr=o("FlaxBertForMaskedLM"),lPr=o(" (BERT model)"),iPr=l(),q5=a("li"),h4e=a("strong"),dPr=o("big_bird"),cPr=o(" \u2014 "),KY=a("a"),fPr=o("FlaxBigBirdForMaskedLM"),mPr=o(" (BigBird model)"),gPr=l(),j5=a("li"),p4e=a("strong"),hPr=o("distilbert"),pPr=o(" \u2014 "),ZY=a("a"),_Pr=o("FlaxDistilBertForMaskedLM"),uPr=o(" (DistilBERT model)"),bPr=l(),D5=a("li"),_4e=a("strong"),vPr=o("electra"),FPr=o(" \u2014 "),eK=a("a"),TPr=o("FlaxElectraForMaskedLM"),MPr=o(" (ELECTRA model)"),EPr=l(),G5=a("li"),u4e=a("strong"),CPr=o("mbart"),wPr=o(" \u2014 "),oK=a("a"),APr=o("FlaxMBartForConditionalGeneration"),yPr=o(" (mBART model)"),LPr=l(),O5=a("li"),b4e=a("strong"),xPr=o("roberta"),$Pr=o(" \u2014 "),rK=a("a"),kPr=o("FlaxRobertaForMaskedLM"),SPr=o(" (RoBERTa model)"),RPr=l(),V5=a("li"),v4e=a("strong"),PPr=o("roformer"),BPr=o(" \u2014 "),tK=a("a"),IPr=o("FlaxRoFormerForMaskedLM"),NPr=o(" (RoFormer model)"),qPr=l(),X5=a("li"),F4e=a("strong"),jPr=o("xlm-roberta"),DPr=o(" \u2014 "),aK=a("a"),GPr=o("FlaxXLMRobertaForMaskedLM"),OPr=o(" (XLM-RoBERTa model)"),VPr=l(),F(z5.$$.fragment),nDe=l(),Gc=a("h2"),W5=a("a"),T4e=a("span"),F(J9.$$.fragment),XPr=l(),M4e=a("span"),zPr=o("FlaxAutoModelForSeq2SeqLM"),sDe=l(),pr=a("div"),F(Y9.$$.fragment),WPr=l(),Oc=a("p"),QPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nK=a("a"),HPr=o("from_pretrained()"),UPr=o(" class method or the "),sK=a("a"),JPr=o("from_config()"),YPr=o(` class
method.`),KPr=l(),K9=a("p"),ZPr=o("This class cannot be instantiated directly using "),E4e=a("code"),eBr=o("__init__()"),oBr=o(" (throws an error)."),rBr=l(),zt=a("div"),F(Z9.$$.fragment),tBr=l(),C4e=a("p"),aBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nBr=l(),Vc=a("p"),sBr=o(`Note:
Loading a model from its configuration file does `),w4e=a("strong"),lBr=o("not"),iBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=a("a"),dBr=o("from_pretrained()"),cBr=o(" to load the model weights."),fBr=l(),F(Q5.$$.fragment),mBr=l(),Vr=a("div"),F(ex.$$.fragment),gBr=l(),A4e=a("p"),hBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pBr=l(),bn=a("p"),_Br=o("The model class to instantiate is selected based on the "),y4e=a("code"),uBr=o("model_type"),bBr=o(` property of the config object (either
passed as an argument or loaded from `),L4e=a("code"),vBr=o("pretrained_model_name_or_path"),FBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=a("code"),TBr=o("pretrained_model_name_or_path"),MBr=o(":"),EBr=l(),Pe=a("ul"),H5=a("li"),$4e=a("strong"),CBr=o("bart"),wBr=o(" \u2014 "),iK=a("a"),ABr=o("FlaxBartForConditionalGeneration"),yBr=o(" (BART model)"),LBr=l(),U5=a("li"),k4e=a("strong"),xBr=o("blenderbot"),$Br=o(" \u2014 "),dK=a("a"),kBr=o("FlaxBlenderbotForConditionalGeneration"),SBr=o(" (Blenderbot model)"),RBr=l(),J5=a("li"),S4e=a("strong"),PBr=o("blenderbot-small"),BBr=o(" \u2014 "),cK=a("a"),IBr=o("FlaxBlenderbotSmallForConditionalGeneration"),NBr=o(" (BlenderbotSmall model)"),qBr=l(),Y5=a("li"),R4e=a("strong"),jBr=o("encoder-decoder"),DBr=o(" \u2014 "),fK=a("a"),GBr=o("FlaxEncoderDecoderModel"),OBr=o(" (Encoder decoder model)"),VBr=l(),K5=a("li"),P4e=a("strong"),XBr=o("marian"),zBr=o(" \u2014 "),mK=a("a"),WBr=o("FlaxMarianMTModel"),QBr=o(" (Marian model)"),HBr=l(),Z5=a("li"),B4e=a("strong"),UBr=o("mbart"),JBr=o(" \u2014 "),gK=a("a"),YBr=o("FlaxMBartForConditionalGeneration"),KBr=o(" (mBART model)"),ZBr=l(),e3=a("li"),I4e=a("strong"),eIr=o("mt5"),oIr=o(" \u2014 "),hK=a("a"),rIr=o("FlaxMT5ForConditionalGeneration"),tIr=o(" (mT5 model)"),aIr=l(),o3=a("li"),N4e=a("strong"),nIr=o("pegasus"),sIr=o(" \u2014 "),pK=a("a"),lIr=o("FlaxPegasusForConditionalGeneration"),iIr=o(" (Pegasus model)"),dIr=l(),r3=a("li"),q4e=a("strong"),cIr=o("t5"),fIr=o(" \u2014 "),_K=a("a"),mIr=o("FlaxT5ForConditionalGeneration"),gIr=o(" (T5 model)"),hIr=l(),F(t3.$$.fragment),lDe=l(),Xc=a("h2"),a3=a("a"),j4e=a("span"),F(ox.$$.fragment),pIr=l(),D4e=a("span"),_Ir=o("FlaxAutoModelForSequenceClassification"),iDe=l(),_r=a("div"),F(rx.$$.fragment),uIr=l(),zc=a("p"),bIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uK=a("a"),vIr=o("from_pretrained()"),FIr=o(" class method or the "),bK=a("a"),TIr=o("from_config()"),MIr=o(` class
method.`),EIr=l(),tx=a("p"),CIr=o("This class cannot be instantiated directly using "),G4e=a("code"),wIr=o("__init__()"),AIr=o(" (throws an error)."),yIr=l(),Wt=a("div"),F(ax.$$.fragment),LIr=l(),O4e=a("p"),xIr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$Ir=l(),Wc=a("p"),kIr=o(`Note:
Loading a model from its configuration file does `),V4e=a("strong"),SIr=o("not"),RIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=a("a"),PIr=o("from_pretrained()"),BIr=o(" to load the model weights."),IIr=l(),F(n3.$$.fragment),NIr=l(),Xr=a("div"),F(nx.$$.fragment),qIr=l(),X4e=a("p"),jIr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),DIr=l(),vn=a("p"),GIr=o("The model class to instantiate is selected based on the "),z4e=a("code"),OIr=o("model_type"),VIr=o(` property of the config object (either
passed as an argument or loaded from `),W4e=a("code"),XIr=o("pretrained_model_name_or_path"),zIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=a("code"),WIr=o("pretrained_model_name_or_path"),QIr=o(":"),HIr=l(),xe=a("ul"),s3=a("li"),H4e=a("strong"),UIr=o("albert"),JIr=o(" \u2014 "),FK=a("a"),YIr=o("FlaxAlbertForSequenceClassification"),KIr=o(" (ALBERT model)"),ZIr=l(),l3=a("li"),U4e=a("strong"),eNr=o("bart"),oNr=o(" \u2014 "),TK=a("a"),rNr=o("FlaxBartForSequenceClassification"),tNr=o(" (BART model)"),aNr=l(),i3=a("li"),J4e=a("strong"),nNr=o("bert"),sNr=o(" \u2014 "),MK=a("a"),lNr=o("FlaxBertForSequenceClassification"),iNr=o(" (BERT model)"),dNr=l(),d3=a("li"),Y4e=a("strong"),cNr=o("big_bird"),fNr=o(" \u2014 "),EK=a("a"),mNr=o("FlaxBigBirdForSequenceClassification"),gNr=o(" (BigBird model)"),hNr=l(),c3=a("li"),K4e=a("strong"),pNr=o("distilbert"),_Nr=o(" \u2014 "),CK=a("a"),uNr=o("FlaxDistilBertForSequenceClassification"),bNr=o(" (DistilBERT model)"),vNr=l(),f3=a("li"),Z4e=a("strong"),FNr=o("electra"),TNr=o(" \u2014 "),wK=a("a"),MNr=o("FlaxElectraForSequenceClassification"),ENr=o(" (ELECTRA model)"),CNr=l(),m3=a("li"),eEe=a("strong"),wNr=o("mbart"),ANr=o(" \u2014 "),AK=a("a"),yNr=o("FlaxMBartForSequenceClassification"),LNr=o(" (mBART model)"),xNr=l(),g3=a("li"),oEe=a("strong"),$Nr=o("roberta"),kNr=o(" \u2014 "),yK=a("a"),SNr=o("FlaxRobertaForSequenceClassification"),RNr=o(" (RoBERTa model)"),PNr=l(),h3=a("li"),rEe=a("strong"),BNr=o("roformer"),INr=o(" \u2014 "),LK=a("a"),NNr=o("FlaxRoFormerForSequenceClassification"),qNr=o(" (RoFormer model)"),jNr=l(),p3=a("li"),tEe=a("strong"),DNr=o("xlm-roberta"),GNr=o(" \u2014 "),xK=a("a"),ONr=o("FlaxXLMRobertaForSequenceClassification"),VNr=o(" (XLM-RoBERTa model)"),XNr=l(),F(_3.$$.fragment),dDe=l(),Qc=a("h2"),u3=a("a"),aEe=a("span"),F(sx.$$.fragment),zNr=l(),nEe=a("span"),WNr=o("FlaxAutoModelForQuestionAnswering"),cDe=l(),ur=a("div"),F(lx.$$.fragment),QNr=l(),Hc=a("p"),HNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$K=a("a"),UNr=o("from_pretrained()"),JNr=o(" class method or the "),kK=a("a"),YNr=o("from_config()"),KNr=o(` class
method.`),ZNr=l(),ix=a("p"),eqr=o("This class cannot be instantiated directly using "),sEe=a("code"),oqr=o("__init__()"),rqr=o(" (throws an error)."),tqr=l(),Qt=a("div"),F(dx.$$.fragment),aqr=l(),lEe=a("p"),nqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sqr=l(),Uc=a("p"),lqr=o(`Note:
Loading a model from its configuration file does `),iEe=a("strong"),iqr=o("not"),dqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SK=a("a"),cqr=o("from_pretrained()"),fqr=o(" to load the model weights."),mqr=l(),F(b3.$$.fragment),gqr=l(),zr=a("div"),F(cx.$$.fragment),hqr=l(),dEe=a("p"),pqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_qr=l(),Fn=a("p"),uqr=o("The model class to instantiate is selected based on the "),cEe=a("code"),bqr=o("model_type"),vqr=o(` property of the config object (either
passed as an argument or loaded from `),fEe=a("code"),Fqr=o("pretrained_model_name_or_path"),Tqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mEe=a("code"),Mqr=o("pretrained_model_name_or_path"),Eqr=o(":"),Cqr=l(),$e=a("ul"),v3=a("li"),gEe=a("strong"),wqr=o("albert"),Aqr=o(" \u2014 "),RK=a("a"),yqr=o("FlaxAlbertForQuestionAnswering"),Lqr=o(" (ALBERT model)"),xqr=l(),F3=a("li"),hEe=a("strong"),$qr=o("bart"),kqr=o(" \u2014 "),PK=a("a"),Sqr=o("FlaxBartForQuestionAnswering"),Rqr=o(" (BART model)"),Pqr=l(),T3=a("li"),pEe=a("strong"),Bqr=o("bert"),Iqr=o(" \u2014 "),BK=a("a"),Nqr=o("FlaxBertForQuestionAnswering"),qqr=o(" (BERT model)"),jqr=l(),M3=a("li"),_Ee=a("strong"),Dqr=o("big_bird"),Gqr=o(" \u2014 "),IK=a("a"),Oqr=o("FlaxBigBirdForQuestionAnswering"),Vqr=o(" (BigBird model)"),Xqr=l(),E3=a("li"),uEe=a("strong"),zqr=o("distilbert"),Wqr=o(" \u2014 "),NK=a("a"),Qqr=o("FlaxDistilBertForQuestionAnswering"),Hqr=o(" (DistilBERT model)"),Uqr=l(),C3=a("li"),bEe=a("strong"),Jqr=o("electra"),Yqr=o(" \u2014 "),qK=a("a"),Kqr=o("FlaxElectraForQuestionAnswering"),Zqr=o(" (ELECTRA model)"),ejr=l(),w3=a("li"),vEe=a("strong"),ojr=o("mbart"),rjr=o(" \u2014 "),jK=a("a"),tjr=o("FlaxMBartForQuestionAnswering"),ajr=o(" (mBART model)"),njr=l(),A3=a("li"),FEe=a("strong"),sjr=o("roberta"),ljr=o(" \u2014 "),DK=a("a"),ijr=o("FlaxRobertaForQuestionAnswering"),djr=o(" (RoBERTa model)"),cjr=l(),y3=a("li"),TEe=a("strong"),fjr=o("roformer"),mjr=o(" \u2014 "),GK=a("a"),gjr=o("FlaxRoFormerForQuestionAnswering"),hjr=o(" (RoFormer model)"),pjr=l(),L3=a("li"),MEe=a("strong"),_jr=o("xlm-roberta"),ujr=o(" \u2014 "),OK=a("a"),bjr=o("FlaxXLMRobertaForQuestionAnswering"),vjr=o(" (XLM-RoBERTa model)"),Fjr=l(),F(x3.$$.fragment),fDe=l(),Jc=a("h2"),$3=a("a"),EEe=a("span"),F(fx.$$.fragment),Tjr=l(),CEe=a("span"),Mjr=o("FlaxAutoModelForTokenClassification"),mDe=l(),br=a("div"),F(mx.$$.fragment),Ejr=l(),Yc=a("p"),Cjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VK=a("a"),wjr=o("from_pretrained()"),Ajr=o(" class method or the "),XK=a("a"),yjr=o("from_config()"),Ljr=o(` class
method.`),xjr=l(),gx=a("p"),$jr=o("This class cannot be instantiated directly using "),wEe=a("code"),kjr=o("__init__()"),Sjr=o(" (throws an error)."),Rjr=l(),Ht=a("div"),F(hx.$$.fragment),Pjr=l(),AEe=a("p"),Bjr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ijr=l(),Kc=a("p"),Njr=o(`Note:
Loading a model from its configuration file does `),yEe=a("strong"),qjr=o("not"),jjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zK=a("a"),Djr=o("from_pretrained()"),Gjr=o(" to load the model weights."),Ojr=l(),F(k3.$$.fragment),Vjr=l(),Wr=a("div"),F(px.$$.fragment),Xjr=l(),LEe=a("p"),zjr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Wjr=l(),Tn=a("p"),Qjr=o("The model class to instantiate is selected based on the "),xEe=a("code"),Hjr=o("model_type"),Ujr=o(` property of the config object (either
passed as an argument or loaded from `),$Ee=a("code"),Jjr=o("pretrained_model_name_or_path"),Yjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kEe=a("code"),Kjr=o("pretrained_model_name_or_path"),Zjr=o(":"),eDr=l(),De=a("ul"),S3=a("li"),SEe=a("strong"),oDr=o("albert"),rDr=o(" \u2014 "),WK=a("a"),tDr=o("FlaxAlbertForTokenClassification"),aDr=o(" (ALBERT model)"),nDr=l(),R3=a("li"),REe=a("strong"),sDr=o("bert"),lDr=o(" \u2014 "),QK=a("a"),iDr=o("FlaxBertForTokenClassification"),dDr=o(" (BERT model)"),cDr=l(),P3=a("li"),PEe=a("strong"),fDr=o("big_bird"),mDr=o(" \u2014 "),HK=a("a"),gDr=o("FlaxBigBirdForTokenClassification"),hDr=o(" (BigBird model)"),pDr=l(),B3=a("li"),BEe=a("strong"),_Dr=o("distilbert"),uDr=o(" \u2014 "),UK=a("a"),bDr=o("FlaxDistilBertForTokenClassification"),vDr=o(" (DistilBERT model)"),FDr=l(),I3=a("li"),IEe=a("strong"),TDr=o("electra"),MDr=o(" \u2014 "),JK=a("a"),EDr=o("FlaxElectraForTokenClassification"),CDr=o(" (ELECTRA model)"),wDr=l(),N3=a("li"),NEe=a("strong"),ADr=o("roberta"),yDr=o(" \u2014 "),YK=a("a"),LDr=o("FlaxRobertaForTokenClassification"),xDr=o(" (RoBERTa model)"),$Dr=l(),q3=a("li"),qEe=a("strong"),kDr=o("roformer"),SDr=o(" \u2014 "),KK=a("a"),RDr=o("FlaxRoFormerForTokenClassification"),PDr=o(" (RoFormer model)"),BDr=l(),j3=a("li"),jEe=a("strong"),IDr=o("xlm-roberta"),NDr=o(" \u2014 "),ZK=a("a"),qDr=o("FlaxXLMRobertaForTokenClassification"),jDr=o(" (XLM-RoBERTa model)"),DDr=l(),F(D3.$$.fragment),gDe=l(),Zc=a("h2"),G3=a("a"),DEe=a("span"),F(_x.$$.fragment),GDr=l(),GEe=a("span"),ODr=o("FlaxAutoModelForMultipleChoice"),hDe=l(),vr=a("div"),F(ux.$$.fragment),VDr=l(),ef=a("p"),XDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eZ=a("a"),zDr=o("from_pretrained()"),WDr=o(" class method or the "),oZ=a("a"),QDr=o("from_config()"),HDr=o(` class
method.`),UDr=l(),bx=a("p"),JDr=o("This class cannot be instantiated directly using "),OEe=a("code"),YDr=o("__init__()"),KDr=o(" (throws an error)."),ZDr=l(),Ut=a("div"),F(vx.$$.fragment),eGr=l(),VEe=a("p"),oGr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rGr=l(),of=a("p"),tGr=o(`Note:
Loading a model from its configuration file does `),XEe=a("strong"),aGr=o("not"),nGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=a("a"),sGr=o("from_pretrained()"),lGr=o(" to load the model weights."),iGr=l(),F(O3.$$.fragment),dGr=l(),Qr=a("div"),F(Fx.$$.fragment),cGr=l(),zEe=a("p"),fGr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mGr=l(),Mn=a("p"),gGr=o("The model class to instantiate is selected based on the "),WEe=a("code"),hGr=o("model_type"),pGr=o(` property of the config object (either
passed as an argument or loaded from `),QEe=a("code"),_Gr=o("pretrained_model_name_or_path"),uGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HEe=a("code"),bGr=o("pretrained_model_name_or_path"),vGr=o(":"),FGr=l(),Ge=a("ul"),V3=a("li"),UEe=a("strong"),TGr=o("albert"),MGr=o(" \u2014 "),tZ=a("a"),EGr=o("FlaxAlbertForMultipleChoice"),CGr=o(" (ALBERT model)"),wGr=l(),X3=a("li"),JEe=a("strong"),AGr=o("bert"),yGr=o(" \u2014 "),aZ=a("a"),LGr=o("FlaxBertForMultipleChoice"),xGr=o(" (BERT model)"),$Gr=l(),z3=a("li"),YEe=a("strong"),kGr=o("big_bird"),SGr=o(" \u2014 "),nZ=a("a"),RGr=o("FlaxBigBirdForMultipleChoice"),PGr=o(" (BigBird model)"),BGr=l(),W3=a("li"),KEe=a("strong"),IGr=o("distilbert"),NGr=o(" \u2014 "),sZ=a("a"),qGr=o("FlaxDistilBertForMultipleChoice"),jGr=o(" (DistilBERT model)"),DGr=l(),Q3=a("li"),ZEe=a("strong"),GGr=o("electra"),OGr=o(" \u2014 "),lZ=a("a"),VGr=o("FlaxElectraForMultipleChoice"),XGr=o(" (ELECTRA model)"),zGr=l(),H3=a("li"),eCe=a("strong"),WGr=o("roberta"),QGr=o(" \u2014 "),iZ=a("a"),HGr=o("FlaxRobertaForMultipleChoice"),UGr=o(" (RoBERTa model)"),JGr=l(),U3=a("li"),oCe=a("strong"),YGr=o("roformer"),KGr=o(" \u2014 "),dZ=a("a"),ZGr=o("FlaxRoFormerForMultipleChoice"),eOr=o(" (RoFormer model)"),oOr=l(),J3=a("li"),rCe=a("strong"),rOr=o("xlm-roberta"),tOr=o(" \u2014 "),cZ=a("a"),aOr=o("FlaxXLMRobertaForMultipleChoice"),nOr=o(" (XLM-RoBERTa model)"),sOr=l(),F(Y3.$$.fragment),pDe=l(),rf=a("h2"),K3=a("a"),tCe=a("span"),F(Tx.$$.fragment),lOr=l(),aCe=a("span"),iOr=o("FlaxAutoModelForNextSentencePrediction"),_De=l(),Fr=a("div"),F(Mx.$$.fragment),dOr=l(),tf=a("p"),cOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fZ=a("a"),fOr=o("from_pretrained()"),mOr=o(" class method or the "),mZ=a("a"),gOr=o("from_config()"),hOr=o(` class
method.`),pOr=l(),Ex=a("p"),_Or=o("This class cannot be instantiated directly using "),nCe=a("code"),uOr=o("__init__()"),bOr=o(" (throws an error)."),vOr=l(),Jt=a("div"),F(Cx.$$.fragment),FOr=l(),sCe=a("p"),TOr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),MOr=l(),af=a("p"),EOr=o(`Note:
Loading a model from its configuration file does `),lCe=a("strong"),COr=o("not"),wOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=a("a"),AOr=o("from_pretrained()"),yOr=o(" to load the model weights."),LOr=l(),F(Z3.$$.fragment),xOr=l(),Hr=a("div"),F(wx.$$.fragment),$Or=l(),iCe=a("p"),kOr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),SOr=l(),En=a("p"),ROr=o("The model class to instantiate is selected based on the "),dCe=a("code"),POr=o("model_type"),BOr=o(` property of the config object (either
passed as an argument or loaded from `),cCe=a("code"),IOr=o("pretrained_model_name_or_path"),NOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fCe=a("code"),qOr=o("pretrained_model_name_or_path"),jOr=o(":"),DOr=l(),mCe=a("ul"),ew=a("li"),gCe=a("strong"),GOr=o("bert"),OOr=o(" \u2014 "),hZ=a("a"),VOr=o("FlaxBertForNextSentencePrediction"),XOr=o(" (BERT model)"),zOr=l(),F(ow.$$.fragment),uDe=l(),nf=a("h2"),rw=a("a"),hCe=a("span"),F(Ax.$$.fragment),WOr=l(),pCe=a("span"),QOr=o("FlaxAutoModelForImageClassification"),bDe=l(),Tr=a("div"),F(yx.$$.fragment),HOr=l(),sf=a("p"),UOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pZ=a("a"),JOr=o("from_pretrained()"),YOr=o(" class method or the "),_Z=a("a"),KOr=o("from_config()"),ZOr=o(` class
method.`),eVr=l(),Lx=a("p"),oVr=o("This class cannot be instantiated directly using "),_Ce=a("code"),rVr=o("__init__()"),tVr=o(" (throws an error)."),aVr=l(),Yt=a("div"),F(xx.$$.fragment),nVr=l(),uCe=a("p"),sVr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lVr=l(),lf=a("p"),iVr=o(`Note:
Loading a model from its configuration file does `),bCe=a("strong"),dVr=o("not"),cVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=a("a"),fVr=o("from_pretrained()"),mVr=o(" to load the model weights."),gVr=l(),F(tw.$$.fragment),hVr=l(),Ur=a("div"),F($x.$$.fragment),pVr=l(),vCe=a("p"),_Vr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),uVr=l(),Cn=a("p"),bVr=o("The model class to instantiate is selected based on the "),FCe=a("code"),vVr=o("model_type"),FVr=o(` property of the config object (either
passed as an argument or loaded from `),TCe=a("code"),TVr=o("pretrained_model_name_or_path"),MVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MCe=a("code"),EVr=o("pretrained_model_name_or_path"),CVr=o(":"),wVr=l(),kx=a("ul"),aw=a("li"),ECe=a("strong"),AVr=o("beit"),yVr=o(" \u2014 "),bZ=a("a"),LVr=o("FlaxBeitForImageClassification"),xVr=o(" (BEiT model)"),$Vr=l(),nw=a("li"),CCe=a("strong"),kVr=o("vit"),SVr=o(" \u2014 "),vZ=a("a"),RVr=o("FlaxViTForImageClassification"),PVr=o(" (ViT model)"),BVr=l(),F(sw.$$.fragment),vDe=l(),df=a("h2"),lw=a("a"),wCe=a("span"),F(Sx.$$.fragment),IVr=l(),ACe=a("span"),NVr=o("FlaxAutoModelForVision2Seq"),FDe=l(),Mr=a("div"),F(Rx.$$.fragment),qVr=l(),cf=a("p"),jVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FZ=a("a"),DVr=o("from_pretrained()"),GVr=o(" class method or the "),TZ=a("a"),OVr=o("from_config()"),VVr=o(` class
method.`),XVr=l(),Px=a("p"),zVr=o("This class cannot be instantiated directly using "),yCe=a("code"),WVr=o("__init__()"),QVr=o(" (throws an error)."),HVr=l(),Kt=a("div"),F(Bx.$$.fragment),UVr=l(),LCe=a("p"),JVr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),YVr=l(),ff=a("p"),KVr=o(`Note:
Loading a model from its configuration file does `),xCe=a("strong"),ZVr=o("not"),eXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=a("a"),oXr=o("from_pretrained()"),rXr=o(" to load the model weights."),tXr=l(),F(iw.$$.fragment),aXr=l(),Jr=a("div"),F(Ix.$$.fragment),nXr=l(),$Ce=a("p"),sXr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lXr=l(),wn=a("p"),iXr=o("The model class to instantiate is selected based on the "),kCe=a("code"),dXr=o("model_type"),cXr=o(` property of the config object (either
passed as an argument or loaded from `),SCe=a("code"),fXr=o("pretrained_model_name_or_path"),mXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RCe=a("code"),gXr=o("pretrained_model_name_or_path"),hXr=o(":"),pXr=l(),PCe=a("ul"),dw=a("li"),BCe=a("strong"),_Xr=o("vision-encoder-decoder"),uXr=o(" \u2014 "),EZ=a("a"),bXr=o("FlaxVisionEncoderDecoderModel"),vXr=o(" (Vision Encoder decoder model)"),FXr=l(),F(cw.$$.fragment),this.h()},l(f){const u=ckt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Nx=s(p);m=n(Nx,"A",{id:!0,class:!0,href:!0});var ICe=s(m);_=n(ICe,"SPAN",{});var NCe=s(_);T(d.$$.fragment,NCe),NCe.forEach(t),ICe.forEach(t),h=i(Nx),Mo=n(Nx,"SPAN",{});var qCe=s(Mo);fi=r(qCe,"Auto Classes"),qCe.forEach(t),Nx.forEach(t),pf=i(f),rt=n(f,"P",{});var qx=s(rt);mi=r(qx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(qx,"CODE",{});var jCe=s(gi);LA=r(jCe,"from_pretrained()"),jCe.forEach(t),_f=r(qx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var DCe=s(yn);xA=r(DCe,"AutoConfig"),DCe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var GCe=s(xn);$A=r(GCe,"AutoModel"),GCe.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var OCe=s($n);kA=r(OCe,"AutoTokenizer"),OCe.forEach(t),_i=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),uf=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var jx=s(Ae);J$=r(jx,"will create a model that is an instance of "),ui=n(jx,"A",{href:!0});var VCe=s(ui);Y$=r(VCe,"BertModel"),VCe.forEach(t),K$=r(jx,"."),jx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Dx=s(wa);Z$=r(Dx,"There is one class of "),bf=n(Dx,"CODE",{});var XCe=s(bf);ek=r(XCe,"AutoModel"),XCe.forEach(t),xOe=r(Dx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Dx.forEach(t),bqe=i(f),bi=n(f,"H2",{class:!0});var Gx=s(bi);vf=n(Gx,"A",{id:!0,class:!0,href:!0});var zCe=s(vf);_oe=n(zCe,"SPAN",{});var WCe=s(_oe);T(SA.$$.fragment,WCe),WCe.forEach(t),zCe.forEach(t),$Oe=i(Gx),uoe=n(Gx,"SPAN",{});var QCe=s(uoe);kOe=r(QCe,"Extending the Auto Classes"),QCe.forEach(t),Gx.forEach(t),vqe=i(f),kn=n(f,"P",{});var mf=s(kn);SOe=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),boe=n(mf,"CODE",{});var HCe=s(boe);ROe=r(HCe,"NewModel"),HCe.forEach(t),POe=r(mf,", make sure you have a "),voe=n(mf,"CODE",{});var UCe=s(voe);BOe=r(UCe,"NewModelConfig"),UCe.forEach(t),IOe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),Fqe=i(f),T(RA.$$.fragment,f),Tqe=i(f),ok=n(f,"P",{});var JCe=s(ok);NOe=r(JCe,"You will then be able to use the auto classes like you would usually do!"),JCe.forEach(t),Mqe=i(f),T(Ff.$$.fragment,f),Eqe=i(f),vi=n(f,"H2",{class:!0});var Ox=s(vi);Tf=n(Ox,"A",{id:!0,class:!0,href:!0});var YCe=s(Tf);Foe=n(YCe,"SPAN",{});var KCe=s(Foe);T(PA.$$.fragment,KCe),KCe.forEach(t),YCe.forEach(t),qOe=i(Ox),Toe=n(Ox,"SPAN",{});var ZCe=s(Toe);jOe=r(ZCe,"AutoConfig"),ZCe.forEach(t),Ox.forEach(t),Cqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(BA.$$.fragment,et),DOe=i(et),IA=n(et,"P",{});var Vx=s(IA);GOe=r(Vx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),rk=n(Vx,"A",{href:!0});var e5e=s(rk);OOe=r(e5e,"from_pretrained()"),e5e.forEach(t),VOe=r(Vx," class method."),Vx.forEach(t),XOe=i(et),NA=n(et,"P",{});var Xx=s(NA);zOe=r(Xx,"This class cannot be instantiated directly using "),Moe=n(Xx,"CODE",{});var o5e=s(Moe);WOe=r(o5e,"__init__()"),o5e.forEach(t),QOe=r(Xx," (throws an error)."),Xx.forEach(t),HOe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(qA.$$.fragment,ot),UOe=i(ot),Eoe=n(ot,"P",{});var r5e=s(Eoe);JOe=r(r5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),r5e.forEach(t),YOe=i(ot),Fi=n(ot,"P",{});var gf=s(Fi);KOe=r(gf,"The configuration class to instantiate is selected based on the "),Coe=n(gf,"CODE",{});var t5e=s(Coe);ZOe=r(t5e,"model_type"),t5e.forEach(t),eVe=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),woe=n(gf,"CODE",{});var a5e=s(woe);oVe=r(a5e,"pretrained_model_name_or_path"),a5e.forEach(t),rVe=r(gf,":"),gf.forEach(t),tVe=i(ot),A=n(ot,"UL",{});var y=s(A);Mf=n(y,"LI",{});var fw=s(Mf);Aoe=n(fw,"STRONG",{});var n5e=s(Aoe);aVe=r(n5e,"albert"),n5e.forEach(t),nVe=r(fw," \u2014 "),tk=n(fw,"A",{href:!0});var s5e=s(tk);sVe=r(s5e,"AlbertConfig"),s5e.forEach(t),lVe=r(fw," (ALBERT model)"),fw.forEach(t),iVe=i(y),Ef=n(y,"LI",{});var mw=s(Ef);yoe=n(mw,"STRONG",{});var l5e=s(yoe);dVe=r(l5e,"bart"),l5e.forEach(t),cVe=r(mw," \u2014 "),ak=n(mw,"A",{href:!0});var i5e=s(ak);fVe=r(i5e,"BartConfig"),i5e.forEach(t),mVe=r(mw," (BART model)"),mw.forEach(t),gVe=i(y),Cf=n(y,"LI",{});var gw=s(Cf);Loe=n(gw,"STRONG",{});var d5e=s(Loe);hVe=r(d5e,"beit"),d5e.forEach(t),pVe=r(gw," \u2014 "),nk=n(gw,"A",{href:!0});var c5e=s(nk);_Ve=r(c5e,"BeitConfig"),c5e.forEach(t),uVe=r(gw," (BEiT model)"),gw.forEach(t),bVe=i(y),wf=n(y,"LI",{});var hw=s(wf);xoe=n(hw,"STRONG",{});var f5e=s(xoe);vVe=r(f5e,"bert"),f5e.forEach(t),FVe=r(hw," \u2014 "),sk=n(hw,"A",{href:!0});var m5e=s(sk);TVe=r(m5e,"BertConfig"),m5e.forEach(t),MVe=r(hw," (BERT model)"),hw.forEach(t),EVe=i(y),Af=n(y,"LI",{});var pw=s(Af);$oe=n(pw,"STRONG",{});var g5e=s($oe);CVe=r(g5e,"bert-generation"),g5e.forEach(t),wVe=r(pw," \u2014 "),lk=n(pw,"A",{href:!0});var h5e=s(lk);AVe=r(h5e,"BertGenerationConfig"),h5e.forEach(t),yVe=r(pw," (Bert Generation model)"),pw.forEach(t),LVe=i(y),yf=n(y,"LI",{});var _w=s(yf);koe=n(_w,"STRONG",{});var p5e=s(koe);xVe=r(p5e,"big_bird"),p5e.forEach(t),$Ve=r(_w," \u2014 "),ik=n(_w,"A",{href:!0});var _5e=s(ik);kVe=r(_5e,"BigBirdConfig"),_5e.forEach(t),SVe=r(_w," (BigBird model)"),_w.forEach(t),RVe=i(y),Lf=n(y,"LI",{});var uw=s(Lf);Soe=n(uw,"STRONG",{});var u5e=s(Soe);PVe=r(u5e,"bigbird_pegasus"),u5e.forEach(t),BVe=r(uw," \u2014 "),dk=n(uw,"A",{href:!0});var b5e=s(dk);IVe=r(b5e,"BigBirdPegasusConfig"),b5e.forEach(t),NVe=r(uw," (BigBirdPegasus model)"),uw.forEach(t),qVe=i(y),xf=n(y,"LI",{});var bw=s(xf);Roe=n(bw,"STRONG",{});var v5e=s(Roe);jVe=r(v5e,"blenderbot"),v5e.forEach(t),DVe=r(bw," \u2014 "),ck=n(bw,"A",{href:!0});var F5e=s(ck);GVe=r(F5e,"BlenderbotConfig"),F5e.forEach(t),OVe=r(bw," (Blenderbot model)"),bw.forEach(t),VVe=i(y),$f=n(y,"LI",{});var vw=s($f);Poe=n(vw,"STRONG",{});var T5e=s(Poe);XVe=r(T5e,"blenderbot-small"),T5e.forEach(t),zVe=r(vw," \u2014 "),fk=n(vw,"A",{href:!0});var M5e=s(fk);WVe=r(M5e,"BlenderbotSmallConfig"),M5e.forEach(t),QVe=r(vw," (BlenderbotSmall model)"),vw.forEach(t),HVe=i(y),kf=n(y,"LI",{});var Fw=s(kf);Boe=n(Fw,"STRONG",{});var E5e=s(Boe);UVe=r(E5e,"bloom"),E5e.forEach(t),JVe=r(Fw," \u2014 "),mk=n(Fw,"A",{href:!0});var C5e=s(mk);YVe=r(C5e,"BloomConfig"),C5e.forEach(t),KVe=r(Fw," (BLOOM model)"),Fw.forEach(t),ZVe=i(y),Sf=n(y,"LI",{});var Tw=s(Sf);Ioe=n(Tw,"STRONG",{});var w5e=s(Ioe);eXe=r(w5e,"camembert"),w5e.forEach(t),oXe=r(Tw," \u2014 "),gk=n(Tw,"A",{href:!0});var A5e=s(gk);rXe=r(A5e,"CamembertConfig"),A5e.forEach(t),tXe=r(Tw," (CamemBERT model)"),Tw.forEach(t),aXe=i(y),Rf=n(y,"LI",{});var Mw=s(Rf);Noe=n(Mw,"STRONG",{});var y5e=s(Noe);nXe=r(y5e,"canine"),y5e.forEach(t),sXe=r(Mw," \u2014 "),hk=n(Mw,"A",{href:!0});var L5e=s(hk);lXe=r(L5e,"CanineConfig"),L5e.forEach(t),iXe=r(Mw," (Canine model)"),Mw.forEach(t),dXe=i(y),Pf=n(y,"LI",{});var Ew=s(Pf);qoe=n(Ew,"STRONG",{});var x5e=s(qoe);cXe=r(x5e,"clip"),x5e.forEach(t),fXe=r(Ew," \u2014 "),pk=n(Ew,"A",{href:!0});var $5e=s(pk);mXe=r($5e,"CLIPConfig"),$5e.forEach(t),gXe=r(Ew," (CLIP model)"),Ew.forEach(t),hXe=i(y),Bf=n(y,"LI",{});var Cw=s(Bf);joe=n(Cw,"STRONG",{});var k5e=s(joe);pXe=r(k5e,"convbert"),k5e.forEach(t),_Xe=r(Cw," \u2014 "),_k=n(Cw,"A",{href:!0});var S5e=s(_k);uXe=r(S5e,"ConvBertConfig"),S5e.forEach(t),bXe=r(Cw," (ConvBERT model)"),Cw.forEach(t),vXe=i(y),If=n(y,"LI",{});var ww=s(If);Doe=n(ww,"STRONG",{});var R5e=s(Doe);FXe=r(R5e,"convnext"),R5e.forEach(t),TXe=r(ww," \u2014 "),uk=n(ww,"A",{href:!0});var P5e=s(uk);MXe=r(P5e,"ConvNextConfig"),P5e.forEach(t),EXe=r(ww," (ConvNext model)"),ww.forEach(t),CXe=i(y),Nf=n(y,"LI",{});var Aw=s(Nf);Goe=n(Aw,"STRONG",{});var B5e=s(Goe);wXe=r(B5e,"ctrl"),B5e.forEach(t),AXe=r(Aw," \u2014 "),bk=n(Aw,"A",{href:!0});var I5e=s(bk);yXe=r(I5e,"CTRLConfig"),I5e.forEach(t),LXe=r(Aw," (CTRL model)"),Aw.forEach(t),xXe=i(y),qf=n(y,"LI",{});var yw=s(qf);Ooe=n(yw,"STRONG",{});var N5e=s(Ooe);$Xe=r(N5e,"cvt"),N5e.forEach(t),kXe=r(yw," \u2014 "),vk=n(yw,"A",{href:!0});var q5e=s(vk);SXe=r(q5e,"CvtConfig"),q5e.forEach(t),RXe=r(yw," (CvT model)"),yw.forEach(t),PXe=i(y),jf=n(y,"LI",{});var Lw=s(jf);Voe=n(Lw,"STRONG",{});var j5e=s(Voe);BXe=r(j5e,"data2vec-audio"),j5e.forEach(t),IXe=r(Lw," \u2014 "),Fk=n(Lw,"A",{href:!0});var D5e=s(Fk);NXe=r(D5e,"Data2VecAudioConfig"),D5e.forEach(t),qXe=r(Lw," (Data2VecAudio model)"),Lw.forEach(t),jXe=i(y),Df=n(y,"LI",{});var xw=s(Df);Xoe=n(xw,"STRONG",{});var G5e=s(Xoe);DXe=r(G5e,"data2vec-text"),G5e.forEach(t),GXe=r(xw," \u2014 "),Tk=n(xw,"A",{href:!0});var O5e=s(Tk);OXe=r(O5e,"Data2VecTextConfig"),O5e.forEach(t),VXe=r(xw," (Data2VecText model)"),xw.forEach(t),XXe=i(y),Gf=n(y,"LI",{});var $w=s(Gf);zoe=n($w,"STRONG",{});var V5e=s(zoe);zXe=r(V5e,"data2vec-vision"),V5e.forEach(t),WXe=r($w," \u2014 "),Mk=n($w,"A",{href:!0});var X5e=s(Mk);QXe=r(X5e,"Data2VecVisionConfig"),X5e.forEach(t),HXe=r($w," (Data2VecVision model)"),$w.forEach(t),UXe=i(y),Of=n(y,"LI",{});var kw=s(Of);Woe=n(kw,"STRONG",{});var z5e=s(Woe);JXe=r(z5e,"deberta"),z5e.forEach(t),YXe=r(kw," \u2014 "),Ek=n(kw,"A",{href:!0});var W5e=s(Ek);KXe=r(W5e,"DebertaConfig"),W5e.forEach(t),ZXe=r(kw," (DeBERTa model)"),kw.forEach(t),eze=i(y),Vf=n(y,"LI",{});var Sw=s(Vf);Qoe=n(Sw,"STRONG",{});var Q5e=s(Qoe);oze=r(Q5e,"deberta-v2"),Q5e.forEach(t),rze=r(Sw," \u2014 "),Ck=n(Sw,"A",{href:!0});var H5e=s(Ck);tze=r(H5e,"DebertaV2Config"),H5e.forEach(t),aze=r(Sw," (DeBERTa-v2 model)"),Sw.forEach(t),nze=i(y),Xf=n(y,"LI",{});var Rw=s(Xf);Hoe=n(Rw,"STRONG",{});var U5e=s(Hoe);sze=r(U5e,"decision_transformer"),U5e.forEach(t),lze=r(Rw," \u2014 "),wk=n(Rw,"A",{href:!0});var MXr=s(wk);ize=r(MXr,"DecisionTransformerConfig"),MXr.forEach(t),dze=r(Rw," (Decision Transformer model)"),Rw.forEach(t),cze=i(y),zf=n(y,"LI",{});var J5e=s(zf);Uoe=n(J5e,"STRONG",{});var EXr=s(Uoe);fze=r(EXr,"deit"),EXr.forEach(t),mze=r(J5e," \u2014 "),Ak=n(J5e,"A",{href:!0});var CXr=s(Ak);gze=r(CXr,"DeiTConfig"),CXr.forEach(t),hze=r(J5e," (DeiT model)"),J5e.forEach(t),pze=i(y),Wf=n(y,"LI",{});var Y5e=s(Wf);Joe=n(Y5e,"STRONG",{});var wXr=s(Joe);_ze=r(wXr,"detr"),wXr.forEach(t),uze=r(Y5e," \u2014 "),yk=n(Y5e,"A",{href:!0});var AXr=s(yk);bze=r(AXr,"DetrConfig"),AXr.forEach(t),vze=r(Y5e," (DETR model)"),Y5e.forEach(t),Fze=i(y),Qf=n(y,"LI",{});var K5e=s(Qf);Yoe=n(K5e,"STRONG",{});var yXr=s(Yoe);Tze=r(yXr,"distilbert"),yXr.forEach(t),Mze=r(K5e," \u2014 "),Lk=n(K5e,"A",{href:!0});var LXr=s(Lk);Eze=r(LXr,"DistilBertConfig"),LXr.forEach(t),Cze=r(K5e," (DistilBERT model)"),K5e.forEach(t),wze=i(y),Hf=n(y,"LI",{});var Z5e=s(Hf);Koe=n(Z5e,"STRONG",{});var xXr=s(Koe);Aze=r(xXr,"dpr"),xXr.forEach(t),yze=r(Z5e," \u2014 "),xk=n(Z5e,"A",{href:!0});var $Xr=s(xk);Lze=r($Xr,"DPRConfig"),$Xr.forEach(t),xze=r(Z5e," (DPR model)"),Z5e.forEach(t),$ze=i(y),Uf=n(y,"LI",{});var e3e=s(Uf);Zoe=n(e3e,"STRONG",{});var kXr=s(Zoe);kze=r(kXr,"dpt"),kXr.forEach(t),Sze=r(e3e," \u2014 "),$k=n(e3e,"A",{href:!0});var SXr=s($k);Rze=r(SXr,"DPTConfig"),SXr.forEach(t),Pze=r(e3e," (DPT model)"),e3e.forEach(t),Bze=i(y),Jf=n(y,"LI",{});var o3e=s(Jf);ere=n(o3e,"STRONG",{});var RXr=s(ere);Ize=r(RXr,"electra"),RXr.forEach(t),Nze=r(o3e," \u2014 "),kk=n(o3e,"A",{href:!0});var PXr=s(kk);qze=r(PXr,"ElectraConfig"),PXr.forEach(t),jze=r(o3e," (ELECTRA model)"),o3e.forEach(t),Dze=i(y),Yf=n(y,"LI",{});var r3e=s(Yf);ore=n(r3e,"STRONG",{});var BXr=s(ore);Gze=r(BXr,"encoder-decoder"),BXr.forEach(t),Oze=r(r3e," \u2014 "),Sk=n(r3e,"A",{href:!0});var IXr=s(Sk);Vze=r(IXr,"EncoderDecoderConfig"),IXr.forEach(t),Xze=r(r3e," (Encoder decoder model)"),r3e.forEach(t),zze=i(y),Kf=n(y,"LI",{});var t3e=s(Kf);rre=n(t3e,"STRONG",{});var NXr=s(rre);Wze=r(NXr,"flaubert"),NXr.forEach(t),Qze=r(t3e," \u2014 "),Rk=n(t3e,"A",{href:!0});var qXr=s(Rk);Hze=r(qXr,"FlaubertConfig"),qXr.forEach(t),Uze=r(t3e," (FlauBERT model)"),t3e.forEach(t),Jze=i(y),Zf=n(y,"LI",{});var a3e=s(Zf);tre=n(a3e,"STRONG",{});var jXr=s(tre);Yze=r(jXr,"flava"),jXr.forEach(t),Kze=r(a3e," \u2014 "),Pk=n(a3e,"A",{href:!0});var DXr=s(Pk);Zze=r(DXr,"FlavaConfig"),DXr.forEach(t),eWe=r(a3e," (Flava model)"),a3e.forEach(t),oWe=i(y),em=n(y,"LI",{});var n3e=s(em);are=n(n3e,"STRONG",{});var GXr=s(are);rWe=r(GXr,"fnet"),GXr.forEach(t),tWe=r(n3e," \u2014 "),Bk=n(n3e,"A",{href:!0});var OXr=s(Bk);aWe=r(OXr,"FNetConfig"),OXr.forEach(t),nWe=r(n3e," (FNet model)"),n3e.forEach(t),sWe=i(y),om=n(y,"LI",{});var s3e=s(om);nre=n(s3e,"STRONG",{});var VXr=s(nre);lWe=r(VXr,"fsmt"),VXr.forEach(t),iWe=r(s3e," \u2014 "),Ik=n(s3e,"A",{href:!0});var XXr=s(Ik);dWe=r(XXr,"FSMTConfig"),XXr.forEach(t),cWe=r(s3e," (FairSeq Machine-Translation model)"),s3e.forEach(t),fWe=i(y),rm=n(y,"LI",{});var l3e=s(rm);sre=n(l3e,"STRONG",{});var zXr=s(sre);mWe=r(zXr,"funnel"),zXr.forEach(t),gWe=r(l3e," \u2014 "),Nk=n(l3e,"A",{href:!0});var WXr=s(Nk);hWe=r(WXr,"FunnelConfig"),WXr.forEach(t),pWe=r(l3e," (Funnel Transformer model)"),l3e.forEach(t),_We=i(y),tm=n(y,"LI",{});var i3e=s(tm);lre=n(i3e,"STRONG",{});var QXr=s(lre);uWe=r(QXr,"glpn"),QXr.forEach(t),bWe=r(i3e," \u2014 "),qk=n(i3e,"A",{href:!0});var HXr=s(qk);vWe=r(HXr,"GLPNConfig"),HXr.forEach(t),FWe=r(i3e," (GLPN model)"),i3e.forEach(t),TWe=i(y),am=n(y,"LI",{});var d3e=s(am);ire=n(d3e,"STRONG",{});var UXr=s(ire);MWe=r(UXr,"gpt2"),UXr.forEach(t),EWe=r(d3e," \u2014 "),jk=n(d3e,"A",{href:!0});var JXr=s(jk);CWe=r(JXr,"GPT2Config"),JXr.forEach(t),wWe=r(d3e," (OpenAI GPT-2 model)"),d3e.forEach(t),AWe=i(y),nm=n(y,"LI",{});var c3e=s(nm);dre=n(c3e,"STRONG",{});var YXr=s(dre);yWe=r(YXr,"gpt_neo"),YXr.forEach(t),LWe=r(c3e," \u2014 "),Dk=n(c3e,"A",{href:!0});var KXr=s(Dk);xWe=r(KXr,"GPTNeoConfig"),KXr.forEach(t),$We=r(c3e," (GPT Neo model)"),c3e.forEach(t),kWe=i(y),sm=n(y,"LI",{});var f3e=s(sm);cre=n(f3e,"STRONG",{});var ZXr=s(cre);SWe=r(ZXr,"gpt_neox"),ZXr.forEach(t),RWe=r(f3e," \u2014 "),Gk=n(f3e,"A",{href:!0});var ezr=s(Gk);PWe=r(ezr,"GPTNeoXConfig"),ezr.forEach(t),BWe=r(f3e," (GPT NeoX model)"),f3e.forEach(t),IWe=i(y),lm=n(y,"LI",{});var m3e=s(lm);fre=n(m3e,"STRONG",{});var ozr=s(fre);NWe=r(ozr,"gptj"),ozr.forEach(t),qWe=r(m3e," \u2014 "),Ok=n(m3e,"A",{href:!0});var rzr=s(Ok);jWe=r(rzr,"GPTJConfig"),rzr.forEach(t),DWe=r(m3e," (GPT-J model)"),m3e.forEach(t),GWe=i(y),im=n(y,"LI",{});var g3e=s(im);mre=n(g3e,"STRONG",{});var tzr=s(mre);OWe=r(tzr,"hubert"),tzr.forEach(t),VWe=r(g3e," \u2014 "),Vk=n(g3e,"A",{href:!0});var azr=s(Vk);XWe=r(azr,"HubertConfig"),azr.forEach(t),zWe=r(g3e," (Hubert model)"),g3e.forEach(t),WWe=i(y),dm=n(y,"LI",{});var h3e=s(dm);gre=n(h3e,"STRONG",{});var nzr=s(gre);QWe=r(nzr,"ibert"),nzr.forEach(t),HWe=r(h3e," \u2014 "),Xk=n(h3e,"A",{href:!0});var szr=s(Xk);UWe=r(szr,"IBertConfig"),szr.forEach(t),JWe=r(h3e," (I-BERT model)"),h3e.forEach(t),YWe=i(y),cm=n(y,"LI",{});var p3e=s(cm);hre=n(p3e,"STRONG",{});var lzr=s(hre);KWe=r(lzr,"imagegpt"),lzr.forEach(t),ZWe=r(p3e," \u2014 "),zk=n(p3e,"A",{href:!0});var izr=s(zk);eQe=r(izr,"ImageGPTConfig"),izr.forEach(t),oQe=r(p3e," (ImageGPT model)"),p3e.forEach(t),rQe=i(y),fm=n(y,"LI",{});var _3e=s(fm);pre=n(_3e,"STRONG",{});var dzr=s(pre);tQe=r(dzr,"layoutlm"),dzr.forEach(t),aQe=r(_3e," \u2014 "),Wk=n(_3e,"A",{href:!0});var czr=s(Wk);nQe=r(czr,"LayoutLMConfig"),czr.forEach(t),sQe=r(_3e," (LayoutLM model)"),_3e.forEach(t),lQe=i(y),mm=n(y,"LI",{});var u3e=s(mm);_re=n(u3e,"STRONG",{});var fzr=s(_re);iQe=r(fzr,"layoutlmv2"),fzr.forEach(t),dQe=r(u3e," \u2014 "),Qk=n(u3e,"A",{href:!0});var mzr=s(Qk);cQe=r(mzr,"LayoutLMv2Config"),mzr.forEach(t),fQe=r(u3e," (LayoutLMv2 model)"),u3e.forEach(t),mQe=i(y),gm=n(y,"LI",{});var b3e=s(gm);ure=n(b3e,"STRONG",{});var gzr=s(ure);gQe=r(gzr,"layoutlmv3"),gzr.forEach(t),hQe=r(b3e," \u2014 "),Hk=n(b3e,"A",{href:!0});var hzr=s(Hk);pQe=r(hzr,"LayoutLMv3Config"),hzr.forEach(t),_Qe=r(b3e," (LayoutLMv3 model)"),b3e.forEach(t),uQe=i(y),hm=n(y,"LI",{});var v3e=s(hm);bre=n(v3e,"STRONG",{});var pzr=s(bre);bQe=r(pzr,"led"),pzr.forEach(t),vQe=r(v3e," \u2014 "),Uk=n(v3e,"A",{href:!0});var _zr=s(Uk);FQe=r(_zr,"LEDConfig"),_zr.forEach(t),TQe=r(v3e," (LED model)"),v3e.forEach(t),MQe=i(y),pm=n(y,"LI",{});var F3e=s(pm);vre=n(F3e,"STRONG",{});var uzr=s(vre);EQe=r(uzr,"longformer"),uzr.forEach(t),CQe=r(F3e," \u2014 "),Jk=n(F3e,"A",{href:!0});var bzr=s(Jk);wQe=r(bzr,"LongformerConfig"),bzr.forEach(t),AQe=r(F3e," (Longformer model)"),F3e.forEach(t),yQe=i(y),_m=n(y,"LI",{});var T3e=s(_m);Fre=n(T3e,"STRONG",{});var vzr=s(Fre);LQe=r(vzr,"luke"),vzr.forEach(t),xQe=r(T3e," \u2014 "),Yk=n(T3e,"A",{href:!0});var Fzr=s(Yk);$Qe=r(Fzr,"LukeConfig"),Fzr.forEach(t),kQe=r(T3e," (LUKE model)"),T3e.forEach(t),SQe=i(y),um=n(y,"LI",{});var M3e=s(um);Tre=n(M3e,"STRONG",{});var Tzr=s(Tre);RQe=r(Tzr,"lxmert"),Tzr.forEach(t),PQe=r(M3e," \u2014 "),Kk=n(M3e,"A",{href:!0});var Mzr=s(Kk);BQe=r(Mzr,"LxmertConfig"),Mzr.forEach(t),IQe=r(M3e," (LXMERT model)"),M3e.forEach(t),NQe=i(y),bm=n(y,"LI",{});var E3e=s(bm);Mre=n(E3e,"STRONG",{});var Ezr=s(Mre);qQe=r(Ezr,"m2m_100"),Ezr.forEach(t),jQe=r(E3e," \u2014 "),Zk=n(E3e,"A",{href:!0});var Czr=s(Zk);DQe=r(Czr,"M2M100Config"),Czr.forEach(t),GQe=r(E3e," (M2M100 model)"),E3e.forEach(t),OQe=i(y),vm=n(y,"LI",{});var C3e=s(vm);Ere=n(C3e,"STRONG",{});var wzr=s(Ere);VQe=r(wzr,"marian"),wzr.forEach(t),XQe=r(C3e," \u2014 "),eS=n(C3e,"A",{href:!0});var Azr=s(eS);zQe=r(Azr,"MarianConfig"),Azr.forEach(t),WQe=r(C3e," (Marian model)"),C3e.forEach(t),QQe=i(y),Fm=n(y,"LI",{});var w3e=s(Fm);Cre=n(w3e,"STRONG",{});var yzr=s(Cre);HQe=r(yzr,"maskformer"),yzr.forEach(t),UQe=r(w3e," \u2014 "),oS=n(w3e,"A",{href:!0});var Lzr=s(oS);JQe=r(Lzr,"MaskFormerConfig"),Lzr.forEach(t),YQe=r(w3e," (MaskFormer model)"),w3e.forEach(t),KQe=i(y),Tm=n(y,"LI",{});var A3e=s(Tm);wre=n(A3e,"STRONG",{});var xzr=s(wre);ZQe=r(xzr,"mbart"),xzr.forEach(t),eHe=r(A3e," \u2014 "),rS=n(A3e,"A",{href:!0});var $zr=s(rS);oHe=r($zr,"MBartConfig"),$zr.forEach(t),rHe=r(A3e," (mBART model)"),A3e.forEach(t),tHe=i(y),Mm=n(y,"LI",{});var y3e=s(Mm);Are=n(y3e,"STRONG",{});var kzr=s(Are);aHe=r(kzr,"megatron-bert"),kzr.forEach(t),nHe=r(y3e," \u2014 "),tS=n(y3e,"A",{href:!0});var Szr=s(tS);sHe=r(Szr,"MegatronBertConfig"),Szr.forEach(t),lHe=r(y3e," (MegatronBert model)"),y3e.forEach(t),iHe=i(y),Em=n(y,"LI",{});var L3e=s(Em);yre=n(L3e,"STRONG",{});var Rzr=s(yre);dHe=r(Rzr,"mobilebert"),Rzr.forEach(t),cHe=r(L3e," \u2014 "),aS=n(L3e,"A",{href:!0});var Pzr=s(aS);fHe=r(Pzr,"MobileBertConfig"),Pzr.forEach(t),mHe=r(L3e," (MobileBERT model)"),L3e.forEach(t),gHe=i(y),Cm=n(y,"LI",{});var x3e=s(Cm);Lre=n(x3e,"STRONG",{});var Bzr=s(Lre);hHe=r(Bzr,"mpnet"),Bzr.forEach(t),pHe=r(x3e," \u2014 "),nS=n(x3e,"A",{href:!0});var Izr=s(nS);_He=r(Izr,"MPNetConfig"),Izr.forEach(t),uHe=r(x3e," (MPNet model)"),x3e.forEach(t),bHe=i(y),wm=n(y,"LI",{});var $3e=s(wm);xre=n($3e,"STRONG",{});var Nzr=s(xre);vHe=r(Nzr,"mt5"),Nzr.forEach(t),FHe=r($3e," \u2014 "),sS=n($3e,"A",{href:!0});var qzr=s(sS);THe=r(qzr,"MT5Config"),qzr.forEach(t),MHe=r($3e," (mT5 model)"),$3e.forEach(t),EHe=i(y),Am=n(y,"LI",{});var k3e=s(Am);$re=n(k3e,"STRONG",{});var jzr=s($re);CHe=r(jzr,"nystromformer"),jzr.forEach(t),wHe=r(k3e," \u2014 "),lS=n(k3e,"A",{href:!0});var Dzr=s(lS);AHe=r(Dzr,"NystromformerConfig"),Dzr.forEach(t),yHe=r(k3e," (Nystromformer model)"),k3e.forEach(t),LHe=i(y),ym=n(y,"LI",{});var S3e=s(ym);kre=n(S3e,"STRONG",{});var Gzr=s(kre);xHe=r(Gzr,"openai-gpt"),Gzr.forEach(t),$He=r(S3e," \u2014 "),iS=n(S3e,"A",{href:!0});var Ozr=s(iS);kHe=r(Ozr,"OpenAIGPTConfig"),Ozr.forEach(t),SHe=r(S3e," (OpenAI GPT model)"),S3e.forEach(t),RHe=i(y),Lm=n(y,"LI",{});var R3e=s(Lm);Sre=n(R3e,"STRONG",{});var Vzr=s(Sre);PHe=r(Vzr,"opt"),Vzr.forEach(t),BHe=r(R3e," \u2014 "),dS=n(R3e,"A",{href:!0});var Xzr=s(dS);IHe=r(Xzr,"OPTConfig"),Xzr.forEach(t),NHe=r(R3e," (OPT model)"),R3e.forEach(t),qHe=i(y),xm=n(y,"LI",{});var P3e=s(xm);Rre=n(P3e,"STRONG",{});var zzr=s(Rre);jHe=r(zzr,"pegasus"),zzr.forEach(t),DHe=r(P3e," \u2014 "),cS=n(P3e,"A",{href:!0});var Wzr=s(cS);GHe=r(Wzr,"PegasusConfig"),Wzr.forEach(t),OHe=r(P3e," (Pegasus model)"),P3e.forEach(t),VHe=i(y),$m=n(y,"LI",{});var B3e=s($m);Pre=n(B3e,"STRONG",{});var Qzr=s(Pre);XHe=r(Qzr,"perceiver"),Qzr.forEach(t),zHe=r(B3e," \u2014 "),fS=n(B3e,"A",{href:!0});var Hzr=s(fS);WHe=r(Hzr,"PerceiverConfig"),Hzr.forEach(t),QHe=r(B3e," (Perceiver model)"),B3e.forEach(t),HHe=i(y),km=n(y,"LI",{});var I3e=s(km);Bre=n(I3e,"STRONG",{});var Uzr=s(Bre);UHe=r(Uzr,"plbart"),Uzr.forEach(t),JHe=r(I3e," \u2014 "),mS=n(I3e,"A",{href:!0});var Jzr=s(mS);YHe=r(Jzr,"PLBartConfig"),Jzr.forEach(t),KHe=r(I3e," (PLBart model)"),I3e.forEach(t),ZHe=i(y),Sm=n(y,"LI",{});var N3e=s(Sm);Ire=n(N3e,"STRONG",{});var Yzr=s(Ire);eUe=r(Yzr,"poolformer"),Yzr.forEach(t),oUe=r(N3e," \u2014 "),gS=n(N3e,"A",{href:!0});var Kzr=s(gS);rUe=r(Kzr,"PoolFormerConfig"),Kzr.forEach(t),tUe=r(N3e," (PoolFormer model)"),N3e.forEach(t),aUe=i(y),Rm=n(y,"LI",{});var q3e=s(Rm);Nre=n(q3e,"STRONG",{});var Zzr=s(Nre);nUe=r(Zzr,"prophetnet"),Zzr.forEach(t),sUe=r(q3e," \u2014 "),hS=n(q3e,"A",{href:!0});var eWr=s(hS);lUe=r(eWr,"ProphetNetConfig"),eWr.forEach(t),iUe=r(q3e," (ProphetNet model)"),q3e.forEach(t),dUe=i(y),Pm=n(y,"LI",{});var j3e=s(Pm);qre=n(j3e,"STRONG",{});var oWr=s(qre);cUe=r(oWr,"qdqbert"),oWr.forEach(t),fUe=r(j3e," \u2014 "),pS=n(j3e,"A",{href:!0});var rWr=s(pS);mUe=r(rWr,"QDQBertConfig"),rWr.forEach(t),gUe=r(j3e," (QDQBert model)"),j3e.forEach(t),hUe=i(y),Bm=n(y,"LI",{});var D3e=s(Bm);jre=n(D3e,"STRONG",{});var tWr=s(jre);pUe=r(tWr,"rag"),tWr.forEach(t),_Ue=r(D3e," \u2014 "),_S=n(D3e,"A",{href:!0});var aWr=s(_S);uUe=r(aWr,"RagConfig"),aWr.forEach(t),bUe=r(D3e," (RAG model)"),D3e.forEach(t),vUe=i(y),Im=n(y,"LI",{});var G3e=s(Im);Dre=n(G3e,"STRONG",{});var nWr=s(Dre);FUe=r(nWr,"realm"),nWr.forEach(t),TUe=r(G3e," \u2014 "),uS=n(G3e,"A",{href:!0});var sWr=s(uS);MUe=r(sWr,"RealmConfig"),sWr.forEach(t),EUe=r(G3e," (Realm model)"),G3e.forEach(t),CUe=i(y),Nm=n(y,"LI",{});var O3e=s(Nm);Gre=n(O3e,"STRONG",{});var lWr=s(Gre);wUe=r(lWr,"reformer"),lWr.forEach(t),AUe=r(O3e," \u2014 "),bS=n(O3e,"A",{href:!0});var iWr=s(bS);yUe=r(iWr,"ReformerConfig"),iWr.forEach(t),LUe=r(O3e," (Reformer model)"),O3e.forEach(t),xUe=i(y),qm=n(y,"LI",{});var V3e=s(qm);Ore=n(V3e,"STRONG",{});var dWr=s(Ore);$Ue=r(dWr,"regnet"),dWr.forEach(t),kUe=r(V3e," \u2014 "),vS=n(V3e,"A",{href:!0});var cWr=s(vS);SUe=r(cWr,"RegNetConfig"),cWr.forEach(t),RUe=r(V3e," (RegNet model)"),V3e.forEach(t),PUe=i(y),jm=n(y,"LI",{});var X3e=s(jm);Vre=n(X3e,"STRONG",{});var fWr=s(Vre);BUe=r(fWr,"rembert"),fWr.forEach(t),IUe=r(X3e," \u2014 "),FS=n(X3e,"A",{href:!0});var mWr=s(FS);NUe=r(mWr,"RemBertConfig"),mWr.forEach(t),qUe=r(X3e," (RemBERT model)"),X3e.forEach(t),jUe=i(y),Dm=n(y,"LI",{});var z3e=s(Dm);Xre=n(z3e,"STRONG",{});var gWr=s(Xre);DUe=r(gWr,"resnet"),gWr.forEach(t),GUe=r(z3e," \u2014 "),TS=n(z3e,"A",{href:!0});var hWr=s(TS);OUe=r(hWr,"ResNetConfig"),hWr.forEach(t),VUe=r(z3e," (ResNet model)"),z3e.forEach(t),XUe=i(y),Gm=n(y,"LI",{});var W3e=s(Gm);zre=n(W3e,"STRONG",{});var pWr=s(zre);zUe=r(pWr,"retribert"),pWr.forEach(t),WUe=r(W3e," \u2014 "),MS=n(W3e,"A",{href:!0});var _Wr=s(MS);QUe=r(_Wr,"RetriBertConfig"),_Wr.forEach(t),HUe=r(W3e," (RetriBERT model)"),W3e.forEach(t),UUe=i(y),Om=n(y,"LI",{});var Q3e=s(Om);Wre=n(Q3e,"STRONG",{});var uWr=s(Wre);JUe=r(uWr,"roberta"),uWr.forEach(t),YUe=r(Q3e," \u2014 "),ES=n(Q3e,"A",{href:!0});var bWr=s(ES);KUe=r(bWr,"RobertaConfig"),bWr.forEach(t),ZUe=r(Q3e," (RoBERTa model)"),Q3e.forEach(t),eJe=i(y),Vm=n(y,"LI",{});var H3e=s(Vm);Qre=n(H3e,"STRONG",{});var vWr=s(Qre);oJe=r(vWr,"roformer"),vWr.forEach(t),rJe=r(H3e," \u2014 "),CS=n(H3e,"A",{href:!0});var FWr=s(CS);tJe=r(FWr,"RoFormerConfig"),FWr.forEach(t),aJe=r(H3e," (RoFormer model)"),H3e.forEach(t),nJe=i(y),Xm=n(y,"LI",{});var U3e=s(Xm);Hre=n(U3e,"STRONG",{});var TWr=s(Hre);sJe=r(TWr,"segformer"),TWr.forEach(t),lJe=r(U3e," \u2014 "),wS=n(U3e,"A",{href:!0});var MWr=s(wS);iJe=r(MWr,"SegformerConfig"),MWr.forEach(t),dJe=r(U3e," (SegFormer model)"),U3e.forEach(t),cJe=i(y),zm=n(y,"LI",{});var J3e=s(zm);Ure=n(J3e,"STRONG",{});var EWr=s(Ure);fJe=r(EWr,"sew"),EWr.forEach(t),mJe=r(J3e," \u2014 "),AS=n(J3e,"A",{href:!0});var CWr=s(AS);gJe=r(CWr,"SEWConfig"),CWr.forEach(t),hJe=r(J3e," (SEW model)"),J3e.forEach(t),pJe=i(y),Wm=n(y,"LI",{});var Y3e=s(Wm);Jre=n(Y3e,"STRONG",{});var wWr=s(Jre);_Je=r(wWr,"sew-d"),wWr.forEach(t),uJe=r(Y3e," \u2014 "),yS=n(Y3e,"A",{href:!0});var AWr=s(yS);bJe=r(AWr,"SEWDConfig"),AWr.forEach(t),vJe=r(Y3e," (SEW-D model)"),Y3e.forEach(t),FJe=i(y),Qm=n(y,"LI",{});var K3e=s(Qm);Yre=n(K3e,"STRONG",{});var yWr=s(Yre);TJe=r(yWr,"speech-encoder-decoder"),yWr.forEach(t),MJe=r(K3e," \u2014 "),LS=n(K3e,"A",{href:!0});var LWr=s(LS);EJe=r(LWr,"SpeechEncoderDecoderConfig"),LWr.forEach(t),CJe=r(K3e," (Speech Encoder decoder model)"),K3e.forEach(t),wJe=i(y),Hm=n(y,"LI",{});var Z3e=s(Hm);Kre=n(Z3e,"STRONG",{});var xWr=s(Kre);AJe=r(xWr,"speech_to_text"),xWr.forEach(t),yJe=r(Z3e," \u2014 "),xS=n(Z3e,"A",{href:!0});var $Wr=s(xS);LJe=r($Wr,"Speech2TextConfig"),$Wr.forEach(t),xJe=r(Z3e," (Speech2Text model)"),Z3e.forEach(t),$Je=i(y),Um=n(y,"LI",{});var ewe=s(Um);Zre=n(ewe,"STRONG",{});var kWr=s(Zre);kJe=r(kWr,"speech_to_text_2"),kWr.forEach(t),SJe=r(ewe," \u2014 "),$S=n(ewe,"A",{href:!0});var SWr=s($S);RJe=r(SWr,"Speech2Text2Config"),SWr.forEach(t),PJe=r(ewe," (Speech2Text2 model)"),ewe.forEach(t),BJe=i(y),Jm=n(y,"LI",{});var owe=s(Jm);ete=n(owe,"STRONG",{});var RWr=s(ete);IJe=r(RWr,"splinter"),RWr.forEach(t),NJe=r(owe," \u2014 "),kS=n(owe,"A",{href:!0});var PWr=s(kS);qJe=r(PWr,"SplinterConfig"),PWr.forEach(t),jJe=r(owe," (Splinter model)"),owe.forEach(t),DJe=i(y),Ym=n(y,"LI",{});var rwe=s(Ym);ote=n(rwe,"STRONG",{});var BWr=s(ote);GJe=r(BWr,"squeezebert"),BWr.forEach(t),OJe=r(rwe," \u2014 "),SS=n(rwe,"A",{href:!0});var IWr=s(SS);VJe=r(IWr,"SqueezeBertConfig"),IWr.forEach(t),XJe=r(rwe," (SqueezeBERT model)"),rwe.forEach(t),zJe=i(y),Km=n(y,"LI",{});var twe=s(Km);rte=n(twe,"STRONG",{});var NWr=s(rte);WJe=r(NWr,"swin"),NWr.forEach(t),QJe=r(twe," \u2014 "),RS=n(twe,"A",{href:!0});var qWr=s(RS);HJe=r(qWr,"SwinConfig"),qWr.forEach(t),UJe=r(twe," (Swin model)"),twe.forEach(t),JJe=i(y),Zm=n(y,"LI",{});var awe=s(Zm);tte=n(awe,"STRONG",{});var jWr=s(tte);YJe=r(jWr,"t5"),jWr.forEach(t),KJe=r(awe," \u2014 "),PS=n(awe,"A",{href:!0});var DWr=s(PS);ZJe=r(DWr,"T5Config"),DWr.forEach(t),eYe=r(awe," (T5 model)"),awe.forEach(t),oYe=i(y),eg=n(y,"LI",{});var nwe=s(eg);ate=n(nwe,"STRONG",{});var GWr=s(ate);rYe=r(GWr,"tapas"),GWr.forEach(t),tYe=r(nwe," \u2014 "),BS=n(nwe,"A",{href:!0});var OWr=s(BS);aYe=r(OWr,"TapasConfig"),OWr.forEach(t),nYe=r(nwe," (TAPAS model)"),nwe.forEach(t),sYe=i(y),og=n(y,"LI",{});var swe=s(og);nte=n(swe,"STRONG",{});var VWr=s(nte);lYe=r(VWr,"trajectory_transformer"),VWr.forEach(t),iYe=r(swe," \u2014 "),IS=n(swe,"A",{href:!0});var XWr=s(IS);dYe=r(XWr,"TrajectoryTransformerConfig"),XWr.forEach(t),cYe=r(swe," (Trajectory Transformer model)"),swe.forEach(t),fYe=i(y),rg=n(y,"LI",{});var lwe=s(rg);ste=n(lwe,"STRONG",{});var zWr=s(ste);mYe=r(zWr,"transfo-xl"),zWr.forEach(t),gYe=r(lwe," \u2014 "),NS=n(lwe,"A",{href:!0});var WWr=s(NS);hYe=r(WWr,"TransfoXLConfig"),WWr.forEach(t),pYe=r(lwe," (Transformer-XL model)"),lwe.forEach(t),_Ye=i(y),tg=n(y,"LI",{});var iwe=s(tg);lte=n(iwe,"STRONG",{});var QWr=s(lte);uYe=r(QWr,"trocr"),QWr.forEach(t),bYe=r(iwe," \u2014 "),qS=n(iwe,"A",{href:!0});var HWr=s(qS);vYe=r(HWr,"TrOCRConfig"),HWr.forEach(t),FYe=r(iwe," (TrOCR model)"),iwe.forEach(t),TYe=i(y),ag=n(y,"LI",{});var dwe=s(ag);ite=n(dwe,"STRONG",{});var UWr=s(ite);MYe=r(UWr,"unispeech"),UWr.forEach(t),EYe=r(dwe," \u2014 "),jS=n(dwe,"A",{href:!0});var JWr=s(jS);CYe=r(JWr,"UniSpeechConfig"),JWr.forEach(t),wYe=r(dwe," (UniSpeech model)"),dwe.forEach(t),AYe=i(y),ng=n(y,"LI",{});var cwe=s(ng);dte=n(cwe,"STRONG",{});var YWr=s(dte);yYe=r(YWr,"unispeech-sat"),YWr.forEach(t),LYe=r(cwe," \u2014 "),DS=n(cwe,"A",{href:!0});var KWr=s(DS);xYe=r(KWr,"UniSpeechSatConfig"),KWr.forEach(t),$Ye=r(cwe," (UniSpeechSat model)"),cwe.forEach(t),kYe=i(y),sg=n(y,"LI",{});var fwe=s(sg);cte=n(fwe,"STRONG",{});var ZWr=s(cte);SYe=r(ZWr,"van"),ZWr.forEach(t),RYe=r(fwe," \u2014 "),GS=n(fwe,"A",{href:!0});var eQr=s(GS);PYe=r(eQr,"VanConfig"),eQr.forEach(t),BYe=r(fwe," (VAN model)"),fwe.forEach(t),IYe=i(y),lg=n(y,"LI",{});var mwe=s(lg);fte=n(mwe,"STRONG",{});var oQr=s(fte);NYe=r(oQr,"vilt"),oQr.forEach(t),qYe=r(mwe," \u2014 "),OS=n(mwe,"A",{href:!0});var rQr=s(OS);jYe=r(rQr,"ViltConfig"),rQr.forEach(t),DYe=r(mwe," (ViLT model)"),mwe.forEach(t),GYe=i(y),ig=n(y,"LI",{});var gwe=s(ig);mte=n(gwe,"STRONG",{});var tQr=s(mte);OYe=r(tQr,"vision-encoder-decoder"),tQr.forEach(t),VYe=r(gwe," \u2014 "),VS=n(gwe,"A",{href:!0});var aQr=s(VS);XYe=r(aQr,"VisionEncoderDecoderConfig"),aQr.forEach(t),zYe=r(gwe," (Vision Encoder decoder model)"),gwe.forEach(t),WYe=i(y),dg=n(y,"LI",{});var hwe=s(dg);gte=n(hwe,"STRONG",{});var nQr=s(gte);QYe=r(nQr,"vision-text-dual-encoder"),nQr.forEach(t),HYe=r(hwe," \u2014 "),XS=n(hwe,"A",{href:!0});var sQr=s(XS);UYe=r(sQr,"VisionTextDualEncoderConfig"),sQr.forEach(t),JYe=r(hwe," (VisionTextDualEncoder model)"),hwe.forEach(t),YYe=i(y),cg=n(y,"LI",{});var pwe=s(cg);hte=n(pwe,"STRONG",{});var lQr=s(hte);KYe=r(lQr,"visual_bert"),lQr.forEach(t),ZYe=r(pwe," \u2014 "),zS=n(pwe,"A",{href:!0});var iQr=s(zS);eKe=r(iQr,"VisualBertConfig"),iQr.forEach(t),oKe=r(pwe," (VisualBert model)"),pwe.forEach(t),rKe=i(y),fg=n(y,"LI",{});var _we=s(fg);pte=n(_we,"STRONG",{});var dQr=s(pte);tKe=r(dQr,"vit"),dQr.forEach(t),aKe=r(_we," \u2014 "),WS=n(_we,"A",{href:!0});var cQr=s(WS);nKe=r(cQr,"ViTConfig"),cQr.forEach(t),sKe=r(_we," (ViT model)"),_we.forEach(t),lKe=i(y),mg=n(y,"LI",{});var uwe=s(mg);_te=n(uwe,"STRONG",{});var fQr=s(_te);iKe=r(fQr,"vit_mae"),fQr.forEach(t),dKe=r(uwe," \u2014 "),QS=n(uwe,"A",{href:!0});var mQr=s(QS);cKe=r(mQr,"ViTMAEConfig"),mQr.forEach(t),fKe=r(uwe," (ViTMAE model)"),uwe.forEach(t),mKe=i(y),gg=n(y,"LI",{});var bwe=s(gg);ute=n(bwe,"STRONG",{});var gQr=s(ute);gKe=r(gQr,"wav2vec2"),gQr.forEach(t),hKe=r(bwe," \u2014 "),HS=n(bwe,"A",{href:!0});var hQr=s(HS);pKe=r(hQr,"Wav2Vec2Config"),hQr.forEach(t),_Ke=r(bwe," (Wav2Vec2 model)"),bwe.forEach(t),uKe=i(y),hg=n(y,"LI",{});var vwe=s(hg);bte=n(vwe,"STRONG",{});var pQr=s(bte);bKe=r(pQr,"wav2vec2-conformer"),pQr.forEach(t),vKe=r(vwe," \u2014 "),US=n(vwe,"A",{href:!0});var _Qr=s(US);FKe=r(_Qr,"Wav2Vec2ConformerConfig"),_Qr.forEach(t),TKe=r(vwe," (Wav2Vec2-Conformer model)"),vwe.forEach(t),MKe=i(y),pg=n(y,"LI",{});var Fwe=s(pg);vte=n(Fwe,"STRONG",{});var uQr=s(vte);EKe=r(uQr,"wavlm"),uQr.forEach(t),CKe=r(Fwe," \u2014 "),JS=n(Fwe,"A",{href:!0});var bQr=s(JS);wKe=r(bQr,"WavLMConfig"),bQr.forEach(t),AKe=r(Fwe," (WavLM model)"),Fwe.forEach(t),yKe=i(y),_g=n(y,"LI",{});var Twe=s(_g);Fte=n(Twe,"STRONG",{});var vQr=s(Fte);LKe=r(vQr,"xglm"),vQr.forEach(t),xKe=r(Twe," \u2014 "),YS=n(Twe,"A",{href:!0});var FQr=s(YS);$Ke=r(FQr,"XGLMConfig"),FQr.forEach(t),kKe=r(Twe," (XGLM model)"),Twe.forEach(t),SKe=i(y),ug=n(y,"LI",{});var Mwe=s(ug);Tte=n(Mwe,"STRONG",{});var TQr=s(Tte);RKe=r(TQr,"xlm"),TQr.forEach(t),PKe=r(Mwe," \u2014 "),KS=n(Mwe,"A",{href:!0});var MQr=s(KS);BKe=r(MQr,"XLMConfig"),MQr.forEach(t),IKe=r(Mwe," (XLM model)"),Mwe.forEach(t),NKe=i(y),bg=n(y,"LI",{});var Ewe=s(bg);Mte=n(Ewe,"STRONG",{});var EQr=s(Mte);qKe=r(EQr,"xlm-prophetnet"),EQr.forEach(t),jKe=r(Ewe," \u2014 "),ZS=n(Ewe,"A",{href:!0});var CQr=s(ZS);DKe=r(CQr,"XLMProphetNetConfig"),CQr.forEach(t),GKe=r(Ewe," (XLMProphetNet model)"),Ewe.forEach(t),OKe=i(y),vg=n(y,"LI",{});var Cwe=s(vg);Ete=n(Cwe,"STRONG",{});var wQr=s(Ete);VKe=r(wQr,"xlm-roberta"),wQr.forEach(t),XKe=r(Cwe," \u2014 "),eR=n(Cwe,"A",{href:!0});var AQr=s(eR);zKe=r(AQr,"XLMRobertaConfig"),AQr.forEach(t),WKe=r(Cwe," (XLM-RoBERTa model)"),Cwe.forEach(t),QKe=i(y),Fg=n(y,"LI",{});var wwe=s(Fg);Cte=n(wwe,"STRONG",{});var yQr=s(Cte);HKe=r(yQr,"xlm-roberta-xl"),yQr.forEach(t),UKe=r(wwe," \u2014 "),oR=n(wwe,"A",{href:!0});var LQr=s(oR);JKe=r(LQr,"XLMRobertaXLConfig"),LQr.forEach(t),YKe=r(wwe," (XLM-RoBERTa-XL model)"),wwe.forEach(t),KKe=i(y),Tg=n(y,"LI",{});var Awe=s(Tg);wte=n(Awe,"STRONG",{});var xQr=s(wte);ZKe=r(xQr,"xlnet"),xQr.forEach(t),eZe=r(Awe," \u2014 "),rR=n(Awe,"A",{href:!0});var $Qr=s(rR);oZe=r($Qr,"XLNetConfig"),$Qr.forEach(t),rZe=r(Awe," (XLNet model)"),Awe.forEach(t),tZe=i(y),Mg=n(y,"LI",{});var ywe=s(Mg);Ate=n(ywe,"STRONG",{});var kQr=s(Ate);aZe=r(kQr,"yolos"),kQr.forEach(t),nZe=r(ywe," \u2014 "),tR=n(ywe,"A",{href:!0});var SQr=s(tR);sZe=r(SQr,"YolosConfig"),SQr.forEach(t),lZe=r(ywe," (YOLOS model)"),ywe.forEach(t),iZe=i(y),Eg=n(y,"LI",{});var Lwe=s(Eg);yte=n(Lwe,"STRONG",{});var RQr=s(yte);dZe=r(RQr,"yoso"),RQr.forEach(t),cZe=r(Lwe," \u2014 "),aR=n(Lwe,"A",{href:!0});var PQr=s(aR);fZe=r(PQr,"YosoConfig"),PQr.forEach(t),mZe=r(Lwe," (YOSO model)"),Lwe.forEach(t),y.forEach(t),gZe=i(ot),T(Cg.$$.fragment,ot),ot.forEach(t),hZe=i(et),wg=n(et,"DIV",{class:!0});var MDe=s(wg);T(jA.$$.fragment,MDe),pZe=i(MDe),Lte=n(MDe,"P",{});var BQr=s(Lte);_Ze=r(BQr,"Register a new configuration for this class."),BQr.forEach(t),MDe.forEach(t),et.forEach(t),wqe=i(f),Ti=n(f,"H2",{class:!0});var EDe=s(Ti);Ag=n(EDe,"A",{id:!0,class:!0,href:!0});var IQr=s(Ag);xte=n(IQr,"SPAN",{});var NQr=s(xte);T(DA.$$.fragment,NQr),NQr.forEach(t),IQr.forEach(t),uZe=i(EDe),$te=n(EDe,"SPAN",{});var qQr=s($te);bZe=r(qQr,"AutoTokenizer"),qQr.forEach(t),EDe.forEach(t),Aqe=i(f),wo=n(f,"DIV",{class:!0});var Ns=s(wo);T(GA.$$.fragment,Ns),vZe=i(Ns),OA=n(Ns,"P",{});var CDe=s(OA);FZe=r(CDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),nR=n(CDe,"A",{href:!0});var jQr=s(nR);TZe=r(jQr,"AutoTokenizer.from_pretrained()"),jQr.forEach(t),MZe=r(CDe," class method."),CDe.forEach(t),EZe=i(Ns),VA=n(Ns,"P",{});var wDe=s(VA);CZe=r(wDe,"This class cannot be instantiated directly using "),kte=n(wDe,"CODE",{});var DQr=s(kte);wZe=r(DQr,"__init__()"),DQr.forEach(t),AZe=r(wDe," (throws an error)."),wDe.forEach(t),yZe=i(Ns),Cr=n(Ns,"DIV",{class:!0});var qs=s(Cr);T(XA.$$.fragment,qs),LZe=i(qs),Ste=n(qs,"P",{});var GQr=s(Ste);xZe=r(GQr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),GQr.forEach(t),$Ze=i(qs),Aa=n(qs,"P",{});var Pw=s(Aa);kZe=r(Pw,"The tokenizer class to instantiate is selected based on the "),Rte=n(Pw,"CODE",{});var OQr=s(Rte);SZe=r(OQr,"model_type"),OQr.forEach(t),RZe=r(Pw,` property of the config object (either
passed as an argument or loaded from `),Pte=n(Pw,"CODE",{});var VQr=s(Pte);PZe=r(VQr,"pretrained_model_name_or_path"),VQr.forEach(t),BZe=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bte=n(Pw,"CODE",{});var XQr=s(Bte);IZe=r(XQr,"pretrained_model_name_or_path"),XQr.forEach(t),NZe=r(Pw,":"),Pw.forEach(t),qZe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var zx=s(Sn);Ite=n(zx,"STRONG",{});var zQr=s(Ite);jZe=r(zQr,"albert"),zQr.forEach(t),DZe=r(zx," \u2014 "),sR=n(zx,"A",{href:!0});var WQr=s(sR);GZe=r(WQr,"AlbertTokenizer"),WQr.forEach(t),OZe=r(zx," or "),lR=n(zx,"A",{href:!0});var QQr=s(lR);VZe=r(QQr,"AlbertTokenizerFast"),QQr.forEach(t),XZe=r(zx," (ALBERT model)"),zx.forEach(t),zZe=i(S),Rn=n(S,"LI",{});var Wx=s(Rn);Nte=n(Wx,"STRONG",{});var HQr=s(Nte);WZe=r(HQr,"bart"),HQr.forEach(t),QZe=r(Wx," \u2014 "),iR=n(Wx,"A",{href:!0});var UQr=s(iR);HZe=r(UQr,"BartTokenizer"),UQr.forEach(t),UZe=r(Wx," or "),dR=n(Wx,"A",{href:!0});var JQr=s(dR);JZe=r(JQr,"BartTokenizerFast"),JQr.forEach(t),YZe=r(Wx," (BART model)"),Wx.forEach(t),KZe=i(S),Pn=n(S,"LI",{});var Qx=s(Pn);qte=n(Qx,"STRONG",{});var YQr=s(qte);ZZe=r(YQr,"barthez"),YQr.forEach(t),eeo=r(Qx," \u2014 "),cR=n(Qx,"A",{href:!0});var KQr=s(cR);oeo=r(KQr,"BarthezTokenizer"),KQr.forEach(t),reo=r(Qx," or "),fR=n(Qx,"A",{href:!0});var ZQr=s(fR);teo=r(ZQr,"BarthezTokenizerFast"),ZQr.forEach(t),aeo=r(Qx," (BARThez model)"),Qx.forEach(t),neo=i(S),yg=n(S,"LI",{});var xwe=s(yg);jte=n(xwe,"STRONG",{});var eHr=s(jte);seo=r(eHr,"bartpho"),eHr.forEach(t),leo=r(xwe," \u2014 "),mR=n(xwe,"A",{href:!0});var oHr=s(mR);ieo=r(oHr,"BartphoTokenizer"),oHr.forEach(t),deo=r(xwe," (BARTpho model)"),xwe.forEach(t),ceo=i(S),Bn=n(S,"LI",{});var Hx=s(Bn);Dte=n(Hx,"STRONG",{});var rHr=s(Dte);feo=r(rHr,"bert"),rHr.forEach(t),meo=r(Hx," \u2014 "),gR=n(Hx,"A",{href:!0});var tHr=s(gR);geo=r(tHr,"BertTokenizer"),tHr.forEach(t),heo=r(Hx," or "),hR=n(Hx,"A",{href:!0});var aHr=s(hR);peo=r(aHr,"BertTokenizerFast"),aHr.forEach(t),_eo=r(Hx," (BERT model)"),Hx.forEach(t),ueo=i(S),Lg=n(S,"LI",{});var $we=s(Lg);Gte=n($we,"STRONG",{});var nHr=s(Gte);beo=r(nHr,"bert-generation"),nHr.forEach(t),veo=r($we," \u2014 "),pR=n($we,"A",{href:!0});var sHr=s(pR);Feo=r(sHr,"BertGenerationTokenizer"),sHr.forEach(t),Teo=r($we," (Bert Generation model)"),$we.forEach(t),Meo=i(S),xg=n(S,"LI",{});var kwe=s(xg);Ote=n(kwe,"STRONG",{});var lHr=s(Ote);Eeo=r(lHr,"bert-japanese"),lHr.forEach(t),Ceo=r(kwe," \u2014 "),_R=n(kwe,"A",{href:!0});var iHr=s(_R);weo=r(iHr,"BertJapaneseTokenizer"),iHr.forEach(t),Aeo=r(kwe," (BertJapanese model)"),kwe.forEach(t),yeo=i(S),$g=n(S,"LI",{});var Swe=s($g);Vte=n(Swe,"STRONG",{});var dHr=s(Vte);Leo=r(dHr,"bertweet"),dHr.forEach(t),xeo=r(Swe," \u2014 "),uR=n(Swe,"A",{href:!0});var cHr=s(uR);$eo=r(cHr,"BertweetTokenizer"),cHr.forEach(t),keo=r(Swe," (Bertweet model)"),Swe.forEach(t),Seo=i(S),In=n(S,"LI",{});var Ux=s(In);Xte=n(Ux,"STRONG",{});var fHr=s(Xte);Reo=r(fHr,"big_bird"),fHr.forEach(t),Peo=r(Ux," \u2014 "),bR=n(Ux,"A",{href:!0});var mHr=s(bR);Beo=r(mHr,"BigBirdTokenizer"),mHr.forEach(t),Ieo=r(Ux," or "),vR=n(Ux,"A",{href:!0});var gHr=s(vR);Neo=r(gHr,"BigBirdTokenizerFast"),gHr.forEach(t),qeo=r(Ux," (BigBird model)"),Ux.forEach(t),jeo=i(S),Nn=n(S,"LI",{});var Jx=s(Nn);zte=n(Jx,"STRONG",{});var hHr=s(zte);Deo=r(hHr,"bigbird_pegasus"),hHr.forEach(t),Geo=r(Jx," \u2014 "),FR=n(Jx,"A",{href:!0});var pHr=s(FR);Oeo=r(pHr,"PegasusTokenizer"),pHr.forEach(t),Veo=r(Jx," or "),TR=n(Jx,"A",{href:!0});var _Hr=s(TR);Xeo=r(_Hr,"PegasusTokenizerFast"),_Hr.forEach(t),zeo=r(Jx," (BigBirdPegasus model)"),Jx.forEach(t),Weo=i(S),qn=n(S,"LI",{});var Yx=s(qn);Wte=n(Yx,"STRONG",{});var uHr=s(Wte);Qeo=r(uHr,"blenderbot"),uHr.forEach(t),Heo=r(Yx," \u2014 "),MR=n(Yx,"A",{href:!0});var bHr=s(MR);Ueo=r(bHr,"BlenderbotTokenizer"),bHr.forEach(t),Jeo=r(Yx," or "),ER=n(Yx,"A",{href:!0});var vHr=s(ER);Yeo=r(vHr,"BlenderbotTokenizerFast"),vHr.forEach(t),Keo=r(Yx," (Blenderbot model)"),Yx.forEach(t),Zeo=i(S),kg=n(S,"LI",{});var Rwe=s(kg);Qte=n(Rwe,"STRONG",{});var FHr=s(Qte);eoo=r(FHr,"blenderbot-small"),FHr.forEach(t),ooo=r(Rwe," \u2014 "),CR=n(Rwe,"A",{href:!0});var THr=s(CR);roo=r(THr,"BlenderbotSmallTokenizer"),THr.forEach(t),too=r(Rwe," (BlenderbotSmall model)"),Rwe.forEach(t),aoo=i(S),Sg=n(S,"LI",{});var Pwe=s(Sg);Hte=n(Pwe,"STRONG",{});var MHr=s(Hte);noo=r(MHr,"bloom"),MHr.forEach(t),soo=r(Pwe," \u2014 "),wR=n(Pwe,"A",{href:!0});var EHr=s(wR);loo=r(EHr,"BloomTokenizerFast"),EHr.forEach(t),ioo=r(Pwe," (BLOOM model)"),Pwe.forEach(t),doo=i(S),Rg=n(S,"LI",{});var Bwe=s(Rg);Ute=n(Bwe,"STRONG",{});var CHr=s(Ute);coo=r(CHr,"byt5"),CHr.forEach(t),foo=r(Bwe," \u2014 "),AR=n(Bwe,"A",{href:!0});var wHr=s(AR);moo=r(wHr,"ByT5Tokenizer"),wHr.forEach(t),goo=r(Bwe," (ByT5 model)"),Bwe.forEach(t),hoo=i(S),jn=n(S,"LI",{});var Kx=s(jn);Jte=n(Kx,"STRONG",{});var AHr=s(Jte);poo=r(AHr,"camembert"),AHr.forEach(t),_oo=r(Kx," \u2014 "),yR=n(Kx,"A",{href:!0});var yHr=s(yR);uoo=r(yHr,"CamembertTokenizer"),yHr.forEach(t),boo=r(Kx," or "),LR=n(Kx,"A",{href:!0});var LHr=s(LR);voo=r(LHr,"CamembertTokenizerFast"),LHr.forEach(t),Foo=r(Kx," (CamemBERT model)"),Kx.forEach(t),Too=i(S),Pg=n(S,"LI",{});var Iwe=s(Pg);Yte=n(Iwe,"STRONG",{});var xHr=s(Yte);Moo=r(xHr,"canine"),xHr.forEach(t),Eoo=r(Iwe," \u2014 "),xR=n(Iwe,"A",{href:!0});var $Hr=s(xR);Coo=r($Hr,"CanineTokenizer"),$Hr.forEach(t),woo=r(Iwe," (Canine model)"),Iwe.forEach(t),Aoo=i(S),Dn=n(S,"LI",{});var Zx=s(Dn);Kte=n(Zx,"STRONG",{});var kHr=s(Kte);yoo=r(kHr,"clip"),kHr.forEach(t),Loo=r(Zx," \u2014 "),$R=n(Zx,"A",{href:!0});var SHr=s($R);xoo=r(SHr,"CLIPTokenizer"),SHr.forEach(t),$oo=r(Zx," or "),kR=n(Zx,"A",{href:!0});var RHr=s(kR);koo=r(RHr,"CLIPTokenizerFast"),RHr.forEach(t),Soo=r(Zx," (CLIP model)"),Zx.forEach(t),Roo=i(S),Gn=n(S,"LI",{});var e$=s(Gn);Zte=n(e$,"STRONG",{});var PHr=s(Zte);Poo=r(PHr,"convbert"),PHr.forEach(t),Boo=r(e$," \u2014 "),SR=n(e$,"A",{href:!0});var BHr=s(SR);Ioo=r(BHr,"ConvBertTokenizer"),BHr.forEach(t),Noo=r(e$," or "),RR=n(e$,"A",{href:!0});var IHr=s(RR);qoo=r(IHr,"ConvBertTokenizerFast"),IHr.forEach(t),joo=r(e$," (ConvBERT model)"),e$.forEach(t),Doo=i(S),On=n(S,"LI",{});var o$=s(On);eae=n(o$,"STRONG",{});var NHr=s(eae);Goo=r(NHr,"cpm"),NHr.forEach(t),Ooo=r(o$," \u2014 "),PR=n(o$,"A",{href:!0});var qHr=s(PR);Voo=r(qHr,"CpmTokenizer"),qHr.forEach(t),Xoo=r(o$," or "),BR=n(o$,"A",{href:!0});var jHr=s(BR);zoo=r(jHr,"CpmTokenizerFast"),jHr.forEach(t),Woo=r(o$," (CPM model)"),o$.forEach(t),Qoo=i(S),Bg=n(S,"LI",{});var Nwe=s(Bg);oae=n(Nwe,"STRONG",{});var DHr=s(oae);Hoo=r(DHr,"ctrl"),DHr.forEach(t),Uoo=r(Nwe," \u2014 "),IR=n(Nwe,"A",{href:!0});var GHr=s(IR);Joo=r(GHr,"CTRLTokenizer"),GHr.forEach(t),Yoo=r(Nwe," (CTRL model)"),Nwe.forEach(t),Koo=i(S),Vn=n(S,"LI",{});var r$=s(Vn);rae=n(r$,"STRONG",{});var OHr=s(rae);Zoo=r(OHr,"data2vec-text"),OHr.forEach(t),ero=r(r$," \u2014 "),NR=n(r$,"A",{href:!0});var VHr=s(NR);oro=r(VHr,"RobertaTokenizer"),VHr.forEach(t),rro=r(r$," or "),qR=n(r$,"A",{href:!0});var XHr=s(qR);tro=r(XHr,"RobertaTokenizerFast"),XHr.forEach(t),aro=r(r$," (Data2VecText model)"),r$.forEach(t),nro=i(S),Xn=n(S,"LI",{});var t$=s(Xn);tae=n(t$,"STRONG",{});var zHr=s(tae);sro=r(zHr,"deberta"),zHr.forEach(t),lro=r(t$," \u2014 "),jR=n(t$,"A",{href:!0});var WHr=s(jR);iro=r(WHr,"DebertaTokenizer"),WHr.forEach(t),dro=r(t$," or "),DR=n(t$,"A",{href:!0});var QHr=s(DR);cro=r(QHr,"DebertaTokenizerFast"),QHr.forEach(t),fro=r(t$," (DeBERTa model)"),t$.forEach(t),mro=i(S),zn=n(S,"LI",{});var a$=s(zn);aae=n(a$,"STRONG",{});var HHr=s(aae);gro=r(HHr,"deberta-v2"),HHr.forEach(t),hro=r(a$," \u2014 "),GR=n(a$,"A",{href:!0});var UHr=s(GR);pro=r(UHr,"DebertaV2Tokenizer"),UHr.forEach(t),_ro=r(a$," or "),OR=n(a$,"A",{href:!0});var JHr=s(OR);uro=r(JHr,"DebertaV2TokenizerFast"),JHr.forEach(t),bro=r(a$," (DeBERTa-v2 model)"),a$.forEach(t),vro=i(S),Wn=n(S,"LI",{});var n$=s(Wn);nae=n(n$,"STRONG",{});var YHr=s(nae);Fro=r(YHr,"distilbert"),YHr.forEach(t),Tro=r(n$," \u2014 "),VR=n(n$,"A",{href:!0});var KHr=s(VR);Mro=r(KHr,"DistilBertTokenizer"),KHr.forEach(t),Ero=r(n$," or "),XR=n(n$,"A",{href:!0});var ZHr=s(XR);Cro=r(ZHr,"DistilBertTokenizerFast"),ZHr.forEach(t),wro=r(n$," (DistilBERT model)"),n$.forEach(t),Aro=i(S),Qn=n(S,"LI",{});var s$=s(Qn);sae=n(s$,"STRONG",{});var eUr=s(sae);yro=r(eUr,"dpr"),eUr.forEach(t),Lro=r(s$," \u2014 "),zR=n(s$,"A",{href:!0});var oUr=s(zR);xro=r(oUr,"DPRQuestionEncoderTokenizer"),oUr.forEach(t),$ro=r(s$," or "),WR=n(s$,"A",{href:!0});var rUr=s(WR);kro=r(rUr,"DPRQuestionEncoderTokenizerFast"),rUr.forEach(t),Sro=r(s$," (DPR model)"),s$.forEach(t),Rro=i(S),Hn=n(S,"LI",{});var l$=s(Hn);lae=n(l$,"STRONG",{});var tUr=s(lae);Pro=r(tUr,"electra"),tUr.forEach(t),Bro=r(l$," \u2014 "),QR=n(l$,"A",{href:!0});var aUr=s(QR);Iro=r(aUr,"ElectraTokenizer"),aUr.forEach(t),Nro=r(l$," or "),HR=n(l$,"A",{href:!0});var nUr=s(HR);qro=r(nUr,"ElectraTokenizerFast"),nUr.forEach(t),jro=r(l$," (ELECTRA model)"),l$.forEach(t),Dro=i(S),Ig=n(S,"LI",{});var qwe=s(Ig);iae=n(qwe,"STRONG",{});var sUr=s(iae);Gro=r(sUr,"flaubert"),sUr.forEach(t),Oro=r(qwe," \u2014 "),UR=n(qwe,"A",{href:!0});var lUr=s(UR);Vro=r(lUr,"FlaubertTokenizer"),lUr.forEach(t),Xro=r(qwe," (FlauBERT model)"),qwe.forEach(t),zro=i(S),Un=n(S,"LI",{});var i$=s(Un);dae=n(i$,"STRONG",{});var iUr=s(dae);Wro=r(iUr,"fnet"),iUr.forEach(t),Qro=r(i$," \u2014 "),JR=n(i$,"A",{href:!0});var dUr=s(JR);Hro=r(dUr,"FNetTokenizer"),dUr.forEach(t),Uro=r(i$," or "),YR=n(i$,"A",{href:!0});var cUr=s(YR);Jro=r(cUr,"FNetTokenizerFast"),cUr.forEach(t),Yro=r(i$," (FNet model)"),i$.forEach(t),Kro=i(S),Ng=n(S,"LI",{});var jwe=s(Ng);cae=n(jwe,"STRONG",{});var fUr=s(cae);Zro=r(fUr,"fsmt"),fUr.forEach(t),eto=r(jwe," \u2014 "),KR=n(jwe,"A",{href:!0});var mUr=s(KR);oto=r(mUr,"FSMTTokenizer"),mUr.forEach(t),rto=r(jwe," (FairSeq Machine-Translation model)"),jwe.forEach(t),tto=i(S),Jn=n(S,"LI",{});var d$=s(Jn);fae=n(d$,"STRONG",{});var gUr=s(fae);ato=r(gUr,"funnel"),gUr.forEach(t),nto=r(d$," \u2014 "),ZR=n(d$,"A",{href:!0});var hUr=s(ZR);sto=r(hUr,"FunnelTokenizer"),hUr.forEach(t),lto=r(d$," or "),eP=n(d$,"A",{href:!0});var pUr=s(eP);ito=r(pUr,"FunnelTokenizerFast"),pUr.forEach(t),dto=r(d$," (Funnel Transformer model)"),d$.forEach(t),cto=i(S),Yn=n(S,"LI",{});var c$=s(Yn);mae=n(c$,"STRONG",{});var _Ur=s(mae);fto=r(_Ur,"gpt2"),_Ur.forEach(t),mto=r(c$," \u2014 "),oP=n(c$,"A",{href:!0});var uUr=s(oP);gto=r(uUr,"GPT2Tokenizer"),uUr.forEach(t),hto=r(c$," or "),rP=n(c$,"A",{href:!0});var bUr=s(rP);pto=r(bUr,"GPT2TokenizerFast"),bUr.forEach(t),_to=r(c$," (OpenAI GPT-2 model)"),c$.forEach(t),uto=i(S),Kn=n(S,"LI",{});var f$=s(Kn);gae=n(f$,"STRONG",{});var vUr=s(gae);bto=r(vUr,"gpt_neo"),vUr.forEach(t),vto=r(f$," \u2014 "),tP=n(f$,"A",{href:!0});var FUr=s(tP);Fto=r(FUr,"GPT2Tokenizer"),FUr.forEach(t),Tto=r(f$," or "),aP=n(f$,"A",{href:!0});var TUr=s(aP);Mto=r(TUr,"GPT2TokenizerFast"),TUr.forEach(t),Eto=r(f$," (GPT Neo model)"),f$.forEach(t),Cto=i(S),qg=n(S,"LI",{});var Dwe=s(qg);hae=n(Dwe,"STRONG",{});var MUr=s(hae);wto=r(MUr,"gpt_neox"),MUr.forEach(t),Ato=r(Dwe," \u2014 "),nP=n(Dwe,"A",{href:!0});var EUr=s(nP);yto=r(EUr,"GPTNeoXTokenizerFast"),EUr.forEach(t),Lto=r(Dwe," (GPT NeoX model)"),Dwe.forEach(t),xto=i(S),Zn=n(S,"LI",{});var m$=s(Zn);pae=n(m$,"STRONG",{});var CUr=s(pae);$to=r(CUr,"gptj"),CUr.forEach(t),kto=r(m$," \u2014 "),sP=n(m$,"A",{href:!0});var wUr=s(sP);Sto=r(wUr,"GPT2Tokenizer"),wUr.forEach(t),Rto=r(m$," or "),lP=n(m$,"A",{href:!0});var AUr=s(lP);Pto=r(AUr,"GPT2TokenizerFast"),AUr.forEach(t),Bto=r(m$," (GPT-J model)"),m$.forEach(t),Ito=i(S),es=n(S,"LI",{});var g$=s(es);_ae=n(g$,"STRONG",{});var yUr=s(_ae);Nto=r(yUr,"herbert"),yUr.forEach(t),qto=r(g$," \u2014 "),iP=n(g$,"A",{href:!0});var LUr=s(iP);jto=r(LUr,"HerbertTokenizer"),LUr.forEach(t),Dto=r(g$," or "),dP=n(g$,"A",{href:!0});var xUr=s(dP);Gto=r(xUr,"HerbertTokenizerFast"),xUr.forEach(t),Oto=r(g$," (HerBERT model)"),g$.forEach(t),Vto=i(S),jg=n(S,"LI",{});var Gwe=s(jg);uae=n(Gwe,"STRONG",{});var $Ur=s(uae);Xto=r($Ur,"hubert"),$Ur.forEach(t),zto=r(Gwe," \u2014 "),cP=n(Gwe,"A",{href:!0});var kUr=s(cP);Wto=r(kUr,"Wav2Vec2CTCTokenizer"),kUr.forEach(t),Qto=r(Gwe," (Hubert model)"),Gwe.forEach(t),Hto=i(S),os=n(S,"LI",{});var h$=s(os);bae=n(h$,"STRONG",{});var SUr=s(bae);Uto=r(SUr,"ibert"),SUr.forEach(t),Jto=r(h$," \u2014 "),fP=n(h$,"A",{href:!0});var RUr=s(fP);Yto=r(RUr,"RobertaTokenizer"),RUr.forEach(t),Kto=r(h$," or "),mP=n(h$,"A",{href:!0});var PUr=s(mP);Zto=r(PUr,"RobertaTokenizerFast"),PUr.forEach(t),eao=r(h$," (I-BERT model)"),h$.forEach(t),oao=i(S),rs=n(S,"LI",{});var p$=s(rs);vae=n(p$,"STRONG",{});var BUr=s(vae);rao=r(BUr,"layoutlm"),BUr.forEach(t),tao=r(p$," \u2014 "),gP=n(p$,"A",{href:!0});var IUr=s(gP);aao=r(IUr,"LayoutLMTokenizer"),IUr.forEach(t),nao=r(p$," or "),hP=n(p$,"A",{href:!0});var NUr=s(hP);sao=r(NUr,"LayoutLMTokenizerFast"),NUr.forEach(t),lao=r(p$," (LayoutLM model)"),p$.forEach(t),iao=i(S),ts=n(S,"LI",{});var _$=s(ts);Fae=n(_$,"STRONG",{});var qUr=s(Fae);dao=r(qUr,"layoutlmv2"),qUr.forEach(t),cao=r(_$," \u2014 "),pP=n(_$,"A",{href:!0});var jUr=s(pP);fao=r(jUr,"LayoutLMv2Tokenizer"),jUr.forEach(t),mao=r(_$," or "),_P=n(_$,"A",{href:!0});var DUr=s(_P);gao=r(DUr,"LayoutLMv2TokenizerFast"),DUr.forEach(t),hao=r(_$," (LayoutLMv2 model)"),_$.forEach(t),pao=i(S),as=n(S,"LI",{});var u$=s(as);Tae=n(u$,"STRONG",{});var GUr=s(Tae);_ao=r(GUr,"layoutlmv3"),GUr.forEach(t),uao=r(u$," \u2014 "),uP=n(u$,"A",{href:!0});var OUr=s(uP);bao=r(OUr,"LayoutLMv3Tokenizer"),OUr.forEach(t),vao=r(u$," or "),bP=n(u$,"A",{href:!0});var VUr=s(bP);Fao=r(VUr,"LayoutLMv3TokenizerFast"),VUr.forEach(t),Tao=r(u$," (LayoutLMv3 model)"),u$.forEach(t),Mao=i(S),ns=n(S,"LI",{});var b$=s(ns);Mae=n(b$,"STRONG",{});var XUr=s(Mae);Eao=r(XUr,"layoutxlm"),XUr.forEach(t),Cao=r(b$," \u2014 "),vP=n(b$,"A",{href:!0});var zUr=s(vP);wao=r(zUr,"LayoutXLMTokenizer"),zUr.forEach(t),Aao=r(b$," or "),FP=n(b$,"A",{href:!0});var WUr=s(FP);yao=r(WUr,"LayoutXLMTokenizerFast"),WUr.forEach(t),Lao=r(b$," (LayoutXLM model)"),b$.forEach(t),xao=i(S),ss=n(S,"LI",{});var v$=s(ss);Eae=n(v$,"STRONG",{});var QUr=s(Eae);$ao=r(QUr,"led"),QUr.forEach(t),kao=r(v$," \u2014 "),TP=n(v$,"A",{href:!0});var HUr=s(TP);Sao=r(HUr,"LEDTokenizer"),HUr.forEach(t),Rao=r(v$," or "),MP=n(v$,"A",{href:!0});var UUr=s(MP);Pao=r(UUr,"LEDTokenizerFast"),UUr.forEach(t),Bao=r(v$," (LED model)"),v$.forEach(t),Iao=i(S),ls=n(S,"LI",{});var F$=s(ls);Cae=n(F$,"STRONG",{});var JUr=s(Cae);Nao=r(JUr,"longformer"),JUr.forEach(t),qao=r(F$," \u2014 "),EP=n(F$,"A",{href:!0});var YUr=s(EP);jao=r(YUr,"LongformerTokenizer"),YUr.forEach(t),Dao=r(F$," or "),CP=n(F$,"A",{href:!0});var KUr=s(CP);Gao=r(KUr,"LongformerTokenizerFast"),KUr.forEach(t),Oao=r(F$," (Longformer model)"),F$.forEach(t),Vao=i(S),Dg=n(S,"LI",{});var Owe=s(Dg);wae=n(Owe,"STRONG",{});var ZUr=s(wae);Xao=r(ZUr,"luke"),ZUr.forEach(t),zao=r(Owe," \u2014 "),wP=n(Owe,"A",{href:!0});var eJr=s(wP);Wao=r(eJr,"LukeTokenizer"),eJr.forEach(t),Qao=r(Owe," (LUKE model)"),Owe.forEach(t),Hao=i(S),is=n(S,"LI",{});var T$=s(is);Aae=n(T$,"STRONG",{});var oJr=s(Aae);Uao=r(oJr,"lxmert"),oJr.forEach(t),Jao=r(T$," \u2014 "),AP=n(T$,"A",{href:!0});var rJr=s(AP);Yao=r(rJr,"LxmertTokenizer"),rJr.forEach(t),Kao=r(T$," or "),yP=n(T$,"A",{href:!0});var tJr=s(yP);Zao=r(tJr,"LxmertTokenizerFast"),tJr.forEach(t),eno=r(T$," (LXMERT model)"),T$.forEach(t),ono=i(S),Gg=n(S,"LI",{});var Vwe=s(Gg);yae=n(Vwe,"STRONG",{});var aJr=s(yae);rno=r(aJr,"m2m_100"),aJr.forEach(t),tno=r(Vwe," \u2014 "),LP=n(Vwe,"A",{href:!0});var nJr=s(LP);ano=r(nJr,"M2M100Tokenizer"),nJr.forEach(t),nno=r(Vwe," (M2M100 model)"),Vwe.forEach(t),sno=i(S),Og=n(S,"LI",{});var Xwe=s(Og);Lae=n(Xwe,"STRONG",{});var sJr=s(Lae);lno=r(sJr,"marian"),sJr.forEach(t),ino=r(Xwe," \u2014 "),xP=n(Xwe,"A",{href:!0});var lJr=s(xP);dno=r(lJr,"MarianTokenizer"),lJr.forEach(t),cno=r(Xwe," (Marian model)"),Xwe.forEach(t),fno=i(S),ds=n(S,"LI",{});var M$=s(ds);xae=n(M$,"STRONG",{});var iJr=s(xae);mno=r(iJr,"mbart"),iJr.forEach(t),gno=r(M$," \u2014 "),$P=n(M$,"A",{href:!0});var dJr=s($P);hno=r(dJr,"MBartTokenizer"),dJr.forEach(t),pno=r(M$," or "),kP=n(M$,"A",{href:!0});var cJr=s(kP);_no=r(cJr,"MBartTokenizerFast"),cJr.forEach(t),uno=r(M$," (mBART model)"),M$.forEach(t),bno=i(S),cs=n(S,"LI",{});var E$=s(cs);$ae=n(E$,"STRONG",{});var fJr=s($ae);vno=r(fJr,"mbart50"),fJr.forEach(t),Fno=r(E$," \u2014 "),SP=n(E$,"A",{href:!0});var mJr=s(SP);Tno=r(mJr,"MBart50Tokenizer"),mJr.forEach(t),Mno=r(E$," or "),RP=n(E$,"A",{href:!0});var gJr=s(RP);Eno=r(gJr,"MBart50TokenizerFast"),gJr.forEach(t),Cno=r(E$," (mBART-50 model)"),E$.forEach(t),wno=i(S),fs=n(S,"LI",{});var C$=s(fs);kae=n(C$,"STRONG",{});var hJr=s(kae);Ano=r(hJr,"megatron-bert"),hJr.forEach(t),yno=r(C$," \u2014 "),PP=n(C$,"A",{href:!0});var pJr=s(PP);Lno=r(pJr,"BertTokenizer"),pJr.forEach(t),xno=r(C$," or "),BP=n(C$,"A",{href:!0});var _Jr=s(BP);$no=r(_Jr,"BertTokenizerFast"),_Jr.forEach(t),kno=r(C$," (MegatronBert model)"),C$.forEach(t),Sno=i(S),Vg=n(S,"LI",{});var zwe=s(Vg);Sae=n(zwe,"STRONG",{});var uJr=s(Sae);Rno=r(uJr,"mluke"),uJr.forEach(t),Pno=r(zwe," \u2014 "),IP=n(zwe,"A",{href:!0});var bJr=s(IP);Bno=r(bJr,"MLukeTokenizer"),bJr.forEach(t),Ino=r(zwe," (mLUKE model)"),zwe.forEach(t),Nno=i(S),ms=n(S,"LI",{});var w$=s(ms);Rae=n(w$,"STRONG",{});var vJr=s(Rae);qno=r(vJr,"mobilebert"),vJr.forEach(t),jno=r(w$," \u2014 "),NP=n(w$,"A",{href:!0});var FJr=s(NP);Dno=r(FJr,"MobileBertTokenizer"),FJr.forEach(t),Gno=r(w$," or "),qP=n(w$,"A",{href:!0});var TJr=s(qP);Ono=r(TJr,"MobileBertTokenizerFast"),TJr.forEach(t),Vno=r(w$," (MobileBERT model)"),w$.forEach(t),Xno=i(S),gs=n(S,"LI",{});var A$=s(gs);Pae=n(A$,"STRONG",{});var MJr=s(Pae);zno=r(MJr,"mpnet"),MJr.forEach(t),Wno=r(A$," \u2014 "),jP=n(A$,"A",{href:!0});var EJr=s(jP);Qno=r(EJr,"MPNetTokenizer"),EJr.forEach(t),Hno=r(A$," or "),DP=n(A$,"A",{href:!0});var CJr=s(DP);Uno=r(CJr,"MPNetTokenizerFast"),CJr.forEach(t),Jno=r(A$," (MPNet model)"),A$.forEach(t),Yno=i(S),hs=n(S,"LI",{});var y$=s(hs);Bae=n(y$,"STRONG",{});var wJr=s(Bae);Kno=r(wJr,"mt5"),wJr.forEach(t),Zno=r(y$," \u2014 "),GP=n(y$,"A",{href:!0});var AJr=s(GP);eso=r(AJr,"MT5Tokenizer"),AJr.forEach(t),oso=r(y$," or "),OP=n(y$,"A",{href:!0});var yJr=s(OP);rso=r(yJr,"MT5TokenizerFast"),yJr.forEach(t),tso=r(y$," (mT5 model)"),y$.forEach(t),aso=i(S),ps=n(S,"LI",{});var L$=s(ps);Iae=n(L$,"STRONG",{});var LJr=s(Iae);nso=r(LJr,"nystromformer"),LJr.forEach(t),sso=r(L$," \u2014 "),VP=n(L$,"A",{href:!0});var xJr=s(VP);lso=r(xJr,"AlbertTokenizer"),xJr.forEach(t),iso=r(L$," or "),XP=n(L$,"A",{href:!0});var $Jr=s(XP);dso=r($Jr,"AlbertTokenizerFast"),$Jr.forEach(t),cso=r(L$," (Nystromformer model)"),L$.forEach(t),fso=i(S),_s=n(S,"LI",{});var x$=s(_s);Nae=n(x$,"STRONG",{});var kJr=s(Nae);mso=r(kJr,"openai-gpt"),kJr.forEach(t),gso=r(x$," \u2014 "),zP=n(x$,"A",{href:!0});var SJr=s(zP);hso=r(SJr,"OpenAIGPTTokenizer"),SJr.forEach(t),pso=r(x$," or "),WP=n(x$,"A",{href:!0});var RJr=s(WP);_so=r(RJr,"OpenAIGPTTokenizerFast"),RJr.forEach(t),uso=r(x$," (OpenAI GPT model)"),x$.forEach(t),bso=i(S),Xg=n(S,"LI",{});var Wwe=s(Xg);qae=n(Wwe,"STRONG",{});var PJr=s(qae);vso=r(PJr,"opt"),PJr.forEach(t),Fso=r(Wwe," \u2014 "),QP=n(Wwe,"A",{href:!0});var BJr=s(QP);Tso=r(BJr,"GPT2Tokenizer"),BJr.forEach(t),Mso=r(Wwe," (OPT model)"),Wwe.forEach(t),Eso=i(S),us=n(S,"LI",{});var $$=s(us);jae=n($$,"STRONG",{});var IJr=s(jae);Cso=r(IJr,"pegasus"),IJr.forEach(t),wso=r($$," \u2014 "),HP=n($$,"A",{href:!0});var NJr=s(HP);Aso=r(NJr,"PegasusTokenizer"),NJr.forEach(t),yso=r($$," or "),UP=n($$,"A",{href:!0});var qJr=s(UP);Lso=r(qJr,"PegasusTokenizerFast"),qJr.forEach(t),xso=r($$," (Pegasus model)"),$$.forEach(t),$so=i(S),zg=n(S,"LI",{});var Qwe=s(zg);Dae=n(Qwe,"STRONG",{});var jJr=s(Dae);kso=r(jJr,"perceiver"),jJr.forEach(t),Sso=r(Qwe," \u2014 "),JP=n(Qwe,"A",{href:!0});var DJr=s(JP);Rso=r(DJr,"PerceiverTokenizer"),DJr.forEach(t),Pso=r(Qwe," (Perceiver model)"),Qwe.forEach(t),Bso=i(S),Wg=n(S,"LI",{});var Hwe=s(Wg);Gae=n(Hwe,"STRONG",{});var GJr=s(Gae);Iso=r(GJr,"phobert"),GJr.forEach(t),Nso=r(Hwe," \u2014 "),YP=n(Hwe,"A",{href:!0});var OJr=s(YP);qso=r(OJr,"PhobertTokenizer"),OJr.forEach(t),jso=r(Hwe," (PhoBERT model)"),Hwe.forEach(t),Dso=i(S),Qg=n(S,"LI",{});var Uwe=s(Qg);Oae=n(Uwe,"STRONG",{});var VJr=s(Oae);Gso=r(VJr,"plbart"),VJr.forEach(t),Oso=r(Uwe," \u2014 "),KP=n(Uwe,"A",{href:!0});var XJr=s(KP);Vso=r(XJr,"PLBartTokenizer"),XJr.forEach(t),Xso=r(Uwe," (PLBart model)"),Uwe.forEach(t),zso=i(S),Hg=n(S,"LI",{});var Jwe=s(Hg);Vae=n(Jwe,"STRONG",{});var zJr=s(Vae);Wso=r(zJr,"prophetnet"),zJr.forEach(t),Qso=r(Jwe," \u2014 "),ZP=n(Jwe,"A",{href:!0});var WJr=s(ZP);Hso=r(WJr,"ProphetNetTokenizer"),WJr.forEach(t),Uso=r(Jwe," (ProphetNet model)"),Jwe.forEach(t),Jso=i(S),bs=n(S,"LI",{});var k$=s(bs);Xae=n(k$,"STRONG",{});var QJr=s(Xae);Yso=r(QJr,"qdqbert"),QJr.forEach(t),Kso=r(k$," \u2014 "),eB=n(k$,"A",{href:!0});var HJr=s(eB);Zso=r(HJr,"BertTokenizer"),HJr.forEach(t),elo=r(k$," or "),oB=n(k$,"A",{href:!0});var UJr=s(oB);olo=r(UJr,"BertTokenizerFast"),UJr.forEach(t),rlo=r(k$," (QDQBert model)"),k$.forEach(t),tlo=i(S),Ug=n(S,"LI",{});var Ywe=s(Ug);zae=n(Ywe,"STRONG",{});var JJr=s(zae);alo=r(JJr,"rag"),JJr.forEach(t),nlo=r(Ywe," \u2014 "),rB=n(Ywe,"A",{href:!0});var YJr=s(rB);slo=r(YJr,"RagTokenizer"),YJr.forEach(t),llo=r(Ywe," (RAG model)"),Ywe.forEach(t),ilo=i(S),vs=n(S,"LI",{});var S$=s(vs);Wae=n(S$,"STRONG",{});var KJr=s(Wae);dlo=r(KJr,"realm"),KJr.forEach(t),clo=r(S$," \u2014 "),tB=n(S$,"A",{href:!0});var ZJr=s(tB);flo=r(ZJr,"RealmTokenizer"),ZJr.forEach(t),mlo=r(S$," or "),aB=n(S$,"A",{href:!0});var eYr=s(aB);glo=r(eYr,"RealmTokenizerFast"),eYr.forEach(t),hlo=r(S$," (Realm model)"),S$.forEach(t),plo=i(S),Fs=n(S,"LI",{});var R$=s(Fs);Qae=n(R$,"STRONG",{});var oYr=s(Qae);_lo=r(oYr,"reformer"),oYr.forEach(t),ulo=r(R$," \u2014 "),nB=n(R$,"A",{href:!0});var rYr=s(nB);blo=r(rYr,"ReformerTokenizer"),rYr.forEach(t),vlo=r(R$," or "),sB=n(R$,"A",{href:!0});var tYr=s(sB);Flo=r(tYr,"ReformerTokenizerFast"),tYr.forEach(t),Tlo=r(R$," (Reformer model)"),R$.forEach(t),Mlo=i(S),Ts=n(S,"LI",{});var P$=s(Ts);Hae=n(P$,"STRONG",{});var aYr=s(Hae);Elo=r(aYr,"rembert"),aYr.forEach(t),Clo=r(P$," \u2014 "),lB=n(P$,"A",{href:!0});var nYr=s(lB);wlo=r(nYr,"RemBertTokenizer"),nYr.forEach(t),Alo=r(P$," or "),iB=n(P$,"A",{href:!0});var sYr=s(iB);ylo=r(sYr,"RemBertTokenizerFast"),sYr.forEach(t),Llo=r(P$," (RemBERT model)"),P$.forEach(t),xlo=i(S),Ms=n(S,"LI",{});var B$=s(Ms);Uae=n(B$,"STRONG",{});var lYr=s(Uae);$lo=r(lYr,"retribert"),lYr.forEach(t),klo=r(B$," \u2014 "),dB=n(B$,"A",{href:!0});var iYr=s(dB);Slo=r(iYr,"RetriBertTokenizer"),iYr.forEach(t),Rlo=r(B$," or "),cB=n(B$,"A",{href:!0});var dYr=s(cB);Plo=r(dYr,"RetriBertTokenizerFast"),dYr.forEach(t),Blo=r(B$," (RetriBERT model)"),B$.forEach(t),Ilo=i(S),Es=n(S,"LI",{});var I$=s(Es);Jae=n(I$,"STRONG",{});var cYr=s(Jae);Nlo=r(cYr,"roberta"),cYr.forEach(t),qlo=r(I$," \u2014 "),fB=n(I$,"A",{href:!0});var fYr=s(fB);jlo=r(fYr,"RobertaTokenizer"),fYr.forEach(t),Dlo=r(I$," or "),mB=n(I$,"A",{href:!0});var mYr=s(mB);Glo=r(mYr,"RobertaTokenizerFast"),mYr.forEach(t),Olo=r(I$," (RoBERTa model)"),I$.forEach(t),Vlo=i(S),Cs=n(S,"LI",{});var N$=s(Cs);Yae=n(N$,"STRONG",{});var gYr=s(Yae);Xlo=r(gYr,"roformer"),gYr.forEach(t),zlo=r(N$," \u2014 "),gB=n(N$,"A",{href:!0});var hYr=s(gB);Wlo=r(hYr,"RoFormerTokenizer"),hYr.forEach(t),Qlo=r(N$," or "),hB=n(N$,"A",{href:!0});var pYr=s(hB);Hlo=r(pYr,"RoFormerTokenizerFast"),pYr.forEach(t),Ulo=r(N$," (RoFormer model)"),N$.forEach(t),Jlo=i(S),Jg=n(S,"LI",{});var Kwe=s(Jg);Kae=n(Kwe,"STRONG",{});var _Yr=s(Kae);Ylo=r(_Yr,"speech_to_text"),_Yr.forEach(t),Klo=r(Kwe," \u2014 "),pB=n(Kwe,"A",{href:!0});var uYr=s(pB);Zlo=r(uYr,"Speech2TextTokenizer"),uYr.forEach(t),eio=r(Kwe," (Speech2Text model)"),Kwe.forEach(t),oio=i(S),Yg=n(S,"LI",{});var Zwe=s(Yg);Zae=n(Zwe,"STRONG",{});var bYr=s(Zae);rio=r(bYr,"speech_to_text_2"),bYr.forEach(t),tio=r(Zwe," \u2014 "),_B=n(Zwe,"A",{href:!0});var vYr=s(_B);aio=r(vYr,"Speech2Text2Tokenizer"),vYr.forEach(t),nio=r(Zwe," (Speech2Text2 model)"),Zwe.forEach(t),sio=i(S),ws=n(S,"LI",{});var q$=s(ws);ene=n(q$,"STRONG",{});var FYr=s(ene);lio=r(FYr,"splinter"),FYr.forEach(t),iio=r(q$," \u2014 "),uB=n(q$,"A",{href:!0});var TYr=s(uB);dio=r(TYr,"SplinterTokenizer"),TYr.forEach(t),cio=r(q$," or "),bB=n(q$,"A",{href:!0});var MYr=s(bB);fio=r(MYr,"SplinterTokenizerFast"),MYr.forEach(t),mio=r(q$," (Splinter model)"),q$.forEach(t),gio=i(S),As=n(S,"LI",{});var j$=s(As);one=n(j$,"STRONG",{});var EYr=s(one);hio=r(EYr,"squeezebert"),EYr.forEach(t),pio=r(j$," \u2014 "),vB=n(j$,"A",{href:!0});var CYr=s(vB);_io=r(CYr,"SqueezeBertTokenizer"),CYr.forEach(t),uio=r(j$," or "),FB=n(j$,"A",{href:!0});var wYr=s(FB);bio=r(wYr,"SqueezeBertTokenizerFast"),wYr.forEach(t),vio=r(j$," (SqueezeBERT model)"),j$.forEach(t),Fio=i(S),ys=n(S,"LI",{});var D$=s(ys);rne=n(D$,"STRONG",{});var AYr=s(rne);Tio=r(AYr,"t5"),AYr.forEach(t),Mio=r(D$," \u2014 "),TB=n(D$,"A",{href:!0});var yYr=s(TB);Eio=r(yYr,"T5Tokenizer"),yYr.forEach(t),Cio=r(D$," or "),MB=n(D$,"A",{href:!0});var LYr=s(MB);wio=r(LYr,"T5TokenizerFast"),LYr.forEach(t),Aio=r(D$," (T5 model)"),D$.forEach(t),yio=i(S),Kg=n(S,"LI",{});var e6e=s(Kg);tne=n(e6e,"STRONG",{});var xYr=s(tne);Lio=r(xYr,"tapas"),xYr.forEach(t),xio=r(e6e," \u2014 "),EB=n(e6e,"A",{href:!0});var $Yr=s(EB);$io=r($Yr,"TapasTokenizer"),$Yr.forEach(t),kio=r(e6e," (TAPAS model)"),e6e.forEach(t),Sio=i(S),Zg=n(S,"LI",{});var o6e=s(Zg);ane=n(o6e,"STRONG",{});var kYr=s(ane);Rio=r(kYr,"tapex"),kYr.forEach(t),Pio=r(o6e," \u2014 "),CB=n(o6e,"A",{href:!0});var SYr=s(CB);Bio=r(SYr,"TapexTokenizer"),SYr.forEach(t),Iio=r(o6e," (TAPEX model)"),o6e.forEach(t),Nio=i(S),eh=n(S,"LI",{});var r6e=s(eh);nne=n(r6e,"STRONG",{});var RYr=s(nne);qio=r(RYr,"transfo-xl"),RYr.forEach(t),jio=r(r6e," \u2014 "),wB=n(r6e,"A",{href:!0});var PYr=s(wB);Dio=r(PYr,"TransfoXLTokenizer"),PYr.forEach(t),Gio=r(r6e," (Transformer-XL model)"),r6e.forEach(t),Oio=i(S),Ls=n(S,"LI",{});var G$=s(Ls);sne=n(G$,"STRONG",{});var BYr=s(sne);Vio=r(BYr,"visual_bert"),BYr.forEach(t),Xio=r(G$," \u2014 "),AB=n(G$,"A",{href:!0});var IYr=s(AB);zio=r(IYr,"BertTokenizer"),IYr.forEach(t),Wio=r(G$," or "),yB=n(G$,"A",{href:!0});var NYr=s(yB);Qio=r(NYr,"BertTokenizerFast"),NYr.forEach(t),Hio=r(G$," (VisualBert model)"),G$.forEach(t),Uio=i(S),oh=n(S,"LI",{});var t6e=s(oh);lne=n(t6e,"STRONG",{});var qYr=s(lne);Jio=r(qYr,"wav2vec2"),qYr.forEach(t),Yio=r(t6e," \u2014 "),LB=n(t6e,"A",{href:!0});var jYr=s(LB);Kio=r(jYr,"Wav2Vec2CTCTokenizer"),jYr.forEach(t),Zio=r(t6e," (Wav2Vec2 model)"),t6e.forEach(t),edo=i(S),rh=n(S,"LI",{});var a6e=s(rh);ine=n(a6e,"STRONG",{});var DYr=s(ine);odo=r(DYr,"wav2vec2-conformer"),DYr.forEach(t),rdo=r(a6e," \u2014 "),xB=n(a6e,"A",{href:!0});var GYr=s(xB);tdo=r(GYr,"Wav2Vec2CTCTokenizer"),GYr.forEach(t),ado=r(a6e," (Wav2Vec2-Conformer model)"),a6e.forEach(t),ndo=i(S),th=n(S,"LI",{});var n6e=s(th);dne=n(n6e,"STRONG",{});var OYr=s(dne);sdo=r(OYr,"wav2vec2_phoneme"),OYr.forEach(t),ldo=r(n6e," \u2014 "),$B=n(n6e,"A",{href:!0});var VYr=s($B);ido=r(VYr,"Wav2Vec2PhonemeCTCTokenizer"),VYr.forEach(t),ddo=r(n6e," (Wav2Vec2Phoneme model)"),n6e.forEach(t),cdo=i(S),xs=n(S,"LI",{});var O$=s(xs);cne=n(O$,"STRONG",{});var XYr=s(cne);fdo=r(XYr,"xglm"),XYr.forEach(t),mdo=r(O$," \u2014 "),kB=n(O$,"A",{href:!0});var zYr=s(kB);gdo=r(zYr,"XGLMTokenizer"),zYr.forEach(t),hdo=r(O$," or "),SB=n(O$,"A",{href:!0});var WYr=s(SB);pdo=r(WYr,"XGLMTokenizerFast"),WYr.forEach(t),_do=r(O$," (XGLM model)"),O$.forEach(t),udo=i(S),ah=n(S,"LI",{});var s6e=s(ah);fne=n(s6e,"STRONG",{});var QYr=s(fne);bdo=r(QYr,"xlm"),QYr.forEach(t),vdo=r(s6e," \u2014 "),RB=n(s6e,"A",{href:!0});var HYr=s(RB);Fdo=r(HYr,"XLMTokenizer"),HYr.forEach(t),Tdo=r(s6e," (XLM model)"),s6e.forEach(t),Mdo=i(S),nh=n(S,"LI",{});var l6e=s(nh);mne=n(l6e,"STRONG",{});var UYr=s(mne);Edo=r(UYr,"xlm-prophetnet"),UYr.forEach(t),Cdo=r(l6e," \u2014 "),PB=n(l6e,"A",{href:!0});var JYr=s(PB);wdo=r(JYr,"XLMProphetNetTokenizer"),JYr.forEach(t),Ado=r(l6e," (XLMProphetNet model)"),l6e.forEach(t),ydo=i(S),$s=n(S,"LI",{});var V$=s($s);gne=n(V$,"STRONG",{});var YYr=s(gne);Ldo=r(YYr,"xlm-roberta"),YYr.forEach(t),xdo=r(V$," \u2014 "),BB=n(V$,"A",{href:!0});var KYr=s(BB);$do=r(KYr,"XLMRobertaTokenizer"),KYr.forEach(t),kdo=r(V$," or "),IB=n(V$,"A",{href:!0});var ZYr=s(IB);Sdo=r(ZYr,"XLMRobertaTokenizerFast"),ZYr.forEach(t),Rdo=r(V$," (XLM-RoBERTa model)"),V$.forEach(t),Pdo=i(S),ks=n(S,"LI",{});var X$=s(ks);hne=n(X$,"STRONG",{});var eKr=s(hne);Bdo=r(eKr,"xlm-roberta-xl"),eKr.forEach(t),Ido=r(X$," \u2014 "),NB=n(X$,"A",{href:!0});var oKr=s(NB);Ndo=r(oKr,"RobertaTokenizer"),oKr.forEach(t),qdo=r(X$," or "),qB=n(X$,"A",{href:!0});var rKr=s(qB);jdo=r(rKr,"RobertaTokenizerFast"),rKr.forEach(t),Ddo=r(X$," (XLM-RoBERTa-XL model)"),X$.forEach(t),Gdo=i(S),Ss=n(S,"LI",{});var z$=s(Ss);pne=n(z$,"STRONG",{});var tKr=s(pne);Odo=r(tKr,"xlnet"),tKr.forEach(t),Vdo=r(z$," \u2014 "),jB=n(z$,"A",{href:!0});var aKr=s(jB);Xdo=r(aKr,"XLNetTokenizer"),aKr.forEach(t),zdo=r(z$," or "),DB=n(z$,"A",{href:!0});var nKr=s(DB);Wdo=r(nKr,"XLNetTokenizerFast"),nKr.forEach(t),Qdo=r(z$," (XLNet model)"),z$.forEach(t),Hdo=i(S),Rs=n(S,"LI",{});var W$=s(Rs);_ne=n(W$,"STRONG",{});var sKr=s(_ne);Udo=r(sKr,"yoso"),sKr.forEach(t),Jdo=r(W$," \u2014 "),GB=n(W$,"A",{href:!0});var lKr=s(GB);Ydo=r(lKr,"AlbertTokenizer"),lKr.forEach(t),Kdo=r(W$," or "),OB=n(W$,"A",{href:!0});var iKr=s(OB);Zdo=r(iKr,"AlbertTokenizerFast"),iKr.forEach(t),eco=r(W$," (YOSO model)"),W$.forEach(t),S.forEach(t),oco=i(qs),T(sh.$$.fragment,qs),qs.forEach(t),rco=i(Ns),lh=n(Ns,"DIV",{class:!0});var ADe=s(lh);T(zA.$$.fragment,ADe),tco=i(ADe),une=n(ADe,"P",{});var dKr=s(une);aco=r(dKr,"Register a new tokenizer in this mapping."),dKr.forEach(t),ADe.forEach(t),Ns.forEach(t),yqe=i(f),Mi=n(f,"H2",{class:!0});var yDe=s(Mi);ih=n(yDe,"A",{id:!0,class:!0,href:!0});var cKr=s(ih);bne=n(cKr,"SPAN",{});var fKr=s(bne);T(WA.$$.fragment,fKr),fKr.forEach(t),cKr.forEach(t),nco=i(yDe),vne=n(yDe,"SPAN",{});var mKr=s(vne);sco=r(mKr,"AutoFeatureExtractor"),mKr.forEach(t),yDe.forEach(t),Lqe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(QA.$$.fragment,js),lco=i(js),HA=n(js,"P",{});var LDe=s(HA);ico=r(LDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),VB=n(LDe,"A",{href:!0});var gKr=s(VB);dco=r(gKr,"AutoFeatureExtractor.from_pretrained()"),gKr.forEach(t),cco=r(LDe," class method."),LDe.forEach(t),fco=i(js),UA=n(js,"P",{});var xDe=s(UA);mco=r(xDe,"This class cannot be instantiated directly using "),Fne=n(xDe,"CODE",{});var hKr=s(Fne);gco=r(hKr,"__init__()"),hKr.forEach(t),hco=r(xDe," (throws an error)."),xDe.forEach(t),pco=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(JA.$$.fragment,Zt),_co=i(Zt),Tne=n(Zt,"P",{});var pKr=s(Tne);uco=r(pKr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),pKr.forEach(t),bco=i(Zt),ya=n(Zt,"P",{});var Bw=s(ya);vco=r(Bw,"The feature extractor class to instantiate is selected based on the "),Mne=n(Bw,"CODE",{});var _Kr=s(Mne);Fco=r(_Kr,"model_type"),_Kr.forEach(t),Tco=r(Bw,` property of the config object
(either passed as an argument or loaded from `),Ene=n(Bw,"CODE",{});var uKr=s(Ene);Mco=r(uKr,"pretrained_model_name_or_path"),uKr.forEach(t),Eco=r(Bw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Cne=n(Bw,"CODE",{});var bKr=s(Cne);Cco=r(bKr,"pretrained_model_name_or_path"),bKr.forEach(t),wco=r(Bw,":"),Bw.forEach(t),Aco=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);dh=n(Z,"LI",{});var i6e=s(dh);wne=n(i6e,"STRONG",{});var vKr=s(wne);yco=r(vKr,"beit"),vKr.forEach(t),Lco=r(i6e," \u2014 "),XB=n(i6e,"A",{href:!0});var FKr=s(XB);xco=r(FKr,"BeitFeatureExtractor"),FKr.forEach(t),$co=r(i6e," (BEiT model)"),i6e.forEach(t),kco=i(Z),ch=n(Z,"LI",{});var d6e=s(ch);Ane=n(d6e,"STRONG",{});var TKr=s(Ane);Sco=r(TKr,"clip"),TKr.forEach(t),Rco=r(d6e," \u2014 "),zB=n(d6e,"A",{href:!0});var MKr=s(zB);Pco=r(MKr,"CLIPFeatureExtractor"),MKr.forEach(t),Bco=r(d6e," (CLIP model)"),d6e.forEach(t),Ico=i(Z),fh=n(Z,"LI",{});var c6e=s(fh);yne=n(c6e,"STRONG",{});var EKr=s(yne);Nco=r(EKr,"convnext"),EKr.forEach(t),qco=r(c6e," \u2014 "),WB=n(c6e,"A",{href:!0});var CKr=s(WB);jco=r(CKr,"ConvNextFeatureExtractor"),CKr.forEach(t),Dco=r(c6e," (ConvNext model)"),c6e.forEach(t),Gco=i(Z),mh=n(Z,"LI",{});var f6e=s(mh);Lne=n(f6e,"STRONG",{});var wKr=s(Lne);Oco=r(wKr,"cvt"),wKr.forEach(t),Vco=r(f6e," \u2014 "),QB=n(f6e,"A",{href:!0});var AKr=s(QB);Xco=r(AKr,"ConvNextFeatureExtractor"),AKr.forEach(t),zco=r(f6e," (CvT model)"),f6e.forEach(t),Wco=i(Z),gh=n(Z,"LI",{});var m6e=s(gh);xne=n(m6e,"STRONG",{});var yKr=s(xne);Qco=r(yKr,"data2vec-audio"),yKr.forEach(t),Hco=r(m6e," \u2014 "),HB=n(m6e,"A",{href:!0});var LKr=s(HB);Uco=r(LKr,"Wav2Vec2FeatureExtractor"),LKr.forEach(t),Jco=r(m6e," (Data2VecAudio model)"),m6e.forEach(t),Yco=i(Z),hh=n(Z,"LI",{});var g6e=s(hh);$ne=n(g6e,"STRONG",{});var xKr=s($ne);Kco=r(xKr,"data2vec-vision"),xKr.forEach(t),Zco=r(g6e," \u2014 "),UB=n(g6e,"A",{href:!0});var $Kr=s(UB);efo=r($Kr,"BeitFeatureExtractor"),$Kr.forEach(t),ofo=r(g6e," (Data2VecVision model)"),g6e.forEach(t),rfo=i(Z),ph=n(Z,"LI",{});var h6e=s(ph);kne=n(h6e,"STRONG",{});var kKr=s(kne);tfo=r(kKr,"deit"),kKr.forEach(t),afo=r(h6e," \u2014 "),JB=n(h6e,"A",{href:!0});var SKr=s(JB);nfo=r(SKr,"DeiTFeatureExtractor"),SKr.forEach(t),sfo=r(h6e," (DeiT model)"),h6e.forEach(t),lfo=i(Z),_h=n(Z,"LI",{});var p6e=s(_h);Sne=n(p6e,"STRONG",{});var RKr=s(Sne);ifo=r(RKr,"detr"),RKr.forEach(t),dfo=r(p6e," \u2014 "),YB=n(p6e,"A",{href:!0});var PKr=s(YB);cfo=r(PKr,"DetrFeatureExtractor"),PKr.forEach(t),ffo=r(p6e," (DETR model)"),p6e.forEach(t),mfo=i(Z),uh=n(Z,"LI",{});var _6e=s(uh);Rne=n(_6e,"STRONG",{});var BKr=s(Rne);gfo=r(BKr,"dpt"),BKr.forEach(t),hfo=r(_6e," \u2014 "),KB=n(_6e,"A",{href:!0});var IKr=s(KB);pfo=r(IKr,"DPTFeatureExtractor"),IKr.forEach(t),_fo=r(_6e," (DPT model)"),_6e.forEach(t),ufo=i(Z),bh=n(Z,"LI",{});var u6e=s(bh);Pne=n(u6e,"STRONG",{});var NKr=s(Pne);bfo=r(NKr,"flava"),NKr.forEach(t),vfo=r(u6e," \u2014 "),ZB=n(u6e,"A",{href:!0});var qKr=s(ZB);Ffo=r(qKr,"FlavaFeatureExtractor"),qKr.forEach(t),Tfo=r(u6e," (Flava model)"),u6e.forEach(t),Mfo=i(Z),vh=n(Z,"LI",{});var b6e=s(vh);Bne=n(b6e,"STRONG",{});var jKr=s(Bne);Efo=r(jKr,"glpn"),jKr.forEach(t),Cfo=r(b6e," \u2014 "),eI=n(b6e,"A",{href:!0});var DKr=s(eI);wfo=r(DKr,"GLPNFeatureExtractor"),DKr.forEach(t),Afo=r(b6e," (GLPN model)"),b6e.forEach(t),yfo=i(Z),Fh=n(Z,"LI",{});var v6e=s(Fh);Ine=n(v6e,"STRONG",{});var GKr=s(Ine);Lfo=r(GKr,"hubert"),GKr.forEach(t),xfo=r(v6e," \u2014 "),oI=n(v6e,"A",{href:!0});var OKr=s(oI);$fo=r(OKr,"Wav2Vec2FeatureExtractor"),OKr.forEach(t),kfo=r(v6e," (Hubert model)"),v6e.forEach(t),Sfo=i(Z),Th=n(Z,"LI",{});var F6e=s(Th);Nne=n(F6e,"STRONG",{});var VKr=s(Nne);Rfo=r(VKr,"imagegpt"),VKr.forEach(t),Pfo=r(F6e," \u2014 "),rI=n(F6e,"A",{href:!0});var XKr=s(rI);Bfo=r(XKr,"ImageGPTFeatureExtractor"),XKr.forEach(t),Ifo=r(F6e," (ImageGPT model)"),F6e.forEach(t),Nfo=i(Z),Mh=n(Z,"LI",{});var T6e=s(Mh);qne=n(T6e,"STRONG",{});var zKr=s(qne);qfo=r(zKr,"layoutlmv2"),zKr.forEach(t),jfo=r(T6e," \u2014 "),tI=n(T6e,"A",{href:!0});var WKr=s(tI);Dfo=r(WKr,"LayoutLMv2FeatureExtractor"),WKr.forEach(t),Gfo=r(T6e," (LayoutLMv2 model)"),T6e.forEach(t),Ofo=i(Z),Eh=n(Z,"LI",{});var M6e=s(Eh);jne=n(M6e,"STRONG",{});var QKr=s(jne);Vfo=r(QKr,"layoutlmv3"),QKr.forEach(t),Xfo=r(M6e," \u2014 "),aI=n(M6e,"A",{href:!0});var HKr=s(aI);zfo=r(HKr,"LayoutLMv3FeatureExtractor"),HKr.forEach(t),Wfo=r(M6e," (LayoutLMv3 model)"),M6e.forEach(t),Qfo=i(Z),Ch=n(Z,"LI",{});var E6e=s(Ch);Dne=n(E6e,"STRONG",{});var UKr=s(Dne);Hfo=r(UKr,"maskformer"),UKr.forEach(t),Ufo=r(E6e," \u2014 "),nI=n(E6e,"A",{href:!0});var JKr=s(nI);Jfo=r(JKr,"MaskFormerFeatureExtractor"),JKr.forEach(t),Yfo=r(E6e," (MaskFormer model)"),E6e.forEach(t),Kfo=i(Z),wh=n(Z,"LI",{});var C6e=s(wh);Gne=n(C6e,"STRONG",{});var YKr=s(Gne);Zfo=r(YKr,"perceiver"),YKr.forEach(t),emo=r(C6e," \u2014 "),sI=n(C6e,"A",{href:!0});var KKr=s(sI);omo=r(KKr,"PerceiverFeatureExtractor"),KKr.forEach(t),rmo=r(C6e," (Perceiver model)"),C6e.forEach(t),tmo=i(Z),Ah=n(Z,"LI",{});var w6e=s(Ah);One=n(w6e,"STRONG",{});var ZKr=s(One);amo=r(ZKr,"poolformer"),ZKr.forEach(t),nmo=r(w6e," \u2014 "),lI=n(w6e,"A",{href:!0});var eZr=s(lI);smo=r(eZr,"PoolFormerFeatureExtractor"),eZr.forEach(t),lmo=r(w6e," (PoolFormer model)"),w6e.forEach(t),imo=i(Z),yh=n(Z,"LI",{});var A6e=s(yh);Vne=n(A6e,"STRONG",{});var oZr=s(Vne);dmo=r(oZr,"regnet"),oZr.forEach(t),cmo=r(A6e," \u2014 "),iI=n(A6e,"A",{href:!0});var rZr=s(iI);fmo=r(rZr,"ConvNextFeatureExtractor"),rZr.forEach(t),mmo=r(A6e," (RegNet model)"),A6e.forEach(t),gmo=i(Z),Lh=n(Z,"LI",{});var y6e=s(Lh);Xne=n(y6e,"STRONG",{});var tZr=s(Xne);hmo=r(tZr,"resnet"),tZr.forEach(t),pmo=r(y6e," \u2014 "),dI=n(y6e,"A",{href:!0});var aZr=s(dI);_mo=r(aZr,"ConvNextFeatureExtractor"),aZr.forEach(t),umo=r(y6e," (ResNet model)"),y6e.forEach(t),bmo=i(Z),xh=n(Z,"LI",{});var L6e=s(xh);zne=n(L6e,"STRONG",{});var nZr=s(zne);vmo=r(nZr,"segformer"),nZr.forEach(t),Fmo=r(L6e," \u2014 "),cI=n(L6e,"A",{href:!0});var sZr=s(cI);Tmo=r(sZr,"SegformerFeatureExtractor"),sZr.forEach(t),Mmo=r(L6e," (SegFormer model)"),L6e.forEach(t),Emo=i(Z),$h=n(Z,"LI",{});var x6e=s($h);Wne=n(x6e,"STRONG",{});var lZr=s(Wne);Cmo=r(lZr,"speech_to_text"),lZr.forEach(t),wmo=r(x6e," \u2014 "),fI=n(x6e,"A",{href:!0});var iZr=s(fI);Amo=r(iZr,"Speech2TextFeatureExtractor"),iZr.forEach(t),ymo=r(x6e," (Speech2Text model)"),x6e.forEach(t),Lmo=i(Z),kh=n(Z,"LI",{});var $6e=s(kh);Qne=n($6e,"STRONG",{});var dZr=s(Qne);xmo=r(dZr,"swin"),dZr.forEach(t),$mo=r($6e," \u2014 "),mI=n($6e,"A",{href:!0});var cZr=s(mI);kmo=r(cZr,"ViTFeatureExtractor"),cZr.forEach(t),Smo=r($6e," (Swin model)"),$6e.forEach(t),Rmo=i(Z),Sh=n(Z,"LI",{});var k6e=s(Sh);Hne=n(k6e,"STRONG",{});var fZr=s(Hne);Pmo=r(fZr,"van"),fZr.forEach(t),Bmo=r(k6e," \u2014 "),gI=n(k6e,"A",{href:!0});var mZr=s(gI);Imo=r(mZr,"ConvNextFeatureExtractor"),mZr.forEach(t),Nmo=r(k6e," (VAN model)"),k6e.forEach(t),qmo=i(Z),Rh=n(Z,"LI",{});var S6e=s(Rh);Une=n(S6e,"STRONG",{});var gZr=s(Une);jmo=r(gZr,"vit"),gZr.forEach(t),Dmo=r(S6e," \u2014 "),hI=n(S6e,"A",{href:!0});var hZr=s(hI);Gmo=r(hZr,"ViTFeatureExtractor"),hZr.forEach(t),Omo=r(S6e," (ViT model)"),S6e.forEach(t),Vmo=i(Z),Ph=n(Z,"LI",{});var R6e=s(Ph);Jne=n(R6e,"STRONG",{});var pZr=s(Jne);Xmo=r(pZr,"vit_mae"),pZr.forEach(t),zmo=r(R6e," \u2014 "),pI=n(R6e,"A",{href:!0});var _Zr=s(pI);Wmo=r(_Zr,"ViTFeatureExtractor"),_Zr.forEach(t),Qmo=r(R6e," (ViTMAE model)"),R6e.forEach(t),Hmo=i(Z),Bh=n(Z,"LI",{});var P6e=s(Bh);Yne=n(P6e,"STRONG",{});var uZr=s(Yne);Umo=r(uZr,"wav2vec2"),uZr.forEach(t),Jmo=r(P6e," \u2014 "),_I=n(P6e,"A",{href:!0});var bZr=s(_I);Ymo=r(bZr,"Wav2Vec2FeatureExtractor"),bZr.forEach(t),Kmo=r(P6e," (Wav2Vec2 model)"),P6e.forEach(t),Zmo=i(Z),Ih=n(Z,"LI",{});var B6e=s(Ih);Kne=n(B6e,"STRONG",{});var vZr=s(Kne);ego=r(vZr,"wav2vec2-conformer"),vZr.forEach(t),ogo=r(B6e," \u2014 "),uI=n(B6e,"A",{href:!0});var FZr=s(uI);rgo=r(FZr,"Wav2Vec2FeatureExtractor"),FZr.forEach(t),tgo=r(B6e," (Wav2Vec2-Conformer model)"),B6e.forEach(t),ago=i(Z),Nh=n(Z,"LI",{});var I6e=s(Nh);Zne=n(I6e,"STRONG",{});var TZr=s(Zne);ngo=r(TZr,"yolos"),TZr.forEach(t),sgo=r(I6e," \u2014 "),bI=n(I6e,"A",{href:!0});var MZr=s(bI);lgo=r(MZr,"YolosFeatureExtractor"),MZr.forEach(t),igo=r(I6e," (YOLOS model)"),I6e.forEach(t),Z.forEach(t),dgo=i(Zt),T(qh.$$.fragment,Zt),cgo=i(Zt),T(jh.$$.fragment,Zt),Zt.forEach(t),fgo=i(js),Dh=n(js,"DIV",{class:!0});var $De=s(Dh);T(YA.$$.fragment,$De),mgo=i($De),ese=n($De,"P",{});var EZr=s(ese);ggo=r(EZr,"Register a new feature extractor for this class."),EZr.forEach(t),$De.forEach(t),js.forEach(t),xqe=i(f),Ei=n(f,"H2",{class:!0});var kDe=s(Ei);Gh=n(kDe,"A",{id:!0,class:!0,href:!0});var CZr=s(Gh);ose=n(CZr,"SPAN",{});var wZr=s(ose);T(KA.$$.fragment,wZr),wZr.forEach(t),CZr.forEach(t),hgo=i(kDe),rse=n(kDe,"SPAN",{});var AZr=s(rse);pgo=r(AZr,"AutoProcessor"),AZr.forEach(t),kDe.forEach(t),$qe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(ZA.$$.fragment,Ds),_go=i(Ds),ey=n(Ds,"P",{});var SDe=s(ey);ugo=r(SDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),vI=n(SDe,"A",{href:!0});var yZr=s(vI);bgo=r(yZr,"AutoProcessor.from_pretrained()"),yZr.forEach(t),vgo=r(SDe," class method."),SDe.forEach(t),Fgo=i(Ds),oy=n(Ds,"P",{});var RDe=s(oy);Tgo=r(RDe,"This class cannot be instantiated directly using "),tse=n(RDe,"CODE",{});var LZr=s(tse);Mgo=r(LZr,"__init__()"),LZr.forEach(t),Ego=r(RDe," (throws an error)."),RDe.forEach(t),Cgo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(ry.$$.fragment,ea),wgo=i(ea),ase=n(ea,"P",{});var xZr=s(ase);Ago=r(xZr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),xZr.forEach(t),ygo=i(ea),Ci=n(ea,"P",{});var CZ=s(Ci);Lgo=r(CZ,"The processor class to instantiate is selected based on the "),nse=n(CZ,"CODE",{});var $Zr=s(nse);xgo=r($Zr,"model_type"),$Zr.forEach(t),$go=r(CZ,` property of the config object (either
passed as an argument or loaded from `),sse=n(CZ,"CODE",{});var kZr=s(sse);kgo=r(kZr,"pretrained_model_name_or_path"),kZr.forEach(t),Sgo=r(CZ," if possible):"),CZ.forEach(t),Rgo=i(ea),he=n(ea,"UL",{});var ue=s(he);Oh=n(ue,"LI",{});var N6e=s(Oh);lse=n(N6e,"STRONG",{});var SZr=s(lse);Pgo=r(SZr,"clip"),SZr.forEach(t),Bgo=r(N6e," \u2014 "),FI=n(N6e,"A",{href:!0});var RZr=s(FI);Igo=r(RZr,"CLIPProcessor"),RZr.forEach(t),Ngo=r(N6e," (CLIP model)"),N6e.forEach(t),qgo=i(ue),Vh=n(ue,"LI",{});var q6e=s(Vh);ise=n(q6e,"STRONG",{});var PZr=s(ise);jgo=r(PZr,"flava"),PZr.forEach(t),Dgo=r(q6e," \u2014 "),dse=n(q6e,"CODE",{});var BZr=s(dse);Ggo=r(BZr,"FLAVAProcessor"),BZr.forEach(t),Ogo=r(q6e," (Flava model)"),q6e.forEach(t),Vgo=i(ue),Xh=n(ue,"LI",{});var j6e=s(Xh);cse=n(j6e,"STRONG",{});var IZr=s(cse);Xgo=r(IZr,"layoutlmv2"),IZr.forEach(t),zgo=r(j6e," \u2014 "),TI=n(j6e,"A",{href:!0});var NZr=s(TI);Wgo=r(NZr,"LayoutLMv2Processor"),NZr.forEach(t),Qgo=r(j6e," (LayoutLMv2 model)"),j6e.forEach(t),Hgo=i(ue),zh=n(ue,"LI",{});var D6e=s(zh);fse=n(D6e,"STRONG",{});var qZr=s(fse);Ugo=r(qZr,"layoutlmv3"),qZr.forEach(t),Jgo=r(D6e," \u2014 "),MI=n(D6e,"A",{href:!0});var jZr=s(MI);Ygo=r(jZr,"LayoutLMv3Processor"),jZr.forEach(t),Kgo=r(D6e," (LayoutLMv3 model)"),D6e.forEach(t),Zgo=i(ue),Wh=n(ue,"LI",{});var G6e=s(Wh);mse=n(G6e,"STRONG",{});var DZr=s(mse);eho=r(DZr,"layoutxlm"),DZr.forEach(t),oho=r(G6e," \u2014 "),EI=n(G6e,"A",{href:!0});var GZr=s(EI);rho=r(GZr,"LayoutXLMProcessor"),GZr.forEach(t),tho=r(G6e," (LayoutXLM model)"),G6e.forEach(t),aho=i(ue),Qh=n(ue,"LI",{});var O6e=s(Qh);gse=n(O6e,"STRONG",{});var OZr=s(gse);nho=r(OZr,"sew"),OZr.forEach(t),sho=r(O6e," \u2014 "),CI=n(O6e,"A",{href:!0});var VZr=s(CI);lho=r(VZr,"Wav2Vec2Processor"),VZr.forEach(t),iho=r(O6e," (SEW model)"),O6e.forEach(t),dho=i(ue),Hh=n(ue,"LI",{});var V6e=s(Hh);hse=n(V6e,"STRONG",{});var XZr=s(hse);cho=r(XZr,"sew-d"),XZr.forEach(t),fho=r(V6e," \u2014 "),wI=n(V6e,"A",{href:!0});var zZr=s(wI);mho=r(zZr,"Wav2Vec2Processor"),zZr.forEach(t),gho=r(V6e," (SEW-D model)"),V6e.forEach(t),hho=i(ue),Uh=n(ue,"LI",{});var X6e=s(Uh);pse=n(X6e,"STRONG",{});var WZr=s(pse);pho=r(WZr,"speech_to_text"),WZr.forEach(t),_ho=r(X6e," \u2014 "),AI=n(X6e,"A",{href:!0});var QZr=s(AI);uho=r(QZr,"Speech2TextProcessor"),QZr.forEach(t),bho=r(X6e," (Speech2Text model)"),X6e.forEach(t),vho=i(ue),Jh=n(ue,"LI",{});var z6e=s(Jh);_se=n(z6e,"STRONG",{});var HZr=s(_se);Fho=r(HZr,"speech_to_text_2"),HZr.forEach(t),Tho=r(z6e," \u2014 "),yI=n(z6e,"A",{href:!0});var UZr=s(yI);Mho=r(UZr,"Speech2Text2Processor"),UZr.forEach(t),Eho=r(z6e," (Speech2Text2 model)"),z6e.forEach(t),Cho=i(ue),Yh=n(ue,"LI",{});var W6e=s(Yh);use=n(W6e,"STRONG",{});var JZr=s(use);who=r(JZr,"trocr"),JZr.forEach(t),Aho=r(W6e," \u2014 "),LI=n(W6e,"A",{href:!0});var YZr=s(LI);yho=r(YZr,"TrOCRProcessor"),YZr.forEach(t),Lho=r(W6e," (TrOCR model)"),W6e.forEach(t),xho=i(ue),Kh=n(ue,"LI",{});var Q6e=s(Kh);bse=n(Q6e,"STRONG",{});var KZr=s(bse);$ho=r(KZr,"unispeech"),KZr.forEach(t),kho=r(Q6e," \u2014 "),xI=n(Q6e,"A",{href:!0});var ZZr=s(xI);Sho=r(ZZr,"Wav2Vec2Processor"),ZZr.forEach(t),Rho=r(Q6e," (UniSpeech model)"),Q6e.forEach(t),Pho=i(ue),Zh=n(ue,"LI",{});var H6e=s(Zh);vse=n(H6e,"STRONG",{});var eet=s(vse);Bho=r(eet,"unispeech-sat"),eet.forEach(t),Iho=r(H6e," \u2014 "),$I=n(H6e,"A",{href:!0});var oet=s($I);Nho=r(oet,"Wav2Vec2Processor"),oet.forEach(t),qho=r(H6e," (UniSpeechSat model)"),H6e.forEach(t),jho=i(ue),ep=n(ue,"LI",{});var U6e=s(ep);Fse=n(U6e,"STRONG",{});var ret=s(Fse);Dho=r(ret,"vilt"),ret.forEach(t),Gho=r(U6e," \u2014 "),kI=n(U6e,"A",{href:!0});var tet=s(kI);Oho=r(tet,"ViltProcessor"),tet.forEach(t),Vho=r(U6e," (ViLT model)"),U6e.forEach(t),Xho=i(ue),op=n(ue,"LI",{});var J6e=s(op);Tse=n(J6e,"STRONG",{});var aet=s(Tse);zho=r(aet,"vision-text-dual-encoder"),aet.forEach(t),Who=r(J6e," \u2014 "),SI=n(J6e,"A",{href:!0});var net=s(SI);Qho=r(net,"VisionTextDualEncoderProcessor"),net.forEach(t),Hho=r(J6e," (VisionTextDualEncoder model)"),J6e.forEach(t),Uho=i(ue),rp=n(ue,"LI",{});var Y6e=s(rp);Mse=n(Y6e,"STRONG",{});var set=s(Mse);Jho=r(set,"wav2vec2"),set.forEach(t),Yho=r(Y6e," \u2014 "),RI=n(Y6e,"A",{href:!0});var iet=s(RI);Kho=r(iet,"Wav2Vec2Processor"),iet.forEach(t),Zho=r(Y6e," (Wav2Vec2 model)"),Y6e.forEach(t),epo=i(ue),tp=n(ue,"LI",{});var K6e=s(tp);Ese=n(K6e,"STRONG",{});var det=s(Ese);opo=r(det,"wav2vec2-conformer"),det.forEach(t),rpo=r(K6e," \u2014 "),PI=n(K6e,"A",{href:!0});var cet=s(PI);tpo=r(cet,"Wav2Vec2Processor"),cet.forEach(t),apo=r(K6e," (Wav2Vec2-Conformer model)"),K6e.forEach(t),npo=i(ue),ap=n(ue,"LI",{});var Z6e=s(ap);Cse=n(Z6e,"STRONG",{});var fet=s(Cse);spo=r(fet,"wavlm"),fet.forEach(t),lpo=r(Z6e," \u2014 "),BI=n(Z6e,"A",{href:!0});var met=s(BI);ipo=r(met,"Wav2Vec2Processor"),met.forEach(t),dpo=r(Z6e," (WavLM model)"),Z6e.forEach(t),ue.forEach(t),cpo=i(ea),T(np.$$.fragment,ea),fpo=i(ea),T(sp.$$.fragment,ea),ea.forEach(t),mpo=i(Ds),lp=n(Ds,"DIV",{class:!0});var PDe=s(lp);T(ty.$$.fragment,PDe),gpo=i(PDe),wse=n(PDe,"P",{});var get=s(wse);hpo=r(get,"Register a new processor for this class."),get.forEach(t),PDe.forEach(t),Ds.forEach(t),kqe=i(f),wi=n(f,"H2",{class:!0});var BDe=s(wi);ip=n(BDe,"A",{id:!0,class:!0,href:!0});var het=s(ip);Ase=n(het,"SPAN",{});var pet=s(Ase);T(ay.$$.fragment,pet),pet.forEach(t),het.forEach(t),ppo=i(BDe),yse=n(BDe,"SPAN",{});var _et=s(yse);_po=r(_et,"AutoModel"),_et.forEach(t),BDe.forEach(t),Sqe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(ny.$$.fragment,Gs),upo=i(Gs),Ai=n(Gs,"P",{});var wZ=s(Ai);bpo=r(wZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),II=n(wZ,"A",{href:!0});var uet=s(II);vpo=r(uet,"from_pretrained()"),uet.forEach(t),Fpo=r(wZ," class method or the "),NI=n(wZ,"A",{href:!0});var bet=s(NI);Tpo=r(bet,"from_config()"),bet.forEach(t),Mpo=r(wZ,` class
method.`),wZ.forEach(t),Epo=i(Gs),sy=n(Gs,"P",{});var IDe=s(sy);Cpo=r(IDe,"This class cannot be instantiated directly using "),Lse=n(IDe,"CODE",{});var vet=s(Lse);wpo=r(vet,"__init__()"),vet.forEach(t),Apo=r(IDe," (throws an error)."),IDe.forEach(t),ypo=i(Gs),tt=n(Gs,"DIV",{class:!0});var Iw=s(tt);T(ly.$$.fragment,Iw),Lpo=i(Iw),xse=n(Iw,"P",{});var Fet=s(xse);xpo=r(Fet,"Instantiates one of the base model classes of the library from a configuration."),Fet.forEach(t),$po=i(Iw),yi=n(Iw,"P",{});var AZ=s(yi);kpo=r(AZ,`Note:
Loading a model from its configuration file does `),$se=n(AZ,"STRONG",{});var Tet=s($se);Spo=r(Tet,"not"),Tet.forEach(t),Rpo=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qI=n(AZ,"A",{href:!0});var Met=s(qI);Ppo=r(Met,"from_pretrained()"),Met.forEach(t),Bpo=r(AZ," to load the model weights."),AZ.forEach(t),Ipo=i(Iw),T(dp.$$.fragment,Iw),Iw.forEach(t),Npo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(iy.$$.fragment,oa),qpo=i(oa),kse=n(oa,"P",{});var Eet=s(kse);jpo=r(Eet,"Instantiate one of the base model classes of the library from a pretrained model."),Eet.forEach(t),Dpo=i(oa),La=n(oa,"P",{});var Nw=s(La);Gpo=r(Nw,"The model class to instantiate is selected based on the "),Sse=n(Nw,"CODE",{});var Cet=s(Sse);Opo=r(Cet,"model_type"),Cet.forEach(t),Vpo=r(Nw,` property of the config object (either
passed as an argument or loaded from `),Rse=n(Nw,"CODE",{});var wet=s(Rse);Xpo=r(wet,"pretrained_model_name_or_path"),wet.forEach(t),zpo=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pse=n(Nw,"CODE",{});var Aet=s(Pse);Wpo=r(Aet,"pretrained_model_name_or_path"),Aet.forEach(t),Qpo=r(Nw,":"),Nw.forEach(t),Hpo=i(oa),x=n(oa,"UL",{});var $=s(x);cp=n($,"LI",{});var eAe=s(cp);Bse=n(eAe,"STRONG",{});var yet=s(Bse);Upo=r(yet,"albert"),yet.forEach(t),Jpo=r(eAe," \u2014 "),jI=n(eAe,"A",{href:!0});var Let=s(jI);Ypo=r(Let,"AlbertModel"),Let.forEach(t),Kpo=r(eAe," (ALBERT model)"),eAe.forEach(t),Zpo=i($),fp=n($,"LI",{});var oAe=s(fp);Ise=n(oAe,"STRONG",{});var xet=s(Ise);e_o=r(xet,"bart"),xet.forEach(t),o_o=r(oAe," \u2014 "),DI=n(oAe,"A",{href:!0});var $et=s(DI);r_o=r($et,"BartModel"),$et.forEach(t),t_o=r(oAe," (BART model)"),oAe.forEach(t),a_o=i($),mp=n($,"LI",{});var rAe=s(mp);Nse=n(rAe,"STRONG",{});var ket=s(Nse);n_o=r(ket,"beit"),ket.forEach(t),s_o=r(rAe," \u2014 "),GI=n(rAe,"A",{href:!0});var Set=s(GI);l_o=r(Set,"BeitModel"),Set.forEach(t),i_o=r(rAe," (BEiT model)"),rAe.forEach(t),d_o=i($),gp=n($,"LI",{});var tAe=s(gp);qse=n(tAe,"STRONG",{});var Ret=s(qse);c_o=r(Ret,"bert"),Ret.forEach(t),f_o=r(tAe," \u2014 "),OI=n(tAe,"A",{href:!0});var Pet=s(OI);m_o=r(Pet,"BertModel"),Pet.forEach(t),g_o=r(tAe," (BERT model)"),tAe.forEach(t),h_o=i($),hp=n($,"LI",{});var aAe=s(hp);jse=n(aAe,"STRONG",{});var Bet=s(jse);p_o=r(Bet,"bert-generation"),Bet.forEach(t),__o=r(aAe," \u2014 "),VI=n(aAe,"A",{href:!0});var Iet=s(VI);u_o=r(Iet,"BertGenerationEncoder"),Iet.forEach(t),b_o=r(aAe," (Bert Generation model)"),aAe.forEach(t),v_o=i($),pp=n($,"LI",{});var nAe=s(pp);Dse=n(nAe,"STRONG",{});var Net=s(Dse);F_o=r(Net,"big_bird"),Net.forEach(t),T_o=r(nAe," \u2014 "),XI=n(nAe,"A",{href:!0});var qet=s(XI);M_o=r(qet,"BigBirdModel"),qet.forEach(t),E_o=r(nAe," (BigBird model)"),nAe.forEach(t),C_o=i($),_p=n($,"LI",{});var sAe=s(_p);Gse=n(sAe,"STRONG",{});var jet=s(Gse);w_o=r(jet,"bigbird_pegasus"),jet.forEach(t),A_o=r(sAe," \u2014 "),zI=n(sAe,"A",{href:!0});var Det=s(zI);y_o=r(Det,"BigBirdPegasusModel"),Det.forEach(t),L_o=r(sAe," (BigBirdPegasus model)"),sAe.forEach(t),x_o=i($),up=n($,"LI",{});var lAe=s(up);Ose=n(lAe,"STRONG",{});var Get=s(Ose);$_o=r(Get,"blenderbot"),Get.forEach(t),k_o=r(lAe," \u2014 "),WI=n(lAe,"A",{href:!0});var Oet=s(WI);S_o=r(Oet,"BlenderbotModel"),Oet.forEach(t),R_o=r(lAe," (Blenderbot model)"),lAe.forEach(t),P_o=i($),bp=n($,"LI",{});var iAe=s(bp);Vse=n(iAe,"STRONG",{});var Vet=s(Vse);B_o=r(Vet,"blenderbot-small"),Vet.forEach(t),I_o=r(iAe," \u2014 "),QI=n(iAe,"A",{href:!0});var Xet=s(QI);N_o=r(Xet,"BlenderbotSmallModel"),Xet.forEach(t),q_o=r(iAe," (BlenderbotSmall model)"),iAe.forEach(t),j_o=i($),vp=n($,"LI",{});var dAe=s(vp);Xse=n(dAe,"STRONG",{});var zet=s(Xse);D_o=r(zet,"bloom"),zet.forEach(t),G_o=r(dAe," \u2014 "),HI=n(dAe,"A",{href:!0});var Wet=s(HI);O_o=r(Wet,"BloomModel"),Wet.forEach(t),V_o=r(dAe," (BLOOM model)"),dAe.forEach(t),X_o=i($),Fp=n($,"LI",{});var cAe=s(Fp);zse=n(cAe,"STRONG",{});var Qet=s(zse);z_o=r(Qet,"camembert"),Qet.forEach(t),W_o=r(cAe," \u2014 "),UI=n(cAe,"A",{href:!0});var Het=s(UI);Q_o=r(Het,"CamembertModel"),Het.forEach(t),H_o=r(cAe," (CamemBERT model)"),cAe.forEach(t),U_o=i($),Tp=n($,"LI",{});var fAe=s(Tp);Wse=n(fAe,"STRONG",{});var Uet=s(Wse);J_o=r(Uet,"canine"),Uet.forEach(t),Y_o=r(fAe," \u2014 "),JI=n(fAe,"A",{href:!0});var Jet=s(JI);K_o=r(Jet,"CanineModel"),Jet.forEach(t),Z_o=r(fAe," (Canine model)"),fAe.forEach(t),euo=i($),Mp=n($,"LI",{});var mAe=s(Mp);Qse=n(mAe,"STRONG",{});var Yet=s(Qse);ouo=r(Yet,"clip"),Yet.forEach(t),ruo=r(mAe," \u2014 "),YI=n(mAe,"A",{href:!0});var Ket=s(YI);tuo=r(Ket,"CLIPModel"),Ket.forEach(t),auo=r(mAe," (CLIP model)"),mAe.forEach(t),nuo=i($),Ep=n($,"LI",{});var gAe=s(Ep);Hse=n(gAe,"STRONG",{});var Zet=s(Hse);suo=r(Zet,"convbert"),Zet.forEach(t),luo=r(gAe," \u2014 "),KI=n(gAe,"A",{href:!0});var eot=s(KI);iuo=r(eot,"ConvBertModel"),eot.forEach(t),duo=r(gAe," (ConvBERT model)"),gAe.forEach(t),cuo=i($),Cp=n($,"LI",{});var hAe=s(Cp);Use=n(hAe,"STRONG",{});var oot=s(Use);fuo=r(oot,"convnext"),oot.forEach(t),muo=r(hAe," \u2014 "),ZI=n(hAe,"A",{href:!0});var rot=s(ZI);guo=r(rot,"ConvNextModel"),rot.forEach(t),huo=r(hAe," (ConvNext model)"),hAe.forEach(t),puo=i($),wp=n($,"LI",{});var pAe=s(wp);Jse=n(pAe,"STRONG",{});var tot=s(Jse);_uo=r(tot,"ctrl"),tot.forEach(t),uuo=r(pAe," \u2014 "),eN=n(pAe,"A",{href:!0});var aot=s(eN);buo=r(aot,"CTRLModel"),aot.forEach(t),vuo=r(pAe," (CTRL model)"),pAe.forEach(t),Fuo=i($),Ap=n($,"LI",{});var _Ae=s(Ap);Yse=n(_Ae,"STRONG",{});var not=s(Yse);Tuo=r(not,"cvt"),not.forEach(t),Muo=r(_Ae," \u2014 "),oN=n(_Ae,"A",{href:!0});var sot=s(oN);Euo=r(sot,"CvtModel"),sot.forEach(t),Cuo=r(_Ae," (CvT model)"),_Ae.forEach(t),wuo=i($),yp=n($,"LI",{});var uAe=s(yp);Kse=n(uAe,"STRONG",{});var lot=s(Kse);Auo=r(lot,"data2vec-audio"),lot.forEach(t),yuo=r(uAe," \u2014 "),rN=n(uAe,"A",{href:!0});var iot=s(rN);Luo=r(iot,"Data2VecAudioModel"),iot.forEach(t),xuo=r(uAe," (Data2VecAudio model)"),uAe.forEach(t),$uo=i($),Lp=n($,"LI",{});var bAe=s(Lp);Zse=n(bAe,"STRONG",{});var dot=s(Zse);kuo=r(dot,"data2vec-text"),dot.forEach(t),Suo=r(bAe," \u2014 "),tN=n(bAe,"A",{href:!0});var cot=s(tN);Ruo=r(cot,"Data2VecTextModel"),cot.forEach(t),Puo=r(bAe," (Data2VecText model)"),bAe.forEach(t),Buo=i($),xp=n($,"LI",{});var vAe=s(xp);ele=n(vAe,"STRONG",{});var fot=s(ele);Iuo=r(fot,"data2vec-vision"),fot.forEach(t),Nuo=r(vAe," \u2014 "),aN=n(vAe,"A",{href:!0});var mot=s(aN);quo=r(mot,"Data2VecVisionModel"),mot.forEach(t),juo=r(vAe," (Data2VecVision model)"),vAe.forEach(t),Duo=i($),$p=n($,"LI",{});var FAe=s($p);ole=n(FAe,"STRONG",{});var got=s(ole);Guo=r(got,"deberta"),got.forEach(t),Ouo=r(FAe," \u2014 "),nN=n(FAe,"A",{href:!0});var hot=s(nN);Vuo=r(hot,"DebertaModel"),hot.forEach(t),Xuo=r(FAe," (DeBERTa model)"),FAe.forEach(t),zuo=i($),kp=n($,"LI",{});var TAe=s(kp);rle=n(TAe,"STRONG",{});var pot=s(rle);Wuo=r(pot,"deberta-v2"),pot.forEach(t),Quo=r(TAe," \u2014 "),sN=n(TAe,"A",{href:!0});var _ot=s(sN);Huo=r(_ot,"DebertaV2Model"),_ot.forEach(t),Uuo=r(TAe," (DeBERTa-v2 model)"),TAe.forEach(t),Juo=i($),Sp=n($,"LI",{});var MAe=s(Sp);tle=n(MAe,"STRONG",{});var uot=s(tle);Yuo=r(uot,"decision_transformer"),uot.forEach(t),Kuo=r(MAe," \u2014 "),lN=n(MAe,"A",{href:!0});var bot=s(lN);Zuo=r(bot,"DecisionTransformerModel"),bot.forEach(t),e2o=r(MAe," (Decision Transformer model)"),MAe.forEach(t),o2o=i($),Rp=n($,"LI",{});var EAe=s(Rp);ale=n(EAe,"STRONG",{});var vot=s(ale);r2o=r(vot,"deit"),vot.forEach(t),t2o=r(EAe," \u2014 "),iN=n(EAe,"A",{href:!0});var Fot=s(iN);a2o=r(Fot,"DeiTModel"),Fot.forEach(t),n2o=r(EAe," (DeiT model)"),EAe.forEach(t),s2o=i($),Pp=n($,"LI",{});var CAe=s(Pp);nle=n(CAe,"STRONG",{});var Tot=s(nle);l2o=r(Tot,"detr"),Tot.forEach(t),i2o=r(CAe," \u2014 "),dN=n(CAe,"A",{href:!0});var Mot=s(dN);d2o=r(Mot,"DetrModel"),Mot.forEach(t),c2o=r(CAe," (DETR model)"),CAe.forEach(t),f2o=i($),Bp=n($,"LI",{});var wAe=s(Bp);sle=n(wAe,"STRONG",{});var Eot=s(sle);m2o=r(Eot,"distilbert"),Eot.forEach(t),g2o=r(wAe," \u2014 "),cN=n(wAe,"A",{href:!0});var Cot=s(cN);h2o=r(Cot,"DistilBertModel"),Cot.forEach(t),p2o=r(wAe," (DistilBERT model)"),wAe.forEach(t),_2o=i($),Ip=n($,"LI",{});var AAe=s(Ip);lle=n(AAe,"STRONG",{});var wot=s(lle);u2o=r(wot,"dpr"),wot.forEach(t),b2o=r(AAe," \u2014 "),fN=n(AAe,"A",{href:!0});var Aot=s(fN);v2o=r(Aot,"DPRQuestionEncoder"),Aot.forEach(t),F2o=r(AAe," (DPR model)"),AAe.forEach(t),T2o=i($),Np=n($,"LI",{});var yAe=s(Np);ile=n(yAe,"STRONG",{});var yot=s(ile);M2o=r(yot,"dpt"),yot.forEach(t),E2o=r(yAe," \u2014 "),mN=n(yAe,"A",{href:!0});var Lot=s(mN);C2o=r(Lot,"DPTModel"),Lot.forEach(t),w2o=r(yAe," (DPT model)"),yAe.forEach(t),A2o=i($),qp=n($,"LI",{});var LAe=s(qp);dle=n(LAe,"STRONG",{});var xot=s(dle);y2o=r(xot,"electra"),xot.forEach(t),L2o=r(LAe," \u2014 "),gN=n(LAe,"A",{href:!0});var $ot=s(gN);x2o=r($ot,"ElectraModel"),$ot.forEach(t),$2o=r(LAe," (ELECTRA model)"),LAe.forEach(t),k2o=i($),jp=n($,"LI",{});var xAe=s(jp);cle=n(xAe,"STRONG",{});var kot=s(cle);S2o=r(kot,"flaubert"),kot.forEach(t),R2o=r(xAe," \u2014 "),hN=n(xAe,"A",{href:!0});var Sot=s(hN);P2o=r(Sot,"FlaubertModel"),Sot.forEach(t),B2o=r(xAe," (FlauBERT model)"),xAe.forEach(t),I2o=i($),Dp=n($,"LI",{});var $Ae=s(Dp);fle=n($Ae,"STRONG",{});var Rot=s(fle);N2o=r(Rot,"flava"),Rot.forEach(t),q2o=r($Ae," \u2014 "),pN=n($Ae,"A",{href:!0});var Pot=s(pN);j2o=r(Pot,"FlavaModel"),Pot.forEach(t),D2o=r($Ae," (Flava model)"),$Ae.forEach(t),G2o=i($),Gp=n($,"LI",{});var kAe=s(Gp);mle=n(kAe,"STRONG",{});var Bot=s(mle);O2o=r(Bot,"fnet"),Bot.forEach(t),V2o=r(kAe," \u2014 "),_N=n(kAe,"A",{href:!0});var Iot=s(_N);X2o=r(Iot,"FNetModel"),Iot.forEach(t),z2o=r(kAe," (FNet model)"),kAe.forEach(t),W2o=i($),Op=n($,"LI",{});var SAe=s(Op);gle=n(SAe,"STRONG",{});var Not=s(gle);Q2o=r(Not,"fsmt"),Not.forEach(t),H2o=r(SAe," \u2014 "),uN=n(SAe,"A",{href:!0});var qot=s(uN);U2o=r(qot,"FSMTModel"),qot.forEach(t),J2o=r(SAe," (FairSeq Machine-Translation model)"),SAe.forEach(t),Y2o=i($),Ps=n($,"LI",{});var Q$=s(Ps);hle=n(Q$,"STRONG",{});var jot=s(hle);K2o=r(jot,"funnel"),jot.forEach(t),Z2o=r(Q$," \u2014 "),bN=n(Q$,"A",{href:!0});var Dot=s(bN);e1o=r(Dot,"FunnelModel"),Dot.forEach(t),o1o=r(Q$," or "),vN=n(Q$,"A",{href:!0});var Got=s(vN);r1o=r(Got,"FunnelBaseModel"),Got.forEach(t),t1o=r(Q$," (Funnel Transformer model)"),Q$.forEach(t),a1o=i($),Vp=n($,"LI",{});var RAe=s(Vp);ple=n(RAe,"STRONG",{});var Oot=s(ple);n1o=r(Oot,"glpn"),Oot.forEach(t),s1o=r(RAe," \u2014 "),FN=n(RAe,"A",{href:!0});var Vot=s(FN);l1o=r(Vot,"GLPNModel"),Vot.forEach(t),i1o=r(RAe," (GLPN model)"),RAe.forEach(t),d1o=i($),Xp=n($,"LI",{});var PAe=s(Xp);_le=n(PAe,"STRONG",{});var Xot=s(_le);c1o=r(Xot,"gpt2"),Xot.forEach(t),f1o=r(PAe," \u2014 "),TN=n(PAe,"A",{href:!0});var zot=s(TN);m1o=r(zot,"GPT2Model"),zot.forEach(t),g1o=r(PAe," (OpenAI GPT-2 model)"),PAe.forEach(t),h1o=i($),zp=n($,"LI",{});var BAe=s(zp);ule=n(BAe,"STRONG",{});var Wot=s(ule);p1o=r(Wot,"gpt_neo"),Wot.forEach(t),_1o=r(BAe," \u2014 "),MN=n(BAe,"A",{href:!0});var Qot=s(MN);u1o=r(Qot,"GPTNeoModel"),Qot.forEach(t),b1o=r(BAe," (GPT Neo model)"),BAe.forEach(t),v1o=i($),Wp=n($,"LI",{});var IAe=s(Wp);ble=n(IAe,"STRONG",{});var Hot=s(ble);F1o=r(Hot,"gpt_neox"),Hot.forEach(t),T1o=r(IAe," \u2014 "),EN=n(IAe,"A",{href:!0});var Uot=s(EN);M1o=r(Uot,"GPTNeoXModel"),Uot.forEach(t),E1o=r(IAe," (GPT NeoX model)"),IAe.forEach(t),C1o=i($),Qp=n($,"LI",{});var NAe=s(Qp);vle=n(NAe,"STRONG",{});var Jot=s(vle);w1o=r(Jot,"gptj"),Jot.forEach(t),A1o=r(NAe," \u2014 "),CN=n(NAe,"A",{href:!0});var Yot=s(CN);y1o=r(Yot,"GPTJModel"),Yot.forEach(t),L1o=r(NAe," (GPT-J model)"),NAe.forEach(t),x1o=i($),Hp=n($,"LI",{});var qAe=s(Hp);Fle=n(qAe,"STRONG",{});var Kot=s(Fle);$1o=r(Kot,"hubert"),Kot.forEach(t),k1o=r(qAe," \u2014 "),wN=n(qAe,"A",{href:!0});var Zot=s(wN);S1o=r(Zot,"HubertModel"),Zot.forEach(t),R1o=r(qAe," (Hubert model)"),qAe.forEach(t),P1o=i($),Up=n($,"LI",{});var jAe=s(Up);Tle=n(jAe,"STRONG",{});var ert=s(Tle);B1o=r(ert,"ibert"),ert.forEach(t),I1o=r(jAe," \u2014 "),AN=n(jAe,"A",{href:!0});var ort=s(AN);N1o=r(ort,"IBertModel"),ort.forEach(t),q1o=r(jAe," (I-BERT model)"),jAe.forEach(t),j1o=i($),Jp=n($,"LI",{});var DAe=s(Jp);Mle=n(DAe,"STRONG",{});var rrt=s(Mle);D1o=r(rrt,"imagegpt"),rrt.forEach(t),G1o=r(DAe," \u2014 "),yN=n(DAe,"A",{href:!0});var trt=s(yN);O1o=r(trt,"ImageGPTModel"),trt.forEach(t),V1o=r(DAe," (ImageGPT model)"),DAe.forEach(t),X1o=i($),Yp=n($,"LI",{});var GAe=s(Yp);Ele=n(GAe,"STRONG",{});var art=s(Ele);z1o=r(art,"layoutlm"),art.forEach(t),W1o=r(GAe," \u2014 "),LN=n(GAe,"A",{href:!0});var nrt=s(LN);Q1o=r(nrt,"LayoutLMModel"),nrt.forEach(t),H1o=r(GAe," (LayoutLM model)"),GAe.forEach(t),U1o=i($),Kp=n($,"LI",{});var OAe=s(Kp);Cle=n(OAe,"STRONG",{});var srt=s(Cle);J1o=r(srt,"layoutlmv2"),srt.forEach(t),Y1o=r(OAe," \u2014 "),xN=n(OAe,"A",{href:!0});var lrt=s(xN);K1o=r(lrt,"LayoutLMv2Model"),lrt.forEach(t),Z1o=r(OAe," (LayoutLMv2 model)"),OAe.forEach(t),ebo=i($),Zp=n($,"LI",{});var VAe=s(Zp);wle=n(VAe,"STRONG",{});var irt=s(wle);obo=r(irt,"layoutlmv3"),irt.forEach(t),rbo=r(VAe," \u2014 "),$N=n(VAe,"A",{href:!0});var drt=s($N);tbo=r(drt,"LayoutLMv3Model"),drt.forEach(t),abo=r(VAe," (LayoutLMv3 model)"),VAe.forEach(t),nbo=i($),e_=n($,"LI",{});var XAe=s(e_);Ale=n(XAe,"STRONG",{});var crt=s(Ale);sbo=r(crt,"led"),crt.forEach(t),lbo=r(XAe," \u2014 "),kN=n(XAe,"A",{href:!0});var frt=s(kN);ibo=r(frt,"LEDModel"),frt.forEach(t),dbo=r(XAe," (LED model)"),XAe.forEach(t),cbo=i($),o_=n($,"LI",{});var zAe=s(o_);yle=n(zAe,"STRONG",{});var mrt=s(yle);fbo=r(mrt,"longformer"),mrt.forEach(t),mbo=r(zAe," \u2014 "),SN=n(zAe,"A",{href:!0});var grt=s(SN);gbo=r(grt,"LongformerModel"),grt.forEach(t),hbo=r(zAe," (Longformer model)"),zAe.forEach(t),pbo=i($),r_=n($,"LI",{});var WAe=s(r_);Lle=n(WAe,"STRONG",{});var hrt=s(Lle);_bo=r(hrt,"luke"),hrt.forEach(t),ubo=r(WAe," \u2014 "),RN=n(WAe,"A",{href:!0});var prt=s(RN);bbo=r(prt,"LukeModel"),prt.forEach(t),vbo=r(WAe," (LUKE model)"),WAe.forEach(t),Fbo=i($),t_=n($,"LI",{});var QAe=s(t_);xle=n(QAe,"STRONG",{});var _rt=s(xle);Tbo=r(_rt,"lxmert"),_rt.forEach(t),Mbo=r(QAe," \u2014 "),PN=n(QAe,"A",{href:!0});var urt=s(PN);Ebo=r(urt,"LxmertModel"),urt.forEach(t),Cbo=r(QAe," (LXMERT model)"),QAe.forEach(t),wbo=i($),a_=n($,"LI",{});var HAe=s(a_);$le=n(HAe,"STRONG",{});var brt=s($le);Abo=r(brt,"m2m_100"),brt.forEach(t),ybo=r(HAe," \u2014 "),BN=n(HAe,"A",{href:!0});var vrt=s(BN);Lbo=r(vrt,"M2M100Model"),vrt.forEach(t),xbo=r(HAe," (M2M100 model)"),HAe.forEach(t),$bo=i($),n_=n($,"LI",{});var UAe=s(n_);kle=n(UAe,"STRONG",{});var Frt=s(kle);kbo=r(Frt,"marian"),Frt.forEach(t),Sbo=r(UAe," \u2014 "),IN=n(UAe,"A",{href:!0});var Trt=s(IN);Rbo=r(Trt,"MarianModel"),Trt.forEach(t),Pbo=r(UAe," (Marian model)"),UAe.forEach(t),Bbo=i($),s_=n($,"LI",{});var JAe=s(s_);Sle=n(JAe,"STRONG",{});var Mrt=s(Sle);Ibo=r(Mrt,"maskformer"),Mrt.forEach(t),Nbo=r(JAe," \u2014 "),NN=n(JAe,"A",{href:!0});var Ert=s(NN);qbo=r(Ert,"MaskFormerModel"),Ert.forEach(t),jbo=r(JAe," (MaskFormer model)"),JAe.forEach(t),Dbo=i($),l_=n($,"LI",{});var YAe=s(l_);Rle=n(YAe,"STRONG",{});var Crt=s(Rle);Gbo=r(Crt,"mbart"),Crt.forEach(t),Obo=r(YAe," \u2014 "),qN=n(YAe,"A",{href:!0});var wrt=s(qN);Vbo=r(wrt,"MBartModel"),wrt.forEach(t),Xbo=r(YAe," (mBART model)"),YAe.forEach(t),zbo=i($),i_=n($,"LI",{});var KAe=s(i_);Ple=n(KAe,"STRONG",{});var Art=s(Ple);Wbo=r(Art,"megatron-bert"),Art.forEach(t),Qbo=r(KAe," \u2014 "),jN=n(KAe,"A",{href:!0});var yrt=s(jN);Hbo=r(yrt,"MegatronBertModel"),yrt.forEach(t),Ubo=r(KAe," (MegatronBert model)"),KAe.forEach(t),Jbo=i($),d_=n($,"LI",{});var ZAe=s(d_);Ble=n(ZAe,"STRONG",{});var Lrt=s(Ble);Ybo=r(Lrt,"mobilebert"),Lrt.forEach(t),Kbo=r(ZAe," \u2014 "),DN=n(ZAe,"A",{href:!0});var xrt=s(DN);Zbo=r(xrt,"MobileBertModel"),xrt.forEach(t),evo=r(ZAe," (MobileBERT model)"),ZAe.forEach(t),ovo=i($),c_=n($,"LI",{});var eye=s(c_);Ile=n(eye,"STRONG",{});var $rt=s(Ile);rvo=r($rt,"mpnet"),$rt.forEach(t),tvo=r(eye," \u2014 "),GN=n(eye,"A",{href:!0});var krt=s(GN);avo=r(krt,"MPNetModel"),krt.forEach(t),nvo=r(eye," (MPNet model)"),eye.forEach(t),svo=i($),f_=n($,"LI",{});var oye=s(f_);Nle=n(oye,"STRONG",{});var Srt=s(Nle);lvo=r(Srt,"mt5"),Srt.forEach(t),ivo=r(oye," \u2014 "),ON=n(oye,"A",{href:!0});var Rrt=s(ON);dvo=r(Rrt,"MT5Model"),Rrt.forEach(t),cvo=r(oye," (mT5 model)"),oye.forEach(t),fvo=i($),m_=n($,"LI",{});var rye=s(m_);qle=n(rye,"STRONG",{});var Prt=s(qle);mvo=r(Prt,"nystromformer"),Prt.forEach(t),gvo=r(rye," \u2014 "),VN=n(rye,"A",{href:!0});var Brt=s(VN);hvo=r(Brt,"NystromformerModel"),Brt.forEach(t),pvo=r(rye," (Nystromformer model)"),rye.forEach(t),_vo=i($),g_=n($,"LI",{});var tye=s(g_);jle=n(tye,"STRONG",{});var Irt=s(jle);uvo=r(Irt,"openai-gpt"),Irt.forEach(t),bvo=r(tye," \u2014 "),XN=n(tye,"A",{href:!0});var Nrt=s(XN);vvo=r(Nrt,"OpenAIGPTModel"),Nrt.forEach(t),Fvo=r(tye," (OpenAI GPT model)"),tye.forEach(t),Tvo=i($),h_=n($,"LI",{});var aye=s(h_);Dle=n(aye,"STRONG",{});var qrt=s(Dle);Mvo=r(qrt,"opt"),qrt.forEach(t),Evo=r(aye," \u2014 "),zN=n(aye,"A",{href:!0});var jrt=s(zN);Cvo=r(jrt,"OPTModel"),jrt.forEach(t),wvo=r(aye," (OPT model)"),aye.forEach(t),Avo=i($),p_=n($,"LI",{});var nye=s(p_);Gle=n(nye,"STRONG",{});var Drt=s(Gle);yvo=r(Drt,"pegasus"),Drt.forEach(t),Lvo=r(nye," \u2014 "),WN=n(nye,"A",{href:!0});var Grt=s(WN);xvo=r(Grt,"PegasusModel"),Grt.forEach(t),$vo=r(nye," (Pegasus model)"),nye.forEach(t),kvo=i($),__=n($,"LI",{});var sye=s(__);Ole=n(sye,"STRONG",{});var Ort=s(Ole);Svo=r(Ort,"perceiver"),Ort.forEach(t),Rvo=r(sye," \u2014 "),QN=n(sye,"A",{href:!0});var Vrt=s(QN);Pvo=r(Vrt,"PerceiverModel"),Vrt.forEach(t),Bvo=r(sye," (Perceiver model)"),sye.forEach(t),Ivo=i($),u_=n($,"LI",{});var lye=s(u_);Vle=n(lye,"STRONG",{});var Xrt=s(Vle);Nvo=r(Xrt,"plbart"),Xrt.forEach(t),qvo=r(lye," \u2014 "),HN=n(lye,"A",{href:!0});var zrt=s(HN);jvo=r(zrt,"PLBartModel"),zrt.forEach(t),Dvo=r(lye," (PLBart model)"),lye.forEach(t),Gvo=i($),b_=n($,"LI",{});var iye=s(b_);Xle=n(iye,"STRONG",{});var Wrt=s(Xle);Ovo=r(Wrt,"poolformer"),Wrt.forEach(t),Vvo=r(iye," \u2014 "),UN=n(iye,"A",{href:!0});var Qrt=s(UN);Xvo=r(Qrt,"PoolFormerModel"),Qrt.forEach(t),zvo=r(iye," (PoolFormer model)"),iye.forEach(t),Wvo=i($),v_=n($,"LI",{});var dye=s(v_);zle=n(dye,"STRONG",{});var Hrt=s(zle);Qvo=r(Hrt,"prophetnet"),Hrt.forEach(t),Hvo=r(dye," \u2014 "),JN=n(dye,"A",{href:!0});var Urt=s(JN);Uvo=r(Urt,"ProphetNetModel"),Urt.forEach(t),Jvo=r(dye," (ProphetNet model)"),dye.forEach(t),Yvo=i($),F_=n($,"LI",{});var cye=s(F_);Wle=n(cye,"STRONG",{});var Jrt=s(Wle);Kvo=r(Jrt,"qdqbert"),Jrt.forEach(t),Zvo=r(cye," \u2014 "),YN=n(cye,"A",{href:!0});var Yrt=s(YN);e0o=r(Yrt,"QDQBertModel"),Yrt.forEach(t),o0o=r(cye," (QDQBert model)"),cye.forEach(t),r0o=i($),T_=n($,"LI",{});var fye=s(T_);Qle=n(fye,"STRONG",{});var Krt=s(Qle);t0o=r(Krt,"reformer"),Krt.forEach(t),a0o=r(fye," \u2014 "),KN=n(fye,"A",{href:!0});var Zrt=s(KN);n0o=r(Zrt,"ReformerModel"),Zrt.forEach(t),s0o=r(fye," (Reformer model)"),fye.forEach(t),l0o=i($),M_=n($,"LI",{});var mye=s(M_);Hle=n(mye,"STRONG",{});var ett=s(Hle);i0o=r(ett,"regnet"),ett.forEach(t),d0o=r(mye," \u2014 "),ZN=n(mye,"A",{href:!0});var ott=s(ZN);c0o=r(ott,"RegNetModel"),ott.forEach(t),f0o=r(mye," (RegNet model)"),mye.forEach(t),m0o=i($),E_=n($,"LI",{});var gye=s(E_);Ule=n(gye,"STRONG",{});var rtt=s(Ule);g0o=r(rtt,"rembert"),rtt.forEach(t),h0o=r(gye," \u2014 "),eq=n(gye,"A",{href:!0});var ttt=s(eq);p0o=r(ttt,"RemBertModel"),ttt.forEach(t),_0o=r(gye," (RemBERT model)"),gye.forEach(t),u0o=i($),C_=n($,"LI",{});var hye=s(C_);Jle=n(hye,"STRONG",{});var att=s(Jle);b0o=r(att,"resnet"),att.forEach(t),v0o=r(hye," \u2014 "),oq=n(hye,"A",{href:!0});var ntt=s(oq);F0o=r(ntt,"ResNetModel"),ntt.forEach(t),T0o=r(hye," (ResNet model)"),hye.forEach(t),M0o=i($),w_=n($,"LI",{});var pye=s(w_);Yle=n(pye,"STRONG",{});var stt=s(Yle);E0o=r(stt,"retribert"),stt.forEach(t),C0o=r(pye," \u2014 "),rq=n(pye,"A",{href:!0});var ltt=s(rq);w0o=r(ltt,"RetriBertModel"),ltt.forEach(t),A0o=r(pye," (RetriBERT model)"),pye.forEach(t),y0o=i($),A_=n($,"LI",{});var _ye=s(A_);Kle=n(_ye,"STRONG",{});var itt=s(Kle);L0o=r(itt,"roberta"),itt.forEach(t),x0o=r(_ye," \u2014 "),tq=n(_ye,"A",{href:!0});var dtt=s(tq);$0o=r(dtt,"RobertaModel"),dtt.forEach(t),k0o=r(_ye," (RoBERTa model)"),_ye.forEach(t),S0o=i($),y_=n($,"LI",{});var uye=s(y_);Zle=n(uye,"STRONG",{});var ctt=s(Zle);R0o=r(ctt,"roformer"),ctt.forEach(t),P0o=r(uye," \u2014 "),aq=n(uye,"A",{href:!0});var ftt=s(aq);B0o=r(ftt,"RoFormerModel"),ftt.forEach(t),I0o=r(uye," (RoFormer model)"),uye.forEach(t),N0o=i($),L_=n($,"LI",{});var bye=s(L_);eie=n(bye,"STRONG",{});var mtt=s(eie);q0o=r(mtt,"segformer"),mtt.forEach(t),j0o=r(bye," \u2014 "),nq=n(bye,"A",{href:!0});var gtt=s(nq);D0o=r(gtt,"SegformerModel"),gtt.forEach(t),G0o=r(bye," (SegFormer model)"),bye.forEach(t),O0o=i($),x_=n($,"LI",{});var vye=s(x_);oie=n(vye,"STRONG",{});var htt=s(oie);V0o=r(htt,"sew"),htt.forEach(t),X0o=r(vye," \u2014 "),sq=n(vye,"A",{href:!0});var ptt=s(sq);z0o=r(ptt,"SEWModel"),ptt.forEach(t),W0o=r(vye," (SEW model)"),vye.forEach(t),Q0o=i($),$_=n($,"LI",{});var Fye=s($_);rie=n(Fye,"STRONG",{});var _tt=s(rie);H0o=r(_tt,"sew-d"),_tt.forEach(t),U0o=r(Fye," \u2014 "),lq=n(Fye,"A",{href:!0});var utt=s(lq);J0o=r(utt,"SEWDModel"),utt.forEach(t),Y0o=r(Fye," (SEW-D model)"),Fye.forEach(t),K0o=i($),k_=n($,"LI",{});var Tye=s(k_);tie=n(Tye,"STRONG",{});var btt=s(tie);Z0o=r(btt,"speech_to_text"),btt.forEach(t),eFo=r(Tye," \u2014 "),iq=n(Tye,"A",{href:!0});var vtt=s(iq);oFo=r(vtt,"Speech2TextModel"),vtt.forEach(t),rFo=r(Tye," (Speech2Text model)"),Tye.forEach(t),tFo=i($),S_=n($,"LI",{});var Mye=s(S_);aie=n(Mye,"STRONG",{});var Ftt=s(aie);aFo=r(Ftt,"splinter"),Ftt.forEach(t),nFo=r(Mye," \u2014 "),dq=n(Mye,"A",{href:!0});var Ttt=s(dq);sFo=r(Ttt,"SplinterModel"),Ttt.forEach(t),lFo=r(Mye," (Splinter model)"),Mye.forEach(t),iFo=i($),R_=n($,"LI",{});var Eye=s(R_);nie=n(Eye,"STRONG",{});var Mtt=s(nie);dFo=r(Mtt,"squeezebert"),Mtt.forEach(t),cFo=r(Eye," \u2014 "),cq=n(Eye,"A",{href:!0});var Ett=s(cq);fFo=r(Ett,"SqueezeBertModel"),Ett.forEach(t),mFo=r(Eye," (SqueezeBERT model)"),Eye.forEach(t),gFo=i($),P_=n($,"LI",{});var Cye=s(P_);sie=n(Cye,"STRONG",{});var Ctt=s(sie);hFo=r(Ctt,"swin"),Ctt.forEach(t),pFo=r(Cye," \u2014 "),fq=n(Cye,"A",{href:!0});var wtt=s(fq);_Fo=r(wtt,"SwinModel"),wtt.forEach(t),uFo=r(Cye," (Swin model)"),Cye.forEach(t),bFo=i($),B_=n($,"LI",{});var wye=s(B_);lie=n(wye,"STRONG",{});var Att=s(lie);vFo=r(Att,"t5"),Att.forEach(t),FFo=r(wye," \u2014 "),mq=n(wye,"A",{href:!0});var ytt=s(mq);TFo=r(ytt,"T5Model"),ytt.forEach(t),MFo=r(wye," (T5 model)"),wye.forEach(t),EFo=i($),I_=n($,"LI",{});var Aye=s(I_);iie=n(Aye,"STRONG",{});var Ltt=s(iie);CFo=r(Ltt,"tapas"),Ltt.forEach(t),wFo=r(Aye," \u2014 "),gq=n(Aye,"A",{href:!0});var xtt=s(gq);AFo=r(xtt,"TapasModel"),xtt.forEach(t),yFo=r(Aye," (TAPAS model)"),Aye.forEach(t),LFo=i($),N_=n($,"LI",{});var yye=s(N_);die=n(yye,"STRONG",{});var $tt=s(die);xFo=r($tt,"trajectory_transformer"),$tt.forEach(t),$Fo=r(yye," \u2014 "),hq=n(yye,"A",{href:!0});var ktt=s(hq);kFo=r(ktt,"TrajectoryTransformerModel"),ktt.forEach(t),SFo=r(yye," (Trajectory Transformer model)"),yye.forEach(t),RFo=i($),q_=n($,"LI",{});var Lye=s(q_);cie=n(Lye,"STRONG",{});var Stt=s(cie);PFo=r(Stt,"transfo-xl"),Stt.forEach(t),BFo=r(Lye," \u2014 "),pq=n(Lye,"A",{href:!0});var Rtt=s(pq);IFo=r(Rtt,"TransfoXLModel"),Rtt.forEach(t),NFo=r(Lye," (Transformer-XL model)"),Lye.forEach(t),qFo=i($),j_=n($,"LI",{});var xye=s(j_);fie=n(xye,"STRONG",{});var Ptt=s(fie);jFo=r(Ptt,"unispeech"),Ptt.forEach(t),DFo=r(xye," \u2014 "),_q=n(xye,"A",{href:!0});var Btt=s(_q);GFo=r(Btt,"UniSpeechModel"),Btt.forEach(t),OFo=r(xye," (UniSpeech model)"),xye.forEach(t),VFo=i($),D_=n($,"LI",{});var $ye=s(D_);mie=n($ye,"STRONG",{});var Itt=s(mie);XFo=r(Itt,"unispeech-sat"),Itt.forEach(t),zFo=r($ye," \u2014 "),uq=n($ye,"A",{href:!0});var Ntt=s(uq);WFo=r(Ntt,"UniSpeechSatModel"),Ntt.forEach(t),QFo=r($ye," (UniSpeechSat model)"),$ye.forEach(t),HFo=i($),G_=n($,"LI",{});var kye=s(G_);gie=n(kye,"STRONG",{});var qtt=s(gie);UFo=r(qtt,"van"),qtt.forEach(t),JFo=r(kye," \u2014 "),bq=n(kye,"A",{href:!0});var jtt=s(bq);YFo=r(jtt,"VanModel"),jtt.forEach(t),KFo=r(kye," (VAN model)"),kye.forEach(t),ZFo=i($),O_=n($,"LI",{});var Sye=s(O_);hie=n(Sye,"STRONG",{});var Dtt=s(hie);eTo=r(Dtt,"vilt"),Dtt.forEach(t),oTo=r(Sye," \u2014 "),vq=n(Sye,"A",{href:!0});var Gtt=s(vq);rTo=r(Gtt,"ViltModel"),Gtt.forEach(t),tTo=r(Sye," (ViLT model)"),Sye.forEach(t),aTo=i($),V_=n($,"LI",{});var Rye=s(V_);pie=n(Rye,"STRONG",{});var Ott=s(pie);nTo=r(Ott,"vision-text-dual-encoder"),Ott.forEach(t),sTo=r(Rye," \u2014 "),Fq=n(Rye,"A",{href:!0});var Vtt=s(Fq);lTo=r(Vtt,"VisionTextDualEncoderModel"),Vtt.forEach(t),iTo=r(Rye," (VisionTextDualEncoder model)"),Rye.forEach(t),dTo=i($),X_=n($,"LI",{});var Pye=s(X_);_ie=n(Pye,"STRONG",{});var Xtt=s(_ie);cTo=r(Xtt,"visual_bert"),Xtt.forEach(t),fTo=r(Pye," \u2014 "),Tq=n(Pye,"A",{href:!0});var ztt=s(Tq);mTo=r(ztt,"VisualBertModel"),ztt.forEach(t),gTo=r(Pye," (VisualBert model)"),Pye.forEach(t),hTo=i($),z_=n($,"LI",{});var Bye=s(z_);uie=n(Bye,"STRONG",{});var Wtt=s(uie);pTo=r(Wtt,"vit"),Wtt.forEach(t),_To=r(Bye," \u2014 "),Mq=n(Bye,"A",{href:!0});var Qtt=s(Mq);uTo=r(Qtt,"ViTModel"),Qtt.forEach(t),bTo=r(Bye," (ViT model)"),Bye.forEach(t),vTo=i($),W_=n($,"LI",{});var Iye=s(W_);bie=n(Iye,"STRONG",{});var Htt=s(bie);FTo=r(Htt,"vit_mae"),Htt.forEach(t),TTo=r(Iye," \u2014 "),Eq=n(Iye,"A",{href:!0});var Utt=s(Eq);MTo=r(Utt,"ViTMAEModel"),Utt.forEach(t),ETo=r(Iye," (ViTMAE model)"),Iye.forEach(t),CTo=i($),Q_=n($,"LI",{});var Nye=s(Q_);vie=n(Nye,"STRONG",{});var Jtt=s(vie);wTo=r(Jtt,"wav2vec2"),Jtt.forEach(t),ATo=r(Nye," \u2014 "),Cq=n(Nye,"A",{href:!0});var Ytt=s(Cq);yTo=r(Ytt,"Wav2Vec2Model"),Ytt.forEach(t),LTo=r(Nye," (Wav2Vec2 model)"),Nye.forEach(t),xTo=i($),H_=n($,"LI",{});var qye=s(H_);Fie=n(qye,"STRONG",{});var Ktt=s(Fie);$To=r(Ktt,"wav2vec2-conformer"),Ktt.forEach(t),kTo=r(qye," \u2014 "),wq=n(qye,"A",{href:!0});var Ztt=s(wq);STo=r(Ztt,"Wav2Vec2ConformerModel"),Ztt.forEach(t),RTo=r(qye," (Wav2Vec2-Conformer model)"),qye.forEach(t),PTo=i($),U_=n($,"LI",{});var jye=s(U_);Tie=n(jye,"STRONG",{});var eat=s(Tie);BTo=r(eat,"wavlm"),eat.forEach(t),ITo=r(jye," \u2014 "),Aq=n(jye,"A",{href:!0});var oat=s(Aq);NTo=r(oat,"WavLMModel"),oat.forEach(t),qTo=r(jye," (WavLM model)"),jye.forEach(t),jTo=i($),J_=n($,"LI",{});var Dye=s(J_);Mie=n(Dye,"STRONG",{});var rat=s(Mie);DTo=r(rat,"xglm"),rat.forEach(t),GTo=r(Dye," \u2014 "),yq=n(Dye,"A",{href:!0});var tat=s(yq);OTo=r(tat,"XGLMModel"),tat.forEach(t),VTo=r(Dye," (XGLM model)"),Dye.forEach(t),XTo=i($),Y_=n($,"LI",{});var Gye=s(Y_);Eie=n(Gye,"STRONG",{});var aat=s(Eie);zTo=r(aat,"xlm"),aat.forEach(t),WTo=r(Gye," \u2014 "),Lq=n(Gye,"A",{href:!0});var nat=s(Lq);QTo=r(nat,"XLMModel"),nat.forEach(t),HTo=r(Gye," (XLM model)"),Gye.forEach(t),UTo=i($),K_=n($,"LI",{});var Oye=s(K_);Cie=n(Oye,"STRONG",{});var sat=s(Cie);JTo=r(sat,"xlm-prophetnet"),sat.forEach(t),YTo=r(Oye," \u2014 "),xq=n(Oye,"A",{href:!0});var lat=s(xq);KTo=r(lat,"XLMProphetNetModel"),lat.forEach(t),ZTo=r(Oye," (XLMProphetNet model)"),Oye.forEach(t),e7o=i($),Z_=n($,"LI",{});var Vye=s(Z_);wie=n(Vye,"STRONG",{});var iat=s(wie);o7o=r(iat,"xlm-roberta"),iat.forEach(t),r7o=r(Vye," \u2014 "),$q=n(Vye,"A",{href:!0});var dat=s($q);t7o=r(dat,"XLMRobertaModel"),dat.forEach(t),a7o=r(Vye," (XLM-RoBERTa model)"),Vye.forEach(t),n7o=i($),eu=n($,"LI",{});var Xye=s(eu);Aie=n(Xye,"STRONG",{});var cat=s(Aie);s7o=r(cat,"xlm-roberta-xl"),cat.forEach(t),l7o=r(Xye," \u2014 "),kq=n(Xye,"A",{href:!0});var fat=s(kq);i7o=r(fat,"XLMRobertaXLModel"),fat.forEach(t),d7o=r(Xye," (XLM-RoBERTa-XL model)"),Xye.forEach(t),c7o=i($),ou=n($,"LI",{});var zye=s(ou);yie=n(zye,"STRONG",{});var mat=s(yie);f7o=r(mat,"xlnet"),mat.forEach(t),m7o=r(zye," \u2014 "),Sq=n(zye,"A",{href:!0});var gat=s(Sq);g7o=r(gat,"XLNetModel"),gat.forEach(t),h7o=r(zye," (XLNet model)"),zye.forEach(t),p7o=i($),ru=n($,"LI",{});var Wye=s(ru);Lie=n(Wye,"STRONG",{});var hat=s(Lie);_7o=r(hat,"yolos"),hat.forEach(t),u7o=r(Wye," \u2014 "),Rq=n(Wye,"A",{href:!0});var pat=s(Rq);b7o=r(pat,"YolosModel"),pat.forEach(t),v7o=r(Wye," (YOLOS model)"),Wye.forEach(t),F7o=i($),tu=n($,"LI",{});var Qye=s(tu);xie=n(Qye,"STRONG",{});var _at=s(xie);T7o=r(_at,"yoso"),_at.forEach(t),M7o=r(Qye," \u2014 "),Pq=n(Qye,"A",{href:!0});var uat=s(Pq);E7o=r(uat,"YosoModel"),uat.forEach(t),C7o=r(Qye," (YOSO model)"),Qye.forEach(t),$.forEach(t),w7o=i(oa),au=n(oa,"P",{});var Hye=s(au);A7o=r(Hye,"The model is set in evaluation mode by default using "),$ie=n(Hye,"CODE",{});var bat=s($ie);y7o=r(bat,"model.eval()"),bat.forEach(t),L7o=r(Hye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kie=n(Hye,"CODE",{});var vat=s(kie);x7o=r(vat,"model.train()"),vat.forEach(t),Hye.forEach(t),$7o=i(oa),T(nu.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),Rqe=i(f),Li=n(f,"H2",{class:!0});var NDe=s(Li);su=n(NDe,"A",{id:!0,class:!0,href:!0});var Fat=s(su);Sie=n(Fat,"SPAN",{});var Tat=s(Sie);T(dy.$$.fragment,Tat),Tat.forEach(t),Fat.forEach(t),k7o=i(NDe),Rie=n(NDe,"SPAN",{});var Mat=s(Rie);S7o=r(Mat,"AutoModelForPreTraining"),Mat.forEach(t),NDe.forEach(t),Pqe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(cy.$$.fragment,Os),R7o=i(Os),xi=n(Os,"P",{});var yZ=s(xi);P7o=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Bq=n(yZ,"A",{href:!0});var Eat=s(Bq);B7o=r(Eat,"from_pretrained()"),Eat.forEach(t),I7o=r(yZ," class method or the "),Iq=n(yZ,"A",{href:!0});var Cat=s(Iq);N7o=r(Cat,"from_config()"),Cat.forEach(t),q7o=r(yZ,` class
method.`),yZ.forEach(t),j7o=i(Os),fy=n(Os,"P",{});var qDe=s(fy);D7o=r(qDe,"This class cannot be instantiated directly using "),Pie=n(qDe,"CODE",{});var wat=s(Pie);G7o=r(wat,"__init__()"),wat.forEach(t),O7o=r(qDe," (throws an error)."),qDe.forEach(t),V7o=i(Os),at=n(Os,"DIV",{class:!0});var qw=s(at);T(my.$$.fragment,qw),X7o=i(qw),Bie=n(qw,"P",{});var Aat=s(Bie);z7o=r(Aat,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Aat.forEach(t),W7o=i(qw),$i=n(qw,"P",{});var LZ=s($i);Q7o=r(LZ,`Note:
Loading a model from its configuration file does `),Iie=n(LZ,"STRONG",{});var yat=s(Iie);H7o=r(yat,"not"),yat.forEach(t),U7o=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nq=n(LZ,"A",{href:!0});var Lat=s(Nq);J7o=r(Lat,"from_pretrained()"),Lat.forEach(t),Y7o=r(LZ," to load the model weights."),LZ.forEach(t),K7o=i(qw),T(lu.$$.fragment,qw),qw.forEach(t),Z7o=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(gy.$$.fragment,ra),eMo=i(ra),Nie=n(ra,"P",{});var xat=s(Nie);oMo=r(xat,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xat.forEach(t),rMo=i(ra),xa=n(ra,"P",{});var jw=s(xa);tMo=r(jw,"The model class to instantiate is selected based on the "),qie=n(jw,"CODE",{});var $at=s(qie);aMo=r($at,"model_type"),$at.forEach(t),nMo=r(jw,` property of the config object (either
passed as an argument or loaded from `),jie=n(jw,"CODE",{});var kat=s(jie);sMo=r(kat,"pretrained_model_name_or_path"),kat.forEach(t),lMo=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=n(jw,"CODE",{});var Sat=s(Die);iMo=r(Sat,"pretrained_model_name_or_path"),Sat.forEach(t),dMo=r(jw,":"),jw.forEach(t),cMo=i(ra),G=n(ra,"UL",{});var O=s(G);iu=n(O,"LI",{});var Uye=s(iu);Gie=n(Uye,"STRONG",{});var Rat=s(Gie);fMo=r(Rat,"albert"),Rat.forEach(t),mMo=r(Uye," \u2014 "),qq=n(Uye,"A",{href:!0});var Pat=s(qq);gMo=r(Pat,"AlbertForPreTraining"),Pat.forEach(t),hMo=r(Uye," (ALBERT model)"),Uye.forEach(t),pMo=i(O),du=n(O,"LI",{});var Jye=s(du);Oie=n(Jye,"STRONG",{});var Bat=s(Oie);_Mo=r(Bat,"bart"),Bat.forEach(t),uMo=r(Jye," \u2014 "),jq=n(Jye,"A",{href:!0});var Iat=s(jq);bMo=r(Iat,"BartForConditionalGeneration"),Iat.forEach(t),vMo=r(Jye," (BART model)"),Jye.forEach(t),FMo=i(O),cu=n(O,"LI",{});var Yye=s(cu);Vie=n(Yye,"STRONG",{});var Nat=s(Vie);TMo=r(Nat,"bert"),Nat.forEach(t),MMo=r(Yye," \u2014 "),Dq=n(Yye,"A",{href:!0});var qat=s(Dq);EMo=r(qat,"BertForPreTraining"),qat.forEach(t),CMo=r(Yye," (BERT model)"),Yye.forEach(t),wMo=i(O),fu=n(O,"LI",{});var Kye=s(fu);Xie=n(Kye,"STRONG",{});var jat=s(Xie);AMo=r(jat,"big_bird"),jat.forEach(t),yMo=r(Kye," \u2014 "),Gq=n(Kye,"A",{href:!0});var Dat=s(Gq);LMo=r(Dat,"BigBirdForPreTraining"),Dat.forEach(t),xMo=r(Kye," (BigBird model)"),Kye.forEach(t),$Mo=i(O),mu=n(O,"LI",{});var Zye=s(mu);zie=n(Zye,"STRONG",{});var Gat=s(zie);kMo=r(Gat,"bloom"),Gat.forEach(t),SMo=r(Zye," \u2014 "),Oq=n(Zye,"A",{href:!0});var Oat=s(Oq);RMo=r(Oat,"BloomForCausalLM"),Oat.forEach(t),PMo=r(Zye," (BLOOM model)"),Zye.forEach(t),BMo=i(O),gu=n(O,"LI",{});var eLe=s(gu);Wie=n(eLe,"STRONG",{});var Vat=s(Wie);IMo=r(Vat,"camembert"),Vat.forEach(t),NMo=r(eLe," \u2014 "),Vq=n(eLe,"A",{href:!0});var Xat=s(Vq);qMo=r(Xat,"CamembertForMaskedLM"),Xat.forEach(t),jMo=r(eLe," (CamemBERT model)"),eLe.forEach(t),DMo=i(O),hu=n(O,"LI",{});var oLe=s(hu);Qie=n(oLe,"STRONG",{});var zat=s(Qie);GMo=r(zat,"ctrl"),zat.forEach(t),OMo=r(oLe," \u2014 "),Xq=n(oLe,"A",{href:!0});var Wat=s(Xq);VMo=r(Wat,"CTRLLMHeadModel"),Wat.forEach(t),XMo=r(oLe," (CTRL model)"),oLe.forEach(t),zMo=i(O),pu=n(O,"LI",{});var rLe=s(pu);Hie=n(rLe,"STRONG",{});var Qat=s(Hie);WMo=r(Qat,"data2vec-text"),Qat.forEach(t),QMo=r(rLe," \u2014 "),zq=n(rLe,"A",{href:!0});var Hat=s(zq);HMo=r(Hat,"Data2VecTextForMaskedLM"),Hat.forEach(t),UMo=r(rLe," (Data2VecText model)"),rLe.forEach(t),JMo=i(O),_u=n(O,"LI",{});var tLe=s(_u);Uie=n(tLe,"STRONG",{});var Uat=s(Uie);YMo=r(Uat,"deberta"),Uat.forEach(t),KMo=r(tLe," \u2014 "),Wq=n(tLe,"A",{href:!0});var Jat=s(Wq);ZMo=r(Jat,"DebertaForMaskedLM"),Jat.forEach(t),e4o=r(tLe," (DeBERTa model)"),tLe.forEach(t),o4o=i(O),uu=n(O,"LI",{});var aLe=s(uu);Jie=n(aLe,"STRONG",{});var Yat=s(Jie);r4o=r(Yat,"deberta-v2"),Yat.forEach(t),t4o=r(aLe," \u2014 "),Qq=n(aLe,"A",{href:!0});var Kat=s(Qq);a4o=r(Kat,"DebertaV2ForMaskedLM"),Kat.forEach(t),n4o=r(aLe," (DeBERTa-v2 model)"),aLe.forEach(t),s4o=i(O),bu=n(O,"LI",{});var nLe=s(bu);Yie=n(nLe,"STRONG",{});var Zat=s(Yie);l4o=r(Zat,"distilbert"),Zat.forEach(t),i4o=r(nLe," \u2014 "),Hq=n(nLe,"A",{href:!0});var ent=s(Hq);d4o=r(ent,"DistilBertForMaskedLM"),ent.forEach(t),c4o=r(nLe," (DistilBERT model)"),nLe.forEach(t),f4o=i(O),vu=n(O,"LI",{});var sLe=s(vu);Kie=n(sLe,"STRONG",{});var ont=s(Kie);m4o=r(ont,"electra"),ont.forEach(t),g4o=r(sLe," \u2014 "),Uq=n(sLe,"A",{href:!0});var rnt=s(Uq);h4o=r(rnt,"ElectraForPreTraining"),rnt.forEach(t),p4o=r(sLe," (ELECTRA model)"),sLe.forEach(t),_4o=i(O),Fu=n(O,"LI",{});var lLe=s(Fu);Zie=n(lLe,"STRONG",{});var tnt=s(Zie);u4o=r(tnt,"flaubert"),tnt.forEach(t),b4o=r(lLe," \u2014 "),Jq=n(lLe,"A",{href:!0});var ant=s(Jq);v4o=r(ant,"FlaubertWithLMHeadModel"),ant.forEach(t),F4o=r(lLe," (FlauBERT model)"),lLe.forEach(t),T4o=i(O),Tu=n(O,"LI",{});var iLe=s(Tu);ede=n(iLe,"STRONG",{});var nnt=s(ede);M4o=r(nnt,"flava"),nnt.forEach(t),E4o=r(iLe," \u2014 "),Yq=n(iLe,"A",{href:!0});var snt=s(Yq);C4o=r(snt,"FlavaForPreTraining"),snt.forEach(t),w4o=r(iLe," (Flava model)"),iLe.forEach(t),A4o=i(O),Mu=n(O,"LI",{});var dLe=s(Mu);ode=n(dLe,"STRONG",{});var lnt=s(ode);y4o=r(lnt,"fnet"),lnt.forEach(t),L4o=r(dLe," \u2014 "),Kq=n(dLe,"A",{href:!0});var int=s(Kq);x4o=r(int,"FNetForPreTraining"),int.forEach(t),$4o=r(dLe," (FNet model)"),dLe.forEach(t),k4o=i(O),Eu=n(O,"LI",{});var cLe=s(Eu);rde=n(cLe,"STRONG",{});var dnt=s(rde);S4o=r(dnt,"fsmt"),dnt.forEach(t),R4o=r(cLe," \u2014 "),Zq=n(cLe,"A",{href:!0});var cnt=s(Zq);P4o=r(cnt,"FSMTForConditionalGeneration"),cnt.forEach(t),B4o=r(cLe," (FairSeq Machine-Translation model)"),cLe.forEach(t),I4o=i(O),Cu=n(O,"LI",{});var fLe=s(Cu);tde=n(fLe,"STRONG",{});var fnt=s(tde);N4o=r(fnt,"funnel"),fnt.forEach(t),q4o=r(fLe," \u2014 "),ej=n(fLe,"A",{href:!0});var mnt=s(ej);j4o=r(mnt,"FunnelForPreTraining"),mnt.forEach(t),D4o=r(fLe," (Funnel Transformer model)"),fLe.forEach(t),G4o=i(O),wu=n(O,"LI",{});var mLe=s(wu);ade=n(mLe,"STRONG",{});var gnt=s(ade);O4o=r(gnt,"gpt2"),gnt.forEach(t),V4o=r(mLe," \u2014 "),oj=n(mLe,"A",{href:!0});var hnt=s(oj);X4o=r(hnt,"GPT2LMHeadModel"),hnt.forEach(t),z4o=r(mLe," (OpenAI GPT-2 model)"),mLe.forEach(t),W4o=i(O),Au=n(O,"LI",{});var gLe=s(Au);nde=n(gLe,"STRONG",{});var pnt=s(nde);Q4o=r(pnt,"ibert"),pnt.forEach(t),H4o=r(gLe," \u2014 "),rj=n(gLe,"A",{href:!0});var _nt=s(rj);U4o=r(_nt,"IBertForMaskedLM"),_nt.forEach(t),J4o=r(gLe," (I-BERT model)"),gLe.forEach(t),Y4o=i(O),yu=n(O,"LI",{});var hLe=s(yu);sde=n(hLe,"STRONG",{});var unt=s(sde);K4o=r(unt,"layoutlm"),unt.forEach(t),Z4o=r(hLe," \u2014 "),tj=n(hLe,"A",{href:!0});var bnt=s(tj);eEo=r(bnt,"LayoutLMForMaskedLM"),bnt.forEach(t),oEo=r(hLe," (LayoutLM model)"),hLe.forEach(t),rEo=i(O),Lu=n(O,"LI",{});var pLe=s(Lu);lde=n(pLe,"STRONG",{});var vnt=s(lde);tEo=r(vnt,"longformer"),vnt.forEach(t),aEo=r(pLe," \u2014 "),aj=n(pLe,"A",{href:!0});var Fnt=s(aj);nEo=r(Fnt,"LongformerForMaskedLM"),Fnt.forEach(t),sEo=r(pLe," (Longformer model)"),pLe.forEach(t),lEo=i(O),xu=n(O,"LI",{});var _Le=s(xu);ide=n(_Le,"STRONG",{});var Tnt=s(ide);iEo=r(Tnt,"lxmert"),Tnt.forEach(t),dEo=r(_Le," \u2014 "),nj=n(_Le,"A",{href:!0});var Mnt=s(nj);cEo=r(Mnt,"LxmertForPreTraining"),Mnt.forEach(t),fEo=r(_Le," (LXMERT model)"),_Le.forEach(t),mEo=i(O),$u=n(O,"LI",{});var uLe=s($u);dde=n(uLe,"STRONG",{});var Ent=s(dde);gEo=r(Ent,"megatron-bert"),Ent.forEach(t),hEo=r(uLe," \u2014 "),sj=n(uLe,"A",{href:!0});var Cnt=s(sj);pEo=r(Cnt,"MegatronBertForPreTraining"),Cnt.forEach(t),_Eo=r(uLe," (MegatronBert model)"),uLe.forEach(t),uEo=i(O),ku=n(O,"LI",{});var bLe=s(ku);cde=n(bLe,"STRONG",{});var wnt=s(cde);bEo=r(wnt,"mobilebert"),wnt.forEach(t),vEo=r(bLe," \u2014 "),lj=n(bLe,"A",{href:!0});var Ant=s(lj);FEo=r(Ant,"MobileBertForPreTraining"),Ant.forEach(t),TEo=r(bLe," (MobileBERT model)"),bLe.forEach(t),MEo=i(O),Su=n(O,"LI",{});var vLe=s(Su);fde=n(vLe,"STRONG",{});var ynt=s(fde);EEo=r(ynt,"mpnet"),ynt.forEach(t),CEo=r(vLe," \u2014 "),ij=n(vLe,"A",{href:!0});var Lnt=s(ij);wEo=r(Lnt,"MPNetForMaskedLM"),Lnt.forEach(t),AEo=r(vLe," (MPNet model)"),vLe.forEach(t),yEo=i(O),Ru=n(O,"LI",{});var FLe=s(Ru);mde=n(FLe,"STRONG",{});var xnt=s(mde);LEo=r(xnt,"openai-gpt"),xnt.forEach(t),xEo=r(FLe," \u2014 "),dj=n(FLe,"A",{href:!0});var $nt=s(dj);$Eo=r($nt,"OpenAIGPTLMHeadModel"),$nt.forEach(t),kEo=r(FLe," (OpenAI GPT model)"),FLe.forEach(t),SEo=i(O),Pu=n(O,"LI",{});var TLe=s(Pu);gde=n(TLe,"STRONG",{});var knt=s(gde);REo=r(knt,"retribert"),knt.forEach(t),PEo=r(TLe," \u2014 "),cj=n(TLe,"A",{href:!0});var Snt=s(cj);BEo=r(Snt,"RetriBertModel"),Snt.forEach(t),IEo=r(TLe," (RetriBERT model)"),TLe.forEach(t),NEo=i(O),Bu=n(O,"LI",{});var MLe=s(Bu);hde=n(MLe,"STRONG",{});var Rnt=s(hde);qEo=r(Rnt,"roberta"),Rnt.forEach(t),jEo=r(MLe," \u2014 "),fj=n(MLe,"A",{href:!0});var Pnt=s(fj);DEo=r(Pnt,"RobertaForMaskedLM"),Pnt.forEach(t),GEo=r(MLe," (RoBERTa model)"),MLe.forEach(t),OEo=i(O),Iu=n(O,"LI",{});var ELe=s(Iu);pde=n(ELe,"STRONG",{});var Bnt=s(pde);VEo=r(Bnt,"splinter"),Bnt.forEach(t),XEo=r(ELe," \u2014 "),mj=n(ELe,"A",{href:!0});var Int=s(mj);zEo=r(Int,"SplinterForPreTraining"),Int.forEach(t),WEo=r(ELe," (Splinter model)"),ELe.forEach(t),QEo=i(O),Nu=n(O,"LI",{});var CLe=s(Nu);_de=n(CLe,"STRONG",{});var Nnt=s(_de);HEo=r(Nnt,"squeezebert"),Nnt.forEach(t),UEo=r(CLe," \u2014 "),gj=n(CLe,"A",{href:!0});var qnt=s(gj);JEo=r(qnt,"SqueezeBertForMaskedLM"),qnt.forEach(t),YEo=r(CLe," (SqueezeBERT model)"),CLe.forEach(t),KEo=i(O),qu=n(O,"LI",{});var wLe=s(qu);ude=n(wLe,"STRONG",{});var jnt=s(ude);ZEo=r(jnt,"t5"),jnt.forEach(t),eCo=r(wLe," \u2014 "),hj=n(wLe,"A",{href:!0});var Dnt=s(hj);oCo=r(Dnt,"T5ForConditionalGeneration"),Dnt.forEach(t),rCo=r(wLe," (T5 model)"),wLe.forEach(t),tCo=i(O),ju=n(O,"LI",{});var ALe=s(ju);bde=n(ALe,"STRONG",{});var Gnt=s(bde);aCo=r(Gnt,"tapas"),Gnt.forEach(t),nCo=r(ALe," \u2014 "),pj=n(ALe,"A",{href:!0});var Ont=s(pj);sCo=r(Ont,"TapasForMaskedLM"),Ont.forEach(t),lCo=r(ALe," (TAPAS model)"),ALe.forEach(t),iCo=i(O),Du=n(O,"LI",{});var yLe=s(Du);vde=n(yLe,"STRONG",{});var Vnt=s(vde);dCo=r(Vnt,"transfo-xl"),Vnt.forEach(t),cCo=r(yLe," \u2014 "),_j=n(yLe,"A",{href:!0});var Xnt=s(_j);fCo=r(Xnt,"TransfoXLLMHeadModel"),Xnt.forEach(t),mCo=r(yLe," (Transformer-XL model)"),yLe.forEach(t),gCo=i(O),Gu=n(O,"LI",{});var LLe=s(Gu);Fde=n(LLe,"STRONG",{});var znt=s(Fde);hCo=r(znt,"unispeech"),znt.forEach(t),pCo=r(LLe," \u2014 "),uj=n(LLe,"A",{href:!0});var Wnt=s(uj);_Co=r(Wnt,"UniSpeechForPreTraining"),Wnt.forEach(t),uCo=r(LLe," (UniSpeech model)"),LLe.forEach(t),bCo=i(O),Ou=n(O,"LI",{});var xLe=s(Ou);Tde=n(xLe,"STRONG",{});var Qnt=s(Tde);vCo=r(Qnt,"unispeech-sat"),Qnt.forEach(t),FCo=r(xLe," \u2014 "),bj=n(xLe,"A",{href:!0});var Hnt=s(bj);TCo=r(Hnt,"UniSpeechSatForPreTraining"),Hnt.forEach(t),MCo=r(xLe," (UniSpeechSat model)"),xLe.forEach(t),ECo=i(O),Vu=n(O,"LI",{});var $Le=s(Vu);Mde=n($Le,"STRONG",{});var Unt=s(Mde);CCo=r(Unt,"visual_bert"),Unt.forEach(t),wCo=r($Le," \u2014 "),vj=n($Le,"A",{href:!0});var Jnt=s(vj);ACo=r(Jnt,"VisualBertForPreTraining"),Jnt.forEach(t),yCo=r($Le," (VisualBert model)"),$Le.forEach(t),LCo=i(O),Xu=n(O,"LI",{});var kLe=s(Xu);Ede=n(kLe,"STRONG",{});var Ynt=s(Ede);xCo=r(Ynt,"vit_mae"),Ynt.forEach(t),$Co=r(kLe," \u2014 "),Fj=n(kLe,"A",{href:!0});var Knt=s(Fj);kCo=r(Knt,"ViTMAEForPreTraining"),Knt.forEach(t),SCo=r(kLe," (ViTMAE model)"),kLe.forEach(t),RCo=i(O),zu=n(O,"LI",{});var SLe=s(zu);Cde=n(SLe,"STRONG",{});var Znt=s(Cde);PCo=r(Znt,"wav2vec2"),Znt.forEach(t),BCo=r(SLe," \u2014 "),Tj=n(SLe,"A",{href:!0});var est=s(Tj);ICo=r(est,"Wav2Vec2ForPreTraining"),est.forEach(t),NCo=r(SLe," (Wav2Vec2 model)"),SLe.forEach(t),qCo=i(O),Wu=n(O,"LI",{});var RLe=s(Wu);wde=n(RLe,"STRONG",{});var ost=s(wde);jCo=r(ost,"wav2vec2-conformer"),ost.forEach(t),DCo=r(RLe," \u2014 "),Mj=n(RLe,"A",{href:!0});var rst=s(Mj);GCo=r(rst,"Wav2Vec2ConformerForPreTraining"),rst.forEach(t),OCo=r(RLe," (Wav2Vec2-Conformer model)"),RLe.forEach(t),VCo=i(O),Qu=n(O,"LI",{});var PLe=s(Qu);Ade=n(PLe,"STRONG",{});var tst=s(Ade);XCo=r(tst,"xlm"),tst.forEach(t),zCo=r(PLe," \u2014 "),Ej=n(PLe,"A",{href:!0});var ast=s(Ej);WCo=r(ast,"XLMWithLMHeadModel"),ast.forEach(t),QCo=r(PLe," (XLM model)"),PLe.forEach(t),HCo=i(O),Hu=n(O,"LI",{});var BLe=s(Hu);yde=n(BLe,"STRONG",{});var nst=s(yde);UCo=r(nst,"xlm-roberta"),nst.forEach(t),JCo=r(BLe," \u2014 "),Cj=n(BLe,"A",{href:!0});var sst=s(Cj);YCo=r(sst,"XLMRobertaForMaskedLM"),sst.forEach(t),KCo=r(BLe," (XLM-RoBERTa model)"),BLe.forEach(t),ZCo=i(O),Uu=n(O,"LI",{});var ILe=s(Uu);Lde=n(ILe,"STRONG",{});var lst=s(Lde);e5o=r(lst,"xlm-roberta-xl"),lst.forEach(t),o5o=r(ILe," \u2014 "),wj=n(ILe,"A",{href:!0});var ist=s(wj);r5o=r(ist,"XLMRobertaXLForMaskedLM"),ist.forEach(t),t5o=r(ILe," (XLM-RoBERTa-XL model)"),ILe.forEach(t),a5o=i(O),Ju=n(O,"LI",{});var NLe=s(Ju);xde=n(NLe,"STRONG",{});var dst=s(xde);n5o=r(dst,"xlnet"),dst.forEach(t),s5o=r(NLe," \u2014 "),Aj=n(NLe,"A",{href:!0});var cst=s(Aj);l5o=r(cst,"XLNetLMHeadModel"),cst.forEach(t),i5o=r(NLe," (XLNet model)"),NLe.forEach(t),O.forEach(t),d5o=i(ra),Yu=n(ra,"P",{});var qLe=s(Yu);c5o=r(qLe,"The model is set in evaluation mode by default using "),$de=n(qLe,"CODE",{});var fst=s($de);f5o=r(fst,"model.eval()"),fst.forEach(t),m5o=r(qLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kde=n(qLe,"CODE",{});var mst=s(kde);g5o=r(mst,"model.train()"),mst.forEach(t),qLe.forEach(t),h5o=i(ra),T(Ku.$$.fragment,ra),ra.forEach(t),Os.forEach(t),Bqe=i(f),ki=n(f,"H2",{class:!0});var jDe=s(ki);Zu=n(jDe,"A",{id:!0,class:!0,href:!0});var gst=s(Zu);Sde=n(gst,"SPAN",{});var hst=s(Sde);T(hy.$$.fragment,hst),hst.forEach(t),gst.forEach(t),p5o=i(jDe),Rde=n(jDe,"SPAN",{});var pst=s(Rde);_5o=r(pst,"AutoModelForCausalLM"),pst.forEach(t),jDe.forEach(t),Iqe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(py.$$.fragment,Vs),u5o=i(Vs),Si=n(Vs,"P",{});var xZ=s(Si);b5o=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yj=n(xZ,"A",{href:!0});var _st=s(yj);v5o=r(_st,"from_pretrained()"),_st.forEach(t),F5o=r(xZ," class method or the "),Lj=n(xZ,"A",{href:!0});var ust=s(Lj);T5o=r(ust,"from_config()"),ust.forEach(t),M5o=r(xZ,` class
method.`),xZ.forEach(t),E5o=i(Vs),_y=n(Vs,"P",{});var DDe=s(_y);C5o=r(DDe,"This class cannot be instantiated directly using "),Pde=n(DDe,"CODE",{});var bst=s(Pde);w5o=r(bst,"__init__()"),bst.forEach(t),A5o=r(DDe," (throws an error)."),DDe.forEach(t),y5o=i(Vs),nt=n(Vs,"DIV",{class:!0});var Dw=s(nt);T(uy.$$.fragment,Dw),L5o=i(Dw),Bde=n(Dw,"P",{});var vst=s(Bde);x5o=r(vst,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vst.forEach(t),$5o=i(Dw),Ri=n(Dw,"P",{});var $Z=s(Ri);k5o=r($Z,`Note:
Loading a model from its configuration file does `),Ide=n($Z,"STRONG",{});var Fst=s(Ide);S5o=r(Fst,"not"),Fst.forEach(t),R5o=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),xj=n($Z,"A",{href:!0});var Tst=s(xj);P5o=r(Tst,"from_pretrained()"),Tst.forEach(t),B5o=r($Z," to load the model weights."),$Z.forEach(t),I5o=i(Dw),T(e2.$$.fragment,Dw),Dw.forEach(t),N5o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(by.$$.fragment,ta),q5o=i(ta),Nde=n(ta,"P",{});var Mst=s(Nde);j5o=r(Mst,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Mst.forEach(t),D5o=i(ta),$a=n(ta,"P",{});var Gw=s($a);G5o=r(Gw,"The model class to instantiate is selected based on the "),qde=n(Gw,"CODE",{});var Est=s(qde);O5o=r(Est,"model_type"),Est.forEach(t),V5o=r(Gw,` property of the config object (either
passed as an argument or loaded from `),jde=n(Gw,"CODE",{});var Cst=s(jde);X5o=r(Cst,"pretrained_model_name_or_path"),Cst.forEach(t),z5o=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dde=n(Gw,"CODE",{});var wst=s(Dde);W5o=r(wst,"pretrained_model_name_or_path"),wst.forEach(t),Q5o=r(Gw,":"),Gw.forEach(t),H5o=i(ta),z=n(ta,"UL",{});var W=s(z);o2=n(W,"LI",{});var jLe=s(o2);Gde=n(jLe,"STRONG",{});var Ast=s(Gde);U5o=r(Ast,"bart"),Ast.forEach(t),J5o=r(jLe," \u2014 "),$j=n(jLe,"A",{href:!0});var yst=s($j);Y5o=r(yst,"BartForCausalLM"),yst.forEach(t),K5o=r(jLe," (BART model)"),jLe.forEach(t),Z5o=i(W),r2=n(W,"LI",{});var DLe=s(r2);Ode=n(DLe,"STRONG",{});var Lst=s(Ode);e3o=r(Lst,"bert"),Lst.forEach(t),o3o=r(DLe," \u2014 "),kj=n(DLe,"A",{href:!0});var xst=s(kj);r3o=r(xst,"BertLMHeadModel"),xst.forEach(t),t3o=r(DLe," (BERT model)"),DLe.forEach(t),a3o=i(W),t2=n(W,"LI",{});var GLe=s(t2);Vde=n(GLe,"STRONG",{});var $st=s(Vde);n3o=r($st,"bert-generation"),$st.forEach(t),s3o=r(GLe," \u2014 "),Sj=n(GLe,"A",{href:!0});var kst=s(Sj);l3o=r(kst,"BertGenerationDecoder"),kst.forEach(t),i3o=r(GLe," (Bert Generation model)"),GLe.forEach(t),d3o=i(W),a2=n(W,"LI",{});var OLe=s(a2);Xde=n(OLe,"STRONG",{});var Sst=s(Xde);c3o=r(Sst,"big_bird"),Sst.forEach(t),f3o=r(OLe," \u2014 "),Rj=n(OLe,"A",{href:!0});var Rst=s(Rj);m3o=r(Rst,"BigBirdForCausalLM"),Rst.forEach(t),g3o=r(OLe," (BigBird model)"),OLe.forEach(t),h3o=i(W),n2=n(W,"LI",{});var VLe=s(n2);zde=n(VLe,"STRONG",{});var Pst=s(zde);p3o=r(Pst,"bigbird_pegasus"),Pst.forEach(t),_3o=r(VLe," \u2014 "),Pj=n(VLe,"A",{href:!0});var Bst=s(Pj);u3o=r(Bst,"BigBirdPegasusForCausalLM"),Bst.forEach(t),b3o=r(VLe," (BigBirdPegasus model)"),VLe.forEach(t),v3o=i(W),s2=n(W,"LI",{});var XLe=s(s2);Wde=n(XLe,"STRONG",{});var Ist=s(Wde);F3o=r(Ist,"blenderbot"),Ist.forEach(t),T3o=r(XLe," \u2014 "),Bj=n(XLe,"A",{href:!0});var Nst=s(Bj);M3o=r(Nst,"BlenderbotForCausalLM"),Nst.forEach(t),E3o=r(XLe," (Blenderbot model)"),XLe.forEach(t),C3o=i(W),l2=n(W,"LI",{});var zLe=s(l2);Qde=n(zLe,"STRONG",{});var qst=s(Qde);w3o=r(qst,"blenderbot-small"),qst.forEach(t),A3o=r(zLe," \u2014 "),Ij=n(zLe,"A",{href:!0});var jst=s(Ij);y3o=r(jst,"BlenderbotSmallForCausalLM"),jst.forEach(t),L3o=r(zLe," (BlenderbotSmall model)"),zLe.forEach(t),x3o=i(W),i2=n(W,"LI",{});var WLe=s(i2);Hde=n(WLe,"STRONG",{});var Dst=s(Hde);$3o=r(Dst,"bloom"),Dst.forEach(t),k3o=r(WLe," \u2014 "),Nj=n(WLe,"A",{href:!0});var Gst=s(Nj);S3o=r(Gst,"BloomForCausalLM"),Gst.forEach(t),R3o=r(WLe," (BLOOM model)"),WLe.forEach(t),P3o=i(W),d2=n(W,"LI",{});var QLe=s(d2);Ude=n(QLe,"STRONG",{});var Ost=s(Ude);B3o=r(Ost,"camembert"),Ost.forEach(t),I3o=r(QLe," \u2014 "),qj=n(QLe,"A",{href:!0});var Vst=s(qj);N3o=r(Vst,"CamembertForCausalLM"),Vst.forEach(t),q3o=r(QLe," (CamemBERT model)"),QLe.forEach(t),j3o=i(W),c2=n(W,"LI",{});var HLe=s(c2);Jde=n(HLe,"STRONG",{});var Xst=s(Jde);D3o=r(Xst,"ctrl"),Xst.forEach(t),G3o=r(HLe," \u2014 "),jj=n(HLe,"A",{href:!0});var zst=s(jj);O3o=r(zst,"CTRLLMHeadModel"),zst.forEach(t),V3o=r(HLe," (CTRL model)"),HLe.forEach(t),X3o=i(W),f2=n(W,"LI",{});var ULe=s(f2);Yde=n(ULe,"STRONG",{});var Wst=s(Yde);z3o=r(Wst,"data2vec-text"),Wst.forEach(t),W3o=r(ULe," \u2014 "),Dj=n(ULe,"A",{href:!0});var Qst=s(Dj);Q3o=r(Qst,"Data2VecTextForCausalLM"),Qst.forEach(t),H3o=r(ULe," (Data2VecText model)"),ULe.forEach(t),U3o=i(W),m2=n(W,"LI",{});var JLe=s(m2);Kde=n(JLe,"STRONG",{});var Hst=s(Kde);J3o=r(Hst,"electra"),Hst.forEach(t),Y3o=r(JLe," \u2014 "),Gj=n(JLe,"A",{href:!0});var Ust=s(Gj);K3o=r(Ust,"ElectraForCausalLM"),Ust.forEach(t),Z3o=r(JLe," (ELECTRA model)"),JLe.forEach(t),ewo=i(W),g2=n(W,"LI",{});var YLe=s(g2);Zde=n(YLe,"STRONG",{});var Jst=s(Zde);owo=r(Jst,"gpt2"),Jst.forEach(t),rwo=r(YLe," \u2014 "),Oj=n(YLe,"A",{href:!0});var Yst=s(Oj);two=r(Yst,"GPT2LMHeadModel"),Yst.forEach(t),awo=r(YLe," (OpenAI GPT-2 model)"),YLe.forEach(t),nwo=i(W),h2=n(W,"LI",{});var KLe=s(h2);ece=n(KLe,"STRONG",{});var Kst=s(ece);swo=r(Kst,"gpt_neo"),Kst.forEach(t),lwo=r(KLe," \u2014 "),Vj=n(KLe,"A",{href:!0});var Zst=s(Vj);iwo=r(Zst,"GPTNeoForCausalLM"),Zst.forEach(t),dwo=r(KLe," (GPT Neo model)"),KLe.forEach(t),cwo=i(W),p2=n(W,"LI",{});var ZLe=s(p2);oce=n(ZLe,"STRONG",{});var elt=s(oce);fwo=r(elt,"gpt_neox"),elt.forEach(t),mwo=r(ZLe," \u2014 "),Xj=n(ZLe,"A",{href:!0});var olt=s(Xj);gwo=r(olt,"GPTNeoXForCausalLM"),olt.forEach(t),hwo=r(ZLe," (GPT NeoX model)"),ZLe.forEach(t),pwo=i(W),_2=n(W,"LI",{});var e8e=s(_2);rce=n(e8e,"STRONG",{});var rlt=s(rce);_wo=r(rlt,"gptj"),rlt.forEach(t),uwo=r(e8e," \u2014 "),zj=n(e8e,"A",{href:!0});var tlt=s(zj);bwo=r(tlt,"GPTJForCausalLM"),tlt.forEach(t),vwo=r(e8e," (GPT-J model)"),e8e.forEach(t),Fwo=i(W),u2=n(W,"LI",{});var o8e=s(u2);tce=n(o8e,"STRONG",{});var alt=s(tce);Two=r(alt,"marian"),alt.forEach(t),Mwo=r(o8e," \u2014 "),Wj=n(o8e,"A",{href:!0});var nlt=s(Wj);Ewo=r(nlt,"MarianForCausalLM"),nlt.forEach(t),Cwo=r(o8e," (Marian model)"),o8e.forEach(t),wwo=i(W),b2=n(W,"LI",{});var r8e=s(b2);ace=n(r8e,"STRONG",{});var slt=s(ace);Awo=r(slt,"mbart"),slt.forEach(t),ywo=r(r8e," \u2014 "),Qj=n(r8e,"A",{href:!0});var llt=s(Qj);Lwo=r(llt,"MBartForCausalLM"),llt.forEach(t),xwo=r(r8e," (mBART model)"),r8e.forEach(t),$wo=i(W),v2=n(W,"LI",{});var t8e=s(v2);nce=n(t8e,"STRONG",{});var ilt=s(nce);kwo=r(ilt,"megatron-bert"),ilt.forEach(t),Swo=r(t8e," \u2014 "),Hj=n(t8e,"A",{href:!0});var dlt=s(Hj);Rwo=r(dlt,"MegatronBertForCausalLM"),dlt.forEach(t),Pwo=r(t8e," (MegatronBert model)"),t8e.forEach(t),Bwo=i(W),F2=n(W,"LI",{});var a8e=s(F2);sce=n(a8e,"STRONG",{});var clt=s(sce);Iwo=r(clt,"openai-gpt"),clt.forEach(t),Nwo=r(a8e," \u2014 "),Uj=n(a8e,"A",{href:!0});var flt=s(Uj);qwo=r(flt,"OpenAIGPTLMHeadModel"),flt.forEach(t),jwo=r(a8e," (OpenAI GPT model)"),a8e.forEach(t),Dwo=i(W),T2=n(W,"LI",{});var n8e=s(T2);lce=n(n8e,"STRONG",{});var mlt=s(lce);Gwo=r(mlt,"opt"),mlt.forEach(t),Owo=r(n8e," \u2014 "),Jj=n(n8e,"A",{href:!0});var glt=s(Jj);Vwo=r(glt,"OPTForCausalLM"),glt.forEach(t),Xwo=r(n8e," (OPT model)"),n8e.forEach(t),zwo=i(W),M2=n(W,"LI",{});var s8e=s(M2);ice=n(s8e,"STRONG",{});var hlt=s(ice);Wwo=r(hlt,"pegasus"),hlt.forEach(t),Qwo=r(s8e," \u2014 "),Yj=n(s8e,"A",{href:!0});var plt=s(Yj);Hwo=r(plt,"PegasusForCausalLM"),plt.forEach(t),Uwo=r(s8e," (Pegasus model)"),s8e.forEach(t),Jwo=i(W),E2=n(W,"LI",{});var l8e=s(E2);dce=n(l8e,"STRONG",{});var _lt=s(dce);Ywo=r(_lt,"plbart"),_lt.forEach(t),Kwo=r(l8e," \u2014 "),Kj=n(l8e,"A",{href:!0});var ult=s(Kj);Zwo=r(ult,"PLBartForCausalLM"),ult.forEach(t),e6o=r(l8e," (PLBart model)"),l8e.forEach(t),o6o=i(W),C2=n(W,"LI",{});var i8e=s(C2);cce=n(i8e,"STRONG",{});var blt=s(cce);r6o=r(blt,"prophetnet"),blt.forEach(t),t6o=r(i8e," \u2014 "),Zj=n(i8e,"A",{href:!0});var vlt=s(Zj);a6o=r(vlt,"ProphetNetForCausalLM"),vlt.forEach(t),n6o=r(i8e," (ProphetNet model)"),i8e.forEach(t),s6o=i(W),w2=n(W,"LI",{});var d8e=s(w2);fce=n(d8e,"STRONG",{});var Flt=s(fce);l6o=r(Flt,"qdqbert"),Flt.forEach(t),i6o=r(d8e," \u2014 "),eD=n(d8e,"A",{href:!0});var Tlt=s(eD);d6o=r(Tlt,"QDQBertLMHeadModel"),Tlt.forEach(t),c6o=r(d8e," (QDQBert model)"),d8e.forEach(t),f6o=i(W),A2=n(W,"LI",{});var c8e=s(A2);mce=n(c8e,"STRONG",{});var Mlt=s(mce);m6o=r(Mlt,"reformer"),Mlt.forEach(t),g6o=r(c8e," \u2014 "),oD=n(c8e,"A",{href:!0});var Elt=s(oD);h6o=r(Elt,"ReformerModelWithLMHead"),Elt.forEach(t),p6o=r(c8e," (Reformer model)"),c8e.forEach(t),_6o=i(W),y2=n(W,"LI",{});var f8e=s(y2);gce=n(f8e,"STRONG",{});var Clt=s(gce);u6o=r(Clt,"rembert"),Clt.forEach(t),b6o=r(f8e," \u2014 "),rD=n(f8e,"A",{href:!0});var wlt=s(rD);v6o=r(wlt,"RemBertForCausalLM"),wlt.forEach(t),F6o=r(f8e," (RemBERT model)"),f8e.forEach(t),T6o=i(W),L2=n(W,"LI",{});var m8e=s(L2);hce=n(m8e,"STRONG",{});var Alt=s(hce);M6o=r(Alt,"roberta"),Alt.forEach(t),E6o=r(m8e," \u2014 "),tD=n(m8e,"A",{href:!0});var ylt=s(tD);C6o=r(ylt,"RobertaForCausalLM"),ylt.forEach(t),w6o=r(m8e," (RoBERTa model)"),m8e.forEach(t),A6o=i(W),x2=n(W,"LI",{});var g8e=s(x2);pce=n(g8e,"STRONG",{});var Llt=s(pce);y6o=r(Llt,"roformer"),Llt.forEach(t),L6o=r(g8e," \u2014 "),aD=n(g8e,"A",{href:!0});var xlt=s(aD);x6o=r(xlt,"RoFormerForCausalLM"),xlt.forEach(t),$6o=r(g8e," (RoFormer model)"),g8e.forEach(t),k6o=i(W),$2=n(W,"LI",{});var h8e=s($2);_ce=n(h8e,"STRONG",{});var $lt=s(_ce);S6o=r($lt,"speech_to_text_2"),$lt.forEach(t),R6o=r(h8e," \u2014 "),nD=n(h8e,"A",{href:!0});var klt=s(nD);P6o=r(klt,"Speech2Text2ForCausalLM"),klt.forEach(t),B6o=r(h8e," (Speech2Text2 model)"),h8e.forEach(t),I6o=i(W),k2=n(W,"LI",{});var p8e=s(k2);uce=n(p8e,"STRONG",{});var Slt=s(uce);N6o=r(Slt,"transfo-xl"),Slt.forEach(t),q6o=r(p8e," \u2014 "),sD=n(p8e,"A",{href:!0});var Rlt=s(sD);j6o=r(Rlt,"TransfoXLLMHeadModel"),Rlt.forEach(t),D6o=r(p8e," (Transformer-XL model)"),p8e.forEach(t),G6o=i(W),S2=n(W,"LI",{});var _8e=s(S2);bce=n(_8e,"STRONG",{});var Plt=s(bce);O6o=r(Plt,"trocr"),Plt.forEach(t),V6o=r(_8e," \u2014 "),lD=n(_8e,"A",{href:!0});var Blt=s(lD);X6o=r(Blt,"TrOCRForCausalLM"),Blt.forEach(t),z6o=r(_8e," (TrOCR model)"),_8e.forEach(t),W6o=i(W),R2=n(W,"LI",{});var u8e=s(R2);vce=n(u8e,"STRONG",{});var Ilt=s(vce);Q6o=r(Ilt,"xglm"),Ilt.forEach(t),H6o=r(u8e," \u2014 "),iD=n(u8e,"A",{href:!0});var Nlt=s(iD);U6o=r(Nlt,"XGLMForCausalLM"),Nlt.forEach(t),J6o=r(u8e," (XGLM model)"),u8e.forEach(t),Y6o=i(W),P2=n(W,"LI",{});var b8e=s(P2);Fce=n(b8e,"STRONG",{});var qlt=s(Fce);K6o=r(qlt,"xlm"),qlt.forEach(t),Z6o=r(b8e," \u2014 "),dD=n(b8e,"A",{href:!0});var jlt=s(dD);eAo=r(jlt,"XLMWithLMHeadModel"),jlt.forEach(t),oAo=r(b8e," (XLM model)"),b8e.forEach(t),rAo=i(W),B2=n(W,"LI",{});var v8e=s(B2);Tce=n(v8e,"STRONG",{});var Dlt=s(Tce);tAo=r(Dlt,"xlm-prophetnet"),Dlt.forEach(t),aAo=r(v8e," \u2014 "),cD=n(v8e,"A",{href:!0});var Glt=s(cD);nAo=r(Glt,"XLMProphetNetForCausalLM"),Glt.forEach(t),sAo=r(v8e," (XLMProphetNet model)"),v8e.forEach(t),lAo=i(W),I2=n(W,"LI",{});var F8e=s(I2);Mce=n(F8e,"STRONG",{});var Olt=s(Mce);iAo=r(Olt,"xlm-roberta"),Olt.forEach(t),dAo=r(F8e," \u2014 "),fD=n(F8e,"A",{href:!0});var Vlt=s(fD);cAo=r(Vlt,"XLMRobertaForCausalLM"),Vlt.forEach(t),fAo=r(F8e," (XLM-RoBERTa model)"),F8e.forEach(t),mAo=i(W),N2=n(W,"LI",{});var T8e=s(N2);Ece=n(T8e,"STRONG",{});var Xlt=s(Ece);gAo=r(Xlt,"xlm-roberta-xl"),Xlt.forEach(t),hAo=r(T8e," \u2014 "),mD=n(T8e,"A",{href:!0});var zlt=s(mD);pAo=r(zlt,"XLMRobertaXLForCausalLM"),zlt.forEach(t),_Ao=r(T8e," (XLM-RoBERTa-XL model)"),T8e.forEach(t),uAo=i(W),q2=n(W,"LI",{});var M8e=s(q2);Cce=n(M8e,"STRONG",{});var Wlt=s(Cce);bAo=r(Wlt,"xlnet"),Wlt.forEach(t),vAo=r(M8e," \u2014 "),gD=n(M8e,"A",{href:!0});var Qlt=s(gD);FAo=r(Qlt,"XLNetLMHeadModel"),Qlt.forEach(t),TAo=r(M8e," (XLNet model)"),M8e.forEach(t),W.forEach(t),MAo=i(ta),j2=n(ta,"P",{});var E8e=s(j2);EAo=r(E8e,"The model is set in evaluation mode by default using "),wce=n(E8e,"CODE",{});var Hlt=s(wce);CAo=r(Hlt,"model.eval()"),Hlt.forEach(t),wAo=r(E8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ace=n(E8e,"CODE",{});var Ult=s(Ace);AAo=r(Ult,"model.train()"),Ult.forEach(t),E8e.forEach(t),yAo=i(ta),T(D2.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),Nqe=i(f),Pi=n(f,"H2",{class:!0});var GDe=s(Pi);G2=n(GDe,"A",{id:!0,class:!0,href:!0});var Jlt=s(G2);yce=n(Jlt,"SPAN",{});var Ylt=s(yce);T(vy.$$.fragment,Ylt),Ylt.forEach(t),Jlt.forEach(t),LAo=i(GDe),Lce=n(GDe,"SPAN",{});var Klt=s(Lce);xAo=r(Klt,"AutoModelForMaskedLM"),Klt.forEach(t),GDe.forEach(t),qqe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(Fy.$$.fragment,Xs),$Ao=i(Xs),Bi=n(Xs,"P",{});var kZ=s(Bi);kAo=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hD=n(kZ,"A",{href:!0});var Zlt=s(hD);SAo=r(Zlt,"from_pretrained()"),Zlt.forEach(t),RAo=r(kZ," class method or the "),pD=n(kZ,"A",{href:!0});var eit=s(pD);PAo=r(eit,"from_config()"),eit.forEach(t),BAo=r(kZ,` class
method.`),kZ.forEach(t),IAo=i(Xs),Ty=n(Xs,"P",{});var ODe=s(Ty);NAo=r(ODe,"This class cannot be instantiated directly using "),xce=n(ODe,"CODE",{});var oit=s(xce);qAo=r(oit,"__init__()"),oit.forEach(t),jAo=r(ODe," (throws an error)."),ODe.forEach(t),DAo=i(Xs),st=n(Xs,"DIV",{class:!0});var Ow=s(st);T(My.$$.fragment,Ow),GAo=i(Ow),$ce=n(Ow,"P",{});var rit=s($ce);OAo=r(rit,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rit.forEach(t),VAo=i(Ow),Ii=n(Ow,"P",{});var SZ=s(Ii);XAo=r(SZ,`Note:
Loading a model from its configuration file does `),kce=n(SZ,"STRONG",{});var tit=s(kce);zAo=r(tit,"not"),tit.forEach(t),WAo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_D=n(SZ,"A",{href:!0});var ait=s(_D);QAo=r(ait,"from_pretrained()"),ait.forEach(t),HAo=r(SZ," to load the model weights."),SZ.forEach(t),UAo=i(Ow),T(O2.$$.fragment,Ow),Ow.forEach(t),JAo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(Ey.$$.fragment,aa),YAo=i(aa),Sce=n(aa,"P",{});var nit=s(Sce);KAo=r(nit,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nit.forEach(t),ZAo=i(aa),ka=n(aa,"P",{});var Vw=s(ka);eyo=r(Vw,"The model class to instantiate is selected based on the "),Rce=n(Vw,"CODE",{});var sit=s(Rce);oyo=r(sit,"model_type"),sit.forEach(t),ryo=r(Vw,` property of the config object (either
passed as an argument or loaded from `),Pce=n(Vw,"CODE",{});var lit=s(Pce);tyo=r(lit,"pretrained_model_name_or_path"),lit.forEach(t),ayo=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bce=n(Vw,"CODE",{});var iit=s(Bce);nyo=r(iit,"pretrained_model_name_or_path"),iit.forEach(t),syo=r(Vw,":"),Vw.forEach(t),lyo=i(aa),Q=n(aa,"UL",{});var U=s(Q);V2=n(U,"LI",{});var C8e=s(V2);Ice=n(C8e,"STRONG",{});var dit=s(Ice);iyo=r(dit,"albert"),dit.forEach(t),dyo=r(C8e," \u2014 "),uD=n(C8e,"A",{href:!0});var cit=s(uD);cyo=r(cit,"AlbertForMaskedLM"),cit.forEach(t),fyo=r(C8e," (ALBERT model)"),C8e.forEach(t),myo=i(U),X2=n(U,"LI",{});var w8e=s(X2);Nce=n(w8e,"STRONG",{});var fit=s(Nce);gyo=r(fit,"bart"),fit.forEach(t),hyo=r(w8e," \u2014 "),bD=n(w8e,"A",{href:!0});var mit=s(bD);pyo=r(mit,"BartForConditionalGeneration"),mit.forEach(t),_yo=r(w8e," (BART model)"),w8e.forEach(t),uyo=i(U),z2=n(U,"LI",{});var A8e=s(z2);qce=n(A8e,"STRONG",{});var git=s(qce);byo=r(git,"bert"),git.forEach(t),vyo=r(A8e," \u2014 "),vD=n(A8e,"A",{href:!0});var hit=s(vD);Fyo=r(hit,"BertForMaskedLM"),hit.forEach(t),Tyo=r(A8e," (BERT model)"),A8e.forEach(t),Myo=i(U),W2=n(U,"LI",{});var y8e=s(W2);jce=n(y8e,"STRONG",{});var pit=s(jce);Eyo=r(pit,"big_bird"),pit.forEach(t),Cyo=r(y8e," \u2014 "),FD=n(y8e,"A",{href:!0});var _it=s(FD);wyo=r(_it,"BigBirdForMaskedLM"),_it.forEach(t),Ayo=r(y8e," (BigBird model)"),y8e.forEach(t),yyo=i(U),Q2=n(U,"LI",{});var L8e=s(Q2);Dce=n(L8e,"STRONG",{});var uit=s(Dce);Lyo=r(uit,"camembert"),uit.forEach(t),xyo=r(L8e," \u2014 "),TD=n(L8e,"A",{href:!0});var bit=s(TD);$yo=r(bit,"CamembertForMaskedLM"),bit.forEach(t),kyo=r(L8e," (CamemBERT model)"),L8e.forEach(t),Syo=i(U),H2=n(U,"LI",{});var x8e=s(H2);Gce=n(x8e,"STRONG",{});var vit=s(Gce);Ryo=r(vit,"convbert"),vit.forEach(t),Pyo=r(x8e," \u2014 "),MD=n(x8e,"A",{href:!0});var Fit=s(MD);Byo=r(Fit,"ConvBertForMaskedLM"),Fit.forEach(t),Iyo=r(x8e," (ConvBERT model)"),x8e.forEach(t),Nyo=i(U),U2=n(U,"LI",{});var $8e=s(U2);Oce=n($8e,"STRONG",{});var Tit=s(Oce);qyo=r(Tit,"data2vec-text"),Tit.forEach(t),jyo=r($8e," \u2014 "),ED=n($8e,"A",{href:!0});var Mit=s(ED);Dyo=r(Mit,"Data2VecTextForMaskedLM"),Mit.forEach(t),Gyo=r($8e," (Data2VecText model)"),$8e.forEach(t),Oyo=i(U),J2=n(U,"LI",{});var k8e=s(J2);Vce=n(k8e,"STRONG",{});var Eit=s(Vce);Vyo=r(Eit,"deberta"),Eit.forEach(t),Xyo=r(k8e," \u2014 "),CD=n(k8e,"A",{href:!0});var Cit=s(CD);zyo=r(Cit,"DebertaForMaskedLM"),Cit.forEach(t),Wyo=r(k8e," (DeBERTa model)"),k8e.forEach(t),Qyo=i(U),Y2=n(U,"LI",{});var S8e=s(Y2);Xce=n(S8e,"STRONG",{});var wit=s(Xce);Hyo=r(wit,"deberta-v2"),wit.forEach(t),Uyo=r(S8e," \u2014 "),wD=n(S8e,"A",{href:!0});var Ait=s(wD);Jyo=r(Ait,"DebertaV2ForMaskedLM"),Ait.forEach(t),Yyo=r(S8e," (DeBERTa-v2 model)"),S8e.forEach(t),Kyo=i(U),K2=n(U,"LI",{});var R8e=s(K2);zce=n(R8e,"STRONG",{});var yit=s(zce);Zyo=r(yit,"distilbert"),yit.forEach(t),eLo=r(R8e," \u2014 "),AD=n(R8e,"A",{href:!0});var Lit=s(AD);oLo=r(Lit,"DistilBertForMaskedLM"),Lit.forEach(t),rLo=r(R8e," (DistilBERT model)"),R8e.forEach(t),tLo=i(U),Z2=n(U,"LI",{});var P8e=s(Z2);Wce=n(P8e,"STRONG",{});var xit=s(Wce);aLo=r(xit,"electra"),xit.forEach(t),nLo=r(P8e," \u2014 "),yD=n(P8e,"A",{href:!0});var $it=s(yD);sLo=r($it,"ElectraForMaskedLM"),$it.forEach(t),lLo=r(P8e," (ELECTRA model)"),P8e.forEach(t),iLo=i(U),e1=n(U,"LI",{});var B8e=s(e1);Qce=n(B8e,"STRONG",{});var kit=s(Qce);dLo=r(kit,"flaubert"),kit.forEach(t),cLo=r(B8e," \u2014 "),LD=n(B8e,"A",{href:!0});var Sit=s(LD);fLo=r(Sit,"FlaubertWithLMHeadModel"),Sit.forEach(t),mLo=r(B8e," (FlauBERT model)"),B8e.forEach(t),gLo=i(U),o1=n(U,"LI",{});var I8e=s(o1);Hce=n(I8e,"STRONG",{});var Rit=s(Hce);hLo=r(Rit,"fnet"),Rit.forEach(t),pLo=r(I8e," \u2014 "),xD=n(I8e,"A",{href:!0});var Pit=s(xD);_Lo=r(Pit,"FNetForMaskedLM"),Pit.forEach(t),uLo=r(I8e," (FNet model)"),I8e.forEach(t),bLo=i(U),r1=n(U,"LI",{});var N8e=s(r1);Uce=n(N8e,"STRONG",{});var Bit=s(Uce);vLo=r(Bit,"funnel"),Bit.forEach(t),FLo=r(N8e," \u2014 "),$D=n(N8e,"A",{href:!0});var Iit=s($D);TLo=r(Iit,"FunnelForMaskedLM"),Iit.forEach(t),MLo=r(N8e," (Funnel Transformer model)"),N8e.forEach(t),ELo=i(U),t1=n(U,"LI",{});var q8e=s(t1);Jce=n(q8e,"STRONG",{});var Nit=s(Jce);CLo=r(Nit,"ibert"),Nit.forEach(t),wLo=r(q8e," \u2014 "),kD=n(q8e,"A",{href:!0});var qit=s(kD);ALo=r(qit,"IBertForMaskedLM"),qit.forEach(t),yLo=r(q8e," (I-BERT model)"),q8e.forEach(t),LLo=i(U),a1=n(U,"LI",{});var j8e=s(a1);Yce=n(j8e,"STRONG",{});var jit=s(Yce);xLo=r(jit,"layoutlm"),jit.forEach(t),$Lo=r(j8e," \u2014 "),SD=n(j8e,"A",{href:!0});var Dit=s(SD);kLo=r(Dit,"LayoutLMForMaskedLM"),Dit.forEach(t),SLo=r(j8e," (LayoutLM model)"),j8e.forEach(t),RLo=i(U),n1=n(U,"LI",{});var D8e=s(n1);Kce=n(D8e,"STRONG",{});var Git=s(Kce);PLo=r(Git,"longformer"),Git.forEach(t),BLo=r(D8e," \u2014 "),RD=n(D8e,"A",{href:!0});var Oit=s(RD);ILo=r(Oit,"LongformerForMaskedLM"),Oit.forEach(t),NLo=r(D8e," (Longformer model)"),D8e.forEach(t),qLo=i(U),s1=n(U,"LI",{});var G8e=s(s1);Zce=n(G8e,"STRONG",{});var Vit=s(Zce);jLo=r(Vit,"mbart"),Vit.forEach(t),DLo=r(G8e," \u2014 "),PD=n(G8e,"A",{href:!0});var Xit=s(PD);GLo=r(Xit,"MBartForConditionalGeneration"),Xit.forEach(t),OLo=r(G8e," (mBART model)"),G8e.forEach(t),VLo=i(U),l1=n(U,"LI",{});var O8e=s(l1);efe=n(O8e,"STRONG",{});var zit=s(efe);XLo=r(zit,"megatron-bert"),zit.forEach(t),zLo=r(O8e," \u2014 "),BD=n(O8e,"A",{href:!0});var Wit=s(BD);WLo=r(Wit,"MegatronBertForMaskedLM"),Wit.forEach(t),QLo=r(O8e," (MegatronBert model)"),O8e.forEach(t),HLo=i(U),i1=n(U,"LI",{});var V8e=s(i1);ofe=n(V8e,"STRONG",{});var Qit=s(ofe);ULo=r(Qit,"mobilebert"),Qit.forEach(t),JLo=r(V8e," \u2014 "),ID=n(V8e,"A",{href:!0});var Hit=s(ID);YLo=r(Hit,"MobileBertForMaskedLM"),Hit.forEach(t),KLo=r(V8e," (MobileBERT model)"),V8e.forEach(t),ZLo=i(U),d1=n(U,"LI",{});var X8e=s(d1);rfe=n(X8e,"STRONG",{});var Uit=s(rfe);e8o=r(Uit,"mpnet"),Uit.forEach(t),o8o=r(X8e," \u2014 "),ND=n(X8e,"A",{href:!0});var Jit=s(ND);r8o=r(Jit,"MPNetForMaskedLM"),Jit.forEach(t),t8o=r(X8e," (MPNet model)"),X8e.forEach(t),a8o=i(U),c1=n(U,"LI",{});var z8e=s(c1);tfe=n(z8e,"STRONG",{});var Yit=s(tfe);n8o=r(Yit,"nystromformer"),Yit.forEach(t),s8o=r(z8e," \u2014 "),qD=n(z8e,"A",{href:!0});var Kit=s(qD);l8o=r(Kit,"NystromformerForMaskedLM"),Kit.forEach(t),i8o=r(z8e," (Nystromformer model)"),z8e.forEach(t),d8o=i(U),f1=n(U,"LI",{});var W8e=s(f1);afe=n(W8e,"STRONG",{});var Zit=s(afe);c8o=r(Zit,"perceiver"),Zit.forEach(t),f8o=r(W8e," \u2014 "),jD=n(W8e,"A",{href:!0});var edt=s(jD);m8o=r(edt,"PerceiverForMaskedLM"),edt.forEach(t),g8o=r(W8e," (Perceiver model)"),W8e.forEach(t),h8o=i(U),m1=n(U,"LI",{});var Q8e=s(m1);nfe=n(Q8e,"STRONG",{});var odt=s(nfe);p8o=r(odt,"qdqbert"),odt.forEach(t),_8o=r(Q8e," \u2014 "),DD=n(Q8e,"A",{href:!0});var rdt=s(DD);u8o=r(rdt,"QDQBertForMaskedLM"),rdt.forEach(t),b8o=r(Q8e," (QDQBert model)"),Q8e.forEach(t),v8o=i(U),g1=n(U,"LI",{});var H8e=s(g1);sfe=n(H8e,"STRONG",{});var tdt=s(sfe);F8o=r(tdt,"reformer"),tdt.forEach(t),T8o=r(H8e," \u2014 "),GD=n(H8e,"A",{href:!0});var adt=s(GD);M8o=r(adt,"ReformerForMaskedLM"),adt.forEach(t),E8o=r(H8e," (Reformer model)"),H8e.forEach(t),C8o=i(U),h1=n(U,"LI",{});var U8e=s(h1);lfe=n(U8e,"STRONG",{});var ndt=s(lfe);w8o=r(ndt,"rembert"),ndt.forEach(t),A8o=r(U8e," \u2014 "),OD=n(U8e,"A",{href:!0});var sdt=s(OD);y8o=r(sdt,"RemBertForMaskedLM"),sdt.forEach(t),L8o=r(U8e," (RemBERT model)"),U8e.forEach(t),x8o=i(U),p1=n(U,"LI",{});var J8e=s(p1);ife=n(J8e,"STRONG",{});var ldt=s(ife);$8o=r(ldt,"roberta"),ldt.forEach(t),k8o=r(J8e," \u2014 "),VD=n(J8e,"A",{href:!0});var idt=s(VD);S8o=r(idt,"RobertaForMaskedLM"),idt.forEach(t),R8o=r(J8e," (RoBERTa model)"),J8e.forEach(t),P8o=i(U),_1=n(U,"LI",{});var Y8e=s(_1);dfe=n(Y8e,"STRONG",{});var ddt=s(dfe);B8o=r(ddt,"roformer"),ddt.forEach(t),I8o=r(Y8e," \u2014 "),XD=n(Y8e,"A",{href:!0});var cdt=s(XD);N8o=r(cdt,"RoFormerForMaskedLM"),cdt.forEach(t),q8o=r(Y8e," (RoFormer model)"),Y8e.forEach(t),j8o=i(U),u1=n(U,"LI",{});var K8e=s(u1);cfe=n(K8e,"STRONG",{});var fdt=s(cfe);D8o=r(fdt,"squeezebert"),fdt.forEach(t),G8o=r(K8e," \u2014 "),zD=n(K8e,"A",{href:!0});var mdt=s(zD);O8o=r(mdt,"SqueezeBertForMaskedLM"),mdt.forEach(t),V8o=r(K8e," (SqueezeBERT model)"),K8e.forEach(t),X8o=i(U),b1=n(U,"LI",{});var Z8e=s(b1);ffe=n(Z8e,"STRONG",{});var gdt=s(ffe);z8o=r(gdt,"tapas"),gdt.forEach(t),W8o=r(Z8e," \u2014 "),WD=n(Z8e,"A",{href:!0});var hdt=s(WD);Q8o=r(hdt,"TapasForMaskedLM"),hdt.forEach(t),H8o=r(Z8e," (TAPAS model)"),Z8e.forEach(t),U8o=i(U),v1=n(U,"LI",{});var e9e=s(v1);mfe=n(e9e,"STRONG",{});var pdt=s(mfe);J8o=r(pdt,"wav2vec2"),pdt.forEach(t),Y8o=r(e9e," \u2014 "),gfe=n(e9e,"CODE",{});var _dt=s(gfe);K8o=r(_dt,"Wav2Vec2ForMaskedLM"),_dt.forEach(t),Z8o=r(e9e," (Wav2Vec2 model)"),e9e.forEach(t),e9o=i(U),F1=n(U,"LI",{});var o9e=s(F1);hfe=n(o9e,"STRONG",{});var udt=s(hfe);o9o=r(udt,"xlm"),udt.forEach(t),r9o=r(o9e," \u2014 "),QD=n(o9e,"A",{href:!0});var bdt=s(QD);t9o=r(bdt,"XLMWithLMHeadModel"),bdt.forEach(t),a9o=r(o9e," (XLM model)"),o9e.forEach(t),n9o=i(U),T1=n(U,"LI",{});var r9e=s(T1);pfe=n(r9e,"STRONG",{});var vdt=s(pfe);s9o=r(vdt,"xlm-roberta"),vdt.forEach(t),l9o=r(r9e," \u2014 "),HD=n(r9e,"A",{href:!0});var Fdt=s(HD);i9o=r(Fdt,"XLMRobertaForMaskedLM"),Fdt.forEach(t),d9o=r(r9e," (XLM-RoBERTa model)"),r9e.forEach(t),c9o=i(U),M1=n(U,"LI",{});var t9e=s(M1);_fe=n(t9e,"STRONG",{});var Tdt=s(_fe);f9o=r(Tdt,"xlm-roberta-xl"),Tdt.forEach(t),m9o=r(t9e," \u2014 "),UD=n(t9e,"A",{href:!0});var Mdt=s(UD);g9o=r(Mdt,"XLMRobertaXLForMaskedLM"),Mdt.forEach(t),h9o=r(t9e," (XLM-RoBERTa-XL model)"),t9e.forEach(t),p9o=i(U),E1=n(U,"LI",{});var a9e=s(E1);ufe=n(a9e,"STRONG",{});var Edt=s(ufe);_9o=r(Edt,"yoso"),Edt.forEach(t),u9o=r(a9e," \u2014 "),JD=n(a9e,"A",{href:!0});var Cdt=s(JD);b9o=r(Cdt,"YosoForMaskedLM"),Cdt.forEach(t),v9o=r(a9e," (YOSO model)"),a9e.forEach(t),U.forEach(t),F9o=i(aa),C1=n(aa,"P",{});var n9e=s(C1);T9o=r(n9e,"The model is set in evaluation mode by default using "),bfe=n(n9e,"CODE",{});var wdt=s(bfe);M9o=r(wdt,"model.eval()"),wdt.forEach(t),E9o=r(n9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=n(n9e,"CODE",{});var Adt=s(vfe);C9o=r(Adt,"model.train()"),Adt.forEach(t),n9e.forEach(t),w9o=i(aa),T(w1.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),jqe=i(f),Ni=n(f,"H2",{class:!0});var VDe=s(Ni);A1=n(VDe,"A",{id:!0,class:!0,href:!0});var ydt=s(A1);Ffe=n(ydt,"SPAN",{});var Ldt=s(Ffe);T(Cy.$$.fragment,Ldt),Ldt.forEach(t),ydt.forEach(t),A9o=i(VDe),Tfe=n(VDe,"SPAN",{});var xdt=s(Tfe);y9o=r(xdt,"AutoModelForSeq2SeqLM"),xdt.forEach(t),VDe.forEach(t),Dqe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(wy.$$.fragment,zs),L9o=i(zs),qi=n(zs,"P",{});var RZ=s(qi);x9o=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),YD=n(RZ,"A",{href:!0});var $dt=s(YD);$9o=r($dt,"from_pretrained()"),$dt.forEach(t),k9o=r(RZ," class method or the "),KD=n(RZ,"A",{href:!0});var kdt=s(KD);S9o=r(kdt,"from_config()"),kdt.forEach(t),R9o=r(RZ,` class
method.`),RZ.forEach(t),P9o=i(zs),Ay=n(zs,"P",{});var XDe=s(Ay);B9o=r(XDe,"This class cannot be instantiated directly using "),Mfe=n(XDe,"CODE",{});var Sdt=s(Mfe);I9o=r(Sdt,"__init__()"),Sdt.forEach(t),N9o=r(XDe," (throws an error)."),XDe.forEach(t),q9o=i(zs),lt=n(zs,"DIV",{class:!0});var Xw=s(lt);T(yy.$$.fragment,Xw),j9o=i(Xw),Efe=n(Xw,"P",{});var Rdt=s(Efe);D9o=r(Rdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Rdt.forEach(t),G9o=i(Xw),ji=n(Xw,"P",{});var PZ=s(ji);O9o=r(PZ,`Note:
Loading a model from its configuration file does `),Cfe=n(PZ,"STRONG",{});var Pdt=s(Cfe);V9o=r(Pdt,"not"),Pdt.forEach(t),X9o=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=n(PZ,"A",{href:!0});var Bdt=s(ZD);z9o=r(Bdt,"from_pretrained()"),Bdt.forEach(t),W9o=r(PZ," to load the model weights."),PZ.forEach(t),Q9o=i(Xw),T(y1.$$.fragment,Xw),Xw.forEach(t),H9o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(Ly.$$.fragment,na),U9o=i(na),wfe=n(na,"P",{});var Idt=s(wfe);J9o=r(Idt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Idt.forEach(t),Y9o=i(na),Sa=n(na,"P",{});var zw=s(Sa);K9o=r(zw,"The model class to instantiate is selected based on the "),Afe=n(zw,"CODE",{});var Ndt=s(Afe);Z9o=r(Ndt,"model_type"),Ndt.forEach(t),exo=r(zw,` property of the config object (either
passed as an argument or loaded from `),yfe=n(zw,"CODE",{});var qdt=s(yfe);oxo=r(qdt,"pretrained_model_name_or_path"),qdt.forEach(t),rxo=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=n(zw,"CODE",{});var jdt=s(Lfe);txo=r(jdt,"pretrained_model_name_or_path"),jdt.forEach(t),axo=r(zw,":"),zw.forEach(t),nxo=i(na),_e=n(na,"UL",{});var ve=s(_e);L1=n(ve,"LI",{});var s9e=s(L1);xfe=n(s9e,"STRONG",{});var Ddt=s(xfe);sxo=r(Ddt,"bart"),Ddt.forEach(t),lxo=r(s9e," \u2014 "),eG=n(s9e,"A",{href:!0});var Gdt=s(eG);ixo=r(Gdt,"BartForConditionalGeneration"),Gdt.forEach(t),dxo=r(s9e," (BART model)"),s9e.forEach(t),cxo=i(ve),x1=n(ve,"LI",{});var l9e=s(x1);$fe=n(l9e,"STRONG",{});var Odt=s($fe);fxo=r(Odt,"bigbird_pegasus"),Odt.forEach(t),mxo=r(l9e," \u2014 "),oG=n(l9e,"A",{href:!0});var Vdt=s(oG);gxo=r(Vdt,"BigBirdPegasusForConditionalGeneration"),Vdt.forEach(t),hxo=r(l9e," (BigBirdPegasus model)"),l9e.forEach(t),pxo=i(ve),$1=n(ve,"LI",{});var i9e=s($1);kfe=n(i9e,"STRONG",{});var Xdt=s(kfe);_xo=r(Xdt,"blenderbot"),Xdt.forEach(t),uxo=r(i9e," \u2014 "),rG=n(i9e,"A",{href:!0});var zdt=s(rG);bxo=r(zdt,"BlenderbotForConditionalGeneration"),zdt.forEach(t),vxo=r(i9e," (Blenderbot model)"),i9e.forEach(t),Fxo=i(ve),k1=n(ve,"LI",{});var d9e=s(k1);Sfe=n(d9e,"STRONG",{});var Wdt=s(Sfe);Txo=r(Wdt,"blenderbot-small"),Wdt.forEach(t),Mxo=r(d9e," \u2014 "),tG=n(d9e,"A",{href:!0});var Qdt=s(tG);Exo=r(Qdt,"BlenderbotSmallForConditionalGeneration"),Qdt.forEach(t),Cxo=r(d9e," (BlenderbotSmall model)"),d9e.forEach(t),wxo=i(ve),S1=n(ve,"LI",{});var c9e=s(S1);Rfe=n(c9e,"STRONG",{});var Hdt=s(Rfe);Axo=r(Hdt,"encoder-decoder"),Hdt.forEach(t),yxo=r(c9e," \u2014 "),aG=n(c9e,"A",{href:!0});var Udt=s(aG);Lxo=r(Udt,"EncoderDecoderModel"),Udt.forEach(t),xxo=r(c9e," (Encoder decoder model)"),c9e.forEach(t),$xo=i(ve),R1=n(ve,"LI",{});var f9e=s(R1);Pfe=n(f9e,"STRONG",{});var Jdt=s(Pfe);kxo=r(Jdt,"fsmt"),Jdt.forEach(t),Sxo=r(f9e," \u2014 "),nG=n(f9e,"A",{href:!0});var Ydt=s(nG);Rxo=r(Ydt,"FSMTForConditionalGeneration"),Ydt.forEach(t),Pxo=r(f9e," (FairSeq Machine-Translation model)"),f9e.forEach(t),Bxo=i(ve),P1=n(ve,"LI",{});var m9e=s(P1);Bfe=n(m9e,"STRONG",{});var Kdt=s(Bfe);Ixo=r(Kdt,"led"),Kdt.forEach(t),Nxo=r(m9e," \u2014 "),sG=n(m9e,"A",{href:!0});var Zdt=s(sG);qxo=r(Zdt,"LEDForConditionalGeneration"),Zdt.forEach(t),jxo=r(m9e," (LED model)"),m9e.forEach(t),Dxo=i(ve),B1=n(ve,"LI",{});var g9e=s(B1);Ife=n(g9e,"STRONG",{});var ect=s(Ife);Gxo=r(ect,"m2m_100"),ect.forEach(t),Oxo=r(g9e," \u2014 "),lG=n(g9e,"A",{href:!0});var oct=s(lG);Vxo=r(oct,"M2M100ForConditionalGeneration"),oct.forEach(t),Xxo=r(g9e," (M2M100 model)"),g9e.forEach(t),zxo=i(ve),I1=n(ve,"LI",{});var h9e=s(I1);Nfe=n(h9e,"STRONG",{});var rct=s(Nfe);Wxo=r(rct,"marian"),rct.forEach(t),Qxo=r(h9e," \u2014 "),iG=n(h9e,"A",{href:!0});var tct=s(iG);Hxo=r(tct,"MarianMTModel"),tct.forEach(t),Uxo=r(h9e," (Marian model)"),h9e.forEach(t),Jxo=i(ve),N1=n(ve,"LI",{});var p9e=s(N1);qfe=n(p9e,"STRONG",{});var act=s(qfe);Yxo=r(act,"mbart"),act.forEach(t),Kxo=r(p9e," \u2014 "),dG=n(p9e,"A",{href:!0});var nct=s(dG);Zxo=r(nct,"MBartForConditionalGeneration"),nct.forEach(t),e$o=r(p9e," (mBART model)"),p9e.forEach(t),o$o=i(ve),q1=n(ve,"LI",{});var _9e=s(q1);jfe=n(_9e,"STRONG",{});var sct=s(jfe);r$o=r(sct,"mt5"),sct.forEach(t),t$o=r(_9e," \u2014 "),cG=n(_9e,"A",{href:!0});var lct=s(cG);a$o=r(lct,"MT5ForConditionalGeneration"),lct.forEach(t),n$o=r(_9e," (mT5 model)"),_9e.forEach(t),s$o=i(ve),j1=n(ve,"LI",{});var u9e=s(j1);Dfe=n(u9e,"STRONG",{});var ict=s(Dfe);l$o=r(ict,"pegasus"),ict.forEach(t),i$o=r(u9e," \u2014 "),fG=n(u9e,"A",{href:!0});var dct=s(fG);d$o=r(dct,"PegasusForConditionalGeneration"),dct.forEach(t),c$o=r(u9e," (Pegasus model)"),u9e.forEach(t),f$o=i(ve),D1=n(ve,"LI",{});var b9e=s(D1);Gfe=n(b9e,"STRONG",{});var cct=s(Gfe);m$o=r(cct,"plbart"),cct.forEach(t),g$o=r(b9e," \u2014 "),mG=n(b9e,"A",{href:!0});var fct=s(mG);h$o=r(fct,"PLBartForConditionalGeneration"),fct.forEach(t),p$o=r(b9e," (PLBart model)"),b9e.forEach(t),_$o=i(ve),G1=n(ve,"LI",{});var v9e=s(G1);Ofe=n(v9e,"STRONG",{});var mct=s(Ofe);u$o=r(mct,"prophetnet"),mct.forEach(t),b$o=r(v9e," \u2014 "),gG=n(v9e,"A",{href:!0});var gct=s(gG);v$o=r(gct,"ProphetNetForConditionalGeneration"),gct.forEach(t),F$o=r(v9e," (ProphetNet model)"),v9e.forEach(t),T$o=i(ve),O1=n(ve,"LI",{});var F9e=s(O1);Vfe=n(F9e,"STRONG",{});var hct=s(Vfe);M$o=r(hct,"t5"),hct.forEach(t),E$o=r(F9e," \u2014 "),hG=n(F9e,"A",{href:!0});var pct=s(hG);C$o=r(pct,"T5ForConditionalGeneration"),pct.forEach(t),w$o=r(F9e," (T5 model)"),F9e.forEach(t),A$o=i(ve),V1=n(ve,"LI",{});var T9e=s(V1);Xfe=n(T9e,"STRONG",{});var _ct=s(Xfe);y$o=r(_ct,"xlm-prophetnet"),_ct.forEach(t),L$o=r(T9e," \u2014 "),pG=n(T9e,"A",{href:!0});var uct=s(pG);x$o=r(uct,"XLMProphetNetForConditionalGeneration"),uct.forEach(t),$$o=r(T9e," (XLMProphetNet model)"),T9e.forEach(t),ve.forEach(t),k$o=i(na),X1=n(na,"P",{});var M9e=s(X1);S$o=r(M9e,"The model is set in evaluation mode by default using "),zfe=n(M9e,"CODE",{});var bct=s(zfe);R$o=r(bct,"model.eval()"),bct.forEach(t),P$o=r(M9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wfe=n(M9e,"CODE",{});var vct=s(Wfe);B$o=r(vct,"model.train()"),vct.forEach(t),M9e.forEach(t),I$o=i(na),T(z1.$$.fragment,na),na.forEach(t),zs.forEach(t),Gqe=i(f),Di=n(f,"H2",{class:!0});var zDe=s(Di);W1=n(zDe,"A",{id:!0,class:!0,href:!0});var Fct=s(W1);Qfe=n(Fct,"SPAN",{});var Tct=s(Qfe);T(xy.$$.fragment,Tct),Tct.forEach(t),Fct.forEach(t),N$o=i(zDe),Hfe=n(zDe,"SPAN",{});var Mct=s(Hfe);q$o=r(Mct,"AutoModelForSequenceClassification"),Mct.forEach(t),zDe.forEach(t),Oqe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T($y.$$.fragment,Ws),j$o=i(Ws),Gi=n(Ws,"P",{});var BZ=s(Gi);D$o=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_G=n(BZ,"A",{href:!0});var Ect=s(_G);G$o=r(Ect,"from_pretrained()"),Ect.forEach(t),O$o=r(BZ," class method or the "),uG=n(BZ,"A",{href:!0});var Cct=s(uG);V$o=r(Cct,"from_config()"),Cct.forEach(t),X$o=r(BZ,` class
method.`),BZ.forEach(t),z$o=i(Ws),ky=n(Ws,"P",{});var WDe=s(ky);W$o=r(WDe,"This class cannot be instantiated directly using "),Ufe=n(WDe,"CODE",{});var wct=s(Ufe);Q$o=r(wct,"__init__()"),wct.forEach(t),H$o=r(WDe," (throws an error)."),WDe.forEach(t),U$o=i(Ws),it=n(Ws,"DIV",{class:!0});var Ww=s(it);T(Sy.$$.fragment,Ww),J$o=i(Ww),Jfe=n(Ww,"P",{});var Act=s(Jfe);Y$o=r(Act,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Act.forEach(t),K$o=i(Ww),Oi=n(Ww,"P",{});var IZ=s(Oi);Z$o=r(IZ,`Note:
Loading a model from its configuration file does `),Yfe=n(IZ,"STRONG",{});var yct=s(Yfe);eko=r(yct,"not"),yct.forEach(t),oko=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=n(IZ,"A",{href:!0});var Lct=s(bG);rko=r(Lct,"from_pretrained()"),Lct.forEach(t),tko=r(IZ," to load the model weights."),IZ.forEach(t),ako=i(Ww),T(Q1.$$.fragment,Ww),Ww.forEach(t),nko=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(Ry.$$.fragment,sa),sko=i(sa),Kfe=n(sa,"P",{});var xct=s(Kfe);lko=r(xct,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),xct.forEach(t),iko=i(sa),Ra=n(sa,"P",{});var Qw=s(Ra);dko=r(Qw,"The model class to instantiate is selected based on the "),Zfe=n(Qw,"CODE",{});var $ct=s(Zfe);cko=r($ct,"model_type"),$ct.forEach(t),fko=r(Qw,` property of the config object (either
passed as an argument or loaded from `),eme=n(Qw,"CODE",{});var kct=s(eme);mko=r(kct,"pretrained_model_name_or_path"),kct.forEach(t),gko=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=n(Qw,"CODE",{});var Sct=s(ome);hko=r(Sct,"pretrained_model_name_or_path"),Sct.forEach(t),pko=r(Qw,":"),Qw.forEach(t),_ko=i(sa),N=n(sa,"UL",{});var j=s(N);H1=n(j,"LI",{});var E9e=s(H1);rme=n(E9e,"STRONG",{});var Rct=s(rme);uko=r(Rct,"albert"),Rct.forEach(t),bko=r(E9e," \u2014 "),vG=n(E9e,"A",{href:!0});var Pct=s(vG);vko=r(Pct,"AlbertForSequenceClassification"),Pct.forEach(t),Fko=r(E9e," (ALBERT model)"),E9e.forEach(t),Tko=i(j),U1=n(j,"LI",{});var C9e=s(U1);tme=n(C9e,"STRONG",{});var Bct=s(tme);Mko=r(Bct,"bart"),Bct.forEach(t),Eko=r(C9e," \u2014 "),FG=n(C9e,"A",{href:!0});var Ict=s(FG);Cko=r(Ict,"BartForSequenceClassification"),Ict.forEach(t),wko=r(C9e," (BART model)"),C9e.forEach(t),Ako=i(j),J1=n(j,"LI",{});var w9e=s(J1);ame=n(w9e,"STRONG",{});var Nct=s(ame);yko=r(Nct,"bert"),Nct.forEach(t),Lko=r(w9e," \u2014 "),TG=n(w9e,"A",{href:!0});var qct=s(TG);xko=r(qct,"BertForSequenceClassification"),qct.forEach(t),$ko=r(w9e," (BERT model)"),w9e.forEach(t),kko=i(j),Y1=n(j,"LI",{});var A9e=s(Y1);nme=n(A9e,"STRONG",{});var jct=s(nme);Sko=r(jct,"big_bird"),jct.forEach(t),Rko=r(A9e," \u2014 "),MG=n(A9e,"A",{href:!0});var Dct=s(MG);Pko=r(Dct,"BigBirdForSequenceClassification"),Dct.forEach(t),Bko=r(A9e," (BigBird model)"),A9e.forEach(t),Iko=i(j),K1=n(j,"LI",{});var y9e=s(K1);sme=n(y9e,"STRONG",{});var Gct=s(sme);Nko=r(Gct,"bigbird_pegasus"),Gct.forEach(t),qko=r(y9e," \u2014 "),EG=n(y9e,"A",{href:!0});var Oct=s(EG);jko=r(Oct,"BigBirdPegasusForSequenceClassification"),Oct.forEach(t),Dko=r(y9e," (BigBirdPegasus model)"),y9e.forEach(t),Gko=i(j),Z1=n(j,"LI",{});var L9e=s(Z1);lme=n(L9e,"STRONG",{});var Vct=s(lme);Oko=r(Vct,"camembert"),Vct.forEach(t),Vko=r(L9e," \u2014 "),CG=n(L9e,"A",{href:!0});var Xct=s(CG);Xko=r(Xct,"CamembertForSequenceClassification"),Xct.forEach(t),zko=r(L9e," (CamemBERT model)"),L9e.forEach(t),Wko=i(j),eb=n(j,"LI",{});var x9e=s(eb);ime=n(x9e,"STRONG",{});var zct=s(ime);Qko=r(zct,"canine"),zct.forEach(t),Hko=r(x9e," \u2014 "),wG=n(x9e,"A",{href:!0});var Wct=s(wG);Uko=r(Wct,"CanineForSequenceClassification"),Wct.forEach(t),Jko=r(x9e," (Canine model)"),x9e.forEach(t),Yko=i(j),ob=n(j,"LI",{});var $9e=s(ob);dme=n($9e,"STRONG",{});var Qct=s(dme);Kko=r(Qct,"convbert"),Qct.forEach(t),Zko=r($9e," \u2014 "),AG=n($9e,"A",{href:!0});var Hct=s(AG);eSo=r(Hct,"ConvBertForSequenceClassification"),Hct.forEach(t),oSo=r($9e," (ConvBERT model)"),$9e.forEach(t),rSo=i(j),rb=n(j,"LI",{});var k9e=s(rb);cme=n(k9e,"STRONG",{});var Uct=s(cme);tSo=r(Uct,"ctrl"),Uct.forEach(t),aSo=r(k9e," \u2014 "),yG=n(k9e,"A",{href:!0});var Jct=s(yG);nSo=r(Jct,"CTRLForSequenceClassification"),Jct.forEach(t),sSo=r(k9e," (CTRL model)"),k9e.forEach(t),lSo=i(j),tb=n(j,"LI",{});var S9e=s(tb);fme=n(S9e,"STRONG",{});var Yct=s(fme);iSo=r(Yct,"data2vec-text"),Yct.forEach(t),dSo=r(S9e," \u2014 "),LG=n(S9e,"A",{href:!0});var Kct=s(LG);cSo=r(Kct,"Data2VecTextForSequenceClassification"),Kct.forEach(t),fSo=r(S9e," (Data2VecText model)"),S9e.forEach(t),mSo=i(j),ab=n(j,"LI",{});var R9e=s(ab);mme=n(R9e,"STRONG",{});var Zct=s(mme);gSo=r(Zct,"deberta"),Zct.forEach(t),hSo=r(R9e," \u2014 "),xG=n(R9e,"A",{href:!0});var eft=s(xG);pSo=r(eft,"DebertaForSequenceClassification"),eft.forEach(t),_So=r(R9e," (DeBERTa model)"),R9e.forEach(t),uSo=i(j),nb=n(j,"LI",{});var P9e=s(nb);gme=n(P9e,"STRONG",{});var oft=s(gme);bSo=r(oft,"deberta-v2"),oft.forEach(t),vSo=r(P9e," \u2014 "),$G=n(P9e,"A",{href:!0});var rft=s($G);FSo=r(rft,"DebertaV2ForSequenceClassification"),rft.forEach(t),TSo=r(P9e," (DeBERTa-v2 model)"),P9e.forEach(t),MSo=i(j),sb=n(j,"LI",{});var B9e=s(sb);hme=n(B9e,"STRONG",{});var tft=s(hme);ESo=r(tft,"distilbert"),tft.forEach(t),CSo=r(B9e," \u2014 "),kG=n(B9e,"A",{href:!0});var aft=s(kG);wSo=r(aft,"DistilBertForSequenceClassification"),aft.forEach(t),ASo=r(B9e," (DistilBERT model)"),B9e.forEach(t),ySo=i(j),lb=n(j,"LI",{});var I9e=s(lb);pme=n(I9e,"STRONG",{});var nft=s(pme);LSo=r(nft,"electra"),nft.forEach(t),xSo=r(I9e," \u2014 "),SG=n(I9e,"A",{href:!0});var sft=s(SG);$So=r(sft,"ElectraForSequenceClassification"),sft.forEach(t),kSo=r(I9e," (ELECTRA model)"),I9e.forEach(t),SSo=i(j),ib=n(j,"LI",{});var N9e=s(ib);_me=n(N9e,"STRONG",{});var lft=s(_me);RSo=r(lft,"flaubert"),lft.forEach(t),PSo=r(N9e," \u2014 "),RG=n(N9e,"A",{href:!0});var ift=s(RG);BSo=r(ift,"FlaubertForSequenceClassification"),ift.forEach(t),ISo=r(N9e," (FlauBERT model)"),N9e.forEach(t),NSo=i(j),db=n(j,"LI",{});var q9e=s(db);ume=n(q9e,"STRONG",{});var dft=s(ume);qSo=r(dft,"fnet"),dft.forEach(t),jSo=r(q9e," \u2014 "),PG=n(q9e,"A",{href:!0});var cft=s(PG);DSo=r(cft,"FNetForSequenceClassification"),cft.forEach(t),GSo=r(q9e," (FNet model)"),q9e.forEach(t),OSo=i(j),cb=n(j,"LI",{});var j9e=s(cb);bme=n(j9e,"STRONG",{});var fft=s(bme);VSo=r(fft,"funnel"),fft.forEach(t),XSo=r(j9e," \u2014 "),BG=n(j9e,"A",{href:!0});var mft=s(BG);zSo=r(mft,"FunnelForSequenceClassification"),mft.forEach(t),WSo=r(j9e," (Funnel Transformer model)"),j9e.forEach(t),QSo=i(j),fb=n(j,"LI",{});var D9e=s(fb);vme=n(D9e,"STRONG",{});var gft=s(vme);HSo=r(gft,"gpt2"),gft.forEach(t),USo=r(D9e," \u2014 "),IG=n(D9e,"A",{href:!0});var hft=s(IG);JSo=r(hft,"GPT2ForSequenceClassification"),hft.forEach(t),YSo=r(D9e," (OpenAI GPT-2 model)"),D9e.forEach(t),KSo=i(j),mb=n(j,"LI",{});var G9e=s(mb);Fme=n(G9e,"STRONG",{});var pft=s(Fme);ZSo=r(pft,"gpt_neo"),pft.forEach(t),eRo=r(G9e," \u2014 "),NG=n(G9e,"A",{href:!0});var _ft=s(NG);oRo=r(_ft,"GPTNeoForSequenceClassification"),_ft.forEach(t),rRo=r(G9e," (GPT Neo model)"),G9e.forEach(t),tRo=i(j),gb=n(j,"LI",{});var O9e=s(gb);Tme=n(O9e,"STRONG",{});var uft=s(Tme);aRo=r(uft,"gptj"),uft.forEach(t),nRo=r(O9e," \u2014 "),qG=n(O9e,"A",{href:!0});var bft=s(qG);sRo=r(bft,"GPTJForSequenceClassification"),bft.forEach(t),lRo=r(O9e," (GPT-J model)"),O9e.forEach(t),iRo=i(j),hb=n(j,"LI",{});var V9e=s(hb);Mme=n(V9e,"STRONG",{});var vft=s(Mme);dRo=r(vft,"ibert"),vft.forEach(t),cRo=r(V9e," \u2014 "),jG=n(V9e,"A",{href:!0});var Fft=s(jG);fRo=r(Fft,"IBertForSequenceClassification"),Fft.forEach(t),mRo=r(V9e," (I-BERT model)"),V9e.forEach(t),gRo=i(j),pb=n(j,"LI",{});var X9e=s(pb);Eme=n(X9e,"STRONG",{});var Tft=s(Eme);hRo=r(Tft,"layoutlm"),Tft.forEach(t),pRo=r(X9e," \u2014 "),DG=n(X9e,"A",{href:!0});var Mft=s(DG);_Ro=r(Mft,"LayoutLMForSequenceClassification"),Mft.forEach(t),uRo=r(X9e," (LayoutLM model)"),X9e.forEach(t),bRo=i(j),_b=n(j,"LI",{});var z9e=s(_b);Cme=n(z9e,"STRONG",{});var Eft=s(Cme);vRo=r(Eft,"layoutlmv2"),Eft.forEach(t),FRo=r(z9e," \u2014 "),GG=n(z9e,"A",{href:!0});var Cft=s(GG);TRo=r(Cft,"LayoutLMv2ForSequenceClassification"),Cft.forEach(t),MRo=r(z9e," (LayoutLMv2 model)"),z9e.forEach(t),ERo=i(j),ub=n(j,"LI",{});var W9e=s(ub);wme=n(W9e,"STRONG",{});var wft=s(wme);CRo=r(wft,"layoutlmv3"),wft.forEach(t),wRo=r(W9e," \u2014 "),OG=n(W9e,"A",{href:!0});var Aft=s(OG);ARo=r(Aft,"LayoutLMv3ForSequenceClassification"),Aft.forEach(t),yRo=r(W9e," (LayoutLMv3 model)"),W9e.forEach(t),LRo=i(j),bb=n(j,"LI",{});var Q9e=s(bb);Ame=n(Q9e,"STRONG",{});var yft=s(Ame);xRo=r(yft,"led"),yft.forEach(t),$Ro=r(Q9e," \u2014 "),VG=n(Q9e,"A",{href:!0});var Lft=s(VG);kRo=r(Lft,"LEDForSequenceClassification"),Lft.forEach(t),SRo=r(Q9e," (LED model)"),Q9e.forEach(t),RRo=i(j),vb=n(j,"LI",{});var H9e=s(vb);yme=n(H9e,"STRONG",{});var xft=s(yme);PRo=r(xft,"longformer"),xft.forEach(t),BRo=r(H9e," \u2014 "),XG=n(H9e,"A",{href:!0});var $ft=s(XG);IRo=r($ft,"LongformerForSequenceClassification"),$ft.forEach(t),NRo=r(H9e," (Longformer model)"),H9e.forEach(t),qRo=i(j),Fb=n(j,"LI",{});var U9e=s(Fb);Lme=n(U9e,"STRONG",{});var kft=s(Lme);jRo=r(kft,"mbart"),kft.forEach(t),DRo=r(U9e," \u2014 "),zG=n(U9e,"A",{href:!0});var Sft=s(zG);GRo=r(Sft,"MBartForSequenceClassification"),Sft.forEach(t),ORo=r(U9e," (mBART model)"),U9e.forEach(t),VRo=i(j),Tb=n(j,"LI",{});var J9e=s(Tb);xme=n(J9e,"STRONG",{});var Rft=s(xme);XRo=r(Rft,"megatron-bert"),Rft.forEach(t),zRo=r(J9e," \u2014 "),WG=n(J9e,"A",{href:!0});var Pft=s(WG);WRo=r(Pft,"MegatronBertForSequenceClassification"),Pft.forEach(t),QRo=r(J9e," (MegatronBert model)"),J9e.forEach(t),HRo=i(j),Mb=n(j,"LI",{});var Y9e=s(Mb);$me=n(Y9e,"STRONG",{});var Bft=s($me);URo=r(Bft,"mobilebert"),Bft.forEach(t),JRo=r(Y9e," \u2014 "),QG=n(Y9e,"A",{href:!0});var Ift=s(QG);YRo=r(Ift,"MobileBertForSequenceClassification"),Ift.forEach(t),KRo=r(Y9e," (MobileBERT model)"),Y9e.forEach(t),ZRo=i(j),Eb=n(j,"LI",{});var K9e=s(Eb);kme=n(K9e,"STRONG",{});var Nft=s(kme);ePo=r(Nft,"mpnet"),Nft.forEach(t),oPo=r(K9e," \u2014 "),HG=n(K9e,"A",{href:!0});var qft=s(HG);rPo=r(qft,"MPNetForSequenceClassification"),qft.forEach(t),tPo=r(K9e," (MPNet model)"),K9e.forEach(t),aPo=i(j),Cb=n(j,"LI",{});var Z9e=s(Cb);Sme=n(Z9e,"STRONG",{});var jft=s(Sme);nPo=r(jft,"nystromformer"),jft.forEach(t),sPo=r(Z9e," \u2014 "),UG=n(Z9e,"A",{href:!0});var Dft=s(UG);lPo=r(Dft,"NystromformerForSequenceClassification"),Dft.forEach(t),iPo=r(Z9e," (Nystromformer model)"),Z9e.forEach(t),dPo=i(j),wb=n(j,"LI",{});var exe=s(wb);Rme=n(exe,"STRONG",{});var Gft=s(Rme);cPo=r(Gft,"openai-gpt"),Gft.forEach(t),fPo=r(exe," \u2014 "),JG=n(exe,"A",{href:!0});var Oft=s(JG);mPo=r(Oft,"OpenAIGPTForSequenceClassification"),Oft.forEach(t),gPo=r(exe," (OpenAI GPT model)"),exe.forEach(t),hPo=i(j),Ab=n(j,"LI",{});var oxe=s(Ab);Pme=n(oxe,"STRONG",{});var Vft=s(Pme);pPo=r(Vft,"perceiver"),Vft.forEach(t),_Po=r(oxe," \u2014 "),YG=n(oxe,"A",{href:!0});var Xft=s(YG);uPo=r(Xft,"PerceiverForSequenceClassification"),Xft.forEach(t),bPo=r(oxe," (Perceiver model)"),oxe.forEach(t),vPo=i(j),yb=n(j,"LI",{});var rxe=s(yb);Bme=n(rxe,"STRONG",{});var zft=s(Bme);FPo=r(zft,"plbart"),zft.forEach(t),TPo=r(rxe," \u2014 "),KG=n(rxe,"A",{href:!0});var Wft=s(KG);MPo=r(Wft,"PLBartForSequenceClassification"),Wft.forEach(t),EPo=r(rxe," (PLBart model)"),rxe.forEach(t),CPo=i(j),Lb=n(j,"LI",{});var txe=s(Lb);Ime=n(txe,"STRONG",{});var Qft=s(Ime);wPo=r(Qft,"qdqbert"),Qft.forEach(t),APo=r(txe," \u2014 "),ZG=n(txe,"A",{href:!0});var Hft=s(ZG);yPo=r(Hft,"QDQBertForSequenceClassification"),Hft.forEach(t),LPo=r(txe," (QDQBert model)"),txe.forEach(t),xPo=i(j),xb=n(j,"LI",{});var axe=s(xb);Nme=n(axe,"STRONG",{});var Uft=s(Nme);$Po=r(Uft,"reformer"),Uft.forEach(t),kPo=r(axe," \u2014 "),eO=n(axe,"A",{href:!0});var Jft=s(eO);SPo=r(Jft,"ReformerForSequenceClassification"),Jft.forEach(t),RPo=r(axe," (Reformer model)"),axe.forEach(t),PPo=i(j),$b=n(j,"LI",{});var nxe=s($b);qme=n(nxe,"STRONG",{});var Yft=s(qme);BPo=r(Yft,"rembert"),Yft.forEach(t),IPo=r(nxe," \u2014 "),oO=n(nxe,"A",{href:!0});var Kft=s(oO);NPo=r(Kft,"RemBertForSequenceClassification"),Kft.forEach(t),qPo=r(nxe," (RemBERT model)"),nxe.forEach(t),jPo=i(j),kb=n(j,"LI",{});var sxe=s(kb);jme=n(sxe,"STRONG",{});var Zft=s(jme);DPo=r(Zft,"roberta"),Zft.forEach(t),GPo=r(sxe," \u2014 "),rO=n(sxe,"A",{href:!0});var emt=s(rO);OPo=r(emt,"RobertaForSequenceClassification"),emt.forEach(t),VPo=r(sxe," (RoBERTa model)"),sxe.forEach(t),XPo=i(j),Sb=n(j,"LI",{});var lxe=s(Sb);Dme=n(lxe,"STRONG",{});var omt=s(Dme);zPo=r(omt,"roformer"),omt.forEach(t),WPo=r(lxe," \u2014 "),tO=n(lxe,"A",{href:!0});var rmt=s(tO);QPo=r(rmt,"RoFormerForSequenceClassification"),rmt.forEach(t),HPo=r(lxe," (RoFormer model)"),lxe.forEach(t),UPo=i(j),Rb=n(j,"LI",{});var ixe=s(Rb);Gme=n(ixe,"STRONG",{});var tmt=s(Gme);JPo=r(tmt,"squeezebert"),tmt.forEach(t),YPo=r(ixe," \u2014 "),aO=n(ixe,"A",{href:!0});var amt=s(aO);KPo=r(amt,"SqueezeBertForSequenceClassification"),amt.forEach(t),ZPo=r(ixe," (SqueezeBERT model)"),ixe.forEach(t),eBo=i(j),Pb=n(j,"LI",{});var dxe=s(Pb);Ome=n(dxe,"STRONG",{});var nmt=s(Ome);oBo=r(nmt,"tapas"),nmt.forEach(t),rBo=r(dxe," \u2014 "),nO=n(dxe,"A",{href:!0});var smt=s(nO);tBo=r(smt,"TapasForSequenceClassification"),smt.forEach(t),aBo=r(dxe," (TAPAS model)"),dxe.forEach(t),nBo=i(j),Bb=n(j,"LI",{});var cxe=s(Bb);Vme=n(cxe,"STRONG",{});var lmt=s(Vme);sBo=r(lmt,"transfo-xl"),lmt.forEach(t),lBo=r(cxe," \u2014 "),sO=n(cxe,"A",{href:!0});var imt=s(sO);iBo=r(imt,"TransfoXLForSequenceClassification"),imt.forEach(t),dBo=r(cxe," (Transformer-XL model)"),cxe.forEach(t),cBo=i(j),Ib=n(j,"LI",{});var fxe=s(Ib);Xme=n(fxe,"STRONG",{});var dmt=s(Xme);fBo=r(dmt,"xlm"),dmt.forEach(t),mBo=r(fxe," \u2014 "),lO=n(fxe,"A",{href:!0});var cmt=s(lO);gBo=r(cmt,"XLMForSequenceClassification"),cmt.forEach(t),hBo=r(fxe," (XLM model)"),fxe.forEach(t),pBo=i(j),Nb=n(j,"LI",{});var mxe=s(Nb);zme=n(mxe,"STRONG",{});var fmt=s(zme);_Bo=r(fmt,"xlm-roberta"),fmt.forEach(t),uBo=r(mxe," \u2014 "),iO=n(mxe,"A",{href:!0});var mmt=s(iO);bBo=r(mmt,"XLMRobertaForSequenceClassification"),mmt.forEach(t),vBo=r(mxe," (XLM-RoBERTa model)"),mxe.forEach(t),FBo=i(j),qb=n(j,"LI",{});var gxe=s(qb);Wme=n(gxe,"STRONG",{});var gmt=s(Wme);TBo=r(gmt,"xlm-roberta-xl"),gmt.forEach(t),MBo=r(gxe," \u2014 "),dO=n(gxe,"A",{href:!0});var hmt=s(dO);EBo=r(hmt,"XLMRobertaXLForSequenceClassification"),hmt.forEach(t),CBo=r(gxe," (XLM-RoBERTa-XL model)"),gxe.forEach(t),wBo=i(j),jb=n(j,"LI",{});var hxe=s(jb);Qme=n(hxe,"STRONG",{});var pmt=s(Qme);ABo=r(pmt,"xlnet"),pmt.forEach(t),yBo=r(hxe," \u2014 "),cO=n(hxe,"A",{href:!0});var _mt=s(cO);LBo=r(_mt,"XLNetForSequenceClassification"),_mt.forEach(t),xBo=r(hxe," (XLNet model)"),hxe.forEach(t),$Bo=i(j),Db=n(j,"LI",{});var pxe=s(Db);Hme=n(pxe,"STRONG",{});var umt=s(Hme);kBo=r(umt,"yoso"),umt.forEach(t),SBo=r(pxe," \u2014 "),fO=n(pxe,"A",{href:!0});var bmt=s(fO);RBo=r(bmt,"YosoForSequenceClassification"),bmt.forEach(t),PBo=r(pxe," (YOSO model)"),pxe.forEach(t),j.forEach(t),BBo=i(sa),Gb=n(sa,"P",{});var _xe=s(Gb);IBo=r(_xe,"The model is set in evaluation mode by default using "),Ume=n(_xe,"CODE",{});var vmt=s(Ume);NBo=r(vmt,"model.eval()"),vmt.forEach(t),qBo=r(_xe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jme=n(_xe,"CODE",{});var Fmt=s(Jme);jBo=r(Fmt,"model.train()"),Fmt.forEach(t),_xe.forEach(t),DBo=i(sa),T(Ob.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),Vqe=i(f),Vi=n(f,"H2",{class:!0});var QDe=s(Vi);Vb=n(QDe,"A",{id:!0,class:!0,href:!0});var Tmt=s(Vb);Yme=n(Tmt,"SPAN",{});var Mmt=s(Yme);T(Py.$$.fragment,Mmt),Mmt.forEach(t),Tmt.forEach(t),GBo=i(QDe),Kme=n(QDe,"SPAN",{});var Emt=s(Kme);OBo=r(Emt,"AutoModelForMultipleChoice"),Emt.forEach(t),QDe.forEach(t),Xqe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(By.$$.fragment,Qs),VBo=i(Qs),Xi=n(Qs,"P",{});var NZ=s(Xi);XBo=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mO=n(NZ,"A",{href:!0});var Cmt=s(mO);zBo=r(Cmt,"from_pretrained()"),Cmt.forEach(t),WBo=r(NZ," class method or the "),gO=n(NZ,"A",{href:!0});var wmt=s(gO);QBo=r(wmt,"from_config()"),wmt.forEach(t),HBo=r(NZ,` class
method.`),NZ.forEach(t),UBo=i(Qs),Iy=n(Qs,"P",{});var HDe=s(Iy);JBo=r(HDe,"This class cannot be instantiated directly using "),Zme=n(HDe,"CODE",{});var Amt=s(Zme);YBo=r(Amt,"__init__()"),Amt.forEach(t),KBo=r(HDe," (throws an error)."),HDe.forEach(t),ZBo=i(Qs),dt=n(Qs,"DIV",{class:!0});var Hw=s(dt);T(Ny.$$.fragment,Hw),eIo=i(Hw),ege=n(Hw,"P",{});var ymt=s(ege);oIo=r(ymt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ymt.forEach(t),rIo=i(Hw),zi=n(Hw,"P",{});var qZ=s(zi);tIo=r(qZ,`Note:
Loading a model from its configuration file does `),oge=n(qZ,"STRONG",{});var Lmt=s(oge);aIo=r(Lmt,"not"),Lmt.forEach(t),nIo=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=n(qZ,"A",{href:!0});var xmt=s(hO);sIo=r(xmt,"from_pretrained()"),xmt.forEach(t),lIo=r(qZ," to load the model weights."),qZ.forEach(t),iIo=i(Hw),T(Xb.$$.fragment,Hw),Hw.forEach(t),dIo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(qy.$$.fragment,la),cIo=i(la),rge=n(la,"P",{});var $mt=s(rge);fIo=r($mt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$mt.forEach(t),mIo=i(la),Pa=n(la,"P",{});var Uw=s(Pa);gIo=r(Uw,"The model class to instantiate is selected based on the "),tge=n(Uw,"CODE",{});var kmt=s(tge);hIo=r(kmt,"model_type"),kmt.forEach(t),pIo=r(Uw,` property of the config object (either
passed as an argument or loaded from `),age=n(Uw,"CODE",{});var Smt=s(age);_Io=r(Smt,"pretrained_model_name_or_path"),Smt.forEach(t),uIo=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nge=n(Uw,"CODE",{});var Rmt=s(nge);bIo=r(Rmt,"pretrained_model_name_or_path"),Rmt.forEach(t),vIo=r(Uw,":"),Uw.forEach(t),FIo=i(la),K=n(la,"UL",{});var ee=s(K);zb=n(ee,"LI",{});var uxe=s(zb);sge=n(uxe,"STRONG",{});var Pmt=s(sge);TIo=r(Pmt,"albert"),Pmt.forEach(t),MIo=r(uxe," \u2014 "),pO=n(uxe,"A",{href:!0});var Bmt=s(pO);EIo=r(Bmt,"AlbertForMultipleChoice"),Bmt.forEach(t),CIo=r(uxe," (ALBERT model)"),uxe.forEach(t),wIo=i(ee),Wb=n(ee,"LI",{});var bxe=s(Wb);lge=n(bxe,"STRONG",{});var Imt=s(lge);AIo=r(Imt,"bert"),Imt.forEach(t),yIo=r(bxe," \u2014 "),_O=n(bxe,"A",{href:!0});var Nmt=s(_O);LIo=r(Nmt,"BertForMultipleChoice"),Nmt.forEach(t),xIo=r(bxe," (BERT model)"),bxe.forEach(t),$Io=i(ee),Qb=n(ee,"LI",{});var vxe=s(Qb);ige=n(vxe,"STRONG",{});var qmt=s(ige);kIo=r(qmt,"big_bird"),qmt.forEach(t),SIo=r(vxe," \u2014 "),uO=n(vxe,"A",{href:!0});var jmt=s(uO);RIo=r(jmt,"BigBirdForMultipleChoice"),jmt.forEach(t),PIo=r(vxe," (BigBird model)"),vxe.forEach(t),BIo=i(ee),Hb=n(ee,"LI",{});var Fxe=s(Hb);dge=n(Fxe,"STRONG",{});var Dmt=s(dge);IIo=r(Dmt,"camembert"),Dmt.forEach(t),NIo=r(Fxe," \u2014 "),bO=n(Fxe,"A",{href:!0});var Gmt=s(bO);qIo=r(Gmt,"CamembertForMultipleChoice"),Gmt.forEach(t),jIo=r(Fxe," (CamemBERT model)"),Fxe.forEach(t),DIo=i(ee),Ub=n(ee,"LI",{});var Txe=s(Ub);cge=n(Txe,"STRONG",{});var Omt=s(cge);GIo=r(Omt,"canine"),Omt.forEach(t),OIo=r(Txe," \u2014 "),vO=n(Txe,"A",{href:!0});var Vmt=s(vO);VIo=r(Vmt,"CanineForMultipleChoice"),Vmt.forEach(t),XIo=r(Txe," (Canine model)"),Txe.forEach(t),zIo=i(ee),Jb=n(ee,"LI",{});var Mxe=s(Jb);fge=n(Mxe,"STRONG",{});var Xmt=s(fge);WIo=r(Xmt,"convbert"),Xmt.forEach(t),QIo=r(Mxe," \u2014 "),FO=n(Mxe,"A",{href:!0});var zmt=s(FO);HIo=r(zmt,"ConvBertForMultipleChoice"),zmt.forEach(t),UIo=r(Mxe," (ConvBERT model)"),Mxe.forEach(t),JIo=i(ee),Yb=n(ee,"LI",{});var Exe=s(Yb);mge=n(Exe,"STRONG",{});var Wmt=s(mge);YIo=r(Wmt,"data2vec-text"),Wmt.forEach(t),KIo=r(Exe," \u2014 "),TO=n(Exe,"A",{href:!0});var Qmt=s(TO);ZIo=r(Qmt,"Data2VecTextForMultipleChoice"),Qmt.forEach(t),eNo=r(Exe," (Data2VecText model)"),Exe.forEach(t),oNo=i(ee),Kb=n(ee,"LI",{});var Cxe=s(Kb);gge=n(Cxe,"STRONG",{});var Hmt=s(gge);rNo=r(Hmt,"deberta-v2"),Hmt.forEach(t),tNo=r(Cxe," \u2014 "),MO=n(Cxe,"A",{href:!0});var Umt=s(MO);aNo=r(Umt,"DebertaV2ForMultipleChoice"),Umt.forEach(t),nNo=r(Cxe," (DeBERTa-v2 model)"),Cxe.forEach(t),sNo=i(ee),Zb=n(ee,"LI",{});var wxe=s(Zb);hge=n(wxe,"STRONG",{});var Jmt=s(hge);lNo=r(Jmt,"distilbert"),Jmt.forEach(t),iNo=r(wxe," \u2014 "),EO=n(wxe,"A",{href:!0});var Ymt=s(EO);dNo=r(Ymt,"DistilBertForMultipleChoice"),Ymt.forEach(t),cNo=r(wxe," (DistilBERT model)"),wxe.forEach(t),fNo=i(ee),ev=n(ee,"LI",{});var Axe=s(ev);pge=n(Axe,"STRONG",{});var Kmt=s(pge);mNo=r(Kmt,"electra"),Kmt.forEach(t),gNo=r(Axe," \u2014 "),CO=n(Axe,"A",{href:!0});var Zmt=s(CO);hNo=r(Zmt,"ElectraForMultipleChoice"),Zmt.forEach(t),pNo=r(Axe," (ELECTRA model)"),Axe.forEach(t),_No=i(ee),ov=n(ee,"LI",{});var yxe=s(ov);_ge=n(yxe,"STRONG",{});var egt=s(_ge);uNo=r(egt,"flaubert"),egt.forEach(t),bNo=r(yxe," \u2014 "),wO=n(yxe,"A",{href:!0});var ogt=s(wO);vNo=r(ogt,"FlaubertForMultipleChoice"),ogt.forEach(t),FNo=r(yxe," (FlauBERT model)"),yxe.forEach(t),TNo=i(ee),rv=n(ee,"LI",{});var Lxe=s(rv);uge=n(Lxe,"STRONG",{});var rgt=s(uge);MNo=r(rgt,"fnet"),rgt.forEach(t),ENo=r(Lxe," \u2014 "),AO=n(Lxe,"A",{href:!0});var tgt=s(AO);CNo=r(tgt,"FNetForMultipleChoice"),tgt.forEach(t),wNo=r(Lxe," (FNet model)"),Lxe.forEach(t),ANo=i(ee),tv=n(ee,"LI",{});var xxe=s(tv);bge=n(xxe,"STRONG",{});var agt=s(bge);yNo=r(agt,"funnel"),agt.forEach(t),LNo=r(xxe," \u2014 "),yO=n(xxe,"A",{href:!0});var ngt=s(yO);xNo=r(ngt,"FunnelForMultipleChoice"),ngt.forEach(t),$No=r(xxe," (Funnel Transformer model)"),xxe.forEach(t),kNo=i(ee),av=n(ee,"LI",{});var $xe=s(av);vge=n($xe,"STRONG",{});var sgt=s(vge);SNo=r(sgt,"ibert"),sgt.forEach(t),RNo=r($xe," \u2014 "),LO=n($xe,"A",{href:!0});var lgt=s(LO);PNo=r(lgt,"IBertForMultipleChoice"),lgt.forEach(t),BNo=r($xe," (I-BERT model)"),$xe.forEach(t),INo=i(ee),nv=n(ee,"LI",{});var kxe=s(nv);Fge=n(kxe,"STRONG",{});var igt=s(Fge);NNo=r(igt,"longformer"),igt.forEach(t),qNo=r(kxe," \u2014 "),xO=n(kxe,"A",{href:!0});var dgt=s(xO);jNo=r(dgt,"LongformerForMultipleChoice"),dgt.forEach(t),DNo=r(kxe," (Longformer model)"),kxe.forEach(t),GNo=i(ee),sv=n(ee,"LI",{});var Sxe=s(sv);Tge=n(Sxe,"STRONG",{});var cgt=s(Tge);ONo=r(cgt,"megatron-bert"),cgt.forEach(t),VNo=r(Sxe," \u2014 "),$O=n(Sxe,"A",{href:!0});var fgt=s($O);XNo=r(fgt,"MegatronBertForMultipleChoice"),fgt.forEach(t),zNo=r(Sxe," (MegatronBert model)"),Sxe.forEach(t),WNo=i(ee),lv=n(ee,"LI",{});var Rxe=s(lv);Mge=n(Rxe,"STRONG",{});var mgt=s(Mge);QNo=r(mgt,"mobilebert"),mgt.forEach(t),HNo=r(Rxe," \u2014 "),kO=n(Rxe,"A",{href:!0});var ggt=s(kO);UNo=r(ggt,"MobileBertForMultipleChoice"),ggt.forEach(t),JNo=r(Rxe," (MobileBERT model)"),Rxe.forEach(t),YNo=i(ee),iv=n(ee,"LI",{});var Pxe=s(iv);Ege=n(Pxe,"STRONG",{});var hgt=s(Ege);KNo=r(hgt,"mpnet"),hgt.forEach(t),ZNo=r(Pxe," \u2014 "),SO=n(Pxe,"A",{href:!0});var pgt=s(SO);eqo=r(pgt,"MPNetForMultipleChoice"),pgt.forEach(t),oqo=r(Pxe," (MPNet model)"),Pxe.forEach(t),rqo=i(ee),dv=n(ee,"LI",{});var Bxe=s(dv);Cge=n(Bxe,"STRONG",{});var _gt=s(Cge);tqo=r(_gt,"nystromformer"),_gt.forEach(t),aqo=r(Bxe," \u2014 "),RO=n(Bxe,"A",{href:!0});var ugt=s(RO);nqo=r(ugt,"NystromformerForMultipleChoice"),ugt.forEach(t),sqo=r(Bxe," (Nystromformer model)"),Bxe.forEach(t),lqo=i(ee),cv=n(ee,"LI",{});var Ixe=s(cv);wge=n(Ixe,"STRONG",{});var bgt=s(wge);iqo=r(bgt,"qdqbert"),bgt.forEach(t),dqo=r(Ixe," \u2014 "),PO=n(Ixe,"A",{href:!0});var vgt=s(PO);cqo=r(vgt,"QDQBertForMultipleChoice"),vgt.forEach(t),fqo=r(Ixe," (QDQBert model)"),Ixe.forEach(t),mqo=i(ee),fv=n(ee,"LI",{});var Nxe=s(fv);Age=n(Nxe,"STRONG",{});var Fgt=s(Age);gqo=r(Fgt,"rembert"),Fgt.forEach(t),hqo=r(Nxe," \u2014 "),BO=n(Nxe,"A",{href:!0});var Tgt=s(BO);pqo=r(Tgt,"RemBertForMultipleChoice"),Tgt.forEach(t),_qo=r(Nxe," (RemBERT model)"),Nxe.forEach(t),uqo=i(ee),mv=n(ee,"LI",{});var qxe=s(mv);yge=n(qxe,"STRONG",{});var Mgt=s(yge);bqo=r(Mgt,"roberta"),Mgt.forEach(t),vqo=r(qxe," \u2014 "),IO=n(qxe,"A",{href:!0});var Egt=s(IO);Fqo=r(Egt,"RobertaForMultipleChoice"),Egt.forEach(t),Tqo=r(qxe," (RoBERTa model)"),qxe.forEach(t),Mqo=i(ee),gv=n(ee,"LI",{});var jxe=s(gv);Lge=n(jxe,"STRONG",{});var Cgt=s(Lge);Eqo=r(Cgt,"roformer"),Cgt.forEach(t),Cqo=r(jxe," \u2014 "),NO=n(jxe,"A",{href:!0});var wgt=s(NO);wqo=r(wgt,"RoFormerForMultipleChoice"),wgt.forEach(t),Aqo=r(jxe," (RoFormer model)"),jxe.forEach(t),yqo=i(ee),hv=n(ee,"LI",{});var Dxe=s(hv);xge=n(Dxe,"STRONG",{});var Agt=s(xge);Lqo=r(Agt,"squeezebert"),Agt.forEach(t),xqo=r(Dxe," \u2014 "),qO=n(Dxe,"A",{href:!0});var ygt=s(qO);$qo=r(ygt,"SqueezeBertForMultipleChoice"),ygt.forEach(t),kqo=r(Dxe," (SqueezeBERT model)"),Dxe.forEach(t),Sqo=i(ee),pv=n(ee,"LI",{});var Gxe=s(pv);$ge=n(Gxe,"STRONG",{});var Lgt=s($ge);Rqo=r(Lgt,"xlm"),Lgt.forEach(t),Pqo=r(Gxe," \u2014 "),jO=n(Gxe,"A",{href:!0});var xgt=s(jO);Bqo=r(xgt,"XLMForMultipleChoice"),xgt.forEach(t),Iqo=r(Gxe," (XLM model)"),Gxe.forEach(t),Nqo=i(ee),_v=n(ee,"LI",{});var Oxe=s(_v);kge=n(Oxe,"STRONG",{});var $gt=s(kge);qqo=r($gt,"xlm-roberta"),$gt.forEach(t),jqo=r(Oxe," \u2014 "),DO=n(Oxe,"A",{href:!0});var kgt=s(DO);Dqo=r(kgt,"XLMRobertaForMultipleChoice"),kgt.forEach(t),Gqo=r(Oxe," (XLM-RoBERTa model)"),Oxe.forEach(t),Oqo=i(ee),uv=n(ee,"LI",{});var Vxe=s(uv);Sge=n(Vxe,"STRONG",{});var Sgt=s(Sge);Vqo=r(Sgt,"xlm-roberta-xl"),Sgt.forEach(t),Xqo=r(Vxe," \u2014 "),GO=n(Vxe,"A",{href:!0});var Rgt=s(GO);zqo=r(Rgt,"XLMRobertaXLForMultipleChoice"),Rgt.forEach(t),Wqo=r(Vxe," (XLM-RoBERTa-XL model)"),Vxe.forEach(t),Qqo=i(ee),bv=n(ee,"LI",{});var Xxe=s(bv);Rge=n(Xxe,"STRONG",{});var Pgt=s(Rge);Hqo=r(Pgt,"xlnet"),Pgt.forEach(t),Uqo=r(Xxe," \u2014 "),OO=n(Xxe,"A",{href:!0});var Bgt=s(OO);Jqo=r(Bgt,"XLNetForMultipleChoice"),Bgt.forEach(t),Yqo=r(Xxe," (XLNet model)"),Xxe.forEach(t),Kqo=i(ee),vv=n(ee,"LI",{});var zxe=s(vv);Pge=n(zxe,"STRONG",{});var Igt=s(Pge);Zqo=r(Igt,"yoso"),Igt.forEach(t),ejo=r(zxe," \u2014 "),VO=n(zxe,"A",{href:!0});var Ngt=s(VO);ojo=r(Ngt,"YosoForMultipleChoice"),Ngt.forEach(t),rjo=r(zxe," (YOSO model)"),zxe.forEach(t),ee.forEach(t),tjo=i(la),Fv=n(la,"P",{});var Wxe=s(Fv);ajo=r(Wxe,"The model is set in evaluation mode by default using "),Bge=n(Wxe,"CODE",{});var qgt=s(Bge);njo=r(qgt,"model.eval()"),qgt.forEach(t),sjo=r(Wxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ige=n(Wxe,"CODE",{});var jgt=s(Ige);ljo=r(jgt,"model.train()"),jgt.forEach(t),Wxe.forEach(t),ijo=i(la),T(Tv.$$.fragment,la),la.forEach(t),Qs.forEach(t),zqe=i(f),Wi=n(f,"H2",{class:!0});var UDe=s(Wi);Mv=n(UDe,"A",{id:!0,class:!0,href:!0});var Dgt=s(Mv);Nge=n(Dgt,"SPAN",{});var Ggt=s(Nge);T(jy.$$.fragment,Ggt),Ggt.forEach(t),Dgt.forEach(t),djo=i(UDe),qge=n(UDe,"SPAN",{});var Ogt=s(qge);cjo=r(Ogt,"AutoModelForNextSentencePrediction"),Ogt.forEach(t),UDe.forEach(t),Wqe=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(Dy.$$.fragment,Hs),fjo=i(Hs),Qi=n(Hs,"P",{});var jZ=s(Qi);mjo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XO=n(jZ,"A",{href:!0});var Vgt=s(XO);gjo=r(Vgt,"from_pretrained()"),Vgt.forEach(t),hjo=r(jZ," class method or the "),zO=n(jZ,"A",{href:!0});var Xgt=s(zO);pjo=r(Xgt,"from_config()"),Xgt.forEach(t),_jo=r(jZ,` class
method.`),jZ.forEach(t),ujo=i(Hs),Gy=n(Hs,"P",{});var JDe=s(Gy);bjo=r(JDe,"This class cannot be instantiated directly using "),jge=n(JDe,"CODE",{});var zgt=s(jge);vjo=r(zgt,"__init__()"),zgt.forEach(t),Fjo=r(JDe," (throws an error)."),JDe.forEach(t),Tjo=i(Hs),ct=n(Hs,"DIV",{class:!0});var Jw=s(ct);T(Oy.$$.fragment,Jw),Mjo=i(Jw),Dge=n(Jw,"P",{});var Wgt=s(Dge);Ejo=r(Wgt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Wgt.forEach(t),Cjo=i(Jw),Hi=n(Jw,"P",{});var DZ=s(Hi);wjo=r(DZ,`Note:
Loading a model from its configuration file does `),Gge=n(DZ,"STRONG",{});var Qgt=s(Gge);Ajo=r(Qgt,"not"),Qgt.forEach(t),yjo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=n(DZ,"A",{href:!0});var Hgt=s(WO);Ljo=r(Hgt,"from_pretrained()"),Hgt.forEach(t),xjo=r(DZ," to load the model weights."),DZ.forEach(t),$jo=i(Jw),T(Ev.$$.fragment,Jw),Jw.forEach(t),kjo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(Vy.$$.fragment,ia),Sjo=i(ia),Oge=n(ia,"P",{});var Ugt=s(Oge);Rjo=r(Ugt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ugt.forEach(t),Pjo=i(ia),Ba=n(ia,"P",{});var Yw=s(Ba);Bjo=r(Yw,"The model class to instantiate is selected based on the "),Vge=n(Yw,"CODE",{});var Jgt=s(Vge);Ijo=r(Jgt,"model_type"),Jgt.forEach(t),Njo=r(Yw,` property of the config object (either
passed as an argument or loaded from `),Xge=n(Yw,"CODE",{});var Ygt=s(Xge);qjo=r(Ygt,"pretrained_model_name_or_path"),Ygt.forEach(t),jjo=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zge=n(Yw,"CODE",{});var Kgt=s(zge);Djo=r(Kgt,"pretrained_model_name_or_path"),Kgt.forEach(t),Gjo=r(Yw,":"),Yw.forEach(t),Ojo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);Cv=n(Us,"LI",{});var Qxe=s(Cv);Wge=n(Qxe,"STRONG",{});var Zgt=s(Wge);Vjo=r(Zgt,"bert"),Zgt.forEach(t),Xjo=r(Qxe," \u2014 "),QO=n(Qxe,"A",{href:!0});var eht=s(QO);zjo=r(eht,"BertForNextSentencePrediction"),eht.forEach(t),Wjo=r(Qxe," (BERT model)"),Qxe.forEach(t),Qjo=i(Us),wv=n(Us,"LI",{});var Hxe=s(wv);Qge=n(Hxe,"STRONG",{});var oht=s(Qge);Hjo=r(oht,"fnet"),oht.forEach(t),Ujo=r(Hxe," \u2014 "),HO=n(Hxe,"A",{href:!0});var rht=s(HO);Jjo=r(rht,"FNetForNextSentencePrediction"),rht.forEach(t),Yjo=r(Hxe," (FNet model)"),Hxe.forEach(t),Kjo=i(Us),Av=n(Us,"LI",{});var Uxe=s(Av);Hge=n(Uxe,"STRONG",{});var tht=s(Hge);Zjo=r(tht,"megatron-bert"),tht.forEach(t),eDo=r(Uxe," \u2014 "),UO=n(Uxe,"A",{href:!0});var aht=s(UO);oDo=r(aht,"MegatronBertForNextSentencePrediction"),aht.forEach(t),rDo=r(Uxe," (MegatronBert model)"),Uxe.forEach(t),tDo=i(Us),yv=n(Us,"LI",{});var Jxe=s(yv);Uge=n(Jxe,"STRONG",{});var nht=s(Uge);aDo=r(nht,"mobilebert"),nht.forEach(t),nDo=r(Jxe," \u2014 "),JO=n(Jxe,"A",{href:!0});var sht=s(JO);sDo=r(sht,"MobileBertForNextSentencePrediction"),sht.forEach(t),lDo=r(Jxe," (MobileBERT model)"),Jxe.forEach(t),iDo=i(Us),Lv=n(Us,"LI",{});var Yxe=s(Lv);Jge=n(Yxe,"STRONG",{});var lht=s(Jge);dDo=r(lht,"qdqbert"),lht.forEach(t),cDo=r(Yxe," \u2014 "),YO=n(Yxe,"A",{href:!0});var iht=s(YO);fDo=r(iht,"QDQBertForNextSentencePrediction"),iht.forEach(t),mDo=r(Yxe," (QDQBert model)"),Yxe.forEach(t),Us.forEach(t),gDo=i(ia),xv=n(ia,"P",{});var Kxe=s(xv);hDo=r(Kxe,"The model is set in evaluation mode by default using "),Yge=n(Kxe,"CODE",{});var dht=s(Yge);pDo=r(dht,"model.eval()"),dht.forEach(t),_Do=r(Kxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=n(Kxe,"CODE",{});var cht=s(Kge);uDo=r(cht,"model.train()"),cht.forEach(t),Kxe.forEach(t),bDo=i(ia),T($v.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),Qqe=i(f),Ui=n(f,"H2",{class:!0});var YDe=s(Ui);kv=n(YDe,"A",{id:!0,class:!0,href:!0});var fht=s(kv);Zge=n(fht,"SPAN",{});var mht=s(Zge);T(Xy.$$.fragment,mht),mht.forEach(t),fht.forEach(t),vDo=i(YDe),ehe=n(YDe,"SPAN",{});var ght=s(ehe);FDo=r(ght,"AutoModelForTokenClassification"),ght.forEach(t),YDe.forEach(t),Hqe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(zy.$$.fragment,Js),TDo=i(Js),Ji=n(Js,"P",{});var GZ=s(Ji);MDo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),KO=n(GZ,"A",{href:!0});var hht=s(KO);EDo=r(hht,"from_pretrained()"),hht.forEach(t),CDo=r(GZ," class method or the "),ZO=n(GZ,"A",{href:!0});var pht=s(ZO);wDo=r(pht,"from_config()"),pht.forEach(t),ADo=r(GZ,` class
method.`),GZ.forEach(t),yDo=i(Js),Wy=n(Js,"P",{});var KDe=s(Wy);LDo=r(KDe,"This class cannot be instantiated directly using "),ohe=n(KDe,"CODE",{});var _ht=s(ohe);xDo=r(_ht,"__init__()"),_ht.forEach(t),$Do=r(KDe," (throws an error)."),KDe.forEach(t),kDo=i(Js),ft=n(Js,"DIV",{class:!0});var Kw=s(ft);T(Qy.$$.fragment,Kw),SDo=i(Kw),rhe=n(Kw,"P",{});var uht=s(rhe);RDo=r(uht,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uht.forEach(t),PDo=i(Kw),Yi=n(Kw,"P",{});var OZ=s(Yi);BDo=r(OZ,`Note:
Loading a model from its configuration file does `),the=n(OZ,"STRONG",{});var bht=s(the);IDo=r(bht,"not"),bht.forEach(t),NDo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eV=n(OZ,"A",{href:!0});var vht=s(eV);qDo=r(vht,"from_pretrained()"),vht.forEach(t),jDo=r(OZ," to load the model weights."),OZ.forEach(t),DDo=i(Kw),T(Sv.$$.fragment,Kw),Kw.forEach(t),GDo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(Hy.$$.fragment,da),ODo=i(da),ahe=n(da,"P",{});var Fht=s(ahe);VDo=r(Fht,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Fht.forEach(t),XDo=i(da),Ia=n(da,"P",{});var Zw=s(Ia);zDo=r(Zw,"The model class to instantiate is selected based on the "),nhe=n(Zw,"CODE",{});var Tht=s(nhe);WDo=r(Tht,"model_type"),Tht.forEach(t),QDo=r(Zw,` property of the config object (either
passed as an argument or loaded from `),she=n(Zw,"CODE",{});var Mht=s(she);HDo=r(Mht,"pretrained_model_name_or_path"),Mht.forEach(t),UDo=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lhe=n(Zw,"CODE",{});var Eht=s(lhe);JDo=r(Eht,"pretrained_model_name_or_path"),Eht.forEach(t),YDo=r(Zw,":"),Zw.forEach(t),KDo=i(da),H=n(da,"UL",{});var J=s(H);Rv=n(J,"LI",{});var Zxe=s(Rv);ihe=n(Zxe,"STRONG",{});var Cht=s(ihe);ZDo=r(Cht,"albert"),Cht.forEach(t),eGo=r(Zxe," \u2014 "),oV=n(Zxe,"A",{href:!0});var wht=s(oV);oGo=r(wht,"AlbertForTokenClassification"),wht.forEach(t),rGo=r(Zxe," (ALBERT model)"),Zxe.forEach(t),tGo=i(J),Pv=n(J,"LI",{});var e$e=s(Pv);dhe=n(e$e,"STRONG",{});var Aht=s(dhe);aGo=r(Aht,"bert"),Aht.forEach(t),nGo=r(e$e," \u2014 "),rV=n(e$e,"A",{href:!0});var yht=s(rV);sGo=r(yht,"BertForTokenClassification"),yht.forEach(t),lGo=r(e$e," (BERT model)"),e$e.forEach(t),iGo=i(J),Bv=n(J,"LI",{});var o$e=s(Bv);che=n(o$e,"STRONG",{});var Lht=s(che);dGo=r(Lht,"big_bird"),Lht.forEach(t),cGo=r(o$e," \u2014 "),tV=n(o$e,"A",{href:!0});var xht=s(tV);fGo=r(xht,"BigBirdForTokenClassification"),xht.forEach(t),mGo=r(o$e," (BigBird model)"),o$e.forEach(t),gGo=i(J),Iv=n(J,"LI",{});var r$e=s(Iv);fhe=n(r$e,"STRONG",{});var $ht=s(fhe);hGo=r($ht,"camembert"),$ht.forEach(t),pGo=r(r$e," \u2014 "),aV=n(r$e,"A",{href:!0});var kht=s(aV);_Go=r(kht,"CamembertForTokenClassification"),kht.forEach(t),uGo=r(r$e," (CamemBERT model)"),r$e.forEach(t),bGo=i(J),Nv=n(J,"LI",{});var t$e=s(Nv);mhe=n(t$e,"STRONG",{});var Sht=s(mhe);vGo=r(Sht,"canine"),Sht.forEach(t),FGo=r(t$e," \u2014 "),nV=n(t$e,"A",{href:!0});var Rht=s(nV);TGo=r(Rht,"CanineForTokenClassification"),Rht.forEach(t),MGo=r(t$e," (Canine model)"),t$e.forEach(t),EGo=i(J),qv=n(J,"LI",{});var a$e=s(qv);ghe=n(a$e,"STRONG",{});var Pht=s(ghe);CGo=r(Pht,"convbert"),Pht.forEach(t),wGo=r(a$e," \u2014 "),sV=n(a$e,"A",{href:!0});var Bht=s(sV);AGo=r(Bht,"ConvBertForTokenClassification"),Bht.forEach(t),yGo=r(a$e," (ConvBERT model)"),a$e.forEach(t),LGo=i(J),jv=n(J,"LI",{});var n$e=s(jv);hhe=n(n$e,"STRONG",{});var Iht=s(hhe);xGo=r(Iht,"data2vec-text"),Iht.forEach(t),$Go=r(n$e," \u2014 "),lV=n(n$e,"A",{href:!0});var Nht=s(lV);kGo=r(Nht,"Data2VecTextForTokenClassification"),Nht.forEach(t),SGo=r(n$e," (Data2VecText model)"),n$e.forEach(t),RGo=i(J),Dv=n(J,"LI",{});var s$e=s(Dv);phe=n(s$e,"STRONG",{});var qht=s(phe);PGo=r(qht,"deberta"),qht.forEach(t),BGo=r(s$e," \u2014 "),iV=n(s$e,"A",{href:!0});var jht=s(iV);IGo=r(jht,"DebertaForTokenClassification"),jht.forEach(t),NGo=r(s$e," (DeBERTa model)"),s$e.forEach(t),qGo=i(J),Gv=n(J,"LI",{});var l$e=s(Gv);_he=n(l$e,"STRONG",{});var Dht=s(_he);jGo=r(Dht,"deberta-v2"),Dht.forEach(t),DGo=r(l$e," \u2014 "),dV=n(l$e,"A",{href:!0});var Ght=s(dV);GGo=r(Ght,"DebertaV2ForTokenClassification"),Ght.forEach(t),OGo=r(l$e," (DeBERTa-v2 model)"),l$e.forEach(t),VGo=i(J),Ov=n(J,"LI",{});var i$e=s(Ov);uhe=n(i$e,"STRONG",{});var Oht=s(uhe);XGo=r(Oht,"distilbert"),Oht.forEach(t),zGo=r(i$e," \u2014 "),cV=n(i$e,"A",{href:!0});var Vht=s(cV);WGo=r(Vht,"DistilBertForTokenClassification"),Vht.forEach(t),QGo=r(i$e," (DistilBERT model)"),i$e.forEach(t),HGo=i(J),Vv=n(J,"LI",{});var d$e=s(Vv);bhe=n(d$e,"STRONG",{});var Xht=s(bhe);UGo=r(Xht,"electra"),Xht.forEach(t),JGo=r(d$e," \u2014 "),fV=n(d$e,"A",{href:!0});var zht=s(fV);YGo=r(zht,"ElectraForTokenClassification"),zht.forEach(t),KGo=r(d$e," (ELECTRA model)"),d$e.forEach(t),ZGo=i(J),Xv=n(J,"LI",{});var c$e=s(Xv);vhe=n(c$e,"STRONG",{});var Wht=s(vhe);eOo=r(Wht,"flaubert"),Wht.forEach(t),oOo=r(c$e," \u2014 "),mV=n(c$e,"A",{href:!0});var Qht=s(mV);rOo=r(Qht,"FlaubertForTokenClassification"),Qht.forEach(t),tOo=r(c$e," (FlauBERT model)"),c$e.forEach(t),aOo=i(J),zv=n(J,"LI",{});var f$e=s(zv);Fhe=n(f$e,"STRONG",{});var Hht=s(Fhe);nOo=r(Hht,"fnet"),Hht.forEach(t),sOo=r(f$e," \u2014 "),gV=n(f$e,"A",{href:!0});var Uht=s(gV);lOo=r(Uht,"FNetForTokenClassification"),Uht.forEach(t),iOo=r(f$e," (FNet model)"),f$e.forEach(t),dOo=i(J),Wv=n(J,"LI",{});var m$e=s(Wv);The=n(m$e,"STRONG",{});var Jht=s(The);cOo=r(Jht,"funnel"),Jht.forEach(t),fOo=r(m$e," \u2014 "),hV=n(m$e,"A",{href:!0});var Yht=s(hV);mOo=r(Yht,"FunnelForTokenClassification"),Yht.forEach(t),gOo=r(m$e," (Funnel Transformer model)"),m$e.forEach(t),hOo=i(J),Qv=n(J,"LI",{});var g$e=s(Qv);Mhe=n(g$e,"STRONG",{});var Kht=s(Mhe);pOo=r(Kht,"gpt2"),Kht.forEach(t),_Oo=r(g$e," \u2014 "),pV=n(g$e,"A",{href:!0});var Zht=s(pV);uOo=r(Zht,"GPT2ForTokenClassification"),Zht.forEach(t),bOo=r(g$e," (OpenAI GPT-2 model)"),g$e.forEach(t),vOo=i(J),Hv=n(J,"LI",{});var h$e=s(Hv);Ehe=n(h$e,"STRONG",{});var ept=s(Ehe);FOo=r(ept,"ibert"),ept.forEach(t),TOo=r(h$e," \u2014 "),_V=n(h$e,"A",{href:!0});var opt=s(_V);MOo=r(opt,"IBertForTokenClassification"),opt.forEach(t),EOo=r(h$e," (I-BERT model)"),h$e.forEach(t),COo=i(J),Uv=n(J,"LI",{});var p$e=s(Uv);Che=n(p$e,"STRONG",{});var rpt=s(Che);wOo=r(rpt,"layoutlm"),rpt.forEach(t),AOo=r(p$e," \u2014 "),uV=n(p$e,"A",{href:!0});var tpt=s(uV);yOo=r(tpt,"LayoutLMForTokenClassification"),tpt.forEach(t),LOo=r(p$e," (LayoutLM model)"),p$e.forEach(t),xOo=i(J),Jv=n(J,"LI",{});var _$e=s(Jv);whe=n(_$e,"STRONG",{});var apt=s(whe);$Oo=r(apt,"layoutlmv2"),apt.forEach(t),kOo=r(_$e," \u2014 "),bV=n(_$e,"A",{href:!0});var npt=s(bV);SOo=r(npt,"LayoutLMv2ForTokenClassification"),npt.forEach(t),ROo=r(_$e," (LayoutLMv2 model)"),_$e.forEach(t),POo=i(J),Yv=n(J,"LI",{});var u$e=s(Yv);Ahe=n(u$e,"STRONG",{});var spt=s(Ahe);BOo=r(spt,"layoutlmv3"),spt.forEach(t),IOo=r(u$e," \u2014 "),vV=n(u$e,"A",{href:!0});var lpt=s(vV);NOo=r(lpt,"LayoutLMv3ForTokenClassification"),lpt.forEach(t),qOo=r(u$e," (LayoutLMv3 model)"),u$e.forEach(t),jOo=i(J),Kv=n(J,"LI",{});var b$e=s(Kv);yhe=n(b$e,"STRONG",{});var ipt=s(yhe);DOo=r(ipt,"longformer"),ipt.forEach(t),GOo=r(b$e," \u2014 "),FV=n(b$e,"A",{href:!0});var dpt=s(FV);OOo=r(dpt,"LongformerForTokenClassification"),dpt.forEach(t),VOo=r(b$e," (Longformer model)"),b$e.forEach(t),XOo=i(J),Zv=n(J,"LI",{});var v$e=s(Zv);Lhe=n(v$e,"STRONG",{});var cpt=s(Lhe);zOo=r(cpt,"megatron-bert"),cpt.forEach(t),WOo=r(v$e," \u2014 "),TV=n(v$e,"A",{href:!0});var fpt=s(TV);QOo=r(fpt,"MegatronBertForTokenClassification"),fpt.forEach(t),HOo=r(v$e," (MegatronBert model)"),v$e.forEach(t),UOo=i(J),e0=n(J,"LI",{});var F$e=s(e0);xhe=n(F$e,"STRONG",{});var mpt=s(xhe);JOo=r(mpt,"mobilebert"),mpt.forEach(t),YOo=r(F$e," \u2014 "),MV=n(F$e,"A",{href:!0});var gpt=s(MV);KOo=r(gpt,"MobileBertForTokenClassification"),gpt.forEach(t),ZOo=r(F$e," (MobileBERT model)"),F$e.forEach(t),eVo=i(J),o0=n(J,"LI",{});var T$e=s(o0);$he=n(T$e,"STRONG",{});var hpt=s($he);oVo=r(hpt,"mpnet"),hpt.forEach(t),rVo=r(T$e," \u2014 "),EV=n(T$e,"A",{href:!0});var ppt=s(EV);tVo=r(ppt,"MPNetForTokenClassification"),ppt.forEach(t),aVo=r(T$e," (MPNet model)"),T$e.forEach(t),nVo=i(J),r0=n(J,"LI",{});var M$e=s(r0);khe=n(M$e,"STRONG",{});var _pt=s(khe);sVo=r(_pt,"nystromformer"),_pt.forEach(t),lVo=r(M$e," \u2014 "),CV=n(M$e,"A",{href:!0});var upt=s(CV);iVo=r(upt,"NystromformerForTokenClassification"),upt.forEach(t),dVo=r(M$e," (Nystromformer model)"),M$e.forEach(t),cVo=i(J),t0=n(J,"LI",{});var E$e=s(t0);She=n(E$e,"STRONG",{});var bpt=s(She);fVo=r(bpt,"qdqbert"),bpt.forEach(t),mVo=r(E$e," \u2014 "),wV=n(E$e,"A",{href:!0});var vpt=s(wV);gVo=r(vpt,"QDQBertForTokenClassification"),vpt.forEach(t),hVo=r(E$e," (QDQBert model)"),E$e.forEach(t),pVo=i(J),a0=n(J,"LI",{});var C$e=s(a0);Rhe=n(C$e,"STRONG",{});var Fpt=s(Rhe);_Vo=r(Fpt,"rembert"),Fpt.forEach(t),uVo=r(C$e," \u2014 "),AV=n(C$e,"A",{href:!0});var Tpt=s(AV);bVo=r(Tpt,"RemBertForTokenClassification"),Tpt.forEach(t),vVo=r(C$e," (RemBERT model)"),C$e.forEach(t),FVo=i(J),n0=n(J,"LI",{});var w$e=s(n0);Phe=n(w$e,"STRONG",{});var Mpt=s(Phe);TVo=r(Mpt,"roberta"),Mpt.forEach(t),MVo=r(w$e," \u2014 "),yV=n(w$e,"A",{href:!0});var Ept=s(yV);EVo=r(Ept,"RobertaForTokenClassification"),Ept.forEach(t),CVo=r(w$e," (RoBERTa model)"),w$e.forEach(t),wVo=i(J),s0=n(J,"LI",{});var A$e=s(s0);Bhe=n(A$e,"STRONG",{});var Cpt=s(Bhe);AVo=r(Cpt,"roformer"),Cpt.forEach(t),yVo=r(A$e," \u2014 "),LV=n(A$e,"A",{href:!0});var wpt=s(LV);LVo=r(wpt,"RoFormerForTokenClassification"),wpt.forEach(t),xVo=r(A$e," (RoFormer model)"),A$e.forEach(t),$Vo=i(J),l0=n(J,"LI",{});var y$e=s(l0);Ihe=n(y$e,"STRONG",{});var Apt=s(Ihe);kVo=r(Apt,"squeezebert"),Apt.forEach(t),SVo=r(y$e," \u2014 "),xV=n(y$e,"A",{href:!0});var ypt=s(xV);RVo=r(ypt,"SqueezeBertForTokenClassification"),ypt.forEach(t),PVo=r(y$e," (SqueezeBERT model)"),y$e.forEach(t),BVo=i(J),i0=n(J,"LI",{});var L$e=s(i0);Nhe=n(L$e,"STRONG",{});var Lpt=s(Nhe);IVo=r(Lpt,"xlm"),Lpt.forEach(t),NVo=r(L$e," \u2014 "),$V=n(L$e,"A",{href:!0});var xpt=s($V);qVo=r(xpt,"XLMForTokenClassification"),xpt.forEach(t),jVo=r(L$e," (XLM model)"),L$e.forEach(t),DVo=i(J),d0=n(J,"LI",{});var x$e=s(d0);qhe=n(x$e,"STRONG",{});var $pt=s(qhe);GVo=r($pt,"xlm-roberta"),$pt.forEach(t),OVo=r(x$e," \u2014 "),kV=n(x$e,"A",{href:!0});var kpt=s(kV);VVo=r(kpt,"XLMRobertaForTokenClassification"),kpt.forEach(t),XVo=r(x$e," (XLM-RoBERTa model)"),x$e.forEach(t),zVo=i(J),c0=n(J,"LI",{});var $$e=s(c0);jhe=n($$e,"STRONG",{});var Spt=s(jhe);WVo=r(Spt,"xlm-roberta-xl"),Spt.forEach(t),QVo=r($$e," \u2014 "),SV=n($$e,"A",{href:!0});var Rpt=s(SV);HVo=r(Rpt,"XLMRobertaXLForTokenClassification"),Rpt.forEach(t),UVo=r($$e," (XLM-RoBERTa-XL model)"),$$e.forEach(t),JVo=i(J),f0=n(J,"LI",{});var k$e=s(f0);Dhe=n(k$e,"STRONG",{});var Ppt=s(Dhe);YVo=r(Ppt,"xlnet"),Ppt.forEach(t),KVo=r(k$e," \u2014 "),RV=n(k$e,"A",{href:!0});var Bpt=s(RV);ZVo=r(Bpt,"XLNetForTokenClassification"),Bpt.forEach(t),eXo=r(k$e," (XLNet model)"),k$e.forEach(t),oXo=i(J),m0=n(J,"LI",{});var S$e=s(m0);Ghe=n(S$e,"STRONG",{});var Ipt=s(Ghe);rXo=r(Ipt,"yoso"),Ipt.forEach(t),tXo=r(S$e," \u2014 "),PV=n(S$e,"A",{href:!0});var Npt=s(PV);aXo=r(Npt,"YosoForTokenClassification"),Npt.forEach(t),nXo=r(S$e," (YOSO model)"),S$e.forEach(t),J.forEach(t),sXo=i(da),g0=n(da,"P",{});var R$e=s(g0);lXo=r(R$e,"The model is set in evaluation mode by default using "),Ohe=n(R$e,"CODE",{});var qpt=s(Ohe);iXo=r(qpt,"model.eval()"),qpt.forEach(t),dXo=r(R$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vhe=n(R$e,"CODE",{});var jpt=s(Vhe);cXo=r(jpt,"model.train()"),jpt.forEach(t),R$e.forEach(t),fXo=i(da),T(h0.$$.fragment,da),da.forEach(t),Js.forEach(t),Uqe=i(f),Ki=n(f,"H2",{class:!0});var ZDe=s(Ki);p0=n(ZDe,"A",{id:!0,class:!0,href:!0});var Dpt=s(p0);Xhe=n(Dpt,"SPAN",{});var Gpt=s(Xhe);T(Uy.$$.fragment,Gpt),Gpt.forEach(t),Dpt.forEach(t),mXo=i(ZDe),zhe=n(ZDe,"SPAN",{});var Opt=s(zhe);gXo=r(Opt,"AutoModelForQuestionAnswering"),Opt.forEach(t),ZDe.forEach(t),Jqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(Jy.$$.fragment,Ys),hXo=i(Ys),Zi=n(Ys,"P",{});var VZ=s(Zi);pXo=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BV=n(VZ,"A",{href:!0});var Vpt=s(BV);_Xo=r(Vpt,"from_pretrained()"),Vpt.forEach(t),uXo=r(VZ," class method or the "),IV=n(VZ,"A",{href:!0});var Xpt=s(IV);bXo=r(Xpt,"from_config()"),Xpt.forEach(t),vXo=r(VZ,` class
method.`),VZ.forEach(t),FXo=i(Ys),Yy=n(Ys,"P",{});var eGe=s(Yy);TXo=r(eGe,"This class cannot be instantiated directly using "),Whe=n(eGe,"CODE",{});var zpt=s(Whe);MXo=r(zpt,"__init__()"),zpt.forEach(t),EXo=r(eGe," (throws an error)."),eGe.forEach(t),CXo=i(Ys),mt=n(Ys,"DIV",{class:!0});var e6=s(mt);T(Ky.$$.fragment,e6),wXo=i(e6),Qhe=n(e6,"P",{});var Wpt=s(Qhe);AXo=r(Wpt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Wpt.forEach(t),yXo=i(e6),ed=n(e6,"P",{});var XZ=s(ed);LXo=r(XZ,`Note:
Loading a model from its configuration file does `),Hhe=n(XZ,"STRONG",{});var Qpt=s(Hhe);xXo=r(Qpt,"not"),Qpt.forEach(t),$Xo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=n(XZ,"A",{href:!0});var Hpt=s(NV);kXo=r(Hpt,"from_pretrained()"),Hpt.forEach(t),SXo=r(XZ," to load the model weights."),XZ.forEach(t),RXo=i(e6),T(_0.$$.fragment,e6),e6.forEach(t),PXo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(Zy.$$.fragment,ca),BXo=i(ca),Uhe=n(ca,"P",{});var Upt=s(Uhe);IXo=r(Upt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Upt.forEach(t),NXo=i(ca),Na=n(ca,"P",{});var o6=s(Na);qXo=r(o6,"The model class to instantiate is selected based on the "),Jhe=n(o6,"CODE",{});var Jpt=s(Jhe);jXo=r(Jpt,"model_type"),Jpt.forEach(t),DXo=r(o6,` property of the config object (either
passed as an argument or loaded from `),Yhe=n(o6,"CODE",{});var Ypt=s(Yhe);GXo=r(Ypt,"pretrained_model_name_or_path"),Ypt.forEach(t),OXo=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Khe=n(o6,"CODE",{});var Kpt=s(Khe);VXo=r(Kpt,"pretrained_model_name_or_path"),Kpt.forEach(t),XXo=r(o6,":"),o6.forEach(t),zXo=i(ca),V=n(ca,"UL",{});var X=s(V);u0=n(X,"LI",{});var P$e=s(u0);Zhe=n(P$e,"STRONG",{});var Zpt=s(Zhe);WXo=r(Zpt,"albert"),Zpt.forEach(t),QXo=r(P$e," \u2014 "),qV=n(P$e,"A",{href:!0});var e_t=s(qV);HXo=r(e_t,"AlbertForQuestionAnswering"),e_t.forEach(t),UXo=r(P$e," (ALBERT model)"),P$e.forEach(t),JXo=i(X),b0=n(X,"LI",{});var B$e=s(b0);epe=n(B$e,"STRONG",{});var o_t=s(epe);YXo=r(o_t,"bart"),o_t.forEach(t),KXo=r(B$e," \u2014 "),jV=n(B$e,"A",{href:!0});var r_t=s(jV);ZXo=r(r_t,"BartForQuestionAnswering"),r_t.forEach(t),ezo=r(B$e," (BART model)"),B$e.forEach(t),ozo=i(X),v0=n(X,"LI",{});var I$e=s(v0);ope=n(I$e,"STRONG",{});var t_t=s(ope);rzo=r(t_t,"bert"),t_t.forEach(t),tzo=r(I$e," \u2014 "),DV=n(I$e,"A",{href:!0});var a_t=s(DV);azo=r(a_t,"BertForQuestionAnswering"),a_t.forEach(t),nzo=r(I$e," (BERT model)"),I$e.forEach(t),szo=i(X),F0=n(X,"LI",{});var N$e=s(F0);rpe=n(N$e,"STRONG",{});var n_t=s(rpe);lzo=r(n_t,"big_bird"),n_t.forEach(t),izo=r(N$e," \u2014 "),GV=n(N$e,"A",{href:!0});var s_t=s(GV);dzo=r(s_t,"BigBirdForQuestionAnswering"),s_t.forEach(t),czo=r(N$e," (BigBird model)"),N$e.forEach(t),fzo=i(X),T0=n(X,"LI",{});var q$e=s(T0);tpe=n(q$e,"STRONG",{});var l_t=s(tpe);mzo=r(l_t,"bigbird_pegasus"),l_t.forEach(t),gzo=r(q$e," \u2014 "),OV=n(q$e,"A",{href:!0});var i_t=s(OV);hzo=r(i_t,"BigBirdPegasusForQuestionAnswering"),i_t.forEach(t),pzo=r(q$e," (BigBirdPegasus model)"),q$e.forEach(t),_zo=i(X),M0=n(X,"LI",{});var j$e=s(M0);ape=n(j$e,"STRONG",{});var d_t=s(ape);uzo=r(d_t,"camembert"),d_t.forEach(t),bzo=r(j$e," \u2014 "),VV=n(j$e,"A",{href:!0});var c_t=s(VV);vzo=r(c_t,"CamembertForQuestionAnswering"),c_t.forEach(t),Fzo=r(j$e," (CamemBERT model)"),j$e.forEach(t),Tzo=i(X),E0=n(X,"LI",{});var D$e=s(E0);npe=n(D$e,"STRONG",{});var f_t=s(npe);Mzo=r(f_t,"canine"),f_t.forEach(t),Ezo=r(D$e," \u2014 "),XV=n(D$e,"A",{href:!0});var m_t=s(XV);Czo=r(m_t,"CanineForQuestionAnswering"),m_t.forEach(t),wzo=r(D$e," (Canine model)"),D$e.forEach(t),Azo=i(X),C0=n(X,"LI",{});var G$e=s(C0);spe=n(G$e,"STRONG",{});var g_t=s(spe);yzo=r(g_t,"convbert"),g_t.forEach(t),Lzo=r(G$e," \u2014 "),zV=n(G$e,"A",{href:!0});var h_t=s(zV);xzo=r(h_t,"ConvBertForQuestionAnswering"),h_t.forEach(t),$zo=r(G$e," (ConvBERT model)"),G$e.forEach(t),kzo=i(X),w0=n(X,"LI",{});var O$e=s(w0);lpe=n(O$e,"STRONG",{});var p_t=s(lpe);Szo=r(p_t,"data2vec-text"),p_t.forEach(t),Rzo=r(O$e," \u2014 "),WV=n(O$e,"A",{href:!0});var __t=s(WV);Pzo=r(__t,"Data2VecTextForQuestionAnswering"),__t.forEach(t),Bzo=r(O$e," (Data2VecText model)"),O$e.forEach(t),Izo=i(X),A0=n(X,"LI",{});var V$e=s(A0);ipe=n(V$e,"STRONG",{});var u_t=s(ipe);Nzo=r(u_t,"deberta"),u_t.forEach(t),qzo=r(V$e," \u2014 "),QV=n(V$e,"A",{href:!0});var b_t=s(QV);jzo=r(b_t,"DebertaForQuestionAnswering"),b_t.forEach(t),Dzo=r(V$e," (DeBERTa model)"),V$e.forEach(t),Gzo=i(X),y0=n(X,"LI",{});var X$e=s(y0);dpe=n(X$e,"STRONG",{});var v_t=s(dpe);Ozo=r(v_t,"deberta-v2"),v_t.forEach(t),Vzo=r(X$e," \u2014 "),HV=n(X$e,"A",{href:!0});var F_t=s(HV);Xzo=r(F_t,"DebertaV2ForQuestionAnswering"),F_t.forEach(t),zzo=r(X$e," (DeBERTa-v2 model)"),X$e.forEach(t),Wzo=i(X),L0=n(X,"LI",{});var z$e=s(L0);cpe=n(z$e,"STRONG",{});var T_t=s(cpe);Qzo=r(T_t,"distilbert"),T_t.forEach(t),Hzo=r(z$e," \u2014 "),UV=n(z$e,"A",{href:!0});var M_t=s(UV);Uzo=r(M_t,"DistilBertForQuestionAnswering"),M_t.forEach(t),Jzo=r(z$e," (DistilBERT model)"),z$e.forEach(t),Yzo=i(X),x0=n(X,"LI",{});var W$e=s(x0);fpe=n(W$e,"STRONG",{});var E_t=s(fpe);Kzo=r(E_t,"electra"),E_t.forEach(t),Zzo=r(W$e," \u2014 "),JV=n(W$e,"A",{href:!0});var C_t=s(JV);eWo=r(C_t,"ElectraForQuestionAnswering"),C_t.forEach(t),oWo=r(W$e," (ELECTRA model)"),W$e.forEach(t),rWo=i(X),$0=n(X,"LI",{});var Q$e=s($0);mpe=n(Q$e,"STRONG",{});var w_t=s(mpe);tWo=r(w_t,"flaubert"),w_t.forEach(t),aWo=r(Q$e," \u2014 "),YV=n(Q$e,"A",{href:!0});var A_t=s(YV);nWo=r(A_t,"FlaubertForQuestionAnsweringSimple"),A_t.forEach(t),sWo=r(Q$e," (FlauBERT model)"),Q$e.forEach(t),lWo=i(X),k0=n(X,"LI",{});var H$e=s(k0);gpe=n(H$e,"STRONG",{});var y_t=s(gpe);iWo=r(y_t,"fnet"),y_t.forEach(t),dWo=r(H$e," \u2014 "),KV=n(H$e,"A",{href:!0});var L_t=s(KV);cWo=r(L_t,"FNetForQuestionAnswering"),L_t.forEach(t),fWo=r(H$e," (FNet model)"),H$e.forEach(t),mWo=i(X),S0=n(X,"LI",{});var U$e=s(S0);hpe=n(U$e,"STRONG",{});var x_t=s(hpe);gWo=r(x_t,"funnel"),x_t.forEach(t),hWo=r(U$e," \u2014 "),ZV=n(U$e,"A",{href:!0});var $_t=s(ZV);pWo=r($_t,"FunnelForQuestionAnswering"),$_t.forEach(t),_Wo=r(U$e," (Funnel Transformer model)"),U$e.forEach(t),uWo=i(X),R0=n(X,"LI",{});var J$e=s(R0);ppe=n(J$e,"STRONG",{});var k_t=s(ppe);bWo=r(k_t,"gptj"),k_t.forEach(t),vWo=r(J$e," \u2014 "),eX=n(J$e,"A",{href:!0});var S_t=s(eX);FWo=r(S_t,"GPTJForQuestionAnswering"),S_t.forEach(t),TWo=r(J$e," (GPT-J model)"),J$e.forEach(t),MWo=i(X),P0=n(X,"LI",{});var Y$e=s(P0);_pe=n(Y$e,"STRONG",{});var R_t=s(_pe);EWo=r(R_t,"ibert"),R_t.forEach(t),CWo=r(Y$e," \u2014 "),oX=n(Y$e,"A",{href:!0});var P_t=s(oX);wWo=r(P_t,"IBertForQuestionAnswering"),P_t.forEach(t),AWo=r(Y$e," (I-BERT model)"),Y$e.forEach(t),yWo=i(X),B0=n(X,"LI",{});var K$e=s(B0);upe=n(K$e,"STRONG",{});var B_t=s(upe);LWo=r(B_t,"layoutlmv2"),B_t.forEach(t),xWo=r(K$e," \u2014 "),rX=n(K$e,"A",{href:!0});var I_t=s(rX);$Wo=r(I_t,"LayoutLMv2ForQuestionAnswering"),I_t.forEach(t),kWo=r(K$e," (LayoutLMv2 model)"),K$e.forEach(t),SWo=i(X),I0=n(X,"LI",{});var Z$e=s(I0);bpe=n(Z$e,"STRONG",{});var N_t=s(bpe);RWo=r(N_t,"layoutlmv3"),N_t.forEach(t),PWo=r(Z$e," \u2014 "),tX=n(Z$e,"A",{href:!0});var q_t=s(tX);BWo=r(q_t,"LayoutLMv3ForQuestionAnswering"),q_t.forEach(t),IWo=r(Z$e," (LayoutLMv3 model)"),Z$e.forEach(t),NWo=i(X),N0=n(X,"LI",{});var eke=s(N0);vpe=n(eke,"STRONG",{});var j_t=s(vpe);qWo=r(j_t,"led"),j_t.forEach(t),jWo=r(eke," \u2014 "),aX=n(eke,"A",{href:!0});var D_t=s(aX);DWo=r(D_t,"LEDForQuestionAnswering"),D_t.forEach(t),GWo=r(eke," (LED model)"),eke.forEach(t),OWo=i(X),q0=n(X,"LI",{});var oke=s(q0);Fpe=n(oke,"STRONG",{});var G_t=s(Fpe);VWo=r(G_t,"longformer"),G_t.forEach(t),XWo=r(oke," \u2014 "),nX=n(oke,"A",{href:!0});var O_t=s(nX);zWo=r(O_t,"LongformerForQuestionAnswering"),O_t.forEach(t),WWo=r(oke," (Longformer model)"),oke.forEach(t),QWo=i(X),j0=n(X,"LI",{});var rke=s(j0);Tpe=n(rke,"STRONG",{});var V_t=s(Tpe);HWo=r(V_t,"lxmert"),V_t.forEach(t),UWo=r(rke," \u2014 "),sX=n(rke,"A",{href:!0});var X_t=s(sX);JWo=r(X_t,"LxmertForQuestionAnswering"),X_t.forEach(t),YWo=r(rke," (LXMERT model)"),rke.forEach(t),KWo=i(X),D0=n(X,"LI",{});var tke=s(D0);Mpe=n(tke,"STRONG",{});var z_t=s(Mpe);ZWo=r(z_t,"mbart"),z_t.forEach(t),eQo=r(tke," \u2014 "),lX=n(tke,"A",{href:!0});var W_t=s(lX);oQo=r(W_t,"MBartForQuestionAnswering"),W_t.forEach(t),rQo=r(tke," (mBART model)"),tke.forEach(t),tQo=i(X),G0=n(X,"LI",{});var ake=s(G0);Epe=n(ake,"STRONG",{});var Q_t=s(Epe);aQo=r(Q_t,"megatron-bert"),Q_t.forEach(t),nQo=r(ake," \u2014 "),iX=n(ake,"A",{href:!0});var H_t=s(iX);sQo=r(H_t,"MegatronBertForQuestionAnswering"),H_t.forEach(t),lQo=r(ake," (MegatronBert model)"),ake.forEach(t),iQo=i(X),O0=n(X,"LI",{});var nke=s(O0);Cpe=n(nke,"STRONG",{});var U_t=s(Cpe);dQo=r(U_t,"mobilebert"),U_t.forEach(t),cQo=r(nke," \u2014 "),dX=n(nke,"A",{href:!0});var J_t=s(dX);fQo=r(J_t,"MobileBertForQuestionAnswering"),J_t.forEach(t),mQo=r(nke," (MobileBERT model)"),nke.forEach(t),gQo=i(X),V0=n(X,"LI",{});var ske=s(V0);wpe=n(ske,"STRONG",{});var Y_t=s(wpe);hQo=r(Y_t,"mpnet"),Y_t.forEach(t),pQo=r(ske," \u2014 "),cX=n(ske,"A",{href:!0});var K_t=s(cX);_Qo=r(K_t,"MPNetForQuestionAnswering"),K_t.forEach(t),uQo=r(ske," (MPNet model)"),ske.forEach(t),bQo=i(X),X0=n(X,"LI",{});var lke=s(X0);Ape=n(lke,"STRONG",{});var Z_t=s(Ape);vQo=r(Z_t,"nystromformer"),Z_t.forEach(t),FQo=r(lke," \u2014 "),fX=n(lke,"A",{href:!0});var eut=s(fX);TQo=r(eut,"NystromformerForQuestionAnswering"),eut.forEach(t),MQo=r(lke," (Nystromformer model)"),lke.forEach(t),EQo=i(X),z0=n(X,"LI",{});var ike=s(z0);ype=n(ike,"STRONG",{});var out=s(ype);CQo=r(out,"qdqbert"),out.forEach(t),wQo=r(ike," \u2014 "),mX=n(ike,"A",{href:!0});var rut=s(mX);AQo=r(rut,"QDQBertForQuestionAnswering"),rut.forEach(t),yQo=r(ike," (QDQBert model)"),ike.forEach(t),LQo=i(X),W0=n(X,"LI",{});var dke=s(W0);Lpe=n(dke,"STRONG",{});var tut=s(Lpe);xQo=r(tut,"reformer"),tut.forEach(t),$Qo=r(dke," \u2014 "),gX=n(dke,"A",{href:!0});var aut=s(gX);kQo=r(aut,"ReformerForQuestionAnswering"),aut.forEach(t),SQo=r(dke," (Reformer model)"),dke.forEach(t),RQo=i(X),Q0=n(X,"LI",{});var cke=s(Q0);xpe=n(cke,"STRONG",{});var nut=s(xpe);PQo=r(nut,"rembert"),nut.forEach(t),BQo=r(cke," \u2014 "),hX=n(cke,"A",{href:!0});var sut=s(hX);IQo=r(sut,"RemBertForQuestionAnswering"),sut.forEach(t),NQo=r(cke," (RemBERT model)"),cke.forEach(t),qQo=i(X),H0=n(X,"LI",{});var fke=s(H0);$pe=n(fke,"STRONG",{});var lut=s($pe);jQo=r(lut,"roberta"),lut.forEach(t),DQo=r(fke," \u2014 "),pX=n(fke,"A",{href:!0});var iut=s(pX);GQo=r(iut,"RobertaForQuestionAnswering"),iut.forEach(t),OQo=r(fke," (RoBERTa model)"),fke.forEach(t),VQo=i(X),U0=n(X,"LI",{});var mke=s(U0);kpe=n(mke,"STRONG",{});var dut=s(kpe);XQo=r(dut,"roformer"),dut.forEach(t),zQo=r(mke," \u2014 "),_X=n(mke,"A",{href:!0});var cut=s(_X);WQo=r(cut,"RoFormerForQuestionAnswering"),cut.forEach(t),QQo=r(mke," (RoFormer model)"),mke.forEach(t),HQo=i(X),J0=n(X,"LI",{});var gke=s(J0);Spe=n(gke,"STRONG",{});var fut=s(Spe);UQo=r(fut,"splinter"),fut.forEach(t),JQo=r(gke," \u2014 "),uX=n(gke,"A",{href:!0});var mut=s(uX);YQo=r(mut,"SplinterForQuestionAnswering"),mut.forEach(t),KQo=r(gke," (Splinter model)"),gke.forEach(t),ZQo=i(X),Y0=n(X,"LI",{});var hke=s(Y0);Rpe=n(hke,"STRONG",{});var gut=s(Rpe);eHo=r(gut,"squeezebert"),gut.forEach(t),oHo=r(hke," \u2014 "),bX=n(hke,"A",{href:!0});var hut=s(bX);rHo=r(hut,"SqueezeBertForQuestionAnswering"),hut.forEach(t),tHo=r(hke," (SqueezeBERT model)"),hke.forEach(t),aHo=i(X),K0=n(X,"LI",{});var pke=s(K0);Ppe=n(pke,"STRONG",{});var put=s(Ppe);nHo=r(put,"xlm"),put.forEach(t),sHo=r(pke," \u2014 "),vX=n(pke,"A",{href:!0});var _ut=s(vX);lHo=r(_ut,"XLMForQuestionAnsweringSimple"),_ut.forEach(t),iHo=r(pke," (XLM model)"),pke.forEach(t),dHo=i(X),Z0=n(X,"LI",{});var _ke=s(Z0);Bpe=n(_ke,"STRONG",{});var uut=s(Bpe);cHo=r(uut,"xlm-roberta"),uut.forEach(t),fHo=r(_ke," \u2014 "),FX=n(_ke,"A",{href:!0});var but=s(FX);mHo=r(but,"XLMRobertaForQuestionAnswering"),but.forEach(t),gHo=r(_ke," (XLM-RoBERTa model)"),_ke.forEach(t),hHo=i(X),eF=n(X,"LI",{});var uke=s(eF);Ipe=n(uke,"STRONG",{});var vut=s(Ipe);pHo=r(vut,"xlm-roberta-xl"),vut.forEach(t),_Ho=r(uke," \u2014 "),TX=n(uke,"A",{href:!0});var Fut=s(TX);uHo=r(Fut,"XLMRobertaXLForQuestionAnswering"),Fut.forEach(t),bHo=r(uke," (XLM-RoBERTa-XL model)"),uke.forEach(t),vHo=i(X),oF=n(X,"LI",{});var bke=s(oF);Npe=n(bke,"STRONG",{});var Tut=s(Npe);FHo=r(Tut,"xlnet"),Tut.forEach(t),THo=r(bke," \u2014 "),MX=n(bke,"A",{href:!0});var Mut=s(MX);MHo=r(Mut,"XLNetForQuestionAnsweringSimple"),Mut.forEach(t),EHo=r(bke," (XLNet model)"),bke.forEach(t),CHo=i(X),rF=n(X,"LI",{});var vke=s(rF);qpe=n(vke,"STRONG",{});var Eut=s(qpe);wHo=r(Eut,"yoso"),Eut.forEach(t),AHo=r(vke," \u2014 "),EX=n(vke,"A",{href:!0});var Cut=s(EX);yHo=r(Cut,"YosoForQuestionAnswering"),Cut.forEach(t),LHo=r(vke," (YOSO model)"),vke.forEach(t),X.forEach(t),xHo=i(ca),tF=n(ca,"P",{});var Fke=s(tF);$Ho=r(Fke,"The model is set in evaluation mode by default using "),jpe=n(Fke,"CODE",{});var wut=s(jpe);kHo=r(wut,"model.eval()"),wut.forEach(t),SHo=r(Fke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dpe=n(Fke,"CODE",{});var Aut=s(Dpe);RHo=r(Aut,"model.train()"),Aut.forEach(t),Fke.forEach(t),PHo=i(ca),T(aF.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),Yqe=i(f),od=n(f,"H2",{class:!0});var oGe=s(od);nF=n(oGe,"A",{id:!0,class:!0,href:!0});var yut=s(nF);Gpe=n(yut,"SPAN",{});var Lut=s(Gpe);T(eL.$$.fragment,Lut),Lut.forEach(t),yut.forEach(t),BHo=i(oGe),Ope=n(oGe,"SPAN",{});var xut=s(Ope);IHo=r(xut,"AutoModelForTableQuestionAnswering"),xut.forEach(t),oGe.forEach(t),Kqe=i(f),qo=n(f,"DIV",{class:!0});var Ks=s(qo);T(oL.$$.fragment,Ks),NHo=i(Ks),rd=n(Ks,"P",{});var zZ=s(rd);qHo=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),CX=n(zZ,"A",{href:!0});var $ut=s(CX);jHo=r($ut,"from_pretrained()"),$ut.forEach(t),DHo=r(zZ," class method or the "),wX=n(zZ,"A",{href:!0});var kut=s(wX);GHo=r(kut,"from_config()"),kut.forEach(t),OHo=r(zZ,` class
method.`),zZ.forEach(t),VHo=i(Ks),rL=n(Ks,"P",{});var rGe=s(rL);XHo=r(rGe,"This class cannot be instantiated directly using "),Vpe=n(rGe,"CODE",{});var Sut=s(Vpe);zHo=r(Sut,"__init__()"),Sut.forEach(t),WHo=r(rGe," (throws an error)."),rGe.forEach(t),QHo=i(Ks),gt=n(Ks,"DIV",{class:!0});var r6=s(gt);T(tL.$$.fragment,r6),HHo=i(r6),Xpe=n(r6,"P",{});var Rut=s(Xpe);UHo=r(Rut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Rut.forEach(t),JHo=i(r6),td=n(r6,"P",{});var WZ=s(td);YHo=r(WZ,`Note:
Loading a model from its configuration file does `),zpe=n(WZ,"STRONG",{});var Put=s(zpe);KHo=r(Put,"not"),Put.forEach(t),ZHo=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=n(WZ,"A",{href:!0});var But=s(AX);eUo=r(But,"from_pretrained()"),But.forEach(t),oUo=r(WZ," to load the model weights."),WZ.forEach(t),rUo=i(r6),T(sF.$$.fragment,r6),r6.forEach(t),tUo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(aL.$$.fragment,fa),aUo=i(fa),Wpe=n(fa,"P",{});var Iut=s(Wpe);nUo=r(Iut,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Iut.forEach(t),sUo=i(fa),qa=n(fa,"P",{});var t6=s(qa);lUo=r(t6,"The model class to instantiate is selected based on the "),Qpe=n(t6,"CODE",{});var Nut=s(Qpe);iUo=r(Nut,"model_type"),Nut.forEach(t),dUo=r(t6,` property of the config object (either
passed as an argument or loaded from `),Hpe=n(t6,"CODE",{});var qut=s(Hpe);cUo=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),fUo=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=n(t6,"CODE",{});var jut=s(Upe);mUo=r(jut,"pretrained_model_name_or_path"),jut.forEach(t),gUo=r(t6,":"),t6.forEach(t),hUo=i(fa),Jpe=n(fa,"UL",{});var Dut=s(Jpe);lF=n(Dut,"LI",{});var Tke=s(lF);Ype=n(Tke,"STRONG",{});var Gut=s(Ype);pUo=r(Gut,"tapas"),Gut.forEach(t),_Uo=r(Tke," \u2014 "),yX=n(Tke,"A",{href:!0});var Out=s(yX);uUo=r(Out,"TapasForQuestionAnswering"),Out.forEach(t),bUo=r(Tke," (TAPAS model)"),Tke.forEach(t),Dut.forEach(t),vUo=i(fa),iF=n(fa,"P",{});var Mke=s(iF);FUo=r(Mke,"The model is set in evaluation mode by default using "),Kpe=n(Mke,"CODE",{});var Vut=s(Kpe);TUo=r(Vut,"model.eval()"),Vut.forEach(t),MUo=r(Mke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zpe=n(Mke,"CODE",{});var Xut=s(Zpe);EUo=r(Xut,"model.train()"),Xut.forEach(t),Mke.forEach(t),CUo=i(fa),T(dF.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),Zqe=i(f),ad=n(f,"H2",{class:!0});var tGe=s(ad);cF=n(tGe,"A",{id:!0,class:!0,href:!0});var zut=s(cF);e_e=n(zut,"SPAN",{});var Wut=s(e_e);T(nL.$$.fragment,Wut),Wut.forEach(t),zut.forEach(t),wUo=i(tGe),o_e=n(tGe,"SPAN",{});var Qut=s(o_e);AUo=r(Qut,"AutoModelForImageClassification"),Qut.forEach(t),tGe.forEach(t),eje=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(sL.$$.fragment,Zs),yUo=i(Zs),nd=n(Zs,"P",{});var QZ=s(nd);LUo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LX=n(QZ,"A",{href:!0});var Hut=s(LX);xUo=r(Hut,"from_pretrained()"),Hut.forEach(t),$Uo=r(QZ," class method or the "),xX=n(QZ,"A",{href:!0});var Uut=s(xX);kUo=r(Uut,"from_config()"),Uut.forEach(t),SUo=r(QZ,` class
method.`),QZ.forEach(t),RUo=i(Zs),lL=n(Zs,"P",{});var aGe=s(lL);PUo=r(aGe,"This class cannot be instantiated directly using "),r_e=n(aGe,"CODE",{});var Jut=s(r_e);BUo=r(Jut,"__init__()"),Jut.forEach(t),IUo=r(aGe," (throws an error)."),aGe.forEach(t),NUo=i(Zs),ht=n(Zs,"DIV",{class:!0});var a6=s(ht);T(iL.$$.fragment,a6),qUo=i(a6),t_e=n(a6,"P",{});var Yut=s(t_e);jUo=r(Yut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Yut.forEach(t),DUo=i(a6),sd=n(a6,"P",{});var HZ=s(sd);GUo=r(HZ,`Note:
Loading a model from its configuration file does `),a_e=n(HZ,"STRONG",{});var Kut=s(a_e);OUo=r(Kut,"not"),Kut.forEach(t),VUo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$X=n(HZ,"A",{href:!0});var Zut=s($X);XUo=r(Zut,"from_pretrained()"),Zut.forEach(t),zUo=r(HZ," to load the model weights."),HZ.forEach(t),WUo=i(a6),T(fF.$$.fragment,a6),a6.forEach(t),QUo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(dL.$$.fragment,ma),HUo=i(ma),n_e=n(ma,"P",{});var e2t=s(n_e);UUo=r(e2t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),e2t.forEach(t),JUo=i(ma),ja=n(ma,"P",{});var n6=s(ja);YUo=r(n6,"The model class to instantiate is selected based on the "),s_e=n(n6,"CODE",{});var o2t=s(s_e);KUo=r(o2t,"model_type"),o2t.forEach(t),ZUo=r(n6,` property of the config object (either
passed as an argument or loaded from `),l_e=n(n6,"CODE",{});var r2t=s(l_e);eJo=r(r2t,"pretrained_model_name_or_path"),r2t.forEach(t),oJo=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i_e=n(n6,"CODE",{});var t2t=s(i_e);rJo=r(t2t,"pretrained_model_name_or_path"),t2t.forEach(t),tJo=r(n6,":"),n6.forEach(t),aJo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);mF=n(Te,"LI",{});var Eke=s(mF);d_e=n(Eke,"STRONG",{});var a2t=s(d_e);nJo=r(a2t,"beit"),a2t.forEach(t),sJo=r(Eke," \u2014 "),kX=n(Eke,"A",{href:!0});var n2t=s(kX);lJo=r(n2t,"BeitForImageClassification"),n2t.forEach(t),iJo=r(Eke," (BEiT model)"),Eke.forEach(t),dJo=i(Te),gF=n(Te,"LI",{});var Cke=s(gF);c_e=n(Cke,"STRONG",{});var s2t=s(c_e);cJo=r(s2t,"convnext"),s2t.forEach(t),fJo=r(Cke," \u2014 "),SX=n(Cke,"A",{href:!0});var l2t=s(SX);mJo=r(l2t,"ConvNextForImageClassification"),l2t.forEach(t),gJo=r(Cke," (ConvNext model)"),Cke.forEach(t),hJo=i(Te),hF=n(Te,"LI",{});var wke=s(hF);f_e=n(wke,"STRONG",{});var i2t=s(f_e);pJo=r(i2t,"cvt"),i2t.forEach(t),_Jo=r(wke," \u2014 "),RX=n(wke,"A",{href:!0});var d2t=s(RX);uJo=r(d2t,"CvtForImageClassification"),d2t.forEach(t),bJo=r(wke," (CvT model)"),wke.forEach(t),vJo=i(Te),pF=n(Te,"LI",{});var Ake=s(pF);m_e=n(Ake,"STRONG",{});var c2t=s(m_e);FJo=r(c2t,"data2vec-vision"),c2t.forEach(t),TJo=r(Ake," \u2014 "),PX=n(Ake,"A",{href:!0});var f2t=s(PX);MJo=r(f2t,"Data2VecVisionForImageClassification"),f2t.forEach(t),EJo=r(Ake," (Data2VecVision model)"),Ake.forEach(t),CJo=i(Te),Bs=n(Te,"LI",{});var H$=s(Bs);g_e=n(H$,"STRONG",{});var m2t=s(g_e);wJo=r(m2t,"deit"),m2t.forEach(t),AJo=r(H$," \u2014 "),BX=n(H$,"A",{href:!0});var g2t=s(BX);yJo=r(g2t,"DeiTForImageClassification"),g2t.forEach(t),LJo=r(H$," or "),IX=n(H$,"A",{href:!0});var h2t=s(IX);xJo=r(h2t,"DeiTForImageClassificationWithTeacher"),h2t.forEach(t),$Jo=r(H$," (DeiT model)"),H$.forEach(t),kJo=i(Te),_F=n(Te,"LI",{});var yke=s(_F);h_e=n(yke,"STRONG",{});var p2t=s(h_e);SJo=r(p2t,"imagegpt"),p2t.forEach(t),RJo=r(yke," \u2014 "),NX=n(yke,"A",{href:!0});var _2t=s(NX);PJo=r(_2t,"ImageGPTForImageClassification"),_2t.forEach(t),BJo=r(yke," (ImageGPT model)"),yke.forEach(t),IJo=i(Te),pt=n(Te,"LI",{});var hf=s(pt);p_e=n(hf,"STRONG",{});var u2t=s(p_e);NJo=r(u2t,"perceiver"),u2t.forEach(t),qJo=r(hf," \u2014 "),qX=n(hf,"A",{href:!0});var b2t=s(qX);jJo=r(b2t,"PerceiverForImageClassificationLearned"),b2t.forEach(t),DJo=r(hf," or "),jX=n(hf,"A",{href:!0});var v2t=s(jX);GJo=r(v2t,"PerceiverForImageClassificationFourier"),v2t.forEach(t),OJo=r(hf," or "),DX=n(hf,"A",{href:!0});var F2t=s(DX);VJo=r(F2t,"PerceiverForImageClassificationConvProcessing"),F2t.forEach(t),XJo=r(hf," (Perceiver model)"),hf.forEach(t),zJo=i(Te),uF=n(Te,"LI",{});var Lke=s(uF);__e=n(Lke,"STRONG",{});var T2t=s(__e);WJo=r(T2t,"poolformer"),T2t.forEach(t),QJo=r(Lke," \u2014 "),GX=n(Lke,"A",{href:!0});var M2t=s(GX);HJo=r(M2t,"PoolFormerForImageClassification"),M2t.forEach(t),UJo=r(Lke," (PoolFormer model)"),Lke.forEach(t),JJo=i(Te),bF=n(Te,"LI",{});var xke=s(bF);u_e=n(xke,"STRONG",{});var E2t=s(u_e);YJo=r(E2t,"regnet"),E2t.forEach(t),KJo=r(xke," \u2014 "),OX=n(xke,"A",{href:!0});var C2t=s(OX);ZJo=r(C2t,"RegNetForImageClassification"),C2t.forEach(t),eYo=r(xke," (RegNet model)"),xke.forEach(t),oYo=i(Te),vF=n(Te,"LI",{});var $ke=s(vF);b_e=n($ke,"STRONG",{});var w2t=s(b_e);rYo=r(w2t,"resnet"),w2t.forEach(t),tYo=r($ke," \u2014 "),VX=n($ke,"A",{href:!0});var A2t=s(VX);aYo=r(A2t,"ResNetForImageClassification"),A2t.forEach(t),nYo=r($ke," (ResNet model)"),$ke.forEach(t),sYo=i(Te),FF=n(Te,"LI",{});var kke=s(FF);v_e=n(kke,"STRONG",{});var y2t=s(v_e);lYo=r(y2t,"segformer"),y2t.forEach(t),iYo=r(kke," \u2014 "),XX=n(kke,"A",{href:!0});var L2t=s(XX);dYo=r(L2t,"SegformerForImageClassification"),L2t.forEach(t),cYo=r(kke," (SegFormer model)"),kke.forEach(t),fYo=i(Te),TF=n(Te,"LI",{});var Ske=s(TF);F_e=n(Ske,"STRONG",{});var x2t=s(F_e);mYo=r(x2t,"swin"),x2t.forEach(t),gYo=r(Ske," \u2014 "),zX=n(Ske,"A",{href:!0});var $2t=s(zX);hYo=r($2t,"SwinForImageClassification"),$2t.forEach(t),pYo=r(Ske," (Swin model)"),Ske.forEach(t),_Yo=i(Te),MF=n(Te,"LI",{});var Rke=s(MF);T_e=n(Rke,"STRONG",{});var k2t=s(T_e);uYo=r(k2t,"van"),k2t.forEach(t),bYo=r(Rke," \u2014 "),WX=n(Rke,"A",{href:!0});var S2t=s(WX);vYo=r(S2t,"VanForImageClassification"),S2t.forEach(t),FYo=r(Rke," (VAN model)"),Rke.forEach(t),TYo=i(Te),EF=n(Te,"LI",{});var Pke=s(EF);M_e=n(Pke,"STRONG",{});var R2t=s(M_e);MYo=r(R2t,"vit"),R2t.forEach(t),EYo=r(Pke," \u2014 "),QX=n(Pke,"A",{href:!0});var P2t=s(QX);CYo=r(P2t,"ViTForImageClassification"),P2t.forEach(t),wYo=r(Pke," (ViT model)"),Pke.forEach(t),Te.forEach(t),AYo=i(ma),CF=n(ma,"P",{});var Bke=s(CF);yYo=r(Bke,"The model is set in evaluation mode by default using "),E_e=n(Bke,"CODE",{});var B2t=s(E_e);LYo=r(B2t,"model.eval()"),B2t.forEach(t),xYo=r(Bke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=n(Bke,"CODE",{});var I2t=s(C_e);$Yo=r(I2t,"model.train()"),I2t.forEach(t),Bke.forEach(t),kYo=i(ma),T(wF.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),oje=i(f),ld=n(f,"H2",{class:!0});var nGe=s(ld);AF=n(nGe,"A",{id:!0,class:!0,href:!0});var N2t=s(AF);w_e=n(N2t,"SPAN",{});var q2t=s(w_e);T(cL.$$.fragment,q2t),q2t.forEach(t),N2t.forEach(t),SYo=i(nGe),A_e=n(nGe,"SPAN",{});var j2t=s(A_e);RYo=r(j2t,"AutoModelForVision2Seq"),j2t.forEach(t),nGe.forEach(t),rje=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(fL.$$.fragment,el),PYo=i(el),id=n(el,"P",{});var UZ=s(id);BYo=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HX=n(UZ,"A",{href:!0});var D2t=s(HX);IYo=r(D2t,"from_pretrained()"),D2t.forEach(t),NYo=r(UZ," class method or the "),UX=n(UZ,"A",{href:!0});var G2t=s(UX);qYo=r(G2t,"from_config()"),G2t.forEach(t),jYo=r(UZ,` class
method.`),UZ.forEach(t),DYo=i(el),mL=n(el,"P",{});var sGe=s(mL);GYo=r(sGe,"This class cannot be instantiated directly using "),y_e=n(sGe,"CODE",{});var O2t=s(y_e);OYo=r(O2t,"__init__()"),O2t.forEach(t),VYo=r(sGe," (throws an error)."),sGe.forEach(t),XYo=i(el),_t=n(el,"DIV",{class:!0});var s6=s(_t);T(gL.$$.fragment,s6),zYo=i(s6),L_e=n(s6,"P",{});var V2t=s(L_e);WYo=r(V2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),V2t.forEach(t),QYo=i(s6),dd=n(s6,"P",{});var JZ=s(dd);HYo=r(JZ,`Note:
Loading a model from its configuration file does `),x_e=n(JZ,"STRONG",{});var X2t=s(x_e);UYo=r(X2t,"not"),X2t.forEach(t),JYo=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=n(JZ,"A",{href:!0});var z2t=s(JX);YYo=r(z2t,"from_pretrained()"),z2t.forEach(t),KYo=r(JZ," to load the model weights."),JZ.forEach(t),ZYo=i(s6),T(yF.$$.fragment,s6),s6.forEach(t),eKo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(hL.$$.fragment,ga),oKo=i(ga),$_e=n(ga,"P",{});var W2t=s($_e);rKo=r(W2t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),W2t.forEach(t),tKo=i(ga),Da=n(ga,"P",{});var l6=s(Da);aKo=r(l6,"The model class to instantiate is selected based on the "),k_e=n(l6,"CODE",{});var Q2t=s(k_e);nKo=r(Q2t,"model_type"),Q2t.forEach(t),sKo=r(l6,` property of the config object (either
passed as an argument or loaded from `),S_e=n(l6,"CODE",{});var H2t=s(S_e);lKo=r(H2t,"pretrained_model_name_or_path"),H2t.forEach(t),iKo=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=n(l6,"CODE",{});var U2t=s(R_e);dKo=r(U2t,"pretrained_model_name_or_path"),U2t.forEach(t),cKo=r(l6,":"),l6.forEach(t),fKo=i(ga),P_e=n(ga,"UL",{});var J2t=s(P_e);LF=n(J2t,"LI",{});var Ike=s(LF);B_e=n(Ike,"STRONG",{});var Y2t=s(B_e);mKo=r(Y2t,"vision-encoder-decoder"),Y2t.forEach(t),gKo=r(Ike," \u2014 "),YX=n(Ike,"A",{href:!0});var K2t=s(YX);hKo=r(K2t,"VisionEncoderDecoderModel"),K2t.forEach(t),pKo=r(Ike," (Vision Encoder decoder model)"),Ike.forEach(t),J2t.forEach(t),_Ko=i(ga),xF=n(ga,"P",{});var Nke=s(xF);uKo=r(Nke,"The model is set in evaluation mode by default using "),I_e=n(Nke,"CODE",{});var Z2t=s(I_e);bKo=r(Z2t,"model.eval()"),Z2t.forEach(t),vKo=r(Nke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N_e=n(Nke,"CODE",{});var e1t=s(N_e);FKo=r(e1t,"model.train()"),e1t.forEach(t),Nke.forEach(t),TKo=i(ga),T($F.$$.fragment,ga),ga.forEach(t),el.forEach(t),tje=i(f),cd=n(f,"H2",{class:!0});var lGe=s(cd);kF=n(lGe,"A",{id:!0,class:!0,href:!0});var o1t=s(kF);q_e=n(o1t,"SPAN",{});var r1t=s(q_e);T(pL.$$.fragment,r1t),r1t.forEach(t),o1t.forEach(t),MKo=i(lGe),j_e=n(lGe,"SPAN",{});var t1t=s(j_e);EKo=r(t1t,"AutoModelForAudioClassification"),t1t.forEach(t),lGe.forEach(t),aje=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(_L.$$.fragment,ol),CKo=i(ol),fd=n(ol,"P",{});var YZ=s(fd);wKo=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),KX=n(YZ,"A",{href:!0});var a1t=s(KX);AKo=r(a1t,"from_pretrained()"),a1t.forEach(t),yKo=r(YZ," class method or the "),ZX=n(YZ,"A",{href:!0});var n1t=s(ZX);LKo=r(n1t,"from_config()"),n1t.forEach(t),xKo=r(YZ,` class
method.`),YZ.forEach(t),$Ko=i(ol),uL=n(ol,"P",{});var iGe=s(uL);kKo=r(iGe,"This class cannot be instantiated directly using "),D_e=n(iGe,"CODE",{});var s1t=s(D_e);SKo=r(s1t,"__init__()"),s1t.forEach(t),RKo=r(iGe," (throws an error)."),iGe.forEach(t),PKo=i(ol),ut=n(ol,"DIV",{class:!0});var i6=s(ut);T(bL.$$.fragment,i6),BKo=i(i6),G_e=n(i6,"P",{});var l1t=s(G_e);IKo=r(l1t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),l1t.forEach(t),NKo=i(i6),md=n(i6,"P",{});var KZ=s(md);qKo=r(KZ,`Note:
Loading a model from its configuration file does `),O_e=n(KZ,"STRONG",{});var i1t=s(O_e);jKo=r(i1t,"not"),i1t.forEach(t),DKo=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=n(KZ,"A",{href:!0});var d1t=s(ez);GKo=r(d1t,"from_pretrained()"),d1t.forEach(t),OKo=r(KZ," to load the model weights."),KZ.forEach(t),VKo=i(i6),T(SF.$$.fragment,i6),i6.forEach(t),XKo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(vL.$$.fragment,ha),zKo=i(ha),V_e=n(ha,"P",{});var c1t=s(V_e);WKo=r(c1t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),c1t.forEach(t),QKo=i(ha),Ga=n(ha,"P",{});var d6=s(Ga);HKo=r(d6,"The model class to instantiate is selected based on the "),X_e=n(d6,"CODE",{});var f1t=s(X_e);UKo=r(f1t,"model_type"),f1t.forEach(t),JKo=r(d6,` property of the config object (either
passed as an argument or loaded from `),z_e=n(d6,"CODE",{});var m1t=s(z_e);YKo=r(m1t,"pretrained_model_name_or_path"),m1t.forEach(t),KKo=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=n(d6,"CODE",{});var g1t=s(W_e);ZKo=r(g1t,"pretrained_model_name_or_path"),g1t.forEach(t),eZo=r(d6,":"),d6.forEach(t),oZo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);RF=n(Oe,"LI",{});var qke=s(RF);Q_e=n(qke,"STRONG",{});var h1t=s(Q_e);rZo=r(h1t,"data2vec-audio"),h1t.forEach(t),tZo=r(qke," \u2014 "),oz=n(qke,"A",{href:!0});var p1t=s(oz);aZo=r(p1t,"Data2VecAudioForSequenceClassification"),p1t.forEach(t),nZo=r(qke," (Data2VecAudio model)"),qke.forEach(t),sZo=i(Oe),PF=n(Oe,"LI",{});var jke=s(PF);H_e=n(jke,"STRONG",{});var _1t=s(H_e);lZo=r(_1t,"hubert"),_1t.forEach(t),iZo=r(jke," \u2014 "),rz=n(jke,"A",{href:!0});var u1t=s(rz);dZo=r(u1t,"HubertForSequenceClassification"),u1t.forEach(t),cZo=r(jke," (Hubert model)"),jke.forEach(t),fZo=i(Oe),BF=n(Oe,"LI",{});var Dke=s(BF);U_e=n(Dke,"STRONG",{});var b1t=s(U_e);mZo=r(b1t,"sew"),b1t.forEach(t),gZo=r(Dke," \u2014 "),tz=n(Dke,"A",{href:!0});var v1t=s(tz);hZo=r(v1t,"SEWForSequenceClassification"),v1t.forEach(t),pZo=r(Dke," (SEW model)"),Dke.forEach(t),_Zo=i(Oe),IF=n(Oe,"LI",{});var Gke=s(IF);J_e=n(Gke,"STRONG",{});var F1t=s(J_e);uZo=r(F1t,"sew-d"),F1t.forEach(t),bZo=r(Gke," \u2014 "),az=n(Gke,"A",{href:!0});var T1t=s(az);vZo=r(T1t,"SEWDForSequenceClassification"),T1t.forEach(t),FZo=r(Gke," (SEW-D model)"),Gke.forEach(t),TZo=i(Oe),NF=n(Oe,"LI",{});var Oke=s(NF);Y_e=n(Oke,"STRONG",{});var M1t=s(Y_e);MZo=r(M1t,"unispeech"),M1t.forEach(t),EZo=r(Oke," \u2014 "),nz=n(Oke,"A",{href:!0});var E1t=s(nz);CZo=r(E1t,"UniSpeechForSequenceClassification"),E1t.forEach(t),wZo=r(Oke," (UniSpeech model)"),Oke.forEach(t),AZo=i(Oe),qF=n(Oe,"LI",{});var Vke=s(qF);K_e=n(Vke,"STRONG",{});var C1t=s(K_e);yZo=r(C1t,"unispeech-sat"),C1t.forEach(t),LZo=r(Vke," \u2014 "),sz=n(Vke,"A",{href:!0});var w1t=s(sz);xZo=r(w1t,"UniSpeechSatForSequenceClassification"),w1t.forEach(t),$Zo=r(Vke," (UniSpeechSat model)"),Vke.forEach(t),kZo=i(Oe),jF=n(Oe,"LI",{});var Xke=s(jF);Z_e=n(Xke,"STRONG",{});var A1t=s(Z_e);SZo=r(A1t,"wav2vec2"),A1t.forEach(t),RZo=r(Xke," \u2014 "),lz=n(Xke,"A",{href:!0});var y1t=s(lz);PZo=r(y1t,"Wav2Vec2ForSequenceClassification"),y1t.forEach(t),BZo=r(Xke," (Wav2Vec2 model)"),Xke.forEach(t),IZo=i(Oe),DF=n(Oe,"LI",{});var zke=s(DF);eue=n(zke,"STRONG",{});var L1t=s(eue);NZo=r(L1t,"wav2vec2-conformer"),L1t.forEach(t),qZo=r(zke," \u2014 "),iz=n(zke,"A",{href:!0});var x1t=s(iz);jZo=r(x1t,"Wav2Vec2ConformerForSequenceClassification"),x1t.forEach(t),DZo=r(zke," (Wav2Vec2-Conformer model)"),zke.forEach(t),GZo=i(Oe),GF=n(Oe,"LI",{});var Wke=s(GF);oue=n(Wke,"STRONG",{});var $1t=s(oue);OZo=r($1t,"wavlm"),$1t.forEach(t),VZo=r(Wke," \u2014 "),dz=n(Wke,"A",{href:!0});var k1t=s(dz);XZo=r(k1t,"WavLMForSequenceClassification"),k1t.forEach(t),zZo=r(Wke," (WavLM model)"),Wke.forEach(t),Oe.forEach(t),WZo=i(ha),OF=n(ha,"P",{});var Qke=s(OF);QZo=r(Qke,"The model is set in evaluation mode by default using "),rue=n(Qke,"CODE",{});var S1t=s(rue);HZo=r(S1t,"model.eval()"),S1t.forEach(t),UZo=r(Qke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tue=n(Qke,"CODE",{});var R1t=s(tue);JZo=r(R1t,"model.train()"),R1t.forEach(t),Qke.forEach(t),YZo=i(ha),T(VF.$$.fragment,ha),ha.forEach(t),ol.forEach(t),nje=i(f),gd=n(f,"H2",{class:!0});var dGe=s(gd);XF=n(dGe,"A",{id:!0,class:!0,href:!0});var P1t=s(XF);aue=n(P1t,"SPAN",{});var B1t=s(aue);T(FL.$$.fragment,B1t),B1t.forEach(t),P1t.forEach(t),KZo=i(dGe),nue=n(dGe,"SPAN",{});var I1t=s(nue);ZZo=r(I1t,"AutoModelForAudioFrameClassification"),I1t.forEach(t),dGe.forEach(t),sje=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(TL.$$.fragment,rl),eer=i(rl),hd=n(rl,"P",{});var ZZ=s(hd);oer=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),cz=n(ZZ,"A",{href:!0});var N1t=s(cz);rer=r(N1t,"from_pretrained()"),N1t.forEach(t),ter=r(ZZ," class method or the "),fz=n(ZZ,"A",{href:!0});var q1t=s(fz);aer=r(q1t,"from_config()"),q1t.forEach(t),ner=r(ZZ,` class
method.`),ZZ.forEach(t),ser=i(rl),ML=n(rl,"P",{});var cGe=s(ML);ler=r(cGe,"This class cannot be instantiated directly using "),sue=n(cGe,"CODE",{});var j1t=s(sue);ier=r(j1t,"__init__()"),j1t.forEach(t),der=r(cGe," (throws an error)."),cGe.forEach(t),cer=i(rl),bt=n(rl,"DIV",{class:!0});var c6=s(bt);T(EL.$$.fragment,c6),fer=i(c6),lue=n(c6,"P",{});var D1t=s(lue);mer=r(D1t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),D1t.forEach(t),ger=i(c6),pd=n(c6,"P",{});var eee=s(pd);her=r(eee,`Note:
Loading a model from its configuration file does `),iue=n(eee,"STRONG",{});var G1t=s(iue);per=r(G1t,"not"),G1t.forEach(t),_er=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=n(eee,"A",{href:!0});var O1t=s(mz);uer=r(O1t,"from_pretrained()"),O1t.forEach(t),ber=r(eee," to load the model weights."),eee.forEach(t),ver=i(c6),T(zF.$$.fragment,c6),c6.forEach(t),Fer=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(CL.$$.fragment,pa),Ter=i(pa),due=n(pa,"P",{});var V1t=s(due);Mer=r(V1t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),V1t.forEach(t),Eer=i(pa),Oa=n(pa,"P",{});var f6=s(Oa);Cer=r(f6,"The model class to instantiate is selected based on the "),cue=n(f6,"CODE",{});var X1t=s(cue);wer=r(X1t,"model_type"),X1t.forEach(t),Aer=r(f6,` property of the config object (either
passed as an argument or loaded from `),fue=n(f6,"CODE",{});var z1t=s(fue);yer=r(z1t,"pretrained_model_name_or_path"),z1t.forEach(t),Ler=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mue=n(f6,"CODE",{});var W1t=s(mue);xer=r(W1t,"pretrained_model_name_or_path"),W1t.forEach(t),$er=r(f6,":"),f6.forEach(t),ker=i(pa),Kr=n(pa,"UL",{});var tl=s(Kr);WF=n(tl,"LI",{});var Hke=s(WF);gue=n(Hke,"STRONG",{});var Q1t=s(gue);Ser=r(Q1t,"data2vec-audio"),Q1t.forEach(t),Rer=r(Hke," \u2014 "),gz=n(Hke,"A",{href:!0});var H1t=s(gz);Per=r(H1t,"Data2VecAudioForAudioFrameClassification"),H1t.forEach(t),Ber=r(Hke," (Data2VecAudio model)"),Hke.forEach(t),Ier=i(tl),QF=n(tl,"LI",{});var Uke=s(QF);hue=n(Uke,"STRONG",{});var U1t=s(hue);Ner=r(U1t,"unispeech-sat"),U1t.forEach(t),qer=r(Uke," \u2014 "),hz=n(Uke,"A",{href:!0});var J1t=s(hz);jer=r(J1t,"UniSpeechSatForAudioFrameClassification"),J1t.forEach(t),Der=r(Uke," (UniSpeechSat model)"),Uke.forEach(t),Ger=i(tl),HF=n(tl,"LI",{});var Jke=s(HF);pue=n(Jke,"STRONG",{});var Y1t=s(pue);Oer=r(Y1t,"wav2vec2"),Y1t.forEach(t),Ver=r(Jke," \u2014 "),pz=n(Jke,"A",{href:!0});var K1t=s(pz);Xer=r(K1t,"Wav2Vec2ForAudioFrameClassification"),K1t.forEach(t),zer=r(Jke," (Wav2Vec2 model)"),Jke.forEach(t),Wer=i(tl),UF=n(tl,"LI",{});var Yke=s(UF);_ue=n(Yke,"STRONG",{});var Z1t=s(_ue);Qer=r(Z1t,"wav2vec2-conformer"),Z1t.forEach(t),Her=r(Yke," \u2014 "),_z=n(Yke,"A",{href:!0});var ebt=s(_z);Uer=r(ebt,"Wav2Vec2ConformerForAudioFrameClassification"),ebt.forEach(t),Jer=r(Yke," (Wav2Vec2-Conformer model)"),Yke.forEach(t),Yer=i(tl),JF=n(tl,"LI",{});var Kke=s(JF);uue=n(Kke,"STRONG",{});var obt=s(uue);Ker=r(obt,"wavlm"),obt.forEach(t),Zer=r(Kke," \u2014 "),uz=n(Kke,"A",{href:!0});var rbt=s(uz);eor=r(rbt,"WavLMForAudioFrameClassification"),rbt.forEach(t),oor=r(Kke," (WavLM model)"),Kke.forEach(t),tl.forEach(t),ror=i(pa),YF=n(pa,"P",{});var Zke=s(YF);tor=r(Zke,"The model is set in evaluation mode by default using "),bue=n(Zke,"CODE",{});var tbt=s(bue);aor=r(tbt,"model.eval()"),tbt.forEach(t),nor=r(Zke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=n(Zke,"CODE",{});var abt=s(vue);sor=r(abt,"model.train()"),abt.forEach(t),Zke.forEach(t),lor=i(pa),T(KF.$$.fragment,pa),pa.forEach(t),rl.forEach(t),lje=i(f),_d=n(f,"H2",{class:!0});var fGe=s(_d);ZF=n(fGe,"A",{id:!0,class:!0,href:!0});var nbt=s(ZF);Fue=n(nbt,"SPAN",{});var sbt=s(Fue);T(wL.$$.fragment,sbt),sbt.forEach(t),nbt.forEach(t),ior=i(fGe),Tue=n(fGe,"SPAN",{});var lbt=s(Tue);dor=r(lbt,"AutoModelForCTC"),lbt.forEach(t),fGe.forEach(t),ije=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(AL.$$.fragment,al),cor=i(al),ud=n(al,"P",{});var oee=s(ud);mor=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),bz=n(oee,"A",{href:!0});var ibt=s(bz);gor=r(ibt,"from_pretrained()"),ibt.forEach(t),hor=r(oee," class method or the "),vz=n(oee,"A",{href:!0});var dbt=s(vz);por=r(dbt,"from_config()"),dbt.forEach(t),_or=r(oee,` class
method.`),oee.forEach(t),uor=i(al),yL=n(al,"P",{});var mGe=s(yL);bor=r(mGe,"This class cannot be instantiated directly using "),Mue=n(mGe,"CODE",{});var cbt=s(Mue);vor=r(cbt,"__init__()"),cbt.forEach(t),For=r(mGe," (throws an error)."),mGe.forEach(t),Tor=i(al),vt=n(al,"DIV",{class:!0});var m6=s(vt);T(LL.$$.fragment,m6),Mor=i(m6),Eue=n(m6,"P",{});var fbt=s(Eue);Eor=r(fbt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),fbt.forEach(t),Cor=i(m6),bd=n(m6,"P",{});var ree=s(bd);wor=r(ree,`Note:
Loading a model from its configuration file does `),Cue=n(ree,"STRONG",{});var mbt=s(Cue);Aor=r(mbt,"not"),mbt.forEach(t),yor=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=n(ree,"A",{href:!0});var gbt=s(Fz);Lor=r(gbt,"from_pretrained()"),gbt.forEach(t),xor=r(ree," to load the model weights."),ree.forEach(t),$or=i(m6),T(eT.$$.fragment,m6),m6.forEach(t),kor=i(al),mo=n(al,"DIV",{class:!0});var _a=s(mo);T(xL.$$.fragment,_a),Sor=i(_a),wue=n(_a,"P",{});var hbt=s(wue);Ror=r(hbt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),hbt.forEach(t),Por=i(_a),Va=n(_a,"P",{});var g6=s(Va);Bor=r(g6,"The model class to instantiate is selected based on the "),Aue=n(g6,"CODE",{});var pbt=s(Aue);Ior=r(pbt,"model_type"),pbt.forEach(t),Nor=r(g6,` property of the config object (either
passed as an argument or loaded from `),yue=n(g6,"CODE",{});var _bt=s(yue);qor=r(_bt,"pretrained_model_name_or_path"),_bt.forEach(t),jor=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=n(g6,"CODE",{});var ubt=s(Lue);Dor=r(ubt,"pretrained_model_name_or_path"),ubt.forEach(t),Gor=r(g6,":"),g6.forEach(t),Oor=i(_a),Se=n(_a,"UL",{});var Ve=s(Se);oT=n(Ve,"LI",{});var eSe=s(oT);xue=n(eSe,"STRONG",{});var bbt=s(xue);Vor=r(bbt,"data2vec-audio"),bbt.forEach(t),Xor=r(eSe," \u2014 "),Tz=n(eSe,"A",{href:!0});var vbt=s(Tz);zor=r(vbt,"Data2VecAudioForCTC"),vbt.forEach(t),Wor=r(eSe," (Data2VecAudio model)"),eSe.forEach(t),Qor=i(Ve),rT=n(Ve,"LI",{});var oSe=s(rT);$ue=n(oSe,"STRONG",{});var Fbt=s($ue);Hor=r(Fbt,"hubert"),Fbt.forEach(t),Uor=r(oSe," \u2014 "),Mz=n(oSe,"A",{href:!0});var Tbt=s(Mz);Jor=r(Tbt,"HubertForCTC"),Tbt.forEach(t),Yor=r(oSe," (Hubert model)"),oSe.forEach(t),Kor=i(Ve),tT=n(Ve,"LI",{});var rSe=s(tT);kue=n(rSe,"STRONG",{});var Mbt=s(kue);Zor=r(Mbt,"sew"),Mbt.forEach(t),err=r(rSe," \u2014 "),Ez=n(rSe,"A",{href:!0});var Ebt=s(Ez);orr=r(Ebt,"SEWForCTC"),Ebt.forEach(t),rrr=r(rSe," (SEW model)"),rSe.forEach(t),trr=i(Ve),aT=n(Ve,"LI",{});var tSe=s(aT);Sue=n(tSe,"STRONG",{});var Cbt=s(Sue);arr=r(Cbt,"sew-d"),Cbt.forEach(t),nrr=r(tSe," \u2014 "),Cz=n(tSe,"A",{href:!0});var wbt=s(Cz);srr=r(wbt,"SEWDForCTC"),wbt.forEach(t),lrr=r(tSe," (SEW-D model)"),tSe.forEach(t),irr=i(Ve),nT=n(Ve,"LI",{});var aSe=s(nT);Rue=n(aSe,"STRONG",{});var Abt=s(Rue);drr=r(Abt,"unispeech"),Abt.forEach(t),crr=r(aSe," \u2014 "),wz=n(aSe,"A",{href:!0});var ybt=s(wz);frr=r(ybt,"UniSpeechForCTC"),ybt.forEach(t),mrr=r(aSe," (UniSpeech model)"),aSe.forEach(t),grr=i(Ve),sT=n(Ve,"LI",{});var nSe=s(sT);Pue=n(nSe,"STRONG",{});var Lbt=s(Pue);hrr=r(Lbt,"unispeech-sat"),Lbt.forEach(t),prr=r(nSe," \u2014 "),Az=n(nSe,"A",{href:!0});var xbt=s(Az);_rr=r(xbt,"UniSpeechSatForCTC"),xbt.forEach(t),urr=r(nSe," (UniSpeechSat model)"),nSe.forEach(t),brr=i(Ve),lT=n(Ve,"LI",{});var sSe=s(lT);Bue=n(sSe,"STRONG",{});var $bt=s(Bue);vrr=r($bt,"wav2vec2"),$bt.forEach(t),Frr=r(sSe," \u2014 "),yz=n(sSe,"A",{href:!0});var kbt=s(yz);Trr=r(kbt,"Wav2Vec2ForCTC"),kbt.forEach(t),Mrr=r(sSe," (Wav2Vec2 model)"),sSe.forEach(t),Err=i(Ve),iT=n(Ve,"LI",{});var lSe=s(iT);Iue=n(lSe,"STRONG",{});var Sbt=s(Iue);Crr=r(Sbt,"wav2vec2-conformer"),Sbt.forEach(t),wrr=r(lSe," \u2014 "),Lz=n(lSe,"A",{href:!0});var Rbt=s(Lz);Arr=r(Rbt,"Wav2Vec2ConformerForCTC"),Rbt.forEach(t),yrr=r(lSe," (Wav2Vec2-Conformer model)"),lSe.forEach(t),Lrr=i(Ve),dT=n(Ve,"LI",{});var iSe=s(dT);Nue=n(iSe,"STRONG",{});var Pbt=s(Nue);xrr=r(Pbt,"wavlm"),Pbt.forEach(t),$rr=r(iSe," \u2014 "),xz=n(iSe,"A",{href:!0});var Bbt=s(xz);krr=r(Bbt,"WavLMForCTC"),Bbt.forEach(t),Srr=r(iSe," (WavLM model)"),iSe.forEach(t),Ve.forEach(t),Rrr=i(_a),cT=n(_a,"P",{});var dSe=s(cT);Prr=r(dSe,"The model is set in evaluation mode by default using "),que=n(dSe,"CODE",{});var Ibt=s(que);Brr=r(Ibt,"model.eval()"),Ibt.forEach(t),Irr=r(dSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jue=n(dSe,"CODE",{});var Nbt=s(jue);Nrr=r(Nbt,"model.train()"),Nbt.forEach(t),dSe.forEach(t),qrr=i(_a),T(fT.$$.fragment,_a),_a.forEach(t),al.forEach(t),dje=i(f),vd=n(f,"H2",{class:!0});var gGe=s(vd);mT=n(gGe,"A",{id:!0,class:!0,href:!0});var qbt=s(mT);Due=n(qbt,"SPAN",{});var jbt=s(Due);T($L.$$.fragment,jbt),jbt.forEach(t),qbt.forEach(t),jrr=i(gGe),Gue=n(gGe,"SPAN",{});var Dbt=s(Gue);Drr=r(Dbt,"AutoModelForSpeechSeq2Seq"),Dbt.forEach(t),gGe.forEach(t),cje=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(kL.$$.fragment,nl),Grr=i(nl),Fd=n(nl,"P",{});var tee=s(Fd);Orr=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),$z=n(tee,"A",{href:!0});var Gbt=s($z);Vrr=r(Gbt,"from_pretrained()"),Gbt.forEach(t),Xrr=r(tee," class method or the "),kz=n(tee,"A",{href:!0});var Obt=s(kz);zrr=r(Obt,"from_config()"),Obt.forEach(t),Wrr=r(tee,` class
method.`),tee.forEach(t),Qrr=i(nl),SL=n(nl,"P",{});var hGe=s(SL);Hrr=r(hGe,"This class cannot be instantiated directly using "),Oue=n(hGe,"CODE",{});var Vbt=s(Oue);Urr=r(Vbt,"__init__()"),Vbt.forEach(t),Jrr=r(hGe," (throws an error)."),hGe.forEach(t),Yrr=i(nl),Ft=n(nl,"DIV",{class:!0});var h6=s(Ft);T(RL.$$.fragment,h6),Krr=i(h6),Vue=n(h6,"P",{});var Xbt=s(Vue);Zrr=r(Xbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Xbt.forEach(t),etr=i(h6),Td=n(h6,"P",{});var aee=s(Td);otr=r(aee,`Note:
Loading a model from its configuration file does `),Xue=n(aee,"STRONG",{});var zbt=s(Xue);rtr=r(zbt,"not"),zbt.forEach(t),ttr=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=n(aee,"A",{href:!0});var Wbt=s(Sz);atr=r(Wbt,"from_pretrained()"),Wbt.forEach(t),ntr=r(aee," to load the model weights."),aee.forEach(t),str=i(h6),T(gT.$$.fragment,h6),h6.forEach(t),ltr=i(nl),go=n(nl,"DIV",{class:!0});var ua=s(go);T(PL.$$.fragment,ua),itr=i(ua),zue=n(ua,"P",{});var Qbt=s(zue);dtr=r(Qbt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Qbt.forEach(t),ctr=i(ua),Xa=n(ua,"P",{});var p6=s(Xa);ftr=r(p6,"The model class to instantiate is selected based on the "),Wue=n(p6,"CODE",{});var Hbt=s(Wue);mtr=r(Hbt,"model_type"),Hbt.forEach(t),gtr=r(p6,` property of the config object (either
passed as an argument or loaded from `),Que=n(p6,"CODE",{});var Ubt=s(Que);htr=r(Ubt,"pretrained_model_name_or_path"),Ubt.forEach(t),ptr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=n(p6,"CODE",{});var Jbt=s(Hue);_tr=r(Jbt,"pretrained_model_name_or_path"),Jbt.forEach(t),utr=r(p6,":"),p6.forEach(t),btr=i(ua),BL=n(ua,"UL",{});var pGe=s(BL);hT=n(pGe,"LI",{});var cSe=s(hT);Uue=n(cSe,"STRONG",{});var Ybt=s(Uue);vtr=r(Ybt,"speech-encoder-decoder"),Ybt.forEach(t),Ftr=r(cSe," \u2014 "),Rz=n(cSe,"A",{href:!0});var Kbt=s(Rz);Ttr=r(Kbt,"SpeechEncoderDecoderModel"),Kbt.forEach(t),Mtr=r(cSe," (Speech Encoder decoder model)"),cSe.forEach(t),Etr=i(pGe),pT=n(pGe,"LI",{});var fSe=s(pT);Jue=n(fSe,"STRONG",{});var Zbt=s(Jue);Ctr=r(Zbt,"speech_to_text"),Zbt.forEach(t),wtr=r(fSe," \u2014 "),Pz=n(fSe,"A",{href:!0});var evt=s(Pz);Atr=r(evt,"Speech2TextForConditionalGeneration"),evt.forEach(t),ytr=r(fSe," (Speech2Text model)"),fSe.forEach(t),pGe.forEach(t),Ltr=i(ua),_T=n(ua,"P",{});var mSe=s(_T);xtr=r(mSe,"The model is set in evaluation mode by default using "),Yue=n(mSe,"CODE",{});var ovt=s(Yue);$tr=r(ovt,"model.eval()"),ovt.forEach(t),ktr=r(mSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kue=n(mSe,"CODE",{});var rvt=s(Kue);Str=r(rvt,"model.train()"),rvt.forEach(t),mSe.forEach(t),Rtr=i(ua),T(uT.$$.fragment,ua),ua.forEach(t),nl.forEach(t),fje=i(f),Md=n(f,"H2",{class:!0});var _Ge=s(Md);bT=n(_Ge,"A",{id:!0,class:!0,href:!0});var tvt=s(bT);Zue=n(tvt,"SPAN",{});var avt=s(Zue);T(IL.$$.fragment,avt),avt.forEach(t),tvt.forEach(t),Ptr=i(_Ge),e2e=n(_Ge,"SPAN",{});var nvt=s(e2e);Btr=r(nvt,"AutoModelForAudioXVector"),nvt.forEach(t),_Ge.forEach(t),mje=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(NL.$$.fragment,sl),Itr=i(sl),Ed=n(sl,"P",{});var nee=s(Ed);Ntr=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Bz=n(nee,"A",{href:!0});var svt=s(Bz);qtr=r(svt,"from_pretrained()"),svt.forEach(t),jtr=r(nee," class method or the "),Iz=n(nee,"A",{href:!0});var lvt=s(Iz);Dtr=r(lvt,"from_config()"),lvt.forEach(t),Gtr=r(nee,` class
method.`),nee.forEach(t),Otr=i(sl),qL=n(sl,"P",{});var uGe=s(qL);Vtr=r(uGe,"This class cannot be instantiated directly using "),o2e=n(uGe,"CODE",{});var ivt=s(o2e);Xtr=r(ivt,"__init__()"),ivt.forEach(t),ztr=r(uGe," (throws an error)."),uGe.forEach(t),Wtr=i(sl),Tt=n(sl,"DIV",{class:!0});var _6=s(Tt);T(jL.$$.fragment,_6),Qtr=i(_6),r2e=n(_6,"P",{});var dvt=s(r2e);Htr=r(dvt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),dvt.forEach(t),Utr=i(_6),Cd=n(_6,"P",{});var see=s(Cd);Jtr=r(see,`Note:
Loading a model from its configuration file does `),t2e=n(see,"STRONG",{});var cvt=s(t2e);Ytr=r(cvt,"not"),cvt.forEach(t),Ktr=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n(see,"A",{href:!0});var fvt=s(Nz);Ztr=r(fvt,"from_pretrained()"),fvt.forEach(t),ear=r(see," to load the model weights."),see.forEach(t),oar=i(_6),T(vT.$$.fragment,_6),_6.forEach(t),rar=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(DL.$$.fragment,ba),tar=i(ba),a2e=n(ba,"P",{});var mvt=s(a2e);aar=r(mvt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),mvt.forEach(t),nar=i(ba),za=n(ba,"P",{});var u6=s(za);sar=r(u6,"The model class to instantiate is selected based on the "),n2e=n(u6,"CODE",{});var gvt=s(n2e);lar=r(gvt,"model_type"),gvt.forEach(t),iar=r(u6,` property of the config object (either
passed as an argument or loaded from `),s2e=n(u6,"CODE",{});var hvt=s(s2e);dar=r(hvt,"pretrained_model_name_or_path"),hvt.forEach(t),car=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=n(u6,"CODE",{});var pvt=s(l2e);far=r(pvt,"pretrained_model_name_or_path"),pvt.forEach(t),mar=r(u6,":"),u6.forEach(t),gar=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);FT=n(ll,"LI",{});var gSe=s(FT);i2e=n(gSe,"STRONG",{});var _vt=s(i2e);har=r(_vt,"data2vec-audio"),_vt.forEach(t),par=r(gSe," \u2014 "),qz=n(gSe,"A",{href:!0});var uvt=s(qz);_ar=r(uvt,"Data2VecAudioForXVector"),uvt.forEach(t),uar=r(gSe," (Data2VecAudio model)"),gSe.forEach(t),bar=i(ll),TT=n(ll,"LI",{});var hSe=s(TT);d2e=n(hSe,"STRONG",{});var bvt=s(d2e);Far=r(bvt,"unispeech-sat"),bvt.forEach(t),Tar=r(hSe," \u2014 "),jz=n(hSe,"A",{href:!0});var vvt=s(jz);Mar=r(vvt,"UniSpeechSatForXVector"),vvt.forEach(t),Ear=r(hSe," (UniSpeechSat model)"),hSe.forEach(t),Car=i(ll),MT=n(ll,"LI",{});var pSe=s(MT);c2e=n(pSe,"STRONG",{});var Fvt=s(c2e);war=r(Fvt,"wav2vec2"),Fvt.forEach(t),Aar=r(pSe," \u2014 "),Dz=n(pSe,"A",{href:!0});var Tvt=s(Dz);yar=r(Tvt,"Wav2Vec2ForXVector"),Tvt.forEach(t),Lar=r(pSe," (Wav2Vec2 model)"),pSe.forEach(t),xar=i(ll),ET=n(ll,"LI",{});var _Se=s(ET);f2e=n(_Se,"STRONG",{});var Mvt=s(f2e);$ar=r(Mvt,"wav2vec2-conformer"),Mvt.forEach(t),kar=r(_Se," \u2014 "),Gz=n(_Se,"A",{href:!0});var Evt=s(Gz);Sar=r(Evt,"Wav2Vec2ConformerForXVector"),Evt.forEach(t),Rar=r(_Se," (Wav2Vec2-Conformer model)"),_Se.forEach(t),Par=i(ll),CT=n(ll,"LI",{});var uSe=s(CT);m2e=n(uSe,"STRONG",{});var Cvt=s(m2e);Bar=r(Cvt,"wavlm"),Cvt.forEach(t),Iar=r(uSe," \u2014 "),Oz=n(uSe,"A",{href:!0});var wvt=s(Oz);Nar=r(wvt,"WavLMForXVector"),wvt.forEach(t),qar=r(uSe," (WavLM model)"),uSe.forEach(t),ll.forEach(t),jar=i(ba),wT=n(ba,"P",{});var bSe=s(wT);Dar=r(bSe,"The model is set in evaluation mode by default using "),g2e=n(bSe,"CODE",{});var Avt=s(g2e);Gar=r(Avt,"model.eval()"),Avt.forEach(t),Oar=r(bSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h2e=n(bSe,"CODE",{});var yvt=s(h2e);Var=r(yvt,"model.train()"),yvt.forEach(t),bSe.forEach(t),Xar=i(ba),T(AT.$$.fragment,ba),ba.forEach(t),sl.forEach(t),gje=i(f),wd=n(f,"H2",{class:!0});var bGe=s(wd);yT=n(bGe,"A",{id:!0,class:!0,href:!0});var Lvt=s(yT);p2e=n(Lvt,"SPAN",{});var xvt=s(p2e);T(GL.$$.fragment,xvt),xvt.forEach(t),Lvt.forEach(t),zar=i(bGe),_2e=n(bGe,"SPAN",{});var $vt=s(_2e);War=r($vt,"AutoModelForMaskedImageModeling"),$vt.forEach(t),bGe.forEach(t),hje=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(OL.$$.fragment,il),Qar=i(il),Ad=n(il,"P",{});var lee=s(Ad);Har=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Vz=n(lee,"A",{href:!0});var kvt=s(Vz);Uar=r(kvt,"from_pretrained()"),kvt.forEach(t),Jar=r(lee," class method or the "),Xz=n(lee,"A",{href:!0});var Svt=s(Xz);Yar=r(Svt,"from_config()"),Svt.forEach(t),Kar=r(lee,` class
method.`),lee.forEach(t),Zar=i(il),VL=n(il,"P",{});var vGe=s(VL);enr=r(vGe,"This class cannot be instantiated directly using "),u2e=n(vGe,"CODE",{});var Rvt=s(u2e);onr=r(Rvt,"__init__()"),Rvt.forEach(t),rnr=r(vGe," (throws an error)."),vGe.forEach(t),tnr=i(il),Mt=n(il,"DIV",{class:!0});var b6=s(Mt);T(XL.$$.fragment,b6),anr=i(b6),b2e=n(b6,"P",{});var Pvt=s(b2e);nnr=r(Pvt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Pvt.forEach(t),snr=i(b6),yd=n(b6,"P",{});var iee=s(yd);lnr=r(iee,`Note:
Loading a model from its configuration file does `),v2e=n(iee,"STRONG",{});var Bvt=s(v2e);inr=r(Bvt,"not"),Bvt.forEach(t),dnr=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=n(iee,"A",{href:!0});var Ivt=s(zz);cnr=r(Ivt,"from_pretrained()"),Ivt.forEach(t),fnr=r(iee," to load the model weights."),iee.forEach(t),mnr=i(b6),T(LT.$$.fragment,b6),b6.forEach(t),gnr=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(zL.$$.fragment,va),hnr=i(va),F2e=n(va,"P",{});var Nvt=s(F2e);pnr=r(Nvt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Nvt.forEach(t),_nr=i(va),Wa=n(va,"P",{});var v6=s(Wa);unr=r(v6,"The model class to instantiate is selected based on the "),T2e=n(v6,"CODE",{});var qvt=s(T2e);bnr=r(qvt,"model_type"),qvt.forEach(t),vnr=r(v6,` property of the config object (either
passed as an argument or loaded from `),M2e=n(v6,"CODE",{});var jvt=s(M2e);Fnr=r(jvt,"pretrained_model_name_or_path"),jvt.forEach(t),Tnr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=n(v6,"CODE",{});var Dvt=s(E2e);Mnr=r(Dvt,"pretrained_model_name_or_path"),Dvt.forEach(t),Enr=r(v6,":"),v6.forEach(t),Cnr=i(va),Ld=n(va,"UL",{});var dee=s(Ld);xT=n(dee,"LI",{});var vSe=s(xT);C2e=n(vSe,"STRONG",{});var Gvt=s(C2e);wnr=r(Gvt,"deit"),Gvt.forEach(t),Anr=r(vSe," \u2014 "),Wz=n(vSe,"A",{href:!0});var Ovt=s(Wz);ynr=r(Ovt,"DeiTForMaskedImageModeling"),Ovt.forEach(t),Lnr=r(vSe," (DeiT model)"),vSe.forEach(t),xnr=i(dee),$T=n(dee,"LI",{});var FSe=s($T);w2e=n(FSe,"STRONG",{});var Vvt=s(w2e);$nr=r(Vvt,"swin"),Vvt.forEach(t),knr=r(FSe," \u2014 "),Qz=n(FSe,"A",{href:!0});var Xvt=s(Qz);Snr=r(Xvt,"SwinForMaskedImageModeling"),Xvt.forEach(t),Rnr=r(FSe," (Swin model)"),FSe.forEach(t),Pnr=i(dee),kT=n(dee,"LI",{});var TSe=s(kT);A2e=n(TSe,"STRONG",{});var zvt=s(A2e);Bnr=r(zvt,"vit"),zvt.forEach(t),Inr=r(TSe," \u2014 "),Hz=n(TSe,"A",{href:!0});var Wvt=s(Hz);Nnr=r(Wvt,"ViTForMaskedImageModeling"),Wvt.forEach(t),qnr=r(TSe," (ViT model)"),TSe.forEach(t),dee.forEach(t),jnr=i(va),ST=n(va,"P",{});var MSe=s(ST);Dnr=r(MSe,"The model is set in evaluation mode by default using "),y2e=n(MSe,"CODE",{});var Qvt=s(y2e);Gnr=r(Qvt,"model.eval()"),Qvt.forEach(t),Onr=r(MSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L2e=n(MSe,"CODE",{});var Hvt=s(L2e);Vnr=r(Hvt,"model.train()"),Hvt.forEach(t),MSe.forEach(t),Xnr=i(va),T(RT.$$.fragment,va),va.forEach(t),il.forEach(t),pje=i(f),xd=n(f,"H2",{class:!0});var FGe=s(xd);PT=n(FGe,"A",{id:!0,class:!0,href:!0});var Uvt=s(PT);x2e=n(Uvt,"SPAN",{});var Jvt=s(x2e);T(WL.$$.fragment,Jvt),Jvt.forEach(t),Uvt.forEach(t),znr=i(FGe),$2e=n(FGe,"SPAN",{});var Yvt=s($2e);Wnr=r(Yvt,"AutoModelForObjectDetection"),Yvt.forEach(t),FGe.forEach(t),_je=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(QL.$$.fragment,dl),Qnr=i(dl),$d=n(dl,"P",{});var cee=s($d);Hnr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Uz=n(cee,"A",{href:!0});var Kvt=s(Uz);Unr=r(Kvt,"from_pretrained()"),Kvt.forEach(t),Jnr=r(cee," class method or the "),Jz=n(cee,"A",{href:!0});var Zvt=s(Jz);Ynr=r(Zvt,"from_config()"),Zvt.forEach(t),Knr=r(cee,` class
method.`),cee.forEach(t),Znr=i(dl),HL=n(dl,"P",{});var TGe=s(HL);esr=r(TGe,"This class cannot be instantiated directly using "),k2e=n(TGe,"CODE",{});var e0t=s(k2e);osr=r(e0t,"__init__()"),e0t.forEach(t),rsr=r(TGe," (throws an error)."),TGe.forEach(t),tsr=i(dl),Et=n(dl,"DIV",{class:!0});var F6=s(Et);T(UL.$$.fragment,F6),asr=i(F6),S2e=n(F6,"P",{});var o0t=s(S2e);nsr=r(o0t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),o0t.forEach(t),ssr=i(F6),kd=n(F6,"P",{});var fee=s(kd);lsr=r(fee,`Note:
Loading a model from its configuration file does `),R2e=n(fee,"STRONG",{});var r0t=s(R2e);isr=r(r0t,"not"),r0t.forEach(t),dsr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yz=n(fee,"A",{href:!0});var t0t=s(Yz);csr=r(t0t,"from_pretrained()"),t0t.forEach(t),fsr=r(fee," to load the model weights."),fee.forEach(t),msr=i(F6),T(BT.$$.fragment,F6),F6.forEach(t),gsr=i(dl),_o=n(dl,"DIV",{class:!0});var Fa=s(_o);T(JL.$$.fragment,Fa),hsr=i(Fa),P2e=n(Fa,"P",{});var a0t=s(P2e);psr=r(a0t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),a0t.forEach(t),_sr=i(Fa),Qa=n(Fa,"P",{});var T6=s(Qa);usr=r(T6,"The model class to instantiate is selected based on the "),B2e=n(T6,"CODE",{});var n0t=s(B2e);bsr=r(n0t,"model_type"),n0t.forEach(t),vsr=r(T6,` property of the config object (either
passed as an argument or loaded from `),I2e=n(T6,"CODE",{});var s0t=s(I2e);Fsr=r(s0t,"pretrained_model_name_or_path"),s0t.forEach(t),Tsr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=n(T6,"CODE",{});var l0t=s(N2e);Msr=r(l0t,"pretrained_model_name_or_path"),l0t.forEach(t),Esr=r(T6,":"),T6.forEach(t),Csr=i(Fa),YL=n(Fa,"UL",{});var MGe=s(YL);IT=n(MGe,"LI",{});var ESe=s(IT);q2e=n(ESe,"STRONG",{});var i0t=s(q2e);wsr=r(i0t,"detr"),i0t.forEach(t),Asr=r(ESe," \u2014 "),Kz=n(ESe,"A",{href:!0});var d0t=s(Kz);ysr=r(d0t,"DetrForObjectDetection"),d0t.forEach(t),Lsr=r(ESe," (DETR model)"),ESe.forEach(t),xsr=i(MGe),NT=n(MGe,"LI",{});var CSe=s(NT);j2e=n(CSe,"STRONG",{});var c0t=s(j2e);$sr=r(c0t,"yolos"),c0t.forEach(t),ksr=r(CSe," \u2014 "),Zz=n(CSe,"A",{href:!0});var f0t=s(Zz);Ssr=r(f0t,"YolosForObjectDetection"),f0t.forEach(t),Rsr=r(CSe," (YOLOS model)"),CSe.forEach(t),MGe.forEach(t),Psr=i(Fa),qT=n(Fa,"P",{});var wSe=s(qT);Bsr=r(wSe,"The model is set in evaluation mode by default using "),D2e=n(wSe,"CODE",{});var m0t=s(D2e);Isr=r(m0t,"model.eval()"),m0t.forEach(t),Nsr=r(wSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G2e=n(wSe,"CODE",{});var g0t=s(G2e);qsr=r(g0t,"model.train()"),g0t.forEach(t),wSe.forEach(t),jsr=i(Fa),T(jT.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),uje=i(f),Sd=n(f,"H2",{class:!0});var EGe=s(Sd);DT=n(EGe,"A",{id:!0,class:!0,href:!0});var h0t=s(DT);O2e=n(h0t,"SPAN",{});var p0t=s(O2e);T(KL.$$.fragment,p0t),p0t.forEach(t),h0t.forEach(t),Dsr=i(EGe),V2e=n(EGe,"SPAN",{});var _0t=s(V2e);Gsr=r(_0t,"AutoModelForImageSegmentation"),_0t.forEach(t),EGe.forEach(t),bje=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(ZL.$$.fragment,cl),Osr=i(cl),Rd=n(cl,"P",{});var mee=s(Rd);Vsr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),eW=n(mee,"A",{href:!0});var u0t=s(eW);Xsr=r(u0t,"from_pretrained()"),u0t.forEach(t),zsr=r(mee," class method or the "),oW=n(mee,"A",{href:!0});var b0t=s(oW);Wsr=r(b0t,"from_config()"),b0t.forEach(t),Qsr=r(mee,` class
method.`),mee.forEach(t),Hsr=i(cl),e8=n(cl,"P",{});var CGe=s(e8);Usr=r(CGe,"This class cannot be instantiated directly using "),X2e=n(CGe,"CODE",{});var v0t=s(X2e);Jsr=r(v0t,"__init__()"),v0t.forEach(t),Ysr=r(CGe," (throws an error)."),CGe.forEach(t),Ksr=i(cl),Ct=n(cl,"DIV",{class:!0});var M6=s(Ct);T(o8.$$.fragment,M6),Zsr=i(M6),z2e=n(M6,"P",{});var F0t=s(z2e);elr=r(F0t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),F0t.forEach(t),olr=i(M6),Pd=n(M6,"P",{});var gee=s(Pd);rlr=r(gee,`Note:
Loading a model from its configuration file does `),W2e=n(gee,"STRONG",{});var T0t=s(W2e);tlr=r(T0t,"not"),T0t.forEach(t),alr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=n(gee,"A",{href:!0});var M0t=s(rW);nlr=r(M0t,"from_pretrained()"),M0t.forEach(t),slr=r(gee," to load the model weights."),gee.forEach(t),llr=i(M6),T(GT.$$.fragment,M6),M6.forEach(t),ilr=i(cl),uo=n(cl,"DIV",{class:!0});var Ta=s(uo);T(r8.$$.fragment,Ta),dlr=i(Ta),Q2e=n(Ta,"P",{});var E0t=s(Q2e);clr=r(E0t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),E0t.forEach(t),flr=i(Ta),Ha=n(Ta,"P",{});var E6=s(Ha);mlr=r(E6,"The model class to instantiate is selected based on the "),H2e=n(E6,"CODE",{});var C0t=s(H2e);glr=r(C0t,"model_type"),C0t.forEach(t),hlr=r(E6,` property of the config object (either
passed as an argument or loaded from `),U2e=n(E6,"CODE",{});var w0t=s(U2e);plr=r(w0t,"pretrained_model_name_or_path"),w0t.forEach(t),_lr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=n(E6,"CODE",{});var A0t=s(J2e);ulr=r(A0t,"pretrained_model_name_or_path"),A0t.forEach(t),blr=r(E6,":"),E6.forEach(t),vlr=i(Ta),Y2e=n(Ta,"UL",{});var y0t=s(Y2e);OT=n(y0t,"LI",{});var ASe=s(OT);K2e=n(ASe,"STRONG",{});var L0t=s(K2e);Flr=r(L0t,"detr"),L0t.forEach(t),Tlr=r(ASe," \u2014 "),tW=n(ASe,"A",{href:!0});var x0t=s(tW);Mlr=r(x0t,"DetrForSegmentation"),x0t.forEach(t),Elr=r(ASe," (DETR model)"),ASe.forEach(t),y0t.forEach(t),Clr=i(Ta),VT=n(Ta,"P",{});var ySe=s(VT);wlr=r(ySe,"The model is set in evaluation mode by default using "),Z2e=n(ySe,"CODE",{});var $0t=s(Z2e);Alr=r($0t,"model.eval()"),$0t.forEach(t),ylr=r(ySe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e1e=n(ySe,"CODE",{});var k0t=s(e1e);Llr=r(k0t,"model.train()"),k0t.forEach(t),ySe.forEach(t),xlr=i(Ta),T(XT.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),vje=i(f),Bd=n(f,"H2",{class:!0});var wGe=s(Bd);zT=n(wGe,"A",{id:!0,class:!0,href:!0});var S0t=s(zT);o1e=n(S0t,"SPAN",{});var R0t=s(o1e);T(t8.$$.fragment,R0t),R0t.forEach(t),S0t.forEach(t),$lr=i(wGe),r1e=n(wGe,"SPAN",{});var P0t=s(r1e);klr=r(P0t,"AutoModelForSemanticSegmentation"),P0t.forEach(t),wGe.forEach(t),Fje=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(a8.$$.fragment,fl),Slr=i(fl),Id=n(fl,"P",{});var hee=s(Id);Rlr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),aW=n(hee,"A",{href:!0});var B0t=s(aW);Plr=r(B0t,"from_pretrained()"),B0t.forEach(t),Blr=r(hee," class method or the "),nW=n(hee,"A",{href:!0});var I0t=s(nW);Ilr=r(I0t,"from_config()"),I0t.forEach(t),Nlr=r(hee,` class
method.`),hee.forEach(t),qlr=i(fl),n8=n(fl,"P",{});var AGe=s(n8);jlr=r(AGe,"This class cannot be instantiated directly using "),t1e=n(AGe,"CODE",{});var N0t=s(t1e);Dlr=r(N0t,"__init__()"),N0t.forEach(t),Glr=r(AGe," (throws an error)."),AGe.forEach(t),Olr=i(fl),wt=n(fl,"DIV",{class:!0});var C6=s(wt);T(s8.$$.fragment,C6),Vlr=i(C6),a1e=n(C6,"P",{});var q0t=s(a1e);Xlr=r(q0t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),q0t.forEach(t),zlr=i(C6),Nd=n(C6,"P",{});var pee=s(Nd);Wlr=r(pee,`Note:
Loading a model from its configuration file does `),n1e=n(pee,"STRONG",{});var j0t=s(n1e);Qlr=r(j0t,"not"),j0t.forEach(t),Hlr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=n(pee,"A",{href:!0});var D0t=s(sW);Ulr=r(D0t,"from_pretrained()"),D0t.forEach(t),Jlr=r(pee," to load the model weights."),pee.forEach(t),Ylr=i(C6),T(WT.$$.fragment,C6),C6.forEach(t),Klr=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(l8.$$.fragment,Ma),Zlr=i(Ma),s1e=n(Ma,"P",{});var G0t=s(s1e);eir=r(G0t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),G0t.forEach(t),oir=i(Ma),Ua=n(Ma,"P",{});var w6=s(Ua);rir=r(w6,"The model class to instantiate is selected based on the "),l1e=n(w6,"CODE",{});var O0t=s(l1e);tir=r(O0t,"model_type"),O0t.forEach(t),air=r(w6,` property of the config object (either
passed as an argument or loaded from `),i1e=n(w6,"CODE",{});var V0t=s(i1e);nir=r(V0t,"pretrained_model_name_or_path"),V0t.forEach(t),sir=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=n(w6,"CODE",{});var X0t=s(d1e);lir=r(X0t,"pretrained_model_name_or_path"),X0t.forEach(t),iir=r(w6,":"),w6.forEach(t),dir=i(Ma),Ja=n(Ma,"UL",{});var A6=s(Ja);QT=n(A6,"LI",{});var LSe=s(QT);c1e=n(LSe,"STRONG",{});var z0t=s(c1e);cir=r(z0t,"beit"),z0t.forEach(t),fir=r(LSe," \u2014 "),lW=n(LSe,"A",{href:!0});var W0t=s(lW);mir=r(W0t,"BeitForSemanticSegmentation"),W0t.forEach(t),gir=r(LSe," (BEiT model)"),LSe.forEach(t),hir=i(A6),HT=n(A6,"LI",{});var xSe=s(HT);f1e=n(xSe,"STRONG",{});var Q0t=s(f1e);pir=r(Q0t,"data2vec-vision"),Q0t.forEach(t),_ir=r(xSe," \u2014 "),iW=n(xSe,"A",{href:!0});var H0t=s(iW);uir=r(H0t,"Data2VecVisionForSemanticSegmentation"),H0t.forEach(t),bir=r(xSe," (Data2VecVision model)"),xSe.forEach(t),vir=i(A6),UT=n(A6,"LI",{});var $Se=s(UT);m1e=n($Se,"STRONG",{});var U0t=s(m1e);Fir=r(U0t,"dpt"),U0t.forEach(t),Tir=r($Se," \u2014 "),dW=n($Se,"A",{href:!0});var J0t=s(dW);Mir=r(J0t,"DPTForSemanticSegmentation"),J0t.forEach(t),Eir=r($Se," (DPT model)"),$Se.forEach(t),Cir=i(A6),JT=n(A6,"LI",{});var kSe=s(JT);g1e=n(kSe,"STRONG",{});var Y0t=s(g1e);wir=r(Y0t,"segformer"),Y0t.forEach(t),Air=r(kSe," \u2014 "),cW=n(kSe,"A",{href:!0});var K0t=s(cW);yir=r(K0t,"SegformerForSemanticSegmentation"),K0t.forEach(t),Lir=r(kSe," (SegFormer model)"),kSe.forEach(t),A6.forEach(t),xir=i(Ma),YT=n(Ma,"P",{});var SSe=s(YT);$ir=r(SSe,"The model is set in evaluation mode by default using "),h1e=n(SSe,"CODE",{});var Z0t=s(h1e);kir=r(Z0t,"model.eval()"),Z0t.forEach(t),Sir=r(SSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p1e=n(SSe,"CODE",{});var eFt=s(p1e);Rir=r(eFt,"model.train()"),eFt.forEach(t),SSe.forEach(t),Pir=i(Ma),T(KT.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),Tje=i(f),qd=n(f,"H2",{class:!0});var yGe=s(qd);ZT=n(yGe,"A",{id:!0,class:!0,href:!0});var oFt=s(ZT);_1e=n(oFt,"SPAN",{});var rFt=s(_1e);T(i8.$$.fragment,rFt),rFt.forEach(t),oFt.forEach(t),Bir=i(yGe),u1e=n(yGe,"SPAN",{});var tFt=s(u1e);Iir=r(tFt,"AutoModelForInstanceSegmentation"),tFt.forEach(t),yGe.forEach(t),Mje=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(d8.$$.fragment,ml),Nir=i(ml),jd=n(ml,"P",{});var _ee=s(jd);qir=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),fW=n(_ee,"A",{href:!0});var aFt=s(fW);jir=r(aFt,"from_pretrained()"),aFt.forEach(t),Dir=r(_ee," class method or the "),mW=n(_ee,"A",{href:!0});var nFt=s(mW);Gir=r(nFt,"from_config()"),nFt.forEach(t),Oir=r(_ee,` class
method.`),_ee.forEach(t),Vir=i(ml),c8=n(ml,"P",{});var LGe=s(c8);Xir=r(LGe,"This class cannot be instantiated directly using "),b1e=n(LGe,"CODE",{});var sFt=s(b1e);zir=r(sFt,"__init__()"),sFt.forEach(t),Wir=r(LGe," (throws an error)."),LGe.forEach(t),Qir=i(ml),At=n(ml,"DIV",{class:!0});var y6=s(At);T(f8.$$.fragment,y6),Hir=i(y6),v1e=n(y6,"P",{});var lFt=s(v1e);Uir=r(lFt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),lFt.forEach(t),Jir=i(y6),Dd=n(y6,"P",{});var uee=s(Dd);Yir=r(uee,`Note:
Loading a model from its configuration file does `),F1e=n(uee,"STRONG",{});var iFt=s(F1e);Kir=r(iFt,"not"),iFt.forEach(t),Zir=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gW=n(uee,"A",{href:!0});var dFt=s(gW);edr=r(dFt,"from_pretrained()"),dFt.forEach(t),odr=r(uee," to load the model weights."),uee.forEach(t),rdr=i(y6),T(e7.$$.fragment,y6),y6.forEach(t),tdr=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(m8.$$.fragment,Ea),adr=i(Ea),T1e=n(Ea,"P",{});var cFt=s(T1e);ndr=r(cFt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),cFt.forEach(t),sdr=i(Ea),Ya=n(Ea,"P",{});var L6=s(Ya);ldr=r(L6,"The model class to instantiate is selected based on the "),M1e=n(L6,"CODE",{});var fFt=s(M1e);idr=r(fFt,"model_type"),fFt.forEach(t),ddr=r(L6,` property of the config object (either
passed as an argument or loaded from `),E1e=n(L6,"CODE",{});var mFt=s(E1e);cdr=r(mFt,"pretrained_model_name_or_path"),mFt.forEach(t),fdr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=n(L6,"CODE",{});var gFt=s(C1e);mdr=r(gFt,"pretrained_model_name_or_path"),gFt.forEach(t),gdr=r(L6,":"),L6.forEach(t),hdr=i(Ea),w1e=n(Ea,"UL",{});var hFt=s(w1e);o7=n(hFt,"LI",{});var RSe=s(o7);A1e=n(RSe,"STRONG",{});var pFt=s(A1e);pdr=r(pFt,"maskformer"),pFt.forEach(t),_dr=r(RSe," \u2014 "),hW=n(RSe,"A",{href:!0});var _Ft=s(hW);udr=r(_Ft,"MaskFormerForInstanceSegmentation"),_Ft.forEach(t),bdr=r(RSe," (MaskFormer model)"),RSe.forEach(t),hFt.forEach(t),vdr=i(Ea),r7=n(Ea,"P",{});var PSe=s(r7);Fdr=r(PSe,"The model is set in evaluation mode by default using "),y1e=n(PSe,"CODE",{});var uFt=s(y1e);Tdr=r(uFt,"model.eval()"),uFt.forEach(t),Mdr=r(PSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L1e=n(PSe,"CODE",{});var bFt=s(L1e);Edr=r(bFt,"model.train()"),bFt.forEach(t),PSe.forEach(t),Cdr=i(Ea),T(t7.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),Eje=i(f),Gd=n(f,"H2",{class:!0});var xGe=s(Gd);a7=n(xGe,"A",{id:!0,class:!0,href:!0});var vFt=s(a7);x1e=n(vFt,"SPAN",{});var FFt=s(x1e);T(g8.$$.fragment,FFt),FFt.forEach(t),vFt.forEach(t),wdr=i(xGe),$1e=n(xGe,"SPAN",{});var TFt=s($1e);Adr=r(TFt,"TFAutoModel"),TFt.forEach(t),xGe.forEach(t),Cje=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(h8.$$.fragment,gl),ydr=i(gl),Od=n(gl,"P",{});var bee=s(Od);Ldr=r(bee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pW=n(bee,"A",{href:!0});var MFt=s(pW);xdr=r(MFt,"from_pretrained()"),MFt.forEach(t),$dr=r(bee," class method or the "),_W=n(bee,"A",{href:!0});var EFt=s(_W);kdr=r(EFt,"from_config()"),EFt.forEach(t),Sdr=r(bee,` class
method.`),bee.forEach(t),Rdr=i(gl),p8=n(gl,"P",{});var $Ge=s(p8);Pdr=r($Ge,"This class cannot be instantiated directly using "),k1e=n($Ge,"CODE",{});var CFt=s(k1e);Bdr=r(CFt,"__init__()"),CFt.forEach(t),Idr=r($Ge," (throws an error)."),$Ge.forEach(t),Ndr=i(gl),yt=n(gl,"DIV",{class:!0});var x6=s(yt);T(_8.$$.fragment,x6),qdr=i(x6),S1e=n(x6,"P",{});var wFt=s(S1e);jdr=r(wFt,"Instantiates one of the base model classes of the library from a configuration."),wFt.forEach(t),Ddr=i(x6),Vd=n(x6,"P",{});var vee=s(Vd);Gdr=r(vee,`Note:
Loading a model from its configuration file does `),R1e=n(vee,"STRONG",{});var AFt=s(R1e);Odr=r(AFt,"not"),AFt.forEach(t),Vdr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(vee,"A",{href:!0});var yFt=s(uW);Xdr=r(yFt,"from_pretrained()"),yFt.forEach(t),zdr=r(vee," to load the model weights."),vee.forEach(t),Wdr=i(x6),T(n7.$$.fragment,x6),x6.forEach(t),Qdr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(u8.$$.fragment,hl),Hdr=i(hl),P1e=n(hl,"P",{});var LFt=s(P1e);Udr=r(LFt,"Instantiate one of the base model classes of the library from a pretrained model."),LFt.forEach(t),Jdr=i(hl),Ka=n(hl,"P",{});var $6=s(Ka);Ydr=r($6,"The model class to instantiate is selected based on the "),B1e=n($6,"CODE",{});var xFt=s(B1e);Kdr=r(xFt,"model_type"),xFt.forEach(t),Zdr=r($6,` property of the config object (either
passed as an argument or loaded from `),I1e=n($6,"CODE",{});var $Ft=s(I1e);ecr=r($Ft,"pretrained_model_name_or_path"),$Ft.forEach(t),ocr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=n($6,"CODE",{});var kFt=s(N1e);rcr=r(kFt,"pretrained_model_name_or_path"),kFt.forEach(t),tcr=r($6,":"),$6.forEach(t),acr=i(hl),q=n(hl,"UL",{});var D=s(q);s7=n(D,"LI",{});var BSe=s(s7);q1e=n(BSe,"STRONG",{});var SFt=s(q1e);ncr=r(SFt,"albert"),SFt.forEach(t),scr=r(BSe," \u2014 "),bW=n(BSe,"A",{href:!0});var RFt=s(bW);lcr=r(RFt,"TFAlbertModel"),RFt.forEach(t),icr=r(BSe," (ALBERT model)"),BSe.forEach(t),dcr=i(D),l7=n(D,"LI",{});var ISe=s(l7);j1e=n(ISe,"STRONG",{});var PFt=s(j1e);ccr=r(PFt,"bart"),PFt.forEach(t),fcr=r(ISe," \u2014 "),vW=n(ISe,"A",{href:!0});var BFt=s(vW);mcr=r(BFt,"TFBartModel"),BFt.forEach(t),gcr=r(ISe," (BART model)"),ISe.forEach(t),hcr=i(D),i7=n(D,"LI",{});var NSe=s(i7);D1e=n(NSe,"STRONG",{});var IFt=s(D1e);pcr=r(IFt,"bert"),IFt.forEach(t),_cr=r(NSe," \u2014 "),FW=n(NSe,"A",{href:!0});var NFt=s(FW);ucr=r(NFt,"TFBertModel"),NFt.forEach(t),bcr=r(NSe," (BERT model)"),NSe.forEach(t),vcr=i(D),d7=n(D,"LI",{});var qSe=s(d7);G1e=n(qSe,"STRONG",{});var qFt=s(G1e);Fcr=r(qFt,"blenderbot"),qFt.forEach(t),Tcr=r(qSe," \u2014 "),TW=n(qSe,"A",{href:!0});var jFt=s(TW);Mcr=r(jFt,"TFBlenderbotModel"),jFt.forEach(t),Ecr=r(qSe," (Blenderbot model)"),qSe.forEach(t),Ccr=i(D),c7=n(D,"LI",{});var jSe=s(c7);O1e=n(jSe,"STRONG",{});var DFt=s(O1e);wcr=r(DFt,"blenderbot-small"),DFt.forEach(t),Acr=r(jSe," \u2014 "),MW=n(jSe,"A",{href:!0});var GFt=s(MW);ycr=r(GFt,"TFBlenderbotSmallModel"),GFt.forEach(t),Lcr=r(jSe," (BlenderbotSmall model)"),jSe.forEach(t),xcr=i(D),f7=n(D,"LI",{});var DSe=s(f7);V1e=n(DSe,"STRONG",{});var OFt=s(V1e);$cr=r(OFt,"camembert"),OFt.forEach(t),kcr=r(DSe," \u2014 "),EW=n(DSe,"A",{href:!0});var VFt=s(EW);Scr=r(VFt,"TFCamembertModel"),VFt.forEach(t),Rcr=r(DSe," (CamemBERT model)"),DSe.forEach(t),Pcr=i(D),m7=n(D,"LI",{});var GSe=s(m7);X1e=n(GSe,"STRONG",{});var XFt=s(X1e);Bcr=r(XFt,"clip"),XFt.forEach(t),Icr=r(GSe," \u2014 "),CW=n(GSe,"A",{href:!0});var zFt=s(CW);Ncr=r(zFt,"TFCLIPModel"),zFt.forEach(t),qcr=r(GSe," (CLIP model)"),GSe.forEach(t),jcr=i(D),g7=n(D,"LI",{});var OSe=s(g7);z1e=n(OSe,"STRONG",{});var WFt=s(z1e);Dcr=r(WFt,"convbert"),WFt.forEach(t),Gcr=r(OSe," \u2014 "),wW=n(OSe,"A",{href:!0});var QFt=s(wW);Ocr=r(QFt,"TFConvBertModel"),QFt.forEach(t),Vcr=r(OSe," (ConvBERT model)"),OSe.forEach(t),Xcr=i(D),h7=n(D,"LI",{});var VSe=s(h7);W1e=n(VSe,"STRONG",{});var HFt=s(W1e);zcr=r(HFt,"convnext"),HFt.forEach(t),Wcr=r(VSe," \u2014 "),AW=n(VSe,"A",{href:!0});var UFt=s(AW);Qcr=r(UFt,"TFConvNextModel"),UFt.forEach(t),Hcr=r(VSe," (ConvNext model)"),VSe.forEach(t),Ucr=i(D),p7=n(D,"LI",{});var XSe=s(p7);Q1e=n(XSe,"STRONG",{});var JFt=s(Q1e);Jcr=r(JFt,"ctrl"),JFt.forEach(t),Ycr=r(XSe," \u2014 "),yW=n(XSe,"A",{href:!0});var YFt=s(yW);Kcr=r(YFt,"TFCTRLModel"),YFt.forEach(t),Zcr=r(XSe," (CTRL model)"),XSe.forEach(t),efr=i(D),_7=n(D,"LI",{});var zSe=s(_7);H1e=n(zSe,"STRONG",{});var KFt=s(H1e);ofr=r(KFt,"data2vec-vision"),KFt.forEach(t),rfr=r(zSe," \u2014 "),LW=n(zSe,"A",{href:!0});var ZFt=s(LW);tfr=r(ZFt,"TFData2VecVisionModel"),ZFt.forEach(t),afr=r(zSe," (Data2VecVision model)"),zSe.forEach(t),nfr=i(D),u7=n(D,"LI",{});var WSe=s(u7);U1e=n(WSe,"STRONG",{});var eTt=s(U1e);sfr=r(eTt,"deberta"),eTt.forEach(t),lfr=r(WSe," \u2014 "),xW=n(WSe,"A",{href:!0});var oTt=s(xW);ifr=r(oTt,"TFDebertaModel"),oTt.forEach(t),dfr=r(WSe," (DeBERTa model)"),WSe.forEach(t),cfr=i(D),b7=n(D,"LI",{});var QSe=s(b7);J1e=n(QSe,"STRONG",{});var rTt=s(J1e);ffr=r(rTt,"deberta-v2"),rTt.forEach(t),mfr=r(QSe," \u2014 "),$W=n(QSe,"A",{href:!0});var tTt=s($W);gfr=r(tTt,"TFDebertaV2Model"),tTt.forEach(t),hfr=r(QSe," (DeBERTa-v2 model)"),QSe.forEach(t),pfr=i(D),v7=n(D,"LI",{});var HSe=s(v7);Y1e=n(HSe,"STRONG",{});var aTt=s(Y1e);_fr=r(aTt,"distilbert"),aTt.forEach(t),ufr=r(HSe," \u2014 "),kW=n(HSe,"A",{href:!0});var nTt=s(kW);bfr=r(nTt,"TFDistilBertModel"),nTt.forEach(t),vfr=r(HSe," (DistilBERT model)"),HSe.forEach(t),Ffr=i(D),F7=n(D,"LI",{});var USe=s(F7);K1e=n(USe,"STRONG",{});var sTt=s(K1e);Tfr=r(sTt,"dpr"),sTt.forEach(t),Mfr=r(USe," \u2014 "),SW=n(USe,"A",{href:!0});var lTt=s(SW);Efr=r(lTt,"TFDPRQuestionEncoder"),lTt.forEach(t),Cfr=r(USe," (DPR model)"),USe.forEach(t),wfr=i(D),T7=n(D,"LI",{});var JSe=s(T7);Z1e=n(JSe,"STRONG",{});var iTt=s(Z1e);Afr=r(iTt,"electra"),iTt.forEach(t),yfr=r(JSe," \u2014 "),RW=n(JSe,"A",{href:!0});var dTt=s(RW);Lfr=r(dTt,"TFElectraModel"),dTt.forEach(t),xfr=r(JSe," (ELECTRA model)"),JSe.forEach(t),$fr=i(D),M7=n(D,"LI",{});var YSe=s(M7);ebe=n(YSe,"STRONG",{});var cTt=s(ebe);kfr=r(cTt,"flaubert"),cTt.forEach(t),Sfr=r(YSe," \u2014 "),PW=n(YSe,"A",{href:!0});var fTt=s(PW);Rfr=r(fTt,"TFFlaubertModel"),fTt.forEach(t),Pfr=r(YSe," (FlauBERT model)"),YSe.forEach(t),Bfr=i(D),Is=n(D,"LI",{});var U$=s(Is);obe=n(U$,"STRONG",{});var mTt=s(obe);Ifr=r(mTt,"funnel"),mTt.forEach(t),Nfr=r(U$," \u2014 "),BW=n(U$,"A",{href:!0});var gTt=s(BW);qfr=r(gTt,"TFFunnelModel"),gTt.forEach(t),jfr=r(U$," or "),IW=n(U$,"A",{href:!0});var hTt=s(IW);Dfr=r(hTt,"TFFunnelBaseModel"),hTt.forEach(t),Gfr=r(U$," (Funnel Transformer model)"),U$.forEach(t),Ofr=i(D),E7=n(D,"LI",{});var KSe=s(E7);rbe=n(KSe,"STRONG",{});var pTt=s(rbe);Vfr=r(pTt,"gpt2"),pTt.forEach(t),Xfr=r(KSe," \u2014 "),NW=n(KSe,"A",{href:!0});var _Tt=s(NW);zfr=r(_Tt,"TFGPT2Model"),_Tt.forEach(t),Wfr=r(KSe," (OpenAI GPT-2 model)"),KSe.forEach(t),Qfr=i(D),C7=n(D,"LI",{});var ZSe=s(C7);tbe=n(ZSe,"STRONG",{});var uTt=s(tbe);Hfr=r(uTt,"gptj"),uTt.forEach(t),Ufr=r(ZSe," \u2014 "),qW=n(ZSe,"A",{href:!0});var bTt=s(qW);Jfr=r(bTt,"TFGPTJModel"),bTt.forEach(t),Yfr=r(ZSe," (GPT-J model)"),ZSe.forEach(t),Kfr=i(D),w7=n(D,"LI",{});var eRe=s(w7);abe=n(eRe,"STRONG",{});var vTt=s(abe);Zfr=r(vTt,"hubert"),vTt.forEach(t),emr=r(eRe," \u2014 "),jW=n(eRe,"A",{href:!0});var FTt=s(jW);omr=r(FTt,"TFHubertModel"),FTt.forEach(t),rmr=r(eRe," (Hubert model)"),eRe.forEach(t),tmr=i(D),A7=n(D,"LI",{});var oRe=s(A7);nbe=n(oRe,"STRONG",{});var TTt=s(nbe);amr=r(TTt,"layoutlm"),TTt.forEach(t),nmr=r(oRe," \u2014 "),DW=n(oRe,"A",{href:!0});var MTt=s(DW);smr=r(MTt,"TFLayoutLMModel"),MTt.forEach(t),lmr=r(oRe," (LayoutLM model)"),oRe.forEach(t),imr=i(D),y7=n(D,"LI",{});var rRe=s(y7);sbe=n(rRe,"STRONG",{});var ETt=s(sbe);dmr=r(ETt,"led"),ETt.forEach(t),cmr=r(rRe," \u2014 "),GW=n(rRe,"A",{href:!0});var CTt=s(GW);fmr=r(CTt,"TFLEDModel"),CTt.forEach(t),mmr=r(rRe," (LED model)"),rRe.forEach(t),gmr=i(D),L7=n(D,"LI",{});var tRe=s(L7);lbe=n(tRe,"STRONG",{});var wTt=s(lbe);hmr=r(wTt,"longformer"),wTt.forEach(t),pmr=r(tRe," \u2014 "),OW=n(tRe,"A",{href:!0});var ATt=s(OW);_mr=r(ATt,"TFLongformerModel"),ATt.forEach(t),umr=r(tRe," (Longformer model)"),tRe.forEach(t),bmr=i(D),x7=n(D,"LI",{});var aRe=s(x7);ibe=n(aRe,"STRONG",{});var yTt=s(ibe);vmr=r(yTt,"lxmert"),yTt.forEach(t),Fmr=r(aRe," \u2014 "),VW=n(aRe,"A",{href:!0});var LTt=s(VW);Tmr=r(LTt,"TFLxmertModel"),LTt.forEach(t),Mmr=r(aRe," (LXMERT model)"),aRe.forEach(t),Emr=i(D),$7=n(D,"LI",{});var nRe=s($7);dbe=n(nRe,"STRONG",{});var xTt=s(dbe);Cmr=r(xTt,"marian"),xTt.forEach(t),wmr=r(nRe," \u2014 "),XW=n(nRe,"A",{href:!0});var $Tt=s(XW);Amr=r($Tt,"TFMarianModel"),$Tt.forEach(t),ymr=r(nRe," (Marian model)"),nRe.forEach(t),Lmr=i(D),k7=n(D,"LI",{});var sRe=s(k7);cbe=n(sRe,"STRONG",{});var kTt=s(cbe);xmr=r(kTt,"mbart"),kTt.forEach(t),$mr=r(sRe," \u2014 "),zW=n(sRe,"A",{href:!0});var STt=s(zW);kmr=r(STt,"TFMBartModel"),STt.forEach(t),Smr=r(sRe," (mBART model)"),sRe.forEach(t),Rmr=i(D),S7=n(D,"LI",{});var lRe=s(S7);fbe=n(lRe,"STRONG",{});var RTt=s(fbe);Pmr=r(RTt,"mobilebert"),RTt.forEach(t),Bmr=r(lRe," \u2014 "),WW=n(lRe,"A",{href:!0});var PTt=s(WW);Imr=r(PTt,"TFMobileBertModel"),PTt.forEach(t),Nmr=r(lRe," (MobileBERT model)"),lRe.forEach(t),qmr=i(D),R7=n(D,"LI",{});var iRe=s(R7);mbe=n(iRe,"STRONG",{});var BTt=s(mbe);jmr=r(BTt,"mpnet"),BTt.forEach(t),Dmr=r(iRe," \u2014 "),QW=n(iRe,"A",{href:!0});var ITt=s(QW);Gmr=r(ITt,"TFMPNetModel"),ITt.forEach(t),Omr=r(iRe," (MPNet model)"),iRe.forEach(t),Vmr=i(D),P7=n(D,"LI",{});var dRe=s(P7);gbe=n(dRe,"STRONG",{});var NTt=s(gbe);Xmr=r(NTt,"mt5"),NTt.forEach(t),zmr=r(dRe," \u2014 "),HW=n(dRe,"A",{href:!0});var qTt=s(HW);Wmr=r(qTt,"TFMT5Model"),qTt.forEach(t),Qmr=r(dRe," (mT5 model)"),dRe.forEach(t),Hmr=i(D),B7=n(D,"LI",{});var cRe=s(B7);hbe=n(cRe,"STRONG",{});var jTt=s(hbe);Umr=r(jTt,"openai-gpt"),jTt.forEach(t),Jmr=r(cRe," \u2014 "),UW=n(cRe,"A",{href:!0});var DTt=s(UW);Ymr=r(DTt,"TFOpenAIGPTModel"),DTt.forEach(t),Kmr=r(cRe," (OpenAI GPT model)"),cRe.forEach(t),Zmr=i(D),I7=n(D,"LI",{});var fRe=s(I7);pbe=n(fRe,"STRONG",{});var GTt=s(pbe);egr=r(GTt,"pegasus"),GTt.forEach(t),ogr=r(fRe," \u2014 "),JW=n(fRe,"A",{href:!0});var OTt=s(JW);rgr=r(OTt,"TFPegasusModel"),OTt.forEach(t),tgr=r(fRe," (Pegasus model)"),fRe.forEach(t),agr=i(D),N7=n(D,"LI",{});var mRe=s(N7);_be=n(mRe,"STRONG",{});var VTt=s(_be);ngr=r(VTt,"rembert"),VTt.forEach(t),sgr=r(mRe," \u2014 "),YW=n(mRe,"A",{href:!0});var XTt=s(YW);lgr=r(XTt,"TFRemBertModel"),XTt.forEach(t),igr=r(mRe," (RemBERT model)"),mRe.forEach(t),dgr=i(D),q7=n(D,"LI",{});var gRe=s(q7);ube=n(gRe,"STRONG",{});var zTt=s(ube);cgr=r(zTt,"roberta"),zTt.forEach(t),fgr=r(gRe," \u2014 "),KW=n(gRe,"A",{href:!0});var WTt=s(KW);mgr=r(WTt,"TFRobertaModel"),WTt.forEach(t),ggr=r(gRe," (RoBERTa model)"),gRe.forEach(t),hgr=i(D),j7=n(D,"LI",{});var hRe=s(j7);bbe=n(hRe,"STRONG",{});var QTt=s(bbe);pgr=r(QTt,"roformer"),QTt.forEach(t),_gr=r(hRe," \u2014 "),ZW=n(hRe,"A",{href:!0});var HTt=s(ZW);ugr=r(HTt,"TFRoFormerModel"),HTt.forEach(t),bgr=r(hRe," (RoFormer model)"),hRe.forEach(t),vgr=i(D),D7=n(D,"LI",{});var pRe=s(D7);vbe=n(pRe,"STRONG",{});var UTt=s(vbe);Fgr=r(UTt,"speech_to_text"),UTt.forEach(t),Tgr=r(pRe," \u2014 "),eQ=n(pRe,"A",{href:!0});var JTt=s(eQ);Mgr=r(JTt,"TFSpeech2TextModel"),JTt.forEach(t),Egr=r(pRe," (Speech2Text model)"),pRe.forEach(t),Cgr=i(D),G7=n(D,"LI",{});var _Re=s(G7);Fbe=n(_Re,"STRONG",{});var YTt=s(Fbe);wgr=r(YTt,"swin"),YTt.forEach(t),Agr=r(_Re," \u2014 "),oQ=n(_Re,"A",{href:!0});var KTt=s(oQ);ygr=r(KTt,"TFSwinModel"),KTt.forEach(t),Lgr=r(_Re," (Swin model)"),_Re.forEach(t),xgr=i(D),O7=n(D,"LI",{});var uRe=s(O7);Tbe=n(uRe,"STRONG",{});var ZTt=s(Tbe);$gr=r(ZTt,"t5"),ZTt.forEach(t),kgr=r(uRe," \u2014 "),rQ=n(uRe,"A",{href:!0});var e7t=s(rQ);Sgr=r(e7t,"TFT5Model"),e7t.forEach(t),Rgr=r(uRe," (T5 model)"),uRe.forEach(t),Pgr=i(D),V7=n(D,"LI",{});var bRe=s(V7);Mbe=n(bRe,"STRONG",{});var o7t=s(Mbe);Bgr=r(o7t,"tapas"),o7t.forEach(t),Igr=r(bRe," \u2014 "),tQ=n(bRe,"A",{href:!0});var r7t=s(tQ);Ngr=r(r7t,"TFTapasModel"),r7t.forEach(t),qgr=r(bRe," (TAPAS model)"),bRe.forEach(t),jgr=i(D),X7=n(D,"LI",{});var vRe=s(X7);Ebe=n(vRe,"STRONG",{});var t7t=s(Ebe);Dgr=r(t7t,"transfo-xl"),t7t.forEach(t),Ggr=r(vRe," \u2014 "),aQ=n(vRe,"A",{href:!0});var a7t=s(aQ);Ogr=r(a7t,"TFTransfoXLModel"),a7t.forEach(t),Vgr=r(vRe," (Transformer-XL model)"),vRe.forEach(t),Xgr=i(D),z7=n(D,"LI",{});var FRe=s(z7);Cbe=n(FRe,"STRONG",{});var n7t=s(Cbe);zgr=r(n7t,"vit"),n7t.forEach(t),Wgr=r(FRe," \u2014 "),nQ=n(FRe,"A",{href:!0});var s7t=s(nQ);Qgr=r(s7t,"TFViTModel"),s7t.forEach(t),Hgr=r(FRe," (ViT model)"),FRe.forEach(t),Ugr=i(D),W7=n(D,"LI",{});var TRe=s(W7);wbe=n(TRe,"STRONG",{});var l7t=s(wbe);Jgr=r(l7t,"vit_mae"),l7t.forEach(t),Ygr=r(TRe," \u2014 "),sQ=n(TRe,"A",{href:!0});var i7t=s(sQ);Kgr=r(i7t,"TFViTMAEModel"),i7t.forEach(t),Zgr=r(TRe," (ViTMAE model)"),TRe.forEach(t),ehr=i(D),Q7=n(D,"LI",{});var MRe=s(Q7);Abe=n(MRe,"STRONG",{});var d7t=s(Abe);ohr=r(d7t,"wav2vec2"),d7t.forEach(t),rhr=r(MRe," \u2014 "),lQ=n(MRe,"A",{href:!0});var c7t=s(lQ);thr=r(c7t,"TFWav2Vec2Model"),c7t.forEach(t),ahr=r(MRe," (Wav2Vec2 model)"),MRe.forEach(t),nhr=i(D),H7=n(D,"LI",{});var ERe=s(H7);ybe=n(ERe,"STRONG",{});var f7t=s(ybe);shr=r(f7t,"xlm"),f7t.forEach(t),lhr=r(ERe," \u2014 "),iQ=n(ERe,"A",{href:!0});var m7t=s(iQ);ihr=r(m7t,"TFXLMModel"),m7t.forEach(t),dhr=r(ERe," (XLM model)"),ERe.forEach(t),chr=i(D),U7=n(D,"LI",{});var CRe=s(U7);Lbe=n(CRe,"STRONG",{});var g7t=s(Lbe);fhr=r(g7t,"xlm-roberta"),g7t.forEach(t),mhr=r(CRe," \u2014 "),dQ=n(CRe,"A",{href:!0});var h7t=s(dQ);ghr=r(h7t,"TFXLMRobertaModel"),h7t.forEach(t),hhr=r(CRe," (XLM-RoBERTa model)"),CRe.forEach(t),phr=i(D),J7=n(D,"LI",{});var wRe=s(J7);xbe=n(wRe,"STRONG",{});var p7t=s(xbe);_hr=r(p7t,"xlnet"),p7t.forEach(t),uhr=r(wRe," \u2014 "),cQ=n(wRe,"A",{href:!0});var _7t=s(cQ);bhr=r(_7t,"TFXLNetModel"),_7t.forEach(t),vhr=r(wRe," (XLNet model)"),wRe.forEach(t),D.forEach(t),Fhr=i(hl),T(Y7.$$.fragment,hl),hl.forEach(t),gl.forEach(t),wje=i(f),Xd=n(f,"H2",{class:!0});var kGe=s(Xd);K7=n(kGe,"A",{id:!0,class:!0,href:!0});var u7t=s(K7);$be=n(u7t,"SPAN",{});var b7t=s($be);T(b8.$$.fragment,b7t),b7t.forEach(t),u7t.forEach(t),Thr=i(kGe),kbe=n(kGe,"SPAN",{});var v7t=s(kbe);Mhr=r(v7t,"TFAutoModelForPreTraining"),v7t.forEach(t),kGe.forEach(t),Aje=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(v8.$$.fragment,pl),Ehr=i(pl),zd=n(pl,"P",{});var Fee=s(zd);Chr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fQ=n(Fee,"A",{href:!0});var F7t=s(fQ);whr=r(F7t,"from_pretrained()"),F7t.forEach(t),Ahr=r(Fee," class method or the "),mQ=n(Fee,"A",{href:!0});var T7t=s(mQ);yhr=r(T7t,"from_config()"),T7t.forEach(t),Lhr=r(Fee,` class
method.`),Fee.forEach(t),xhr=i(pl),F8=n(pl,"P",{});var SGe=s(F8);$hr=r(SGe,"This class cannot be instantiated directly using "),Sbe=n(SGe,"CODE",{});var M7t=s(Sbe);khr=r(M7t,"__init__()"),M7t.forEach(t),Shr=r(SGe," (throws an error)."),SGe.forEach(t),Rhr=i(pl),Lt=n(pl,"DIV",{class:!0});var k6=s(Lt);T(T8.$$.fragment,k6),Phr=i(k6),Rbe=n(k6,"P",{});var E7t=s(Rbe);Bhr=r(E7t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),E7t.forEach(t),Ihr=i(k6),Wd=n(k6,"P",{});var Tee=s(Wd);Nhr=r(Tee,`Note:
Loading a model from its configuration file does `),Pbe=n(Tee,"STRONG",{});var C7t=s(Pbe);qhr=r(C7t,"not"),C7t.forEach(t),jhr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=n(Tee,"A",{href:!0});var w7t=s(gQ);Dhr=r(w7t,"from_pretrained()"),w7t.forEach(t),Ghr=r(Tee," to load the model weights."),Tee.forEach(t),Ohr=i(k6),T(Z7.$$.fragment,k6),k6.forEach(t),Vhr=i(pl),Ar=n(pl,"DIV",{class:!0});var _l=s(Ar);T(M8.$$.fragment,_l),Xhr=i(_l),Bbe=n(_l,"P",{});var A7t=s(Bbe);zhr=r(A7t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),A7t.forEach(t),Whr=i(_l),Za=n(_l,"P",{});var S6=s(Za);Qhr=r(S6,"The model class to instantiate is selected based on the "),Ibe=n(S6,"CODE",{});var y7t=s(Ibe);Hhr=r(y7t,"model_type"),y7t.forEach(t),Uhr=r(S6,` property of the config object (either
passed as an argument or loaded from `),Nbe=n(S6,"CODE",{});var L7t=s(Nbe);Jhr=r(L7t,"pretrained_model_name_or_path"),L7t.forEach(t),Yhr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qbe=n(S6,"CODE",{});var x7t=s(qbe);Khr=r(x7t,"pretrained_model_name_or_path"),x7t.forEach(t),Zhr=r(S6,":"),S6.forEach(t),epr=i(_l),se=n(_l,"UL",{});var le=s(se);eM=n(le,"LI",{});var ARe=s(eM);jbe=n(ARe,"STRONG",{});var $7t=s(jbe);opr=r($7t,"albert"),$7t.forEach(t),rpr=r(ARe," \u2014 "),hQ=n(ARe,"A",{href:!0});var k7t=s(hQ);tpr=r(k7t,"TFAlbertForPreTraining"),k7t.forEach(t),apr=r(ARe," (ALBERT model)"),ARe.forEach(t),npr=i(le),oM=n(le,"LI",{});var yRe=s(oM);Dbe=n(yRe,"STRONG",{});var S7t=s(Dbe);spr=r(S7t,"bart"),S7t.forEach(t),lpr=r(yRe," \u2014 "),pQ=n(yRe,"A",{href:!0});var R7t=s(pQ);ipr=r(R7t,"TFBartForConditionalGeneration"),R7t.forEach(t),dpr=r(yRe," (BART model)"),yRe.forEach(t),cpr=i(le),rM=n(le,"LI",{});var LRe=s(rM);Gbe=n(LRe,"STRONG",{});var P7t=s(Gbe);fpr=r(P7t,"bert"),P7t.forEach(t),mpr=r(LRe," \u2014 "),_Q=n(LRe,"A",{href:!0});var B7t=s(_Q);gpr=r(B7t,"TFBertForPreTraining"),B7t.forEach(t),hpr=r(LRe," (BERT model)"),LRe.forEach(t),ppr=i(le),tM=n(le,"LI",{});var xRe=s(tM);Obe=n(xRe,"STRONG",{});var I7t=s(Obe);_pr=r(I7t,"camembert"),I7t.forEach(t),upr=r(xRe," \u2014 "),uQ=n(xRe,"A",{href:!0});var N7t=s(uQ);bpr=r(N7t,"TFCamembertForMaskedLM"),N7t.forEach(t),vpr=r(xRe," (CamemBERT model)"),xRe.forEach(t),Fpr=i(le),aM=n(le,"LI",{});var $Re=s(aM);Vbe=n($Re,"STRONG",{});var q7t=s(Vbe);Tpr=r(q7t,"ctrl"),q7t.forEach(t),Mpr=r($Re," \u2014 "),bQ=n($Re,"A",{href:!0});var j7t=s(bQ);Epr=r(j7t,"TFCTRLLMHeadModel"),j7t.forEach(t),Cpr=r($Re," (CTRL model)"),$Re.forEach(t),wpr=i(le),nM=n(le,"LI",{});var kRe=s(nM);Xbe=n(kRe,"STRONG",{});var D7t=s(Xbe);Apr=r(D7t,"distilbert"),D7t.forEach(t),ypr=r(kRe," \u2014 "),vQ=n(kRe,"A",{href:!0});var G7t=s(vQ);Lpr=r(G7t,"TFDistilBertForMaskedLM"),G7t.forEach(t),xpr=r(kRe," (DistilBERT model)"),kRe.forEach(t),$pr=i(le),sM=n(le,"LI",{});var SRe=s(sM);zbe=n(SRe,"STRONG",{});var O7t=s(zbe);kpr=r(O7t,"electra"),O7t.forEach(t),Spr=r(SRe," \u2014 "),FQ=n(SRe,"A",{href:!0});var V7t=s(FQ);Rpr=r(V7t,"TFElectraForPreTraining"),V7t.forEach(t),Ppr=r(SRe," (ELECTRA model)"),SRe.forEach(t),Bpr=i(le),lM=n(le,"LI",{});var RRe=s(lM);Wbe=n(RRe,"STRONG",{});var X7t=s(Wbe);Ipr=r(X7t,"flaubert"),X7t.forEach(t),Npr=r(RRe," \u2014 "),TQ=n(RRe,"A",{href:!0});var z7t=s(TQ);qpr=r(z7t,"TFFlaubertWithLMHeadModel"),z7t.forEach(t),jpr=r(RRe," (FlauBERT model)"),RRe.forEach(t),Dpr=i(le),iM=n(le,"LI",{});var PRe=s(iM);Qbe=n(PRe,"STRONG",{});var W7t=s(Qbe);Gpr=r(W7t,"funnel"),W7t.forEach(t),Opr=r(PRe," \u2014 "),MQ=n(PRe,"A",{href:!0});var Q7t=s(MQ);Vpr=r(Q7t,"TFFunnelForPreTraining"),Q7t.forEach(t),Xpr=r(PRe," (Funnel Transformer model)"),PRe.forEach(t),zpr=i(le),dM=n(le,"LI",{});var BRe=s(dM);Hbe=n(BRe,"STRONG",{});var H7t=s(Hbe);Wpr=r(H7t,"gpt2"),H7t.forEach(t),Qpr=r(BRe," \u2014 "),EQ=n(BRe,"A",{href:!0});var U7t=s(EQ);Hpr=r(U7t,"TFGPT2LMHeadModel"),U7t.forEach(t),Upr=r(BRe," (OpenAI GPT-2 model)"),BRe.forEach(t),Jpr=i(le),cM=n(le,"LI",{});var IRe=s(cM);Ube=n(IRe,"STRONG",{});var J7t=s(Ube);Ypr=r(J7t,"layoutlm"),J7t.forEach(t),Kpr=r(IRe," \u2014 "),CQ=n(IRe,"A",{href:!0});var Y7t=s(CQ);Zpr=r(Y7t,"TFLayoutLMForMaskedLM"),Y7t.forEach(t),e_r=r(IRe," (LayoutLM model)"),IRe.forEach(t),o_r=i(le),fM=n(le,"LI",{});var NRe=s(fM);Jbe=n(NRe,"STRONG",{});var K7t=s(Jbe);r_r=r(K7t,"lxmert"),K7t.forEach(t),t_r=r(NRe," \u2014 "),wQ=n(NRe,"A",{href:!0});var Z7t=s(wQ);a_r=r(Z7t,"TFLxmertForPreTraining"),Z7t.forEach(t),n_r=r(NRe," (LXMERT model)"),NRe.forEach(t),s_r=i(le),mM=n(le,"LI",{});var qRe=s(mM);Ybe=n(qRe,"STRONG",{});var eMt=s(Ybe);l_r=r(eMt,"mobilebert"),eMt.forEach(t),i_r=r(qRe," \u2014 "),AQ=n(qRe,"A",{href:!0});var oMt=s(AQ);d_r=r(oMt,"TFMobileBertForPreTraining"),oMt.forEach(t),c_r=r(qRe," (MobileBERT model)"),qRe.forEach(t),f_r=i(le),gM=n(le,"LI",{});var jRe=s(gM);Kbe=n(jRe,"STRONG",{});var rMt=s(Kbe);m_r=r(rMt,"mpnet"),rMt.forEach(t),g_r=r(jRe," \u2014 "),yQ=n(jRe,"A",{href:!0});var tMt=s(yQ);h_r=r(tMt,"TFMPNetForMaskedLM"),tMt.forEach(t),p_r=r(jRe," (MPNet model)"),jRe.forEach(t),__r=i(le),hM=n(le,"LI",{});var DRe=s(hM);Zbe=n(DRe,"STRONG",{});var aMt=s(Zbe);u_r=r(aMt,"openai-gpt"),aMt.forEach(t),b_r=r(DRe," \u2014 "),LQ=n(DRe,"A",{href:!0});var nMt=s(LQ);v_r=r(nMt,"TFOpenAIGPTLMHeadModel"),nMt.forEach(t),F_r=r(DRe," (OpenAI GPT model)"),DRe.forEach(t),T_r=i(le),pM=n(le,"LI",{});var GRe=s(pM);eve=n(GRe,"STRONG",{});var sMt=s(eve);M_r=r(sMt,"roberta"),sMt.forEach(t),E_r=r(GRe," \u2014 "),xQ=n(GRe,"A",{href:!0});var lMt=s(xQ);C_r=r(lMt,"TFRobertaForMaskedLM"),lMt.forEach(t),w_r=r(GRe," (RoBERTa model)"),GRe.forEach(t),A_r=i(le),_M=n(le,"LI",{});var ORe=s(_M);ove=n(ORe,"STRONG",{});var iMt=s(ove);y_r=r(iMt,"t5"),iMt.forEach(t),L_r=r(ORe," \u2014 "),$Q=n(ORe,"A",{href:!0});var dMt=s($Q);x_r=r(dMt,"TFT5ForConditionalGeneration"),dMt.forEach(t),$_r=r(ORe," (T5 model)"),ORe.forEach(t),k_r=i(le),uM=n(le,"LI",{});var VRe=s(uM);rve=n(VRe,"STRONG",{});var cMt=s(rve);S_r=r(cMt,"tapas"),cMt.forEach(t),R_r=r(VRe," \u2014 "),kQ=n(VRe,"A",{href:!0});var fMt=s(kQ);P_r=r(fMt,"TFTapasForMaskedLM"),fMt.forEach(t),B_r=r(VRe," (TAPAS model)"),VRe.forEach(t),I_r=i(le),bM=n(le,"LI",{});var XRe=s(bM);tve=n(XRe,"STRONG",{});var mMt=s(tve);N_r=r(mMt,"transfo-xl"),mMt.forEach(t),q_r=r(XRe," \u2014 "),SQ=n(XRe,"A",{href:!0});var gMt=s(SQ);j_r=r(gMt,"TFTransfoXLLMHeadModel"),gMt.forEach(t),D_r=r(XRe," (Transformer-XL model)"),XRe.forEach(t),G_r=i(le),vM=n(le,"LI",{});var zRe=s(vM);ave=n(zRe,"STRONG",{});var hMt=s(ave);O_r=r(hMt,"vit_mae"),hMt.forEach(t),V_r=r(zRe," \u2014 "),RQ=n(zRe,"A",{href:!0});var pMt=s(RQ);X_r=r(pMt,"TFViTMAEForPreTraining"),pMt.forEach(t),z_r=r(zRe," (ViTMAE model)"),zRe.forEach(t),W_r=i(le),FM=n(le,"LI",{});var WRe=s(FM);nve=n(WRe,"STRONG",{});var _Mt=s(nve);Q_r=r(_Mt,"xlm"),_Mt.forEach(t),H_r=r(WRe," \u2014 "),PQ=n(WRe,"A",{href:!0});var uMt=s(PQ);U_r=r(uMt,"TFXLMWithLMHeadModel"),uMt.forEach(t),J_r=r(WRe," (XLM model)"),WRe.forEach(t),Y_r=i(le),TM=n(le,"LI",{});var QRe=s(TM);sve=n(QRe,"STRONG",{});var bMt=s(sve);K_r=r(bMt,"xlm-roberta"),bMt.forEach(t),Z_r=r(QRe," \u2014 "),BQ=n(QRe,"A",{href:!0});var vMt=s(BQ);eur=r(vMt,"TFXLMRobertaForMaskedLM"),vMt.forEach(t),our=r(QRe," (XLM-RoBERTa model)"),QRe.forEach(t),rur=i(le),MM=n(le,"LI",{});var HRe=s(MM);lve=n(HRe,"STRONG",{});var FMt=s(lve);tur=r(FMt,"xlnet"),FMt.forEach(t),aur=r(HRe," \u2014 "),IQ=n(HRe,"A",{href:!0});var TMt=s(IQ);nur=r(TMt,"TFXLNetLMHeadModel"),TMt.forEach(t),sur=r(HRe," (XLNet model)"),HRe.forEach(t),le.forEach(t),lur=i(_l),T(EM.$$.fragment,_l),_l.forEach(t),pl.forEach(t),yje=i(f),Qd=n(f,"H2",{class:!0});var RGe=s(Qd);CM=n(RGe,"A",{id:!0,class:!0,href:!0});var MMt=s(CM);ive=n(MMt,"SPAN",{});var EMt=s(ive);T(E8.$$.fragment,EMt),EMt.forEach(t),MMt.forEach(t),iur=i(RGe),dve=n(RGe,"SPAN",{});var CMt=s(dve);dur=r(CMt,"TFAutoModelForCausalLM"),CMt.forEach(t),RGe.forEach(t),Lje=i(f),Zo=n(f,"DIV",{class:!0});var ul=s(Zo);T(C8.$$.fragment,ul),cur=i(ul),Hd=n(ul,"P",{});var Mee=s(Hd);fur=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),NQ=n(Mee,"A",{href:!0});var wMt=s(NQ);mur=r(wMt,"from_pretrained()"),wMt.forEach(t),gur=r(Mee," class method or the "),qQ=n(Mee,"A",{href:!0});var AMt=s(qQ);hur=r(AMt,"from_config()"),AMt.forEach(t),pur=r(Mee,` class
method.`),Mee.forEach(t),_ur=i(ul),w8=n(ul,"P",{});var PGe=s(w8);uur=r(PGe,"This class cannot be instantiated directly using "),cve=n(PGe,"CODE",{});var yMt=s(cve);bur=r(yMt,"__init__()"),yMt.forEach(t),vur=r(PGe," (throws an error)."),PGe.forEach(t),Fur=i(ul),xt=n(ul,"DIV",{class:!0});var R6=s(xt);T(A8.$$.fragment,R6),Tur=i(R6),fve=n(R6,"P",{});var LMt=s(fve);Mur=r(LMt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),LMt.forEach(t),Eur=i(R6),Ud=n(R6,"P",{});var Eee=s(Ud);Cur=r(Eee,`Note:
Loading a model from its configuration file does `),mve=n(Eee,"STRONG",{});var xMt=s(mve);wur=r(xMt,"not"),xMt.forEach(t),Aur=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=n(Eee,"A",{href:!0});var $Mt=s(jQ);yur=r($Mt,"from_pretrained()"),$Mt.forEach(t),Lur=r(Eee," to load the model weights."),Eee.forEach(t),xur=i(R6),T(wM.$$.fragment,R6),R6.forEach(t),$ur=i(ul),yr=n(ul,"DIV",{class:!0});var bl=s(yr);T(y8.$$.fragment,bl),kur=i(bl),gve=n(bl,"P",{});var kMt=s(gve);Sur=r(kMt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kMt.forEach(t),Rur=i(bl),en=n(bl,"P",{});var P6=s(en);Pur=r(P6,"The model class to instantiate is selected based on the "),hve=n(P6,"CODE",{});var SMt=s(hve);Bur=r(SMt,"model_type"),SMt.forEach(t),Iur=r(P6,` property of the config object (either
passed as an argument or loaded from `),pve=n(P6,"CODE",{});var RMt=s(pve);Nur=r(RMt,"pretrained_model_name_or_path"),RMt.forEach(t),qur=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=n(P6,"CODE",{});var PMt=s(_ve);jur=r(PMt,"pretrained_model_name_or_path"),PMt.forEach(t),Dur=r(P6,":"),P6.forEach(t),Gur=i(bl),Me=n(bl,"UL",{});var Ce=s(Me);AM=n(Ce,"LI",{});var URe=s(AM);uve=n(URe,"STRONG",{});var BMt=s(uve);Our=r(BMt,"bert"),BMt.forEach(t),Vur=r(URe," \u2014 "),DQ=n(URe,"A",{href:!0});var IMt=s(DQ);Xur=r(IMt,"TFBertLMHeadModel"),IMt.forEach(t),zur=r(URe," (BERT model)"),URe.forEach(t),Wur=i(Ce),yM=n(Ce,"LI",{});var JRe=s(yM);bve=n(JRe,"STRONG",{});var NMt=s(bve);Qur=r(NMt,"camembert"),NMt.forEach(t),Hur=r(JRe," \u2014 "),GQ=n(JRe,"A",{href:!0});var qMt=s(GQ);Uur=r(qMt,"TFCamembertForCausalLM"),qMt.forEach(t),Jur=r(JRe," (CamemBERT model)"),JRe.forEach(t),Yur=i(Ce),LM=n(Ce,"LI",{});var YRe=s(LM);vve=n(YRe,"STRONG",{});var jMt=s(vve);Kur=r(jMt,"ctrl"),jMt.forEach(t),Zur=r(YRe," \u2014 "),OQ=n(YRe,"A",{href:!0});var DMt=s(OQ);e2r=r(DMt,"TFCTRLLMHeadModel"),DMt.forEach(t),o2r=r(YRe," (CTRL model)"),YRe.forEach(t),r2r=i(Ce),xM=n(Ce,"LI",{});var KRe=s(xM);Fve=n(KRe,"STRONG",{});var GMt=s(Fve);t2r=r(GMt,"gpt2"),GMt.forEach(t),a2r=r(KRe," \u2014 "),VQ=n(KRe,"A",{href:!0});var OMt=s(VQ);n2r=r(OMt,"TFGPT2LMHeadModel"),OMt.forEach(t),s2r=r(KRe," (OpenAI GPT-2 model)"),KRe.forEach(t),l2r=i(Ce),$M=n(Ce,"LI",{});var ZRe=s($M);Tve=n(ZRe,"STRONG",{});var VMt=s(Tve);i2r=r(VMt,"gptj"),VMt.forEach(t),d2r=r(ZRe," \u2014 "),XQ=n(ZRe,"A",{href:!0});var XMt=s(XQ);c2r=r(XMt,"TFGPTJForCausalLM"),XMt.forEach(t),f2r=r(ZRe," (GPT-J model)"),ZRe.forEach(t),m2r=i(Ce),kM=n(Ce,"LI",{});var ePe=s(kM);Mve=n(ePe,"STRONG",{});var zMt=s(Mve);g2r=r(zMt,"openai-gpt"),zMt.forEach(t),h2r=r(ePe," \u2014 "),zQ=n(ePe,"A",{href:!0});var WMt=s(zQ);p2r=r(WMt,"TFOpenAIGPTLMHeadModel"),WMt.forEach(t),_2r=r(ePe," (OpenAI GPT model)"),ePe.forEach(t),u2r=i(Ce),SM=n(Ce,"LI",{});var oPe=s(SM);Eve=n(oPe,"STRONG",{});var QMt=s(Eve);b2r=r(QMt,"rembert"),QMt.forEach(t),v2r=r(oPe," \u2014 "),WQ=n(oPe,"A",{href:!0});var HMt=s(WQ);F2r=r(HMt,"TFRemBertForCausalLM"),HMt.forEach(t),T2r=r(oPe," (RemBERT model)"),oPe.forEach(t),M2r=i(Ce),RM=n(Ce,"LI",{});var rPe=s(RM);Cve=n(rPe,"STRONG",{});var UMt=s(Cve);E2r=r(UMt,"roberta"),UMt.forEach(t),C2r=r(rPe," \u2014 "),QQ=n(rPe,"A",{href:!0});var JMt=s(QQ);w2r=r(JMt,"TFRobertaForCausalLM"),JMt.forEach(t),A2r=r(rPe," (RoBERTa model)"),rPe.forEach(t),y2r=i(Ce),PM=n(Ce,"LI",{});var tPe=s(PM);wve=n(tPe,"STRONG",{});var YMt=s(wve);L2r=r(YMt,"roformer"),YMt.forEach(t),x2r=r(tPe," \u2014 "),HQ=n(tPe,"A",{href:!0});var KMt=s(HQ);$2r=r(KMt,"TFRoFormerForCausalLM"),KMt.forEach(t),k2r=r(tPe," (RoFormer model)"),tPe.forEach(t),S2r=i(Ce),BM=n(Ce,"LI",{});var aPe=s(BM);Ave=n(aPe,"STRONG",{});var ZMt=s(Ave);R2r=r(ZMt,"transfo-xl"),ZMt.forEach(t),P2r=r(aPe," \u2014 "),UQ=n(aPe,"A",{href:!0});var e4t=s(UQ);B2r=r(e4t,"TFTransfoXLLMHeadModel"),e4t.forEach(t),I2r=r(aPe," (Transformer-XL model)"),aPe.forEach(t),N2r=i(Ce),IM=n(Ce,"LI",{});var nPe=s(IM);yve=n(nPe,"STRONG",{});var o4t=s(yve);q2r=r(o4t,"xlm"),o4t.forEach(t),j2r=r(nPe," \u2014 "),JQ=n(nPe,"A",{href:!0});var r4t=s(JQ);D2r=r(r4t,"TFXLMWithLMHeadModel"),r4t.forEach(t),G2r=r(nPe," (XLM model)"),nPe.forEach(t),O2r=i(Ce),NM=n(Ce,"LI",{});var sPe=s(NM);Lve=n(sPe,"STRONG",{});var t4t=s(Lve);V2r=r(t4t,"xlnet"),t4t.forEach(t),X2r=r(sPe," \u2014 "),YQ=n(sPe,"A",{href:!0});var a4t=s(YQ);z2r=r(a4t,"TFXLNetLMHeadModel"),a4t.forEach(t),W2r=r(sPe," (XLNet model)"),sPe.forEach(t),Ce.forEach(t),Q2r=i(bl),T(qM.$$.fragment,bl),bl.forEach(t),ul.forEach(t),xje=i(f),Jd=n(f,"H2",{class:!0});var BGe=s(Jd);jM=n(BGe,"A",{id:!0,class:!0,href:!0});var n4t=s(jM);xve=n(n4t,"SPAN",{});var s4t=s(xve);T(L8.$$.fragment,s4t),s4t.forEach(t),n4t.forEach(t),H2r=i(BGe),$ve=n(BGe,"SPAN",{});var l4t=s($ve);U2r=r(l4t,"TFAutoModelForImageClassification"),l4t.forEach(t),BGe.forEach(t),$je=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(x8.$$.fragment,vl),J2r=i(vl),Yd=n(vl,"P",{});var Cee=s(Yd);Y2r=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KQ=n(Cee,"A",{href:!0});var i4t=s(KQ);K2r=r(i4t,"from_pretrained()"),i4t.forEach(t),Z2r=r(Cee," class method or the "),ZQ=n(Cee,"A",{href:!0});var d4t=s(ZQ);e1r=r(d4t,"from_config()"),d4t.forEach(t),o1r=r(Cee,` class
method.`),Cee.forEach(t),r1r=i(vl),$8=n(vl,"P",{});var IGe=s($8);t1r=r(IGe,"This class cannot be instantiated directly using "),kve=n(IGe,"CODE",{});var c4t=s(kve);a1r=r(c4t,"__init__()"),c4t.forEach(t),n1r=r(IGe," (throws an error)."),IGe.forEach(t),s1r=i(vl),$t=n(vl,"DIV",{class:!0});var B6=s($t);T(k8.$$.fragment,B6),l1r=i(B6),Sve=n(B6,"P",{});var f4t=s(Sve);i1r=r(f4t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),f4t.forEach(t),d1r=i(B6),Kd=n(B6,"P",{});var wee=s(Kd);c1r=r(wee,`Note:
Loading a model from its configuration file does `),Rve=n(wee,"STRONG",{});var m4t=s(Rve);f1r=r(m4t,"not"),m4t.forEach(t),m1r=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=n(wee,"A",{href:!0});var g4t=s(eH);g1r=r(g4t,"from_pretrained()"),g4t.forEach(t),h1r=r(wee," to load the model weights."),wee.forEach(t),p1r=i(B6),T(DM.$$.fragment,B6),B6.forEach(t),_1r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(S8.$$.fragment,Fl),u1r=i(Fl),Pve=n(Fl,"P",{});var h4t=s(Pve);b1r=r(h4t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),h4t.forEach(t),v1r=i(Fl),on=n(Fl,"P",{});var I6=s(on);F1r=r(I6,"The model class to instantiate is selected based on the "),Bve=n(I6,"CODE",{});var p4t=s(Bve);T1r=r(p4t,"model_type"),p4t.forEach(t),M1r=r(I6,` property of the config object (either
passed as an argument or loaded from `),Ive=n(I6,"CODE",{});var _4t=s(Ive);E1r=r(_4t,"pretrained_model_name_or_path"),_4t.forEach(t),C1r=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=n(I6,"CODE",{});var u4t=s(Nve);w1r=r(u4t,"pretrained_model_name_or_path"),u4t.forEach(t),A1r=r(I6,":"),I6.forEach(t),y1r=i(Fl),rn=n(Fl,"UL",{});var N6=s(rn);GM=n(N6,"LI",{});var lPe=s(GM);qve=n(lPe,"STRONG",{});var b4t=s(qve);L1r=r(b4t,"convnext"),b4t.forEach(t),x1r=r(lPe," \u2014 "),oH=n(lPe,"A",{href:!0});var v4t=s(oH);$1r=r(v4t,"TFConvNextForImageClassification"),v4t.forEach(t),k1r=r(lPe," (ConvNext model)"),lPe.forEach(t),S1r=i(N6),OM=n(N6,"LI",{});var iPe=s(OM);jve=n(iPe,"STRONG",{});var F4t=s(jve);R1r=r(F4t,"data2vec-vision"),F4t.forEach(t),P1r=r(iPe," \u2014 "),rH=n(iPe,"A",{href:!0});var T4t=s(rH);B1r=r(T4t,"TFData2VecVisionForImageClassification"),T4t.forEach(t),I1r=r(iPe," (Data2VecVision model)"),iPe.forEach(t),N1r=i(N6),VM=n(N6,"LI",{});var dPe=s(VM);Dve=n(dPe,"STRONG",{});var M4t=s(Dve);q1r=r(M4t,"swin"),M4t.forEach(t),j1r=r(dPe," \u2014 "),tH=n(dPe,"A",{href:!0});var E4t=s(tH);D1r=r(E4t,"TFSwinForImageClassification"),E4t.forEach(t),G1r=r(dPe," (Swin model)"),dPe.forEach(t),O1r=i(N6),XM=n(N6,"LI",{});var cPe=s(XM);Gve=n(cPe,"STRONG",{});var C4t=s(Gve);V1r=r(C4t,"vit"),C4t.forEach(t),X1r=r(cPe," \u2014 "),aH=n(cPe,"A",{href:!0});var w4t=s(aH);z1r=r(w4t,"TFViTForImageClassification"),w4t.forEach(t),W1r=r(cPe," (ViT model)"),cPe.forEach(t),N6.forEach(t),Q1r=i(Fl),T(zM.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),kje=i(f),Zd=n(f,"H2",{class:!0});var NGe=s(Zd);WM=n(NGe,"A",{id:!0,class:!0,href:!0});var A4t=s(WM);Ove=n(A4t,"SPAN",{});var y4t=s(Ove);T(R8.$$.fragment,y4t),y4t.forEach(t),A4t.forEach(t),H1r=i(NGe),Vve=n(NGe,"SPAN",{});var L4t=s(Vve);U1r=r(L4t,"TFAutoModelForMaskedLM"),L4t.forEach(t),NGe.forEach(t),Sje=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T(P8.$$.fragment,Tl),J1r=i(Tl),ec=n(Tl,"P",{});var Aee=s(ec);Y1r=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nH=n(Aee,"A",{href:!0});var x4t=s(nH);K1r=r(x4t,"from_pretrained()"),x4t.forEach(t),Z1r=r(Aee," class method or the "),sH=n(Aee,"A",{href:!0});var $4t=s(sH);ebr=r($4t,"from_config()"),$4t.forEach(t),obr=r(Aee,` class
method.`),Aee.forEach(t),rbr=i(Tl),B8=n(Tl,"P",{});var qGe=s(B8);tbr=r(qGe,"This class cannot be instantiated directly using "),Xve=n(qGe,"CODE",{});var k4t=s(Xve);abr=r(k4t,"__init__()"),k4t.forEach(t),nbr=r(qGe," (throws an error)."),qGe.forEach(t),sbr=i(Tl),kt=n(Tl,"DIV",{class:!0});var q6=s(kt);T(I8.$$.fragment,q6),lbr=i(q6),zve=n(q6,"P",{});var S4t=s(zve);ibr=r(S4t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),S4t.forEach(t),dbr=i(q6),oc=n(q6,"P",{});var yee=s(oc);cbr=r(yee,`Note:
Loading a model from its configuration file does `),Wve=n(yee,"STRONG",{});var R4t=s(Wve);fbr=r(R4t,"not"),R4t.forEach(t),mbr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(yee,"A",{href:!0});var P4t=s(lH);gbr=r(P4t,"from_pretrained()"),P4t.forEach(t),hbr=r(yee," to load the model weights."),yee.forEach(t),pbr=i(q6),T(QM.$$.fragment,q6),q6.forEach(t),_br=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(N8.$$.fragment,Ml),ubr=i(Ml),Qve=n(Ml,"P",{});var B4t=s(Qve);bbr=r(B4t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),B4t.forEach(t),vbr=i(Ml),tn=n(Ml,"P",{});var j6=s(tn);Fbr=r(j6,"The model class to instantiate is selected based on the "),Hve=n(j6,"CODE",{});var I4t=s(Hve);Tbr=r(I4t,"model_type"),I4t.forEach(t),Mbr=r(j6,` property of the config object (either
passed as an argument or loaded from `),Uve=n(j6,"CODE",{});var N4t=s(Uve);Ebr=r(N4t,"pretrained_model_name_or_path"),N4t.forEach(t),Cbr=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=n(j6,"CODE",{});var q4t=s(Jve);wbr=r(q4t,"pretrained_model_name_or_path"),q4t.forEach(t),Abr=r(j6,":"),j6.forEach(t),ybr=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);HM=n(fe,"LI",{});var fPe=s(HM);Yve=n(fPe,"STRONG",{});var j4t=s(Yve);Lbr=r(j4t,"albert"),j4t.forEach(t),xbr=r(fPe," \u2014 "),iH=n(fPe,"A",{href:!0});var D4t=s(iH);$br=r(D4t,"TFAlbertForMaskedLM"),D4t.forEach(t),kbr=r(fPe," (ALBERT model)"),fPe.forEach(t),Sbr=i(fe),UM=n(fe,"LI",{});var mPe=s(UM);Kve=n(mPe,"STRONG",{});var G4t=s(Kve);Rbr=r(G4t,"bert"),G4t.forEach(t),Pbr=r(mPe," \u2014 "),dH=n(mPe,"A",{href:!0});var O4t=s(dH);Bbr=r(O4t,"TFBertForMaskedLM"),O4t.forEach(t),Ibr=r(mPe," (BERT model)"),mPe.forEach(t),Nbr=i(fe),JM=n(fe,"LI",{});var gPe=s(JM);Zve=n(gPe,"STRONG",{});var V4t=s(Zve);qbr=r(V4t,"camembert"),V4t.forEach(t),jbr=r(gPe," \u2014 "),cH=n(gPe,"A",{href:!0});var X4t=s(cH);Dbr=r(X4t,"TFCamembertForMaskedLM"),X4t.forEach(t),Gbr=r(gPe," (CamemBERT model)"),gPe.forEach(t),Obr=i(fe),YM=n(fe,"LI",{});var hPe=s(YM);e0e=n(hPe,"STRONG",{});var z4t=s(e0e);Vbr=r(z4t,"convbert"),z4t.forEach(t),Xbr=r(hPe," \u2014 "),fH=n(hPe,"A",{href:!0});var W4t=s(fH);zbr=r(W4t,"TFConvBertForMaskedLM"),W4t.forEach(t),Wbr=r(hPe," (ConvBERT model)"),hPe.forEach(t),Qbr=i(fe),KM=n(fe,"LI",{});var pPe=s(KM);o0e=n(pPe,"STRONG",{});var Q4t=s(o0e);Hbr=r(Q4t,"deberta"),Q4t.forEach(t),Ubr=r(pPe," \u2014 "),mH=n(pPe,"A",{href:!0});var H4t=s(mH);Jbr=r(H4t,"TFDebertaForMaskedLM"),H4t.forEach(t),Ybr=r(pPe," (DeBERTa model)"),pPe.forEach(t),Kbr=i(fe),ZM=n(fe,"LI",{});var _Pe=s(ZM);r0e=n(_Pe,"STRONG",{});var U4t=s(r0e);Zbr=r(U4t,"deberta-v2"),U4t.forEach(t),evr=r(_Pe," \u2014 "),gH=n(_Pe,"A",{href:!0});var J4t=s(gH);ovr=r(J4t,"TFDebertaV2ForMaskedLM"),J4t.forEach(t),rvr=r(_Pe," (DeBERTa-v2 model)"),_Pe.forEach(t),tvr=i(fe),e4=n(fe,"LI",{});var uPe=s(e4);t0e=n(uPe,"STRONG",{});var Y4t=s(t0e);avr=r(Y4t,"distilbert"),Y4t.forEach(t),nvr=r(uPe," \u2014 "),hH=n(uPe,"A",{href:!0});var K4t=s(hH);svr=r(K4t,"TFDistilBertForMaskedLM"),K4t.forEach(t),lvr=r(uPe," (DistilBERT model)"),uPe.forEach(t),ivr=i(fe),o4=n(fe,"LI",{});var bPe=s(o4);a0e=n(bPe,"STRONG",{});var Z4t=s(a0e);dvr=r(Z4t,"electra"),Z4t.forEach(t),cvr=r(bPe," \u2014 "),pH=n(bPe,"A",{href:!0});var eEt=s(pH);fvr=r(eEt,"TFElectraForMaskedLM"),eEt.forEach(t),mvr=r(bPe," (ELECTRA model)"),bPe.forEach(t),gvr=i(fe),r4=n(fe,"LI",{});var vPe=s(r4);n0e=n(vPe,"STRONG",{});var oEt=s(n0e);hvr=r(oEt,"flaubert"),oEt.forEach(t),pvr=r(vPe," \u2014 "),_H=n(vPe,"A",{href:!0});var rEt=s(_H);_vr=r(rEt,"TFFlaubertWithLMHeadModel"),rEt.forEach(t),uvr=r(vPe," (FlauBERT model)"),vPe.forEach(t),bvr=i(fe),t4=n(fe,"LI",{});var FPe=s(t4);s0e=n(FPe,"STRONG",{});var tEt=s(s0e);vvr=r(tEt,"funnel"),tEt.forEach(t),Fvr=r(FPe," \u2014 "),uH=n(FPe,"A",{href:!0});var aEt=s(uH);Tvr=r(aEt,"TFFunnelForMaskedLM"),aEt.forEach(t),Mvr=r(FPe," (Funnel Transformer model)"),FPe.forEach(t),Evr=i(fe),a4=n(fe,"LI",{});var TPe=s(a4);l0e=n(TPe,"STRONG",{});var nEt=s(l0e);Cvr=r(nEt,"layoutlm"),nEt.forEach(t),wvr=r(TPe," \u2014 "),bH=n(TPe,"A",{href:!0});var sEt=s(bH);Avr=r(sEt,"TFLayoutLMForMaskedLM"),sEt.forEach(t),yvr=r(TPe," (LayoutLM model)"),TPe.forEach(t),Lvr=i(fe),n4=n(fe,"LI",{});var MPe=s(n4);i0e=n(MPe,"STRONG",{});var lEt=s(i0e);xvr=r(lEt,"longformer"),lEt.forEach(t),$vr=r(MPe," \u2014 "),vH=n(MPe,"A",{href:!0});var iEt=s(vH);kvr=r(iEt,"TFLongformerForMaskedLM"),iEt.forEach(t),Svr=r(MPe," (Longformer model)"),MPe.forEach(t),Rvr=i(fe),s4=n(fe,"LI",{});var EPe=s(s4);d0e=n(EPe,"STRONG",{});var dEt=s(d0e);Pvr=r(dEt,"mobilebert"),dEt.forEach(t),Bvr=r(EPe," \u2014 "),FH=n(EPe,"A",{href:!0});var cEt=s(FH);Ivr=r(cEt,"TFMobileBertForMaskedLM"),cEt.forEach(t),Nvr=r(EPe," (MobileBERT model)"),EPe.forEach(t),qvr=i(fe),l4=n(fe,"LI",{});var CPe=s(l4);c0e=n(CPe,"STRONG",{});var fEt=s(c0e);jvr=r(fEt,"mpnet"),fEt.forEach(t),Dvr=r(CPe," \u2014 "),TH=n(CPe,"A",{href:!0});var mEt=s(TH);Gvr=r(mEt,"TFMPNetForMaskedLM"),mEt.forEach(t),Ovr=r(CPe," (MPNet model)"),CPe.forEach(t),Vvr=i(fe),i4=n(fe,"LI",{});var wPe=s(i4);f0e=n(wPe,"STRONG",{});var gEt=s(f0e);Xvr=r(gEt,"rembert"),gEt.forEach(t),zvr=r(wPe," \u2014 "),MH=n(wPe,"A",{href:!0});var hEt=s(MH);Wvr=r(hEt,"TFRemBertForMaskedLM"),hEt.forEach(t),Qvr=r(wPe," (RemBERT model)"),wPe.forEach(t),Hvr=i(fe),d4=n(fe,"LI",{});var APe=s(d4);m0e=n(APe,"STRONG",{});var pEt=s(m0e);Uvr=r(pEt,"roberta"),pEt.forEach(t),Jvr=r(APe," \u2014 "),EH=n(APe,"A",{href:!0});var _Et=s(EH);Yvr=r(_Et,"TFRobertaForMaskedLM"),_Et.forEach(t),Kvr=r(APe," (RoBERTa model)"),APe.forEach(t),Zvr=i(fe),c4=n(fe,"LI",{});var yPe=s(c4);g0e=n(yPe,"STRONG",{});var uEt=s(g0e);e0r=r(uEt,"roformer"),uEt.forEach(t),o0r=r(yPe," \u2014 "),CH=n(yPe,"A",{href:!0});var bEt=s(CH);r0r=r(bEt,"TFRoFormerForMaskedLM"),bEt.forEach(t),t0r=r(yPe," (RoFormer model)"),yPe.forEach(t),a0r=i(fe),f4=n(fe,"LI",{});var LPe=s(f4);h0e=n(LPe,"STRONG",{});var vEt=s(h0e);n0r=r(vEt,"tapas"),vEt.forEach(t),s0r=r(LPe," \u2014 "),wH=n(LPe,"A",{href:!0});var FEt=s(wH);l0r=r(FEt,"TFTapasForMaskedLM"),FEt.forEach(t),i0r=r(LPe," (TAPAS model)"),LPe.forEach(t),d0r=i(fe),m4=n(fe,"LI",{});var xPe=s(m4);p0e=n(xPe,"STRONG",{});var TEt=s(p0e);c0r=r(TEt,"xlm"),TEt.forEach(t),f0r=r(xPe," \u2014 "),AH=n(xPe,"A",{href:!0});var MEt=s(AH);m0r=r(MEt,"TFXLMWithLMHeadModel"),MEt.forEach(t),g0r=r(xPe," (XLM model)"),xPe.forEach(t),h0r=i(fe),g4=n(fe,"LI",{});var $Pe=s(g4);_0e=n($Pe,"STRONG",{});var EEt=s(_0e);p0r=r(EEt,"xlm-roberta"),EEt.forEach(t),_0r=r($Pe," \u2014 "),yH=n($Pe,"A",{href:!0});var CEt=s(yH);u0r=r(CEt,"TFXLMRobertaForMaskedLM"),CEt.forEach(t),b0r=r($Pe," (XLM-RoBERTa model)"),$Pe.forEach(t),fe.forEach(t),v0r=i(Ml),T(h4.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),Rje=i(f),rc=n(f,"H2",{class:!0});var jGe=s(rc);p4=n(jGe,"A",{id:!0,class:!0,href:!0});var wEt=s(p4);u0e=n(wEt,"SPAN",{});var AEt=s(u0e);T(q8.$$.fragment,AEt),AEt.forEach(t),wEt.forEach(t),F0r=i(jGe),b0e=n(jGe,"SPAN",{});var yEt=s(b0e);T0r=r(yEt,"TFAutoModelForSeq2SeqLM"),yEt.forEach(t),jGe.forEach(t),Pje=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T(j8.$$.fragment,El),M0r=i(El),tc=n(El,"P",{});var Lee=s(tc);E0r=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LH=n(Lee,"A",{href:!0});var LEt=s(LH);C0r=r(LEt,"from_pretrained()"),LEt.forEach(t),w0r=r(Lee," class method or the "),xH=n(Lee,"A",{href:!0});var xEt=s(xH);A0r=r(xEt,"from_config()"),xEt.forEach(t),y0r=r(Lee,` class
method.`),Lee.forEach(t),L0r=i(El),D8=n(El,"P",{});var DGe=s(D8);x0r=r(DGe,"This class cannot be instantiated directly using "),v0e=n(DGe,"CODE",{});var $Et=s(v0e);$0r=r($Et,"__init__()"),$Et.forEach(t),k0r=r(DGe," (throws an error)."),DGe.forEach(t),S0r=i(El),St=n(El,"DIV",{class:!0});var D6=s(St);T(G8.$$.fragment,D6),R0r=i(D6),F0e=n(D6,"P",{});var kEt=s(F0e);P0r=r(kEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),kEt.forEach(t),B0r=i(D6),ac=n(D6,"P",{});var xee=s(ac);I0r=r(xee,`Note:
Loading a model from its configuration file does `),T0e=n(xee,"STRONG",{});var SEt=s(T0e);N0r=r(SEt,"not"),SEt.forEach(t),q0r=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(xee,"A",{href:!0});var REt=s($H);j0r=r(REt,"from_pretrained()"),REt.forEach(t),D0r=r(xee," to load the model weights."),xee.forEach(t),G0r=i(D6),T(_4.$$.fragment,D6),D6.forEach(t),O0r=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(O8.$$.fragment,Cl),V0r=i(Cl),M0e=n(Cl,"P",{});var PEt=s(M0e);X0r=r(PEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),PEt.forEach(t),z0r=i(Cl),an=n(Cl,"P",{});var G6=s(an);W0r=r(G6,"The model class to instantiate is selected based on the "),E0e=n(G6,"CODE",{});var BEt=s(E0e);Q0r=r(BEt,"model_type"),BEt.forEach(t),H0r=r(G6,` property of the config object (either
passed as an argument or loaded from `),C0e=n(G6,"CODE",{});var IEt=s(C0e);U0r=r(IEt,"pretrained_model_name_or_path"),IEt.forEach(t),J0r=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w0e=n(G6,"CODE",{});var NEt=s(w0e);Y0r=r(NEt,"pretrained_model_name_or_path"),NEt.forEach(t),K0r=r(G6,":"),G6.forEach(t),Z0r=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);u4=n(Be,"LI",{});var kPe=s(u4);A0e=n(kPe,"STRONG",{});var qEt=s(A0e);eFr=r(qEt,"bart"),qEt.forEach(t),oFr=r(kPe," \u2014 "),kH=n(kPe,"A",{href:!0});var jEt=s(kH);rFr=r(jEt,"TFBartForConditionalGeneration"),jEt.forEach(t),tFr=r(kPe," (BART model)"),kPe.forEach(t),aFr=i(Be),b4=n(Be,"LI",{});var SPe=s(b4);y0e=n(SPe,"STRONG",{});var DEt=s(y0e);nFr=r(DEt,"blenderbot"),DEt.forEach(t),sFr=r(SPe," \u2014 "),SH=n(SPe,"A",{href:!0});var GEt=s(SH);lFr=r(GEt,"TFBlenderbotForConditionalGeneration"),GEt.forEach(t),iFr=r(SPe," (Blenderbot model)"),SPe.forEach(t),dFr=i(Be),v4=n(Be,"LI",{});var RPe=s(v4);L0e=n(RPe,"STRONG",{});var OEt=s(L0e);cFr=r(OEt,"blenderbot-small"),OEt.forEach(t),fFr=r(RPe," \u2014 "),RH=n(RPe,"A",{href:!0});var VEt=s(RH);mFr=r(VEt,"TFBlenderbotSmallForConditionalGeneration"),VEt.forEach(t),gFr=r(RPe," (BlenderbotSmall model)"),RPe.forEach(t),hFr=i(Be),F4=n(Be,"LI",{});var PPe=s(F4);x0e=n(PPe,"STRONG",{});var XEt=s(x0e);pFr=r(XEt,"encoder-decoder"),XEt.forEach(t),_Fr=r(PPe," \u2014 "),PH=n(PPe,"A",{href:!0});var zEt=s(PH);uFr=r(zEt,"TFEncoderDecoderModel"),zEt.forEach(t),bFr=r(PPe," (Encoder decoder model)"),PPe.forEach(t),vFr=i(Be),T4=n(Be,"LI",{});var BPe=s(T4);$0e=n(BPe,"STRONG",{});var WEt=s($0e);FFr=r(WEt,"led"),WEt.forEach(t),TFr=r(BPe," \u2014 "),BH=n(BPe,"A",{href:!0});var QEt=s(BH);MFr=r(QEt,"TFLEDForConditionalGeneration"),QEt.forEach(t),EFr=r(BPe," (LED model)"),BPe.forEach(t),CFr=i(Be),M4=n(Be,"LI",{});var IPe=s(M4);k0e=n(IPe,"STRONG",{});var HEt=s(k0e);wFr=r(HEt,"marian"),HEt.forEach(t),AFr=r(IPe," \u2014 "),IH=n(IPe,"A",{href:!0});var UEt=s(IH);yFr=r(UEt,"TFMarianMTModel"),UEt.forEach(t),LFr=r(IPe," (Marian model)"),IPe.forEach(t),xFr=i(Be),E4=n(Be,"LI",{});var NPe=s(E4);S0e=n(NPe,"STRONG",{});var JEt=s(S0e);$Fr=r(JEt,"mbart"),JEt.forEach(t),kFr=r(NPe," \u2014 "),NH=n(NPe,"A",{href:!0});var YEt=s(NH);SFr=r(YEt,"TFMBartForConditionalGeneration"),YEt.forEach(t),RFr=r(NPe," (mBART model)"),NPe.forEach(t),PFr=i(Be),C4=n(Be,"LI",{});var qPe=s(C4);R0e=n(qPe,"STRONG",{});var KEt=s(R0e);BFr=r(KEt,"mt5"),KEt.forEach(t),IFr=r(qPe," \u2014 "),qH=n(qPe,"A",{href:!0});var ZEt=s(qH);NFr=r(ZEt,"TFMT5ForConditionalGeneration"),ZEt.forEach(t),qFr=r(qPe," (mT5 model)"),qPe.forEach(t),jFr=i(Be),w4=n(Be,"LI",{});var jPe=s(w4);P0e=n(jPe,"STRONG",{});var eCt=s(P0e);DFr=r(eCt,"pegasus"),eCt.forEach(t),GFr=r(jPe," \u2014 "),jH=n(jPe,"A",{href:!0});var oCt=s(jH);OFr=r(oCt,"TFPegasusForConditionalGeneration"),oCt.forEach(t),VFr=r(jPe," (Pegasus model)"),jPe.forEach(t),XFr=i(Be),A4=n(Be,"LI",{});var DPe=s(A4);B0e=n(DPe,"STRONG",{});var rCt=s(B0e);zFr=r(rCt,"t5"),rCt.forEach(t),WFr=r(DPe," \u2014 "),DH=n(DPe,"A",{href:!0});var tCt=s(DH);QFr=r(tCt,"TFT5ForConditionalGeneration"),tCt.forEach(t),HFr=r(DPe," (T5 model)"),DPe.forEach(t),Be.forEach(t),UFr=i(Cl),T(y4.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),Bje=i(f),nc=n(f,"H2",{class:!0});var GGe=s(nc);L4=n(GGe,"A",{id:!0,class:!0,href:!0});var aCt=s(L4);I0e=n(aCt,"SPAN",{});var nCt=s(I0e);T(V8.$$.fragment,nCt),nCt.forEach(t),aCt.forEach(t),JFr=i(GGe),N0e=n(GGe,"SPAN",{});var sCt=s(N0e);YFr=r(sCt,"TFAutoModelForSequenceClassification"),sCt.forEach(t),GGe.forEach(t),Ije=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T(X8.$$.fragment,wl),KFr=i(wl),sc=n(wl,"P",{});var $ee=s(sc);ZFr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GH=n($ee,"A",{href:!0});var lCt=s(GH);eTr=r(lCt,"from_pretrained()"),lCt.forEach(t),oTr=r($ee," class method or the "),OH=n($ee,"A",{href:!0});var iCt=s(OH);rTr=r(iCt,"from_config()"),iCt.forEach(t),tTr=r($ee,` class
method.`),$ee.forEach(t),aTr=i(wl),z8=n(wl,"P",{});var OGe=s(z8);nTr=r(OGe,"This class cannot be instantiated directly using "),q0e=n(OGe,"CODE",{});var dCt=s(q0e);sTr=r(dCt,"__init__()"),dCt.forEach(t),lTr=r(OGe," (throws an error)."),OGe.forEach(t),iTr=i(wl),Rt=n(wl,"DIV",{class:!0});var O6=s(Rt);T(W8.$$.fragment,O6),dTr=i(O6),j0e=n(O6,"P",{});var cCt=s(j0e);cTr=r(cCt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cCt.forEach(t),fTr=i(O6),lc=n(O6,"P",{});var kee=s(lc);mTr=r(kee,`Note:
Loading a model from its configuration file does `),D0e=n(kee,"STRONG",{});var fCt=s(D0e);gTr=r(fCt,"not"),fCt.forEach(t),hTr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=n(kee,"A",{href:!0});var mCt=s(VH);pTr=r(mCt,"from_pretrained()"),mCt.forEach(t),_Tr=r(kee," to load the model weights."),kee.forEach(t),uTr=i(O6),T(x4.$$.fragment,O6),O6.forEach(t),bTr=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(Q8.$$.fragment,Al),vTr=i(Al),G0e=n(Al,"P",{});var gCt=s(G0e);FTr=r(gCt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gCt.forEach(t),TTr=i(Al),nn=n(Al,"P",{});var V6=s(nn);MTr=r(V6,"The model class to instantiate is selected based on the "),O0e=n(V6,"CODE",{});var hCt=s(O0e);ETr=r(hCt,"model_type"),hCt.forEach(t),CTr=r(V6,` property of the config object (either
passed as an argument or loaded from `),V0e=n(V6,"CODE",{});var pCt=s(V0e);wTr=r(pCt,"pretrained_model_name_or_path"),pCt.forEach(t),ATr=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X0e=n(V6,"CODE",{});var _Ct=s(X0e);yTr=r(_Ct,"pretrained_model_name_or_path"),_Ct.forEach(t),LTr=r(V6,":"),V6.forEach(t),xTr=i(Al),oe=n(Al,"UL",{});var ae=s(oe);$4=n(ae,"LI",{});var GPe=s($4);z0e=n(GPe,"STRONG",{});var uCt=s(z0e);$Tr=r(uCt,"albert"),uCt.forEach(t),kTr=r(GPe," \u2014 "),XH=n(GPe,"A",{href:!0});var bCt=s(XH);STr=r(bCt,"TFAlbertForSequenceClassification"),bCt.forEach(t),RTr=r(GPe," (ALBERT model)"),GPe.forEach(t),PTr=i(ae),k4=n(ae,"LI",{});var OPe=s(k4);W0e=n(OPe,"STRONG",{});var vCt=s(W0e);BTr=r(vCt,"bert"),vCt.forEach(t),ITr=r(OPe," \u2014 "),zH=n(OPe,"A",{href:!0});var FCt=s(zH);NTr=r(FCt,"TFBertForSequenceClassification"),FCt.forEach(t),qTr=r(OPe," (BERT model)"),OPe.forEach(t),jTr=i(ae),S4=n(ae,"LI",{});var VPe=s(S4);Q0e=n(VPe,"STRONG",{});var TCt=s(Q0e);DTr=r(TCt,"camembert"),TCt.forEach(t),GTr=r(VPe," \u2014 "),WH=n(VPe,"A",{href:!0});var MCt=s(WH);OTr=r(MCt,"TFCamembertForSequenceClassification"),MCt.forEach(t),VTr=r(VPe," (CamemBERT model)"),VPe.forEach(t),XTr=i(ae),R4=n(ae,"LI",{});var XPe=s(R4);H0e=n(XPe,"STRONG",{});var ECt=s(H0e);zTr=r(ECt,"convbert"),ECt.forEach(t),WTr=r(XPe," \u2014 "),QH=n(XPe,"A",{href:!0});var CCt=s(QH);QTr=r(CCt,"TFConvBertForSequenceClassification"),CCt.forEach(t),HTr=r(XPe," (ConvBERT model)"),XPe.forEach(t),UTr=i(ae),P4=n(ae,"LI",{});var zPe=s(P4);U0e=n(zPe,"STRONG",{});var wCt=s(U0e);JTr=r(wCt,"ctrl"),wCt.forEach(t),YTr=r(zPe," \u2014 "),HH=n(zPe,"A",{href:!0});var ACt=s(HH);KTr=r(ACt,"TFCTRLForSequenceClassification"),ACt.forEach(t),ZTr=r(zPe," (CTRL model)"),zPe.forEach(t),e7r=i(ae),B4=n(ae,"LI",{});var WPe=s(B4);J0e=n(WPe,"STRONG",{});var yCt=s(J0e);o7r=r(yCt,"deberta"),yCt.forEach(t),r7r=r(WPe," \u2014 "),UH=n(WPe,"A",{href:!0});var LCt=s(UH);t7r=r(LCt,"TFDebertaForSequenceClassification"),LCt.forEach(t),a7r=r(WPe," (DeBERTa model)"),WPe.forEach(t),n7r=i(ae),I4=n(ae,"LI",{});var QPe=s(I4);Y0e=n(QPe,"STRONG",{});var xCt=s(Y0e);s7r=r(xCt,"deberta-v2"),xCt.forEach(t),l7r=r(QPe," \u2014 "),JH=n(QPe,"A",{href:!0});var $Ct=s(JH);i7r=r($Ct,"TFDebertaV2ForSequenceClassification"),$Ct.forEach(t),d7r=r(QPe," (DeBERTa-v2 model)"),QPe.forEach(t),c7r=i(ae),N4=n(ae,"LI",{});var HPe=s(N4);K0e=n(HPe,"STRONG",{});var kCt=s(K0e);f7r=r(kCt,"distilbert"),kCt.forEach(t),m7r=r(HPe," \u2014 "),YH=n(HPe,"A",{href:!0});var SCt=s(YH);g7r=r(SCt,"TFDistilBertForSequenceClassification"),SCt.forEach(t),h7r=r(HPe," (DistilBERT model)"),HPe.forEach(t),p7r=i(ae),q4=n(ae,"LI",{});var UPe=s(q4);Z0e=n(UPe,"STRONG",{});var RCt=s(Z0e);_7r=r(RCt,"electra"),RCt.forEach(t),u7r=r(UPe," \u2014 "),KH=n(UPe,"A",{href:!0});var PCt=s(KH);b7r=r(PCt,"TFElectraForSequenceClassification"),PCt.forEach(t),v7r=r(UPe," (ELECTRA model)"),UPe.forEach(t),F7r=i(ae),j4=n(ae,"LI",{});var JPe=s(j4);eFe=n(JPe,"STRONG",{});var BCt=s(eFe);T7r=r(BCt,"flaubert"),BCt.forEach(t),M7r=r(JPe," \u2014 "),ZH=n(JPe,"A",{href:!0});var ICt=s(ZH);E7r=r(ICt,"TFFlaubertForSequenceClassification"),ICt.forEach(t),C7r=r(JPe," (FlauBERT model)"),JPe.forEach(t),w7r=i(ae),D4=n(ae,"LI",{});var YPe=s(D4);oFe=n(YPe,"STRONG",{});var NCt=s(oFe);A7r=r(NCt,"funnel"),NCt.forEach(t),y7r=r(YPe," \u2014 "),eU=n(YPe,"A",{href:!0});var qCt=s(eU);L7r=r(qCt,"TFFunnelForSequenceClassification"),qCt.forEach(t),x7r=r(YPe," (Funnel Transformer model)"),YPe.forEach(t),$7r=i(ae),G4=n(ae,"LI",{});var KPe=s(G4);rFe=n(KPe,"STRONG",{});var jCt=s(rFe);k7r=r(jCt,"gpt2"),jCt.forEach(t),S7r=r(KPe," \u2014 "),oU=n(KPe,"A",{href:!0});var DCt=s(oU);R7r=r(DCt,"TFGPT2ForSequenceClassification"),DCt.forEach(t),P7r=r(KPe," (OpenAI GPT-2 model)"),KPe.forEach(t),B7r=i(ae),O4=n(ae,"LI",{});var ZPe=s(O4);tFe=n(ZPe,"STRONG",{});var GCt=s(tFe);I7r=r(GCt,"gptj"),GCt.forEach(t),N7r=r(ZPe," \u2014 "),rU=n(ZPe,"A",{href:!0});var OCt=s(rU);q7r=r(OCt,"TFGPTJForSequenceClassification"),OCt.forEach(t),j7r=r(ZPe," (GPT-J model)"),ZPe.forEach(t),D7r=i(ae),V4=n(ae,"LI",{});var eBe=s(V4);aFe=n(eBe,"STRONG",{});var VCt=s(aFe);G7r=r(VCt,"layoutlm"),VCt.forEach(t),O7r=r(eBe," \u2014 "),tU=n(eBe,"A",{href:!0});var XCt=s(tU);V7r=r(XCt,"TFLayoutLMForSequenceClassification"),XCt.forEach(t),X7r=r(eBe," (LayoutLM model)"),eBe.forEach(t),z7r=i(ae),X4=n(ae,"LI",{});var oBe=s(X4);nFe=n(oBe,"STRONG",{});var zCt=s(nFe);W7r=r(zCt,"longformer"),zCt.forEach(t),Q7r=r(oBe," \u2014 "),aU=n(oBe,"A",{href:!0});var WCt=s(aU);H7r=r(WCt,"TFLongformerForSequenceClassification"),WCt.forEach(t),U7r=r(oBe," (Longformer model)"),oBe.forEach(t),J7r=i(ae),z4=n(ae,"LI",{});var rBe=s(z4);sFe=n(rBe,"STRONG",{});var QCt=s(sFe);Y7r=r(QCt,"mobilebert"),QCt.forEach(t),K7r=r(rBe," \u2014 "),nU=n(rBe,"A",{href:!0});var HCt=s(nU);Z7r=r(HCt,"TFMobileBertForSequenceClassification"),HCt.forEach(t),eMr=r(rBe," (MobileBERT model)"),rBe.forEach(t),oMr=i(ae),W4=n(ae,"LI",{});var tBe=s(W4);lFe=n(tBe,"STRONG",{});var UCt=s(lFe);rMr=r(UCt,"mpnet"),UCt.forEach(t),tMr=r(tBe," \u2014 "),sU=n(tBe,"A",{href:!0});var JCt=s(sU);aMr=r(JCt,"TFMPNetForSequenceClassification"),JCt.forEach(t),nMr=r(tBe," (MPNet model)"),tBe.forEach(t),sMr=i(ae),Q4=n(ae,"LI",{});var aBe=s(Q4);iFe=n(aBe,"STRONG",{});var YCt=s(iFe);lMr=r(YCt,"openai-gpt"),YCt.forEach(t),iMr=r(aBe," \u2014 "),lU=n(aBe,"A",{href:!0});var KCt=s(lU);dMr=r(KCt,"TFOpenAIGPTForSequenceClassification"),KCt.forEach(t),cMr=r(aBe," (OpenAI GPT model)"),aBe.forEach(t),fMr=i(ae),H4=n(ae,"LI",{});var nBe=s(H4);dFe=n(nBe,"STRONG",{});var ZCt=s(dFe);mMr=r(ZCt,"rembert"),ZCt.forEach(t),gMr=r(nBe," \u2014 "),iU=n(nBe,"A",{href:!0});var e5t=s(iU);hMr=r(e5t,"TFRemBertForSequenceClassification"),e5t.forEach(t),pMr=r(nBe," (RemBERT model)"),nBe.forEach(t),_Mr=i(ae),U4=n(ae,"LI",{});var sBe=s(U4);cFe=n(sBe,"STRONG",{});var o5t=s(cFe);uMr=r(o5t,"roberta"),o5t.forEach(t),bMr=r(sBe," \u2014 "),dU=n(sBe,"A",{href:!0});var r5t=s(dU);vMr=r(r5t,"TFRobertaForSequenceClassification"),r5t.forEach(t),FMr=r(sBe," (RoBERTa model)"),sBe.forEach(t),TMr=i(ae),J4=n(ae,"LI",{});var lBe=s(J4);fFe=n(lBe,"STRONG",{});var t5t=s(fFe);MMr=r(t5t,"roformer"),t5t.forEach(t),EMr=r(lBe," \u2014 "),cU=n(lBe,"A",{href:!0});var a5t=s(cU);CMr=r(a5t,"TFRoFormerForSequenceClassification"),a5t.forEach(t),wMr=r(lBe," (RoFormer model)"),lBe.forEach(t),AMr=i(ae),Y4=n(ae,"LI",{});var iBe=s(Y4);mFe=n(iBe,"STRONG",{});var n5t=s(mFe);yMr=r(n5t,"tapas"),n5t.forEach(t),LMr=r(iBe," \u2014 "),fU=n(iBe,"A",{href:!0});var s5t=s(fU);xMr=r(s5t,"TFTapasForSequenceClassification"),s5t.forEach(t),$Mr=r(iBe," (TAPAS model)"),iBe.forEach(t),kMr=i(ae),K4=n(ae,"LI",{});var dBe=s(K4);gFe=n(dBe,"STRONG",{});var l5t=s(gFe);SMr=r(l5t,"transfo-xl"),l5t.forEach(t),RMr=r(dBe," \u2014 "),mU=n(dBe,"A",{href:!0});var i5t=s(mU);PMr=r(i5t,"TFTransfoXLForSequenceClassification"),i5t.forEach(t),BMr=r(dBe," (Transformer-XL model)"),dBe.forEach(t),IMr=i(ae),Z4=n(ae,"LI",{});var cBe=s(Z4);hFe=n(cBe,"STRONG",{});var d5t=s(hFe);NMr=r(d5t,"xlm"),d5t.forEach(t),qMr=r(cBe," \u2014 "),gU=n(cBe,"A",{href:!0});var c5t=s(gU);jMr=r(c5t,"TFXLMForSequenceClassification"),c5t.forEach(t),DMr=r(cBe," (XLM model)"),cBe.forEach(t),GMr=i(ae),eE=n(ae,"LI",{});var fBe=s(eE);pFe=n(fBe,"STRONG",{});var f5t=s(pFe);OMr=r(f5t,"xlm-roberta"),f5t.forEach(t),VMr=r(fBe," \u2014 "),hU=n(fBe,"A",{href:!0});var m5t=s(hU);XMr=r(m5t,"TFXLMRobertaForSequenceClassification"),m5t.forEach(t),zMr=r(fBe," (XLM-RoBERTa model)"),fBe.forEach(t),WMr=i(ae),oE=n(ae,"LI",{});var mBe=s(oE);_Fe=n(mBe,"STRONG",{});var g5t=s(_Fe);QMr=r(g5t,"xlnet"),g5t.forEach(t),HMr=r(mBe," \u2014 "),pU=n(mBe,"A",{href:!0});var h5t=s(pU);UMr=r(h5t,"TFXLNetForSequenceClassification"),h5t.forEach(t),JMr=r(mBe," (XLNet model)"),mBe.forEach(t),ae.forEach(t),YMr=i(Al),T(rE.$$.fragment,Al),Al.forEach(t),wl.forEach(t),Nje=i(f),ic=n(f,"H2",{class:!0});var VGe=s(ic);tE=n(VGe,"A",{id:!0,class:!0,href:!0});var p5t=s(tE);uFe=n(p5t,"SPAN",{});var _5t=s(uFe);T(H8.$$.fragment,_5t),_5t.forEach(t),p5t.forEach(t),KMr=i(VGe),bFe=n(VGe,"SPAN",{});var u5t=s(bFe);ZMr=r(u5t,"TFAutoModelForMultipleChoice"),u5t.forEach(t),VGe.forEach(t),qje=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(U8.$$.fragment,yl),e4r=i(yl),dc=n(yl,"P",{});var See=s(dc);o4r=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_U=n(See,"A",{href:!0});var b5t=s(_U);r4r=r(b5t,"from_pretrained()"),b5t.forEach(t),t4r=r(See," class method or the "),uU=n(See,"A",{href:!0});var v5t=s(uU);a4r=r(v5t,"from_config()"),v5t.forEach(t),n4r=r(See,` class
method.`),See.forEach(t),s4r=i(yl),J8=n(yl,"P",{});var XGe=s(J8);l4r=r(XGe,"This class cannot be instantiated directly using "),vFe=n(XGe,"CODE",{});var F5t=s(vFe);i4r=r(F5t,"__init__()"),F5t.forEach(t),d4r=r(XGe," (throws an error)."),XGe.forEach(t),c4r=i(yl),Pt=n(yl,"DIV",{class:!0});var X6=s(Pt);T(Y8.$$.fragment,X6),f4r=i(X6),FFe=n(X6,"P",{});var T5t=s(FFe);m4r=r(T5t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),T5t.forEach(t),g4r=i(X6),cc=n(X6,"P",{});var Ree=s(cc);h4r=r(Ree,`Note:
Loading a model from its configuration file does `),TFe=n(Ree,"STRONG",{});var M5t=s(TFe);p4r=r(M5t,"not"),M5t.forEach(t),_4r=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=n(Ree,"A",{href:!0});var E5t=s(bU);u4r=r(E5t,"from_pretrained()"),E5t.forEach(t),b4r=r(Ree," to load the model weights."),Ree.forEach(t),v4r=i(X6),T(aE.$$.fragment,X6),X6.forEach(t),F4r=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(K8.$$.fragment,Ll),T4r=i(Ll),MFe=n(Ll,"P",{});var C5t=s(MFe);M4r=r(C5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),C5t.forEach(t),E4r=i(Ll),sn=n(Ll,"P",{});var z6=s(sn);C4r=r(z6,"The model class to instantiate is selected based on the "),EFe=n(z6,"CODE",{});var w5t=s(EFe);w4r=r(w5t,"model_type"),w5t.forEach(t),A4r=r(z6,` property of the config object (either
passed as an argument or loaded from `),CFe=n(z6,"CODE",{});var A5t=s(CFe);y4r=r(A5t,"pretrained_model_name_or_path"),A5t.forEach(t),L4r=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=n(z6,"CODE",{});var y5t=s(wFe);x4r=r(y5t,"pretrained_model_name_or_path"),y5t.forEach(t),$4r=r(z6,":"),z6.forEach(t),k4r=i(Ll),pe=n(Ll,"UL",{});var be=s(pe);nE=n(be,"LI",{});var gBe=s(nE);AFe=n(gBe,"STRONG",{});var L5t=s(AFe);S4r=r(L5t,"albert"),L5t.forEach(t),R4r=r(gBe," \u2014 "),vU=n(gBe,"A",{href:!0});var x5t=s(vU);P4r=r(x5t,"TFAlbertForMultipleChoice"),x5t.forEach(t),B4r=r(gBe," (ALBERT model)"),gBe.forEach(t),I4r=i(be),sE=n(be,"LI",{});var hBe=s(sE);yFe=n(hBe,"STRONG",{});var $5t=s(yFe);N4r=r($5t,"bert"),$5t.forEach(t),q4r=r(hBe," \u2014 "),FU=n(hBe,"A",{href:!0});var k5t=s(FU);j4r=r(k5t,"TFBertForMultipleChoice"),k5t.forEach(t),D4r=r(hBe," (BERT model)"),hBe.forEach(t),G4r=i(be),lE=n(be,"LI",{});var pBe=s(lE);LFe=n(pBe,"STRONG",{});var S5t=s(LFe);O4r=r(S5t,"camembert"),S5t.forEach(t),V4r=r(pBe," \u2014 "),TU=n(pBe,"A",{href:!0});var R5t=s(TU);X4r=r(R5t,"TFCamembertForMultipleChoice"),R5t.forEach(t),z4r=r(pBe," (CamemBERT model)"),pBe.forEach(t),W4r=i(be),iE=n(be,"LI",{});var _Be=s(iE);xFe=n(_Be,"STRONG",{});var P5t=s(xFe);Q4r=r(P5t,"convbert"),P5t.forEach(t),H4r=r(_Be," \u2014 "),MU=n(_Be,"A",{href:!0});var B5t=s(MU);U4r=r(B5t,"TFConvBertForMultipleChoice"),B5t.forEach(t),J4r=r(_Be," (ConvBERT model)"),_Be.forEach(t),Y4r=i(be),dE=n(be,"LI",{});var uBe=s(dE);$Fe=n(uBe,"STRONG",{});var I5t=s($Fe);K4r=r(I5t,"distilbert"),I5t.forEach(t),Z4r=r(uBe," \u2014 "),EU=n(uBe,"A",{href:!0});var N5t=s(EU);eEr=r(N5t,"TFDistilBertForMultipleChoice"),N5t.forEach(t),oEr=r(uBe," (DistilBERT model)"),uBe.forEach(t),rEr=i(be),cE=n(be,"LI",{});var bBe=s(cE);kFe=n(bBe,"STRONG",{});var q5t=s(kFe);tEr=r(q5t,"electra"),q5t.forEach(t),aEr=r(bBe," \u2014 "),CU=n(bBe,"A",{href:!0});var j5t=s(CU);nEr=r(j5t,"TFElectraForMultipleChoice"),j5t.forEach(t),sEr=r(bBe," (ELECTRA model)"),bBe.forEach(t),lEr=i(be),fE=n(be,"LI",{});var vBe=s(fE);SFe=n(vBe,"STRONG",{});var D5t=s(SFe);iEr=r(D5t,"flaubert"),D5t.forEach(t),dEr=r(vBe," \u2014 "),wU=n(vBe,"A",{href:!0});var G5t=s(wU);cEr=r(G5t,"TFFlaubertForMultipleChoice"),G5t.forEach(t),fEr=r(vBe," (FlauBERT model)"),vBe.forEach(t),mEr=i(be),mE=n(be,"LI",{});var FBe=s(mE);RFe=n(FBe,"STRONG",{});var O5t=s(RFe);gEr=r(O5t,"funnel"),O5t.forEach(t),hEr=r(FBe," \u2014 "),AU=n(FBe,"A",{href:!0});var V5t=s(AU);pEr=r(V5t,"TFFunnelForMultipleChoice"),V5t.forEach(t),_Er=r(FBe," (Funnel Transformer model)"),FBe.forEach(t),uEr=i(be),gE=n(be,"LI",{});var TBe=s(gE);PFe=n(TBe,"STRONG",{});var X5t=s(PFe);bEr=r(X5t,"longformer"),X5t.forEach(t),vEr=r(TBe," \u2014 "),yU=n(TBe,"A",{href:!0});var z5t=s(yU);FEr=r(z5t,"TFLongformerForMultipleChoice"),z5t.forEach(t),TEr=r(TBe," (Longformer model)"),TBe.forEach(t),MEr=i(be),hE=n(be,"LI",{});var MBe=s(hE);BFe=n(MBe,"STRONG",{});var W5t=s(BFe);EEr=r(W5t,"mobilebert"),W5t.forEach(t),CEr=r(MBe," \u2014 "),LU=n(MBe,"A",{href:!0});var Q5t=s(LU);wEr=r(Q5t,"TFMobileBertForMultipleChoice"),Q5t.forEach(t),AEr=r(MBe," (MobileBERT model)"),MBe.forEach(t),yEr=i(be),pE=n(be,"LI",{});var EBe=s(pE);IFe=n(EBe,"STRONG",{});var H5t=s(IFe);LEr=r(H5t,"mpnet"),H5t.forEach(t),xEr=r(EBe," \u2014 "),xU=n(EBe,"A",{href:!0});var U5t=s(xU);$Er=r(U5t,"TFMPNetForMultipleChoice"),U5t.forEach(t),kEr=r(EBe," (MPNet model)"),EBe.forEach(t),SEr=i(be),_E=n(be,"LI",{});var CBe=s(_E);NFe=n(CBe,"STRONG",{});var J5t=s(NFe);REr=r(J5t,"rembert"),J5t.forEach(t),PEr=r(CBe," \u2014 "),$U=n(CBe,"A",{href:!0});var Y5t=s($U);BEr=r(Y5t,"TFRemBertForMultipleChoice"),Y5t.forEach(t),IEr=r(CBe," (RemBERT model)"),CBe.forEach(t),NEr=i(be),uE=n(be,"LI",{});var wBe=s(uE);qFe=n(wBe,"STRONG",{});var K5t=s(qFe);qEr=r(K5t,"roberta"),K5t.forEach(t),jEr=r(wBe," \u2014 "),kU=n(wBe,"A",{href:!0});var Z5t=s(kU);DEr=r(Z5t,"TFRobertaForMultipleChoice"),Z5t.forEach(t),GEr=r(wBe," (RoBERTa model)"),wBe.forEach(t),OEr=i(be),bE=n(be,"LI",{});var ABe=s(bE);jFe=n(ABe,"STRONG",{});var e3t=s(jFe);VEr=r(e3t,"roformer"),e3t.forEach(t),XEr=r(ABe," \u2014 "),SU=n(ABe,"A",{href:!0});var o3t=s(SU);zEr=r(o3t,"TFRoFormerForMultipleChoice"),o3t.forEach(t),WEr=r(ABe," (RoFormer model)"),ABe.forEach(t),QEr=i(be),vE=n(be,"LI",{});var yBe=s(vE);DFe=n(yBe,"STRONG",{});var r3t=s(DFe);HEr=r(r3t,"xlm"),r3t.forEach(t),UEr=r(yBe," \u2014 "),RU=n(yBe,"A",{href:!0});var t3t=s(RU);JEr=r(t3t,"TFXLMForMultipleChoice"),t3t.forEach(t),YEr=r(yBe," (XLM model)"),yBe.forEach(t),KEr=i(be),FE=n(be,"LI",{});var LBe=s(FE);GFe=n(LBe,"STRONG",{});var a3t=s(GFe);ZEr=r(a3t,"xlm-roberta"),a3t.forEach(t),eCr=r(LBe," \u2014 "),PU=n(LBe,"A",{href:!0});var n3t=s(PU);oCr=r(n3t,"TFXLMRobertaForMultipleChoice"),n3t.forEach(t),rCr=r(LBe," (XLM-RoBERTa model)"),LBe.forEach(t),tCr=i(be),TE=n(be,"LI",{});var xBe=s(TE);OFe=n(xBe,"STRONG",{});var s3t=s(OFe);aCr=r(s3t,"xlnet"),s3t.forEach(t),nCr=r(xBe," \u2014 "),BU=n(xBe,"A",{href:!0});var l3t=s(BU);sCr=r(l3t,"TFXLNetForMultipleChoice"),l3t.forEach(t),lCr=r(xBe," (XLNet model)"),xBe.forEach(t),be.forEach(t),iCr=i(Ll),T(ME.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),jje=i(f),fc=n(f,"H2",{class:!0});var zGe=s(fc);EE=n(zGe,"A",{id:!0,class:!0,href:!0});var i3t=s(EE);VFe=n(i3t,"SPAN",{});var d3t=s(VFe);T(Z8.$$.fragment,d3t),d3t.forEach(t),i3t.forEach(t),dCr=i(zGe),XFe=n(zGe,"SPAN",{});var c3t=s(XFe);cCr=r(c3t,"TFAutoModelForNextSentencePrediction"),c3t.forEach(t),zGe.forEach(t),Dje=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(e9.$$.fragment,xl),fCr=i(xl),mc=n(xl,"P",{});var Pee=s(mc);mCr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IU=n(Pee,"A",{href:!0});var f3t=s(IU);gCr=r(f3t,"from_pretrained()"),f3t.forEach(t),hCr=r(Pee," class method or the "),NU=n(Pee,"A",{href:!0});var m3t=s(NU);pCr=r(m3t,"from_config()"),m3t.forEach(t),_Cr=r(Pee,` class
method.`),Pee.forEach(t),uCr=i(xl),o9=n(xl,"P",{});var WGe=s(o9);bCr=r(WGe,"This class cannot be instantiated directly using "),zFe=n(WGe,"CODE",{});var g3t=s(zFe);vCr=r(g3t,"__init__()"),g3t.forEach(t),FCr=r(WGe," (throws an error)."),WGe.forEach(t),TCr=i(xl),Bt=n(xl,"DIV",{class:!0});var W6=s(Bt);T(r9.$$.fragment,W6),MCr=i(W6),WFe=n(W6,"P",{});var h3t=s(WFe);ECr=r(h3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),h3t.forEach(t),CCr=i(W6),gc=n(W6,"P",{});var Bee=s(gc);wCr=r(Bee,`Note:
Loading a model from its configuration file does `),QFe=n(Bee,"STRONG",{});var p3t=s(QFe);ACr=r(p3t,"not"),p3t.forEach(t),yCr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=n(Bee,"A",{href:!0});var _3t=s(qU);LCr=r(_3t,"from_pretrained()"),_3t.forEach(t),xCr=r(Bee," to load the model weights."),Bee.forEach(t),$Cr=i(W6),T(CE.$$.fragment,W6),W6.forEach(t),kCr=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(t9.$$.fragment,$l),SCr=i($l),HFe=n($l,"P",{});var u3t=s(HFe);RCr=r(u3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),u3t.forEach(t),PCr=i($l),ln=n($l,"P",{});var Q6=s(ln);BCr=r(Q6,"The model class to instantiate is selected based on the "),UFe=n(Q6,"CODE",{});var b3t=s(UFe);ICr=r(b3t,"model_type"),b3t.forEach(t),NCr=r(Q6,` property of the config object (either
passed as an argument or loaded from `),JFe=n(Q6,"CODE",{});var v3t=s(JFe);qCr=r(v3t,"pretrained_model_name_or_path"),v3t.forEach(t),jCr=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YFe=n(Q6,"CODE",{});var F3t=s(YFe);DCr=r(F3t,"pretrained_model_name_or_path"),F3t.forEach(t),GCr=r(Q6,":"),Q6.forEach(t),OCr=i($l),a9=n($l,"UL",{});var QGe=s(a9);wE=n(QGe,"LI",{});var $Be=s(wE);KFe=n($Be,"STRONG",{});var T3t=s(KFe);VCr=r(T3t,"bert"),T3t.forEach(t),XCr=r($Be," \u2014 "),jU=n($Be,"A",{href:!0});var M3t=s(jU);zCr=r(M3t,"TFBertForNextSentencePrediction"),M3t.forEach(t),WCr=r($Be," (BERT model)"),$Be.forEach(t),QCr=i(QGe),AE=n(QGe,"LI",{});var kBe=s(AE);ZFe=n(kBe,"STRONG",{});var E3t=s(ZFe);HCr=r(E3t,"mobilebert"),E3t.forEach(t),UCr=r(kBe," \u2014 "),DU=n(kBe,"A",{href:!0});var C3t=s(DU);JCr=r(C3t,"TFMobileBertForNextSentencePrediction"),C3t.forEach(t),YCr=r(kBe," (MobileBERT model)"),kBe.forEach(t),QGe.forEach(t),KCr=i($l),T(yE.$$.fragment,$l),$l.forEach(t),xl.forEach(t),Gje=i(f),hc=n(f,"H2",{class:!0});var HGe=s(hc);LE=n(HGe,"A",{id:!0,class:!0,href:!0});var w3t=s(LE);eTe=n(w3t,"SPAN",{});var A3t=s(eTe);T(n9.$$.fragment,A3t),A3t.forEach(t),w3t.forEach(t),ZCr=i(HGe),oTe=n(HGe,"SPAN",{});var y3t=s(oTe);e5r=r(y3t,"TFAutoModelForTableQuestionAnswering"),y3t.forEach(t),HGe.forEach(t),Oje=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(s9.$$.fragment,kl),o5r=i(kl),pc=n(kl,"P",{});var Iee=s(pc);r5r=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),GU=n(Iee,"A",{href:!0});var L3t=s(GU);t5r=r(L3t,"from_pretrained()"),L3t.forEach(t),a5r=r(Iee," class method or the "),OU=n(Iee,"A",{href:!0});var x3t=s(OU);n5r=r(x3t,"from_config()"),x3t.forEach(t),s5r=r(Iee,` class
method.`),Iee.forEach(t),l5r=i(kl),l9=n(kl,"P",{});var UGe=s(l9);i5r=r(UGe,"This class cannot be instantiated directly using "),rTe=n(UGe,"CODE",{});var $3t=s(rTe);d5r=r($3t,"__init__()"),$3t.forEach(t),c5r=r(UGe," (throws an error)."),UGe.forEach(t),f5r=i(kl),It=n(kl,"DIV",{class:!0});var H6=s(It);T(i9.$$.fragment,H6),m5r=i(H6),tTe=n(H6,"P",{});var k3t=s(tTe);g5r=r(k3t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),k3t.forEach(t),h5r=i(H6),_c=n(H6,"P",{});var Nee=s(_c);p5r=r(Nee,`Note:
Loading a model from its configuration file does `),aTe=n(Nee,"STRONG",{});var S3t=s(aTe);_5r=r(S3t,"not"),S3t.forEach(t),u5r=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=n(Nee,"A",{href:!0});var R3t=s(VU);b5r=r(R3t,"from_pretrained()"),R3t.forEach(t),v5r=r(Nee," to load the model weights."),Nee.forEach(t),F5r=i(H6),T(xE.$$.fragment,H6),H6.forEach(t),T5r=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(d9.$$.fragment,Sl),M5r=i(Sl),nTe=n(Sl,"P",{});var P3t=s(nTe);E5r=r(P3t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),P3t.forEach(t),C5r=i(Sl),dn=n(Sl,"P",{});var U6=s(dn);w5r=r(U6,"The model class to instantiate is selected based on the "),sTe=n(U6,"CODE",{});var B3t=s(sTe);A5r=r(B3t,"model_type"),B3t.forEach(t),y5r=r(U6,` property of the config object (either
passed as an argument or loaded from `),lTe=n(U6,"CODE",{});var I3t=s(lTe);L5r=r(I3t,"pretrained_model_name_or_path"),I3t.forEach(t),x5r=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iTe=n(U6,"CODE",{});var N3t=s(iTe);$5r=r(N3t,"pretrained_model_name_or_path"),N3t.forEach(t),k5r=r(U6,":"),U6.forEach(t),S5r=i(Sl),dTe=n(Sl,"UL",{});var q3t=s(dTe);$E=n(q3t,"LI",{});var SBe=s($E);cTe=n(SBe,"STRONG",{});var j3t=s(cTe);R5r=r(j3t,"tapas"),j3t.forEach(t),P5r=r(SBe," \u2014 "),XU=n(SBe,"A",{href:!0});var D3t=s(XU);B5r=r(D3t,"TFTapasForQuestionAnswering"),D3t.forEach(t),I5r=r(SBe," (TAPAS model)"),SBe.forEach(t),q3t.forEach(t),N5r=i(Sl),T(kE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),Vje=i(f),uc=n(f,"H2",{class:!0});var JGe=s(uc);SE=n(JGe,"A",{id:!0,class:!0,href:!0});var G3t=s(SE);fTe=n(G3t,"SPAN",{});var O3t=s(fTe);T(c9.$$.fragment,O3t),O3t.forEach(t),G3t.forEach(t),q5r=i(JGe),mTe=n(JGe,"SPAN",{});var V3t=s(mTe);j5r=r(V3t,"TFAutoModelForTokenClassification"),V3t.forEach(t),JGe.forEach(t),Xje=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(f9.$$.fragment,Rl),D5r=i(Rl),bc=n(Rl,"P",{});var qee=s(bc);G5r=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zU=n(qee,"A",{href:!0});var X3t=s(zU);O5r=r(X3t,"from_pretrained()"),X3t.forEach(t),V5r=r(qee," class method or the "),WU=n(qee,"A",{href:!0});var z3t=s(WU);X5r=r(z3t,"from_config()"),z3t.forEach(t),z5r=r(qee,` class
method.`),qee.forEach(t),W5r=i(Rl),m9=n(Rl,"P",{});var YGe=s(m9);Q5r=r(YGe,"This class cannot be instantiated directly using "),gTe=n(YGe,"CODE",{});var W3t=s(gTe);H5r=r(W3t,"__init__()"),W3t.forEach(t),U5r=r(YGe," (throws an error)."),YGe.forEach(t),J5r=i(Rl),Nt=n(Rl,"DIV",{class:!0});var J6=s(Nt);T(g9.$$.fragment,J6),Y5r=i(J6),hTe=n(J6,"P",{});var Q3t=s(hTe);K5r=r(Q3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Q3t.forEach(t),Z5r=i(J6),vc=n(J6,"P",{});var jee=s(vc);e3r=r(jee,`Note:
Loading a model from its configuration file does `),pTe=n(jee,"STRONG",{});var H3t=s(pTe);o3r=r(H3t,"not"),H3t.forEach(t),r3r=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(jee,"A",{href:!0});var U3t=s(QU);t3r=r(U3t,"from_pretrained()"),U3t.forEach(t),a3r=r(jee," to load the model weights."),jee.forEach(t),n3r=i(J6),T(RE.$$.fragment,J6),J6.forEach(t),s3r=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(h9.$$.fragment,Pl),l3r=i(Pl),_Te=n(Pl,"P",{});var J3t=s(_Te);i3r=r(J3t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),J3t.forEach(t),d3r=i(Pl),cn=n(Pl,"P",{});var Y6=s(cn);c3r=r(Y6,"The model class to instantiate is selected based on the "),uTe=n(Y6,"CODE",{});var Y3t=s(uTe);f3r=r(Y3t,"model_type"),Y3t.forEach(t),m3r=r(Y6,` property of the config object (either
passed as an argument or loaded from `),bTe=n(Y6,"CODE",{});var K3t=s(bTe);g3r=r(K3t,"pretrained_model_name_or_path"),K3t.forEach(t),h3r=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=n(Y6,"CODE",{});var Z3t=s(vTe);p3r=r(Z3t,"pretrained_model_name_or_path"),Z3t.forEach(t),_3r=r(Y6,":"),Y6.forEach(t),u3r=i(Pl),de=n(Pl,"UL",{});var me=s(de);PE=n(me,"LI",{});var RBe=s(PE);FTe=n(RBe,"STRONG",{});var ewt=s(FTe);b3r=r(ewt,"albert"),ewt.forEach(t),v3r=r(RBe," \u2014 "),HU=n(RBe,"A",{href:!0});var owt=s(HU);F3r=r(owt,"TFAlbertForTokenClassification"),owt.forEach(t),T3r=r(RBe," (ALBERT model)"),RBe.forEach(t),M3r=i(me),BE=n(me,"LI",{});var PBe=s(BE);TTe=n(PBe,"STRONG",{});var rwt=s(TTe);E3r=r(rwt,"bert"),rwt.forEach(t),C3r=r(PBe," \u2014 "),UU=n(PBe,"A",{href:!0});var twt=s(UU);w3r=r(twt,"TFBertForTokenClassification"),twt.forEach(t),A3r=r(PBe," (BERT model)"),PBe.forEach(t),y3r=i(me),IE=n(me,"LI",{});var BBe=s(IE);MTe=n(BBe,"STRONG",{});var awt=s(MTe);L3r=r(awt,"camembert"),awt.forEach(t),x3r=r(BBe," \u2014 "),JU=n(BBe,"A",{href:!0});var nwt=s(JU);$3r=r(nwt,"TFCamembertForTokenClassification"),nwt.forEach(t),k3r=r(BBe," (CamemBERT model)"),BBe.forEach(t),S3r=i(me),NE=n(me,"LI",{});var IBe=s(NE);ETe=n(IBe,"STRONG",{});var swt=s(ETe);R3r=r(swt,"convbert"),swt.forEach(t),P3r=r(IBe," \u2014 "),YU=n(IBe,"A",{href:!0});var lwt=s(YU);B3r=r(lwt,"TFConvBertForTokenClassification"),lwt.forEach(t),I3r=r(IBe," (ConvBERT model)"),IBe.forEach(t),N3r=i(me),qE=n(me,"LI",{});var NBe=s(qE);CTe=n(NBe,"STRONG",{});var iwt=s(CTe);q3r=r(iwt,"deberta"),iwt.forEach(t),j3r=r(NBe," \u2014 "),KU=n(NBe,"A",{href:!0});var dwt=s(KU);D3r=r(dwt,"TFDebertaForTokenClassification"),dwt.forEach(t),G3r=r(NBe," (DeBERTa model)"),NBe.forEach(t),O3r=i(me),jE=n(me,"LI",{});var qBe=s(jE);wTe=n(qBe,"STRONG",{});var cwt=s(wTe);V3r=r(cwt,"deberta-v2"),cwt.forEach(t),X3r=r(qBe," \u2014 "),ZU=n(qBe,"A",{href:!0});var fwt=s(ZU);z3r=r(fwt,"TFDebertaV2ForTokenClassification"),fwt.forEach(t),W3r=r(qBe," (DeBERTa-v2 model)"),qBe.forEach(t),Q3r=i(me),DE=n(me,"LI",{});var jBe=s(DE);ATe=n(jBe,"STRONG",{});var mwt=s(ATe);H3r=r(mwt,"distilbert"),mwt.forEach(t),U3r=r(jBe," \u2014 "),eJ=n(jBe,"A",{href:!0});var gwt=s(eJ);J3r=r(gwt,"TFDistilBertForTokenClassification"),gwt.forEach(t),Y3r=r(jBe," (DistilBERT model)"),jBe.forEach(t),K3r=i(me),GE=n(me,"LI",{});var DBe=s(GE);yTe=n(DBe,"STRONG",{});var hwt=s(yTe);Z3r=r(hwt,"electra"),hwt.forEach(t),ewr=r(DBe," \u2014 "),oJ=n(DBe,"A",{href:!0});var pwt=s(oJ);owr=r(pwt,"TFElectraForTokenClassification"),pwt.forEach(t),rwr=r(DBe," (ELECTRA model)"),DBe.forEach(t),twr=i(me),OE=n(me,"LI",{});var GBe=s(OE);LTe=n(GBe,"STRONG",{});var _wt=s(LTe);awr=r(_wt,"flaubert"),_wt.forEach(t),nwr=r(GBe," \u2014 "),rJ=n(GBe,"A",{href:!0});var uwt=s(rJ);swr=r(uwt,"TFFlaubertForTokenClassification"),uwt.forEach(t),lwr=r(GBe," (FlauBERT model)"),GBe.forEach(t),iwr=i(me),VE=n(me,"LI",{});var OBe=s(VE);xTe=n(OBe,"STRONG",{});var bwt=s(xTe);dwr=r(bwt,"funnel"),bwt.forEach(t),cwr=r(OBe," \u2014 "),tJ=n(OBe,"A",{href:!0});var vwt=s(tJ);fwr=r(vwt,"TFFunnelForTokenClassification"),vwt.forEach(t),mwr=r(OBe," (Funnel Transformer model)"),OBe.forEach(t),gwr=i(me),XE=n(me,"LI",{});var VBe=s(XE);$Te=n(VBe,"STRONG",{});var Fwt=s($Te);hwr=r(Fwt,"layoutlm"),Fwt.forEach(t),pwr=r(VBe," \u2014 "),aJ=n(VBe,"A",{href:!0});var Twt=s(aJ);_wr=r(Twt,"TFLayoutLMForTokenClassification"),Twt.forEach(t),uwr=r(VBe," (LayoutLM model)"),VBe.forEach(t),bwr=i(me),zE=n(me,"LI",{});var XBe=s(zE);kTe=n(XBe,"STRONG",{});var Mwt=s(kTe);vwr=r(Mwt,"longformer"),Mwt.forEach(t),Fwr=r(XBe," \u2014 "),nJ=n(XBe,"A",{href:!0});var Ewt=s(nJ);Twr=r(Ewt,"TFLongformerForTokenClassification"),Ewt.forEach(t),Mwr=r(XBe," (Longformer model)"),XBe.forEach(t),Ewr=i(me),WE=n(me,"LI",{});var zBe=s(WE);STe=n(zBe,"STRONG",{});var Cwt=s(STe);Cwr=r(Cwt,"mobilebert"),Cwt.forEach(t),wwr=r(zBe," \u2014 "),sJ=n(zBe,"A",{href:!0});var wwt=s(sJ);Awr=r(wwt,"TFMobileBertForTokenClassification"),wwt.forEach(t),ywr=r(zBe," (MobileBERT model)"),zBe.forEach(t),Lwr=i(me),QE=n(me,"LI",{});var WBe=s(QE);RTe=n(WBe,"STRONG",{});var Awt=s(RTe);xwr=r(Awt,"mpnet"),Awt.forEach(t),$wr=r(WBe," \u2014 "),lJ=n(WBe,"A",{href:!0});var ywt=s(lJ);kwr=r(ywt,"TFMPNetForTokenClassification"),ywt.forEach(t),Swr=r(WBe," (MPNet model)"),WBe.forEach(t),Rwr=i(me),HE=n(me,"LI",{});var QBe=s(HE);PTe=n(QBe,"STRONG",{});var Lwt=s(PTe);Pwr=r(Lwt,"rembert"),Lwt.forEach(t),Bwr=r(QBe," \u2014 "),iJ=n(QBe,"A",{href:!0});var xwt=s(iJ);Iwr=r(xwt,"TFRemBertForTokenClassification"),xwt.forEach(t),Nwr=r(QBe," (RemBERT model)"),QBe.forEach(t),qwr=i(me),UE=n(me,"LI",{});var HBe=s(UE);BTe=n(HBe,"STRONG",{});var $wt=s(BTe);jwr=r($wt,"roberta"),$wt.forEach(t),Dwr=r(HBe," \u2014 "),dJ=n(HBe,"A",{href:!0});var kwt=s(dJ);Gwr=r(kwt,"TFRobertaForTokenClassification"),kwt.forEach(t),Owr=r(HBe," (RoBERTa model)"),HBe.forEach(t),Vwr=i(me),JE=n(me,"LI",{});var UBe=s(JE);ITe=n(UBe,"STRONG",{});var Swt=s(ITe);Xwr=r(Swt,"roformer"),Swt.forEach(t),zwr=r(UBe," \u2014 "),cJ=n(UBe,"A",{href:!0});var Rwt=s(cJ);Wwr=r(Rwt,"TFRoFormerForTokenClassification"),Rwt.forEach(t),Qwr=r(UBe," (RoFormer model)"),UBe.forEach(t),Hwr=i(me),YE=n(me,"LI",{});var JBe=s(YE);NTe=n(JBe,"STRONG",{});var Pwt=s(NTe);Uwr=r(Pwt,"xlm"),Pwt.forEach(t),Jwr=r(JBe," \u2014 "),fJ=n(JBe,"A",{href:!0});var Bwt=s(fJ);Ywr=r(Bwt,"TFXLMForTokenClassification"),Bwt.forEach(t),Kwr=r(JBe," (XLM model)"),JBe.forEach(t),Zwr=i(me),KE=n(me,"LI",{});var YBe=s(KE);qTe=n(YBe,"STRONG",{});var Iwt=s(qTe);e6r=r(Iwt,"xlm-roberta"),Iwt.forEach(t),o6r=r(YBe," \u2014 "),mJ=n(YBe,"A",{href:!0});var Nwt=s(mJ);r6r=r(Nwt,"TFXLMRobertaForTokenClassification"),Nwt.forEach(t),t6r=r(YBe," (XLM-RoBERTa model)"),YBe.forEach(t),a6r=i(me),ZE=n(me,"LI",{});var KBe=s(ZE);jTe=n(KBe,"STRONG",{});var qwt=s(jTe);n6r=r(qwt,"xlnet"),qwt.forEach(t),s6r=r(KBe," \u2014 "),gJ=n(KBe,"A",{href:!0});var jwt=s(gJ);l6r=r(jwt,"TFXLNetForTokenClassification"),jwt.forEach(t),i6r=r(KBe," (XLNet model)"),KBe.forEach(t),me.forEach(t),d6r=i(Pl),T(eC.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),zje=i(f),Fc=n(f,"H2",{class:!0});var KGe=s(Fc);oC=n(KGe,"A",{id:!0,class:!0,href:!0});var Dwt=s(oC);DTe=n(Dwt,"SPAN",{});var Gwt=s(DTe);T(p9.$$.fragment,Gwt),Gwt.forEach(t),Dwt.forEach(t),c6r=i(KGe),GTe=n(KGe,"SPAN",{});var Owt=s(GTe);f6r=r(Owt,"TFAutoModelForQuestionAnswering"),Owt.forEach(t),KGe.forEach(t),Wje=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(_9.$$.fragment,Bl),m6r=i(Bl),Tc=n(Bl,"P",{});var Dee=s(Tc);g6r=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),hJ=n(Dee,"A",{href:!0});var Vwt=s(hJ);h6r=r(Vwt,"from_pretrained()"),Vwt.forEach(t),p6r=r(Dee," class method or the "),pJ=n(Dee,"A",{href:!0});var Xwt=s(pJ);_6r=r(Xwt,"from_config()"),Xwt.forEach(t),u6r=r(Dee,` class
method.`),Dee.forEach(t),b6r=i(Bl),u9=n(Bl,"P",{});var ZGe=s(u9);v6r=r(ZGe,"This class cannot be instantiated directly using "),OTe=n(ZGe,"CODE",{});var zwt=s(OTe);F6r=r(zwt,"__init__()"),zwt.forEach(t),T6r=r(ZGe," (throws an error)."),ZGe.forEach(t),M6r=i(Bl),qt=n(Bl,"DIV",{class:!0});var K6=s(qt);T(b9.$$.fragment,K6),E6r=i(K6),VTe=n(K6,"P",{});var Wwt=s(VTe);C6r=r(Wwt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Wwt.forEach(t),w6r=i(K6),Mc=n(K6,"P",{});var Gee=s(Mc);A6r=r(Gee,`Note:
Loading a model from its configuration file does `),XTe=n(Gee,"STRONG",{});var Qwt=s(XTe);y6r=r(Qwt,"not"),Qwt.forEach(t),L6r=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=n(Gee,"A",{href:!0});var Hwt=s(_J);x6r=r(Hwt,"from_pretrained()"),Hwt.forEach(t),$6r=r(Gee," to load the model weights."),Gee.forEach(t),k6r=i(K6),T(rC.$$.fragment,K6),K6.forEach(t),S6r=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(v9.$$.fragment,Il),R6r=i(Il),zTe=n(Il,"P",{});var Uwt=s(zTe);P6r=r(Uwt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Uwt.forEach(t),B6r=i(Il),fn=n(Il,"P",{});var Z6=s(fn);I6r=r(Z6,"The model class to instantiate is selected based on the "),WTe=n(Z6,"CODE",{});var Jwt=s(WTe);N6r=r(Jwt,"model_type"),Jwt.forEach(t),q6r=r(Z6,` property of the config object (either
passed as an argument or loaded from `),QTe=n(Z6,"CODE",{});var Ywt=s(QTe);j6r=r(Ywt,"pretrained_model_name_or_path"),Ywt.forEach(t),D6r=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=n(Z6,"CODE",{});var Kwt=s(HTe);G6r=r(Kwt,"pretrained_model_name_or_path"),Kwt.forEach(t),O6r=r(Z6,":"),Z6.forEach(t),V6r=i(Il),ce=n(Il,"UL",{});var ge=s(ce);tC=n(ge,"LI",{});var ZBe=s(tC);UTe=n(ZBe,"STRONG",{});var Zwt=s(UTe);X6r=r(Zwt,"albert"),Zwt.forEach(t),z6r=r(ZBe," \u2014 "),uJ=n(ZBe,"A",{href:!0});var e6t=s(uJ);W6r=r(e6t,"TFAlbertForQuestionAnswering"),e6t.forEach(t),Q6r=r(ZBe," (ALBERT model)"),ZBe.forEach(t),H6r=i(ge),aC=n(ge,"LI",{});var eIe=s(aC);JTe=n(eIe,"STRONG",{});var o6t=s(JTe);U6r=r(o6t,"bert"),o6t.forEach(t),J6r=r(eIe," \u2014 "),bJ=n(eIe,"A",{href:!0});var r6t=s(bJ);Y6r=r(r6t,"TFBertForQuestionAnswering"),r6t.forEach(t),K6r=r(eIe," (BERT model)"),eIe.forEach(t),Z6r=i(ge),nC=n(ge,"LI",{});var oIe=s(nC);YTe=n(oIe,"STRONG",{});var t6t=s(YTe);eAr=r(t6t,"camembert"),t6t.forEach(t),oAr=r(oIe," \u2014 "),vJ=n(oIe,"A",{href:!0});var a6t=s(vJ);rAr=r(a6t,"TFCamembertForQuestionAnswering"),a6t.forEach(t),tAr=r(oIe," (CamemBERT model)"),oIe.forEach(t),aAr=i(ge),sC=n(ge,"LI",{});var rIe=s(sC);KTe=n(rIe,"STRONG",{});var n6t=s(KTe);nAr=r(n6t,"convbert"),n6t.forEach(t),sAr=r(rIe," \u2014 "),FJ=n(rIe,"A",{href:!0});var s6t=s(FJ);lAr=r(s6t,"TFConvBertForQuestionAnswering"),s6t.forEach(t),iAr=r(rIe," (ConvBERT model)"),rIe.forEach(t),dAr=i(ge),lC=n(ge,"LI",{});var tIe=s(lC);ZTe=n(tIe,"STRONG",{});var l6t=s(ZTe);cAr=r(l6t,"deberta"),l6t.forEach(t),fAr=r(tIe," \u2014 "),TJ=n(tIe,"A",{href:!0});var i6t=s(TJ);mAr=r(i6t,"TFDebertaForQuestionAnswering"),i6t.forEach(t),gAr=r(tIe," (DeBERTa model)"),tIe.forEach(t),hAr=i(ge),iC=n(ge,"LI",{});var aIe=s(iC);e7e=n(aIe,"STRONG",{});var d6t=s(e7e);pAr=r(d6t,"deberta-v2"),d6t.forEach(t),_Ar=r(aIe," \u2014 "),MJ=n(aIe,"A",{href:!0});var c6t=s(MJ);uAr=r(c6t,"TFDebertaV2ForQuestionAnswering"),c6t.forEach(t),bAr=r(aIe," (DeBERTa-v2 model)"),aIe.forEach(t),vAr=i(ge),dC=n(ge,"LI",{});var nIe=s(dC);o7e=n(nIe,"STRONG",{});var f6t=s(o7e);FAr=r(f6t,"distilbert"),f6t.forEach(t),TAr=r(nIe," \u2014 "),EJ=n(nIe,"A",{href:!0});var m6t=s(EJ);MAr=r(m6t,"TFDistilBertForQuestionAnswering"),m6t.forEach(t),EAr=r(nIe," (DistilBERT model)"),nIe.forEach(t),CAr=i(ge),cC=n(ge,"LI",{});var sIe=s(cC);r7e=n(sIe,"STRONG",{});var g6t=s(r7e);wAr=r(g6t,"electra"),g6t.forEach(t),AAr=r(sIe," \u2014 "),CJ=n(sIe,"A",{href:!0});var h6t=s(CJ);yAr=r(h6t,"TFElectraForQuestionAnswering"),h6t.forEach(t),LAr=r(sIe," (ELECTRA model)"),sIe.forEach(t),xAr=i(ge),fC=n(ge,"LI",{});var lIe=s(fC);t7e=n(lIe,"STRONG",{});var p6t=s(t7e);$Ar=r(p6t,"flaubert"),p6t.forEach(t),kAr=r(lIe," \u2014 "),wJ=n(lIe,"A",{href:!0});var _6t=s(wJ);SAr=r(_6t,"TFFlaubertForQuestionAnsweringSimple"),_6t.forEach(t),RAr=r(lIe," (FlauBERT model)"),lIe.forEach(t),PAr=i(ge),mC=n(ge,"LI",{});var iIe=s(mC);a7e=n(iIe,"STRONG",{});var u6t=s(a7e);BAr=r(u6t,"funnel"),u6t.forEach(t),IAr=r(iIe," \u2014 "),AJ=n(iIe,"A",{href:!0});var b6t=s(AJ);NAr=r(b6t,"TFFunnelForQuestionAnswering"),b6t.forEach(t),qAr=r(iIe," (Funnel Transformer model)"),iIe.forEach(t),jAr=i(ge),gC=n(ge,"LI",{});var dIe=s(gC);n7e=n(dIe,"STRONG",{});var v6t=s(n7e);DAr=r(v6t,"gptj"),v6t.forEach(t),GAr=r(dIe," \u2014 "),yJ=n(dIe,"A",{href:!0});var F6t=s(yJ);OAr=r(F6t,"TFGPTJForQuestionAnswering"),F6t.forEach(t),VAr=r(dIe," (GPT-J model)"),dIe.forEach(t),XAr=i(ge),hC=n(ge,"LI",{});var cIe=s(hC);s7e=n(cIe,"STRONG",{});var T6t=s(s7e);zAr=r(T6t,"longformer"),T6t.forEach(t),WAr=r(cIe," \u2014 "),LJ=n(cIe,"A",{href:!0});var M6t=s(LJ);QAr=r(M6t,"TFLongformerForQuestionAnswering"),M6t.forEach(t),HAr=r(cIe," (Longformer model)"),cIe.forEach(t),UAr=i(ge),pC=n(ge,"LI",{});var fIe=s(pC);l7e=n(fIe,"STRONG",{});var E6t=s(l7e);JAr=r(E6t,"mobilebert"),E6t.forEach(t),YAr=r(fIe," \u2014 "),xJ=n(fIe,"A",{href:!0});var C6t=s(xJ);KAr=r(C6t,"TFMobileBertForQuestionAnswering"),C6t.forEach(t),ZAr=r(fIe," (MobileBERT model)"),fIe.forEach(t),eyr=i(ge),_C=n(ge,"LI",{});var mIe=s(_C);i7e=n(mIe,"STRONG",{});var w6t=s(i7e);oyr=r(w6t,"mpnet"),w6t.forEach(t),ryr=r(mIe," \u2014 "),$J=n(mIe,"A",{href:!0});var A6t=s($J);tyr=r(A6t,"TFMPNetForQuestionAnswering"),A6t.forEach(t),ayr=r(mIe," (MPNet model)"),mIe.forEach(t),nyr=i(ge),uC=n(ge,"LI",{});var gIe=s(uC);d7e=n(gIe,"STRONG",{});var y6t=s(d7e);syr=r(y6t,"rembert"),y6t.forEach(t),lyr=r(gIe," \u2014 "),kJ=n(gIe,"A",{href:!0});var L6t=s(kJ);iyr=r(L6t,"TFRemBertForQuestionAnswering"),L6t.forEach(t),dyr=r(gIe," (RemBERT model)"),gIe.forEach(t),cyr=i(ge),bC=n(ge,"LI",{});var hIe=s(bC);c7e=n(hIe,"STRONG",{});var x6t=s(c7e);fyr=r(x6t,"roberta"),x6t.forEach(t),myr=r(hIe," \u2014 "),SJ=n(hIe,"A",{href:!0});var $6t=s(SJ);gyr=r($6t,"TFRobertaForQuestionAnswering"),$6t.forEach(t),hyr=r(hIe," (RoBERTa model)"),hIe.forEach(t),pyr=i(ge),vC=n(ge,"LI",{});var pIe=s(vC);f7e=n(pIe,"STRONG",{});var k6t=s(f7e);_yr=r(k6t,"roformer"),k6t.forEach(t),uyr=r(pIe," \u2014 "),RJ=n(pIe,"A",{href:!0});var S6t=s(RJ);byr=r(S6t,"TFRoFormerForQuestionAnswering"),S6t.forEach(t),vyr=r(pIe," (RoFormer model)"),pIe.forEach(t),Fyr=i(ge),FC=n(ge,"LI",{});var _Ie=s(FC);m7e=n(_Ie,"STRONG",{});var R6t=s(m7e);Tyr=r(R6t,"xlm"),R6t.forEach(t),Myr=r(_Ie," \u2014 "),PJ=n(_Ie,"A",{href:!0});var P6t=s(PJ);Eyr=r(P6t,"TFXLMForQuestionAnsweringSimple"),P6t.forEach(t),Cyr=r(_Ie," (XLM model)"),_Ie.forEach(t),wyr=i(ge),TC=n(ge,"LI",{});var uIe=s(TC);g7e=n(uIe,"STRONG",{});var B6t=s(g7e);Ayr=r(B6t,"xlm-roberta"),B6t.forEach(t),yyr=r(uIe," \u2014 "),BJ=n(uIe,"A",{href:!0});var I6t=s(BJ);Lyr=r(I6t,"TFXLMRobertaForQuestionAnswering"),I6t.forEach(t),xyr=r(uIe," (XLM-RoBERTa model)"),uIe.forEach(t),$yr=i(ge),MC=n(ge,"LI",{});var bIe=s(MC);h7e=n(bIe,"STRONG",{});var N6t=s(h7e);kyr=r(N6t,"xlnet"),N6t.forEach(t),Syr=r(bIe," \u2014 "),IJ=n(bIe,"A",{href:!0});var q6t=s(IJ);Ryr=r(q6t,"TFXLNetForQuestionAnsweringSimple"),q6t.forEach(t),Pyr=r(bIe," (XLNet model)"),bIe.forEach(t),ge.forEach(t),Byr=i(Il),T(EC.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),Qje=i(f),Ec=n(f,"H2",{class:!0});var eOe=s(Ec);CC=n(eOe,"A",{id:!0,class:!0,href:!0});var j6t=s(CC);p7e=n(j6t,"SPAN",{});var D6t=s(p7e);T(F9.$$.fragment,D6t),D6t.forEach(t),j6t.forEach(t),Iyr=i(eOe),_7e=n(eOe,"SPAN",{});var G6t=s(_7e);Nyr=r(G6t,"TFAutoModelForVision2Seq"),G6t.forEach(t),eOe.forEach(t),Hje=i(f),dr=n(f,"DIV",{class:!0});var Nl=s(dr);T(T9.$$.fragment,Nl),qyr=i(Nl),Cc=n(Nl,"P",{});var Oee=s(Cc);jyr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NJ=n(Oee,"A",{href:!0});var O6t=s(NJ);Dyr=r(O6t,"from_pretrained()"),O6t.forEach(t),Gyr=r(Oee," class method or the "),qJ=n(Oee,"A",{href:!0});var V6t=s(qJ);Oyr=r(V6t,"from_config()"),V6t.forEach(t),Vyr=r(Oee,` class
method.`),Oee.forEach(t),Xyr=i(Nl),M9=n(Nl,"P",{});var oOe=s(M9);zyr=r(oOe,"This class cannot be instantiated directly using "),u7e=n(oOe,"CODE",{});var X6t=s(u7e);Wyr=r(X6t,"__init__()"),X6t.forEach(t),Qyr=r(oOe," (throws an error)."),oOe.forEach(t),Hyr=i(Nl),jt=n(Nl,"DIV",{class:!0});var eA=s(jt);T(E9.$$.fragment,eA),Uyr=i(eA),b7e=n(eA,"P",{});var z6t=s(b7e);Jyr=r(z6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),z6t.forEach(t),Yyr=i(eA),wc=n(eA,"P",{});var Vee=s(wc);Kyr=r(Vee,`Note:
Loading a model from its configuration file does `),v7e=n(Vee,"STRONG",{});var W6t=s(v7e);Zyr=r(W6t,"not"),W6t.forEach(t),eLr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(Vee,"A",{href:!0});var Q6t=s(jJ);oLr=r(Q6t,"from_pretrained()"),Q6t.forEach(t),rLr=r(Vee," to load the model weights."),Vee.forEach(t),tLr=i(eA),T(wC.$$.fragment,eA),eA.forEach(t),aLr=i(Nl),Nr=n(Nl,"DIV",{class:!0});var ql=s(Nr);T(C9.$$.fragment,ql),nLr=i(ql),F7e=n(ql,"P",{});var H6t=s(F7e);sLr=r(H6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),H6t.forEach(t),lLr=i(ql),mn=n(ql,"P",{});var oA=s(mn);iLr=r(oA,"The model class to instantiate is selected based on the "),T7e=n(oA,"CODE",{});var U6t=s(T7e);dLr=r(U6t,"model_type"),U6t.forEach(t),cLr=r(oA,` property of the config object (either
passed as an argument or loaded from `),M7e=n(oA,"CODE",{});var J6t=s(M7e);fLr=r(J6t,"pretrained_model_name_or_path"),J6t.forEach(t),mLr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E7e=n(oA,"CODE",{});var Y6t=s(E7e);gLr=r(Y6t,"pretrained_model_name_or_path"),Y6t.forEach(t),hLr=r(oA,":"),oA.forEach(t),pLr=i(ql),C7e=n(ql,"UL",{});var K6t=s(C7e);AC=n(K6t,"LI",{});var vIe=s(AC);w7e=n(vIe,"STRONG",{});var Z6t=s(w7e);_Lr=r(Z6t,"vision-encoder-decoder"),Z6t.forEach(t),uLr=r(vIe," \u2014 "),DJ=n(vIe,"A",{href:!0});var eAt=s(DJ);bLr=r(eAt,"TFVisionEncoderDecoderModel"),eAt.forEach(t),vLr=r(vIe," (Vision Encoder decoder model)"),vIe.forEach(t),K6t.forEach(t),FLr=i(ql),T(yC.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),Uje=i(f),Ac=n(f,"H2",{class:!0});var rOe=s(Ac);LC=n(rOe,"A",{id:!0,class:!0,href:!0});var oAt=s(LC);A7e=n(oAt,"SPAN",{});var rAt=s(A7e);T(w9.$$.fragment,rAt),rAt.forEach(t),oAt.forEach(t),TLr=i(rOe),y7e=n(rOe,"SPAN",{});var tAt=s(y7e);MLr=r(tAt,"TFAutoModelForSpeechSeq2Seq"),tAt.forEach(t),rOe.forEach(t),Jje=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T(A9.$$.fragment,jl),ELr=i(jl),yc=n(jl,"P",{});var Xee=s(yc);CLr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),GJ=n(Xee,"A",{href:!0});var aAt=s(GJ);wLr=r(aAt,"from_pretrained()"),aAt.forEach(t),ALr=r(Xee," class method or the "),OJ=n(Xee,"A",{href:!0});var nAt=s(OJ);yLr=r(nAt,"from_config()"),nAt.forEach(t),LLr=r(Xee,` class
method.`),Xee.forEach(t),xLr=i(jl),y9=n(jl,"P",{});var tOe=s(y9);$Lr=r(tOe,"This class cannot be instantiated directly using "),L7e=n(tOe,"CODE",{});var sAt=s(L7e);kLr=r(sAt,"__init__()"),sAt.forEach(t),SLr=r(tOe," (throws an error)."),tOe.forEach(t),RLr=i(jl),Dt=n(jl,"DIV",{class:!0});var rA=s(Dt);T(L9.$$.fragment,rA),PLr=i(rA),x7e=n(rA,"P",{});var lAt=s(x7e);BLr=r(lAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),lAt.forEach(t),ILr=i(rA),Lc=n(rA,"P",{});var zee=s(Lc);NLr=r(zee,`Note:
Loading a model from its configuration file does `),$7e=n(zee,"STRONG",{});var iAt=s($7e);qLr=r(iAt,"not"),iAt.forEach(t),jLr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(zee,"A",{href:!0});var dAt=s(VJ);DLr=r(dAt,"from_pretrained()"),dAt.forEach(t),GLr=r(zee," to load the model weights."),zee.forEach(t),OLr=i(rA),T(xC.$$.fragment,rA),rA.forEach(t),VLr=i(jl),qr=n(jl,"DIV",{class:!0});var Dl=s(qr);T(x9.$$.fragment,Dl),XLr=i(Dl),k7e=n(Dl,"P",{});var cAt=s(k7e);zLr=r(cAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),cAt.forEach(t),WLr=i(Dl),gn=n(Dl,"P",{});var tA=s(gn);QLr=r(tA,"The model class to instantiate is selected based on the "),S7e=n(tA,"CODE",{});var fAt=s(S7e);HLr=r(fAt,"model_type"),fAt.forEach(t),ULr=r(tA,` property of the config object (either
passed as an argument or loaded from `),R7e=n(tA,"CODE",{});var mAt=s(R7e);JLr=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),YLr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P7e=n(tA,"CODE",{});var gAt=s(P7e);KLr=r(gAt,"pretrained_model_name_or_path"),gAt.forEach(t),ZLr=r(tA,":"),tA.forEach(t),e8r=i(Dl),B7e=n(Dl,"UL",{});var hAt=s(B7e);$C=n(hAt,"LI",{});var FIe=s($C);I7e=n(FIe,"STRONG",{});var pAt=s(I7e);o8r=r(pAt,"speech_to_text"),pAt.forEach(t),r8r=r(FIe," \u2014 "),XJ=n(FIe,"A",{href:!0});var _At=s(XJ);t8r=r(_At,"TFSpeech2TextForConditionalGeneration"),_At.forEach(t),a8r=r(FIe," (Speech2Text model)"),FIe.forEach(t),hAt.forEach(t),n8r=i(Dl),T(kC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Yje=i(f),xc=n(f,"H2",{class:!0});var aOe=s(xc);SC=n(aOe,"A",{id:!0,class:!0,href:!0});var uAt=s(SC);N7e=n(uAt,"SPAN",{});var bAt=s(N7e);T($9.$$.fragment,bAt),bAt.forEach(t),uAt.forEach(t),s8r=i(aOe),q7e=n(aOe,"SPAN",{});var vAt=s(q7e);l8r=r(vAt,"FlaxAutoModel"),vAt.forEach(t),aOe.forEach(t),Kje=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T(k9.$$.fragment,Gl),i8r=i(Gl),$c=n(Gl,"P",{});var Wee=s($c);d8r=r(Wee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zJ=n(Wee,"A",{href:!0});var FAt=s(zJ);c8r=r(FAt,"from_pretrained()"),FAt.forEach(t),f8r=r(Wee," class method or the "),WJ=n(Wee,"A",{href:!0});var TAt=s(WJ);m8r=r(TAt,"from_config()"),TAt.forEach(t),g8r=r(Wee,` class
method.`),Wee.forEach(t),h8r=i(Gl),S9=n(Gl,"P",{});var nOe=s(S9);p8r=r(nOe,"This class cannot be instantiated directly using "),j7e=n(nOe,"CODE",{});var MAt=s(j7e);_8r=r(MAt,"__init__()"),MAt.forEach(t),u8r=r(nOe," (throws an error)."),nOe.forEach(t),b8r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var aA=s(Gt);T(R9.$$.fragment,aA),v8r=i(aA),D7e=n(aA,"P",{});var EAt=s(D7e);F8r=r(EAt,"Instantiates one of the base model classes of the library from a configuration."),EAt.forEach(t),T8r=i(aA),kc=n(aA,"P",{});var Qee=s(kc);M8r=r(Qee,`Note:
Loading a model from its configuration file does `),G7e=n(Qee,"STRONG",{});var CAt=s(G7e);E8r=r(CAt,"not"),CAt.forEach(t),C8r=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(Qee,"A",{href:!0});var wAt=s(QJ);w8r=r(wAt,"from_pretrained()"),wAt.forEach(t),A8r=r(Qee," to load the model weights."),Qee.forEach(t),y8r=i(aA),T(RC.$$.fragment,aA),aA.forEach(t),L8r=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(P9.$$.fragment,Ol),x8r=i(Ol),O7e=n(Ol,"P",{});var AAt=s(O7e);$8r=r(AAt,"Instantiate one of the base model classes of the library from a pretrained model."),AAt.forEach(t),k8r=i(Ol),hn=n(Ol,"P",{});var nA=s(hn);S8r=r(nA,"The model class to instantiate is selected based on the "),V7e=n(nA,"CODE",{});var yAt=s(V7e);R8r=r(yAt,"model_type"),yAt.forEach(t),P8r=r(nA,` property of the config object (either
passed as an argument or loaded from `),X7e=n(nA,"CODE",{});var LAt=s(X7e);B8r=r(LAt,"pretrained_model_name_or_path"),LAt.forEach(t),I8r=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=n(nA,"CODE",{});var xAt=s(z7e);N8r=r(xAt,"pretrained_model_name_or_path"),xAt.forEach(t),q8r=r(nA,":"),nA.forEach(t),j8r=i(Ol),te=n(Ol,"UL",{});var ne=s(te);PC=n(ne,"LI",{});var TIe=s(PC);W7e=n(TIe,"STRONG",{});var $At=s(W7e);D8r=r($At,"albert"),$At.forEach(t),G8r=r(TIe," \u2014 "),HJ=n(TIe,"A",{href:!0});var kAt=s(HJ);O8r=r(kAt,"FlaxAlbertModel"),kAt.forEach(t),V8r=r(TIe," (ALBERT model)"),TIe.forEach(t),X8r=i(ne),BC=n(ne,"LI",{});var MIe=s(BC);Q7e=n(MIe,"STRONG",{});var SAt=s(Q7e);z8r=r(SAt,"bart"),SAt.forEach(t),W8r=r(MIe," \u2014 "),UJ=n(MIe,"A",{href:!0});var RAt=s(UJ);Q8r=r(RAt,"FlaxBartModel"),RAt.forEach(t),H8r=r(MIe," (BART model)"),MIe.forEach(t),U8r=i(ne),IC=n(ne,"LI",{});var EIe=s(IC);H7e=n(EIe,"STRONG",{});var PAt=s(H7e);J8r=r(PAt,"beit"),PAt.forEach(t),Y8r=r(EIe," \u2014 "),JJ=n(EIe,"A",{href:!0});var BAt=s(JJ);K8r=r(BAt,"FlaxBeitModel"),BAt.forEach(t),Z8r=r(EIe," (BEiT model)"),EIe.forEach(t),e9r=i(ne),NC=n(ne,"LI",{});var CIe=s(NC);U7e=n(CIe,"STRONG",{});var IAt=s(U7e);o9r=r(IAt,"bert"),IAt.forEach(t),r9r=r(CIe," \u2014 "),YJ=n(CIe,"A",{href:!0});var NAt=s(YJ);t9r=r(NAt,"FlaxBertModel"),NAt.forEach(t),a9r=r(CIe," (BERT model)"),CIe.forEach(t),n9r=i(ne),qC=n(ne,"LI",{});var wIe=s(qC);J7e=n(wIe,"STRONG",{});var qAt=s(J7e);s9r=r(qAt,"big_bird"),qAt.forEach(t),l9r=r(wIe," \u2014 "),KJ=n(wIe,"A",{href:!0});var jAt=s(KJ);i9r=r(jAt,"FlaxBigBirdModel"),jAt.forEach(t),d9r=r(wIe," (BigBird model)"),wIe.forEach(t),c9r=i(ne),jC=n(ne,"LI",{});var AIe=s(jC);Y7e=n(AIe,"STRONG",{});var DAt=s(Y7e);f9r=r(DAt,"blenderbot"),DAt.forEach(t),m9r=r(AIe," \u2014 "),ZJ=n(AIe,"A",{href:!0});var GAt=s(ZJ);g9r=r(GAt,"FlaxBlenderbotModel"),GAt.forEach(t),h9r=r(AIe," (Blenderbot model)"),AIe.forEach(t),p9r=i(ne),DC=n(ne,"LI",{});var yIe=s(DC);K7e=n(yIe,"STRONG",{});var OAt=s(K7e);_9r=r(OAt,"blenderbot-small"),OAt.forEach(t),u9r=r(yIe," \u2014 "),eY=n(yIe,"A",{href:!0});var VAt=s(eY);b9r=r(VAt,"FlaxBlenderbotSmallModel"),VAt.forEach(t),v9r=r(yIe," (BlenderbotSmall model)"),yIe.forEach(t),F9r=i(ne),GC=n(ne,"LI",{});var LIe=s(GC);Z7e=n(LIe,"STRONG",{});var XAt=s(Z7e);T9r=r(XAt,"clip"),XAt.forEach(t),M9r=r(LIe," \u2014 "),oY=n(LIe,"A",{href:!0});var zAt=s(oY);E9r=r(zAt,"FlaxCLIPModel"),zAt.forEach(t),C9r=r(LIe," (CLIP model)"),LIe.forEach(t),w9r=i(ne),OC=n(ne,"LI",{});var xIe=s(OC);eMe=n(xIe,"STRONG",{});var WAt=s(eMe);A9r=r(WAt,"distilbert"),WAt.forEach(t),y9r=r(xIe," \u2014 "),rY=n(xIe,"A",{href:!0});var QAt=s(rY);L9r=r(QAt,"FlaxDistilBertModel"),QAt.forEach(t),x9r=r(xIe," (DistilBERT model)"),xIe.forEach(t),$9r=i(ne),VC=n(ne,"LI",{});var $Ie=s(VC);oMe=n($Ie,"STRONG",{});var HAt=s(oMe);k9r=r(HAt,"electra"),HAt.forEach(t),S9r=r($Ie," \u2014 "),tY=n($Ie,"A",{href:!0});var UAt=s(tY);R9r=r(UAt,"FlaxElectraModel"),UAt.forEach(t),P9r=r($Ie," (ELECTRA model)"),$Ie.forEach(t),B9r=i(ne),XC=n(ne,"LI",{});var kIe=s(XC);rMe=n(kIe,"STRONG",{});var JAt=s(rMe);I9r=r(JAt,"gpt2"),JAt.forEach(t),N9r=r(kIe," \u2014 "),aY=n(kIe,"A",{href:!0});var YAt=s(aY);q9r=r(YAt,"FlaxGPT2Model"),YAt.forEach(t),j9r=r(kIe," (OpenAI GPT-2 model)"),kIe.forEach(t),D9r=i(ne),zC=n(ne,"LI",{});var SIe=s(zC);tMe=n(SIe,"STRONG",{});var KAt=s(tMe);G9r=r(KAt,"gpt_neo"),KAt.forEach(t),O9r=r(SIe," \u2014 "),nY=n(SIe,"A",{href:!0});var ZAt=s(nY);V9r=r(ZAt,"FlaxGPTNeoModel"),ZAt.forEach(t),X9r=r(SIe," (GPT Neo model)"),SIe.forEach(t),z9r=i(ne),WC=n(ne,"LI",{});var RIe=s(WC);aMe=n(RIe,"STRONG",{});var eyt=s(aMe);W9r=r(eyt,"gptj"),eyt.forEach(t),Q9r=r(RIe," \u2014 "),sY=n(RIe,"A",{href:!0});var oyt=s(sY);H9r=r(oyt,"FlaxGPTJModel"),oyt.forEach(t),U9r=r(RIe," (GPT-J model)"),RIe.forEach(t),J9r=i(ne),QC=n(ne,"LI",{});var PIe=s(QC);nMe=n(PIe,"STRONG",{});var ryt=s(nMe);Y9r=r(ryt,"marian"),ryt.forEach(t),K9r=r(PIe," \u2014 "),lY=n(PIe,"A",{href:!0});var tyt=s(lY);Z9r=r(tyt,"FlaxMarianModel"),tyt.forEach(t),exr=r(PIe," (Marian model)"),PIe.forEach(t),oxr=i(ne),HC=n(ne,"LI",{});var BIe=s(HC);sMe=n(BIe,"STRONG",{});var ayt=s(sMe);rxr=r(ayt,"mbart"),ayt.forEach(t),txr=r(BIe," \u2014 "),iY=n(BIe,"A",{href:!0});var nyt=s(iY);axr=r(nyt,"FlaxMBartModel"),nyt.forEach(t),nxr=r(BIe," (mBART model)"),BIe.forEach(t),sxr=i(ne),UC=n(ne,"LI",{});var IIe=s(UC);lMe=n(IIe,"STRONG",{});var syt=s(lMe);lxr=r(syt,"mt5"),syt.forEach(t),ixr=r(IIe," \u2014 "),dY=n(IIe,"A",{href:!0});var lyt=s(dY);dxr=r(lyt,"FlaxMT5Model"),lyt.forEach(t),cxr=r(IIe," (mT5 model)"),IIe.forEach(t),fxr=i(ne),JC=n(ne,"LI",{});var NIe=s(JC);iMe=n(NIe,"STRONG",{});var iyt=s(iMe);mxr=r(iyt,"pegasus"),iyt.forEach(t),gxr=r(NIe," \u2014 "),cY=n(NIe,"A",{href:!0});var dyt=s(cY);hxr=r(dyt,"FlaxPegasusModel"),dyt.forEach(t),pxr=r(NIe," (Pegasus model)"),NIe.forEach(t),_xr=i(ne),YC=n(ne,"LI",{});var qIe=s(YC);dMe=n(qIe,"STRONG",{});var cyt=s(dMe);uxr=r(cyt,"roberta"),cyt.forEach(t),bxr=r(qIe," \u2014 "),fY=n(qIe,"A",{href:!0});var fyt=s(fY);vxr=r(fyt,"FlaxRobertaModel"),fyt.forEach(t),Fxr=r(qIe," (RoBERTa model)"),qIe.forEach(t),Txr=i(ne),KC=n(ne,"LI",{});var jIe=s(KC);cMe=n(jIe,"STRONG",{});var myt=s(cMe);Mxr=r(myt,"roformer"),myt.forEach(t),Exr=r(jIe," \u2014 "),mY=n(jIe,"A",{href:!0});var gyt=s(mY);Cxr=r(gyt,"FlaxRoFormerModel"),gyt.forEach(t),wxr=r(jIe," (RoFormer model)"),jIe.forEach(t),Axr=i(ne),ZC=n(ne,"LI",{});var DIe=s(ZC);fMe=n(DIe,"STRONG",{});var hyt=s(fMe);yxr=r(hyt,"t5"),hyt.forEach(t),Lxr=r(DIe," \u2014 "),gY=n(DIe,"A",{href:!0});var pyt=s(gY);xxr=r(pyt,"FlaxT5Model"),pyt.forEach(t),$xr=r(DIe," (T5 model)"),DIe.forEach(t),kxr=i(ne),e5=n(ne,"LI",{});var GIe=s(e5);mMe=n(GIe,"STRONG",{});var _yt=s(mMe);Sxr=r(_yt,"vision-text-dual-encoder"),_yt.forEach(t),Rxr=r(GIe," \u2014 "),hY=n(GIe,"A",{href:!0});var uyt=s(hY);Pxr=r(uyt,"FlaxVisionTextDualEncoderModel"),uyt.forEach(t),Bxr=r(GIe," (VisionTextDualEncoder model)"),GIe.forEach(t),Ixr=i(ne),o5=n(ne,"LI",{});var OIe=s(o5);gMe=n(OIe,"STRONG",{});var byt=s(gMe);Nxr=r(byt,"vit"),byt.forEach(t),qxr=r(OIe," \u2014 "),pY=n(OIe,"A",{href:!0});var vyt=s(pY);jxr=r(vyt,"FlaxViTModel"),vyt.forEach(t),Dxr=r(OIe," (ViT model)"),OIe.forEach(t),Gxr=i(ne),r5=n(ne,"LI",{});var VIe=s(r5);hMe=n(VIe,"STRONG",{});var Fyt=s(hMe);Oxr=r(Fyt,"wav2vec2"),Fyt.forEach(t),Vxr=r(VIe," \u2014 "),_Y=n(VIe,"A",{href:!0});var Tyt=s(_Y);Xxr=r(Tyt,"FlaxWav2Vec2Model"),Tyt.forEach(t),zxr=r(VIe," (Wav2Vec2 model)"),VIe.forEach(t),Wxr=i(ne),t5=n(ne,"LI",{});var XIe=s(t5);pMe=n(XIe,"STRONG",{});var Myt=s(pMe);Qxr=r(Myt,"xglm"),Myt.forEach(t),Hxr=r(XIe," \u2014 "),uY=n(XIe,"A",{href:!0});var Eyt=s(uY);Uxr=r(Eyt,"FlaxXGLMModel"),Eyt.forEach(t),Jxr=r(XIe," (XGLM model)"),XIe.forEach(t),Yxr=i(ne),a5=n(ne,"LI",{});var zIe=s(a5);_Me=n(zIe,"STRONG",{});var Cyt=s(_Me);Kxr=r(Cyt,"xlm-roberta"),Cyt.forEach(t),Zxr=r(zIe," \u2014 "),bY=n(zIe,"A",{href:!0});var wyt=s(bY);e$r=r(wyt,"FlaxXLMRobertaModel"),wyt.forEach(t),o$r=r(zIe," (XLM-RoBERTa model)"),zIe.forEach(t),ne.forEach(t),r$r=i(Ol),T(n5.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Zje=i(f),Sc=n(f,"H2",{class:!0});var sOe=s(Sc);s5=n(sOe,"A",{id:!0,class:!0,href:!0});var Ayt=s(s5);uMe=n(Ayt,"SPAN",{});var yyt=s(uMe);T(B9.$$.fragment,yyt),yyt.forEach(t),Ayt.forEach(t),t$r=i(sOe),bMe=n(sOe,"SPAN",{});var Lyt=s(bMe);a$r=r(Lyt,"FlaxAutoModelForCausalLM"),Lyt.forEach(t),sOe.forEach(t),eDe=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T(I9.$$.fragment,Vl),n$r=i(Vl),Rc=n(Vl,"P",{});var Hee=s(Rc);s$r=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vY=n(Hee,"A",{href:!0});var xyt=s(vY);l$r=r(xyt,"from_pretrained()"),xyt.forEach(t),i$r=r(Hee," class method or the "),FY=n(Hee,"A",{href:!0});var $yt=s(FY);d$r=r($yt,"from_config()"),$yt.forEach(t),c$r=r(Hee,` class
method.`),Hee.forEach(t),f$r=i(Vl),N9=n(Vl,"P",{});var lOe=s(N9);m$r=r(lOe,"This class cannot be instantiated directly using "),vMe=n(lOe,"CODE",{});var kyt=s(vMe);g$r=r(kyt,"__init__()"),kyt.forEach(t),h$r=r(lOe," (throws an error)."),lOe.forEach(t),p$r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var sA=s(Ot);T(q9.$$.fragment,sA),_$r=i(sA),FMe=n(sA,"P",{});var Syt=s(FMe);u$r=r(Syt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Syt.forEach(t),b$r=i(sA),Pc=n(sA,"P",{});var Uee=s(Pc);v$r=r(Uee,`Note:
Loading a model from its configuration file does `),TMe=n(Uee,"STRONG",{});var Ryt=s(TMe);F$r=r(Ryt,"not"),Ryt.forEach(t),T$r=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=n(Uee,"A",{href:!0});var Pyt=s(TY);M$r=r(Pyt,"from_pretrained()"),Pyt.forEach(t),E$r=r(Uee," to load the model weights."),Uee.forEach(t),C$r=i(sA),T(l5.$$.fragment,sA),sA.forEach(t),w$r=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(j9.$$.fragment,Xl),A$r=i(Xl),MMe=n(Xl,"P",{});var Byt=s(MMe);y$r=r(Byt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Byt.forEach(t),L$r=i(Xl),pn=n(Xl,"P",{});var lA=s(pn);x$r=r(lA,"The model class to instantiate is selected based on the "),EMe=n(lA,"CODE",{});var Iyt=s(EMe);$$r=r(Iyt,"model_type"),Iyt.forEach(t),k$r=r(lA,` property of the config object (either
passed as an argument or loaded from `),CMe=n(lA,"CODE",{});var Nyt=s(CMe);S$r=r(Nyt,"pretrained_model_name_or_path"),Nyt.forEach(t),R$r=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=n(lA,"CODE",{});var qyt=s(wMe);P$r=r(qyt,"pretrained_model_name_or_path"),qyt.forEach(t),B$r=r(lA,":"),lA.forEach(t),I$r=i(Xl),Re=n(Xl,"UL",{});var Xe=s(Re);i5=n(Xe,"LI",{});var WIe=s(i5);AMe=n(WIe,"STRONG",{});var jyt=s(AMe);N$r=r(jyt,"bart"),jyt.forEach(t),q$r=r(WIe," \u2014 "),MY=n(WIe,"A",{href:!0});var Dyt=s(MY);j$r=r(Dyt,"FlaxBartForCausalLM"),Dyt.forEach(t),D$r=r(WIe," (BART model)"),WIe.forEach(t),G$r=i(Xe),d5=n(Xe,"LI",{});var QIe=s(d5);yMe=n(QIe,"STRONG",{});var Gyt=s(yMe);O$r=r(Gyt,"bert"),Gyt.forEach(t),V$r=r(QIe," \u2014 "),EY=n(QIe,"A",{href:!0});var Oyt=s(EY);X$r=r(Oyt,"FlaxBertForCausalLM"),Oyt.forEach(t),z$r=r(QIe," (BERT model)"),QIe.forEach(t),W$r=i(Xe),c5=n(Xe,"LI",{});var HIe=s(c5);LMe=n(HIe,"STRONG",{});var Vyt=s(LMe);Q$r=r(Vyt,"big_bird"),Vyt.forEach(t),H$r=r(HIe," \u2014 "),CY=n(HIe,"A",{href:!0});var Xyt=s(CY);U$r=r(Xyt,"FlaxBigBirdForCausalLM"),Xyt.forEach(t),J$r=r(HIe," (BigBird model)"),HIe.forEach(t),Y$r=i(Xe),f5=n(Xe,"LI",{});var UIe=s(f5);xMe=n(UIe,"STRONG",{});var zyt=s(xMe);K$r=r(zyt,"electra"),zyt.forEach(t),Z$r=r(UIe," \u2014 "),wY=n(UIe,"A",{href:!0});var Wyt=s(wY);ekr=r(Wyt,"FlaxElectraForCausalLM"),Wyt.forEach(t),okr=r(UIe," (ELECTRA model)"),UIe.forEach(t),rkr=i(Xe),m5=n(Xe,"LI",{});var JIe=s(m5);$Me=n(JIe,"STRONG",{});var Qyt=s($Me);tkr=r(Qyt,"gpt2"),Qyt.forEach(t),akr=r(JIe," \u2014 "),AY=n(JIe,"A",{href:!0});var Hyt=s(AY);nkr=r(Hyt,"FlaxGPT2LMHeadModel"),Hyt.forEach(t),skr=r(JIe," (OpenAI GPT-2 model)"),JIe.forEach(t),lkr=i(Xe),g5=n(Xe,"LI",{});var YIe=s(g5);kMe=n(YIe,"STRONG",{});var Uyt=s(kMe);ikr=r(Uyt,"gpt_neo"),Uyt.forEach(t),dkr=r(YIe," \u2014 "),yY=n(YIe,"A",{href:!0});var Jyt=s(yY);ckr=r(Jyt,"FlaxGPTNeoForCausalLM"),Jyt.forEach(t),fkr=r(YIe," (GPT Neo model)"),YIe.forEach(t),mkr=i(Xe),h5=n(Xe,"LI",{});var KIe=s(h5);SMe=n(KIe,"STRONG",{});var Yyt=s(SMe);gkr=r(Yyt,"gptj"),Yyt.forEach(t),hkr=r(KIe," \u2014 "),LY=n(KIe,"A",{href:!0});var Kyt=s(LY);pkr=r(Kyt,"FlaxGPTJForCausalLM"),Kyt.forEach(t),_kr=r(KIe," (GPT-J model)"),KIe.forEach(t),ukr=i(Xe),p5=n(Xe,"LI",{});var ZIe=s(p5);RMe=n(ZIe,"STRONG",{});var Zyt=s(RMe);bkr=r(Zyt,"roberta"),Zyt.forEach(t),vkr=r(ZIe," \u2014 "),xY=n(ZIe,"A",{href:!0});var eLt=s(xY);Fkr=r(eLt,"FlaxRobertaForCausalLM"),eLt.forEach(t),Tkr=r(ZIe," (RoBERTa model)"),ZIe.forEach(t),Mkr=i(Xe),_5=n(Xe,"LI",{});var eNe=s(_5);PMe=n(eNe,"STRONG",{});var oLt=s(PMe);Ekr=r(oLt,"xglm"),oLt.forEach(t),Ckr=r(eNe," \u2014 "),$Y=n(eNe,"A",{href:!0});var rLt=s($Y);wkr=r(rLt,"FlaxXGLMForCausalLM"),rLt.forEach(t),Akr=r(eNe," (XGLM model)"),eNe.forEach(t),Xe.forEach(t),ykr=i(Xl),T(u5.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),oDe=i(f),Bc=n(f,"H2",{class:!0});var iOe=s(Bc);b5=n(iOe,"A",{id:!0,class:!0,href:!0});var tLt=s(b5);BMe=n(tLt,"SPAN",{});var aLt=s(BMe);T(D9.$$.fragment,aLt),aLt.forEach(t),tLt.forEach(t),Lkr=i(iOe),IMe=n(iOe,"SPAN",{});var nLt=s(IMe);xkr=r(nLt,"FlaxAutoModelForPreTraining"),nLt.forEach(t),iOe.forEach(t),rDe=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(G9.$$.fragment,zl),$kr=i(zl),Ic=n(zl,"P",{});var Jee=s(Ic);kkr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kY=n(Jee,"A",{href:!0});var sLt=s(kY);Skr=r(sLt,"from_pretrained()"),sLt.forEach(t),Rkr=r(Jee," class method or the "),SY=n(Jee,"A",{href:!0});var lLt=s(SY);Pkr=r(lLt,"from_config()"),lLt.forEach(t),Bkr=r(Jee,` class
method.`),Jee.forEach(t),Ikr=i(zl),O9=n(zl,"P",{});var dOe=s(O9);Nkr=r(dOe,"This class cannot be instantiated directly using "),NMe=n(dOe,"CODE",{});var iLt=s(NMe);qkr=r(iLt,"__init__()"),iLt.forEach(t),jkr=r(dOe," (throws an error)."),dOe.forEach(t),Dkr=i(zl),Vt=n(zl,"DIV",{class:!0});var iA=s(Vt);T(V9.$$.fragment,iA),Gkr=i(iA),qMe=n(iA,"P",{});var dLt=s(qMe);Okr=r(dLt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dLt.forEach(t),Vkr=i(iA),Nc=n(iA,"P",{});var Yee=s(Nc);Xkr=r(Yee,`Note:
Loading a model from its configuration file does `),jMe=n(Yee,"STRONG",{});var cLt=s(jMe);zkr=r(cLt,"not"),cLt.forEach(t),Wkr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(Yee,"A",{href:!0});var fLt=s(RY);Qkr=r(fLt,"from_pretrained()"),fLt.forEach(t),Hkr=r(Yee," to load the model weights."),Yee.forEach(t),Ukr=i(iA),T(v5.$$.fragment,iA),iA.forEach(t),Jkr=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(X9.$$.fragment,Wl),Ykr=i(Wl),DMe=n(Wl,"P",{});var mLt=s(DMe);Kkr=r(mLt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mLt.forEach(t),Zkr=i(Wl),_n=n(Wl,"P",{});var dA=s(_n);eSr=r(dA,"The model class to instantiate is selected based on the "),GMe=n(dA,"CODE",{});var gLt=s(GMe);oSr=r(gLt,"model_type"),gLt.forEach(t),rSr=r(dA,` property of the config object (either
passed as an argument or loaded from `),OMe=n(dA,"CODE",{});var hLt=s(OMe);tSr=r(hLt,"pretrained_model_name_or_path"),hLt.forEach(t),aSr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=n(dA,"CODE",{});var pLt=s(VMe);nSr=r(pLt,"pretrained_model_name_or_path"),pLt.forEach(t),sSr=r(dA,":"),dA.forEach(t),lSr=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);F5=n(we,"LI",{});var oNe=s(F5);XMe=n(oNe,"STRONG",{});var _Lt=s(XMe);iSr=r(_Lt,"albert"),_Lt.forEach(t),dSr=r(oNe," \u2014 "),PY=n(oNe,"A",{href:!0});var uLt=s(PY);cSr=r(uLt,"FlaxAlbertForPreTraining"),uLt.forEach(t),fSr=r(oNe," (ALBERT model)"),oNe.forEach(t),mSr=i(we),T5=n(we,"LI",{});var rNe=s(T5);zMe=n(rNe,"STRONG",{});var bLt=s(zMe);gSr=r(bLt,"bart"),bLt.forEach(t),hSr=r(rNe," \u2014 "),BY=n(rNe,"A",{href:!0});var vLt=s(BY);pSr=r(vLt,"FlaxBartForConditionalGeneration"),vLt.forEach(t),_Sr=r(rNe," (BART model)"),rNe.forEach(t),uSr=i(we),M5=n(we,"LI",{});var tNe=s(M5);WMe=n(tNe,"STRONG",{});var FLt=s(WMe);bSr=r(FLt,"bert"),FLt.forEach(t),vSr=r(tNe," \u2014 "),IY=n(tNe,"A",{href:!0});var TLt=s(IY);FSr=r(TLt,"FlaxBertForPreTraining"),TLt.forEach(t),TSr=r(tNe," (BERT model)"),tNe.forEach(t),MSr=i(we),E5=n(we,"LI",{});var aNe=s(E5);QMe=n(aNe,"STRONG",{});var MLt=s(QMe);ESr=r(MLt,"big_bird"),MLt.forEach(t),CSr=r(aNe," \u2014 "),NY=n(aNe,"A",{href:!0});var ELt=s(NY);wSr=r(ELt,"FlaxBigBirdForPreTraining"),ELt.forEach(t),ASr=r(aNe," (BigBird model)"),aNe.forEach(t),ySr=i(we),C5=n(we,"LI",{});var nNe=s(C5);HMe=n(nNe,"STRONG",{});var CLt=s(HMe);LSr=r(CLt,"electra"),CLt.forEach(t),xSr=r(nNe," \u2014 "),qY=n(nNe,"A",{href:!0});var wLt=s(qY);$Sr=r(wLt,"FlaxElectraForPreTraining"),wLt.forEach(t),kSr=r(nNe," (ELECTRA model)"),nNe.forEach(t),SSr=i(we),w5=n(we,"LI",{});var sNe=s(w5);UMe=n(sNe,"STRONG",{});var ALt=s(UMe);RSr=r(ALt,"mbart"),ALt.forEach(t),PSr=r(sNe," \u2014 "),jY=n(sNe,"A",{href:!0});var yLt=s(jY);BSr=r(yLt,"FlaxMBartForConditionalGeneration"),yLt.forEach(t),ISr=r(sNe," (mBART model)"),sNe.forEach(t),NSr=i(we),A5=n(we,"LI",{});var lNe=s(A5);JMe=n(lNe,"STRONG",{});var LLt=s(JMe);qSr=r(LLt,"mt5"),LLt.forEach(t),jSr=r(lNe," \u2014 "),DY=n(lNe,"A",{href:!0});var xLt=s(DY);DSr=r(xLt,"FlaxMT5ForConditionalGeneration"),xLt.forEach(t),GSr=r(lNe," (mT5 model)"),lNe.forEach(t),OSr=i(we),y5=n(we,"LI",{});var iNe=s(y5);YMe=n(iNe,"STRONG",{});var $Lt=s(YMe);VSr=r($Lt,"roberta"),$Lt.forEach(t),XSr=r(iNe," \u2014 "),GY=n(iNe,"A",{href:!0});var kLt=s(GY);zSr=r(kLt,"FlaxRobertaForMaskedLM"),kLt.forEach(t),WSr=r(iNe," (RoBERTa model)"),iNe.forEach(t),QSr=i(we),L5=n(we,"LI",{});var dNe=s(L5);KMe=n(dNe,"STRONG",{});var SLt=s(KMe);HSr=r(SLt,"roformer"),SLt.forEach(t),USr=r(dNe," \u2014 "),OY=n(dNe,"A",{href:!0});var RLt=s(OY);JSr=r(RLt,"FlaxRoFormerForMaskedLM"),RLt.forEach(t),YSr=r(dNe," (RoFormer model)"),dNe.forEach(t),KSr=i(we),x5=n(we,"LI",{});var cNe=s(x5);ZMe=n(cNe,"STRONG",{});var PLt=s(ZMe);ZSr=r(PLt,"t5"),PLt.forEach(t),eRr=r(cNe," \u2014 "),VY=n(cNe,"A",{href:!0});var BLt=s(VY);oRr=r(BLt,"FlaxT5ForConditionalGeneration"),BLt.forEach(t),rRr=r(cNe," (T5 model)"),cNe.forEach(t),tRr=i(we),$5=n(we,"LI",{});var fNe=s($5);e4e=n(fNe,"STRONG",{});var ILt=s(e4e);aRr=r(ILt,"wav2vec2"),ILt.forEach(t),nRr=r(fNe," \u2014 "),XY=n(fNe,"A",{href:!0});var NLt=s(XY);sRr=r(NLt,"FlaxWav2Vec2ForPreTraining"),NLt.forEach(t),lRr=r(fNe," (Wav2Vec2 model)"),fNe.forEach(t),iRr=i(we),k5=n(we,"LI",{});var mNe=s(k5);o4e=n(mNe,"STRONG",{});var qLt=s(o4e);dRr=r(qLt,"xlm-roberta"),qLt.forEach(t),cRr=r(mNe," \u2014 "),zY=n(mNe,"A",{href:!0});var jLt=s(zY);fRr=r(jLt,"FlaxXLMRobertaForMaskedLM"),jLt.forEach(t),mRr=r(mNe," (XLM-RoBERTa model)"),mNe.forEach(t),we.forEach(t),gRr=i(Wl),T(S5.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),tDe=i(f),qc=n(f,"H2",{class:!0});var cOe=s(qc);R5=n(cOe,"A",{id:!0,class:!0,href:!0});var DLt=s(R5);r4e=n(DLt,"SPAN",{});var GLt=s(r4e);T(z9.$$.fragment,GLt),GLt.forEach(t),DLt.forEach(t),hRr=i(cOe),t4e=n(cOe,"SPAN",{});var OLt=s(t4e);pRr=r(OLt,"FlaxAutoModelForMaskedLM"),OLt.forEach(t),cOe.forEach(t),aDe=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(W9.$$.fragment,Ql),_Rr=i(Ql),jc=n(Ql,"P",{});var Kee=s(jc);uRr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WY=n(Kee,"A",{href:!0});var VLt=s(WY);bRr=r(VLt,"from_pretrained()"),VLt.forEach(t),vRr=r(Kee," class method or the "),QY=n(Kee,"A",{href:!0});var XLt=s(QY);FRr=r(XLt,"from_config()"),XLt.forEach(t),TRr=r(Kee,` class
method.`),Kee.forEach(t),MRr=i(Ql),Q9=n(Ql,"P",{});var fOe=s(Q9);ERr=r(fOe,"This class cannot be instantiated directly using "),a4e=n(fOe,"CODE",{});var zLt=s(a4e);CRr=r(zLt,"__init__()"),zLt.forEach(t),wRr=r(fOe," (throws an error)."),fOe.forEach(t),ARr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var cA=s(Xt);T(H9.$$.fragment,cA),yRr=i(cA),n4e=n(cA,"P",{});var WLt=s(n4e);LRr=r(WLt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),WLt.forEach(t),xRr=i(cA),Dc=n(cA,"P",{});var Zee=s(Dc);$Rr=r(Zee,`Note:
Loading a model from its configuration file does `),s4e=n(Zee,"STRONG",{});var QLt=s(s4e);kRr=r(QLt,"not"),QLt.forEach(t),SRr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=n(Zee,"A",{href:!0});var HLt=s(HY);RRr=r(HLt,"from_pretrained()"),HLt.forEach(t),PRr=r(Zee," to load the model weights."),Zee.forEach(t),BRr=i(cA),T(P5.$$.fragment,cA),cA.forEach(t),IRr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(U9.$$.fragment,Hl),NRr=i(Hl),l4e=n(Hl,"P",{});var ULt=s(l4e);qRr=r(ULt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ULt.forEach(t),jRr=i(Hl),un=n(Hl,"P",{});var fA=s(un);DRr=r(fA,"The model class to instantiate is selected based on the "),i4e=n(fA,"CODE",{});var JLt=s(i4e);GRr=r(JLt,"model_type"),JLt.forEach(t),ORr=r(fA,` property of the config object (either
passed as an argument or loaded from `),d4e=n(fA,"CODE",{});var YLt=s(d4e);VRr=r(YLt,"pretrained_model_name_or_path"),YLt.forEach(t),XRr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=n(fA,"CODE",{});var KLt=s(c4e);zRr=r(KLt,"pretrained_model_name_or_path"),KLt.forEach(t),WRr=r(fA,":"),fA.forEach(t),QRr=i(Hl),Le=n(Hl,"UL",{});var Ie=s(Le);B5=n(Ie,"LI",{});var gNe=s(B5);f4e=n(gNe,"STRONG",{});var ZLt=s(f4e);HRr=r(ZLt,"albert"),ZLt.forEach(t),URr=r(gNe," \u2014 "),UY=n(gNe,"A",{href:!0});var e8t=s(UY);JRr=r(e8t,"FlaxAlbertForMaskedLM"),e8t.forEach(t),YRr=r(gNe," (ALBERT model)"),gNe.forEach(t),KRr=i(Ie),I5=n(Ie,"LI",{});var hNe=s(I5);m4e=n(hNe,"STRONG",{});var o8t=s(m4e);ZRr=r(o8t,"bart"),o8t.forEach(t),ePr=r(hNe," \u2014 "),JY=n(hNe,"A",{href:!0});var r8t=s(JY);oPr=r(r8t,"FlaxBartForConditionalGeneration"),r8t.forEach(t),rPr=r(hNe," (BART model)"),hNe.forEach(t),tPr=i(Ie),N5=n(Ie,"LI",{});var pNe=s(N5);g4e=n(pNe,"STRONG",{});var t8t=s(g4e);aPr=r(t8t,"bert"),t8t.forEach(t),nPr=r(pNe," \u2014 "),YY=n(pNe,"A",{href:!0});var a8t=s(YY);sPr=r(a8t,"FlaxBertForMaskedLM"),a8t.forEach(t),lPr=r(pNe," (BERT model)"),pNe.forEach(t),iPr=i(Ie),q5=n(Ie,"LI",{});var _Ne=s(q5);h4e=n(_Ne,"STRONG",{});var n8t=s(h4e);dPr=r(n8t,"big_bird"),n8t.forEach(t),cPr=r(_Ne," \u2014 "),KY=n(_Ne,"A",{href:!0});var s8t=s(KY);fPr=r(s8t,"FlaxBigBirdForMaskedLM"),s8t.forEach(t),mPr=r(_Ne," (BigBird model)"),_Ne.forEach(t),gPr=i(Ie),j5=n(Ie,"LI",{});var uNe=s(j5);p4e=n(uNe,"STRONG",{});var l8t=s(p4e);hPr=r(l8t,"distilbert"),l8t.forEach(t),pPr=r(uNe," \u2014 "),ZY=n(uNe,"A",{href:!0});var i8t=s(ZY);_Pr=r(i8t,"FlaxDistilBertForMaskedLM"),i8t.forEach(t),uPr=r(uNe," (DistilBERT model)"),uNe.forEach(t),bPr=i(Ie),D5=n(Ie,"LI",{});var bNe=s(D5);_4e=n(bNe,"STRONG",{});var d8t=s(_4e);vPr=r(d8t,"electra"),d8t.forEach(t),FPr=r(bNe," \u2014 "),eK=n(bNe,"A",{href:!0});var c8t=s(eK);TPr=r(c8t,"FlaxElectraForMaskedLM"),c8t.forEach(t),MPr=r(bNe," (ELECTRA model)"),bNe.forEach(t),EPr=i(Ie),G5=n(Ie,"LI",{});var vNe=s(G5);u4e=n(vNe,"STRONG",{});var f8t=s(u4e);CPr=r(f8t,"mbart"),f8t.forEach(t),wPr=r(vNe," \u2014 "),oK=n(vNe,"A",{href:!0});var m8t=s(oK);APr=r(m8t,"FlaxMBartForConditionalGeneration"),m8t.forEach(t),yPr=r(vNe," (mBART model)"),vNe.forEach(t),LPr=i(Ie),O5=n(Ie,"LI",{});var FNe=s(O5);b4e=n(FNe,"STRONG",{});var g8t=s(b4e);xPr=r(g8t,"roberta"),g8t.forEach(t),$Pr=r(FNe," \u2014 "),rK=n(FNe,"A",{href:!0});var h8t=s(rK);kPr=r(h8t,"FlaxRobertaForMaskedLM"),h8t.forEach(t),SPr=r(FNe," (RoBERTa model)"),FNe.forEach(t),RPr=i(Ie),V5=n(Ie,"LI",{});var TNe=s(V5);v4e=n(TNe,"STRONG",{});var p8t=s(v4e);PPr=r(p8t,"roformer"),p8t.forEach(t),BPr=r(TNe," \u2014 "),tK=n(TNe,"A",{href:!0});var _8t=s(tK);IPr=r(_8t,"FlaxRoFormerForMaskedLM"),_8t.forEach(t),NPr=r(TNe," (RoFormer model)"),TNe.forEach(t),qPr=i(Ie),X5=n(Ie,"LI",{});var MNe=s(X5);F4e=n(MNe,"STRONG",{});var u8t=s(F4e);jPr=r(u8t,"xlm-roberta"),u8t.forEach(t),DPr=r(MNe," \u2014 "),aK=n(MNe,"A",{href:!0});var b8t=s(aK);GPr=r(b8t,"FlaxXLMRobertaForMaskedLM"),b8t.forEach(t),OPr=r(MNe," (XLM-RoBERTa model)"),MNe.forEach(t),Ie.forEach(t),VPr=i(Hl),T(z5.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),nDe=i(f),Gc=n(f,"H2",{class:!0});var mOe=s(Gc);W5=n(mOe,"A",{id:!0,class:!0,href:!0});var v8t=s(W5);T4e=n(v8t,"SPAN",{});var F8t=s(T4e);T(J9.$$.fragment,F8t),F8t.forEach(t),v8t.forEach(t),XPr=i(mOe),M4e=n(mOe,"SPAN",{});var T8t=s(M4e);zPr=r(T8t,"FlaxAutoModelForSeq2SeqLM"),T8t.forEach(t),mOe.forEach(t),sDe=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(Y9.$$.fragment,Ul),WPr=i(Ul),Oc=n(Ul,"P",{});var eoe=s(Oc);QPr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nK=n(eoe,"A",{href:!0});var M8t=s(nK);HPr=r(M8t,"from_pretrained()"),M8t.forEach(t),UPr=r(eoe," class method or the "),sK=n(eoe,"A",{href:!0});var E8t=s(sK);JPr=r(E8t,"from_config()"),E8t.forEach(t),YPr=r(eoe,` class
method.`),eoe.forEach(t),KPr=i(Ul),K9=n(Ul,"P",{});var gOe=s(K9);ZPr=r(gOe,"This class cannot be instantiated directly using "),E4e=n(gOe,"CODE",{});var C8t=s(E4e);eBr=r(C8t,"__init__()"),C8t.forEach(t),oBr=r(gOe," (throws an error)."),gOe.forEach(t),rBr=i(Ul),zt=n(Ul,"DIV",{class:!0});var mA=s(zt);T(Z9.$$.fragment,mA),tBr=i(mA),C4e=n(mA,"P",{});var w8t=s(C4e);aBr=r(w8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),w8t.forEach(t),nBr=i(mA),Vc=n(mA,"P",{});var ooe=s(Vc);sBr=r(ooe,`Note:
Loading a model from its configuration file does `),w4e=n(ooe,"STRONG",{});var A8t=s(w4e);lBr=r(A8t,"not"),A8t.forEach(t),iBr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=n(ooe,"A",{href:!0});var y8t=s(lK);dBr=r(y8t,"from_pretrained()"),y8t.forEach(t),cBr=r(ooe," to load the model weights."),ooe.forEach(t),fBr=i(mA),T(Q5.$$.fragment,mA),mA.forEach(t),mBr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(ex.$$.fragment,Jl),gBr=i(Jl),A4e=n(Jl,"P",{});var L8t=s(A4e);hBr=r(L8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),L8t.forEach(t),pBr=i(Jl),bn=n(Jl,"P",{});var gA=s(bn);_Br=r(gA,"The model class to instantiate is selected based on the "),y4e=n(gA,"CODE",{});var x8t=s(y4e);uBr=r(x8t,"model_type"),x8t.forEach(t),bBr=r(gA,` property of the config object (either
passed as an argument or loaded from `),L4e=n(gA,"CODE",{});var $8t=s(L4e);vBr=r($8t,"pretrained_model_name_or_path"),$8t.forEach(t),FBr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=n(gA,"CODE",{});var k8t=s(x4e);TBr=r(k8t,"pretrained_model_name_or_path"),k8t.forEach(t),MBr=r(gA,":"),gA.forEach(t),EBr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);H5=n(ze,"LI",{});var ENe=s(H5);$4e=n(ENe,"STRONG",{});var S8t=s($4e);CBr=r(S8t,"bart"),S8t.forEach(t),wBr=r(ENe," \u2014 "),iK=n(ENe,"A",{href:!0});var R8t=s(iK);ABr=r(R8t,"FlaxBartForConditionalGeneration"),R8t.forEach(t),yBr=r(ENe," (BART model)"),ENe.forEach(t),LBr=i(ze),U5=n(ze,"LI",{});var CNe=s(U5);k4e=n(CNe,"STRONG",{});var P8t=s(k4e);xBr=r(P8t,"blenderbot"),P8t.forEach(t),$Br=r(CNe," \u2014 "),dK=n(CNe,"A",{href:!0});var B8t=s(dK);kBr=r(B8t,"FlaxBlenderbotForConditionalGeneration"),B8t.forEach(t),SBr=r(CNe," (Blenderbot model)"),CNe.forEach(t),RBr=i(ze),J5=n(ze,"LI",{});var wNe=s(J5);S4e=n(wNe,"STRONG",{});var I8t=s(S4e);PBr=r(I8t,"blenderbot-small"),I8t.forEach(t),BBr=r(wNe," \u2014 "),cK=n(wNe,"A",{href:!0});var N8t=s(cK);IBr=r(N8t,"FlaxBlenderbotSmallForConditionalGeneration"),N8t.forEach(t),NBr=r(wNe," (BlenderbotSmall model)"),wNe.forEach(t),qBr=i(ze),Y5=n(ze,"LI",{});var ANe=s(Y5);R4e=n(ANe,"STRONG",{});var q8t=s(R4e);jBr=r(q8t,"encoder-decoder"),q8t.forEach(t),DBr=r(ANe," \u2014 "),fK=n(ANe,"A",{href:!0});var j8t=s(fK);GBr=r(j8t,"FlaxEncoderDecoderModel"),j8t.forEach(t),OBr=r(ANe," (Encoder decoder model)"),ANe.forEach(t),VBr=i(ze),K5=n(ze,"LI",{});var yNe=s(K5);P4e=n(yNe,"STRONG",{});var D8t=s(P4e);XBr=r(D8t,"marian"),D8t.forEach(t),zBr=r(yNe," \u2014 "),mK=n(yNe,"A",{href:!0});var G8t=s(mK);WBr=r(G8t,"FlaxMarianMTModel"),G8t.forEach(t),QBr=r(yNe," (Marian model)"),yNe.forEach(t),HBr=i(ze),Z5=n(ze,"LI",{});var LNe=s(Z5);B4e=n(LNe,"STRONG",{});var O8t=s(B4e);UBr=r(O8t,"mbart"),O8t.forEach(t),JBr=r(LNe," \u2014 "),gK=n(LNe,"A",{href:!0});var V8t=s(gK);YBr=r(V8t,"FlaxMBartForConditionalGeneration"),V8t.forEach(t),KBr=r(LNe," (mBART model)"),LNe.forEach(t),ZBr=i(ze),e3=n(ze,"LI",{});var xNe=s(e3);I4e=n(xNe,"STRONG",{});var X8t=s(I4e);eIr=r(X8t,"mt5"),X8t.forEach(t),oIr=r(xNe," \u2014 "),hK=n(xNe,"A",{href:!0});var z8t=s(hK);rIr=r(z8t,"FlaxMT5ForConditionalGeneration"),z8t.forEach(t),tIr=r(xNe," (mT5 model)"),xNe.forEach(t),aIr=i(ze),o3=n(ze,"LI",{});var $Ne=s(o3);N4e=n($Ne,"STRONG",{});var W8t=s(N4e);nIr=r(W8t,"pegasus"),W8t.forEach(t),sIr=r($Ne," \u2014 "),pK=n($Ne,"A",{href:!0});var Q8t=s(pK);lIr=r(Q8t,"FlaxPegasusForConditionalGeneration"),Q8t.forEach(t),iIr=r($Ne," (Pegasus model)"),$Ne.forEach(t),dIr=i(ze),r3=n(ze,"LI",{});var kNe=s(r3);q4e=n(kNe,"STRONG",{});var H8t=s(q4e);cIr=r(H8t,"t5"),H8t.forEach(t),fIr=r(kNe," \u2014 "),_K=n(kNe,"A",{href:!0});var U8t=s(_K);mIr=r(U8t,"FlaxT5ForConditionalGeneration"),U8t.forEach(t),gIr=r(kNe," (T5 model)"),kNe.forEach(t),ze.forEach(t),hIr=i(Jl),T(t3.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),lDe=i(f),Xc=n(f,"H2",{class:!0});var hOe=s(Xc);a3=n(hOe,"A",{id:!0,class:!0,href:!0});var J8t=s(a3);j4e=n(J8t,"SPAN",{});var Y8t=s(j4e);T(ox.$$.fragment,Y8t),Y8t.forEach(t),J8t.forEach(t),pIr=i(hOe),D4e=n(hOe,"SPAN",{});var K8t=s(D4e);_Ir=r(K8t,"FlaxAutoModelForSequenceClassification"),K8t.forEach(t),hOe.forEach(t),iDe=i(f),_r=n(f,"DIV",{class:!0});var Yl=s(_r);T(rx.$$.fragment,Yl),uIr=i(Yl),zc=n(Yl,"P",{});var roe=s(zc);bIr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uK=n(roe,"A",{href:!0});var Z8t=s(uK);vIr=r(Z8t,"from_pretrained()"),Z8t.forEach(t),FIr=r(roe," class method or the "),bK=n(roe,"A",{href:!0});var e9t=s(bK);TIr=r(e9t,"from_config()"),e9t.forEach(t),MIr=r(roe,` class
method.`),roe.forEach(t),EIr=i(Yl),tx=n(Yl,"P",{});var pOe=s(tx);CIr=r(pOe,"This class cannot be instantiated directly using "),G4e=n(pOe,"CODE",{});var o9t=s(G4e);wIr=r(o9t,"__init__()"),o9t.forEach(t),AIr=r(pOe," (throws an error)."),pOe.forEach(t),yIr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var hA=s(Wt);T(ax.$$.fragment,hA),LIr=i(hA),O4e=n(hA,"P",{});var r9t=s(O4e);xIr=r(r9t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),r9t.forEach(t),$Ir=i(hA),Wc=n(hA,"P",{});var toe=s(Wc);kIr=r(toe,`Note:
Loading a model from its configuration file does `),V4e=n(toe,"STRONG",{});var t9t=s(V4e);SIr=r(t9t,"not"),t9t.forEach(t),RIr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=n(toe,"A",{href:!0});var a9t=s(vK);PIr=r(a9t,"from_pretrained()"),a9t.forEach(t),BIr=r(toe," to load the model weights."),toe.forEach(t),IIr=i(hA),T(n3.$$.fragment,hA),hA.forEach(t),NIr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(nx.$$.fragment,Kl),qIr=i(Kl),X4e=n(Kl,"P",{});var n9t=s(X4e);jIr=r(n9t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),n9t.forEach(t),DIr=i(Kl),vn=n(Kl,"P",{});var pA=s(vn);GIr=r(pA,"The model class to instantiate is selected based on the "),z4e=n(pA,"CODE",{});var s9t=s(z4e);OIr=r(s9t,"model_type"),s9t.forEach(t),VIr=r(pA,` property of the config object (either
passed as an argument or loaded from `),W4e=n(pA,"CODE",{});var l9t=s(W4e);XIr=r(l9t,"pretrained_model_name_or_path"),l9t.forEach(t),zIr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=n(pA,"CODE",{});var i9t=s(Q4e);WIr=r(i9t,"pretrained_model_name_or_path"),i9t.forEach(t),QIr=r(pA,":"),pA.forEach(t),HIr=i(Kl),xe=n(Kl,"UL",{});var Ne=s(xe);s3=n(Ne,"LI",{});var SNe=s(s3);H4e=n(SNe,"STRONG",{});var d9t=s(H4e);UIr=r(d9t,"albert"),d9t.forEach(t),JIr=r(SNe," \u2014 "),FK=n(SNe,"A",{href:!0});var c9t=s(FK);YIr=r(c9t,"FlaxAlbertForSequenceClassification"),c9t.forEach(t),KIr=r(SNe," (ALBERT model)"),SNe.forEach(t),ZIr=i(Ne),l3=n(Ne,"LI",{});var RNe=s(l3);U4e=n(RNe,"STRONG",{});var f9t=s(U4e);eNr=r(f9t,"bart"),f9t.forEach(t),oNr=r(RNe," \u2014 "),TK=n(RNe,"A",{href:!0});var m9t=s(TK);rNr=r(m9t,"FlaxBartForSequenceClassification"),m9t.forEach(t),tNr=r(RNe," (BART model)"),RNe.forEach(t),aNr=i(Ne),i3=n(Ne,"LI",{});var PNe=s(i3);J4e=n(PNe,"STRONG",{});var g9t=s(J4e);nNr=r(g9t,"bert"),g9t.forEach(t),sNr=r(PNe," \u2014 "),MK=n(PNe,"A",{href:!0});var h9t=s(MK);lNr=r(h9t,"FlaxBertForSequenceClassification"),h9t.forEach(t),iNr=r(PNe," (BERT model)"),PNe.forEach(t),dNr=i(Ne),d3=n(Ne,"LI",{});var BNe=s(d3);Y4e=n(BNe,"STRONG",{});var p9t=s(Y4e);cNr=r(p9t,"big_bird"),p9t.forEach(t),fNr=r(BNe," \u2014 "),EK=n(BNe,"A",{href:!0});var _9t=s(EK);mNr=r(_9t,"FlaxBigBirdForSequenceClassification"),_9t.forEach(t),gNr=r(BNe," (BigBird model)"),BNe.forEach(t),hNr=i(Ne),c3=n(Ne,"LI",{});var INe=s(c3);K4e=n(INe,"STRONG",{});var u9t=s(K4e);pNr=r(u9t,"distilbert"),u9t.forEach(t),_Nr=r(INe," \u2014 "),CK=n(INe,"A",{href:!0});var b9t=s(CK);uNr=r(b9t,"FlaxDistilBertForSequenceClassification"),b9t.forEach(t),bNr=r(INe," (DistilBERT model)"),INe.forEach(t),vNr=i(Ne),f3=n(Ne,"LI",{});var NNe=s(f3);Z4e=n(NNe,"STRONG",{});var v9t=s(Z4e);FNr=r(v9t,"electra"),v9t.forEach(t),TNr=r(NNe," \u2014 "),wK=n(NNe,"A",{href:!0});var F9t=s(wK);MNr=r(F9t,"FlaxElectraForSequenceClassification"),F9t.forEach(t),ENr=r(NNe," (ELECTRA model)"),NNe.forEach(t),CNr=i(Ne),m3=n(Ne,"LI",{});var qNe=s(m3);eEe=n(qNe,"STRONG",{});var T9t=s(eEe);wNr=r(T9t,"mbart"),T9t.forEach(t),ANr=r(qNe," \u2014 "),AK=n(qNe,"A",{href:!0});var M9t=s(AK);yNr=r(M9t,"FlaxMBartForSequenceClassification"),M9t.forEach(t),LNr=r(qNe," (mBART model)"),qNe.forEach(t),xNr=i(Ne),g3=n(Ne,"LI",{});var jNe=s(g3);oEe=n(jNe,"STRONG",{});var E9t=s(oEe);$Nr=r(E9t,"roberta"),E9t.forEach(t),kNr=r(jNe," \u2014 "),yK=n(jNe,"A",{href:!0});var C9t=s(yK);SNr=r(C9t,"FlaxRobertaForSequenceClassification"),C9t.forEach(t),RNr=r(jNe," (RoBERTa model)"),jNe.forEach(t),PNr=i(Ne),h3=n(Ne,"LI",{});var DNe=s(h3);rEe=n(DNe,"STRONG",{});var w9t=s(rEe);BNr=r(w9t,"roformer"),w9t.forEach(t),INr=r(DNe," \u2014 "),LK=n(DNe,"A",{href:!0});var A9t=s(LK);NNr=r(A9t,"FlaxRoFormerForSequenceClassification"),A9t.forEach(t),qNr=r(DNe," (RoFormer model)"),DNe.forEach(t),jNr=i(Ne),p3=n(Ne,"LI",{});var GNe=s(p3);tEe=n(GNe,"STRONG",{});var y9t=s(tEe);DNr=r(y9t,"xlm-roberta"),y9t.forEach(t),GNr=r(GNe," \u2014 "),xK=n(GNe,"A",{href:!0});var L9t=s(xK);ONr=r(L9t,"FlaxXLMRobertaForSequenceClassification"),L9t.forEach(t),VNr=r(GNe," (XLM-RoBERTa model)"),GNe.forEach(t),Ne.forEach(t),XNr=i(Kl),T(_3.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),dDe=i(f),Qc=n(f,"H2",{class:!0});var _Oe=s(Qc);u3=n(_Oe,"A",{id:!0,class:!0,href:!0});var x9t=s(u3);aEe=n(x9t,"SPAN",{});var $9t=s(aEe);T(sx.$$.fragment,$9t),$9t.forEach(t),x9t.forEach(t),zNr=i(_Oe),nEe=n(_Oe,"SPAN",{});var k9t=s(nEe);WNr=r(k9t,"FlaxAutoModelForQuestionAnswering"),k9t.forEach(t),_Oe.forEach(t),cDe=i(f),ur=n(f,"DIV",{class:!0});var Zl=s(ur);T(lx.$$.fragment,Zl),QNr=i(Zl),Hc=n(Zl,"P",{});var aoe=s(Hc);HNr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$K=n(aoe,"A",{href:!0});var S9t=s($K);UNr=r(S9t,"from_pretrained()"),S9t.forEach(t),JNr=r(aoe," class method or the "),kK=n(aoe,"A",{href:!0});var R9t=s(kK);YNr=r(R9t,"from_config()"),R9t.forEach(t),KNr=r(aoe,` class
method.`),aoe.forEach(t),ZNr=i(Zl),ix=n(Zl,"P",{});var uOe=s(ix);eqr=r(uOe,"This class cannot be instantiated directly using "),sEe=n(uOe,"CODE",{});var P9t=s(sEe);oqr=r(P9t,"__init__()"),P9t.forEach(t),rqr=r(uOe," (throws an error)."),uOe.forEach(t),tqr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var _A=s(Qt);T(dx.$$.fragment,_A),aqr=i(_A),lEe=n(_A,"P",{});var B9t=s(lEe);nqr=r(B9t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),B9t.forEach(t),sqr=i(_A),Uc=n(_A,"P",{});var noe=s(Uc);lqr=r(noe,`Note:
Loading a model from its configuration file does `),iEe=n(noe,"STRONG",{});var I9t=s(iEe);iqr=r(I9t,"not"),I9t.forEach(t),dqr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SK=n(noe,"A",{href:!0});var N9t=s(SK);cqr=r(N9t,"from_pretrained()"),N9t.forEach(t),fqr=r(noe," to load the model weights."),noe.forEach(t),mqr=i(_A),T(b3.$$.fragment,_A),_A.forEach(t),gqr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(cx.$$.fragment,ei),hqr=i(ei),dEe=n(ei,"P",{});var q9t=s(dEe);pqr=r(q9t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),q9t.forEach(t),_qr=i(ei),Fn=n(ei,"P",{});var uA=s(Fn);uqr=r(uA,"The model class to instantiate is selected based on the "),cEe=n(uA,"CODE",{});var j9t=s(cEe);bqr=r(j9t,"model_type"),j9t.forEach(t),vqr=r(uA,` property of the config object (either
passed as an argument or loaded from `),fEe=n(uA,"CODE",{});var D9t=s(fEe);Fqr=r(D9t,"pretrained_model_name_or_path"),D9t.forEach(t),Tqr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mEe=n(uA,"CODE",{});var G9t=s(mEe);Mqr=r(G9t,"pretrained_model_name_or_path"),G9t.forEach(t),Eqr=r(uA,":"),uA.forEach(t),Cqr=i(ei),$e=n(ei,"UL",{});var qe=s($e);v3=n(qe,"LI",{});var ONe=s(v3);gEe=n(ONe,"STRONG",{});var O9t=s(gEe);wqr=r(O9t,"albert"),O9t.forEach(t),Aqr=r(ONe," \u2014 "),RK=n(ONe,"A",{href:!0});var V9t=s(RK);yqr=r(V9t,"FlaxAlbertForQuestionAnswering"),V9t.forEach(t),Lqr=r(ONe," (ALBERT model)"),ONe.forEach(t),xqr=i(qe),F3=n(qe,"LI",{});var VNe=s(F3);hEe=n(VNe,"STRONG",{});var X9t=s(hEe);$qr=r(X9t,"bart"),X9t.forEach(t),kqr=r(VNe," \u2014 "),PK=n(VNe,"A",{href:!0});var z9t=s(PK);Sqr=r(z9t,"FlaxBartForQuestionAnswering"),z9t.forEach(t),Rqr=r(VNe," (BART model)"),VNe.forEach(t),Pqr=i(qe),T3=n(qe,"LI",{});var XNe=s(T3);pEe=n(XNe,"STRONG",{});var W9t=s(pEe);Bqr=r(W9t,"bert"),W9t.forEach(t),Iqr=r(XNe," \u2014 "),BK=n(XNe,"A",{href:!0});var Q9t=s(BK);Nqr=r(Q9t,"FlaxBertForQuestionAnswering"),Q9t.forEach(t),qqr=r(XNe," (BERT model)"),XNe.forEach(t),jqr=i(qe),M3=n(qe,"LI",{});var zNe=s(M3);_Ee=n(zNe,"STRONG",{});var H9t=s(_Ee);Dqr=r(H9t,"big_bird"),H9t.forEach(t),Gqr=r(zNe," \u2014 "),IK=n(zNe,"A",{href:!0});var U9t=s(IK);Oqr=r(U9t,"FlaxBigBirdForQuestionAnswering"),U9t.forEach(t),Vqr=r(zNe," (BigBird model)"),zNe.forEach(t),Xqr=i(qe),E3=n(qe,"LI",{});var WNe=s(E3);uEe=n(WNe,"STRONG",{});var J9t=s(uEe);zqr=r(J9t,"distilbert"),J9t.forEach(t),Wqr=r(WNe," \u2014 "),NK=n(WNe,"A",{href:!0});var Y9t=s(NK);Qqr=r(Y9t,"FlaxDistilBertForQuestionAnswering"),Y9t.forEach(t),Hqr=r(WNe," (DistilBERT model)"),WNe.forEach(t),Uqr=i(qe),C3=n(qe,"LI",{});var QNe=s(C3);bEe=n(QNe,"STRONG",{});var K9t=s(bEe);Jqr=r(K9t,"electra"),K9t.forEach(t),Yqr=r(QNe," \u2014 "),qK=n(QNe,"A",{href:!0});var Z9t=s(qK);Kqr=r(Z9t,"FlaxElectraForQuestionAnswering"),Z9t.forEach(t),Zqr=r(QNe," (ELECTRA model)"),QNe.forEach(t),ejr=i(qe),w3=n(qe,"LI",{});var HNe=s(w3);vEe=n(HNe,"STRONG",{});var ext=s(vEe);ojr=r(ext,"mbart"),ext.forEach(t),rjr=r(HNe," \u2014 "),jK=n(HNe,"A",{href:!0});var oxt=s(jK);tjr=r(oxt,"FlaxMBartForQuestionAnswering"),oxt.forEach(t),ajr=r(HNe," (mBART model)"),HNe.forEach(t),njr=i(qe),A3=n(qe,"LI",{});var UNe=s(A3);FEe=n(UNe,"STRONG",{});var rxt=s(FEe);sjr=r(rxt,"roberta"),rxt.forEach(t),ljr=r(UNe," \u2014 "),DK=n(UNe,"A",{href:!0});var txt=s(DK);ijr=r(txt,"FlaxRobertaForQuestionAnswering"),txt.forEach(t),djr=r(UNe," (RoBERTa model)"),UNe.forEach(t),cjr=i(qe),y3=n(qe,"LI",{});var JNe=s(y3);TEe=n(JNe,"STRONG",{});var axt=s(TEe);fjr=r(axt,"roformer"),axt.forEach(t),mjr=r(JNe," \u2014 "),GK=n(JNe,"A",{href:!0});var nxt=s(GK);gjr=r(nxt,"FlaxRoFormerForQuestionAnswering"),nxt.forEach(t),hjr=r(JNe," (RoFormer model)"),JNe.forEach(t),pjr=i(qe),L3=n(qe,"LI",{});var YNe=s(L3);MEe=n(YNe,"STRONG",{});var sxt=s(MEe);_jr=r(sxt,"xlm-roberta"),sxt.forEach(t),ujr=r(YNe," \u2014 "),OK=n(YNe,"A",{href:!0});var lxt=s(OK);bjr=r(lxt,"FlaxXLMRobertaForQuestionAnswering"),lxt.forEach(t),vjr=r(YNe," (XLM-RoBERTa model)"),YNe.forEach(t),qe.forEach(t),Fjr=i(ei),T(x3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),fDe=i(f),Jc=n(f,"H2",{class:!0});var bOe=s(Jc);$3=n(bOe,"A",{id:!0,class:!0,href:!0});var ixt=s($3);EEe=n(ixt,"SPAN",{});var dxt=s(EEe);T(fx.$$.fragment,dxt),dxt.forEach(t),ixt.forEach(t),Tjr=i(bOe),CEe=n(bOe,"SPAN",{});var cxt=s(CEe);Mjr=r(cxt,"FlaxAutoModelForTokenClassification"),cxt.forEach(t),bOe.forEach(t),mDe=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(mx.$$.fragment,oi),Ejr=i(oi),Yc=n(oi,"P",{});var soe=s(Yc);Cjr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VK=n(soe,"A",{href:!0});var fxt=s(VK);wjr=r(fxt,"from_pretrained()"),fxt.forEach(t),Ajr=r(soe," class method or the "),XK=n(soe,"A",{href:!0});var mxt=s(XK);yjr=r(mxt,"from_config()"),mxt.forEach(t),Ljr=r(soe,` class
method.`),soe.forEach(t),xjr=i(oi),gx=n(oi,"P",{});var vOe=s(gx);$jr=r(vOe,"This class cannot be instantiated directly using "),wEe=n(vOe,"CODE",{});var gxt=s(wEe);kjr=r(gxt,"__init__()"),gxt.forEach(t),Sjr=r(vOe," (throws an error)."),vOe.forEach(t),Rjr=i(oi),Ht=n(oi,"DIV",{class:!0});var bA=s(Ht);T(hx.$$.fragment,bA),Pjr=i(bA),AEe=n(bA,"P",{});var hxt=s(AEe);Bjr=r(hxt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hxt.forEach(t),Ijr=i(bA),Kc=n(bA,"P",{});var loe=s(Kc);Njr=r(loe,`Note:
Loading a model from its configuration file does `),yEe=n(loe,"STRONG",{});var pxt=s(yEe);qjr=r(pxt,"not"),pxt.forEach(t),jjr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zK=n(loe,"A",{href:!0});var _xt=s(zK);Djr=r(_xt,"from_pretrained()"),_xt.forEach(t),Gjr=r(loe," to load the model weights."),loe.forEach(t),Ojr=i(bA),T(k3.$$.fragment,bA),bA.forEach(t),Vjr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(px.$$.fragment,ri),Xjr=i(ri),LEe=n(ri,"P",{});var uxt=s(LEe);zjr=r(uxt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uxt.forEach(t),Wjr=i(ri),Tn=n(ri,"P",{});var vA=s(Tn);Qjr=r(vA,"The model class to instantiate is selected based on the "),xEe=n(vA,"CODE",{});var bxt=s(xEe);Hjr=r(bxt,"model_type"),bxt.forEach(t),Ujr=r(vA,` property of the config object (either
passed as an argument or loaded from `),$Ee=n(vA,"CODE",{});var vxt=s($Ee);Jjr=r(vxt,"pretrained_model_name_or_path"),vxt.forEach(t),Yjr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kEe=n(vA,"CODE",{});var Fxt=s(kEe);Kjr=r(Fxt,"pretrained_model_name_or_path"),Fxt.forEach(t),Zjr=r(vA,":"),vA.forEach(t),eDr=i(ri),De=n(ri,"UL",{});var Fo=s(De);S3=n(Fo,"LI",{});var KNe=s(S3);SEe=n(KNe,"STRONG",{});var Txt=s(SEe);oDr=r(Txt,"albert"),Txt.forEach(t),rDr=r(KNe," \u2014 "),WK=n(KNe,"A",{href:!0});var Mxt=s(WK);tDr=r(Mxt,"FlaxAlbertForTokenClassification"),Mxt.forEach(t),aDr=r(KNe," (ALBERT model)"),KNe.forEach(t),nDr=i(Fo),R3=n(Fo,"LI",{});var ZNe=s(R3);REe=n(ZNe,"STRONG",{});var Ext=s(REe);sDr=r(Ext,"bert"),Ext.forEach(t),lDr=r(ZNe," \u2014 "),QK=n(ZNe,"A",{href:!0});var Cxt=s(QK);iDr=r(Cxt,"FlaxBertForTokenClassification"),Cxt.forEach(t),dDr=r(ZNe," (BERT model)"),ZNe.forEach(t),cDr=i(Fo),P3=n(Fo,"LI",{});var eqe=s(P3);PEe=n(eqe,"STRONG",{});var wxt=s(PEe);fDr=r(wxt,"big_bird"),wxt.forEach(t),mDr=r(eqe," \u2014 "),HK=n(eqe,"A",{href:!0});var Axt=s(HK);gDr=r(Axt,"FlaxBigBirdForTokenClassification"),Axt.forEach(t),hDr=r(eqe," (BigBird model)"),eqe.forEach(t),pDr=i(Fo),B3=n(Fo,"LI",{});var oqe=s(B3);BEe=n(oqe,"STRONG",{});var yxt=s(BEe);_Dr=r(yxt,"distilbert"),yxt.forEach(t),uDr=r(oqe," \u2014 "),UK=n(oqe,"A",{href:!0});var Lxt=s(UK);bDr=r(Lxt,"FlaxDistilBertForTokenClassification"),Lxt.forEach(t),vDr=r(oqe," (DistilBERT model)"),oqe.forEach(t),FDr=i(Fo),I3=n(Fo,"LI",{});var rqe=s(I3);IEe=n(rqe,"STRONG",{});var xxt=s(IEe);TDr=r(xxt,"electra"),xxt.forEach(t),MDr=r(rqe," \u2014 "),JK=n(rqe,"A",{href:!0});var $xt=s(JK);EDr=r($xt,"FlaxElectraForTokenClassification"),$xt.forEach(t),CDr=r(rqe," (ELECTRA model)"),rqe.forEach(t),wDr=i(Fo),N3=n(Fo,"LI",{});var tqe=s(N3);NEe=n(tqe,"STRONG",{});var kxt=s(NEe);ADr=r(kxt,"roberta"),kxt.forEach(t),yDr=r(tqe," \u2014 "),YK=n(tqe,"A",{href:!0});var Sxt=s(YK);LDr=r(Sxt,"FlaxRobertaForTokenClassification"),Sxt.forEach(t),xDr=r(tqe," (RoBERTa model)"),tqe.forEach(t),$Dr=i(Fo),q3=n(Fo,"LI",{});var aqe=s(q3);qEe=n(aqe,"STRONG",{});var Rxt=s(qEe);kDr=r(Rxt,"roformer"),Rxt.forEach(t),SDr=r(aqe," \u2014 "),KK=n(aqe,"A",{href:!0});var Pxt=s(KK);RDr=r(Pxt,"FlaxRoFormerForTokenClassification"),Pxt.forEach(t),PDr=r(aqe," (RoFormer model)"),aqe.forEach(t),BDr=i(Fo),j3=n(Fo,"LI",{});var nqe=s(j3);jEe=n(nqe,"STRONG",{});var Bxt=s(jEe);IDr=r(Bxt,"xlm-roberta"),Bxt.forEach(t),NDr=r(nqe," \u2014 "),ZK=n(nqe,"A",{href:!0});var Ixt=s(ZK);qDr=r(Ixt,"FlaxXLMRobertaForTokenClassification"),Ixt.forEach(t),jDr=r(nqe," (XLM-RoBERTa model)"),nqe.forEach(t),Fo.forEach(t),DDr=i(ri),T(D3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),gDe=i(f),Zc=n(f,"H2",{class:!0});var FOe=s(Zc);G3=n(FOe,"A",{id:!0,class:!0,href:!0});var Nxt=s(G3);DEe=n(Nxt,"SPAN",{});var qxt=s(DEe);T(_x.$$.fragment,qxt),qxt.forEach(t),Nxt.forEach(t),GDr=i(FOe),GEe=n(FOe,"SPAN",{});var jxt=s(GEe);ODr=r(jxt,"FlaxAutoModelForMultipleChoice"),jxt.forEach(t),FOe.forEach(t),hDe=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(ux.$$.fragment,ti),VDr=i(ti),ef=n(ti,"P",{});var ioe=s(ef);XDr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),eZ=n(ioe,"A",{href:!0});var Dxt=s(eZ);zDr=r(Dxt,"from_pretrained()"),Dxt.forEach(t),WDr=r(ioe," class method or the "),oZ=n(ioe,"A",{href:!0});var Gxt=s(oZ);QDr=r(Gxt,"from_config()"),Gxt.forEach(t),HDr=r(ioe,` class
method.`),ioe.forEach(t),UDr=i(ti),bx=n(ti,"P",{});var TOe=s(bx);JDr=r(TOe,"This class cannot be instantiated directly using "),OEe=n(TOe,"CODE",{});var Oxt=s(OEe);YDr=r(Oxt,"__init__()"),Oxt.forEach(t),KDr=r(TOe," (throws an error)."),TOe.forEach(t),ZDr=i(ti),Ut=n(ti,"DIV",{class:!0});var FA=s(Ut);T(vx.$$.fragment,FA),eGr=i(FA),VEe=n(FA,"P",{});var Vxt=s(VEe);oGr=r(Vxt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Vxt.forEach(t),rGr=i(FA),of=n(FA,"P",{});var doe=s(of);tGr=r(doe,`Note:
Loading a model from its configuration file does `),XEe=n(doe,"STRONG",{});var Xxt=s(XEe);aGr=r(Xxt,"not"),Xxt.forEach(t),nGr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rZ=n(doe,"A",{href:!0});var zxt=s(rZ);sGr=r(zxt,"from_pretrained()"),zxt.forEach(t),lGr=r(doe," to load the model weights."),doe.forEach(t),iGr=i(FA),T(O3.$$.fragment,FA),FA.forEach(t),dGr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(Fx.$$.fragment,ai),cGr=i(ai),zEe=n(ai,"P",{});var Wxt=s(zEe);fGr=r(Wxt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wxt.forEach(t),mGr=i(ai),Mn=n(ai,"P",{});var TA=s(Mn);gGr=r(TA,"The model class to instantiate is selected based on the "),WEe=n(TA,"CODE",{});var Qxt=s(WEe);hGr=r(Qxt,"model_type"),Qxt.forEach(t),pGr=r(TA,` property of the config object (either
passed as an argument or loaded from `),QEe=n(TA,"CODE",{});var Hxt=s(QEe);_Gr=r(Hxt,"pretrained_model_name_or_path"),Hxt.forEach(t),uGr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HEe=n(TA,"CODE",{});var Uxt=s(HEe);bGr=r(Uxt,"pretrained_model_name_or_path"),Uxt.forEach(t),vGr=r(TA,":"),TA.forEach(t),FGr=i(ai),Ge=n(ai,"UL",{});var To=s(Ge);V3=n(To,"LI",{});var sqe=s(V3);UEe=n(sqe,"STRONG",{});var Jxt=s(UEe);TGr=r(Jxt,"albert"),Jxt.forEach(t),MGr=r(sqe," \u2014 "),tZ=n(sqe,"A",{href:!0});var Yxt=s(tZ);EGr=r(Yxt,"FlaxAlbertForMultipleChoice"),Yxt.forEach(t),CGr=r(sqe," (ALBERT model)"),sqe.forEach(t),wGr=i(To),X3=n(To,"LI",{});var lqe=s(X3);JEe=n(lqe,"STRONG",{});var Kxt=s(JEe);AGr=r(Kxt,"bert"),Kxt.forEach(t),yGr=r(lqe," \u2014 "),aZ=n(lqe,"A",{href:!0});var Zxt=s(aZ);LGr=r(Zxt,"FlaxBertForMultipleChoice"),Zxt.forEach(t),xGr=r(lqe," (BERT model)"),lqe.forEach(t),$Gr=i(To),z3=n(To,"LI",{});var iqe=s(z3);YEe=n(iqe,"STRONG",{});var e$t=s(YEe);kGr=r(e$t,"big_bird"),e$t.forEach(t),SGr=r(iqe," \u2014 "),nZ=n(iqe,"A",{href:!0});var o$t=s(nZ);RGr=r(o$t,"FlaxBigBirdForMultipleChoice"),o$t.forEach(t),PGr=r(iqe," (BigBird model)"),iqe.forEach(t),BGr=i(To),W3=n(To,"LI",{});var dqe=s(W3);KEe=n(dqe,"STRONG",{});var r$t=s(KEe);IGr=r(r$t,"distilbert"),r$t.forEach(t),NGr=r(dqe," \u2014 "),sZ=n(dqe,"A",{href:!0});var t$t=s(sZ);qGr=r(t$t,"FlaxDistilBertForMultipleChoice"),t$t.forEach(t),jGr=r(dqe," (DistilBERT model)"),dqe.forEach(t),DGr=i(To),Q3=n(To,"LI",{});var cqe=s(Q3);ZEe=n(cqe,"STRONG",{});var a$t=s(ZEe);GGr=r(a$t,"electra"),a$t.forEach(t),OGr=r(cqe," \u2014 "),lZ=n(cqe,"A",{href:!0});var n$t=s(lZ);VGr=r(n$t,"FlaxElectraForMultipleChoice"),n$t.forEach(t),XGr=r(cqe," (ELECTRA model)"),cqe.forEach(t),zGr=i(To),H3=n(To,"LI",{});var fqe=s(H3);eCe=n(fqe,"STRONG",{});var s$t=s(eCe);WGr=r(s$t,"roberta"),s$t.forEach(t),QGr=r(fqe," \u2014 "),iZ=n(fqe,"A",{href:!0});var l$t=s(iZ);HGr=r(l$t,"FlaxRobertaForMultipleChoice"),l$t.forEach(t),UGr=r(fqe," (RoBERTa model)"),fqe.forEach(t),JGr=i(To),U3=n(To,"LI",{});var mqe=s(U3);oCe=n(mqe,"STRONG",{});var i$t=s(oCe);YGr=r(i$t,"roformer"),i$t.forEach(t),KGr=r(mqe," \u2014 "),dZ=n(mqe,"A",{href:!0});var d$t=s(dZ);ZGr=r(d$t,"FlaxRoFormerForMultipleChoice"),d$t.forEach(t),eOr=r(mqe," (RoFormer model)"),mqe.forEach(t),oOr=i(To),J3=n(To,"LI",{});var gqe=s(J3);rCe=n(gqe,"STRONG",{});var c$t=s(rCe);rOr=r(c$t,"xlm-roberta"),c$t.forEach(t),tOr=r(gqe," \u2014 "),cZ=n(gqe,"A",{href:!0});var f$t=s(cZ);aOr=r(f$t,"FlaxXLMRobertaForMultipleChoice"),f$t.forEach(t),nOr=r(gqe," (XLM-RoBERTa model)"),gqe.forEach(t),To.forEach(t),sOr=i(ai),T(Y3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),pDe=i(f),rf=n(f,"H2",{class:!0});var MOe=s(rf);K3=n(MOe,"A",{id:!0,class:!0,href:!0});var m$t=s(K3);tCe=n(m$t,"SPAN",{});var g$t=s(tCe);T(Tx.$$.fragment,g$t),g$t.forEach(t),m$t.forEach(t),lOr=i(MOe),aCe=n(MOe,"SPAN",{});var h$t=s(aCe);iOr=r(h$t,"FlaxAutoModelForNextSentencePrediction"),h$t.forEach(t),MOe.forEach(t),_De=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(Mx.$$.fragment,ni),dOr=i(ni),tf=n(ni,"P",{});var coe=s(tf);cOr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fZ=n(coe,"A",{href:!0});var p$t=s(fZ);fOr=r(p$t,"from_pretrained()"),p$t.forEach(t),mOr=r(coe," class method or the "),mZ=n(coe,"A",{href:!0});var _$t=s(mZ);gOr=r(_$t,"from_config()"),_$t.forEach(t),hOr=r(coe,` class
method.`),coe.forEach(t),pOr=i(ni),Ex=n(ni,"P",{});var EOe=s(Ex);_Or=r(EOe,"This class cannot be instantiated directly using "),nCe=n(EOe,"CODE",{});var u$t=s(nCe);uOr=r(u$t,"__init__()"),u$t.forEach(t),bOr=r(EOe," (throws an error)."),EOe.forEach(t),vOr=i(ni),Jt=n(ni,"DIV",{class:!0});var MA=s(Jt);T(Cx.$$.fragment,MA),FOr=i(MA),sCe=n(MA,"P",{});var b$t=s(sCe);TOr=r(b$t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),b$t.forEach(t),MOr=i(MA),af=n(MA,"P",{});var foe=s(af);EOr=r(foe,`Note:
Loading a model from its configuration file does `),lCe=n(foe,"STRONG",{});var v$t=s(lCe);COr=r(v$t,"not"),v$t.forEach(t),wOr=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),gZ=n(foe,"A",{href:!0});var F$t=s(gZ);AOr=r(F$t,"from_pretrained()"),F$t.forEach(t),yOr=r(foe," to load the model weights."),foe.forEach(t),LOr=i(MA),T(Z3.$$.fragment,MA),MA.forEach(t),xOr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(wx.$$.fragment,si),$Or=i(si),iCe=n(si,"P",{});var T$t=s(iCe);kOr=r(T$t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),T$t.forEach(t),SOr=i(si),En=n(si,"P",{});var EA=s(En);ROr=r(EA,"The model class to instantiate is selected based on the "),dCe=n(EA,"CODE",{});var M$t=s(dCe);POr=r(M$t,"model_type"),M$t.forEach(t),BOr=r(EA,` property of the config object (either
passed as an argument or loaded from `),cCe=n(EA,"CODE",{});var E$t=s(cCe);IOr=r(E$t,"pretrained_model_name_or_path"),E$t.forEach(t),NOr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fCe=n(EA,"CODE",{});var C$t=s(fCe);qOr=r(C$t,"pretrained_model_name_or_path"),C$t.forEach(t),jOr=r(EA,":"),EA.forEach(t),DOr=i(si),mCe=n(si,"UL",{});var w$t=s(mCe);ew=n(w$t,"LI",{});var hqe=s(ew);gCe=n(hqe,"STRONG",{});var A$t=s(gCe);GOr=r(A$t,"bert"),A$t.forEach(t),OOr=r(hqe," \u2014 "),hZ=n(hqe,"A",{href:!0});var y$t=s(hZ);VOr=r(y$t,"FlaxBertForNextSentencePrediction"),y$t.forEach(t),XOr=r(hqe," (BERT model)"),hqe.forEach(t),w$t.forEach(t),zOr=i(si),T(ow.$$.fragment,si),si.forEach(t),ni.forEach(t),uDe=i(f),nf=n(f,"H2",{class:!0});var COe=s(nf);rw=n(COe,"A",{id:!0,class:!0,href:!0});var L$t=s(rw);hCe=n(L$t,"SPAN",{});var x$t=s(hCe);T(Ax.$$.fragment,x$t),x$t.forEach(t),L$t.forEach(t),WOr=i(COe),pCe=n(COe,"SPAN",{});var $$t=s(pCe);QOr=r($$t,"FlaxAutoModelForImageClassification"),$$t.forEach(t),COe.forEach(t),bDe=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(yx.$$.fragment,li),HOr=i(li),sf=n(li,"P",{});var moe=s(sf);UOr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pZ=n(moe,"A",{href:!0});var k$t=s(pZ);JOr=r(k$t,"from_pretrained()"),k$t.forEach(t),YOr=r(moe," class method or the "),_Z=n(moe,"A",{href:!0});var S$t=s(_Z);KOr=r(S$t,"from_config()"),S$t.forEach(t),ZOr=r(moe,` class
method.`),moe.forEach(t),eVr=i(li),Lx=n(li,"P",{});var wOe=s(Lx);oVr=r(wOe,"This class cannot be instantiated directly using "),_Ce=n(wOe,"CODE",{});var R$t=s(_Ce);rVr=r(R$t,"__init__()"),R$t.forEach(t),tVr=r(wOe," (throws an error)."),wOe.forEach(t),aVr=i(li),Yt=n(li,"DIV",{class:!0});var CA=s(Yt);T(xx.$$.fragment,CA),nVr=i(CA),uCe=n(CA,"P",{});var P$t=s(uCe);sVr=r(P$t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),P$t.forEach(t),lVr=i(CA),lf=n(CA,"P",{});var goe=s(lf);iVr=r(goe,`Note:
Loading a model from its configuration file does `),bCe=n(goe,"STRONG",{});var B$t=s(bCe);dVr=r(B$t,"not"),B$t.forEach(t),cVr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=n(goe,"A",{href:!0});var I$t=s(uZ);fVr=r(I$t,"from_pretrained()"),I$t.forEach(t),mVr=r(goe," to load the model weights."),goe.forEach(t),gVr=i(CA),T(tw.$$.fragment,CA),CA.forEach(t),hVr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T($x.$$.fragment,ii),pVr=i(ii),vCe=n(ii,"P",{});var N$t=s(vCe);_Vr=r(N$t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),N$t.forEach(t),uVr=i(ii),Cn=n(ii,"P",{});var wA=s(Cn);bVr=r(wA,"The model class to instantiate is selected based on the "),FCe=n(wA,"CODE",{});var q$t=s(FCe);vVr=r(q$t,"model_type"),q$t.forEach(t),FVr=r(wA,` property of the config object (either
passed as an argument or loaded from `),TCe=n(wA,"CODE",{});var j$t=s(TCe);TVr=r(j$t,"pretrained_model_name_or_path"),j$t.forEach(t),MVr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MCe=n(wA,"CODE",{});var D$t=s(MCe);EVr=r(D$t,"pretrained_model_name_or_path"),D$t.forEach(t),CVr=r(wA,":"),wA.forEach(t),wVr=i(ii),kx=n(ii,"UL",{});var AOe=s(kx);aw=n(AOe,"LI",{});var pqe=s(aw);ECe=n(pqe,"STRONG",{});var G$t=s(ECe);AVr=r(G$t,"beit"),G$t.forEach(t),yVr=r(pqe," \u2014 "),bZ=n(pqe,"A",{href:!0});var O$t=s(bZ);LVr=r(O$t,"FlaxBeitForImageClassification"),O$t.forEach(t),xVr=r(pqe," (BEiT model)"),pqe.forEach(t),$Vr=i(AOe),nw=n(AOe,"LI",{});var _qe=s(nw);CCe=n(_qe,"STRONG",{});var V$t=s(CCe);kVr=r(V$t,"vit"),V$t.forEach(t),SVr=r(_qe," \u2014 "),vZ=n(_qe,"A",{href:!0});var X$t=s(vZ);RVr=r(X$t,"FlaxViTForImageClassification"),X$t.forEach(t),PVr=r(_qe," (ViT model)"),_qe.forEach(t),AOe.forEach(t),BVr=i(ii),T(sw.$$.fragment,ii),ii.forEach(t),li.forEach(t),vDe=i(f),df=n(f,"H2",{class:!0});var yOe=s(df);lw=n(yOe,"A",{id:!0,class:!0,href:!0});var z$t=s(lw);wCe=n(z$t,"SPAN",{});var W$t=s(wCe);T(Sx.$$.fragment,W$t),W$t.forEach(t),z$t.forEach(t),IVr=i(yOe),ACe=n(yOe,"SPAN",{});var Q$t=s(ACe);NVr=r(Q$t,"FlaxAutoModelForVision2Seq"),Q$t.forEach(t),yOe.forEach(t),FDe=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T(Rx.$$.fragment,di),qVr=i(di),cf=n(di,"P",{});var hoe=s(cf);jVr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FZ=n(hoe,"A",{href:!0});var H$t=s(FZ);DVr=r(H$t,"from_pretrained()"),H$t.forEach(t),GVr=r(hoe," class method or the "),TZ=n(hoe,"A",{href:!0});var U$t=s(TZ);OVr=r(U$t,"from_config()"),U$t.forEach(t),VVr=r(hoe,` class
method.`),hoe.forEach(t),XVr=i(di),Px=n(di,"P",{});var LOe=s(Px);zVr=r(LOe,"This class cannot be instantiated directly using "),yCe=n(LOe,"CODE",{});var J$t=s(yCe);WVr=r(J$t,"__init__()"),J$t.forEach(t),QVr=r(LOe," (throws an error)."),LOe.forEach(t),HVr=i(di),Kt=n(di,"DIV",{class:!0});var AA=s(Kt);T(Bx.$$.fragment,AA),UVr=i(AA),LCe=n(AA,"P",{});var Y$t=s(LCe);JVr=r(Y$t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Y$t.forEach(t),YVr=i(AA),ff=n(AA,"P",{});var poe=s(ff);KVr=r(poe,`Note:
Loading a model from its configuration file does `),xCe=n(poe,"STRONG",{});var K$t=s(xCe);ZVr=r(K$t,"not"),K$t.forEach(t),eXr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=n(poe,"A",{href:!0});var Z$t=s(MZ);oXr=r(Z$t,"from_pretrained()"),Z$t.forEach(t),rXr=r(poe," to load the model weights."),poe.forEach(t),tXr=i(AA),T(iw.$$.fragment,AA),AA.forEach(t),aXr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(Ix.$$.fragment,ci),nXr=i(ci),$Ce=n(ci,"P",{});var ekt=s($Ce);sXr=r(ekt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ekt.forEach(t),lXr=i(ci),wn=n(ci,"P",{});var yA=s(wn);iXr=r(yA,"The model class to instantiate is selected based on the "),kCe=n(yA,"CODE",{});var okt=s(kCe);dXr=r(okt,"model_type"),okt.forEach(t),cXr=r(yA,` property of the config object (either
passed as an argument or loaded from `),SCe=n(yA,"CODE",{});var rkt=s(SCe);fXr=r(rkt,"pretrained_model_name_or_path"),rkt.forEach(t),mXr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RCe=n(yA,"CODE",{});var tkt=s(RCe);gXr=r(tkt,"pretrained_model_name_or_path"),tkt.forEach(t),hXr=r(yA,":"),yA.forEach(t),pXr=i(ci),PCe=n(ci,"UL",{});var akt=s(PCe);dw=n(akt,"LI",{});var uqe=s(dw);BCe=n(uqe,"STRONG",{});var nkt=s(BCe);_Xr=r(nkt,"vision-encoder-decoder"),nkt.forEach(t),uXr=r(uqe," \u2014 "),EZ=n(uqe,"A",{href:!0});var skt=s(EZ);bXr=r(skt,"FlaxVisionEncoderDecoderModel"),skt.forEach(t),vXr=r(uqe," (Vision Encoder decoder model)"),uqe.forEach(t),akt.forEach(t),FXr=i(ci),T(cw.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(cRt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoTokenizer"),c(ui,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(rk,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(tk,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig"),c(ak,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig"),c(nk,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig"),c(sk,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig"),c(lk,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(ik,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig"),c(dk,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(ck,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(fk,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(mk,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomConfig"),c(gk,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig"),c(hk,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig"),c(pk,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig"),c(_k,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig"),c(uk,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig"),c(bk,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig"),c(vk,"href","/docs/transformers/pr_17202/en/model_doc/cvt#transformers.CvtConfig"),c(Fk,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Tk,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Mk,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Ek,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig"),c(Ck,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(wk,"href","/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Ak,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig"),c(yk,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig"),c(Lk,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig"),c(xk,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRConfig"),c($k,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTConfig"),c(kk,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig"),c(Sk,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Rk,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Pk,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaConfig"),c(Bk,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig"),c(Ik,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig"),c(Nk,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig"),c(qk,"href","/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNConfig"),c(jk,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config"),c(Dk,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Gk,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Ok,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig"),c(Vk,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig"),c(Xk,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig"),c(zk,"href","/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Wk,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Qk,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Hk,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Uk,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig"),c(Jk,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig"),c(Yk,"href","/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeConfig"),c(Kk,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig"),c(Zk,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Config"),c(eS,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig"),c(oS,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(rS,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig"),c(tS,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(aS,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(nS,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig"),c(sS,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config"),c(lS,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(iS,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(dS,"href","/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTConfig"),c(cS,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig"),c(fS,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig"),c(mS,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig"),c(gS,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(hS,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(pS,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(_S,"href","/docs/transformers/pr_17202/en/model_doc/rag#transformers.RagConfig"),c(uS,"href","/docs/transformers/pr_17202/en/model_doc/realm#transformers.RealmConfig"),c(bS,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig"),c(vS,"href","/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetConfig"),c(FS,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig"),c(TS,"href","/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetConfig"),c(MS,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertConfig"),c(ES,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig"),c(CS,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig"),c(wS,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig"),c(AS,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig"),c(yS,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig"),c(LS,"href","/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(xS,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c($S,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(kS,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterConfig"),c(SS,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(RS,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig"),c(PS,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config"),c(BS,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig"),c(IS,"href","/docs/transformers/pr_17202/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(NS,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(qS,"href","/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRConfig"),c(jS,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(DS,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(GS,"href","/docs/transformers/pr_17202/en/model_doc/van#transformers.VanConfig"),c(OS,"href","/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltConfig"),c(VS,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(XS,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(zS,"href","/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(WS,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig"),c(QS,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(HS,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(US,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(JS,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig"),c(YS,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig"),c(KS,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig"),c(ZS,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(eR,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(oR,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(rR,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig"),c(tR,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosConfig"),c(aR,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ag,"id","transformers.AutoTokenizer"),c(Ag,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ag,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(nR,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(sR,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizer"),c(lR,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(iR,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartTokenizer"),c(dR,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartTokenizerFast"),c(cR,"href","/docs/transformers/pr_17202/en/model_doc/barthez#transformers.BarthezTokenizer"),c(fR,"href","/docs/transformers/pr_17202/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(mR,"href","/docs/transformers/pr_17202/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(gR,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(hR,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(pR,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(_R,"href","/docs/transformers/pr_17202/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(uR,"href","/docs/transformers/pr_17202/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(bR,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(vR,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(FR,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(TR,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(MR,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(ER,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(CR,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(wR,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(AR,"href","/docs/transformers/pr_17202/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(yR,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertTokenizer"),c(LR,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(xR,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineTokenizer"),c($R,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPTokenizer"),c(kR,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(SR,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(RR,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(PR,"href","/docs/transformers/pr_17202/en/model_doc/cpm#transformers.CpmTokenizer"),c(BR,"href","/docs/transformers/pr_17202/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(IR,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(NR,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c(qR,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(jR,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaTokenizer"),c(DR,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(GR,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(OR,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(VR,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(XR,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(zR,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(WR,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(QR,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraTokenizer"),c(HR,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(UR,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(JR,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetTokenizer"),c(YR,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(KR,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(ZR,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelTokenizer"),c(eP,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(oP,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rP,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(tP,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aP,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(nP,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(sP,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(lP,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(iP,"href","/docs/transformers/pr_17202/en/model_doc/herbert#transformers.HerbertTokenizer"),c(dP,"href","/docs/transformers/pr_17202/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(cP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(fP,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c(mP,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(gP,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(hP,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(pP,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(_P,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(uP,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(bP,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(vP,"href","/docs/transformers/pr_17202/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(FP,"href","/docs/transformers/pr_17202/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(TP,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDTokenizer"),c(MP,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDTokenizerFast"),c(EP,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerTokenizer"),c(CP,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(wP,"href","/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeTokenizer"),c(AP,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(yP,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(LP,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(xP,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianTokenizer"),c($P,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartTokenizer"),c(kP,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(SP,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(RP,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(PP,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(BP,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(IP,"href","/docs/transformers/pr_17202/en/model_doc/mluke#transformers.MLukeTokenizer"),c(NP,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(qP,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(jP,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(DP,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(GP,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Tokenizer"),c(OP,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5TokenizerFast"),c(VP,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizer"),c(XP,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(zP,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(WP,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(QP,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(HP,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(UP,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(JP,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(YP,"href","/docs/transformers/pr_17202/en/model_doc/phobert#transformers.PhobertTokenizer"),c(KP,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartTokenizer"),c(ZP,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(eB,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(oB,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(rB,"href","/docs/transformers/pr_17202/en/model_doc/rag#transformers.RagTokenizer"),c(tB,"href","/docs/transformers/pr_17202/en/model_doc/realm#transformers.RealmTokenizer"),c(aB,"href","/docs/transformers/pr_17202/en/model_doc/realm#transformers.RealmTokenizerFast"),c(nB,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerTokenizer"),c(sB,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(lB,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertTokenizer"),c(iB,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(dB,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(cB,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(fB,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c(mB,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(gB,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(hB,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(pB,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(_B,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(uB,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterTokenizer"),c(bB,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(vB,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(FB,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(TB,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Tokenizer"),c(MB,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5TokenizerFast"),c(EB,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasTokenizer"),c(CB,"href","/docs/transformers/pr_17202/en/model_doc/tapex#transformers.TapexTokenizer"),c(wB,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(AB,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(yB,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(LB,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(xB,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c($B,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(kB,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMTokenizer"),c(SB,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(RB,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMTokenizer"),c(PB,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(BB,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(IB,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(NB,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c(qB,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(jB,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(DB,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(GB,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizer"),c(OB,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ih,"id","transformers.AutoFeatureExtractor"),c(ih,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ih,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(VB,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(XB,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(QB,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(UB,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(eI,"href","/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(oI,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rI,"href","/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(aI,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(nI,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(sI,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(lI,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(iI,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(fI,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(mI,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(gI,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hI,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(pI,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(_I,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(uI,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(bI,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gh,"id","transformers.AutoProcessor"),c(Gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gh,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(vI,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(FI,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPProcessor"),c(TI,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(MI,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(EI,"href","/docs/transformers/pr_17202/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(CI,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wI,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(AI,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(yI,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(LI,"href","/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRProcessor"),c(xI,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($I,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kI,"href","/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltProcessor"),c(SI,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(RI,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PI,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BI,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ip,"id","transformers.AutoModel"),c(ip,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ip,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(II,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NI,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qI,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jI,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertModel"),c(DI,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartModel"),c(GI,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitModel"),c(OI,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertModel"),c(VI,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(XI,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdModel"),c(zI,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(WI,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(QI,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(HI,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomModel"),c(UI,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertModel"),c(JI,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineModel"),c(YI,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPModel"),c(KI,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertModel"),c(ZI,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextModel"),c(eN,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLModel"),c(oN,"href","/docs/transformers/pr_17202/en/model_doc/cvt#transformers.CvtModel"),c(rN,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(tN,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(aN,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(nN,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaModel"),c(sN,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(lN,"href","/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(iN,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTModel"),c(dN,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrModel"),c(cN,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertModel"),c(fN,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(mN,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTModel"),c(gN,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraModel"),c(hN,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertModel"),c(pN,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaModel"),c(_N,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetModel"),c(uN,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTModel"),c(bN,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelModel"),c(vN,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelBaseModel"),c(FN,"href","/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNModel"),c(TN,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Model"),c(MN,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(EN,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(CN,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJModel"),c(wN,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertModel"),c(AN,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertModel"),c(yN,"href","/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(LN,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(xN,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c($N,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(kN,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDModel"),c(SN,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerModel"),c(RN,"href","/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeModel"),c(PN,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertModel"),c(BN,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Model"),c(IN,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianModel"),c(NN,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerModel"),c(qN,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartModel"),c(jN,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(DN,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertModel"),c(GN,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetModel"),c(ON,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Model"),c(VN,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerModel"),c(XN,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(zN,"href","/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTModel"),c(WN,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusModel"),c(QN,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverModel"),c(HN,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartModel"),c(UN,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerModel"),c(JN,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(YN,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertModel"),c(KN,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModel"),c(ZN,"href","/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetModel"),c(eq,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertModel"),c(oq,"href","/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetModel"),c(rq,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel"),c(tq,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaModel"),c(aq,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerModel"),c(nq,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerModel"),c(sq,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWModel"),c(lq,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDModel"),c(iq,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(dq,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterModel"),c(cq,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(fq,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinModel"),c(mq,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Model"),c(gq,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasModel"),c(hq,"href","/docs/transformers/pr_17202/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(pq,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(_q,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechModel"),c(uq,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(bq,"href","/docs/transformers/pr_17202/en/model_doc/van#transformers.VanModel"),c(vq,"href","/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltModel"),c(Fq,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Tq,"href","/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Mq,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTModel"),c(Eq,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Cq,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(wq,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Aq,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMModel"),c(yq,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMModel"),c(Lq,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMModel"),c(xq,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c($q,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(kq,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Sq,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetModel"),c(Rq,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosModel"),c(Pq,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(su,"id","transformers.AutoModelForPreTraining"),c(su,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(su,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(Bq,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iq,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nq,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qq,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForPreTraining"),c(jq,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Dq,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForPreTraining"),c(Gq,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Oq,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomForCausalLM"),c(Vq,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Xq,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(zq,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Wq,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Qq,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Hq,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Uq,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Jq,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Yq,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Kq,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Zq,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(ej,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(oj,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(rj,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(tj,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(aj,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(nj,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(sj,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(lj,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(ij,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(dj,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(cj,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel"),c(fj,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(mj,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(gj,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(hj,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(pj,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(_j,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(uj,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(bj,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(vj,"href","/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Fj,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Tj,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Mj,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(Ej,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Cj,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(wj,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zu,"id","transformers.AutoModelForCausalLM"),c(Zu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zu,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(yj,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lj,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xj,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($j,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForCausalLM"),c(kj,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertLMHeadModel"),c(Sj,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Rj,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Pj,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Bj,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Ij,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Nj,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomForCausalLM"),c(qj,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(jj,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Dj,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Gj,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Oj,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Vj,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Xj,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(zj,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Wj,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianForCausalLM"),c(Qj,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Hj,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Uj,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Jj,"href","/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTForCausalLM"),c(Yj,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Kj,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Zj,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(eD,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(oD,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(rD,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(tD,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(aD,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(nD,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(sD,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(lD,"href","/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(iD,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(dD,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(cD,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(fD,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(mD,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(gD,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G2,"id","transformers.AutoModelForMaskedLM"),c(G2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G2,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(hD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_D,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uD,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(bD,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(vD,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMaskedLM"),c(FD,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(TD,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(MD,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(ED,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(CD,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(wD,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(AD,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(yD,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(LD,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(xD,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMaskedLM"),c($D,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(kD,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(SD,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(RD,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(PD,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(BD,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(ID,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(ND,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(qD,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(jD,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(DD,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(GD,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(OD,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(VD,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(XD,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(zD,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(WD,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(QD,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(HD,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(UD,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(JD,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A1,"id","transformers.AutoModelForSeq2SeqLM"),c(A1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ni,"class","relative group"),c(YD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eG,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(oG,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(rG,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(tG,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(nG,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(lG,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(iG,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianMTModel"),c(dG,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(cG,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(fG,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(mG,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(gG,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(hG,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(pG,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W1,"id","transformers.AutoModelForSequenceClassification"),c(W1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W1,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(_G,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uG,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bG,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vG,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c($G,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(iO,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(dO,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(cO,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(fO,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vb,"id","transformers.AutoModelForMultipleChoice"),c(Vb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vb,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(mO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pO,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(_O,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMultipleChoice"),c(uO,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(bO,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(vO,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(CO,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(wO,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(AO,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(yO,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(LO,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(xO,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c($O,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(PO,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(BO,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(IO,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(NO,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(qO,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(jO,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(DO,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(GO,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(OO,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(VO,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mv,"id","transformers.AutoModelForNextSentencePrediction"),c(Mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mv,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(XO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QO,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(HO,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(UO,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(JO,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(YO,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kv,"id","transformers.AutoModelForTokenClassification"),c(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kv,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(KO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oV,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(rV,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForTokenClassification"),c(tV,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(aV,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(nV,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForTokenClassification"),c(sV,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(lV,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(iV,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(dV,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(cV,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(fV,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(mV,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(gV,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(hV,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(pV,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(_V,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(uV,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(bV,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(vV,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(FV,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(TV,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(MV,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(EV,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(CV,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(wV,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(AV,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(yV,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(LV,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(xV,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c($V,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(kV,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(SV,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(RV,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(PV,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p0,"id","transformers.AutoModelForQuestionAnswering"),c(p0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p0,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(BV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qV,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(KV,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(FX,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(EX,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nF,"id","transformers.AutoModelForTableQuestionAnswering"),c(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(CX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yX,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cF,"id","transformers.AutoModelForImageClassification"),c(cF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cF,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(LX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($X,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kX,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForImageClassification"),c(SX,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(RX,"href","/docs/transformers/pr_17202/en/model_doc/cvt#transformers.CvtForImageClassification"),c(PX,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(BX,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassification"),c(IX,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(NX,"href","/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(qX,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(jX,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(DX,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(GX,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(OX,"href","/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(VX,"href","/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(XX,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(zX,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForImageClassification"),c(WX,"href","/docs/transformers/pr_17202/en/model_doc/van#transformers.VanForImageClassification"),c(QX,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AF,"id","transformers.AutoModelForVision2Seq"),c(AF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AF,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(HX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YX,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kF,"id","transformers.AutoModelForAudioClassification"),c(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kF,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(KX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ez,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oz,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(rz,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(tz,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(az,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(nz,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(sz,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(lz,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(iz,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(dz,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XF,"id","transformers.AutoModelForAudioFrameClassification"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(cz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gz,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(hz,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(pz,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(_z,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(uz,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.AutoModelForCTC"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.AutoModelForCTC"),c(_d,"class","relative group"),c(bz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tz,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(Mz,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForCTC"),c(Ez,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForCTC"),c(Cz,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForCTC"),c(wz,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Az,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(yz,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Lz,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(xz,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(mT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c($z,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rz,"href","/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Pz,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.AutoModelForAudioXVector"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(Bz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qz,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(jz,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Dz,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Gz,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Oz,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yT,"id","transformers.AutoModelForMaskedImageModeling"),c(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yT,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(Vz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wz,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(Qz,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Hz,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PT,"id","transformers.AutoModelForObjectDetection"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(Uz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Yz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kz,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Zz,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.AutoModelForImageSegmentation"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(eW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tW,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zT,"id","transformers.AutoModelForSemanticSegmentation"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(aW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lW,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(iW,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(dW,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(cW,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.AutoModelForInstanceSegmentation"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(fW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hW,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a7,"id","transformers.TFAutoModel"),c(a7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a7,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(pW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertModel"),c(vW,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartModel"),c(FW,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertModel"),c(TW,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(MW,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(EW,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertModel"),c(CW,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.TFCLIPModel"),c(wW,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertModel"),c(AW,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextModel"),c(yW,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLModel"),c(LW,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(xW,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaModel"),c($W,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(kW,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(SW,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(RW,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraModel"),c(PW,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(BW,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelModel"),c(IW,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(NW,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2Model"),c(qW,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJModel"),c(jW,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.TFHubertModel"),c(DW,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(GW,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDModel"),c(OW,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerModel"),c(VW,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertModel"),c(XW,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianModel"),c(zW,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartModel"),c(WW,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(QW,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetModel"),c(HW,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5Model"),c(UW,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(JW,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusModel"),c(YW,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertModel"),c(KW,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaModel"),c(ZW,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerModel"),c(eQ,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(oQ,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.TFSwinModel"),c(rQ,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5Model"),c(tQ,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasModel"),c(aQ,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(nQ,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTModel"),c(sQ,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(lQ,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(iQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMModel"),c(dQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(cQ,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K7,"id","transformers.TFAutoModelForPreTraining"),c(K7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K7,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(fQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hQ,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(pQ,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(_Q,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForPreTraining"),c(uQ,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(bQ,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(vQ,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(FQ,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(TQ,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(MQ,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(EQ,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(CQ,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(AQ,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(yQ,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(xQ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c($Q,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(kQ,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(RQ,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(PQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(BQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(IQ,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CM,"id","transformers.TFAutoModelForCausalLM"),c(CM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CM,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(NQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DQ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(GQ,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(OQ,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(VQ,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(XQ,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(zQ,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(WQ,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(QQ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(HQ,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(UQ,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(JQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(YQ,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jM,"id","transformers.TFAutoModelForImageClassification"),c(jM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jM,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(KQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oH,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(rH,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(tH,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(aH,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WM,"id","transformers.TFAutoModelForMaskedLM"),c(WM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WM,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(nH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iH,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(dH,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(cH,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(fH,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(mH,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(gH,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(hH,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(pH,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(_H,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(uH,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(bH,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(vH,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(FH,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(TH,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(MH,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(EH,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(CH,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(wH,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(AH,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(yH,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(LH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($H,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kH,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(SH,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(RH,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(PH,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(BH,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(IH,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianMTModel"),c(NH,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(qH,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(jH,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(DH,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L4,"id","transformers.TFAutoModelForSequenceClassification"),c(L4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L4,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(GH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XH,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(zH,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(WH,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(QH,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(HH,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(UH,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(JH,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(YH,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(KH,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(eU,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(oU,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(rU,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(tU,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(aU,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(nU,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(sU,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(lU,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(iU,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(dU,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(cU,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(fU,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(mU,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(gU,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(hU,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(pU,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tE,"id","transformers.TFAutoModelForMultipleChoice"),c(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tE,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(_U,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vU,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(FU,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(TU,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(MU,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(EU,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(CU,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(wU,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(AU,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(yU,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(LU,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(xU,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c($U,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(kU,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(SU,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(RU,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(PU,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(BU,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c(IU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jU,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(DU,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(GU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XU,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SE,"id","transformers.TFAutoModelForTokenClassification"),c(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SE,"href","#transformers.TFAutoModelForTokenClassification"),c(uc,"class","relative group"),c(zU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HU,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(UU,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(JU,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(YU,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(KU,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(ZU,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(eJ,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(oJ,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(rJ,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(tJ,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(aJ,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(nJ,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(sJ,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(lJ,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(iJ,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(dJ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(cJ,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(fJ,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(mJ,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(gJ,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oC,"id","transformers.TFAutoModelForQuestionAnswering"),c(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(hJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_J,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uJ,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(bJ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(vJ,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(FJ,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(TJ,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(MJ,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(EJ,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(CJ,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(wJ,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(AJ,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(xJ,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c($J,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(kJ,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(SJ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(RJ,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(PJ,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(BJ,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(IJ,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CC,"id","transformers.TFAutoModelForVision2Seq"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(NJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(LC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(GJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SC,"id","transformers.FlaxAutoModel"),c(SC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SC,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertModel"),c(UJ,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartModel"),c(JJ,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitModel"),c(YJ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertModel"),c(KJ,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(ZJ,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(eY,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(oY,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.FlaxCLIPModel"),c(rY,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(tY,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraModel"),c(aY,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(nY,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(sY,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(lY,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianModel"),c(iY,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartModel"),c(dY,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5Model"),c(cY,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(fY,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(mY,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(gY,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5Model"),c(hY,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(pY,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTModel"),c(_Y,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(uY,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(bY,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s5,"id","transformers.FlaxAutoModelForCausalLM"),c(s5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(vY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MY,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(EY,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(CY,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(wY,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(AY,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(yY,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(LY,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(xY,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c($Y,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b5,"id","transformers.FlaxAutoModelForPreTraining"),c(b5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(kY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PY,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(BY,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(IY,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(NY,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(qY,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(jY,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(DY,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(GY,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(OY,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(VY,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(XY,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(zY,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R5,"id","transformers.FlaxAutoModelForMaskedLM"),c(R5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(WY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UY,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(JY,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(YY,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(KY,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(ZY,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(eK,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(oK,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(rK,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(tK,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(aK,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(W5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(nK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iK,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(dK,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(cK,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(fK,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(mK,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(gK,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(hK,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(pK,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(_K,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(a3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(uK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FK,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(TK,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(MK,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(EK,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(CK,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(wK,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(AK,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(yK,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(LK,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(xK,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c($K,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RK,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(PK,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(BK,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(IK,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(NK,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(qK,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(jK,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(DK,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(GK,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(OK,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($3,"id","transformers.FlaxAutoModelForTokenClassification"),c($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(VK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WK,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(QK,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(HK,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(UK,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(JK,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(YK,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(KK,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(ZK,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(G3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(eZ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oZ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rZ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tZ,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(aZ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(nZ,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(sZ,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(lZ,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(iZ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(dZ,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(cZ,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(K3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(fZ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mZ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gZ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hZ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rw,"id","transformers.FlaxAutoModelForImageClassification"),c(rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rw,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(pZ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Z,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uZ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bZ,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(vZ,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lw,"id","transformers.FlaxAutoModelForVision2Seq"),c(lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(FZ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TZ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MZ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EZ,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,u),b(f,rt,u),e(rt,mi),e(rt,gi),e(gi,LA),e(rt,_f),b(f,je,u),b(f,We,u),e(We,hi),e(We,yn),e(yn,xA),e(We,Ln),e(We,xn),e(xn,$A),e(We,pi),e(We,$n),e($n,kA),e(We,_i),b(f,uf,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,J$),e(Ae,ui),e(ui,Y$),e(Ae,K$),b(f,Eo,u),b(f,wa,u),e(wa,Z$),e(wa,bf),e(bf,ek),e(wa,xOe),b(f,bqe,u),b(f,bi,u),e(bi,vf),e(vf,_oe),M(SA,_oe,null),e(bi,$Oe),e(bi,uoe),e(uoe,kOe),b(f,vqe,u),b(f,kn,u),e(kn,SOe),e(kn,boe),e(boe,ROe),e(kn,POe),e(kn,voe),e(voe,BOe),e(kn,IOe),b(f,Fqe,u),M(RA,f,u),b(f,Tqe,u),b(f,ok,u),e(ok,NOe),b(f,Mqe,u),M(Ff,f,u),b(f,Eqe,u),b(f,vi,u),e(vi,Tf),e(Tf,Foe),M(PA,Foe,null),e(vi,qOe),e(vi,Toe),e(Toe,jOe),b(f,Cqe,u),b(f,Co,u),M(BA,Co,null),e(Co,DOe),e(Co,IA),e(IA,GOe),e(IA,rk),e(rk,OOe),e(IA,VOe),e(Co,XOe),e(Co,NA),e(NA,zOe),e(NA,Moe),e(Moe,WOe),e(NA,QOe),e(Co,HOe),e(Co,Er),M(qA,Er,null),e(Er,UOe),e(Er,Eoe),e(Eoe,JOe),e(Er,YOe),e(Er,Fi),e(Fi,KOe),e(Fi,Coe),e(Coe,ZOe),e(Fi,eVe),e(Fi,woe),e(woe,oVe),e(Fi,rVe),e(Er,tVe),e(Er,A),e(A,Mf),e(Mf,Aoe),e(Aoe,aVe),e(Mf,nVe),e(Mf,tk),e(tk,sVe),e(Mf,lVe),e(A,iVe),e(A,Ef),e(Ef,yoe),e(yoe,dVe),e(Ef,cVe),e(Ef,ak),e(ak,fVe),e(Ef,mVe),e(A,gVe),e(A,Cf),e(Cf,Loe),e(Loe,hVe),e(Cf,pVe),e(Cf,nk),e(nk,_Ve),e(Cf,uVe),e(A,bVe),e(A,wf),e(wf,xoe),e(xoe,vVe),e(wf,FVe),e(wf,sk),e(sk,TVe),e(wf,MVe),e(A,EVe),e(A,Af),e(Af,$oe),e($oe,CVe),e(Af,wVe),e(Af,lk),e(lk,AVe),e(Af,yVe),e(A,LVe),e(A,yf),e(yf,koe),e(koe,xVe),e(yf,$Ve),e(yf,ik),e(ik,kVe),e(yf,SVe),e(A,RVe),e(A,Lf),e(Lf,Soe),e(Soe,PVe),e(Lf,BVe),e(Lf,dk),e(dk,IVe),e(Lf,NVe),e(A,qVe),e(A,xf),e(xf,Roe),e(Roe,jVe),e(xf,DVe),e(xf,ck),e(ck,GVe),e(xf,OVe),e(A,VVe),e(A,$f),e($f,Poe),e(Poe,XVe),e($f,zVe),e($f,fk),e(fk,WVe),e($f,QVe),e(A,HVe),e(A,kf),e(kf,Boe),e(Boe,UVe),e(kf,JVe),e(kf,mk),e(mk,YVe),e(kf,KVe),e(A,ZVe),e(A,Sf),e(Sf,Ioe),e(Ioe,eXe),e(Sf,oXe),e(Sf,gk),e(gk,rXe),e(Sf,tXe),e(A,aXe),e(A,Rf),e(Rf,Noe),e(Noe,nXe),e(Rf,sXe),e(Rf,hk),e(hk,lXe),e(Rf,iXe),e(A,dXe),e(A,Pf),e(Pf,qoe),e(qoe,cXe),e(Pf,fXe),e(Pf,pk),e(pk,mXe),e(Pf,gXe),e(A,hXe),e(A,Bf),e(Bf,joe),e(joe,pXe),e(Bf,_Xe),e(Bf,_k),e(_k,uXe),e(Bf,bXe),e(A,vXe),e(A,If),e(If,Doe),e(Doe,FXe),e(If,TXe),e(If,uk),e(uk,MXe),e(If,EXe),e(A,CXe),e(A,Nf),e(Nf,Goe),e(Goe,wXe),e(Nf,AXe),e(Nf,bk),e(bk,yXe),e(Nf,LXe),e(A,xXe),e(A,qf),e(qf,Ooe),e(Ooe,$Xe),e(qf,kXe),e(qf,vk),e(vk,SXe),e(qf,RXe),e(A,PXe),e(A,jf),e(jf,Voe),e(Voe,BXe),e(jf,IXe),e(jf,Fk),e(Fk,NXe),e(jf,qXe),e(A,jXe),e(A,Df),e(Df,Xoe),e(Xoe,DXe),e(Df,GXe),e(Df,Tk),e(Tk,OXe),e(Df,VXe),e(A,XXe),e(A,Gf),e(Gf,zoe),e(zoe,zXe),e(Gf,WXe),e(Gf,Mk),e(Mk,QXe),e(Gf,HXe),e(A,UXe),e(A,Of),e(Of,Woe),e(Woe,JXe),e(Of,YXe),e(Of,Ek),e(Ek,KXe),e(Of,ZXe),e(A,eze),e(A,Vf),e(Vf,Qoe),e(Qoe,oze),e(Vf,rze),e(Vf,Ck),e(Ck,tze),e(Vf,aze),e(A,nze),e(A,Xf),e(Xf,Hoe),e(Hoe,sze),e(Xf,lze),e(Xf,wk),e(wk,ize),e(Xf,dze),e(A,cze),e(A,zf),e(zf,Uoe),e(Uoe,fze),e(zf,mze),e(zf,Ak),e(Ak,gze),e(zf,hze),e(A,pze),e(A,Wf),e(Wf,Joe),e(Joe,_ze),e(Wf,uze),e(Wf,yk),e(yk,bze),e(Wf,vze),e(A,Fze),e(A,Qf),e(Qf,Yoe),e(Yoe,Tze),e(Qf,Mze),e(Qf,Lk),e(Lk,Eze),e(Qf,Cze),e(A,wze),e(A,Hf),e(Hf,Koe),e(Koe,Aze),e(Hf,yze),e(Hf,xk),e(xk,Lze),e(Hf,xze),e(A,$ze),e(A,Uf),e(Uf,Zoe),e(Zoe,kze),e(Uf,Sze),e(Uf,$k),e($k,Rze),e(Uf,Pze),e(A,Bze),e(A,Jf),e(Jf,ere),e(ere,Ize),e(Jf,Nze),e(Jf,kk),e(kk,qze),e(Jf,jze),e(A,Dze),e(A,Yf),e(Yf,ore),e(ore,Gze),e(Yf,Oze),e(Yf,Sk),e(Sk,Vze),e(Yf,Xze),e(A,zze),e(A,Kf),e(Kf,rre),e(rre,Wze),e(Kf,Qze),e(Kf,Rk),e(Rk,Hze),e(Kf,Uze),e(A,Jze),e(A,Zf),e(Zf,tre),e(tre,Yze),e(Zf,Kze),e(Zf,Pk),e(Pk,Zze),e(Zf,eWe),e(A,oWe),e(A,em),e(em,are),e(are,rWe),e(em,tWe),e(em,Bk),e(Bk,aWe),e(em,nWe),e(A,sWe),e(A,om),e(om,nre),e(nre,lWe),e(om,iWe),e(om,Ik),e(Ik,dWe),e(om,cWe),e(A,fWe),e(A,rm),e(rm,sre),e(sre,mWe),e(rm,gWe),e(rm,Nk),e(Nk,hWe),e(rm,pWe),e(A,_We),e(A,tm),e(tm,lre),e(lre,uWe),e(tm,bWe),e(tm,qk),e(qk,vWe),e(tm,FWe),e(A,TWe),e(A,am),e(am,ire),e(ire,MWe),e(am,EWe),e(am,jk),e(jk,CWe),e(am,wWe),e(A,AWe),e(A,nm),e(nm,dre),e(dre,yWe),e(nm,LWe),e(nm,Dk),e(Dk,xWe),e(nm,$We),e(A,kWe),e(A,sm),e(sm,cre),e(cre,SWe),e(sm,RWe),e(sm,Gk),e(Gk,PWe),e(sm,BWe),e(A,IWe),e(A,lm),e(lm,fre),e(fre,NWe),e(lm,qWe),e(lm,Ok),e(Ok,jWe),e(lm,DWe),e(A,GWe),e(A,im),e(im,mre),e(mre,OWe),e(im,VWe),e(im,Vk),e(Vk,XWe),e(im,zWe),e(A,WWe),e(A,dm),e(dm,gre),e(gre,QWe),e(dm,HWe),e(dm,Xk),e(Xk,UWe),e(dm,JWe),e(A,YWe),e(A,cm),e(cm,hre),e(hre,KWe),e(cm,ZWe),e(cm,zk),e(zk,eQe),e(cm,oQe),e(A,rQe),e(A,fm),e(fm,pre),e(pre,tQe),e(fm,aQe),e(fm,Wk),e(Wk,nQe),e(fm,sQe),e(A,lQe),e(A,mm),e(mm,_re),e(_re,iQe),e(mm,dQe),e(mm,Qk),e(Qk,cQe),e(mm,fQe),e(A,mQe),e(A,gm),e(gm,ure),e(ure,gQe),e(gm,hQe),e(gm,Hk),e(Hk,pQe),e(gm,_Qe),e(A,uQe),e(A,hm),e(hm,bre),e(bre,bQe),e(hm,vQe),e(hm,Uk),e(Uk,FQe),e(hm,TQe),e(A,MQe),e(A,pm),e(pm,vre),e(vre,EQe),e(pm,CQe),e(pm,Jk),e(Jk,wQe),e(pm,AQe),e(A,yQe),e(A,_m),e(_m,Fre),e(Fre,LQe),e(_m,xQe),e(_m,Yk),e(Yk,$Qe),e(_m,kQe),e(A,SQe),e(A,um),e(um,Tre),e(Tre,RQe),e(um,PQe),e(um,Kk),e(Kk,BQe),e(um,IQe),e(A,NQe),e(A,bm),e(bm,Mre),e(Mre,qQe),e(bm,jQe),e(bm,Zk),e(Zk,DQe),e(bm,GQe),e(A,OQe),e(A,vm),e(vm,Ere),e(Ere,VQe),e(vm,XQe),e(vm,eS),e(eS,zQe),e(vm,WQe),e(A,QQe),e(A,Fm),e(Fm,Cre),e(Cre,HQe),e(Fm,UQe),e(Fm,oS),e(oS,JQe),e(Fm,YQe),e(A,KQe),e(A,Tm),e(Tm,wre),e(wre,ZQe),e(Tm,eHe),e(Tm,rS),e(rS,oHe),e(Tm,rHe),e(A,tHe),e(A,Mm),e(Mm,Are),e(Are,aHe),e(Mm,nHe),e(Mm,tS),e(tS,sHe),e(Mm,lHe),e(A,iHe),e(A,Em),e(Em,yre),e(yre,dHe),e(Em,cHe),e(Em,aS),e(aS,fHe),e(Em,mHe),e(A,gHe),e(A,Cm),e(Cm,Lre),e(Lre,hHe),e(Cm,pHe),e(Cm,nS),e(nS,_He),e(Cm,uHe),e(A,bHe),e(A,wm),e(wm,xre),e(xre,vHe),e(wm,FHe),e(wm,sS),e(sS,THe),e(wm,MHe),e(A,EHe),e(A,Am),e(Am,$re),e($re,CHe),e(Am,wHe),e(Am,lS),e(lS,AHe),e(Am,yHe),e(A,LHe),e(A,ym),e(ym,kre),e(kre,xHe),e(ym,$He),e(ym,iS),e(iS,kHe),e(ym,SHe),e(A,RHe),e(A,Lm),e(Lm,Sre),e(Sre,PHe),e(Lm,BHe),e(Lm,dS),e(dS,IHe),e(Lm,NHe),e(A,qHe),e(A,xm),e(xm,Rre),e(Rre,jHe),e(xm,DHe),e(xm,cS),e(cS,GHe),e(xm,OHe),e(A,VHe),e(A,$m),e($m,Pre),e(Pre,XHe),e($m,zHe),e($m,fS),e(fS,WHe),e($m,QHe),e(A,HHe),e(A,km),e(km,Bre),e(Bre,UHe),e(km,JHe),e(km,mS),e(mS,YHe),e(km,KHe),e(A,ZHe),e(A,Sm),e(Sm,Ire),e(Ire,eUe),e(Sm,oUe),e(Sm,gS),e(gS,rUe),e(Sm,tUe),e(A,aUe),e(A,Rm),e(Rm,Nre),e(Nre,nUe),e(Rm,sUe),e(Rm,hS),e(hS,lUe),e(Rm,iUe),e(A,dUe),e(A,Pm),e(Pm,qre),e(qre,cUe),e(Pm,fUe),e(Pm,pS),e(pS,mUe),e(Pm,gUe),e(A,hUe),e(A,Bm),e(Bm,jre),e(jre,pUe),e(Bm,_Ue),e(Bm,_S),e(_S,uUe),e(Bm,bUe),e(A,vUe),e(A,Im),e(Im,Dre),e(Dre,FUe),e(Im,TUe),e(Im,uS),e(uS,MUe),e(Im,EUe),e(A,CUe),e(A,Nm),e(Nm,Gre),e(Gre,wUe),e(Nm,AUe),e(Nm,bS),e(bS,yUe),e(Nm,LUe),e(A,xUe),e(A,qm),e(qm,Ore),e(Ore,$Ue),e(qm,kUe),e(qm,vS),e(vS,SUe),e(qm,RUe),e(A,PUe),e(A,jm),e(jm,Vre),e(Vre,BUe),e(jm,IUe),e(jm,FS),e(FS,NUe),e(jm,qUe),e(A,jUe),e(A,Dm),e(Dm,Xre),e(Xre,DUe),e(Dm,GUe),e(Dm,TS),e(TS,OUe),e(Dm,VUe),e(A,XUe),e(A,Gm),e(Gm,zre),e(zre,zUe),e(Gm,WUe),e(Gm,MS),e(MS,QUe),e(Gm,HUe),e(A,UUe),e(A,Om),e(Om,Wre),e(Wre,JUe),e(Om,YUe),e(Om,ES),e(ES,KUe),e(Om,ZUe),e(A,eJe),e(A,Vm),e(Vm,Qre),e(Qre,oJe),e(Vm,rJe),e(Vm,CS),e(CS,tJe),e(Vm,aJe),e(A,nJe),e(A,Xm),e(Xm,Hre),e(Hre,sJe),e(Xm,lJe),e(Xm,wS),e(wS,iJe),e(Xm,dJe),e(A,cJe),e(A,zm),e(zm,Ure),e(Ure,fJe),e(zm,mJe),e(zm,AS),e(AS,gJe),e(zm,hJe),e(A,pJe),e(A,Wm),e(Wm,Jre),e(Jre,_Je),e(Wm,uJe),e(Wm,yS),e(yS,bJe),e(Wm,vJe),e(A,FJe),e(A,Qm),e(Qm,Yre),e(Yre,TJe),e(Qm,MJe),e(Qm,LS),e(LS,EJe),e(Qm,CJe),e(A,wJe),e(A,Hm),e(Hm,Kre),e(Kre,AJe),e(Hm,yJe),e(Hm,xS),e(xS,LJe),e(Hm,xJe),e(A,$Je),e(A,Um),e(Um,Zre),e(Zre,kJe),e(Um,SJe),e(Um,$S),e($S,RJe),e(Um,PJe),e(A,BJe),e(A,Jm),e(Jm,ete),e(ete,IJe),e(Jm,NJe),e(Jm,kS),e(kS,qJe),e(Jm,jJe),e(A,DJe),e(A,Ym),e(Ym,ote),e(ote,GJe),e(Ym,OJe),e(Ym,SS),e(SS,VJe),e(Ym,XJe),e(A,zJe),e(A,Km),e(Km,rte),e(rte,WJe),e(Km,QJe),e(Km,RS),e(RS,HJe),e(Km,UJe),e(A,JJe),e(A,Zm),e(Zm,tte),e(tte,YJe),e(Zm,KJe),e(Zm,PS),e(PS,ZJe),e(Zm,eYe),e(A,oYe),e(A,eg),e(eg,ate),e(ate,rYe),e(eg,tYe),e(eg,BS),e(BS,aYe),e(eg,nYe),e(A,sYe),e(A,og),e(og,nte),e(nte,lYe),e(og,iYe),e(og,IS),e(IS,dYe),e(og,cYe),e(A,fYe),e(A,rg),e(rg,ste),e(ste,mYe),e(rg,gYe),e(rg,NS),e(NS,hYe),e(rg,pYe),e(A,_Ye),e(A,tg),e(tg,lte),e(lte,uYe),e(tg,bYe),e(tg,qS),e(qS,vYe),e(tg,FYe),e(A,TYe),e(A,ag),e(ag,ite),e(ite,MYe),e(ag,EYe),e(ag,jS),e(jS,CYe),e(ag,wYe),e(A,AYe),e(A,ng),e(ng,dte),e(dte,yYe),e(ng,LYe),e(ng,DS),e(DS,xYe),e(ng,$Ye),e(A,kYe),e(A,sg),e(sg,cte),e(cte,SYe),e(sg,RYe),e(sg,GS),e(GS,PYe),e(sg,BYe),e(A,IYe),e(A,lg),e(lg,fte),e(fte,NYe),e(lg,qYe),e(lg,OS),e(OS,jYe),e(lg,DYe),e(A,GYe),e(A,ig),e(ig,mte),e(mte,OYe),e(ig,VYe),e(ig,VS),e(VS,XYe),e(ig,zYe),e(A,WYe),e(A,dg),e(dg,gte),e(gte,QYe),e(dg,HYe),e(dg,XS),e(XS,UYe),e(dg,JYe),e(A,YYe),e(A,cg),e(cg,hte),e(hte,KYe),e(cg,ZYe),e(cg,zS),e(zS,eKe),e(cg,oKe),e(A,rKe),e(A,fg),e(fg,pte),e(pte,tKe),e(fg,aKe),e(fg,WS),e(WS,nKe),e(fg,sKe),e(A,lKe),e(A,mg),e(mg,_te),e(_te,iKe),e(mg,dKe),e(mg,QS),e(QS,cKe),e(mg,fKe),e(A,mKe),e(A,gg),e(gg,ute),e(ute,gKe),e(gg,hKe),e(gg,HS),e(HS,pKe),e(gg,_Ke),e(A,uKe),e(A,hg),e(hg,bte),e(bte,bKe),e(hg,vKe),e(hg,US),e(US,FKe),e(hg,TKe),e(A,MKe),e(A,pg),e(pg,vte),e(vte,EKe),e(pg,CKe),e(pg,JS),e(JS,wKe),e(pg,AKe),e(A,yKe),e(A,_g),e(_g,Fte),e(Fte,LKe),e(_g,xKe),e(_g,YS),e(YS,$Ke),e(_g,kKe),e(A,SKe),e(A,ug),e(ug,Tte),e(Tte,RKe),e(ug,PKe),e(ug,KS),e(KS,BKe),e(ug,IKe),e(A,NKe),e(A,bg),e(bg,Mte),e(Mte,qKe),e(bg,jKe),e(bg,ZS),e(ZS,DKe),e(bg,GKe),e(A,OKe),e(A,vg),e(vg,Ete),e(Ete,VKe),e(vg,XKe),e(vg,eR),e(eR,zKe),e(vg,WKe),e(A,QKe),e(A,Fg),e(Fg,Cte),e(Cte,HKe),e(Fg,UKe),e(Fg,oR),e(oR,JKe),e(Fg,YKe),e(A,KKe),e(A,Tg),e(Tg,wte),e(wte,ZKe),e(Tg,eZe),e(Tg,rR),e(rR,oZe),e(Tg,rZe),e(A,tZe),e(A,Mg),e(Mg,Ate),e(Ate,aZe),e(Mg,nZe),e(Mg,tR),e(tR,sZe),e(Mg,lZe),e(A,iZe),e(A,Eg),e(Eg,yte),e(yte,dZe),e(Eg,cZe),e(Eg,aR),e(aR,fZe),e(Eg,mZe),e(Er,gZe),M(Cg,Er,null),e(Co,hZe),e(Co,wg),M(jA,wg,null),e(wg,pZe),e(wg,Lte),e(Lte,_Ze),b(f,wqe,u),b(f,Ti,u),e(Ti,Ag),e(Ag,xte),M(DA,xte,null),e(Ti,uZe),e(Ti,$te),e($te,bZe),b(f,Aqe,u),b(f,wo,u),M(GA,wo,null),e(wo,vZe),e(wo,OA),e(OA,FZe),e(OA,nR),e(nR,TZe),e(OA,MZe),e(wo,EZe),e(wo,VA),e(VA,CZe),e(VA,kte),e(kte,wZe),e(VA,AZe),e(wo,yZe),e(wo,Cr),M(XA,Cr,null),e(Cr,LZe),e(Cr,Ste),e(Ste,xZe),e(Cr,$Ze),e(Cr,Aa),e(Aa,kZe),e(Aa,Rte),e(Rte,SZe),e(Aa,RZe),e(Aa,Pte),e(Pte,PZe),e(Aa,BZe),e(Aa,Bte),e(Bte,IZe),e(Aa,NZe),e(Cr,qZe),e(Cr,k),e(k,Sn),e(Sn,Ite),e(Ite,jZe),e(Sn,DZe),e(Sn,sR),e(sR,GZe),e(Sn,OZe),e(Sn,lR),e(lR,VZe),e(Sn,XZe),e(k,zZe),e(k,Rn),e(Rn,Nte),e(Nte,WZe),e(Rn,QZe),e(Rn,iR),e(iR,HZe),e(Rn,UZe),e(Rn,dR),e(dR,JZe),e(Rn,YZe),e(k,KZe),e(k,Pn),e(Pn,qte),e(qte,ZZe),e(Pn,eeo),e(Pn,cR),e(cR,oeo),e(Pn,reo),e(Pn,fR),e(fR,teo),e(Pn,aeo),e(k,neo),e(k,yg),e(yg,jte),e(jte,seo),e(yg,leo),e(yg,mR),e(mR,ieo),e(yg,deo),e(k,ceo),e(k,Bn),e(Bn,Dte),e(Dte,feo),e(Bn,meo),e(Bn,gR),e(gR,geo),e(Bn,heo),e(Bn,hR),e(hR,peo),e(Bn,_eo),e(k,ueo),e(k,Lg),e(Lg,Gte),e(Gte,beo),e(Lg,veo),e(Lg,pR),e(pR,Feo),e(Lg,Teo),e(k,Meo),e(k,xg),e(xg,Ote),e(Ote,Eeo),e(xg,Ceo),e(xg,_R),e(_R,weo),e(xg,Aeo),e(k,yeo),e(k,$g),e($g,Vte),e(Vte,Leo),e($g,xeo),e($g,uR),e(uR,$eo),e($g,keo),e(k,Seo),e(k,In),e(In,Xte),e(Xte,Reo),e(In,Peo),e(In,bR),e(bR,Beo),e(In,Ieo),e(In,vR),e(vR,Neo),e(In,qeo),e(k,jeo),e(k,Nn),e(Nn,zte),e(zte,Deo),e(Nn,Geo),e(Nn,FR),e(FR,Oeo),e(Nn,Veo),e(Nn,TR),e(TR,Xeo),e(Nn,zeo),e(k,Weo),e(k,qn),e(qn,Wte),e(Wte,Qeo),e(qn,Heo),e(qn,MR),e(MR,Ueo),e(qn,Jeo),e(qn,ER),e(ER,Yeo),e(qn,Keo),e(k,Zeo),e(k,kg),e(kg,Qte),e(Qte,eoo),e(kg,ooo),e(kg,CR),e(CR,roo),e(kg,too),e(k,aoo),e(k,Sg),e(Sg,Hte),e(Hte,noo),e(Sg,soo),e(Sg,wR),e(wR,loo),e(Sg,ioo),e(k,doo),e(k,Rg),e(Rg,Ute),e(Ute,coo),e(Rg,foo),e(Rg,AR),e(AR,moo),e(Rg,goo),e(k,hoo),e(k,jn),e(jn,Jte),e(Jte,poo),e(jn,_oo),e(jn,yR),e(yR,uoo),e(jn,boo),e(jn,LR),e(LR,voo),e(jn,Foo),e(k,Too),e(k,Pg),e(Pg,Yte),e(Yte,Moo),e(Pg,Eoo),e(Pg,xR),e(xR,Coo),e(Pg,woo),e(k,Aoo),e(k,Dn),e(Dn,Kte),e(Kte,yoo),e(Dn,Loo),e(Dn,$R),e($R,xoo),e(Dn,$oo),e(Dn,kR),e(kR,koo),e(Dn,Soo),e(k,Roo),e(k,Gn),e(Gn,Zte),e(Zte,Poo),e(Gn,Boo),e(Gn,SR),e(SR,Ioo),e(Gn,Noo),e(Gn,RR),e(RR,qoo),e(Gn,joo),e(k,Doo),e(k,On),e(On,eae),e(eae,Goo),e(On,Ooo),e(On,PR),e(PR,Voo),e(On,Xoo),e(On,BR),e(BR,zoo),e(On,Woo),e(k,Qoo),e(k,Bg),e(Bg,oae),e(oae,Hoo),e(Bg,Uoo),e(Bg,IR),e(IR,Joo),e(Bg,Yoo),e(k,Koo),e(k,Vn),e(Vn,rae),e(rae,Zoo),e(Vn,ero),e(Vn,NR),e(NR,oro),e(Vn,rro),e(Vn,qR),e(qR,tro),e(Vn,aro),e(k,nro),e(k,Xn),e(Xn,tae),e(tae,sro),e(Xn,lro),e(Xn,jR),e(jR,iro),e(Xn,dro),e(Xn,DR),e(DR,cro),e(Xn,fro),e(k,mro),e(k,zn),e(zn,aae),e(aae,gro),e(zn,hro),e(zn,GR),e(GR,pro),e(zn,_ro),e(zn,OR),e(OR,uro),e(zn,bro),e(k,vro),e(k,Wn),e(Wn,nae),e(nae,Fro),e(Wn,Tro),e(Wn,VR),e(VR,Mro),e(Wn,Ero),e(Wn,XR),e(XR,Cro),e(Wn,wro),e(k,Aro),e(k,Qn),e(Qn,sae),e(sae,yro),e(Qn,Lro),e(Qn,zR),e(zR,xro),e(Qn,$ro),e(Qn,WR),e(WR,kro),e(Qn,Sro),e(k,Rro),e(k,Hn),e(Hn,lae),e(lae,Pro),e(Hn,Bro),e(Hn,QR),e(QR,Iro),e(Hn,Nro),e(Hn,HR),e(HR,qro),e(Hn,jro),e(k,Dro),e(k,Ig),e(Ig,iae),e(iae,Gro),e(Ig,Oro),e(Ig,UR),e(UR,Vro),e(Ig,Xro),e(k,zro),e(k,Un),e(Un,dae),e(dae,Wro),e(Un,Qro),e(Un,JR),e(JR,Hro),e(Un,Uro),e(Un,YR),e(YR,Jro),e(Un,Yro),e(k,Kro),e(k,Ng),e(Ng,cae),e(cae,Zro),e(Ng,eto),e(Ng,KR),e(KR,oto),e(Ng,rto),e(k,tto),e(k,Jn),e(Jn,fae),e(fae,ato),e(Jn,nto),e(Jn,ZR),e(ZR,sto),e(Jn,lto),e(Jn,eP),e(eP,ito),e(Jn,dto),e(k,cto),e(k,Yn),e(Yn,mae),e(mae,fto),e(Yn,mto),e(Yn,oP),e(oP,gto),e(Yn,hto),e(Yn,rP),e(rP,pto),e(Yn,_to),e(k,uto),e(k,Kn),e(Kn,gae),e(gae,bto),e(Kn,vto),e(Kn,tP),e(tP,Fto),e(Kn,Tto),e(Kn,aP),e(aP,Mto),e(Kn,Eto),e(k,Cto),e(k,qg),e(qg,hae),e(hae,wto),e(qg,Ato),e(qg,nP),e(nP,yto),e(qg,Lto),e(k,xto),e(k,Zn),e(Zn,pae),e(pae,$to),e(Zn,kto),e(Zn,sP),e(sP,Sto),e(Zn,Rto),e(Zn,lP),e(lP,Pto),e(Zn,Bto),e(k,Ito),e(k,es),e(es,_ae),e(_ae,Nto),e(es,qto),e(es,iP),e(iP,jto),e(es,Dto),e(es,dP),e(dP,Gto),e(es,Oto),e(k,Vto),e(k,jg),e(jg,uae),e(uae,Xto),e(jg,zto),e(jg,cP),e(cP,Wto),e(jg,Qto),e(k,Hto),e(k,os),e(os,bae),e(bae,Uto),e(os,Jto),e(os,fP),e(fP,Yto),e(os,Kto),e(os,mP),e(mP,Zto),e(os,eao),e(k,oao),e(k,rs),e(rs,vae),e(vae,rao),e(rs,tao),e(rs,gP),e(gP,aao),e(rs,nao),e(rs,hP),e(hP,sao),e(rs,lao),e(k,iao),e(k,ts),e(ts,Fae),e(Fae,dao),e(ts,cao),e(ts,pP),e(pP,fao),e(ts,mao),e(ts,_P),e(_P,gao),e(ts,hao),e(k,pao),e(k,as),e(as,Tae),e(Tae,_ao),e(as,uao),e(as,uP),e(uP,bao),e(as,vao),e(as,bP),e(bP,Fao),e(as,Tao),e(k,Mao),e(k,ns),e(ns,Mae),e(Mae,Eao),e(ns,Cao),e(ns,vP),e(vP,wao),e(ns,Aao),e(ns,FP),e(FP,yao),e(ns,Lao),e(k,xao),e(k,ss),e(ss,Eae),e(Eae,$ao),e(ss,kao),e(ss,TP),e(TP,Sao),e(ss,Rao),e(ss,MP),e(MP,Pao),e(ss,Bao),e(k,Iao),e(k,ls),e(ls,Cae),e(Cae,Nao),e(ls,qao),e(ls,EP),e(EP,jao),e(ls,Dao),e(ls,CP),e(CP,Gao),e(ls,Oao),e(k,Vao),e(k,Dg),e(Dg,wae),e(wae,Xao),e(Dg,zao),e(Dg,wP),e(wP,Wao),e(Dg,Qao),e(k,Hao),e(k,is),e(is,Aae),e(Aae,Uao),e(is,Jao),e(is,AP),e(AP,Yao),e(is,Kao),e(is,yP),e(yP,Zao),e(is,eno),e(k,ono),e(k,Gg),e(Gg,yae),e(yae,rno),e(Gg,tno),e(Gg,LP),e(LP,ano),e(Gg,nno),e(k,sno),e(k,Og),e(Og,Lae),e(Lae,lno),e(Og,ino),e(Og,xP),e(xP,dno),e(Og,cno),e(k,fno),e(k,ds),e(ds,xae),e(xae,mno),e(ds,gno),e(ds,$P),e($P,hno),e(ds,pno),e(ds,kP),e(kP,_no),e(ds,uno),e(k,bno),e(k,cs),e(cs,$ae),e($ae,vno),e(cs,Fno),e(cs,SP),e(SP,Tno),e(cs,Mno),e(cs,RP),e(RP,Eno),e(cs,Cno),e(k,wno),e(k,fs),e(fs,kae),e(kae,Ano),e(fs,yno),e(fs,PP),e(PP,Lno),e(fs,xno),e(fs,BP),e(BP,$no),e(fs,kno),e(k,Sno),e(k,Vg),e(Vg,Sae),e(Sae,Rno),e(Vg,Pno),e(Vg,IP),e(IP,Bno),e(Vg,Ino),e(k,Nno),e(k,ms),e(ms,Rae),e(Rae,qno),e(ms,jno),e(ms,NP),e(NP,Dno),e(ms,Gno),e(ms,qP),e(qP,Ono),e(ms,Vno),e(k,Xno),e(k,gs),e(gs,Pae),e(Pae,zno),e(gs,Wno),e(gs,jP),e(jP,Qno),e(gs,Hno),e(gs,DP),e(DP,Uno),e(gs,Jno),e(k,Yno),e(k,hs),e(hs,Bae),e(Bae,Kno),e(hs,Zno),e(hs,GP),e(GP,eso),e(hs,oso),e(hs,OP),e(OP,rso),e(hs,tso),e(k,aso),e(k,ps),e(ps,Iae),e(Iae,nso),e(ps,sso),e(ps,VP),e(VP,lso),e(ps,iso),e(ps,XP),e(XP,dso),e(ps,cso),e(k,fso),e(k,_s),e(_s,Nae),e(Nae,mso),e(_s,gso),e(_s,zP),e(zP,hso),e(_s,pso),e(_s,WP),e(WP,_so),e(_s,uso),e(k,bso),e(k,Xg),e(Xg,qae),e(qae,vso),e(Xg,Fso),e(Xg,QP),e(QP,Tso),e(Xg,Mso),e(k,Eso),e(k,us),e(us,jae),e(jae,Cso),e(us,wso),e(us,HP),e(HP,Aso),e(us,yso),e(us,UP),e(UP,Lso),e(us,xso),e(k,$so),e(k,zg),e(zg,Dae),e(Dae,kso),e(zg,Sso),e(zg,JP),e(JP,Rso),e(zg,Pso),e(k,Bso),e(k,Wg),e(Wg,Gae),e(Gae,Iso),e(Wg,Nso),e(Wg,YP),e(YP,qso),e(Wg,jso),e(k,Dso),e(k,Qg),e(Qg,Oae),e(Oae,Gso),e(Qg,Oso),e(Qg,KP),e(KP,Vso),e(Qg,Xso),e(k,zso),e(k,Hg),e(Hg,Vae),e(Vae,Wso),e(Hg,Qso),e(Hg,ZP),e(ZP,Hso),e(Hg,Uso),e(k,Jso),e(k,bs),e(bs,Xae),e(Xae,Yso),e(bs,Kso),e(bs,eB),e(eB,Zso),e(bs,elo),e(bs,oB),e(oB,olo),e(bs,rlo),e(k,tlo),e(k,Ug),e(Ug,zae),e(zae,alo),e(Ug,nlo),e(Ug,rB),e(rB,slo),e(Ug,llo),e(k,ilo),e(k,vs),e(vs,Wae),e(Wae,dlo),e(vs,clo),e(vs,tB),e(tB,flo),e(vs,mlo),e(vs,aB),e(aB,glo),e(vs,hlo),e(k,plo),e(k,Fs),e(Fs,Qae),e(Qae,_lo),e(Fs,ulo),e(Fs,nB),e(nB,blo),e(Fs,vlo),e(Fs,sB),e(sB,Flo),e(Fs,Tlo),e(k,Mlo),e(k,Ts),e(Ts,Hae),e(Hae,Elo),e(Ts,Clo),e(Ts,lB),e(lB,wlo),e(Ts,Alo),e(Ts,iB),e(iB,ylo),e(Ts,Llo),e(k,xlo),e(k,Ms),e(Ms,Uae),e(Uae,$lo),e(Ms,klo),e(Ms,dB),e(dB,Slo),e(Ms,Rlo),e(Ms,cB),e(cB,Plo),e(Ms,Blo),e(k,Ilo),e(k,Es),e(Es,Jae),e(Jae,Nlo),e(Es,qlo),e(Es,fB),e(fB,jlo),e(Es,Dlo),e(Es,mB),e(mB,Glo),e(Es,Olo),e(k,Vlo),e(k,Cs),e(Cs,Yae),e(Yae,Xlo),e(Cs,zlo),e(Cs,gB),e(gB,Wlo),e(Cs,Qlo),e(Cs,hB),e(hB,Hlo),e(Cs,Ulo),e(k,Jlo),e(k,Jg),e(Jg,Kae),e(Kae,Ylo),e(Jg,Klo),e(Jg,pB),e(pB,Zlo),e(Jg,eio),e(k,oio),e(k,Yg),e(Yg,Zae),e(Zae,rio),e(Yg,tio),e(Yg,_B),e(_B,aio),e(Yg,nio),e(k,sio),e(k,ws),e(ws,ene),e(ene,lio),e(ws,iio),e(ws,uB),e(uB,dio),e(ws,cio),e(ws,bB),e(bB,fio),e(ws,mio),e(k,gio),e(k,As),e(As,one),e(one,hio),e(As,pio),e(As,vB),e(vB,_io),e(As,uio),e(As,FB),e(FB,bio),e(As,vio),e(k,Fio),e(k,ys),e(ys,rne),e(rne,Tio),e(ys,Mio),e(ys,TB),e(TB,Eio),e(ys,Cio),e(ys,MB),e(MB,wio),e(ys,Aio),e(k,yio),e(k,Kg),e(Kg,tne),e(tne,Lio),e(Kg,xio),e(Kg,EB),e(EB,$io),e(Kg,kio),e(k,Sio),e(k,Zg),e(Zg,ane),e(ane,Rio),e(Zg,Pio),e(Zg,CB),e(CB,Bio),e(Zg,Iio),e(k,Nio),e(k,eh),e(eh,nne),e(nne,qio),e(eh,jio),e(eh,wB),e(wB,Dio),e(eh,Gio),e(k,Oio),e(k,Ls),e(Ls,sne),e(sne,Vio),e(Ls,Xio),e(Ls,AB),e(AB,zio),e(Ls,Wio),e(Ls,yB),e(yB,Qio),e(Ls,Hio),e(k,Uio),e(k,oh),e(oh,lne),e(lne,Jio),e(oh,Yio),e(oh,LB),e(LB,Kio),e(oh,Zio),e(k,edo),e(k,rh),e(rh,ine),e(ine,odo),e(rh,rdo),e(rh,xB),e(xB,tdo),e(rh,ado),e(k,ndo),e(k,th),e(th,dne),e(dne,sdo),e(th,ldo),e(th,$B),e($B,ido),e(th,ddo),e(k,cdo),e(k,xs),e(xs,cne),e(cne,fdo),e(xs,mdo),e(xs,kB),e(kB,gdo),e(xs,hdo),e(xs,SB),e(SB,pdo),e(xs,_do),e(k,udo),e(k,ah),e(ah,fne),e(fne,bdo),e(ah,vdo),e(ah,RB),e(RB,Fdo),e(ah,Tdo),e(k,Mdo),e(k,nh),e(nh,mne),e(mne,Edo),e(nh,Cdo),e(nh,PB),e(PB,wdo),e(nh,Ado),e(k,ydo),e(k,$s),e($s,gne),e(gne,Ldo),e($s,xdo),e($s,BB),e(BB,$do),e($s,kdo),e($s,IB),e(IB,Sdo),e($s,Rdo),e(k,Pdo),e(k,ks),e(ks,hne),e(hne,Bdo),e(ks,Ido),e(ks,NB),e(NB,Ndo),e(ks,qdo),e(ks,qB),e(qB,jdo),e(ks,Ddo),e(k,Gdo),e(k,Ss),e(Ss,pne),e(pne,Odo),e(Ss,Vdo),e(Ss,jB),e(jB,Xdo),e(Ss,zdo),e(Ss,DB),e(DB,Wdo),e(Ss,Qdo),e(k,Hdo),e(k,Rs),e(Rs,_ne),e(_ne,Udo),e(Rs,Jdo),e(Rs,GB),e(GB,Ydo),e(Rs,Kdo),e(Rs,OB),e(OB,Zdo),e(Rs,eco),e(Cr,oco),M(sh,Cr,null),e(wo,rco),e(wo,lh),M(zA,lh,null),e(lh,tco),e(lh,une),e(une,aco),b(f,yqe,u),b(f,Mi,u),e(Mi,ih),e(ih,bne),M(WA,bne,null),e(Mi,nco),e(Mi,vne),e(vne,sco),b(f,Lqe,u),b(f,Ao,u),M(QA,Ao,null),e(Ao,lco),e(Ao,HA),e(HA,ico),e(HA,VB),e(VB,dco),e(HA,cco),e(Ao,fco),e(Ao,UA),e(UA,mco),e(UA,Fne),e(Fne,gco),e(UA,hco),e(Ao,pco),e(Ao,He),M(JA,He,null),e(He,_co),e(He,Tne),e(Tne,uco),e(He,bco),e(He,ya),e(ya,vco),e(ya,Mne),e(Mne,Fco),e(ya,Tco),e(ya,Ene),e(Ene,Mco),e(ya,Eco),e(ya,Cne),e(Cne,Cco),e(ya,wco),e(He,Aco),e(He,Y),e(Y,dh),e(dh,wne),e(wne,yco),e(dh,Lco),e(dh,XB),e(XB,xco),e(dh,$co),e(Y,kco),e(Y,ch),e(ch,Ane),e(Ane,Sco),e(ch,Rco),e(ch,zB),e(zB,Pco),e(ch,Bco),e(Y,Ico),e(Y,fh),e(fh,yne),e(yne,Nco),e(fh,qco),e(fh,WB),e(WB,jco),e(fh,Dco),e(Y,Gco),e(Y,mh),e(mh,Lne),e(Lne,Oco),e(mh,Vco),e(mh,QB),e(QB,Xco),e(mh,zco),e(Y,Wco),e(Y,gh),e(gh,xne),e(xne,Qco),e(gh,Hco),e(gh,HB),e(HB,Uco),e(gh,Jco),e(Y,Yco),e(Y,hh),e(hh,$ne),e($ne,Kco),e(hh,Zco),e(hh,UB),e(UB,efo),e(hh,ofo),e(Y,rfo),e(Y,ph),e(ph,kne),e(kne,tfo),e(ph,afo),e(ph,JB),e(JB,nfo),e(ph,sfo),e(Y,lfo),e(Y,_h),e(_h,Sne),e(Sne,ifo),e(_h,dfo),e(_h,YB),e(YB,cfo),e(_h,ffo),e(Y,mfo),e(Y,uh),e(uh,Rne),e(Rne,gfo),e(uh,hfo),e(uh,KB),e(KB,pfo),e(uh,_fo),e(Y,ufo),e(Y,bh),e(bh,Pne),e(Pne,bfo),e(bh,vfo),e(bh,ZB),e(ZB,Ffo),e(bh,Tfo),e(Y,Mfo),e(Y,vh),e(vh,Bne),e(Bne,Efo),e(vh,Cfo),e(vh,eI),e(eI,wfo),e(vh,Afo),e(Y,yfo),e(Y,Fh),e(Fh,Ine),e(Ine,Lfo),e(Fh,xfo),e(Fh,oI),e(oI,$fo),e(Fh,kfo),e(Y,Sfo),e(Y,Th),e(Th,Nne),e(Nne,Rfo),e(Th,Pfo),e(Th,rI),e(rI,Bfo),e(Th,Ifo),e(Y,Nfo),e(Y,Mh),e(Mh,qne),e(qne,qfo),e(Mh,jfo),e(Mh,tI),e(tI,Dfo),e(Mh,Gfo),e(Y,Ofo),e(Y,Eh),e(Eh,jne),e(jne,Vfo),e(Eh,Xfo),e(Eh,aI),e(aI,zfo),e(Eh,Wfo),e(Y,Qfo),e(Y,Ch),e(Ch,Dne),e(Dne,Hfo),e(Ch,Ufo),e(Ch,nI),e(nI,Jfo),e(Ch,Yfo),e(Y,Kfo),e(Y,wh),e(wh,Gne),e(Gne,Zfo),e(wh,emo),e(wh,sI),e(sI,omo),e(wh,rmo),e(Y,tmo),e(Y,Ah),e(Ah,One),e(One,amo),e(Ah,nmo),e(Ah,lI),e(lI,smo),e(Ah,lmo),e(Y,imo),e(Y,yh),e(yh,Vne),e(Vne,dmo),e(yh,cmo),e(yh,iI),e(iI,fmo),e(yh,mmo),e(Y,gmo),e(Y,Lh),e(Lh,Xne),e(Xne,hmo),e(Lh,pmo),e(Lh,dI),e(dI,_mo),e(Lh,umo),e(Y,bmo),e(Y,xh),e(xh,zne),e(zne,vmo),e(xh,Fmo),e(xh,cI),e(cI,Tmo),e(xh,Mmo),e(Y,Emo),e(Y,$h),e($h,Wne),e(Wne,Cmo),e($h,wmo),e($h,fI),e(fI,Amo),e($h,ymo),e(Y,Lmo),e(Y,kh),e(kh,Qne),e(Qne,xmo),e(kh,$mo),e(kh,mI),e(mI,kmo),e(kh,Smo),e(Y,Rmo),e(Y,Sh),e(Sh,Hne),e(Hne,Pmo),e(Sh,Bmo),e(Sh,gI),e(gI,Imo),e(Sh,Nmo),e(Y,qmo),e(Y,Rh),e(Rh,Une),e(Une,jmo),e(Rh,Dmo),e(Rh,hI),e(hI,Gmo),e(Rh,Omo),e(Y,Vmo),e(Y,Ph),e(Ph,Jne),e(Jne,Xmo),e(Ph,zmo),e(Ph,pI),e(pI,Wmo),e(Ph,Qmo),e(Y,Hmo),e(Y,Bh),e(Bh,Yne),e(Yne,Umo),e(Bh,Jmo),e(Bh,_I),e(_I,Ymo),e(Bh,Kmo),e(Y,Zmo),e(Y,Ih),e(Ih,Kne),e(Kne,ego),e(Ih,ogo),e(Ih,uI),e(uI,rgo),e(Ih,tgo),e(Y,ago),e(Y,Nh),e(Nh,Zne),e(Zne,ngo),e(Nh,sgo),e(Nh,bI),e(bI,lgo),e(Nh,igo),e(He,dgo),M(qh,He,null),e(He,cgo),M(jh,He,null),e(Ao,fgo),e(Ao,Dh),M(YA,Dh,null),e(Dh,mgo),e(Dh,ese),e(ese,ggo),b(f,xqe,u),b(f,Ei,u),e(Ei,Gh),e(Gh,ose),M(KA,ose,null),e(Ei,hgo),e(Ei,rse),e(rse,pgo),b(f,$qe,u),b(f,yo,u),M(ZA,yo,null),e(yo,_go),e(yo,ey),e(ey,ugo),e(ey,vI),e(vI,bgo),e(ey,vgo),e(yo,Fgo),e(yo,oy),e(oy,Tgo),e(oy,tse),e(tse,Mgo),e(oy,Ego),e(yo,Cgo),e(yo,Ue),M(ry,Ue,null),e(Ue,wgo),e(Ue,ase),e(ase,Ago),e(Ue,ygo),e(Ue,Ci),e(Ci,Lgo),e(Ci,nse),e(nse,xgo),e(Ci,$go),e(Ci,sse),e(sse,kgo),e(Ci,Sgo),e(Ue,Rgo),e(Ue,he),e(he,Oh),e(Oh,lse),e(lse,Pgo),e(Oh,Bgo),e(Oh,FI),e(FI,Igo),e(Oh,Ngo),e(he,qgo),e(he,Vh),e(Vh,ise),e(ise,jgo),e(Vh,Dgo),e(Vh,dse),e(dse,Ggo),e(Vh,Ogo),e(he,Vgo),e(he,Xh),e(Xh,cse),e(cse,Xgo),e(Xh,zgo),e(Xh,TI),e(TI,Wgo),e(Xh,Qgo),e(he,Hgo),e(he,zh),e(zh,fse),e(fse,Ugo),e(zh,Jgo),e(zh,MI),e(MI,Ygo),e(zh,Kgo),e(he,Zgo),e(he,Wh),e(Wh,mse),e(mse,eho),e(Wh,oho),e(Wh,EI),e(EI,rho),e(Wh,tho),e(he,aho),e(he,Qh),e(Qh,gse),e(gse,nho),e(Qh,sho),e(Qh,CI),e(CI,lho),e(Qh,iho),e(he,dho),e(he,Hh),e(Hh,hse),e(hse,cho),e(Hh,fho),e(Hh,wI),e(wI,mho),e(Hh,gho),e(he,hho),e(he,Uh),e(Uh,pse),e(pse,pho),e(Uh,_ho),e(Uh,AI),e(AI,uho),e(Uh,bho),e(he,vho),e(he,Jh),e(Jh,_se),e(_se,Fho),e(Jh,Tho),e(Jh,yI),e(yI,Mho),e(Jh,Eho),e(he,Cho),e(he,Yh),e(Yh,use),e(use,who),e(Yh,Aho),e(Yh,LI),e(LI,yho),e(Yh,Lho),e(he,xho),e(he,Kh),e(Kh,bse),e(bse,$ho),e(Kh,kho),e(Kh,xI),e(xI,Sho),e(Kh,Rho),e(he,Pho),e(he,Zh),e(Zh,vse),e(vse,Bho),e(Zh,Iho),e(Zh,$I),e($I,Nho),e(Zh,qho),e(he,jho),e(he,ep),e(ep,Fse),e(Fse,Dho),e(ep,Gho),e(ep,kI),e(kI,Oho),e(ep,Vho),e(he,Xho),e(he,op),e(op,Tse),e(Tse,zho),e(op,Who),e(op,SI),e(SI,Qho),e(op,Hho),e(he,Uho),e(he,rp),e(rp,Mse),e(Mse,Jho),e(rp,Yho),e(rp,RI),e(RI,Kho),e(rp,Zho),e(he,epo),e(he,tp),e(tp,Ese),e(Ese,opo),e(tp,rpo),e(tp,PI),e(PI,tpo),e(tp,apo),e(he,npo),e(he,ap),e(ap,Cse),e(Cse,spo),e(ap,lpo),e(ap,BI),e(BI,ipo),e(ap,dpo),e(Ue,cpo),M(np,Ue,null),e(Ue,fpo),M(sp,Ue,null),e(yo,mpo),e(yo,lp),M(ty,lp,null),e(lp,gpo),e(lp,wse),e(wse,hpo),b(f,kqe,u),b(f,wi,u),e(wi,ip),e(ip,Ase),M(ay,Ase,null),e(wi,ppo),e(wi,yse),e(yse,_po),b(f,Sqe,u),b(f,Lo,u),M(ny,Lo,null),e(Lo,upo),e(Lo,Ai),e(Ai,bpo),e(Ai,II),e(II,vpo),e(Ai,Fpo),e(Ai,NI),e(NI,Tpo),e(Ai,Mpo),e(Lo,Epo),e(Lo,sy),e(sy,Cpo),e(sy,Lse),e(Lse,wpo),e(sy,Apo),e(Lo,ypo),e(Lo,tt),M(ly,tt,null),e(tt,Lpo),e(tt,xse),e(xse,xpo),e(tt,$po),e(tt,yi),e(yi,kpo),e(yi,$se),e($se,Spo),e(yi,Rpo),e(yi,qI),e(qI,Ppo),e(yi,Bpo),e(tt,Ipo),M(dp,tt,null),e(Lo,Npo),e(Lo,Je),M(iy,Je,null),e(Je,qpo),e(Je,kse),e(kse,jpo),e(Je,Dpo),e(Je,La),e(La,Gpo),e(La,Sse),e(Sse,Opo),e(La,Vpo),e(La,Rse),e(Rse,Xpo),e(La,zpo),e(La,Pse),e(Pse,Wpo),e(La,Qpo),e(Je,Hpo),e(Je,x),e(x,cp),e(cp,Bse),e(Bse,Upo),e(cp,Jpo),e(cp,jI),e(jI,Ypo),e(cp,Kpo),e(x,Zpo),e(x,fp),e(fp,Ise),e(Ise,e_o),e(fp,o_o),e(fp,DI),e(DI,r_o),e(fp,t_o),e(x,a_o),e(x,mp),e(mp,Nse),e(Nse,n_o),e(mp,s_o),e(mp,GI),e(GI,l_o),e(mp,i_o),e(x,d_o),e(x,gp),e(gp,qse),e(qse,c_o),e(gp,f_o),e(gp,OI),e(OI,m_o),e(gp,g_o),e(x,h_o),e(x,hp),e(hp,jse),e(jse,p_o),e(hp,__o),e(hp,VI),e(VI,u_o),e(hp,b_o),e(x,v_o),e(x,pp),e(pp,Dse),e(Dse,F_o),e(pp,T_o),e(pp,XI),e(XI,M_o),e(pp,E_o),e(x,C_o),e(x,_p),e(_p,Gse),e(Gse,w_o),e(_p,A_o),e(_p,zI),e(zI,y_o),e(_p,L_o),e(x,x_o),e(x,up),e(up,Ose),e(Ose,$_o),e(up,k_o),e(up,WI),e(WI,S_o),e(up,R_o),e(x,P_o),e(x,bp),e(bp,Vse),e(Vse,B_o),e(bp,I_o),e(bp,QI),e(QI,N_o),e(bp,q_o),e(x,j_o),e(x,vp),e(vp,Xse),e(Xse,D_o),e(vp,G_o),e(vp,HI),e(HI,O_o),e(vp,V_o),e(x,X_o),e(x,Fp),e(Fp,zse),e(zse,z_o),e(Fp,W_o),e(Fp,UI),e(UI,Q_o),e(Fp,H_o),e(x,U_o),e(x,Tp),e(Tp,Wse),e(Wse,J_o),e(Tp,Y_o),e(Tp,JI),e(JI,K_o),e(Tp,Z_o),e(x,euo),e(x,Mp),e(Mp,Qse),e(Qse,ouo),e(Mp,ruo),e(Mp,YI),e(YI,tuo),e(Mp,auo),e(x,nuo),e(x,Ep),e(Ep,Hse),e(Hse,suo),e(Ep,luo),e(Ep,KI),e(KI,iuo),e(Ep,duo),e(x,cuo),e(x,Cp),e(Cp,Use),e(Use,fuo),e(Cp,muo),e(Cp,ZI),e(ZI,guo),e(Cp,huo),e(x,puo),e(x,wp),e(wp,Jse),e(Jse,_uo),e(wp,uuo),e(wp,eN),e(eN,buo),e(wp,vuo),e(x,Fuo),e(x,Ap),e(Ap,Yse),e(Yse,Tuo),e(Ap,Muo),e(Ap,oN),e(oN,Euo),e(Ap,Cuo),e(x,wuo),e(x,yp),e(yp,Kse),e(Kse,Auo),e(yp,yuo),e(yp,rN),e(rN,Luo),e(yp,xuo),e(x,$uo),e(x,Lp),e(Lp,Zse),e(Zse,kuo),e(Lp,Suo),e(Lp,tN),e(tN,Ruo),e(Lp,Puo),e(x,Buo),e(x,xp),e(xp,ele),e(ele,Iuo),e(xp,Nuo),e(xp,aN),e(aN,quo),e(xp,juo),e(x,Duo),e(x,$p),e($p,ole),e(ole,Guo),e($p,Ouo),e($p,nN),e(nN,Vuo),e($p,Xuo),e(x,zuo),e(x,kp),e(kp,rle),e(rle,Wuo),e(kp,Quo),e(kp,sN),e(sN,Huo),e(kp,Uuo),e(x,Juo),e(x,Sp),e(Sp,tle),e(tle,Yuo),e(Sp,Kuo),e(Sp,lN),e(lN,Zuo),e(Sp,e2o),e(x,o2o),e(x,Rp),e(Rp,ale),e(ale,r2o),e(Rp,t2o),e(Rp,iN),e(iN,a2o),e(Rp,n2o),e(x,s2o),e(x,Pp),e(Pp,nle),e(nle,l2o),e(Pp,i2o),e(Pp,dN),e(dN,d2o),e(Pp,c2o),e(x,f2o),e(x,Bp),e(Bp,sle),e(sle,m2o),e(Bp,g2o),e(Bp,cN),e(cN,h2o),e(Bp,p2o),e(x,_2o),e(x,Ip),e(Ip,lle),e(lle,u2o),e(Ip,b2o),e(Ip,fN),e(fN,v2o),e(Ip,F2o),e(x,T2o),e(x,Np),e(Np,ile),e(ile,M2o),e(Np,E2o),e(Np,mN),e(mN,C2o),e(Np,w2o),e(x,A2o),e(x,qp),e(qp,dle),e(dle,y2o),e(qp,L2o),e(qp,gN),e(gN,x2o),e(qp,$2o),e(x,k2o),e(x,jp),e(jp,cle),e(cle,S2o),e(jp,R2o),e(jp,hN),e(hN,P2o),e(jp,B2o),e(x,I2o),e(x,Dp),e(Dp,fle),e(fle,N2o),e(Dp,q2o),e(Dp,pN),e(pN,j2o),e(Dp,D2o),e(x,G2o),e(x,Gp),e(Gp,mle),e(mle,O2o),e(Gp,V2o),e(Gp,_N),e(_N,X2o),e(Gp,z2o),e(x,W2o),e(x,Op),e(Op,gle),e(gle,Q2o),e(Op,H2o),e(Op,uN),e(uN,U2o),e(Op,J2o),e(x,Y2o),e(x,Ps),e(Ps,hle),e(hle,K2o),e(Ps,Z2o),e(Ps,bN),e(bN,e1o),e(Ps,o1o),e(Ps,vN),e(vN,r1o),e(Ps,t1o),e(x,a1o),e(x,Vp),e(Vp,ple),e(ple,n1o),e(Vp,s1o),e(Vp,FN),e(FN,l1o),e(Vp,i1o),e(x,d1o),e(x,Xp),e(Xp,_le),e(_le,c1o),e(Xp,f1o),e(Xp,TN),e(TN,m1o),e(Xp,g1o),e(x,h1o),e(x,zp),e(zp,ule),e(ule,p1o),e(zp,_1o),e(zp,MN),e(MN,u1o),e(zp,b1o),e(x,v1o),e(x,Wp),e(Wp,ble),e(ble,F1o),e(Wp,T1o),e(Wp,EN),e(EN,M1o),e(Wp,E1o),e(x,C1o),e(x,Qp),e(Qp,vle),e(vle,w1o),e(Qp,A1o),e(Qp,CN),e(CN,y1o),e(Qp,L1o),e(x,x1o),e(x,Hp),e(Hp,Fle),e(Fle,$1o),e(Hp,k1o),e(Hp,wN),e(wN,S1o),e(Hp,R1o),e(x,P1o),e(x,Up),e(Up,Tle),e(Tle,B1o),e(Up,I1o),e(Up,AN),e(AN,N1o),e(Up,q1o),e(x,j1o),e(x,Jp),e(Jp,Mle),e(Mle,D1o),e(Jp,G1o),e(Jp,yN),e(yN,O1o),e(Jp,V1o),e(x,X1o),e(x,Yp),e(Yp,Ele),e(Ele,z1o),e(Yp,W1o),e(Yp,LN),e(LN,Q1o),e(Yp,H1o),e(x,U1o),e(x,Kp),e(Kp,Cle),e(Cle,J1o),e(Kp,Y1o),e(Kp,xN),e(xN,K1o),e(Kp,Z1o),e(x,ebo),e(x,Zp),e(Zp,wle),e(wle,obo),e(Zp,rbo),e(Zp,$N),e($N,tbo),e(Zp,abo),e(x,nbo),e(x,e_),e(e_,Ale),e(Ale,sbo),e(e_,lbo),e(e_,kN),e(kN,ibo),e(e_,dbo),e(x,cbo),e(x,o_),e(o_,yle),e(yle,fbo),e(o_,mbo),e(o_,SN),e(SN,gbo),e(o_,hbo),e(x,pbo),e(x,r_),e(r_,Lle),e(Lle,_bo),e(r_,ubo),e(r_,RN),e(RN,bbo),e(r_,vbo),e(x,Fbo),e(x,t_),e(t_,xle),e(xle,Tbo),e(t_,Mbo),e(t_,PN),e(PN,Ebo),e(t_,Cbo),e(x,wbo),e(x,a_),e(a_,$le),e($le,Abo),e(a_,ybo),e(a_,BN),e(BN,Lbo),e(a_,xbo),e(x,$bo),e(x,n_),e(n_,kle),e(kle,kbo),e(n_,Sbo),e(n_,IN),e(IN,Rbo),e(n_,Pbo),e(x,Bbo),e(x,s_),e(s_,Sle),e(Sle,Ibo),e(s_,Nbo),e(s_,NN),e(NN,qbo),e(s_,jbo),e(x,Dbo),e(x,l_),e(l_,Rle),e(Rle,Gbo),e(l_,Obo),e(l_,qN),e(qN,Vbo),e(l_,Xbo),e(x,zbo),e(x,i_),e(i_,Ple),e(Ple,Wbo),e(i_,Qbo),e(i_,jN),e(jN,Hbo),e(i_,Ubo),e(x,Jbo),e(x,d_),e(d_,Ble),e(Ble,Ybo),e(d_,Kbo),e(d_,DN),e(DN,Zbo),e(d_,evo),e(x,ovo),e(x,c_),e(c_,Ile),e(Ile,rvo),e(c_,tvo),e(c_,GN),e(GN,avo),e(c_,nvo),e(x,svo),e(x,f_),e(f_,Nle),e(Nle,lvo),e(f_,ivo),e(f_,ON),e(ON,dvo),e(f_,cvo),e(x,fvo),e(x,m_),e(m_,qle),e(qle,mvo),e(m_,gvo),e(m_,VN),e(VN,hvo),e(m_,pvo),e(x,_vo),e(x,g_),e(g_,jle),e(jle,uvo),e(g_,bvo),e(g_,XN),e(XN,vvo),e(g_,Fvo),e(x,Tvo),e(x,h_),e(h_,Dle),e(Dle,Mvo),e(h_,Evo),e(h_,zN),e(zN,Cvo),e(h_,wvo),e(x,Avo),e(x,p_),e(p_,Gle),e(Gle,yvo),e(p_,Lvo),e(p_,WN),e(WN,xvo),e(p_,$vo),e(x,kvo),e(x,__),e(__,Ole),e(Ole,Svo),e(__,Rvo),e(__,QN),e(QN,Pvo),e(__,Bvo),e(x,Ivo),e(x,u_),e(u_,Vle),e(Vle,Nvo),e(u_,qvo),e(u_,HN),e(HN,jvo),e(u_,Dvo),e(x,Gvo),e(x,b_),e(b_,Xle),e(Xle,Ovo),e(b_,Vvo),e(b_,UN),e(UN,Xvo),e(b_,zvo),e(x,Wvo),e(x,v_),e(v_,zle),e(zle,Qvo),e(v_,Hvo),e(v_,JN),e(JN,Uvo),e(v_,Jvo),e(x,Yvo),e(x,F_),e(F_,Wle),e(Wle,Kvo),e(F_,Zvo),e(F_,YN),e(YN,e0o),e(F_,o0o),e(x,r0o),e(x,T_),e(T_,Qle),e(Qle,t0o),e(T_,a0o),e(T_,KN),e(KN,n0o),e(T_,s0o),e(x,l0o),e(x,M_),e(M_,Hle),e(Hle,i0o),e(M_,d0o),e(M_,ZN),e(ZN,c0o),e(M_,f0o),e(x,m0o),e(x,E_),e(E_,Ule),e(Ule,g0o),e(E_,h0o),e(E_,eq),e(eq,p0o),e(E_,_0o),e(x,u0o),e(x,C_),e(C_,Jle),e(Jle,b0o),e(C_,v0o),e(C_,oq),e(oq,F0o),e(C_,T0o),e(x,M0o),e(x,w_),e(w_,Yle),e(Yle,E0o),e(w_,C0o),e(w_,rq),e(rq,w0o),e(w_,A0o),e(x,y0o),e(x,A_),e(A_,Kle),e(Kle,L0o),e(A_,x0o),e(A_,tq),e(tq,$0o),e(A_,k0o),e(x,S0o),e(x,y_),e(y_,Zle),e(Zle,R0o),e(y_,P0o),e(y_,aq),e(aq,B0o),e(y_,I0o),e(x,N0o),e(x,L_),e(L_,eie),e(eie,q0o),e(L_,j0o),e(L_,nq),e(nq,D0o),e(L_,G0o),e(x,O0o),e(x,x_),e(x_,oie),e(oie,V0o),e(x_,X0o),e(x_,sq),e(sq,z0o),e(x_,W0o),e(x,Q0o),e(x,$_),e($_,rie),e(rie,H0o),e($_,U0o),e($_,lq),e(lq,J0o),e($_,Y0o),e(x,K0o),e(x,k_),e(k_,tie),e(tie,Z0o),e(k_,eFo),e(k_,iq),e(iq,oFo),e(k_,rFo),e(x,tFo),e(x,S_),e(S_,aie),e(aie,aFo),e(S_,nFo),e(S_,dq),e(dq,sFo),e(S_,lFo),e(x,iFo),e(x,R_),e(R_,nie),e(nie,dFo),e(R_,cFo),e(R_,cq),e(cq,fFo),e(R_,mFo),e(x,gFo),e(x,P_),e(P_,sie),e(sie,hFo),e(P_,pFo),e(P_,fq),e(fq,_Fo),e(P_,uFo),e(x,bFo),e(x,B_),e(B_,lie),e(lie,vFo),e(B_,FFo),e(B_,mq),e(mq,TFo),e(B_,MFo),e(x,EFo),e(x,I_),e(I_,iie),e(iie,CFo),e(I_,wFo),e(I_,gq),e(gq,AFo),e(I_,yFo),e(x,LFo),e(x,N_),e(N_,die),e(die,xFo),e(N_,$Fo),e(N_,hq),e(hq,kFo),e(N_,SFo),e(x,RFo),e(x,q_),e(q_,cie),e(cie,PFo),e(q_,BFo),e(q_,pq),e(pq,IFo),e(q_,NFo),e(x,qFo),e(x,j_),e(j_,fie),e(fie,jFo),e(j_,DFo),e(j_,_q),e(_q,GFo),e(j_,OFo),e(x,VFo),e(x,D_),e(D_,mie),e(mie,XFo),e(D_,zFo),e(D_,uq),e(uq,WFo),e(D_,QFo),e(x,HFo),e(x,G_),e(G_,gie),e(gie,UFo),e(G_,JFo),e(G_,bq),e(bq,YFo),e(G_,KFo),e(x,ZFo),e(x,O_),e(O_,hie),e(hie,eTo),e(O_,oTo),e(O_,vq),e(vq,rTo),e(O_,tTo),e(x,aTo),e(x,V_),e(V_,pie),e(pie,nTo),e(V_,sTo),e(V_,Fq),e(Fq,lTo),e(V_,iTo),e(x,dTo),e(x,X_),e(X_,_ie),e(_ie,cTo),e(X_,fTo),e(X_,Tq),e(Tq,mTo),e(X_,gTo),e(x,hTo),e(x,z_),e(z_,uie),e(uie,pTo),e(z_,_To),e(z_,Mq),e(Mq,uTo),e(z_,bTo),e(x,vTo),e(x,W_),e(W_,bie),e(bie,FTo),e(W_,TTo),e(W_,Eq),e(Eq,MTo),e(W_,ETo),e(x,CTo),e(x,Q_),e(Q_,vie),e(vie,wTo),e(Q_,ATo),e(Q_,Cq),e(Cq,yTo),e(Q_,LTo),e(x,xTo),e(x,H_),e(H_,Fie),e(Fie,$To),e(H_,kTo),e(H_,wq),e(wq,STo),e(H_,RTo),e(x,PTo),e(x,U_),e(U_,Tie),e(Tie,BTo),e(U_,ITo),e(U_,Aq),e(Aq,NTo),e(U_,qTo),e(x,jTo),e(x,J_),e(J_,Mie),e(Mie,DTo),e(J_,GTo),e(J_,yq),e(yq,OTo),e(J_,VTo),e(x,XTo),e(x,Y_),e(Y_,Eie),e(Eie,zTo),e(Y_,WTo),e(Y_,Lq),e(Lq,QTo),e(Y_,HTo),e(x,UTo),e(x,K_),e(K_,Cie),e(Cie,JTo),e(K_,YTo),e(K_,xq),e(xq,KTo),e(K_,ZTo),e(x,e7o),e(x,Z_),e(Z_,wie),e(wie,o7o),e(Z_,r7o),e(Z_,$q),e($q,t7o),e(Z_,a7o),e(x,n7o),e(x,eu),e(eu,Aie),e(Aie,s7o),e(eu,l7o),e(eu,kq),e(kq,i7o),e(eu,d7o),e(x,c7o),e(x,ou),e(ou,yie),e(yie,f7o),e(ou,m7o),e(ou,Sq),e(Sq,g7o),e(ou,h7o),e(x,p7o),e(x,ru),e(ru,Lie),e(Lie,_7o),e(ru,u7o),e(ru,Rq),e(Rq,b7o),e(ru,v7o),e(x,F7o),e(x,tu),e(tu,xie),e(xie,T7o),e(tu,M7o),e(tu,Pq),e(Pq,E7o),e(tu,C7o),e(Je,w7o),e(Je,au),e(au,A7o),e(au,$ie),e($ie,y7o),e(au,L7o),e(au,kie),e(kie,x7o),e(Je,$7o),M(nu,Je,null),b(f,Rqe,u),b(f,Li,u),e(Li,su),e(su,Sie),M(dy,Sie,null),e(Li,k7o),e(Li,Rie),e(Rie,S7o),b(f,Pqe,u),b(f,xo,u),M(cy,xo,null),e(xo,R7o),e(xo,xi),e(xi,P7o),e(xi,Bq),e(Bq,B7o),e(xi,I7o),e(xi,Iq),e(Iq,N7o),e(xi,q7o),e(xo,j7o),e(xo,fy),e(fy,D7o),e(fy,Pie),e(Pie,G7o),e(fy,O7o),e(xo,V7o),e(xo,at),M(my,at,null),e(at,X7o),e(at,Bie),e(Bie,z7o),e(at,W7o),e(at,$i),e($i,Q7o),e($i,Iie),e(Iie,H7o),e($i,U7o),e($i,Nq),e(Nq,J7o),e($i,Y7o),e(at,K7o),M(lu,at,null),e(xo,Z7o),e(xo,Ye),M(gy,Ye,null),e(Ye,eMo),e(Ye,Nie),e(Nie,oMo),e(Ye,rMo),e(Ye,xa),e(xa,tMo),e(xa,qie),e(qie,aMo),e(xa,nMo),e(xa,jie),e(jie,sMo),e(xa,lMo),e(xa,Die),e(Die,iMo),e(xa,dMo),e(Ye,cMo),e(Ye,G),e(G,iu),e(iu,Gie),e(Gie,fMo),e(iu,mMo),e(iu,qq),e(qq,gMo),e(iu,hMo),e(G,pMo),e(G,du),e(du,Oie),e(Oie,_Mo),e(du,uMo),e(du,jq),e(jq,bMo),e(du,vMo),e(G,FMo),e(G,cu),e(cu,Vie),e(Vie,TMo),e(cu,MMo),e(cu,Dq),e(Dq,EMo),e(cu,CMo),e(G,wMo),e(G,fu),e(fu,Xie),e(Xie,AMo),e(fu,yMo),e(fu,Gq),e(Gq,LMo),e(fu,xMo),e(G,$Mo),e(G,mu),e(mu,zie),e(zie,kMo),e(mu,SMo),e(mu,Oq),e(Oq,RMo),e(mu,PMo),e(G,BMo),e(G,gu),e(gu,Wie),e(Wie,IMo),e(gu,NMo),e(gu,Vq),e(Vq,qMo),e(gu,jMo),e(G,DMo),e(G,hu),e(hu,Qie),e(Qie,GMo),e(hu,OMo),e(hu,Xq),e(Xq,VMo),e(hu,XMo),e(G,zMo),e(G,pu),e(pu,Hie),e(Hie,WMo),e(pu,QMo),e(pu,zq),e(zq,HMo),e(pu,UMo),e(G,JMo),e(G,_u),e(_u,Uie),e(Uie,YMo),e(_u,KMo),e(_u,Wq),e(Wq,ZMo),e(_u,e4o),e(G,o4o),e(G,uu),e(uu,Jie),e(Jie,r4o),e(uu,t4o),e(uu,Qq),e(Qq,a4o),e(uu,n4o),e(G,s4o),e(G,bu),e(bu,Yie),e(Yie,l4o),e(bu,i4o),e(bu,Hq),e(Hq,d4o),e(bu,c4o),e(G,f4o),e(G,vu),e(vu,Kie),e(Kie,m4o),e(vu,g4o),e(vu,Uq),e(Uq,h4o),e(vu,p4o),e(G,_4o),e(G,Fu),e(Fu,Zie),e(Zie,u4o),e(Fu,b4o),e(Fu,Jq),e(Jq,v4o),e(Fu,F4o),e(G,T4o),e(G,Tu),e(Tu,ede),e(ede,M4o),e(Tu,E4o),e(Tu,Yq),e(Yq,C4o),e(Tu,w4o),e(G,A4o),e(G,Mu),e(Mu,ode),e(ode,y4o),e(Mu,L4o),e(Mu,Kq),e(Kq,x4o),e(Mu,$4o),e(G,k4o),e(G,Eu),e(Eu,rde),e(rde,S4o),e(Eu,R4o),e(Eu,Zq),e(Zq,P4o),e(Eu,B4o),e(G,I4o),e(G,Cu),e(Cu,tde),e(tde,N4o),e(Cu,q4o),e(Cu,ej),e(ej,j4o),e(Cu,D4o),e(G,G4o),e(G,wu),e(wu,ade),e(ade,O4o),e(wu,V4o),e(wu,oj),e(oj,X4o),e(wu,z4o),e(G,W4o),e(G,Au),e(Au,nde),e(nde,Q4o),e(Au,H4o),e(Au,rj),e(rj,U4o),e(Au,J4o),e(G,Y4o),e(G,yu),e(yu,sde),e(sde,K4o),e(yu,Z4o),e(yu,tj),e(tj,eEo),e(yu,oEo),e(G,rEo),e(G,Lu),e(Lu,lde),e(lde,tEo),e(Lu,aEo),e(Lu,aj),e(aj,nEo),e(Lu,sEo),e(G,lEo),e(G,xu),e(xu,ide),e(ide,iEo),e(xu,dEo),e(xu,nj),e(nj,cEo),e(xu,fEo),e(G,mEo),e(G,$u),e($u,dde),e(dde,gEo),e($u,hEo),e($u,sj),e(sj,pEo),e($u,_Eo),e(G,uEo),e(G,ku),e(ku,cde),e(cde,bEo),e(ku,vEo),e(ku,lj),e(lj,FEo),e(ku,TEo),e(G,MEo),e(G,Su),e(Su,fde),e(fde,EEo),e(Su,CEo),e(Su,ij),e(ij,wEo),e(Su,AEo),e(G,yEo),e(G,Ru),e(Ru,mde),e(mde,LEo),e(Ru,xEo),e(Ru,dj),e(dj,$Eo),e(Ru,kEo),e(G,SEo),e(G,Pu),e(Pu,gde),e(gde,REo),e(Pu,PEo),e(Pu,cj),e(cj,BEo),e(Pu,IEo),e(G,NEo),e(G,Bu),e(Bu,hde),e(hde,qEo),e(Bu,jEo),e(Bu,fj),e(fj,DEo),e(Bu,GEo),e(G,OEo),e(G,Iu),e(Iu,pde),e(pde,VEo),e(Iu,XEo),e(Iu,mj),e(mj,zEo),e(Iu,WEo),e(G,QEo),e(G,Nu),e(Nu,_de),e(_de,HEo),e(Nu,UEo),e(Nu,gj),e(gj,JEo),e(Nu,YEo),e(G,KEo),e(G,qu),e(qu,ude),e(ude,ZEo),e(qu,eCo),e(qu,hj),e(hj,oCo),e(qu,rCo),e(G,tCo),e(G,ju),e(ju,bde),e(bde,aCo),e(ju,nCo),e(ju,pj),e(pj,sCo),e(ju,lCo),e(G,iCo),e(G,Du),e(Du,vde),e(vde,dCo),e(Du,cCo),e(Du,_j),e(_j,fCo),e(Du,mCo),e(G,gCo),e(G,Gu),e(Gu,Fde),e(Fde,hCo),e(Gu,pCo),e(Gu,uj),e(uj,_Co),e(Gu,uCo),e(G,bCo),e(G,Ou),e(Ou,Tde),e(Tde,vCo),e(Ou,FCo),e(Ou,bj),e(bj,TCo),e(Ou,MCo),e(G,ECo),e(G,Vu),e(Vu,Mde),e(Mde,CCo),e(Vu,wCo),e(Vu,vj),e(vj,ACo),e(Vu,yCo),e(G,LCo),e(G,Xu),e(Xu,Ede),e(Ede,xCo),e(Xu,$Co),e(Xu,Fj),e(Fj,kCo),e(Xu,SCo),e(G,RCo),e(G,zu),e(zu,Cde),e(Cde,PCo),e(zu,BCo),e(zu,Tj),e(Tj,ICo),e(zu,NCo),e(G,qCo),e(G,Wu),e(Wu,wde),e(wde,jCo),e(Wu,DCo),e(Wu,Mj),e(Mj,GCo),e(Wu,OCo),e(G,VCo),e(G,Qu),e(Qu,Ade),e(Ade,XCo),e(Qu,zCo),e(Qu,Ej),e(Ej,WCo),e(Qu,QCo),e(G,HCo),e(G,Hu),e(Hu,yde),e(yde,UCo),e(Hu,JCo),e(Hu,Cj),e(Cj,YCo),e(Hu,KCo),e(G,ZCo),e(G,Uu),e(Uu,Lde),e(Lde,e5o),e(Uu,o5o),e(Uu,wj),e(wj,r5o),e(Uu,t5o),e(G,a5o),e(G,Ju),e(Ju,xde),e(xde,n5o),e(Ju,s5o),e(Ju,Aj),e(Aj,l5o),e(Ju,i5o),e(Ye,d5o),e(Ye,Yu),e(Yu,c5o),e(Yu,$de),e($de,f5o),e(Yu,m5o),e(Yu,kde),e(kde,g5o),e(Ye,h5o),M(Ku,Ye,null),b(f,Bqe,u),b(f,ki,u),e(ki,Zu),e(Zu,Sde),M(hy,Sde,null),e(ki,p5o),e(ki,Rde),e(Rde,_5o),b(f,Iqe,u),b(f,$o,u),M(py,$o,null),e($o,u5o),e($o,Si),e(Si,b5o),e(Si,yj),e(yj,v5o),e(Si,F5o),e(Si,Lj),e(Lj,T5o),e(Si,M5o),e($o,E5o),e($o,_y),e(_y,C5o),e(_y,Pde),e(Pde,w5o),e(_y,A5o),e($o,y5o),e($o,nt),M(uy,nt,null),e(nt,L5o),e(nt,Bde),e(Bde,x5o),e(nt,$5o),e(nt,Ri),e(Ri,k5o),e(Ri,Ide),e(Ide,S5o),e(Ri,R5o),e(Ri,xj),e(xj,P5o),e(Ri,B5o),e(nt,I5o),M(e2,nt,null),e($o,N5o),e($o,Ke),M(by,Ke,null),e(Ke,q5o),e(Ke,Nde),e(Nde,j5o),e(Ke,D5o),e(Ke,$a),e($a,G5o),e($a,qde),e(qde,O5o),e($a,V5o),e($a,jde),e(jde,X5o),e($a,z5o),e($a,Dde),e(Dde,W5o),e($a,Q5o),e(Ke,H5o),e(Ke,z),e(z,o2),e(o2,Gde),e(Gde,U5o),e(o2,J5o),e(o2,$j),e($j,Y5o),e(o2,K5o),e(z,Z5o),e(z,r2),e(r2,Ode),e(Ode,e3o),e(r2,o3o),e(r2,kj),e(kj,r3o),e(r2,t3o),e(z,a3o),e(z,t2),e(t2,Vde),e(Vde,n3o),e(t2,s3o),e(t2,Sj),e(Sj,l3o),e(t2,i3o),e(z,d3o),e(z,a2),e(a2,Xde),e(Xde,c3o),e(a2,f3o),e(a2,Rj),e(Rj,m3o),e(a2,g3o),e(z,h3o),e(z,n2),e(n2,zde),e(zde,p3o),e(n2,_3o),e(n2,Pj),e(Pj,u3o),e(n2,b3o),e(z,v3o),e(z,s2),e(s2,Wde),e(Wde,F3o),e(s2,T3o),e(s2,Bj),e(Bj,M3o),e(s2,E3o),e(z,C3o),e(z,l2),e(l2,Qde),e(Qde,w3o),e(l2,A3o),e(l2,Ij),e(Ij,y3o),e(l2,L3o),e(z,x3o),e(z,i2),e(i2,Hde),e(Hde,$3o),e(i2,k3o),e(i2,Nj),e(Nj,S3o),e(i2,R3o),e(z,P3o),e(z,d2),e(d2,Ude),e(Ude,B3o),e(d2,I3o),e(d2,qj),e(qj,N3o),e(d2,q3o),e(z,j3o),e(z,c2),e(c2,Jde),e(Jde,D3o),e(c2,G3o),e(c2,jj),e(jj,O3o),e(c2,V3o),e(z,X3o),e(z,f2),e(f2,Yde),e(Yde,z3o),e(f2,W3o),e(f2,Dj),e(Dj,Q3o),e(f2,H3o),e(z,U3o),e(z,m2),e(m2,Kde),e(Kde,J3o),e(m2,Y3o),e(m2,Gj),e(Gj,K3o),e(m2,Z3o),e(z,ewo),e(z,g2),e(g2,Zde),e(Zde,owo),e(g2,rwo),e(g2,Oj),e(Oj,two),e(g2,awo),e(z,nwo),e(z,h2),e(h2,ece),e(ece,swo),e(h2,lwo),e(h2,Vj),e(Vj,iwo),e(h2,dwo),e(z,cwo),e(z,p2),e(p2,oce),e(oce,fwo),e(p2,mwo),e(p2,Xj),e(Xj,gwo),e(p2,hwo),e(z,pwo),e(z,_2),e(_2,rce),e(rce,_wo),e(_2,uwo),e(_2,zj),e(zj,bwo),e(_2,vwo),e(z,Fwo),e(z,u2),e(u2,tce),e(tce,Two),e(u2,Mwo),e(u2,Wj),e(Wj,Ewo),e(u2,Cwo),e(z,wwo),e(z,b2),e(b2,ace),e(ace,Awo),e(b2,ywo),e(b2,Qj),e(Qj,Lwo),e(b2,xwo),e(z,$wo),e(z,v2),e(v2,nce),e(nce,kwo),e(v2,Swo),e(v2,Hj),e(Hj,Rwo),e(v2,Pwo),e(z,Bwo),e(z,F2),e(F2,sce),e(sce,Iwo),e(F2,Nwo),e(F2,Uj),e(Uj,qwo),e(F2,jwo),e(z,Dwo),e(z,T2),e(T2,lce),e(lce,Gwo),e(T2,Owo),e(T2,Jj),e(Jj,Vwo),e(T2,Xwo),e(z,zwo),e(z,M2),e(M2,ice),e(ice,Wwo),e(M2,Qwo),e(M2,Yj),e(Yj,Hwo),e(M2,Uwo),e(z,Jwo),e(z,E2),e(E2,dce),e(dce,Ywo),e(E2,Kwo),e(E2,Kj),e(Kj,Zwo),e(E2,e6o),e(z,o6o),e(z,C2),e(C2,cce),e(cce,r6o),e(C2,t6o),e(C2,Zj),e(Zj,a6o),e(C2,n6o),e(z,s6o),e(z,w2),e(w2,fce),e(fce,l6o),e(w2,i6o),e(w2,eD),e(eD,d6o),e(w2,c6o),e(z,f6o),e(z,A2),e(A2,mce),e(mce,m6o),e(A2,g6o),e(A2,oD),e(oD,h6o),e(A2,p6o),e(z,_6o),e(z,y2),e(y2,gce),e(gce,u6o),e(y2,b6o),e(y2,rD),e(rD,v6o),e(y2,F6o),e(z,T6o),e(z,L2),e(L2,hce),e(hce,M6o),e(L2,E6o),e(L2,tD),e(tD,C6o),e(L2,w6o),e(z,A6o),e(z,x2),e(x2,pce),e(pce,y6o),e(x2,L6o),e(x2,aD),e(aD,x6o),e(x2,$6o),e(z,k6o),e(z,$2),e($2,_ce),e(_ce,S6o),e($2,R6o),e($2,nD),e(nD,P6o),e($2,B6o),e(z,I6o),e(z,k2),e(k2,uce),e(uce,N6o),e(k2,q6o),e(k2,sD),e(sD,j6o),e(k2,D6o),e(z,G6o),e(z,S2),e(S2,bce),e(bce,O6o),e(S2,V6o),e(S2,lD),e(lD,X6o),e(S2,z6o),e(z,W6o),e(z,R2),e(R2,vce),e(vce,Q6o),e(R2,H6o),e(R2,iD),e(iD,U6o),e(R2,J6o),e(z,Y6o),e(z,P2),e(P2,Fce),e(Fce,K6o),e(P2,Z6o),e(P2,dD),e(dD,eAo),e(P2,oAo),e(z,rAo),e(z,B2),e(B2,Tce),e(Tce,tAo),e(B2,aAo),e(B2,cD),e(cD,nAo),e(B2,sAo),e(z,lAo),e(z,I2),e(I2,Mce),e(Mce,iAo),e(I2,dAo),e(I2,fD),e(fD,cAo),e(I2,fAo),e(z,mAo),e(z,N2),e(N2,Ece),e(Ece,gAo),e(N2,hAo),e(N2,mD),e(mD,pAo),e(N2,_Ao),e(z,uAo),e(z,q2),e(q2,Cce),e(Cce,bAo),e(q2,vAo),e(q2,gD),e(gD,FAo),e(q2,TAo),e(Ke,MAo),e(Ke,j2),e(j2,EAo),e(j2,wce),e(wce,CAo),e(j2,wAo),e(j2,Ace),e(Ace,AAo),e(Ke,yAo),M(D2,Ke,null),b(f,Nqe,u),b(f,Pi,u),e(Pi,G2),e(G2,yce),M(vy,yce,null),e(Pi,LAo),e(Pi,Lce),e(Lce,xAo),b(f,qqe,u),b(f,ko,u),M(Fy,ko,null),e(ko,$Ao),e(ko,Bi),e(Bi,kAo),e(Bi,hD),e(hD,SAo),e(Bi,RAo),e(Bi,pD),e(pD,PAo),e(Bi,BAo),e(ko,IAo),e(ko,Ty),e(Ty,NAo),e(Ty,xce),e(xce,qAo),e(Ty,jAo),e(ko,DAo),e(ko,st),M(My,st,null),e(st,GAo),e(st,$ce),e($ce,OAo),e(st,VAo),e(st,Ii),e(Ii,XAo),e(Ii,kce),e(kce,zAo),e(Ii,WAo),e(Ii,_D),e(_D,QAo),e(Ii,HAo),e(st,UAo),M(O2,st,null),e(ko,JAo),e(ko,Ze),M(Ey,Ze,null),e(Ze,YAo),e(Ze,Sce),e(Sce,KAo),e(Ze,ZAo),e(Ze,ka),e(ka,eyo),e(ka,Rce),e(Rce,oyo),e(ka,ryo),e(ka,Pce),e(Pce,tyo),e(ka,ayo),e(ka,Bce),e(Bce,nyo),e(ka,syo),e(Ze,lyo),e(Ze,Q),e(Q,V2),e(V2,Ice),e(Ice,iyo),e(V2,dyo),e(V2,uD),e(uD,cyo),e(V2,fyo),e(Q,myo),e(Q,X2),e(X2,Nce),e(Nce,gyo),e(X2,hyo),e(X2,bD),e(bD,pyo),e(X2,_yo),e(Q,uyo),e(Q,z2),e(z2,qce),e(qce,byo),e(z2,vyo),e(z2,vD),e(vD,Fyo),e(z2,Tyo),e(Q,Myo),e(Q,W2),e(W2,jce),e(jce,Eyo),e(W2,Cyo),e(W2,FD),e(FD,wyo),e(W2,Ayo),e(Q,yyo),e(Q,Q2),e(Q2,Dce),e(Dce,Lyo),e(Q2,xyo),e(Q2,TD),e(TD,$yo),e(Q2,kyo),e(Q,Syo),e(Q,H2),e(H2,Gce),e(Gce,Ryo),e(H2,Pyo),e(H2,MD),e(MD,Byo),e(H2,Iyo),e(Q,Nyo),e(Q,U2),e(U2,Oce),e(Oce,qyo),e(U2,jyo),e(U2,ED),e(ED,Dyo),e(U2,Gyo),e(Q,Oyo),e(Q,J2),e(J2,Vce),e(Vce,Vyo),e(J2,Xyo),e(J2,CD),e(CD,zyo),e(J2,Wyo),e(Q,Qyo),e(Q,Y2),e(Y2,Xce),e(Xce,Hyo),e(Y2,Uyo),e(Y2,wD),e(wD,Jyo),e(Y2,Yyo),e(Q,Kyo),e(Q,K2),e(K2,zce),e(zce,Zyo),e(K2,eLo),e(K2,AD),e(AD,oLo),e(K2,rLo),e(Q,tLo),e(Q,Z2),e(Z2,Wce),e(Wce,aLo),e(Z2,nLo),e(Z2,yD),e(yD,sLo),e(Z2,lLo),e(Q,iLo),e(Q,e1),e(e1,Qce),e(Qce,dLo),e(e1,cLo),e(e1,LD),e(LD,fLo),e(e1,mLo),e(Q,gLo),e(Q,o1),e(o1,Hce),e(Hce,hLo),e(o1,pLo),e(o1,xD),e(xD,_Lo),e(o1,uLo),e(Q,bLo),e(Q,r1),e(r1,Uce),e(Uce,vLo),e(r1,FLo),e(r1,$D),e($D,TLo),e(r1,MLo),e(Q,ELo),e(Q,t1),e(t1,Jce),e(Jce,CLo),e(t1,wLo),e(t1,kD),e(kD,ALo),e(t1,yLo),e(Q,LLo),e(Q,a1),e(a1,Yce),e(Yce,xLo),e(a1,$Lo),e(a1,SD),e(SD,kLo),e(a1,SLo),e(Q,RLo),e(Q,n1),e(n1,Kce),e(Kce,PLo),e(n1,BLo),e(n1,RD),e(RD,ILo),e(n1,NLo),e(Q,qLo),e(Q,s1),e(s1,Zce),e(Zce,jLo),e(s1,DLo),e(s1,PD),e(PD,GLo),e(s1,OLo),e(Q,VLo),e(Q,l1),e(l1,efe),e(efe,XLo),e(l1,zLo),e(l1,BD),e(BD,WLo),e(l1,QLo),e(Q,HLo),e(Q,i1),e(i1,ofe),e(ofe,ULo),e(i1,JLo),e(i1,ID),e(ID,YLo),e(i1,KLo),e(Q,ZLo),e(Q,d1),e(d1,rfe),e(rfe,e8o),e(d1,o8o),e(d1,ND),e(ND,r8o),e(d1,t8o),e(Q,a8o),e(Q,c1),e(c1,tfe),e(tfe,n8o),e(c1,s8o),e(c1,qD),e(qD,l8o),e(c1,i8o),e(Q,d8o),e(Q,f1),e(f1,afe),e(afe,c8o),e(f1,f8o),e(f1,jD),e(jD,m8o),e(f1,g8o),e(Q,h8o),e(Q,m1),e(m1,nfe),e(nfe,p8o),e(m1,_8o),e(m1,DD),e(DD,u8o),e(m1,b8o),e(Q,v8o),e(Q,g1),e(g1,sfe),e(sfe,F8o),e(g1,T8o),e(g1,GD),e(GD,M8o),e(g1,E8o),e(Q,C8o),e(Q,h1),e(h1,lfe),e(lfe,w8o),e(h1,A8o),e(h1,OD),e(OD,y8o),e(h1,L8o),e(Q,x8o),e(Q,p1),e(p1,ife),e(ife,$8o),e(p1,k8o),e(p1,VD),e(VD,S8o),e(p1,R8o),e(Q,P8o),e(Q,_1),e(_1,dfe),e(dfe,B8o),e(_1,I8o),e(_1,XD),e(XD,N8o),e(_1,q8o),e(Q,j8o),e(Q,u1),e(u1,cfe),e(cfe,D8o),e(u1,G8o),e(u1,zD),e(zD,O8o),e(u1,V8o),e(Q,X8o),e(Q,b1),e(b1,ffe),e(ffe,z8o),e(b1,W8o),e(b1,WD),e(WD,Q8o),e(b1,H8o),e(Q,U8o),e(Q,v1),e(v1,mfe),e(mfe,J8o),e(v1,Y8o),e(v1,gfe),e(gfe,K8o),e(v1,Z8o),e(Q,e9o),e(Q,F1),e(F1,hfe),e(hfe,o9o),e(F1,r9o),e(F1,QD),e(QD,t9o),e(F1,a9o),e(Q,n9o),e(Q,T1),e(T1,pfe),e(pfe,s9o),e(T1,l9o),e(T1,HD),e(HD,i9o),e(T1,d9o),e(Q,c9o),e(Q,M1),e(M1,_fe),e(_fe,f9o),e(M1,m9o),e(M1,UD),e(UD,g9o),e(M1,h9o),e(Q,p9o),e(Q,E1),e(E1,ufe),e(ufe,_9o),e(E1,u9o),e(E1,JD),e(JD,b9o),e(E1,v9o),e(Ze,F9o),e(Ze,C1),e(C1,T9o),e(C1,bfe),e(bfe,M9o),e(C1,E9o),e(C1,vfe),e(vfe,C9o),e(Ze,w9o),M(w1,Ze,null),b(f,jqe,u),b(f,Ni,u),e(Ni,A1),e(A1,Ffe),M(Cy,Ffe,null),e(Ni,A9o),e(Ni,Tfe),e(Tfe,y9o),b(f,Dqe,u),b(f,So,u),M(wy,So,null),e(So,L9o),e(So,qi),e(qi,x9o),e(qi,YD),e(YD,$9o),e(qi,k9o),e(qi,KD),e(KD,S9o),e(qi,R9o),e(So,P9o),e(So,Ay),e(Ay,B9o),e(Ay,Mfe),e(Mfe,I9o),e(Ay,N9o),e(So,q9o),e(So,lt),M(yy,lt,null),e(lt,j9o),e(lt,Efe),e(Efe,D9o),e(lt,G9o),e(lt,ji),e(ji,O9o),e(ji,Cfe),e(Cfe,V9o),e(ji,X9o),e(ji,ZD),e(ZD,z9o),e(ji,W9o),e(lt,Q9o),M(y1,lt,null),e(So,H9o),e(So,eo),M(Ly,eo,null),e(eo,U9o),e(eo,wfe),e(wfe,J9o),e(eo,Y9o),e(eo,Sa),e(Sa,K9o),e(Sa,Afe),e(Afe,Z9o),e(Sa,exo),e(Sa,yfe),e(yfe,oxo),e(Sa,rxo),e(Sa,Lfe),e(Lfe,txo),e(Sa,axo),e(eo,nxo),e(eo,_e),e(_e,L1),e(L1,xfe),e(xfe,sxo),e(L1,lxo),e(L1,eG),e(eG,ixo),e(L1,dxo),e(_e,cxo),e(_e,x1),e(x1,$fe),e($fe,fxo),e(x1,mxo),e(x1,oG),e(oG,gxo),e(x1,hxo),e(_e,pxo),e(_e,$1),e($1,kfe),e(kfe,_xo),e($1,uxo),e($1,rG),e(rG,bxo),e($1,vxo),e(_e,Fxo),e(_e,k1),e(k1,Sfe),e(Sfe,Txo),e(k1,Mxo),e(k1,tG),e(tG,Exo),e(k1,Cxo),e(_e,wxo),e(_e,S1),e(S1,Rfe),e(Rfe,Axo),e(S1,yxo),e(S1,aG),e(aG,Lxo),e(S1,xxo),e(_e,$xo),e(_e,R1),e(R1,Pfe),e(Pfe,kxo),e(R1,Sxo),e(R1,nG),e(nG,Rxo),e(R1,Pxo),e(_e,Bxo),e(_e,P1),e(P1,Bfe),e(Bfe,Ixo),e(P1,Nxo),e(P1,sG),e(sG,qxo),e(P1,jxo),e(_e,Dxo),e(_e,B1),e(B1,Ife),e(Ife,Gxo),e(B1,Oxo),e(B1,lG),e(lG,Vxo),e(B1,Xxo),e(_e,zxo),e(_e,I1),e(I1,Nfe),e(Nfe,Wxo),e(I1,Qxo),e(I1,iG),e(iG,Hxo),e(I1,Uxo),e(_e,Jxo),e(_e,N1),e(N1,qfe),e(qfe,Yxo),e(N1,Kxo),e(N1,dG),e(dG,Zxo),e(N1,e$o),e(_e,o$o),e(_e,q1),e(q1,jfe),e(jfe,r$o),e(q1,t$o),e(q1,cG),e(cG,a$o),e(q1,n$o),e(_e,s$o),e(_e,j1),e(j1,Dfe),e(Dfe,l$o),e(j1,i$o),e(j1,fG),e(fG,d$o),e(j1,c$o),e(_e,f$o),e(_e,D1),e(D1,Gfe),e(Gfe,m$o),e(D1,g$o),e(D1,mG),e(mG,h$o),e(D1,p$o),e(_e,_$o),e(_e,G1),e(G1,Ofe),e(Ofe,u$o),e(G1,b$o),e(G1,gG),e(gG,v$o),e(G1,F$o),e(_e,T$o),e(_e,O1),e(O1,Vfe),e(Vfe,M$o),e(O1,E$o),e(O1,hG),e(hG,C$o),e(O1,w$o),e(_e,A$o),e(_e,V1),e(V1,Xfe),e(Xfe,y$o),e(V1,L$o),e(V1,pG),e(pG,x$o),e(V1,$$o),e(eo,k$o),e(eo,X1),e(X1,S$o),e(X1,zfe),e(zfe,R$o),e(X1,P$o),e(X1,Wfe),e(Wfe,B$o),e(eo,I$o),M(z1,eo,null),b(f,Gqe,u),b(f,Di,u),e(Di,W1),e(W1,Qfe),M(xy,Qfe,null),e(Di,N$o),e(Di,Hfe),e(Hfe,q$o),b(f,Oqe,u),b(f,Ro,u),M($y,Ro,null),e(Ro,j$o),e(Ro,Gi),e(Gi,D$o),e(Gi,_G),e(_G,G$o),e(Gi,O$o),e(Gi,uG),e(uG,V$o),e(Gi,X$o),e(Ro,z$o),e(Ro,ky),e(ky,W$o),e(ky,Ufe),e(Ufe,Q$o),e(ky,H$o),e(Ro,U$o),e(Ro,it),M(Sy,it,null),e(it,J$o),e(it,Jfe),e(Jfe,Y$o),e(it,K$o),e(it,Oi),e(Oi,Z$o),e(Oi,Yfe),e(Yfe,eko),e(Oi,oko),e(Oi,bG),e(bG,rko),e(Oi,tko),e(it,ako),M(Q1,it,null),e(Ro,nko),e(Ro,oo),M(Ry,oo,null),e(oo,sko),e(oo,Kfe),e(Kfe,lko),e(oo,iko),e(oo,Ra),e(Ra,dko),e(Ra,Zfe),e(Zfe,cko),e(Ra,fko),e(Ra,eme),e(eme,mko),e(Ra,gko),e(Ra,ome),e(ome,hko),e(Ra,pko),e(oo,_ko),e(oo,N),e(N,H1),e(H1,rme),e(rme,uko),e(H1,bko),e(H1,vG),e(vG,vko),e(H1,Fko),e(N,Tko),e(N,U1),e(U1,tme),e(tme,Mko),e(U1,Eko),e(U1,FG),e(FG,Cko),e(U1,wko),e(N,Ako),e(N,J1),e(J1,ame),e(ame,yko),e(J1,Lko),e(J1,TG),e(TG,xko),e(J1,$ko),e(N,kko),e(N,Y1),e(Y1,nme),e(nme,Sko),e(Y1,Rko),e(Y1,MG),e(MG,Pko),e(Y1,Bko),e(N,Iko),e(N,K1),e(K1,sme),e(sme,Nko),e(K1,qko),e(K1,EG),e(EG,jko),e(K1,Dko),e(N,Gko),e(N,Z1),e(Z1,lme),e(lme,Oko),e(Z1,Vko),e(Z1,CG),e(CG,Xko),e(Z1,zko),e(N,Wko),e(N,eb),e(eb,ime),e(ime,Qko),e(eb,Hko),e(eb,wG),e(wG,Uko),e(eb,Jko),e(N,Yko),e(N,ob),e(ob,dme),e(dme,Kko),e(ob,Zko),e(ob,AG),e(AG,eSo),e(ob,oSo),e(N,rSo),e(N,rb),e(rb,cme),e(cme,tSo),e(rb,aSo),e(rb,yG),e(yG,nSo),e(rb,sSo),e(N,lSo),e(N,tb),e(tb,fme),e(fme,iSo),e(tb,dSo),e(tb,LG),e(LG,cSo),e(tb,fSo),e(N,mSo),e(N,ab),e(ab,mme),e(mme,gSo),e(ab,hSo),e(ab,xG),e(xG,pSo),e(ab,_So),e(N,uSo),e(N,nb),e(nb,gme),e(gme,bSo),e(nb,vSo),e(nb,$G),e($G,FSo),e(nb,TSo),e(N,MSo),e(N,sb),e(sb,hme),e(hme,ESo),e(sb,CSo),e(sb,kG),e(kG,wSo),e(sb,ASo),e(N,ySo),e(N,lb),e(lb,pme),e(pme,LSo),e(lb,xSo),e(lb,SG),e(SG,$So),e(lb,kSo),e(N,SSo),e(N,ib),e(ib,_me),e(_me,RSo),e(ib,PSo),e(ib,RG),e(RG,BSo),e(ib,ISo),e(N,NSo),e(N,db),e(db,ume),e(ume,qSo),e(db,jSo),e(db,PG),e(PG,DSo),e(db,GSo),e(N,OSo),e(N,cb),e(cb,bme),e(bme,VSo),e(cb,XSo),e(cb,BG),e(BG,zSo),e(cb,WSo),e(N,QSo),e(N,fb),e(fb,vme),e(vme,HSo),e(fb,USo),e(fb,IG),e(IG,JSo),e(fb,YSo),e(N,KSo),e(N,mb),e(mb,Fme),e(Fme,ZSo),e(mb,eRo),e(mb,NG),e(NG,oRo),e(mb,rRo),e(N,tRo),e(N,gb),e(gb,Tme),e(Tme,aRo),e(gb,nRo),e(gb,qG),e(qG,sRo),e(gb,lRo),e(N,iRo),e(N,hb),e(hb,Mme),e(Mme,dRo),e(hb,cRo),e(hb,jG),e(jG,fRo),e(hb,mRo),e(N,gRo),e(N,pb),e(pb,Eme),e(Eme,hRo),e(pb,pRo),e(pb,DG),e(DG,_Ro),e(pb,uRo),e(N,bRo),e(N,_b),e(_b,Cme),e(Cme,vRo),e(_b,FRo),e(_b,GG),e(GG,TRo),e(_b,MRo),e(N,ERo),e(N,ub),e(ub,wme),e(wme,CRo),e(ub,wRo),e(ub,OG),e(OG,ARo),e(ub,yRo),e(N,LRo),e(N,bb),e(bb,Ame),e(Ame,xRo),e(bb,$Ro),e(bb,VG),e(VG,kRo),e(bb,SRo),e(N,RRo),e(N,vb),e(vb,yme),e(yme,PRo),e(vb,BRo),e(vb,XG),e(XG,IRo),e(vb,NRo),e(N,qRo),e(N,Fb),e(Fb,Lme),e(Lme,jRo),e(Fb,DRo),e(Fb,zG),e(zG,GRo),e(Fb,ORo),e(N,VRo),e(N,Tb),e(Tb,xme),e(xme,XRo),e(Tb,zRo),e(Tb,WG),e(WG,WRo),e(Tb,QRo),e(N,HRo),e(N,Mb),e(Mb,$me),e($me,URo),e(Mb,JRo),e(Mb,QG),e(QG,YRo),e(Mb,KRo),e(N,ZRo),e(N,Eb),e(Eb,kme),e(kme,ePo),e(Eb,oPo),e(Eb,HG),e(HG,rPo),e(Eb,tPo),e(N,aPo),e(N,Cb),e(Cb,Sme),e(Sme,nPo),e(Cb,sPo),e(Cb,UG),e(UG,lPo),e(Cb,iPo),e(N,dPo),e(N,wb),e(wb,Rme),e(Rme,cPo),e(wb,fPo),e(wb,JG),e(JG,mPo),e(wb,gPo),e(N,hPo),e(N,Ab),e(Ab,Pme),e(Pme,pPo),e(Ab,_Po),e(Ab,YG),e(YG,uPo),e(Ab,bPo),e(N,vPo),e(N,yb),e(yb,Bme),e(Bme,FPo),e(yb,TPo),e(yb,KG),e(KG,MPo),e(yb,EPo),e(N,CPo),e(N,Lb),e(Lb,Ime),e(Ime,wPo),e(Lb,APo),e(Lb,ZG),e(ZG,yPo),e(Lb,LPo),e(N,xPo),e(N,xb),e(xb,Nme),e(Nme,$Po),e(xb,kPo),e(xb,eO),e(eO,SPo),e(xb,RPo),e(N,PPo),e(N,$b),e($b,qme),e(qme,BPo),e($b,IPo),e($b,oO),e(oO,NPo),e($b,qPo),e(N,jPo),e(N,kb),e(kb,jme),e(jme,DPo),e(kb,GPo),e(kb,rO),e(rO,OPo),e(kb,VPo),e(N,XPo),e(N,Sb),e(Sb,Dme),e(Dme,zPo),e(Sb,WPo),e(Sb,tO),e(tO,QPo),e(Sb,HPo),e(N,UPo),e(N,Rb),e(Rb,Gme),e(Gme,JPo),e(Rb,YPo),e(Rb,aO),e(aO,KPo),e(Rb,ZPo),e(N,eBo),e(N,Pb),e(Pb,Ome),e(Ome,oBo),e(Pb,rBo),e(Pb,nO),e(nO,tBo),e(Pb,aBo),e(N,nBo),e(N,Bb),e(Bb,Vme),e(Vme,sBo),e(Bb,lBo),e(Bb,sO),e(sO,iBo),e(Bb,dBo),e(N,cBo),e(N,Ib),e(Ib,Xme),e(Xme,fBo),e(Ib,mBo),e(Ib,lO),e(lO,gBo),e(Ib,hBo),e(N,pBo),e(N,Nb),e(Nb,zme),e(zme,_Bo),e(Nb,uBo),e(Nb,iO),e(iO,bBo),e(Nb,vBo),e(N,FBo),e(N,qb),e(qb,Wme),e(Wme,TBo),e(qb,MBo),e(qb,dO),e(dO,EBo),e(qb,CBo),e(N,wBo),e(N,jb),e(jb,Qme),e(Qme,ABo),e(jb,yBo),e(jb,cO),e(cO,LBo),e(jb,xBo),e(N,$Bo),e(N,Db),e(Db,Hme),e(Hme,kBo),e(Db,SBo),e(Db,fO),e(fO,RBo),e(Db,PBo),e(oo,BBo),e(oo,Gb),e(Gb,IBo),e(Gb,Ume),e(Ume,NBo),e(Gb,qBo),e(Gb,Jme),e(Jme,jBo),e(oo,DBo),M(Ob,oo,null),b(f,Vqe,u),b(f,Vi,u),e(Vi,Vb),e(Vb,Yme),M(Py,Yme,null),e(Vi,GBo),e(Vi,Kme),e(Kme,OBo),b(f,Xqe,u),b(f,Po,u),M(By,Po,null),e(Po,VBo),e(Po,Xi),e(Xi,XBo),e(Xi,mO),e(mO,zBo),e(Xi,WBo),e(Xi,gO),e(gO,QBo),e(Xi,HBo),e(Po,UBo),e(Po,Iy),e(Iy,JBo),e(Iy,Zme),e(Zme,YBo),e(Iy,KBo),e(Po,ZBo),e(Po,dt),M(Ny,dt,null),e(dt,eIo),e(dt,ege),e(ege,oIo),e(dt,rIo),e(dt,zi),e(zi,tIo),e(zi,oge),e(oge,aIo),e(zi,nIo),e(zi,hO),e(hO,sIo),e(zi,lIo),e(dt,iIo),M(Xb,dt,null),e(Po,dIo),e(Po,ro),M(qy,ro,null),e(ro,cIo),e(ro,rge),e(rge,fIo),e(ro,mIo),e(ro,Pa),e(Pa,gIo),e(Pa,tge),e(tge,hIo),e(Pa,pIo),e(Pa,age),e(age,_Io),e(Pa,uIo),e(Pa,nge),e(nge,bIo),e(Pa,vIo),e(ro,FIo),e(ro,K),e(K,zb),e(zb,sge),e(sge,TIo),e(zb,MIo),e(zb,pO),e(pO,EIo),e(zb,CIo),e(K,wIo),e(K,Wb),e(Wb,lge),e(lge,AIo),e(Wb,yIo),e(Wb,_O),e(_O,LIo),e(Wb,xIo),e(K,$Io),e(K,Qb),e(Qb,ige),e(ige,kIo),e(Qb,SIo),e(Qb,uO),e(uO,RIo),e(Qb,PIo),e(K,BIo),e(K,Hb),e(Hb,dge),e(dge,IIo),e(Hb,NIo),e(Hb,bO),e(bO,qIo),e(Hb,jIo),e(K,DIo),e(K,Ub),e(Ub,cge),e(cge,GIo),e(Ub,OIo),e(Ub,vO),e(vO,VIo),e(Ub,XIo),e(K,zIo),e(K,Jb),e(Jb,fge),e(fge,WIo),e(Jb,QIo),e(Jb,FO),e(FO,HIo),e(Jb,UIo),e(K,JIo),e(K,Yb),e(Yb,mge),e(mge,YIo),e(Yb,KIo),e(Yb,TO),e(TO,ZIo),e(Yb,eNo),e(K,oNo),e(K,Kb),e(Kb,gge),e(gge,rNo),e(Kb,tNo),e(Kb,MO),e(MO,aNo),e(Kb,nNo),e(K,sNo),e(K,Zb),e(Zb,hge),e(hge,lNo),e(Zb,iNo),e(Zb,EO),e(EO,dNo),e(Zb,cNo),e(K,fNo),e(K,ev),e(ev,pge),e(pge,mNo),e(ev,gNo),e(ev,CO),e(CO,hNo),e(ev,pNo),e(K,_No),e(K,ov),e(ov,_ge),e(_ge,uNo),e(ov,bNo),e(ov,wO),e(wO,vNo),e(ov,FNo),e(K,TNo),e(K,rv),e(rv,uge),e(uge,MNo),e(rv,ENo),e(rv,AO),e(AO,CNo),e(rv,wNo),e(K,ANo),e(K,tv),e(tv,bge),e(bge,yNo),e(tv,LNo),e(tv,yO),e(yO,xNo),e(tv,$No),e(K,kNo),e(K,av),e(av,vge),e(vge,SNo),e(av,RNo),e(av,LO),e(LO,PNo),e(av,BNo),e(K,INo),e(K,nv),e(nv,Fge),e(Fge,NNo),e(nv,qNo),e(nv,xO),e(xO,jNo),e(nv,DNo),e(K,GNo),e(K,sv),e(sv,Tge),e(Tge,ONo),e(sv,VNo),e(sv,$O),e($O,XNo),e(sv,zNo),e(K,WNo),e(K,lv),e(lv,Mge),e(Mge,QNo),e(lv,HNo),e(lv,kO),e(kO,UNo),e(lv,JNo),e(K,YNo),e(K,iv),e(iv,Ege),e(Ege,KNo),e(iv,ZNo),e(iv,SO),e(SO,eqo),e(iv,oqo),e(K,rqo),e(K,dv),e(dv,Cge),e(Cge,tqo),e(dv,aqo),e(dv,RO),e(RO,nqo),e(dv,sqo),e(K,lqo),e(K,cv),e(cv,wge),e(wge,iqo),e(cv,dqo),e(cv,PO),e(PO,cqo),e(cv,fqo),e(K,mqo),e(K,fv),e(fv,Age),e(Age,gqo),e(fv,hqo),e(fv,BO),e(BO,pqo),e(fv,_qo),e(K,uqo),e(K,mv),e(mv,yge),e(yge,bqo),e(mv,vqo),e(mv,IO),e(IO,Fqo),e(mv,Tqo),e(K,Mqo),e(K,gv),e(gv,Lge),e(Lge,Eqo),e(gv,Cqo),e(gv,NO),e(NO,wqo),e(gv,Aqo),e(K,yqo),e(K,hv),e(hv,xge),e(xge,Lqo),e(hv,xqo),e(hv,qO),e(qO,$qo),e(hv,kqo),e(K,Sqo),e(K,pv),e(pv,$ge),e($ge,Rqo),e(pv,Pqo),e(pv,jO),e(jO,Bqo),e(pv,Iqo),e(K,Nqo),e(K,_v),e(_v,kge),e(kge,qqo),e(_v,jqo),e(_v,DO),e(DO,Dqo),e(_v,Gqo),e(K,Oqo),e(K,uv),e(uv,Sge),e(Sge,Vqo),e(uv,Xqo),e(uv,GO),e(GO,zqo),e(uv,Wqo),e(K,Qqo),e(K,bv),e(bv,Rge),e(Rge,Hqo),e(bv,Uqo),e(bv,OO),e(OO,Jqo),e(bv,Yqo),e(K,Kqo),e(K,vv),e(vv,Pge),e(Pge,Zqo),e(vv,ejo),e(vv,VO),e(VO,ojo),e(vv,rjo),e(ro,tjo),e(ro,Fv),e(Fv,ajo),e(Fv,Bge),e(Bge,njo),e(Fv,sjo),e(Fv,Ige),e(Ige,ljo),e(ro,ijo),M(Tv,ro,null),b(f,zqe,u),b(f,Wi,u),e(Wi,Mv),e(Mv,Nge),M(jy,Nge,null),e(Wi,djo),e(Wi,qge),e(qge,cjo),b(f,Wqe,u),b(f,Bo,u),M(Dy,Bo,null),e(Bo,fjo),e(Bo,Qi),e(Qi,mjo),e(Qi,XO),e(XO,gjo),e(Qi,hjo),e(Qi,zO),e(zO,pjo),e(Qi,_jo),e(Bo,ujo),e(Bo,Gy),e(Gy,bjo),e(Gy,jge),e(jge,vjo),e(Gy,Fjo),e(Bo,Tjo),e(Bo,ct),M(Oy,ct,null),e(ct,Mjo),e(ct,Dge),e(Dge,Ejo),e(ct,Cjo),e(ct,Hi),e(Hi,wjo),e(Hi,Gge),e(Gge,Ajo),e(Hi,yjo),e(Hi,WO),e(WO,Ljo),e(Hi,xjo),e(ct,$jo),M(Ev,ct,null),e(Bo,kjo),e(Bo,to),M(Vy,to,null),e(to,Sjo),e(to,Oge),e(Oge,Rjo),e(to,Pjo),e(to,Ba),e(Ba,Bjo),e(Ba,Vge),e(Vge,Ijo),e(Ba,Njo),e(Ba,Xge),e(Xge,qjo),e(Ba,jjo),e(Ba,zge),e(zge,Djo),e(Ba,Gjo),e(to,Ojo),e(to,Yr),e(Yr,Cv),e(Cv,Wge),e(Wge,Vjo),e(Cv,Xjo),e(Cv,QO),e(QO,zjo),e(Cv,Wjo),e(Yr,Qjo),e(Yr,wv),e(wv,Qge),e(Qge,Hjo),e(wv,Ujo),e(wv,HO),e(HO,Jjo),e(wv,Yjo),e(Yr,Kjo),e(Yr,Av),e(Av,Hge),e(Hge,Zjo),e(Av,eDo),e(Av,UO),e(UO,oDo),e(Av,rDo),e(Yr,tDo),e(Yr,yv),e(yv,Uge),e(Uge,aDo),e(yv,nDo),e(yv,JO),e(JO,sDo),e(yv,lDo),e(Yr,iDo),e(Yr,Lv),e(Lv,Jge),e(Jge,dDo),e(Lv,cDo),e(Lv,YO),e(YO,fDo),e(Lv,mDo),e(to,gDo),e(to,xv),e(xv,hDo),e(xv,Yge),e(Yge,pDo),e(xv,_Do),e(xv,Kge),e(Kge,uDo),e(to,bDo),M($v,to,null),b(f,Qqe,u),b(f,Ui,u),e(Ui,kv),e(kv,Zge),M(Xy,Zge,null),e(Ui,vDo),e(Ui,ehe),e(ehe,FDo),b(f,Hqe,u),b(f,Io,u),M(zy,Io,null),e(Io,TDo),e(Io,Ji),e(Ji,MDo),e(Ji,KO),e(KO,EDo),e(Ji,CDo),e(Ji,ZO),e(ZO,wDo),e(Ji,ADo),e(Io,yDo),e(Io,Wy),e(Wy,LDo),e(Wy,ohe),e(ohe,xDo),e(Wy,$Do),e(Io,kDo),e(Io,ft),M(Qy,ft,null),e(ft,SDo),e(ft,rhe),e(rhe,RDo),e(ft,PDo),e(ft,Yi),e(Yi,BDo),e(Yi,the),e(the,IDo),e(Yi,NDo),e(Yi,eV),e(eV,qDo),e(Yi,jDo),e(ft,DDo),M(Sv,ft,null),e(Io,GDo),e(Io,ao),M(Hy,ao,null),e(ao,ODo),e(ao,ahe),e(ahe,VDo),e(ao,XDo),e(ao,Ia),e(Ia,zDo),e(Ia,nhe),e(nhe,WDo),e(Ia,QDo),e(Ia,she),e(she,HDo),e(Ia,UDo),e(Ia,lhe),e(lhe,JDo),e(Ia,YDo),e(ao,KDo),e(ao,H),e(H,Rv),e(Rv,ihe),e(ihe,ZDo),e(Rv,eGo),e(Rv,oV),e(oV,oGo),e(Rv,rGo),e(H,tGo),e(H,Pv),e(Pv,dhe),e(dhe,aGo),e(Pv,nGo),e(Pv,rV),e(rV,sGo),e(Pv,lGo),e(H,iGo),e(H,Bv),e(Bv,che),e(che,dGo),e(Bv,cGo),e(Bv,tV),e(tV,fGo),e(Bv,mGo),e(H,gGo),e(H,Iv),e(Iv,fhe),e(fhe,hGo),e(Iv,pGo),e(Iv,aV),e(aV,_Go),e(Iv,uGo),e(H,bGo),e(H,Nv),e(Nv,mhe),e(mhe,vGo),e(Nv,FGo),e(Nv,nV),e(nV,TGo),e(Nv,MGo),e(H,EGo),e(H,qv),e(qv,ghe),e(ghe,CGo),e(qv,wGo),e(qv,sV),e(sV,AGo),e(qv,yGo),e(H,LGo),e(H,jv),e(jv,hhe),e(hhe,xGo),e(jv,$Go),e(jv,lV),e(lV,kGo),e(jv,SGo),e(H,RGo),e(H,Dv),e(Dv,phe),e(phe,PGo),e(Dv,BGo),e(Dv,iV),e(iV,IGo),e(Dv,NGo),e(H,qGo),e(H,Gv),e(Gv,_he),e(_he,jGo),e(Gv,DGo),e(Gv,dV),e(dV,GGo),e(Gv,OGo),e(H,VGo),e(H,Ov),e(Ov,uhe),e(uhe,XGo),e(Ov,zGo),e(Ov,cV),e(cV,WGo),e(Ov,QGo),e(H,HGo),e(H,Vv),e(Vv,bhe),e(bhe,UGo),e(Vv,JGo),e(Vv,fV),e(fV,YGo),e(Vv,KGo),e(H,ZGo),e(H,Xv),e(Xv,vhe),e(vhe,eOo),e(Xv,oOo),e(Xv,mV),e(mV,rOo),e(Xv,tOo),e(H,aOo),e(H,zv),e(zv,Fhe),e(Fhe,nOo),e(zv,sOo),e(zv,gV),e(gV,lOo),e(zv,iOo),e(H,dOo),e(H,Wv),e(Wv,The),e(The,cOo),e(Wv,fOo),e(Wv,hV),e(hV,mOo),e(Wv,gOo),e(H,hOo),e(H,Qv),e(Qv,Mhe),e(Mhe,pOo),e(Qv,_Oo),e(Qv,pV),e(pV,uOo),e(Qv,bOo),e(H,vOo),e(H,Hv),e(Hv,Ehe),e(Ehe,FOo),e(Hv,TOo),e(Hv,_V),e(_V,MOo),e(Hv,EOo),e(H,COo),e(H,Uv),e(Uv,Che),e(Che,wOo),e(Uv,AOo),e(Uv,uV),e(uV,yOo),e(Uv,LOo),e(H,xOo),e(H,Jv),e(Jv,whe),e(whe,$Oo),e(Jv,kOo),e(Jv,bV),e(bV,SOo),e(Jv,ROo),e(H,POo),e(H,Yv),e(Yv,Ahe),e(Ahe,BOo),e(Yv,IOo),e(Yv,vV),e(vV,NOo),e(Yv,qOo),e(H,jOo),e(H,Kv),e(Kv,yhe),e(yhe,DOo),e(Kv,GOo),e(Kv,FV),e(FV,OOo),e(Kv,VOo),e(H,XOo),e(H,Zv),e(Zv,Lhe),e(Lhe,zOo),e(Zv,WOo),e(Zv,TV),e(TV,QOo),e(Zv,HOo),e(H,UOo),e(H,e0),e(e0,xhe),e(xhe,JOo),e(e0,YOo),e(e0,MV),e(MV,KOo),e(e0,ZOo),e(H,eVo),e(H,o0),e(o0,$he),e($he,oVo),e(o0,rVo),e(o0,EV),e(EV,tVo),e(o0,aVo),e(H,nVo),e(H,r0),e(r0,khe),e(khe,sVo),e(r0,lVo),e(r0,CV),e(CV,iVo),e(r0,dVo),e(H,cVo),e(H,t0),e(t0,She),e(She,fVo),e(t0,mVo),e(t0,wV),e(wV,gVo),e(t0,hVo),e(H,pVo),e(H,a0),e(a0,Rhe),e(Rhe,_Vo),e(a0,uVo),e(a0,AV),e(AV,bVo),e(a0,vVo),e(H,FVo),e(H,n0),e(n0,Phe),e(Phe,TVo),e(n0,MVo),e(n0,yV),e(yV,EVo),e(n0,CVo),e(H,wVo),e(H,s0),e(s0,Bhe),e(Bhe,AVo),e(s0,yVo),e(s0,LV),e(LV,LVo),e(s0,xVo),e(H,$Vo),e(H,l0),e(l0,Ihe),e(Ihe,kVo),e(l0,SVo),e(l0,xV),e(xV,RVo),e(l0,PVo),e(H,BVo),e(H,i0),e(i0,Nhe),e(Nhe,IVo),e(i0,NVo),e(i0,$V),e($V,qVo),e(i0,jVo),e(H,DVo),e(H,d0),e(d0,qhe),e(qhe,GVo),e(d0,OVo),e(d0,kV),e(kV,VVo),e(d0,XVo),e(H,zVo),e(H,c0),e(c0,jhe),e(jhe,WVo),e(c0,QVo),e(c0,SV),e(SV,HVo),e(c0,UVo),e(H,JVo),e(H,f0),e(f0,Dhe),e(Dhe,YVo),e(f0,KVo),e(f0,RV),e(RV,ZVo),e(f0,eXo),e(H,oXo),e(H,m0),e(m0,Ghe),e(Ghe,rXo),e(m0,tXo),e(m0,PV),e(PV,aXo),e(m0,nXo),e(ao,sXo),e(ao,g0),e(g0,lXo),e(g0,Ohe),e(Ohe,iXo),e(g0,dXo),e(g0,Vhe),e(Vhe,cXo),e(ao,fXo),M(h0,ao,null),b(f,Uqe,u),b(f,Ki,u),e(Ki,p0),e(p0,Xhe),M(Uy,Xhe,null),e(Ki,mXo),e(Ki,zhe),e(zhe,gXo),b(f,Jqe,u),b(f,No,u),M(Jy,No,null),e(No,hXo),e(No,Zi),e(Zi,pXo),e(Zi,BV),e(BV,_Xo),e(Zi,uXo),e(Zi,IV),e(IV,bXo),e(Zi,vXo),e(No,FXo),e(No,Yy),e(Yy,TXo),e(Yy,Whe),e(Whe,MXo),e(Yy,EXo),e(No,CXo),e(No,mt),M(Ky,mt,null),e(mt,wXo),e(mt,Qhe),e(Qhe,AXo),e(mt,yXo),e(mt,ed),e(ed,LXo),e(ed,Hhe),e(Hhe,xXo),e(ed,$Xo),e(ed,NV),e(NV,kXo),e(ed,SXo),e(mt,RXo),M(_0,mt,null),e(No,PXo),e(No,no),M(Zy,no,null),e(no,BXo),e(no,Uhe),e(Uhe,IXo),e(no,NXo),e(no,Na),e(Na,qXo),e(Na,Jhe),e(Jhe,jXo),e(Na,DXo),e(Na,Yhe),e(Yhe,GXo),e(Na,OXo),e(Na,Khe),e(Khe,VXo),e(Na,XXo),e(no,zXo),e(no,V),e(V,u0),e(u0,Zhe),e(Zhe,WXo),e(u0,QXo),e(u0,qV),e(qV,HXo),e(u0,UXo),e(V,JXo),e(V,b0),e(b0,epe),e(epe,YXo),e(b0,KXo),e(b0,jV),e(jV,ZXo),e(b0,ezo),e(V,ozo),e(V,v0),e(v0,ope),e(ope,rzo),e(v0,tzo),e(v0,DV),e(DV,azo),e(v0,nzo),e(V,szo),e(V,F0),e(F0,rpe),e(rpe,lzo),e(F0,izo),e(F0,GV),e(GV,dzo),e(F0,czo),e(V,fzo),e(V,T0),e(T0,tpe),e(tpe,mzo),e(T0,gzo),e(T0,OV),e(OV,hzo),e(T0,pzo),e(V,_zo),e(V,M0),e(M0,ape),e(ape,uzo),e(M0,bzo),e(M0,VV),e(VV,vzo),e(M0,Fzo),e(V,Tzo),e(V,E0),e(E0,npe),e(npe,Mzo),e(E0,Ezo),e(E0,XV),e(XV,Czo),e(E0,wzo),e(V,Azo),e(V,C0),e(C0,spe),e(spe,yzo),e(C0,Lzo),e(C0,zV),e(zV,xzo),e(C0,$zo),e(V,kzo),e(V,w0),e(w0,lpe),e(lpe,Szo),e(w0,Rzo),e(w0,WV),e(WV,Pzo),e(w0,Bzo),e(V,Izo),e(V,A0),e(A0,ipe),e(ipe,Nzo),e(A0,qzo),e(A0,QV),e(QV,jzo),e(A0,Dzo),e(V,Gzo),e(V,y0),e(y0,dpe),e(dpe,Ozo),e(y0,Vzo),e(y0,HV),e(HV,Xzo),e(y0,zzo),e(V,Wzo),e(V,L0),e(L0,cpe),e(cpe,Qzo),e(L0,Hzo),e(L0,UV),e(UV,Uzo),e(L0,Jzo),e(V,Yzo),e(V,x0),e(x0,fpe),e(fpe,Kzo),e(x0,Zzo),e(x0,JV),e(JV,eWo),e(x0,oWo),e(V,rWo),e(V,$0),e($0,mpe),e(mpe,tWo),e($0,aWo),e($0,YV),e(YV,nWo),e($0,sWo),e(V,lWo),e(V,k0),e(k0,gpe),e(gpe,iWo),e(k0,dWo),e(k0,KV),e(KV,cWo),e(k0,fWo),e(V,mWo),e(V,S0),e(S0,hpe),e(hpe,gWo),e(S0,hWo),e(S0,ZV),e(ZV,pWo),e(S0,_Wo),e(V,uWo),e(V,R0),e(R0,ppe),e(ppe,bWo),e(R0,vWo),e(R0,eX),e(eX,FWo),e(R0,TWo),e(V,MWo),e(V,P0),e(P0,_pe),e(_pe,EWo),e(P0,CWo),e(P0,oX),e(oX,wWo),e(P0,AWo),e(V,yWo),e(V,B0),e(B0,upe),e(upe,LWo),e(B0,xWo),e(B0,rX),e(rX,$Wo),e(B0,kWo),e(V,SWo),e(V,I0),e(I0,bpe),e(bpe,RWo),e(I0,PWo),e(I0,tX),e(tX,BWo),e(I0,IWo),e(V,NWo),e(V,N0),e(N0,vpe),e(vpe,qWo),e(N0,jWo),e(N0,aX),e(aX,DWo),e(N0,GWo),e(V,OWo),e(V,q0),e(q0,Fpe),e(Fpe,VWo),e(q0,XWo),e(q0,nX),e(nX,zWo),e(q0,WWo),e(V,QWo),e(V,j0),e(j0,Tpe),e(Tpe,HWo),e(j0,UWo),e(j0,sX),e(sX,JWo),e(j0,YWo),e(V,KWo),e(V,D0),e(D0,Mpe),e(Mpe,ZWo),e(D0,eQo),e(D0,lX),e(lX,oQo),e(D0,rQo),e(V,tQo),e(V,G0),e(G0,Epe),e(Epe,aQo),e(G0,nQo),e(G0,iX),e(iX,sQo),e(G0,lQo),e(V,iQo),e(V,O0),e(O0,Cpe),e(Cpe,dQo),e(O0,cQo),e(O0,dX),e(dX,fQo),e(O0,mQo),e(V,gQo),e(V,V0),e(V0,wpe),e(wpe,hQo),e(V0,pQo),e(V0,cX),e(cX,_Qo),e(V0,uQo),e(V,bQo),e(V,X0),e(X0,Ape),e(Ape,vQo),e(X0,FQo),e(X0,fX),e(fX,TQo),e(X0,MQo),e(V,EQo),e(V,z0),e(z0,ype),e(ype,CQo),e(z0,wQo),e(z0,mX),e(mX,AQo),e(z0,yQo),e(V,LQo),e(V,W0),e(W0,Lpe),e(Lpe,xQo),e(W0,$Qo),e(W0,gX),e(gX,kQo),e(W0,SQo),e(V,RQo),e(V,Q0),e(Q0,xpe),e(xpe,PQo),e(Q0,BQo),e(Q0,hX),e(hX,IQo),e(Q0,NQo),e(V,qQo),e(V,H0),e(H0,$pe),e($pe,jQo),e(H0,DQo),e(H0,pX),e(pX,GQo),e(H0,OQo),e(V,VQo),e(V,U0),e(U0,kpe),e(kpe,XQo),e(U0,zQo),e(U0,_X),e(_X,WQo),e(U0,QQo),e(V,HQo),e(V,J0),e(J0,Spe),e(Spe,UQo),e(J0,JQo),e(J0,uX),e(uX,YQo),e(J0,KQo),e(V,ZQo),e(V,Y0),e(Y0,Rpe),e(Rpe,eHo),e(Y0,oHo),e(Y0,bX),e(bX,rHo),e(Y0,tHo),e(V,aHo),e(V,K0),e(K0,Ppe),e(Ppe,nHo),e(K0,sHo),e(K0,vX),e(vX,lHo),e(K0,iHo),e(V,dHo),e(V,Z0),e(Z0,Bpe),e(Bpe,cHo),e(Z0,fHo),e(Z0,FX),e(FX,mHo),e(Z0,gHo),e(V,hHo),e(V,eF),e(eF,Ipe),e(Ipe,pHo),e(eF,_Ho),e(eF,TX),e(TX,uHo),e(eF,bHo),e(V,vHo),e(V,oF),e(oF,Npe),e(Npe,FHo),e(oF,THo),e(oF,MX),e(MX,MHo),e(oF,EHo),e(V,CHo),e(V,rF),e(rF,qpe),e(qpe,wHo),e(rF,AHo),e(rF,EX),e(EX,yHo),e(rF,LHo),e(no,xHo),e(no,tF),e(tF,$Ho),e(tF,jpe),e(jpe,kHo),e(tF,SHo),e(tF,Dpe),e(Dpe,RHo),e(no,PHo),M(aF,no,null),b(f,Yqe,u),b(f,od,u),e(od,nF),e(nF,Gpe),M(eL,Gpe,null),e(od,BHo),e(od,Ope),e(Ope,IHo),b(f,Kqe,u),b(f,qo,u),M(oL,qo,null),e(qo,NHo),e(qo,rd),e(rd,qHo),e(rd,CX),e(CX,jHo),e(rd,DHo),e(rd,wX),e(wX,GHo),e(rd,OHo),e(qo,VHo),e(qo,rL),e(rL,XHo),e(rL,Vpe),e(Vpe,zHo),e(rL,WHo),e(qo,QHo),e(qo,gt),M(tL,gt,null),e(gt,HHo),e(gt,Xpe),e(Xpe,UHo),e(gt,JHo),e(gt,td),e(td,YHo),e(td,zpe),e(zpe,KHo),e(td,ZHo),e(td,AX),e(AX,eUo),e(td,oUo),e(gt,rUo),M(sF,gt,null),e(qo,tUo),e(qo,so),M(aL,so,null),e(so,aUo),e(so,Wpe),e(Wpe,nUo),e(so,sUo),e(so,qa),e(qa,lUo),e(qa,Qpe),e(Qpe,iUo),e(qa,dUo),e(qa,Hpe),e(Hpe,cUo),e(qa,fUo),e(qa,Upe),e(Upe,mUo),e(qa,gUo),e(so,hUo),e(so,Jpe),e(Jpe,lF),e(lF,Ype),e(Ype,pUo),e(lF,_Uo),e(lF,yX),e(yX,uUo),e(lF,bUo),e(so,vUo),e(so,iF),e(iF,FUo),e(iF,Kpe),e(Kpe,TUo),e(iF,MUo),e(iF,Zpe),e(Zpe,EUo),e(so,CUo),M(dF,so,null),b(f,Zqe,u),b(f,ad,u),e(ad,cF),e(cF,e_e),M(nL,e_e,null),e(ad,wUo),e(ad,o_e),e(o_e,AUo),b(f,eje,u),b(f,jo,u),M(sL,jo,null),e(jo,yUo),e(jo,nd),e(nd,LUo),e(nd,LX),e(LX,xUo),e(nd,$Uo),e(nd,xX),e(xX,kUo),e(nd,SUo),e(jo,RUo),e(jo,lL),e(lL,PUo),e(lL,r_e),e(r_e,BUo),e(lL,IUo),e(jo,NUo),e(jo,ht),M(iL,ht,null),e(ht,qUo),e(ht,t_e),e(t_e,jUo),e(ht,DUo),e(ht,sd),e(sd,GUo),e(sd,a_e),e(a_e,OUo),e(sd,VUo),e(sd,$X),e($X,XUo),e(sd,zUo),e(ht,WUo),M(fF,ht,null),e(jo,QUo),e(jo,lo),M(dL,lo,null),e(lo,HUo),e(lo,n_e),e(n_e,UUo),e(lo,JUo),e(lo,ja),e(ja,YUo),e(ja,s_e),e(s_e,KUo),e(ja,ZUo),e(ja,l_e),e(l_e,eJo),e(ja,oJo),e(ja,i_e),e(i_e,rJo),e(ja,tJo),e(lo,aJo),e(lo,Fe),e(Fe,mF),e(mF,d_e),e(d_e,nJo),e(mF,sJo),e(mF,kX),e(kX,lJo),e(mF,iJo),e(Fe,dJo),e(Fe,gF),e(gF,c_e),e(c_e,cJo),e(gF,fJo),e(gF,SX),e(SX,mJo),e(gF,gJo),e(Fe,hJo),e(Fe,hF),e(hF,f_e),e(f_e,pJo),e(hF,_Jo),e(hF,RX),e(RX,uJo),e(hF,bJo),e(Fe,vJo),e(Fe,pF),e(pF,m_e),e(m_e,FJo),e(pF,TJo),e(pF,PX),e(PX,MJo),e(pF,EJo),e(Fe,CJo),e(Fe,Bs),e(Bs,g_e),e(g_e,wJo),e(Bs,AJo),e(Bs,BX),e(BX,yJo),e(Bs,LJo),e(Bs,IX),e(IX,xJo),e(Bs,$Jo),e(Fe,kJo),e(Fe,_F),e(_F,h_e),e(h_e,SJo),e(_F,RJo),e(_F,NX),e(NX,PJo),e(_F,BJo),e(Fe,IJo),e(Fe,pt),e(pt,p_e),e(p_e,NJo),e(pt,qJo),e(pt,qX),e(qX,jJo),e(pt,DJo),e(pt,jX),e(jX,GJo),e(pt,OJo),e(pt,DX),e(DX,VJo),e(pt,XJo),e(Fe,zJo),e(Fe,uF),e(uF,__e),e(__e,WJo),e(uF,QJo),e(uF,GX),e(GX,HJo),e(uF,UJo),e(Fe,JJo),e(Fe,bF),e(bF,u_e),e(u_e,YJo),e(bF,KJo),e(bF,OX),e(OX,ZJo),e(bF,eYo),e(Fe,oYo),e(Fe,vF),e(vF,b_e),e(b_e,rYo),e(vF,tYo),e(vF,VX),e(VX,aYo),e(vF,nYo),e(Fe,sYo),e(Fe,FF),e(FF,v_e),e(v_e,lYo),e(FF,iYo),e(FF,XX),e(XX,dYo),e(FF,cYo),e(Fe,fYo),e(Fe,TF),e(TF,F_e),e(F_e,mYo),e(TF,gYo),e(TF,zX),e(zX,hYo),e(TF,pYo),e(Fe,_Yo),e(Fe,MF),e(MF,T_e),e(T_e,uYo),e(MF,bYo),e(MF,WX),e(WX,vYo),e(MF,FYo),e(Fe,TYo),e(Fe,EF),e(EF,M_e),e(M_e,MYo),e(EF,EYo),e(EF,QX),e(QX,CYo),e(EF,wYo),e(lo,AYo),e(lo,CF),e(CF,yYo),e(CF,E_e),e(E_e,LYo),e(CF,xYo),e(CF,C_e),e(C_e,$Yo),e(lo,kYo),M(wF,lo,null),b(f,oje,u),b(f,ld,u),e(ld,AF),e(AF,w_e),M(cL,w_e,null),e(ld,SYo),e(ld,A_e),e(A_e,RYo),b(f,rje,u),b(f,Do,u),M(fL,Do,null),e(Do,PYo),e(Do,id),e(id,BYo),e(id,HX),e(HX,IYo),e(id,NYo),e(id,UX),e(UX,qYo),e(id,jYo),e(Do,DYo),e(Do,mL),e(mL,GYo),e(mL,y_e),e(y_e,OYo),e(mL,VYo),e(Do,XYo),e(Do,_t),M(gL,_t,null),e(_t,zYo),e(_t,L_e),e(L_e,WYo),e(_t,QYo),e(_t,dd),e(dd,HYo),e(dd,x_e),e(x_e,UYo),e(dd,JYo),e(dd,JX),e(JX,YYo),e(dd,KYo),e(_t,ZYo),M(yF,_t,null),e(Do,eKo),e(Do,io),M(hL,io,null),e(io,oKo),e(io,$_e),e($_e,rKo),e(io,tKo),e(io,Da),e(Da,aKo),e(Da,k_e),e(k_e,nKo),e(Da,sKo),e(Da,S_e),e(S_e,lKo),e(Da,iKo),e(Da,R_e),e(R_e,dKo),e(Da,cKo),e(io,fKo),e(io,P_e),e(P_e,LF),e(LF,B_e),e(B_e,mKo),e(LF,gKo),e(LF,YX),e(YX,hKo),e(LF,pKo),e(io,_Ko),e(io,xF),e(xF,uKo),e(xF,I_e),e(I_e,bKo),e(xF,vKo),e(xF,N_e),e(N_e,FKo),e(io,TKo),M($F,io,null),b(f,tje,u),b(f,cd,u),e(cd,kF),e(kF,q_e),M(pL,q_e,null),e(cd,MKo),e(cd,j_e),e(j_e,EKo),b(f,aje,u),b(f,Go,u),M(_L,Go,null),e(Go,CKo),e(Go,fd),e(fd,wKo),e(fd,KX),e(KX,AKo),e(fd,yKo),e(fd,ZX),e(ZX,LKo),e(fd,xKo),e(Go,$Ko),e(Go,uL),e(uL,kKo),e(uL,D_e),e(D_e,SKo),e(uL,RKo),e(Go,PKo),e(Go,ut),M(bL,ut,null),e(ut,BKo),e(ut,G_e),e(G_e,IKo),e(ut,NKo),e(ut,md),e(md,qKo),e(md,O_e),e(O_e,jKo),e(md,DKo),e(md,ez),e(ez,GKo),e(md,OKo),e(ut,VKo),M(SF,ut,null),e(Go,XKo),e(Go,co),M(vL,co,null),e(co,zKo),e(co,V_e),e(V_e,WKo),e(co,QKo),e(co,Ga),e(Ga,HKo),e(Ga,X_e),e(X_e,UKo),e(Ga,JKo),e(Ga,z_e),e(z_e,YKo),e(Ga,KKo),e(Ga,W_e),e(W_e,ZKo),e(Ga,eZo),e(co,oZo),e(co,ke),e(ke,RF),e(RF,Q_e),e(Q_e,rZo),e(RF,tZo),e(RF,oz),e(oz,aZo),e(RF,nZo),e(ke,sZo),e(ke,PF),e(PF,H_e),e(H_e,lZo),e(PF,iZo),e(PF,rz),e(rz,dZo),e(PF,cZo),e(ke,fZo),e(ke,BF),e(BF,U_e),e(U_e,mZo),e(BF,gZo),e(BF,tz),e(tz,hZo),e(BF,pZo),e(ke,_Zo),e(ke,IF),e(IF,J_e),e(J_e,uZo),e(IF,bZo),e(IF,az),e(az,vZo),e(IF,FZo),e(ke,TZo),e(ke,NF),e(NF,Y_e),e(Y_e,MZo),e(NF,EZo),e(NF,nz),e(nz,CZo),e(NF,wZo),e(ke,AZo),e(ke,qF),e(qF,K_e),e(K_e,yZo),e(qF,LZo),e(qF,sz),e(sz,xZo),e(qF,$Zo),e(ke,kZo),e(ke,jF),e(jF,Z_e),e(Z_e,SZo),e(jF,RZo),e(jF,lz),e(lz,PZo),e(jF,BZo),e(ke,IZo),e(ke,DF),e(DF,eue),e(eue,NZo),e(DF,qZo),e(DF,iz),e(iz,jZo),e(DF,DZo),e(ke,GZo),e(ke,GF),e(GF,oue),e(oue,OZo),e(GF,VZo),e(GF,dz),e(dz,XZo),e(GF,zZo),e(co,WZo),e(co,OF),e(OF,QZo),e(OF,rue),e(rue,HZo),e(OF,UZo),e(OF,tue),e(tue,JZo),e(co,YZo),M(VF,co,null),b(f,nje,u),b(f,gd,u),e(gd,XF),e(XF,aue),M(FL,aue,null),e(gd,KZo),e(gd,nue),e(nue,ZZo),b(f,sje,u),b(f,Oo,u),M(TL,Oo,null),e(Oo,eer),e(Oo,hd),e(hd,oer),e(hd,cz),e(cz,rer),e(hd,ter),e(hd,fz),e(fz,aer),e(hd,ner),e(Oo,ser),e(Oo,ML),e(ML,ler),e(ML,sue),e(sue,ier),e(ML,der),e(Oo,cer),e(Oo,bt),M(EL,bt,null),e(bt,fer),e(bt,lue),e(lue,mer),e(bt,ger),e(bt,pd),e(pd,her),e(pd,iue),e(iue,per),e(pd,_er),e(pd,mz),e(mz,uer),e(pd,ber),e(bt,ver),M(zF,bt,null),e(Oo,Fer),e(Oo,fo),M(CL,fo,null),e(fo,Ter),e(fo,due),e(due,Mer),e(fo,Eer),e(fo,Oa),e(Oa,Cer),e(Oa,cue),e(cue,wer),e(Oa,Aer),e(Oa,fue),e(fue,yer),e(Oa,Ler),e(Oa,mue),e(mue,xer),e(Oa,$er),e(fo,ker),e(fo,Kr),e(Kr,WF),e(WF,gue),e(gue,Ser),e(WF,Rer),e(WF,gz),e(gz,Per),e(WF,Ber),e(Kr,Ier),e(Kr,QF),e(QF,hue),e(hue,Ner),e(QF,qer),e(QF,hz),e(hz,jer),e(QF,Der),e(Kr,Ger),e(Kr,HF),e(HF,pue),e(pue,Oer),e(HF,Ver),e(HF,pz),e(pz,Xer),e(HF,zer),e(Kr,Wer),e(Kr,UF),e(UF,_ue),e(_ue,Qer),e(UF,Her),e(UF,_z),e(_z,Uer),e(UF,Jer),e(Kr,Yer),e(Kr,JF),e(JF,uue),e(uue,Ker),e(JF,Zer),e(JF,uz),e(uz,eor),e(JF,oor),e(fo,ror),e(fo,YF),e(YF,tor),e(YF,bue),e(bue,aor),e(YF,nor),e(YF,vue),e(vue,sor),e(fo,lor),M(KF,fo,null),b(f,lje,u),b(f,_d,u),e(_d,ZF),e(ZF,Fue),M(wL,Fue,null),e(_d,ior),e(_d,Tue),e(Tue,dor),b(f,ije,u),b(f,Vo,u),M(AL,Vo,null),e(Vo,cor),e(Vo,ud),e(ud,mor),e(ud,bz),e(bz,gor),e(ud,hor),e(ud,vz),e(vz,por),e(ud,_or),e(Vo,uor),e(Vo,yL),e(yL,bor),e(yL,Mue),e(Mue,vor),e(yL,For),e(Vo,Tor),e(Vo,vt),M(LL,vt,null),e(vt,Mor),e(vt,Eue),e(Eue,Eor),e(vt,Cor),e(vt,bd),e(bd,wor),e(bd,Cue),e(Cue,Aor),e(bd,yor),e(bd,Fz),e(Fz,Lor),e(bd,xor),e(vt,$or),M(eT,vt,null),e(Vo,kor),e(Vo,mo),M(xL,mo,null),e(mo,Sor),e(mo,wue),e(wue,Ror),e(mo,Por),e(mo,Va),e(Va,Bor),e(Va,Aue),e(Aue,Ior),e(Va,Nor),e(Va,yue),e(yue,qor),e(Va,jor),e(Va,Lue),e(Lue,Dor),e(Va,Gor),e(mo,Oor),e(mo,Se),e(Se,oT),e(oT,xue),e(xue,Vor),e(oT,Xor),e(oT,Tz),e(Tz,zor),e(oT,Wor),e(Se,Qor),e(Se,rT),e(rT,$ue),e($ue,Hor),e(rT,Uor),e(rT,Mz),e(Mz,Jor),e(rT,Yor),e(Se,Kor),e(Se,tT),e(tT,kue),e(kue,Zor),e(tT,err),e(tT,Ez),e(Ez,orr),e(tT,rrr),e(Se,trr),e(Se,aT),e(aT,Sue),e(Sue,arr),e(aT,nrr),e(aT,Cz),e(Cz,srr),e(aT,lrr),e(Se,irr),e(Se,nT),e(nT,Rue),e(Rue,drr),e(nT,crr),e(nT,wz),e(wz,frr),e(nT,mrr),e(Se,grr),e(Se,sT),e(sT,Pue),e(Pue,hrr),e(sT,prr),e(sT,Az),e(Az,_rr),e(sT,urr),e(Se,brr),e(Se,lT),e(lT,Bue),e(Bue,vrr),e(lT,Frr),e(lT,yz),e(yz,Trr),e(lT,Mrr),e(Se,Err),e(Se,iT),e(iT,Iue),e(Iue,Crr),e(iT,wrr),e(iT,Lz),e(Lz,Arr),e(iT,yrr),e(Se,Lrr),e(Se,dT),e(dT,Nue),e(Nue,xrr),e(dT,$rr),e(dT,xz),e(xz,krr),e(dT,Srr),e(mo,Rrr),e(mo,cT),e(cT,Prr),e(cT,que),e(que,Brr),e(cT,Irr),e(cT,jue),e(jue,Nrr),e(mo,qrr),M(fT,mo,null),b(f,dje,u),b(f,vd,u),e(vd,mT),e(mT,Due),M($L,Due,null),e(vd,jrr),e(vd,Gue),e(Gue,Drr),b(f,cje,u),b(f,Xo,u),M(kL,Xo,null),e(Xo,Grr),e(Xo,Fd),e(Fd,Orr),e(Fd,$z),e($z,Vrr),e(Fd,Xrr),e(Fd,kz),e(kz,zrr),e(Fd,Wrr),e(Xo,Qrr),e(Xo,SL),e(SL,Hrr),e(SL,Oue),e(Oue,Urr),e(SL,Jrr),e(Xo,Yrr),e(Xo,Ft),M(RL,Ft,null),e(Ft,Krr),e(Ft,Vue),e(Vue,Zrr),e(Ft,etr),e(Ft,Td),e(Td,otr),e(Td,Xue),e(Xue,rtr),e(Td,ttr),e(Td,Sz),e(Sz,atr),e(Td,ntr),e(Ft,str),M(gT,Ft,null),e(Xo,ltr),e(Xo,go),M(PL,go,null),e(go,itr),e(go,zue),e(zue,dtr),e(go,ctr),e(go,Xa),e(Xa,ftr),e(Xa,Wue),e(Wue,mtr),e(Xa,gtr),e(Xa,Que),e(Que,htr),e(Xa,ptr),e(Xa,Hue),e(Hue,_tr),e(Xa,utr),e(go,btr),e(go,BL),e(BL,hT),e(hT,Uue),e(Uue,vtr),e(hT,Ftr),e(hT,Rz),e(Rz,Ttr),e(hT,Mtr),e(BL,Etr),e(BL,pT),e(pT,Jue),e(Jue,Ctr),e(pT,wtr),e(pT,Pz),e(Pz,Atr),e(pT,ytr),e(go,Ltr),e(go,_T),e(_T,xtr),e(_T,Yue),e(Yue,$tr),e(_T,ktr),e(_T,Kue),e(Kue,Str),e(go,Rtr),M(uT,go,null),b(f,fje,u),b(f,Md,u),e(Md,bT),e(bT,Zue),M(IL,Zue,null),e(Md,Ptr),e(Md,e2e),e(e2e,Btr),b(f,mje,u),b(f,zo,u),M(NL,zo,null),e(zo,Itr),e(zo,Ed),e(Ed,Ntr),e(Ed,Bz),e(Bz,qtr),e(Ed,jtr),e(Ed,Iz),e(Iz,Dtr),e(Ed,Gtr),e(zo,Otr),e(zo,qL),e(qL,Vtr),e(qL,o2e),e(o2e,Xtr),e(qL,ztr),e(zo,Wtr),e(zo,Tt),M(jL,Tt,null),e(Tt,Qtr),e(Tt,r2e),e(r2e,Htr),e(Tt,Utr),e(Tt,Cd),e(Cd,Jtr),e(Cd,t2e),e(t2e,Ytr),e(Cd,Ktr),e(Cd,Nz),e(Nz,Ztr),e(Cd,ear),e(Tt,oar),M(vT,Tt,null),e(zo,rar),e(zo,ho),M(DL,ho,null),e(ho,tar),e(ho,a2e),e(a2e,aar),e(ho,nar),e(ho,za),e(za,sar),e(za,n2e),e(n2e,lar),e(za,iar),e(za,s2e),e(s2e,dar),e(za,car),e(za,l2e),e(l2e,far),e(za,mar),e(ho,gar),e(ho,Zr),e(Zr,FT),e(FT,i2e),e(i2e,har),e(FT,par),e(FT,qz),e(qz,_ar),e(FT,uar),e(Zr,bar),e(Zr,TT),e(TT,d2e),e(d2e,Far),e(TT,Tar),e(TT,jz),e(jz,Mar),e(TT,Ear),e(Zr,Car),e(Zr,MT),e(MT,c2e),e(c2e,war),e(MT,Aar),e(MT,Dz),e(Dz,yar),e(MT,Lar),e(Zr,xar),e(Zr,ET),e(ET,f2e),e(f2e,$ar),e(ET,kar),e(ET,Gz),e(Gz,Sar),e(ET,Rar),e(Zr,Par),e(Zr,CT),e(CT,m2e),e(m2e,Bar),e(CT,Iar),e(CT,Oz),e(Oz,Nar),e(CT,qar),e(ho,jar),e(ho,wT),e(wT,Dar),e(wT,g2e),e(g2e,Gar),e(wT,Oar),e(wT,h2e),e(h2e,Var),e(ho,Xar),M(AT,ho,null),b(f,gje,u),b(f,wd,u),e(wd,yT),e(yT,p2e),M(GL,p2e,null),e(wd,zar),e(wd,_2e),e(_2e,War),b(f,hje,u),b(f,Wo,u),M(OL,Wo,null),e(Wo,Qar),e(Wo,Ad),e(Ad,Har),e(Ad,Vz),e(Vz,Uar),e(Ad,Jar),e(Ad,Xz),e(Xz,Yar),e(Ad,Kar),e(Wo,Zar),e(Wo,VL),e(VL,enr),e(VL,u2e),e(u2e,onr),e(VL,rnr),e(Wo,tnr),e(Wo,Mt),M(XL,Mt,null),e(Mt,anr),e(Mt,b2e),e(b2e,nnr),e(Mt,snr),e(Mt,yd),e(yd,lnr),e(yd,v2e),e(v2e,inr),e(yd,dnr),e(yd,zz),e(zz,cnr),e(yd,fnr),e(Mt,mnr),M(LT,Mt,null),e(Wo,gnr),e(Wo,po),M(zL,po,null),e(po,hnr),e(po,F2e),e(F2e,pnr),e(po,_nr),e(po,Wa),e(Wa,unr),e(Wa,T2e),e(T2e,bnr),e(Wa,vnr),e(Wa,M2e),e(M2e,Fnr),e(Wa,Tnr),e(Wa,E2e),e(E2e,Mnr),e(Wa,Enr),e(po,Cnr),e(po,Ld),e(Ld,xT),e(xT,C2e),e(C2e,wnr),e(xT,Anr),e(xT,Wz),e(Wz,ynr),e(xT,Lnr),e(Ld,xnr),e(Ld,$T),e($T,w2e),e(w2e,$nr),e($T,knr),e($T,Qz),e(Qz,Snr),e($T,Rnr),e(Ld,Pnr),e(Ld,kT),e(kT,A2e),e(A2e,Bnr),e(kT,Inr),e(kT,Hz),e(Hz,Nnr),e(kT,qnr),e(po,jnr),e(po,ST),e(ST,Dnr),e(ST,y2e),e(y2e,Gnr),e(ST,Onr),e(ST,L2e),e(L2e,Vnr),e(po,Xnr),M(RT,po,null),b(f,pje,u),b(f,xd,u),e(xd,PT),e(PT,x2e),M(WL,x2e,null),e(xd,znr),e(xd,$2e),e($2e,Wnr),b(f,_je,u),b(f,Qo,u),M(QL,Qo,null),e(Qo,Qnr),e(Qo,$d),e($d,Hnr),e($d,Uz),e(Uz,Unr),e($d,Jnr),e($d,Jz),e(Jz,Ynr),e($d,Knr),e(Qo,Znr),e(Qo,HL),e(HL,esr),e(HL,k2e),e(k2e,osr),e(HL,rsr),e(Qo,tsr),e(Qo,Et),M(UL,Et,null),e(Et,asr),e(Et,S2e),e(S2e,nsr),e(Et,ssr),e(Et,kd),e(kd,lsr),e(kd,R2e),e(R2e,isr),e(kd,dsr),e(kd,Yz),e(Yz,csr),e(kd,fsr),e(Et,msr),M(BT,Et,null),e(Qo,gsr),e(Qo,_o),M(JL,_o,null),e(_o,hsr),e(_o,P2e),e(P2e,psr),e(_o,_sr),e(_o,Qa),e(Qa,usr),e(Qa,B2e),e(B2e,bsr),e(Qa,vsr),e(Qa,I2e),e(I2e,Fsr),e(Qa,Tsr),e(Qa,N2e),e(N2e,Msr),e(Qa,Esr),e(_o,Csr),e(_o,YL),e(YL,IT),e(IT,q2e),e(q2e,wsr),e(IT,Asr),e(IT,Kz),e(Kz,ysr),e(IT,Lsr),e(YL,xsr),e(YL,NT),e(NT,j2e),e(j2e,$sr),e(NT,ksr),e(NT,Zz),e(Zz,Ssr),e(NT,Rsr),e(_o,Psr),e(_o,qT),e(qT,Bsr),e(qT,D2e),e(D2e,Isr),e(qT,Nsr),e(qT,G2e),e(G2e,qsr),e(_o,jsr),M(jT,_o,null),b(f,uje,u),b(f,Sd,u),e(Sd,DT),e(DT,O2e),M(KL,O2e,null),e(Sd,Dsr),e(Sd,V2e),e(V2e,Gsr),b(f,bje,u),b(f,Ho,u),M(ZL,Ho,null),e(Ho,Osr),e(Ho,Rd),e(Rd,Vsr),e(Rd,eW),e(eW,Xsr),e(Rd,zsr),e(Rd,oW),e(oW,Wsr),e(Rd,Qsr),e(Ho,Hsr),e(Ho,e8),e(e8,Usr),e(e8,X2e),e(X2e,Jsr),e(e8,Ysr),e(Ho,Ksr),e(Ho,Ct),M(o8,Ct,null),e(Ct,Zsr),e(Ct,z2e),e(z2e,elr),e(Ct,olr),e(Ct,Pd),e(Pd,rlr),e(Pd,W2e),e(W2e,tlr),e(Pd,alr),e(Pd,rW),e(rW,nlr),e(Pd,slr),e(Ct,llr),M(GT,Ct,null),e(Ho,ilr),e(Ho,uo),M(r8,uo,null),e(uo,dlr),e(uo,Q2e),e(Q2e,clr),e(uo,flr),e(uo,Ha),e(Ha,mlr),e(Ha,H2e),e(H2e,glr),e(Ha,hlr),e(Ha,U2e),e(U2e,plr),e(Ha,_lr),e(Ha,J2e),e(J2e,ulr),e(Ha,blr),e(uo,vlr),e(uo,Y2e),e(Y2e,OT),e(OT,K2e),e(K2e,Flr),e(OT,Tlr),e(OT,tW),e(tW,Mlr),e(OT,Elr),e(uo,Clr),e(uo,VT),e(VT,wlr),e(VT,Z2e),e(Z2e,Alr),e(VT,ylr),e(VT,e1e),e(e1e,Llr),e(uo,xlr),M(XT,uo,null),b(f,vje,u),b(f,Bd,u),e(Bd,zT),e(zT,o1e),M(t8,o1e,null),e(Bd,$lr),e(Bd,r1e),e(r1e,klr),b(f,Fje,u),b(f,Uo,u),M(a8,Uo,null),e(Uo,Slr),e(Uo,Id),e(Id,Rlr),e(Id,aW),e(aW,Plr),e(Id,Blr),e(Id,nW),e(nW,Ilr),e(Id,Nlr),e(Uo,qlr),e(Uo,n8),e(n8,jlr),e(n8,t1e),e(t1e,Dlr),e(n8,Glr),e(Uo,Olr),e(Uo,wt),M(s8,wt,null),e(wt,Vlr),e(wt,a1e),e(a1e,Xlr),e(wt,zlr),e(wt,Nd),e(Nd,Wlr),e(Nd,n1e),e(n1e,Qlr),e(Nd,Hlr),e(Nd,sW),e(sW,Ulr),e(Nd,Jlr),e(wt,Ylr),M(WT,wt,null),e(Uo,Klr),e(Uo,bo),M(l8,bo,null),e(bo,Zlr),e(bo,s1e),e(s1e,eir),e(bo,oir),e(bo,Ua),e(Ua,rir),e(Ua,l1e),e(l1e,tir),e(Ua,air),e(Ua,i1e),e(i1e,nir),e(Ua,sir),e(Ua,d1e),e(d1e,lir),e(Ua,iir),e(bo,dir),e(bo,Ja),e(Ja,QT),e(QT,c1e),e(c1e,cir),e(QT,fir),e(QT,lW),e(lW,mir),e(QT,gir),e(Ja,hir),e(Ja,HT),e(HT,f1e),e(f1e,pir),e(HT,_ir),e(HT,iW),e(iW,uir),e(HT,bir),e(Ja,vir),e(Ja,UT),e(UT,m1e),e(m1e,Fir),e(UT,Tir),e(UT,dW),e(dW,Mir),e(UT,Eir),e(Ja,Cir),e(Ja,JT),e(JT,g1e),e(g1e,wir),e(JT,Air),e(JT,cW),e(cW,yir),e(JT,Lir),e(bo,xir),e(bo,YT),e(YT,$ir),e(YT,h1e),e(h1e,kir),e(YT,Sir),e(YT,p1e),e(p1e,Rir),e(bo,Pir),M(KT,bo,null),b(f,Tje,u),b(f,qd,u),e(qd,ZT),e(ZT,_1e),M(i8,_1e,null),e(qd,Bir),e(qd,u1e),e(u1e,Iir),b(f,Mje,u),b(f,Jo,u),M(d8,Jo,null),e(Jo,Nir),e(Jo,jd),e(jd,qir),e(jd,fW),e(fW,jir),e(jd,Dir),e(jd,mW),e(mW,Gir),e(jd,Oir),e(Jo,Vir),e(Jo,c8),e(c8,Xir),e(c8,b1e),e(b1e,zir),e(c8,Wir),e(Jo,Qir),e(Jo,At),M(f8,At,null),e(At,Hir),e(At,v1e),e(v1e,Uir),e(At,Jir),e(At,Dd),e(Dd,Yir),e(Dd,F1e),e(F1e,Kir),e(Dd,Zir),e(Dd,gW),e(gW,edr),e(Dd,odr),e(At,rdr),M(e7,At,null),e(Jo,tdr),e(Jo,vo),M(m8,vo,null),e(vo,adr),e(vo,T1e),e(T1e,ndr),e(vo,sdr),e(vo,Ya),e(Ya,ldr),e(Ya,M1e),e(M1e,idr),e(Ya,ddr),e(Ya,E1e),e(E1e,cdr),e(Ya,fdr),e(Ya,C1e),e(C1e,mdr),e(Ya,gdr),e(vo,hdr),e(vo,w1e),e(w1e,o7),e(o7,A1e),e(A1e,pdr),e(o7,_dr),e(o7,hW),e(hW,udr),e(o7,bdr),e(vo,vdr),e(vo,r7),e(r7,Fdr),e(r7,y1e),e(y1e,Tdr),e(r7,Mdr),e(r7,L1e),e(L1e,Edr),e(vo,Cdr),M(t7,vo,null),b(f,Eje,u),b(f,Gd,u),e(Gd,a7),e(a7,x1e),M(g8,x1e,null),e(Gd,wdr),e(Gd,$1e),e($1e,Adr),b(f,Cje,u),b(f,Yo,u),M(h8,Yo,null),e(Yo,ydr),e(Yo,Od),e(Od,Ldr),e(Od,pW),e(pW,xdr),e(Od,$dr),e(Od,_W),e(_W,kdr),e(Od,Sdr),e(Yo,Rdr),e(Yo,p8),e(p8,Pdr),e(p8,k1e),e(k1e,Bdr),e(p8,Idr),e(Yo,Ndr),e(Yo,yt),M(_8,yt,null),e(yt,qdr),e(yt,S1e),e(S1e,jdr),e(yt,Ddr),e(yt,Vd),e(Vd,Gdr),e(Vd,R1e),e(R1e,Odr),e(Vd,Vdr),e(Vd,uW),e(uW,Xdr),e(Vd,zdr),e(yt,Wdr),M(n7,yt,null),e(Yo,Qdr),e(Yo,wr),M(u8,wr,null),e(wr,Hdr),e(wr,P1e),e(P1e,Udr),e(wr,Jdr),e(wr,Ka),e(Ka,Ydr),e(Ka,B1e),e(B1e,Kdr),e(Ka,Zdr),e(Ka,I1e),e(I1e,ecr),e(Ka,ocr),e(Ka,N1e),e(N1e,rcr),e(Ka,tcr),e(wr,acr),e(wr,q),e(q,s7),e(s7,q1e),e(q1e,ncr),e(s7,scr),e(s7,bW),e(bW,lcr),e(s7,icr),e(q,dcr),e(q,l7),e(l7,j1e),e(j1e,ccr),e(l7,fcr),e(l7,vW),e(vW,mcr),e(l7,gcr),e(q,hcr),e(q,i7),e(i7,D1e),e(D1e,pcr),e(i7,_cr),e(i7,FW),e(FW,ucr),e(i7,bcr),e(q,vcr),e(q,d7),e(d7,G1e),e(G1e,Fcr),e(d7,Tcr),e(d7,TW),e(TW,Mcr),e(d7,Ecr),e(q,Ccr),e(q,c7),e(c7,O1e),e(O1e,wcr),e(c7,Acr),e(c7,MW),e(MW,ycr),e(c7,Lcr),e(q,xcr),e(q,f7),e(f7,V1e),e(V1e,$cr),e(f7,kcr),e(f7,EW),e(EW,Scr),e(f7,Rcr),e(q,Pcr),e(q,m7),e(m7,X1e),e(X1e,Bcr),e(m7,Icr),e(m7,CW),e(CW,Ncr),e(m7,qcr),e(q,jcr),e(q,g7),e(g7,z1e),e(z1e,Dcr),e(g7,Gcr),e(g7,wW),e(wW,Ocr),e(g7,Vcr),e(q,Xcr),e(q,h7),e(h7,W1e),e(W1e,zcr),e(h7,Wcr),e(h7,AW),e(AW,Qcr),e(h7,Hcr),e(q,Ucr),e(q,p7),e(p7,Q1e),e(Q1e,Jcr),e(p7,Ycr),e(p7,yW),e(yW,Kcr),e(p7,Zcr),e(q,efr),e(q,_7),e(_7,H1e),e(H1e,ofr),e(_7,rfr),e(_7,LW),e(LW,tfr),e(_7,afr),e(q,nfr),e(q,u7),e(u7,U1e),e(U1e,sfr),e(u7,lfr),e(u7,xW),e(xW,ifr),e(u7,dfr),e(q,cfr),e(q,b7),e(b7,J1e),e(J1e,ffr),e(b7,mfr),e(b7,$W),e($W,gfr),e(b7,hfr),e(q,pfr),e(q,v7),e(v7,Y1e),e(Y1e,_fr),e(v7,ufr),e(v7,kW),e(kW,bfr),e(v7,vfr),e(q,Ffr),e(q,F7),e(F7,K1e),e(K1e,Tfr),e(F7,Mfr),e(F7,SW),e(SW,Efr),e(F7,Cfr),e(q,wfr),e(q,T7),e(T7,Z1e),e(Z1e,Afr),e(T7,yfr),e(T7,RW),e(RW,Lfr),e(T7,xfr),e(q,$fr),e(q,M7),e(M7,ebe),e(ebe,kfr),e(M7,Sfr),e(M7,PW),e(PW,Rfr),e(M7,Pfr),e(q,Bfr),e(q,Is),e(Is,obe),e(obe,Ifr),e(Is,Nfr),e(Is,BW),e(BW,qfr),e(Is,jfr),e(Is,IW),e(IW,Dfr),e(Is,Gfr),e(q,Ofr),e(q,E7),e(E7,rbe),e(rbe,Vfr),e(E7,Xfr),e(E7,NW),e(NW,zfr),e(E7,Wfr),e(q,Qfr),e(q,C7),e(C7,tbe),e(tbe,Hfr),e(C7,Ufr),e(C7,qW),e(qW,Jfr),e(C7,Yfr),e(q,Kfr),e(q,w7),e(w7,abe),e(abe,Zfr),e(w7,emr),e(w7,jW),e(jW,omr),e(w7,rmr),e(q,tmr),e(q,A7),e(A7,nbe),e(nbe,amr),e(A7,nmr),e(A7,DW),e(DW,smr),e(A7,lmr),e(q,imr),e(q,y7),e(y7,sbe),e(sbe,dmr),e(y7,cmr),e(y7,GW),e(GW,fmr),e(y7,mmr),e(q,gmr),e(q,L7),e(L7,lbe),e(lbe,hmr),e(L7,pmr),e(L7,OW),e(OW,_mr),e(L7,umr),e(q,bmr),e(q,x7),e(x7,ibe),e(ibe,vmr),e(x7,Fmr),e(x7,VW),e(VW,Tmr),e(x7,Mmr),e(q,Emr),e(q,$7),e($7,dbe),e(dbe,Cmr),e($7,wmr),e($7,XW),e(XW,Amr),e($7,ymr),e(q,Lmr),e(q,k7),e(k7,cbe),e(cbe,xmr),e(k7,$mr),e(k7,zW),e(zW,kmr),e(k7,Smr),e(q,Rmr),e(q,S7),e(S7,fbe),e(fbe,Pmr),e(S7,Bmr),e(S7,WW),e(WW,Imr),e(S7,Nmr),e(q,qmr),e(q,R7),e(R7,mbe),e(mbe,jmr),e(R7,Dmr),e(R7,QW),e(QW,Gmr),e(R7,Omr),e(q,Vmr),e(q,P7),e(P7,gbe),e(gbe,Xmr),e(P7,zmr),e(P7,HW),e(HW,Wmr),e(P7,Qmr),e(q,Hmr),e(q,B7),e(B7,hbe),e(hbe,Umr),e(B7,Jmr),e(B7,UW),e(UW,Ymr),e(B7,Kmr),e(q,Zmr),e(q,I7),e(I7,pbe),e(pbe,egr),e(I7,ogr),e(I7,JW),e(JW,rgr),e(I7,tgr),e(q,agr),e(q,N7),e(N7,_be),e(_be,ngr),e(N7,sgr),e(N7,YW),e(YW,lgr),e(N7,igr),e(q,dgr),e(q,q7),e(q7,ube),e(ube,cgr),e(q7,fgr),e(q7,KW),e(KW,mgr),e(q7,ggr),e(q,hgr),e(q,j7),e(j7,bbe),e(bbe,pgr),e(j7,_gr),e(j7,ZW),e(ZW,ugr),e(j7,bgr),e(q,vgr),e(q,D7),e(D7,vbe),e(vbe,Fgr),e(D7,Tgr),e(D7,eQ),e(eQ,Mgr),e(D7,Egr),e(q,Cgr),e(q,G7),e(G7,Fbe),e(Fbe,wgr),e(G7,Agr),e(G7,oQ),e(oQ,ygr),e(G7,Lgr),e(q,xgr),e(q,O7),e(O7,Tbe),e(Tbe,$gr),e(O7,kgr),e(O7,rQ),e(rQ,Sgr),e(O7,Rgr),e(q,Pgr),e(q,V7),e(V7,Mbe),e(Mbe,Bgr),e(V7,Igr),e(V7,tQ),e(tQ,Ngr),e(V7,qgr),e(q,jgr),e(q,X7),e(X7,Ebe),e(Ebe,Dgr),e(X7,Ggr),e(X7,aQ),e(aQ,Ogr),e(X7,Vgr),e(q,Xgr),e(q,z7),e(z7,Cbe),e(Cbe,zgr),e(z7,Wgr),e(z7,nQ),e(nQ,Qgr),e(z7,Hgr),e(q,Ugr),e(q,W7),e(W7,wbe),e(wbe,Jgr),e(W7,Ygr),e(W7,sQ),e(sQ,Kgr),e(W7,Zgr),e(q,ehr),e(q,Q7),e(Q7,Abe),e(Abe,ohr),e(Q7,rhr),e(Q7,lQ),e(lQ,thr),e(Q7,ahr),e(q,nhr),e(q,H7),e(H7,ybe),e(ybe,shr),e(H7,lhr),e(H7,iQ),e(iQ,ihr),e(H7,dhr),e(q,chr),e(q,U7),e(U7,Lbe),e(Lbe,fhr),e(U7,mhr),e(U7,dQ),e(dQ,ghr),e(U7,hhr),e(q,phr),e(q,J7),e(J7,xbe),e(xbe,_hr),e(J7,uhr),e(J7,cQ),e(cQ,bhr),e(J7,vhr),e(wr,Fhr),M(Y7,wr,null),b(f,wje,u),b(f,Xd,u),e(Xd,K7),e(K7,$be),M(b8,$be,null),e(Xd,Thr),e(Xd,kbe),e(kbe,Mhr),b(f,Aje,u),b(f,Ko,u),M(v8,Ko,null),e(Ko,Ehr),e(Ko,zd),e(zd,Chr),e(zd,fQ),e(fQ,whr),e(zd,Ahr),e(zd,mQ),e(mQ,yhr),e(zd,Lhr),e(Ko,xhr),e(Ko,F8),e(F8,$hr),e(F8,Sbe),e(Sbe,khr),e(F8,Shr),e(Ko,Rhr),e(Ko,Lt),M(T8,Lt,null),e(Lt,Phr),e(Lt,Rbe),e(Rbe,Bhr),e(Lt,Ihr),e(Lt,Wd),e(Wd,Nhr),e(Wd,Pbe),e(Pbe,qhr),e(Wd,jhr),e(Wd,gQ),e(gQ,Dhr),e(Wd,Ghr),e(Lt,Ohr),M(Z7,Lt,null),e(Ko,Vhr),e(Ko,Ar),M(M8,Ar,null),e(Ar,Xhr),e(Ar,Bbe),e(Bbe,zhr),e(Ar,Whr),e(Ar,Za),e(Za,Qhr),e(Za,Ibe),e(Ibe,Hhr),e(Za,Uhr),e(Za,Nbe),e(Nbe,Jhr),e(Za,Yhr),e(Za,qbe),e(qbe,Khr),e(Za,Zhr),e(Ar,epr),e(Ar,se),e(se,eM),e(eM,jbe),e(jbe,opr),e(eM,rpr),e(eM,hQ),e(hQ,tpr),e(eM,apr),e(se,npr),e(se,oM),e(oM,Dbe),e(Dbe,spr),e(oM,lpr),e(oM,pQ),e(pQ,ipr),e(oM,dpr),e(se,cpr),e(se,rM),e(rM,Gbe),e(Gbe,fpr),e(rM,mpr),e(rM,_Q),e(_Q,gpr),e(rM,hpr),e(se,ppr),e(se,tM),e(tM,Obe),e(Obe,_pr),e(tM,upr),e(tM,uQ),e(uQ,bpr),e(tM,vpr),e(se,Fpr),e(se,aM),e(aM,Vbe),e(Vbe,Tpr),e(aM,Mpr),e(aM,bQ),e(bQ,Epr),e(aM,Cpr),e(se,wpr),e(se,nM),e(nM,Xbe),e(Xbe,Apr),e(nM,ypr),e(nM,vQ),e(vQ,Lpr),e(nM,xpr),e(se,$pr),e(se,sM),e(sM,zbe),e(zbe,kpr),e(sM,Spr),e(sM,FQ),e(FQ,Rpr),e(sM,Ppr),e(se,Bpr),e(se,lM),e(lM,Wbe),e(Wbe,Ipr),e(lM,Npr),e(lM,TQ),e(TQ,qpr),e(lM,jpr),e(se,Dpr),e(se,iM),e(iM,Qbe),e(Qbe,Gpr),e(iM,Opr),e(iM,MQ),e(MQ,Vpr),e(iM,Xpr),e(se,zpr),e(se,dM),e(dM,Hbe),e(Hbe,Wpr),e(dM,Qpr),e(dM,EQ),e(EQ,Hpr),e(dM,Upr),e(se,Jpr),e(se,cM),e(cM,Ube),e(Ube,Ypr),e(cM,Kpr),e(cM,CQ),e(CQ,Zpr),e(cM,e_r),e(se,o_r),e(se,fM),e(fM,Jbe),e(Jbe,r_r),e(fM,t_r),e(fM,wQ),e(wQ,a_r),e(fM,n_r),e(se,s_r),e(se,mM),e(mM,Ybe),e(Ybe,l_r),e(mM,i_r),e(mM,AQ),e(AQ,d_r),e(mM,c_r),e(se,f_r),e(se,gM),e(gM,Kbe),e(Kbe,m_r),e(gM,g_r),e(gM,yQ),e(yQ,h_r),e(gM,p_r),e(se,__r),e(se,hM),e(hM,Zbe),e(Zbe,u_r),e(hM,b_r),e(hM,LQ),e(LQ,v_r),e(hM,F_r),e(se,T_r),e(se,pM),e(pM,eve),e(eve,M_r),e(pM,E_r),e(pM,xQ),e(xQ,C_r),e(pM,w_r),e(se,A_r),e(se,_M),e(_M,ove),e(ove,y_r),e(_M,L_r),e(_M,$Q),e($Q,x_r),e(_M,$_r),e(se,k_r),e(se,uM),e(uM,rve),e(rve,S_r),e(uM,R_r),e(uM,kQ),e(kQ,P_r),e(uM,B_r),e(se,I_r),e(se,bM),e(bM,tve),e(tve,N_r),e(bM,q_r),e(bM,SQ),e(SQ,j_r),e(bM,D_r),e(se,G_r),e(se,vM),e(vM,ave),e(ave,O_r),e(vM,V_r),e(vM,RQ),e(RQ,X_r),e(vM,z_r),e(se,W_r),e(se,FM),e(FM,nve),e(nve,Q_r),e(FM,H_r),e(FM,PQ),e(PQ,U_r),e(FM,J_r),e(se,Y_r),e(se,TM),e(TM,sve),e(sve,K_r),e(TM,Z_r),e(TM,BQ),e(BQ,eur),e(TM,our),e(se,rur),e(se,MM),e(MM,lve),e(lve,tur),e(MM,aur),e(MM,IQ),e(IQ,nur),e(MM,sur),e(Ar,lur),M(EM,Ar,null),b(f,yje,u),b(f,Qd,u),e(Qd,CM),e(CM,ive),M(E8,ive,null),e(Qd,iur),e(Qd,dve),e(dve,dur),b(f,Lje,u),b(f,Zo,u),M(C8,Zo,null),e(Zo,cur),e(Zo,Hd),e(Hd,fur),e(Hd,NQ),e(NQ,mur),e(Hd,gur),e(Hd,qQ),e(qQ,hur),e(Hd,pur),e(Zo,_ur),e(Zo,w8),e(w8,uur),e(w8,cve),e(cve,bur),e(w8,vur),e(Zo,Fur),e(Zo,xt),M(A8,xt,null),e(xt,Tur),e(xt,fve),e(fve,Mur),e(xt,Eur),e(xt,Ud),e(Ud,Cur),e(Ud,mve),e(mve,wur),e(Ud,Aur),e(Ud,jQ),e(jQ,yur),e(Ud,Lur),e(xt,xur),M(wM,xt,null),e(Zo,$ur),e(Zo,yr),M(y8,yr,null),e(yr,kur),e(yr,gve),e(gve,Sur),e(yr,Rur),e(yr,en),e(en,Pur),e(en,hve),e(hve,Bur),e(en,Iur),e(en,pve),e(pve,Nur),e(en,qur),e(en,_ve),e(_ve,jur),e(en,Dur),e(yr,Gur),e(yr,Me),e(Me,AM),e(AM,uve),e(uve,Our),e(AM,Vur),e(AM,DQ),e(DQ,Xur),e(AM,zur),e(Me,Wur),e(Me,yM),e(yM,bve),e(bve,Qur),e(yM,Hur),e(yM,GQ),e(GQ,Uur),e(yM,Jur),e(Me,Yur),e(Me,LM),e(LM,vve),e(vve,Kur),e(LM,Zur),e(LM,OQ),e(OQ,e2r),e(LM,o2r),e(Me,r2r),e(Me,xM),e(xM,Fve),e(Fve,t2r),e(xM,a2r),e(xM,VQ),e(VQ,n2r),e(xM,s2r),e(Me,l2r),e(Me,$M),e($M,Tve),e(Tve,i2r),e($M,d2r),e($M,XQ),e(XQ,c2r),e($M,f2r),e(Me,m2r),e(Me,kM),e(kM,Mve),e(Mve,g2r),e(kM,h2r),e(kM,zQ),e(zQ,p2r),e(kM,_2r),e(Me,u2r),e(Me,SM),e(SM,Eve),e(Eve,b2r),e(SM,v2r),e(SM,WQ),e(WQ,F2r),e(SM,T2r),e(Me,M2r),e(Me,RM),e(RM,Cve),e(Cve,E2r),e(RM,C2r),e(RM,QQ),e(QQ,w2r),e(RM,A2r),e(Me,y2r),e(Me,PM),e(PM,wve),e(wve,L2r),e(PM,x2r),e(PM,HQ),e(HQ,$2r),e(PM,k2r),e(Me,S2r),e(Me,BM),e(BM,Ave),e(Ave,R2r),e(BM,P2r),e(BM,UQ),e(UQ,B2r),e(BM,I2r),e(Me,N2r),e(Me,IM),e(IM,yve),e(yve,q2r),e(IM,j2r),e(IM,JQ),e(JQ,D2r),e(IM,G2r),e(Me,O2r),e(Me,NM),e(NM,Lve),e(Lve,V2r),e(NM,X2r),e(NM,YQ),e(YQ,z2r),e(NM,W2r),e(yr,Q2r),M(qM,yr,null),b(f,xje,u),b(f,Jd,u),e(Jd,jM),e(jM,xve),M(L8,xve,null),e(Jd,H2r),e(Jd,$ve),e($ve,U2r),b(f,$je,u),b(f,er,u),M(x8,er,null),e(er,J2r),e(er,Yd),e(Yd,Y2r),e(Yd,KQ),e(KQ,K2r),e(Yd,Z2r),e(Yd,ZQ),e(ZQ,e1r),e(Yd,o1r),e(er,r1r),e(er,$8),e($8,t1r),e($8,kve),e(kve,a1r),e($8,n1r),e(er,s1r),e(er,$t),M(k8,$t,null),e($t,l1r),e($t,Sve),e(Sve,i1r),e($t,d1r),e($t,Kd),e(Kd,c1r),e(Kd,Rve),e(Rve,f1r),e(Kd,m1r),e(Kd,eH),e(eH,g1r),e(Kd,h1r),e($t,p1r),M(DM,$t,null),e(er,_1r),e(er,Lr),M(S8,Lr,null),e(Lr,u1r),e(Lr,Pve),e(Pve,b1r),e(Lr,v1r),e(Lr,on),e(on,F1r),e(on,Bve),e(Bve,T1r),e(on,M1r),e(on,Ive),e(Ive,E1r),e(on,C1r),e(on,Nve),e(Nve,w1r),e(on,A1r),e(Lr,y1r),e(Lr,rn),e(rn,GM),e(GM,qve),e(qve,L1r),e(GM,x1r),e(GM,oH),e(oH,$1r),e(GM,k1r),e(rn,S1r),e(rn,OM),e(OM,jve),e(jve,R1r),e(OM,P1r),e(OM,rH),e(rH,B1r),e(OM,I1r),e(rn,N1r),e(rn,VM),e(VM,Dve),e(Dve,q1r),e(VM,j1r),e(VM,tH),e(tH,D1r),e(VM,G1r),e(rn,O1r),e(rn,XM),e(XM,Gve),e(Gve,V1r),e(XM,X1r),e(XM,aH),e(aH,z1r),e(XM,W1r),e(Lr,Q1r),M(zM,Lr,null),b(f,kje,u),b(f,Zd,u),e(Zd,WM),e(WM,Ove),M(R8,Ove,null),e(Zd,H1r),e(Zd,Vve),e(Vve,U1r),b(f,Sje,u),b(f,or,u),M(P8,or,null),e(or,J1r),e(or,ec),e(ec,Y1r),e(ec,nH),e(nH,K1r),e(ec,Z1r),e(ec,sH),e(sH,ebr),e(ec,obr),e(or,rbr),e(or,B8),e(B8,tbr),e(B8,Xve),e(Xve,abr),e(B8,nbr),e(or,sbr),e(or,kt),M(I8,kt,null),e(kt,lbr),e(kt,zve),e(zve,ibr),e(kt,dbr),e(kt,oc),e(oc,cbr),e(oc,Wve),e(Wve,fbr),e(oc,mbr),e(oc,lH),e(lH,gbr),e(oc,hbr),e(kt,pbr),M(QM,kt,null),e(or,_br),e(or,xr),M(N8,xr,null),e(xr,ubr),e(xr,Qve),e(Qve,bbr),e(xr,vbr),e(xr,tn),e(tn,Fbr),e(tn,Hve),e(Hve,Tbr),e(tn,Mbr),e(tn,Uve),e(Uve,Ebr),e(tn,Cbr),e(tn,Jve),e(Jve,wbr),e(tn,Abr),e(xr,ybr),e(xr,ie),e(ie,HM),e(HM,Yve),e(Yve,Lbr),e(HM,xbr),e(HM,iH),e(iH,$br),e(HM,kbr),e(ie,Sbr),e(ie,UM),e(UM,Kve),e(Kve,Rbr),e(UM,Pbr),e(UM,dH),e(dH,Bbr),e(UM,Ibr),e(ie,Nbr),e(ie,JM),e(JM,Zve),e(Zve,qbr),e(JM,jbr),e(JM,cH),e(cH,Dbr),e(JM,Gbr),e(ie,Obr),e(ie,YM),e(YM,e0e),e(e0e,Vbr),e(YM,Xbr),e(YM,fH),e(fH,zbr),e(YM,Wbr),e(ie,Qbr),e(ie,KM),e(KM,o0e),e(o0e,Hbr),e(KM,Ubr),e(KM,mH),e(mH,Jbr),e(KM,Ybr),e(ie,Kbr),e(ie,ZM),e(ZM,r0e),e(r0e,Zbr),e(ZM,evr),e(ZM,gH),e(gH,ovr),e(ZM,rvr),e(ie,tvr),e(ie,e4),e(e4,t0e),e(t0e,avr),e(e4,nvr),e(e4,hH),e(hH,svr),e(e4,lvr),e(ie,ivr),e(ie,o4),e(o4,a0e),e(a0e,dvr),e(o4,cvr),e(o4,pH),e(pH,fvr),e(o4,mvr),e(ie,gvr),e(ie,r4),e(r4,n0e),e(n0e,hvr),e(r4,pvr),e(r4,_H),e(_H,_vr),e(r4,uvr),e(ie,bvr),e(ie,t4),e(t4,s0e),e(s0e,vvr),e(t4,Fvr),e(t4,uH),e(uH,Tvr),e(t4,Mvr),e(ie,Evr),e(ie,a4),e(a4,l0e),e(l0e,Cvr),e(a4,wvr),e(a4,bH),e(bH,Avr),e(a4,yvr),e(ie,Lvr),e(ie,n4),e(n4,i0e),e(i0e,xvr),e(n4,$vr),e(n4,vH),e(vH,kvr),e(n4,Svr),e(ie,Rvr),e(ie,s4),e(s4,d0e),e(d0e,Pvr),e(s4,Bvr),e(s4,FH),e(FH,Ivr),e(s4,Nvr),e(ie,qvr),e(ie,l4),e(l4,c0e),e(c0e,jvr),e(l4,Dvr),e(l4,TH),e(TH,Gvr),e(l4,Ovr),e(ie,Vvr),e(ie,i4),e(i4,f0e),e(f0e,Xvr),e(i4,zvr),e(i4,MH),e(MH,Wvr),e(i4,Qvr),e(ie,Hvr),e(ie,d4),e(d4,m0e),e(m0e,Uvr),e(d4,Jvr),e(d4,EH),e(EH,Yvr),e(d4,Kvr),e(ie,Zvr),e(ie,c4),e(c4,g0e),e(g0e,e0r),e(c4,o0r),e(c4,CH),e(CH,r0r),e(c4,t0r),e(ie,a0r),e(ie,f4),e(f4,h0e),e(h0e,n0r),e(f4,s0r),e(f4,wH),e(wH,l0r),e(f4,i0r),e(ie,d0r),e(ie,m4),e(m4,p0e),e(p0e,c0r),e(m4,f0r),e(m4,AH),e(AH,m0r),e(m4,g0r),e(ie,h0r),e(ie,g4),e(g4,_0e),e(_0e,p0r),e(g4,_0r),e(g4,yH),e(yH,u0r),e(g4,b0r),e(xr,v0r),M(h4,xr,null),b(f,Rje,u),b(f,rc,u),e(rc,p4),e(p4,u0e),M(q8,u0e,null),e(rc,F0r),e(rc,b0e),e(b0e,T0r),b(f,Pje,u),b(f,rr,u),M(j8,rr,null),e(rr,M0r),e(rr,tc),e(tc,E0r),e(tc,LH),e(LH,C0r),e(tc,w0r),e(tc,xH),e(xH,A0r),e(tc,y0r),e(rr,L0r),e(rr,D8),e(D8,x0r),e(D8,v0e),e(v0e,$0r),e(D8,k0r),e(rr,S0r),e(rr,St),M(G8,St,null),e(St,R0r),e(St,F0e),e(F0e,P0r),e(St,B0r),e(St,ac),e(ac,I0r),e(ac,T0e),e(T0e,N0r),e(ac,q0r),e(ac,$H),e($H,j0r),e(ac,D0r),e(St,G0r),M(_4,St,null),e(rr,O0r),e(rr,$r),M(O8,$r,null),e($r,V0r),e($r,M0e),e(M0e,X0r),e($r,z0r),e($r,an),e(an,W0r),e(an,E0e),e(E0e,Q0r),e(an,H0r),e(an,C0e),e(C0e,U0r),e(an,J0r),e(an,w0e),e(w0e,Y0r),e(an,K0r),e($r,Z0r),e($r,ye),e(ye,u4),e(u4,A0e),e(A0e,eFr),e(u4,oFr),e(u4,kH),e(kH,rFr),e(u4,tFr),e(ye,aFr),e(ye,b4),e(b4,y0e),e(y0e,nFr),e(b4,sFr),e(b4,SH),e(SH,lFr),e(b4,iFr),e(ye,dFr),e(ye,v4),e(v4,L0e),e(L0e,cFr),e(v4,fFr),e(v4,RH),e(RH,mFr),e(v4,gFr),e(ye,hFr),e(ye,F4),e(F4,x0e),e(x0e,pFr),e(F4,_Fr),e(F4,PH),e(PH,uFr),e(F4,bFr),e(ye,vFr),e(ye,T4),e(T4,$0e),e($0e,FFr),e(T4,TFr),e(T4,BH),e(BH,MFr),e(T4,EFr),e(ye,CFr),e(ye,M4),e(M4,k0e),e(k0e,wFr),e(M4,AFr),e(M4,IH),e(IH,yFr),e(M4,LFr),e(ye,xFr),e(ye,E4),e(E4,S0e),e(S0e,$Fr),e(E4,kFr),e(E4,NH),e(NH,SFr),e(E4,RFr),e(ye,PFr),e(ye,C4),e(C4,R0e),e(R0e,BFr),e(C4,IFr),e(C4,qH),e(qH,NFr),e(C4,qFr),e(ye,jFr),e(ye,w4),e(w4,P0e),e(P0e,DFr),e(w4,GFr),e(w4,jH),e(jH,OFr),e(w4,VFr),e(ye,XFr),e(ye,A4),e(A4,B0e),e(B0e,zFr),e(A4,WFr),e(A4,DH),e(DH,QFr),e(A4,HFr),e($r,UFr),M(y4,$r,null),b(f,Bje,u),b(f,nc,u),e(nc,L4),e(L4,I0e),M(V8,I0e,null),e(nc,JFr),e(nc,N0e),e(N0e,YFr),b(f,Ije,u),b(f,tr,u),M(X8,tr,null),e(tr,KFr),e(tr,sc),e(sc,ZFr),e(sc,GH),e(GH,eTr),e(sc,oTr),e(sc,OH),e(OH,rTr),e(sc,tTr),e(tr,aTr),e(tr,z8),e(z8,nTr),e(z8,q0e),e(q0e,sTr),e(z8,lTr),e(tr,iTr),e(tr,Rt),M(W8,Rt,null),e(Rt,dTr),e(Rt,j0e),e(j0e,cTr),e(Rt,fTr),e(Rt,lc),e(lc,mTr),e(lc,D0e),e(D0e,gTr),e(lc,hTr),e(lc,VH),e(VH,pTr),e(lc,_Tr),e(Rt,uTr),M(x4,Rt,null),e(tr,bTr),e(tr,kr),M(Q8,kr,null),e(kr,vTr),e(kr,G0e),e(G0e,FTr),e(kr,TTr),e(kr,nn),e(nn,MTr),e(nn,O0e),e(O0e,ETr),e(nn,CTr),e(nn,V0e),e(V0e,wTr),e(nn,ATr),e(nn,X0e),e(X0e,yTr),e(nn,LTr),e(kr,xTr),e(kr,oe),e(oe,$4),e($4,z0e),e(z0e,$Tr),e($4,kTr),e($4,XH),e(XH,STr),e($4,RTr),e(oe,PTr),e(oe,k4),e(k4,W0e),e(W0e,BTr),e(k4,ITr),e(k4,zH),e(zH,NTr),e(k4,qTr),e(oe,jTr),e(oe,S4),e(S4,Q0e),e(Q0e,DTr),e(S4,GTr),e(S4,WH),e(WH,OTr),e(S4,VTr),e(oe,XTr),e(oe,R4),e(R4,H0e),e(H0e,zTr),e(R4,WTr),e(R4,QH),e(QH,QTr),e(R4,HTr),e(oe,UTr),e(oe,P4),e(P4,U0e),e(U0e,JTr),e(P4,YTr),e(P4,HH),e(HH,KTr),e(P4,ZTr),e(oe,e7r),e(oe,B4),e(B4,J0e),e(J0e,o7r),e(B4,r7r),e(B4,UH),e(UH,t7r),e(B4,a7r),e(oe,n7r),e(oe,I4),e(I4,Y0e),e(Y0e,s7r),e(I4,l7r),e(I4,JH),e(JH,i7r),e(I4,d7r),e(oe,c7r),e(oe,N4),e(N4,K0e),e(K0e,f7r),e(N4,m7r),e(N4,YH),e(YH,g7r),e(N4,h7r),e(oe,p7r),e(oe,q4),e(q4,Z0e),e(Z0e,_7r),e(q4,u7r),e(q4,KH),e(KH,b7r),e(q4,v7r),e(oe,F7r),e(oe,j4),e(j4,eFe),e(eFe,T7r),e(j4,M7r),e(j4,ZH),e(ZH,E7r),e(j4,C7r),e(oe,w7r),e(oe,D4),e(D4,oFe),e(oFe,A7r),e(D4,y7r),e(D4,eU),e(eU,L7r),e(D4,x7r),e(oe,$7r),e(oe,G4),e(G4,rFe),e(rFe,k7r),e(G4,S7r),e(G4,oU),e(oU,R7r),e(G4,P7r),e(oe,B7r),e(oe,O4),e(O4,tFe),e(tFe,I7r),e(O4,N7r),e(O4,rU),e(rU,q7r),e(O4,j7r),e(oe,D7r),e(oe,V4),e(V4,aFe),e(aFe,G7r),e(V4,O7r),e(V4,tU),e(tU,V7r),e(V4,X7r),e(oe,z7r),e(oe,X4),e(X4,nFe),e(nFe,W7r),e(X4,Q7r),e(X4,aU),e(aU,H7r),e(X4,U7r),e(oe,J7r),e(oe,z4),e(z4,sFe),e(sFe,Y7r),e(z4,K7r),e(z4,nU),e(nU,Z7r),e(z4,eMr),e(oe,oMr),e(oe,W4),e(W4,lFe),e(lFe,rMr),e(W4,tMr),e(W4,sU),e(sU,aMr),e(W4,nMr),e(oe,sMr),e(oe,Q4),e(Q4,iFe),e(iFe,lMr),e(Q4,iMr),e(Q4,lU),e(lU,dMr),e(Q4,cMr),e(oe,fMr),e(oe,H4),e(H4,dFe),e(dFe,mMr),e(H4,gMr),e(H4,iU),e(iU,hMr),e(H4,pMr),e(oe,_Mr),e(oe,U4),e(U4,cFe),e(cFe,uMr),e(U4,bMr),e(U4,dU),e(dU,vMr),e(U4,FMr),e(oe,TMr),e(oe,J4),e(J4,fFe),e(fFe,MMr),e(J4,EMr),e(J4,cU),e(cU,CMr),e(J4,wMr),e(oe,AMr),e(oe,Y4),e(Y4,mFe),e(mFe,yMr),e(Y4,LMr),e(Y4,fU),e(fU,xMr),e(Y4,$Mr),e(oe,kMr),e(oe,K4),e(K4,gFe),e(gFe,SMr),e(K4,RMr),e(K4,mU),e(mU,PMr),e(K4,BMr),e(oe,IMr),e(oe,Z4),e(Z4,hFe),e(hFe,NMr),e(Z4,qMr),e(Z4,gU),e(gU,jMr),e(Z4,DMr),e(oe,GMr),e(oe,eE),e(eE,pFe),e(pFe,OMr),e(eE,VMr),e(eE,hU),e(hU,XMr),e(eE,zMr),e(oe,WMr),e(oe,oE),e(oE,_Fe),e(_Fe,QMr),e(oE,HMr),e(oE,pU),e(pU,UMr),e(oE,JMr),e(kr,YMr),M(rE,kr,null),b(f,Nje,u),b(f,ic,u),e(ic,tE),e(tE,uFe),M(H8,uFe,null),e(ic,KMr),e(ic,bFe),e(bFe,ZMr),b(f,qje,u),b(f,ar,u),M(U8,ar,null),e(ar,e4r),e(ar,dc),e(dc,o4r),e(dc,_U),e(_U,r4r),e(dc,t4r),e(dc,uU),e(uU,a4r),e(dc,n4r),e(ar,s4r),e(ar,J8),e(J8,l4r),e(J8,vFe),e(vFe,i4r),e(J8,d4r),e(ar,c4r),e(ar,Pt),M(Y8,Pt,null),e(Pt,f4r),e(Pt,FFe),e(FFe,m4r),e(Pt,g4r),e(Pt,cc),e(cc,h4r),e(cc,TFe),e(TFe,p4r),e(cc,_4r),e(cc,bU),e(bU,u4r),e(cc,b4r),e(Pt,v4r),M(aE,Pt,null),e(ar,F4r),e(ar,Sr),M(K8,Sr,null),e(Sr,T4r),e(Sr,MFe),e(MFe,M4r),e(Sr,E4r),e(Sr,sn),e(sn,C4r),e(sn,EFe),e(EFe,w4r),e(sn,A4r),e(sn,CFe),e(CFe,y4r),e(sn,L4r),e(sn,wFe),e(wFe,x4r),e(sn,$4r),e(Sr,k4r),e(Sr,pe),e(pe,nE),e(nE,AFe),e(AFe,S4r),e(nE,R4r),e(nE,vU),e(vU,P4r),e(nE,B4r),e(pe,I4r),e(pe,sE),e(sE,yFe),e(yFe,N4r),e(sE,q4r),e(sE,FU),e(FU,j4r),e(sE,D4r),e(pe,G4r),e(pe,lE),e(lE,LFe),e(LFe,O4r),e(lE,V4r),e(lE,TU),e(TU,X4r),e(lE,z4r),e(pe,W4r),e(pe,iE),e(iE,xFe),e(xFe,Q4r),e(iE,H4r),e(iE,MU),e(MU,U4r),e(iE,J4r),e(pe,Y4r),e(pe,dE),e(dE,$Fe),e($Fe,K4r),e(dE,Z4r),e(dE,EU),e(EU,eEr),e(dE,oEr),e(pe,rEr),e(pe,cE),e(cE,kFe),e(kFe,tEr),e(cE,aEr),e(cE,CU),e(CU,nEr),e(cE,sEr),e(pe,lEr),e(pe,fE),e(fE,SFe),e(SFe,iEr),e(fE,dEr),e(fE,wU),e(wU,cEr),e(fE,fEr),e(pe,mEr),e(pe,mE),e(mE,RFe),e(RFe,gEr),e(mE,hEr),e(mE,AU),e(AU,pEr),e(mE,_Er),e(pe,uEr),e(pe,gE),e(gE,PFe),e(PFe,bEr),e(gE,vEr),e(gE,yU),e(yU,FEr),e(gE,TEr),e(pe,MEr),e(pe,hE),e(hE,BFe),e(BFe,EEr),e(hE,CEr),e(hE,LU),e(LU,wEr),e(hE,AEr),e(pe,yEr),e(pe,pE),e(pE,IFe),e(IFe,LEr),e(pE,xEr),e(pE,xU),e(xU,$Er),e(pE,kEr),e(pe,SEr),e(pe,_E),e(_E,NFe),e(NFe,REr),e(_E,PEr),e(_E,$U),e($U,BEr),e(_E,IEr),e(pe,NEr),e(pe,uE),e(uE,qFe),e(qFe,qEr),e(uE,jEr),e(uE,kU),e(kU,DEr),e(uE,GEr),e(pe,OEr),e(pe,bE),e(bE,jFe),e(jFe,VEr),e(bE,XEr),e(bE,SU),e(SU,zEr),e(bE,WEr),e(pe,QEr),e(pe,vE),e(vE,DFe),e(DFe,HEr),e(vE,UEr),e(vE,RU),e(RU,JEr),e(vE,YEr),e(pe,KEr),e(pe,FE),e(FE,GFe),e(GFe,ZEr),e(FE,eCr),e(FE,PU),e(PU,oCr),e(FE,rCr),e(pe,tCr),e(pe,TE),e(TE,OFe),e(OFe,aCr),e(TE,nCr),e(TE,BU),e(BU,sCr),e(TE,lCr),e(Sr,iCr),M(ME,Sr,null),b(f,jje,u),b(f,fc,u),e(fc,EE),e(EE,VFe),M(Z8,VFe,null),e(fc,dCr),e(fc,XFe),e(XFe,cCr),b(f,Dje,u),b(f,nr,u),M(e9,nr,null),e(nr,fCr),e(nr,mc),e(mc,mCr),e(mc,IU),e(IU,gCr),e(mc,hCr),e(mc,NU),e(NU,pCr),e(mc,_Cr),e(nr,uCr),e(nr,o9),e(o9,bCr),e(o9,zFe),e(zFe,vCr),e(o9,FCr),e(nr,TCr),e(nr,Bt),M(r9,Bt,null),e(Bt,MCr),e(Bt,WFe),e(WFe,ECr),e(Bt,CCr),e(Bt,gc),e(gc,wCr),e(gc,QFe),e(QFe,ACr),e(gc,yCr),e(gc,qU),e(qU,LCr),e(gc,xCr),e(Bt,$Cr),M(CE,Bt,null),e(nr,kCr),e(nr,Rr),M(t9,Rr,null),e(Rr,SCr),e(Rr,HFe),e(HFe,RCr),e(Rr,PCr),e(Rr,ln),e(ln,BCr),e(ln,UFe),e(UFe,ICr),e(ln,NCr),e(ln,JFe),e(JFe,qCr),e(ln,jCr),e(ln,YFe),e(YFe,DCr),e(ln,GCr),e(Rr,OCr),e(Rr,a9),e(a9,wE),e(wE,KFe),e(KFe,VCr),e(wE,XCr),e(wE,jU),e(jU,zCr),e(wE,WCr),e(a9,QCr),e(a9,AE),e(AE,ZFe),e(ZFe,HCr),e(AE,UCr),e(AE,DU),e(DU,JCr),e(AE,YCr),e(Rr,KCr),M(yE,Rr,null),b(f,Gje,u),b(f,hc,u),e(hc,LE),e(LE,eTe),M(n9,eTe,null),e(hc,ZCr),e(hc,oTe),e(oTe,e5r),b(f,Oje,u),b(f,sr,u),M(s9,sr,null),e(sr,o5r),e(sr,pc),e(pc,r5r),e(pc,GU),e(GU,t5r),e(pc,a5r),e(pc,OU),e(OU,n5r),e(pc,s5r),e(sr,l5r),e(sr,l9),e(l9,i5r),e(l9,rTe),e(rTe,d5r),e(l9,c5r),e(sr,f5r),e(sr,It),M(i9,It,null),e(It,m5r),e(It,tTe),e(tTe,g5r),e(It,h5r),e(It,_c),e(_c,p5r),e(_c,aTe),e(aTe,_5r),e(_c,u5r),e(_c,VU),e(VU,b5r),e(_c,v5r),e(It,F5r),M(xE,It,null),e(sr,T5r),e(sr,Pr),M(d9,Pr,null),e(Pr,M5r),e(Pr,nTe),e(nTe,E5r),e(Pr,C5r),e(Pr,dn),e(dn,w5r),e(dn,sTe),e(sTe,A5r),e(dn,y5r),e(dn,lTe),e(lTe,L5r),e(dn,x5r),e(dn,iTe),e(iTe,$5r),e(dn,k5r),e(Pr,S5r),e(Pr,dTe),e(dTe,$E),e($E,cTe),e(cTe,R5r),e($E,P5r),e($E,XU),e(XU,B5r),e($E,I5r),e(Pr,N5r),M(kE,Pr,null),b(f,Vje,u),b(f,uc,u),e(uc,SE),e(SE,fTe),M(c9,fTe,null),e(uc,q5r),e(uc,mTe),e(mTe,j5r),b(f,Xje,u),b(f,lr,u),M(f9,lr,null),e(lr,D5r),e(lr,bc),e(bc,G5r),e(bc,zU),e(zU,O5r),e(bc,V5r),e(bc,WU),e(WU,X5r),e(bc,z5r),e(lr,W5r),e(lr,m9),e(m9,Q5r),e(m9,gTe),e(gTe,H5r),e(m9,U5r),e(lr,J5r),e(lr,Nt),M(g9,Nt,null),e(Nt,Y5r),e(Nt,hTe),e(hTe,K5r),e(Nt,Z5r),e(Nt,vc),e(vc,e3r),e(vc,pTe),e(pTe,o3r),e(vc,r3r),e(vc,QU),e(QU,t3r),e(vc,a3r),e(Nt,n3r),M(RE,Nt,null),e(lr,s3r),e(lr,Br),M(h9,Br,null),e(Br,l3r),e(Br,_Te),e(_Te,i3r),e(Br,d3r),e(Br,cn),e(cn,c3r),e(cn,uTe),e(uTe,f3r),e(cn,m3r),e(cn,bTe),e(bTe,g3r),e(cn,h3r),e(cn,vTe),e(vTe,p3r),e(cn,_3r),e(Br,u3r),e(Br,de),e(de,PE),e(PE,FTe),e(FTe,b3r),e(PE,v3r),e(PE,HU),e(HU,F3r),e(PE,T3r),e(de,M3r),e(de,BE),e(BE,TTe),e(TTe,E3r),e(BE,C3r),e(BE,UU),e(UU,w3r),e(BE,A3r),e(de,y3r),e(de,IE),e(IE,MTe),e(MTe,L3r),e(IE,x3r),e(IE,JU),e(JU,$3r),e(IE,k3r),e(de,S3r),e(de,NE),e(NE,ETe),e(ETe,R3r),e(NE,P3r),e(NE,YU),e(YU,B3r),e(NE,I3r),e(de,N3r),e(de,qE),e(qE,CTe),e(CTe,q3r),e(qE,j3r),e(qE,KU),e(KU,D3r),e(qE,G3r),e(de,O3r),e(de,jE),e(jE,wTe),e(wTe,V3r),e(jE,X3r),e(jE,ZU),e(ZU,z3r),e(jE,W3r),e(de,Q3r),e(de,DE),e(DE,ATe),e(ATe,H3r),e(DE,U3r),e(DE,eJ),e(eJ,J3r),e(DE,Y3r),e(de,K3r),e(de,GE),e(GE,yTe),e(yTe,Z3r),e(GE,ewr),e(GE,oJ),e(oJ,owr),e(GE,rwr),e(de,twr),e(de,OE),e(OE,LTe),e(LTe,awr),e(OE,nwr),e(OE,rJ),e(rJ,swr),e(OE,lwr),e(de,iwr),e(de,VE),e(VE,xTe),e(xTe,dwr),e(VE,cwr),e(VE,tJ),e(tJ,fwr),e(VE,mwr),e(de,gwr),e(de,XE),e(XE,$Te),e($Te,hwr),e(XE,pwr),e(XE,aJ),e(aJ,_wr),e(XE,uwr),e(de,bwr),e(de,zE),e(zE,kTe),e(kTe,vwr),e(zE,Fwr),e(zE,nJ),e(nJ,Twr),e(zE,Mwr),e(de,Ewr),e(de,WE),e(WE,STe),e(STe,Cwr),e(WE,wwr),e(WE,sJ),e(sJ,Awr),e(WE,ywr),e(de,Lwr),e(de,QE),e(QE,RTe),e(RTe,xwr),e(QE,$wr),e(QE,lJ),e(lJ,kwr),e(QE,Swr),e(de,Rwr),e(de,HE),e(HE,PTe),e(PTe,Pwr),e(HE,Bwr),e(HE,iJ),e(iJ,Iwr),e(HE,Nwr),e(de,qwr),e(de,UE),e(UE,BTe),e(BTe,jwr),e(UE,Dwr),e(UE,dJ),e(dJ,Gwr),e(UE,Owr),e(de,Vwr),e(de,JE),e(JE,ITe),e(ITe,Xwr),e(JE,zwr),e(JE,cJ),e(cJ,Wwr),e(JE,Qwr),e(de,Hwr),e(de,YE),e(YE,NTe),e(NTe,Uwr),e(YE,Jwr),e(YE,fJ),e(fJ,Ywr),e(YE,Kwr),e(de,Zwr),e(de,KE),e(KE,qTe),e(qTe,e6r),e(KE,o6r),e(KE,mJ),e(mJ,r6r),e(KE,t6r),e(de,a6r),e(de,ZE),e(ZE,jTe),e(jTe,n6r),e(ZE,s6r),e(ZE,gJ),e(gJ,l6r),e(ZE,i6r),e(Br,d6r),M(eC,Br,null),b(f,zje,u),b(f,Fc,u),e(Fc,oC),e(oC,DTe),M(p9,DTe,null),e(Fc,c6r),e(Fc,GTe),e(GTe,f6r),b(f,Wje,u),b(f,ir,u),M(_9,ir,null),e(ir,m6r),e(ir,Tc),e(Tc,g6r),e(Tc,hJ),e(hJ,h6r),e(Tc,p6r),e(Tc,pJ),e(pJ,_6r),e(Tc,u6r),e(ir,b6r),e(ir,u9),e(u9,v6r),e(u9,OTe),e(OTe,F6r),e(u9,T6r),e(ir,M6r),e(ir,qt),M(b9,qt,null),e(qt,E6r),e(qt,VTe),e(VTe,C6r),e(qt,w6r),e(qt,Mc),e(Mc,A6r),e(Mc,XTe),e(XTe,y6r),e(Mc,L6r),e(Mc,_J),e(_J,x6r),e(Mc,$6r),e(qt,k6r),M(rC,qt,null),e(ir,S6r),e(ir,Ir),M(v9,Ir,null),e(Ir,R6r),e(Ir,zTe),e(zTe,P6r),e(Ir,B6r),e(Ir,fn),e(fn,I6r),e(fn,WTe),e(WTe,N6r),e(fn,q6r),e(fn,QTe),e(QTe,j6r),e(fn,D6r),e(fn,HTe),e(HTe,G6r),e(fn,O6r),e(Ir,V6r),e(Ir,ce),e(ce,tC),e(tC,UTe),e(UTe,X6r),e(tC,z6r),e(tC,uJ),e(uJ,W6r),e(tC,Q6r),e(ce,H6r),e(ce,aC),e(aC,JTe),e(JTe,U6r),e(aC,J6r),e(aC,bJ),e(bJ,Y6r),e(aC,K6r),e(ce,Z6r),e(ce,nC),e(nC,YTe),e(YTe,eAr),e(nC,oAr),e(nC,vJ),e(vJ,rAr),e(nC,tAr),e(ce,aAr),e(ce,sC),e(sC,KTe),e(KTe,nAr),e(sC,sAr),e(sC,FJ),e(FJ,lAr),e(sC,iAr),e(ce,dAr),e(ce,lC),e(lC,ZTe),e(ZTe,cAr),e(lC,fAr),e(lC,TJ),e(TJ,mAr),e(lC,gAr),e(ce,hAr),e(ce,iC),e(iC,e7e),e(e7e,pAr),e(iC,_Ar),e(iC,MJ),e(MJ,uAr),e(iC,bAr),e(ce,vAr),e(ce,dC),e(dC,o7e),e(o7e,FAr),e(dC,TAr),e(dC,EJ),e(EJ,MAr),e(dC,EAr),e(ce,CAr),e(ce,cC),e(cC,r7e),e(r7e,wAr),e(cC,AAr),e(cC,CJ),e(CJ,yAr),e(cC,LAr),e(ce,xAr),e(ce,fC),e(fC,t7e),e(t7e,$Ar),e(fC,kAr),e(fC,wJ),e(wJ,SAr),e(fC,RAr),e(ce,PAr),e(ce,mC),e(mC,a7e),e(a7e,BAr),e(mC,IAr),e(mC,AJ),e(AJ,NAr),e(mC,qAr),e(ce,jAr),e(ce,gC),e(gC,n7e),e(n7e,DAr),e(gC,GAr),e(gC,yJ),e(yJ,OAr),e(gC,VAr),e(ce,XAr),e(ce,hC),e(hC,s7e),e(s7e,zAr),e(hC,WAr),e(hC,LJ),e(LJ,QAr),e(hC,HAr),e(ce,UAr),e(ce,pC),e(pC,l7e),e(l7e,JAr),e(pC,YAr),e(pC,xJ),e(xJ,KAr),e(pC,ZAr),e(ce,eyr),e(ce,_C),e(_C,i7e),e(i7e,oyr),e(_C,ryr),e(_C,$J),e($J,tyr),e(_C,ayr),e(ce,nyr),e(ce,uC),e(uC,d7e),e(d7e,syr),e(uC,lyr),e(uC,kJ),e(kJ,iyr),e(uC,dyr),e(ce,cyr),e(ce,bC),e(bC,c7e),e(c7e,fyr),e(bC,myr),e(bC,SJ),e(SJ,gyr),e(bC,hyr),e(ce,pyr),e(ce,vC),e(vC,f7e),e(f7e,_yr),e(vC,uyr),e(vC,RJ),e(RJ,byr),e(vC,vyr),e(ce,Fyr),e(ce,FC),e(FC,m7e),e(m7e,Tyr),e(FC,Myr),e(FC,PJ),e(PJ,Eyr),e(FC,Cyr),e(ce,wyr),e(ce,TC),e(TC,g7e),e(g7e,Ayr),e(TC,yyr),e(TC,BJ),e(BJ,Lyr),e(TC,xyr),e(ce,$yr),e(ce,MC),e(MC,h7e),e(h7e,kyr),e(MC,Syr),e(MC,IJ),e(IJ,Ryr),e(MC,Pyr),e(Ir,Byr),M(EC,Ir,null),b(f,Qje,u),b(f,Ec,u),e(Ec,CC),e(CC,p7e),M(F9,p7e,null),e(Ec,Iyr),e(Ec,_7e),e(_7e,Nyr),b(f,Hje,u),b(f,dr,u),M(T9,dr,null),e(dr,qyr),e(dr,Cc),e(Cc,jyr),e(Cc,NJ),e(NJ,Dyr),e(Cc,Gyr),e(Cc,qJ),e(qJ,Oyr),e(Cc,Vyr),e(dr,Xyr),e(dr,M9),e(M9,zyr),e(M9,u7e),e(u7e,Wyr),e(M9,Qyr),e(dr,Hyr),e(dr,jt),M(E9,jt,null),e(jt,Uyr),e(jt,b7e),e(b7e,Jyr),e(jt,Yyr),e(jt,wc),e(wc,Kyr),e(wc,v7e),e(v7e,Zyr),e(wc,eLr),e(wc,jJ),e(jJ,oLr),e(wc,rLr),e(jt,tLr),M(wC,jt,null),e(dr,aLr),e(dr,Nr),M(C9,Nr,null),e(Nr,nLr),e(Nr,F7e),e(F7e,sLr),e(Nr,lLr),e(Nr,mn),e(mn,iLr),e(mn,T7e),e(T7e,dLr),e(mn,cLr),e(mn,M7e),e(M7e,fLr),e(mn,mLr),e(mn,E7e),e(E7e,gLr),e(mn,hLr),e(Nr,pLr),e(Nr,C7e),e(C7e,AC),e(AC,w7e),e(w7e,_Lr),e(AC,uLr),e(AC,DJ),e(DJ,bLr),e(AC,vLr),e(Nr,FLr),M(yC,Nr,null),b(f,Uje,u),b(f,Ac,u),e(Ac,LC),e(LC,A7e),M(w9,A7e,null),e(Ac,TLr),e(Ac,y7e),e(y7e,MLr),b(f,Jje,u),b(f,cr,u),M(A9,cr,null),e(cr,ELr),e(cr,yc),e(yc,CLr),e(yc,GJ),e(GJ,wLr),e(yc,ALr),e(yc,OJ),e(OJ,yLr),e(yc,LLr),e(cr,xLr),e(cr,y9),e(y9,$Lr),e(y9,L7e),e(L7e,kLr),e(y9,SLr),e(cr,RLr),e(cr,Dt),M(L9,Dt,null),e(Dt,PLr),e(Dt,x7e),e(x7e,BLr),e(Dt,ILr),e(Dt,Lc),e(Lc,NLr),e(Lc,$7e),e($7e,qLr),e(Lc,jLr),e(Lc,VJ),e(VJ,DLr),e(Lc,GLr),e(Dt,OLr),M(xC,Dt,null),e(cr,VLr),e(cr,qr),M(x9,qr,null),e(qr,XLr),e(qr,k7e),e(k7e,zLr),e(qr,WLr),e(qr,gn),e(gn,QLr),e(gn,S7e),e(S7e,HLr),e(gn,ULr),e(gn,R7e),e(R7e,JLr),e(gn,YLr),e(gn,P7e),e(P7e,KLr),e(gn,ZLr),e(qr,e8r),e(qr,B7e),e(B7e,$C),e($C,I7e),e(I7e,o8r),e($C,r8r),e($C,XJ),e(XJ,t8r),e($C,a8r),e(qr,n8r),M(kC,qr,null),b(f,Yje,u),b(f,xc,u),e(xc,SC),e(SC,N7e),M($9,N7e,null),e(xc,s8r),e(xc,q7e),e(q7e,l8r),b(f,Kje,u),b(f,fr,u),M(k9,fr,null),e(fr,i8r),e(fr,$c),e($c,d8r),e($c,zJ),e(zJ,c8r),e($c,f8r),e($c,WJ),e(WJ,m8r),e($c,g8r),e(fr,h8r),e(fr,S9),e(S9,p8r),e(S9,j7e),e(j7e,_8r),e(S9,u8r),e(fr,b8r),e(fr,Gt),M(R9,Gt,null),e(Gt,v8r),e(Gt,D7e),e(D7e,F8r),e(Gt,T8r),e(Gt,kc),e(kc,M8r),e(kc,G7e),e(G7e,E8r),e(kc,C8r),e(kc,QJ),e(QJ,w8r),e(kc,A8r),e(Gt,y8r),M(RC,Gt,null),e(fr,L8r),e(fr,jr),M(P9,jr,null),e(jr,x8r),e(jr,O7e),e(O7e,$8r),e(jr,k8r),e(jr,hn),e(hn,S8r),e(hn,V7e),e(V7e,R8r),e(hn,P8r),e(hn,X7e),e(X7e,B8r),e(hn,I8r),e(hn,z7e),e(z7e,N8r),e(hn,q8r),e(jr,j8r),e(jr,te),e(te,PC),e(PC,W7e),e(W7e,D8r),e(PC,G8r),e(PC,HJ),e(HJ,O8r),e(PC,V8r),e(te,X8r),e(te,BC),e(BC,Q7e),e(Q7e,z8r),e(BC,W8r),e(BC,UJ),e(UJ,Q8r),e(BC,H8r),e(te,U8r),e(te,IC),e(IC,H7e),e(H7e,J8r),e(IC,Y8r),e(IC,JJ),e(JJ,K8r),e(IC,Z8r),e(te,e9r),e(te,NC),e(NC,U7e),e(U7e,o9r),e(NC,r9r),e(NC,YJ),e(YJ,t9r),e(NC,a9r),e(te,n9r),e(te,qC),e(qC,J7e),e(J7e,s9r),e(qC,l9r),e(qC,KJ),e(KJ,i9r),e(qC,d9r),e(te,c9r),e(te,jC),e(jC,Y7e),e(Y7e,f9r),e(jC,m9r),e(jC,ZJ),e(ZJ,g9r),e(jC,h9r),e(te,p9r),e(te,DC),e(DC,K7e),e(K7e,_9r),e(DC,u9r),e(DC,eY),e(eY,b9r),e(DC,v9r),e(te,F9r),e(te,GC),e(GC,Z7e),e(Z7e,T9r),e(GC,M9r),e(GC,oY),e(oY,E9r),e(GC,C9r),e(te,w9r),e(te,OC),e(OC,eMe),e(eMe,A9r),e(OC,y9r),e(OC,rY),e(rY,L9r),e(OC,x9r),e(te,$9r),e(te,VC),e(VC,oMe),e(oMe,k9r),e(VC,S9r),e(VC,tY),e(tY,R9r),e(VC,P9r),e(te,B9r),e(te,XC),e(XC,rMe),e(rMe,I9r),e(XC,N9r),e(XC,aY),e(aY,q9r),e(XC,j9r),e(te,D9r),e(te,zC),e(zC,tMe),e(tMe,G9r),e(zC,O9r),e(zC,nY),e(nY,V9r),e(zC,X9r),e(te,z9r),e(te,WC),e(WC,aMe),e(aMe,W9r),e(WC,Q9r),e(WC,sY),e(sY,H9r),e(WC,U9r),e(te,J9r),e(te,QC),e(QC,nMe),e(nMe,Y9r),e(QC,K9r),e(QC,lY),e(lY,Z9r),e(QC,exr),e(te,oxr),e(te,HC),e(HC,sMe),e(sMe,rxr),e(HC,txr),e(HC,iY),e(iY,axr),e(HC,nxr),e(te,sxr),e(te,UC),e(UC,lMe),e(lMe,lxr),e(UC,ixr),e(UC,dY),e(dY,dxr),e(UC,cxr),e(te,fxr),e(te,JC),e(JC,iMe),e(iMe,mxr),e(JC,gxr),e(JC,cY),e(cY,hxr),e(JC,pxr),e(te,_xr),e(te,YC),e(YC,dMe),e(dMe,uxr),e(YC,bxr),e(YC,fY),e(fY,vxr),e(YC,Fxr),e(te,Txr),e(te,KC),e(KC,cMe),e(cMe,Mxr),e(KC,Exr),e(KC,mY),e(mY,Cxr),e(KC,wxr),e(te,Axr),e(te,ZC),e(ZC,fMe),e(fMe,yxr),e(ZC,Lxr),e(ZC,gY),e(gY,xxr),e(ZC,$xr),e(te,kxr),e(te,e5),e(e5,mMe),e(mMe,Sxr),e(e5,Rxr),e(e5,hY),e(hY,Pxr),e(e5,Bxr),e(te,Ixr),e(te,o5),e(o5,gMe),e(gMe,Nxr),e(o5,qxr),e(o5,pY),e(pY,jxr),e(o5,Dxr),e(te,Gxr),e(te,r5),e(r5,hMe),e(hMe,Oxr),e(r5,Vxr),e(r5,_Y),e(_Y,Xxr),e(r5,zxr),e(te,Wxr),e(te,t5),e(t5,pMe),e(pMe,Qxr),e(t5,Hxr),e(t5,uY),e(uY,Uxr),e(t5,Jxr),e(te,Yxr),e(te,a5),e(a5,_Me),e(_Me,Kxr),e(a5,Zxr),e(a5,bY),e(bY,e$r),e(a5,o$r),e(jr,r$r),M(n5,jr,null),b(f,Zje,u),b(f,Sc,u),e(Sc,s5),e(s5,uMe),M(B9,uMe,null),e(Sc,t$r),e(Sc,bMe),e(bMe,a$r),b(f,eDe,u),b(f,mr,u),M(I9,mr,null),e(mr,n$r),e(mr,Rc),e(Rc,s$r),e(Rc,vY),e(vY,l$r),e(Rc,i$r),e(Rc,FY),e(FY,d$r),e(Rc,c$r),e(mr,f$r),e(mr,N9),e(N9,m$r),e(N9,vMe),e(vMe,g$r),e(N9,h$r),e(mr,p$r),e(mr,Ot),M(q9,Ot,null),e(Ot,_$r),e(Ot,FMe),e(FMe,u$r),e(Ot,b$r),e(Ot,Pc),e(Pc,v$r),e(Pc,TMe),e(TMe,F$r),e(Pc,T$r),e(Pc,TY),e(TY,M$r),e(Pc,E$r),e(Ot,C$r),M(l5,Ot,null),e(mr,w$r),e(mr,Dr),M(j9,Dr,null),e(Dr,A$r),e(Dr,MMe),e(MMe,y$r),e(Dr,L$r),e(Dr,pn),e(pn,x$r),e(pn,EMe),e(EMe,$$r),e(pn,k$r),e(pn,CMe),e(CMe,S$r),e(pn,R$r),e(pn,wMe),e(wMe,P$r),e(pn,B$r),e(Dr,I$r),e(Dr,Re),e(Re,i5),e(i5,AMe),e(AMe,N$r),e(i5,q$r),e(i5,MY),e(MY,j$r),e(i5,D$r),e(Re,G$r),e(Re,d5),e(d5,yMe),e(yMe,O$r),e(d5,V$r),e(d5,EY),e(EY,X$r),e(d5,z$r),e(Re,W$r),e(Re,c5),e(c5,LMe),e(LMe,Q$r),e(c5,H$r),e(c5,CY),e(CY,U$r),e(c5,J$r),e(Re,Y$r),e(Re,f5),e(f5,xMe),e(xMe,K$r),e(f5,Z$r),e(f5,wY),e(wY,ekr),e(f5,okr),e(Re,rkr),e(Re,m5),e(m5,$Me),e($Me,tkr),e(m5,akr),e(m5,AY),e(AY,nkr),e(m5,skr),e(Re,lkr),e(Re,g5),e(g5,kMe),e(kMe,ikr),e(g5,dkr),e(g5,yY),e(yY,ckr),e(g5,fkr),e(Re,mkr),e(Re,h5),e(h5,SMe),e(SMe,gkr),e(h5,hkr),e(h5,LY),e(LY,pkr),e(h5,_kr),e(Re,ukr),e(Re,p5),e(p5,RMe),e(RMe,bkr),e(p5,vkr),e(p5,xY),e(xY,Fkr),e(p5,Tkr),e(Re,Mkr),e(Re,_5),e(_5,PMe),e(PMe,Ekr),e(_5,Ckr),e(_5,$Y),e($Y,wkr),e(_5,Akr),e(Dr,ykr),M(u5,Dr,null),b(f,oDe,u),b(f,Bc,u),e(Bc,b5),e(b5,BMe),M(D9,BMe,null),e(Bc,Lkr),e(Bc,IMe),e(IMe,xkr),b(f,rDe,u),b(f,gr,u),M(G9,gr,null),e(gr,$kr),e(gr,Ic),e(Ic,kkr),e(Ic,kY),e(kY,Skr),e(Ic,Rkr),e(Ic,SY),e(SY,Pkr),e(Ic,Bkr),e(gr,Ikr),e(gr,O9),e(O9,Nkr),e(O9,NMe),e(NMe,qkr),e(O9,jkr),e(gr,Dkr),e(gr,Vt),M(V9,Vt,null),e(Vt,Gkr),e(Vt,qMe),e(qMe,Okr),e(Vt,Vkr),e(Vt,Nc),e(Nc,Xkr),e(Nc,jMe),e(jMe,zkr),e(Nc,Wkr),e(Nc,RY),e(RY,Qkr),e(Nc,Hkr),e(Vt,Ukr),M(v5,Vt,null),e(gr,Jkr),e(gr,Gr),M(X9,Gr,null),e(Gr,Ykr),e(Gr,DMe),e(DMe,Kkr),e(Gr,Zkr),e(Gr,_n),e(_n,eSr),e(_n,GMe),e(GMe,oSr),e(_n,rSr),e(_n,OMe),e(OMe,tSr),e(_n,aSr),e(_n,VMe),e(VMe,nSr),e(_n,sSr),e(Gr,lSr),e(Gr,Ee),e(Ee,F5),e(F5,XMe),e(XMe,iSr),e(F5,dSr),e(F5,PY),e(PY,cSr),e(F5,fSr),e(Ee,mSr),e(Ee,T5),e(T5,zMe),e(zMe,gSr),e(T5,hSr),e(T5,BY),e(BY,pSr),e(T5,_Sr),e(Ee,uSr),e(Ee,M5),e(M5,WMe),e(WMe,bSr),e(M5,vSr),e(M5,IY),e(IY,FSr),e(M5,TSr),e(Ee,MSr),e(Ee,E5),e(E5,QMe),e(QMe,ESr),e(E5,CSr),e(E5,NY),e(NY,wSr),e(E5,ASr),e(Ee,ySr),e(Ee,C5),e(C5,HMe),e(HMe,LSr),e(C5,xSr),e(C5,qY),e(qY,$Sr),e(C5,kSr),e(Ee,SSr),e(Ee,w5),e(w5,UMe),e(UMe,RSr),e(w5,PSr),e(w5,jY),e(jY,BSr),e(w5,ISr),e(Ee,NSr),e(Ee,A5),e(A5,JMe),e(JMe,qSr),e(A5,jSr),e(A5,DY),e(DY,DSr),e(A5,GSr),e(Ee,OSr),e(Ee,y5),e(y5,YMe),e(YMe,VSr),e(y5,XSr),e(y5,GY),e(GY,zSr),e(y5,WSr),e(Ee,QSr),e(Ee,L5),e(L5,KMe),e(KMe,HSr),e(L5,USr),e(L5,OY),e(OY,JSr),e(L5,YSr),e(Ee,KSr),e(Ee,x5),e(x5,ZMe),e(ZMe,ZSr),e(x5,eRr),e(x5,VY),e(VY,oRr),e(x5,rRr),e(Ee,tRr),e(Ee,$5),e($5,e4e),e(e4e,aRr),e($5,nRr),e($5,XY),e(XY,sRr),e($5,lRr),e(Ee,iRr),e(Ee,k5),e(k5,o4e),e(o4e,dRr),e(k5,cRr),e(k5,zY),e(zY,fRr),e(k5,mRr),e(Gr,gRr),M(S5,Gr,null),b(f,tDe,u),b(f,qc,u),e(qc,R5),e(R5,r4e),M(z9,r4e,null),e(qc,hRr),e(qc,t4e),e(t4e,pRr),b(f,aDe,u),b(f,hr,u),M(W9,hr,null),e(hr,_Rr),e(hr,jc),e(jc,uRr),e(jc,WY),e(WY,bRr),e(jc,vRr),e(jc,QY),e(QY,FRr),e(jc,TRr),e(hr,MRr),e(hr,Q9),e(Q9,ERr),e(Q9,a4e),e(a4e,CRr),e(Q9,wRr),e(hr,ARr),e(hr,Xt),M(H9,Xt,null),e(Xt,yRr),e(Xt,n4e),e(n4e,LRr),e(Xt,xRr),e(Xt,Dc),e(Dc,$Rr),e(Dc,s4e),e(s4e,kRr),e(Dc,SRr),e(Dc,HY),e(HY,RRr),e(Dc,PRr),e(Xt,BRr),M(P5,Xt,null),e(hr,IRr),e(hr,Or),M(U9,Or,null),e(Or,NRr),e(Or,l4e),e(l4e,qRr),e(Or,jRr),e(Or,un),e(un,DRr),e(un,i4e),e(i4e,GRr),e(un,ORr),e(un,d4e),e(d4e,VRr),e(un,XRr),e(un,c4e),e(c4e,zRr),e(un,WRr),e(Or,QRr),e(Or,Le),e(Le,B5),e(B5,f4e),e(f4e,HRr),e(B5,URr),e(B5,UY),e(UY,JRr),e(B5,YRr),e(Le,KRr),e(Le,I5),e(I5,m4e),e(m4e,ZRr),e(I5,ePr),e(I5,JY),e(JY,oPr),e(I5,rPr),e(Le,tPr),e(Le,N5),e(N5,g4e),e(g4e,aPr),e(N5,nPr),e(N5,YY),e(YY,sPr),e(N5,lPr),e(Le,iPr),e(Le,q5),e(q5,h4e),e(h4e,dPr),e(q5,cPr),e(q5,KY),e(KY,fPr),e(q5,mPr),e(Le,gPr),e(Le,j5),e(j5,p4e),e(p4e,hPr),e(j5,pPr),e(j5,ZY),e(ZY,_Pr),e(j5,uPr),e(Le,bPr),e(Le,D5),e(D5,_4e),e(_4e,vPr),e(D5,FPr),e(D5,eK),e(eK,TPr),e(D5,MPr),e(Le,EPr),e(Le,G5),e(G5,u4e),e(u4e,CPr),e(G5,wPr),e(G5,oK),e(oK,APr),e(G5,yPr),e(Le,LPr),e(Le,O5),e(O5,b4e),e(b4e,xPr),e(O5,$Pr),e(O5,rK),e(rK,kPr),e(O5,SPr),e(Le,RPr),e(Le,V5),e(V5,v4e),e(v4e,PPr),e(V5,BPr),e(V5,tK),e(tK,IPr),e(V5,NPr),e(Le,qPr),e(Le,X5),e(X5,F4e),e(F4e,jPr),e(X5,DPr),e(X5,aK),e(aK,GPr),e(X5,OPr),e(Or,VPr),M(z5,Or,null),b(f,nDe,u),b(f,Gc,u),e(Gc,W5),e(W5,T4e),M(J9,T4e,null),e(Gc,XPr),e(Gc,M4e),e(M4e,zPr),b(f,sDe,u),b(f,pr,u),M(Y9,pr,null),e(pr,WPr),e(pr,Oc),e(Oc,QPr),e(Oc,nK),e(nK,HPr),e(Oc,UPr),e(Oc,sK),e(sK,JPr),e(Oc,YPr),e(pr,KPr),e(pr,K9),e(K9,ZPr),e(K9,E4e),e(E4e,eBr),e(K9,oBr),e(pr,rBr),e(pr,zt),M(Z9,zt,null),e(zt,tBr),e(zt,C4e),e(C4e,aBr),e(zt,nBr),e(zt,Vc),e(Vc,sBr),e(Vc,w4e),e(w4e,lBr),e(Vc,iBr),e(Vc,lK),e(lK,dBr),e(Vc,cBr),e(zt,fBr),M(Q5,zt,null),e(pr,mBr),e(pr,Vr),M(ex,Vr,null),e(Vr,gBr),e(Vr,A4e),e(A4e,hBr),e(Vr,pBr),e(Vr,bn),e(bn,_Br),e(bn,y4e),e(y4e,uBr),e(bn,bBr),e(bn,L4e),e(L4e,vBr),e(bn,FBr),e(bn,x4e),e(x4e,TBr),e(bn,MBr),e(Vr,EBr),e(Vr,Pe),e(Pe,H5),e(H5,$4e),e($4e,CBr),e(H5,wBr),e(H5,iK),e(iK,ABr),e(H5,yBr),e(Pe,LBr),e(Pe,U5),e(U5,k4e),e(k4e,xBr),e(U5,$Br),e(U5,dK),e(dK,kBr),e(U5,SBr),e(Pe,RBr),e(Pe,J5),e(J5,S4e),e(S4e,PBr),e(J5,BBr),e(J5,cK),e(cK,IBr),e(J5,NBr),e(Pe,qBr),e(Pe,Y5),e(Y5,R4e),e(R4e,jBr),e(Y5,DBr),e(Y5,fK),e(fK,GBr),e(Y5,OBr),e(Pe,VBr),e(Pe,K5),e(K5,P4e),e(P4e,XBr),e(K5,zBr),e(K5,mK),e(mK,WBr),e(K5,QBr),e(Pe,HBr),e(Pe,Z5),e(Z5,B4e),e(B4e,UBr),e(Z5,JBr),e(Z5,gK),e(gK,YBr),e(Z5,KBr),e(Pe,ZBr),e(Pe,e3),e(e3,I4e),e(I4e,eIr),e(e3,oIr),e(e3,hK),e(hK,rIr),e(e3,tIr),e(Pe,aIr),e(Pe,o3),e(o3,N4e),e(N4e,nIr),e(o3,sIr),e(o3,pK),e(pK,lIr),e(o3,iIr),e(Pe,dIr),e(Pe,r3),e(r3,q4e),e(q4e,cIr),e(r3,fIr),e(r3,_K),e(_K,mIr),e(r3,gIr),e(Vr,hIr),M(t3,Vr,null),b(f,lDe,u),b(f,Xc,u),e(Xc,a3),e(a3,j4e),M(ox,j4e,null),e(Xc,pIr),e(Xc,D4e),e(D4e,_Ir),b(f,iDe,u),b(f,_r,u),M(rx,_r,null),e(_r,uIr),e(_r,zc),e(zc,bIr),e(zc,uK),e(uK,vIr),e(zc,FIr),e(zc,bK),e(bK,TIr),e(zc,MIr),e(_r,EIr),e(_r,tx),e(tx,CIr),e(tx,G4e),e(G4e,wIr),e(tx,AIr),e(_r,yIr),e(_r,Wt),M(ax,Wt,null),e(Wt,LIr),e(Wt,O4e),e(O4e,xIr),e(Wt,$Ir),e(Wt,Wc),e(Wc,kIr),e(Wc,V4e),e(V4e,SIr),e(Wc,RIr),e(Wc,vK),e(vK,PIr),e(Wc,BIr),e(Wt,IIr),M(n3,Wt,null),e(_r,NIr),e(_r,Xr),M(nx,Xr,null),e(Xr,qIr),e(Xr,X4e),e(X4e,jIr),e(Xr,DIr),e(Xr,vn),e(vn,GIr),e(vn,z4e),e(z4e,OIr),e(vn,VIr),e(vn,W4e),e(W4e,XIr),e(vn,zIr),e(vn,Q4e),e(Q4e,WIr),e(vn,QIr),e(Xr,HIr),e(Xr,xe),e(xe,s3),e(s3,H4e),e(H4e,UIr),e(s3,JIr),e(s3,FK),e(FK,YIr),e(s3,KIr),e(xe,ZIr),e(xe,l3),e(l3,U4e),e(U4e,eNr),e(l3,oNr),e(l3,TK),e(TK,rNr),e(l3,tNr),e(xe,aNr),e(xe,i3),e(i3,J4e),e(J4e,nNr),e(i3,sNr),e(i3,MK),e(MK,lNr),e(i3,iNr),e(xe,dNr),e(xe,d3),e(d3,Y4e),e(Y4e,cNr),e(d3,fNr),e(d3,EK),e(EK,mNr),e(d3,gNr),e(xe,hNr),e(xe,c3),e(c3,K4e),e(K4e,pNr),e(c3,_Nr),e(c3,CK),e(CK,uNr),e(c3,bNr),e(xe,vNr),e(xe,f3),e(f3,Z4e),e(Z4e,FNr),e(f3,TNr),e(f3,wK),e(wK,MNr),e(f3,ENr),e(xe,CNr),e(xe,m3),e(m3,eEe),e(eEe,wNr),e(m3,ANr),e(m3,AK),e(AK,yNr),e(m3,LNr),e(xe,xNr),e(xe,g3),e(g3,oEe),e(oEe,$Nr),e(g3,kNr),e(g3,yK),e(yK,SNr),e(g3,RNr),e(xe,PNr),e(xe,h3),e(h3,rEe),e(rEe,BNr),e(h3,INr),e(h3,LK),e(LK,NNr),e(h3,qNr),e(xe,jNr),e(xe,p3),e(p3,tEe),e(tEe,DNr),e(p3,GNr),e(p3,xK),e(xK,ONr),e(p3,VNr),e(Xr,XNr),M(_3,Xr,null),b(f,dDe,u),b(f,Qc,u),e(Qc,u3),e(u3,aEe),M(sx,aEe,null),e(Qc,zNr),e(Qc,nEe),e(nEe,WNr),b(f,cDe,u),b(f,ur,u),M(lx,ur,null),e(ur,QNr),e(ur,Hc),e(Hc,HNr),e(Hc,$K),e($K,UNr),e(Hc,JNr),e(Hc,kK),e(kK,YNr),e(Hc,KNr),e(ur,ZNr),e(ur,ix),e(ix,eqr),e(ix,sEe),e(sEe,oqr),e(ix,rqr),e(ur,tqr),e(ur,Qt),M(dx,Qt,null),e(Qt,aqr),e(Qt,lEe),e(lEe,nqr),e(Qt,sqr),e(Qt,Uc),e(Uc,lqr),e(Uc,iEe),e(iEe,iqr),e(Uc,dqr),e(Uc,SK),e(SK,cqr),e(Uc,fqr),e(Qt,mqr),M(b3,Qt,null),e(ur,gqr),e(ur,zr),M(cx,zr,null),e(zr,hqr),e(zr,dEe),e(dEe,pqr),e(zr,_qr),e(zr,Fn),e(Fn,uqr),e(Fn,cEe),e(cEe,bqr),e(Fn,vqr),e(Fn,fEe),e(fEe,Fqr),e(Fn,Tqr),e(Fn,mEe),e(mEe,Mqr),e(Fn,Eqr),e(zr,Cqr),e(zr,$e),e($e,v3),e(v3,gEe),e(gEe,wqr),e(v3,Aqr),e(v3,RK),e(RK,yqr),e(v3,Lqr),e($e,xqr),e($e,F3),e(F3,hEe),e(hEe,$qr),e(F3,kqr),e(F3,PK),e(PK,Sqr),e(F3,Rqr),e($e,Pqr),e($e,T3),e(T3,pEe),e(pEe,Bqr),e(T3,Iqr),e(T3,BK),e(BK,Nqr),e(T3,qqr),e($e,jqr),e($e,M3),e(M3,_Ee),e(_Ee,Dqr),e(M3,Gqr),e(M3,IK),e(IK,Oqr),e(M3,Vqr),e($e,Xqr),e($e,E3),e(E3,uEe),e(uEe,zqr),e(E3,Wqr),e(E3,NK),e(NK,Qqr),e(E3,Hqr),e($e,Uqr),e($e,C3),e(C3,bEe),e(bEe,Jqr),e(C3,Yqr),e(C3,qK),e(qK,Kqr),e(C3,Zqr),e($e,ejr),e($e,w3),e(w3,vEe),e(vEe,ojr),e(w3,rjr),e(w3,jK),e(jK,tjr),e(w3,ajr),e($e,njr),e($e,A3),e(A3,FEe),e(FEe,sjr),e(A3,ljr),e(A3,DK),e(DK,ijr),e(A3,djr),e($e,cjr),e($e,y3),e(y3,TEe),e(TEe,fjr),e(y3,mjr),e(y3,GK),e(GK,gjr),e(y3,hjr),e($e,pjr),e($e,L3),e(L3,MEe),e(MEe,_jr),e(L3,ujr),e(L3,OK),e(OK,bjr),e(L3,vjr),e(zr,Fjr),M(x3,zr,null),b(f,fDe,u),b(f,Jc,u),e(Jc,$3),e($3,EEe),M(fx,EEe,null),e(Jc,Tjr),e(Jc,CEe),e(CEe,Mjr),b(f,mDe,u),b(f,br,u),M(mx,br,null),e(br,Ejr),e(br,Yc),e(Yc,Cjr),e(Yc,VK),e(VK,wjr),e(Yc,Ajr),e(Yc,XK),e(XK,yjr),e(Yc,Ljr),e(br,xjr),e(br,gx),e(gx,$jr),e(gx,wEe),e(wEe,kjr),e(gx,Sjr),e(br,Rjr),e(br,Ht),M(hx,Ht,null),e(Ht,Pjr),e(Ht,AEe),e(AEe,Bjr),e(Ht,Ijr),e(Ht,Kc),e(Kc,Njr),e(Kc,yEe),e(yEe,qjr),e(Kc,jjr),e(Kc,zK),e(zK,Djr),e(Kc,Gjr),e(Ht,Ojr),M(k3,Ht,null),e(br,Vjr),e(br,Wr),M(px,Wr,null),e(Wr,Xjr),e(Wr,LEe),e(LEe,zjr),e(Wr,Wjr),e(Wr,Tn),e(Tn,Qjr),e(Tn,xEe),e(xEe,Hjr),e(Tn,Ujr),e(Tn,$Ee),e($Ee,Jjr),e(Tn,Yjr),e(Tn,kEe),e(kEe,Kjr),e(Tn,Zjr),e(Wr,eDr),e(Wr,De),e(De,S3),e(S3,SEe),e(SEe,oDr),e(S3,rDr),e(S3,WK),e(WK,tDr),e(S3,aDr),e(De,nDr),e(De,R3),e(R3,REe),e(REe,sDr),e(R3,lDr),e(R3,QK),e(QK,iDr),e(R3,dDr),e(De,cDr),e(De,P3),e(P3,PEe),e(PEe,fDr),e(P3,mDr),e(P3,HK),e(HK,gDr),e(P3,hDr),e(De,pDr),e(De,B3),e(B3,BEe),e(BEe,_Dr),e(B3,uDr),e(B3,UK),e(UK,bDr),e(B3,vDr),e(De,FDr),e(De,I3),e(I3,IEe),e(IEe,TDr),e(I3,MDr),e(I3,JK),e(JK,EDr),e(I3,CDr),e(De,wDr),e(De,N3),e(N3,NEe),e(NEe,ADr),e(N3,yDr),e(N3,YK),e(YK,LDr),e(N3,xDr),e(De,$Dr),e(De,q3),e(q3,qEe),e(qEe,kDr),e(q3,SDr),e(q3,KK),e(KK,RDr),e(q3,PDr),e(De,BDr),e(De,j3),e(j3,jEe),e(jEe,IDr),e(j3,NDr),e(j3,ZK),e(ZK,qDr),e(j3,jDr),e(Wr,DDr),M(D3,Wr,null),b(f,gDe,u),b(f,Zc,u),e(Zc,G3),e(G3,DEe),M(_x,DEe,null),e(Zc,GDr),e(Zc,GEe),e(GEe,ODr),b(f,hDe,u),b(f,vr,u),M(ux,vr,null),e(vr,VDr),e(vr,ef),e(ef,XDr),e(ef,eZ),e(eZ,zDr),e(ef,WDr),e(ef,oZ),e(oZ,QDr),e(ef,HDr),e(vr,UDr),e(vr,bx),e(bx,JDr),e(bx,OEe),e(OEe,YDr),e(bx,KDr),e(vr,ZDr),e(vr,Ut),M(vx,Ut,null),e(Ut,eGr),e(Ut,VEe),e(VEe,oGr),e(Ut,rGr),e(Ut,of),e(of,tGr),e(of,XEe),e(XEe,aGr),e(of,nGr),e(of,rZ),e(rZ,sGr),e(of,lGr),e(Ut,iGr),M(O3,Ut,null),e(vr,dGr),e(vr,Qr),M(Fx,Qr,null),e(Qr,cGr),e(Qr,zEe),e(zEe,fGr),e(Qr,mGr),e(Qr,Mn),e(Mn,gGr),e(Mn,WEe),e(WEe,hGr),e(Mn,pGr),e(Mn,QEe),e(QEe,_Gr),e(Mn,uGr),e(Mn,HEe),e(HEe,bGr),e(Mn,vGr),e(Qr,FGr),e(Qr,Ge),e(Ge,V3),e(V3,UEe),e(UEe,TGr),e(V3,MGr),e(V3,tZ),e(tZ,EGr),e(V3,CGr),e(Ge,wGr),e(Ge,X3),e(X3,JEe),e(JEe,AGr),e(X3,yGr),e(X3,aZ),e(aZ,LGr),e(X3,xGr),e(Ge,$Gr),e(Ge,z3),e(z3,YEe),e(YEe,kGr),e(z3,SGr),e(z3,nZ),e(nZ,RGr),e(z3,PGr),e(Ge,BGr),e(Ge,W3),e(W3,KEe),e(KEe,IGr),e(W3,NGr),e(W3,sZ),e(sZ,qGr),e(W3,jGr),e(Ge,DGr),e(Ge,Q3),e(Q3,ZEe),e(ZEe,GGr),e(Q3,OGr),e(Q3,lZ),e(lZ,VGr),e(Q3,XGr),e(Ge,zGr),e(Ge,H3),e(H3,eCe),e(eCe,WGr),e(H3,QGr),e(H3,iZ),e(iZ,HGr),e(H3,UGr),e(Ge,JGr),e(Ge,U3),e(U3,oCe),e(oCe,YGr),e(U3,KGr),e(U3,dZ),e(dZ,ZGr),e(U3,eOr),e(Ge,oOr),e(Ge,J3),e(J3,rCe),e(rCe,rOr),e(J3,tOr),e(J3,cZ),e(cZ,aOr),e(J3,nOr),e(Qr,sOr),M(Y3,Qr,null),b(f,pDe,u),b(f,rf,u),e(rf,K3),e(K3,tCe),M(Tx,tCe,null),e(rf,lOr),e(rf,aCe),e(aCe,iOr),b(f,_De,u),b(f,Fr,u),M(Mx,Fr,null),e(Fr,dOr),e(Fr,tf),e(tf,cOr),e(tf,fZ),e(fZ,fOr),e(tf,mOr),e(tf,mZ),e(mZ,gOr),e(tf,hOr),e(Fr,pOr),e(Fr,Ex),e(Ex,_Or),e(Ex,nCe),e(nCe,uOr),e(Ex,bOr),e(Fr,vOr),e(Fr,Jt),M(Cx,Jt,null),e(Jt,FOr),e(Jt,sCe),e(sCe,TOr),e(Jt,MOr),e(Jt,af),e(af,EOr),e(af,lCe),e(lCe,COr),e(af,wOr),e(af,gZ),e(gZ,AOr),e(af,yOr),e(Jt,LOr),M(Z3,Jt,null),e(Fr,xOr),e(Fr,Hr),M(wx,Hr,null),e(Hr,$Or),e(Hr,iCe),e(iCe,kOr),e(Hr,SOr),e(Hr,En),e(En,ROr),e(En,dCe),e(dCe,POr),e(En,BOr),e(En,cCe),e(cCe,IOr),e(En,NOr),e(En,fCe),e(fCe,qOr),e(En,jOr),e(Hr,DOr),e(Hr,mCe),e(mCe,ew),e(ew,gCe),e(gCe,GOr),e(ew,OOr),e(ew,hZ),e(hZ,VOr),e(ew,XOr),e(Hr,zOr),M(ow,Hr,null),b(f,uDe,u),b(f,nf,u),e(nf,rw),e(rw,hCe),M(Ax,hCe,null),e(nf,WOr),e(nf,pCe),e(pCe,QOr),b(f,bDe,u),b(f,Tr,u),M(yx,Tr,null),e(Tr,HOr),e(Tr,sf),e(sf,UOr),e(sf,pZ),e(pZ,JOr),e(sf,YOr),e(sf,_Z),e(_Z,KOr),e(sf,ZOr),e(Tr,eVr),e(Tr,Lx),e(Lx,oVr),e(Lx,_Ce),e(_Ce,rVr),e(Lx,tVr),e(Tr,aVr),e(Tr,Yt),M(xx,Yt,null),e(Yt,nVr),e(Yt,uCe),e(uCe,sVr),e(Yt,lVr),e(Yt,lf),e(lf,iVr),e(lf,bCe),e(bCe,dVr),e(lf,cVr),e(lf,uZ),e(uZ,fVr),e(lf,mVr),e(Yt,gVr),M(tw,Yt,null),e(Tr,hVr),e(Tr,Ur),M($x,Ur,null),e(Ur,pVr),e(Ur,vCe),e(vCe,_Vr),e(Ur,uVr),e(Ur,Cn),e(Cn,bVr),e(Cn,FCe),e(FCe,vVr),e(Cn,FVr),e(Cn,TCe),e(TCe,TVr),e(Cn,MVr),e(Cn,MCe),e(MCe,EVr),e(Cn,CVr),e(Ur,wVr),e(Ur,kx),e(kx,aw),e(aw,ECe),e(ECe,AVr),e(aw,yVr),e(aw,bZ),e(bZ,LVr),e(aw,xVr),e(kx,$Vr),e(kx,nw),e(nw,CCe),e(CCe,kVr),e(nw,SVr),e(nw,vZ),e(vZ,RVr),e(nw,PVr),e(Ur,BVr),M(sw,Ur,null),b(f,vDe,u),b(f,df,u),e(df,lw),e(lw,wCe),M(Sx,wCe,null),e(df,IVr),e(df,ACe),e(ACe,NVr),b(f,FDe,u),b(f,Mr,u),M(Rx,Mr,null),e(Mr,qVr),e(Mr,cf),e(cf,jVr),e(cf,FZ),e(FZ,DVr),e(cf,GVr),e(cf,TZ),e(TZ,OVr),e(cf,VVr),e(Mr,XVr),e(Mr,Px),e(Px,zVr),e(Px,yCe),e(yCe,WVr),e(Px,QVr),e(Mr,HVr),e(Mr,Kt),M(Bx,Kt,null),e(Kt,UVr),e(Kt,LCe),e(LCe,JVr),e(Kt,YVr),e(Kt,ff),e(ff,KVr),e(ff,xCe),e(xCe,ZVr),e(ff,eXr),e(ff,MZ),e(MZ,oXr),e(ff,rXr),e(Kt,tXr),M(iw,Kt,null),e(Mr,aXr),e(Mr,Jr),M(Ix,Jr,null),e(Jr,nXr),e(Jr,$Ce),e($Ce,sXr),e(Jr,lXr),e(Jr,wn),e(wn,iXr),e(wn,kCe),e(kCe,dXr),e(wn,cXr),e(wn,SCe),e(SCe,fXr),e(wn,mXr),e(wn,RCe),e(RCe,gXr),e(wn,hXr),e(Jr,pXr),e(Jr,PCe),e(PCe,dw),e(dw,BCe),e(BCe,_Xr),e(dw,uXr),e(dw,EZ),e(EZ,bXr),e(dw,vXr),e(Jr,FXr),M(cw,Jr,null),TDe=!0},p(f,[u]){const Nx={};u&2&&(Nx.$$scope={dirty:u,ctx:f}),Ff.$set(Nx);const ICe={};u&2&&(ICe.$$scope={dirty:u,ctx:f}),Cg.$set(ICe);const NCe={};u&2&&(NCe.$$scope={dirty:u,ctx:f}),sh.$set(NCe);const qCe={};u&2&&(qCe.$$scope={dirty:u,ctx:f}),qh.$set(qCe);const qx={};u&2&&(qx.$$scope={dirty:u,ctx:f}),jh.$set(qx);const jCe={};u&2&&(jCe.$$scope={dirty:u,ctx:f}),np.$set(jCe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),sp.$set(An);const DCe={};u&2&&(DCe.$$scope={dirty:u,ctx:f}),dp.$set(DCe);const GCe={};u&2&&(GCe.$$scope={dirty:u,ctx:f}),nu.$set(GCe);const OCe={};u&2&&(OCe.$$scope={dirty:u,ctx:f}),lu.$set(OCe);const jx={};u&2&&(jx.$$scope={dirty:u,ctx:f}),Ku.$set(jx);const VCe={};u&2&&(VCe.$$scope={dirty:u,ctx:f}),e2.$set(VCe);const Dx={};u&2&&(Dx.$$scope={dirty:u,ctx:f}),D2.$set(Dx);const XCe={};u&2&&(XCe.$$scope={dirty:u,ctx:f}),O2.$set(XCe);const Gx={};u&2&&(Gx.$$scope={dirty:u,ctx:f}),w1.$set(Gx);const zCe={};u&2&&(zCe.$$scope={dirty:u,ctx:f}),y1.$set(zCe);const WCe={};u&2&&(WCe.$$scope={dirty:u,ctx:f}),z1.$set(WCe);const QCe={};u&2&&(QCe.$$scope={dirty:u,ctx:f}),Q1.$set(QCe);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),Ob.$set(mf);const HCe={};u&2&&(HCe.$$scope={dirty:u,ctx:f}),Xb.$set(HCe);const UCe={};u&2&&(UCe.$$scope={dirty:u,ctx:f}),Tv.$set(UCe);const JCe={};u&2&&(JCe.$$scope={dirty:u,ctx:f}),Ev.$set(JCe);const Ox={};u&2&&(Ox.$$scope={dirty:u,ctx:f}),$v.$set(Ox);const YCe={};u&2&&(YCe.$$scope={dirty:u,ctx:f}),Sv.$set(YCe);const KCe={};u&2&&(KCe.$$scope={dirty:u,ctx:f}),h0.$set(KCe);const ZCe={};u&2&&(ZCe.$$scope={dirty:u,ctx:f}),_0.$set(ZCe);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),aF.$set(et);const Vx={};u&2&&(Vx.$$scope={dirty:u,ctx:f}),sF.$set(Vx);const e5e={};u&2&&(e5e.$$scope={dirty:u,ctx:f}),dF.$set(e5e);const Xx={};u&2&&(Xx.$$scope={dirty:u,ctx:f}),fF.$set(Xx);const o5e={};u&2&&(o5e.$$scope={dirty:u,ctx:f}),wF.$set(o5e);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),yF.$set(ot);const r5e={};u&2&&(r5e.$$scope={dirty:u,ctx:f}),$F.$set(r5e);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),SF.$set(gf);const t5e={};u&2&&(t5e.$$scope={dirty:u,ctx:f}),VF.$set(t5e);const a5e={};u&2&&(a5e.$$scope={dirty:u,ctx:f}),zF.$set(a5e);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),KF.$set(y);const fw={};u&2&&(fw.$$scope={dirty:u,ctx:f}),eT.$set(fw);const n5e={};u&2&&(n5e.$$scope={dirty:u,ctx:f}),fT.$set(n5e);const s5e={};u&2&&(s5e.$$scope={dirty:u,ctx:f}),gT.$set(s5e);const mw={};u&2&&(mw.$$scope={dirty:u,ctx:f}),uT.$set(mw);const l5e={};u&2&&(l5e.$$scope={dirty:u,ctx:f}),vT.$set(l5e);const i5e={};u&2&&(i5e.$$scope={dirty:u,ctx:f}),AT.$set(i5e);const gw={};u&2&&(gw.$$scope={dirty:u,ctx:f}),LT.$set(gw);const d5e={};u&2&&(d5e.$$scope={dirty:u,ctx:f}),RT.$set(d5e);const c5e={};u&2&&(c5e.$$scope={dirty:u,ctx:f}),BT.$set(c5e);const hw={};u&2&&(hw.$$scope={dirty:u,ctx:f}),jT.$set(hw);const f5e={};u&2&&(f5e.$$scope={dirty:u,ctx:f}),GT.$set(f5e);const m5e={};u&2&&(m5e.$$scope={dirty:u,ctx:f}),XT.$set(m5e);const pw={};u&2&&(pw.$$scope={dirty:u,ctx:f}),WT.$set(pw);const g5e={};u&2&&(g5e.$$scope={dirty:u,ctx:f}),KT.$set(g5e);const h5e={};u&2&&(h5e.$$scope={dirty:u,ctx:f}),e7.$set(h5e);const _w={};u&2&&(_w.$$scope={dirty:u,ctx:f}),t7.$set(_w);const p5e={};u&2&&(p5e.$$scope={dirty:u,ctx:f}),n7.$set(p5e);const _5e={};u&2&&(_5e.$$scope={dirty:u,ctx:f}),Y7.$set(_5e);const uw={};u&2&&(uw.$$scope={dirty:u,ctx:f}),Z7.$set(uw);const u5e={};u&2&&(u5e.$$scope={dirty:u,ctx:f}),EM.$set(u5e);const b5e={};u&2&&(b5e.$$scope={dirty:u,ctx:f}),wM.$set(b5e);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),qM.$set(bw);const v5e={};u&2&&(v5e.$$scope={dirty:u,ctx:f}),DM.$set(v5e);const F5e={};u&2&&(F5e.$$scope={dirty:u,ctx:f}),zM.$set(F5e);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),QM.$set(vw);const T5e={};u&2&&(T5e.$$scope={dirty:u,ctx:f}),h4.$set(T5e);const M5e={};u&2&&(M5e.$$scope={dirty:u,ctx:f}),_4.$set(M5e);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),y4.$set(Fw);const E5e={};u&2&&(E5e.$$scope={dirty:u,ctx:f}),x4.$set(E5e);const C5e={};u&2&&(C5e.$$scope={dirty:u,ctx:f}),rE.$set(C5e);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),aE.$set(Tw);const w5e={};u&2&&(w5e.$$scope={dirty:u,ctx:f}),ME.$set(w5e);const A5e={};u&2&&(A5e.$$scope={dirty:u,ctx:f}),CE.$set(A5e);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),yE.$set(Mw);const y5e={};u&2&&(y5e.$$scope={dirty:u,ctx:f}),xE.$set(y5e);const L5e={};u&2&&(L5e.$$scope={dirty:u,ctx:f}),kE.$set(L5e);const Ew={};u&2&&(Ew.$$scope={dirty:u,ctx:f}),RE.$set(Ew);const x5e={};u&2&&(x5e.$$scope={dirty:u,ctx:f}),eC.$set(x5e);const $5e={};u&2&&($5e.$$scope={dirty:u,ctx:f}),rC.$set($5e);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),EC.$set(Cw);const k5e={};u&2&&(k5e.$$scope={dirty:u,ctx:f}),wC.$set(k5e);const S5e={};u&2&&(S5e.$$scope={dirty:u,ctx:f}),yC.$set(S5e);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),xC.$set(ww);const R5e={};u&2&&(R5e.$$scope={dirty:u,ctx:f}),kC.$set(R5e);const P5e={};u&2&&(P5e.$$scope={dirty:u,ctx:f}),RC.$set(P5e);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),n5.$set(Aw);const B5e={};u&2&&(B5e.$$scope={dirty:u,ctx:f}),l5.$set(B5e);const I5e={};u&2&&(I5e.$$scope={dirty:u,ctx:f}),u5.$set(I5e);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),v5.$set(yw);const N5e={};u&2&&(N5e.$$scope={dirty:u,ctx:f}),S5.$set(N5e);const q5e={};u&2&&(q5e.$$scope={dirty:u,ctx:f}),P5.$set(q5e);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),z5.$set(Lw);const j5e={};u&2&&(j5e.$$scope={dirty:u,ctx:f}),Q5.$set(j5e);const D5e={};u&2&&(D5e.$$scope={dirty:u,ctx:f}),t3.$set(D5e);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),n3.$set(xw);const G5e={};u&2&&(G5e.$$scope={dirty:u,ctx:f}),_3.$set(G5e);const O5e={};u&2&&(O5e.$$scope={dirty:u,ctx:f}),b3.$set(O5e);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),x3.$set($w);const V5e={};u&2&&(V5e.$$scope={dirty:u,ctx:f}),k3.$set(V5e);const X5e={};u&2&&(X5e.$$scope={dirty:u,ctx:f}),D3.$set(X5e);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),O3.$set(kw);const z5e={};u&2&&(z5e.$$scope={dirty:u,ctx:f}),Y3.$set(z5e);const W5e={};u&2&&(W5e.$$scope={dirty:u,ctx:f}),Z3.$set(W5e);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),ow.$set(Sw);const Q5e={};u&2&&(Q5e.$$scope={dirty:u,ctx:f}),tw.$set(Q5e);const H5e={};u&2&&(H5e.$$scope={dirty:u,ctx:f}),sw.$set(H5e);const Rw={};u&2&&(Rw.$$scope={dirty:u,ctx:f}),iw.$set(Rw);const U5e={};u&2&&(U5e.$$scope={dirty:u,ctx:f}),cw.$set(U5e)},i(f){TDe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(SA.$$.fragment,f),E(RA.$$.fragment,f),E(Ff.$$.fragment,f),E(PA.$$.fragment,f),E(BA.$$.fragment,f),E(qA.$$.fragment,f),E(Cg.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(XA.$$.fragment,f),E(sh.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(QA.$$.fragment,f),E(JA.$$.fragment,f),E(qh.$$.fragment,f),E(jh.$$.fragment,f),E(YA.$$.fragment,f),E(KA.$$.fragment,f),E(ZA.$$.fragment,f),E(ry.$$.fragment,f),E(np.$$.fragment,f),E(sp.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(dp.$$.fragment,f),E(iy.$$.fragment,f),E(nu.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(lu.$$.fragment,f),E(gy.$$.fragment,f),E(Ku.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(e2.$$.fragment,f),E(by.$$.fragment,f),E(D2.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(O2.$$.fragment,f),E(Ey.$$.fragment,f),E(w1.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(y1.$$.fragment,f),E(Ly.$$.fragment,f),E(z1.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(Q1.$$.fragment,f),E(Ry.$$.fragment,f),E(Ob.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(Xb.$$.fragment,f),E(qy.$$.fragment,f),E(Tv.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(Ev.$$.fragment,f),E(Vy.$$.fragment,f),E($v.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(Sv.$$.fragment,f),E(Hy.$$.fragment,f),E(h0.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(_0.$$.fragment,f),E(Zy.$$.fragment,f),E(aF.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(sF.$$.fragment,f),E(aL.$$.fragment,f),E(dF.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(fF.$$.fragment,f),E(dL.$$.fragment,f),E(wF.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(yF.$$.fragment,f),E(hL.$$.fragment,f),E($F.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(SF.$$.fragment,f),E(vL.$$.fragment,f),E(VF.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(zF.$$.fragment,f),E(CL.$$.fragment,f),E(KF.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(eT.$$.fragment,f),E(xL.$$.fragment,f),E(fT.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(gT.$$.fragment,f),E(PL.$$.fragment,f),E(uT.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(vT.$$.fragment,f),E(DL.$$.fragment,f),E(AT.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(LT.$$.fragment,f),E(zL.$$.fragment,f),E(RT.$$.fragment,f),E(WL.$$.fragment,f),E(QL.$$.fragment,f),E(UL.$$.fragment,f),E(BT.$$.fragment,f),E(JL.$$.fragment,f),E(jT.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(GT.$$.fragment,f),E(r8.$$.fragment,f),E(XT.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(WT.$$.fragment,f),E(l8.$$.fragment,f),E(KT.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(e7.$$.fragment,f),E(m8.$$.fragment,f),E(t7.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(_8.$$.fragment,f),E(n7.$$.fragment,f),E(u8.$$.fragment,f),E(Y7.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(Z7.$$.fragment,f),E(M8.$$.fragment,f),E(EM.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(wM.$$.fragment,f),E(y8.$$.fragment,f),E(qM.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(DM.$$.fragment,f),E(S8.$$.fragment,f),E(zM.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(QM.$$.fragment,f),E(N8.$$.fragment,f),E(h4.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(_4.$$.fragment,f),E(O8.$$.fragment,f),E(y4.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(W8.$$.fragment,f),E(x4.$$.fragment,f),E(Q8.$$.fragment,f),E(rE.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(aE.$$.fragment,f),E(K8.$$.fragment,f),E(ME.$$.fragment,f),E(Z8.$$.fragment,f),E(e9.$$.fragment,f),E(r9.$$.fragment,f),E(CE.$$.fragment,f),E(t9.$$.fragment,f),E(yE.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(xE.$$.fragment,f),E(d9.$$.fragment,f),E(kE.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(RE.$$.fragment,f),E(h9.$$.fragment,f),E(eC.$$.fragment,f),E(p9.$$.fragment,f),E(_9.$$.fragment,f),E(b9.$$.fragment,f),E(rC.$$.fragment,f),E(v9.$$.fragment,f),E(EC.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(wC.$$.fragment,f),E(C9.$$.fragment,f),E(yC.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(L9.$$.fragment,f),E(xC.$$.fragment,f),E(x9.$$.fragment,f),E(kC.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(RC.$$.fragment,f),E(P9.$$.fragment,f),E(n5.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(l5.$$.fragment,f),E(j9.$$.fragment,f),E(u5.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(v5.$$.fragment,f),E(X9.$$.fragment,f),E(S5.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(H9.$$.fragment,f),E(P5.$$.fragment,f),E(U9.$$.fragment,f),E(z5.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(Q5.$$.fragment,f),E(ex.$$.fragment,f),E(t3.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(n3.$$.fragment,f),E(nx.$$.fragment,f),E(_3.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(b3.$$.fragment,f),E(cx.$$.fragment,f),E(x3.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(k3.$$.fragment,f),E(px.$$.fragment,f),E(D3.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(O3.$$.fragment,f),E(Fx.$$.fragment,f),E(Y3.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(Z3.$$.fragment,f),E(wx.$$.fragment,f),E(ow.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(tw.$$.fragment,f),E($x.$$.fragment,f),E(sw.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(iw.$$.fragment,f),E(Ix.$$.fragment,f),E(cw.$$.fragment,f),TDe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(SA.$$.fragment,f),C(RA.$$.fragment,f),C(Ff.$$.fragment,f),C(PA.$$.fragment,f),C(BA.$$.fragment,f),C(qA.$$.fragment,f),C(Cg.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(XA.$$.fragment,f),C(sh.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(QA.$$.fragment,f),C(JA.$$.fragment,f),C(qh.$$.fragment,f),C(jh.$$.fragment,f),C(YA.$$.fragment,f),C(KA.$$.fragment,f),C(ZA.$$.fragment,f),C(ry.$$.fragment,f),C(np.$$.fragment,f),C(sp.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(dp.$$.fragment,f),C(iy.$$.fragment,f),C(nu.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(lu.$$.fragment,f),C(gy.$$.fragment,f),C(Ku.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(e2.$$.fragment,f),C(by.$$.fragment,f),C(D2.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(O2.$$.fragment,f),C(Ey.$$.fragment,f),C(w1.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(y1.$$.fragment,f),C(Ly.$$.fragment,f),C(z1.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(Q1.$$.fragment,f),C(Ry.$$.fragment,f),C(Ob.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(Xb.$$.fragment,f),C(qy.$$.fragment,f),C(Tv.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(Ev.$$.fragment,f),C(Vy.$$.fragment,f),C($v.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(Sv.$$.fragment,f),C(Hy.$$.fragment,f),C(h0.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(_0.$$.fragment,f),C(Zy.$$.fragment,f),C(aF.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(sF.$$.fragment,f),C(aL.$$.fragment,f),C(dF.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(fF.$$.fragment,f),C(dL.$$.fragment,f),C(wF.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(yF.$$.fragment,f),C(hL.$$.fragment,f),C($F.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(SF.$$.fragment,f),C(vL.$$.fragment,f),C(VF.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(zF.$$.fragment,f),C(CL.$$.fragment,f),C(KF.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(eT.$$.fragment,f),C(xL.$$.fragment,f),C(fT.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(gT.$$.fragment,f),C(PL.$$.fragment,f),C(uT.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(vT.$$.fragment,f),C(DL.$$.fragment,f),C(AT.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(LT.$$.fragment,f),C(zL.$$.fragment,f),C(RT.$$.fragment,f),C(WL.$$.fragment,f),C(QL.$$.fragment,f),C(UL.$$.fragment,f),C(BT.$$.fragment,f),C(JL.$$.fragment,f),C(jT.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(GT.$$.fragment,f),C(r8.$$.fragment,f),C(XT.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(WT.$$.fragment,f),C(l8.$$.fragment,f),C(KT.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(e7.$$.fragment,f),C(m8.$$.fragment,f),C(t7.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(_8.$$.fragment,f),C(n7.$$.fragment,f),C(u8.$$.fragment,f),C(Y7.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(Z7.$$.fragment,f),C(M8.$$.fragment,f),C(EM.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(wM.$$.fragment,f),C(y8.$$.fragment,f),C(qM.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(DM.$$.fragment,f),C(S8.$$.fragment,f),C(zM.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(QM.$$.fragment,f),C(N8.$$.fragment,f),C(h4.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(_4.$$.fragment,f),C(O8.$$.fragment,f),C(y4.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(W8.$$.fragment,f),C(x4.$$.fragment,f),C(Q8.$$.fragment,f),C(rE.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(aE.$$.fragment,f),C(K8.$$.fragment,f),C(ME.$$.fragment,f),C(Z8.$$.fragment,f),C(e9.$$.fragment,f),C(r9.$$.fragment,f),C(CE.$$.fragment,f),C(t9.$$.fragment,f),C(yE.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(xE.$$.fragment,f),C(d9.$$.fragment,f),C(kE.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(RE.$$.fragment,f),C(h9.$$.fragment,f),C(eC.$$.fragment,f),C(p9.$$.fragment,f),C(_9.$$.fragment,f),C(b9.$$.fragment,f),C(rC.$$.fragment,f),C(v9.$$.fragment,f),C(EC.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(wC.$$.fragment,f),C(C9.$$.fragment,f),C(yC.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(L9.$$.fragment,f),C(xC.$$.fragment,f),C(x9.$$.fragment,f),C(kC.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(RC.$$.fragment,f),C(P9.$$.fragment,f),C(n5.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(l5.$$.fragment,f),C(j9.$$.fragment,f),C(u5.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(v5.$$.fragment,f),C(X9.$$.fragment,f),C(S5.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(H9.$$.fragment,f),C(P5.$$.fragment,f),C(U9.$$.fragment,f),C(z5.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(Q5.$$.fragment,f),C(ex.$$.fragment,f),C(t3.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(n3.$$.fragment,f),C(nx.$$.fragment,f),C(_3.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(b3.$$.fragment,f),C(cx.$$.fragment,f),C(x3.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(k3.$$.fragment,f),C(px.$$.fragment,f),C(D3.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(O3.$$.fragment,f),C(Fx.$$.fragment,f),C(Y3.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(Z3.$$.fragment,f),C(wx.$$.fragment,f),C(ow.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(tw.$$.fragment,f),C($x.$$.fragment,f),C(sw.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(iw.$$.fragment,f),C(Ix.$$.fragment,f),C(cw.$$.fragment,f),TDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(rt),f&&t(je),f&&t(We),f&&t(uf),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(bqe),f&&t(bi),w(SA),f&&t(vqe),f&&t(kn),f&&t(Fqe),w(RA,f),f&&t(Tqe),f&&t(ok),f&&t(Mqe),w(Ff,f),f&&t(Eqe),f&&t(vi),w(PA),f&&t(Cqe),f&&t(Co),w(BA),w(qA),w(Cg),w(jA),f&&t(wqe),f&&t(Ti),w(DA),f&&t(Aqe),f&&t(wo),w(GA),w(XA),w(sh),w(zA),f&&t(yqe),f&&t(Mi),w(WA),f&&t(Lqe),f&&t(Ao),w(QA),w(JA),w(qh),w(jh),w(YA),f&&t(xqe),f&&t(Ei),w(KA),f&&t($qe),f&&t(yo),w(ZA),w(ry),w(np),w(sp),w(ty),f&&t(kqe),f&&t(wi),w(ay),f&&t(Sqe),f&&t(Lo),w(ny),w(ly),w(dp),w(iy),w(nu),f&&t(Rqe),f&&t(Li),w(dy),f&&t(Pqe),f&&t(xo),w(cy),w(my),w(lu),w(gy),w(Ku),f&&t(Bqe),f&&t(ki),w(hy),f&&t(Iqe),f&&t($o),w(py),w(uy),w(e2),w(by),w(D2),f&&t(Nqe),f&&t(Pi),w(vy),f&&t(qqe),f&&t(ko),w(Fy),w(My),w(O2),w(Ey),w(w1),f&&t(jqe),f&&t(Ni),w(Cy),f&&t(Dqe),f&&t(So),w(wy),w(yy),w(y1),w(Ly),w(z1),f&&t(Gqe),f&&t(Di),w(xy),f&&t(Oqe),f&&t(Ro),w($y),w(Sy),w(Q1),w(Ry),w(Ob),f&&t(Vqe),f&&t(Vi),w(Py),f&&t(Xqe),f&&t(Po),w(By),w(Ny),w(Xb),w(qy),w(Tv),f&&t(zqe),f&&t(Wi),w(jy),f&&t(Wqe),f&&t(Bo),w(Dy),w(Oy),w(Ev),w(Vy),w($v),f&&t(Qqe),f&&t(Ui),w(Xy),f&&t(Hqe),f&&t(Io),w(zy),w(Qy),w(Sv),w(Hy),w(h0),f&&t(Uqe),f&&t(Ki),w(Uy),f&&t(Jqe),f&&t(No),w(Jy),w(Ky),w(_0),w(Zy),w(aF),f&&t(Yqe),f&&t(od),w(eL),f&&t(Kqe),f&&t(qo),w(oL),w(tL),w(sF),w(aL),w(dF),f&&t(Zqe),f&&t(ad),w(nL),f&&t(eje),f&&t(jo),w(sL),w(iL),w(fF),w(dL),w(wF),f&&t(oje),f&&t(ld),w(cL),f&&t(rje),f&&t(Do),w(fL),w(gL),w(yF),w(hL),w($F),f&&t(tje),f&&t(cd),w(pL),f&&t(aje),f&&t(Go),w(_L),w(bL),w(SF),w(vL),w(VF),f&&t(nje),f&&t(gd),w(FL),f&&t(sje),f&&t(Oo),w(TL),w(EL),w(zF),w(CL),w(KF),f&&t(lje),f&&t(_d),w(wL),f&&t(ije),f&&t(Vo),w(AL),w(LL),w(eT),w(xL),w(fT),f&&t(dje),f&&t(vd),w($L),f&&t(cje),f&&t(Xo),w(kL),w(RL),w(gT),w(PL),w(uT),f&&t(fje),f&&t(Md),w(IL),f&&t(mje),f&&t(zo),w(NL),w(jL),w(vT),w(DL),w(AT),f&&t(gje),f&&t(wd),w(GL),f&&t(hje),f&&t(Wo),w(OL),w(XL),w(LT),w(zL),w(RT),f&&t(pje),f&&t(xd),w(WL),f&&t(_je),f&&t(Qo),w(QL),w(UL),w(BT),w(JL),w(jT),f&&t(uje),f&&t(Sd),w(KL),f&&t(bje),f&&t(Ho),w(ZL),w(o8),w(GT),w(r8),w(XT),f&&t(vje),f&&t(Bd),w(t8),f&&t(Fje),f&&t(Uo),w(a8),w(s8),w(WT),w(l8),w(KT),f&&t(Tje),f&&t(qd),w(i8),f&&t(Mje),f&&t(Jo),w(d8),w(f8),w(e7),w(m8),w(t7),f&&t(Eje),f&&t(Gd),w(g8),f&&t(Cje),f&&t(Yo),w(h8),w(_8),w(n7),w(u8),w(Y7),f&&t(wje),f&&t(Xd),w(b8),f&&t(Aje),f&&t(Ko),w(v8),w(T8),w(Z7),w(M8),w(EM),f&&t(yje),f&&t(Qd),w(E8),f&&t(Lje),f&&t(Zo),w(C8),w(A8),w(wM),w(y8),w(qM),f&&t(xje),f&&t(Jd),w(L8),f&&t($je),f&&t(er),w(x8),w(k8),w(DM),w(S8),w(zM),f&&t(kje),f&&t(Zd),w(R8),f&&t(Sje),f&&t(or),w(P8),w(I8),w(QM),w(N8),w(h4),f&&t(Rje),f&&t(rc),w(q8),f&&t(Pje),f&&t(rr),w(j8),w(G8),w(_4),w(O8),w(y4),f&&t(Bje),f&&t(nc),w(V8),f&&t(Ije),f&&t(tr),w(X8),w(W8),w(x4),w(Q8),w(rE),f&&t(Nje),f&&t(ic),w(H8),f&&t(qje),f&&t(ar),w(U8),w(Y8),w(aE),w(K8),w(ME),f&&t(jje),f&&t(fc),w(Z8),f&&t(Dje),f&&t(nr),w(e9),w(r9),w(CE),w(t9),w(yE),f&&t(Gje),f&&t(hc),w(n9),f&&t(Oje),f&&t(sr),w(s9),w(i9),w(xE),w(d9),w(kE),f&&t(Vje),f&&t(uc),w(c9),f&&t(Xje),f&&t(lr),w(f9),w(g9),w(RE),w(h9),w(eC),f&&t(zje),f&&t(Fc),w(p9),f&&t(Wje),f&&t(ir),w(_9),w(b9),w(rC),w(v9),w(EC),f&&t(Qje),f&&t(Ec),w(F9),f&&t(Hje),f&&t(dr),w(T9),w(E9),w(wC),w(C9),w(yC),f&&t(Uje),f&&t(Ac),w(w9),f&&t(Jje),f&&t(cr),w(A9),w(L9),w(xC),w(x9),w(kC),f&&t(Yje),f&&t(xc),w($9),f&&t(Kje),f&&t(fr),w(k9),w(R9),w(RC),w(P9),w(n5),f&&t(Zje),f&&t(Sc),w(B9),f&&t(eDe),f&&t(mr),w(I9),w(q9),w(l5),w(j9),w(u5),f&&t(oDe),f&&t(Bc),w(D9),f&&t(rDe),f&&t(gr),w(G9),w(V9),w(v5),w(X9),w(S5),f&&t(tDe),f&&t(qc),w(z9),f&&t(aDe),f&&t(hr),w(W9),w(H9),w(P5),w(U9),w(z5),f&&t(nDe),f&&t(Gc),w(J9),f&&t(sDe),f&&t(pr),w(Y9),w(Z9),w(Q5),w(ex),w(t3),f&&t(lDe),f&&t(Xc),w(ox),f&&t(iDe),f&&t(_r),w(rx),w(ax),w(n3),w(nx),w(_3),f&&t(dDe),f&&t(Qc),w(sx),f&&t(cDe),f&&t(ur),w(lx),w(dx),w(b3),w(cx),w(x3),f&&t(fDe),f&&t(Jc),w(fx),f&&t(mDe),f&&t(br),w(mx),w(hx),w(k3),w(px),w(D3),f&&t(gDe),f&&t(Zc),w(_x),f&&t(hDe),f&&t(vr),w(ux),w(vx),w(O3),w(Fx),w(Y3),f&&t(pDe),f&&t(rf),w(Tx),f&&t(_De),f&&t(Fr),w(Mx),w(Cx),w(Z3),w(wx),w(ow),f&&t(uDe),f&&t(nf),w(Ax),f&&t(bDe),f&&t(Tr),w(yx),w(xx),w(tw),w($x),w(sw),f&&t(vDe),f&&t(df),w(Sx),f&&t(FDe),f&&t(Mr),w(Rx),w(Bx),w(iw),w(Ix),w(cw)}}}const cRt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function fRt(L){return fkt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class bRt extends lkt{constructor(g){super();ikt(this,g,fRt,dRt,dkt,{})}}export{bRt as default,cRt as metadata};
