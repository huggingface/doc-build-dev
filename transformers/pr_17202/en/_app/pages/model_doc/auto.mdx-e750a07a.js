import{S as iyt,i as dyt,s as cyt,e as a,k as l,w as F,t as o,M as fyt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as myt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as yjr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function gyt(L){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,KA,gf,qe,Xe,ci,An,ZA,yn,Ln,e6,fi,xn,o6,mi,hf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),li=a("code"),mf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),ii=a("code"),di=o('"new-model"'),KA=o(")."),gf=l(),qe=a("p"),Xe=o("Likewise, if your "),ci=a("code"),An=o("NewModel"),ZA=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),e6=o(`, make sure its
`),fi=a("code"),xn=o("config_class"),o6=o(` attribute is set to the same class you use when registering the model (here
`),mi=a("code"),hf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var v$=s(p);m=r(v$,"NewModelConfig"),v$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var gi=s(d);h=r(gi,"PretrainedConfig"),gi.forEach(t),Mo=r(Ae,`, make sure its
`),li=n(Ae,"CODE",{});var F$=s(li);mf=r(F$,"model_type"),F$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),ii=n(Ae,"CODE",{});var T$=s(ii);di=r(T$,'"new-model"'),T$.forEach(t),KA=r(Ae,")."),Ae.forEach(t),gf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ci=n(Eo,"CODE",{});var Ea=s(ci);An=r(Ea,"NewModel"),Ea.forEach(t),ZA=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var M$=s(yn);Ln=r(M$,"PreTrainedModel"),M$.forEach(t),e6=r(Eo,`, make sure its
`),fi=n(Eo,"CODE",{});var pf=s(fi);xn=r(pf,"config_class"),pf.forEach(t),o6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),mi=n(Eo,"CODE",{});var E$=s(mi);hf=r(E$,"NewModelConfig"),E$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,li),e(li,mf),e(g,et),e(g,ii),e(ii,di),e(g,KA),b(ze,gf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ci),e(ci,An),e(qe,ZA),e(qe,yn),e(yn,Ln),e(qe,e6),e(qe,fi),e(fi,xn),e(qe,o6),e(qe,mi),e(mi,hf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(gf),ze&&t(qe)}}}function hyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uyt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function _yt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function byt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function vyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Myt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ayt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $yt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Syt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ryt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Byt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Lt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ELt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ALt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Lt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ILt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ULt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZLt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d8t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c8t(L){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,KA,gf,qe,Xe,ci,An,ZA,yn,Ln,e6,fi,xn,o6,mi,hf,Ma,ze,Ae,v$,gi,F$,T$,Eo,Ea,M$,pf,E$,FDe,dIe,hi,uf,cee,r6,TDe,fee,MDe,cIe,$n,EDe,mee,CDe,wDe,gee,ADe,yDe,fIe,t6,mIe,C$,LDe,gIe,_f,hIe,pi,bf,hee,a6,xDe,pee,$De,pIe,Co,n6,kDe,s6,SDe,w$,RDe,BDe,PDe,l6,IDe,uee,qDe,NDe,jDe,Er,i6,DDe,_ee,GDe,ODe,ui,VDe,bee,XDe,zDe,vee,QDe,WDe,HDe,A,vf,Fee,UDe,JDe,A$,YDe,KDe,ZDe,Ff,Tee,eGe,oGe,y$,rGe,tGe,aGe,Tf,Mee,nGe,sGe,L$,lGe,iGe,dGe,Mf,Eee,cGe,fGe,x$,mGe,gGe,hGe,Ef,Cee,pGe,uGe,$$,_Ge,bGe,vGe,Cf,wee,FGe,TGe,k$,MGe,EGe,CGe,wf,Aee,wGe,AGe,S$,yGe,LGe,xGe,Af,yee,$Ge,kGe,R$,SGe,RGe,BGe,yf,Lee,PGe,IGe,B$,qGe,NGe,jGe,Lf,xee,DGe,GGe,P$,OGe,VGe,XGe,xf,$ee,zGe,QGe,I$,WGe,HGe,UGe,$f,kee,JGe,YGe,q$,KGe,ZGe,eOe,kf,See,oOe,rOe,N$,tOe,aOe,nOe,Sf,Ree,sOe,lOe,j$,iOe,dOe,cOe,Rf,Bee,fOe,mOe,D$,gOe,hOe,pOe,Bf,Pee,uOe,_Oe,G$,bOe,vOe,FOe,Pf,Iee,TOe,MOe,O$,EOe,COe,wOe,If,qee,AOe,yOe,V$,LOe,xOe,$Oe,qf,Nee,kOe,SOe,X$,ROe,BOe,POe,Nf,jee,IOe,qOe,z$,NOe,jOe,DOe,jf,Dee,GOe,OOe,Q$,VOe,XOe,zOe,Df,Gee,QOe,WOe,W$,HOe,UOe,JOe,Gf,Oee,YOe,KOe,H$,ZOe,eVe,oVe,Of,Vee,rVe,tVe,U$,aVe,nVe,sVe,Vf,Xee,lVe,iVe,J$,dVe,cVe,fVe,Xf,zee,mVe,gVe,Y$,hVe,pVe,uVe,zf,Qee,_Ve,bVe,K$,vVe,FVe,TVe,Qf,Wee,MVe,EVe,Z$,CVe,wVe,AVe,Wf,Hee,yVe,LVe,ek,xVe,$Ve,kVe,Hf,Uee,SVe,RVe,ok,BVe,PVe,IVe,Uf,Jee,qVe,NVe,rk,jVe,DVe,GVe,Jf,Yee,OVe,VVe,tk,XVe,zVe,QVe,Yf,Kee,WVe,HVe,ak,UVe,JVe,YVe,Kf,Zee,KVe,ZVe,nk,eXe,oXe,rXe,Zf,eoe,tXe,aXe,sk,nXe,sXe,lXe,em,ooe,iXe,dXe,lk,cXe,fXe,mXe,om,roe,gXe,hXe,ik,pXe,uXe,_Xe,rm,toe,bXe,vXe,dk,FXe,TXe,MXe,tm,aoe,EXe,CXe,ck,wXe,AXe,yXe,am,noe,LXe,xXe,fk,$Xe,kXe,SXe,nm,soe,RXe,BXe,mk,PXe,IXe,qXe,sm,loe,NXe,jXe,gk,DXe,GXe,OXe,lm,ioe,VXe,XXe,hk,zXe,QXe,WXe,im,doe,HXe,UXe,pk,JXe,YXe,KXe,dm,coe,ZXe,eze,uk,oze,rze,tze,cm,foe,aze,nze,_k,sze,lze,ize,fm,moe,dze,cze,bk,fze,mze,gze,mm,goe,hze,pze,vk,uze,_ze,bze,gm,hoe,vze,Fze,Fk,Tze,Mze,Eze,hm,poe,Cze,wze,Tk,Aze,yze,Lze,pm,uoe,xze,$ze,Mk,kze,Sze,Rze,um,_oe,Bze,Pze,Ek,Ize,qze,Nze,_m,boe,jze,Dze,Ck,Gze,Oze,Vze,bm,voe,Xze,zze,wk,Qze,Wze,Hze,vm,Foe,Uze,Jze,Ak,Yze,Kze,Zze,Fm,Toe,eQe,oQe,yk,rQe,tQe,aQe,Tm,Moe,nQe,sQe,Lk,lQe,iQe,dQe,Mm,Eoe,cQe,fQe,xk,mQe,gQe,hQe,Em,Coe,pQe,uQe,$k,_Qe,bQe,vQe,Cm,woe,FQe,TQe,kk,MQe,EQe,CQe,wm,Aoe,wQe,AQe,Sk,yQe,LQe,xQe,Am,yoe,$Qe,kQe,Rk,SQe,RQe,BQe,ym,Loe,PQe,IQe,Bk,qQe,NQe,jQe,Lm,xoe,DQe,GQe,Pk,OQe,VQe,XQe,xm,$oe,zQe,QQe,Ik,WQe,HQe,UQe,$m,koe,JQe,YQe,qk,KQe,ZQe,eWe,km,Soe,oWe,rWe,Nk,tWe,aWe,nWe,Sm,Roe,sWe,lWe,jk,iWe,dWe,cWe,Rm,Boe,fWe,mWe,Dk,gWe,hWe,pWe,Bm,Poe,uWe,_We,Gk,bWe,vWe,FWe,Pm,Ioe,TWe,MWe,Ok,EWe,CWe,wWe,Im,qoe,AWe,yWe,Vk,LWe,xWe,$We,qm,Noe,kWe,SWe,Xk,RWe,BWe,PWe,Nm,joe,IWe,qWe,zk,NWe,jWe,DWe,jm,Doe,GWe,OWe,Qk,VWe,XWe,zWe,Dm,Goe,QWe,WWe,Wk,HWe,UWe,JWe,Gm,Ooe,YWe,KWe,Hk,ZWe,eHe,oHe,Om,Voe,rHe,tHe,Uk,aHe,nHe,sHe,Vm,Xoe,lHe,iHe,Jk,dHe,cHe,fHe,Xm,zoe,mHe,gHe,Yk,hHe,pHe,uHe,zm,Qoe,_He,bHe,Kk,vHe,FHe,THe,Qm,Woe,MHe,EHe,Zk,CHe,wHe,AHe,Wm,Hoe,yHe,LHe,eS,xHe,$He,kHe,Hm,Uoe,SHe,RHe,oS,BHe,PHe,IHe,Um,Joe,qHe,NHe,rS,jHe,DHe,GHe,Jm,Yoe,OHe,VHe,tS,XHe,zHe,QHe,Ym,Koe,WHe,HHe,aS,UHe,JHe,YHe,Km,Zoe,KHe,ZHe,nS,eUe,oUe,rUe,Zm,ere,tUe,aUe,sS,nUe,sUe,lUe,eg,ore,iUe,dUe,lS,cUe,fUe,mUe,og,rre,gUe,hUe,iS,pUe,uUe,_Ue,rg,tre,bUe,vUe,dS,FUe,TUe,MUe,tg,are,EUe,CUe,cS,wUe,AUe,yUe,ag,nre,LUe,xUe,fS,$Ue,kUe,SUe,ng,sre,RUe,BUe,mS,PUe,IUe,qUe,sg,lre,NUe,jUe,gS,DUe,GUe,OUe,lg,ire,VUe,XUe,hS,zUe,QUe,WUe,ig,dre,HUe,UUe,pS,JUe,YUe,KUe,dg,cre,ZUe,eJe,uS,oJe,rJe,tJe,cg,fre,aJe,nJe,_S,sJe,lJe,iJe,fg,mre,dJe,cJe,bS,fJe,mJe,gJe,mg,gre,hJe,pJe,vS,uJe,_Je,bJe,gg,hre,vJe,FJe,FS,TJe,MJe,EJe,hg,pre,CJe,wJe,TS,AJe,yJe,LJe,pg,ure,xJe,$Je,MS,kJe,SJe,RJe,ug,_re,BJe,PJe,ES,IJe,qJe,NJe,_g,jJe,bg,d6,DJe,bre,GJe,uIe,_i,vg,vre,c6,OJe,Fre,VJe,_Ie,wo,f6,XJe,m6,zJe,CS,QJe,WJe,HJe,g6,UJe,Tre,JJe,YJe,KJe,Cr,h6,ZJe,Mre,eYe,oYe,Ca,rYe,Ere,tYe,aYe,Cre,nYe,sYe,wre,lYe,iYe,dYe,k,kn,Are,cYe,fYe,wS,mYe,gYe,AS,hYe,pYe,uYe,Sn,yre,_Ye,bYe,yS,vYe,FYe,LS,TYe,MYe,EYe,Rn,Lre,CYe,wYe,xS,AYe,yYe,$S,LYe,xYe,$Ye,Fg,xre,kYe,SYe,kS,RYe,BYe,PYe,Bn,$re,IYe,qYe,SS,NYe,jYe,RS,DYe,GYe,OYe,Tg,kre,VYe,XYe,BS,zYe,QYe,WYe,Mg,Sre,HYe,UYe,PS,JYe,YYe,KYe,Eg,Rre,ZYe,eKe,IS,oKe,rKe,tKe,Pn,Bre,aKe,nKe,qS,sKe,lKe,NS,iKe,dKe,cKe,In,Pre,fKe,mKe,jS,gKe,hKe,DS,pKe,uKe,_Ke,qn,Ire,bKe,vKe,GS,FKe,TKe,OS,MKe,EKe,CKe,Cg,qre,wKe,AKe,VS,yKe,LKe,xKe,wg,Nre,$Ke,kKe,XS,SKe,RKe,BKe,Ag,jre,PKe,IKe,zS,qKe,NKe,jKe,Nn,Dre,DKe,GKe,QS,OKe,VKe,WS,XKe,zKe,QKe,yg,Gre,WKe,HKe,HS,UKe,JKe,YKe,jn,Ore,KKe,ZKe,US,eZe,oZe,JS,rZe,tZe,aZe,Dn,Vre,nZe,sZe,YS,lZe,iZe,KS,dZe,cZe,fZe,Gn,Xre,mZe,gZe,ZS,hZe,pZe,eR,uZe,_Ze,bZe,Lg,zre,vZe,FZe,oR,TZe,MZe,EZe,On,Qre,CZe,wZe,rR,AZe,yZe,tR,LZe,xZe,$Ze,Vn,Wre,kZe,SZe,aR,RZe,BZe,nR,PZe,IZe,qZe,Xn,Hre,NZe,jZe,sR,DZe,GZe,lR,OZe,VZe,XZe,zn,Ure,zZe,QZe,iR,WZe,HZe,dR,UZe,JZe,YZe,Qn,Jre,KZe,ZZe,cR,eeo,oeo,fR,reo,teo,aeo,Wn,Yre,neo,seo,mR,leo,ieo,gR,deo,ceo,feo,xg,Kre,meo,geo,hR,heo,peo,ueo,Hn,Zre,_eo,beo,pR,veo,Feo,uR,Teo,Meo,Eeo,$g,ete,Ceo,weo,_R,Aeo,yeo,Leo,Un,ote,xeo,$eo,bR,keo,Seo,vR,Reo,Beo,Peo,Jn,rte,Ieo,qeo,FR,Neo,jeo,TR,Deo,Geo,Oeo,Yn,tte,Veo,Xeo,MR,zeo,Qeo,ER,Weo,Heo,Ueo,Kn,ate,Jeo,Yeo,CR,Keo,Zeo,wR,eoo,ooo,roo,Zn,nte,too,aoo,AR,noo,soo,yR,loo,ioo,doo,kg,ste,coo,foo,LR,moo,goo,hoo,es,lte,poo,uoo,xR,_oo,boo,$R,voo,Foo,Too,os,ite,Moo,Eoo,kR,Coo,woo,SR,Aoo,yoo,Loo,rs,dte,xoo,$oo,RR,koo,Soo,BR,Roo,Boo,Poo,ts,cte,Ioo,qoo,PR,Noo,joo,IR,Doo,Goo,Ooo,as,fte,Voo,Xoo,qR,zoo,Qoo,NR,Woo,Hoo,Uoo,ns,mte,Joo,Yoo,jR,Koo,Zoo,DR,ero,oro,rro,Sg,gte,tro,aro,GR,nro,sro,lro,ss,hte,iro,dro,OR,cro,fro,VR,mro,gro,hro,Rg,pte,pro,uro,XR,_ro,bro,vro,Bg,ute,Fro,Tro,zR,Mro,Ero,Cro,ls,_te,wro,Aro,QR,yro,Lro,WR,xro,$ro,kro,is,bte,Sro,Rro,HR,Bro,Pro,UR,Iro,qro,Nro,ds,vte,jro,Dro,JR,Gro,Oro,YR,Vro,Xro,zro,Pg,Fte,Qro,Wro,KR,Hro,Uro,Jro,cs,Tte,Yro,Kro,ZR,Zro,eto,eB,oto,rto,tto,fs,Mte,ato,nto,oB,sto,lto,rB,ito,dto,cto,ms,Ete,fto,mto,tB,gto,hto,aB,pto,uto,_to,gs,Cte,bto,vto,nB,Fto,Tto,sB,Mto,Eto,Cto,hs,wte,wto,Ato,lB,yto,Lto,iB,xto,$to,kto,Ig,Ate,Sto,Rto,dB,Bto,Pto,Ito,ps,yte,qto,Nto,cB,jto,Dto,fB,Gto,Oto,Vto,qg,Lte,Xto,zto,mB,Qto,Wto,Hto,Ng,xte,Uto,Jto,gB,Yto,Kto,Zto,jg,$te,eao,oao,hB,rao,tao,aao,Dg,kte,nao,sao,pB,lao,iao,dao,us,Ste,cao,fao,uB,mao,gao,_B,hao,pao,uao,Gg,Rte,_ao,bao,bB,vao,Fao,Tao,_s,Bte,Mao,Eao,vB,Cao,wao,FB,Aao,yao,Lao,bs,Pte,xao,$ao,TB,kao,Sao,MB,Rao,Bao,Pao,vs,Ite,Iao,qao,EB,Nao,jao,CB,Dao,Gao,Oao,Fs,qte,Vao,Xao,wB,zao,Qao,AB,Wao,Hao,Uao,Ts,Nte,Jao,Yao,yB,Kao,Zao,LB,eno,ono,rno,Ms,jte,tno,ano,xB,nno,sno,$B,lno,ino,dno,Og,Dte,cno,fno,kB,mno,gno,hno,Vg,Gte,pno,uno,SB,_no,bno,vno,Es,Ote,Fno,Tno,RB,Mno,Eno,BB,Cno,wno,Ano,Cs,Vte,yno,Lno,PB,xno,$no,IB,kno,Sno,Rno,ws,Xte,Bno,Pno,qB,Ino,qno,NB,Nno,jno,Dno,Xg,zte,Gno,Ono,jB,Vno,Xno,zno,zg,Qte,Qno,Wno,DB,Hno,Uno,Jno,Qg,Wte,Yno,Kno,GB,Zno,eso,oso,As,Hte,rso,tso,OB,aso,nso,VB,sso,lso,iso,Wg,Ute,dso,cso,XB,fso,mso,gso,Hg,Jte,hso,pso,zB,uso,_so,bso,ys,Yte,vso,Fso,QB,Tso,Mso,WB,Eso,Cso,wso,Ug,Kte,Aso,yso,HB,Lso,xso,$so,Jg,Zte,kso,Sso,UB,Rso,Bso,Pso,Ls,eae,Iso,qso,JB,Nso,jso,YB,Dso,Gso,Oso,xs,oae,Vso,Xso,KB,zso,Qso,ZB,Wso,Hso,Uso,$s,rae,Jso,Yso,eP,Kso,Zso,oP,elo,olo,rlo,ks,tae,tlo,alo,rP,nlo,slo,tP,llo,ilo,dlo,Yg,clo,Kg,p6,flo,aae,mlo,bIe,bi,Zg,nae,u6,glo,sae,hlo,vIe,Ao,_6,plo,b6,ulo,aP,_lo,blo,vlo,v6,Flo,lae,Tlo,Mlo,Elo,Qe,F6,Clo,iae,wlo,Alo,wa,ylo,dae,Llo,xlo,cae,$lo,klo,fae,Slo,Rlo,Blo,oe,eh,mae,Plo,Ilo,nP,qlo,Nlo,jlo,oh,gae,Dlo,Glo,sP,Olo,Vlo,Xlo,rh,hae,zlo,Qlo,lP,Wlo,Hlo,Ulo,th,pae,Jlo,Ylo,iP,Klo,Zlo,eio,ah,uae,oio,rio,dP,tio,aio,nio,nh,_ae,sio,lio,cP,iio,dio,cio,sh,bae,fio,mio,fP,gio,hio,pio,lh,vae,uio,_io,mP,bio,vio,Fio,ih,Fae,Tio,Mio,gP,Eio,Cio,wio,dh,Tae,Aio,yio,hP,Lio,xio,$io,ch,Mae,kio,Sio,pP,Rio,Bio,Pio,fh,Eae,Iio,qio,uP,Nio,jio,Dio,mh,Cae,Gio,Oio,_P,Vio,Xio,zio,gh,wae,Qio,Wio,bP,Hio,Uio,Jio,hh,Aae,Yio,Kio,vP,Zio,edo,odo,ph,yae,rdo,tdo,FP,ado,ndo,sdo,uh,Lae,ldo,ido,TP,ddo,cdo,fdo,_h,xae,mdo,gdo,MP,hdo,pdo,udo,bh,$ae,_do,bdo,EP,vdo,Fdo,Tdo,vh,kae,Mdo,Edo,CP,Cdo,wdo,Ado,Fh,Sae,ydo,Ldo,wP,xdo,$do,kdo,Th,Rae,Sdo,Rdo,AP,Bdo,Pdo,Ido,Mh,Bae,qdo,Ndo,yP,jdo,Ddo,Gdo,Eh,Pae,Odo,Vdo,LP,Xdo,zdo,Qdo,Ch,Iae,Wdo,Hdo,xP,Udo,Jdo,Ydo,wh,Kdo,Ah,Zdo,yh,T6,eco,qae,oco,FIe,vi,Lh,Nae,M6,rco,jae,tco,TIe,yo,E6,aco,C6,nco,$P,sco,lco,ico,w6,dco,Dae,cco,fco,mco,We,A6,gco,Gae,hco,pco,Fi,uco,Oae,_co,bco,Vae,vco,Fco,Tco,be,xh,Xae,Mco,Eco,kP,Cco,wco,Aco,$h,zae,yco,Lco,Qae,xco,$co,kco,kh,Wae,Sco,Rco,SP,Bco,Pco,Ico,Sh,Hae,qco,Nco,RP,jco,Dco,Gco,Rh,Uae,Oco,Vco,BP,Xco,zco,Qco,Bh,Jae,Wco,Hco,PP,Uco,Jco,Yco,Ph,Yae,Kco,Zco,IP,efo,ofo,rfo,Ih,Kae,tfo,afo,qP,nfo,sfo,lfo,qh,Zae,ifo,dfo,NP,cfo,ffo,mfo,Nh,ene,gfo,hfo,jP,pfo,ufo,_fo,jh,one,bfo,vfo,DP,Ffo,Tfo,Mfo,Dh,rne,Efo,Cfo,GP,wfo,Afo,yfo,Gh,tne,Lfo,xfo,OP,$fo,kfo,Sfo,Oh,ane,Rfo,Bfo,VP,Pfo,Ifo,qfo,Vh,nne,Nfo,jfo,XP,Dfo,Gfo,Ofo,Xh,Vfo,zh,Xfo,Qh,y6,zfo,sne,Qfo,MIe,Ti,Wh,lne,L6,Wfo,ine,Hfo,EIe,Lo,x6,Ufo,Mi,Jfo,zP,Yfo,Kfo,QP,Zfo,emo,omo,$6,rmo,dne,tmo,amo,nmo,ot,k6,smo,cne,lmo,imo,Ei,dmo,fne,cmo,fmo,WP,mmo,gmo,hmo,Hh,pmo,He,S6,umo,mne,_mo,bmo,Aa,vmo,gne,Fmo,Tmo,hne,Mmo,Emo,pne,Cmo,wmo,Amo,x,Uh,une,ymo,Lmo,HP,xmo,$mo,kmo,Jh,_ne,Smo,Rmo,UP,Bmo,Pmo,Imo,Yh,bne,qmo,Nmo,JP,jmo,Dmo,Gmo,Kh,vne,Omo,Vmo,YP,Xmo,zmo,Qmo,Zh,Fne,Wmo,Hmo,KP,Umo,Jmo,Ymo,ep,Tne,Kmo,Zmo,ZP,ego,ogo,rgo,op,Mne,tgo,ago,eI,ngo,sgo,lgo,rp,Ene,igo,dgo,oI,cgo,fgo,mgo,tp,Cne,ggo,hgo,rI,pgo,ugo,_go,ap,wne,bgo,vgo,tI,Fgo,Tgo,Mgo,np,Ane,Ego,Cgo,aI,wgo,Ago,ygo,sp,yne,Lgo,xgo,nI,$go,kgo,Sgo,lp,Lne,Rgo,Bgo,sI,Pgo,Igo,qgo,ip,xne,Ngo,jgo,lI,Dgo,Ggo,Ogo,dp,$ne,Vgo,Xgo,iI,zgo,Qgo,Wgo,cp,kne,Hgo,Ugo,dI,Jgo,Ygo,Kgo,fp,Sne,Zgo,eho,cI,oho,rho,tho,mp,Rne,aho,nho,fI,sho,lho,iho,gp,Bne,dho,cho,mI,fho,mho,gho,hp,Pne,hho,pho,gI,uho,_ho,bho,pp,Ine,vho,Fho,hI,Tho,Mho,Eho,up,qne,Cho,who,pI,Aho,yho,Lho,_p,Nne,xho,$ho,uI,kho,Sho,Rho,bp,jne,Bho,Pho,_I,Iho,qho,Nho,vp,Dne,jho,Dho,bI,Gho,Oho,Vho,Fp,Gne,Xho,zho,vI,Qho,Who,Hho,Tp,One,Uho,Jho,FI,Yho,Kho,Zho,Mp,Vne,epo,opo,TI,rpo,tpo,apo,Ep,Xne,npo,spo,MI,lpo,ipo,dpo,Cp,zne,cpo,fpo,EI,mpo,gpo,hpo,wp,Qne,ppo,upo,CI,_po,bpo,vpo,Ap,Wne,Fpo,Tpo,wI,Mpo,Epo,Cpo,Ss,Hne,wpo,Apo,AI,ypo,Lpo,yI,xpo,$po,kpo,yp,Une,Spo,Rpo,LI,Bpo,Ppo,Ipo,Lp,Jne,qpo,Npo,xI,jpo,Dpo,Gpo,xp,Yne,Opo,Vpo,$I,Xpo,zpo,Qpo,$p,Kne,Wpo,Hpo,kI,Upo,Jpo,Ypo,kp,Zne,Kpo,Zpo,SI,euo,ouo,ruo,Sp,ese,tuo,auo,RI,nuo,suo,luo,Rp,ose,iuo,duo,BI,cuo,fuo,muo,Bp,rse,guo,huo,PI,puo,uuo,_uo,Pp,tse,buo,vuo,II,Fuo,Tuo,Muo,Ip,ase,Euo,Cuo,qI,wuo,Auo,yuo,qp,nse,Luo,xuo,NI,$uo,kuo,Suo,Np,sse,Ruo,Buo,jI,Puo,Iuo,quo,jp,lse,Nuo,juo,DI,Duo,Guo,Ouo,Dp,ise,Vuo,Xuo,GI,zuo,Quo,Wuo,Gp,dse,Huo,Uuo,OI,Juo,Yuo,Kuo,Op,cse,Zuo,e_o,VI,o_o,r_o,t_o,Vp,fse,a_o,n_o,XI,s_o,l_o,i_o,Xp,mse,d_o,c_o,zI,f_o,m_o,g_o,zp,gse,h_o,p_o,QI,u_o,__o,b_o,Qp,hse,v_o,F_o,WI,T_o,M_o,E_o,Wp,pse,C_o,w_o,HI,A_o,y_o,L_o,Hp,use,x_o,$_o,UI,k_o,S_o,R_o,Up,_se,B_o,P_o,JI,I_o,q_o,N_o,Jp,bse,j_o,D_o,YI,G_o,O_o,V_o,Yp,vse,X_o,z_o,KI,Q_o,W_o,H_o,Kp,Fse,U_o,J_o,ZI,Y_o,K_o,Z_o,Zp,Tse,e2o,o2o,eq,r2o,t2o,a2o,eu,Mse,n2o,s2o,oq,l2o,i2o,d2o,ou,Ese,c2o,f2o,rq,m2o,g2o,h2o,ru,Cse,p2o,u2o,tq,_2o,b2o,v2o,tu,wse,F2o,T2o,aq,M2o,E2o,C2o,au,Ase,w2o,A2o,nq,y2o,L2o,x2o,nu,yse,$2o,k2o,sq,S2o,R2o,B2o,su,Lse,P2o,I2o,lq,q2o,N2o,j2o,lu,xse,D2o,G2o,iq,O2o,V2o,X2o,iu,$se,z2o,Q2o,dq,W2o,H2o,U2o,du,kse,J2o,Y2o,cq,K2o,Z2o,e1o,cu,Sse,o1o,r1o,fq,t1o,a1o,n1o,fu,Rse,s1o,l1o,mq,i1o,d1o,c1o,mu,Bse,f1o,m1o,gq,g1o,h1o,p1o,gu,Pse,u1o,_1o,hq,b1o,v1o,F1o,hu,Ise,T1o,M1o,pq,E1o,C1o,w1o,pu,qse,A1o,y1o,uq,L1o,x1o,$1o,uu,Nse,k1o,S1o,_q,R1o,B1o,P1o,_u,jse,I1o,q1o,bq,N1o,j1o,D1o,bu,Dse,G1o,O1o,vq,V1o,X1o,z1o,vu,Gse,Q1o,W1o,Fq,H1o,U1o,J1o,Fu,Ose,Y1o,K1o,Tq,Z1o,ebo,obo,Tu,Vse,rbo,tbo,Mq,abo,nbo,sbo,Mu,Xse,lbo,ibo,Eq,dbo,cbo,fbo,Eu,zse,mbo,gbo,Cq,hbo,pbo,ubo,Cu,Qse,_bo,bbo,wq,vbo,Fbo,Tbo,wu,Wse,Mbo,Ebo,Aq,Cbo,wbo,Abo,Au,Hse,ybo,Lbo,yq,xbo,$bo,kbo,yu,Use,Sbo,Rbo,Lq,Bbo,Pbo,Ibo,Lu,Jse,qbo,Nbo,xq,jbo,Dbo,Gbo,xu,Yse,Obo,Vbo,$q,Xbo,zbo,Qbo,$u,Kse,Wbo,Hbo,kq,Ubo,Jbo,Ybo,ku,Zse,Kbo,Zbo,Sq,evo,ovo,rvo,Su,ele,tvo,avo,Rq,nvo,svo,lvo,Ru,ole,ivo,dvo,Bq,cvo,fvo,mvo,Bu,rle,gvo,hvo,Pq,pvo,uvo,_vo,Pu,tle,bvo,vvo,Iq,Fvo,Tvo,Mvo,Iu,ale,Evo,Cvo,qq,wvo,Avo,yvo,qu,nle,Lvo,xvo,Nq,$vo,kvo,Svo,Nu,Rvo,sle,Bvo,Pvo,lle,Ivo,qvo,ju,CIe,Ci,Du,ile,R6,Nvo,dle,jvo,wIe,xo,B6,Dvo,wi,Gvo,jq,Ovo,Vvo,Dq,Xvo,zvo,Qvo,P6,Wvo,cle,Hvo,Uvo,Jvo,rt,I6,Yvo,fle,Kvo,Zvo,Ai,eFo,mle,oFo,rFo,Gq,tFo,aFo,nFo,Gu,sFo,Ue,q6,lFo,gle,iFo,dFo,ya,cFo,hle,fFo,mFo,ple,gFo,hFo,ule,pFo,uFo,_Fo,G,Ou,_le,bFo,vFo,Oq,FFo,TFo,MFo,Vu,ble,EFo,CFo,Vq,wFo,AFo,yFo,Xu,vle,LFo,xFo,Xq,$Fo,kFo,SFo,zu,Fle,RFo,BFo,zq,PFo,IFo,qFo,Qu,Tle,NFo,jFo,Qq,DFo,GFo,OFo,Wu,Mle,VFo,XFo,Wq,zFo,QFo,WFo,Hu,Ele,HFo,UFo,Hq,JFo,YFo,KFo,Uu,Cle,ZFo,e0o,Uq,o0o,r0o,t0o,Ju,wle,a0o,n0o,Jq,s0o,l0o,i0o,Yu,Ale,d0o,c0o,Yq,f0o,m0o,g0o,Ku,yle,h0o,p0o,Kq,u0o,_0o,b0o,Zu,Lle,v0o,F0o,Zq,T0o,M0o,E0o,e_,xle,C0o,w0o,eN,A0o,y0o,L0o,o_,$le,x0o,$0o,oN,k0o,S0o,R0o,r_,kle,B0o,P0o,rN,I0o,q0o,N0o,t_,Sle,j0o,D0o,tN,G0o,O0o,V0o,a_,Rle,X0o,z0o,aN,Q0o,W0o,H0o,n_,Ble,U0o,J0o,nN,Y0o,K0o,Z0o,s_,Ple,eTo,oTo,sN,rTo,tTo,aTo,l_,Ile,nTo,sTo,lN,lTo,iTo,dTo,i_,qle,cTo,fTo,iN,mTo,gTo,hTo,d_,Nle,pTo,uTo,dN,_To,bTo,vTo,c_,jle,FTo,TTo,cN,MTo,ETo,CTo,f_,Dle,wTo,ATo,fN,yTo,LTo,xTo,m_,Gle,$To,kTo,mN,STo,RTo,BTo,g_,Ole,PTo,ITo,gN,qTo,NTo,jTo,h_,Vle,DTo,GTo,hN,OTo,VTo,XTo,p_,Xle,zTo,QTo,pN,WTo,HTo,UTo,u_,zle,JTo,YTo,uN,KTo,ZTo,e7o,__,Qle,o7o,r7o,_N,t7o,a7o,n7o,b_,Wle,s7o,l7o,bN,i7o,d7o,c7o,v_,Hle,f7o,m7o,vN,g7o,h7o,p7o,F_,Ule,u7o,_7o,FN,b7o,v7o,F7o,T_,Jle,T7o,M7o,TN,E7o,C7o,w7o,M_,Yle,A7o,y7o,MN,L7o,x7o,$7o,E_,Kle,k7o,S7o,EN,R7o,B7o,P7o,C_,Zle,I7o,q7o,CN,N7o,j7o,D7o,w_,eie,G7o,O7o,wN,V7o,X7o,z7o,A_,oie,Q7o,W7o,AN,H7o,U7o,J7o,y_,rie,Y7o,K7o,yN,Z7o,eMo,oMo,L_,tie,rMo,tMo,LN,aMo,nMo,sMo,x_,lMo,aie,iMo,dMo,nie,cMo,fMo,$_,AIe,yi,k_,sie,N6,mMo,lie,gMo,yIe,$o,j6,hMo,Li,pMo,xN,uMo,_Mo,$N,bMo,vMo,FMo,D6,TMo,iie,MMo,EMo,CMo,tt,G6,wMo,die,AMo,yMo,xi,LMo,cie,xMo,$Mo,kN,kMo,SMo,RMo,S_,BMo,Je,O6,PMo,fie,IMo,qMo,La,NMo,mie,jMo,DMo,gie,GMo,OMo,hie,VMo,XMo,zMo,z,R_,pie,QMo,WMo,SN,HMo,UMo,JMo,B_,uie,YMo,KMo,RN,ZMo,e4o,o4o,P_,_ie,r4o,t4o,BN,a4o,n4o,s4o,I_,bie,l4o,i4o,PN,d4o,c4o,f4o,q_,vie,m4o,g4o,IN,h4o,p4o,u4o,N_,Fie,_4o,b4o,qN,v4o,F4o,T4o,j_,Tie,M4o,E4o,NN,C4o,w4o,A4o,D_,Mie,y4o,L4o,jN,x4o,$4o,k4o,G_,Eie,S4o,R4o,DN,B4o,P4o,I4o,O_,Cie,q4o,N4o,GN,j4o,D4o,G4o,V_,wie,O4o,V4o,ON,X4o,z4o,Q4o,X_,Aie,W4o,H4o,VN,U4o,J4o,Y4o,z_,yie,K4o,Z4o,XN,eEo,oEo,rEo,Q_,Lie,tEo,aEo,zN,nEo,sEo,lEo,W_,xie,iEo,dEo,QN,cEo,fEo,mEo,H_,$ie,gEo,hEo,WN,pEo,uEo,_Eo,U_,kie,bEo,vEo,HN,FEo,TEo,MEo,J_,Sie,EEo,CEo,UN,wEo,AEo,yEo,Y_,Rie,LEo,xEo,JN,$Eo,kEo,SEo,K_,Bie,REo,BEo,YN,PEo,IEo,qEo,Z_,Pie,NEo,jEo,KN,DEo,GEo,OEo,e2,Iie,VEo,XEo,ZN,zEo,QEo,WEo,o2,qie,HEo,UEo,ej,JEo,YEo,KEo,r2,Nie,ZEo,e5o,oj,o5o,r5o,t5o,t2,jie,a5o,n5o,rj,s5o,l5o,i5o,a2,Die,d5o,c5o,tj,f5o,m5o,g5o,n2,Gie,h5o,p5o,aj,u5o,_5o,b5o,s2,Oie,v5o,F5o,nj,T5o,M5o,E5o,l2,Vie,C5o,w5o,sj,A5o,y5o,L5o,i2,Xie,x5o,$5o,lj,k5o,S5o,R5o,d2,zie,B5o,P5o,ij,I5o,q5o,N5o,c2,Qie,j5o,D5o,dj,G5o,O5o,V5o,f2,Wie,X5o,z5o,cj,Q5o,W5o,H5o,m2,Hie,U5o,J5o,fj,Y5o,K5o,Z5o,g2,Uie,eCo,oCo,mj,rCo,tCo,aCo,h2,Jie,nCo,sCo,gj,lCo,iCo,dCo,p2,Yie,cCo,fCo,hj,mCo,gCo,hCo,u2,pCo,Kie,uCo,_Co,Zie,bCo,vCo,_2,LIe,$i,b2,ede,V6,FCo,ode,TCo,xIe,ko,X6,MCo,ki,ECo,pj,CCo,wCo,uj,ACo,yCo,LCo,z6,xCo,rde,$Co,kCo,SCo,at,Q6,RCo,tde,BCo,PCo,Si,ICo,ade,qCo,NCo,_j,jCo,DCo,GCo,v2,OCo,Ye,W6,VCo,nde,XCo,zCo,xa,QCo,sde,WCo,HCo,lde,UCo,JCo,ide,YCo,KCo,ZCo,W,F2,dde,e3o,o3o,bj,r3o,t3o,a3o,T2,cde,n3o,s3o,vj,l3o,i3o,d3o,M2,fde,c3o,f3o,Fj,m3o,g3o,h3o,E2,mde,p3o,u3o,Tj,_3o,b3o,v3o,C2,gde,F3o,T3o,Mj,M3o,E3o,C3o,w2,hde,w3o,A3o,Ej,y3o,L3o,x3o,A2,pde,$3o,k3o,Cj,S3o,R3o,B3o,y2,ude,P3o,I3o,wj,q3o,N3o,j3o,L2,_de,D3o,G3o,Aj,O3o,V3o,X3o,x2,bde,z3o,Q3o,yj,W3o,H3o,U3o,$2,vde,J3o,Y3o,Lj,K3o,Z3o,ewo,k2,Fde,owo,rwo,xj,two,awo,nwo,S2,Tde,swo,lwo,$j,iwo,dwo,cwo,R2,Mde,fwo,mwo,kj,gwo,hwo,pwo,B2,Ede,uwo,_wo,Sj,bwo,vwo,Fwo,P2,Cde,Two,Mwo,Rj,Ewo,Cwo,wwo,I2,wde,Awo,ywo,Bj,Lwo,xwo,$wo,q2,Ade,kwo,Swo,Pj,Rwo,Bwo,Pwo,N2,yde,Iwo,qwo,Ij,Nwo,jwo,Dwo,j2,Lde,Gwo,Owo,qj,Vwo,Xwo,zwo,D2,xde,Qwo,Wwo,Nj,Hwo,Uwo,Jwo,G2,$de,Ywo,Kwo,jj,Zwo,eAo,oAo,O2,kde,rAo,tAo,Dj,aAo,nAo,sAo,V2,Sde,lAo,iAo,Gj,dAo,cAo,fAo,X2,Rde,mAo,gAo,Oj,hAo,pAo,uAo,z2,Bde,_Ao,bAo,Vj,vAo,FAo,TAo,Q2,Pde,MAo,EAo,Xj,CAo,wAo,AAo,W2,Ide,yAo,LAo,zj,xAo,$Ao,kAo,H2,qde,SAo,RAo,Qj,BAo,PAo,IAo,U2,Nde,qAo,NAo,Wj,jAo,DAo,GAo,J2,jde,OAo,VAo,Dde,XAo,zAo,QAo,Y2,Gde,WAo,HAo,Hj,UAo,JAo,YAo,K2,Ode,KAo,ZAo,Uj,e6o,o6o,r6o,Z2,Vde,t6o,a6o,Jj,n6o,s6o,l6o,e1,Xde,i6o,d6o,Yj,c6o,f6o,m6o,o1,g6o,zde,h6o,p6o,Qde,u6o,_6o,r1,$Ie,Ri,t1,Wde,H6,b6o,Hde,v6o,kIe,So,U6,F6o,Bi,T6o,Kj,M6o,E6o,Zj,C6o,w6o,A6o,J6,y6o,Ude,L6o,x6o,$6o,nt,Y6,k6o,Jde,S6o,R6o,Pi,B6o,Yde,P6o,I6o,eD,q6o,N6o,j6o,a1,D6o,Ke,K6,G6o,Kde,O6o,V6o,$a,X6o,Zde,z6o,Q6o,ece,W6o,H6o,oce,U6o,J6o,Y6o,he,n1,rce,K6o,Z6o,oD,eyo,oyo,ryo,s1,tce,tyo,ayo,rD,nyo,syo,lyo,l1,ace,iyo,dyo,tD,cyo,fyo,myo,i1,nce,gyo,hyo,aD,pyo,uyo,_yo,d1,sce,byo,vyo,nD,Fyo,Tyo,Myo,c1,lce,Eyo,Cyo,sD,wyo,Ayo,yyo,f1,ice,Lyo,xyo,lD,$yo,kyo,Syo,m1,dce,Ryo,Byo,iD,Pyo,Iyo,qyo,g1,cce,Nyo,jyo,dD,Dyo,Gyo,Oyo,h1,fce,Vyo,Xyo,cD,zyo,Qyo,Wyo,p1,mce,Hyo,Uyo,fD,Jyo,Yyo,Kyo,u1,gce,Zyo,eLo,mD,oLo,rLo,tLo,_1,hce,aLo,nLo,gD,sLo,lLo,iLo,b1,pce,dLo,cLo,hD,fLo,mLo,gLo,v1,uce,hLo,pLo,pD,uLo,_Lo,bLo,F1,_ce,vLo,FLo,uD,TLo,MLo,ELo,T1,bce,CLo,wLo,_D,ALo,yLo,LLo,M1,xLo,vce,$Lo,kLo,Fce,SLo,RLo,E1,SIe,Ii,C1,Tce,Z6,BLo,Mce,PLo,RIe,Ro,ey,ILo,qi,qLo,bD,NLo,jLo,vD,DLo,GLo,OLo,oy,VLo,Ece,XLo,zLo,QLo,st,ry,WLo,Cce,HLo,ULo,Ni,JLo,wce,YLo,KLo,FD,ZLo,e8o,o8o,w1,r8o,Ze,ty,t8o,Ace,a8o,n8o,ka,s8o,yce,l8o,i8o,Lce,d8o,c8o,xce,f8o,m8o,g8o,q,A1,$ce,h8o,p8o,TD,u8o,_8o,b8o,y1,kce,v8o,F8o,MD,T8o,M8o,E8o,L1,Sce,C8o,w8o,ED,A8o,y8o,L8o,x1,Rce,x8o,$8o,CD,k8o,S8o,R8o,$1,Bce,B8o,P8o,wD,I8o,q8o,N8o,k1,Pce,j8o,D8o,AD,G8o,O8o,V8o,S1,Ice,X8o,z8o,yD,Q8o,W8o,H8o,R1,qce,U8o,J8o,LD,Y8o,K8o,Z8o,B1,Nce,exo,oxo,xD,rxo,txo,axo,P1,jce,nxo,sxo,$D,lxo,ixo,dxo,I1,Dce,cxo,fxo,kD,mxo,gxo,hxo,q1,Gce,pxo,uxo,SD,_xo,bxo,vxo,N1,Oce,Fxo,Txo,RD,Mxo,Exo,Cxo,j1,Vce,wxo,Axo,BD,yxo,Lxo,xxo,D1,Xce,$xo,kxo,PD,Sxo,Rxo,Bxo,G1,zce,Pxo,Ixo,ID,qxo,Nxo,jxo,O1,Qce,Dxo,Gxo,qD,Oxo,Vxo,Xxo,V1,Wce,zxo,Qxo,ND,Wxo,Hxo,Uxo,X1,Hce,Jxo,Yxo,jD,Kxo,Zxo,e9o,z1,Uce,o9o,r9o,DD,t9o,a9o,n9o,Q1,Jce,s9o,l9o,GD,i9o,d9o,c9o,W1,Yce,f9o,m9o,OD,g9o,h9o,p9o,H1,Kce,u9o,_9o,VD,b9o,v9o,F9o,U1,Zce,T9o,M9o,XD,E9o,C9o,w9o,J1,efe,A9o,y9o,zD,L9o,x9o,$9o,Y1,ofe,k9o,S9o,QD,R9o,B9o,P9o,K1,rfe,I9o,q9o,WD,N9o,j9o,D9o,Z1,tfe,G9o,O9o,HD,V9o,X9o,z9o,eb,afe,Q9o,W9o,UD,H9o,U9o,J9o,ob,nfe,Y9o,K9o,JD,Z9o,e$o,o$o,rb,sfe,r$o,t$o,YD,a$o,n$o,s$o,tb,lfe,l$o,i$o,KD,d$o,c$o,f$o,ab,ife,m$o,g$o,ZD,h$o,p$o,u$o,nb,dfe,_$o,b$o,eG,v$o,F$o,T$o,sb,cfe,M$o,E$o,oG,C$o,w$o,A$o,lb,ffe,y$o,L$o,rG,x$o,$$o,k$o,ib,mfe,S$o,R$o,tG,B$o,P$o,I$o,db,gfe,q$o,N$o,aG,j$o,D$o,G$o,cb,hfe,O$o,V$o,nG,X$o,z$o,Q$o,fb,pfe,W$o,H$o,sG,U$o,J$o,Y$o,mb,ufe,K$o,Z$o,lG,eko,oko,rko,gb,_fe,tko,ako,iG,nko,sko,lko,hb,bfe,iko,dko,dG,cko,fko,mko,pb,vfe,gko,hko,cG,pko,uko,_ko,ub,Ffe,bko,vko,fG,Fko,Tko,Mko,_b,Tfe,Eko,Cko,mG,wko,Ako,yko,bb,Mfe,Lko,xko,gG,$ko,kko,Sko,vb,Rko,Efe,Bko,Pko,Cfe,Iko,qko,Fb,BIe,ji,Tb,wfe,ay,Nko,Afe,jko,PIe,Bo,ny,Dko,Di,Gko,hG,Oko,Vko,pG,Xko,zko,Qko,sy,Wko,yfe,Hko,Uko,Jko,lt,ly,Yko,Lfe,Kko,Zko,Gi,eSo,xfe,oSo,rSo,uG,tSo,aSo,nSo,Mb,sSo,eo,iy,lSo,$fe,iSo,dSo,Sa,cSo,kfe,fSo,mSo,Sfe,gSo,hSo,Rfe,pSo,uSo,_So,Y,Eb,Bfe,bSo,vSo,_G,FSo,TSo,MSo,Cb,Pfe,ESo,CSo,bG,wSo,ASo,ySo,wb,Ife,LSo,xSo,vG,$So,kSo,SSo,Ab,qfe,RSo,BSo,FG,PSo,ISo,qSo,yb,Nfe,NSo,jSo,TG,DSo,GSo,OSo,Lb,jfe,VSo,XSo,MG,zSo,QSo,WSo,xb,Dfe,HSo,USo,EG,JSo,YSo,KSo,$b,Gfe,ZSo,eRo,CG,oRo,rRo,tRo,kb,Ofe,aRo,nRo,wG,sRo,lRo,iRo,Sb,Vfe,dRo,cRo,AG,fRo,mRo,gRo,Rb,Xfe,hRo,pRo,yG,uRo,_Ro,bRo,Bb,zfe,vRo,FRo,LG,TRo,MRo,ERo,Pb,Qfe,CRo,wRo,xG,ARo,yRo,LRo,Ib,Wfe,xRo,$Ro,$G,kRo,SRo,RRo,qb,Hfe,BRo,PRo,kG,IRo,qRo,NRo,Nb,Ufe,jRo,DRo,SG,GRo,ORo,VRo,jb,Jfe,XRo,zRo,RG,QRo,WRo,HRo,Db,Yfe,URo,JRo,BG,YRo,KRo,ZRo,Gb,Kfe,eBo,oBo,PG,rBo,tBo,aBo,Ob,Zfe,nBo,sBo,IG,lBo,iBo,dBo,Vb,eme,cBo,fBo,qG,mBo,gBo,hBo,Xb,ome,pBo,uBo,NG,_Bo,bBo,vBo,zb,rme,FBo,TBo,jG,MBo,EBo,CBo,Qb,tme,wBo,ABo,DG,yBo,LBo,xBo,Wb,ame,$Bo,kBo,GG,SBo,RBo,BBo,Hb,nme,PBo,IBo,OG,qBo,NBo,jBo,Ub,sme,DBo,GBo,VG,OBo,VBo,XBo,Jb,lme,zBo,QBo,XG,WBo,HBo,UBo,Yb,ime,JBo,YBo,zG,KBo,ZBo,ePo,Kb,oPo,dme,rPo,tPo,cme,aPo,nPo,Zb,IIe,Oi,ev,fme,dy,sPo,mme,lPo,qIe,Po,cy,iPo,Vi,dPo,QG,cPo,fPo,WG,mPo,gPo,hPo,fy,pPo,gme,uPo,_Po,bPo,it,my,vPo,hme,FPo,TPo,Xi,MPo,pme,EPo,CPo,HG,wPo,APo,yPo,ov,LPo,oo,gy,xPo,ume,$Po,kPo,Ra,SPo,_me,RPo,BPo,bme,PPo,IPo,vme,qPo,NPo,jPo,Yr,rv,Fme,DPo,GPo,UG,OPo,VPo,XPo,tv,Tme,zPo,QPo,JG,WPo,HPo,UPo,av,Mme,JPo,YPo,YG,KPo,ZPo,eIo,nv,Eme,oIo,rIo,KG,tIo,aIo,nIo,sv,Cme,sIo,lIo,ZG,iIo,dIo,cIo,lv,fIo,wme,mIo,gIo,Ame,hIo,pIo,iv,NIe,zi,dv,yme,hy,uIo,Lme,_Io,jIe,Io,py,bIo,Qi,vIo,eO,FIo,TIo,oO,MIo,EIo,CIo,uy,wIo,xme,AIo,yIo,LIo,dt,_y,xIo,$me,$Io,kIo,Wi,SIo,kme,RIo,BIo,rO,PIo,IIo,qIo,cv,NIo,ro,by,jIo,Sme,DIo,GIo,Ba,OIo,Rme,VIo,XIo,Bme,zIo,QIo,Pme,WIo,HIo,UIo,U,fv,Ime,JIo,YIo,tO,KIo,ZIo,eqo,mv,qme,oqo,rqo,aO,tqo,aqo,nqo,gv,Nme,sqo,lqo,nO,iqo,dqo,cqo,hv,jme,fqo,mqo,sO,gqo,hqo,pqo,pv,Dme,uqo,_qo,lO,bqo,vqo,Fqo,uv,Gme,Tqo,Mqo,iO,Eqo,Cqo,wqo,_v,Ome,Aqo,yqo,dO,Lqo,xqo,$qo,bv,Vme,kqo,Sqo,cO,Rqo,Bqo,Pqo,vv,Xme,Iqo,qqo,fO,Nqo,jqo,Dqo,Fv,zme,Gqo,Oqo,mO,Vqo,Xqo,zqo,Tv,Qme,Qqo,Wqo,gO,Hqo,Uqo,Jqo,Mv,Wme,Yqo,Kqo,hO,Zqo,eNo,oNo,Ev,Hme,rNo,tNo,pO,aNo,nNo,sNo,Cv,Ume,lNo,iNo,uO,dNo,cNo,fNo,wv,Jme,mNo,gNo,_O,hNo,pNo,uNo,Av,Yme,_No,bNo,bO,vNo,FNo,TNo,yv,Kme,MNo,ENo,vO,CNo,wNo,ANo,Lv,Zme,yNo,LNo,FO,xNo,$No,kNo,xv,ege,SNo,RNo,TO,BNo,PNo,INo,$v,oge,qNo,NNo,MO,jNo,DNo,GNo,kv,rge,ONo,VNo,EO,XNo,zNo,QNo,Sv,tge,WNo,HNo,CO,UNo,JNo,YNo,Rv,age,KNo,ZNo,wO,ejo,ojo,rjo,Bv,nge,tjo,ajo,AO,njo,sjo,ljo,Pv,sge,ijo,djo,yO,cjo,fjo,mjo,Iv,lge,gjo,hjo,LO,pjo,ujo,_jo,qv,ige,bjo,vjo,xO,Fjo,Tjo,Mjo,Nv,dge,Ejo,Cjo,$O,wjo,Ajo,yjo,jv,cge,Ljo,xjo,kO,$jo,kjo,Sjo,Dv,fge,Rjo,Bjo,SO,Pjo,Ijo,qjo,Gv,mge,Njo,jjo,RO,Djo,Gjo,Ojo,Ov,gge,Vjo,Xjo,BO,zjo,Qjo,Wjo,Vv,hge,Hjo,Ujo,PO,Jjo,Yjo,Kjo,Xv,Zjo,pge,eDo,oDo,uge,rDo,tDo,zv,DIe,Hi,Qv,_ge,vy,aDo,bge,nDo,GIe,qo,Fy,sDo,Ui,lDo,IO,iDo,dDo,qO,cDo,fDo,mDo,Ty,gDo,vge,hDo,pDo,uDo,ct,My,_Do,Fge,bDo,vDo,Ji,FDo,Tge,TDo,MDo,NO,EDo,CDo,wDo,Wv,ADo,to,Ey,yDo,Mge,LDo,xDo,Pa,$Do,Ege,kDo,SDo,Cge,RDo,BDo,wge,PDo,IDo,qDo,V,Hv,Age,NDo,jDo,jO,DDo,GDo,ODo,Uv,yge,VDo,XDo,DO,zDo,QDo,WDo,Jv,Lge,HDo,UDo,GO,JDo,YDo,KDo,Yv,xge,ZDo,eGo,OO,oGo,rGo,tGo,Kv,$ge,aGo,nGo,VO,sGo,lGo,iGo,Zv,kge,dGo,cGo,XO,fGo,mGo,gGo,eF,Sge,hGo,pGo,zO,uGo,_Go,bGo,oF,Rge,vGo,FGo,QO,TGo,MGo,EGo,rF,Bge,CGo,wGo,WO,AGo,yGo,LGo,tF,Pge,xGo,$Go,HO,kGo,SGo,RGo,aF,Ige,BGo,PGo,UO,IGo,qGo,NGo,nF,qge,jGo,DGo,JO,GGo,OGo,VGo,sF,Nge,XGo,zGo,YO,QGo,WGo,HGo,lF,jge,UGo,JGo,KO,YGo,KGo,ZGo,iF,Dge,eOo,oOo,ZO,rOo,tOo,aOo,dF,Gge,nOo,sOo,eV,lOo,iOo,dOo,cF,Oge,cOo,fOo,oV,mOo,gOo,hOo,fF,Vge,pOo,uOo,rV,_Oo,bOo,vOo,mF,Xge,FOo,TOo,tV,MOo,EOo,COo,gF,zge,wOo,AOo,aV,yOo,LOo,xOo,hF,Qge,$Oo,kOo,nV,SOo,ROo,BOo,pF,Wge,POo,IOo,sV,qOo,NOo,jOo,uF,Hge,DOo,GOo,lV,OOo,VOo,XOo,_F,Uge,zOo,QOo,iV,WOo,HOo,UOo,bF,Jge,JOo,YOo,dV,KOo,ZOo,eVo,vF,Yge,oVo,rVo,cV,tVo,aVo,nVo,FF,Kge,sVo,lVo,fV,iVo,dVo,cVo,TF,Zge,fVo,mVo,mV,gVo,hVo,pVo,MF,ehe,uVo,_Vo,gV,bVo,vVo,FVo,EF,ohe,TVo,MVo,hV,EVo,CVo,wVo,CF,rhe,AVo,yVo,pV,LVo,xVo,$Vo,wF,the,kVo,SVo,uV,RVo,BVo,PVo,AF,ahe,IVo,qVo,_V,NVo,jVo,DVo,yF,nhe,GVo,OVo,bV,VVo,XVo,zVo,LF,she,QVo,WVo,vV,HVo,UVo,JVo,xF,lhe,YVo,KVo,FV,ZVo,eXo,oXo,$F,ihe,rXo,tXo,TV,aXo,nXo,sXo,kF,dhe,lXo,iXo,MV,dXo,cXo,fXo,SF,che,mXo,gXo,EV,hXo,pXo,uXo,RF,_Xo,fhe,bXo,vXo,mhe,FXo,TXo,BF,OIe,Yi,PF,ghe,Cy,MXo,hhe,EXo,VIe,No,wy,CXo,Ki,wXo,CV,AXo,yXo,wV,LXo,xXo,$Xo,Ay,kXo,phe,SXo,RXo,BXo,ft,yy,PXo,uhe,IXo,qXo,Zi,NXo,_he,jXo,DXo,AV,GXo,OXo,VXo,IF,XXo,ao,Ly,zXo,bhe,QXo,WXo,Ia,HXo,vhe,UXo,JXo,Fhe,YXo,KXo,The,ZXo,ezo,ozo,Mhe,qF,Ehe,rzo,tzo,yV,azo,nzo,szo,NF,lzo,Che,izo,dzo,whe,czo,fzo,jF,XIe,ed,DF,Ahe,xy,mzo,yhe,gzo,zIe,jo,$y,hzo,od,pzo,LV,uzo,_zo,xV,bzo,vzo,Fzo,ky,Tzo,Lhe,Mzo,Ezo,Czo,mt,Sy,wzo,xhe,Azo,yzo,rd,Lzo,$he,xzo,$zo,$V,kzo,Szo,Rzo,GF,Bzo,no,Ry,Pzo,khe,Izo,qzo,qa,Nzo,She,jzo,Dzo,Rhe,Gzo,Ozo,Bhe,Vzo,Xzo,zzo,Fe,OF,Phe,Qzo,Wzo,kV,Hzo,Uzo,Jzo,VF,Ihe,Yzo,Kzo,SV,Zzo,eQo,oQo,XF,qhe,rQo,tQo,RV,aQo,nQo,sQo,Rs,Nhe,lQo,iQo,BV,dQo,cQo,PV,fQo,mQo,gQo,zF,jhe,hQo,pQo,IV,uQo,_Qo,bQo,gt,Dhe,vQo,FQo,qV,TQo,MQo,NV,EQo,CQo,jV,wQo,AQo,yQo,QF,Ghe,LQo,xQo,DV,$Qo,kQo,SQo,WF,Ohe,RQo,BQo,GV,PQo,IQo,qQo,HF,Vhe,NQo,jQo,OV,DQo,GQo,OQo,UF,Xhe,VQo,XQo,VV,zQo,QQo,WQo,JF,zhe,HQo,UQo,XV,JQo,YQo,KQo,YF,Qhe,ZQo,eWo,zV,oWo,rWo,tWo,KF,Whe,aWo,nWo,QV,sWo,lWo,iWo,ZF,dWo,Hhe,cWo,fWo,Uhe,mWo,gWo,e0,QIe,td,o0,Jhe,By,hWo,Yhe,pWo,WIe,Do,Py,uWo,ad,_Wo,WV,bWo,vWo,HV,FWo,TWo,MWo,Iy,EWo,Khe,CWo,wWo,AWo,ht,qy,yWo,Zhe,LWo,xWo,nd,$Wo,epe,kWo,SWo,UV,RWo,BWo,PWo,r0,IWo,so,Ny,qWo,ope,NWo,jWo,Na,DWo,rpe,GWo,OWo,tpe,VWo,XWo,ape,zWo,QWo,WWo,npe,t0,spe,HWo,UWo,JV,JWo,YWo,KWo,a0,ZWo,lpe,eHo,oHo,ipe,rHo,tHo,n0,HIe,sd,s0,dpe,jy,aHo,cpe,nHo,UIe,Go,Dy,sHo,ld,lHo,YV,iHo,dHo,KV,cHo,fHo,mHo,Gy,gHo,fpe,hHo,pHo,uHo,pt,Oy,_Ho,mpe,bHo,vHo,id,FHo,gpe,THo,MHo,ZV,EHo,CHo,wHo,l0,AHo,lo,Vy,yHo,hpe,LHo,xHo,ja,$Ho,ppe,kHo,SHo,upe,RHo,BHo,_pe,PHo,IHo,qHo,Ne,i0,bpe,NHo,jHo,eX,DHo,GHo,OHo,d0,vpe,VHo,XHo,oX,zHo,QHo,WHo,c0,Fpe,HHo,UHo,rX,JHo,YHo,KHo,f0,Tpe,ZHo,eUo,tX,oUo,rUo,tUo,m0,Mpe,aUo,nUo,aX,sUo,lUo,iUo,g0,Epe,dUo,cUo,nX,fUo,mUo,gUo,h0,Cpe,hUo,pUo,sX,uUo,_Uo,bUo,p0,wpe,vUo,FUo,lX,TUo,MUo,EUo,u0,CUo,Ape,wUo,AUo,ype,yUo,LUo,_0,JIe,dd,b0,Lpe,Xy,xUo,xpe,$Uo,YIe,Oo,zy,kUo,cd,SUo,iX,RUo,BUo,dX,PUo,IUo,qUo,Qy,NUo,$pe,jUo,DUo,GUo,ut,Wy,OUo,kpe,VUo,XUo,fd,zUo,Spe,QUo,WUo,cX,HUo,UUo,JUo,v0,YUo,io,Hy,KUo,Rpe,ZUo,eJo,Da,oJo,Bpe,rJo,tJo,Ppe,aJo,nJo,Ipe,sJo,lJo,iJo,Ga,F0,qpe,dJo,cJo,fX,fJo,mJo,gJo,T0,Npe,hJo,pJo,mX,uJo,_Jo,bJo,M0,jpe,vJo,FJo,gX,TJo,MJo,EJo,E0,Dpe,CJo,wJo,hX,AJo,yJo,LJo,C0,xJo,Gpe,$Jo,kJo,Ope,SJo,RJo,w0,KIe,md,A0,Vpe,Uy,BJo,Xpe,PJo,ZIe,Vo,Jy,IJo,gd,qJo,pX,NJo,jJo,uX,DJo,GJo,OJo,Yy,VJo,zpe,XJo,zJo,QJo,_t,Ky,WJo,Qpe,HJo,UJo,hd,JJo,Wpe,YJo,KJo,_X,ZJo,eYo,oYo,y0,rYo,co,Zy,tYo,Hpe,aYo,nYo,Oa,sYo,Upe,lYo,iYo,Jpe,dYo,cYo,Ype,fYo,mYo,gYo,je,L0,Kpe,hYo,pYo,bX,uYo,_Yo,bYo,x0,Zpe,vYo,FYo,vX,TYo,MYo,EYo,$0,eue,CYo,wYo,FX,AYo,yYo,LYo,k0,oue,xYo,$Yo,TX,kYo,SYo,RYo,S0,rue,BYo,PYo,MX,IYo,qYo,NYo,R0,tue,jYo,DYo,EX,GYo,OYo,VYo,B0,aue,XYo,zYo,CX,QYo,WYo,HYo,P0,nue,UYo,JYo,wX,YYo,KYo,ZYo,I0,eKo,sue,oKo,rKo,lue,tKo,aKo,q0,eqe,pd,N0,iue,eL,nKo,due,sKo,oqe,Xo,oL,lKo,ud,iKo,AX,dKo,cKo,yX,fKo,mKo,gKo,rL,hKo,cue,pKo,uKo,_Ko,bt,tL,bKo,fue,vKo,FKo,_d,TKo,mue,MKo,EKo,LX,CKo,wKo,AKo,j0,yKo,fo,aL,LKo,gue,xKo,$Ko,Va,kKo,hue,SKo,RKo,pue,BKo,PKo,uue,IKo,qKo,NKo,nL,D0,_ue,jKo,DKo,xX,GKo,OKo,VKo,G0,bue,XKo,zKo,$X,QKo,WKo,HKo,O0,UKo,vue,JKo,YKo,Fue,KKo,ZKo,V0,rqe,bd,X0,Tue,sL,eZo,Mue,oZo,tqe,zo,lL,rZo,vd,tZo,kX,aZo,nZo,SX,sZo,lZo,iZo,iL,dZo,Eue,cZo,fZo,mZo,vt,dL,gZo,Cue,hZo,pZo,Fd,uZo,wue,_Zo,bZo,RX,vZo,FZo,TZo,z0,MZo,mo,cL,EZo,Aue,CZo,wZo,Xa,AZo,yue,yZo,LZo,Lue,xZo,$Zo,xue,kZo,SZo,RZo,za,Q0,$ue,BZo,PZo,BX,IZo,qZo,NZo,W0,kue,jZo,DZo,PX,GZo,OZo,VZo,H0,Sue,XZo,zZo,IX,QZo,WZo,HZo,U0,Rue,UZo,JZo,qX,YZo,KZo,ZZo,J0,eer,Bue,oer,rer,Pue,ter,aer,Y0,aqe,Td,K0,Iue,fL,ner,que,ser,nqe,Qo,mL,ler,Md,ier,NX,der,cer,jX,fer,mer,ger,gL,her,Nue,per,uer,_er,Ft,hL,ber,jue,ver,Fer,Ed,Ter,Due,Mer,Eer,DX,Cer,wer,Aer,Z0,yer,go,pL,Ler,Gue,xer,$er,Qa,ker,Oue,Ser,Rer,Vue,Ber,Per,Xue,Ier,qer,Ner,Cd,eT,zue,jer,Der,GX,Ger,Oer,Ver,oT,Que,Xer,zer,OX,Qer,Wer,Her,rT,Wue,Uer,Jer,VX,Yer,Ker,Zer,tT,eor,Hue,oor,ror,Uue,tor,aor,aT,sqe,wd,nT,Jue,uL,nor,Yue,sor,lqe,Wo,_L,lor,Ad,ior,XX,dor,cor,zX,mor,gor,hor,bL,por,Kue,uor,_or,bor,Tt,vL,vor,Zue,For,Tor,yd,Mor,e_e,Eor,Cor,QX,wor,Aor,yor,sT,Lor,ho,FL,xor,o_e,$or,kor,Wa,Sor,r_e,Ror,Bor,t_e,Por,Ior,a_e,qor,Nor,jor,TL,lT,n_e,Dor,Gor,WX,Oor,Vor,Xor,iT,s_e,zor,Qor,HX,Wor,Hor,Uor,dT,Jor,l_e,Yor,Kor,i_e,Zor,err,cT,iqe,Ld,fT,d_e,ML,orr,c_e,rrr,dqe,Ho,EL,trr,xd,arr,UX,nrr,srr,JX,lrr,irr,drr,CL,crr,f_e,frr,mrr,grr,Mt,wL,hrr,m_e,prr,urr,$d,_rr,g_e,brr,vrr,YX,Frr,Trr,Mrr,mT,Err,po,AL,Crr,h_e,wrr,Arr,Ha,yrr,p_e,Lrr,xrr,u_e,$rr,krr,__e,Srr,Rrr,Brr,b_e,gT,v_e,Prr,Irr,KX,qrr,Nrr,jrr,hT,Drr,F_e,Grr,Orr,T_e,Vrr,Xrr,pT,cqe,kd,uT,M_e,yL,zrr,E_e,Qrr,fqe,Uo,LL,Wrr,Sd,Hrr,ZX,Urr,Jrr,ez,Yrr,Krr,Zrr,xL,etr,C_e,otr,rtr,ttr,Et,$L,atr,w_e,ntr,str,Rd,ltr,A_e,itr,dtr,oz,ctr,ftr,mtr,_T,gtr,uo,kL,htr,y_e,ptr,utr,Ua,_tr,L_e,btr,vtr,x_e,Ftr,Ttr,$_e,Mtr,Etr,Ctr,Ja,bT,k_e,wtr,Atr,rz,ytr,Ltr,xtr,vT,S_e,$tr,ktr,tz,Str,Rtr,Btr,FT,R_e,Ptr,Itr,az,qtr,Ntr,jtr,TT,B_e,Dtr,Gtr,nz,Otr,Vtr,Xtr,MT,ztr,P_e,Qtr,Wtr,I_e,Htr,Utr,ET,mqe,Bd,CT,q_e,SL,Jtr,N_e,Ytr,gqe,Jo,RL,Ktr,Pd,Ztr,sz,ear,oar,lz,rar,tar,aar,BL,nar,j_e,sar,lar,iar,Ct,PL,dar,D_e,car,far,Id,mar,G_e,gar,har,iz,par,uar,_ar,wT,bar,_o,IL,Far,O_e,Tar,Mar,Ya,Ear,V_e,Car,war,X_e,Aar,yar,z_e,Lar,xar,$ar,Q_e,AT,W_e,kar,Sar,dz,Rar,Bar,Par,yT,Iar,H_e,qar,Nar,U_e,jar,Dar,LT,hqe,qd,xT,J_e,qL,Gar,Y_e,Oar,pqe,Yo,NL,Var,Nd,Xar,cz,zar,Qar,fz,War,Har,Uar,jL,Jar,K_e,Yar,Kar,Zar,wt,DL,enr,Z_e,onr,rnr,jd,tnr,e2e,anr,nnr,mz,snr,lnr,inr,$T,dnr,wr,GL,cnr,o2e,fnr,mnr,Ka,gnr,r2e,hnr,pnr,t2e,unr,_nr,a2e,bnr,vnr,Fnr,j,kT,n2e,Tnr,Mnr,gz,Enr,Cnr,wnr,ST,s2e,Anr,ynr,hz,Lnr,xnr,$nr,RT,l2e,knr,Snr,pz,Rnr,Bnr,Pnr,BT,i2e,Inr,qnr,uz,Nnr,jnr,Dnr,PT,d2e,Gnr,Onr,_z,Vnr,Xnr,znr,IT,c2e,Qnr,Wnr,bz,Hnr,Unr,Jnr,qT,f2e,Ynr,Knr,vz,Znr,esr,osr,NT,m2e,rsr,tsr,Fz,asr,nsr,ssr,jT,g2e,lsr,isr,Tz,dsr,csr,fsr,DT,h2e,msr,gsr,Mz,hsr,psr,usr,GT,p2e,_sr,bsr,Ez,vsr,Fsr,Tsr,OT,u2e,Msr,Esr,Cz,Csr,wsr,Asr,VT,_2e,ysr,Lsr,wz,xsr,$sr,ksr,XT,b2e,Ssr,Rsr,Az,Bsr,Psr,Isr,zT,v2e,qsr,Nsr,yz,jsr,Dsr,Gsr,QT,F2e,Osr,Vsr,Lz,Xsr,zsr,Qsr,WT,T2e,Wsr,Hsr,xz,Usr,Jsr,Ysr,Bs,M2e,Ksr,Zsr,$z,elr,olr,kz,rlr,tlr,alr,HT,E2e,nlr,slr,Sz,llr,ilr,dlr,UT,C2e,clr,flr,Rz,mlr,glr,hlr,JT,w2e,plr,ulr,Bz,_lr,blr,vlr,YT,A2e,Flr,Tlr,Pz,Mlr,Elr,Clr,KT,y2e,wlr,Alr,Iz,ylr,Llr,xlr,ZT,L2e,$lr,klr,qz,Slr,Rlr,Blr,e7,x2e,Plr,Ilr,Nz,qlr,Nlr,jlr,o7,$2e,Dlr,Glr,jz,Olr,Vlr,Xlr,r7,k2e,zlr,Qlr,Dz,Wlr,Hlr,Ulr,t7,S2e,Jlr,Ylr,Gz,Klr,Zlr,eir,a7,R2e,oir,rir,Oz,tir,air,nir,n7,B2e,sir,lir,Vz,iir,dir,cir,s7,P2e,fir,mir,Xz,gir,hir,pir,l7,I2e,uir,_ir,zz,bir,vir,Fir,i7,q2e,Tir,Mir,Qz,Eir,Cir,wir,d7,N2e,Air,yir,Wz,Lir,xir,$ir,c7,j2e,kir,Sir,Hz,Rir,Bir,Pir,f7,D2e,Iir,qir,Uz,Nir,jir,Dir,m7,G2e,Gir,Oir,Jz,Vir,Xir,zir,g7,O2e,Qir,Wir,Yz,Hir,Uir,Jir,h7,V2e,Yir,Kir,Kz,Zir,edr,odr,p7,X2e,rdr,tdr,Zz,adr,ndr,sdr,u7,z2e,ldr,idr,eQ,ddr,cdr,fdr,_7,Q2e,mdr,gdr,oQ,hdr,pdr,udr,b7,W2e,_dr,bdr,rQ,vdr,Fdr,Tdr,v7,H2e,Mdr,Edr,tQ,Cdr,wdr,Adr,F7,U2e,ydr,Ldr,aQ,xdr,$dr,kdr,T7,uqe,Dd,M7,J2e,OL,Sdr,Y2e,Rdr,_qe,Ko,VL,Bdr,Gd,Pdr,nQ,Idr,qdr,sQ,Ndr,jdr,Ddr,XL,Gdr,K2e,Odr,Vdr,Xdr,At,zL,zdr,Z2e,Qdr,Wdr,Od,Hdr,e1e,Udr,Jdr,lQ,Ydr,Kdr,Zdr,E7,ecr,Ar,QL,ocr,o1e,rcr,tcr,Za,acr,r1e,ncr,scr,t1e,lcr,icr,a1e,dcr,ccr,fcr,se,C7,n1e,mcr,gcr,iQ,hcr,pcr,ucr,w7,s1e,_cr,bcr,dQ,vcr,Fcr,Tcr,A7,l1e,Mcr,Ecr,cQ,Ccr,wcr,Acr,y7,i1e,ycr,Lcr,fQ,xcr,$cr,kcr,L7,d1e,Scr,Rcr,mQ,Bcr,Pcr,Icr,x7,c1e,qcr,Ncr,gQ,jcr,Dcr,Gcr,$7,f1e,Ocr,Vcr,hQ,Xcr,zcr,Qcr,k7,m1e,Wcr,Hcr,pQ,Ucr,Jcr,Ycr,S7,g1e,Kcr,Zcr,uQ,efr,ofr,rfr,R7,h1e,tfr,afr,_Q,nfr,sfr,lfr,B7,p1e,ifr,dfr,bQ,cfr,ffr,mfr,P7,u1e,gfr,hfr,vQ,pfr,ufr,_fr,I7,_1e,bfr,vfr,FQ,Ffr,Tfr,Mfr,q7,b1e,Efr,Cfr,TQ,wfr,Afr,yfr,N7,v1e,Lfr,xfr,MQ,$fr,kfr,Sfr,j7,F1e,Rfr,Bfr,EQ,Pfr,Ifr,qfr,D7,T1e,Nfr,jfr,CQ,Dfr,Gfr,Ofr,G7,M1e,Vfr,Xfr,wQ,zfr,Qfr,Wfr,O7,E1e,Hfr,Ufr,AQ,Jfr,Yfr,Kfr,V7,C1e,Zfr,emr,yQ,omr,rmr,tmr,X7,w1e,amr,nmr,LQ,smr,lmr,imr,z7,A1e,dmr,cmr,xQ,fmr,mmr,gmr,Q7,y1e,hmr,pmr,$Q,umr,_mr,bmr,W7,bqe,Vd,H7,L1e,WL,vmr,x1e,Fmr,vqe,Zo,HL,Tmr,Xd,Mmr,kQ,Emr,Cmr,SQ,wmr,Amr,ymr,UL,Lmr,$1e,xmr,$mr,kmr,yt,JL,Smr,k1e,Rmr,Bmr,zd,Pmr,S1e,Imr,qmr,RQ,Nmr,jmr,Dmr,U7,Gmr,yr,YL,Omr,R1e,Vmr,Xmr,en,zmr,B1e,Qmr,Wmr,P1e,Hmr,Umr,I1e,Jmr,Ymr,Kmr,Te,J7,q1e,Zmr,egr,BQ,ogr,rgr,tgr,Y7,N1e,agr,ngr,PQ,sgr,lgr,igr,K7,j1e,dgr,cgr,IQ,fgr,mgr,ggr,Z7,D1e,hgr,pgr,qQ,ugr,_gr,bgr,eM,G1e,vgr,Fgr,NQ,Tgr,Mgr,Egr,oM,O1e,Cgr,wgr,jQ,Agr,ygr,Lgr,rM,V1e,xgr,$gr,DQ,kgr,Sgr,Rgr,tM,X1e,Bgr,Pgr,GQ,Igr,qgr,Ngr,aM,z1e,jgr,Dgr,OQ,Ggr,Ogr,Vgr,nM,Q1e,Xgr,zgr,VQ,Qgr,Wgr,Hgr,sM,W1e,Ugr,Jgr,XQ,Ygr,Kgr,Zgr,lM,H1e,ehr,ohr,zQ,rhr,thr,ahr,iM,Fqe,Qd,dM,U1e,KL,nhr,J1e,shr,Tqe,er,ZL,lhr,Wd,ihr,QQ,dhr,chr,WQ,fhr,mhr,ghr,e8,hhr,Y1e,phr,uhr,_hr,Lt,o8,bhr,K1e,vhr,Fhr,Hd,Thr,Z1e,Mhr,Ehr,HQ,Chr,whr,Ahr,cM,yhr,Lr,r8,Lhr,ebe,xhr,$hr,on,khr,obe,Shr,Rhr,rbe,Bhr,Phr,tbe,Ihr,qhr,Nhr,Ud,fM,abe,jhr,Dhr,UQ,Ghr,Ohr,Vhr,mM,nbe,Xhr,zhr,JQ,Qhr,Whr,Hhr,gM,sbe,Uhr,Jhr,YQ,Yhr,Khr,Zhr,hM,Mqe,Jd,pM,lbe,t8,epr,ibe,opr,Eqe,or,a8,rpr,Yd,tpr,KQ,apr,npr,ZQ,spr,lpr,ipr,n8,dpr,dbe,cpr,fpr,mpr,xt,s8,gpr,cbe,hpr,ppr,Kd,upr,fbe,_pr,bpr,eW,vpr,Fpr,Tpr,uM,Mpr,xr,l8,Epr,mbe,Cpr,wpr,rn,Apr,gbe,ypr,Lpr,hbe,xpr,$pr,pbe,kpr,Spr,Rpr,ie,_M,ube,Bpr,Ppr,oW,Ipr,qpr,Npr,bM,_be,jpr,Dpr,rW,Gpr,Opr,Vpr,vM,bbe,Xpr,zpr,tW,Qpr,Wpr,Hpr,FM,vbe,Upr,Jpr,aW,Ypr,Kpr,Zpr,TM,Fbe,eur,our,nW,rur,tur,aur,MM,Tbe,nur,sur,sW,lur,iur,dur,EM,Mbe,cur,fur,lW,mur,gur,hur,CM,Ebe,pur,uur,iW,_ur,bur,vur,wM,Cbe,Fur,Tur,dW,Mur,Eur,Cur,AM,wbe,wur,Aur,cW,yur,Lur,xur,yM,Abe,$ur,kur,fW,Sur,Rur,Bur,LM,ybe,Pur,Iur,mW,qur,Nur,jur,xM,Lbe,Dur,Gur,gW,Our,Vur,Xur,$M,xbe,zur,Qur,hW,Wur,Hur,Uur,kM,$be,Jur,Yur,pW,Kur,Zur,e_r,SM,kbe,o_r,r_r,uW,t_r,a_r,n_r,RM,Sbe,s_r,l_r,_W,i_r,d_r,c_r,BM,Rbe,f_r,m_r,bW,g_r,h_r,p_r,PM,Bbe,u_r,__r,vW,b_r,v_r,F_r,IM,Pbe,T_r,M_r,FW,E_r,C_r,w_r,qM,Cqe,Zd,NM,Ibe,i8,A_r,qbe,y_r,wqe,rr,d8,L_r,ec,x_r,TW,$_r,k_r,MW,S_r,R_r,B_r,c8,P_r,Nbe,I_r,q_r,N_r,$t,f8,j_r,jbe,D_r,G_r,oc,O_r,Dbe,V_r,X_r,EW,z_r,Q_r,W_r,jM,H_r,$r,m8,U_r,Gbe,J_r,Y_r,tn,K_r,Obe,Z_r,e2r,Vbe,o2r,r2r,Xbe,t2r,a2r,n2r,ye,DM,zbe,s2r,l2r,CW,i2r,d2r,c2r,GM,Qbe,f2r,m2r,wW,g2r,h2r,p2r,OM,Wbe,u2r,_2r,AW,b2r,v2r,F2r,VM,Hbe,T2r,M2r,yW,E2r,C2r,w2r,XM,Ube,A2r,y2r,LW,L2r,x2r,$2r,zM,Jbe,k2r,S2r,xW,R2r,B2r,P2r,QM,Ybe,I2r,q2r,$W,N2r,j2r,D2r,WM,Kbe,G2r,O2r,kW,V2r,X2r,z2r,HM,Zbe,Q2r,W2r,SW,H2r,U2r,J2r,UM,eve,Y2r,K2r,RW,Z2r,e1r,o1r,JM,Aqe,rc,YM,ove,g8,r1r,rve,t1r,yqe,tr,h8,a1r,tc,n1r,BW,s1r,l1r,PW,i1r,d1r,c1r,p8,f1r,tve,m1r,g1r,h1r,kt,u8,p1r,ave,u1r,_1r,ac,b1r,nve,v1r,F1r,IW,T1r,M1r,E1r,KM,C1r,kr,_8,w1r,sve,A1r,y1r,an,L1r,lve,x1r,$1r,ive,k1r,S1r,dve,R1r,B1r,P1r,Z,ZM,cve,I1r,q1r,qW,N1r,j1r,D1r,e4,fve,G1r,O1r,NW,V1r,X1r,z1r,o4,mve,Q1r,W1r,jW,H1r,U1r,J1r,r4,gve,Y1r,K1r,DW,Z1r,ebr,obr,t4,hve,rbr,tbr,GW,abr,nbr,sbr,a4,pve,lbr,ibr,OW,dbr,cbr,fbr,n4,uve,mbr,gbr,VW,hbr,pbr,ubr,s4,_ve,_br,bbr,XW,vbr,Fbr,Tbr,l4,bve,Mbr,Ebr,zW,Cbr,wbr,Abr,i4,vve,ybr,Lbr,QW,xbr,$br,kbr,d4,Fve,Sbr,Rbr,WW,Bbr,Pbr,Ibr,c4,Tve,qbr,Nbr,HW,jbr,Dbr,Gbr,f4,Mve,Obr,Vbr,UW,Xbr,zbr,Qbr,m4,Eve,Wbr,Hbr,JW,Ubr,Jbr,Ybr,g4,Cve,Kbr,Zbr,YW,evr,ovr,rvr,h4,wve,tvr,avr,KW,nvr,svr,lvr,p4,Ave,ivr,dvr,ZW,cvr,fvr,mvr,u4,yve,gvr,hvr,eH,pvr,uvr,_vr,_4,Lve,bvr,vvr,oH,Fvr,Tvr,Mvr,b4,xve,Evr,Cvr,rH,wvr,Avr,yvr,v4,$ve,Lvr,xvr,tH,$vr,kvr,Svr,F4,kve,Rvr,Bvr,aH,Pvr,Ivr,qvr,T4,Sve,Nvr,jvr,nH,Dvr,Gvr,Ovr,M4,Rve,Vvr,Xvr,sH,zvr,Qvr,Wvr,E4,Bve,Hvr,Uvr,lH,Jvr,Yvr,Kvr,C4,Pve,Zvr,eFr,iH,oFr,rFr,tFr,w4,Lqe,nc,A4,Ive,b8,aFr,qve,nFr,xqe,ar,v8,sFr,sc,lFr,dH,iFr,dFr,cH,cFr,fFr,mFr,F8,gFr,Nve,hFr,pFr,uFr,St,T8,_Fr,jve,bFr,vFr,lc,FFr,Dve,TFr,MFr,fH,EFr,CFr,wFr,y4,AFr,Sr,M8,yFr,Gve,LFr,xFr,nn,$Fr,Ove,kFr,SFr,Vve,RFr,BFr,Xve,PFr,IFr,qFr,pe,L4,zve,NFr,jFr,mH,DFr,GFr,OFr,x4,Qve,VFr,XFr,gH,zFr,QFr,WFr,$4,Wve,HFr,UFr,hH,JFr,YFr,KFr,k4,Hve,ZFr,e0r,pH,o0r,r0r,t0r,S4,Uve,a0r,n0r,uH,s0r,l0r,i0r,R4,Jve,d0r,c0r,_H,f0r,m0r,g0r,B4,Yve,h0r,p0r,bH,u0r,_0r,b0r,P4,Kve,v0r,F0r,vH,T0r,M0r,E0r,I4,Zve,C0r,w0r,FH,A0r,y0r,L0r,q4,eFe,x0r,$0r,TH,k0r,S0r,R0r,N4,oFe,B0r,P0r,MH,I0r,q0r,N0r,j4,rFe,j0r,D0r,EH,G0r,O0r,V0r,D4,tFe,X0r,z0r,CH,Q0r,W0r,H0r,G4,aFe,U0r,J0r,wH,Y0r,K0r,Z0r,O4,nFe,eTr,oTr,AH,rTr,tTr,aTr,V4,sFe,nTr,sTr,yH,lTr,iTr,dTr,X4,lFe,cTr,fTr,LH,mTr,gTr,hTr,z4,$qe,ic,Q4,iFe,E8,pTr,dFe,uTr,kqe,nr,C8,_Tr,dc,bTr,xH,vTr,FTr,$H,TTr,MTr,ETr,w8,CTr,cFe,wTr,ATr,yTr,Rt,A8,LTr,fFe,xTr,$Tr,cc,kTr,mFe,STr,RTr,kH,BTr,PTr,ITr,W4,qTr,Rr,y8,NTr,gFe,jTr,DTr,sn,GTr,hFe,OTr,VTr,pFe,XTr,zTr,uFe,QTr,WTr,HTr,L8,H4,_Fe,UTr,JTr,SH,YTr,KTr,ZTr,U4,bFe,e7r,o7r,RH,r7r,t7r,a7r,J4,Sqe,fc,Y4,vFe,x8,n7r,FFe,s7r,Rqe,sr,$8,l7r,mc,i7r,BH,d7r,c7r,PH,f7r,m7r,g7r,k8,h7r,TFe,p7r,u7r,_7r,Bt,S8,b7r,MFe,v7r,F7r,gc,T7r,EFe,M7r,E7r,IH,C7r,w7r,A7r,K4,y7r,Br,R8,L7r,CFe,x7r,$7r,ln,k7r,wFe,S7r,R7r,AFe,B7r,P7r,yFe,I7r,q7r,N7r,LFe,Z4,xFe,j7r,D7r,qH,G7r,O7r,V7r,eE,Bqe,hc,oE,$Fe,B8,X7r,kFe,z7r,Pqe,lr,P8,Q7r,pc,W7r,NH,H7r,U7r,jH,J7r,Y7r,K7r,I8,Z7r,SFe,eMr,oMr,rMr,Pt,q8,tMr,RFe,aMr,nMr,uc,sMr,BFe,lMr,iMr,DH,dMr,cMr,fMr,rE,mMr,Pr,N8,gMr,PFe,hMr,pMr,dn,uMr,IFe,_Mr,bMr,qFe,vMr,FMr,NFe,TMr,MMr,EMr,de,tE,jFe,CMr,wMr,GH,AMr,yMr,LMr,aE,DFe,xMr,$Mr,OH,kMr,SMr,RMr,nE,GFe,BMr,PMr,VH,IMr,qMr,NMr,sE,OFe,jMr,DMr,XH,GMr,OMr,VMr,lE,VFe,XMr,zMr,zH,QMr,WMr,HMr,iE,XFe,UMr,JMr,QH,YMr,KMr,ZMr,dE,zFe,e4r,o4r,WH,r4r,t4r,a4r,cE,QFe,n4r,s4r,HH,l4r,i4r,d4r,fE,WFe,c4r,f4r,UH,m4r,g4r,h4r,mE,HFe,p4r,u4r,JH,_4r,b4r,v4r,gE,UFe,F4r,T4r,YH,M4r,E4r,C4r,hE,JFe,w4r,A4r,KH,y4r,L4r,x4r,pE,YFe,$4r,k4r,ZH,S4r,R4r,B4r,uE,KFe,P4r,I4r,eU,q4r,N4r,j4r,_E,ZFe,D4r,G4r,oU,O4r,V4r,X4r,bE,e0e,z4r,Q4r,rU,W4r,H4r,U4r,vE,o0e,J4r,Y4r,tU,K4r,Z4r,eEr,FE,r0e,oEr,rEr,aU,tEr,aEr,nEr,TE,t0e,sEr,lEr,nU,iEr,dEr,cEr,ME,a0e,fEr,mEr,sU,gEr,hEr,pEr,EE,Iqe,_c,CE,n0e,j8,uEr,s0e,_Er,qqe,ir,D8,bEr,bc,vEr,lU,FEr,TEr,iU,MEr,EEr,CEr,G8,wEr,l0e,AEr,yEr,LEr,It,O8,xEr,i0e,$Er,kEr,vc,SEr,d0e,REr,BEr,dU,PEr,IEr,qEr,wE,NEr,Ir,V8,jEr,c0e,DEr,GEr,cn,OEr,f0e,VEr,XEr,m0e,zEr,QEr,g0e,WEr,HEr,UEr,ce,AE,h0e,JEr,YEr,cU,KEr,ZEr,e5r,yE,p0e,o5r,r5r,fU,t5r,a5r,n5r,LE,u0e,s5r,l5r,mU,i5r,d5r,c5r,xE,_0e,f5r,m5r,gU,g5r,h5r,p5r,$E,b0e,u5r,_5r,hU,b5r,v5r,F5r,kE,v0e,T5r,M5r,pU,E5r,C5r,w5r,SE,F0e,A5r,y5r,uU,L5r,x5r,$5r,RE,T0e,k5r,S5r,_U,R5r,B5r,P5r,BE,M0e,I5r,q5r,bU,N5r,j5r,D5r,PE,E0e,G5r,O5r,vU,V5r,X5r,z5r,IE,C0e,Q5r,W5r,FU,H5r,U5r,J5r,qE,w0e,Y5r,K5r,TU,Z5r,eCr,oCr,NE,A0e,rCr,tCr,MU,aCr,nCr,sCr,jE,y0e,lCr,iCr,EU,dCr,cCr,fCr,DE,L0e,mCr,gCr,CU,hCr,pCr,uCr,GE,x0e,_Cr,bCr,wU,vCr,FCr,TCr,OE,$0e,MCr,ECr,AU,CCr,wCr,ACr,VE,k0e,yCr,LCr,yU,xCr,$Cr,kCr,XE,S0e,SCr,RCr,LU,BCr,PCr,ICr,zE,R0e,qCr,NCr,xU,jCr,DCr,GCr,QE,Nqe,Fc,WE,B0e,X8,OCr,P0e,VCr,jqe,dr,z8,XCr,Tc,zCr,$U,QCr,WCr,kU,HCr,UCr,JCr,Q8,YCr,I0e,KCr,ZCr,e3r,qt,W8,o3r,q0e,r3r,t3r,Mc,a3r,N0e,n3r,s3r,SU,l3r,i3r,d3r,HE,c3r,qr,H8,f3r,j0e,m3r,g3r,fn,h3r,D0e,p3r,u3r,G0e,_3r,b3r,O0e,v3r,F3r,T3r,V0e,UE,X0e,M3r,E3r,RU,C3r,w3r,A3r,JE,Dqe,Ec,YE,z0e,U8,y3r,Q0e,L3r,Gqe,cr,J8,x3r,Cc,$3r,BU,k3r,S3r,PU,R3r,B3r,P3r,Y8,I3r,W0e,q3r,N3r,j3r,Nt,K8,D3r,H0e,G3r,O3r,wc,V3r,U0e,X3r,z3r,IU,Q3r,W3r,H3r,KE,U3r,Nr,Z8,J3r,J0e,Y3r,K3r,mn,Z3r,Y0e,ewr,owr,K0e,rwr,twr,Z0e,awr,nwr,swr,eTe,ZE,oTe,lwr,iwr,qU,dwr,cwr,fwr,e5,Oqe,Ac,o5,rTe,ex,mwr,tTe,gwr,Vqe,fr,ox,hwr,yc,pwr,NU,uwr,_wr,jU,bwr,vwr,Fwr,rx,Twr,aTe,Mwr,Ewr,Cwr,jt,tx,wwr,nTe,Awr,ywr,Lc,Lwr,sTe,xwr,$wr,DU,kwr,Swr,Rwr,r5,Bwr,jr,ax,Pwr,lTe,Iwr,qwr,gn,Nwr,iTe,jwr,Dwr,dTe,Gwr,Owr,cTe,Vwr,Xwr,zwr,re,t5,fTe,Qwr,Wwr,GU,Hwr,Uwr,Jwr,a5,mTe,Ywr,Kwr,OU,Zwr,eAr,oAr,n5,gTe,rAr,tAr,VU,aAr,nAr,sAr,s5,hTe,lAr,iAr,XU,dAr,cAr,fAr,l5,pTe,mAr,gAr,zU,hAr,pAr,uAr,i5,uTe,_Ar,bAr,QU,vAr,FAr,TAr,d5,_Te,MAr,EAr,WU,CAr,wAr,AAr,c5,bTe,yAr,LAr,HU,xAr,$Ar,kAr,f5,vTe,SAr,RAr,UU,BAr,PAr,IAr,m5,FTe,qAr,NAr,JU,jAr,DAr,GAr,g5,TTe,OAr,VAr,YU,XAr,zAr,QAr,h5,MTe,WAr,HAr,KU,UAr,JAr,YAr,p5,ETe,KAr,ZAr,ZU,e6r,o6r,r6r,u5,CTe,t6r,a6r,eJ,n6r,s6r,l6r,_5,wTe,i6r,d6r,oJ,c6r,f6r,m6r,b5,ATe,g6r,h6r,rJ,p6r,u6r,_6r,v5,yTe,b6r,v6r,tJ,F6r,T6r,M6r,F5,LTe,E6r,C6r,aJ,w6r,A6r,y6r,T5,xTe,L6r,x6r,nJ,$6r,k6r,S6r,M5,$Te,R6r,B6r,sJ,P6r,I6r,q6r,E5,kTe,N6r,j6r,lJ,D6r,G6r,O6r,C5,STe,V6r,X6r,iJ,z6r,Q6r,W6r,w5,RTe,H6r,U6r,dJ,J6r,Y6r,K6r,A5,BTe,Z6r,eyr,cJ,oyr,ryr,tyr,y5,PTe,ayr,nyr,fJ,syr,lyr,iyr,L5,Xqe,xc,x5,ITe,nx,dyr,qTe,cyr,zqe,mr,sx,fyr,$c,myr,mJ,gyr,hyr,gJ,pyr,uyr,_yr,lx,byr,NTe,vyr,Fyr,Tyr,Dt,ix,Myr,jTe,Eyr,Cyr,kc,wyr,DTe,Ayr,yyr,hJ,Lyr,xyr,$yr,$5,kyr,Dr,dx,Syr,GTe,Ryr,Byr,hn,Pyr,OTe,Iyr,qyr,VTe,Nyr,jyr,XTe,Dyr,Gyr,Oyr,ke,k5,zTe,Vyr,Xyr,pJ,zyr,Qyr,Wyr,S5,QTe,Hyr,Uyr,uJ,Jyr,Yyr,Kyr,R5,WTe,Zyr,eLr,_J,oLr,rLr,tLr,B5,HTe,aLr,nLr,bJ,sLr,lLr,iLr,P5,UTe,dLr,cLr,vJ,fLr,mLr,gLr,I5,JTe,hLr,pLr,FJ,uLr,_Lr,bLr,q5,YTe,vLr,FLr,TJ,TLr,MLr,ELr,N5,KTe,CLr,wLr,MJ,ALr,yLr,LLr,j5,ZTe,xLr,$Lr,EJ,kLr,SLr,RLr,D5,Qqe,Sc,G5,e7e,cx,BLr,o7e,PLr,Wqe,gr,fx,ILr,Rc,qLr,CJ,NLr,jLr,wJ,DLr,GLr,OLr,mx,VLr,r7e,XLr,zLr,QLr,Gt,gx,WLr,t7e,HLr,ULr,Bc,JLr,a7e,YLr,KLr,AJ,ZLr,e8r,o8r,O5,r8r,Gr,hx,t8r,n7e,a8r,n8r,pn,s8r,s7e,l8r,i8r,l7e,d8r,c8r,i7e,f8r,m8r,g8r,Me,V5,d7e,h8r,p8r,yJ,u8r,_8r,b8r,X5,c7e,v8r,F8r,LJ,T8r,M8r,E8r,z5,f7e,C8r,w8r,xJ,A8r,y8r,L8r,Q5,m7e,x8r,$8r,$J,k8r,S8r,R8r,W5,g7e,B8r,P8r,kJ,I8r,q8r,N8r,H5,h7e,j8r,D8r,SJ,G8r,O8r,V8r,U5,p7e,X8r,z8r,RJ,Q8r,W8r,H8r,J5,u7e,U8r,J8r,BJ,Y8r,K8r,Z8r,Y5,_7e,exr,oxr,PJ,rxr,txr,axr,K5,b7e,nxr,sxr,IJ,lxr,ixr,dxr,Z5,v7e,cxr,fxr,qJ,mxr,gxr,hxr,eC,F7e,pxr,uxr,NJ,_xr,bxr,vxr,oC,Hqe,Pc,rC,T7e,px,Fxr,M7e,Txr,Uqe,hr,ux,Mxr,Ic,Exr,jJ,Cxr,wxr,DJ,Axr,yxr,Lxr,_x,xxr,E7e,$xr,kxr,Sxr,Ot,bx,Rxr,C7e,Bxr,Pxr,qc,Ixr,w7e,qxr,Nxr,GJ,jxr,Dxr,Gxr,tC,Oxr,Or,vx,Vxr,A7e,Xxr,zxr,un,Qxr,y7e,Wxr,Hxr,L7e,Uxr,Jxr,x7e,Yxr,Kxr,Zxr,Le,aC,$7e,e9r,o9r,OJ,r9r,t9r,a9r,nC,k7e,n9r,s9r,VJ,l9r,i9r,d9r,sC,S7e,c9r,f9r,XJ,m9r,g9r,h9r,lC,R7e,p9r,u9r,zJ,_9r,b9r,v9r,iC,B7e,F9r,T9r,QJ,M9r,E9r,C9r,dC,P7e,w9r,A9r,WJ,y9r,L9r,x9r,cC,I7e,$9r,k9r,HJ,S9r,R9r,B9r,fC,q7e,P9r,I9r,UJ,q9r,N9r,j9r,mC,N7e,D9r,G9r,JJ,O9r,V9r,X9r,gC,j7e,z9r,Q9r,YJ,W9r,H9r,U9r,hC,Jqe,Nc,pC,D7e,Fx,J9r,G7e,Y9r,Yqe,pr,Tx,K9r,jc,Z9r,KJ,e$r,o$r,ZJ,r$r,t$r,a$r,Mx,n$r,O7e,s$r,l$r,i$r,Vt,Ex,d$r,V7e,c$r,f$r,Dc,m$r,X7e,g$r,h$r,eY,p$r,u$r,_$r,uC,b$r,Vr,Cx,v$r,z7e,F$r,T$r,_n,M$r,Q7e,E$r,C$r,W7e,w$r,A$r,H7e,y$r,L$r,x$r,Se,_C,U7e,$$r,k$r,oY,S$r,R$r,B$r,bC,J7e,P$r,I$r,rY,q$r,N$r,j$r,vC,Y7e,D$r,G$r,tY,O$r,V$r,X$r,FC,K7e,z$r,Q$r,aY,W$r,H$r,U$r,TC,Z7e,J$r,Y$r,nY,K$r,Z$r,ekr,MC,eMe,okr,rkr,sY,tkr,akr,nkr,EC,oMe,skr,lkr,lY,ikr,dkr,ckr,CC,rMe,fkr,mkr,iY,gkr,hkr,pkr,wC,tMe,ukr,_kr,dY,bkr,vkr,Fkr,AC,Kqe,Gc,yC,aMe,wx,Tkr,nMe,Mkr,Zqe,ur,Ax,Ekr,Oc,Ckr,cY,wkr,Akr,fY,ykr,Lkr,xkr,yx,$kr,sMe,kkr,Skr,Rkr,Xt,Lx,Bkr,lMe,Pkr,Ikr,Vc,qkr,iMe,Nkr,jkr,mY,Dkr,Gkr,Okr,LC,Vkr,Xr,xx,Xkr,dMe,zkr,Qkr,bn,Wkr,cMe,Hkr,Ukr,fMe,Jkr,Ykr,mMe,Kkr,Zkr,eSr,xe,xC,gMe,oSr,rSr,gY,tSr,aSr,nSr,$C,hMe,sSr,lSr,hY,iSr,dSr,cSr,kC,pMe,fSr,mSr,pY,gSr,hSr,pSr,SC,uMe,uSr,_Sr,uY,bSr,vSr,FSr,RC,_Me,TSr,MSr,_Y,ESr,CSr,wSr,BC,bMe,ASr,ySr,bY,LSr,xSr,$Sr,PC,vMe,kSr,SSr,vY,RSr,BSr,PSr,IC,FMe,ISr,qSr,FY,NSr,jSr,DSr,qC,TMe,GSr,OSr,TY,VSr,XSr,zSr,NC,MMe,QSr,WSr,MY,HSr,USr,JSr,jC,eNe,Xc,DC,EMe,$x,YSr,CMe,KSr,oNe,_r,kx,ZSr,zc,eRr,EY,oRr,rRr,CY,tRr,aRr,nRr,Sx,sRr,wMe,lRr,iRr,dRr,zt,Rx,cRr,AMe,fRr,mRr,Qc,gRr,yMe,hRr,pRr,wY,uRr,_Rr,bRr,GC,vRr,zr,Bx,FRr,LMe,TRr,MRr,vn,ERr,xMe,CRr,wRr,$Me,ARr,yRr,kMe,LRr,xRr,$Rr,$e,OC,SMe,kRr,SRr,AY,RRr,BRr,PRr,VC,RMe,IRr,qRr,yY,NRr,jRr,DRr,XC,BMe,GRr,ORr,LY,VRr,XRr,zRr,zC,PMe,QRr,WRr,xY,HRr,URr,JRr,QC,IMe,YRr,KRr,$Y,ZRr,eBr,oBr,WC,qMe,rBr,tBr,kY,aBr,nBr,sBr,HC,NMe,lBr,iBr,SY,dBr,cBr,fBr,UC,jMe,mBr,gBr,RY,hBr,pBr,uBr,JC,DMe,_Br,bBr,BY,vBr,FBr,TBr,YC,GMe,MBr,EBr,PY,CBr,wBr,ABr,KC,rNe,Wc,ZC,OMe,Px,yBr,VMe,LBr,tNe,br,Ix,xBr,Hc,$Br,IY,kBr,SBr,qY,RBr,BBr,PBr,qx,IBr,XMe,qBr,NBr,jBr,Qt,Nx,DBr,zMe,GBr,OBr,Uc,VBr,QMe,XBr,zBr,NY,QBr,WBr,HBr,e3,UBr,Qr,jx,JBr,WMe,YBr,KBr,Fn,ZBr,HMe,ePr,oPr,UMe,rPr,tPr,JMe,aPr,nPr,sPr,De,o3,YMe,lPr,iPr,jY,dPr,cPr,fPr,r3,KMe,mPr,gPr,DY,hPr,pPr,uPr,t3,ZMe,_Pr,bPr,GY,vPr,FPr,TPr,a3,e4e,MPr,EPr,OY,CPr,wPr,APr,n3,o4e,yPr,LPr,VY,xPr,$Pr,kPr,s3,r4e,SPr,RPr,XY,BPr,PPr,IPr,l3,t4e,qPr,NPr,zY,jPr,DPr,GPr,i3,a4e,OPr,VPr,QY,XPr,zPr,QPr,d3,aNe,Jc,c3,n4e,Dx,WPr,s4e,HPr,nNe,vr,Gx,UPr,Yc,JPr,WY,YPr,KPr,HY,ZPr,eIr,oIr,Ox,rIr,l4e,tIr,aIr,nIr,Wt,Vx,sIr,i4e,lIr,iIr,Kc,dIr,d4e,cIr,fIr,UY,mIr,gIr,hIr,f3,pIr,Wr,Xx,uIr,c4e,_Ir,bIr,Tn,vIr,f4e,FIr,TIr,m4e,MIr,EIr,g4e,CIr,wIr,AIr,Ge,m3,h4e,yIr,LIr,JY,xIr,$Ir,kIr,g3,p4e,SIr,RIr,YY,BIr,PIr,IIr,h3,u4e,qIr,NIr,KY,jIr,DIr,GIr,p3,_4e,OIr,VIr,ZY,XIr,zIr,QIr,u3,b4e,WIr,HIr,eK,UIr,JIr,YIr,_3,v4e,KIr,ZIr,oK,eqr,oqr,rqr,b3,F4e,tqr,aqr,rK,nqr,sqr,lqr,v3,T4e,iqr,dqr,tK,cqr,fqr,mqr,F3,sNe,Zc,T3,M4e,zx,gqr,E4e,hqr,lNe,Fr,Qx,pqr,ef,uqr,aK,_qr,bqr,nK,vqr,Fqr,Tqr,Wx,Mqr,C4e,Eqr,Cqr,wqr,Ht,Hx,Aqr,w4e,yqr,Lqr,of,xqr,A4e,$qr,kqr,sK,Sqr,Rqr,Bqr,M3,Pqr,Hr,Ux,Iqr,y4e,qqr,Nqr,Mn,jqr,L4e,Dqr,Gqr,x4e,Oqr,Vqr,$4e,Xqr,zqr,Qqr,k4e,E3,S4e,Wqr,Hqr,lK,Uqr,Jqr,Yqr,C3,iNe,rf,w3,R4e,Jx,Kqr,B4e,Zqr,dNe,Tr,Yx,eNr,tf,oNr,iK,rNr,tNr,dK,aNr,nNr,sNr,Kx,lNr,P4e,iNr,dNr,cNr,Ut,Zx,fNr,I4e,mNr,gNr,af,hNr,q4e,pNr,uNr,cK,_Nr,bNr,vNr,A3,FNr,Ur,e9,TNr,N4e,MNr,ENr,En,CNr,j4e,wNr,ANr,D4e,yNr,LNr,G4e,xNr,$Nr,kNr,o9,y3,O4e,SNr,RNr,fK,BNr,PNr,INr,L3,V4e,qNr,NNr,mK,jNr,DNr,GNr,x3,cNe,nf,$3,X4e,r9,ONr,z4e,VNr,fNe,Mr,t9,XNr,sf,zNr,gK,QNr,WNr,hK,HNr,UNr,JNr,a9,YNr,Q4e,KNr,ZNr,ejr,Jt,n9,ojr,W4e,rjr,tjr,lf,ajr,H4e,njr,sjr,pK,ljr,ijr,djr,k3,cjr,Jr,s9,fjr,U4e,mjr,gjr,Cn,hjr,J4e,pjr,ujr,Y4e,_jr,bjr,K4e,vjr,Fjr,Tjr,Z4e,S3,eEe,Mjr,Ejr,uK,Cjr,wjr,Ajr,R3,mNe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),r6=new ee({}),t6=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),_f=new yjr({props:{warning:!0,$$slots:{default:[gyt]},$$scope:{ctx:L}}}),a6=new ee({}),n6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/configuration_auto.py#L574"}}),i6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/configuration_auto.py#L597"}}),_g=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[hyt]},$$scope:{ctx:L}}}),d6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/configuration_auto.py#L719"}}),c6=new ee({}),f6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/tokenization_auto.py#L379"}}),h6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17202/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/tokenization_auto.py#L393"}}),Yg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[pyt]},$$scope:{ctx:L}}}),p6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/tokenization_auto.py#L589"}}),u6=new ee({}),_6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/feature_extraction_auto.py#L178"}}),F6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17202/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),wh=new yjr({props:{$$slots:{default:[uyt]},$$scope:{ctx:L}}}),Ah=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[_yt]},$$scope:{ctx:L}}}),T6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/feature_extraction_auto.py#L319"}}),M6=new ee({}),E6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/processing_auto.py#L77"}}),A6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/processing_auto.py#L91"}}),Xh=new yjr({props:{$$slots:{default:[byt]},$$scope:{ctx:L}}}),zh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[vyt]},$$scope:{ctx:L}}}),y6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/processing_auto.py#L244"}}),L6=new ee({}),x6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L725"}}),k6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BLOOMConfig">BLOOMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BLOOMModel">BLOOMModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Hh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Fyt]},$$scope:{ctx:L}}}),S6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),ju=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Tyt]},$$scope:{ctx:L}}}),R6=new ee({}),B6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L732"}}),I6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BLOOMConfig">BLOOMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BLOOMLMHeadModel">BLOOMLMHeadModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Gu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Myt]},$$scope:{ctx:L}}}),q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),$_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Eyt]},$$scope:{ctx:L}}}),N6=new ee({}),j6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L747"}}),G6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BLOOMConfig">BLOOMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BLOOMLMHeadModel">BLOOMLMHeadModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),S_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Cyt]},$$scope:{ctx:L}}}),O6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),_2=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[wyt]},$$scope:{ctx:L}}}),V6=new ee({}),X6=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L754"}}),Q6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),v2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Ayt]},$$scope:{ctx:L}}}),W6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),r1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[yyt]},$$scope:{ctx:L}}}),H6=new ee({}),U6=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L761"}}),Y6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),a1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Lyt]},$$scope:{ctx:L}}}),K6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),E1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[xyt]},$$scope:{ctx:L}}}),Z6=new ee({}),ey=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L770"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),w1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[$yt]},$$scope:{ctx:L}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),Fb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[kyt]},$$scope:{ctx:L}}}),ay=new ee({}),ny=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L804"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Mb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Syt]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),Zb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Ryt]},$$scope:{ctx:L}}}),dy=new ee({}),cy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L811"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),ov=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Byt]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),iv=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Pyt]},$$scope:{ctx:L}}}),hy=new ee({}),py=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L797"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),cv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Iyt]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),zv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[qyt]},$$scope:{ctx:L}}}),vy=new ee({}),Fy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L779"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Wv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Nyt]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),BF=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[jyt]},$$scope:{ctx:L}}}),Cy=new ee({}),wy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L786"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Dyt]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Gyt]},$$scope:{ctx:L}}}),xy=new ee({}),$y=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L820"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Oyt]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),e0=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Vyt]},$$scope:{ctx:L}}}),By=new ee({}),Py=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L859"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),r0=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Xyt]},$$scope:{ctx:L}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),n0=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[zyt]},$$scope:{ctx:L}}}),jy=new ee({}),Dy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L866"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),l0=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Qyt]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),_0=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Wyt]},$$scope:{ctx:L}}}),Xy=new ee({}),zy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L889"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),v0=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Hyt]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),w0=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Uyt]},$$scope:{ctx:L}}}),Uy=new ee({}),Jy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L873"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),y0=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Jyt]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),q0=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Yyt]},$$scope:{ctx:L}}}),eL=new ee({}),oL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L880"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),j0=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Kyt]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),V0=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Zyt]},$$scope:{ctx:L}}}),sL=new ee({}),lL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L898"}}),dL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),z0=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[eLt]},$$scope:{ctx:L}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),Y0=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[oLt]},$$scope:{ctx:L}}}),fL=new ee({}),mL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L905"}}),hL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Z0=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[rLt]},$$scope:{ctx:L}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[tLt]},$$scope:{ctx:L}}}),uL=new ee({}),_L=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L852"}}),vL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[aLt]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),cT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[nLt]},$$scope:{ctx:L}}}),ML=new ee({}),EL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L827"}}),wL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),mT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[sLt]},$$scope:{ctx:L}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),pT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[lLt]},$$scope:{ctx:L}}}),yL=new ee({}),LL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L834"}}),$L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),_T=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[iLt]},$$scope:{ctx:L}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),ET=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[dLt]},$$scope:{ctx:L}}}),SL=new ee({}),RL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L843"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),wT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[cLt]},$$scope:{ctx:L}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),LT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[fLt]},$$scope:{ctx:L}}}),qL=new ee({}),NL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),DL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),$T=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[mLt]},$$scope:{ctx:L}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),T7=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[gLt]},$$scope:{ctx:L}}}),OL=new ee({}),VL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),zL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),E7=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[hLt]},$$scope:{ctx:L}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),W7=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[pLt]},$$scope:{ctx:L}}}),WL=new ee({}),HL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),JL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),U7=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[uLt]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),iM=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[_Lt]},$$scope:{ctx:L}}}),KL=new ee({}),ZL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),o8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),cM=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[bLt]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),hM=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[vLt]},$$scope:{ctx:L}}}),t8=new ee({}),a8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),s8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[FLt]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),qM=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[TLt]},$$scope:{ctx:L}}}),i8=new ee({}),d8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),f8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),jM=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[MLt]},$$scope:{ctx:L}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),JM=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ELt]},$$scope:{ctx:L}}}),g8=new ee({}),h8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),u8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),KM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[CLt]},$$scope:{ctx:L}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),w4=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[wLt]},$$scope:{ctx:L}}}),b8=new ee({}),v8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),T8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),y4=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[ALt]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),z4=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[yLt]},$$scope:{ctx:L}}}),E8=new ee({}),C8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),W4=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[LLt]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),J4=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[xLt]},$$scope:{ctx:L}}}),x8=new ee({}),$8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),S8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),K4=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[$Lt]},$$scope:{ctx:L}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),eE=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[kLt]},$$scope:{ctx:L}}}),B8=new ee({}),P8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),rE=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[SLt]},$$scope:{ctx:L}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),EE=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[RLt]},$$scope:{ctx:L}}}),j8=new ee({}),D8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),O8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),wE=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[BLt]},$$scope:{ctx:L}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),QE=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[PLt]},$$scope:{ctx:L}}}),X8=new ee({}),z8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),W8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),HE=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[ILt]},$$scope:{ctx:L}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),JE=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[qLt]},$$scope:{ctx:L}}}),U8=new ee({}),J8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),K8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[NLt]},$$scope:{ctx:L}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[jLt]},$$scope:{ctx:L}}}),ex=new ee({}),ox=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[DLt]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),L5=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[GLt]},$$scope:{ctx:L}}}),nx=new ee({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),$5=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[OLt]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[VLt]},$$scope:{ctx:L}}}),cx=new ee({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[XLt]},$$scope:{ctx:L}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),oC=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[zLt]},$$scope:{ctx:L}}}),px=new ee({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),tC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[QLt]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[WLt]},$$scope:{ctx:L}}}),Fx=new ee({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),uC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[HLt]},$$scope:{ctx:L}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),AC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ULt]},$$scope:{ctx:L}}}),wx=new ee({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),LC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[JLt]},$$scope:{ctx:L}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),jC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[YLt]},$$scope:{ctx:L}}}),$x=new ee({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),GC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[KLt]},$$scope:{ctx:L}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ZLt]},$$scope:{ctx:L}}}),Px=new ee({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[e8t]},$$scope:{ctx:L}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),d3=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[o8t]},$$scope:{ctx:L}}}),Dx=new ee({}),Gx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),f3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[r8t]},$$scope:{ctx:L}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),F3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[t8t]},$$scope:{ctx:L}}}),zx=new ee({}),Qx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),M3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[a8t]},$$scope:{ctx:L}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),C3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[n8t]},$$scope:{ctx:L}}}),Jx=new ee({}),Yx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),A3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[s8t]},$$scope:{ctx:L}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),x3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[l8t]},$$scope:{ctx:L}}}),r9=new ee({}),t9=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),n9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),k3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[i8t]},$$scope:{ctx:L}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),R3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[d8t]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),li=o("Auto Classes"),mf=l(),et=a("p"),ii=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=a("code"),KA=o("from_pretrained()"),gf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ci=o("Instantiating one of "),An=a("a"),ZA=o("AutoConfig"),yn=o(", "),Ln=a("a"),e6=o("AutoModel"),fi=o(`, and
`),xn=a("a"),o6=o("AutoTokenizer"),mi=o(" will directly create a class of the relevant architecture. For instance"),hf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),v$=o("will create a model that is an instance of "),gi=a("a"),F$=o("BertModel"),T$=o("."),Eo=l(),Ea=a("p"),M$=o("There is one class of "),pf=a("code"),E$=o("AutoModel"),FDe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),dIe=l(),hi=a("h2"),uf=a("a"),cee=a("span"),F(r6.$$.fragment),TDe=l(),fee=a("span"),MDe=o("Extending the Auto Classes"),cIe=l(),$n=a("p"),EDe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),mee=a("code"),CDe=o("NewModel"),wDe=o(", make sure you have a "),gee=a("code"),ADe=o("NewModelConfig"),yDe=o(` then you can add those to the auto
classes like this:`),fIe=l(),F(t6.$$.fragment),mIe=l(),C$=a("p"),LDe=o("You will then be able to use the auto classes like you would usually do!"),gIe=l(),F(_f.$$.fragment),hIe=l(),pi=a("h2"),bf=a("a"),hee=a("span"),F(a6.$$.fragment),xDe=l(),pee=a("span"),$De=o("AutoConfig"),pIe=l(),Co=a("div"),F(n6.$$.fragment),kDe=l(),s6=a("p"),SDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),w$=a("a"),RDe=o("from_pretrained()"),BDe=o(" class method."),PDe=l(),l6=a("p"),IDe=o("This class cannot be instantiated directly using "),uee=a("code"),qDe=o("__init__()"),NDe=o(" (throws an error)."),jDe=l(),Er=a("div"),F(i6.$$.fragment),DDe=l(),_ee=a("p"),GDe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),ODe=l(),ui=a("p"),VDe=o("The configuration class to instantiate is selected based on the "),bee=a("code"),XDe=o("model_type"),zDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),vee=a("code"),QDe=o("pretrained_model_name_or_path"),WDe=o(":"),HDe=l(),A=a("ul"),vf=a("li"),Fee=a("strong"),UDe=o("albert"),JDe=o(" \u2014 "),A$=a("a"),YDe=o("AlbertConfig"),KDe=o(" (ALBERT model)"),ZDe=l(),Ff=a("li"),Tee=a("strong"),eGe=o("bart"),oGe=o(" \u2014 "),y$=a("a"),rGe=o("BartConfig"),tGe=o(" (BART model)"),aGe=l(),Tf=a("li"),Mee=a("strong"),nGe=o("beit"),sGe=o(" \u2014 "),L$=a("a"),lGe=o("BeitConfig"),iGe=o(" (BEiT model)"),dGe=l(),Mf=a("li"),Eee=a("strong"),cGe=o("bert"),fGe=o(" \u2014 "),x$=a("a"),mGe=o("BertConfig"),gGe=o(" (BERT model)"),hGe=l(),Ef=a("li"),Cee=a("strong"),pGe=o("bert-generation"),uGe=o(" \u2014 "),$$=a("a"),_Ge=o("BertGenerationConfig"),bGe=o(" (Bert Generation model)"),vGe=l(),Cf=a("li"),wee=a("strong"),FGe=o("big_bird"),TGe=o(" \u2014 "),k$=a("a"),MGe=o("BigBirdConfig"),EGe=o(" (BigBird model)"),CGe=l(),wf=a("li"),Aee=a("strong"),wGe=o("bigbird_pegasus"),AGe=o(" \u2014 "),S$=a("a"),yGe=o("BigBirdPegasusConfig"),LGe=o(" (BigBirdPegasus model)"),xGe=l(),Af=a("li"),yee=a("strong"),$Ge=o("blenderbot"),kGe=o(" \u2014 "),R$=a("a"),SGe=o("BlenderbotConfig"),RGe=o(" (Blenderbot model)"),BGe=l(),yf=a("li"),Lee=a("strong"),PGe=o("blenderbot-small"),IGe=o(" \u2014 "),B$=a("a"),qGe=o("BlenderbotSmallConfig"),NGe=o(" (BlenderbotSmall model)"),jGe=l(),Lf=a("li"),xee=a("strong"),DGe=o("bloom"),GGe=o(" \u2014 "),P$=a("a"),OGe=o("BLOOMConfig"),VGe=o(" (BLOOM model)"),XGe=l(),xf=a("li"),$ee=a("strong"),zGe=o("camembert"),QGe=o(" \u2014 "),I$=a("a"),WGe=o("CamembertConfig"),HGe=o(" (CamemBERT model)"),UGe=l(),$f=a("li"),kee=a("strong"),JGe=o("canine"),YGe=o(" \u2014 "),q$=a("a"),KGe=o("CanineConfig"),ZGe=o(" (Canine model)"),eOe=l(),kf=a("li"),See=a("strong"),oOe=o("clip"),rOe=o(" \u2014 "),N$=a("a"),tOe=o("CLIPConfig"),aOe=o(" (CLIP model)"),nOe=l(),Sf=a("li"),Ree=a("strong"),sOe=o("convbert"),lOe=o(" \u2014 "),j$=a("a"),iOe=o("ConvBertConfig"),dOe=o(" (ConvBERT model)"),cOe=l(),Rf=a("li"),Bee=a("strong"),fOe=o("convnext"),mOe=o(" \u2014 "),D$=a("a"),gOe=o("ConvNextConfig"),hOe=o(" (ConvNext model)"),pOe=l(),Bf=a("li"),Pee=a("strong"),uOe=o("ctrl"),_Oe=o(" \u2014 "),G$=a("a"),bOe=o("CTRLConfig"),vOe=o(" (CTRL model)"),FOe=l(),Pf=a("li"),Iee=a("strong"),TOe=o("data2vec-audio"),MOe=o(" \u2014 "),O$=a("a"),EOe=o("Data2VecAudioConfig"),COe=o(" (Data2VecAudio model)"),wOe=l(),If=a("li"),qee=a("strong"),AOe=o("data2vec-text"),yOe=o(" \u2014 "),V$=a("a"),LOe=o("Data2VecTextConfig"),xOe=o(" (Data2VecText model)"),$Oe=l(),qf=a("li"),Nee=a("strong"),kOe=o("data2vec-vision"),SOe=o(" \u2014 "),X$=a("a"),ROe=o("Data2VecVisionConfig"),BOe=o(" (Data2VecVision model)"),POe=l(),Nf=a("li"),jee=a("strong"),IOe=o("deberta"),qOe=o(" \u2014 "),z$=a("a"),NOe=o("DebertaConfig"),jOe=o(" (DeBERTa model)"),DOe=l(),jf=a("li"),Dee=a("strong"),GOe=o("deberta-v2"),OOe=o(" \u2014 "),Q$=a("a"),VOe=o("DebertaV2Config"),XOe=o(" (DeBERTa-v2 model)"),zOe=l(),Df=a("li"),Gee=a("strong"),QOe=o("decision_transformer"),WOe=o(" \u2014 "),W$=a("a"),HOe=o("DecisionTransformerConfig"),UOe=o(" (Decision Transformer model)"),JOe=l(),Gf=a("li"),Oee=a("strong"),YOe=o("deit"),KOe=o(" \u2014 "),H$=a("a"),ZOe=o("DeiTConfig"),eVe=o(" (DeiT model)"),oVe=l(),Of=a("li"),Vee=a("strong"),rVe=o("detr"),tVe=o(" \u2014 "),U$=a("a"),aVe=o("DetrConfig"),nVe=o(" (DETR model)"),sVe=l(),Vf=a("li"),Xee=a("strong"),lVe=o("distilbert"),iVe=o(" \u2014 "),J$=a("a"),dVe=o("DistilBertConfig"),cVe=o(" (DistilBERT model)"),fVe=l(),Xf=a("li"),zee=a("strong"),mVe=o("dpr"),gVe=o(" \u2014 "),Y$=a("a"),hVe=o("DPRConfig"),pVe=o(" (DPR model)"),uVe=l(),zf=a("li"),Qee=a("strong"),_Ve=o("dpt"),bVe=o(" \u2014 "),K$=a("a"),vVe=o("DPTConfig"),FVe=o(" (DPT model)"),TVe=l(),Qf=a("li"),Wee=a("strong"),MVe=o("electra"),EVe=o(" \u2014 "),Z$=a("a"),CVe=o("ElectraConfig"),wVe=o(" (ELECTRA model)"),AVe=l(),Wf=a("li"),Hee=a("strong"),yVe=o("encoder-decoder"),LVe=o(" \u2014 "),ek=a("a"),xVe=o("EncoderDecoderConfig"),$Ve=o(" (Encoder decoder model)"),kVe=l(),Hf=a("li"),Uee=a("strong"),SVe=o("flaubert"),RVe=o(" \u2014 "),ok=a("a"),BVe=o("FlaubertConfig"),PVe=o(" (FlauBERT model)"),IVe=l(),Uf=a("li"),Jee=a("strong"),qVe=o("flava"),NVe=o(" \u2014 "),rk=a("a"),jVe=o("FlavaConfig"),DVe=o(" (Flava model)"),GVe=l(),Jf=a("li"),Yee=a("strong"),OVe=o("fnet"),VVe=o(" \u2014 "),tk=a("a"),XVe=o("FNetConfig"),zVe=o(" (FNet model)"),QVe=l(),Yf=a("li"),Kee=a("strong"),WVe=o("fsmt"),HVe=o(" \u2014 "),ak=a("a"),UVe=o("FSMTConfig"),JVe=o(" (FairSeq Machine-Translation model)"),YVe=l(),Kf=a("li"),Zee=a("strong"),KVe=o("funnel"),ZVe=o(" \u2014 "),nk=a("a"),eXe=o("FunnelConfig"),oXe=o(" (Funnel Transformer model)"),rXe=l(),Zf=a("li"),eoe=a("strong"),tXe=o("glpn"),aXe=o(" \u2014 "),sk=a("a"),nXe=o("GLPNConfig"),sXe=o(" (GLPN model)"),lXe=l(),em=a("li"),ooe=a("strong"),iXe=o("gpt2"),dXe=o(" \u2014 "),lk=a("a"),cXe=o("GPT2Config"),fXe=o(" (OpenAI GPT-2 model)"),mXe=l(),om=a("li"),roe=a("strong"),gXe=o("gpt_neo"),hXe=o(" \u2014 "),ik=a("a"),pXe=o("GPTNeoConfig"),uXe=o(" (GPT Neo model)"),_Xe=l(),rm=a("li"),toe=a("strong"),bXe=o("gptj"),vXe=o(" \u2014 "),dk=a("a"),FXe=o("GPTJConfig"),TXe=o(" (GPT-J model)"),MXe=l(),tm=a("li"),aoe=a("strong"),EXe=o("hubert"),CXe=o(" \u2014 "),ck=a("a"),wXe=o("HubertConfig"),AXe=o(" (Hubert model)"),yXe=l(),am=a("li"),noe=a("strong"),LXe=o("ibert"),xXe=o(" \u2014 "),fk=a("a"),$Xe=o("IBertConfig"),kXe=o(" (I-BERT model)"),SXe=l(),nm=a("li"),soe=a("strong"),RXe=o("imagegpt"),BXe=o(" \u2014 "),mk=a("a"),PXe=o("ImageGPTConfig"),IXe=o(" (ImageGPT model)"),qXe=l(),sm=a("li"),loe=a("strong"),NXe=o("layoutlm"),jXe=o(" \u2014 "),gk=a("a"),DXe=o("LayoutLMConfig"),GXe=o(" (LayoutLM model)"),OXe=l(),lm=a("li"),ioe=a("strong"),VXe=o("layoutlmv2"),XXe=o(" \u2014 "),hk=a("a"),zXe=o("LayoutLMv2Config"),QXe=o(" (LayoutLMv2 model)"),WXe=l(),im=a("li"),doe=a("strong"),HXe=o("led"),UXe=o(" \u2014 "),pk=a("a"),JXe=o("LEDConfig"),YXe=o(" (LED model)"),KXe=l(),dm=a("li"),coe=a("strong"),ZXe=o("longformer"),eze=o(" \u2014 "),uk=a("a"),oze=o("LongformerConfig"),rze=o(" (Longformer model)"),tze=l(),cm=a("li"),foe=a("strong"),aze=o("luke"),nze=o(" \u2014 "),_k=a("a"),sze=o("LukeConfig"),lze=o(" (LUKE model)"),ize=l(),fm=a("li"),moe=a("strong"),dze=o("lxmert"),cze=o(" \u2014 "),bk=a("a"),fze=o("LxmertConfig"),mze=o(" (LXMERT model)"),gze=l(),mm=a("li"),goe=a("strong"),hze=o("m2m_100"),pze=o(" \u2014 "),vk=a("a"),uze=o("M2M100Config"),_ze=o(" (M2M100 model)"),bze=l(),gm=a("li"),hoe=a("strong"),vze=o("marian"),Fze=o(" \u2014 "),Fk=a("a"),Tze=o("MarianConfig"),Mze=o(" (Marian model)"),Eze=l(),hm=a("li"),poe=a("strong"),Cze=o("maskformer"),wze=o(" \u2014 "),Tk=a("a"),Aze=o("MaskFormerConfig"),yze=o(" (MaskFormer model)"),Lze=l(),pm=a("li"),uoe=a("strong"),xze=o("mbart"),$ze=o(" \u2014 "),Mk=a("a"),kze=o("MBartConfig"),Sze=o(" (mBART model)"),Rze=l(),um=a("li"),_oe=a("strong"),Bze=o("megatron-bert"),Pze=o(" \u2014 "),Ek=a("a"),Ize=o("MegatronBertConfig"),qze=o(" (MegatronBert model)"),Nze=l(),_m=a("li"),boe=a("strong"),jze=o("mobilebert"),Dze=o(" \u2014 "),Ck=a("a"),Gze=o("MobileBertConfig"),Oze=o(" (MobileBERT model)"),Vze=l(),bm=a("li"),voe=a("strong"),Xze=o("mpnet"),zze=o(" \u2014 "),wk=a("a"),Qze=o("MPNetConfig"),Wze=o(" (MPNet model)"),Hze=l(),vm=a("li"),Foe=a("strong"),Uze=o("mt5"),Jze=o(" \u2014 "),Ak=a("a"),Yze=o("MT5Config"),Kze=o(" (mT5 model)"),Zze=l(),Fm=a("li"),Toe=a("strong"),eQe=o("nystromformer"),oQe=o(" \u2014 "),yk=a("a"),rQe=o("NystromformerConfig"),tQe=o(" (Nystromformer model)"),aQe=l(),Tm=a("li"),Moe=a("strong"),nQe=o("openai-gpt"),sQe=o(" \u2014 "),Lk=a("a"),lQe=o("OpenAIGPTConfig"),iQe=o(" (OpenAI GPT model)"),dQe=l(),Mm=a("li"),Eoe=a("strong"),cQe=o("opt"),fQe=o(" \u2014 "),xk=a("a"),mQe=o("OPTConfig"),gQe=o(" (OPT model)"),hQe=l(),Em=a("li"),Coe=a("strong"),pQe=o("pegasus"),uQe=o(" \u2014 "),$k=a("a"),_Qe=o("PegasusConfig"),bQe=o(" (Pegasus model)"),vQe=l(),Cm=a("li"),woe=a("strong"),FQe=o("perceiver"),TQe=o(" \u2014 "),kk=a("a"),MQe=o("PerceiverConfig"),EQe=o(" (Perceiver model)"),CQe=l(),wm=a("li"),Aoe=a("strong"),wQe=o("plbart"),AQe=o(" \u2014 "),Sk=a("a"),yQe=o("PLBartConfig"),LQe=o(" (PLBart model)"),xQe=l(),Am=a("li"),yoe=a("strong"),$Qe=o("poolformer"),kQe=o(" \u2014 "),Rk=a("a"),SQe=o("PoolFormerConfig"),RQe=o(" (PoolFormer model)"),BQe=l(),ym=a("li"),Loe=a("strong"),PQe=o("prophetnet"),IQe=o(" \u2014 "),Bk=a("a"),qQe=o("ProphetNetConfig"),NQe=o(" (ProphetNet model)"),jQe=l(),Lm=a("li"),xoe=a("strong"),DQe=o("qdqbert"),GQe=o(" \u2014 "),Pk=a("a"),OQe=o("QDQBertConfig"),VQe=o(" (QDQBert model)"),XQe=l(),xm=a("li"),$oe=a("strong"),zQe=o("rag"),QQe=o(" \u2014 "),Ik=a("a"),WQe=o("RagConfig"),HQe=o(" (RAG model)"),UQe=l(),$m=a("li"),koe=a("strong"),JQe=o("realm"),YQe=o(" \u2014 "),qk=a("a"),KQe=o("RealmConfig"),ZQe=o(" (Realm model)"),eWe=l(),km=a("li"),Soe=a("strong"),oWe=o("reformer"),rWe=o(" \u2014 "),Nk=a("a"),tWe=o("ReformerConfig"),aWe=o(" (Reformer model)"),nWe=l(),Sm=a("li"),Roe=a("strong"),sWe=o("regnet"),lWe=o(" \u2014 "),jk=a("a"),iWe=o("RegNetConfig"),dWe=o(" (RegNet model)"),cWe=l(),Rm=a("li"),Boe=a("strong"),fWe=o("rembert"),mWe=o(" \u2014 "),Dk=a("a"),gWe=o("RemBertConfig"),hWe=o(" (RemBERT model)"),pWe=l(),Bm=a("li"),Poe=a("strong"),uWe=o("resnet"),_We=o(" \u2014 "),Gk=a("a"),bWe=o("ResNetConfig"),vWe=o(" (ResNet model)"),FWe=l(),Pm=a("li"),Ioe=a("strong"),TWe=o("retribert"),MWe=o(" \u2014 "),Ok=a("a"),EWe=o("RetriBertConfig"),CWe=o(" (RetriBERT model)"),wWe=l(),Im=a("li"),qoe=a("strong"),AWe=o("roberta"),yWe=o(" \u2014 "),Vk=a("a"),LWe=o("RobertaConfig"),xWe=o(" (RoBERTa model)"),$We=l(),qm=a("li"),Noe=a("strong"),kWe=o("roformer"),SWe=o(" \u2014 "),Xk=a("a"),RWe=o("RoFormerConfig"),BWe=o(" (RoFormer model)"),PWe=l(),Nm=a("li"),joe=a("strong"),IWe=o("segformer"),qWe=o(" \u2014 "),zk=a("a"),NWe=o("SegformerConfig"),jWe=o(" (SegFormer model)"),DWe=l(),jm=a("li"),Doe=a("strong"),GWe=o("sew"),OWe=o(" \u2014 "),Qk=a("a"),VWe=o("SEWConfig"),XWe=o(" (SEW model)"),zWe=l(),Dm=a("li"),Goe=a("strong"),QWe=o("sew-d"),WWe=o(" \u2014 "),Wk=a("a"),HWe=o("SEWDConfig"),UWe=o(" (SEW-D model)"),JWe=l(),Gm=a("li"),Ooe=a("strong"),YWe=o("speech-encoder-decoder"),KWe=o(" \u2014 "),Hk=a("a"),ZWe=o("SpeechEncoderDecoderConfig"),eHe=o(" (Speech Encoder decoder model)"),oHe=l(),Om=a("li"),Voe=a("strong"),rHe=o("speech_to_text"),tHe=o(" \u2014 "),Uk=a("a"),aHe=o("Speech2TextConfig"),nHe=o(" (Speech2Text model)"),sHe=l(),Vm=a("li"),Xoe=a("strong"),lHe=o("speech_to_text_2"),iHe=o(" \u2014 "),Jk=a("a"),dHe=o("Speech2Text2Config"),cHe=o(" (Speech2Text2 model)"),fHe=l(),Xm=a("li"),zoe=a("strong"),mHe=o("splinter"),gHe=o(" \u2014 "),Yk=a("a"),hHe=o("SplinterConfig"),pHe=o(" (Splinter model)"),uHe=l(),zm=a("li"),Qoe=a("strong"),_He=o("squeezebert"),bHe=o(" \u2014 "),Kk=a("a"),vHe=o("SqueezeBertConfig"),FHe=o(" (SqueezeBERT model)"),THe=l(),Qm=a("li"),Woe=a("strong"),MHe=o("swin"),EHe=o(" \u2014 "),Zk=a("a"),CHe=o("SwinConfig"),wHe=o(" (Swin model)"),AHe=l(),Wm=a("li"),Hoe=a("strong"),yHe=o("t5"),LHe=o(" \u2014 "),eS=a("a"),xHe=o("T5Config"),$He=o(" (T5 model)"),kHe=l(),Hm=a("li"),Uoe=a("strong"),SHe=o("tapas"),RHe=o(" \u2014 "),oS=a("a"),BHe=o("TapasConfig"),PHe=o(" (TAPAS model)"),IHe=l(),Um=a("li"),Joe=a("strong"),qHe=o("tapex"),NHe=o(" \u2014 "),rS=a("a"),jHe=o("BartConfig"),DHe=o(" (TAPEX model)"),GHe=l(),Jm=a("li"),Yoe=a("strong"),OHe=o("transfo-xl"),VHe=o(" \u2014 "),tS=a("a"),XHe=o("TransfoXLConfig"),zHe=o(" (Transformer-XL model)"),QHe=l(),Ym=a("li"),Koe=a("strong"),WHe=o("trocr"),HHe=o(" \u2014 "),aS=a("a"),UHe=o("TrOCRConfig"),JHe=o(" (TrOCR model)"),YHe=l(),Km=a("li"),Zoe=a("strong"),KHe=o("unispeech"),ZHe=o(" \u2014 "),nS=a("a"),eUe=o("UniSpeechConfig"),oUe=o(" (UniSpeech model)"),rUe=l(),Zm=a("li"),ere=a("strong"),tUe=o("unispeech-sat"),aUe=o(" \u2014 "),sS=a("a"),nUe=o("UniSpeechSatConfig"),sUe=o(" (UniSpeechSat model)"),lUe=l(),eg=a("li"),ore=a("strong"),iUe=o("van"),dUe=o(" \u2014 "),lS=a("a"),cUe=o("VanConfig"),fUe=o(" (VAN model)"),mUe=l(),og=a("li"),rre=a("strong"),gUe=o("vilt"),hUe=o(" \u2014 "),iS=a("a"),pUe=o("ViltConfig"),uUe=o(" (ViLT model)"),_Ue=l(),rg=a("li"),tre=a("strong"),bUe=o("vision-encoder-decoder"),vUe=o(" \u2014 "),dS=a("a"),FUe=o("VisionEncoderDecoderConfig"),TUe=o(" (Vision Encoder decoder model)"),MUe=l(),tg=a("li"),are=a("strong"),EUe=o("vision-text-dual-encoder"),CUe=o(" \u2014 "),cS=a("a"),wUe=o("VisionTextDualEncoderConfig"),AUe=o(" (VisionTextDualEncoder model)"),yUe=l(),ag=a("li"),nre=a("strong"),LUe=o("visual_bert"),xUe=o(" \u2014 "),fS=a("a"),$Ue=o("VisualBertConfig"),kUe=o(" (VisualBert model)"),SUe=l(),ng=a("li"),sre=a("strong"),RUe=o("vit"),BUe=o(" \u2014 "),mS=a("a"),PUe=o("ViTConfig"),IUe=o(" (ViT model)"),qUe=l(),sg=a("li"),lre=a("strong"),NUe=o("vit_mae"),jUe=o(" \u2014 "),gS=a("a"),DUe=o("ViTMAEConfig"),GUe=o(" (ViTMAE model)"),OUe=l(),lg=a("li"),ire=a("strong"),VUe=o("wav2vec2"),XUe=o(" \u2014 "),hS=a("a"),zUe=o("Wav2Vec2Config"),QUe=o(" (Wav2Vec2 model)"),WUe=l(),ig=a("li"),dre=a("strong"),HUe=o("wavlm"),UUe=o(" \u2014 "),pS=a("a"),JUe=o("WavLMConfig"),YUe=o(" (WavLM model)"),KUe=l(),dg=a("li"),cre=a("strong"),ZUe=o("xglm"),eJe=o(" \u2014 "),uS=a("a"),oJe=o("XGLMConfig"),rJe=o(" (XGLM model)"),tJe=l(),cg=a("li"),fre=a("strong"),aJe=o("xlm"),nJe=o(" \u2014 "),_S=a("a"),sJe=o("XLMConfig"),lJe=o(" (XLM model)"),iJe=l(),fg=a("li"),mre=a("strong"),dJe=o("xlm-prophetnet"),cJe=o(" \u2014 "),bS=a("a"),fJe=o("XLMProphetNetConfig"),mJe=o(" (XLMProphetNet model)"),gJe=l(),mg=a("li"),gre=a("strong"),hJe=o("xlm-roberta"),pJe=o(" \u2014 "),vS=a("a"),uJe=o("XLMRobertaConfig"),_Je=o(" (XLM-RoBERTa model)"),bJe=l(),gg=a("li"),hre=a("strong"),vJe=o("xlm-roberta-xl"),FJe=o(" \u2014 "),FS=a("a"),TJe=o("XLMRobertaXLConfig"),MJe=o(" (XLM-RoBERTa-XL model)"),EJe=l(),hg=a("li"),pre=a("strong"),CJe=o("xlnet"),wJe=o(" \u2014 "),TS=a("a"),AJe=o("XLNetConfig"),yJe=o(" (XLNet model)"),LJe=l(),pg=a("li"),ure=a("strong"),xJe=o("yolos"),$Je=o(" \u2014 "),MS=a("a"),kJe=o("YolosConfig"),SJe=o(" (YOLOS model)"),RJe=l(),ug=a("li"),_re=a("strong"),BJe=o("yoso"),PJe=o(" \u2014 "),ES=a("a"),IJe=o("YosoConfig"),qJe=o(" (YOSO model)"),NJe=l(),F(_g.$$.fragment),jJe=l(),bg=a("div"),F(d6.$$.fragment),DJe=l(),bre=a("p"),GJe=o("Register a new configuration for this class."),uIe=l(),_i=a("h2"),vg=a("a"),vre=a("span"),F(c6.$$.fragment),OJe=l(),Fre=a("span"),VJe=o("AutoTokenizer"),_Ie=l(),wo=a("div"),F(f6.$$.fragment),XJe=l(),m6=a("p"),zJe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),CS=a("a"),QJe=o("AutoTokenizer.from_pretrained()"),WJe=o(" class method."),HJe=l(),g6=a("p"),UJe=o("This class cannot be instantiated directly using "),Tre=a("code"),JJe=o("__init__()"),YJe=o(" (throws an error)."),KJe=l(),Cr=a("div"),F(h6.$$.fragment),ZJe=l(),Mre=a("p"),eYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),oYe=l(),Ca=a("p"),rYe=o("The tokenizer class to instantiate is selected based on the "),Ere=a("code"),tYe=o("model_type"),aYe=o(` property of the config object (either
passed as an argument or loaded from `),Cre=a("code"),nYe=o("pretrained_model_name_or_path"),sYe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wre=a("code"),lYe=o("pretrained_model_name_or_path"),iYe=o(":"),dYe=l(),k=a("ul"),kn=a("li"),Are=a("strong"),cYe=o("albert"),fYe=o(" \u2014 "),wS=a("a"),mYe=o("AlbertTokenizer"),gYe=o(" or "),AS=a("a"),hYe=o("AlbertTokenizerFast"),pYe=o(" (ALBERT model)"),uYe=l(),Sn=a("li"),yre=a("strong"),_Ye=o("bart"),bYe=o(" \u2014 "),yS=a("a"),vYe=o("BartTokenizer"),FYe=o(" or "),LS=a("a"),TYe=o("BartTokenizerFast"),MYe=o(" (BART model)"),EYe=l(),Rn=a("li"),Lre=a("strong"),CYe=o("barthez"),wYe=o(" \u2014 "),xS=a("a"),AYe=o("BarthezTokenizer"),yYe=o(" or "),$S=a("a"),LYe=o("BarthezTokenizerFast"),xYe=o(" (BARThez model)"),$Ye=l(),Fg=a("li"),xre=a("strong"),kYe=o("bartpho"),SYe=o(" \u2014 "),kS=a("a"),RYe=o("BartphoTokenizer"),BYe=o(" (BARTpho model)"),PYe=l(),Bn=a("li"),$re=a("strong"),IYe=o("bert"),qYe=o(" \u2014 "),SS=a("a"),NYe=o("BertTokenizer"),jYe=o(" or "),RS=a("a"),DYe=o("BertTokenizerFast"),GYe=o(" (BERT model)"),OYe=l(),Tg=a("li"),kre=a("strong"),VYe=o("bert-generation"),XYe=o(" \u2014 "),BS=a("a"),zYe=o("BertGenerationTokenizer"),QYe=o(" (Bert Generation model)"),WYe=l(),Mg=a("li"),Sre=a("strong"),HYe=o("bert-japanese"),UYe=o(" \u2014 "),PS=a("a"),JYe=o("BertJapaneseTokenizer"),YYe=o(" (BertJapanese model)"),KYe=l(),Eg=a("li"),Rre=a("strong"),ZYe=o("bertweet"),eKe=o(" \u2014 "),IS=a("a"),oKe=o("BertweetTokenizer"),rKe=o(" (Bertweet model)"),tKe=l(),Pn=a("li"),Bre=a("strong"),aKe=o("big_bird"),nKe=o(" \u2014 "),qS=a("a"),sKe=o("BigBirdTokenizer"),lKe=o(" or "),NS=a("a"),iKe=o("BigBirdTokenizerFast"),dKe=o(" (BigBird model)"),cKe=l(),In=a("li"),Pre=a("strong"),fKe=o("bigbird_pegasus"),mKe=o(" \u2014 "),jS=a("a"),gKe=o("PegasusTokenizer"),hKe=o(" or "),DS=a("a"),pKe=o("PegasusTokenizerFast"),uKe=o(" (BigBirdPegasus model)"),_Ke=l(),qn=a("li"),Ire=a("strong"),bKe=o("blenderbot"),vKe=o(" \u2014 "),GS=a("a"),FKe=o("BlenderbotTokenizer"),TKe=o(" or "),OS=a("a"),MKe=o("BlenderbotTokenizerFast"),EKe=o(" (Blenderbot model)"),CKe=l(),Cg=a("li"),qre=a("strong"),wKe=o("blenderbot-small"),AKe=o(" \u2014 "),VS=a("a"),yKe=o("BlenderbotSmallTokenizer"),LKe=o(" (BlenderbotSmall model)"),xKe=l(),wg=a("li"),Nre=a("strong"),$Ke=o("bloom"),kKe=o(" \u2014 "),XS=a("a"),SKe=o("BLOOMTokenizerFast"),RKe=o(" (BLOOM model)"),BKe=l(),Ag=a("li"),jre=a("strong"),PKe=o("byt5"),IKe=o(" \u2014 "),zS=a("a"),qKe=o("ByT5Tokenizer"),NKe=o(" (ByT5 model)"),jKe=l(),Nn=a("li"),Dre=a("strong"),DKe=o("camembert"),GKe=o(" \u2014 "),QS=a("a"),OKe=o("CamembertTokenizer"),VKe=o(" or "),WS=a("a"),XKe=o("CamembertTokenizerFast"),zKe=o(" (CamemBERT model)"),QKe=l(),yg=a("li"),Gre=a("strong"),WKe=o("canine"),HKe=o(" \u2014 "),HS=a("a"),UKe=o("CanineTokenizer"),JKe=o(" (Canine model)"),YKe=l(),jn=a("li"),Ore=a("strong"),KKe=o("clip"),ZKe=o(" \u2014 "),US=a("a"),eZe=o("CLIPTokenizer"),oZe=o(" or "),JS=a("a"),rZe=o("CLIPTokenizerFast"),tZe=o(" (CLIP model)"),aZe=l(),Dn=a("li"),Vre=a("strong"),nZe=o("convbert"),sZe=o(" \u2014 "),YS=a("a"),lZe=o("ConvBertTokenizer"),iZe=o(" or "),KS=a("a"),dZe=o("ConvBertTokenizerFast"),cZe=o(" (ConvBERT model)"),fZe=l(),Gn=a("li"),Xre=a("strong"),mZe=o("cpm"),gZe=o(" \u2014 "),ZS=a("a"),hZe=o("CpmTokenizer"),pZe=o(" or "),eR=a("a"),uZe=o("CpmTokenizerFast"),_Ze=o(" (CPM model)"),bZe=l(),Lg=a("li"),zre=a("strong"),vZe=o("ctrl"),FZe=o(" \u2014 "),oR=a("a"),TZe=o("CTRLTokenizer"),MZe=o(" (CTRL model)"),EZe=l(),On=a("li"),Qre=a("strong"),CZe=o("data2vec-text"),wZe=o(" \u2014 "),rR=a("a"),AZe=o("RobertaTokenizer"),yZe=o(" or "),tR=a("a"),LZe=o("RobertaTokenizerFast"),xZe=o(" (Data2VecText model)"),$Ze=l(),Vn=a("li"),Wre=a("strong"),kZe=o("deberta"),SZe=o(" \u2014 "),aR=a("a"),RZe=o("DebertaTokenizer"),BZe=o(" or "),nR=a("a"),PZe=o("DebertaTokenizerFast"),IZe=o(" (DeBERTa model)"),qZe=l(),Xn=a("li"),Hre=a("strong"),NZe=o("deberta-v2"),jZe=o(" \u2014 "),sR=a("a"),DZe=o("DebertaV2Tokenizer"),GZe=o(" or "),lR=a("a"),OZe=o("DebertaV2TokenizerFast"),VZe=o(" (DeBERTa-v2 model)"),XZe=l(),zn=a("li"),Ure=a("strong"),zZe=o("distilbert"),QZe=o(" \u2014 "),iR=a("a"),WZe=o("DistilBertTokenizer"),HZe=o(" or "),dR=a("a"),UZe=o("DistilBertTokenizerFast"),JZe=o(" (DistilBERT model)"),YZe=l(),Qn=a("li"),Jre=a("strong"),KZe=o("dpr"),ZZe=o(" \u2014 "),cR=a("a"),eeo=o("DPRQuestionEncoderTokenizer"),oeo=o(" or "),fR=a("a"),reo=o("DPRQuestionEncoderTokenizerFast"),teo=o(" (DPR model)"),aeo=l(),Wn=a("li"),Yre=a("strong"),neo=o("electra"),seo=o(" \u2014 "),mR=a("a"),leo=o("ElectraTokenizer"),ieo=o(" or "),gR=a("a"),deo=o("ElectraTokenizerFast"),ceo=o(" (ELECTRA model)"),feo=l(),xg=a("li"),Kre=a("strong"),meo=o("flaubert"),geo=o(" \u2014 "),hR=a("a"),heo=o("FlaubertTokenizer"),peo=o(" (FlauBERT model)"),ueo=l(),Hn=a("li"),Zre=a("strong"),_eo=o("fnet"),beo=o(" \u2014 "),pR=a("a"),veo=o("FNetTokenizer"),Feo=o(" or "),uR=a("a"),Teo=o("FNetTokenizerFast"),Meo=o(" (FNet model)"),Eeo=l(),$g=a("li"),ete=a("strong"),Ceo=o("fsmt"),weo=o(" \u2014 "),_R=a("a"),Aeo=o("FSMTTokenizer"),yeo=o(" (FairSeq Machine-Translation model)"),Leo=l(),Un=a("li"),ote=a("strong"),xeo=o("funnel"),$eo=o(" \u2014 "),bR=a("a"),keo=o("FunnelTokenizer"),Seo=o(" or "),vR=a("a"),Reo=o("FunnelTokenizerFast"),Beo=o(" (Funnel Transformer model)"),Peo=l(),Jn=a("li"),rte=a("strong"),Ieo=o("gpt2"),qeo=o(" \u2014 "),FR=a("a"),Neo=o("GPT2Tokenizer"),jeo=o(" or "),TR=a("a"),Deo=o("GPT2TokenizerFast"),Geo=o(" (OpenAI GPT-2 model)"),Oeo=l(),Yn=a("li"),tte=a("strong"),Veo=o("gpt_neo"),Xeo=o(" \u2014 "),MR=a("a"),zeo=o("GPT2Tokenizer"),Qeo=o(" or "),ER=a("a"),Weo=o("GPT2TokenizerFast"),Heo=o(" (GPT Neo model)"),Ueo=l(),Kn=a("li"),ate=a("strong"),Jeo=o("gptj"),Yeo=o(" \u2014 "),CR=a("a"),Keo=o("GPT2Tokenizer"),Zeo=o(" or "),wR=a("a"),eoo=o("GPT2TokenizerFast"),ooo=o(" (GPT-J model)"),roo=l(),Zn=a("li"),nte=a("strong"),too=o("herbert"),aoo=o(" \u2014 "),AR=a("a"),noo=o("HerbertTokenizer"),soo=o(" or "),yR=a("a"),loo=o("HerbertTokenizerFast"),ioo=o(" (HerBERT model)"),doo=l(),kg=a("li"),ste=a("strong"),coo=o("hubert"),foo=o(" \u2014 "),LR=a("a"),moo=o("Wav2Vec2CTCTokenizer"),goo=o(" (Hubert model)"),hoo=l(),es=a("li"),lte=a("strong"),poo=o("ibert"),uoo=o(" \u2014 "),xR=a("a"),_oo=o("RobertaTokenizer"),boo=o(" or "),$R=a("a"),voo=o("RobertaTokenizerFast"),Foo=o(" (I-BERT model)"),Too=l(),os=a("li"),ite=a("strong"),Moo=o("layoutlm"),Eoo=o(" \u2014 "),kR=a("a"),Coo=o("LayoutLMTokenizer"),woo=o(" or "),SR=a("a"),Aoo=o("LayoutLMTokenizerFast"),yoo=o(" (LayoutLM model)"),Loo=l(),rs=a("li"),dte=a("strong"),xoo=o("layoutlmv2"),$oo=o(" \u2014 "),RR=a("a"),koo=o("LayoutLMv2Tokenizer"),Soo=o(" or "),BR=a("a"),Roo=o("LayoutLMv2TokenizerFast"),Boo=o(" (LayoutLMv2 model)"),Poo=l(),ts=a("li"),cte=a("strong"),Ioo=o("layoutxlm"),qoo=o(" \u2014 "),PR=a("a"),Noo=o("LayoutXLMTokenizer"),joo=o(" or "),IR=a("a"),Doo=o("LayoutXLMTokenizerFast"),Goo=o(" (LayoutXLM model)"),Ooo=l(),as=a("li"),fte=a("strong"),Voo=o("led"),Xoo=o(" \u2014 "),qR=a("a"),zoo=o("LEDTokenizer"),Qoo=o(" or "),NR=a("a"),Woo=o("LEDTokenizerFast"),Hoo=o(" (LED model)"),Uoo=l(),ns=a("li"),mte=a("strong"),Joo=o("longformer"),Yoo=o(" \u2014 "),jR=a("a"),Koo=o("LongformerTokenizer"),Zoo=o(" or "),DR=a("a"),ero=o("LongformerTokenizerFast"),oro=o(" (Longformer model)"),rro=l(),Sg=a("li"),gte=a("strong"),tro=o("luke"),aro=o(" \u2014 "),GR=a("a"),nro=o("LukeTokenizer"),sro=o(" (LUKE model)"),lro=l(),ss=a("li"),hte=a("strong"),iro=o("lxmert"),dro=o(" \u2014 "),OR=a("a"),cro=o("LxmertTokenizer"),fro=o(" or "),VR=a("a"),mro=o("LxmertTokenizerFast"),gro=o(" (LXMERT model)"),hro=l(),Rg=a("li"),pte=a("strong"),pro=o("m2m_100"),uro=o(" \u2014 "),XR=a("a"),_ro=o("M2M100Tokenizer"),bro=o(" (M2M100 model)"),vro=l(),Bg=a("li"),ute=a("strong"),Fro=o("marian"),Tro=o(" \u2014 "),zR=a("a"),Mro=o("MarianTokenizer"),Ero=o(" (Marian model)"),Cro=l(),ls=a("li"),_te=a("strong"),wro=o("mbart"),Aro=o(" \u2014 "),QR=a("a"),yro=o("MBartTokenizer"),Lro=o(" or "),WR=a("a"),xro=o("MBartTokenizerFast"),$ro=o(" (mBART model)"),kro=l(),is=a("li"),bte=a("strong"),Sro=o("mbart50"),Rro=o(" \u2014 "),HR=a("a"),Bro=o("MBart50Tokenizer"),Pro=o(" or "),UR=a("a"),Iro=o("MBart50TokenizerFast"),qro=o(" (mBART-50 model)"),Nro=l(),ds=a("li"),vte=a("strong"),jro=o("megatron-bert"),Dro=o(" \u2014 "),JR=a("a"),Gro=o("BertTokenizer"),Oro=o(" or "),YR=a("a"),Vro=o("BertTokenizerFast"),Xro=o(" (MegatronBert model)"),zro=l(),Pg=a("li"),Fte=a("strong"),Qro=o("mluke"),Wro=o(" \u2014 "),KR=a("a"),Hro=o("MLukeTokenizer"),Uro=o(" (mLUKE model)"),Jro=l(),cs=a("li"),Tte=a("strong"),Yro=o("mobilebert"),Kro=o(" \u2014 "),ZR=a("a"),Zro=o("MobileBertTokenizer"),eto=o(" or "),eB=a("a"),oto=o("MobileBertTokenizerFast"),rto=o(" (MobileBERT model)"),tto=l(),fs=a("li"),Mte=a("strong"),ato=o("mpnet"),nto=o(" \u2014 "),oB=a("a"),sto=o("MPNetTokenizer"),lto=o(" or "),rB=a("a"),ito=o("MPNetTokenizerFast"),dto=o(" (MPNet model)"),cto=l(),ms=a("li"),Ete=a("strong"),fto=o("mt5"),mto=o(" \u2014 "),tB=a("a"),gto=o("MT5Tokenizer"),hto=o(" or "),aB=a("a"),pto=o("MT5TokenizerFast"),uto=o(" (mT5 model)"),_to=l(),gs=a("li"),Cte=a("strong"),bto=o("nystromformer"),vto=o(" \u2014 "),nB=a("a"),Fto=o("AlbertTokenizer"),Tto=o(" or "),sB=a("a"),Mto=o("AlbertTokenizerFast"),Eto=o(" (Nystromformer model)"),Cto=l(),hs=a("li"),wte=a("strong"),wto=o("openai-gpt"),Ato=o(" \u2014 "),lB=a("a"),yto=o("OpenAIGPTTokenizer"),Lto=o(" or "),iB=a("a"),xto=o("OpenAIGPTTokenizerFast"),$to=o(" (OpenAI GPT model)"),kto=l(),Ig=a("li"),Ate=a("strong"),Sto=o("opt"),Rto=o(" \u2014 "),dB=a("a"),Bto=o("GPT2Tokenizer"),Pto=o(" (OPT model)"),Ito=l(),ps=a("li"),yte=a("strong"),qto=o("pegasus"),Nto=o(" \u2014 "),cB=a("a"),jto=o("PegasusTokenizer"),Dto=o(" or "),fB=a("a"),Gto=o("PegasusTokenizerFast"),Oto=o(" (Pegasus model)"),Vto=l(),qg=a("li"),Lte=a("strong"),Xto=o("perceiver"),zto=o(" \u2014 "),mB=a("a"),Qto=o("PerceiverTokenizer"),Wto=o(" (Perceiver model)"),Hto=l(),Ng=a("li"),xte=a("strong"),Uto=o("phobert"),Jto=o(" \u2014 "),gB=a("a"),Yto=o("PhobertTokenizer"),Kto=o(" (PhoBERT model)"),Zto=l(),jg=a("li"),$te=a("strong"),eao=o("plbart"),oao=o(" \u2014 "),hB=a("a"),rao=o("PLBartTokenizer"),tao=o(" (PLBart model)"),aao=l(),Dg=a("li"),kte=a("strong"),nao=o("prophetnet"),sao=o(" \u2014 "),pB=a("a"),lao=o("ProphetNetTokenizer"),iao=o(" (ProphetNet model)"),dao=l(),us=a("li"),Ste=a("strong"),cao=o("qdqbert"),fao=o(" \u2014 "),uB=a("a"),mao=o("BertTokenizer"),gao=o(" or "),_B=a("a"),hao=o("BertTokenizerFast"),pao=o(" (QDQBert model)"),uao=l(),Gg=a("li"),Rte=a("strong"),_ao=o("rag"),bao=o(" \u2014 "),bB=a("a"),vao=o("RagTokenizer"),Fao=o(" (RAG model)"),Tao=l(),_s=a("li"),Bte=a("strong"),Mao=o("realm"),Eao=o(" \u2014 "),vB=a("a"),Cao=o("RealmTokenizer"),wao=o(" or "),FB=a("a"),Aao=o("RealmTokenizerFast"),yao=o(" (Realm model)"),Lao=l(),bs=a("li"),Pte=a("strong"),xao=o("reformer"),$ao=o(" \u2014 "),TB=a("a"),kao=o("ReformerTokenizer"),Sao=o(" or "),MB=a("a"),Rao=o("ReformerTokenizerFast"),Bao=o(" (Reformer model)"),Pao=l(),vs=a("li"),Ite=a("strong"),Iao=o("rembert"),qao=o(" \u2014 "),EB=a("a"),Nao=o("RemBertTokenizer"),jao=o(" or "),CB=a("a"),Dao=o("RemBertTokenizerFast"),Gao=o(" (RemBERT model)"),Oao=l(),Fs=a("li"),qte=a("strong"),Vao=o("retribert"),Xao=o(" \u2014 "),wB=a("a"),zao=o("RetriBertTokenizer"),Qao=o(" or "),AB=a("a"),Wao=o("RetriBertTokenizerFast"),Hao=o(" (RetriBERT model)"),Uao=l(),Ts=a("li"),Nte=a("strong"),Jao=o("roberta"),Yao=o(" \u2014 "),yB=a("a"),Kao=o("RobertaTokenizer"),Zao=o(" or "),LB=a("a"),eno=o("RobertaTokenizerFast"),ono=o(" (RoBERTa model)"),rno=l(),Ms=a("li"),jte=a("strong"),tno=o("roformer"),ano=o(" \u2014 "),xB=a("a"),nno=o("RoFormerTokenizer"),sno=o(" or "),$B=a("a"),lno=o("RoFormerTokenizerFast"),ino=o(" (RoFormer model)"),dno=l(),Og=a("li"),Dte=a("strong"),cno=o("speech_to_text"),fno=o(" \u2014 "),kB=a("a"),mno=o("Speech2TextTokenizer"),gno=o(" (Speech2Text model)"),hno=l(),Vg=a("li"),Gte=a("strong"),pno=o("speech_to_text_2"),uno=o(" \u2014 "),SB=a("a"),_no=o("Speech2Text2Tokenizer"),bno=o(" (Speech2Text2 model)"),vno=l(),Es=a("li"),Ote=a("strong"),Fno=o("splinter"),Tno=o(" \u2014 "),RB=a("a"),Mno=o("SplinterTokenizer"),Eno=o(" or "),BB=a("a"),Cno=o("SplinterTokenizerFast"),wno=o(" (Splinter model)"),Ano=l(),Cs=a("li"),Vte=a("strong"),yno=o("squeezebert"),Lno=o(" \u2014 "),PB=a("a"),xno=o("SqueezeBertTokenizer"),$no=o(" or "),IB=a("a"),kno=o("SqueezeBertTokenizerFast"),Sno=o(" (SqueezeBERT model)"),Rno=l(),ws=a("li"),Xte=a("strong"),Bno=o("t5"),Pno=o(" \u2014 "),qB=a("a"),Ino=o("T5Tokenizer"),qno=o(" or "),NB=a("a"),Nno=o("T5TokenizerFast"),jno=o(" (T5 model)"),Dno=l(),Xg=a("li"),zte=a("strong"),Gno=o("tapas"),Ono=o(" \u2014 "),jB=a("a"),Vno=o("TapasTokenizer"),Xno=o(" (TAPAS model)"),zno=l(),zg=a("li"),Qte=a("strong"),Qno=o("tapex"),Wno=o(" \u2014 "),DB=a("a"),Hno=o("TapexTokenizer"),Uno=o(" (TAPEX model)"),Jno=l(),Qg=a("li"),Wte=a("strong"),Yno=o("transfo-xl"),Kno=o(" \u2014 "),GB=a("a"),Zno=o("TransfoXLTokenizer"),eso=o(" (Transformer-XL model)"),oso=l(),As=a("li"),Hte=a("strong"),rso=o("visual_bert"),tso=o(" \u2014 "),OB=a("a"),aso=o("BertTokenizer"),nso=o(" or "),VB=a("a"),sso=o("BertTokenizerFast"),lso=o(" (VisualBert model)"),iso=l(),Wg=a("li"),Ute=a("strong"),dso=o("wav2vec2"),cso=o(" \u2014 "),XB=a("a"),fso=o("Wav2Vec2CTCTokenizer"),mso=o(" (Wav2Vec2 model)"),gso=l(),Hg=a("li"),Jte=a("strong"),hso=o("wav2vec2_phoneme"),pso=o(" \u2014 "),zB=a("a"),uso=o("Wav2Vec2PhonemeCTCTokenizer"),_so=o(" (Wav2Vec2Phoneme model)"),bso=l(),ys=a("li"),Yte=a("strong"),vso=o("xglm"),Fso=o(" \u2014 "),QB=a("a"),Tso=o("XGLMTokenizer"),Mso=o(" or "),WB=a("a"),Eso=o("XGLMTokenizerFast"),Cso=o(" (XGLM model)"),wso=l(),Ug=a("li"),Kte=a("strong"),Aso=o("xlm"),yso=o(" \u2014 "),HB=a("a"),Lso=o("XLMTokenizer"),xso=o(" (XLM model)"),$so=l(),Jg=a("li"),Zte=a("strong"),kso=o("xlm-prophetnet"),Sso=o(" \u2014 "),UB=a("a"),Rso=o("XLMProphetNetTokenizer"),Bso=o(" (XLMProphetNet model)"),Pso=l(),Ls=a("li"),eae=a("strong"),Iso=o("xlm-roberta"),qso=o(" \u2014 "),JB=a("a"),Nso=o("XLMRobertaTokenizer"),jso=o(" or "),YB=a("a"),Dso=o("XLMRobertaTokenizerFast"),Gso=o(" (XLM-RoBERTa model)"),Oso=l(),xs=a("li"),oae=a("strong"),Vso=o("xlm-roberta-xl"),Xso=o(" \u2014 "),KB=a("a"),zso=o("RobertaTokenizer"),Qso=o(" or "),ZB=a("a"),Wso=o("RobertaTokenizerFast"),Hso=o(" (XLM-RoBERTa-XL model)"),Uso=l(),$s=a("li"),rae=a("strong"),Jso=o("xlnet"),Yso=o(" \u2014 "),eP=a("a"),Kso=o("XLNetTokenizer"),Zso=o(" or "),oP=a("a"),elo=o("XLNetTokenizerFast"),olo=o(" (XLNet model)"),rlo=l(),ks=a("li"),tae=a("strong"),tlo=o("yoso"),alo=o(" \u2014 "),rP=a("a"),nlo=o("AlbertTokenizer"),slo=o(" or "),tP=a("a"),llo=o("AlbertTokenizerFast"),ilo=o(" (YOSO model)"),dlo=l(),F(Yg.$$.fragment),clo=l(),Kg=a("div"),F(p6.$$.fragment),flo=l(),aae=a("p"),mlo=o("Register a new tokenizer in this mapping."),bIe=l(),bi=a("h2"),Zg=a("a"),nae=a("span"),F(u6.$$.fragment),glo=l(),sae=a("span"),hlo=o("AutoFeatureExtractor"),vIe=l(),Ao=a("div"),F(_6.$$.fragment),plo=l(),b6=a("p"),ulo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),aP=a("a"),_lo=o("AutoFeatureExtractor.from_pretrained()"),blo=o(" class method."),vlo=l(),v6=a("p"),Flo=o("This class cannot be instantiated directly using "),lae=a("code"),Tlo=o("__init__()"),Mlo=o(" (throws an error)."),Elo=l(),Qe=a("div"),F(F6.$$.fragment),Clo=l(),iae=a("p"),wlo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Alo=l(),wa=a("p"),ylo=o("The feature extractor class to instantiate is selected based on the "),dae=a("code"),Llo=o("model_type"),xlo=o(` property of the config object
(either passed as an argument or loaded from `),cae=a("code"),$lo=o("pretrained_model_name_or_path"),klo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),fae=a("code"),Slo=o("pretrained_model_name_or_path"),Rlo=o(":"),Blo=l(),oe=a("ul"),eh=a("li"),mae=a("strong"),Plo=o("beit"),Ilo=o(" \u2014 "),nP=a("a"),qlo=o("BeitFeatureExtractor"),Nlo=o(" (BEiT model)"),jlo=l(),oh=a("li"),gae=a("strong"),Dlo=o("clip"),Glo=o(" \u2014 "),sP=a("a"),Olo=o("CLIPFeatureExtractor"),Vlo=o(" (CLIP model)"),Xlo=l(),rh=a("li"),hae=a("strong"),zlo=o("convnext"),Qlo=o(" \u2014 "),lP=a("a"),Wlo=o("ConvNextFeatureExtractor"),Hlo=o(" (ConvNext model)"),Ulo=l(),th=a("li"),pae=a("strong"),Jlo=o("data2vec-audio"),Ylo=o(" \u2014 "),iP=a("a"),Klo=o("Wav2Vec2FeatureExtractor"),Zlo=o(" (Data2VecAudio model)"),eio=l(),ah=a("li"),uae=a("strong"),oio=o("data2vec-vision"),rio=o(" \u2014 "),dP=a("a"),tio=o("BeitFeatureExtractor"),aio=o(" (Data2VecVision model)"),nio=l(),nh=a("li"),_ae=a("strong"),sio=o("deit"),lio=o(" \u2014 "),cP=a("a"),iio=o("DeiTFeatureExtractor"),dio=o(" (DeiT model)"),cio=l(),sh=a("li"),bae=a("strong"),fio=o("detr"),mio=o(" \u2014 "),fP=a("a"),gio=o("DetrFeatureExtractor"),hio=o(" (DETR model)"),pio=l(),lh=a("li"),vae=a("strong"),uio=o("dpt"),_io=o(" \u2014 "),mP=a("a"),bio=o("DPTFeatureExtractor"),vio=o(" (DPT model)"),Fio=l(),ih=a("li"),Fae=a("strong"),Tio=o("flava"),Mio=o(" \u2014 "),gP=a("a"),Eio=o("FlavaFeatureExtractor"),Cio=o(" (Flava model)"),wio=l(),dh=a("li"),Tae=a("strong"),Aio=o("glpn"),yio=o(" \u2014 "),hP=a("a"),Lio=o("GLPNFeatureExtractor"),xio=o(" (GLPN model)"),$io=l(),ch=a("li"),Mae=a("strong"),kio=o("hubert"),Sio=o(" \u2014 "),pP=a("a"),Rio=o("Wav2Vec2FeatureExtractor"),Bio=o(" (Hubert model)"),Pio=l(),fh=a("li"),Eae=a("strong"),Iio=o("layoutlmv2"),qio=o(" \u2014 "),uP=a("a"),Nio=o("LayoutLMv2FeatureExtractor"),jio=o(" (LayoutLMv2 model)"),Dio=l(),mh=a("li"),Cae=a("strong"),Gio=o("maskformer"),Oio=o(" \u2014 "),_P=a("a"),Vio=o("MaskFormerFeatureExtractor"),Xio=o(" (MaskFormer model)"),zio=l(),gh=a("li"),wae=a("strong"),Qio=o("perceiver"),Wio=o(" \u2014 "),bP=a("a"),Hio=o("PerceiverFeatureExtractor"),Uio=o(" (Perceiver model)"),Jio=l(),hh=a("li"),Aae=a("strong"),Yio=o("poolformer"),Kio=o(" \u2014 "),vP=a("a"),Zio=o("PoolFormerFeatureExtractor"),edo=o(" (PoolFormer model)"),odo=l(),ph=a("li"),yae=a("strong"),rdo=o("regnet"),tdo=o(" \u2014 "),FP=a("a"),ado=o("ConvNextFeatureExtractor"),ndo=o(" (RegNet model)"),sdo=l(),uh=a("li"),Lae=a("strong"),ldo=o("resnet"),ido=o(" \u2014 "),TP=a("a"),ddo=o("ConvNextFeatureExtractor"),cdo=o(" (ResNet model)"),fdo=l(),_h=a("li"),xae=a("strong"),mdo=o("segformer"),gdo=o(" \u2014 "),MP=a("a"),hdo=o("SegformerFeatureExtractor"),pdo=o(" (SegFormer model)"),udo=l(),bh=a("li"),$ae=a("strong"),_do=o("speech_to_text"),bdo=o(" \u2014 "),EP=a("a"),vdo=o("Speech2TextFeatureExtractor"),Fdo=o(" (Speech2Text model)"),Tdo=l(),vh=a("li"),kae=a("strong"),Mdo=o("swin"),Edo=o(" \u2014 "),CP=a("a"),Cdo=o("ViTFeatureExtractor"),wdo=o(" (Swin model)"),Ado=l(),Fh=a("li"),Sae=a("strong"),ydo=o("van"),Ldo=o(" \u2014 "),wP=a("a"),xdo=o("ConvNextFeatureExtractor"),$do=o(" (VAN model)"),kdo=l(),Th=a("li"),Rae=a("strong"),Sdo=o("vit"),Rdo=o(" \u2014 "),AP=a("a"),Bdo=o("ViTFeatureExtractor"),Pdo=o(" (ViT model)"),Ido=l(),Mh=a("li"),Bae=a("strong"),qdo=o("vit_mae"),Ndo=o(" \u2014 "),yP=a("a"),jdo=o("ViTFeatureExtractor"),Ddo=o(" (ViTMAE model)"),Gdo=l(),Eh=a("li"),Pae=a("strong"),Odo=o("wav2vec2"),Vdo=o(" \u2014 "),LP=a("a"),Xdo=o("Wav2Vec2FeatureExtractor"),zdo=o(" (Wav2Vec2 model)"),Qdo=l(),Ch=a("li"),Iae=a("strong"),Wdo=o("yolos"),Hdo=o(" \u2014 "),xP=a("a"),Udo=o("YolosFeatureExtractor"),Jdo=o(" (YOLOS model)"),Ydo=l(),F(wh.$$.fragment),Kdo=l(),F(Ah.$$.fragment),Zdo=l(),yh=a("div"),F(T6.$$.fragment),eco=l(),qae=a("p"),oco=o("Register a new feature extractor for this class."),FIe=l(),vi=a("h2"),Lh=a("a"),Nae=a("span"),F(M6.$$.fragment),rco=l(),jae=a("span"),tco=o("AutoProcessor"),TIe=l(),yo=a("div"),F(E6.$$.fragment),aco=l(),C6=a("p"),nco=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$P=a("a"),sco=o("AutoProcessor.from_pretrained()"),lco=o(" class method."),ico=l(),w6=a("p"),dco=o("This class cannot be instantiated directly using "),Dae=a("code"),cco=o("__init__()"),fco=o(" (throws an error)."),mco=l(),We=a("div"),F(A6.$$.fragment),gco=l(),Gae=a("p"),hco=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),pco=l(),Fi=a("p"),uco=o("The processor class to instantiate is selected based on the "),Oae=a("code"),_co=o("model_type"),bco=o(` property of the config object (either
passed as an argument or loaded from `),Vae=a("code"),vco=o("pretrained_model_name_or_path"),Fco=o(" if possible):"),Tco=l(),be=a("ul"),xh=a("li"),Xae=a("strong"),Mco=o("clip"),Eco=o(" \u2014 "),kP=a("a"),Cco=o("CLIPProcessor"),wco=o(" (CLIP model)"),Aco=l(),$h=a("li"),zae=a("strong"),yco=o("flava"),Lco=o(" \u2014 "),Qae=a("code"),xco=o("FLAVAProcessor"),$co=o(" (Flava model)"),kco=l(),kh=a("li"),Wae=a("strong"),Sco=o("layoutlmv2"),Rco=o(" \u2014 "),SP=a("a"),Bco=o("LayoutLMv2Processor"),Pco=o(" (LayoutLMv2 model)"),Ico=l(),Sh=a("li"),Hae=a("strong"),qco=o("layoutxlm"),Nco=o(" \u2014 "),RP=a("a"),jco=o("LayoutXLMProcessor"),Dco=o(" (LayoutXLM model)"),Gco=l(),Rh=a("li"),Uae=a("strong"),Oco=o("sew"),Vco=o(" \u2014 "),BP=a("a"),Xco=o("Wav2Vec2Processor"),zco=o(" (SEW model)"),Qco=l(),Bh=a("li"),Jae=a("strong"),Wco=o("sew-d"),Hco=o(" \u2014 "),PP=a("a"),Uco=o("Wav2Vec2Processor"),Jco=o(" (SEW-D model)"),Yco=l(),Ph=a("li"),Yae=a("strong"),Kco=o("speech_to_text"),Zco=o(" \u2014 "),IP=a("a"),efo=o("Speech2TextProcessor"),ofo=o(" (Speech2Text model)"),rfo=l(),Ih=a("li"),Kae=a("strong"),tfo=o("speech_to_text_2"),afo=o(" \u2014 "),qP=a("a"),nfo=o("Speech2Text2Processor"),sfo=o(" (Speech2Text2 model)"),lfo=l(),qh=a("li"),Zae=a("strong"),ifo=o("trocr"),dfo=o(" \u2014 "),NP=a("a"),cfo=o("TrOCRProcessor"),ffo=o(" (TrOCR model)"),mfo=l(),Nh=a("li"),ene=a("strong"),gfo=o("unispeech"),hfo=o(" \u2014 "),jP=a("a"),pfo=o("Wav2Vec2Processor"),ufo=o(" (UniSpeech model)"),_fo=l(),jh=a("li"),one=a("strong"),bfo=o("unispeech-sat"),vfo=o(" \u2014 "),DP=a("a"),Ffo=o("Wav2Vec2Processor"),Tfo=o(" (UniSpeechSat model)"),Mfo=l(),Dh=a("li"),rne=a("strong"),Efo=o("vilt"),Cfo=o(" \u2014 "),GP=a("a"),wfo=o("ViltProcessor"),Afo=o(" (ViLT model)"),yfo=l(),Gh=a("li"),tne=a("strong"),Lfo=o("vision-text-dual-encoder"),xfo=o(" \u2014 "),OP=a("a"),$fo=o("VisionTextDualEncoderProcessor"),kfo=o(" (VisionTextDualEncoder model)"),Sfo=l(),Oh=a("li"),ane=a("strong"),Rfo=o("wav2vec2"),Bfo=o(" \u2014 "),VP=a("a"),Pfo=o("Wav2Vec2Processor"),Ifo=o(" (Wav2Vec2 model)"),qfo=l(),Vh=a("li"),nne=a("strong"),Nfo=o("wavlm"),jfo=o(" \u2014 "),XP=a("a"),Dfo=o("Wav2Vec2Processor"),Gfo=o(" (WavLM model)"),Ofo=l(),F(Xh.$$.fragment),Vfo=l(),F(zh.$$.fragment),Xfo=l(),Qh=a("div"),F(y6.$$.fragment),zfo=l(),sne=a("p"),Qfo=o("Register a new processor for this class."),MIe=l(),Ti=a("h2"),Wh=a("a"),lne=a("span"),F(L6.$$.fragment),Wfo=l(),ine=a("span"),Hfo=o("AutoModel"),EIe=l(),Lo=a("div"),F(x6.$$.fragment),Ufo=l(),Mi=a("p"),Jfo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zP=a("a"),Yfo=o("from_pretrained()"),Kfo=o(" class method or the "),QP=a("a"),Zfo=o("from_config()"),emo=o(` class
method.`),omo=l(),$6=a("p"),rmo=o("This class cannot be instantiated directly using "),dne=a("code"),tmo=o("__init__()"),amo=o(" (throws an error)."),nmo=l(),ot=a("div"),F(k6.$$.fragment),smo=l(),cne=a("p"),lmo=o("Instantiates one of the base model classes of the library from a configuration."),imo=l(),Ei=a("p"),dmo=o(`Note:
Loading a model from its configuration file does `),fne=a("strong"),cmo=o("not"),fmo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WP=a("a"),mmo=o("from_pretrained()"),gmo=o(" to load the model weights."),hmo=l(),F(Hh.$$.fragment),pmo=l(),He=a("div"),F(S6.$$.fragment),umo=l(),mne=a("p"),_mo=o("Instantiate one of the base model classes of the library from a pretrained model."),bmo=l(),Aa=a("p"),vmo=o("The model class to instantiate is selected based on the "),gne=a("code"),Fmo=o("model_type"),Tmo=o(` property of the config object (either
passed as an argument or loaded from `),hne=a("code"),Mmo=o("pretrained_model_name_or_path"),Emo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pne=a("code"),Cmo=o("pretrained_model_name_or_path"),wmo=o(":"),Amo=l(),x=a("ul"),Uh=a("li"),une=a("strong"),ymo=o("albert"),Lmo=o(" \u2014 "),HP=a("a"),xmo=o("AlbertModel"),$mo=o(" (ALBERT model)"),kmo=l(),Jh=a("li"),_ne=a("strong"),Smo=o("bart"),Rmo=o(" \u2014 "),UP=a("a"),Bmo=o("BartModel"),Pmo=o(" (BART model)"),Imo=l(),Yh=a("li"),bne=a("strong"),qmo=o("beit"),Nmo=o(" \u2014 "),JP=a("a"),jmo=o("BeitModel"),Dmo=o(" (BEiT model)"),Gmo=l(),Kh=a("li"),vne=a("strong"),Omo=o("bert"),Vmo=o(" \u2014 "),YP=a("a"),Xmo=o("BertModel"),zmo=o(" (BERT model)"),Qmo=l(),Zh=a("li"),Fne=a("strong"),Wmo=o("bert-generation"),Hmo=o(" \u2014 "),KP=a("a"),Umo=o("BertGenerationEncoder"),Jmo=o(" (Bert Generation model)"),Ymo=l(),ep=a("li"),Tne=a("strong"),Kmo=o("big_bird"),Zmo=o(" \u2014 "),ZP=a("a"),ego=o("BigBirdModel"),ogo=o(" (BigBird model)"),rgo=l(),op=a("li"),Mne=a("strong"),tgo=o("bigbird_pegasus"),ago=o(" \u2014 "),eI=a("a"),ngo=o("BigBirdPegasusModel"),sgo=o(" (BigBirdPegasus model)"),lgo=l(),rp=a("li"),Ene=a("strong"),igo=o("blenderbot"),dgo=o(" \u2014 "),oI=a("a"),cgo=o("BlenderbotModel"),fgo=o(" (Blenderbot model)"),mgo=l(),tp=a("li"),Cne=a("strong"),ggo=o("blenderbot-small"),hgo=o(" \u2014 "),rI=a("a"),pgo=o("BlenderbotSmallModel"),ugo=o(" (BlenderbotSmall model)"),_go=l(),ap=a("li"),wne=a("strong"),bgo=o("bloom"),vgo=o(" \u2014 "),tI=a("a"),Fgo=o("BLOOMModel"),Tgo=o(" (BLOOM model)"),Mgo=l(),np=a("li"),Ane=a("strong"),Ego=o("camembert"),Cgo=o(" \u2014 "),aI=a("a"),wgo=o("CamembertModel"),Ago=o(" (CamemBERT model)"),ygo=l(),sp=a("li"),yne=a("strong"),Lgo=o("canine"),xgo=o(" \u2014 "),nI=a("a"),$go=o("CanineModel"),kgo=o(" (Canine model)"),Sgo=l(),lp=a("li"),Lne=a("strong"),Rgo=o("clip"),Bgo=o(" \u2014 "),sI=a("a"),Pgo=o("CLIPModel"),Igo=o(" (CLIP model)"),qgo=l(),ip=a("li"),xne=a("strong"),Ngo=o("convbert"),jgo=o(" \u2014 "),lI=a("a"),Dgo=o("ConvBertModel"),Ggo=o(" (ConvBERT model)"),Ogo=l(),dp=a("li"),$ne=a("strong"),Vgo=o("convnext"),Xgo=o(" \u2014 "),iI=a("a"),zgo=o("ConvNextModel"),Qgo=o(" (ConvNext model)"),Wgo=l(),cp=a("li"),kne=a("strong"),Hgo=o("ctrl"),Ugo=o(" \u2014 "),dI=a("a"),Jgo=o("CTRLModel"),Ygo=o(" (CTRL model)"),Kgo=l(),fp=a("li"),Sne=a("strong"),Zgo=o("data2vec-audio"),eho=o(" \u2014 "),cI=a("a"),oho=o("Data2VecAudioModel"),rho=o(" (Data2VecAudio model)"),tho=l(),mp=a("li"),Rne=a("strong"),aho=o("data2vec-text"),nho=o(" \u2014 "),fI=a("a"),sho=o("Data2VecTextModel"),lho=o(" (Data2VecText model)"),iho=l(),gp=a("li"),Bne=a("strong"),dho=o("data2vec-vision"),cho=o(" \u2014 "),mI=a("a"),fho=o("Data2VecVisionModel"),mho=o(" (Data2VecVision model)"),gho=l(),hp=a("li"),Pne=a("strong"),hho=o("deberta"),pho=o(" \u2014 "),gI=a("a"),uho=o("DebertaModel"),_ho=o(" (DeBERTa model)"),bho=l(),pp=a("li"),Ine=a("strong"),vho=o("deberta-v2"),Fho=o(" \u2014 "),hI=a("a"),Tho=o("DebertaV2Model"),Mho=o(" (DeBERTa-v2 model)"),Eho=l(),up=a("li"),qne=a("strong"),Cho=o("decision_transformer"),who=o(" \u2014 "),pI=a("a"),Aho=o("DecisionTransformerModel"),yho=o(" (Decision Transformer model)"),Lho=l(),_p=a("li"),Nne=a("strong"),xho=o("deit"),$ho=o(" \u2014 "),uI=a("a"),kho=o("DeiTModel"),Sho=o(" (DeiT model)"),Rho=l(),bp=a("li"),jne=a("strong"),Bho=o("detr"),Pho=o(" \u2014 "),_I=a("a"),Iho=o("DetrModel"),qho=o(" (DETR model)"),Nho=l(),vp=a("li"),Dne=a("strong"),jho=o("distilbert"),Dho=o(" \u2014 "),bI=a("a"),Gho=o("DistilBertModel"),Oho=o(" (DistilBERT model)"),Vho=l(),Fp=a("li"),Gne=a("strong"),Xho=o("dpr"),zho=o(" \u2014 "),vI=a("a"),Qho=o("DPRQuestionEncoder"),Who=o(" (DPR model)"),Hho=l(),Tp=a("li"),One=a("strong"),Uho=o("dpt"),Jho=o(" \u2014 "),FI=a("a"),Yho=o("DPTModel"),Kho=o(" (DPT model)"),Zho=l(),Mp=a("li"),Vne=a("strong"),epo=o("electra"),opo=o(" \u2014 "),TI=a("a"),rpo=o("ElectraModel"),tpo=o(" (ELECTRA model)"),apo=l(),Ep=a("li"),Xne=a("strong"),npo=o("flaubert"),spo=o(" \u2014 "),MI=a("a"),lpo=o("FlaubertModel"),ipo=o(" (FlauBERT model)"),dpo=l(),Cp=a("li"),zne=a("strong"),cpo=o("flava"),fpo=o(" \u2014 "),EI=a("a"),mpo=o("FlavaModel"),gpo=o(" (Flava model)"),hpo=l(),wp=a("li"),Qne=a("strong"),ppo=o("fnet"),upo=o(" \u2014 "),CI=a("a"),_po=o("FNetModel"),bpo=o(" (FNet model)"),vpo=l(),Ap=a("li"),Wne=a("strong"),Fpo=o("fsmt"),Tpo=o(" \u2014 "),wI=a("a"),Mpo=o("FSMTModel"),Epo=o(" (FairSeq Machine-Translation model)"),Cpo=l(),Ss=a("li"),Hne=a("strong"),wpo=o("funnel"),Apo=o(" \u2014 "),AI=a("a"),ypo=o("FunnelModel"),Lpo=o(" or "),yI=a("a"),xpo=o("FunnelBaseModel"),$po=o(" (Funnel Transformer model)"),kpo=l(),yp=a("li"),Une=a("strong"),Spo=o("glpn"),Rpo=o(" \u2014 "),LI=a("a"),Bpo=o("GLPNModel"),Ppo=o(" (GLPN model)"),Ipo=l(),Lp=a("li"),Jne=a("strong"),qpo=o("gpt2"),Npo=o(" \u2014 "),xI=a("a"),jpo=o("GPT2Model"),Dpo=o(" (OpenAI GPT-2 model)"),Gpo=l(),xp=a("li"),Yne=a("strong"),Opo=o("gpt_neo"),Vpo=o(" \u2014 "),$I=a("a"),Xpo=o("GPTNeoModel"),zpo=o(" (GPT Neo model)"),Qpo=l(),$p=a("li"),Kne=a("strong"),Wpo=o("gptj"),Hpo=o(" \u2014 "),kI=a("a"),Upo=o("GPTJModel"),Jpo=o(" (GPT-J model)"),Ypo=l(),kp=a("li"),Zne=a("strong"),Kpo=o("hubert"),Zpo=o(" \u2014 "),SI=a("a"),euo=o("HubertModel"),ouo=o(" (Hubert model)"),ruo=l(),Sp=a("li"),ese=a("strong"),tuo=o("ibert"),auo=o(" \u2014 "),RI=a("a"),nuo=o("IBertModel"),suo=o(" (I-BERT model)"),luo=l(),Rp=a("li"),ose=a("strong"),iuo=o("imagegpt"),duo=o(" \u2014 "),BI=a("a"),cuo=o("ImageGPTModel"),fuo=o(" (ImageGPT model)"),muo=l(),Bp=a("li"),rse=a("strong"),guo=o("layoutlm"),huo=o(" \u2014 "),PI=a("a"),puo=o("LayoutLMModel"),uuo=o(" (LayoutLM model)"),_uo=l(),Pp=a("li"),tse=a("strong"),buo=o("layoutlmv2"),vuo=o(" \u2014 "),II=a("a"),Fuo=o("LayoutLMv2Model"),Tuo=o(" (LayoutLMv2 model)"),Muo=l(),Ip=a("li"),ase=a("strong"),Euo=o("led"),Cuo=o(" \u2014 "),qI=a("a"),wuo=o("LEDModel"),Auo=o(" (LED model)"),yuo=l(),qp=a("li"),nse=a("strong"),Luo=o("longformer"),xuo=o(" \u2014 "),NI=a("a"),$uo=o("LongformerModel"),kuo=o(" (Longformer model)"),Suo=l(),Np=a("li"),sse=a("strong"),Ruo=o("luke"),Buo=o(" \u2014 "),jI=a("a"),Puo=o("LukeModel"),Iuo=o(" (LUKE model)"),quo=l(),jp=a("li"),lse=a("strong"),Nuo=o("lxmert"),juo=o(" \u2014 "),DI=a("a"),Duo=o("LxmertModel"),Guo=o(" (LXMERT model)"),Ouo=l(),Dp=a("li"),ise=a("strong"),Vuo=o("m2m_100"),Xuo=o(" \u2014 "),GI=a("a"),zuo=o("M2M100Model"),Quo=o(" (M2M100 model)"),Wuo=l(),Gp=a("li"),dse=a("strong"),Huo=o("marian"),Uuo=o(" \u2014 "),OI=a("a"),Juo=o("MarianModel"),Yuo=o(" (Marian model)"),Kuo=l(),Op=a("li"),cse=a("strong"),Zuo=o("maskformer"),e_o=o(" \u2014 "),VI=a("a"),o_o=o("MaskFormerModel"),r_o=o(" (MaskFormer model)"),t_o=l(),Vp=a("li"),fse=a("strong"),a_o=o("mbart"),n_o=o(" \u2014 "),XI=a("a"),s_o=o("MBartModel"),l_o=o(" (mBART model)"),i_o=l(),Xp=a("li"),mse=a("strong"),d_o=o("megatron-bert"),c_o=o(" \u2014 "),zI=a("a"),f_o=o("MegatronBertModel"),m_o=o(" (MegatronBert model)"),g_o=l(),zp=a("li"),gse=a("strong"),h_o=o("mobilebert"),p_o=o(" \u2014 "),QI=a("a"),u_o=o("MobileBertModel"),__o=o(" (MobileBERT model)"),b_o=l(),Qp=a("li"),hse=a("strong"),v_o=o("mpnet"),F_o=o(" \u2014 "),WI=a("a"),T_o=o("MPNetModel"),M_o=o(" (MPNet model)"),E_o=l(),Wp=a("li"),pse=a("strong"),C_o=o("mt5"),w_o=o(" \u2014 "),HI=a("a"),A_o=o("MT5Model"),y_o=o(" (mT5 model)"),L_o=l(),Hp=a("li"),use=a("strong"),x_o=o("nystromformer"),$_o=o(" \u2014 "),UI=a("a"),k_o=o("NystromformerModel"),S_o=o(" (Nystromformer model)"),R_o=l(),Up=a("li"),_se=a("strong"),B_o=o("openai-gpt"),P_o=o(" \u2014 "),JI=a("a"),I_o=o("OpenAIGPTModel"),q_o=o(" (OpenAI GPT model)"),N_o=l(),Jp=a("li"),bse=a("strong"),j_o=o("opt"),D_o=o(" \u2014 "),YI=a("a"),G_o=o("OPTModel"),O_o=o(" (OPT model)"),V_o=l(),Yp=a("li"),vse=a("strong"),X_o=o("pegasus"),z_o=o(" \u2014 "),KI=a("a"),Q_o=o("PegasusModel"),W_o=o(" (Pegasus model)"),H_o=l(),Kp=a("li"),Fse=a("strong"),U_o=o("perceiver"),J_o=o(" \u2014 "),ZI=a("a"),Y_o=o("PerceiverModel"),K_o=o(" (Perceiver model)"),Z_o=l(),Zp=a("li"),Tse=a("strong"),e2o=o("plbart"),o2o=o(" \u2014 "),eq=a("a"),r2o=o("PLBartModel"),t2o=o(" (PLBart model)"),a2o=l(),eu=a("li"),Mse=a("strong"),n2o=o("poolformer"),s2o=o(" \u2014 "),oq=a("a"),l2o=o("PoolFormerModel"),i2o=o(" (PoolFormer model)"),d2o=l(),ou=a("li"),Ese=a("strong"),c2o=o("prophetnet"),f2o=o(" \u2014 "),rq=a("a"),m2o=o("ProphetNetModel"),g2o=o(" (ProphetNet model)"),h2o=l(),ru=a("li"),Cse=a("strong"),p2o=o("qdqbert"),u2o=o(" \u2014 "),tq=a("a"),_2o=o("QDQBertModel"),b2o=o(" (QDQBert model)"),v2o=l(),tu=a("li"),wse=a("strong"),F2o=o("reformer"),T2o=o(" \u2014 "),aq=a("a"),M2o=o("ReformerModel"),E2o=o(" (Reformer model)"),C2o=l(),au=a("li"),Ase=a("strong"),w2o=o("regnet"),A2o=o(" \u2014 "),nq=a("a"),y2o=o("RegNetModel"),L2o=o(" (RegNet model)"),x2o=l(),nu=a("li"),yse=a("strong"),$2o=o("rembert"),k2o=o(" \u2014 "),sq=a("a"),S2o=o("RemBertModel"),R2o=o(" (RemBERT model)"),B2o=l(),su=a("li"),Lse=a("strong"),P2o=o("resnet"),I2o=o(" \u2014 "),lq=a("a"),q2o=o("ResNetModel"),N2o=o(" (ResNet model)"),j2o=l(),lu=a("li"),xse=a("strong"),D2o=o("retribert"),G2o=o(" \u2014 "),iq=a("a"),O2o=o("RetriBertModel"),V2o=o(" (RetriBERT model)"),X2o=l(),iu=a("li"),$se=a("strong"),z2o=o("roberta"),Q2o=o(" \u2014 "),dq=a("a"),W2o=o("RobertaModel"),H2o=o(" (RoBERTa model)"),U2o=l(),du=a("li"),kse=a("strong"),J2o=o("roformer"),Y2o=o(" \u2014 "),cq=a("a"),K2o=o("RoFormerModel"),Z2o=o(" (RoFormer model)"),e1o=l(),cu=a("li"),Sse=a("strong"),o1o=o("segformer"),r1o=o(" \u2014 "),fq=a("a"),t1o=o("SegformerModel"),a1o=o(" (SegFormer model)"),n1o=l(),fu=a("li"),Rse=a("strong"),s1o=o("sew"),l1o=o(" \u2014 "),mq=a("a"),i1o=o("SEWModel"),d1o=o(" (SEW model)"),c1o=l(),mu=a("li"),Bse=a("strong"),f1o=o("sew-d"),m1o=o(" \u2014 "),gq=a("a"),g1o=o("SEWDModel"),h1o=o(" (SEW-D model)"),p1o=l(),gu=a("li"),Pse=a("strong"),u1o=o("speech_to_text"),_1o=o(" \u2014 "),hq=a("a"),b1o=o("Speech2TextModel"),v1o=o(" (Speech2Text model)"),F1o=l(),hu=a("li"),Ise=a("strong"),T1o=o("splinter"),M1o=o(" \u2014 "),pq=a("a"),E1o=o("SplinterModel"),C1o=o(" (Splinter model)"),w1o=l(),pu=a("li"),qse=a("strong"),A1o=o("squeezebert"),y1o=o(" \u2014 "),uq=a("a"),L1o=o("SqueezeBertModel"),x1o=o(" (SqueezeBERT model)"),$1o=l(),uu=a("li"),Nse=a("strong"),k1o=o("swin"),S1o=o(" \u2014 "),_q=a("a"),R1o=o("SwinModel"),B1o=o(" (Swin model)"),P1o=l(),_u=a("li"),jse=a("strong"),I1o=o("t5"),q1o=o(" \u2014 "),bq=a("a"),N1o=o("T5Model"),j1o=o(" (T5 model)"),D1o=l(),bu=a("li"),Dse=a("strong"),G1o=o("tapas"),O1o=o(" \u2014 "),vq=a("a"),V1o=o("TapasModel"),X1o=o(" (TAPAS model)"),z1o=l(),vu=a("li"),Gse=a("strong"),Q1o=o("transfo-xl"),W1o=o(" \u2014 "),Fq=a("a"),H1o=o("TransfoXLModel"),U1o=o(" (Transformer-XL model)"),J1o=l(),Fu=a("li"),Ose=a("strong"),Y1o=o("unispeech"),K1o=o(" \u2014 "),Tq=a("a"),Z1o=o("UniSpeechModel"),ebo=o(" (UniSpeech model)"),obo=l(),Tu=a("li"),Vse=a("strong"),rbo=o("unispeech-sat"),tbo=o(" \u2014 "),Mq=a("a"),abo=o("UniSpeechSatModel"),nbo=o(" (UniSpeechSat model)"),sbo=l(),Mu=a("li"),Xse=a("strong"),lbo=o("van"),ibo=o(" \u2014 "),Eq=a("a"),dbo=o("VanModel"),cbo=o(" (VAN model)"),fbo=l(),Eu=a("li"),zse=a("strong"),mbo=o("vilt"),gbo=o(" \u2014 "),Cq=a("a"),hbo=o("ViltModel"),pbo=o(" (ViLT model)"),ubo=l(),Cu=a("li"),Qse=a("strong"),_bo=o("vision-text-dual-encoder"),bbo=o(" \u2014 "),wq=a("a"),vbo=o("VisionTextDualEncoderModel"),Fbo=o(" (VisionTextDualEncoder model)"),Tbo=l(),wu=a("li"),Wse=a("strong"),Mbo=o("visual_bert"),Ebo=o(" \u2014 "),Aq=a("a"),Cbo=o("VisualBertModel"),wbo=o(" (VisualBert model)"),Abo=l(),Au=a("li"),Hse=a("strong"),ybo=o("vit"),Lbo=o(" \u2014 "),yq=a("a"),xbo=o("ViTModel"),$bo=o(" (ViT model)"),kbo=l(),yu=a("li"),Use=a("strong"),Sbo=o("vit_mae"),Rbo=o(" \u2014 "),Lq=a("a"),Bbo=o("ViTMAEModel"),Pbo=o(" (ViTMAE model)"),Ibo=l(),Lu=a("li"),Jse=a("strong"),qbo=o("wav2vec2"),Nbo=o(" \u2014 "),xq=a("a"),jbo=o("Wav2Vec2Model"),Dbo=o(" (Wav2Vec2 model)"),Gbo=l(),xu=a("li"),Yse=a("strong"),Obo=o("wavlm"),Vbo=o(" \u2014 "),$q=a("a"),Xbo=o("WavLMModel"),zbo=o(" (WavLM model)"),Qbo=l(),$u=a("li"),Kse=a("strong"),Wbo=o("xglm"),Hbo=o(" \u2014 "),kq=a("a"),Ubo=o("XGLMModel"),Jbo=o(" (XGLM model)"),Ybo=l(),ku=a("li"),Zse=a("strong"),Kbo=o("xlm"),Zbo=o(" \u2014 "),Sq=a("a"),evo=o("XLMModel"),ovo=o(" (XLM model)"),rvo=l(),Su=a("li"),ele=a("strong"),tvo=o("xlm-prophetnet"),avo=o(" \u2014 "),Rq=a("a"),nvo=o("XLMProphetNetModel"),svo=o(" (XLMProphetNet model)"),lvo=l(),Ru=a("li"),ole=a("strong"),ivo=o("xlm-roberta"),dvo=o(" \u2014 "),Bq=a("a"),cvo=o("XLMRobertaModel"),fvo=o(" (XLM-RoBERTa model)"),mvo=l(),Bu=a("li"),rle=a("strong"),gvo=o("xlm-roberta-xl"),hvo=o(" \u2014 "),Pq=a("a"),pvo=o("XLMRobertaXLModel"),uvo=o(" (XLM-RoBERTa-XL model)"),_vo=l(),Pu=a("li"),tle=a("strong"),bvo=o("xlnet"),vvo=o(" \u2014 "),Iq=a("a"),Fvo=o("XLNetModel"),Tvo=o(" (XLNet model)"),Mvo=l(),Iu=a("li"),ale=a("strong"),Evo=o("yolos"),Cvo=o(" \u2014 "),qq=a("a"),wvo=o("YolosModel"),Avo=o(" (YOLOS model)"),yvo=l(),qu=a("li"),nle=a("strong"),Lvo=o("yoso"),xvo=o(" \u2014 "),Nq=a("a"),$vo=o("YosoModel"),kvo=o(" (YOSO model)"),Svo=l(),Nu=a("p"),Rvo=o("The model is set in evaluation mode by default using "),sle=a("code"),Bvo=o("model.eval()"),Pvo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lle=a("code"),Ivo=o("model.train()"),qvo=l(),F(ju.$$.fragment),CIe=l(),Ci=a("h2"),Du=a("a"),ile=a("span"),F(R6.$$.fragment),Nvo=l(),dle=a("span"),jvo=o("AutoModelForPreTraining"),wIe=l(),xo=a("div"),F(B6.$$.fragment),Dvo=l(),wi=a("p"),Gvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jq=a("a"),Ovo=o("from_pretrained()"),Vvo=o(" class method or the "),Dq=a("a"),Xvo=o("from_config()"),zvo=o(` class
method.`),Qvo=l(),P6=a("p"),Wvo=o("This class cannot be instantiated directly using "),cle=a("code"),Hvo=o("__init__()"),Uvo=o(" (throws an error)."),Jvo=l(),rt=a("div"),F(I6.$$.fragment),Yvo=l(),fle=a("p"),Kvo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Zvo=l(),Ai=a("p"),eFo=o(`Note:
Loading a model from its configuration file does `),mle=a("strong"),oFo=o("not"),rFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gq=a("a"),tFo=o("from_pretrained()"),aFo=o(" to load the model weights."),nFo=l(),F(Gu.$$.fragment),sFo=l(),Ue=a("div"),F(q6.$$.fragment),lFo=l(),gle=a("p"),iFo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),dFo=l(),ya=a("p"),cFo=o("The model class to instantiate is selected based on the "),hle=a("code"),fFo=o("model_type"),mFo=o(` property of the config object (either
passed as an argument or loaded from `),ple=a("code"),gFo=o("pretrained_model_name_or_path"),hFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ule=a("code"),pFo=o("pretrained_model_name_or_path"),uFo=o(":"),_Fo=l(),G=a("ul"),Ou=a("li"),_le=a("strong"),bFo=o("albert"),vFo=o(" \u2014 "),Oq=a("a"),FFo=o("AlbertForPreTraining"),TFo=o(" (ALBERT model)"),MFo=l(),Vu=a("li"),ble=a("strong"),EFo=o("bart"),CFo=o(" \u2014 "),Vq=a("a"),wFo=o("BartForConditionalGeneration"),AFo=o(" (BART model)"),yFo=l(),Xu=a("li"),vle=a("strong"),LFo=o("bert"),xFo=o(" \u2014 "),Xq=a("a"),$Fo=o("BertForPreTraining"),kFo=o(" (BERT model)"),SFo=l(),zu=a("li"),Fle=a("strong"),RFo=o("big_bird"),BFo=o(" \u2014 "),zq=a("a"),PFo=o("BigBirdForPreTraining"),IFo=o(" (BigBird model)"),qFo=l(),Qu=a("li"),Tle=a("strong"),NFo=o("bloom"),jFo=o(" \u2014 "),Qq=a("a"),DFo=o("BLOOMLMHeadModel"),GFo=o(" (BLOOM model)"),OFo=l(),Wu=a("li"),Mle=a("strong"),VFo=o("camembert"),XFo=o(" \u2014 "),Wq=a("a"),zFo=o("CamembertForMaskedLM"),QFo=o(" (CamemBERT model)"),WFo=l(),Hu=a("li"),Ele=a("strong"),HFo=o("ctrl"),UFo=o(" \u2014 "),Hq=a("a"),JFo=o("CTRLLMHeadModel"),YFo=o(" (CTRL model)"),KFo=l(),Uu=a("li"),Cle=a("strong"),ZFo=o("data2vec-text"),e0o=o(" \u2014 "),Uq=a("a"),o0o=o("Data2VecTextForMaskedLM"),r0o=o(" (Data2VecText model)"),t0o=l(),Ju=a("li"),wle=a("strong"),a0o=o("deberta"),n0o=o(" \u2014 "),Jq=a("a"),s0o=o("DebertaForMaskedLM"),l0o=o(" (DeBERTa model)"),i0o=l(),Yu=a("li"),Ale=a("strong"),d0o=o("deberta-v2"),c0o=o(" \u2014 "),Yq=a("a"),f0o=o("DebertaV2ForMaskedLM"),m0o=o(" (DeBERTa-v2 model)"),g0o=l(),Ku=a("li"),yle=a("strong"),h0o=o("distilbert"),p0o=o(" \u2014 "),Kq=a("a"),u0o=o("DistilBertForMaskedLM"),_0o=o(" (DistilBERT model)"),b0o=l(),Zu=a("li"),Lle=a("strong"),v0o=o("electra"),F0o=o(" \u2014 "),Zq=a("a"),T0o=o("ElectraForPreTraining"),M0o=o(" (ELECTRA model)"),E0o=l(),e_=a("li"),xle=a("strong"),C0o=o("flaubert"),w0o=o(" \u2014 "),eN=a("a"),A0o=o("FlaubertWithLMHeadModel"),y0o=o(" (FlauBERT model)"),L0o=l(),o_=a("li"),$le=a("strong"),x0o=o("flava"),$0o=o(" \u2014 "),oN=a("a"),k0o=o("FlavaForPreTraining"),S0o=o(" (Flava model)"),R0o=l(),r_=a("li"),kle=a("strong"),B0o=o("fnet"),P0o=o(" \u2014 "),rN=a("a"),I0o=o("FNetForPreTraining"),q0o=o(" (FNet model)"),N0o=l(),t_=a("li"),Sle=a("strong"),j0o=o("fsmt"),D0o=o(" \u2014 "),tN=a("a"),G0o=o("FSMTForConditionalGeneration"),O0o=o(" (FairSeq Machine-Translation model)"),V0o=l(),a_=a("li"),Rle=a("strong"),X0o=o("funnel"),z0o=o(" \u2014 "),aN=a("a"),Q0o=o("FunnelForPreTraining"),W0o=o(" (Funnel Transformer model)"),H0o=l(),n_=a("li"),Ble=a("strong"),U0o=o("gpt2"),J0o=o(" \u2014 "),nN=a("a"),Y0o=o("GPT2LMHeadModel"),K0o=o(" (OpenAI GPT-2 model)"),Z0o=l(),s_=a("li"),Ple=a("strong"),eTo=o("ibert"),oTo=o(" \u2014 "),sN=a("a"),rTo=o("IBertForMaskedLM"),tTo=o(" (I-BERT model)"),aTo=l(),l_=a("li"),Ile=a("strong"),nTo=o("layoutlm"),sTo=o(" \u2014 "),lN=a("a"),lTo=o("LayoutLMForMaskedLM"),iTo=o(" (LayoutLM model)"),dTo=l(),i_=a("li"),qle=a("strong"),cTo=o("longformer"),fTo=o(" \u2014 "),iN=a("a"),mTo=o("LongformerForMaskedLM"),gTo=o(" (Longformer model)"),hTo=l(),d_=a("li"),Nle=a("strong"),pTo=o("lxmert"),uTo=o(" \u2014 "),dN=a("a"),_To=o("LxmertForPreTraining"),bTo=o(" (LXMERT model)"),vTo=l(),c_=a("li"),jle=a("strong"),FTo=o("megatron-bert"),TTo=o(" \u2014 "),cN=a("a"),MTo=o("MegatronBertForPreTraining"),ETo=o(" (MegatronBert model)"),CTo=l(),f_=a("li"),Dle=a("strong"),wTo=o("mobilebert"),ATo=o(" \u2014 "),fN=a("a"),yTo=o("MobileBertForPreTraining"),LTo=o(" (MobileBERT model)"),xTo=l(),m_=a("li"),Gle=a("strong"),$To=o("mpnet"),kTo=o(" \u2014 "),mN=a("a"),STo=o("MPNetForMaskedLM"),RTo=o(" (MPNet model)"),BTo=l(),g_=a("li"),Ole=a("strong"),PTo=o("openai-gpt"),ITo=o(" \u2014 "),gN=a("a"),qTo=o("OpenAIGPTLMHeadModel"),NTo=o(" (OpenAI GPT model)"),jTo=l(),h_=a("li"),Vle=a("strong"),DTo=o("retribert"),GTo=o(" \u2014 "),hN=a("a"),OTo=o("RetriBertModel"),VTo=o(" (RetriBERT model)"),XTo=l(),p_=a("li"),Xle=a("strong"),zTo=o("roberta"),QTo=o(" \u2014 "),pN=a("a"),WTo=o("RobertaForMaskedLM"),HTo=o(" (RoBERTa model)"),UTo=l(),u_=a("li"),zle=a("strong"),JTo=o("squeezebert"),YTo=o(" \u2014 "),uN=a("a"),KTo=o("SqueezeBertForMaskedLM"),ZTo=o(" (SqueezeBERT model)"),e7o=l(),__=a("li"),Qle=a("strong"),o7o=o("t5"),r7o=o(" \u2014 "),_N=a("a"),t7o=o("T5ForConditionalGeneration"),a7o=o(" (T5 model)"),n7o=l(),b_=a("li"),Wle=a("strong"),s7o=o("tapas"),l7o=o(" \u2014 "),bN=a("a"),i7o=o("TapasForMaskedLM"),d7o=o(" (TAPAS model)"),c7o=l(),v_=a("li"),Hle=a("strong"),f7o=o("transfo-xl"),m7o=o(" \u2014 "),vN=a("a"),g7o=o("TransfoXLLMHeadModel"),h7o=o(" (Transformer-XL model)"),p7o=l(),F_=a("li"),Ule=a("strong"),u7o=o("unispeech"),_7o=o(" \u2014 "),FN=a("a"),b7o=o("UniSpeechForPreTraining"),v7o=o(" (UniSpeech model)"),F7o=l(),T_=a("li"),Jle=a("strong"),T7o=o("unispeech-sat"),M7o=o(" \u2014 "),TN=a("a"),E7o=o("UniSpeechSatForPreTraining"),C7o=o(" (UniSpeechSat model)"),w7o=l(),M_=a("li"),Yle=a("strong"),A7o=o("visual_bert"),y7o=o(" \u2014 "),MN=a("a"),L7o=o("VisualBertForPreTraining"),x7o=o(" (VisualBert model)"),$7o=l(),E_=a("li"),Kle=a("strong"),k7o=o("vit_mae"),S7o=o(" \u2014 "),EN=a("a"),R7o=o("ViTMAEForPreTraining"),B7o=o(" (ViTMAE model)"),P7o=l(),C_=a("li"),Zle=a("strong"),I7o=o("wav2vec2"),q7o=o(" \u2014 "),CN=a("a"),N7o=o("Wav2Vec2ForPreTraining"),j7o=o(" (Wav2Vec2 model)"),D7o=l(),w_=a("li"),eie=a("strong"),G7o=o("xlm"),O7o=o(" \u2014 "),wN=a("a"),V7o=o("XLMWithLMHeadModel"),X7o=o(" (XLM model)"),z7o=l(),A_=a("li"),oie=a("strong"),Q7o=o("xlm-roberta"),W7o=o(" \u2014 "),AN=a("a"),H7o=o("XLMRobertaForMaskedLM"),U7o=o(" (XLM-RoBERTa model)"),J7o=l(),y_=a("li"),rie=a("strong"),Y7o=o("xlm-roberta-xl"),K7o=o(" \u2014 "),yN=a("a"),Z7o=o("XLMRobertaXLForMaskedLM"),eMo=o(" (XLM-RoBERTa-XL model)"),oMo=l(),L_=a("li"),tie=a("strong"),rMo=o("xlnet"),tMo=o(" \u2014 "),LN=a("a"),aMo=o("XLNetLMHeadModel"),nMo=o(" (XLNet model)"),sMo=l(),x_=a("p"),lMo=o("The model is set in evaluation mode by default using "),aie=a("code"),iMo=o("model.eval()"),dMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nie=a("code"),cMo=o("model.train()"),fMo=l(),F($_.$$.fragment),AIe=l(),yi=a("h2"),k_=a("a"),sie=a("span"),F(N6.$$.fragment),mMo=l(),lie=a("span"),gMo=o("AutoModelForCausalLM"),yIe=l(),$o=a("div"),F(j6.$$.fragment),hMo=l(),Li=a("p"),pMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xN=a("a"),uMo=o("from_pretrained()"),_Mo=o(" class method or the "),$N=a("a"),bMo=o("from_config()"),vMo=o(` class
method.`),FMo=l(),D6=a("p"),TMo=o("This class cannot be instantiated directly using "),iie=a("code"),MMo=o("__init__()"),EMo=o(" (throws an error)."),CMo=l(),tt=a("div"),F(G6.$$.fragment),wMo=l(),die=a("p"),AMo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yMo=l(),xi=a("p"),LMo=o(`Note:
Loading a model from its configuration file does `),cie=a("strong"),xMo=o("not"),$Mo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kN=a("a"),kMo=o("from_pretrained()"),SMo=o(" to load the model weights."),RMo=l(),F(S_.$$.fragment),BMo=l(),Je=a("div"),F(O6.$$.fragment),PMo=l(),fie=a("p"),IMo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qMo=l(),La=a("p"),NMo=o("The model class to instantiate is selected based on the "),mie=a("code"),jMo=o("model_type"),DMo=o(` property of the config object (either
passed as an argument or loaded from `),gie=a("code"),GMo=o("pretrained_model_name_or_path"),OMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hie=a("code"),VMo=o("pretrained_model_name_or_path"),XMo=o(":"),zMo=l(),z=a("ul"),R_=a("li"),pie=a("strong"),QMo=o("bart"),WMo=o(" \u2014 "),SN=a("a"),HMo=o("BartForCausalLM"),UMo=o(" (BART model)"),JMo=l(),B_=a("li"),uie=a("strong"),YMo=o("bert"),KMo=o(" \u2014 "),RN=a("a"),ZMo=o("BertLMHeadModel"),e4o=o(" (BERT model)"),o4o=l(),P_=a("li"),_ie=a("strong"),r4o=o("bert-generation"),t4o=o(" \u2014 "),BN=a("a"),a4o=o("BertGenerationDecoder"),n4o=o(" (Bert Generation model)"),s4o=l(),I_=a("li"),bie=a("strong"),l4o=o("big_bird"),i4o=o(" \u2014 "),PN=a("a"),d4o=o("BigBirdForCausalLM"),c4o=o(" (BigBird model)"),f4o=l(),q_=a("li"),vie=a("strong"),m4o=o("bigbird_pegasus"),g4o=o(" \u2014 "),IN=a("a"),h4o=o("BigBirdPegasusForCausalLM"),p4o=o(" (BigBirdPegasus model)"),u4o=l(),N_=a("li"),Fie=a("strong"),_4o=o("blenderbot"),b4o=o(" \u2014 "),qN=a("a"),v4o=o("BlenderbotForCausalLM"),F4o=o(" (Blenderbot model)"),T4o=l(),j_=a("li"),Tie=a("strong"),M4o=o("blenderbot-small"),E4o=o(" \u2014 "),NN=a("a"),C4o=o("BlenderbotSmallForCausalLM"),w4o=o(" (BlenderbotSmall model)"),A4o=l(),D_=a("li"),Mie=a("strong"),y4o=o("bloom"),L4o=o(" \u2014 "),jN=a("a"),x4o=o("BLOOMLMHeadModel"),$4o=o(" (BLOOM model)"),k4o=l(),G_=a("li"),Eie=a("strong"),S4o=o("camembert"),R4o=o(" \u2014 "),DN=a("a"),B4o=o("CamembertForCausalLM"),P4o=o(" (CamemBERT model)"),I4o=l(),O_=a("li"),Cie=a("strong"),q4o=o("ctrl"),N4o=o(" \u2014 "),GN=a("a"),j4o=o("CTRLLMHeadModel"),D4o=o(" (CTRL model)"),G4o=l(),V_=a("li"),wie=a("strong"),O4o=o("data2vec-text"),V4o=o(" \u2014 "),ON=a("a"),X4o=o("Data2VecTextForCausalLM"),z4o=o(" (Data2VecText model)"),Q4o=l(),X_=a("li"),Aie=a("strong"),W4o=o("electra"),H4o=o(" \u2014 "),VN=a("a"),U4o=o("ElectraForCausalLM"),J4o=o(" (ELECTRA model)"),Y4o=l(),z_=a("li"),yie=a("strong"),K4o=o("gpt2"),Z4o=o(" \u2014 "),XN=a("a"),eEo=o("GPT2LMHeadModel"),oEo=o(" (OpenAI GPT-2 model)"),rEo=l(),Q_=a("li"),Lie=a("strong"),tEo=o("gpt_neo"),aEo=o(" \u2014 "),zN=a("a"),nEo=o("GPTNeoForCausalLM"),sEo=o(" (GPT Neo model)"),lEo=l(),W_=a("li"),xie=a("strong"),iEo=o("gptj"),dEo=o(" \u2014 "),QN=a("a"),cEo=o("GPTJForCausalLM"),fEo=o(" (GPT-J model)"),mEo=l(),H_=a("li"),$ie=a("strong"),gEo=o("marian"),hEo=o(" \u2014 "),WN=a("a"),pEo=o("MarianForCausalLM"),uEo=o(" (Marian model)"),_Eo=l(),U_=a("li"),kie=a("strong"),bEo=o("mbart"),vEo=o(" \u2014 "),HN=a("a"),FEo=o("MBartForCausalLM"),TEo=o(" (mBART model)"),MEo=l(),J_=a("li"),Sie=a("strong"),EEo=o("megatron-bert"),CEo=o(" \u2014 "),UN=a("a"),wEo=o("MegatronBertForCausalLM"),AEo=o(" (MegatronBert model)"),yEo=l(),Y_=a("li"),Rie=a("strong"),LEo=o("openai-gpt"),xEo=o(" \u2014 "),JN=a("a"),$Eo=o("OpenAIGPTLMHeadModel"),kEo=o(" (OpenAI GPT model)"),SEo=l(),K_=a("li"),Bie=a("strong"),REo=o("opt"),BEo=o(" \u2014 "),YN=a("a"),PEo=o("OPTForCausalLM"),IEo=o(" (OPT model)"),qEo=l(),Z_=a("li"),Pie=a("strong"),NEo=o("pegasus"),jEo=o(" \u2014 "),KN=a("a"),DEo=o("PegasusForCausalLM"),GEo=o(" (Pegasus model)"),OEo=l(),e2=a("li"),Iie=a("strong"),VEo=o("plbart"),XEo=o(" \u2014 "),ZN=a("a"),zEo=o("PLBartForCausalLM"),QEo=o(" (PLBart model)"),WEo=l(),o2=a("li"),qie=a("strong"),HEo=o("prophetnet"),UEo=o(" \u2014 "),ej=a("a"),JEo=o("ProphetNetForCausalLM"),YEo=o(" (ProphetNet model)"),KEo=l(),r2=a("li"),Nie=a("strong"),ZEo=o("qdqbert"),e5o=o(" \u2014 "),oj=a("a"),o5o=o("QDQBertLMHeadModel"),r5o=o(" (QDQBert model)"),t5o=l(),t2=a("li"),jie=a("strong"),a5o=o("reformer"),n5o=o(" \u2014 "),rj=a("a"),s5o=o("ReformerModelWithLMHead"),l5o=o(" (Reformer model)"),i5o=l(),a2=a("li"),Die=a("strong"),d5o=o("rembert"),c5o=o(" \u2014 "),tj=a("a"),f5o=o("RemBertForCausalLM"),m5o=o(" (RemBERT model)"),g5o=l(),n2=a("li"),Gie=a("strong"),h5o=o("roberta"),p5o=o(" \u2014 "),aj=a("a"),u5o=o("RobertaForCausalLM"),_5o=o(" (RoBERTa model)"),b5o=l(),s2=a("li"),Oie=a("strong"),v5o=o("roformer"),F5o=o(" \u2014 "),nj=a("a"),T5o=o("RoFormerForCausalLM"),M5o=o(" (RoFormer model)"),E5o=l(),l2=a("li"),Vie=a("strong"),C5o=o("speech_to_text_2"),w5o=o(" \u2014 "),sj=a("a"),A5o=o("Speech2Text2ForCausalLM"),y5o=o(" (Speech2Text2 model)"),L5o=l(),i2=a("li"),Xie=a("strong"),x5o=o("transfo-xl"),$5o=o(" \u2014 "),lj=a("a"),k5o=o("TransfoXLLMHeadModel"),S5o=o(" (Transformer-XL model)"),R5o=l(),d2=a("li"),zie=a("strong"),B5o=o("trocr"),P5o=o(" \u2014 "),ij=a("a"),I5o=o("TrOCRForCausalLM"),q5o=o(" (TrOCR model)"),N5o=l(),c2=a("li"),Qie=a("strong"),j5o=o("xglm"),D5o=o(" \u2014 "),dj=a("a"),G5o=o("XGLMForCausalLM"),O5o=o(" (XGLM model)"),V5o=l(),f2=a("li"),Wie=a("strong"),X5o=o("xlm"),z5o=o(" \u2014 "),cj=a("a"),Q5o=o("XLMWithLMHeadModel"),W5o=o(" (XLM model)"),H5o=l(),m2=a("li"),Hie=a("strong"),U5o=o("xlm-prophetnet"),J5o=o(" \u2014 "),fj=a("a"),Y5o=o("XLMProphetNetForCausalLM"),K5o=o(" (XLMProphetNet model)"),Z5o=l(),g2=a("li"),Uie=a("strong"),eCo=o("xlm-roberta"),oCo=o(" \u2014 "),mj=a("a"),rCo=o("XLMRobertaForCausalLM"),tCo=o(" (XLM-RoBERTa model)"),aCo=l(),h2=a("li"),Jie=a("strong"),nCo=o("xlm-roberta-xl"),sCo=o(" \u2014 "),gj=a("a"),lCo=o("XLMRobertaXLForCausalLM"),iCo=o(" (XLM-RoBERTa-XL model)"),dCo=l(),p2=a("li"),Yie=a("strong"),cCo=o("xlnet"),fCo=o(" \u2014 "),hj=a("a"),mCo=o("XLNetLMHeadModel"),gCo=o(" (XLNet model)"),hCo=l(),u2=a("p"),pCo=o("The model is set in evaluation mode by default using "),Kie=a("code"),uCo=o("model.eval()"),_Co=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zie=a("code"),bCo=o("model.train()"),vCo=l(),F(_2.$$.fragment),LIe=l(),$i=a("h2"),b2=a("a"),ede=a("span"),F(V6.$$.fragment),FCo=l(),ode=a("span"),TCo=o("AutoModelForMaskedLM"),xIe=l(),ko=a("div"),F(X6.$$.fragment),MCo=l(),ki=a("p"),ECo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pj=a("a"),CCo=o("from_pretrained()"),wCo=o(" class method or the "),uj=a("a"),ACo=o("from_config()"),yCo=o(` class
method.`),LCo=l(),z6=a("p"),xCo=o("This class cannot be instantiated directly using "),rde=a("code"),$Co=o("__init__()"),kCo=o(" (throws an error)."),SCo=l(),at=a("div"),F(Q6.$$.fragment),RCo=l(),tde=a("p"),BCo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),PCo=l(),Si=a("p"),ICo=o(`Note:
Loading a model from its configuration file does `),ade=a("strong"),qCo=o("not"),NCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_j=a("a"),jCo=o("from_pretrained()"),DCo=o(" to load the model weights."),GCo=l(),F(v2.$$.fragment),OCo=l(),Ye=a("div"),F(W6.$$.fragment),VCo=l(),nde=a("p"),XCo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zCo=l(),xa=a("p"),QCo=o("The model class to instantiate is selected based on the "),sde=a("code"),WCo=o("model_type"),HCo=o(` property of the config object (either
passed as an argument or loaded from `),lde=a("code"),UCo=o("pretrained_model_name_or_path"),JCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ide=a("code"),YCo=o("pretrained_model_name_or_path"),KCo=o(":"),ZCo=l(),W=a("ul"),F2=a("li"),dde=a("strong"),e3o=o("albert"),o3o=o(" \u2014 "),bj=a("a"),r3o=o("AlbertForMaskedLM"),t3o=o(" (ALBERT model)"),a3o=l(),T2=a("li"),cde=a("strong"),n3o=o("bart"),s3o=o(" \u2014 "),vj=a("a"),l3o=o("BartForConditionalGeneration"),i3o=o(" (BART model)"),d3o=l(),M2=a("li"),fde=a("strong"),c3o=o("bert"),f3o=o(" \u2014 "),Fj=a("a"),m3o=o("BertForMaskedLM"),g3o=o(" (BERT model)"),h3o=l(),E2=a("li"),mde=a("strong"),p3o=o("big_bird"),u3o=o(" \u2014 "),Tj=a("a"),_3o=o("BigBirdForMaskedLM"),b3o=o(" (BigBird model)"),v3o=l(),C2=a("li"),gde=a("strong"),F3o=o("camembert"),T3o=o(" \u2014 "),Mj=a("a"),M3o=o("CamembertForMaskedLM"),E3o=o(" (CamemBERT model)"),C3o=l(),w2=a("li"),hde=a("strong"),w3o=o("convbert"),A3o=o(" \u2014 "),Ej=a("a"),y3o=o("ConvBertForMaskedLM"),L3o=o(" (ConvBERT model)"),x3o=l(),A2=a("li"),pde=a("strong"),$3o=o("data2vec-text"),k3o=o(" \u2014 "),Cj=a("a"),S3o=o("Data2VecTextForMaskedLM"),R3o=o(" (Data2VecText model)"),B3o=l(),y2=a("li"),ude=a("strong"),P3o=o("deberta"),I3o=o(" \u2014 "),wj=a("a"),q3o=o("DebertaForMaskedLM"),N3o=o(" (DeBERTa model)"),j3o=l(),L2=a("li"),_de=a("strong"),D3o=o("deberta-v2"),G3o=o(" \u2014 "),Aj=a("a"),O3o=o("DebertaV2ForMaskedLM"),V3o=o(" (DeBERTa-v2 model)"),X3o=l(),x2=a("li"),bde=a("strong"),z3o=o("distilbert"),Q3o=o(" \u2014 "),yj=a("a"),W3o=o("DistilBertForMaskedLM"),H3o=o(" (DistilBERT model)"),U3o=l(),$2=a("li"),vde=a("strong"),J3o=o("electra"),Y3o=o(" \u2014 "),Lj=a("a"),K3o=o("ElectraForMaskedLM"),Z3o=o(" (ELECTRA model)"),ewo=l(),k2=a("li"),Fde=a("strong"),owo=o("flaubert"),rwo=o(" \u2014 "),xj=a("a"),two=o("FlaubertWithLMHeadModel"),awo=o(" (FlauBERT model)"),nwo=l(),S2=a("li"),Tde=a("strong"),swo=o("fnet"),lwo=o(" \u2014 "),$j=a("a"),iwo=o("FNetForMaskedLM"),dwo=o(" (FNet model)"),cwo=l(),R2=a("li"),Mde=a("strong"),fwo=o("funnel"),mwo=o(" \u2014 "),kj=a("a"),gwo=o("FunnelForMaskedLM"),hwo=o(" (Funnel Transformer model)"),pwo=l(),B2=a("li"),Ede=a("strong"),uwo=o("ibert"),_wo=o(" \u2014 "),Sj=a("a"),bwo=o("IBertForMaskedLM"),vwo=o(" (I-BERT model)"),Fwo=l(),P2=a("li"),Cde=a("strong"),Two=o("layoutlm"),Mwo=o(" \u2014 "),Rj=a("a"),Ewo=o("LayoutLMForMaskedLM"),Cwo=o(" (LayoutLM model)"),wwo=l(),I2=a("li"),wde=a("strong"),Awo=o("longformer"),ywo=o(" \u2014 "),Bj=a("a"),Lwo=o("LongformerForMaskedLM"),xwo=o(" (Longformer model)"),$wo=l(),q2=a("li"),Ade=a("strong"),kwo=o("mbart"),Swo=o(" \u2014 "),Pj=a("a"),Rwo=o("MBartForConditionalGeneration"),Bwo=o(" (mBART model)"),Pwo=l(),N2=a("li"),yde=a("strong"),Iwo=o("megatron-bert"),qwo=o(" \u2014 "),Ij=a("a"),Nwo=o("MegatronBertForMaskedLM"),jwo=o(" (MegatronBert model)"),Dwo=l(),j2=a("li"),Lde=a("strong"),Gwo=o("mobilebert"),Owo=o(" \u2014 "),qj=a("a"),Vwo=o("MobileBertForMaskedLM"),Xwo=o(" (MobileBERT model)"),zwo=l(),D2=a("li"),xde=a("strong"),Qwo=o("mpnet"),Wwo=o(" \u2014 "),Nj=a("a"),Hwo=o("MPNetForMaskedLM"),Uwo=o(" (MPNet model)"),Jwo=l(),G2=a("li"),$de=a("strong"),Ywo=o("nystromformer"),Kwo=o(" \u2014 "),jj=a("a"),Zwo=o("NystromformerForMaskedLM"),eAo=o(" (Nystromformer model)"),oAo=l(),O2=a("li"),kde=a("strong"),rAo=o("perceiver"),tAo=o(" \u2014 "),Dj=a("a"),aAo=o("PerceiverForMaskedLM"),nAo=o(" (Perceiver model)"),sAo=l(),V2=a("li"),Sde=a("strong"),lAo=o("qdqbert"),iAo=o(" \u2014 "),Gj=a("a"),dAo=o("QDQBertForMaskedLM"),cAo=o(" (QDQBert model)"),fAo=l(),X2=a("li"),Rde=a("strong"),mAo=o("reformer"),gAo=o(" \u2014 "),Oj=a("a"),hAo=o("ReformerForMaskedLM"),pAo=o(" (Reformer model)"),uAo=l(),z2=a("li"),Bde=a("strong"),_Ao=o("rembert"),bAo=o(" \u2014 "),Vj=a("a"),vAo=o("RemBertForMaskedLM"),FAo=o(" (RemBERT model)"),TAo=l(),Q2=a("li"),Pde=a("strong"),MAo=o("roberta"),EAo=o(" \u2014 "),Xj=a("a"),CAo=o("RobertaForMaskedLM"),wAo=o(" (RoBERTa model)"),AAo=l(),W2=a("li"),Ide=a("strong"),yAo=o("roformer"),LAo=o(" \u2014 "),zj=a("a"),xAo=o("RoFormerForMaskedLM"),$Ao=o(" (RoFormer model)"),kAo=l(),H2=a("li"),qde=a("strong"),SAo=o("squeezebert"),RAo=o(" \u2014 "),Qj=a("a"),BAo=o("SqueezeBertForMaskedLM"),PAo=o(" (SqueezeBERT model)"),IAo=l(),U2=a("li"),Nde=a("strong"),qAo=o("tapas"),NAo=o(" \u2014 "),Wj=a("a"),jAo=o("TapasForMaskedLM"),DAo=o(" (TAPAS model)"),GAo=l(),J2=a("li"),jde=a("strong"),OAo=o("wav2vec2"),VAo=o(" \u2014 "),Dde=a("code"),XAo=o("Wav2Vec2ForMaskedLM"),zAo=o(" (Wav2Vec2 model)"),QAo=l(),Y2=a("li"),Gde=a("strong"),WAo=o("xlm"),HAo=o(" \u2014 "),Hj=a("a"),UAo=o("XLMWithLMHeadModel"),JAo=o(" (XLM model)"),YAo=l(),K2=a("li"),Ode=a("strong"),KAo=o("xlm-roberta"),ZAo=o(" \u2014 "),Uj=a("a"),e6o=o("XLMRobertaForMaskedLM"),o6o=o(" (XLM-RoBERTa model)"),r6o=l(),Z2=a("li"),Vde=a("strong"),t6o=o("xlm-roberta-xl"),a6o=o(" \u2014 "),Jj=a("a"),n6o=o("XLMRobertaXLForMaskedLM"),s6o=o(" (XLM-RoBERTa-XL model)"),l6o=l(),e1=a("li"),Xde=a("strong"),i6o=o("yoso"),d6o=o(" \u2014 "),Yj=a("a"),c6o=o("YosoForMaskedLM"),f6o=o(" (YOSO model)"),m6o=l(),o1=a("p"),g6o=o("The model is set in evaluation mode by default using "),zde=a("code"),h6o=o("model.eval()"),p6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qde=a("code"),u6o=o("model.train()"),_6o=l(),F(r1.$$.fragment),$Ie=l(),Ri=a("h2"),t1=a("a"),Wde=a("span"),F(H6.$$.fragment),b6o=l(),Hde=a("span"),v6o=o("AutoModelForSeq2SeqLM"),kIe=l(),So=a("div"),F(U6.$$.fragment),F6o=l(),Bi=a("p"),T6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Kj=a("a"),M6o=o("from_pretrained()"),E6o=o(" class method or the "),Zj=a("a"),C6o=o("from_config()"),w6o=o(` class
method.`),A6o=l(),J6=a("p"),y6o=o("This class cannot be instantiated directly using "),Ude=a("code"),L6o=o("__init__()"),x6o=o(" (throws an error)."),$6o=l(),nt=a("div"),F(Y6.$$.fragment),k6o=l(),Jde=a("p"),S6o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),R6o=l(),Pi=a("p"),B6o=o(`Note:
Loading a model from its configuration file does `),Yde=a("strong"),P6o=o("not"),I6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eD=a("a"),q6o=o("from_pretrained()"),N6o=o(" to load the model weights."),j6o=l(),F(a1.$$.fragment),D6o=l(),Ke=a("div"),F(K6.$$.fragment),G6o=l(),Kde=a("p"),O6o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),V6o=l(),$a=a("p"),X6o=o("The model class to instantiate is selected based on the "),Zde=a("code"),z6o=o("model_type"),Q6o=o(` property of the config object (either
passed as an argument or loaded from `),ece=a("code"),W6o=o("pretrained_model_name_or_path"),H6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oce=a("code"),U6o=o("pretrained_model_name_or_path"),J6o=o(":"),Y6o=l(),he=a("ul"),n1=a("li"),rce=a("strong"),K6o=o("bart"),Z6o=o(" \u2014 "),oD=a("a"),eyo=o("BartForConditionalGeneration"),oyo=o(" (BART model)"),ryo=l(),s1=a("li"),tce=a("strong"),tyo=o("bigbird_pegasus"),ayo=o(" \u2014 "),rD=a("a"),nyo=o("BigBirdPegasusForConditionalGeneration"),syo=o(" (BigBirdPegasus model)"),lyo=l(),l1=a("li"),ace=a("strong"),iyo=o("blenderbot"),dyo=o(" \u2014 "),tD=a("a"),cyo=o("BlenderbotForConditionalGeneration"),fyo=o(" (Blenderbot model)"),myo=l(),i1=a("li"),nce=a("strong"),gyo=o("blenderbot-small"),hyo=o(" \u2014 "),aD=a("a"),pyo=o("BlenderbotSmallForConditionalGeneration"),uyo=o(" (BlenderbotSmall model)"),_yo=l(),d1=a("li"),sce=a("strong"),byo=o("encoder-decoder"),vyo=o(" \u2014 "),nD=a("a"),Fyo=o("EncoderDecoderModel"),Tyo=o(" (Encoder decoder model)"),Myo=l(),c1=a("li"),lce=a("strong"),Eyo=o("fsmt"),Cyo=o(" \u2014 "),sD=a("a"),wyo=o("FSMTForConditionalGeneration"),Ayo=o(" (FairSeq Machine-Translation model)"),yyo=l(),f1=a("li"),ice=a("strong"),Lyo=o("led"),xyo=o(" \u2014 "),lD=a("a"),$yo=o("LEDForConditionalGeneration"),kyo=o(" (LED model)"),Syo=l(),m1=a("li"),dce=a("strong"),Ryo=o("m2m_100"),Byo=o(" \u2014 "),iD=a("a"),Pyo=o("M2M100ForConditionalGeneration"),Iyo=o(" (M2M100 model)"),qyo=l(),g1=a("li"),cce=a("strong"),Nyo=o("marian"),jyo=o(" \u2014 "),dD=a("a"),Dyo=o("MarianMTModel"),Gyo=o(" (Marian model)"),Oyo=l(),h1=a("li"),fce=a("strong"),Vyo=o("mbart"),Xyo=o(" \u2014 "),cD=a("a"),zyo=o("MBartForConditionalGeneration"),Qyo=o(" (mBART model)"),Wyo=l(),p1=a("li"),mce=a("strong"),Hyo=o("mt5"),Uyo=o(" \u2014 "),fD=a("a"),Jyo=o("MT5ForConditionalGeneration"),Yyo=o(" (mT5 model)"),Kyo=l(),u1=a("li"),gce=a("strong"),Zyo=o("pegasus"),eLo=o(" \u2014 "),mD=a("a"),oLo=o("PegasusForConditionalGeneration"),rLo=o(" (Pegasus model)"),tLo=l(),_1=a("li"),hce=a("strong"),aLo=o("plbart"),nLo=o(" \u2014 "),gD=a("a"),sLo=o("PLBartForConditionalGeneration"),lLo=o(" (PLBart model)"),iLo=l(),b1=a("li"),pce=a("strong"),dLo=o("prophetnet"),cLo=o(" \u2014 "),hD=a("a"),fLo=o("ProphetNetForConditionalGeneration"),mLo=o(" (ProphetNet model)"),gLo=l(),v1=a("li"),uce=a("strong"),hLo=o("t5"),pLo=o(" \u2014 "),pD=a("a"),uLo=o("T5ForConditionalGeneration"),_Lo=o(" (T5 model)"),bLo=l(),F1=a("li"),_ce=a("strong"),vLo=o("tapex"),FLo=o(" \u2014 "),uD=a("a"),TLo=o("BartForConditionalGeneration"),MLo=o(" (TAPEX model)"),ELo=l(),T1=a("li"),bce=a("strong"),CLo=o("xlm-prophetnet"),wLo=o(" \u2014 "),_D=a("a"),ALo=o("XLMProphetNetForConditionalGeneration"),yLo=o(" (XLMProphetNet model)"),LLo=l(),M1=a("p"),xLo=o("The model is set in evaluation mode by default using "),vce=a("code"),$Lo=o("model.eval()"),kLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fce=a("code"),SLo=o("model.train()"),RLo=l(),F(E1.$$.fragment),SIe=l(),Ii=a("h2"),C1=a("a"),Tce=a("span"),F(Z6.$$.fragment),BLo=l(),Mce=a("span"),PLo=o("AutoModelForSequenceClassification"),RIe=l(),Ro=a("div"),F(ey.$$.fragment),ILo=l(),qi=a("p"),qLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bD=a("a"),NLo=o("from_pretrained()"),jLo=o(" class method or the "),vD=a("a"),DLo=o("from_config()"),GLo=o(` class
method.`),OLo=l(),oy=a("p"),VLo=o("This class cannot be instantiated directly using "),Ece=a("code"),XLo=o("__init__()"),zLo=o(" (throws an error)."),QLo=l(),st=a("div"),F(ry.$$.fragment),WLo=l(),Cce=a("p"),HLo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ULo=l(),Ni=a("p"),JLo=o(`Note:
Loading a model from its configuration file does `),wce=a("strong"),YLo=o("not"),KLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FD=a("a"),ZLo=o("from_pretrained()"),e8o=o(" to load the model weights."),o8o=l(),F(w1.$$.fragment),r8o=l(),Ze=a("div"),F(ty.$$.fragment),t8o=l(),Ace=a("p"),a8o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),n8o=l(),ka=a("p"),s8o=o("The model class to instantiate is selected based on the "),yce=a("code"),l8o=o("model_type"),i8o=o(` property of the config object (either
passed as an argument or loaded from `),Lce=a("code"),d8o=o("pretrained_model_name_or_path"),c8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=a("code"),f8o=o("pretrained_model_name_or_path"),m8o=o(":"),g8o=l(),q=a("ul"),A1=a("li"),$ce=a("strong"),h8o=o("albert"),p8o=o(" \u2014 "),TD=a("a"),u8o=o("AlbertForSequenceClassification"),_8o=o(" (ALBERT model)"),b8o=l(),y1=a("li"),kce=a("strong"),v8o=o("bart"),F8o=o(" \u2014 "),MD=a("a"),T8o=o("BartForSequenceClassification"),M8o=o(" (BART model)"),E8o=l(),L1=a("li"),Sce=a("strong"),C8o=o("bert"),w8o=o(" \u2014 "),ED=a("a"),A8o=o("BertForSequenceClassification"),y8o=o(" (BERT model)"),L8o=l(),x1=a("li"),Rce=a("strong"),x8o=o("big_bird"),$8o=o(" \u2014 "),CD=a("a"),k8o=o("BigBirdForSequenceClassification"),S8o=o(" (BigBird model)"),R8o=l(),$1=a("li"),Bce=a("strong"),B8o=o("bigbird_pegasus"),P8o=o(" \u2014 "),wD=a("a"),I8o=o("BigBirdPegasusForSequenceClassification"),q8o=o(" (BigBirdPegasus model)"),N8o=l(),k1=a("li"),Pce=a("strong"),j8o=o("camembert"),D8o=o(" \u2014 "),AD=a("a"),G8o=o("CamembertForSequenceClassification"),O8o=o(" (CamemBERT model)"),V8o=l(),S1=a("li"),Ice=a("strong"),X8o=o("canine"),z8o=o(" \u2014 "),yD=a("a"),Q8o=o("CanineForSequenceClassification"),W8o=o(" (Canine model)"),H8o=l(),R1=a("li"),qce=a("strong"),U8o=o("convbert"),J8o=o(" \u2014 "),LD=a("a"),Y8o=o("ConvBertForSequenceClassification"),K8o=o(" (ConvBERT model)"),Z8o=l(),B1=a("li"),Nce=a("strong"),exo=o("ctrl"),oxo=o(" \u2014 "),xD=a("a"),rxo=o("CTRLForSequenceClassification"),txo=o(" (CTRL model)"),axo=l(),P1=a("li"),jce=a("strong"),nxo=o("data2vec-text"),sxo=o(" \u2014 "),$D=a("a"),lxo=o("Data2VecTextForSequenceClassification"),ixo=o(" (Data2VecText model)"),dxo=l(),I1=a("li"),Dce=a("strong"),cxo=o("deberta"),fxo=o(" \u2014 "),kD=a("a"),mxo=o("DebertaForSequenceClassification"),gxo=o(" (DeBERTa model)"),hxo=l(),q1=a("li"),Gce=a("strong"),pxo=o("deberta-v2"),uxo=o(" \u2014 "),SD=a("a"),_xo=o("DebertaV2ForSequenceClassification"),bxo=o(" (DeBERTa-v2 model)"),vxo=l(),N1=a("li"),Oce=a("strong"),Fxo=o("distilbert"),Txo=o(" \u2014 "),RD=a("a"),Mxo=o("DistilBertForSequenceClassification"),Exo=o(" (DistilBERT model)"),Cxo=l(),j1=a("li"),Vce=a("strong"),wxo=o("electra"),Axo=o(" \u2014 "),BD=a("a"),yxo=o("ElectraForSequenceClassification"),Lxo=o(" (ELECTRA model)"),xxo=l(),D1=a("li"),Xce=a("strong"),$xo=o("flaubert"),kxo=o(" \u2014 "),PD=a("a"),Sxo=o("FlaubertForSequenceClassification"),Rxo=o(" (FlauBERT model)"),Bxo=l(),G1=a("li"),zce=a("strong"),Pxo=o("fnet"),Ixo=o(" \u2014 "),ID=a("a"),qxo=o("FNetForSequenceClassification"),Nxo=o(" (FNet model)"),jxo=l(),O1=a("li"),Qce=a("strong"),Dxo=o("funnel"),Gxo=o(" \u2014 "),qD=a("a"),Oxo=o("FunnelForSequenceClassification"),Vxo=o(" (Funnel Transformer model)"),Xxo=l(),V1=a("li"),Wce=a("strong"),zxo=o("gpt2"),Qxo=o(" \u2014 "),ND=a("a"),Wxo=o("GPT2ForSequenceClassification"),Hxo=o(" (OpenAI GPT-2 model)"),Uxo=l(),X1=a("li"),Hce=a("strong"),Jxo=o("gpt_neo"),Yxo=o(" \u2014 "),jD=a("a"),Kxo=o("GPTNeoForSequenceClassification"),Zxo=o(" (GPT Neo model)"),e9o=l(),z1=a("li"),Uce=a("strong"),o9o=o("gptj"),r9o=o(" \u2014 "),DD=a("a"),t9o=o("GPTJForSequenceClassification"),a9o=o(" (GPT-J model)"),n9o=l(),Q1=a("li"),Jce=a("strong"),s9o=o("ibert"),l9o=o(" \u2014 "),GD=a("a"),i9o=o("IBertForSequenceClassification"),d9o=o(" (I-BERT model)"),c9o=l(),W1=a("li"),Yce=a("strong"),f9o=o("layoutlm"),m9o=o(" \u2014 "),OD=a("a"),g9o=o("LayoutLMForSequenceClassification"),h9o=o(" (LayoutLM model)"),p9o=l(),H1=a("li"),Kce=a("strong"),u9o=o("layoutlmv2"),_9o=o(" \u2014 "),VD=a("a"),b9o=o("LayoutLMv2ForSequenceClassification"),v9o=o(" (LayoutLMv2 model)"),F9o=l(),U1=a("li"),Zce=a("strong"),T9o=o("led"),M9o=o(" \u2014 "),XD=a("a"),E9o=o("LEDForSequenceClassification"),C9o=o(" (LED model)"),w9o=l(),J1=a("li"),efe=a("strong"),A9o=o("longformer"),y9o=o(" \u2014 "),zD=a("a"),L9o=o("LongformerForSequenceClassification"),x9o=o(" (Longformer model)"),$9o=l(),Y1=a("li"),ofe=a("strong"),k9o=o("mbart"),S9o=o(" \u2014 "),QD=a("a"),R9o=o("MBartForSequenceClassification"),B9o=o(" (mBART model)"),P9o=l(),K1=a("li"),rfe=a("strong"),I9o=o("megatron-bert"),q9o=o(" \u2014 "),WD=a("a"),N9o=o("MegatronBertForSequenceClassification"),j9o=o(" (MegatronBert model)"),D9o=l(),Z1=a("li"),tfe=a("strong"),G9o=o("mobilebert"),O9o=o(" \u2014 "),HD=a("a"),V9o=o("MobileBertForSequenceClassification"),X9o=o(" (MobileBERT model)"),z9o=l(),eb=a("li"),afe=a("strong"),Q9o=o("mpnet"),W9o=o(" \u2014 "),UD=a("a"),H9o=o("MPNetForSequenceClassification"),U9o=o(" (MPNet model)"),J9o=l(),ob=a("li"),nfe=a("strong"),Y9o=o("nystromformer"),K9o=o(" \u2014 "),JD=a("a"),Z9o=o("NystromformerForSequenceClassification"),e$o=o(" (Nystromformer model)"),o$o=l(),rb=a("li"),sfe=a("strong"),r$o=o("openai-gpt"),t$o=o(" \u2014 "),YD=a("a"),a$o=o("OpenAIGPTForSequenceClassification"),n$o=o(" (OpenAI GPT model)"),s$o=l(),tb=a("li"),lfe=a("strong"),l$o=o("perceiver"),i$o=o(" \u2014 "),KD=a("a"),d$o=o("PerceiverForSequenceClassification"),c$o=o(" (Perceiver model)"),f$o=l(),ab=a("li"),ife=a("strong"),m$o=o("plbart"),g$o=o(" \u2014 "),ZD=a("a"),h$o=o("PLBartForSequenceClassification"),p$o=o(" (PLBart model)"),u$o=l(),nb=a("li"),dfe=a("strong"),_$o=o("qdqbert"),b$o=o(" \u2014 "),eG=a("a"),v$o=o("QDQBertForSequenceClassification"),F$o=o(" (QDQBert model)"),T$o=l(),sb=a("li"),cfe=a("strong"),M$o=o("reformer"),E$o=o(" \u2014 "),oG=a("a"),C$o=o("ReformerForSequenceClassification"),w$o=o(" (Reformer model)"),A$o=l(),lb=a("li"),ffe=a("strong"),y$o=o("rembert"),L$o=o(" \u2014 "),rG=a("a"),x$o=o("RemBertForSequenceClassification"),$$o=o(" (RemBERT model)"),k$o=l(),ib=a("li"),mfe=a("strong"),S$o=o("roberta"),R$o=o(" \u2014 "),tG=a("a"),B$o=o("RobertaForSequenceClassification"),P$o=o(" (RoBERTa model)"),I$o=l(),db=a("li"),gfe=a("strong"),q$o=o("roformer"),N$o=o(" \u2014 "),aG=a("a"),j$o=o("RoFormerForSequenceClassification"),D$o=o(" (RoFormer model)"),G$o=l(),cb=a("li"),hfe=a("strong"),O$o=o("squeezebert"),V$o=o(" \u2014 "),nG=a("a"),X$o=o("SqueezeBertForSequenceClassification"),z$o=o(" (SqueezeBERT model)"),Q$o=l(),fb=a("li"),pfe=a("strong"),W$o=o("tapas"),H$o=o(" \u2014 "),sG=a("a"),U$o=o("TapasForSequenceClassification"),J$o=o(" (TAPAS model)"),Y$o=l(),mb=a("li"),ufe=a("strong"),K$o=o("tapex"),Z$o=o(" \u2014 "),lG=a("a"),eko=o("BartForSequenceClassification"),oko=o(" (TAPEX model)"),rko=l(),gb=a("li"),_fe=a("strong"),tko=o("transfo-xl"),ako=o(" \u2014 "),iG=a("a"),nko=o("TransfoXLForSequenceClassification"),sko=o(" (Transformer-XL model)"),lko=l(),hb=a("li"),bfe=a("strong"),iko=o("xlm"),dko=o(" \u2014 "),dG=a("a"),cko=o("XLMForSequenceClassification"),fko=o(" (XLM model)"),mko=l(),pb=a("li"),vfe=a("strong"),gko=o("xlm-roberta"),hko=o(" \u2014 "),cG=a("a"),pko=o("XLMRobertaForSequenceClassification"),uko=o(" (XLM-RoBERTa model)"),_ko=l(),ub=a("li"),Ffe=a("strong"),bko=o("xlm-roberta-xl"),vko=o(" \u2014 "),fG=a("a"),Fko=o("XLMRobertaXLForSequenceClassification"),Tko=o(" (XLM-RoBERTa-XL model)"),Mko=l(),_b=a("li"),Tfe=a("strong"),Eko=o("xlnet"),Cko=o(" \u2014 "),mG=a("a"),wko=o("XLNetForSequenceClassification"),Ako=o(" (XLNet model)"),yko=l(),bb=a("li"),Mfe=a("strong"),Lko=o("yoso"),xko=o(" \u2014 "),gG=a("a"),$ko=o("YosoForSequenceClassification"),kko=o(" (YOSO model)"),Sko=l(),vb=a("p"),Rko=o("The model is set in evaluation mode by default using "),Efe=a("code"),Bko=o("model.eval()"),Pko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cfe=a("code"),Iko=o("model.train()"),qko=l(),F(Fb.$$.fragment),BIe=l(),ji=a("h2"),Tb=a("a"),wfe=a("span"),F(ay.$$.fragment),Nko=l(),Afe=a("span"),jko=o("AutoModelForMultipleChoice"),PIe=l(),Bo=a("div"),F(ny.$$.fragment),Dko=l(),Di=a("p"),Gko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hG=a("a"),Oko=o("from_pretrained()"),Vko=o(" class method or the "),pG=a("a"),Xko=o("from_config()"),zko=o(` class
method.`),Qko=l(),sy=a("p"),Wko=o("This class cannot be instantiated directly using "),yfe=a("code"),Hko=o("__init__()"),Uko=o(" (throws an error)."),Jko=l(),lt=a("div"),F(ly.$$.fragment),Yko=l(),Lfe=a("p"),Kko=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Zko=l(),Gi=a("p"),eSo=o(`Note:
Loading a model from its configuration file does `),xfe=a("strong"),oSo=o("not"),rSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uG=a("a"),tSo=o("from_pretrained()"),aSo=o(" to load the model weights."),nSo=l(),F(Mb.$$.fragment),sSo=l(),eo=a("div"),F(iy.$$.fragment),lSo=l(),$fe=a("p"),iSo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dSo=l(),Sa=a("p"),cSo=o("The model class to instantiate is selected based on the "),kfe=a("code"),fSo=o("model_type"),mSo=o(` property of the config object (either
passed as an argument or loaded from `),Sfe=a("code"),gSo=o("pretrained_model_name_or_path"),hSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rfe=a("code"),pSo=o("pretrained_model_name_or_path"),uSo=o(":"),_So=l(),Y=a("ul"),Eb=a("li"),Bfe=a("strong"),bSo=o("albert"),vSo=o(" \u2014 "),_G=a("a"),FSo=o("AlbertForMultipleChoice"),TSo=o(" (ALBERT model)"),MSo=l(),Cb=a("li"),Pfe=a("strong"),ESo=o("bert"),CSo=o(" \u2014 "),bG=a("a"),wSo=o("BertForMultipleChoice"),ASo=o(" (BERT model)"),ySo=l(),wb=a("li"),Ife=a("strong"),LSo=o("big_bird"),xSo=o(" \u2014 "),vG=a("a"),$So=o("BigBirdForMultipleChoice"),kSo=o(" (BigBird model)"),SSo=l(),Ab=a("li"),qfe=a("strong"),RSo=o("camembert"),BSo=o(" \u2014 "),FG=a("a"),PSo=o("CamembertForMultipleChoice"),ISo=o(" (CamemBERT model)"),qSo=l(),yb=a("li"),Nfe=a("strong"),NSo=o("canine"),jSo=o(" \u2014 "),TG=a("a"),DSo=o("CanineForMultipleChoice"),GSo=o(" (Canine model)"),OSo=l(),Lb=a("li"),jfe=a("strong"),VSo=o("convbert"),XSo=o(" \u2014 "),MG=a("a"),zSo=o("ConvBertForMultipleChoice"),QSo=o(" (ConvBERT model)"),WSo=l(),xb=a("li"),Dfe=a("strong"),HSo=o("data2vec-text"),USo=o(" \u2014 "),EG=a("a"),JSo=o("Data2VecTextForMultipleChoice"),YSo=o(" (Data2VecText model)"),KSo=l(),$b=a("li"),Gfe=a("strong"),ZSo=o("deberta-v2"),eRo=o(" \u2014 "),CG=a("a"),oRo=o("DebertaV2ForMultipleChoice"),rRo=o(" (DeBERTa-v2 model)"),tRo=l(),kb=a("li"),Ofe=a("strong"),aRo=o("distilbert"),nRo=o(" \u2014 "),wG=a("a"),sRo=o("DistilBertForMultipleChoice"),lRo=o(" (DistilBERT model)"),iRo=l(),Sb=a("li"),Vfe=a("strong"),dRo=o("electra"),cRo=o(" \u2014 "),AG=a("a"),fRo=o("ElectraForMultipleChoice"),mRo=o(" (ELECTRA model)"),gRo=l(),Rb=a("li"),Xfe=a("strong"),hRo=o("flaubert"),pRo=o(" \u2014 "),yG=a("a"),uRo=o("FlaubertForMultipleChoice"),_Ro=o(" (FlauBERT model)"),bRo=l(),Bb=a("li"),zfe=a("strong"),vRo=o("fnet"),FRo=o(" \u2014 "),LG=a("a"),TRo=o("FNetForMultipleChoice"),MRo=o(" (FNet model)"),ERo=l(),Pb=a("li"),Qfe=a("strong"),CRo=o("funnel"),wRo=o(" \u2014 "),xG=a("a"),ARo=o("FunnelForMultipleChoice"),yRo=o(" (Funnel Transformer model)"),LRo=l(),Ib=a("li"),Wfe=a("strong"),xRo=o("ibert"),$Ro=o(" \u2014 "),$G=a("a"),kRo=o("IBertForMultipleChoice"),SRo=o(" (I-BERT model)"),RRo=l(),qb=a("li"),Hfe=a("strong"),BRo=o("longformer"),PRo=o(" \u2014 "),kG=a("a"),IRo=o("LongformerForMultipleChoice"),qRo=o(" (Longformer model)"),NRo=l(),Nb=a("li"),Ufe=a("strong"),jRo=o("megatron-bert"),DRo=o(" \u2014 "),SG=a("a"),GRo=o("MegatronBertForMultipleChoice"),ORo=o(" (MegatronBert model)"),VRo=l(),jb=a("li"),Jfe=a("strong"),XRo=o("mobilebert"),zRo=o(" \u2014 "),RG=a("a"),QRo=o("MobileBertForMultipleChoice"),WRo=o(" (MobileBERT model)"),HRo=l(),Db=a("li"),Yfe=a("strong"),URo=o("mpnet"),JRo=o(" \u2014 "),BG=a("a"),YRo=o("MPNetForMultipleChoice"),KRo=o(" (MPNet model)"),ZRo=l(),Gb=a("li"),Kfe=a("strong"),eBo=o("nystromformer"),oBo=o(" \u2014 "),PG=a("a"),rBo=o("NystromformerForMultipleChoice"),tBo=o(" (Nystromformer model)"),aBo=l(),Ob=a("li"),Zfe=a("strong"),nBo=o("qdqbert"),sBo=o(" \u2014 "),IG=a("a"),lBo=o("QDQBertForMultipleChoice"),iBo=o(" (QDQBert model)"),dBo=l(),Vb=a("li"),eme=a("strong"),cBo=o("rembert"),fBo=o(" \u2014 "),qG=a("a"),mBo=o("RemBertForMultipleChoice"),gBo=o(" (RemBERT model)"),hBo=l(),Xb=a("li"),ome=a("strong"),pBo=o("roberta"),uBo=o(" \u2014 "),NG=a("a"),_Bo=o("RobertaForMultipleChoice"),bBo=o(" (RoBERTa model)"),vBo=l(),zb=a("li"),rme=a("strong"),FBo=o("roformer"),TBo=o(" \u2014 "),jG=a("a"),MBo=o("RoFormerForMultipleChoice"),EBo=o(" (RoFormer model)"),CBo=l(),Qb=a("li"),tme=a("strong"),wBo=o("squeezebert"),ABo=o(" \u2014 "),DG=a("a"),yBo=o("SqueezeBertForMultipleChoice"),LBo=o(" (SqueezeBERT model)"),xBo=l(),Wb=a("li"),ame=a("strong"),$Bo=o("xlm"),kBo=o(" \u2014 "),GG=a("a"),SBo=o("XLMForMultipleChoice"),RBo=o(" (XLM model)"),BBo=l(),Hb=a("li"),nme=a("strong"),PBo=o("xlm-roberta"),IBo=o(" \u2014 "),OG=a("a"),qBo=o("XLMRobertaForMultipleChoice"),NBo=o(" (XLM-RoBERTa model)"),jBo=l(),Ub=a("li"),sme=a("strong"),DBo=o("xlm-roberta-xl"),GBo=o(" \u2014 "),VG=a("a"),OBo=o("XLMRobertaXLForMultipleChoice"),VBo=o(" (XLM-RoBERTa-XL model)"),XBo=l(),Jb=a("li"),lme=a("strong"),zBo=o("xlnet"),QBo=o(" \u2014 "),XG=a("a"),WBo=o("XLNetForMultipleChoice"),HBo=o(" (XLNet model)"),UBo=l(),Yb=a("li"),ime=a("strong"),JBo=o("yoso"),YBo=o(" \u2014 "),zG=a("a"),KBo=o("YosoForMultipleChoice"),ZBo=o(" (YOSO model)"),ePo=l(),Kb=a("p"),oPo=o("The model is set in evaluation mode by default using "),dme=a("code"),rPo=o("model.eval()"),tPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cme=a("code"),aPo=o("model.train()"),nPo=l(),F(Zb.$$.fragment),IIe=l(),Oi=a("h2"),ev=a("a"),fme=a("span"),F(dy.$$.fragment),sPo=l(),mme=a("span"),lPo=o("AutoModelForNextSentencePrediction"),qIe=l(),Po=a("div"),F(cy.$$.fragment),iPo=l(),Vi=a("p"),dPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),QG=a("a"),cPo=o("from_pretrained()"),fPo=o(" class method or the "),WG=a("a"),mPo=o("from_config()"),gPo=o(` class
method.`),hPo=l(),fy=a("p"),pPo=o("This class cannot be instantiated directly using "),gme=a("code"),uPo=o("__init__()"),_Po=o(" (throws an error)."),bPo=l(),it=a("div"),F(my.$$.fragment),vPo=l(),hme=a("p"),FPo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),TPo=l(),Xi=a("p"),MPo=o(`Note:
Loading a model from its configuration file does `),pme=a("strong"),EPo=o("not"),CPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=a("a"),wPo=o("from_pretrained()"),APo=o(" to load the model weights."),yPo=l(),F(ov.$$.fragment),LPo=l(),oo=a("div"),F(gy.$$.fragment),xPo=l(),ume=a("p"),$Po=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kPo=l(),Ra=a("p"),SPo=o("The model class to instantiate is selected based on the "),_me=a("code"),RPo=o("model_type"),BPo=o(` property of the config object (either
passed as an argument or loaded from `),bme=a("code"),PPo=o("pretrained_model_name_or_path"),IPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vme=a("code"),qPo=o("pretrained_model_name_or_path"),NPo=o(":"),jPo=l(),Yr=a("ul"),rv=a("li"),Fme=a("strong"),DPo=o("bert"),GPo=o(" \u2014 "),UG=a("a"),OPo=o("BertForNextSentencePrediction"),VPo=o(" (BERT model)"),XPo=l(),tv=a("li"),Tme=a("strong"),zPo=o("fnet"),QPo=o(" \u2014 "),JG=a("a"),WPo=o("FNetForNextSentencePrediction"),HPo=o(" (FNet model)"),UPo=l(),av=a("li"),Mme=a("strong"),JPo=o("megatron-bert"),YPo=o(" \u2014 "),YG=a("a"),KPo=o("MegatronBertForNextSentencePrediction"),ZPo=o(" (MegatronBert model)"),eIo=l(),nv=a("li"),Eme=a("strong"),oIo=o("mobilebert"),rIo=o(" \u2014 "),KG=a("a"),tIo=o("MobileBertForNextSentencePrediction"),aIo=o(" (MobileBERT model)"),nIo=l(),sv=a("li"),Cme=a("strong"),sIo=o("qdqbert"),lIo=o(" \u2014 "),ZG=a("a"),iIo=o("QDQBertForNextSentencePrediction"),dIo=o(" (QDQBert model)"),cIo=l(),lv=a("p"),fIo=o("The model is set in evaluation mode by default using "),wme=a("code"),mIo=o("model.eval()"),gIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ame=a("code"),hIo=o("model.train()"),pIo=l(),F(iv.$$.fragment),NIe=l(),zi=a("h2"),dv=a("a"),yme=a("span"),F(hy.$$.fragment),uIo=l(),Lme=a("span"),_Io=o("AutoModelForTokenClassification"),jIe=l(),Io=a("div"),F(py.$$.fragment),bIo=l(),Qi=a("p"),vIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eO=a("a"),FIo=o("from_pretrained()"),TIo=o(" class method or the "),oO=a("a"),MIo=o("from_config()"),EIo=o(` class
method.`),CIo=l(),uy=a("p"),wIo=o("This class cannot be instantiated directly using "),xme=a("code"),AIo=o("__init__()"),yIo=o(" (throws an error)."),LIo=l(),dt=a("div"),F(_y.$$.fragment),xIo=l(),$me=a("p"),$Io=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kIo=l(),Wi=a("p"),SIo=o(`Note:
Loading a model from its configuration file does `),kme=a("strong"),RIo=o("not"),BIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rO=a("a"),PIo=o("from_pretrained()"),IIo=o(" to load the model weights."),qIo=l(),F(cv.$$.fragment),NIo=l(),ro=a("div"),F(by.$$.fragment),jIo=l(),Sme=a("p"),DIo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),GIo=l(),Ba=a("p"),OIo=o("The model class to instantiate is selected based on the "),Rme=a("code"),VIo=o("model_type"),XIo=o(` property of the config object (either
passed as an argument or loaded from `),Bme=a("code"),zIo=o("pretrained_model_name_or_path"),QIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pme=a("code"),WIo=o("pretrained_model_name_or_path"),HIo=o(":"),UIo=l(),U=a("ul"),fv=a("li"),Ime=a("strong"),JIo=o("albert"),YIo=o(" \u2014 "),tO=a("a"),KIo=o("AlbertForTokenClassification"),ZIo=o(" (ALBERT model)"),eqo=l(),mv=a("li"),qme=a("strong"),oqo=o("bert"),rqo=o(" \u2014 "),aO=a("a"),tqo=o("BertForTokenClassification"),aqo=o(" (BERT model)"),nqo=l(),gv=a("li"),Nme=a("strong"),sqo=o("big_bird"),lqo=o(" \u2014 "),nO=a("a"),iqo=o("BigBirdForTokenClassification"),dqo=o(" (BigBird model)"),cqo=l(),hv=a("li"),jme=a("strong"),fqo=o("camembert"),mqo=o(" \u2014 "),sO=a("a"),gqo=o("CamembertForTokenClassification"),hqo=o(" (CamemBERT model)"),pqo=l(),pv=a("li"),Dme=a("strong"),uqo=o("canine"),_qo=o(" \u2014 "),lO=a("a"),bqo=o("CanineForTokenClassification"),vqo=o(" (Canine model)"),Fqo=l(),uv=a("li"),Gme=a("strong"),Tqo=o("convbert"),Mqo=o(" \u2014 "),iO=a("a"),Eqo=o("ConvBertForTokenClassification"),Cqo=o(" (ConvBERT model)"),wqo=l(),_v=a("li"),Ome=a("strong"),Aqo=o("data2vec-text"),yqo=o(" \u2014 "),dO=a("a"),Lqo=o("Data2VecTextForTokenClassification"),xqo=o(" (Data2VecText model)"),$qo=l(),bv=a("li"),Vme=a("strong"),kqo=o("deberta"),Sqo=o(" \u2014 "),cO=a("a"),Rqo=o("DebertaForTokenClassification"),Bqo=o(" (DeBERTa model)"),Pqo=l(),vv=a("li"),Xme=a("strong"),Iqo=o("deberta-v2"),qqo=o(" \u2014 "),fO=a("a"),Nqo=o("DebertaV2ForTokenClassification"),jqo=o(" (DeBERTa-v2 model)"),Dqo=l(),Fv=a("li"),zme=a("strong"),Gqo=o("distilbert"),Oqo=o(" \u2014 "),mO=a("a"),Vqo=o("DistilBertForTokenClassification"),Xqo=o(" (DistilBERT model)"),zqo=l(),Tv=a("li"),Qme=a("strong"),Qqo=o("electra"),Wqo=o(" \u2014 "),gO=a("a"),Hqo=o("ElectraForTokenClassification"),Uqo=o(" (ELECTRA model)"),Jqo=l(),Mv=a("li"),Wme=a("strong"),Yqo=o("flaubert"),Kqo=o(" \u2014 "),hO=a("a"),Zqo=o("FlaubertForTokenClassification"),eNo=o(" (FlauBERT model)"),oNo=l(),Ev=a("li"),Hme=a("strong"),rNo=o("fnet"),tNo=o(" \u2014 "),pO=a("a"),aNo=o("FNetForTokenClassification"),nNo=o(" (FNet model)"),sNo=l(),Cv=a("li"),Ume=a("strong"),lNo=o("funnel"),iNo=o(" \u2014 "),uO=a("a"),dNo=o("FunnelForTokenClassification"),cNo=o(" (Funnel Transformer model)"),fNo=l(),wv=a("li"),Jme=a("strong"),mNo=o("gpt2"),gNo=o(" \u2014 "),_O=a("a"),hNo=o("GPT2ForTokenClassification"),pNo=o(" (OpenAI GPT-2 model)"),uNo=l(),Av=a("li"),Yme=a("strong"),_No=o("ibert"),bNo=o(" \u2014 "),bO=a("a"),vNo=o("IBertForTokenClassification"),FNo=o(" (I-BERT model)"),TNo=l(),yv=a("li"),Kme=a("strong"),MNo=o("layoutlm"),ENo=o(" \u2014 "),vO=a("a"),CNo=o("LayoutLMForTokenClassification"),wNo=o(" (LayoutLM model)"),ANo=l(),Lv=a("li"),Zme=a("strong"),yNo=o("layoutlmv2"),LNo=o(" \u2014 "),FO=a("a"),xNo=o("LayoutLMv2ForTokenClassification"),$No=o(" (LayoutLMv2 model)"),kNo=l(),xv=a("li"),ege=a("strong"),SNo=o("longformer"),RNo=o(" \u2014 "),TO=a("a"),BNo=o("LongformerForTokenClassification"),PNo=o(" (Longformer model)"),INo=l(),$v=a("li"),oge=a("strong"),qNo=o("megatron-bert"),NNo=o(" \u2014 "),MO=a("a"),jNo=o("MegatronBertForTokenClassification"),DNo=o(" (MegatronBert model)"),GNo=l(),kv=a("li"),rge=a("strong"),ONo=o("mobilebert"),VNo=o(" \u2014 "),EO=a("a"),XNo=o("MobileBertForTokenClassification"),zNo=o(" (MobileBERT model)"),QNo=l(),Sv=a("li"),tge=a("strong"),WNo=o("mpnet"),HNo=o(" \u2014 "),CO=a("a"),UNo=o("MPNetForTokenClassification"),JNo=o(" (MPNet model)"),YNo=l(),Rv=a("li"),age=a("strong"),KNo=o("nystromformer"),ZNo=o(" \u2014 "),wO=a("a"),ejo=o("NystromformerForTokenClassification"),ojo=o(" (Nystromformer model)"),rjo=l(),Bv=a("li"),nge=a("strong"),tjo=o("qdqbert"),ajo=o(" \u2014 "),AO=a("a"),njo=o("QDQBertForTokenClassification"),sjo=o(" (QDQBert model)"),ljo=l(),Pv=a("li"),sge=a("strong"),ijo=o("rembert"),djo=o(" \u2014 "),yO=a("a"),cjo=o("RemBertForTokenClassification"),fjo=o(" (RemBERT model)"),mjo=l(),Iv=a("li"),lge=a("strong"),gjo=o("roberta"),hjo=o(" \u2014 "),LO=a("a"),pjo=o("RobertaForTokenClassification"),ujo=o(" (RoBERTa model)"),_jo=l(),qv=a("li"),ige=a("strong"),bjo=o("roformer"),vjo=o(" \u2014 "),xO=a("a"),Fjo=o("RoFormerForTokenClassification"),Tjo=o(" (RoFormer model)"),Mjo=l(),Nv=a("li"),dge=a("strong"),Ejo=o("squeezebert"),Cjo=o(" \u2014 "),$O=a("a"),wjo=o("SqueezeBertForTokenClassification"),Ajo=o(" (SqueezeBERT model)"),yjo=l(),jv=a("li"),cge=a("strong"),Ljo=o("xlm"),xjo=o(" \u2014 "),kO=a("a"),$jo=o("XLMForTokenClassification"),kjo=o(" (XLM model)"),Sjo=l(),Dv=a("li"),fge=a("strong"),Rjo=o("xlm-roberta"),Bjo=o(" \u2014 "),SO=a("a"),Pjo=o("XLMRobertaForTokenClassification"),Ijo=o(" (XLM-RoBERTa model)"),qjo=l(),Gv=a("li"),mge=a("strong"),Njo=o("xlm-roberta-xl"),jjo=o(" \u2014 "),RO=a("a"),Djo=o("XLMRobertaXLForTokenClassification"),Gjo=o(" (XLM-RoBERTa-XL model)"),Ojo=l(),Ov=a("li"),gge=a("strong"),Vjo=o("xlnet"),Xjo=o(" \u2014 "),BO=a("a"),zjo=o("XLNetForTokenClassification"),Qjo=o(" (XLNet model)"),Wjo=l(),Vv=a("li"),hge=a("strong"),Hjo=o("yoso"),Ujo=o(" \u2014 "),PO=a("a"),Jjo=o("YosoForTokenClassification"),Yjo=o(" (YOSO model)"),Kjo=l(),Xv=a("p"),Zjo=o("The model is set in evaluation mode by default using "),pge=a("code"),eDo=o("model.eval()"),oDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=a("code"),rDo=o("model.train()"),tDo=l(),F(zv.$$.fragment),DIe=l(),Hi=a("h2"),Qv=a("a"),_ge=a("span"),F(vy.$$.fragment),aDo=l(),bge=a("span"),nDo=o("AutoModelForQuestionAnswering"),GIe=l(),qo=a("div"),F(Fy.$$.fragment),sDo=l(),Ui=a("p"),lDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IO=a("a"),iDo=o("from_pretrained()"),dDo=o(" class method or the "),qO=a("a"),cDo=o("from_config()"),fDo=o(` class
method.`),mDo=l(),Ty=a("p"),gDo=o("This class cannot be instantiated directly using "),vge=a("code"),hDo=o("__init__()"),pDo=o(" (throws an error)."),uDo=l(),ct=a("div"),F(My.$$.fragment),_Do=l(),Fge=a("p"),bDo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vDo=l(),Ji=a("p"),FDo=o(`Note:
Loading a model from its configuration file does `),Tge=a("strong"),TDo=o("not"),MDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=a("a"),EDo=o("from_pretrained()"),CDo=o(" to load the model weights."),wDo=l(),F(Wv.$$.fragment),ADo=l(),to=a("div"),F(Ey.$$.fragment),yDo=l(),Mge=a("p"),LDo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xDo=l(),Pa=a("p"),$Do=o("The model class to instantiate is selected based on the "),Ege=a("code"),kDo=o("model_type"),SDo=o(` property of the config object (either
passed as an argument or loaded from `),Cge=a("code"),RDo=o("pretrained_model_name_or_path"),BDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wge=a("code"),PDo=o("pretrained_model_name_or_path"),IDo=o(":"),qDo=l(),V=a("ul"),Hv=a("li"),Age=a("strong"),NDo=o("albert"),jDo=o(" \u2014 "),jO=a("a"),DDo=o("AlbertForQuestionAnswering"),GDo=o(" (ALBERT model)"),ODo=l(),Uv=a("li"),yge=a("strong"),VDo=o("bart"),XDo=o(" \u2014 "),DO=a("a"),zDo=o("BartForQuestionAnswering"),QDo=o(" (BART model)"),WDo=l(),Jv=a("li"),Lge=a("strong"),HDo=o("bert"),UDo=o(" \u2014 "),GO=a("a"),JDo=o("BertForQuestionAnswering"),YDo=o(" (BERT model)"),KDo=l(),Yv=a("li"),xge=a("strong"),ZDo=o("big_bird"),eGo=o(" \u2014 "),OO=a("a"),oGo=o("BigBirdForQuestionAnswering"),rGo=o(" (BigBird model)"),tGo=l(),Kv=a("li"),$ge=a("strong"),aGo=o("bigbird_pegasus"),nGo=o(" \u2014 "),VO=a("a"),sGo=o("BigBirdPegasusForQuestionAnswering"),lGo=o(" (BigBirdPegasus model)"),iGo=l(),Zv=a("li"),kge=a("strong"),dGo=o("camembert"),cGo=o(" \u2014 "),XO=a("a"),fGo=o("CamembertForQuestionAnswering"),mGo=o(" (CamemBERT model)"),gGo=l(),eF=a("li"),Sge=a("strong"),hGo=o("canine"),pGo=o(" \u2014 "),zO=a("a"),uGo=o("CanineForQuestionAnswering"),_Go=o(" (Canine model)"),bGo=l(),oF=a("li"),Rge=a("strong"),vGo=o("convbert"),FGo=o(" \u2014 "),QO=a("a"),TGo=o("ConvBertForQuestionAnswering"),MGo=o(" (ConvBERT model)"),EGo=l(),rF=a("li"),Bge=a("strong"),CGo=o("data2vec-text"),wGo=o(" \u2014 "),WO=a("a"),AGo=o("Data2VecTextForQuestionAnswering"),yGo=o(" (Data2VecText model)"),LGo=l(),tF=a("li"),Pge=a("strong"),xGo=o("deberta"),$Go=o(" \u2014 "),HO=a("a"),kGo=o("DebertaForQuestionAnswering"),SGo=o(" (DeBERTa model)"),RGo=l(),aF=a("li"),Ige=a("strong"),BGo=o("deberta-v2"),PGo=o(" \u2014 "),UO=a("a"),IGo=o("DebertaV2ForQuestionAnswering"),qGo=o(" (DeBERTa-v2 model)"),NGo=l(),nF=a("li"),qge=a("strong"),jGo=o("distilbert"),DGo=o(" \u2014 "),JO=a("a"),GGo=o("DistilBertForQuestionAnswering"),OGo=o(" (DistilBERT model)"),VGo=l(),sF=a("li"),Nge=a("strong"),XGo=o("electra"),zGo=o(" \u2014 "),YO=a("a"),QGo=o("ElectraForQuestionAnswering"),WGo=o(" (ELECTRA model)"),HGo=l(),lF=a("li"),jge=a("strong"),UGo=o("flaubert"),JGo=o(" \u2014 "),KO=a("a"),YGo=o("FlaubertForQuestionAnsweringSimple"),KGo=o(" (FlauBERT model)"),ZGo=l(),iF=a("li"),Dge=a("strong"),eOo=o("fnet"),oOo=o(" \u2014 "),ZO=a("a"),rOo=o("FNetForQuestionAnswering"),tOo=o(" (FNet model)"),aOo=l(),dF=a("li"),Gge=a("strong"),nOo=o("funnel"),sOo=o(" \u2014 "),eV=a("a"),lOo=o("FunnelForQuestionAnswering"),iOo=o(" (Funnel Transformer model)"),dOo=l(),cF=a("li"),Oge=a("strong"),cOo=o("gptj"),fOo=o(" \u2014 "),oV=a("a"),mOo=o("GPTJForQuestionAnswering"),gOo=o(" (GPT-J model)"),hOo=l(),fF=a("li"),Vge=a("strong"),pOo=o("ibert"),uOo=o(" \u2014 "),rV=a("a"),_Oo=o("IBertForQuestionAnswering"),bOo=o(" (I-BERT model)"),vOo=l(),mF=a("li"),Xge=a("strong"),FOo=o("layoutlmv2"),TOo=o(" \u2014 "),tV=a("a"),MOo=o("LayoutLMv2ForQuestionAnswering"),EOo=o(" (LayoutLMv2 model)"),COo=l(),gF=a("li"),zge=a("strong"),wOo=o("led"),AOo=o(" \u2014 "),aV=a("a"),yOo=o("LEDForQuestionAnswering"),LOo=o(" (LED model)"),xOo=l(),hF=a("li"),Qge=a("strong"),$Oo=o("longformer"),kOo=o(" \u2014 "),nV=a("a"),SOo=o("LongformerForQuestionAnswering"),ROo=o(" (Longformer model)"),BOo=l(),pF=a("li"),Wge=a("strong"),POo=o("lxmert"),IOo=o(" \u2014 "),sV=a("a"),qOo=o("LxmertForQuestionAnswering"),NOo=o(" (LXMERT model)"),jOo=l(),uF=a("li"),Hge=a("strong"),DOo=o("mbart"),GOo=o(" \u2014 "),lV=a("a"),OOo=o("MBartForQuestionAnswering"),VOo=o(" (mBART model)"),XOo=l(),_F=a("li"),Uge=a("strong"),zOo=o("megatron-bert"),QOo=o(" \u2014 "),iV=a("a"),WOo=o("MegatronBertForQuestionAnswering"),HOo=o(" (MegatronBert model)"),UOo=l(),bF=a("li"),Jge=a("strong"),JOo=o("mobilebert"),YOo=o(" \u2014 "),dV=a("a"),KOo=o("MobileBertForQuestionAnswering"),ZOo=o(" (MobileBERT model)"),eVo=l(),vF=a("li"),Yge=a("strong"),oVo=o("mpnet"),rVo=o(" \u2014 "),cV=a("a"),tVo=o("MPNetForQuestionAnswering"),aVo=o(" (MPNet model)"),nVo=l(),FF=a("li"),Kge=a("strong"),sVo=o("nystromformer"),lVo=o(" \u2014 "),fV=a("a"),iVo=o("NystromformerForQuestionAnswering"),dVo=o(" (Nystromformer model)"),cVo=l(),TF=a("li"),Zge=a("strong"),fVo=o("qdqbert"),mVo=o(" \u2014 "),mV=a("a"),gVo=o("QDQBertForQuestionAnswering"),hVo=o(" (QDQBert model)"),pVo=l(),MF=a("li"),ehe=a("strong"),uVo=o("reformer"),_Vo=o(" \u2014 "),gV=a("a"),bVo=o("ReformerForQuestionAnswering"),vVo=o(" (Reformer model)"),FVo=l(),EF=a("li"),ohe=a("strong"),TVo=o("rembert"),MVo=o(" \u2014 "),hV=a("a"),EVo=o("RemBertForQuestionAnswering"),CVo=o(" (RemBERT model)"),wVo=l(),CF=a("li"),rhe=a("strong"),AVo=o("roberta"),yVo=o(" \u2014 "),pV=a("a"),LVo=o("RobertaForQuestionAnswering"),xVo=o(" (RoBERTa model)"),$Vo=l(),wF=a("li"),the=a("strong"),kVo=o("roformer"),SVo=o(" \u2014 "),uV=a("a"),RVo=o("RoFormerForQuestionAnswering"),BVo=o(" (RoFormer model)"),PVo=l(),AF=a("li"),ahe=a("strong"),IVo=o("splinter"),qVo=o(" \u2014 "),_V=a("a"),NVo=o("SplinterForQuestionAnswering"),jVo=o(" (Splinter model)"),DVo=l(),yF=a("li"),nhe=a("strong"),GVo=o("squeezebert"),OVo=o(" \u2014 "),bV=a("a"),VVo=o("SqueezeBertForQuestionAnswering"),XVo=o(" (SqueezeBERT model)"),zVo=l(),LF=a("li"),she=a("strong"),QVo=o("xlm"),WVo=o(" \u2014 "),vV=a("a"),HVo=o("XLMForQuestionAnsweringSimple"),UVo=o(" (XLM model)"),JVo=l(),xF=a("li"),lhe=a("strong"),YVo=o("xlm-roberta"),KVo=o(" \u2014 "),FV=a("a"),ZVo=o("XLMRobertaForQuestionAnswering"),eXo=o(" (XLM-RoBERTa model)"),oXo=l(),$F=a("li"),ihe=a("strong"),rXo=o("xlm-roberta-xl"),tXo=o(" \u2014 "),TV=a("a"),aXo=o("XLMRobertaXLForQuestionAnswering"),nXo=o(" (XLM-RoBERTa-XL model)"),sXo=l(),kF=a("li"),dhe=a("strong"),lXo=o("xlnet"),iXo=o(" \u2014 "),MV=a("a"),dXo=o("XLNetForQuestionAnsweringSimple"),cXo=o(" (XLNet model)"),fXo=l(),SF=a("li"),che=a("strong"),mXo=o("yoso"),gXo=o(" \u2014 "),EV=a("a"),hXo=o("YosoForQuestionAnswering"),pXo=o(" (YOSO model)"),uXo=l(),RF=a("p"),_Xo=o("The model is set in evaluation mode by default using "),fhe=a("code"),bXo=o("model.eval()"),vXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mhe=a("code"),FXo=o("model.train()"),TXo=l(),F(BF.$$.fragment),OIe=l(),Yi=a("h2"),PF=a("a"),ghe=a("span"),F(Cy.$$.fragment),MXo=l(),hhe=a("span"),EXo=o("AutoModelForTableQuestionAnswering"),VIe=l(),No=a("div"),F(wy.$$.fragment),CXo=l(),Ki=a("p"),wXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),CV=a("a"),AXo=o("from_pretrained()"),yXo=o(" class method or the "),wV=a("a"),LXo=o("from_config()"),xXo=o(` class
method.`),$Xo=l(),Ay=a("p"),kXo=o("This class cannot be instantiated directly using "),phe=a("code"),SXo=o("__init__()"),RXo=o(" (throws an error)."),BXo=l(),ft=a("div"),F(yy.$$.fragment),PXo=l(),uhe=a("p"),IXo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qXo=l(),Zi=a("p"),NXo=o(`Note:
Loading a model from its configuration file does `),_he=a("strong"),jXo=o("not"),DXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=a("a"),GXo=o("from_pretrained()"),OXo=o(" to load the model weights."),VXo=l(),F(IF.$$.fragment),XXo=l(),ao=a("div"),F(Ly.$$.fragment),zXo=l(),bhe=a("p"),QXo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),WXo=l(),Ia=a("p"),HXo=o("The model class to instantiate is selected based on the "),vhe=a("code"),UXo=o("model_type"),JXo=o(` property of the config object (either
passed as an argument or loaded from `),Fhe=a("code"),YXo=o("pretrained_model_name_or_path"),KXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),The=a("code"),ZXo=o("pretrained_model_name_or_path"),ezo=o(":"),ozo=l(),Mhe=a("ul"),qF=a("li"),Ehe=a("strong"),rzo=o("tapas"),tzo=o(" \u2014 "),yV=a("a"),azo=o("TapasForQuestionAnswering"),nzo=o(" (TAPAS model)"),szo=l(),NF=a("p"),lzo=o("The model is set in evaluation mode by default using "),Che=a("code"),izo=o("model.eval()"),dzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),whe=a("code"),czo=o("model.train()"),fzo=l(),F(jF.$$.fragment),XIe=l(),ed=a("h2"),DF=a("a"),Ahe=a("span"),F(xy.$$.fragment),mzo=l(),yhe=a("span"),gzo=o("AutoModelForImageClassification"),zIe=l(),jo=a("div"),F($y.$$.fragment),hzo=l(),od=a("p"),pzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LV=a("a"),uzo=o("from_pretrained()"),_zo=o(" class method or the "),xV=a("a"),bzo=o("from_config()"),vzo=o(` class
method.`),Fzo=l(),ky=a("p"),Tzo=o("This class cannot be instantiated directly using "),Lhe=a("code"),Mzo=o("__init__()"),Ezo=o(" (throws an error)."),Czo=l(),mt=a("div"),F(Sy.$$.fragment),wzo=l(),xhe=a("p"),Azo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yzo=l(),rd=a("p"),Lzo=o(`Note:
Loading a model from its configuration file does `),$he=a("strong"),xzo=o("not"),$zo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$V=a("a"),kzo=o("from_pretrained()"),Szo=o(" to load the model weights."),Rzo=l(),F(GF.$$.fragment),Bzo=l(),no=a("div"),F(Ry.$$.fragment),Pzo=l(),khe=a("p"),Izo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qzo=l(),qa=a("p"),Nzo=o("The model class to instantiate is selected based on the "),She=a("code"),jzo=o("model_type"),Dzo=o(` property of the config object (either
passed as an argument or loaded from `),Rhe=a("code"),Gzo=o("pretrained_model_name_or_path"),Ozo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=a("code"),Vzo=o("pretrained_model_name_or_path"),Xzo=o(":"),zzo=l(),Fe=a("ul"),OF=a("li"),Phe=a("strong"),Qzo=o("beit"),Wzo=o(" \u2014 "),kV=a("a"),Hzo=o("BeitForImageClassification"),Uzo=o(" (BEiT model)"),Jzo=l(),VF=a("li"),Ihe=a("strong"),Yzo=o("convnext"),Kzo=o(" \u2014 "),SV=a("a"),Zzo=o("ConvNextForImageClassification"),eQo=o(" (ConvNext model)"),oQo=l(),XF=a("li"),qhe=a("strong"),rQo=o("data2vec-vision"),tQo=o(" \u2014 "),RV=a("a"),aQo=o("Data2VecVisionForImageClassification"),nQo=o(" (Data2VecVision model)"),sQo=l(),Rs=a("li"),Nhe=a("strong"),lQo=o("deit"),iQo=o(" \u2014 "),BV=a("a"),dQo=o("DeiTForImageClassification"),cQo=o(" or "),PV=a("a"),fQo=o("DeiTForImageClassificationWithTeacher"),mQo=o(" (DeiT model)"),gQo=l(),zF=a("li"),jhe=a("strong"),hQo=o("imagegpt"),pQo=o(" \u2014 "),IV=a("a"),uQo=o("ImageGPTForImageClassification"),_Qo=o(" (ImageGPT model)"),bQo=l(),gt=a("li"),Dhe=a("strong"),vQo=o("perceiver"),FQo=o(" \u2014 "),qV=a("a"),TQo=o("PerceiverForImageClassificationLearned"),MQo=o(" or "),NV=a("a"),EQo=o("PerceiverForImageClassificationFourier"),CQo=o(" or "),jV=a("a"),wQo=o("PerceiverForImageClassificationConvProcessing"),AQo=o(" (Perceiver model)"),yQo=l(),QF=a("li"),Ghe=a("strong"),LQo=o("poolformer"),xQo=o(" \u2014 "),DV=a("a"),$Qo=o("PoolFormerForImageClassification"),kQo=o(" (PoolFormer model)"),SQo=l(),WF=a("li"),Ohe=a("strong"),RQo=o("regnet"),BQo=o(" \u2014 "),GV=a("a"),PQo=o("RegNetForImageClassification"),IQo=o(" (RegNet model)"),qQo=l(),HF=a("li"),Vhe=a("strong"),NQo=o("resnet"),jQo=o(" \u2014 "),OV=a("a"),DQo=o("ResNetForImageClassification"),GQo=o(" (ResNet model)"),OQo=l(),UF=a("li"),Xhe=a("strong"),VQo=o("segformer"),XQo=o(" \u2014 "),VV=a("a"),zQo=o("SegformerForImageClassification"),QQo=o(" (SegFormer model)"),WQo=l(),JF=a("li"),zhe=a("strong"),HQo=o("swin"),UQo=o(" \u2014 "),XV=a("a"),JQo=o("SwinForImageClassification"),YQo=o(" (Swin model)"),KQo=l(),YF=a("li"),Qhe=a("strong"),ZQo=o("van"),eWo=o(" \u2014 "),zV=a("a"),oWo=o("VanForImageClassification"),rWo=o(" (VAN model)"),tWo=l(),KF=a("li"),Whe=a("strong"),aWo=o("vit"),nWo=o(" \u2014 "),QV=a("a"),sWo=o("ViTForImageClassification"),lWo=o(" (ViT model)"),iWo=l(),ZF=a("p"),dWo=o("The model is set in evaluation mode by default using "),Hhe=a("code"),cWo=o("model.eval()"),fWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uhe=a("code"),mWo=o("model.train()"),gWo=l(),F(e0.$$.fragment),QIe=l(),td=a("h2"),o0=a("a"),Jhe=a("span"),F(By.$$.fragment),hWo=l(),Yhe=a("span"),pWo=o("AutoModelForVision2Seq"),WIe=l(),Do=a("div"),F(Py.$$.fragment),uWo=l(),ad=a("p"),_Wo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WV=a("a"),bWo=o("from_pretrained()"),vWo=o(" class method or the "),HV=a("a"),FWo=o("from_config()"),TWo=o(` class
method.`),MWo=l(),Iy=a("p"),EWo=o("This class cannot be instantiated directly using "),Khe=a("code"),CWo=o("__init__()"),wWo=o(" (throws an error)."),AWo=l(),ht=a("div"),F(qy.$$.fragment),yWo=l(),Zhe=a("p"),LWo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xWo=l(),nd=a("p"),$Wo=o(`Note:
Loading a model from its configuration file does `),epe=a("strong"),kWo=o("not"),SWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=a("a"),RWo=o("from_pretrained()"),BWo=o(" to load the model weights."),PWo=l(),F(r0.$$.fragment),IWo=l(),so=a("div"),F(Ny.$$.fragment),qWo=l(),ope=a("p"),NWo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jWo=l(),Na=a("p"),DWo=o("The model class to instantiate is selected based on the "),rpe=a("code"),GWo=o("model_type"),OWo=o(` property of the config object (either
passed as an argument or loaded from `),tpe=a("code"),VWo=o("pretrained_model_name_or_path"),XWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=a("code"),zWo=o("pretrained_model_name_or_path"),QWo=o(":"),WWo=l(),npe=a("ul"),t0=a("li"),spe=a("strong"),HWo=o("vision-encoder-decoder"),UWo=o(" \u2014 "),JV=a("a"),JWo=o("VisionEncoderDecoderModel"),YWo=o(" (Vision Encoder decoder model)"),KWo=l(),a0=a("p"),ZWo=o("The model is set in evaluation mode by default using "),lpe=a("code"),eHo=o("model.eval()"),oHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ipe=a("code"),rHo=o("model.train()"),tHo=l(),F(n0.$$.fragment),HIe=l(),sd=a("h2"),s0=a("a"),dpe=a("span"),F(jy.$$.fragment),aHo=l(),cpe=a("span"),nHo=o("AutoModelForAudioClassification"),UIe=l(),Go=a("div"),F(Dy.$$.fragment),sHo=l(),ld=a("p"),lHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),YV=a("a"),iHo=o("from_pretrained()"),dHo=o(" class method or the "),KV=a("a"),cHo=o("from_config()"),fHo=o(` class
method.`),mHo=l(),Gy=a("p"),gHo=o("This class cannot be instantiated directly using "),fpe=a("code"),hHo=o("__init__()"),pHo=o(" (throws an error)."),uHo=l(),pt=a("div"),F(Oy.$$.fragment),_Ho=l(),mpe=a("p"),bHo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),vHo=l(),id=a("p"),FHo=o(`Note:
Loading a model from its configuration file does `),gpe=a("strong"),THo=o("not"),MHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=a("a"),EHo=o("from_pretrained()"),CHo=o(" to load the model weights."),wHo=l(),F(l0.$$.fragment),AHo=l(),lo=a("div"),F(Vy.$$.fragment),yHo=l(),hpe=a("p"),LHo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),xHo=l(),ja=a("p"),$Ho=o("The model class to instantiate is selected based on the "),ppe=a("code"),kHo=o("model_type"),SHo=o(` property of the config object (either
passed as an argument or loaded from `),upe=a("code"),RHo=o("pretrained_model_name_or_path"),BHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_pe=a("code"),PHo=o("pretrained_model_name_or_path"),IHo=o(":"),qHo=l(),Ne=a("ul"),i0=a("li"),bpe=a("strong"),NHo=o("data2vec-audio"),jHo=o(" \u2014 "),eX=a("a"),DHo=o("Data2VecAudioForSequenceClassification"),GHo=o(" (Data2VecAudio model)"),OHo=l(),d0=a("li"),vpe=a("strong"),VHo=o("hubert"),XHo=o(" \u2014 "),oX=a("a"),zHo=o("HubertForSequenceClassification"),QHo=o(" (Hubert model)"),WHo=l(),c0=a("li"),Fpe=a("strong"),HHo=o("sew"),UHo=o(" \u2014 "),rX=a("a"),JHo=o("SEWForSequenceClassification"),YHo=o(" (SEW model)"),KHo=l(),f0=a("li"),Tpe=a("strong"),ZHo=o("sew-d"),eUo=o(" \u2014 "),tX=a("a"),oUo=o("SEWDForSequenceClassification"),rUo=o(" (SEW-D model)"),tUo=l(),m0=a("li"),Mpe=a("strong"),aUo=o("unispeech"),nUo=o(" \u2014 "),aX=a("a"),sUo=o("UniSpeechForSequenceClassification"),lUo=o(" (UniSpeech model)"),iUo=l(),g0=a("li"),Epe=a("strong"),dUo=o("unispeech-sat"),cUo=o(" \u2014 "),nX=a("a"),fUo=o("UniSpeechSatForSequenceClassification"),mUo=o(" (UniSpeechSat model)"),gUo=l(),h0=a("li"),Cpe=a("strong"),hUo=o("wav2vec2"),pUo=o(" \u2014 "),sX=a("a"),uUo=o("Wav2Vec2ForSequenceClassification"),_Uo=o(" (Wav2Vec2 model)"),bUo=l(),p0=a("li"),wpe=a("strong"),vUo=o("wavlm"),FUo=o(" \u2014 "),lX=a("a"),TUo=o("WavLMForSequenceClassification"),MUo=o(" (WavLM model)"),EUo=l(),u0=a("p"),CUo=o("The model is set in evaluation mode by default using "),Ape=a("code"),wUo=o("model.eval()"),AUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ype=a("code"),yUo=o("model.train()"),LUo=l(),F(_0.$$.fragment),JIe=l(),dd=a("h2"),b0=a("a"),Lpe=a("span"),F(Xy.$$.fragment),xUo=l(),xpe=a("span"),$Uo=o("AutoModelForAudioFrameClassification"),YIe=l(),Oo=a("div"),F(zy.$$.fragment),kUo=l(),cd=a("p"),SUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),iX=a("a"),RUo=o("from_pretrained()"),BUo=o(" class method or the "),dX=a("a"),PUo=o("from_config()"),IUo=o(` class
method.`),qUo=l(),Qy=a("p"),NUo=o("This class cannot be instantiated directly using "),$pe=a("code"),jUo=o("__init__()"),DUo=o(" (throws an error)."),GUo=l(),ut=a("div"),F(Wy.$$.fragment),OUo=l(),kpe=a("p"),VUo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),XUo=l(),fd=a("p"),zUo=o(`Note:
Loading a model from its configuration file does `),Spe=a("strong"),QUo=o("not"),WUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=a("a"),HUo=o("from_pretrained()"),UUo=o(" to load the model weights."),JUo=l(),F(v0.$$.fragment),YUo=l(),io=a("div"),F(Hy.$$.fragment),KUo=l(),Rpe=a("p"),ZUo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),eJo=l(),Da=a("p"),oJo=o("The model class to instantiate is selected based on the "),Bpe=a("code"),rJo=o("model_type"),tJo=o(` property of the config object (either
passed as an argument or loaded from `),Ppe=a("code"),aJo=o("pretrained_model_name_or_path"),nJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ipe=a("code"),sJo=o("pretrained_model_name_or_path"),lJo=o(":"),iJo=l(),Ga=a("ul"),F0=a("li"),qpe=a("strong"),dJo=o("data2vec-audio"),cJo=o(" \u2014 "),fX=a("a"),fJo=o("Data2VecAudioForAudioFrameClassification"),mJo=o(" (Data2VecAudio model)"),gJo=l(),T0=a("li"),Npe=a("strong"),hJo=o("unispeech-sat"),pJo=o(" \u2014 "),mX=a("a"),uJo=o("UniSpeechSatForAudioFrameClassification"),_Jo=o(" (UniSpeechSat model)"),bJo=l(),M0=a("li"),jpe=a("strong"),vJo=o("wav2vec2"),FJo=o(" \u2014 "),gX=a("a"),TJo=o("Wav2Vec2ForAudioFrameClassification"),MJo=o(" (Wav2Vec2 model)"),EJo=l(),E0=a("li"),Dpe=a("strong"),CJo=o("wavlm"),wJo=o(" \u2014 "),hX=a("a"),AJo=o("WavLMForAudioFrameClassification"),yJo=o(" (WavLM model)"),LJo=l(),C0=a("p"),xJo=o("The model is set in evaluation mode by default using "),Gpe=a("code"),$Jo=o("model.eval()"),kJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ope=a("code"),SJo=o("model.train()"),RJo=l(),F(w0.$$.fragment),KIe=l(),md=a("h2"),A0=a("a"),Vpe=a("span"),F(Uy.$$.fragment),BJo=l(),Xpe=a("span"),PJo=o("AutoModelForCTC"),ZIe=l(),Vo=a("div"),F(Jy.$$.fragment),IJo=l(),gd=a("p"),qJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),pX=a("a"),NJo=o("from_pretrained()"),jJo=o(" class method or the "),uX=a("a"),DJo=o("from_config()"),GJo=o(` class
method.`),OJo=l(),Yy=a("p"),VJo=o("This class cannot be instantiated directly using "),zpe=a("code"),XJo=o("__init__()"),zJo=o(" (throws an error)."),QJo=l(),_t=a("div"),F(Ky.$$.fragment),WJo=l(),Qpe=a("p"),HJo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),UJo=l(),hd=a("p"),JJo=o(`Note:
Loading a model from its configuration file does `),Wpe=a("strong"),YJo=o("not"),KJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=a("a"),ZJo=o("from_pretrained()"),eYo=o(" to load the model weights."),oYo=l(),F(y0.$$.fragment),rYo=l(),co=a("div"),F(Zy.$$.fragment),tYo=l(),Hpe=a("p"),aYo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),nYo=l(),Oa=a("p"),sYo=o("The model class to instantiate is selected based on the "),Upe=a("code"),lYo=o("model_type"),iYo=o(` property of the config object (either
passed as an argument or loaded from `),Jpe=a("code"),dYo=o("pretrained_model_name_or_path"),cYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ype=a("code"),fYo=o("pretrained_model_name_or_path"),mYo=o(":"),gYo=l(),je=a("ul"),L0=a("li"),Kpe=a("strong"),hYo=o("data2vec-audio"),pYo=o(" \u2014 "),bX=a("a"),uYo=o("Data2VecAudioForCTC"),_Yo=o(" (Data2VecAudio model)"),bYo=l(),x0=a("li"),Zpe=a("strong"),vYo=o("hubert"),FYo=o(" \u2014 "),vX=a("a"),TYo=o("HubertForCTC"),MYo=o(" (Hubert model)"),EYo=l(),$0=a("li"),eue=a("strong"),CYo=o("sew"),wYo=o(" \u2014 "),FX=a("a"),AYo=o("SEWForCTC"),yYo=o(" (SEW model)"),LYo=l(),k0=a("li"),oue=a("strong"),xYo=o("sew-d"),$Yo=o(" \u2014 "),TX=a("a"),kYo=o("SEWDForCTC"),SYo=o(" (SEW-D model)"),RYo=l(),S0=a("li"),rue=a("strong"),BYo=o("unispeech"),PYo=o(" \u2014 "),MX=a("a"),IYo=o("UniSpeechForCTC"),qYo=o(" (UniSpeech model)"),NYo=l(),R0=a("li"),tue=a("strong"),jYo=o("unispeech-sat"),DYo=o(" \u2014 "),EX=a("a"),GYo=o("UniSpeechSatForCTC"),OYo=o(" (UniSpeechSat model)"),VYo=l(),B0=a("li"),aue=a("strong"),XYo=o("wav2vec2"),zYo=o(" \u2014 "),CX=a("a"),QYo=o("Wav2Vec2ForCTC"),WYo=o(" (Wav2Vec2 model)"),HYo=l(),P0=a("li"),nue=a("strong"),UYo=o("wavlm"),JYo=o(" \u2014 "),wX=a("a"),YYo=o("WavLMForCTC"),KYo=o(" (WavLM model)"),ZYo=l(),I0=a("p"),eKo=o("The model is set in evaluation mode by default using "),sue=a("code"),oKo=o("model.eval()"),rKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=a("code"),tKo=o("model.train()"),aKo=l(),F(q0.$$.fragment),eqe=l(),pd=a("h2"),N0=a("a"),iue=a("span"),F(eL.$$.fragment),nKo=l(),due=a("span"),sKo=o("AutoModelForSpeechSeq2Seq"),oqe=l(),Xo=a("div"),F(oL.$$.fragment),lKo=l(),ud=a("p"),iKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),AX=a("a"),dKo=o("from_pretrained()"),cKo=o(" class method or the "),yX=a("a"),fKo=o("from_config()"),mKo=o(` class
method.`),gKo=l(),rL=a("p"),hKo=o("This class cannot be instantiated directly using "),cue=a("code"),pKo=o("__init__()"),uKo=o(" (throws an error)."),_Ko=l(),bt=a("div"),F(tL.$$.fragment),bKo=l(),fue=a("p"),vKo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),FKo=l(),_d=a("p"),TKo=o(`Note:
Loading a model from its configuration file does `),mue=a("strong"),MKo=o("not"),EKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=a("a"),CKo=o("from_pretrained()"),wKo=o(" to load the model weights."),AKo=l(),F(j0.$$.fragment),yKo=l(),fo=a("div"),F(aL.$$.fragment),LKo=l(),gue=a("p"),xKo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),$Ko=l(),Va=a("p"),kKo=o("The model class to instantiate is selected based on the "),hue=a("code"),SKo=o("model_type"),RKo=o(` property of the config object (either
passed as an argument or loaded from `),pue=a("code"),BKo=o("pretrained_model_name_or_path"),PKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=a("code"),IKo=o("pretrained_model_name_or_path"),qKo=o(":"),NKo=l(),nL=a("ul"),D0=a("li"),_ue=a("strong"),jKo=o("speech-encoder-decoder"),DKo=o(" \u2014 "),xX=a("a"),GKo=o("SpeechEncoderDecoderModel"),OKo=o(" (Speech Encoder decoder model)"),VKo=l(),G0=a("li"),bue=a("strong"),XKo=o("speech_to_text"),zKo=o(" \u2014 "),$X=a("a"),QKo=o("Speech2TextForConditionalGeneration"),WKo=o(" (Speech2Text model)"),HKo=l(),O0=a("p"),UKo=o("The model is set in evaluation mode by default using "),vue=a("code"),JKo=o("model.eval()"),YKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=a("code"),KKo=o("model.train()"),ZKo=l(),F(V0.$$.fragment),rqe=l(),bd=a("h2"),X0=a("a"),Tue=a("span"),F(sL.$$.fragment),eZo=l(),Mue=a("span"),oZo=o("AutoModelForAudioXVector"),tqe=l(),zo=a("div"),F(lL.$$.fragment),rZo=l(),vd=a("p"),tZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),kX=a("a"),aZo=o("from_pretrained()"),nZo=o(" class method or the "),SX=a("a"),sZo=o("from_config()"),lZo=o(` class
method.`),iZo=l(),iL=a("p"),dZo=o("This class cannot be instantiated directly using "),Eue=a("code"),cZo=o("__init__()"),fZo=o(" (throws an error)."),mZo=l(),vt=a("div"),F(dL.$$.fragment),gZo=l(),Cue=a("p"),hZo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),pZo=l(),Fd=a("p"),uZo=o(`Note:
Loading a model from its configuration file does `),wue=a("strong"),_Zo=o("not"),bZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=a("a"),vZo=o("from_pretrained()"),FZo=o(" to load the model weights."),TZo=l(),F(z0.$$.fragment),MZo=l(),mo=a("div"),F(cL.$$.fragment),EZo=l(),Aue=a("p"),CZo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),wZo=l(),Xa=a("p"),AZo=o("The model class to instantiate is selected based on the "),yue=a("code"),yZo=o("model_type"),LZo=o(` property of the config object (either
passed as an argument or loaded from `),Lue=a("code"),xZo=o("pretrained_model_name_or_path"),$Zo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=a("code"),kZo=o("pretrained_model_name_or_path"),SZo=o(":"),RZo=l(),za=a("ul"),Q0=a("li"),$ue=a("strong"),BZo=o("data2vec-audio"),PZo=o(" \u2014 "),BX=a("a"),IZo=o("Data2VecAudioForXVector"),qZo=o(" (Data2VecAudio model)"),NZo=l(),W0=a("li"),kue=a("strong"),jZo=o("unispeech-sat"),DZo=o(" \u2014 "),PX=a("a"),GZo=o("UniSpeechSatForXVector"),OZo=o(" (UniSpeechSat model)"),VZo=l(),H0=a("li"),Sue=a("strong"),XZo=o("wav2vec2"),zZo=o(" \u2014 "),IX=a("a"),QZo=o("Wav2Vec2ForXVector"),WZo=o(" (Wav2Vec2 model)"),HZo=l(),U0=a("li"),Rue=a("strong"),UZo=o("wavlm"),JZo=o(" \u2014 "),qX=a("a"),YZo=o("WavLMForXVector"),KZo=o(" (WavLM model)"),ZZo=l(),J0=a("p"),eer=o("The model is set in evaluation mode by default using "),Bue=a("code"),oer=o("model.eval()"),rer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=a("code"),ter=o("model.train()"),aer=l(),F(Y0.$$.fragment),aqe=l(),Td=a("h2"),K0=a("a"),Iue=a("span"),F(fL.$$.fragment),ner=l(),que=a("span"),ser=o("AutoModelForMaskedImageModeling"),nqe=l(),Qo=a("div"),F(mL.$$.fragment),ler=l(),Md=a("p"),ier=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),NX=a("a"),der=o("from_pretrained()"),cer=o(" class method or the "),jX=a("a"),fer=o("from_config()"),mer=o(` class
method.`),ger=l(),gL=a("p"),her=o("This class cannot be instantiated directly using "),Nue=a("code"),per=o("__init__()"),uer=o(" (throws an error)."),_er=l(),Ft=a("div"),F(hL.$$.fragment),ber=l(),jue=a("p"),ver=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Fer=l(),Ed=a("p"),Ter=o(`Note:
Loading a model from its configuration file does `),Due=a("strong"),Mer=o("not"),Eer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),Cer=o("from_pretrained()"),wer=o(" to load the model weights."),Aer=l(),F(Z0.$$.fragment),yer=l(),go=a("div"),F(pL.$$.fragment),Ler=l(),Gue=a("p"),xer=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),$er=l(),Qa=a("p"),ker=o("The model class to instantiate is selected based on the "),Oue=a("code"),Ser=o("model_type"),Rer=o(` property of the config object (either
passed as an argument or loaded from `),Vue=a("code"),Ber=o("pretrained_model_name_or_path"),Per=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xue=a("code"),Ier=o("pretrained_model_name_or_path"),qer=o(":"),Ner=l(),Cd=a("ul"),eT=a("li"),zue=a("strong"),jer=o("deit"),Der=o(" \u2014 "),GX=a("a"),Ger=o("DeiTForMaskedImageModeling"),Oer=o(" (DeiT model)"),Ver=l(),oT=a("li"),Que=a("strong"),Xer=o("swin"),zer=o(" \u2014 "),OX=a("a"),Qer=o("SwinForMaskedImageModeling"),Wer=o(" (Swin model)"),Her=l(),rT=a("li"),Wue=a("strong"),Uer=o("vit"),Jer=o(" \u2014 "),VX=a("a"),Yer=o("ViTForMaskedImageModeling"),Ker=o(" (ViT model)"),Zer=l(),tT=a("p"),eor=o("The model is set in evaluation mode by default using "),Hue=a("code"),oor=o("model.eval()"),ror=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=a("code"),tor=o("model.train()"),aor=l(),F(aT.$$.fragment),sqe=l(),wd=a("h2"),nT=a("a"),Jue=a("span"),F(uL.$$.fragment),nor=l(),Yue=a("span"),sor=o("AutoModelForObjectDetection"),lqe=l(),Wo=a("div"),F(_L.$$.fragment),lor=l(),Ad=a("p"),ior=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),XX=a("a"),dor=o("from_pretrained()"),cor=o(" class method or the "),zX=a("a"),mor=o("from_config()"),gor=o(` class
method.`),hor=l(),bL=a("p"),por=o("This class cannot be instantiated directly using "),Kue=a("code"),uor=o("__init__()"),_or=o(" (throws an error)."),bor=l(),Tt=a("div"),F(vL.$$.fragment),vor=l(),Zue=a("p"),For=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Tor=l(),yd=a("p"),Mor=o(`Note:
Loading a model from its configuration file does `),e_e=a("strong"),Eor=o("not"),Cor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=a("a"),wor=o("from_pretrained()"),Aor=o(" to load the model weights."),yor=l(),F(sT.$$.fragment),Lor=l(),ho=a("div"),F(FL.$$.fragment),xor=l(),o_e=a("p"),$or=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),kor=l(),Wa=a("p"),Sor=o("The model class to instantiate is selected based on the "),r_e=a("code"),Ror=o("model_type"),Bor=o(` property of the config object (either
passed as an argument or loaded from `),t_e=a("code"),Por=o("pretrained_model_name_or_path"),Ior=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=a("code"),qor=o("pretrained_model_name_or_path"),Nor=o(":"),jor=l(),TL=a("ul"),lT=a("li"),n_e=a("strong"),Dor=o("detr"),Gor=o(" \u2014 "),WX=a("a"),Oor=o("DetrForObjectDetection"),Vor=o(" (DETR model)"),Xor=l(),iT=a("li"),s_e=a("strong"),zor=o("yolos"),Qor=o(" \u2014 "),HX=a("a"),Wor=o("YolosForObjectDetection"),Hor=o(" (YOLOS model)"),Uor=l(),dT=a("p"),Jor=o("The model is set in evaluation mode by default using "),l_e=a("code"),Yor=o("model.eval()"),Kor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=a("code"),Zor=o("model.train()"),err=l(),F(cT.$$.fragment),iqe=l(),Ld=a("h2"),fT=a("a"),d_e=a("span"),F(ML.$$.fragment),orr=l(),c_e=a("span"),rrr=o("AutoModelForImageSegmentation"),dqe=l(),Ho=a("div"),F(EL.$$.fragment),trr=l(),xd=a("p"),arr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),UX=a("a"),nrr=o("from_pretrained()"),srr=o(" class method or the "),JX=a("a"),lrr=o("from_config()"),irr=o(` class
method.`),drr=l(),CL=a("p"),crr=o("This class cannot be instantiated directly using "),f_e=a("code"),frr=o("__init__()"),mrr=o(" (throws an error)."),grr=l(),Mt=a("div"),F(wL.$$.fragment),hrr=l(),m_e=a("p"),prr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),urr=l(),$d=a("p"),_rr=o(`Note:
Loading a model from its configuration file does `),g_e=a("strong"),brr=o("not"),vrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=a("a"),Frr=o("from_pretrained()"),Trr=o(" to load the model weights."),Mrr=l(),F(mT.$$.fragment),Err=l(),po=a("div"),F(AL.$$.fragment),Crr=l(),h_e=a("p"),wrr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Arr=l(),Ha=a("p"),yrr=o("The model class to instantiate is selected based on the "),p_e=a("code"),Lrr=o("model_type"),xrr=o(` property of the config object (either
passed as an argument or loaded from `),u_e=a("code"),$rr=o("pretrained_model_name_or_path"),krr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=a("code"),Srr=o("pretrained_model_name_or_path"),Rrr=o(":"),Brr=l(),b_e=a("ul"),gT=a("li"),v_e=a("strong"),Prr=o("detr"),Irr=o(" \u2014 "),KX=a("a"),qrr=o("DetrForSegmentation"),Nrr=o(" (DETR model)"),jrr=l(),hT=a("p"),Drr=o("The model is set in evaluation mode by default using "),F_e=a("code"),Grr=o("model.eval()"),Orr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=a("code"),Vrr=o("model.train()"),Xrr=l(),F(pT.$$.fragment),cqe=l(),kd=a("h2"),uT=a("a"),M_e=a("span"),F(yL.$$.fragment),zrr=l(),E_e=a("span"),Qrr=o("AutoModelForSemanticSegmentation"),fqe=l(),Uo=a("div"),F(LL.$$.fragment),Wrr=l(),Sd=a("p"),Hrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ZX=a("a"),Urr=o("from_pretrained()"),Jrr=o(" class method or the "),ez=a("a"),Yrr=o("from_config()"),Krr=o(` class
method.`),Zrr=l(),xL=a("p"),etr=o("This class cannot be instantiated directly using "),C_e=a("code"),otr=o("__init__()"),rtr=o(" (throws an error)."),ttr=l(),Et=a("div"),F($L.$$.fragment),atr=l(),w_e=a("p"),ntr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),str=l(),Rd=a("p"),ltr=o(`Note:
Loading a model from its configuration file does `),A_e=a("strong"),itr=o("not"),dtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),ctr=o("from_pretrained()"),ftr=o(" to load the model weights."),mtr=l(),F(_T.$$.fragment),gtr=l(),uo=a("div"),F(kL.$$.fragment),htr=l(),y_e=a("p"),ptr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),utr=l(),Ua=a("p"),_tr=o("The model class to instantiate is selected based on the "),L_e=a("code"),btr=o("model_type"),vtr=o(` property of the config object (either
passed as an argument or loaded from `),x_e=a("code"),Ftr=o("pretrained_model_name_or_path"),Ttr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=a("code"),Mtr=o("pretrained_model_name_or_path"),Etr=o(":"),Ctr=l(),Ja=a("ul"),bT=a("li"),k_e=a("strong"),wtr=o("beit"),Atr=o(" \u2014 "),rz=a("a"),ytr=o("BeitForSemanticSegmentation"),Ltr=o(" (BEiT model)"),xtr=l(),vT=a("li"),S_e=a("strong"),$tr=o("data2vec-vision"),ktr=o(" \u2014 "),tz=a("a"),Str=o("Data2VecVisionForSemanticSegmentation"),Rtr=o(" (Data2VecVision model)"),Btr=l(),FT=a("li"),R_e=a("strong"),Ptr=o("dpt"),Itr=o(" \u2014 "),az=a("a"),qtr=o("DPTForSemanticSegmentation"),Ntr=o(" (DPT model)"),jtr=l(),TT=a("li"),B_e=a("strong"),Dtr=o("segformer"),Gtr=o(" \u2014 "),nz=a("a"),Otr=o("SegformerForSemanticSegmentation"),Vtr=o(" (SegFormer model)"),Xtr=l(),MT=a("p"),ztr=o("The model is set in evaluation mode by default using "),P_e=a("code"),Qtr=o("model.eval()"),Wtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I_e=a("code"),Htr=o("model.train()"),Utr=l(),F(ET.$$.fragment),mqe=l(),Bd=a("h2"),CT=a("a"),q_e=a("span"),F(SL.$$.fragment),Jtr=l(),N_e=a("span"),Ytr=o("AutoModelForInstanceSegmentation"),gqe=l(),Jo=a("div"),F(RL.$$.fragment),Ktr=l(),Pd=a("p"),Ztr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),sz=a("a"),ear=o("from_pretrained()"),oar=o(" class method or the "),lz=a("a"),rar=o("from_config()"),tar=o(` class
method.`),aar=l(),BL=a("p"),nar=o("This class cannot be instantiated directly using "),j_e=a("code"),sar=o("__init__()"),lar=o(" (throws an error)."),iar=l(),Ct=a("div"),F(PL.$$.fragment),dar=l(),D_e=a("p"),car=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),far=l(),Id=a("p"),mar=o(`Note:
Loading a model from its configuration file does `),G_e=a("strong"),gar=o("not"),har=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=a("a"),par=o("from_pretrained()"),uar=o(" to load the model weights."),_ar=l(),F(wT.$$.fragment),bar=l(),_o=a("div"),F(IL.$$.fragment),Far=l(),O_e=a("p"),Tar=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Mar=l(),Ya=a("p"),Ear=o("The model class to instantiate is selected based on the "),V_e=a("code"),Car=o("model_type"),war=o(` property of the config object (either
passed as an argument or loaded from `),X_e=a("code"),Aar=o("pretrained_model_name_or_path"),yar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z_e=a("code"),Lar=o("pretrained_model_name_or_path"),xar=o(":"),$ar=l(),Q_e=a("ul"),AT=a("li"),W_e=a("strong"),kar=o("maskformer"),Sar=o(" \u2014 "),dz=a("a"),Rar=o("MaskFormerForInstanceSegmentation"),Bar=o(" (MaskFormer model)"),Par=l(),yT=a("p"),Iar=o("The model is set in evaluation mode by default using "),H_e=a("code"),qar=o("model.eval()"),Nar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U_e=a("code"),jar=o("model.train()"),Dar=l(),F(LT.$$.fragment),hqe=l(),qd=a("h2"),xT=a("a"),J_e=a("span"),F(qL.$$.fragment),Gar=l(),Y_e=a("span"),Oar=o("TFAutoModel"),pqe=l(),Yo=a("div"),F(NL.$$.fragment),Var=l(),Nd=a("p"),Xar=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cz=a("a"),zar=o("from_pretrained()"),Qar=o(" class method or the "),fz=a("a"),War=o("from_config()"),Har=o(` class
method.`),Uar=l(),jL=a("p"),Jar=o("This class cannot be instantiated directly using "),K_e=a("code"),Yar=o("__init__()"),Kar=o(" (throws an error)."),Zar=l(),wt=a("div"),F(DL.$$.fragment),enr=l(),Z_e=a("p"),onr=o("Instantiates one of the base model classes of the library from a configuration."),rnr=l(),jd=a("p"),tnr=o(`Note:
Loading a model from its configuration file does `),e2e=a("strong"),anr=o("not"),nnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=a("a"),snr=o("from_pretrained()"),lnr=o(" to load the model weights."),inr=l(),F($T.$$.fragment),dnr=l(),wr=a("div"),F(GL.$$.fragment),cnr=l(),o2e=a("p"),fnr=o("Instantiate one of the base model classes of the library from a pretrained model."),mnr=l(),Ka=a("p"),gnr=o("The model class to instantiate is selected based on the "),r2e=a("code"),hnr=o("model_type"),pnr=o(` property of the config object (either
passed as an argument or loaded from `),t2e=a("code"),unr=o("pretrained_model_name_or_path"),_nr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a2e=a("code"),bnr=o("pretrained_model_name_or_path"),vnr=o(":"),Fnr=l(),j=a("ul"),kT=a("li"),n2e=a("strong"),Tnr=o("albert"),Mnr=o(" \u2014 "),gz=a("a"),Enr=o("TFAlbertModel"),Cnr=o(" (ALBERT model)"),wnr=l(),ST=a("li"),s2e=a("strong"),Anr=o("bart"),ynr=o(" \u2014 "),hz=a("a"),Lnr=o("TFBartModel"),xnr=o(" (BART model)"),$nr=l(),RT=a("li"),l2e=a("strong"),knr=o("bert"),Snr=o(" \u2014 "),pz=a("a"),Rnr=o("TFBertModel"),Bnr=o(" (BERT model)"),Pnr=l(),BT=a("li"),i2e=a("strong"),Inr=o("blenderbot"),qnr=o(" \u2014 "),uz=a("a"),Nnr=o("TFBlenderbotModel"),jnr=o(" (Blenderbot model)"),Dnr=l(),PT=a("li"),d2e=a("strong"),Gnr=o("blenderbot-small"),Onr=o(" \u2014 "),_z=a("a"),Vnr=o("TFBlenderbotSmallModel"),Xnr=o(" (BlenderbotSmall model)"),znr=l(),IT=a("li"),c2e=a("strong"),Qnr=o("camembert"),Wnr=o(" \u2014 "),bz=a("a"),Hnr=o("TFCamembertModel"),Unr=o(" (CamemBERT model)"),Jnr=l(),qT=a("li"),f2e=a("strong"),Ynr=o("clip"),Knr=o(" \u2014 "),vz=a("a"),Znr=o("TFCLIPModel"),esr=o(" (CLIP model)"),osr=l(),NT=a("li"),m2e=a("strong"),rsr=o("convbert"),tsr=o(" \u2014 "),Fz=a("a"),asr=o("TFConvBertModel"),nsr=o(" (ConvBERT model)"),ssr=l(),jT=a("li"),g2e=a("strong"),lsr=o("convnext"),isr=o(" \u2014 "),Tz=a("a"),dsr=o("TFConvNextModel"),csr=o(" (ConvNext model)"),fsr=l(),DT=a("li"),h2e=a("strong"),msr=o("ctrl"),gsr=o(" \u2014 "),Mz=a("a"),hsr=o("TFCTRLModel"),psr=o(" (CTRL model)"),usr=l(),GT=a("li"),p2e=a("strong"),_sr=o("data2vec-vision"),bsr=o(" \u2014 "),Ez=a("a"),vsr=o("TFData2VecVisionModel"),Fsr=o(" (Data2VecVision model)"),Tsr=l(),OT=a("li"),u2e=a("strong"),Msr=o("deberta"),Esr=o(" \u2014 "),Cz=a("a"),Csr=o("TFDebertaModel"),wsr=o(" (DeBERTa model)"),Asr=l(),VT=a("li"),_2e=a("strong"),ysr=o("deberta-v2"),Lsr=o(" \u2014 "),wz=a("a"),xsr=o("TFDebertaV2Model"),$sr=o(" (DeBERTa-v2 model)"),ksr=l(),XT=a("li"),b2e=a("strong"),Ssr=o("distilbert"),Rsr=o(" \u2014 "),Az=a("a"),Bsr=o("TFDistilBertModel"),Psr=o(" (DistilBERT model)"),Isr=l(),zT=a("li"),v2e=a("strong"),qsr=o("dpr"),Nsr=o(" \u2014 "),yz=a("a"),jsr=o("TFDPRQuestionEncoder"),Dsr=o(" (DPR model)"),Gsr=l(),QT=a("li"),F2e=a("strong"),Osr=o("electra"),Vsr=o(" \u2014 "),Lz=a("a"),Xsr=o("TFElectraModel"),zsr=o(" (ELECTRA model)"),Qsr=l(),WT=a("li"),T2e=a("strong"),Wsr=o("flaubert"),Hsr=o(" \u2014 "),xz=a("a"),Usr=o("TFFlaubertModel"),Jsr=o(" (FlauBERT model)"),Ysr=l(),Bs=a("li"),M2e=a("strong"),Ksr=o("funnel"),Zsr=o(" \u2014 "),$z=a("a"),elr=o("TFFunnelModel"),olr=o(" or "),kz=a("a"),rlr=o("TFFunnelBaseModel"),tlr=o(" (Funnel Transformer model)"),alr=l(),HT=a("li"),E2e=a("strong"),nlr=o("gpt2"),slr=o(" \u2014 "),Sz=a("a"),llr=o("TFGPT2Model"),ilr=o(" (OpenAI GPT-2 model)"),dlr=l(),UT=a("li"),C2e=a("strong"),clr=o("gptj"),flr=o(" \u2014 "),Rz=a("a"),mlr=o("TFGPTJModel"),glr=o(" (GPT-J model)"),hlr=l(),JT=a("li"),w2e=a("strong"),plr=o("hubert"),ulr=o(" \u2014 "),Bz=a("a"),_lr=o("TFHubertModel"),blr=o(" (Hubert model)"),vlr=l(),YT=a("li"),A2e=a("strong"),Flr=o("layoutlm"),Tlr=o(" \u2014 "),Pz=a("a"),Mlr=o("TFLayoutLMModel"),Elr=o(" (LayoutLM model)"),Clr=l(),KT=a("li"),y2e=a("strong"),wlr=o("led"),Alr=o(" \u2014 "),Iz=a("a"),ylr=o("TFLEDModel"),Llr=o(" (LED model)"),xlr=l(),ZT=a("li"),L2e=a("strong"),$lr=o("longformer"),klr=o(" \u2014 "),qz=a("a"),Slr=o("TFLongformerModel"),Rlr=o(" (Longformer model)"),Blr=l(),e7=a("li"),x2e=a("strong"),Plr=o("lxmert"),Ilr=o(" \u2014 "),Nz=a("a"),qlr=o("TFLxmertModel"),Nlr=o(" (LXMERT model)"),jlr=l(),o7=a("li"),$2e=a("strong"),Dlr=o("marian"),Glr=o(" \u2014 "),jz=a("a"),Olr=o("TFMarianModel"),Vlr=o(" (Marian model)"),Xlr=l(),r7=a("li"),k2e=a("strong"),zlr=o("mbart"),Qlr=o(" \u2014 "),Dz=a("a"),Wlr=o("TFMBartModel"),Hlr=o(" (mBART model)"),Ulr=l(),t7=a("li"),S2e=a("strong"),Jlr=o("mobilebert"),Ylr=o(" \u2014 "),Gz=a("a"),Klr=o("TFMobileBertModel"),Zlr=o(" (MobileBERT model)"),eir=l(),a7=a("li"),R2e=a("strong"),oir=o("mpnet"),rir=o(" \u2014 "),Oz=a("a"),tir=o("TFMPNetModel"),air=o(" (MPNet model)"),nir=l(),n7=a("li"),B2e=a("strong"),sir=o("mt5"),lir=o(" \u2014 "),Vz=a("a"),iir=o("TFMT5Model"),dir=o(" (mT5 model)"),cir=l(),s7=a("li"),P2e=a("strong"),fir=o("openai-gpt"),mir=o(" \u2014 "),Xz=a("a"),gir=o("TFOpenAIGPTModel"),hir=o(" (OpenAI GPT model)"),pir=l(),l7=a("li"),I2e=a("strong"),uir=o("pegasus"),_ir=o(" \u2014 "),zz=a("a"),bir=o("TFPegasusModel"),vir=o(" (Pegasus model)"),Fir=l(),i7=a("li"),q2e=a("strong"),Tir=o("rembert"),Mir=o(" \u2014 "),Qz=a("a"),Eir=o("TFRemBertModel"),Cir=o(" (RemBERT model)"),wir=l(),d7=a("li"),N2e=a("strong"),Air=o("roberta"),yir=o(" \u2014 "),Wz=a("a"),Lir=o("TFRobertaModel"),xir=o(" (RoBERTa model)"),$ir=l(),c7=a("li"),j2e=a("strong"),kir=o("roformer"),Sir=o(" \u2014 "),Hz=a("a"),Rir=o("TFRoFormerModel"),Bir=o(" (RoFormer model)"),Pir=l(),f7=a("li"),D2e=a("strong"),Iir=o("speech_to_text"),qir=o(" \u2014 "),Uz=a("a"),Nir=o("TFSpeech2TextModel"),jir=o(" (Speech2Text model)"),Dir=l(),m7=a("li"),G2e=a("strong"),Gir=o("t5"),Oir=o(" \u2014 "),Jz=a("a"),Vir=o("TFT5Model"),Xir=o(" (T5 model)"),zir=l(),g7=a("li"),O2e=a("strong"),Qir=o("tapas"),Wir=o(" \u2014 "),Yz=a("a"),Hir=o("TFTapasModel"),Uir=o(" (TAPAS model)"),Jir=l(),h7=a("li"),V2e=a("strong"),Yir=o("transfo-xl"),Kir=o(" \u2014 "),Kz=a("a"),Zir=o("TFTransfoXLModel"),edr=o(" (Transformer-XL model)"),odr=l(),p7=a("li"),X2e=a("strong"),rdr=o("vit"),tdr=o(" \u2014 "),Zz=a("a"),adr=o("TFViTModel"),ndr=o(" (ViT model)"),sdr=l(),u7=a("li"),z2e=a("strong"),ldr=o("vit_mae"),idr=o(" \u2014 "),eQ=a("a"),ddr=o("TFViTMAEModel"),cdr=o(" (ViTMAE model)"),fdr=l(),_7=a("li"),Q2e=a("strong"),mdr=o("wav2vec2"),gdr=o(" \u2014 "),oQ=a("a"),hdr=o("TFWav2Vec2Model"),pdr=o(" (Wav2Vec2 model)"),udr=l(),b7=a("li"),W2e=a("strong"),_dr=o("xlm"),bdr=o(" \u2014 "),rQ=a("a"),vdr=o("TFXLMModel"),Fdr=o(" (XLM model)"),Tdr=l(),v7=a("li"),H2e=a("strong"),Mdr=o("xlm-roberta"),Edr=o(" \u2014 "),tQ=a("a"),Cdr=o("TFXLMRobertaModel"),wdr=o(" (XLM-RoBERTa model)"),Adr=l(),F7=a("li"),U2e=a("strong"),ydr=o("xlnet"),Ldr=o(" \u2014 "),aQ=a("a"),xdr=o("TFXLNetModel"),$dr=o(" (XLNet model)"),kdr=l(),F(T7.$$.fragment),uqe=l(),Dd=a("h2"),M7=a("a"),J2e=a("span"),F(OL.$$.fragment),Sdr=l(),Y2e=a("span"),Rdr=o("TFAutoModelForPreTraining"),_qe=l(),Ko=a("div"),F(VL.$$.fragment),Bdr=l(),Gd=a("p"),Pdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nQ=a("a"),Idr=o("from_pretrained()"),qdr=o(" class method or the "),sQ=a("a"),Ndr=o("from_config()"),jdr=o(` class
method.`),Ddr=l(),XL=a("p"),Gdr=o("This class cannot be instantiated directly using "),K2e=a("code"),Odr=o("__init__()"),Vdr=o(" (throws an error)."),Xdr=l(),At=a("div"),F(zL.$$.fragment),zdr=l(),Z2e=a("p"),Qdr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Wdr=l(),Od=a("p"),Hdr=o(`Note:
Loading a model from its configuration file does `),e1e=a("strong"),Udr=o("not"),Jdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=a("a"),Ydr=o("from_pretrained()"),Kdr=o(" to load the model weights."),Zdr=l(),F(E7.$$.fragment),ecr=l(),Ar=a("div"),F(QL.$$.fragment),ocr=l(),o1e=a("p"),rcr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),tcr=l(),Za=a("p"),acr=o("The model class to instantiate is selected based on the "),r1e=a("code"),ncr=o("model_type"),scr=o(` property of the config object (either
passed as an argument or loaded from `),t1e=a("code"),lcr=o("pretrained_model_name_or_path"),icr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=a("code"),dcr=o("pretrained_model_name_or_path"),ccr=o(":"),fcr=l(),se=a("ul"),C7=a("li"),n1e=a("strong"),mcr=o("albert"),gcr=o(" \u2014 "),iQ=a("a"),hcr=o("TFAlbertForPreTraining"),pcr=o(" (ALBERT model)"),ucr=l(),w7=a("li"),s1e=a("strong"),_cr=o("bart"),bcr=o(" \u2014 "),dQ=a("a"),vcr=o("TFBartForConditionalGeneration"),Fcr=o(" (BART model)"),Tcr=l(),A7=a("li"),l1e=a("strong"),Mcr=o("bert"),Ecr=o(" \u2014 "),cQ=a("a"),Ccr=o("TFBertForPreTraining"),wcr=o(" (BERT model)"),Acr=l(),y7=a("li"),i1e=a("strong"),ycr=o("camembert"),Lcr=o(" \u2014 "),fQ=a("a"),xcr=o("TFCamembertForMaskedLM"),$cr=o(" (CamemBERT model)"),kcr=l(),L7=a("li"),d1e=a("strong"),Scr=o("ctrl"),Rcr=o(" \u2014 "),mQ=a("a"),Bcr=o("TFCTRLLMHeadModel"),Pcr=o(" (CTRL model)"),Icr=l(),x7=a("li"),c1e=a("strong"),qcr=o("distilbert"),Ncr=o(" \u2014 "),gQ=a("a"),jcr=o("TFDistilBertForMaskedLM"),Dcr=o(" (DistilBERT model)"),Gcr=l(),$7=a("li"),f1e=a("strong"),Ocr=o("electra"),Vcr=o(" \u2014 "),hQ=a("a"),Xcr=o("TFElectraForPreTraining"),zcr=o(" (ELECTRA model)"),Qcr=l(),k7=a("li"),m1e=a("strong"),Wcr=o("flaubert"),Hcr=o(" \u2014 "),pQ=a("a"),Ucr=o("TFFlaubertWithLMHeadModel"),Jcr=o(" (FlauBERT model)"),Ycr=l(),S7=a("li"),g1e=a("strong"),Kcr=o("funnel"),Zcr=o(" \u2014 "),uQ=a("a"),efr=o("TFFunnelForPreTraining"),ofr=o(" (Funnel Transformer model)"),rfr=l(),R7=a("li"),h1e=a("strong"),tfr=o("gpt2"),afr=o(" \u2014 "),_Q=a("a"),nfr=o("TFGPT2LMHeadModel"),sfr=o(" (OpenAI GPT-2 model)"),lfr=l(),B7=a("li"),p1e=a("strong"),ifr=o("layoutlm"),dfr=o(" \u2014 "),bQ=a("a"),cfr=o("TFLayoutLMForMaskedLM"),ffr=o(" (LayoutLM model)"),mfr=l(),P7=a("li"),u1e=a("strong"),gfr=o("lxmert"),hfr=o(" \u2014 "),vQ=a("a"),pfr=o("TFLxmertForPreTraining"),ufr=o(" (LXMERT model)"),_fr=l(),I7=a("li"),_1e=a("strong"),bfr=o("mobilebert"),vfr=o(" \u2014 "),FQ=a("a"),Ffr=o("TFMobileBertForPreTraining"),Tfr=o(" (MobileBERT model)"),Mfr=l(),q7=a("li"),b1e=a("strong"),Efr=o("mpnet"),Cfr=o(" \u2014 "),TQ=a("a"),wfr=o("TFMPNetForMaskedLM"),Afr=o(" (MPNet model)"),yfr=l(),N7=a("li"),v1e=a("strong"),Lfr=o("openai-gpt"),xfr=o(" \u2014 "),MQ=a("a"),$fr=o("TFOpenAIGPTLMHeadModel"),kfr=o(" (OpenAI GPT model)"),Sfr=l(),j7=a("li"),F1e=a("strong"),Rfr=o("roberta"),Bfr=o(" \u2014 "),EQ=a("a"),Pfr=o("TFRobertaForMaskedLM"),Ifr=o(" (RoBERTa model)"),qfr=l(),D7=a("li"),T1e=a("strong"),Nfr=o("t5"),jfr=o(" \u2014 "),CQ=a("a"),Dfr=o("TFT5ForConditionalGeneration"),Gfr=o(" (T5 model)"),Ofr=l(),G7=a("li"),M1e=a("strong"),Vfr=o("tapas"),Xfr=o(" \u2014 "),wQ=a("a"),zfr=o("TFTapasForMaskedLM"),Qfr=o(" (TAPAS model)"),Wfr=l(),O7=a("li"),E1e=a("strong"),Hfr=o("transfo-xl"),Ufr=o(" \u2014 "),AQ=a("a"),Jfr=o("TFTransfoXLLMHeadModel"),Yfr=o(" (Transformer-XL model)"),Kfr=l(),V7=a("li"),C1e=a("strong"),Zfr=o("vit_mae"),emr=o(" \u2014 "),yQ=a("a"),omr=o("TFViTMAEForPreTraining"),rmr=o(" (ViTMAE model)"),tmr=l(),X7=a("li"),w1e=a("strong"),amr=o("xlm"),nmr=o(" \u2014 "),LQ=a("a"),smr=o("TFXLMWithLMHeadModel"),lmr=o(" (XLM model)"),imr=l(),z7=a("li"),A1e=a("strong"),dmr=o("xlm-roberta"),cmr=o(" \u2014 "),xQ=a("a"),fmr=o("TFXLMRobertaForMaskedLM"),mmr=o(" (XLM-RoBERTa model)"),gmr=l(),Q7=a("li"),y1e=a("strong"),hmr=o("xlnet"),pmr=o(" \u2014 "),$Q=a("a"),umr=o("TFXLNetLMHeadModel"),_mr=o(" (XLNet model)"),bmr=l(),F(W7.$$.fragment),bqe=l(),Vd=a("h2"),H7=a("a"),L1e=a("span"),F(WL.$$.fragment),vmr=l(),x1e=a("span"),Fmr=o("TFAutoModelForCausalLM"),vqe=l(),Zo=a("div"),F(HL.$$.fragment),Tmr=l(),Xd=a("p"),Mmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kQ=a("a"),Emr=o("from_pretrained()"),Cmr=o(" class method or the "),SQ=a("a"),wmr=o("from_config()"),Amr=o(` class
method.`),ymr=l(),UL=a("p"),Lmr=o("This class cannot be instantiated directly using "),$1e=a("code"),xmr=o("__init__()"),$mr=o(" (throws an error)."),kmr=l(),yt=a("div"),F(JL.$$.fragment),Smr=l(),k1e=a("p"),Rmr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Bmr=l(),zd=a("p"),Pmr=o(`Note:
Loading a model from its configuration file does `),S1e=a("strong"),Imr=o("not"),qmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=a("a"),Nmr=o("from_pretrained()"),jmr=o(" to load the model weights."),Dmr=l(),F(U7.$$.fragment),Gmr=l(),yr=a("div"),F(YL.$$.fragment),Omr=l(),R1e=a("p"),Vmr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Xmr=l(),en=a("p"),zmr=o("The model class to instantiate is selected based on the "),B1e=a("code"),Qmr=o("model_type"),Wmr=o(` property of the config object (either
passed as an argument or loaded from `),P1e=a("code"),Hmr=o("pretrained_model_name_or_path"),Umr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=a("code"),Jmr=o("pretrained_model_name_or_path"),Ymr=o(":"),Kmr=l(),Te=a("ul"),J7=a("li"),q1e=a("strong"),Zmr=o("bert"),egr=o(" \u2014 "),BQ=a("a"),ogr=o("TFBertLMHeadModel"),rgr=o(" (BERT model)"),tgr=l(),Y7=a("li"),N1e=a("strong"),agr=o("camembert"),ngr=o(" \u2014 "),PQ=a("a"),sgr=o("TFCamembertForCausalLM"),lgr=o(" (CamemBERT model)"),igr=l(),K7=a("li"),j1e=a("strong"),dgr=o("ctrl"),cgr=o(" \u2014 "),IQ=a("a"),fgr=o("TFCTRLLMHeadModel"),mgr=o(" (CTRL model)"),ggr=l(),Z7=a("li"),D1e=a("strong"),hgr=o("gpt2"),pgr=o(" \u2014 "),qQ=a("a"),ugr=o("TFGPT2LMHeadModel"),_gr=o(" (OpenAI GPT-2 model)"),bgr=l(),eM=a("li"),G1e=a("strong"),vgr=o("gptj"),Fgr=o(" \u2014 "),NQ=a("a"),Tgr=o("TFGPTJForCausalLM"),Mgr=o(" (GPT-J model)"),Egr=l(),oM=a("li"),O1e=a("strong"),Cgr=o("openai-gpt"),wgr=o(" \u2014 "),jQ=a("a"),Agr=o("TFOpenAIGPTLMHeadModel"),ygr=o(" (OpenAI GPT model)"),Lgr=l(),rM=a("li"),V1e=a("strong"),xgr=o("rembert"),$gr=o(" \u2014 "),DQ=a("a"),kgr=o("TFRemBertForCausalLM"),Sgr=o(" (RemBERT model)"),Rgr=l(),tM=a("li"),X1e=a("strong"),Bgr=o("roberta"),Pgr=o(" \u2014 "),GQ=a("a"),Igr=o("TFRobertaForCausalLM"),qgr=o(" (RoBERTa model)"),Ngr=l(),aM=a("li"),z1e=a("strong"),jgr=o("roformer"),Dgr=o(" \u2014 "),OQ=a("a"),Ggr=o("TFRoFormerForCausalLM"),Ogr=o(" (RoFormer model)"),Vgr=l(),nM=a("li"),Q1e=a("strong"),Xgr=o("transfo-xl"),zgr=o(" \u2014 "),VQ=a("a"),Qgr=o("TFTransfoXLLMHeadModel"),Wgr=o(" (Transformer-XL model)"),Hgr=l(),sM=a("li"),W1e=a("strong"),Ugr=o("xlm"),Jgr=o(" \u2014 "),XQ=a("a"),Ygr=o("TFXLMWithLMHeadModel"),Kgr=o(" (XLM model)"),Zgr=l(),lM=a("li"),H1e=a("strong"),ehr=o("xlnet"),ohr=o(" \u2014 "),zQ=a("a"),rhr=o("TFXLNetLMHeadModel"),thr=o(" (XLNet model)"),ahr=l(),F(iM.$$.fragment),Fqe=l(),Qd=a("h2"),dM=a("a"),U1e=a("span"),F(KL.$$.fragment),nhr=l(),J1e=a("span"),shr=o("TFAutoModelForImageClassification"),Tqe=l(),er=a("div"),F(ZL.$$.fragment),lhr=l(),Wd=a("p"),ihr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QQ=a("a"),dhr=o("from_pretrained()"),chr=o(" class method or the "),WQ=a("a"),fhr=o("from_config()"),mhr=o(` class
method.`),ghr=l(),e8=a("p"),hhr=o("This class cannot be instantiated directly using "),Y1e=a("code"),phr=o("__init__()"),uhr=o(" (throws an error)."),_hr=l(),Lt=a("div"),F(o8.$$.fragment),bhr=l(),K1e=a("p"),vhr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Fhr=l(),Hd=a("p"),Thr=o(`Note:
Loading a model from its configuration file does `),Z1e=a("strong"),Mhr=o("not"),Ehr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=a("a"),Chr=o("from_pretrained()"),whr=o(" to load the model weights."),Ahr=l(),F(cM.$$.fragment),yhr=l(),Lr=a("div"),F(r8.$$.fragment),Lhr=l(),ebe=a("p"),xhr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$hr=l(),on=a("p"),khr=o("The model class to instantiate is selected based on the "),obe=a("code"),Shr=o("model_type"),Rhr=o(` property of the config object (either
passed as an argument or loaded from `),rbe=a("code"),Bhr=o("pretrained_model_name_or_path"),Phr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tbe=a("code"),Ihr=o("pretrained_model_name_or_path"),qhr=o(":"),Nhr=l(),Ud=a("ul"),fM=a("li"),abe=a("strong"),jhr=o("convnext"),Dhr=o(" \u2014 "),UQ=a("a"),Ghr=o("TFConvNextForImageClassification"),Ohr=o(" (ConvNext model)"),Vhr=l(),mM=a("li"),nbe=a("strong"),Xhr=o("data2vec-vision"),zhr=o(" \u2014 "),JQ=a("a"),Qhr=o("TFData2VecVisionForImageClassification"),Whr=o(" (Data2VecVision model)"),Hhr=l(),gM=a("li"),sbe=a("strong"),Uhr=o("vit"),Jhr=o(" \u2014 "),YQ=a("a"),Yhr=o("TFViTForImageClassification"),Khr=o(" (ViT model)"),Zhr=l(),F(hM.$$.fragment),Mqe=l(),Jd=a("h2"),pM=a("a"),lbe=a("span"),F(t8.$$.fragment),epr=l(),ibe=a("span"),opr=o("TFAutoModelForMaskedLM"),Eqe=l(),or=a("div"),F(a8.$$.fragment),rpr=l(),Yd=a("p"),tpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KQ=a("a"),apr=o("from_pretrained()"),npr=o(" class method or the "),ZQ=a("a"),spr=o("from_config()"),lpr=o(` class
method.`),ipr=l(),n8=a("p"),dpr=o("This class cannot be instantiated directly using "),dbe=a("code"),cpr=o("__init__()"),fpr=o(" (throws an error)."),mpr=l(),xt=a("div"),F(s8.$$.fragment),gpr=l(),cbe=a("p"),hpr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ppr=l(),Kd=a("p"),upr=o(`Note:
Loading a model from its configuration file does `),fbe=a("strong"),_pr=o("not"),bpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=a("a"),vpr=o("from_pretrained()"),Fpr=o(" to load the model weights."),Tpr=l(),F(uM.$$.fragment),Mpr=l(),xr=a("div"),F(l8.$$.fragment),Epr=l(),mbe=a("p"),Cpr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wpr=l(),rn=a("p"),Apr=o("The model class to instantiate is selected based on the "),gbe=a("code"),ypr=o("model_type"),Lpr=o(` property of the config object (either
passed as an argument or loaded from `),hbe=a("code"),xpr=o("pretrained_model_name_or_path"),$pr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=a("code"),kpr=o("pretrained_model_name_or_path"),Spr=o(":"),Rpr=l(),ie=a("ul"),_M=a("li"),ube=a("strong"),Bpr=o("albert"),Ppr=o(" \u2014 "),oW=a("a"),Ipr=o("TFAlbertForMaskedLM"),qpr=o(" (ALBERT model)"),Npr=l(),bM=a("li"),_be=a("strong"),jpr=o("bert"),Dpr=o(" \u2014 "),rW=a("a"),Gpr=o("TFBertForMaskedLM"),Opr=o(" (BERT model)"),Vpr=l(),vM=a("li"),bbe=a("strong"),Xpr=o("camembert"),zpr=o(" \u2014 "),tW=a("a"),Qpr=o("TFCamembertForMaskedLM"),Wpr=o(" (CamemBERT model)"),Hpr=l(),FM=a("li"),vbe=a("strong"),Upr=o("convbert"),Jpr=o(" \u2014 "),aW=a("a"),Ypr=o("TFConvBertForMaskedLM"),Kpr=o(" (ConvBERT model)"),Zpr=l(),TM=a("li"),Fbe=a("strong"),eur=o("deberta"),our=o(" \u2014 "),nW=a("a"),rur=o("TFDebertaForMaskedLM"),tur=o(" (DeBERTa model)"),aur=l(),MM=a("li"),Tbe=a("strong"),nur=o("deberta-v2"),sur=o(" \u2014 "),sW=a("a"),lur=o("TFDebertaV2ForMaskedLM"),iur=o(" (DeBERTa-v2 model)"),dur=l(),EM=a("li"),Mbe=a("strong"),cur=o("distilbert"),fur=o(" \u2014 "),lW=a("a"),mur=o("TFDistilBertForMaskedLM"),gur=o(" (DistilBERT model)"),hur=l(),CM=a("li"),Ebe=a("strong"),pur=o("electra"),uur=o(" \u2014 "),iW=a("a"),_ur=o("TFElectraForMaskedLM"),bur=o(" (ELECTRA model)"),vur=l(),wM=a("li"),Cbe=a("strong"),Fur=o("flaubert"),Tur=o(" \u2014 "),dW=a("a"),Mur=o("TFFlaubertWithLMHeadModel"),Eur=o(" (FlauBERT model)"),Cur=l(),AM=a("li"),wbe=a("strong"),wur=o("funnel"),Aur=o(" \u2014 "),cW=a("a"),yur=o("TFFunnelForMaskedLM"),Lur=o(" (Funnel Transformer model)"),xur=l(),yM=a("li"),Abe=a("strong"),$ur=o("layoutlm"),kur=o(" \u2014 "),fW=a("a"),Sur=o("TFLayoutLMForMaskedLM"),Rur=o(" (LayoutLM model)"),Bur=l(),LM=a("li"),ybe=a("strong"),Pur=o("longformer"),Iur=o(" \u2014 "),mW=a("a"),qur=o("TFLongformerForMaskedLM"),Nur=o(" (Longformer model)"),jur=l(),xM=a("li"),Lbe=a("strong"),Dur=o("mobilebert"),Gur=o(" \u2014 "),gW=a("a"),Our=o("TFMobileBertForMaskedLM"),Vur=o(" (MobileBERT model)"),Xur=l(),$M=a("li"),xbe=a("strong"),zur=o("mpnet"),Qur=o(" \u2014 "),hW=a("a"),Wur=o("TFMPNetForMaskedLM"),Hur=o(" (MPNet model)"),Uur=l(),kM=a("li"),$be=a("strong"),Jur=o("rembert"),Yur=o(" \u2014 "),pW=a("a"),Kur=o("TFRemBertForMaskedLM"),Zur=o(" (RemBERT model)"),e_r=l(),SM=a("li"),kbe=a("strong"),o_r=o("roberta"),r_r=o(" \u2014 "),uW=a("a"),t_r=o("TFRobertaForMaskedLM"),a_r=o(" (RoBERTa model)"),n_r=l(),RM=a("li"),Sbe=a("strong"),s_r=o("roformer"),l_r=o(" \u2014 "),_W=a("a"),i_r=o("TFRoFormerForMaskedLM"),d_r=o(" (RoFormer model)"),c_r=l(),BM=a("li"),Rbe=a("strong"),f_r=o("tapas"),m_r=o(" \u2014 "),bW=a("a"),g_r=o("TFTapasForMaskedLM"),h_r=o(" (TAPAS model)"),p_r=l(),PM=a("li"),Bbe=a("strong"),u_r=o("xlm"),__r=o(" \u2014 "),vW=a("a"),b_r=o("TFXLMWithLMHeadModel"),v_r=o(" (XLM model)"),F_r=l(),IM=a("li"),Pbe=a("strong"),T_r=o("xlm-roberta"),M_r=o(" \u2014 "),FW=a("a"),E_r=o("TFXLMRobertaForMaskedLM"),C_r=o(" (XLM-RoBERTa model)"),w_r=l(),F(qM.$$.fragment),Cqe=l(),Zd=a("h2"),NM=a("a"),Ibe=a("span"),F(i8.$$.fragment),A_r=l(),qbe=a("span"),y_r=o("TFAutoModelForSeq2SeqLM"),wqe=l(),rr=a("div"),F(d8.$$.fragment),L_r=l(),ec=a("p"),x_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),TW=a("a"),$_r=o("from_pretrained()"),k_r=o(" class method or the "),MW=a("a"),S_r=o("from_config()"),R_r=o(` class
method.`),B_r=l(),c8=a("p"),P_r=o("This class cannot be instantiated directly using "),Nbe=a("code"),I_r=o("__init__()"),q_r=o(" (throws an error)."),N_r=l(),$t=a("div"),F(f8.$$.fragment),j_r=l(),jbe=a("p"),D_r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),G_r=l(),oc=a("p"),O_r=o(`Note:
Loading a model from its configuration file does `),Dbe=a("strong"),V_r=o("not"),X_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=a("a"),z_r=o("from_pretrained()"),Q_r=o(" to load the model weights."),W_r=l(),F(jM.$$.fragment),H_r=l(),$r=a("div"),F(m8.$$.fragment),U_r=l(),Gbe=a("p"),J_r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Y_r=l(),tn=a("p"),K_r=o("The model class to instantiate is selected based on the "),Obe=a("code"),Z_r=o("model_type"),e2r=o(` property of the config object (either
passed as an argument or loaded from `),Vbe=a("code"),o2r=o("pretrained_model_name_or_path"),r2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xbe=a("code"),t2r=o("pretrained_model_name_or_path"),a2r=o(":"),n2r=l(),ye=a("ul"),DM=a("li"),zbe=a("strong"),s2r=o("bart"),l2r=o(" \u2014 "),CW=a("a"),i2r=o("TFBartForConditionalGeneration"),d2r=o(" (BART model)"),c2r=l(),GM=a("li"),Qbe=a("strong"),f2r=o("blenderbot"),m2r=o(" \u2014 "),wW=a("a"),g2r=o("TFBlenderbotForConditionalGeneration"),h2r=o(" (Blenderbot model)"),p2r=l(),OM=a("li"),Wbe=a("strong"),u2r=o("blenderbot-small"),_2r=o(" \u2014 "),AW=a("a"),b2r=o("TFBlenderbotSmallForConditionalGeneration"),v2r=o(" (BlenderbotSmall model)"),F2r=l(),VM=a("li"),Hbe=a("strong"),T2r=o("encoder-decoder"),M2r=o(" \u2014 "),yW=a("a"),E2r=o("TFEncoderDecoderModel"),C2r=o(" (Encoder decoder model)"),w2r=l(),XM=a("li"),Ube=a("strong"),A2r=o("led"),y2r=o(" \u2014 "),LW=a("a"),L2r=o("TFLEDForConditionalGeneration"),x2r=o(" (LED model)"),$2r=l(),zM=a("li"),Jbe=a("strong"),k2r=o("marian"),S2r=o(" \u2014 "),xW=a("a"),R2r=o("TFMarianMTModel"),B2r=o(" (Marian model)"),P2r=l(),QM=a("li"),Ybe=a("strong"),I2r=o("mbart"),q2r=o(" \u2014 "),$W=a("a"),N2r=o("TFMBartForConditionalGeneration"),j2r=o(" (mBART model)"),D2r=l(),WM=a("li"),Kbe=a("strong"),G2r=o("mt5"),O2r=o(" \u2014 "),kW=a("a"),V2r=o("TFMT5ForConditionalGeneration"),X2r=o(" (mT5 model)"),z2r=l(),HM=a("li"),Zbe=a("strong"),Q2r=o("pegasus"),W2r=o(" \u2014 "),SW=a("a"),H2r=o("TFPegasusForConditionalGeneration"),U2r=o(" (Pegasus model)"),J2r=l(),UM=a("li"),eve=a("strong"),Y2r=o("t5"),K2r=o(" \u2014 "),RW=a("a"),Z2r=o("TFT5ForConditionalGeneration"),e1r=o(" (T5 model)"),o1r=l(),F(JM.$$.fragment),Aqe=l(),rc=a("h2"),YM=a("a"),ove=a("span"),F(g8.$$.fragment),r1r=l(),rve=a("span"),t1r=o("TFAutoModelForSequenceClassification"),yqe=l(),tr=a("div"),F(h8.$$.fragment),a1r=l(),tc=a("p"),n1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BW=a("a"),s1r=o("from_pretrained()"),l1r=o(" class method or the "),PW=a("a"),i1r=o("from_config()"),d1r=o(` class
method.`),c1r=l(),p8=a("p"),f1r=o("This class cannot be instantiated directly using "),tve=a("code"),m1r=o("__init__()"),g1r=o(" (throws an error)."),h1r=l(),kt=a("div"),F(u8.$$.fragment),p1r=l(),ave=a("p"),u1r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_1r=l(),ac=a("p"),b1r=o(`Note:
Loading a model from its configuration file does `),nve=a("strong"),v1r=o("not"),F1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=a("a"),T1r=o("from_pretrained()"),M1r=o(" to load the model weights."),E1r=l(),F(KM.$$.fragment),C1r=l(),kr=a("div"),F(_8.$$.fragment),w1r=l(),sve=a("p"),A1r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),y1r=l(),an=a("p"),L1r=o("The model class to instantiate is selected based on the "),lve=a("code"),x1r=o("model_type"),$1r=o(` property of the config object (either
passed as an argument or loaded from `),ive=a("code"),k1r=o("pretrained_model_name_or_path"),S1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=a("code"),R1r=o("pretrained_model_name_or_path"),B1r=o(":"),P1r=l(),Z=a("ul"),ZM=a("li"),cve=a("strong"),I1r=o("albert"),q1r=o(" \u2014 "),qW=a("a"),N1r=o("TFAlbertForSequenceClassification"),j1r=o(" (ALBERT model)"),D1r=l(),e4=a("li"),fve=a("strong"),G1r=o("bert"),O1r=o(" \u2014 "),NW=a("a"),V1r=o("TFBertForSequenceClassification"),X1r=o(" (BERT model)"),z1r=l(),o4=a("li"),mve=a("strong"),Q1r=o("camembert"),W1r=o(" \u2014 "),jW=a("a"),H1r=o("TFCamembertForSequenceClassification"),U1r=o(" (CamemBERT model)"),J1r=l(),r4=a("li"),gve=a("strong"),Y1r=o("convbert"),K1r=o(" \u2014 "),DW=a("a"),Z1r=o("TFConvBertForSequenceClassification"),ebr=o(" (ConvBERT model)"),obr=l(),t4=a("li"),hve=a("strong"),rbr=o("ctrl"),tbr=o(" \u2014 "),GW=a("a"),abr=o("TFCTRLForSequenceClassification"),nbr=o(" (CTRL model)"),sbr=l(),a4=a("li"),pve=a("strong"),lbr=o("deberta"),ibr=o(" \u2014 "),OW=a("a"),dbr=o("TFDebertaForSequenceClassification"),cbr=o(" (DeBERTa model)"),fbr=l(),n4=a("li"),uve=a("strong"),mbr=o("deberta-v2"),gbr=o(" \u2014 "),VW=a("a"),hbr=o("TFDebertaV2ForSequenceClassification"),pbr=o(" (DeBERTa-v2 model)"),ubr=l(),s4=a("li"),_ve=a("strong"),_br=o("distilbert"),bbr=o(" \u2014 "),XW=a("a"),vbr=o("TFDistilBertForSequenceClassification"),Fbr=o(" (DistilBERT model)"),Tbr=l(),l4=a("li"),bve=a("strong"),Mbr=o("electra"),Ebr=o(" \u2014 "),zW=a("a"),Cbr=o("TFElectraForSequenceClassification"),wbr=o(" (ELECTRA model)"),Abr=l(),i4=a("li"),vve=a("strong"),ybr=o("flaubert"),Lbr=o(" \u2014 "),QW=a("a"),xbr=o("TFFlaubertForSequenceClassification"),$br=o(" (FlauBERT model)"),kbr=l(),d4=a("li"),Fve=a("strong"),Sbr=o("funnel"),Rbr=o(" \u2014 "),WW=a("a"),Bbr=o("TFFunnelForSequenceClassification"),Pbr=o(" (Funnel Transformer model)"),Ibr=l(),c4=a("li"),Tve=a("strong"),qbr=o("gpt2"),Nbr=o(" \u2014 "),HW=a("a"),jbr=o("TFGPT2ForSequenceClassification"),Dbr=o(" (OpenAI GPT-2 model)"),Gbr=l(),f4=a("li"),Mve=a("strong"),Obr=o("gptj"),Vbr=o(" \u2014 "),UW=a("a"),Xbr=o("TFGPTJForSequenceClassification"),zbr=o(" (GPT-J model)"),Qbr=l(),m4=a("li"),Eve=a("strong"),Wbr=o("layoutlm"),Hbr=o(" \u2014 "),JW=a("a"),Ubr=o("TFLayoutLMForSequenceClassification"),Jbr=o(" (LayoutLM model)"),Ybr=l(),g4=a("li"),Cve=a("strong"),Kbr=o("longformer"),Zbr=o(" \u2014 "),YW=a("a"),evr=o("TFLongformerForSequenceClassification"),ovr=o(" (Longformer model)"),rvr=l(),h4=a("li"),wve=a("strong"),tvr=o("mobilebert"),avr=o(" \u2014 "),KW=a("a"),nvr=o("TFMobileBertForSequenceClassification"),svr=o(" (MobileBERT model)"),lvr=l(),p4=a("li"),Ave=a("strong"),ivr=o("mpnet"),dvr=o(" \u2014 "),ZW=a("a"),cvr=o("TFMPNetForSequenceClassification"),fvr=o(" (MPNet model)"),mvr=l(),u4=a("li"),yve=a("strong"),gvr=o("openai-gpt"),hvr=o(" \u2014 "),eH=a("a"),pvr=o("TFOpenAIGPTForSequenceClassification"),uvr=o(" (OpenAI GPT model)"),_vr=l(),_4=a("li"),Lve=a("strong"),bvr=o("rembert"),vvr=o(" \u2014 "),oH=a("a"),Fvr=o("TFRemBertForSequenceClassification"),Tvr=o(" (RemBERT model)"),Mvr=l(),b4=a("li"),xve=a("strong"),Evr=o("roberta"),Cvr=o(" \u2014 "),rH=a("a"),wvr=o("TFRobertaForSequenceClassification"),Avr=o(" (RoBERTa model)"),yvr=l(),v4=a("li"),$ve=a("strong"),Lvr=o("roformer"),xvr=o(" \u2014 "),tH=a("a"),$vr=o("TFRoFormerForSequenceClassification"),kvr=o(" (RoFormer model)"),Svr=l(),F4=a("li"),kve=a("strong"),Rvr=o("tapas"),Bvr=o(" \u2014 "),aH=a("a"),Pvr=o("TFTapasForSequenceClassification"),Ivr=o(" (TAPAS model)"),qvr=l(),T4=a("li"),Sve=a("strong"),Nvr=o("transfo-xl"),jvr=o(" \u2014 "),nH=a("a"),Dvr=o("TFTransfoXLForSequenceClassification"),Gvr=o(" (Transformer-XL model)"),Ovr=l(),M4=a("li"),Rve=a("strong"),Vvr=o("xlm"),Xvr=o(" \u2014 "),sH=a("a"),zvr=o("TFXLMForSequenceClassification"),Qvr=o(" (XLM model)"),Wvr=l(),E4=a("li"),Bve=a("strong"),Hvr=o("xlm-roberta"),Uvr=o(" \u2014 "),lH=a("a"),Jvr=o("TFXLMRobertaForSequenceClassification"),Yvr=o(" (XLM-RoBERTa model)"),Kvr=l(),C4=a("li"),Pve=a("strong"),Zvr=o("xlnet"),eFr=o(" \u2014 "),iH=a("a"),oFr=o("TFXLNetForSequenceClassification"),rFr=o(" (XLNet model)"),tFr=l(),F(w4.$$.fragment),Lqe=l(),nc=a("h2"),A4=a("a"),Ive=a("span"),F(b8.$$.fragment),aFr=l(),qve=a("span"),nFr=o("TFAutoModelForMultipleChoice"),xqe=l(),ar=a("div"),F(v8.$$.fragment),sFr=l(),sc=a("p"),lFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dH=a("a"),iFr=o("from_pretrained()"),dFr=o(" class method or the "),cH=a("a"),cFr=o("from_config()"),fFr=o(` class
method.`),mFr=l(),F8=a("p"),gFr=o("This class cannot be instantiated directly using "),Nve=a("code"),hFr=o("__init__()"),pFr=o(" (throws an error)."),uFr=l(),St=a("div"),F(T8.$$.fragment),_Fr=l(),jve=a("p"),bFr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vFr=l(),lc=a("p"),FFr=o(`Note:
Loading a model from its configuration file does `),Dve=a("strong"),TFr=o("not"),MFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),EFr=o("from_pretrained()"),CFr=o(" to load the model weights."),wFr=l(),F(y4.$$.fragment),AFr=l(),Sr=a("div"),F(M8.$$.fragment),yFr=l(),Gve=a("p"),LFr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xFr=l(),nn=a("p"),$Fr=o("The model class to instantiate is selected based on the "),Ove=a("code"),kFr=o("model_type"),SFr=o(` property of the config object (either
passed as an argument or loaded from `),Vve=a("code"),RFr=o("pretrained_model_name_or_path"),BFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=a("code"),PFr=o("pretrained_model_name_or_path"),IFr=o(":"),qFr=l(),pe=a("ul"),L4=a("li"),zve=a("strong"),NFr=o("albert"),jFr=o(" \u2014 "),mH=a("a"),DFr=o("TFAlbertForMultipleChoice"),GFr=o(" (ALBERT model)"),OFr=l(),x4=a("li"),Qve=a("strong"),VFr=o("bert"),XFr=o(" \u2014 "),gH=a("a"),zFr=o("TFBertForMultipleChoice"),QFr=o(" (BERT model)"),WFr=l(),$4=a("li"),Wve=a("strong"),HFr=o("camembert"),UFr=o(" \u2014 "),hH=a("a"),JFr=o("TFCamembertForMultipleChoice"),YFr=o(" (CamemBERT model)"),KFr=l(),k4=a("li"),Hve=a("strong"),ZFr=o("convbert"),e0r=o(" \u2014 "),pH=a("a"),o0r=o("TFConvBertForMultipleChoice"),r0r=o(" (ConvBERT model)"),t0r=l(),S4=a("li"),Uve=a("strong"),a0r=o("distilbert"),n0r=o(" \u2014 "),uH=a("a"),s0r=o("TFDistilBertForMultipleChoice"),l0r=o(" (DistilBERT model)"),i0r=l(),R4=a("li"),Jve=a("strong"),d0r=o("electra"),c0r=o(" \u2014 "),_H=a("a"),f0r=o("TFElectraForMultipleChoice"),m0r=o(" (ELECTRA model)"),g0r=l(),B4=a("li"),Yve=a("strong"),h0r=o("flaubert"),p0r=o(" \u2014 "),bH=a("a"),u0r=o("TFFlaubertForMultipleChoice"),_0r=o(" (FlauBERT model)"),b0r=l(),P4=a("li"),Kve=a("strong"),v0r=o("funnel"),F0r=o(" \u2014 "),vH=a("a"),T0r=o("TFFunnelForMultipleChoice"),M0r=o(" (Funnel Transformer model)"),E0r=l(),I4=a("li"),Zve=a("strong"),C0r=o("longformer"),w0r=o(" \u2014 "),FH=a("a"),A0r=o("TFLongformerForMultipleChoice"),y0r=o(" (Longformer model)"),L0r=l(),q4=a("li"),eFe=a("strong"),x0r=o("mobilebert"),$0r=o(" \u2014 "),TH=a("a"),k0r=o("TFMobileBertForMultipleChoice"),S0r=o(" (MobileBERT model)"),R0r=l(),N4=a("li"),oFe=a("strong"),B0r=o("mpnet"),P0r=o(" \u2014 "),MH=a("a"),I0r=o("TFMPNetForMultipleChoice"),q0r=o(" (MPNet model)"),N0r=l(),j4=a("li"),rFe=a("strong"),j0r=o("rembert"),D0r=o(" \u2014 "),EH=a("a"),G0r=o("TFRemBertForMultipleChoice"),O0r=o(" (RemBERT model)"),V0r=l(),D4=a("li"),tFe=a("strong"),X0r=o("roberta"),z0r=o(" \u2014 "),CH=a("a"),Q0r=o("TFRobertaForMultipleChoice"),W0r=o(" (RoBERTa model)"),H0r=l(),G4=a("li"),aFe=a("strong"),U0r=o("roformer"),J0r=o(" \u2014 "),wH=a("a"),Y0r=o("TFRoFormerForMultipleChoice"),K0r=o(" (RoFormer model)"),Z0r=l(),O4=a("li"),nFe=a("strong"),eTr=o("xlm"),oTr=o(" \u2014 "),AH=a("a"),rTr=o("TFXLMForMultipleChoice"),tTr=o(" (XLM model)"),aTr=l(),V4=a("li"),sFe=a("strong"),nTr=o("xlm-roberta"),sTr=o(" \u2014 "),yH=a("a"),lTr=o("TFXLMRobertaForMultipleChoice"),iTr=o(" (XLM-RoBERTa model)"),dTr=l(),X4=a("li"),lFe=a("strong"),cTr=o("xlnet"),fTr=o(" \u2014 "),LH=a("a"),mTr=o("TFXLNetForMultipleChoice"),gTr=o(" (XLNet model)"),hTr=l(),F(z4.$$.fragment),$qe=l(),ic=a("h2"),Q4=a("a"),iFe=a("span"),F(E8.$$.fragment),pTr=l(),dFe=a("span"),uTr=o("TFAutoModelForNextSentencePrediction"),kqe=l(),nr=a("div"),F(C8.$$.fragment),_Tr=l(),dc=a("p"),bTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xH=a("a"),vTr=o("from_pretrained()"),FTr=o(" class method or the "),$H=a("a"),TTr=o("from_config()"),MTr=o(` class
method.`),ETr=l(),w8=a("p"),CTr=o("This class cannot be instantiated directly using "),cFe=a("code"),wTr=o("__init__()"),ATr=o(" (throws an error)."),yTr=l(),Rt=a("div"),F(A8.$$.fragment),LTr=l(),fFe=a("p"),xTr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Tr=l(),cc=a("p"),kTr=o(`Note:
Loading a model from its configuration file does `),mFe=a("strong"),STr=o("not"),RTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=a("a"),BTr=o("from_pretrained()"),PTr=o(" to load the model weights."),ITr=l(),F(W4.$$.fragment),qTr=l(),Rr=a("div"),F(y8.$$.fragment),NTr=l(),gFe=a("p"),jTr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DTr=l(),sn=a("p"),GTr=o("The model class to instantiate is selected based on the "),hFe=a("code"),OTr=o("model_type"),VTr=o(` property of the config object (either
passed as an argument or loaded from `),pFe=a("code"),XTr=o("pretrained_model_name_or_path"),zTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=a("code"),QTr=o("pretrained_model_name_or_path"),WTr=o(":"),HTr=l(),L8=a("ul"),H4=a("li"),_Fe=a("strong"),UTr=o("bert"),JTr=o(" \u2014 "),SH=a("a"),YTr=o("TFBertForNextSentencePrediction"),KTr=o(" (BERT model)"),ZTr=l(),U4=a("li"),bFe=a("strong"),e7r=o("mobilebert"),o7r=o(" \u2014 "),RH=a("a"),r7r=o("TFMobileBertForNextSentencePrediction"),t7r=o(" (MobileBERT model)"),a7r=l(),F(J4.$$.fragment),Sqe=l(),fc=a("h2"),Y4=a("a"),vFe=a("span"),F(x8.$$.fragment),n7r=l(),FFe=a("span"),s7r=o("TFAutoModelForTableQuestionAnswering"),Rqe=l(),sr=a("div"),F($8.$$.fragment),l7r=l(),mc=a("p"),i7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BH=a("a"),d7r=o("from_pretrained()"),c7r=o(" class method or the "),PH=a("a"),f7r=o("from_config()"),m7r=o(` class
method.`),g7r=l(),k8=a("p"),h7r=o("This class cannot be instantiated directly using "),TFe=a("code"),p7r=o("__init__()"),u7r=o(" (throws an error)."),_7r=l(),Bt=a("div"),F(S8.$$.fragment),b7r=l(),MFe=a("p"),v7r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),F7r=l(),gc=a("p"),T7r=o(`Note:
Loading a model from its configuration file does `),EFe=a("strong"),M7r=o("not"),E7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),C7r=o("from_pretrained()"),w7r=o(" to load the model weights."),A7r=l(),F(K4.$$.fragment),y7r=l(),Br=a("div"),F(R8.$$.fragment),L7r=l(),CFe=a("p"),x7r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$7r=l(),ln=a("p"),k7r=o("The model class to instantiate is selected based on the "),wFe=a("code"),S7r=o("model_type"),R7r=o(` property of the config object (either
passed as an argument or loaded from `),AFe=a("code"),B7r=o("pretrained_model_name_or_path"),P7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=a("code"),I7r=o("pretrained_model_name_or_path"),q7r=o(":"),N7r=l(),LFe=a("ul"),Z4=a("li"),xFe=a("strong"),j7r=o("tapas"),D7r=o(" \u2014 "),qH=a("a"),G7r=o("TFTapasForQuestionAnswering"),O7r=o(" (TAPAS model)"),V7r=l(),F(eE.$$.fragment),Bqe=l(),hc=a("h2"),oE=a("a"),$Fe=a("span"),F(B8.$$.fragment),X7r=l(),kFe=a("span"),z7r=o("TFAutoModelForTokenClassification"),Pqe=l(),lr=a("div"),F(P8.$$.fragment),Q7r=l(),pc=a("p"),W7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NH=a("a"),H7r=o("from_pretrained()"),U7r=o(" class method or the "),jH=a("a"),J7r=o("from_config()"),Y7r=o(` class
method.`),K7r=l(),I8=a("p"),Z7r=o("This class cannot be instantiated directly using "),SFe=a("code"),eMr=o("__init__()"),oMr=o(" (throws an error)."),rMr=l(),Pt=a("div"),F(q8.$$.fragment),tMr=l(),RFe=a("p"),aMr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nMr=l(),uc=a("p"),sMr=o(`Note:
Loading a model from its configuration file does `),BFe=a("strong"),lMr=o("not"),iMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),dMr=o("from_pretrained()"),cMr=o(" to load the model weights."),fMr=l(),F(rE.$$.fragment),mMr=l(),Pr=a("div"),F(N8.$$.fragment),gMr=l(),PFe=a("p"),hMr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pMr=l(),dn=a("p"),uMr=o("The model class to instantiate is selected based on the "),IFe=a("code"),_Mr=o("model_type"),bMr=o(` property of the config object (either
passed as an argument or loaded from `),qFe=a("code"),vMr=o("pretrained_model_name_or_path"),FMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=a("code"),TMr=o("pretrained_model_name_or_path"),MMr=o(":"),EMr=l(),de=a("ul"),tE=a("li"),jFe=a("strong"),CMr=o("albert"),wMr=o(" \u2014 "),GH=a("a"),AMr=o("TFAlbertForTokenClassification"),yMr=o(" (ALBERT model)"),LMr=l(),aE=a("li"),DFe=a("strong"),xMr=o("bert"),$Mr=o(" \u2014 "),OH=a("a"),kMr=o("TFBertForTokenClassification"),SMr=o(" (BERT model)"),RMr=l(),nE=a("li"),GFe=a("strong"),BMr=o("camembert"),PMr=o(" \u2014 "),VH=a("a"),IMr=o("TFCamembertForTokenClassification"),qMr=o(" (CamemBERT model)"),NMr=l(),sE=a("li"),OFe=a("strong"),jMr=o("convbert"),DMr=o(" \u2014 "),XH=a("a"),GMr=o("TFConvBertForTokenClassification"),OMr=o(" (ConvBERT model)"),VMr=l(),lE=a("li"),VFe=a("strong"),XMr=o("deberta"),zMr=o(" \u2014 "),zH=a("a"),QMr=o("TFDebertaForTokenClassification"),WMr=o(" (DeBERTa model)"),HMr=l(),iE=a("li"),XFe=a("strong"),UMr=o("deberta-v2"),JMr=o(" \u2014 "),QH=a("a"),YMr=o("TFDebertaV2ForTokenClassification"),KMr=o(" (DeBERTa-v2 model)"),ZMr=l(),dE=a("li"),zFe=a("strong"),e4r=o("distilbert"),o4r=o(" \u2014 "),WH=a("a"),r4r=o("TFDistilBertForTokenClassification"),t4r=o(" (DistilBERT model)"),a4r=l(),cE=a("li"),QFe=a("strong"),n4r=o("electra"),s4r=o(" \u2014 "),HH=a("a"),l4r=o("TFElectraForTokenClassification"),i4r=o(" (ELECTRA model)"),d4r=l(),fE=a("li"),WFe=a("strong"),c4r=o("flaubert"),f4r=o(" \u2014 "),UH=a("a"),m4r=o("TFFlaubertForTokenClassification"),g4r=o(" (FlauBERT model)"),h4r=l(),mE=a("li"),HFe=a("strong"),p4r=o("funnel"),u4r=o(" \u2014 "),JH=a("a"),_4r=o("TFFunnelForTokenClassification"),b4r=o(" (Funnel Transformer model)"),v4r=l(),gE=a("li"),UFe=a("strong"),F4r=o("layoutlm"),T4r=o(" \u2014 "),YH=a("a"),M4r=o("TFLayoutLMForTokenClassification"),E4r=o(" (LayoutLM model)"),C4r=l(),hE=a("li"),JFe=a("strong"),w4r=o("longformer"),A4r=o(" \u2014 "),KH=a("a"),y4r=o("TFLongformerForTokenClassification"),L4r=o(" (Longformer model)"),x4r=l(),pE=a("li"),YFe=a("strong"),$4r=o("mobilebert"),k4r=o(" \u2014 "),ZH=a("a"),S4r=o("TFMobileBertForTokenClassification"),R4r=o(" (MobileBERT model)"),B4r=l(),uE=a("li"),KFe=a("strong"),P4r=o("mpnet"),I4r=o(" \u2014 "),eU=a("a"),q4r=o("TFMPNetForTokenClassification"),N4r=o(" (MPNet model)"),j4r=l(),_E=a("li"),ZFe=a("strong"),D4r=o("rembert"),G4r=o(" \u2014 "),oU=a("a"),O4r=o("TFRemBertForTokenClassification"),V4r=o(" (RemBERT model)"),X4r=l(),bE=a("li"),e0e=a("strong"),z4r=o("roberta"),Q4r=o(" \u2014 "),rU=a("a"),W4r=o("TFRobertaForTokenClassification"),H4r=o(" (RoBERTa model)"),U4r=l(),vE=a("li"),o0e=a("strong"),J4r=o("roformer"),Y4r=o(" \u2014 "),tU=a("a"),K4r=o("TFRoFormerForTokenClassification"),Z4r=o(" (RoFormer model)"),eEr=l(),FE=a("li"),r0e=a("strong"),oEr=o("xlm"),rEr=o(" \u2014 "),aU=a("a"),tEr=o("TFXLMForTokenClassification"),aEr=o(" (XLM model)"),nEr=l(),TE=a("li"),t0e=a("strong"),sEr=o("xlm-roberta"),lEr=o(" \u2014 "),nU=a("a"),iEr=o("TFXLMRobertaForTokenClassification"),dEr=o(" (XLM-RoBERTa model)"),cEr=l(),ME=a("li"),a0e=a("strong"),fEr=o("xlnet"),mEr=o(" \u2014 "),sU=a("a"),gEr=o("TFXLNetForTokenClassification"),hEr=o(" (XLNet model)"),pEr=l(),F(EE.$$.fragment),Iqe=l(),_c=a("h2"),CE=a("a"),n0e=a("span"),F(j8.$$.fragment),uEr=l(),s0e=a("span"),_Er=o("TFAutoModelForQuestionAnswering"),qqe=l(),ir=a("div"),F(D8.$$.fragment),bEr=l(),bc=a("p"),vEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),lU=a("a"),FEr=o("from_pretrained()"),TEr=o(" class method or the "),iU=a("a"),MEr=o("from_config()"),EEr=o(` class
method.`),CEr=l(),G8=a("p"),wEr=o("This class cannot be instantiated directly using "),l0e=a("code"),AEr=o("__init__()"),yEr=o(" (throws an error)."),LEr=l(),It=a("div"),F(O8.$$.fragment),xEr=l(),i0e=a("p"),$Er=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kEr=l(),vc=a("p"),SEr=o(`Note:
Loading a model from its configuration file does `),d0e=a("strong"),REr=o("not"),BEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),PEr=o("from_pretrained()"),IEr=o(" to load the model weights."),qEr=l(),F(wE.$$.fragment),NEr=l(),Ir=a("div"),F(V8.$$.fragment),jEr=l(),c0e=a("p"),DEr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),GEr=l(),cn=a("p"),OEr=o("The model class to instantiate is selected based on the "),f0e=a("code"),VEr=o("model_type"),XEr=o(` property of the config object (either
passed as an argument or loaded from `),m0e=a("code"),zEr=o("pretrained_model_name_or_path"),QEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g0e=a("code"),WEr=o("pretrained_model_name_or_path"),HEr=o(":"),UEr=l(),ce=a("ul"),AE=a("li"),h0e=a("strong"),JEr=o("albert"),YEr=o(" \u2014 "),cU=a("a"),KEr=o("TFAlbertForQuestionAnswering"),ZEr=o(" (ALBERT model)"),e5r=l(),yE=a("li"),p0e=a("strong"),o5r=o("bert"),r5r=o(" \u2014 "),fU=a("a"),t5r=o("TFBertForQuestionAnswering"),a5r=o(" (BERT model)"),n5r=l(),LE=a("li"),u0e=a("strong"),s5r=o("camembert"),l5r=o(" \u2014 "),mU=a("a"),i5r=o("TFCamembertForQuestionAnswering"),d5r=o(" (CamemBERT model)"),c5r=l(),xE=a("li"),_0e=a("strong"),f5r=o("convbert"),m5r=o(" \u2014 "),gU=a("a"),g5r=o("TFConvBertForQuestionAnswering"),h5r=o(" (ConvBERT model)"),p5r=l(),$E=a("li"),b0e=a("strong"),u5r=o("deberta"),_5r=o(" \u2014 "),hU=a("a"),b5r=o("TFDebertaForQuestionAnswering"),v5r=o(" (DeBERTa model)"),F5r=l(),kE=a("li"),v0e=a("strong"),T5r=o("deberta-v2"),M5r=o(" \u2014 "),pU=a("a"),E5r=o("TFDebertaV2ForQuestionAnswering"),C5r=o(" (DeBERTa-v2 model)"),w5r=l(),SE=a("li"),F0e=a("strong"),A5r=o("distilbert"),y5r=o(" \u2014 "),uU=a("a"),L5r=o("TFDistilBertForQuestionAnswering"),x5r=o(" (DistilBERT model)"),$5r=l(),RE=a("li"),T0e=a("strong"),k5r=o("electra"),S5r=o(" \u2014 "),_U=a("a"),R5r=o("TFElectraForQuestionAnswering"),B5r=o(" (ELECTRA model)"),P5r=l(),BE=a("li"),M0e=a("strong"),I5r=o("flaubert"),q5r=o(" \u2014 "),bU=a("a"),N5r=o("TFFlaubertForQuestionAnsweringSimple"),j5r=o(" (FlauBERT model)"),D5r=l(),PE=a("li"),E0e=a("strong"),G5r=o("funnel"),O5r=o(" \u2014 "),vU=a("a"),V5r=o("TFFunnelForQuestionAnswering"),X5r=o(" (Funnel Transformer model)"),z5r=l(),IE=a("li"),C0e=a("strong"),Q5r=o("gptj"),W5r=o(" \u2014 "),FU=a("a"),H5r=o("TFGPTJForQuestionAnswering"),U5r=o(" (GPT-J model)"),J5r=l(),qE=a("li"),w0e=a("strong"),Y5r=o("longformer"),K5r=o(" \u2014 "),TU=a("a"),Z5r=o("TFLongformerForQuestionAnswering"),eCr=o(" (Longformer model)"),oCr=l(),NE=a("li"),A0e=a("strong"),rCr=o("mobilebert"),tCr=o(" \u2014 "),MU=a("a"),aCr=o("TFMobileBertForQuestionAnswering"),nCr=o(" (MobileBERT model)"),sCr=l(),jE=a("li"),y0e=a("strong"),lCr=o("mpnet"),iCr=o(" \u2014 "),EU=a("a"),dCr=o("TFMPNetForQuestionAnswering"),cCr=o(" (MPNet model)"),fCr=l(),DE=a("li"),L0e=a("strong"),mCr=o("rembert"),gCr=o(" \u2014 "),CU=a("a"),hCr=o("TFRemBertForQuestionAnswering"),pCr=o(" (RemBERT model)"),uCr=l(),GE=a("li"),x0e=a("strong"),_Cr=o("roberta"),bCr=o(" \u2014 "),wU=a("a"),vCr=o("TFRobertaForQuestionAnswering"),FCr=o(" (RoBERTa model)"),TCr=l(),OE=a("li"),$0e=a("strong"),MCr=o("roformer"),ECr=o(" \u2014 "),AU=a("a"),CCr=o("TFRoFormerForQuestionAnswering"),wCr=o(" (RoFormer model)"),ACr=l(),VE=a("li"),k0e=a("strong"),yCr=o("xlm"),LCr=o(" \u2014 "),yU=a("a"),xCr=o("TFXLMForQuestionAnsweringSimple"),$Cr=o(" (XLM model)"),kCr=l(),XE=a("li"),S0e=a("strong"),SCr=o("xlm-roberta"),RCr=o(" \u2014 "),LU=a("a"),BCr=o("TFXLMRobertaForQuestionAnswering"),PCr=o(" (XLM-RoBERTa model)"),ICr=l(),zE=a("li"),R0e=a("strong"),qCr=o("xlnet"),NCr=o(" \u2014 "),xU=a("a"),jCr=o("TFXLNetForQuestionAnsweringSimple"),DCr=o(" (XLNet model)"),GCr=l(),F(QE.$$.fragment),Nqe=l(),Fc=a("h2"),WE=a("a"),B0e=a("span"),F(X8.$$.fragment),OCr=l(),P0e=a("span"),VCr=o("TFAutoModelForVision2Seq"),jqe=l(),dr=a("div"),F(z8.$$.fragment),XCr=l(),Tc=a("p"),zCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$U=a("a"),QCr=o("from_pretrained()"),WCr=o(" class method or the "),kU=a("a"),HCr=o("from_config()"),UCr=o(` class
method.`),JCr=l(),Q8=a("p"),YCr=o("This class cannot be instantiated directly using "),I0e=a("code"),KCr=o("__init__()"),ZCr=o(" (throws an error)."),e3r=l(),qt=a("div"),F(W8.$$.fragment),o3r=l(),q0e=a("p"),r3r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),t3r=l(),Mc=a("p"),a3r=o(`Note:
Loading a model from its configuration file does `),N0e=a("strong"),n3r=o("not"),s3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=a("a"),l3r=o("from_pretrained()"),i3r=o(" to load the model weights."),d3r=l(),F(HE.$$.fragment),c3r=l(),qr=a("div"),F(H8.$$.fragment),f3r=l(),j0e=a("p"),m3r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),g3r=l(),fn=a("p"),h3r=o("The model class to instantiate is selected based on the "),D0e=a("code"),p3r=o("model_type"),u3r=o(` property of the config object (either
passed as an argument or loaded from `),G0e=a("code"),_3r=o("pretrained_model_name_or_path"),b3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O0e=a("code"),v3r=o("pretrained_model_name_or_path"),F3r=o(":"),T3r=l(),V0e=a("ul"),UE=a("li"),X0e=a("strong"),M3r=o("vision-encoder-decoder"),E3r=o(" \u2014 "),RU=a("a"),C3r=o("TFVisionEncoderDecoderModel"),w3r=o(" (Vision Encoder decoder model)"),A3r=l(),F(JE.$$.fragment),Dqe=l(),Ec=a("h2"),YE=a("a"),z0e=a("span"),F(U8.$$.fragment),y3r=l(),Q0e=a("span"),L3r=o("TFAutoModelForSpeechSeq2Seq"),Gqe=l(),cr=a("div"),F(J8.$$.fragment),x3r=l(),Cc=a("p"),$3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BU=a("a"),k3r=o("from_pretrained()"),S3r=o(" class method or the "),PU=a("a"),R3r=o("from_config()"),B3r=o(` class
method.`),P3r=l(),Y8=a("p"),I3r=o("This class cannot be instantiated directly using "),W0e=a("code"),q3r=o("__init__()"),N3r=o(" (throws an error)."),j3r=l(),Nt=a("div"),F(K8.$$.fragment),D3r=l(),H0e=a("p"),G3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),O3r=l(),wc=a("p"),V3r=o(`Note:
Loading a model from its configuration file does `),U0e=a("strong"),X3r=o("not"),z3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=a("a"),Q3r=o("from_pretrained()"),W3r=o(" to load the model weights."),H3r=l(),F(KE.$$.fragment),U3r=l(),Nr=a("div"),F(Z8.$$.fragment),J3r=l(),J0e=a("p"),Y3r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),K3r=l(),mn=a("p"),Z3r=o("The model class to instantiate is selected based on the "),Y0e=a("code"),ewr=o("model_type"),owr=o(` property of the config object (either
passed as an argument or loaded from `),K0e=a("code"),rwr=o("pretrained_model_name_or_path"),twr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=a("code"),awr=o("pretrained_model_name_or_path"),nwr=o(":"),swr=l(),eTe=a("ul"),ZE=a("li"),oTe=a("strong"),lwr=o("speech_to_text"),iwr=o(" \u2014 "),qU=a("a"),dwr=o("TFSpeech2TextForConditionalGeneration"),cwr=o(" (Speech2Text model)"),fwr=l(),F(e5.$$.fragment),Oqe=l(),Ac=a("h2"),o5=a("a"),rTe=a("span"),F(ex.$$.fragment),mwr=l(),tTe=a("span"),gwr=o("FlaxAutoModel"),Vqe=l(),fr=a("div"),F(ox.$$.fragment),hwr=l(),yc=a("p"),pwr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NU=a("a"),uwr=o("from_pretrained()"),_wr=o(" class method or the "),jU=a("a"),bwr=o("from_config()"),vwr=o(` class
method.`),Fwr=l(),rx=a("p"),Twr=o("This class cannot be instantiated directly using "),aTe=a("code"),Mwr=o("__init__()"),Ewr=o(" (throws an error)."),Cwr=l(),jt=a("div"),F(tx.$$.fragment),wwr=l(),nTe=a("p"),Awr=o("Instantiates one of the base model classes of the library from a configuration."),ywr=l(),Lc=a("p"),Lwr=o(`Note:
Loading a model from its configuration file does `),sTe=a("strong"),xwr=o("not"),$wr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DU=a("a"),kwr=o("from_pretrained()"),Swr=o(" to load the model weights."),Rwr=l(),F(r5.$$.fragment),Bwr=l(),jr=a("div"),F(ax.$$.fragment),Pwr=l(),lTe=a("p"),Iwr=o("Instantiate one of the base model classes of the library from a pretrained model."),qwr=l(),gn=a("p"),Nwr=o("The model class to instantiate is selected based on the "),iTe=a("code"),jwr=o("model_type"),Dwr=o(` property of the config object (either
passed as an argument or loaded from `),dTe=a("code"),Gwr=o("pretrained_model_name_or_path"),Owr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=a("code"),Vwr=o("pretrained_model_name_or_path"),Xwr=o(":"),zwr=l(),re=a("ul"),t5=a("li"),fTe=a("strong"),Qwr=o("albert"),Wwr=o(" \u2014 "),GU=a("a"),Hwr=o("FlaxAlbertModel"),Uwr=o(" (ALBERT model)"),Jwr=l(),a5=a("li"),mTe=a("strong"),Ywr=o("bart"),Kwr=o(" \u2014 "),OU=a("a"),Zwr=o("FlaxBartModel"),eAr=o(" (BART model)"),oAr=l(),n5=a("li"),gTe=a("strong"),rAr=o("beit"),tAr=o(" \u2014 "),VU=a("a"),aAr=o("FlaxBeitModel"),nAr=o(" (BEiT model)"),sAr=l(),s5=a("li"),hTe=a("strong"),lAr=o("bert"),iAr=o(" \u2014 "),XU=a("a"),dAr=o("FlaxBertModel"),cAr=o(" (BERT model)"),fAr=l(),l5=a("li"),pTe=a("strong"),mAr=o("big_bird"),gAr=o(" \u2014 "),zU=a("a"),hAr=o("FlaxBigBirdModel"),pAr=o(" (BigBird model)"),uAr=l(),i5=a("li"),uTe=a("strong"),_Ar=o("blenderbot"),bAr=o(" \u2014 "),QU=a("a"),vAr=o("FlaxBlenderbotModel"),FAr=o(" (Blenderbot model)"),TAr=l(),d5=a("li"),_Te=a("strong"),MAr=o("blenderbot-small"),EAr=o(" \u2014 "),WU=a("a"),CAr=o("FlaxBlenderbotSmallModel"),wAr=o(" (BlenderbotSmall model)"),AAr=l(),c5=a("li"),bTe=a("strong"),yAr=o("clip"),LAr=o(" \u2014 "),HU=a("a"),xAr=o("FlaxCLIPModel"),$Ar=o(" (CLIP model)"),kAr=l(),f5=a("li"),vTe=a("strong"),SAr=o("distilbert"),RAr=o(" \u2014 "),UU=a("a"),BAr=o("FlaxDistilBertModel"),PAr=o(" (DistilBERT model)"),IAr=l(),m5=a("li"),FTe=a("strong"),qAr=o("electra"),NAr=o(" \u2014 "),JU=a("a"),jAr=o("FlaxElectraModel"),DAr=o(" (ELECTRA model)"),GAr=l(),g5=a("li"),TTe=a("strong"),OAr=o("gpt2"),VAr=o(" \u2014 "),YU=a("a"),XAr=o("FlaxGPT2Model"),zAr=o(" (OpenAI GPT-2 model)"),QAr=l(),h5=a("li"),MTe=a("strong"),WAr=o("gpt_neo"),HAr=o(" \u2014 "),KU=a("a"),UAr=o("FlaxGPTNeoModel"),JAr=o(" (GPT Neo model)"),YAr=l(),p5=a("li"),ETe=a("strong"),KAr=o("gptj"),ZAr=o(" \u2014 "),ZU=a("a"),e6r=o("FlaxGPTJModel"),o6r=o(" (GPT-J model)"),r6r=l(),u5=a("li"),CTe=a("strong"),t6r=o("marian"),a6r=o(" \u2014 "),eJ=a("a"),n6r=o("FlaxMarianModel"),s6r=o(" (Marian model)"),l6r=l(),_5=a("li"),wTe=a("strong"),i6r=o("mbart"),d6r=o(" \u2014 "),oJ=a("a"),c6r=o("FlaxMBartModel"),f6r=o(" (mBART model)"),m6r=l(),b5=a("li"),ATe=a("strong"),g6r=o("mt5"),h6r=o(" \u2014 "),rJ=a("a"),p6r=o("FlaxMT5Model"),u6r=o(" (mT5 model)"),_6r=l(),v5=a("li"),yTe=a("strong"),b6r=o("pegasus"),v6r=o(" \u2014 "),tJ=a("a"),F6r=o("FlaxPegasusModel"),T6r=o(" (Pegasus model)"),M6r=l(),F5=a("li"),LTe=a("strong"),E6r=o("roberta"),C6r=o(" \u2014 "),aJ=a("a"),w6r=o("FlaxRobertaModel"),A6r=o(" (RoBERTa model)"),y6r=l(),T5=a("li"),xTe=a("strong"),L6r=o("roformer"),x6r=o(" \u2014 "),nJ=a("a"),$6r=o("FlaxRoFormerModel"),k6r=o(" (RoFormer model)"),S6r=l(),M5=a("li"),$Te=a("strong"),R6r=o("t5"),B6r=o(" \u2014 "),sJ=a("a"),P6r=o("FlaxT5Model"),I6r=o(" (T5 model)"),q6r=l(),E5=a("li"),kTe=a("strong"),N6r=o("vision-text-dual-encoder"),j6r=o(" \u2014 "),lJ=a("a"),D6r=o("FlaxVisionTextDualEncoderModel"),G6r=o(" (VisionTextDualEncoder model)"),O6r=l(),C5=a("li"),STe=a("strong"),V6r=o("vit"),X6r=o(" \u2014 "),iJ=a("a"),z6r=o("FlaxViTModel"),Q6r=o(" (ViT model)"),W6r=l(),w5=a("li"),RTe=a("strong"),H6r=o("wav2vec2"),U6r=o(" \u2014 "),dJ=a("a"),J6r=o("FlaxWav2Vec2Model"),Y6r=o(" (Wav2Vec2 model)"),K6r=l(),A5=a("li"),BTe=a("strong"),Z6r=o("xglm"),eyr=o(" \u2014 "),cJ=a("a"),oyr=o("FlaxXGLMModel"),ryr=o(" (XGLM model)"),tyr=l(),y5=a("li"),PTe=a("strong"),ayr=o("xlm-roberta"),nyr=o(" \u2014 "),fJ=a("a"),syr=o("FlaxXLMRobertaModel"),lyr=o(" (XLM-RoBERTa model)"),iyr=l(),F(L5.$$.fragment),Xqe=l(),xc=a("h2"),x5=a("a"),ITe=a("span"),F(nx.$$.fragment),dyr=l(),qTe=a("span"),cyr=o("FlaxAutoModelForCausalLM"),zqe=l(),mr=a("div"),F(sx.$$.fragment),fyr=l(),$c=a("p"),myr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mJ=a("a"),gyr=o("from_pretrained()"),hyr=o(" class method or the "),gJ=a("a"),pyr=o("from_config()"),uyr=o(` class
method.`),_yr=l(),lx=a("p"),byr=o("This class cannot be instantiated directly using "),NTe=a("code"),vyr=o("__init__()"),Fyr=o(" (throws an error)."),Tyr=l(),Dt=a("div"),F(ix.$$.fragment),Myr=l(),jTe=a("p"),Eyr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Cyr=l(),kc=a("p"),wyr=o(`Note:
Loading a model from its configuration file does `),DTe=a("strong"),Ayr=o("not"),yyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),Lyr=o("from_pretrained()"),xyr=o(" to load the model weights."),$yr=l(),F($5.$$.fragment),kyr=l(),Dr=a("div"),F(dx.$$.fragment),Syr=l(),GTe=a("p"),Ryr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Byr=l(),hn=a("p"),Pyr=o("The model class to instantiate is selected based on the "),OTe=a("code"),Iyr=o("model_type"),qyr=o(` property of the config object (either
passed as an argument or loaded from `),VTe=a("code"),Nyr=o("pretrained_model_name_or_path"),jyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=a("code"),Dyr=o("pretrained_model_name_or_path"),Gyr=o(":"),Oyr=l(),ke=a("ul"),k5=a("li"),zTe=a("strong"),Vyr=o("bart"),Xyr=o(" \u2014 "),pJ=a("a"),zyr=o("FlaxBartForCausalLM"),Qyr=o(" (BART model)"),Wyr=l(),S5=a("li"),QTe=a("strong"),Hyr=o("bert"),Uyr=o(" \u2014 "),uJ=a("a"),Jyr=o("FlaxBertForCausalLM"),Yyr=o(" (BERT model)"),Kyr=l(),R5=a("li"),WTe=a("strong"),Zyr=o("big_bird"),eLr=o(" \u2014 "),_J=a("a"),oLr=o("FlaxBigBirdForCausalLM"),rLr=o(" (BigBird model)"),tLr=l(),B5=a("li"),HTe=a("strong"),aLr=o("electra"),nLr=o(" \u2014 "),bJ=a("a"),sLr=o("FlaxElectraForCausalLM"),lLr=o(" (ELECTRA model)"),iLr=l(),P5=a("li"),UTe=a("strong"),dLr=o("gpt2"),cLr=o(" \u2014 "),vJ=a("a"),fLr=o("FlaxGPT2LMHeadModel"),mLr=o(" (OpenAI GPT-2 model)"),gLr=l(),I5=a("li"),JTe=a("strong"),hLr=o("gpt_neo"),pLr=o(" \u2014 "),FJ=a("a"),uLr=o("FlaxGPTNeoForCausalLM"),_Lr=o(" (GPT Neo model)"),bLr=l(),q5=a("li"),YTe=a("strong"),vLr=o("gptj"),FLr=o(" \u2014 "),TJ=a("a"),TLr=o("FlaxGPTJForCausalLM"),MLr=o(" (GPT-J model)"),ELr=l(),N5=a("li"),KTe=a("strong"),CLr=o("roberta"),wLr=o(" \u2014 "),MJ=a("a"),ALr=o("FlaxRobertaForCausalLM"),yLr=o(" (RoBERTa model)"),LLr=l(),j5=a("li"),ZTe=a("strong"),xLr=o("xglm"),$Lr=o(" \u2014 "),EJ=a("a"),kLr=o("FlaxXGLMForCausalLM"),SLr=o(" (XGLM model)"),RLr=l(),F(D5.$$.fragment),Qqe=l(),Sc=a("h2"),G5=a("a"),e7e=a("span"),F(cx.$$.fragment),BLr=l(),o7e=a("span"),PLr=o("FlaxAutoModelForPreTraining"),Wqe=l(),gr=a("div"),F(fx.$$.fragment),ILr=l(),Rc=a("p"),qLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),CJ=a("a"),NLr=o("from_pretrained()"),jLr=o(" class method or the "),wJ=a("a"),DLr=o("from_config()"),GLr=o(` class
method.`),OLr=l(),mx=a("p"),VLr=o("This class cannot be instantiated directly using "),r7e=a("code"),XLr=o("__init__()"),zLr=o(" (throws an error)."),QLr=l(),Gt=a("div"),F(gx.$$.fragment),WLr=l(),t7e=a("p"),HLr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ULr=l(),Bc=a("p"),JLr=o(`Note:
Loading a model from its configuration file does `),a7e=a("strong"),YLr=o("not"),KLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AJ=a("a"),ZLr=o("from_pretrained()"),e8r=o(" to load the model weights."),o8r=l(),F(O5.$$.fragment),r8r=l(),Gr=a("div"),F(hx.$$.fragment),t8r=l(),n7e=a("p"),a8r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),n8r=l(),pn=a("p"),s8r=o("The model class to instantiate is selected based on the "),s7e=a("code"),l8r=o("model_type"),i8r=o(` property of the config object (either
passed as an argument or loaded from `),l7e=a("code"),d8r=o("pretrained_model_name_or_path"),c8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i7e=a("code"),f8r=o("pretrained_model_name_or_path"),m8r=o(":"),g8r=l(),Me=a("ul"),V5=a("li"),d7e=a("strong"),h8r=o("albert"),p8r=o(" \u2014 "),yJ=a("a"),u8r=o("FlaxAlbertForPreTraining"),_8r=o(" (ALBERT model)"),b8r=l(),X5=a("li"),c7e=a("strong"),v8r=o("bart"),F8r=o(" \u2014 "),LJ=a("a"),T8r=o("FlaxBartForConditionalGeneration"),M8r=o(" (BART model)"),E8r=l(),z5=a("li"),f7e=a("strong"),C8r=o("bert"),w8r=o(" \u2014 "),xJ=a("a"),A8r=o("FlaxBertForPreTraining"),y8r=o(" (BERT model)"),L8r=l(),Q5=a("li"),m7e=a("strong"),x8r=o("big_bird"),$8r=o(" \u2014 "),$J=a("a"),k8r=o("FlaxBigBirdForPreTraining"),S8r=o(" (BigBird model)"),R8r=l(),W5=a("li"),g7e=a("strong"),B8r=o("electra"),P8r=o(" \u2014 "),kJ=a("a"),I8r=o("FlaxElectraForPreTraining"),q8r=o(" (ELECTRA model)"),N8r=l(),H5=a("li"),h7e=a("strong"),j8r=o("mbart"),D8r=o(" \u2014 "),SJ=a("a"),G8r=o("FlaxMBartForConditionalGeneration"),O8r=o(" (mBART model)"),V8r=l(),U5=a("li"),p7e=a("strong"),X8r=o("mt5"),z8r=o(" \u2014 "),RJ=a("a"),Q8r=o("FlaxMT5ForConditionalGeneration"),W8r=o(" (mT5 model)"),H8r=l(),J5=a("li"),u7e=a("strong"),U8r=o("roberta"),J8r=o(" \u2014 "),BJ=a("a"),Y8r=o("FlaxRobertaForMaskedLM"),K8r=o(" (RoBERTa model)"),Z8r=l(),Y5=a("li"),_7e=a("strong"),exr=o("roformer"),oxr=o(" \u2014 "),PJ=a("a"),rxr=o("FlaxRoFormerForMaskedLM"),txr=o(" (RoFormer model)"),axr=l(),K5=a("li"),b7e=a("strong"),nxr=o("t5"),sxr=o(" \u2014 "),IJ=a("a"),lxr=o("FlaxT5ForConditionalGeneration"),ixr=o(" (T5 model)"),dxr=l(),Z5=a("li"),v7e=a("strong"),cxr=o("wav2vec2"),fxr=o(" \u2014 "),qJ=a("a"),mxr=o("FlaxWav2Vec2ForPreTraining"),gxr=o(" (Wav2Vec2 model)"),hxr=l(),eC=a("li"),F7e=a("strong"),pxr=o("xlm-roberta"),uxr=o(" \u2014 "),NJ=a("a"),_xr=o("FlaxXLMRobertaForMaskedLM"),bxr=o(" (XLM-RoBERTa model)"),vxr=l(),F(oC.$$.fragment),Hqe=l(),Pc=a("h2"),rC=a("a"),T7e=a("span"),F(px.$$.fragment),Fxr=l(),M7e=a("span"),Txr=o("FlaxAutoModelForMaskedLM"),Uqe=l(),hr=a("div"),F(ux.$$.fragment),Mxr=l(),Ic=a("p"),Exr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jJ=a("a"),Cxr=o("from_pretrained()"),wxr=o(" class method or the "),DJ=a("a"),Axr=o("from_config()"),yxr=o(` class
method.`),Lxr=l(),_x=a("p"),xxr=o("This class cannot be instantiated directly using "),E7e=a("code"),$xr=o("__init__()"),kxr=o(" (throws an error)."),Sxr=l(),Ot=a("div"),F(bx.$$.fragment),Rxr=l(),C7e=a("p"),Bxr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Pxr=l(),qc=a("p"),Ixr=o(`Note:
Loading a model from its configuration file does `),w7e=a("strong"),qxr=o("not"),Nxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=a("a"),jxr=o("from_pretrained()"),Dxr=o(" to load the model weights."),Gxr=l(),F(tC.$$.fragment),Oxr=l(),Or=a("div"),F(vx.$$.fragment),Vxr=l(),A7e=a("p"),Xxr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zxr=l(),un=a("p"),Qxr=o("The model class to instantiate is selected based on the "),y7e=a("code"),Wxr=o("model_type"),Hxr=o(` property of the config object (either
passed as an argument or loaded from `),L7e=a("code"),Uxr=o("pretrained_model_name_or_path"),Jxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x7e=a("code"),Yxr=o("pretrained_model_name_or_path"),Kxr=o(":"),Zxr=l(),Le=a("ul"),aC=a("li"),$7e=a("strong"),e9r=o("albert"),o9r=o(" \u2014 "),OJ=a("a"),r9r=o("FlaxAlbertForMaskedLM"),t9r=o(" (ALBERT model)"),a9r=l(),nC=a("li"),k7e=a("strong"),n9r=o("bart"),s9r=o(" \u2014 "),VJ=a("a"),l9r=o("FlaxBartForConditionalGeneration"),i9r=o(" (BART model)"),d9r=l(),sC=a("li"),S7e=a("strong"),c9r=o("bert"),f9r=o(" \u2014 "),XJ=a("a"),m9r=o("FlaxBertForMaskedLM"),g9r=o(" (BERT model)"),h9r=l(),lC=a("li"),R7e=a("strong"),p9r=o("big_bird"),u9r=o(" \u2014 "),zJ=a("a"),_9r=o("FlaxBigBirdForMaskedLM"),b9r=o(" (BigBird model)"),v9r=l(),iC=a("li"),B7e=a("strong"),F9r=o("distilbert"),T9r=o(" \u2014 "),QJ=a("a"),M9r=o("FlaxDistilBertForMaskedLM"),E9r=o(" (DistilBERT model)"),C9r=l(),dC=a("li"),P7e=a("strong"),w9r=o("electra"),A9r=o(" \u2014 "),WJ=a("a"),y9r=o("FlaxElectraForMaskedLM"),L9r=o(" (ELECTRA model)"),x9r=l(),cC=a("li"),I7e=a("strong"),$9r=o("mbart"),k9r=o(" \u2014 "),HJ=a("a"),S9r=o("FlaxMBartForConditionalGeneration"),R9r=o(" (mBART model)"),B9r=l(),fC=a("li"),q7e=a("strong"),P9r=o("roberta"),I9r=o(" \u2014 "),UJ=a("a"),q9r=o("FlaxRobertaForMaskedLM"),N9r=o(" (RoBERTa model)"),j9r=l(),mC=a("li"),N7e=a("strong"),D9r=o("roformer"),G9r=o(" \u2014 "),JJ=a("a"),O9r=o("FlaxRoFormerForMaskedLM"),V9r=o(" (RoFormer model)"),X9r=l(),gC=a("li"),j7e=a("strong"),z9r=o("xlm-roberta"),Q9r=o(" \u2014 "),YJ=a("a"),W9r=o("FlaxXLMRobertaForMaskedLM"),H9r=o(" (XLM-RoBERTa model)"),U9r=l(),F(hC.$$.fragment),Jqe=l(),Nc=a("h2"),pC=a("a"),D7e=a("span"),F(Fx.$$.fragment),J9r=l(),G7e=a("span"),Y9r=o("FlaxAutoModelForSeq2SeqLM"),Yqe=l(),pr=a("div"),F(Tx.$$.fragment),K9r=l(),jc=a("p"),Z9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),KJ=a("a"),e$r=o("from_pretrained()"),o$r=o(" class method or the "),ZJ=a("a"),r$r=o("from_config()"),t$r=o(` class
method.`),a$r=l(),Mx=a("p"),n$r=o("This class cannot be instantiated directly using "),O7e=a("code"),s$r=o("__init__()"),l$r=o(" (throws an error)."),i$r=l(),Vt=a("div"),F(Ex.$$.fragment),d$r=l(),V7e=a("p"),c$r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),f$r=l(),Dc=a("p"),m$r=o(`Note:
Loading a model from its configuration file does `),X7e=a("strong"),g$r=o("not"),h$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=a("a"),p$r=o("from_pretrained()"),u$r=o(" to load the model weights."),_$r=l(),F(uC.$$.fragment),b$r=l(),Vr=a("div"),F(Cx.$$.fragment),v$r=l(),z7e=a("p"),F$r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),T$r=l(),_n=a("p"),M$r=o("The model class to instantiate is selected based on the "),Q7e=a("code"),E$r=o("model_type"),C$r=o(` property of the config object (either
passed as an argument or loaded from `),W7e=a("code"),w$r=o("pretrained_model_name_or_path"),A$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H7e=a("code"),y$r=o("pretrained_model_name_or_path"),L$r=o(":"),x$r=l(),Se=a("ul"),_C=a("li"),U7e=a("strong"),$$r=o("bart"),k$r=o(" \u2014 "),oY=a("a"),S$r=o("FlaxBartForConditionalGeneration"),R$r=o(" (BART model)"),B$r=l(),bC=a("li"),J7e=a("strong"),P$r=o("blenderbot"),I$r=o(" \u2014 "),rY=a("a"),q$r=o("FlaxBlenderbotForConditionalGeneration"),N$r=o(" (Blenderbot model)"),j$r=l(),vC=a("li"),Y7e=a("strong"),D$r=o("blenderbot-small"),G$r=o(" \u2014 "),tY=a("a"),O$r=o("FlaxBlenderbotSmallForConditionalGeneration"),V$r=o(" (BlenderbotSmall model)"),X$r=l(),FC=a("li"),K7e=a("strong"),z$r=o("encoder-decoder"),Q$r=o(" \u2014 "),aY=a("a"),W$r=o("FlaxEncoderDecoderModel"),H$r=o(" (Encoder decoder model)"),U$r=l(),TC=a("li"),Z7e=a("strong"),J$r=o("marian"),Y$r=o(" \u2014 "),nY=a("a"),K$r=o("FlaxMarianMTModel"),Z$r=o(" (Marian model)"),ekr=l(),MC=a("li"),eMe=a("strong"),okr=o("mbart"),rkr=o(" \u2014 "),sY=a("a"),tkr=o("FlaxMBartForConditionalGeneration"),akr=o(" (mBART model)"),nkr=l(),EC=a("li"),oMe=a("strong"),skr=o("mt5"),lkr=o(" \u2014 "),lY=a("a"),ikr=o("FlaxMT5ForConditionalGeneration"),dkr=o(" (mT5 model)"),ckr=l(),CC=a("li"),rMe=a("strong"),fkr=o("pegasus"),mkr=o(" \u2014 "),iY=a("a"),gkr=o("FlaxPegasusForConditionalGeneration"),hkr=o(" (Pegasus model)"),pkr=l(),wC=a("li"),tMe=a("strong"),ukr=o("t5"),_kr=o(" \u2014 "),dY=a("a"),bkr=o("FlaxT5ForConditionalGeneration"),vkr=o(" (T5 model)"),Fkr=l(),F(AC.$$.fragment),Kqe=l(),Gc=a("h2"),yC=a("a"),aMe=a("span"),F(wx.$$.fragment),Tkr=l(),nMe=a("span"),Mkr=o("FlaxAutoModelForSequenceClassification"),Zqe=l(),ur=a("div"),F(Ax.$$.fragment),Ekr=l(),Oc=a("p"),Ckr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cY=a("a"),wkr=o("from_pretrained()"),Akr=o(" class method or the "),fY=a("a"),ykr=o("from_config()"),Lkr=o(` class
method.`),xkr=l(),yx=a("p"),$kr=o("This class cannot be instantiated directly using "),sMe=a("code"),kkr=o("__init__()"),Skr=o(" (throws an error)."),Rkr=l(),Xt=a("div"),F(Lx.$$.fragment),Bkr=l(),lMe=a("p"),Pkr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ikr=l(),Vc=a("p"),qkr=o(`Note:
Loading a model from its configuration file does `),iMe=a("strong"),Nkr=o("not"),jkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=a("a"),Dkr=o("from_pretrained()"),Gkr=o(" to load the model weights."),Okr=l(),F(LC.$$.fragment),Vkr=l(),Xr=a("div"),F(xx.$$.fragment),Xkr=l(),dMe=a("p"),zkr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Qkr=l(),bn=a("p"),Wkr=o("The model class to instantiate is selected based on the "),cMe=a("code"),Hkr=o("model_type"),Ukr=o(` property of the config object (either
passed as an argument or loaded from `),fMe=a("code"),Jkr=o("pretrained_model_name_or_path"),Ykr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=a("code"),Kkr=o("pretrained_model_name_or_path"),Zkr=o(":"),eSr=l(),xe=a("ul"),xC=a("li"),gMe=a("strong"),oSr=o("albert"),rSr=o(" \u2014 "),gY=a("a"),tSr=o("FlaxAlbertForSequenceClassification"),aSr=o(" (ALBERT model)"),nSr=l(),$C=a("li"),hMe=a("strong"),sSr=o("bart"),lSr=o(" \u2014 "),hY=a("a"),iSr=o("FlaxBartForSequenceClassification"),dSr=o(" (BART model)"),cSr=l(),kC=a("li"),pMe=a("strong"),fSr=o("bert"),mSr=o(" \u2014 "),pY=a("a"),gSr=o("FlaxBertForSequenceClassification"),hSr=o(" (BERT model)"),pSr=l(),SC=a("li"),uMe=a("strong"),uSr=o("big_bird"),_Sr=o(" \u2014 "),uY=a("a"),bSr=o("FlaxBigBirdForSequenceClassification"),vSr=o(" (BigBird model)"),FSr=l(),RC=a("li"),_Me=a("strong"),TSr=o("distilbert"),MSr=o(" \u2014 "),_Y=a("a"),ESr=o("FlaxDistilBertForSequenceClassification"),CSr=o(" (DistilBERT model)"),wSr=l(),BC=a("li"),bMe=a("strong"),ASr=o("electra"),ySr=o(" \u2014 "),bY=a("a"),LSr=o("FlaxElectraForSequenceClassification"),xSr=o(" (ELECTRA model)"),$Sr=l(),PC=a("li"),vMe=a("strong"),kSr=o("mbart"),SSr=o(" \u2014 "),vY=a("a"),RSr=o("FlaxMBartForSequenceClassification"),BSr=o(" (mBART model)"),PSr=l(),IC=a("li"),FMe=a("strong"),ISr=o("roberta"),qSr=o(" \u2014 "),FY=a("a"),NSr=o("FlaxRobertaForSequenceClassification"),jSr=o(" (RoBERTa model)"),DSr=l(),qC=a("li"),TMe=a("strong"),GSr=o("roformer"),OSr=o(" \u2014 "),TY=a("a"),VSr=o("FlaxRoFormerForSequenceClassification"),XSr=o(" (RoFormer model)"),zSr=l(),NC=a("li"),MMe=a("strong"),QSr=o("xlm-roberta"),WSr=o(" \u2014 "),MY=a("a"),HSr=o("FlaxXLMRobertaForSequenceClassification"),USr=o(" (XLM-RoBERTa model)"),JSr=l(),F(jC.$$.fragment),eNe=l(),Xc=a("h2"),DC=a("a"),EMe=a("span"),F($x.$$.fragment),YSr=l(),CMe=a("span"),KSr=o("FlaxAutoModelForQuestionAnswering"),oNe=l(),_r=a("div"),F(kx.$$.fragment),ZSr=l(),zc=a("p"),eRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EY=a("a"),oRr=o("from_pretrained()"),rRr=o(" class method or the "),CY=a("a"),tRr=o("from_config()"),aRr=o(` class
method.`),nRr=l(),Sx=a("p"),sRr=o("This class cannot be instantiated directly using "),wMe=a("code"),lRr=o("__init__()"),iRr=o(" (throws an error)."),dRr=l(),zt=a("div"),F(Rx.$$.fragment),cRr=l(),AMe=a("p"),fRr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mRr=l(),Qc=a("p"),gRr=o(`Note:
Loading a model from its configuration file does `),yMe=a("strong"),hRr=o("not"),pRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=a("a"),uRr=o("from_pretrained()"),_Rr=o(" to load the model weights."),bRr=l(),F(GC.$$.fragment),vRr=l(),zr=a("div"),F(Bx.$$.fragment),FRr=l(),LMe=a("p"),TRr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),MRr=l(),vn=a("p"),ERr=o("The model class to instantiate is selected based on the "),xMe=a("code"),CRr=o("model_type"),wRr=o(` property of the config object (either
passed as an argument or loaded from `),$Me=a("code"),ARr=o("pretrained_model_name_or_path"),yRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kMe=a("code"),LRr=o("pretrained_model_name_or_path"),xRr=o(":"),$Rr=l(),$e=a("ul"),OC=a("li"),SMe=a("strong"),kRr=o("albert"),SRr=o(" \u2014 "),AY=a("a"),RRr=o("FlaxAlbertForQuestionAnswering"),BRr=o(" (ALBERT model)"),PRr=l(),VC=a("li"),RMe=a("strong"),IRr=o("bart"),qRr=o(" \u2014 "),yY=a("a"),NRr=o("FlaxBartForQuestionAnswering"),jRr=o(" (BART model)"),DRr=l(),XC=a("li"),BMe=a("strong"),GRr=o("bert"),ORr=o(" \u2014 "),LY=a("a"),VRr=o("FlaxBertForQuestionAnswering"),XRr=o(" (BERT model)"),zRr=l(),zC=a("li"),PMe=a("strong"),QRr=o("big_bird"),WRr=o(" \u2014 "),xY=a("a"),HRr=o("FlaxBigBirdForQuestionAnswering"),URr=o(" (BigBird model)"),JRr=l(),QC=a("li"),IMe=a("strong"),YRr=o("distilbert"),KRr=o(" \u2014 "),$Y=a("a"),ZRr=o("FlaxDistilBertForQuestionAnswering"),eBr=o(" (DistilBERT model)"),oBr=l(),WC=a("li"),qMe=a("strong"),rBr=o("electra"),tBr=o(" \u2014 "),kY=a("a"),aBr=o("FlaxElectraForQuestionAnswering"),nBr=o(" (ELECTRA model)"),sBr=l(),HC=a("li"),NMe=a("strong"),lBr=o("mbart"),iBr=o(" \u2014 "),SY=a("a"),dBr=o("FlaxMBartForQuestionAnswering"),cBr=o(" (mBART model)"),fBr=l(),UC=a("li"),jMe=a("strong"),mBr=o("roberta"),gBr=o(" \u2014 "),RY=a("a"),hBr=o("FlaxRobertaForQuestionAnswering"),pBr=o(" (RoBERTa model)"),uBr=l(),JC=a("li"),DMe=a("strong"),_Br=o("roformer"),bBr=o(" \u2014 "),BY=a("a"),vBr=o("FlaxRoFormerForQuestionAnswering"),FBr=o(" (RoFormer model)"),TBr=l(),YC=a("li"),GMe=a("strong"),MBr=o("xlm-roberta"),EBr=o(" \u2014 "),PY=a("a"),CBr=o("FlaxXLMRobertaForQuestionAnswering"),wBr=o(" (XLM-RoBERTa model)"),ABr=l(),F(KC.$$.fragment),rNe=l(),Wc=a("h2"),ZC=a("a"),OMe=a("span"),F(Px.$$.fragment),yBr=l(),VMe=a("span"),LBr=o("FlaxAutoModelForTokenClassification"),tNe=l(),br=a("div"),F(Ix.$$.fragment),xBr=l(),Hc=a("p"),$Br=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),IY=a("a"),kBr=o("from_pretrained()"),SBr=o(" class method or the "),qY=a("a"),RBr=o("from_config()"),BBr=o(` class
method.`),PBr=l(),qx=a("p"),IBr=o("This class cannot be instantiated directly using "),XMe=a("code"),qBr=o("__init__()"),NBr=o(" (throws an error)."),jBr=l(),Qt=a("div"),F(Nx.$$.fragment),DBr=l(),zMe=a("p"),GBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),OBr=l(),Uc=a("p"),VBr=o(`Note:
Loading a model from its configuration file does `),QMe=a("strong"),XBr=o("not"),zBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=a("a"),QBr=o("from_pretrained()"),WBr=o(" to load the model weights."),HBr=l(),F(e3.$$.fragment),UBr=l(),Qr=a("div"),F(jx.$$.fragment),JBr=l(),WMe=a("p"),YBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),KBr=l(),Fn=a("p"),ZBr=o("The model class to instantiate is selected based on the "),HMe=a("code"),ePr=o("model_type"),oPr=o(` property of the config object (either
passed as an argument or loaded from `),UMe=a("code"),rPr=o("pretrained_model_name_or_path"),tPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JMe=a("code"),aPr=o("pretrained_model_name_or_path"),nPr=o(":"),sPr=l(),De=a("ul"),o3=a("li"),YMe=a("strong"),lPr=o("albert"),iPr=o(" \u2014 "),jY=a("a"),dPr=o("FlaxAlbertForTokenClassification"),cPr=o(" (ALBERT model)"),fPr=l(),r3=a("li"),KMe=a("strong"),mPr=o("bert"),gPr=o(" \u2014 "),DY=a("a"),hPr=o("FlaxBertForTokenClassification"),pPr=o(" (BERT model)"),uPr=l(),t3=a("li"),ZMe=a("strong"),_Pr=o("big_bird"),bPr=o(" \u2014 "),GY=a("a"),vPr=o("FlaxBigBirdForTokenClassification"),FPr=o(" (BigBird model)"),TPr=l(),a3=a("li"),e4e=a("strong"),MPr=o("distilbert"),EPr=o(" \u2014 "),OY=a("a"),CPr=o("FlaxDistilBertForTokenClassification"),wPr=o(" (DistilBERT model)"),APr=l(),n3=a("li"),o4e=a("strong"),yPr=o("electra"),LPr=o(" \u2014 "),VY=a("a"),xPr=o("FlaxElectraForTokenClassification"),$Pr=o(" (ELECTRA model)"),kPr=l(),s3=a("li"),r4e=a("strong"),SPr=o("roberta"),RPr=o(" \u2014 "),XY=a("a"),BPr=o("FlaxRobertaForTokenClassification"),PPr=o(" (RoBERTa model)"),IPr=l(),l3=a("li"),t4e=a("strong"),qPr=o("roformer"),NPr=o(" \u2014 "),zY=a("a"),jPr=o("FlaxRoFormerForTokenClassification"),DPr=o(" (RoFormer model)"),GPr=l(),i3=a("li"),a4e=a("strong"),OPr=o("xlm-roberta"),VPr=o(" \u2014 "),QY=a("a"),XPr=o("FlaxXLMRobertaForTokenClassification"),zPr=o(" (XLM-RoBERTa model)"),QPr=l(),F(d3.$$.fragment),aNe=l(),Jc=a("h2"),c3=a("a"),n4e=a("span"),F(Dx.$$.fragment),WPr=l(),s4e=a("span"),HPr=o("FlaxAutoModelForMultipleChoice"),nNe=l(),vr=a("div"),F(Gx.$$.fragment),UPr=l(),Yc=a("p"),JPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WY=a("a"),YPr=o("from_pretrained()"),KPr=o(" class method or the "),HY=a("a"),ZPr=o("from_config()"),eIr=o(` class
method.`),oIr=l(),Ox=a("p"),rIr=o("This class cannot be instantiated directly using "),l4e=a("code"),tIr=o("__init__()"),aIr=o(" (throws an error)."),nIr=l(),Wt=a("div"),F(Vx.$$.fragment),sIr=l(),i4e=a("p"),lIr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iIr=l(),Kc=a("p"),dIr=o(`Note:
Loading a model from its configuration file does `),d4e=a("strong"),cIr=o("not"),fIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=a("a"),mIr=o("from_pretrained()"),gIr=o(" to load the model weights."),hIr=l(),F(f3.$$.fragment),pIr=l(),Wr=a("div"),F(Xx.$$.fragment),uIr=l(),c4e=a("p"),_Ir=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bIr=l(),Tn=a("p"),vIr=o("The model class to instantiate is selected based on the "),f4e=a("code"),FIr=o("model_type"),TIr=o(` property of the config object (either
passed as an argument or loaded from `),m4e=a("code"),MIr=o("pretrained_model_name_or_path"),EIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g4e=a("code"),CIr=o("pretrained_model_name_or_path"),wIr=o(":"),AIr=l(),Ge=a("ul"),m3=a("li"),h4e=a("strong"),yIr=o("albert"),LIr=o(" \u2014 "),JY=a("a"),xIr=o("FlaxAlbertForMultipleChoice"),$Ir=o(" (ALBERT model)"),kIr=l(),g3=a("li"),p4e=a("strong"),SIr=o("bert"),RIr=o(" \u2014 "),YY=a("a"),BIr=o("FlaxBertForMultipleChoice"),PIr=o(" (BERT model)"),IIr=l(),h3=a("li"),u4e=a("strong"),qIr=o("big_bird"),NIr=o(" \u2014 "),KY=a("a"),jIr=o("FlaxBigBirdForMultipleChoice"),DIr=o(" (BigBird model)"),GIr=l(),p3=a("li"),_4e=a("strong"),OIr=o("distilbert"),VIr=o(" \u2014 "),ZY=a("a"),XIr=o("FlaxDistilBertForMultipleChoice"),zIr=o(" (DistilBERT model)"),QIr=l(),u3=a("li"),b4e=a("strong"),WIr=o("electra"),HIr=o(" \u2014 "),eK=a("a"),UIr=o("FlaxElectraForMultipleChoice"),JIr=o(" (ELECTRA model)"),YIr=l(),_3=a("li"),v4e=a("strong"),KIr=o("roberta"),ZIr=o(" \u2014 "),oK=a("a"),eqr=o("FlaxRobertaForMultipleChoice"),oqr=o(" (RoBERTa model)"),rqr=l(),b3=a("li"),F4e=a("strong"),tqr=o("roformer"),aqr=o(" \u2014 "),rK=a("a"),nqr=o("FlaxRoFormerForMultipleChoice"),sqr=o(" (RoFormer model)"),lqr=l(),v3=a("li"),T4e=a("strong"),iqr=o("xlm-roberta"),dqr=o(" \u2014 "),tK=a("a"),cqr=o("FlaxXLMRobertaForMultipleChoice"),fqr=o(" (XLM-RoBERTa model)"),mqr=l(),F(F3.$$.fragment),sNe=l(),Zc=a("h2"),T3=a("a"),M4e=a("span"),F(zx.$$.fragment),gqr=l(),E4e=a("span"),hqr=o("FlaxAutoModelForNextSentencePrediction"),lNe=l(),Fr=a("div"),F(Qx.$$.fragment),pqr=l(),ef=a("p"),uqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aK=a("a"),_qr=o("from_pretrained()"),bqr=o(" class method or the "),nK=a("a"),vqr=o("from_config()"),Fqr=o(` class
method.`),Tqr=l(),Wx=a("p"),Mqr=o("This class cannot be instantiated directly using "),C4e=a("code"),Eqr=o("__init__()"),Cqr=o(" (throws an error)."),wqr=l(),Ht=a("div"),F(Hx.$$.fragment),Aqr=l(),w4e=a("p"),yqr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Lqr=l(),of=a("p"),xqr=o(`Note:
Loading a model from its configuration file does `),A4e=a("strong"),$qr=o("not"),kqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=a("a"),Sqr=o("from_pretrained()"),Rqr=o(" to load the model weights."),Bqr=l(),F(M3.$$.fragment),Pqr=l(),Hr=a("div"),F(Ux.$$.fragment),Iqr=l(),y4e=a("p"),qqr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Nqr=l(),Mn=a("p"),jqr=o("The model class to instantiate is selected based on the "),L4e=a("code"),Dqr=o("model_type"),Gqr=o(` property of the config object (either
passed as an argument or loaded from `),x4e=a("code"),Oqr=o("pretrained_model_name_or_path"),Vqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=a("code"),Xqr=o("pretrained_model_name_or_path"),zqr=o(":"),Qqr=l(),k4e=a("ul"),E3=a("li"),S4e=a("strong"),Wqr=o("bert"),Hqr=o(" \u2014 "),lK=a("a"),Uqr=o("FlaxBertForNextSentencePrediction"),Jqr=o(" (BERT model)"),Yqr=l(),F(C3.$$.fragment),iNe=l(),rf=a("h2"),w3=a("a"),R4e=a("span"),F(Jx.$$.fragment),Kqr=l(),B4e=a("span"),Zqr=o("FlaxAutoModelForImageClassification"),dNe=l(),Tr=a("div"),F(Yx.$$.fragment),eNr=l(),tf=a("p"),oNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iK=a("a"),rNr=o("from_pretrained()"),tNr=o(" class method or the "),dK=a("a"),aNr=o("from_config()"),nNr=o(` class
method.`),sNr=l(),Kx=a("p"),lNr=o("This class cannot be instantiated directly using "),P4e=a("code"),iNr=o("__init__()"),dNr=o(" (throws an error)."),cNr=l(),Ut=a("div"),F(Zx.$$.fragment),fNr=l(),I4e=a("p"),mNr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gNr=l(),af=a("p"),hNr=o(`Note:
Loading a model from its configuration file does `),q4e=a("strong"),pNr=o("not"),uNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=a("a"),_Nr=o("from_pretrained()"),bNr=o(" to load the model weights."),vNr=l(),F(A3.$$.fragment),FNr=l(),Ur=a("div"),F(e9.$$.fragment),TNr=l(),N4e=a("p"),MNr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ENr=l(),En=a("p"),CNr=o("The model class to instantiate is selected based on the "),j4e=a("code"),wNr=o("model_type"),ANr=o(` property of the config object (either
passed as an argument or loaded from `),D4e=a("code"),yNr=o("pretrained_model_name_or_path"),LNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G4e=a("code"),xNr=o("pretrained_model_name_or_path"),$Nr=o(":"),kNr=l(),o9=a("ul"),y3=a("li"),O4e=a("strong"),SNr=o("beit"),RNr=o(" \u2014 "),fK=a("a"),BNr=o("FlaxBeitForImageClassification"),PNr=o(" (BEiT model)"),INr=l(),L3=a("li"),V4e=a("strong"),qNr=o("vit"),NNr=o(" \u2014 "),mK=a("a"),jNr=o("FlaxViTForImageClassification"),DNr=o(" (ViT model)"),GNr=l(),F(x3.$$.fragment),cNe=l(),nf=a("h2"),$3=a("a"),X4e=a("span"),F(r9.$$.fragment),ONr=l(),z4e=a("span"),VNr=o("FlaxAutoModelForVision2Seq"),fNe=l(),Mr=a("div"),F(t9.$$.fragment),XNr=l(),sf=a("p"),zNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gK=a("a"),QNr=o("from_pretrained()"),WNr=o(" class method or the "),hK=a("a"),HNr=o("from_config()"),UNr=o(` class
method.`),JNr=l(),a9=a("p"),YNr=o("This class cannot be instantiated directly using "),Q4e=a("code"),KNr=o("__init__()"),ZNr=o(" (throws an error)."),ejr=l(),Jt=a("div"),F(n9.$$.fragment),ojr=l(),W4e=a("p"),rjr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tjr=l(),lf=a("p"),ajr=o(`Note:
Loading a model from its configuration file does `),H4e=a("strong"),njr=o("not"),sjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=a("a"),ljr=o("from_pretrained()"),ijr=o(" to load the model weights."),djr=l(),F(k3.$$.fragment),cjr=l(),Jr=a("div"),F(s9.$$.fragment),fjr=l(),U4e=a("p"),mjr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gjr=l(),Cn=a("p"),hjr=o("The model class to instantiate is selected based on the "),J4e=a("code"),pjr=o("model_type"),ujr=o(` property of the config object (either
passed as an argument or loaded from `),Y4e=a("code"),_jr=o("pretrained_model_name_or_path"),bjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K4e=a("code"),vjr=o("pretrained_model_name_or_path"),Fjr=o(":"),Tjr=l(),Z4e=a("ul"),S3=a("li"),eEe=a("strong"),Mjr=o("vision-encoder-decoder"),Ejr=o(" \u2014 "),uK=a("a"),Cjr=o("FlaxVisionEncoderDecoderModel"),wjr=o(" (Vision Encoder decoder model)"),Ajr=l(),F(R3.$$.fragment),this.h()},l(f){const _=fyt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var l9=s(p);m=n(l9,"A",{id:!0,class:!0,href:!0});var oEe=s(m);u=n(oEe,"SPAN",{});var rEe=s(u);T(d.$$.fragment,rEe),rEe.forEach(t),oEe.forEach(t),h=i(l9),Mo=n(l9,"SPAN",{});var tEe=s(Mo);li=r(tEe,"Auto Classes"),tEe.forEach(t),l9.forEach(t),mf=i(f),et=n(f,"P",{});var i9=s(et);ii=r(i9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=n(i9,"CODE",{});var aEe=s(di);KA=r(aEe,"from_pretrained()"),aEe.forEach(t),gf=r(i9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),i9.forEach(t),qe=i(f),Xe=n(f,"P",{});var wn=s(Xe);ci=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var nEe=s(An);ZA=r(nEe,"AutoConfig"),nEe.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var sEe=s(Ln);e6=r(sEe,"AutoModel"),sEe.forEach(t),fi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var lEe=s(xn);o6=r(lEe,"AutoTokenizer"),lEe.forEach(t),mi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),hf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var d9=s(Ae);v$=r(d9,"will create a model that is an instance of "),gi=n(d9,"A",{href:!0});var iEe=s(gi);F$=r(iEe,"BertModel"),iEe.forEach(t),T$=r(d9,"."),d9.forEach(t),Eo=i(f),Ea=n(f,"P",{});var c9=s(Ea);M$=r(c9,"There is one class of "),pf=n(c9,"CODE",{});var dEe=s(pf);E$=r(dEe,"AutoModel"),dEe.forEach(t),FDe=r(c9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),c9.forEach(t),dIe=i(f),hi=n(f,"H2",{class:!0});var f9=s(hi);uf=n(f9,"A",{id:!0,class:!0,href:!0});var cEe=s(uf);cee=n(cEe,"SPAN",{});var fEe=s(cee);T(r6.$$.fragment,fEe),fEe.forEach(t),cEe.forEach(t),TDe=i(f9),fee=n(f9,"SPAN",{});var mEe=s(fee);MDe=r(mEe,"Extending the Auto Classes"),mEe.forEach(t),f9.forEach(t),cIe=i(f),$n=n(f,"P",{});var df=s($n);EDe=r(df,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),mee=n(df,"CODE",{});var gEe=s(mee);CDe=r(gEe,"NewModel"),gEe.forEach(t),wDe=r(df,", make sure you have a "),gee=n(df,"CODE",{});var hEe=s(gee);ADe=r(hEe,"NewModelConfig"),hEe.forEach(t),yDe=r(df,` then you can add those to the auto
classes like this:`),df.forEach(t),fIe=i(f),T(t6.$$.fragment,f),mIe=i(f),C$=n(f,"P",{});var pEe=s(C$);LDe=r(pEe,"You will then be able to use the auto classes like you would usually do!"),pEe.forEach(t),gIe=i(f),T(_f.$$.fragment,f),hIe=i(f),pi=n(f,"H2",{class:!0});var m9=s(pi);bf=n(m9,"A",{id:!0,class:!0,href:!0});var uEe=s(bf);hee=n(uEe,"SPAN",{});var _Ee=s(hee);T(a6.$$.fragment,_Ee),_Ee.forEach(t),uEe.forEach(t),xDe=i(m9),pee=n(m9,"SPAN",{});var bEe=s(pee);$De=r(bEe,"AutoConfig"),bEe.forEach(t),m9.forEach(t),pIe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(n6.$$.fragment,Kr),kDe=i(Kr),s6=n(Kr,"P",{});var g9=s(s6);SDe=r(g9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),w$=n(g9,"A",{href:!0});var vEe=s(w$);RDe=r(vEe,"from_pretrained()"),vEe.forEach(t),BDe=r(g9," class method."),g9.forEach(t),PDe=i(Kr),l6=n(Kr,"P",{});var h9=s(l6);IDe=r(h9,"This class cannot be instantiated directly using "),uee=n(h9,"CODE",{});var FEe=s(uee);qDe=r(FEe,"__init__()"),FEe.forEach(t),NDe=r(h9," (throws an error)."),h9.forEach(t),jDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(i6.$$.fragment,Zr),DDe=i(Zr),_ee=n(Zr,"P",{});var TEe=s(_ee);GDe=r(TEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),TEe.forEach(t),ODe=i(Zr),ui=n(Zr,"P",{});var cf=s(ui);VDe=r(cf,"The configuration class to instantiate is selected based on the "),bee=n(cf,"CODE",{});var MEe=s(bee);XDe=r(MEe,"model_type"),MEe.forEach(t),zDe=r(cf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),vee=n(cf,"CODE",{});var EEe=s(vee);QDe=r(EEe,"pretrained_model_name_or_path"),EEe.forEach(t),WDe=r(cf,":"),cf.forEach(t),HDe=i(Zr),A=n(Zr,"UL",{});var y=s(A);vf=n(y,"LI",{});var B3=s(vf);Fee=n(B3,"STRONG",{});var CEe=s(Fee);UDe=r(CEe,"albert"),CEe.forEach(t),JDe=r(B3," \u2014 "),A$=n(B3,"A",{href:!0});var wEe=s(A$);YDe=r(wEe,"AlbertConfig"),wEe.forEach(t),KDe=r(B3," (ALBERT model)"),B3.forEach(t),ZDe=i(y),Ff=n(y,"LI",{});var P3=s(Ff);Tee=n(P3,"STRONG",{});var AEe=s(Tee);eGe=r(AEe,"bart"),AEe.forEach(t),oGe=r(P3," \u2014 "),y$=n(P3,"A",{href:!0});var yEe=s(y$);rGe=r(yEe,"BartConfig"),yEe.forEach(t),tGe=r(P3," (BART model)"),P3.forEach(t),aGe=i(y),Tf=n(y,"LI",{});var I3=s(Tf);Mee=n(I3,"STRONG",{});var LEe=s(Mee);nGe=r(LEe,"beit"),LEe.forEach(t),sGe=r(I3," \u2014 "),L$=n(I3,"A",{href:!0});var xEe=s(L$);lGe=r(xEe,"BeitConfig"),xEe.forEach(t),iGe=r(I3," (BEiT model)"),I3.forEach(t),dGe=i(y),Mf=n(y,"LI",{});var q3=s(Mf);Eee=n(q3,"STRONG",{});var $Ee=s(Eee);cGe=r($Ee,"bert"),$Ee.forEach(t),fGe=r(q3," \u2014 "),x$=n(q3,"A",{href:!0});var kEe=s(x$);mGe=r(kEe,"BertConfig"),kEe.forEach(t),gGe=r(q3," (BERT model)"),q3.forEach(t),hGe=i(y),Ef=n(y,"LI",{});var N3=s(Ef);Cee=n(N3,"STRONG",{});var SEe=s(Cee);pGe=r(SEe,"bert-generation"),SEe.forEach(t),uGe=r(N3," \u2014 "),$$=n(N3,"A",{href:!0});var REe=s($$);_Ge=r(REe,"BertGenerationConfig"),REe.forEach(t),bGe=r(N3," (Bert Generation model)"),N3.forEach(t),vGe=i(y),Cf=n(y,"LI",{});var j3=s(Cf);wee=n(j3,"STRONG",{});var BEe=s(wee);FGe=r(BEe,"big_bird"),BEe.forEach(t),TGe=r(j3," \u2014 "),k$=n(j3,"A",{href:!0});var PEe=s(k$);MGe=r(PEe,"BigBirdConfig"),PEe.forEach(t),EGe=r(j3," (BigBird model)"),j3.forEach(t),CGe=i(y),wf=n(y,"LI",{});var D3=s(wf);Aee=n(D3,"STRONG",{});var IEe=s(Aee);wGe=r(IEe,"bigbird_pegasus"),IEe.forEach(t),AGe=r(D3," \u2014 "),S$=n(D3,"A",{href:!0});var qEe=s(S$);yGe=r(qEe,"BigBirdPegasusConfig"),qEe.forEach(t),LGe=r(D3," (BigBirdPegasus model)"),D3.forEach(t),xGe=i(y),Af=n(y,"LI",{});var G3=s(Af);yee=n(G3,"STRONG",{});var NEe=s(yee);$Ge=r(NEe,"blenderbot"),NEe.forEach(t),kGe=r(G3," \u2014 "),R$=n(G3,"A",{href:!0});var jEe=s(R$);SGe=r(jEe,"BlenderbotConfig"),jEe.forEach(t),RGe=r(G3," (Blenderbot model)"),G3.forEach(t),BGe=i(y),yf=n(y,"LI",{});var O3=s(yf);Lee=n(O3,"STRONG",{});var DEe=s(Lee);PGe=r(DEe,"blenderbot-small"),DEe.forEach(t),IGe=r(O3," \u2014 "),B$=n(O3,"A",{href:!0});var GEe=s(B$);qGe=r(GEe,"BlenderbotSmallConfig"),GEe.forEach(t),NGe=r(O3," (BlenderbotSmall model)"),O3.forEach(t),jGe=i(y),Lf=n(y,"LI",{});var V3=s(Lf);xee=n(V3,"STRONG",{});var OEe=s(xee);DGe=r(OEe,"bloom"),OEe.forEach(t),GGe=r(V3," \u2014 "),P$=n(V3,"A",{href:!0});var VEe=s(P$);OGe=r(VEe,"BLOOMConfig"),VEe.forEach(t),VGe=r(V3," (BLOOM model)"),V3.forEach(t),XGe=i(y),xf=n(y,"LI",{});var X3=s(xf);$ee=n(X3,"STRONG",{});var XEe=s($ee);zGe=r(XEe,"camembert"),XEe.forEach(t),QGe=r(X3," \u2014 "),I$=n(X3,"A",{href:!0});var zEe=s(I$);WGe=r(zEe,"CamembertConfig"),zEe.forEach(t),HGe=r(X3," (CamemBERT model)"),X3.forEach(t),UGe=i(y),$f=n(y,"LI",{});var z3=s($f);kee=n(z3,"STRONG",{});var QEe=s(kee);JGe=r(QEe,"canine"),QEe.forEach(t),YGe=r(z3," \u2014 "),q$=n(z3,"A",{href:!0});var WEe=s(q$);KGe=r(WEe,"CanineConfig"),WEe.forEach(t),ZGe=r(z3," (Canine model)"),z3.forEach(t),eOe=i(y),kf=n(y,"LI",{});var Q3=s(kf);See=n(Q3,"STRONG",{});var HEe=s(See);oOe=r(HEe,"clip"),HEe.forEach(t),rOe=r(Q3," \u2014 "),N$=n(Q3,"A",{href:!0});var UEe=s(N$);tOe=r(UEe,"CLIPConfig"),UEe.forEach(t),aOe=r(Q3," (CLIP model)"),Q3.forEach(t),nOe=i(y),Sf=n(y,"LI",{});var W3=s(Sf);Ree=n(W3,"STRONG",{});var JEe=s(Ree);sOe=r(JEe,"convbert"),JEe.forEach(t),lOe=r(W3," \u2014 "),j$=n(W3,"A",{href:!0});var YEe=s(j$);iOe=r(YEe,"ConvBertConfig"),YEe.forEach(t),dOe=r(W3," (ConvBERT model)"),W3.forEach(t),cOe=i(y),Rf=n(y,"LI",{});var H3=s(Rf);Bee=n(H3,"STRONG",{});var KEe=s(Bee);fOe=r(KEe,"convnext"),KEe.forEach(t),mOe=r(H3," \u2014 "),D$=n(H3,"A",{href:!0});var ZEe=s(D$);gOe=r(ZEe,"ConvNextConfig"),ZEe.forEach(t),hOe=r(H3," (ConvNext model)"),H3.forEach(t),pOe=i(y),Bf=n(y,"LI",{});var U3=s(Bf);Pee=n(U3,"STRONG",{});var e5e=s(Pee);uOe=r(e5e,"ctrl"),e5e.forEach(t),_Oe=r(U3," \u2014 "),G$=n(U3,"A",{href:!0});var o5e=s(G$);bOe=r(o5e,"CTRLConfig"),o5e.forEach(t),vOe=r(U3," (CTRL model)"),U3.forEach(t),FOe=i(y),Pf=n(y,"LI",{});var J3=s(Pf);Iee=n(J3,"STRONG",{});var r5e=s(Iee);TOe=r(r5e,"data2vec-audio"),r5e.forEach(t),MOe=r(J3," \u2014 "),O$=n(J3,"A",{href:!0});var t5e=s(O$);EOe=r(t5e,"Data2VecAudioConfig"),t5e.forEach(t),COe=r(J3," (Data2VecAudio model)"),J3.forEach(t),wOe=i(y),If=n(y,"LI",{});var Y3=s(If);qee=n(Y3,"STRONG",{});var a5e=s(qee);AOe=r(a5e,"data2vec-text"),a5e.forEach(t),yOe=r(Y3," \u2014 "),V$=n(Y3,"A",{href:!0});var n5e=s(V$);LOe=r(n5e,"Data2VecTextConfig"),n5e.forEach(t),xOe=r(Y3," (Data2VecText model)"),Y3.forEach(t),$Oe=i(y),qf=n(y,"LI",{});var K3=s(qf);Nee=n(K3,"STRONG",{});var s5e=s(Nee);kOe=r(s5e,"data2vec-vision"),s5e.forEach(t),SOe=r(K3," \u2014 "),X$=n(K3,"A",{href:!0});var l5e=s(X$);ROe=r(l5e,"Data2VecVisionConfig"),l5e.forEach(t),BOe=r(K3," (Data2VecVision model)"),K3.forEach(t),POe=i(y),Nf=n(y,"LI",{});var Z3=s(Nf);jee=n(Z3,"STRONG",{});var i5e=s(jee);IOe=r(i5e,"deberta"),i5e.forEach(t),qOe=r(Z3," \u2014 "),z$=n(Z3,"A",{href:!0});var d5e=s(z$);NOe=r(d5e,"DebertaConfig"),d5e.forEach(t),jOe=r(Z3," (DeBERTa model)"),Z3.forEach(t),DOe=i(y),jf=n(y,"LI",{});var ew=s(jf);Dee=n(ew,"STRONG",{});var c5e=s(Dee);GOe=r(c5e,"deberta-v2"),c5e.forEach(t),OOe=r(ew," \u2014 "),Q$=n(ew,"A",{href:!0});var f5e=s(Q$);VOe=r(f5e,"DebertaV2Config"),f5e.forEach(t),XOe=r(ew," (DeBERTa-v2 model)"),ew.forEach(t),zOe=i(y),Df=n(y,"LI",{});var ow=s(Df);Gee=n(ow,"STRONG",{});var m5e=s(Gee);QOe=r(m5e,"decision_transformer"),m5e.forEach(t),WOe=r(ow," \u2014 "),W$=n(ow,"A",{href:!0});var g5e=s(W$);HOe=r(g5e,"DecisionTransformerConfig"),g5e.forEach(t),UOe=r(ow," (Decision Transformer model)"),ow.forEach(t),JOe=i(y),Gf=n(y,"LI",{});var rw=s(Gf);Oee=n(rw,"STRONG",{});var h5e=s(Oee);YOe=r(h5e,"deit"),h5e.forEach(t),KOe=r(rw," \u2014 "),H$=n(rw,"A",{href:!0});var Ljr=s(H$);ZOe=r(Ljr,"DeiTConfig"),Ljr.forEach(t),eVe=r(rw," (DeiT model)"),rw.forEach(t),oVe=i(y),Of=n(y,"LI",{});var p5e=s(Of);Vee=n(p5e,"STRONG",{});var xjr=s(Vee);rVe=r(xjr,"detr"),xjr.forEach(t),tVe=r(p5e," \u2014 "),U$=n(p5e,"A",{href:!0});var $jr=s(U$);aVe=r($jr,"DetrConfig"),$jr.forEach(t),nVe=r(p5e," (DETR model)"),p5e.forEach(t),sVe=i(y),Vf=n(y,"LI",{});var u5e=s(Vf);Xee=n(u5e,"STRONG",{});var kjr=s(Xee);lVe=r(kjr,"distilbert"),kjr.forEach(t),iVe=r(u5e," \u2014 "),J$=n(u5e,"A",{href:!0});var Sjr=s(J$);dVe=r(Sjr,"DistilBertConfig"),Sjr.forEach(t),cVe=r(u5e," (DistilBERT model)"),u5e.forEach(t),fVe=i(y),Xf=n(y,"LI",{});var _5e=s(Xf);zee=n(_5e,"STRONG",{});var Rjr=s(zee);mVe=r(Rjr,"dpr"),Rjr.forEach(t),gVe=r(_5e," \u2014 "),Y$=n(_5e,"A",{href:!0});var Bjr=s(Y$);hVe=r(Bjr,"DPRConfig"),Bjr.forEach(t),pVe=r(_5e," (DPR model)"),_5e.forEach(t),uVe=i(y),zf=n(y,"LI",{});var b5e=s(zf);Qee=n(b5e,"STRONG",{});var Pjr=s(Qee);_Ve=r(Pjr,"dpt"),Pjr.forEach(t),bVe=r(b5e," \u2014 "),K$=n(b5e,"A",{href:!0});var Ijr=s(K$);vVe=r(Ijr,"DPTConfig"),Ijr.forEach(t),FVe=r(b5e," (DPT model)"),b5e.forEach(t),TVe=i(y),Qf=n(y,"LI",{});var v5e=s(Qf);Wee=n(v5e,"STRONG",{});var qjr=s(Wee);MVe=r(qjr,"electra"),qjr.forEach(t),EVe=r(v5e," \u2014 "),Z$=n(v5e,"A",{href:!0});var Njr=s(Z$);CVe=r(Njr,"ElectraConfig"),Njr.forEach(t),wVe=r(v5e," (ELECTRA model)"),v5e.forEach(t),AVe=i(y),Wf=n(y,"LI",{});var F5e=s(Wf);Hee=n(F5e,"STRONG",{});var jjr=s(Hee);yVe=r(jjr,"encoder-decoder"),jjr.forEach(t),LVe=r(F5e," \u2014 "),ek=n(F5e,"A",{href:!0});var Djr=s(ek);xVe=r(Djr,"EncoderDecoderConfig"),Djr.forEach(t),$Ve=r(F5e," (Encoder decoder model)"),F5e.forEach(t),kVe=i(y),Hf=n(y,"LI",{});var T5e=s(Hf);Uee=n(T5e,"STRONG",{});var Gjr=s(Uee);SVe=r(Gjr,"flaubert"),Gjr.forEach(t),RVe=r(T5e," \u2014 "),ok=n(T5e,"A",{href:!0});var Ojr=s(ok);BVe=r(Ojr,"FlaubertConfig"),Ojr.forEach(t),PVe=r(T5e," (FlauBERT model)"),T5e.forEach(t),IVe=i(y),Uf=n(y,"LI",{});var M5e=s(Uf);Jee=n(M5e,"STRONG",{});var Vjr=s(Jee);qVe=r(Vjr,"flava"),Vjr.forEach(t),NVe=r(M5e," \u2014 "),rk=n(M5e,"A",{href:!0});var Xjr=s(rk);jVe=r(Xjr,"FlavaConfig"),Xjr.forEach(t),DVe=r(M5e," (Flava model)"),M5e.forEach(t),GVe=i(y),Jf=n(y,"LI",{});var E5e=s(Jf);Yee=n(E5e,"STRONG",{});var zjr=s(Yee);OVe=r(zjr,"fnet"),zjr.forEach(t),VVe=r(E5e," \u2014 "),tk=n(E5e,"A",{href:!0});var Qjr=s(tk);XVe=r(Qjr,"FNetConfig"),Qjr.forEach(t),zVe=r(E5e," (FNet model)"),E5e.forEach(t),QVe=i(y),Yf=n(y,"LI",{});var C5e=s(Yf);Kee=n(C5e,"STRONG",{});var Wjr=s(Kee);WVe=r(Wjr,"fsmt"),Wjr.forEach(t),HVe=r(C5e," \u2014 "),ak=n(C5e,"A",{href:!0});var Hjr=s(ak);UVe=r(Hjr,"FSMTConfig"),Hjr.forEach(t),JVe=r(C5e," (FairSeq Machine-Translation model)"),C5e.forEach(t),YVe=i(y),Kf=n(y,"LI",{});var w5e=s(Kf);Zee=n(w5e,"STRONG",{});var Ujr=s(Zee);KVe=r(Ujr,"funnel"),Ujr.forEach(t),ZVe=r(w5e," \u2014 "),nk=n(w5e,"A",{href:!0});var Jjr=s(nk);eXe=r(Jjr,"FunnelConfig"),Jjr.forEach(t),oXe=r(w5e," (Funnel Transformer model)"),w5e.forEach(t),rXe=i(y),Zf=n(y,"LI",{});var A5e=s(Zf);eoe=n(A5e,"STRONG",{});var Yjr=s(eoe);tXe=r(Yjr,"glpn"),Yjr.forEach(t),aXe=r(A5e," \u2014 "),sk=n(A5e,"A",{href:!0});var Kjr=s(sk);nXe=r(Kjr,"GLPNConfig"),Kjr.forEach(t),sXe=r(A5e," (GLPN model)"),A5e.forEach(t),lXe=i(y),em=n(y,"LI",{});var y5e=s(em);ooe=n(y5e,"STRONG",{});var Zjr=s(ooe);iXe=r(Zjr,"gpt2"),Zjr.forEach(t),dXe=r(y5e," \u2014 "),lk=n(y5e,"A",{href:!0});var eDr=s(lk);cXe=r(eDr,"GPT2Config"),eDr.forEach(t),fXe=r(y5e," (OpenAI GPT-2 model)"),y5e.forEach(t),mXe=i(y),om=n(y,"LI",{});var L5e=s(om);roe=n(L5e,"STRONG",{});var oDr=s(roe);gXe=r(oDr,"gpt_neo"),oDr.forEach(t),hXe=r(L5e," \u2014 "),ik=n(L5e,"A",{href:!0});var rDr=s(ik);pXe=r(rDr,"GPTNeoConfig"),rDr.forEach(t),uXe=r(L5e," (GPT Neo model)"),L5e.forEach(t),_Xe=i(y),rm=n(y,"LI",{});var x5e=s(rm);toe=n(x5e,"STRONG",{});var tDr=s(toe);bXe=r(tDr,"gptj"),tDr.forEach(t),vXe=r(x5e," \u2014 "),dk=n(x5e,"A",{href:!0});var aDr=s(dk);FXe=r(aDr,"GPTJConfig"),aDr.forEach(t),TXe=r(x5e," (GPT-J model)"),x5e.forEach(t),MXe=i(y),tm=n(y,"LI",{});var $5e=s(tm);aoe=n($5e,"STRONG",{});var nDr=s(aoe);EXe=r(nDr,"hubert"),nDr.forEach(t),CXe=r($5e," \u2014 "),ck=n($5e,"A",{href:!0});var sDr=s(ck);wXe=r(sDr,"HubertConfig"),sDr.forEach(t),AXe=r($5e," (Hubert model)"),$5e.forEach(t),yXe=i(y),am=n(y,"LI",{});var k5e=s(am);noe=n(k5e,"STRONG",{});var lDr=s(noe);LXe=r(lDr,"ibert"),lDr.forEach(t),xXe=r(k5e," \u2014 "),fk=n(k5e,"A",{href:!0});var iDr=s(fk);$Xe=r(iDr,"IBertConfig"),iDr.forEach(t),kXe=r(k5e," (I-BERT model)"),k5e.forEach(t),SXe=i(y),nm=n(y,"LI",{});var S5e=s(nm);soe=n(S5e,"STRONG",{});var dDr=s(soe);RXe=r(dDr,"imagegpt"),dDr.forEach(t),BXe=r(S5e," \u2014 "),mk=n(S5e,"A",{href:!0});var cDr=s(mk);PXe=r(cDr,"ImageGPTConfig"),cDr.forEach(t),IXe=r(S5e," (ImageGPT model)"),S5e.forEach(t),qXe=i(y),sm=n(y,"LI",{});var R5e=s(sm);loe=n(R5e,"STRONG",{});var fDr=s(loe);NXe=r(fDr,"layoutlm"),fDr.forEach(t),jXe=r(R5e," \u2014 "),gk=n(R5e,"A",{href:!0});var mDr=s(gk);DXe=r(mDr,"LayoutLMConfig"),mDr.forEach(t),GXe=r(R5e," (LayoutLM model)"),R5e.forEach(t),OXe=i(y),lm=n(y,"LI",{});var B5e=s(lm);ioe=n(B5e,"STRONG",{});var gDr=s(ioe);VXe=r(gDr,"layoutlmv2"),gDr.forEach(t),XXe=r(B5e," \u2014 "),hk=n(B5e,"A",{href:!0});var hDr=s(hk);zXe=r(hDr,"LayoutLMv2Config"),hDr.forEach(t),QXe=r(B5e," (LayoutLMv2 model)"),B5e.forEach(t),WXe=i(y),im=n(y,"LI",{});var P5e=s(im);doe=n(P5e,"STRONG",{});var pDr=s(doe);HXe=r(pDr,"led"),pDr.forEach(t),UXe=r(P5e," \u2014 "),pk=n(P5e,"A",{href:!0});var uDr=s(pk);JXe=r(uDr,"LEDConfig"),uDr.forEach(t),YXe=r(P5e," (LED model)"),P5e.forEach(t),KXe=i(y),dm=n(y,"LI",{});var I5e=s(dm);coe=n(I5e,"STRONG",{});var _Dr=s(coe);ZXe=r(_Dr,"longformer"),_Dr.forEach(t),eze=r(I5e," \u2014 "),uk=n(I5e,"A",{href:!0});var bDr=s(uk);oze=r(bDr,"LongformerConfig"),bDr.forEach(t),rze=r(I5e," (Longformer model)"),I5e.forEach(t),tze=i(y),cm=n(y,"LI",{});var q5e=s(cm);foe=n(q5e,"STRONG",{});var vDr=s(foe);aze=r(vDr,"luke"),vDr.forEach(t),nze=r(q5e," \u2014 "),_k=n(q5e,"A",{href:!0});var FDr=s(_k);sze=r(FDr,"LukeConfig"),FDr.forEach(t),lze=r(q5e," (LUKE model)"),q5e.forEach(t),ize=i(y),fm=n(y,"LI",{});var N5e=s(fm);moe=n(N5e,"STRONG",{});var TDr=s(moe);dze=r(TDr,"lxmert"),TDr.forEach(t),cze=r(N5e," \u2014 "),bk=n(N5e,"A",{href:!0});var MDr=s(bk);fze=r(MDr,"LxmertConfig"),MDr.forEach(t),mze=r(N5e," (LXMERT model)"),N5e.forEach(t),gze=i(y),mm=n(y,"LI",{});var j5e=s(mm);goe=n(j5e,"STRONG",{});var EDr=s(goe);hze=r(EDr,"m2m_100"),EDr.forEach(t),pze=r(j5e," \u2014 "),vk=n(j5e,"A",{href:!0});var CDr=s(vk);uze=r(CDr,"M2M100Config"),CDr.forEach(t),_ze=r(j5e," (M2M100 model)"),j5e.forEach(t),bze=i(y),gm=n(y,"LI",{});var D5e=s(gm);hoe=n(D5e,"STRONG",{});var wDr=s(hoe);vze=r(wDr,"marian"),wDr.forEach(t),Fze=r(D5e," \u2014 "),Fk=n(D5e,"A",{href:!0});var ADr=s(Fk);Tze=r(ADr,"MarianConfig"),ADr.forEach(t),Mze=r(D5e," (Marian model)"),D5e.forEach(t),Eze=i(y),hm=n(y,"LI",{});var G5e=s(hm);poe=n(G5e,"STRONG",{});var yDr=s(poe);Cze=r(yDr,"maskformer"),yDr.forEach(t),wze=r(G5e," \u2014 "),Tk=n(G5e,"A",{href:!0});var LDr=s(Tk);Aze=r(LDr,"MaskFormerConfig"),LDr.forEach(t),yze=r(G5e," (MaskFormer model)"),G5e.forEach(t),Lze=i(y),pm=n(y,"LI",{});var O5e=s(pm);uoe=n(O5e,"STRONG",{});var xDr=s(uoe);xze=r(xDr,"mbart"),xDr.forEach(t),$ze=r(O5e," \u2014 "),Mk=n(O5e,"A",{href:!0});var $Dr=s(Mk);kze=r($Dr,"MBartConfig"),$Dr.forEach(t),Sze=r(O5e," (mBART model)"),O5e.forEach(t),Rze=i(y),um=n(y,"LI",{});var V5e=s(um);_oe=n(V5e,"STRONG",{});var kDr=s(_oe);Bze=r(kDr,"megatron-bert"),kDr.forEach(t),Pze=r(V5e," \u2014 "),Ek=n(V5e,"A",{href:!0});var SDr=s(Ek);Ize=r(SDr,"MegatronBertConfig"),SDr.forEach(t),qze=r(V5e," (MegatronBert model)"),V5e.forEach(t),Nze=i(y),_m=n(y,"LI",{});var X5e=s(_m);boe=n(X5e,"STRONG",{});var RDr=s(boe);jze=r(RDr,"mobilebert"),RDr.forEach(t),Dze=r(X5e," \u2014 "),Ck=n(X5e,"A",{href:!0});var BDr=s(Ck);Gze=r(BDr,"MobileBertConfig"),BDr.forEach(t),Oze=r(X5e," (MobileBERT model)"),X5e.forEach(t),Vze=i(y),bm=n(y,"LI",{});var z5e=s(bm);voe=n(z5e,"STRONG",{});var PDr=s(voe);Xze=r(PDr,"mpnet"),PDr.forEach(t),zze=r(z5e," \u2014 "),wk=n(z5e,"A",{href:!0});var IDr=s(wk);Qze=r(IDr,"MPNetConfig"),IDr.forEach(t),Wze=r(z5e," (MPNet model)"),z5e.forEach(t),Hze=i(y),vm=n(y,"LI",{});var Q5e=s(vm);Foe=n(Q5e,"STRONG",{});var qDr=s(Foe);Uze=r(qDr,"mt5"),qDr.forEach(t),Jze=r(Q5e," \u2014 "),Ak=n(Q5e,"A",{href:!0});var NDr=s(Ak);Yze=r(NDr,"MT5Config"),NDr.forEach(t),Kze=r(Q5e," (mT5 model)"),Q5e.forEach(t),Zze=i(y),Fm=n(y,"LI",{});var W5e=s(Fm);Toe=n(W5e,"STRONG",{});var jDr=s(Toe);eQe=r(jDr,"nystromformer"),jDr.forEach(t),oQe=r(W5e," \u2014 "),yk=n(W5e,"A",{href:!0});var DDr=s(yk);rQe=r(DDr,"NystromformerConfig"),DDr.forEach(t),tQe=r(W5e," (Nystromformer model)"),W5e.forEach(t),aQe=i(y),Tm=n(y,"LI",{});var H5e=s(Tm);Moe=n(H5e,"STRONG",{});var GDr=s(Moe);nQe=r(GDr,"openai-gpt"),GDr.forEach(t),sQe=r(H5e," \u2014 "),Lk=n(H5e,"A",{href:!0});var ODr=s(Lk);lQe=r(ODr,"OpenAIGPTConfig"),ODr.forEach(t),iQe=r(H5e," (OpenAI GPT model)"),H5e.forEach(t),dQe=i(y),Mm=n(y,"LI",{});var U5e=s(Mm);Eoe=n(U5e,"STRONG",{});var VDr=s(Eoe);cQe=r(VDr,"opt"),VDr.forEach(t),fQe=r(U5e," \u2014 "),xk=n(U5e,"A",{href:!0});var XDr=s(xk);mQe=r(XDr,"OPTConfig"),XDr.forEach(t),gQe=r(U5e," (OPT model)"),U5e.forEach(t),hQe=i(y),Em=n(y,"LI",{});var J5e=s(Em);Coe=n(J5e,"STRONG",{});var zDr=s(Coe);pQe=r(zDr,"pegasus"),zDr.forEach(t),uQe=r(J5e," \u2014 "),$k=n(J5e,"A",{href:!0});var QDr=s($k);_Qe=r(QDr,"PegasusConfig"),QDr.forEach(t),bQe=r(J5e," (Pegasus model)"),J5e.forEach(t),vQe=i(y),Cm=n(y,"LI",{});var Y5e=s(Cm);woe=n(Y5e,"STRONG",{});var WDr=s(woe);FQe=r(WDr,"perceiver"),WDr.forEach(t),TQe=r(Y5e," \u2014 "),kk=n(Y5e,"A",{href:!0});var HDr=s(kk);MQe=r(HDr,"PerceiverConfig"),HDr.forEach(t),EQe=r(Y5e," (Perceiver model)"),Y5e.forEach(t),CQe=i(y),wm=n(y,"LI",{});var K5e=s(wm);Aoe=n(K5e,"STRONG",{});var UDr=s(Aoe);wQe=r(UDr,"plbart"),UDr.forEach(t),AQe=r(K5e," \u2014 "),Sk=n(K5e,"A",{href:!0});var JDr=s(Sk);yQe=r(JDr,"PLBartConfig"),JDr.forEach(t),LQe=r(K5e," (PLBart model)"),K5e.forEach(t),xQe=i(y),Am=n(y,"LI",{});var Z5e=s(Am);yoe=n(Z5e,"STRONG",{});var YDr=s(yoe);$Qe=r(YDr,"poolformer"),YDr.forEach(t),kQe=r(Z5e," \u2014 "),Rk=n(Z5e,"A",{href:!0});var KDr=s(Rk);SQe=r(KDr,"PoolFormerConfig"),KDr.forEach(t),RQe=r(Z5e," (PoolFormer model)"),Z5e.forEach(t),BQe=i(y),ym=n(y,"LI",{});var eCe=s(ym);Loe=n(eCe,"STRONG",{});var ZDr=s(Loe);PQe=r(ZDr,"prophetnet"),ZDr.forEach(t),IQe=r(eCe," \u2014 "),Bk=n(eCe,"A",{href:!0});var eGr=s(Bk);qQe=r(eGr,"ProphetNetConfig"),eGr.forEach(t),NQe=r(eCe," (ProphetNet model)"),eCe.forEach(t),jQe=i(y),Lm=n(y,"LI",{});var oCe=s(Lm);xoe=n(oCe,"STRONG",{});var oGr=s(xoe);DQe=r(oGr,"qdqbert"),oGr.forEach(t),GQe=r(oCe," \u2014 "),Pk=n(oCe,"A",{href:!0});var rGr=s(Pk);OQe=r(rGr,"QDQBertConfig"),rGr.forEach(t),VQe=r(oCe," (QDQBert model)"),oCe.forEach(t),XQe=i(y),xm=n(y,"LI",{});var rCe=s(xm);$oe=n(rCe,"STRONG",{});var tGr=s($oe);zQe=r(tGr,"rag"),tGr.forEach(t),QQe=r(rCe," \u2014 "),Ik=n(rCe,"A",{href:!0});var aGr=s(Ik);WQe=r(aGr,"RagConfig"),aGr.forEach(t),HQe=r(rCe," (RAG model)"),rCe.forEach(t),UQe=i(y),$m=n(y,"LI",{});var tCe=s($m);koe=n(tCe,"STRONG",{});var nGr=s(koe);JQe=r(nGr,"realm"),nGr.forEach(t),YQe=r(tCe," \u2014 "),qk=n(tCe,"A",{href:!0});var sGr=s(qk);KQe=r(sGr,"RealmConfig"),sGr.forEach(t),ZQe=r(tCe," (Realm model)"),tCe.forEach(t),eWe=i(y),km=n(y,"LI",{});var aCe=s(km);Soe=n(aCe,"STRONG",{});var lGr=s(Soe);oWe=r(lGr,"reformer"),lGr.forEach(t),rWe=r(aCe," \u2014 "),Nk=n(aCe,"A",{href:!0});var iGr=s(Nk);tWe=r(iGr,"ReformerConfig"),iGr.forEach(t),aWe=r(aCe," (Reformer model)"),aCe.forEach(t),nWe=i(y),Sm=n(y,"LI",{});var nCe=s(Sm);Roe=n(nCe,"STRONG",{});var dGr=s(Roe);sWe=r(dGr,"regnet"),dGr.forEach(t),lWe=r(nCe," \u2014 "),jk=n(nCe,"A",{href:!0});var cGr=s(jk);iWe=r(cGr,"RegNetConfig"),cGr.forEach(t),dWe=r(nCe," (RegNet model)"),nCe.forEach(t),cWe=i(y),Rm=n(y,"LI",{});var sCe=s(Rm);Boe=n(sCe,"STRONG",{});var fGr=s(Boe);fWe=r(fGr,"rembert"),fGr.forEach(t),mWe=r(sCe," \u2014 "),Dk=n(sCe,"A",{href:!0});var mGr=s(Dk);gWe=r(mGr,"RemBertConfig"),mGr.forEach(t),hWe=r(sCe," (RemBERT model)"),sCe.forEach(t),pWe=i(y),Bm=n(y,"LI",{});var lCe=s(Bm);Poe=n(lCe,"STRONG",{});var gGr=s(Poe);uWe=r(gGr,"resnet"),gGr.forEach(t),_We=r(lCe," \u2014 "),Gk=n(lCe,"A",{href:!0});var hGr=s(Gk);bWe=r(hGr,"ResNetConfig"),hGr.forEach(t),vWe=r(lCe," (ResNet model)"),lCe.forEach(t),FWe=i(y),Pm=n(y,"LI",{});var iCe=s(Pm);Ioe=n(iCe,"STRONG",{});var pGr=s(Ioe);TWe=r(pGr,"retribert"),pGr.forEach(t),MWe=r(iCe," \u2014 "),Ok=n(iCe,"A",{href:!0});var uGr=s(Ok);EWe=r(uGr,"RetriBertConfig"),uGr.forEach(t),CWe=r(iCe," (RetriBERT model)"),iCe.forEach(t),wWe=i(y),Im=n(y,"LI",{});var dCe=s(Im);qoe=n(dCe,"STRONG",{});var _Gr=s(qoe);AWe=r(_Gr,"roberta"),_Gr.forEach(t),yWe=r(dCe," \u2014 "),Vk=n(dCe,"A",{href:!0});var bGr=s(Vk);LWe=r(bGr,"RobertaConfig"),bGr.forEach(t),xWe=r(dCe," (RoBERTa model)"),dCe.forEach(t),$We=i(y),qm=n(y,"LI",{});var cCe=s(qm);Noe=n(cCe,"STRONG",{});var vGr=s(Noe);kWe=r(vGr,"roformer"),vGr.forEach(t),SWe=r(cCe," \u2014 "),Xk=n(cCe,"A",{href:!0});var FGr=s(Xk);RWe=r(FGr,"RoFormerConfig"),FGr.forEach(t),BWe=r(cCe," (RoFormer model)"),cCe.forEach(t),PWe=i(y),Nm=n(y,"LI",{});var fCe=s(Nm);joe=n(fCe,"STRONG",{});var TGr=s(joe);IWe=r(TGr,"segformer"),TGr.forEach(t),qWe=r(fCe," \u2014 "),zk=n(fCe,"A",{href:!0});var MGr=s(zk);NWe=r(MGr,"SegformerConfig"),MGr.forEach(t),jWe=r(fCe," (SegFormer model)"),fCe.forEach(t),DWe=i(y),jm=n(y,"LI",{});var mCe=s(jm);Doe=n(mCe,"STRONG",{});var EGr=s(Doe);GWe=r(EGr,"sew"),EGr.forEach(t),OWe=r(mCe," \u2014 "),Qk=n(mCe,"A",{href:!0});var CGr=s(Qk);VWe=r(CGr,"SEWConfig"),CGr.forEach(t),XWe=r(mCe," (SEW model)"),mCe.forEach(t),zWe=i(y),Dm=n(y,"LI",{});var gCe=s(Dm);Goe=n(gCe,"STRONG",{});var wGr=s(Goe);QWe=r(wGr,"sew-d"),wGr.forEach(t),WWe=r(gCe," \u2014 "),Wk=n(gCe,"A",{href:!0});var AGr=s(Wk);HWe=r(AGr,"SEWDConfig"),AGr.forEach(t),UWe=r(gCe," (SEW-D model)"),gCe.forEach(t),JWe=i(y),Gm=n(y,"LI",{});var hCe=s(Gm);Ooe=n(hCe,"STRONG",{});var yGr=s(Ooe);YWe=r(yGr,"speech-encoder-decoder"),yGr.forEach(t),KWe=r(hCe," \u2014 "),Hk=n(hCe,"A",{href:!0});var LGr=s(Hk);ZWe=r(LGr,"SpeechEncoderDecoderConfig"),LGr.forEach(t),eHe=r(hCe," (Speech Encoder decoder model)"),hCe.forEach(t),oHe=i(y),Om=n(y,"LI",{});var pCe=s(Om);Voe=n(pCe,"STRONG",{});var xGr=s(Voe);rHe=r(xGr,"speech_to_text"),xGr.forEach(t),tHe=r(pCe," \u2014 "),Uk=n(pCe,"A",{href:!0});var $Gr=s(Uk);aHe=r($Gr,"Speech2TextConfig"),$Gr.forEach(t),nHe=r(pCe," (Speech2Text model)"),pCe.forEach(t),sHe=i(y),Vm=n(y,"LI",{});var uCe=s(Vm);Xoe=n(uCe,"STRONG",{});var kGr=s(Xoe);lHe=r(kGr,"speech_to_text_2"),kGr.forEach(t),iHe=r(uCe," \u2014 "),Jk=n(uCe,"A",{href:!0});var SGr=s(Jk);dHe=r(SGr,"Speech2Text2Config"),SGr.forEach(t),cHe=r(uCe," (Speech2Text2 model)"),uCe.forEach(t),fHe=i(y),Xm=n(y,"LI",{});var _Ce=s(Xm);zoe=n(_Ce,"STRONG",{});var RGr=s(zoe);mHe=r(RGr,"splinter"),RGr.forEach(t),gHe=r(_Ce," \u2014 "),Yk=n(_Ce,"A",{href:!0});var BGr=s(Yk);hHe=r(BGr,"SplinterConfig"),BGr.forEach(t),pHe=r(_Ce," (Splinter model)"),_Ce.forEach(t),uHe=i(y),zm=n(y,"LI",{});var bCe=s(zm);Qoe=n(bCe,"STRONG",{});var PGr=s(Qoe);_He=r(PGr,"squeezebert"),PGr.forEach(t),bHe=r(bCe," \u2014 "),Kk=n(bCe,"A",{href:!0});var IGr=s(Kk);vHe=r(IGr,"SqueezeBertConfig"),IGr.forEach(t),FHe=r(bCe," (SqueezeBERT model)"),bCe.forEach(t),THe=i(y),Qm=n(y,"LI",{});var vCe=s(Qm);Woe=n(vCe,"STRONG",{});var qGr=s(Woe);MHe=r(qGr,"swin"),qGr.forEach(t),EHe=r(vCe," \u2014 "),Zk=n(vCe,"A",{href:!0});var NGr=s(Zk);CHe=r(NGr,"SwinConfig"),NGr.forEach(t),wHe=r(vCe," (Swin model)"),vCe.forEach(t),AHe=i(y),Wm=n(y,"LI",{});var FCe=s(Wm);Hoe=n(FCe,"STRONG",{});var jGr=s(Hoe);yHe=r(jGr,"t5"),jGr.forEach(t),LHe=r(FCe," \u2014 "),eS=n(FCe,"A",{href:!0});var DGr=s(eS);xHe=r(DGr,"T5Config"),DGr.forEach(t),$He=r(FCe," (T5 model)"),FCe.forEach(t),kHe=i(y),Hm=n(y,"LI",{});var TCe=s(Hm);Uoe=n(TCe,"STRONG",{});var GGr=s(Uoe);SHe=r(GGr,"tapas"),GGr.forEach(t),RHe=r(TCe," \u2014 "),oS=n(TCe,"A",{href:!0});var OGr=s(oS);BHe=r(OGr,"TapasConfig"),OGr.forEach(t),PHe=r(TCe," (TAPAS model)"),TCe.forEach(t),IHe=i(y),Um=n(y,"LI",{});var MCe=s(Um);Joe=n(MCe,"STRONG",{});var VGr=s(Joe);qHe=r(VGr,"tapex"),VGr.forEach(t),NHe=r(MCe," \u2014 "),rS=n(MCe,"A",{href:!0});var XGr=s(rS);jHe=r(XGr,"BartConfig"),XGr.forEach(t),DHe=r(MCe," (TAPEX model)"),MCe.forEach(t),GHe=i(y),Jm=n(y,"LI",{});var ECe=s(Jm);Yoe=n(ECe,"STRONG",{});var zGr=s(Yoe);OHe=r(zGr,"transfo-xl"),zGr.forEach(t),VHe=r(ECe," \u2014 "),tS=n(ECe,"A",{href:!0});var QGr=s(tS);XHe=r(QGr,"TransfoXLConfig"),QGr.forEach(t),zHe=r(ECe," (Transformer-XL model)"),ECe.forEach(t),QHe=i(y),Ym=n(y,"LI",{});var CCe=s(Ym);Koe=n(CCe,"STRONG",{});var WGr=s(Koe);WHe=r(WGr,"trocr"),WGr.forEach(t),HHe=r(CCe," \u2014 "),aS=n(CCe,"A",{href:!0});var HGr=s(aS);UHe=r(HGr,"TrOCRConfig"),HGr.forEach(t),JHe=r(CCe," (TrOCR model)"),CCe.forEach(t),YHe=i(y),Km=n(y,"LI",{});var wCe=s(Km);Zoe=n(wCe,"STRONG",{});var UGr=s(Zoe);KHe=r(UGr,"unispeech"),UGr.forEach(t),ZHe=r(wCe," \u2014 "),nS=n(wCe,"A",{href:!0});var JGr=s(nS);eUe=r(JGr,"UniSpeechConfig"),JGr.forEach(t),oUe=r(wCe," (UniSpeech model)"),wCe.forEach(t),rUe=i(y),Zm=n(y,"LI",{});var ACe=s(Zm);ere=n(ACe,"STRONG",{});var YGr=s(ere);tUe=r(YGr,"unispeech-sat"),YGr.forEach(t),aUe=r(ACe," \u2014 "),sS=n(ACe,"A",{href:!0});var KGr=s(sS);nUe=r(KGr,"UniSpeechSatConfig"),KGr.forEach(t),sUe=r(ACe," (UniSpeechSat model)"),ACe.forEach(t),lUe=i(y),eg=n(y,"LI",{});var yCe=s(eg);ore=n(yCe,"STRONG",{});var ZGr=s(ore);iUe=r(ZGr,"van"),ZGr.forEach(t),dUe=r(yCe," \u2014 "),lS=n(yCe,"A",{href:!0});var eOr=s(lS);cUe=r(eOr,"VanConfig"),eOr.forEach(t),fUe=r(yCe," (VAN model)"),yCe.forEach(t),mUe=i(y),og=n(y,"LI",{});var LCe=s(og);rre=n(LCe,"STRONG",{});var oOr=s(rre);gUe=r(oOr,"vilt"),oOr.forEach(t),hUe=r(LCe," \u2014 "),iS=n(LCe,"A",{href:!0});var rOr=s(iS);pUe=r(rOr,"ViltConfig"),rOr.forEach(t),uUe=r(LCe," (ViLT model)"),LCe.forEach(t),_Ue=i(y),rg=n(y,"LI",{});var xCe=s(rg);tre=n(xCe,"STRONG",{});var tOr=s(tre);bUe=r(tOr,"vision-encoder-decoder"),tOr.forEach(t),vUe=r(xCe," \u2014 "),dS=n(xCe,"A",{href:!0});var aOr=s(dS);FUe=r(aOr,"VisionEncoderDecoderConfig"),aOr.forEach(t),TUe=r(xCe," (Vision Encoder decoder model)"),xCe.forEach(t),MUe=i(y),tg=n(y,"LI",{});var $Ce=s(tg);are=n($Ce,"STRONG",{});var nOr=s(are);EUe=r(nOr,"vision-text-dual-encoder"),nOr.forEach(t),CUe=r($Ce," \u2014 "),cS=n($Ce,"A",{href:!0});var sOr=s(cS);wUe=r(sOr,"VisionTextDualEncoderConfig"),sOr.forEach(t),AUe=r($Ce," (VisionTextDualEncoder model)"),$Ce.forEach(t),yUe=i(y),ag=n(y,"LI",{});var kCe=s(ag);nre=n(kCe,"STRONG",{});var lOr=s(nre);LUe=r(lOr,"visual_bert"),lOr.forEach(t),xUe=r(kCe," \u2014 "),fS=n(kCe,"A",{href:!0});var iOr=s(fS);$Ue=r(iOr,"VisualBertConfig"),iOr.forEach(t),kUe=r(kCe," (VisualBert model)"),kCe.forEach(t),SUe=i(y),ng=n(y,"LI",{});var SCe=s(ng);sre=n(SCe,"STRONG",{});var dOr=s(sre);RUe=r(dOr,"vit"),dOr.forEach(t),BUe=r(SCe," \u2014 "),mS=n(SCe,"A",{href:!0});var cOr=s(mS);PUe=r(cOr,"ViTConfig"),cOr.forEach(t),IUe=r(SCe," (ViT model)"),SCe.forEach(t),qUe=i(y),sg=n(y,"LI",{});var RCe=s(sg);lre=n(RCe,"STRONG",{});var fOr=s(lre);NUe=r(fOr,"vit_mae"),fOr.forEach(t),jUe=r(RCe," \u2014 "),gS=n(RCe,"A",{href:!0});var mOr=s(gS);DUe=r(mOr,"ViTMAEConfig"),mOr.forEach(t),GUe=r(RCe," (ViTMAE model)"),RCe.forEach(t),OUe=i(y),lg=n(y,"LI",{});var BCe=s(lg);ire=n(BCe,"STRONG",{});var gOr=s(ire);VUe=r(gOr,"wav2vec2"),gOr.forEach(t),XUe=r(BCe," \u2014 "),hS=n(BCe,"A",{href:!0});var hOr=s(hS);zUe=r(hOr,"Wav2Vec2Config"),hOr.forEach(t),QUe=r(BCe," (Wav2Vec2 model)"),BCe.forEach(t),WUe=i(y),ig=n(y,"LI",{});var PCe=s(ig);dre=n(PCe,"STRONG",{});var pOr=s(dre);HUe=r(pOr,"wavlm"),pOr.forEach(t),UUe=r(PCe," \u2014 "),pS=n(PCe,"A",{href:!0});var uOr=s(pS);JUe=r(uOr,"WavLMConfig"),uOr.forEach(t),YUe=r(PCe," (WavLM model)"),PCe.forEach(t),KUe=i(y),dg=n(y,"LI",{});var ICe=s(dg);cre=n(ICe,"STRONG",{});var _Or=s(cre);ZUe=r(_Or,"xglm"),_Or.forEach(t),eJe=r(ICe," \u2014 "),uS=n(ICe,"A",{href:!0});var bOr=s(uS);oJe=r(bOr,"XGLMConfig"),bOr.forEach(t),rJe=r(ICe," (XGLM model)"),ICe.forEach(t),tJe=i(y),cg=n(y,"LI",{});var qCe=s(cg);fre=n(qCe,"STRONG",{});var vOr=s(fre);aJe=r(vOr,"xlm"),vOr.forEach(t),nJe=r(qCe," \u2014 "),_S=n(qCe,"A",{href:!0});var FOr=s(_S);sJe=r(FOr,"XLMConfig"),FOr.forEach(t),lJe=r(qCe," (XLM model)"),qCe.forEach(t),iJe=i(y),fg=n(y,"LI",{});var NCe=s(fg);mre=n(NCe,"STRONG",{});var TOr=s(mre);dJe=r(TOr,"xlm-prophetnet"),TOr.forEach(t),cJe=r(NCe," \u2014 "),bS=n(NCe,"A",{href:!0});var MOr=s(bS);fJe=r(MOr,"XLMProphetNetConfig"),MOr.forEach(t),mJe=r(NCe," (XLMProphetNet model)"),NCe.forEach(t),gJe=i(y),mg=n(y,"LI",{});var jCe=s(mg);gre=n(jCe,"STRONG",{});var EOr=s(gre);hJe=r(EOr,"xlm-roberta"),EOr.forEach(t),pJe=r(jCe," \u2014 "),vS=n(jCe,"A",{href:!0});var COr=s(vS);uJe=r(COr,"XLMRobertaConfig"),COr.forEach(t),_Je=r(jCe," (XLM-RoBERTa model)"),jCe.forEach(t),bJe=i(y),gg=n(y,"LI",{});var DCe=s(gg);hre=n(DCe,"STRONG",{});var wOr=s(hre);vJe=r(wOr,"xlm-roberta-xl"),wOr.forEach(t),FJe=r(DCe," \u2014 "),FS=n(DCe,"A",{href:!0});var AOr=s(FS);TJe=r(AOr,"XLMRobertaXLConfig"),AOr.forEach(t),MJe=r(DCe," (XLM-RoBERTa-XL model)"),DCe.forEach(t),EJe=i(y),hg=n(y,"LI",{});var GCe=s(hg);pre=n(GCe,"STRONG",{});var yOr=s(pre);CJe=r(yOr,"xlnet"),yOr.forEach(t),wJe=r(GCe," \u2014 "),TS=n(GCe,"A",{href:!0});var LOr=s(TS);AJe=r(LOr,"XLNetConfig"),LOr.forEach(t),yJe=r(GCe," (XLNet model)"),GCe.forEach(t),LJe=i(y),pg=n(y,"LI",{});var OCe=s(pg);ure=n(OCe,"STRONG",{});var xOr=s(ure);xJe=r(xOr,"yolos"),xOr.forEach(t),$Je=r(OCe," \u2014 "),MS=n(OCe,"A",{href:!0});var $Or=s(MS);kJe=r($Or,"YolosConfig"),$Or.forEach(t),SJe=r(OCe," (YOLOS model)"),OCe.forEach(t),RJe=i(y),ug=n(y,"LI",{});var VCe=s(ug);_re=n(VCe,"STRONG",{});var kOr=s(_re);BJe=r(kOr,"yoso"),kOr.forEach(t),PJe=r(VCe," \u2014 "),ES=n(VCe,"A",{href:!0});var SOr=s(ES);IJe=r(SOr,"YosoConfig"),SOr.forEach(t),qJe=r(VCe," (YOSO model)"),VCe.forEach(t),y.forEach(t),NJe=i(Zr),T(_g.$$.fragment,Zr),Zr.forEach(t),jJe=i(Kr),bg=n(Kr,"DIV",{class:!0});var gNe=s(bg);T(d6.$$.fragment,gNe),DJe=i(gNe),bre=n(gNe,"P",{});var ROr=s(bre);GJe=r(ROr,"Register a new configuration for this class."),ROr.forEach(t),gNe.forEach(t),Kr.forEach(t),uIe=i(f),_i=n(f,"H2",{class:!0});var hNe=s(_i);vg=n(hNe,"A",{id:!0,class:!0,href:!0});var BOr=s(vg);vre=n(BOr,"SPAN",{});var POr=s(vre);T(c6.$$.fragment,POr),POr.forEach(t),BOr.forEach(t),OJe=i(hNe),Fre=n(hNe,"SPAN",{});var IOr=s(Fre);VJe=r(IOr,"AutoTokenizer"),IOr.forEach(t),hNe.forEach(t),_Ie=i(f),wo=n(f,"DIV",{class:!0});var Ps=s(wo);T(f6.$$.fragment,Ps),XJe=i(Ps),m6=n(Ps,"P",{});var pNe=s(m6);zJe=r(pNe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),CS=n(pNe,"A",{href:!0});var qOr=s(CS);QJe=r(qOr,"AutoTokenizer.from_pretrained()"),qOr.forEach(t),WJe=r(pNe," class method."),pNe.forEach(t),HJe=i(Ps),g6=n(Ps,"P",{});var uNe=s(g6);UJe=r(uNe,"This class cannot be instantiated directly using "),Tre=n(uNe,"CODE",{});var NOr=s(Tre);JJe=r(NOr,"__init__()"),NOr.forEach(t),YJe=r(uNe," (throws an error)."),uNe.forEach(t),KJe=i(Ps),Cr=n(Ps,"DIV",{class:!0});var Is=s(Cr);T(h6.$$.fragment,Is),ZJe=i(Is),Mre=n(Is,"P",{});var jOr=s(Mre);eYe=r(jOr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),jOr.forEach(t),oYe=i(Is),Ca=n(Is,"P",{});var tw=s(Ca);rYe=r(tw,"The tokenizer class to instantiate is selected based on the "),Ere=n(tw,"CODE",{});var DOr=s(Ere);tYe=r(DOr,"model_type"),DOr.forEach(t),aYe=r(tw,` property of the config object (either
passed as an argument or loaded from `),Cre=n(tw,"CODE",{});var GOr=s(Cre);nYe=r(GOr,"pretrained_model_name_or_path"),GOr.forEach(t),sYe=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wre=n(tw,"CODE",{});var OOr=s(wre);lYe=r(OOr,"pretrained_model_name_or_path"),OOr.forEach(t),iYe=r(tw,":"),tw.forEach(t),dYe=i(Is),k=n(Is,"UL",{});var S=s(k);kn=n(S,"LI",{});var p9=s(kn);Are=n(p9,"STRONG",{});var VOr=s(Are);cYe=r(VOr,"albert"),VOr.forEach(t),fYe=r(p9," \u2014 "),wS=n(p9,"A",{href:!0});var XOr=s(wS);mYe=r(XOr,"AlbertTokenizer"),XOr.forEach(t),gYe=r(p9," or "),AS=n(p9,"A",{href:!0});var zOr=s(AS);hYe=r(zOr,"AlbertTokenizerFast"),zOr.forEach(t),pYe=r(p9," (ALBERT model)"),p9.forEach(t),uYe=i(S),Sn=n(S,"LI",{});var u9=s(Sn);yre=n(u9,"STRONG",{});var QOr=s(yre);_Ye=r(QOr,"bart"),QOr.forEach(t),bYe=r(u9," \u2014 "),yS=n(u9,"A",{href:!0});var WOr=s(yS);vYe=r(WOr,"BartTokenizer"),WOr.forEach(t),FYe=r(u9," or "),LS=n(u9,"A",{href:!0});var HOr=s(LS);TYe=r(HOr,"BartTokenizerFast"),HOr.forEach(t),MYe=r(u9," (BART model)"),u9.forEach(t),EYe=i(S),Rn=n(S,"LI",{});var _9=s(Rn);Lre=n(_9,"STRONG",{});var UOr=s(Lre);CYe=r(UOr,"barthez"),UOr.forEach(t),wYe=r(_9," \u2014 "),xS=n(_9,"A",{href:!0});var JOr=s(xS);AYe=r(JOr,"BarthezTokenizer"),JOr.forEach(t),yYe=r(_9," or "),$S=n(_9,"A",{href:!0});var YOr=s($S);LYe=r(YOr,"BarthezTokenizerFast"),YOr.forEach(t),xYe=r(_9," (BARThez model)"),_9.forEach(t),$Ye=i(S),Fg=n(S,"LI",{});var XCe=s(Fg);xre=n(XCe,"STRONG",{});var KOr=s(xre);kYe=r(KOr,"bartpho"),KOr.forEach(t),SYe=r(XCe," \u2014 "),kS=n(XCe,"A",{href:!0});var ZOr=s(kS);RYe=r(ZOr,"BartphoTokenizer"),ZOr.forEach(t),BYe=r(XCe," (BARTpho model)"),XCe.forEach(t),PYe=i(S),Bn=n(S,"LI",{});var b9=s(Bn);$re=n(b9,"STRONG",{});var eVr=s($re);IYe=r(eVr,"bert"),eVr.forEach(t),qYe=r(b9," \u2014 "),SS=n(b9,"A",{href:!0});var oVr=s(SS);NYe=r(oVr,"BertTokenizer"),oVr.forEach(t),jYe=r(b9," or "),RS=n(b9,"A",{href:!0});var rVr=s(RS);DYe=r(rVr,"BertTokenizerFast"),rVr.forEach(t),GYe=r(b9," (BERT model)"),b9.forEach(t),OYe=i(S),Tg=n(S,"LI",{});var zCe=s(Tg);kre=n(zCe,"STRONG",{});var tVr=s(kre);VYe=r(tVr,"bert-generation"),tVr.forEach(t),XYe=r(zCe," \u2014 "),BS=n(zCe,"A",{href:!0});var aVr=s(BS);zYe=r(aVr,"BertGenerationTokenizer"),aVr.forEach(t),QYe=r(zCe," (Bert Generation model)"),zCe.forEach(t),WYe=i(S),Mg=n(S,"LI",{});var QCe=s(Mg);Sre=n(QCe,"STRONG",{});var nVr=s(Sre);HYe=r(nVr,"bert-japanese"),nVr.forEach(t),UYe=r(QCe," \u2014 "),PS=n(QCe,"A",{href:!0});var sVr=s(PS);JYe=r(sVr,"BertJapaneseTokenizer"),sVr.forEach(t),YYe=r(QCe," (BertJapanese model)"),QCe.forEach(t),KYe=i(S),Eg=n(S,"LI",{});var WCe=s(Eg);Rre=n(WCe,"STRONG",{});var lVr=s(Rre);ZYe=r(lVr,"bertweet"),lVr.forEach(t),eKe=r(WCe," \u2014 "),IS=n(WCe,"A",{href:!0});var iVr=s(IS);oKe=r(iVr,"BertweetTokenizer"),iVr.forEach(t),rKe=r(WCe," (Bertweet model)"),WCe.forEach(t),tKe=i(S),Pn=n(S,"LI",{});var v9=s(Pn);Bre=n(v9,"STRONG",{});var dVr=s(Bre);aKe=r(dVr,"big_bird"),dVr.forEach(t),nKe=r(v9," \u2014 "),qS=n(v9,"A",{href:!0});var cVr=s(qS);sKe=r(cVr,"BigBirdTokenizer"),cVr.forEach(t),lKe=r(v9," or "),NS=n(v9,"A",{href:!0});var fVr=s(NS);iKe=r(fVr,"BigBirdTokenizerFast"),fVr.forEach(t),dKe=r(v9," (BigBird model)"),v9.forEach(t),cKe=i(S),In=n(S,"LI",{});var F9=s(In);Pre=n(F9,"STRONG",{});var mVr=s(Pre);fKe=r(mVr,"bigbird_pegasus"),mVr.forEach(t),mKe=r(F9," \u2014 "),jS=n(F9,"A",{href:!0});var gVr=s(jS);gKe=r(gVr,"PegasusTokenizer"),gVr.forEach(t),hKe=r(F9," or "),DS=n(F9,"A",{href:!0});var hVr=s(DS);pKe=r(hVr,"PegasusTokenizerFast"),hVr.forEach(t),uKe=r(F9," (BigBirdPegasus model)"),F9.forEach(t),_Ke=i(S),qn=n(S,"LI",{});var T9=s(qn);Ire=n(T9,"STRONG",{});var pVr=s(Ire);bKe=r(pVr,"blenderbot"),pVr.forEach(t),vKe=r(T9," \u2014 "),GS=n(T9,"A",{href:!0});var uVr=s(GS);FKe=r(uVr,"BlenderbotTokenizer"),uVr.forEach(t),TKe=r(T9," or "),OS=n(T9,"A",{href:!0});var _Vr=s(OS);MKe=r(_Vr,"BlenderbotTokenizerFast"),_Vr.forEach(t),EKe=r(T9," (Blenderbot model)"),T9.forEach(t),CKe=i(S),Cg=n(S,"LI",{});var HCe=s(Cg);qre=n(HCe,"STRONG",{});var bVr=s(qre);wKe=r(bVr,"blenderbot-small"),bVr.forEach(t),AKe=r(HCe," \u2014 "),VS=n(HCe,"A",{href:!0});var vVr=s(VS);yKe=r(vVr,"BlenderbotSmallTokenizer"),vVr.forEach(t),LKe=r(HCe," (BlenderbotSmall model)"),HCe.forEach(t),xKe=i(S),wg=n(S,"LI",{});var UCe=s(wg);Nre=n(UCe,"STRONG",{});var FVr=s(Nre);$Ke=r(FVr,"bloom"),FVr.forEach(t),kKe=r(UCe," \u2014 "),XS=n(UCe,"A",{href:!0});var TVr=s(XS);SKe=r(TVr,"BLOOMTokenizerFast"),TVr.forEach(t),RKe=r(UCe," (BLOOM model)"),UCe.forEach(t),BKe=i(S),Ag=n(S,"LI",{});var JCe=s(Ag);jre=n(JCe,"STRONG",{});var MVr=s(jre);PKe=r(MVr,"byt5"),MVr.forEach(t),IKe=r(JCe," \u2014 "),zS=n(JCe,"A",{href:!0});var EVr=s(zS);qKe=r(EVr,"ByT5Tokenizer"),EVr.forEach(t),NKe=r(JCe," (ByT5 model)"),JCe.forEach(t),jKe=i(S),Nn=n(S,"LI",{});var M9=s(Nn);Dre=n(M9,"STRONG",{});var CVr=s(Dre);DKe=r(CVr,"camembert"),CVr.forEach(t),GKe=r(M9," \u2014 "),QS=n(M9,"A",{href:!0});var wVr=s(QS);OKe=r(wVr,"CamembertTokenizer"),wVr.forEach(t),VKe=r(M9," or "),WS=n(M9,"A",{href:!0});var AVr=s(WS);XKe=r(AVr,"CamembertTokenizerFast"),AVr.forEach(t),zKe=r(M9," (CamemBERT model)"),M9.forEach(t),QKe=i(S),yg=n(S,"LI",{});var YCe=s(yg);Gre=n(YCe,"STRONG",{});var yVr=s(Gre);WKe=r(yVr,"canine"),yVr.forEach(t),HKe=r(YCe," \u2014 "),HS=n(YCe,"A",{href:!0});var LVr=s(HS);UKe=r(LVr,"CanineTokenizer"),LVr.forEach(t),JKe=r(YCe," (Canine model)"),YCe.forEach(t),YKe=i(S),jn=n(S,"LI",{});var E9=s(jn);Ore=n(E9,"STRONG",{});var xVr=s(Ore);KKe=r(xVr,"clip"),xVr.forEach(t),ZKe=r(E9," \u2014 "),US=n(E9,"A",{href:!0});var $Vr=s(US);eZe=r($Vr,"CLIPTokenizer"),$Vr.forEach(t),oZe=r(E9," or "),JS=n(E9,"A",{href:!0});var kVr=s(JS);rZe=r(kVr,"CLIPTokenizerFast"),kVr.forEach(t),tZe=r(E9," (CLIP model)"),E9.forEach(t),aZe=i(S),Dn=n(S,"LI",{});var C9=s(Dn);Vre=n(C9,"STRONG",{});var SVr=s(Vre);nZe=r(SVr,"convbert"),SVr.forEach(t),sZe=r(C9," \u2014 "),YS=n(C9,"A",{href:!0});var RVr=s(YS);lZe=r(RVr,"ConvBertTokenizer"),RVr.forEach(t),iZe=r(C9," or "),KS=n(C9,"A",{href:!0});var BVr=s(KS);dZe=r(BVr,"ConvBertTokenizerFast"),BVr.forEach(t),cZe=r(C9," (ConvBERT model)"),C9.forEach(t),fZe=i(S),Gn=n(S,"LI",{});var w9=s(Gn);Xre=n(w9,"STRONG",{});var PVr=s(Xre);mZe=r(PVr,"cpm"),PVr.forEach(t),gZe=r(w9," \u2014 "),ZS=n(w9,"A",{href:!0});var IVr=s(ZS);hZe=r(IVr,"CpmTokenizer"),IVr.forEach(t),pZe=r(w9," or "),eR=n(w9,"A",{href:!0});var qVr=s(eR);uZe=r(qVr,"CpmTokenizerFast"),qVr.forEach(t),_Ze=r(w9," (CPM model)"),w9.forEach(t),bZe=i(S),Lg=n(S,"LI",{});var KCe=s(Lg);zre=n(KCe,"STRONG",{});var NVr=s(zre);vZe=r(NVr,"ctrl"),NVr.forEach(t),FZe=r(KCe," \u2014 "),oR=n(KCe,"A",{href:!0});var jVr=s(oR);TZe=r(jVr,"CTRLTokenizer"),jVr.forEach(t),MZe=r(KCe," (CTRL model)"),KCe.forEach(t),EZe=i(S),On=n(S,"LI",{});var A9=s(On);Qre=n(A9,"STRONG",{});var DVr=s(Qre);CZe=r(DVr,"data2vec-text"),DVr.forEach(t),wZe=r(A9," \u2014 "),rR=n(A9,"A",{href:!0});var GVr=s(rR);AZe=r(GVr,"RobertaTokenizer"),GVr.forEach(t),yZe=r(A9," or "),tR=n(A9,"A",{href:!0});var OVr=s(tR);LZe=r(OVr,"RobertaTokenizerFast"),OVr.forEach(t),xZe=r(A9," (Data2VecText model)"),A9.forEach(t),$Ze=i(S),Vn=n(S,"LI",{});var y9=s(Vn);Wre=n(y9,"STRONG",{});var VVr=s(Wre);kZe=r(VVr,"deberta"),VVr.forEach(t),SZe=r(y9," \u2014 "),aR=n(y9,"A",{href:!0});var XVr=s(aR);RZe=r(XVr,"DebertaTokenizer"),XVr.forEach(t),BZe=r(y9," or "),nR=n(y9,"A",{href:!0});var zVr=s(nR);PZe=r(zVr,"DebertaTokenizerFast"),zVr.forEach(t),IZe=r(y9," (DeBERTa model)"),y9.forEach(t),qZe=i(S),Xn=n(S,"LI",{});var L9=s(Xn);Hre=n(L9,"STRONG",{});var QVr=s(Hre);NZe=r(QVr,"deberta-v2"),QVr.forEach(t),jZe=r(L9," \u2014 "),sR=n(L9,"A",{href:!0});var WVr=s(sR);DZe=r(WVr,"DebertaV2Tokenizer"),WVr.forEach(t),GZe=r(L9," or "),lR=n(L9,"A",{href:!0});var HVr=s(lR);OZe=r(HVr,"DebertaV2TokenizerFast"),HVr.forEach(t),VZe=r(L9," (DeBERTa-v2 model)"),L9.forEach(t),XZe=i(S),zn=n(S,"LI",{});var x9=s(zn);Ure=n(x9,"STRONG",{});var UVr=s(Ure);zZe=r(UVr,"distilbert"),UVr.forEach(t),QZe=r(x9," \u2014 "),iR=n(x9,"A",{href:!0});var JVr=s(iR);WZe=r(JVr,"DistilBertTokenizer"),JVr.forEach(t),HZe=r(x9," or "),dR=n(x9,"A",{href:!0});var YVr=s(dR);UZe=r(YVr,"DistilBertTokenizerFast"),YVr.forEach(t),JZe=r(x9," (DistilBERT model)"),x9.forEach(t),YZe=i(S),Qn=n(S,"LI",{});var $9=s(Qn);Jre=n($9,"STRONG",{});var KVr=s(Jre);KZe=r(KVr,"dpr"),KVr.forEach(t),ZZe=r($9," \u2014 "),cR=n($9,"A",{href:!0});var ZVr=s(cR);eeo=r(ZVr,"DPRQuestionEncoderTokenizer"),ZVr.forEach(t),oeo=r($9," or "),fR=n($9,"A",{href:!0});var eXr=s(fR);reo=r(eXr,"DPRQuestionEncoderTokenizerFast"),eXr.forEach(t),teo=r($9," (DPR model)"),$9.forEach(t),aeo=i(S),Wn=n(S,"LI",{});var k9=s(Wn);Yre=n(k9,"STRONG",{});var oXr=s(Yre);neo=r(oXr,"electra"),oXr.forEach(t),seo=r(k9," \u2014 "),mR=n(k9,"A",{href:!0});var rXr=s(mR);leo=r(rXr,"ElectraTokenizer"),rXr.forEach(t),ieo=r(k9," or "),gR=n(k9,"A",{href:!0});var tXr=s(gR);deo=r(tXr,"ElectraTokenizerFast"),tXr.forEach(t),ceo=r(k9," (ELECTRA model)"),k9.forEach(t),feo=i(S),xg=n(S,"LI",{});var ZCe=s(xg);Kre=n(ZCe,"STRONG",{});var aXr=s(Kre);meo=r(aXr,"flaubert"),aXr.forEach(t),geo=r(ZCe," \u2014 "),hR=n(ZCe,"A",{href:!0});var nXr=s(hR);heo=r(nXr,"FlaubertTokenizer"),nXr.forEach(t),peo=r(ZCe," (FlauBERT model)"),ZCe.forEach(t),ueo=i(S),Hn=n(S,"LI",{});var S9=s(Hn);Zre=n(S9,"STRONG",{});var sXr=s(Zre);_eo=r(sXr,"fnet"),sXr.forEach(t),beo=r(S9," \u2014 "),pR=n(S9,"A",{href:!0});var lXr=s(pR);veo=r(lXr,"FNetTokenizer"),lXr.forEach(t),Feo=r(S9," or "),uR=n(S9,"A",{href:!0});var iXr=s(uR);Teo=r(iXr,"FNetTokenizerFast"),iXr.forEach(t),Meo=r(S9," (FNet model)"),S9.forEach(t),Eeo=i(S),$g=n(S,"LI",{});var e3e=s($g);ete=n(e3e,"STRONG",{});var dXr=s(ete);Ceo=r(dXr,"fsmt"),dXr.forEach(t),weo=r(e3e," \u2014 "),_R=n(e3e,"A",{href:!0});var cXr=s(_R);Aeo=r(cXr,"FSMTTokenizer"),cXr.forEach(t),yeo=r(e3e," (FairSeq Machine-Translation model)"),e3e.forEach(t),Leo=i(S),Un=n(S,"LI",{});var R9=s(Un);ote=n(R9,"STRONG",{});var fXr=s(ote);xeo=r(fXr,"funnel"),fXr.forEach(t),$eo=r(R9," \u2014 "),bR=n(R9,"A",{href:!0});var mXr=s(bR);keo=r(mXr,"FunnelTokenizer"),mXr.forEach(t),Seo=r(R9," or "),vR=n(R9,"A",{href:!0});var gXr=s(vR);Reo=r(gXr,"FunnelTokenizerFast"),gXr.forEach(t),Beo=r(R9," (Funnel Transformer model)"),R9.forEach(t),Peo=i(S),Jn=n(S,"LI",{});var B9=s(Jn);rte=n(B9,"STRONG",{});var hXr=s(rte);Ieo=r(hXr,"gpt2"),hXr.forEach(t),qeo=r(B9," \u2014 "),FR=n(B9,"A",{href:!0});var pXr=s(FR);Neo=r(pXr,"GPT2Tokenizer"),pXr.forEach(t),jeo=r(B9," or "),TR=n(B9,"A",{href:!0});var uXr=s(TR);Deo=r(uXr,"GPT2TokenizerFast"),uXr.forEach(t),Geo=r(B9," (OpenAI GPT-2 model)"),B9.forEach(t),Oeo=i(S),Yn=n(S,"LI",{});var P9=s(Yn);tte=n(P9,"STRONG",{});var _Xr=s(tte);Veo=r(_Xr,"gpt_neo"),_Xr.forEach(t),Xeo=r(P9," \u2014 "),MR=n(P9,"A",{href:!0});var bXr=s(MR);zeo=r(bXr,"GPT2Tokenizer"),bXr.forEach(t),Qeo=r(P9," or "),ER=n(P9,"A",{href:!0});var vXr=s(ER);Weo=r(vXr,"GPT2TokenizerFast"),vXr.forEach(t),Heo=r(P9," (GPT Neo model)"),P9.forEach(t),Ueo=i(S),Kn=n(S,"LI",{});var I9=s(Kn);ate=n(I9,"STRONG",{});var FXr=s(ate);Jeo=r(FXr,"gptj"),FXr.forEach(t),Yeo=r(I9," \u2014 "),CR=n(I9,"A",{href:!0});var TXr=s(CR);Keo=r(TXr,"GPT2Tokenizer"),TXr.forEach(t),Zeo=r(I9," or "),wR=n(I9,"A",{href:!0});var MXr=s(wR);eoo=r(MXr,"GPT2TokenizerFast"),MXr.forEach(t),ooo=r(I9," (GPT-J model)"),I9.forEach(t),roo=i(S),Zn=n(S,"LI",{});var q9=s(Zn);nte=n(q9,"STRONG",{});var EXr=s(nte);too=r(EXr,"herbert"),EXr.forEach(t),aoo=r(q9," \u2014 "),AR=n(q9,"A",{href:!0});var CXr=s(AR);noo=r(CXr,"HerbertTokenizer"),CXr.forEach(t),soo=r(q9," or "),yR=n(q9,"A",{href:!0});var wXr=s(yR);loo=r(wXr,"HerbertTokenizerFast"),wXr.forEach(t),ioo=r(q9," (HerBERT model)"),q9.forEach(t),doo=i(S),kg=n(S,"LI",{});var o3e=s(kg);ste=n(o3e,"STRONG",{});var AXr=s(ste);coo=r(AXr,"hubert"),AXr.forEach(t),foo=r(o3e," \u2014 "),LR=n(o3e,"A",{href:!0});var yXr=s(LR);moo=r(yXr,"Wav2Vec2CTCTokenizer"),yXr.forEach(t),goo=r(o3e," (Hubert model)"),o3e.forEach(t),hoo=i(S),es=n(S,"LI",{});var N9=s(es);lte=n(N9,"STRONG",{});var LXr=s(lte);poo=r(LXr,"ibert"),LXr.forEach(t),uoo=r(N9," \u2014 "),xR=n(N9,"A",{href:!0});var xXr=s(xR);_oo=r(xXr,"RobertaTokenizer"),xXr.forEach(t),boo=r(N9," or "),$R=n(N9,"A",{href:!0});var $Xr=s($R);voo=r($Xr,"RobertaTokenizerFast"),$Xr.forEach(t),Foo=r(N9," (I-BERT model)"),N9.forEach(t),Too=i(S),os=n(S,"LI",{});var j9=s(os);ite=n(j9,"STRONG",{});var kXr=s(ite);Moo=r(kXr,"layoutlm"),kXr.forEach(t),Eoo=r(j9," \u2014 "),kR=n(j9,"A",{href:!0});var SXr=s(kR);Coo=r(SXr,"LayoutLMTokenizer"),SXr.forEach(t),woo=r(j9," or "),SR=n(j9,"A",{href:!0});var RXr=s(SR);Aoo=r(RXr,"LayoutLMTokenizerFast"),RXr.forEach(t),yoo=r(j9," (LayoutLM model)"),j9.forEach(t),Loo=i(S),rs=n(S,"LI",{});var D9=s(rs);dte=n(D9,"STRONG",{});var BXr=s(dte);xoo=r(BXr,"layoutlmv2"),BXr.forEach(t),$oo=r(D9," \u2014 "),RR=n(D9,"A",{href:!0});var PXr=s(RR);koo=r(PXr,"LayoutLMv2Tokenizer"),PXr.forEach(t),Soo=r(D9," or "),BR=n(D9,"A",{href:!0});var IXr=s(BR);Roo=r(IXr,"LayoutLMv2TokenizerFast"),IXr.forEach(t),Boo=r(D9," (LayoutLMv2 model)"),D9.forEach(t),Poo=i(S),ts=n(S,"LI",{});var G9=s(ts);cte=n(G9,"STRONG",{});var qXr=s(cte);Ioo=r(qXr,"layoutxlm"),qXr.forEach(t),qoo=r(G9," \u2014 "),PR=n(G9,"A",{href:!0});var NXr=s(PR);Noo=r(NXr,"LayoutXLMTokenizer"),NXr.forEach(t),joo=r(G9," or "),IR=n(G9,"A",{href:!0});var jXr=s(IR);Doo=r(jXr,"LayoutXLMTokenizerFast"),jXr.forEach(t),Goo=r(G9," (LayoutXLM model)"),G9.forEach(t),Ooo=i(S),as=n(S,"LI",{});var O9=s(as);fte=n(O9,"STRONG",{});var DXr=s(fte);Voo=r(DXr,"led"),DXr.forEach(t),Xoo=r(O9," \u2014 "),qR=n(O9,"A",{href:!0});var GXr=s(qR);zoo=r(GXr,"LEDTokenizer"),GXr.forEach(t),Qoo=r(O9," or "),NR=n(O9,"A",{href:!0});var OXr=s(NR);Woo=r(OXr,"LEDTokenizerFast"),OXr.forEach(t),Hoo=r(O9," (LED model)"),O9.forEach(t),Uoo=i(S),ns=n(S,"LI",{});var V9=s(ns);mte=n(V9,"STRONG",{});var VXr=s(mte);Joo=r(VXr,"longformer"),VXr.forEach(t),Yoo=r(V9," \u2014 "),jR=n(V9,"A",{href:!0});var XXr=s(jR);Koo=r(XXr,"LongformerTokenizer"),XXr.forEach(t),Zoo=r(V9," or "),DR=n(V9,"A",{href:!0});var zXr=s(DR);ero=r(zXr,"LongformerTokenizerFast"),zXr.forEach(t),oro=r(V9," (Longformer model)"),V9.forEach(t),rro=i(S),Sg=n(S,"LI",{});var r3e=s(Sg);gte=n(r3e,"STRONG",{});var QXr=s(gte);tro=r(QXr,"luke"),QXr.forEach(t),aro=r(r3e," \u2014 "),GR=n(r3e,"A",{href:!0});var WXr=s(GR);nro=r(WXr,"LukeTokenizer"),WXr.forEach(t),sro=r(r3e," (LUKE model)"),r3e.forEach(t),lro=i(S),ss=n(S,"LI",{});var X9=s(ss);hte=n(X9,"STRONG",{});var HXr=s(hte);iro=r(HXr,"lxmert"),HXr.forEach(t),dro=r(X9," \u2014 "),OR=n(X9,"A",{href:!0});var UXr=s(OR);cro=r(UXr,"LxmertTokenizer"),UXr.forEach(t),fro=r(X9," or "),VR=n(X9,"A",{href:!0});var JXr=s(VR);mro=r(JXr,"LxmertTokenizerFast"),JXr.forEach(t),gro=r(X9," (LXMERT model)"),X9.forEach(t),hro=i(S),Rg=n(S,"LI",{});var t3e=s(Rg);pte=n(t3e,"STRONG",{});var YXr=s(pte);pro=r(YXr,"m2m_100"),YXr.forEach(t),uro=r(t3e," \u2014 "),XR=n(t3e,"A",{href:!0});var KXr=s(XR);_ro=r(KXr,"M2M100Tokenizer"),KXr.forEach(t),bro=r(t3e," (M2M100 model)"),t3e.forEach(t),vro=i(S),Bg=n(S,"LI",{});var a3e=s(Bg);ute=n(a3e,"STRONG",{});var ZXr=s(ute);Fro=r(ZXr,"marian"),ZXr.forEach(t),Tro=r(a3e," \u2014 "),zR=n(a3e,"A",{href:!0});var ezr=s(zR);Mro=r(ezr,"MarianTokenizer"),ezr.forEach(t),Ero=r(a3e," (Marian model)"),a3e.forEach(t),Cro=i(S),ls=n(S,"LI",{});var z9=s(ls);_te=n(z9,"STRONG",{});var ozr=s(_te);wro=r(ozr,"mbart"),ozr.forEach(t),Aro=r(z9," \u2014 "),QR=n(z9,"A",{href:!0});var rzr=s(QR);yro=r(rzr,"MBartTokenizer"),rzr.forEach(t),Lro=r(z9," or "),WR=n(z9,"A",{href:!0});var tzr=s(WR);xro=r(tzr,"MBartTokenizerFast"),tzr.forEach(t),$ro=r(z9," (mBART model)"),z9.forEach(t),kro=i(S),is=n(S,"LI",{});var Q9=s(is);bte=n(Q9,"STRONG",{});var azr=s(bte);Sro=r(azr,"mbart50"),azr.forEach(t),Rro=r(Q9," \u2014 "),HR=n(Q9,"A",{href:!0});var nzr=s(HR);Bro=r(nzr,"MBart50Tokenizer"),nzr.forEach(t),Pro=r(Q9," or "),UR=n(Q9,"A",{href:!0});var szr=s(UR);Iro=r(szr,"MBart50TokenizerFast"),szr.forEach(t),qro=r(Q9," (mBART-50 model)"),Q9.forEach(t),Nro=i(S),ds=n(S,"LI",{});var W9=s(ds);vte=n(W9,"STRONG",{});var lzr=s(vte);jro=r(lzr,"megatron-bert"),lzr.forEach(t),Dro=r(W9," \u2014 "),JR=n(W9,"A",{href:!0});var izr=s(JR);Gro=r(izr,"BertTokenizer"),izr.forEach(t),Oro=r(W9," or "),YR=n(W9,"A",{href:!0});var dzr=s(YR);Vro=r(dzr,"BertTokenizerFast"),dzr.forEach(t),Xro=r(W9," (MegatronBert model)"),W9.forEach(t),zro=i(S),Pg=n(S,"LI",{});var n3e=s(Pg);Fte=n(n3e,"STRONG",{});var czr=s(Fte);Qro=r(czr,"mluke"),czr.forEach(t),Wro=r(n3e," \u2014 "),KR=n(n3e,"A",{href:!0});var fzr=s(KR);Hro=r(fzr,"MLukeTokenizer"),fzr.forEach(t),Uro=r(n3e," (mLUKE model)"),n3e.forEach(t),Jro=i(S),cs=n(S,"LI",{});var H9=s(cs);Tte=n(H9,"STRONG",{});var mzr=s(Tte);Yro=r(mzr,"mobilebert"),mzr.forEach(t),Kro=r(H9," \u2014 "),ZR=n(H9,"A",{href:!0});var gzr=s(ZR);Zro=r(gzr,"MobileBertTokenizer"),gzr.forEach(t),eto=r(H9," or "),eB=n(H9,"A",{href:!0});var hzr=s(eB);oto=r(hzr,"MobileBertTokenizerFast"),hzr.forEach(t),rto=r(H9," (MobileBERT model)"),H9.forEach(t),tto=i(S),fs=n(S,"LI",{});var U9=s(fs);Mte=n(U9,"STRONG",{});var pzr=s(Mte);ato=r(pzr,"mpnet"),pzr.forEach(t),nto=r(U9," \u2014 "),oB=n(U9,"A",{href:!0});var uzr=s(oB);sto=r(uzr,"MPNetTokenizer"),uzr.forEach(t),lto=r(U9," or "),rB=n(U9,"A",{href:!0});var _zr=s(rB);ito=r(_zr,"MPNetTokenizerFast"),_zr.forEach(t),dto=r(U9," (MPNet model)"),U9.forEach(t),cto=i(S),ms=n(S,"LI",{});var J9=s(ms);Ete=n(J9,"STRONG",{});var bzr=s(Ete);fto=r(bzr,"mt5"),bzr.forEach(t),mto=r(J9," \u2014 "),tB=n(J9,"A",{href:!0});var vzr=s(tB);gto=r(vzr,"MT5Tokenizer"),vzr.forEach(t),hto=r(J9," or "),aB=n(J9,"A",{href:!0});var Fzr=s(aB);pto=r(Fzr,"MT5TokenizerFast"),Fzr.forEach(t),uto=r(J9," (mT5 model)"),J9.forEach(t),_to=i(S),gs=n(S,"LI",{});var Y9=s(gs);Cte=n(Y9,"STRONG",{});var Tzr=s(Cte);bto=r(Tzr,"nystromformer"),Tzr.forEach(t),vto=r(Y9," \u2014 "),nB=n(Y9,"A",{href:!0});var Mzr=s(nB);Fto=r(Mzr,"AlbertTokenizer"),Mzr.forEach(t),Tto=r(Y9," or "),sB=n(Y9,"A",{href:!0});var Ezr=s(sB);Mto=r(Ezr,"AlbertTokenizerFast"),Ezr.forEach(t),Eto=r(Y9," (Nystromformer model)"),Y9.forEach(t),Cto=i(S),hs=n(S,"LI",{});var K9=s(hs);wte=n(K9,"STRONG",{});var Czr=s(wte);wto=r(Czr,"openai-gpt"),Czr.forEach(t),Ato=r(K9," \u2014 "),lB=n(K9,"A",{href:!0});var wzr=s(lB);yto=r(wzr,"OpenAIGPTTokenizer"),wzr.forEach(t),Lto=r(K9," or "),iB=n(K9,"A",{href:!0});var Azr=s(iB);xto=r(Azr,"OpenAIGPTTokenizerFast"),Azr.forEach(t),$to=r(K9," (OpenAI GPT model)"),K9.forEach(t),kto=i(S),Ig=n(S,"LI",{});var s3e=s(Ig);Ate=n(s3e,"STRONG",{});var yzr=s(Ate);Sto=r(yzr,"opt"),yzr.forEach(t),Rto=r(s3e," \u2014 "),dB=n(s3e,"A",{href:!0});var Lzr=s(dB);Bto=r(Lzr,"GPT2Tokenizer"),Lzr.forEach(t),Pto=r(s3e," (OPT model)"),s3e.forEach(t),Ito=i(S),ps=n(S,"LI",{});var Z9=s(ps);yte=n(Z9,"STRONG",{});var xzr=s(yte);qto=r(xzr,"pegasus"),xzr.forEach(t),Nto=r(Z9," \u2014 "),cB=n(Z9,"A",{href:!0});var $zr=s(cB);jto=r($zr,"PegasusTokenizer"),$zr.forEach(t),Dto=r(Z9," or "),fB=n(Z9,"A",{href:!0});var kzr=s(fB);Gto=r(kzr,"PegasusTokenizerFast"),kzr.forEach(t),Oto=r(Z9," (Pegasus model)"),Z9.forEach(t),Vto=i(S),qg=n(S,"LI",{});var l3e=s(qg);Lte=n(l3e,"STRONG",{});var Szr=s(Lte);Xto=r(Szr,"perceiver"),Szr.forEach(t),zto=r(l3e," \u2014 "),mB=n(l3e,"A",{href:!0});var Rzr=s(mB);Qto=r(Rzr,"PerceiverTokenizer"),Rzr.forEach(t),Wto=r(l3e," (Perceiver model)"),l3e.forEach(t),Hto=i(S),Ng=n(S,"LI",{});var i3e=s(Ng);xte=n(i3e,"STRONG",{});var Bzr=s(xte);Uto=r(Bzr,"phobert"),Bzr.forEach(t),Jto=r(i3e," \u2014 "),gB=n(i3e,"A",{href:!0});var Pzr=s(gB);Yto=r(Pzr,"PhobertTokenizer"),Pzr.forEach(t),Kto=r(i3e," (PhoBERT model)"),i3e.forEach(t),Zto=i(S),jg=n(S,"LI",{});var d3e=s(jg);$te=n(d3e,"STRONG",{});var Izr=s($te);eao=r(Izr,"plbart"),Izr.forEach(t),oao=r(d3e," \u2014 "),hB=n(d3e,"A",{href:!0});var qzr=s(hB);rao=r(qzr,"PLBartTokenizer"),qzr.forEach(t),tao=r(d3e," (PLBart model)"),d3e.forEach(t),aao=i(S),Dg=n(S,"LI",{});var c3e=s(Dg);kte=n(c3e,"STRONG",{});var Nzr=s(kte);nao=r(Nzr,"prophetnet"),Nzr.forEach(t),sao=r(c3e," \u2014 "),pB=n(c3e,"A",{href:!0});var jzr=s(pB);lao=r(jzr,"ProphetNetTokenizer"),jzr.forEach(t),iao=r(c3e," (ProphetNet model)"),c3e.forEach(t),dao=i(S),us=n(S,"LI",{});var e$=s(us);Ste=n(e$,"STRONG",{});var Dzr=s(Ste);cao=r(Dzr,"qdqbert"),Dzr.forEach(t),fao=r(e$," \u2014 "),uB=n(e$,"A",{href:!0});var Gzr=s(uB);mao=r(Gzr,"BertTokenizer"),Gzr.forEach(t),gao=r(e$," or "),_B=n(e$,"A",{href:!0});var Ozr=s(_B);hao=r(Ozr,"BertTokenizerFast"),Ozr.forEach(t),pao=r(e$," (QDQBert model)"),e$.forEach(t),uao=i(S),Gg=n(S,"LI",{});var f3e=s(Gg);Rte=n(f3e,"STRONG",{});var Vzr=s(Rte);_ao=r(Vzr,"rag"),Vzr.forEach(t),bao=r(f3e," \u2014 "),bB=n(f3e,"A",{href:!0});var Xzr=s(bB);vao=r(Xzr,"RagTokenizer"),Xzr.forEach(t),Fao=r(f3e," (RAG model)"),f3e.forEach(t),Tao=i(S),_s=n(S,"LI",{});var o$=s(_s);Bte=n(o$,"STRONG",{});var zzr=s(Bte);Mao=r(zzr,"realm"),zzr.forEach(t),Eao=r(o$," \u2014 "),vB=n(o$,"A",{href:!0});var Qzr=s(vB);Cao=r(Qzr,"RealmTokenizer"),Qzr.forEach(t),wao=r(o$," or "),FB=n(o$,"A",{href:!0});var Wzr=s(FB);Aao=r(Wzr,"RealmTokenizerFast"),Wzr.forEach(t),yao=r(o$," (Realm model)"),o$.forEach(t),Lao=i(S),bs=n(S,"LI",{});var r$=s(bs);Pte=n(r$,"STRONG",{});var Hzr=s(Pte);xao=r(Hzr,"reformer"),Hzr.forEach(t),$ao=r(r$," \u2014 "),TB=n(r$,"A",{href:!0});var Uzr=s(TB);kao=r(Uzr,"ReformerTokenizer"),Uzr.forEach(t),Sao=r(r$," or "),MB=n(r$,"A",{href:!0});var Jzr=s(MB);Rao=r(Jzr,"ReformerTokenizerFast"),Jzr.forEach(t),Bao=r(r$," (Reformer model)"),r$.forEach(t),Pao=i(S),vs=n(S,"LI",{});var t$=s(vs);Ite=n(t$,"STRONG",{});var Yzr=s(Ite);Iao=r(Yzr,"rembert"),Yzr.forEach(t),qao=r(t$," \u2014 "),EB=n(t$,"A",{href:!0});var Kzr=s(EB);Nao=r(Kzr,"RemBertTokenizer"),Kzr.forEach(t),jao=r(t$," or "),CB=n(t$,"A",{href:!0});var Zzr=s(CB);Dao=r(Zzr,"RemBertTokenizerFast"),Zzr.forEach(t),Gao=r(t$," (RemBERT model)"),t$.forEach(t),Oao=i(S),Fs=n(S,"LI",{});var a$=s(Fs);qte=n(a$,"STRONG",{});var eQr=s(qte);Vao=r(eQr,"retribert"),eQr.forEach(t),Xao=r(a$," \u2014 "),wB=n(a$,"A",{href:!0});var oQr=s(wB);zao=r(oQr,"RetriBertTokenizer"),oQr.forEach(t),Qao=r(a$," or "),AB=n(a$,"A",{href:!0});var rQr=s(AB);Wao=r(rQr,"RetriBertTokenizerFast"),rQr.forEach(t),Hao=r(a$," (RetriBERT model)"),a$.forEach(t),Uao=i(S),Ts=n(S,"LI",{});var n$=s(Ts);Nte=n(n$,"STRONG",{});var tQr=s(Nte);Jao=r(tQr,"roberta"),tQr.forEach(t),Yao=r(n$," \u2014 "),yB=n(n$,"A",{href:!0});var aQr=s(yB);Kao=r(aQr,"RobertaTokenizer"),aQr.forEach(t),Zao=r(n$," or "),LB=n(n$,"A",{href:!0});var nQr=s(LB);eno=r(nQr,"RobertaTokenizerFast"),nQr.forEach(t),ono=r(n$," (RoBERTa model)"),n$.forEach(t),rno=i(S),Ms=n(S,"LI",{});var s$=s(Ms);jte=n(s$,"STRONG",{});var sQr=s(jte);tno=r(sQr,"roformer"),sQr.forEach(t),ano=r(s$," \u2014 "),xB=n(s$,"A",{href:!0});var lQr=s(xB);nno=r(lQr,"RoFormerTokenizer"),lQr.forEach(t),sno=r(s$," or "),$B=n(s$,"A",{href:!0});var iQr=s($B);lno=r(iQr,"RoFormerTokenizerFast"),iQr.forEach(t),ino=r(s$," (RoFormer model)"),s$.forEach(t),dno=i(S),Og=n(S,"LI",{});var m3e=s(Og);Dte=n(m3e,"STRONG",{});var dQr=s(Dte);cno=r(dQr,"speech_to_text"),dQr.forEach(t),fno=r(m3e," \u2014 "),kB=n(m3e,"A",{href:!0});var cQr=s(kB);mno=r(cQr,"Speech2TextTokenizer"),cQr.forEach(t),gno=r(m3e," (Speech2Text model)"),m3e.forEach(t),hno=i(S),Vg=n(S,"LI",{});var g3e=s(Vg);Gte=n(g3e,"STRONG",{});var fQr=s(Gte);pno=r(fQr,"speech_to_text_2"),fQr.forEach(t),uno=r(g3e," \u2014 "),SB=n(g3e,"A",{href:!0});var mQr=s(SB);_no=r(mQr,"Speech2Text2Tokenizer"),mQr.forEach(t),bno=r(g3e," (Speech2Text2 model)"),g3e.forEach(t),vno=i(S),Es=n(S,"LI",{});var l$=s(Es);Ote=n(l$,"STRONG",{});var gQr=s(Ote);Fno=r(gQr,"splinter"),gQr.forEach(t),Tno=r(l$," \u2014 "),RB=n(l$,"A",{href:!0});var hQr=s(RB);Mno=r(hQr,"SplinterTokenizer"),hQr.forEach(t),Eno=r(l$," or "),BB=n(l$,"A",{href:!0});var pQr=s(BB);Cno=r(pQr,"SplinterTokenizerFast"),pQr.forEach(t),wno=r(l$," (Splinter model)"),l$.forEach(t),Ano=i(S),Cs=n(S,"LI",{});var i$=s(Cs);Vte=n(i$,"STRONG",{});var uQr=s(Vte);yno=r(uQr,"squeezebert"),uQr.forEach(t),Lno=r(i$," \u2014 "),PB=n(i$,"A",{href:!0});var _Qr=s(PB);xno=r(_Qr,"SqueezeBertTokenizer"),_Qr.forEach(t),$no=r(i$," or "),IB=n(i$,"A",{href:!0});var bQr=s(IB);kno=r(bQr,"SqueezeBertTokenizerFast"),bQr.forEach(t),Sno=r(i$," (SqueezeBERT model)"),i$.forEach(t),Rno=i(S),ws=n(S,"LI",{});var d$=s(ws);Xte=n(d$,"STRONG",{});var vQr=s(Xte);Bno=r(vQr,"t5"),vQr.forEach(t),Pno=r(d$," \u2014 "),qB=n(d$,"A",{href:!0});var FQr=s(qB);Ino=r(FQr,"T5Tokenizer"),FQr.forEach(t),qno=r(d$," or "),NB=n(d$,"A",{href:!0});var TQr=s(NB);Nno=r(TQr,"T5TokenizerFast"),TQr.forEach(t),jno=r(d$," (T5 model)"),d$.forEach(t),Dno=i(S),Xg=n(S,"LI",{});var h3e=s(Xg);zte=n(h3e,"STRONG",{});var MQr=s(zte);Gno=r(MQr,"tapas"),MQr.forEach(t),Ono=r(h3e," \u2014 "),jB=n(h3e,"A",{href:!0});var EQr=s(jB);Vno=r(EQr,"TapasTokenizer"),EQr.forEach(t),Xno=r(h3e," (TAPAS model)"),h3e.forEach(t),zno=i(S),zg=n(S,"LI",{});var p3e=s(zg);Qte=n(p3e,"STRONG",{});var CQr=s(Qte);Qno=r(CQr,"tapex"),CQr.forEach(t),Wno=r(p3e," \u2014 "),DB=n(p3e,"A",{href:!0});var wQr=s(DB);Hno=r(wQr,"TapexTokenizer"),wQr.forEach(t),Uno=r(p3e," (TAPEX model)"),p3e.forEach(t),Jno=i(S),Qg=n(S,"LI",{});var u3e=s(Qg);Wte=n(u3e,"STRONG",{});var AQr=s(Wte);Yno=r(AQr,"transfo-xl"),AQr.forEach(t),Kno=r(u3e," \u2014 "),GB=n(u3e,"A",{href:!0});var yQr=s(GB);Zno=r(yQr,"TransfoXLTokenizer"),yQr.forEach(t),eso=r(u3e," (Transformer-XL model)"),u3e.forEach(t),oso=i(S),As=n(S,"LI",{});var c$=s(As);Hte=n(c$,"STRONG",{});var LQr=s(Hte);rso=r(LQr,"visual_bert"),LQr.forEach(t),tso=r(c$," \u2014 "),OB=n(c$,"A",{href:!0});var xQr=s(OB);aso=r(xQr,"BertTokenizer"),xQr.forEach(t),nso=r(c$," or "),VB=n(c$,"A",{href:!0});var $Qr=s(VB);sso=r($Qr,"BertTokenizerFast"),$Qr.forEach(t),lso=r(c$," (VisualBert model)"),c$.forEach(t),iso=i(S),Wg=n(S,"LI",{});var _3e=s(Wg);Ute=n(_3e,"STRONG",{});var kQr=s(Ute);dso=r(kQr,"wav2vec2"),kQr.forEach(t),cso=r(_3e," \u2014 "),XB=n(_3e,"A",{href:!0});var SQr=s(XB);fso=r(SQr,"Wav2Vec2CTCTokenizer"),SQr.forEach(t),mso=r(_3e," (Wav2Vec2 model)"),_3e.forEach(t),gso=i(S),Hg=n(S,"LI",{});var b3e=s(Hg);Jte=n(b3e,"STRONG",{});var RQr=s(Jte);hso=r(RQr,"wav2vec2_phoneme"),RQr.forEach(t),pso=r(b3e," \u2014 "),zB=n(b3e,"A",{href:!0});var BQr=s(zB);uso=r(BQr,"Wav2Vec2PhonemeCTCTokenizer"),BQr.forEach(t),_so=r(b3e," (Wav2Vec2Phoneme model)"),b3e.forEach(t),bso=i(S),ys=n(S,"LI",{});var f$=s(ys);Yte=n(f$,"STRONG",{});var PQr=s(Yte);vso=r(PQr,"xglm"),PQr.forEach(t),Fso=r(f$," \u2014 "),QB=n(f$,"A",{href:!0});var IQr=s(QB);Tso=r(IQr,"XGLMTokenizer"),IQr.forEach(t),Mso=r(f$," or "),WB=n(f$,"A",{href:!0});var qQr=s(WB);Eso=r(qQr,"XGLMTokenizerFast"),qQr.forEach(t),Cso=r(f$," (XGLM model)"),f$.forEach(t),wso=i(S),Ug=n(S,"LI",{});var v3e=s(Ug);Kte=n(v3e,"STRONG",{});var NQr=s(Kte);Aso=r(NQr,"xlm"),NQr.forEach(t),yso=r(v3e," \u2014 "),HB=n(v3e,"A",{href:!0});var jQr=s(HB);Lso=r(jQr,"XLMTokenizer"),jQr.forEach(t),xso=r(v3e," (XLM model)"),v3e.forEach(t),$so=i(S),Jg=n(S,"LI",{});var F3e=s(Jg);Zte=n(F3e,"STRONG",{});var DQr=s(Zte);kso=r(DQr,"xlm-prophetnet"),DQr.forEach(t),Sso=r(F3e," \u2014 "),UB=n(F3e,"A",{href:!0});var GQr=s(UB);Rso=r(GQr,"XLMProphetNetTokenizer"),GQr.forEach(t),Bso=r(F3e," (XLMProphetNet model)"),F3e.forEach(t),Pso=i(S),Ls=n(S,"LI",{});var m$=s(Ls);eae=n(m$,"STRONG",{});var OQr=s(eae);Iso=r(OQr,"xlm-roberta"),OQr.forEach(t),qso=r(m$," \u2014 "),JB=n(m$,"A",{href:!0});var VQr=s(JB);Nso=r(VQr,"XLMRobertaTokenizer"),VQr.forEach(t),jso=r(m$," or "),YB=n(m$,"A",{href:!0});var XQr=s(YB);Dso=r(XQr,"XLMRobertaTokenizerFast"),XQr.forEach(t),Gso=r(m$," (XLM-RoBERTa model)"),m$.forEach(t),Oso=i(S),xs=n(S,"LI",{});var g$=s(xs);oae=n(g$,"STRONG",{});var zQr=s(oae);Vso=r(zQr,"xlm-roberta-xl"),zQr.forEach(t),Xso=r(g$," \u2014 "),KB=n(g$,"A",{href:!0});var QQr=s(KB);zso=r(QQr,"RobertaTokenizer"),QQr.forEach(t),Qso=r(g$," or "),ZB=n(g$,"A",{href:!0});var WQr=s(ZB);Wso=r(WQr,"RobertaTokenizerFast"),WQr.forEach(t),Hso=r(g$," (XLM-RoBERTa-XL model)"),g$.forEach(t),Uso=i(S),$s=n(S,"LI",{});var h$=s($s);rae=n(h$,"STRONG",{});var HQr=s(rae);Jso=r(HQr,"xlnet"),HQr.forEach(t),Yso=r(h$," \u2014 "),eP=n(h$,"A",{href:!0});var UQr=s(eP);Kso=r(UQr,"XLNetTokenizer"),UQr.forEach(t),Zso=r(h$," or "),oP=n(h$,"A",{href:!0});var JQr=s(oP);elo=r(JQr,"XLNetTokenizerFast"),JQr.forEach(t),olo=r(h$," (XLNet model)"),h$.forEach(t),rlo=i(S),ks=n(S,"LI",{});var p$=s(ks);tae=n(p$,"STRONG",{});var YQr=s(tae);tlo=r(YQr,"yoso"),YQr.forEach(t),alo=r(p$," \u2014 "),rP=n(p$,"A",{href:!0});var KQr=s(rP);nlo=r(KQr,"AlbertTokenizer"),KQr.forEach(t),slo=r(p$," or "),tP=n(p$,"A",{href:!0});var ZQr=s(tP);llo=r(ZQr,"AlbertTokenizerFast"),ZQr.forEach(t),ilo=r(p$," (YOSO model)"),p$.forEach(t),S.forEach(t),dlo=i(Is),T(Yg.$$.fragment,Is),Is.forEach(t),clo=i(Ps),Kg=n(Ps,"DIV",{class:!0});var _Ne=s(Kg);T(p6.$$.fragment,_Ne),flo=i(_Ne),aae=n(_Ne,"P",{});var eWr=s(aae);mlo=r(eWr,"Register a new tokenizer in this mapping."),eWr.forEach(t),_Ne.forEach(t),Ps.forEach(t),bIe=i(f),bi=n(f,"H2",{class:!0});var bNe=s(bi);Zg=n(bNe,"A",{id:!0,class:!0,href:!0});var oWr=s(Zg);nae=n(oWr,"SPAN",{});var rWr=s(nae);T(u6.$$.fragment,rWr),rWr.forEach(t),oWr.forEach(t),glo=i(bNe),sae=n(bNe,"SPAN",{});var tWr=s(sae);hlo=r(tWr,"AutoFeatureExtractor"),tWr.forEach(t),bNe.forEach(t),vIe=i(f),Ao=n(f,"DIV",{class:!0});var qs=s(Ao);T(_6.$$.fragment,qs),plo=i(qs),b6=n(qs,"P",{});var vNe=s(b6);ulo=r(vNe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),aP=n(vNe,"A",{href:!0});var aWr=s(aP);_lo=r(aWr,"AutoFeatureExtractor.from_pretrained()"),aWr.forEach(t),blo=r(vNe," class method."),vNe.forEach(t),vlo=i(qs),v6=n(qs,"P",{});var FNe=s(v6);Flo=r(FNe,"This class cannot be instantiated directly using "),lae=n(FNe,"CODE",{});var nWr=s(lae);Tlo=r(nWr,"__init__()"),nWr.forEach(t),Mlo=r(FNe," (throws an error)."),FNe.forEach(t),Elo=i(qs),Qe=n(qs,"DIV",{class:!0});var Yt=s(Qe);T(F6.$$.fragment,Yt),Clo=i(Yt),iae=n(Yt,"P",{});var sWr=s(iae);wlo=r(sWr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),sWr.forEach(t),Alo=i(Yt),wa=n(Yt,"P",{});var aw=s(wa);ylo=r(aw,"The feature extractor class to instantiate is selected based on the "),dae=n(aw,"CODE",{});var lWr=s(dae);Llo=r(lWr,"model_type"),lWr.forEach(t),xlo=r(aw,` property of the config object
(either passed as an argument or loaded from `),cae=n(aw,"CODE",{});var iWr=s(cae);$lo=r(iWr,"pretrained_model_name_or_path"),iWr.forEach(t),klo=r(aw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),fae=n(aw,"CODE",{});var dWr=s(fae);Slo=r(dWr,"pretrained_model_name_or_path"),dWr.forEach(t),Rlo=r(aw,":"),aw.forEach(t),Blo=i(Yt),oe=n(Yt,"UL",{});var ae=s(oe);eh=n(ae,"LI",{});var T3e=s(eh);mae=n(T3e,"STRONG",{});var cWr=s(mae);Plo=r(cWr,"beit"),cWr.forEach(t),Ilo=r(T3e," \u2014 "),nP=n(T3e,"A",{href:!0});var fWr=s(nP);qlo=r(fWr,"BeitFeatureExtractor"),fWr.forEach(t),Nlo=r(T3e," (BEiT model)"),T3e.forEach(t),jlo=i(ae),oh=n(ae,"LI",{});var M3e=s(oh);gae=n(M3e,"STRONG",{});var mWr=s(gae);Dlo=r(mWr,"clip"),mWr.forEach(t),Glo=r(M3e," \u2014 "),sP=n(M3e,"A",{href:!0});var gWr=s(sP);Olo=r(gWr,"CLIPFeatureExtractor"),gWr.forEach(t),Vlo=r(M3e," (CLIP model)"),M3e.forEach(t),Xlo=i(ae),rh=n(ae,"LI",{});var E3e=s(rh);hae=n(E3e,"STRONG",{});var hWr=s(hae);zlo=r(hWr,"convnext"),hWr.forEach(t),Qlo=r(E3e," \u2014 "),lP=n(E3e,"A",{href:!0});var pWr=s(lP);Wlo=r(pWr,"ConvNextFeatureExtractor"),pWr.forEach(t),Hlo=r(E3e," (ConvNext model)"),E3e.forEach(t),Ulo=i(ae),th=n(ae,"LI",{});var C3e=s(th);pae=n(C3e,"STRONG",{});var uWr=s(pae);Jlo=r(uWr,"data2vec-audio"),uWr.forEach(t),Ylo=r(C3e," \u2014 "),iP=n(C3e,"A",{href:!0});var _Wr=s(iP);Klo=r(_Wr,"Wav2Vec2FeatureExtractor"),_Wr.forEach(t),Zlo=r(C3e," (Data2VecAudio model)"),C3e.forEach(t),eio=i(ae),ah=n(ae,"LI",{});var w3e=s(ah);uae=n(w3e,"STRONG",{});var bWr=s(uae);oio=r(bWr,"data2vec-vision"),bWr.forEach(t),rio=r(w3e," \u2014 "),dP=n(w3e,"A",{href:!0});var vWr=s(dP);tio=r(vWr,"BeitFeatureExtractor"),vWr.forEach(t),aio=r(w3e," (Data2VecVision model)"),w3e.forEach(t),nio=i(ae),nh=n(ae,"LI",{});var A3e=s(nh);_ae=n(A3e,"STRONG",{});var FWr=s(_ae);sio=r(FWr,"deit"),FWr.forEach(t),lio=r(A3e," \u2014 "),cP=n(A3e,"A",{href:!0});var TWr=s(cP);iio=r(TWr,"DeiTFeatureExtractor"),TWr.forEach(t),dio=r(A3e," (DeiT model)"),A3e.forEach(t),cio=i(ae),sh=n(ae,"LI",{});var y3e=s(sh);bae=n(y3e,"STRONG",{});var MWr=s(bae);fio=r(MWr,"detr"),MWr.forEach(t),mio=r(y3e," \u2014 "),fP=n(y3e,"A",{href:!0});var EWr=s(fP);gio=r(EWr,"DetrFeatureExtractor"),EWr.forEach(t),hio=r(y3e," (DETR model)"),y3e.forEach(t),pio=i(ae),lh=n(ae,"LI",{});var L3e=s(lh);vae=n(L3e,"STRONG",{});var CWr=s(vae);uio=r(CWr,"dpt"),CWr.forEach(t),_io=r(L3e," \u2014 "),mP=n(L3e,"A",{href:!0});var wWr=s(mP);bio=r(wWr,"DPTFeatureExtractor"),wWr.forEach(t),vio=r(L3e," (DPT model)"),L3e.forEach(t),Fio=i(ae),ih=n(ae,"LI",{});var x3e=s(ih);Fae=n(x3e,"STRONG",{});var AWr=s(Fae);Tio=r(AWr,"flava"),AWr.forEach(t),Mio=r(x3e," \u2014 "),gP=n(x3e,"A",{href:!0});var yWr=s(gP);Eio=r(yWr,"FlavaFeatureExtractor"),yWr.forEach(t),Cio=r(x3e," (Flava model)"),x3e.forEach(t),wio=i(ae),dh=n(ae,"LI",{});var $3e=s(dh);Tae=n($3e,"STRONG",{});var LWr=s(Tae);Aio=r(LWr,"glpn"),LWr.forEach(t),yio=r($3e," \u2014 "),hP=n($3e,"A",{href:!0});var xWr=s(hP);Lio=r(xWr,"GLPNFeatureExtractor"),xWr.forEach(t),xio=r($3e," (GLPN model)"),$3e.forEach(t),$io=i(ae),ch=n(ae,"LI",{});var k3e=s(ch);Mae=n(k3e,"STRONG",{});var $Wr=s(Mae);kio=r($Wr,"hubert"),$Wr.forEach(t),Sio=r(k3e," \u2014 "),pP=n(k3e,"A",{href:!0});var kWr=s(pP);Rio=r(kWr,"Wav2Vec2FeatureExtractor"),kWr.forEach(t),Bio=r(k3e," (Hubert model)"),k3e.forEach(t),Pio=i(ae),fh=n(ae,"LI",{});var S3e=s(fh);Eae=n(S3e,"STRONG",{});var SWr=s(Eae);Iio=r(SWr,"layoutlmv2"),SWr.forEach(t),qio=r(S3e," \u2014 "),uP=n(S3e,"A",{href:!0});var RWr=s(uP);Nio=r(RWr,"LayoutLMv2FeatureExtractor"),RWr.forEach(t),jio=r(S3e," (LayoutLMv2 model)"),S3e.forEach(t),Dio=i(ae),mh=n(ae,"LI",{});var R3e=s(mh);Cae=n(R3e,"STRONG",{});var BWr=s(Cae);Gio=r(BWr,"maskformer"),BWr.forEach(t),Oio=r(R3e," \u2014 "),_P=n(R3e,"A",{href:!0});var PWr=s(_P);Vio=r(PWr,"MaskFormerFeatureExtractor"),PWr.forEach(t),Xio=r(R3e," (MaskFormer model)"),R3e.forEach(t),zio=i(ae),gh=n(ae,"LI",{});var B3e=s(gh);wae=n(B3e,"STRONG",{});var IWr=s(wae);Qio=r(IWr,"perceiver"),IWr.forEach(t),Wio=r(B3e," \u2014 "),bP=n(B3e,"A",{href:!0});var qWr=s(bP);Hio=r(qWr,"PerceiverFeatureExtractor"),qWr.forEach(t),Uio=r(B3e," (Perceiver model)"),B3e.forEach(t),Jio=i(ae),hh=n(ae,"LI",{});var P3e=s(hh);Aae=n(P3e,"STRONG",{});var NWr=s(Aae);Yio=r(NWr,"poolformer"),NWr.forEach(t),Kio=r(P3e," \u2014 "),vP=n(P3e,"A",{href:!0});var jWr=s(vP);Zio=r(jWr,"PoolFormerFeatureExtractor"),jWr.forEach(t),edo=r(P3e," (PoolFormer model)"),P3e.forEach(t),odo=i(ae),ph=n(ae,"LI",{});var I3e=s(ph);yae=n(I3e,"STRONG",{});var DWr=s(yae);rdo=r(DWr,"regnet"),DWr.forEach(t),tdo=r(I3e," \u2014 "),FP=n(I3e,"A",{href:!0});var GWr=s(FP);ado=r(GWr,"ConvNextFeatureExtractor"),GWr.forEach(t),ndo=r(I3e," (RegNet model)"),I3e.forEach(t),sdo=i(ae),uh=n(ae,"LI",{});var q3e=s(uh);Lae=n(q3e,"STRONG",{});var OWr=s(Lae);ldo=r(OWr,"resnet"),OWr.forEach(t),ido=r(q3e," \u2014 "),TP=n(q3e,"A",{href:!0});var VWr=s(TP);ddo=r(VWr,"ConvNextFeatureExtractor"),VWr.forEach(t),cdo=r(q3e," (ResNet model)"),q3e.forEach(t),fdo=i(ae),_h=n(ae,"LI",{});var N3e=s(_h);xae=n(N3e,"STRONG",{});var XWr=s(xae);mdo=r(XWr,"segformer"),XWr.forEach(t),gdo=r(N3e," \u2014 "),MP=n(N3e,"A",{href:!0});var zWr=s(MP);hdo=r(zWr,"SegformerFeatureExtractor"),zWr.forEach(t),pdo=r(N3e," (SegFormer model)"),N3e.forEach(t),udo=i(ae),bh=n(ae,"LI",{});var j3e=s(bh);$ae=n(j3e,"STRONG",{});var QWr=s($ae);_do=r(QWr,"speech_to_text"),QWr.forEach(t),bdo=r(j3e," \u2014 "),EP=n(j3e,"A",{href:!0});var WWr=s(EP);vdo=r(WWr,"Speech2TextFeatureExtractor"),WWr.forEach(t),Fdo=r(j3e," (Speech2Text model)"),j3e.forEach(t),Tdo=i(ae),vh=n(ae,"LI",{});var D3e=s(vh);kae=n(D3e,"STRONG",{});var HWr=s(kae);Mdo=r(HWr,"swin"),HWr.forEach(t),Edo=r(D3e," \u2014 "),CP=n(D3e,"A",{href:!0});var UWr=s(CP);Cdo=r(UWr,"ViTFeatureExtractor"),UWr.forEach(t),wdo=r(D3e," (Swin model)"),D3e.forEach(t),Ado=i(ae),Fh=n(ae,"LI",{});var G3e=s(Fh);Sae=n(G3e,"STRONG",{});var JWr=s(Sae);ydo=r(JWr,"van"),JWr.forEach(t),Ldo=r(G3e," \u2014 "),wP=n(G3e,"A",{href:!0});var YWr=s(wP);xdo=r(YWr,"ConvNextFeatureExtractor"),YWr.forEach(t),$do=r(G3e," (VAN model)"),G3e.forEach(t),kdo=i(ae),Th=n(ae,"LI",{});var O3e=s(Th);Rae=n(O3e,"STRONG",{});var KWr=s(Rae);Sdo=r(KWr,"vit"),KWr.forEach(t),Rdo=r(O3e," \u2014 "),AP=n(O3e,"A",{href:!0});var ZWr=s(AP);Bdo=r(ZWr,"ViTFeatureExtractor"),ZWr.forEach(t),Pdo=r(O3e," (ViT model)"),O3e.forEach(t),Ido=i(ae),Mh=n(ae,"LI",{});var V3e=s(Mh);Bae=n(V3e,"STRONG",{});var eHr=s(Bae);qdo=r(eHr,"vit_mae"),eHr.forEach(t),Ndo=r(V3e," \u2014 "),yP=n(V3e,"A",{href:!0});var oHr=s(yP);jdo=r(oHr,"ViTFeatureExtractor"),oHr.forEach(t),Ddo=r(V3e," (ViTMAE model)"),V3e.forEach(t),Gdo=i(ae),Eh=n(ae,"LI",{});var X3e=s(Eh);Pae=n(X3e,"STRONG",{});var rHr=s(Pae);Odo=r(rHr,"wav2vec2"),rHr.forEach(t),Vdo=r(X3e," \u2014 "),LP=n(X3e,"A",{href:!0});var tHr=s(LP);Xdo=r(tHr,"Wav2Vec2FeatureExtractor"),tHr.forEach(t),zdo=r(X3e," (Wav2Vec2 model)"),X3e.forEach(t),Qdo=i(ae),Ch=n(ae,"LI",{});var z3e=s(Ch);Iae=n(z3e,"STRONG",{});var aHr=s(Iae);Wdo=r(aHr,"yolos"),aHr.forEach(t),Hdo=r(z3e," \u2014 "),xP=n(z3e,"A",{href:!0});var nHr=s(xP);Udo=r(nHr,"YolosFeatureExtractor"),nHr.forEach(t),Jdo=r(z3e," (YOLOS model)"),z3e.forEach(t),ae.forEach(t),Ydo=i(Yt),T(wh.$$.fragment,Yt),Kdo=i(Yt),T(Ah.$$.fragment,Yt),Yt.forEach(t),Zdo=i(qs),yh=n(qs,"DIV",{class:!0});var TNe=s(yh);T(T6.$$.fragment,TNe),eco=i(TNe),qae=n(TNe,"P",{});var sHr=s(qae);oco=r(sHr,"Register a new feature extractor for this class."),sHr.forEach(t),TNe.forEach(t),qs.forEach(t),FIe=i(f),vi=n(f,"H2",{class:!0});var MNe=s(vi);Lh=n(MNe,"A",{id:!0,class:!0,href:!0});var lHr=s(Lh);Nae=n(lHr,"SPAN",{});var iHr=s(Nae);T(M6.$$.fragment,iHr),iHr.forEach(t),lHr.forEach(t),rco=i(MNe),jae=n(MNe,"SPAN",{});var dHr=s(jae);tco=r(dHr,"AutoProcessor"),dHr.forEach(t),MNe.forEach(t),TIe=i(f),yo=n(f,"DIV",{class:!0});var Ns=s(yo);T(E6.$$.fragment,Ns),aco=i(Ns),C6=n(Ns,"P",{});var ENe=s(C6);nco=r(ENe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),$P=n(ENe,"A",{href:!0});var cHr=s($P);sco=r(cHr,"AutoProcessor.from_pretrained()"),cHr.forEach(t),lco=r(ENe," class method."),ENe.forEach(t),ico=i(Ns),w6=n(Ns,"P",{});var CNe=s(w6);dco=r(CNe,"This class cannot be instantiated directly using "),Dae=n(CNe,"CODE",{});var fHr=s(Dae);cco=r(fHr,"__init__()"),fHr.forEach(t),fco=r(CNe," (throws an error)."),CNe.forEach(t),mco=i(Ns),We=n(Ns,"DIV",{class:!0});var Kt=s(We);T(A6.$$.fragment,Kt),gco=i(Kt),Gae=n(Kt,"P",{});var mHr=s(Gae);hco=r(mHr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),mHr.forEach(t),pco=i(Kt),Fi=n(Kt,"P",{});var _K=s(Fi);uco=r(_K,"The processor class to instantiate is selected based on the "),Oae=n(_K,"CODE",{});var gHr=s(Oae);_co=r(gHr,"model_type"),gHr.forEach(t),bco=r(_K,` property of the config object (either
passed as an argument or loaded from `),Vae=n(_K,"CODE",{});var hHr=s(Vae);vco=r(hHr,"pretrained_model_name_or_path"),hHr.forEach(t),Fco=r(_K," if possible):"),_K.forEach(t),Tco=i(Kt),be=n(Kt,"UL",{});var ve=s(be);xh=n(ve,"LI",{});var Q3e=s(xh);Xae=n(Q3e,"STRONG",{});var pHr=s(Xae);Mco=r(pHr,"clip"),pHr.forEach(t),Eco=r(Q3e," \u2014 "),kP=n(Q3e,"A",{href:!0});var uHr=s(kP);Cco=r(uHr,"CLIPProcessor"),uHr.forEach(t),wco=r(Q3e," (CLIP model)"),Q3e.forEach(t),Aco=i(ve),$h=n(ve,"LI",{});var W3e=s($h);zae=n(W3e,"STRONG",{});var _Hr=s(zae);yco=r(_Hr,"flava"),_Hr.forEach(t),Lco=r(W3e," \u2014 "),Qae=n(W3e,"CODE",{});var bHr=s(Qae);xco=r(bHr,"FLAVAProcessor"),bHr.forEach(t),$co=r(W3e," (Flava model)"),W3e.forEach(t),kco=i(ve),kh=n(ve,"LI",{});var H3e=s(kh);Wae=n(H3e,"STRONG",{});var vHr=s(Wae);Sco=r(vHr,"layoutlmv2"),vHr.forEach(t),Rco=r(H3e," \u2014 "),SP=n(H3e,"A",{href:!0});var FHr=s(SP);Bco=r(FHr,"LayoutLMv2Processor"),FHr.forEach(t),Pco=r(H3e," (LayoutLMv2 model)"),H3e.forEach(t),Ico=i(ve),Sh=n(ve,"LI",{});var U3e=s(Sh);Hae=n(U3e,"STRONG",{});var THr=s(Hae);qco=r(THr,"layoutxlm"),THr.forEach(t),Nco=r(U3e," \u2014 "),RP=n(U3e,"A",{href:!0});var MHr=s(RP);jco=r(MHr,"LayoutXLMProcessor"),MHr.forEach(t),Dco=r(U3e," (LayoutXLM model)"),U3e.forEach(t),Gco=i(ve),Rh=n(ve,"LI",{});var J3e=s(Rh);Uae=n(J3e,"STRONG",{});var EHr=s(Uae);Oco=r(EHr,"sew"),EHr.forEach(t),Vco=r(J3e," \u2014 "),BP=n(J3e,"A",{href:!0});var CHr=s(BP);Xco=r(CHr,"Wav2Vec2Processor"),CHr.forEach(t),zco=r(J3e," (SEW model)"),J3e.forEach(t),Qco=i(ve),Bh=n(ve,"LI",{});var Y3e=s(Bh);Jae=n(Y3e,"STRONG",{});var wHr=s(Jae);Wco=r(wHr,"sew-d"),wHr.forEach(t),Hco=r(Y3e," \u2014 "),PP=n(Y3e,"A",{href:!0});var AHr=s(PP);Uco=r(AHr,"Wav2Vec2Processor"),AHr.forEach(t),Jco=r(Y3e," (SEW-D model)"),Y3e.forEach(t),Yco=i(ve),Ph=n(ve,"LI",{});var K3e=s(Ph);Yae=n(K3e,"STRONG",{});var yHr=s(Yae);Kco=r(yHr,"speech_to_text"),yHr.forEach(t),Zco=r(K3e," \u2014 "),IP=n(K3e,"A",{href:!0});var LHr=s(IP);efo=r(LHr,"Speech2TextProcessor"),LHr.forEach(t),ofo=r(K3e," (Speech2Text model)"),K3e.forEach(t),rfo=i(ve),Ih=n(ve,"LI",{});var Z3e=s(Ih);Kae=n(Z3e,"STRONG",{});var xHr=s(Kae);tfo=r(xHr,"speech_to_text_2"),xHr.forEach(t),afo=r(Z3e," \u2014 "),qP=n(Z3e,"A",{href:!0});var $Hr=s(qP);nfo=r($Hr,"Speech2Text2Processor"),$Hr.forEach(t),sfo=r(Z3e," (Speech2Text2 model)"),Z3e.forEach(t),lfo=i(ve),qh=n(ve,"LI",{});var ewe=s(qh);Zae=n(ewe,"STRONG",{});var kHr=s(Zae);ifo=r(kHr,"trocr"),kHr.forEach(t),dfo=r(ewe," \u2014 "),NP=n(ewe,"A",{href:!0});var SHr=s(NP);cfo=r(SHr,"TrOCRProcessor"),SHr.forEach(t),ffo=r(ewe," (TrOCR model)"),ewe.forEach(t),mfo=i(ve),Nh=n(ve,"LI",{});var owe=s(Nh);ene=n(owe,"STRONG",{});var RHr=s(ene);gfo=r(RHr,"unispeech"),RHr.forEach(t),hfo=r(owe," \u2014 "),jP=n(owe,"A",{href:!0});var BHr=s(jP);pfo=r(BHr,"Wav2Vec2Processor"),BHr.forEach(t),ufo=r(owe," (UniSpeech model)"),owe.forEach(t),_fo=i(ve),jh=n(ve,"LI",{});var rwe=s(jh);one=n(rwe,"STRONG",{});var PHr=s(one);bfo=r(PHr,"unispeech-sat"),PHr.forEach(t),vfo=r(rwe," \u2014 "),DP=n(rwe,"A",{href:!0});var IHr=s(DP);Ffo=r(IHr,"Wav2Vec2Processor"),IHr.forEach(t),Tfo=r(rwe," (UniSpeechSat model)"),rwe.forEach(t),Mfo=i(ve),Dh=n(ve,"LI",{});var twe=s(Dh);rne=n(twe,"STRONG",{});var qHr=s(rne);Efo=r(qHr,"vilt"),qHr.forEach(t),Cfo=r(twe," \u2014 "),GP=n(twe,"A",{href:!0});var NHr=s(GP);wfo=r(NHr,"ViltProcessor"),NHr.forEach(t),Afo=r(twe," (ViLT model)"),twe.forEach(t),yfo=i(ve),Gh=n(ve,"LI",{});var awe=s(Gh);tne=n(awe,"STRONG",{});var jHr=s(tne);Lfo=r(jHr,"vision-text-dual-encoder"),jHr.forEach(t),xfo=r(awe," \u2014 "),OP=n(awe,"A",{href:!0});var DHr=s(OP);$fo=r(DHr,"VisionTextDualEncoderProcessor"),DHr.forEach(t),kfo=r(awe," (VisionTextDualEncoder model)"),awe.forEach(t),Sfo=i(ve),Oh=n(ve,"LI",{});var nwe=s(Oh);ane=n(nwe,"STRONG",{});var GHr=s(ane);Rfo=r(GHr,"wav2vec2"),GHr.forEach(t),Bfo=r(nwe," \u2014 "),VP=n(nwe,"A",{href:!0});var OHr=s(VP);Pfo=r(OHr,"Wav2Vec2Processor"),OHr.forEach(t),Ifo=r(nwe," (Wav2Vec2 model)"),nwe.forEach(t),qfo=i(ve),Vh=n(ve,"LI",{});var swe=s(Vh);nne=n(swe,"STRONG",{});var VHr=s(nne);Nfo=r(VHr,"wavlm"),VHr.forEach(t),jfo=r(swe," \u2014 "),XP=n(swe,"A",{href:!0});var XHr=s(XP);Dfo=r(XHr,"Wav2Vec2Processor"),XHr.forEach(t),Gfo=r(swe," (WavLM model)"),swe.forEach(t),ve.forEach(t),Ofo=i(Kt),T(Xh.$$.fragment,Kt),Vfo=i(Kt),T(zh.$$.fragment,Kt),Kt.forEach(t),Xfo=i(Ns),Qh=n(Ns,"DIV",{class:!0});var wNe=s(Qh);T(y6.$$.fragment,wNe),zfo=i(wNe),sne=n(wNe,"P",{});var zHr=s(sne);Qfo=r(zHr,"Register a new processor for this class."),zHr.forEach(t),wNe.forEach(t),Ns.forEach(t),MIe=i(f),Ti=n(f,"H2",{class:!0});var ANe=s(Ti);Wh=n(ANe,"A",{id:!0,class:!0,href:!0});var QHr=s(Wh);lne=n(QHr,"SPAN",{});var WHr=s(lne);T(L6.$$.fragment,WHr),WHr.forEach(t),QHr.forEach(t),Wfo=i(ANe),ine=n(ANe,"SPAN",{});var HHr=s(ine);Hfo=r(HHr,"AutoModel"),HHr.forEach(t),ANe.forEach(t),EIe=i(f),Lo=n(f,"DIV",{class:!0});var js=s(Lo);T(x6.$$.fragment,js),Ufo=i(js),Mi=n(js,"P",{});var bK=s(Mi);Jfo=r(bK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zP=n(bK,"A",{href:!0});var UHr=s(zP);Yfo=r(UHr,"from_pretrained()"),UHr.forEach(t),Kfo=r(bK," class method or the "),QP=n(bK,"A",{href:!0});var JHr=s(QP);Zfo=r(JHr,"from_config()"),JHr.forEach(t),emo=r(bK,` class
method.`),bK.forEach(t),omo=i(js),$6=n(js,"P",{});var yNe=s($6);rmo=r(yNe,"This class cannot be instantiated directly using "),dne=n(yNe,"CODE",{});var YHr=s(dne);tmo=r(YHr,"__init__()"),YHr.forEach(t),amo=r(yNe," (throws an error)."),yNe.forEach(t),nmo=i(js),ot=n(js,"DIV",{class:!0});var nw=s(ot);T(k6.$$.fragment,nw),smo=i(nw),cne=n(nw,"P",{});var KHr=s(cne);lmo=r(KHr,"Instantiates one of the base model classes of the library from a configuration."),KHr.forEach(t),imo=i(nw),Ei=n(nw,"P",{});var vK=s(Ei);dmo=r(vK,`Note:
Loading a model from its configuration file does `),fne=n(vK,"STRONG",{});var ZHr=s(fne);cmo=r(ZHr,"not"),ZHr.forEach(t),fmo=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),WP=n(vK,"A",{href:!0});var eUr=s(WP);mmo=r(eUr,"from_pretrained()"),eUr.forEach(t),gmo=r(vK," to load the model weights."),vK.forEach(t),hmo=i(nw),T(Hh.$$.fragment,nw),nw.forEach(t),pmo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(S6.$$.fragment,Zt),umo=i(Zt),mne=n(Zt,"P",{});var oUr=s(mne);_mo=r(oUr,"Instantiate one of the base model classes of the library from a pretrained model."),oUr.forEach(t),bmo=i(Zt),Aa=n(Zt,"P",{});var sw=s(Aa);vmo=r(sw,"The model class to instantiate is selected based on the "),gne=n(sw,"CODE",{});var rUr=s(gne);Fmo=r(rUr,"model_type"),rUr.forEach(t),Tmo=r(sw,` property of the config object (either
passed as an argument or loaded from `),hne=n(sw,"CODE",{});var tUr=s(hne);Mmo=r(tUr,"pretrained_model_name_or_path"),tUr.forEach(t),Emo=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pne=n(sw,"CODE",{});var aUr=s(pne);Cmo=r(aUr,"pretrained_model_name_or_path"),aUr.forEach(t),wmo=r(sw,":"),sw.forEach(t),Amo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Uh=n($,"LI",{});var lwe=s(Uh);une=n(lwe,"STRONG",{});var nUr=s(une);ymo=r(nUr,"albert"),nUr.forEach(t),Lmo=r(lwe," \u2014 "),HP=n(lwe,"A",{href:!0});var sUr=s(HP);xmo=r(sUr,"AlbertModel"),sUr.forEach(t),$mo=r(lwe," (ALBERT model)"),lwe.forEach(t),kmo=i($),Jh=n($,"LI",{});var iwe=s(Jh);_ne=n(iwe,"STRONG",{});var lUr=s(_ne);Smo=r(lUr,"bart"),lUr.forEach(t),Rmo=r(iwe," \u2014 "),UP=n(iwe,"A",{href:!0});var iUr=s(UP);Bmo=r(iUr,"BartModel"),iUr.forEach(t),Pmo=r(iwe," (BART model)"),iwe.forEach(t),Imo=i($),Yh=n($,"LI",{});var dwe=s(Yh);bne=n(dwe,"STRONG",{});var dUr=s(bne);qmo=r(dUr,"beit"),dUr.forEach(t),Nmo=r(dwe," \u2014 "),JP=n(dwe,"A",{href:!0});var cUr=s(JP);jmo=r(cUr,"BeitModel"),cUr.forEach(t),Dmo=r(dwe," (BEiT model)"),dwe.forEach(t),Gmo=i($),Kh=n($,"LI",{});var cwe=s(Kh);vne=n(cwe,"STRONG",{});var fUr=s(vne);Omo=r(fUr,"bert"),fUr.forEach(t),Vmo=r(cwe," \u2014 "),YP=n(cwe,"A",{href:!0});var mUr=s(YP);Xmo=r(mUr,"BertModel"),mUr.forEach(t),zmo=r(cwe," (BERT model)"),cwe.forEach(t),Qmo=i($),Zh=n($,"LI",{});var fwe=s(Zh);Fne=n(fwe,"STRONG",{});var gUr=s(Fne);Wmo=r(gUr,"bert-generation"),gUr.forEach(t),Hmo=r(fwe," \u2014 "),KP=n(fwe,"A",{href:!0});var hUr=s(KP);Umo=r(hUr,"BertGenerationEncoder"),hUr.forEach(t),Jmo=r(fwe," (Bert Generation model)"),fwe.forEach(t),Ymo=i($),ep=n($,"LI",{});var mwe=s(ep);Tne=n(mwe,"STRONG",{});var pUr=s(Tne);Kmo=r(pUr,"big_bird"),pUr.forEach(t),Zmo=r(mwe," \u2014 "),ZP=n(mwe,"A",{href:!0});var uUr=s(ZP);ego=r(uUr,"BigBirdModel"),uUr.forEach(t),ogo=r(mwe," (BigBird model)"),mwe.forEach(t),rgo=i($),op=n($,"LI",{});var gwe=s(op);Mne=n(gwe,"STRONG",{});var _Ur=s(Mne);tgo=r(_Ur,"bigbird_pegasus"),_Ur.forEach(t),ago=r(gwe," \u2014 "),eI=n(gwe,"A",{href:!0});var bUr=s(eI);ngo=r(bUr,"BigBirdPegasusModel"),bUr.forEach(t),sgo=r(gwe," (BigBirdPegasus model)"),gwe.forEach(t),lgo=i($),rp=n($,"LI",{});var hwe=s(rp);Ene=n(hwe,"STRONG",{});var vUr=s(Ene);igo=r(vUr,"blenderbot"),vUr.forEach(t),dgo=r(hwe," \u2014 "),oI=n(hwe,"A",{href:!0});var FUr=s(oI);cgo=r(FUr,"BlenderbotModel"),FUr.forEach(t),fgo=r(hwe," (Blenderbot model)"),hwe.forEach(t),mgo=i($),tp=n($,"LI",{});var pwe=s(tp);Cne=n(pwe,"STRONG",{});var TUr=s(Cne);ggo=r(TUr,"blenderbot-small"),TUr.forEach(t),hgo=r(pwe," \u2014 "),rI=n(pwe,"A",{href:!0});var MUr=s(rI);pgo=r(MUr,"BlenderbotSmallModel"),MUr.forEach(t),ugo=r(pwe," (BlenderbotSmall model)"),pwe.forEach(t),_go=i($),ap=n($,"LI",{});var uwe=s(ap);wne=n(uwe,"STRONG",{});var EUr=s(wne);bgo=r(EUr,"bloom"),EUr.forEach(t),vgo=r(uwe," \u2014 "),tI=n(uwe,"A",{href:!0});var CUr=s(tI);Fgo=r(CUr,"BLOOMModel"),CUr.forEach(t),Tgo=r(uwe," (BLOOM model)"),uwe.forEach(t),Mgo=i($),np=n($,"LI",{});var _we=s(np);Ane=n(_we,"STRONG",{});var wUr=s(Ane);Ego=r(wUr,"camembert"),wUr.forEach(t),Cgo=r(_we," \u2014 "),aI=n(_we,"A",{href:!0});var AUr=s(aI);wgo=r(AUr,"CamembertModel"),AUr.forEach(t),Ago=r(_we," (CamemBERT model)"),_we.forEach(t),ygo=i($),sp=n($,"LI",{});var bwe=s(sp);yne=n(bwe,"STRONG",{});var yUr=s(yne);Lgo=r(yUr,"canine"),yUr.forEach(t),xgo=r(bwe," \u2014 "),nI=n(bwe,"A",{href:!0});var LUr=s(nI);$go=r(LUr,"CanineModel"),LUr.forEach(t),kgo=r(bwe," (Canine model)"),bwe.forEach(t),Sgo=i($),lp=n($,"LI",{});var vwe=s(lp);Lne=n(vwe,"STRONG",{});var xUr=s(Lne);Rgo=r(xUr,"clip"),xUr.forEach(t),Bgo=r(vwe," \u2014 "),sI=n(vwe,"A",{href:!0});var $Ur=s(sI);Pgo=r($Ur,"CLIPModel"),$Ur.forEach(t),Igo=r(vwe," (CLIP model)"),vwe.forEach(t),qgo=i($),ip=n($,"LI",{});var Fwe=s(ip);xne=n(Fwe,"STRONG",{});var kUr=s(xne);Ngo=r(kUr,"convbert"),kUr.forEach(t),jgo=r(Fwe," \u2014 "),lI=n(Fwe,"A",{href:!0});var SUr=s(lI);Dgo=r(SUr,"ConvBertModel"),SUr.forEach(t),Ggo=r(Fwe," (ConvBERT model)"),Fwe.forEach(t),Ogo=i($),dp=n($,"LI",{});var Twe=s(dp);$ne=n(Twe,"STRONG",{});var RUr=s($ne);Vgo=r(RUr,"convnext"),RUr.forEach(t),Xgo=r(Twe," \u2014 "),iI=n(Twe,"A",{href:!0});var BUr=s(iI);zgo=r(BUr,"ConvNextModel"),BUr.forEach(t),Qgo=r(Twe," (ConvNext model)"),Twe.forEach(t),Wgo=i($),cp=n($,"LI",{});var Mwe=s(cp);kne=n(Mwe,"STRONG",{});var PUr=s(kne);Hgo=r(PUr,"ctrl"),PUr.forEach(t),Ugo=r(Mwe," \u2014 "),dI=n(Mwe,"A",{href:!0});var IUr=s(dI);Jgo=r(IUr,"CTRLModel"),IUr.forEach(t),Ygo=r(Mwe," (CTRL model)"),Mwe.forEach(t),Kgo=i($),fp=n($,"LI",{});var Ewe=s(fp);Sne=n(Ewe,"STRONG",{});var qUr=s(Sne);Zgo=r(qUr,"data2vec-audio"),qUr.forEach(t),eho=r(Ewe," \u2014 "),cI=n(Ewe,"A",{href:!0});var NUr=s(cI);oho=r(NUr,"Data2VecAudioModel"),NUr.forEach(t),rho=r(Ewe," (Data2VecAudio model)"),Ewe.forEach(t),tho=i($),mp=n($,"LI",{});var Cwe=s(mp);Rne=n(Cwe,"STRONG",{});var jUr=s(Rne);aho=r(jUr,"data2vec-text"),jUr.forEach(t),nho=r(Cwe," \u2014 "),fI=n(Cwe,"A",{href:!0});var DUr=s(fI);sho=r(DUr,"Data2VecTextModel"),DUr.forEach(t),lho=r(Cwe," (Data2VecText model)"),Cwe.forEach(t),iho=i($),gp=n($,"LI",{});var wwe=s(gp);Bne=n(wwe,"STRONG",{});var GUr=s(Bne);dho=r(GUr,"data2vec-vision"),GUr.forEach(t),cho=r(wwe," \u2014 "),mI=n(wwe,"A",{href:!0});var OUr=s(mI);fho=r(OUr,"Data2VecVisionModel"),OUr.forEach(t),mho=r(wwe," (Data2VecVision model)"),wwe.forEach(t),gho=i($),hp=n($,"LI",{});var Awe=s(hp);Pne=n(Awe,"STRONG",{});var VUr=s(Pne);hho=r(VUr,"deberta"),VUr.forEach(t),pho=r(Awe," \u2014 "),gI=n(Awe,"A",{href:!0});var XUr=s(gI);uho=r(XUr,"DebertaModel"),XUr.forEach(t),_ho=r(Awe," (DeBERTa model)"),Awe.forEach(t),bho=i($),pp=n($,"LI",{});var ywe=s(pp);Ine=n(ywe,"STRONG",{});var zUr=s(Ine);vho=r(zUr,"deberta-v2"),zUr.forEach(t),Fho=r(ywe," \u2014 "),hI=n(ywe,"A",{href:!0});var QUr=s(hI);Tho=r(QUr,"DebertaV2Model"),QUr.forEach(t),Mho=r(ywe," (DeBERTa-v2 model)"),ywe.forEach(t),Eho=i($),up=n($,"LI",{});var Lwe=s(up);qne=n(Lwe,"STRONG",{});var WUr=s(qne);Cho=r(WUr,"decision_transformer"),WUr.forEach(t),who=r(Lwe," \u2014 "),pI=n(Lwe,"A",{href:!0});var HUr=s(pI);Aho=r(HUr,"DecisionTransformerModel"),HUr.forEach(t),yho=r(Lwe," (Decision Transformer model)"),Lwe.forEach(t),Lho=i($),_p=n($,"LI",{});var xwe=s(_p);Nne=n(xwe,"STRONG",{});var UUr=s(Nne);xho=r(UUr,"deit"),UUr.forEach(t),$ho=r(xwe," \u2014 "),uI=n(xwe,"A",{href:!0});var JUr=s(uI);kho=r(JUr,"DeiTModel"),JUr.forEach(t),Sho=r(xwe," (DeiT model)"),xwe.forEach(t),Rho=i($),bp=n($,"LI",{});var $we=s(bp);jne=n($we,"STRONG",{});var YUr=s(jne);Bho=r(YUr,"detr"),YUr.forEach(t),Pho=r($we," \u2014 "),_I=n($we,"A",{href:!0});var KUr=s(_I);Iho=r(KUr,"DetrModel"),KUr.forEach(t),qho=r($we," (DETR model)"),$we.forEach(t),Nho=i($),vp=n($,"LI",{});var kwe=s(vp);Dne=n(kwe,"STRONG",{});var ZUr=s(Dne);jho=r(ZUr,"distilbert"),ZUr.forEach(t),Dho=r(kwe," \u2014 "),bI=n(kwe,"A",{href:!0});var eJr=s(bI);Gho=r(eJr,"DistilBertModel"),eJr.forEach(t),Oho=r(kwe," (DistilBERT model)"),kwe.forEach(t),Vho=i($),Fp=n($,"LI",{});var Swe=s(Fp);Gne=n(Swe,"STRONG",{});var oJr=s(Gne);Xho=r(oJr,"dpr"),oJr.forEach(t),zho=r(Swe," \u2014 "),vI=n(Swe,"A",{href:!0});var rJr=s(vI);Qho=r(rJr,"DPRQuestionEncoder"),rJr.forEach(t),Who=r(Swe," (DPR model)"),Swe.forEach(t),Hho=i($),Tp=n($,"LI",{});var Rwe=s(Tp);One=n(Rwe,"STRONG",{});var tJr=s(One);Uho=r(tJr,"dpt"),tJr.forEach(t),Jho=r(Rwe," \u2014 "),FI=n(Rwe,"A",{href:!0});var aJr=s(FI);Yho=r(aJr,"DPTModel"),aJr.forEach(t),Kho=r(Rwe," (DPT model)"),Rwe.forEach(t),Zho=i($),Mp=n($,"LI",{});var Bwe=s(Mp);Vne=n(Bwe,"STRONG",{});var nJr=s(Vne);epo=r(nJr,"electra"),nJr.forEach(t),opo=r(Bwe," \u2014 "),TI=n(Bwe,"A",{href:!0});var sJr=s(TI);rpo=r(sJr,"ElectraModel"),sJr.forEach(t),tpo=r(Bwe," (ELECTRA model)"),Bwe.forEach(t),apo=i($),Ep=n($,"LI",{});var Pwe=s(Ep);Xne=n(Pwe,"STRONG",{});var lJr=s(Xne);npo=r(lJr,"flaubert"),lJr.forEach(t),spo=r(Pwe," \u2014 "),MI=n(Pwe,"A",{href:!0});var iJr=s(MI);lpo=r(iJr,"FlaubertModel"),iJr.forEach(t),ipo=r(Pwe," (FlauBERT model)"),Pwe.forEach(t),dpo=i($),Cp=n($,"LI",{});var Iwe=s(Cp);zne=n(Iwe,"STRONG",{});var dJr=s(zne);cpo=r(dJr,"flava"),dJr.forEach(t),fpo=r(Iwe," \u2014 "),EI=n(Iwe,"A",{href:!0});var cJr=s(EI);mpo=r(cJr,"FlavaModel"),cJr.forEach(t),gpo=r(Iwe," (Flava model)"),Iwe.forEach(t),hpo=i($),wp=n($,"LI",{});var qwe=s(wp);Qne=n(qwe,"STRONG",{});var fJr=s(Qne);ppo=r(fJr,"fnet"),fJr.forEach(t),upo=r(qwe," \u2014 "),CI=n(qwe,"A",{href:!0});var mJr=s(CI);_po=r(mJr,"FNetModel"),mJr.forEach(t),bpo=r(qwe," (FNet model)"),qwe.forEach(t),vpo=i($),Ap=n($,"LI",{});var Nwe=s(Ap);Wne=n(Nwe,"STRONG",{});var gJr=s(Wne);Fpo=r(gJr,"fsmt"),gJr.forEach(t),Tpo=r(Nwe," \u2014 "),wI=n(Nwe,"A",{href:!0});var hJr=s(wI);Mpo=r(hJr,"FSMTModel"),hJr.forEach(t),Epo=r(Nwe," (FairSeq Machine-Translation model)"),Nwe.forEach(t),Cpo=i($),Ss=n($,"LI",{});var u$=s(Ss);Hne=n(u$,"STRONG",{});var pJr=s(Hne);wpo=r(pJr,"funnel"),pJr.forEach(t),Apo=r(u$," \u2014 "),AI=n(u$,"A",{href:!0});var uJr=s(AI);ypo=r(uJr,"FunnelModel"),uJr.forEach(t),Lpo=r(u$," or "),yI=n(u$,"A",{href:!0});var _Jr=s(yI);xpo=r(_Jr,"FunnelBaseModel"),_Jr.forEach(t),$po=r(u$," (Funnel Transformer model)"),u$.forEach(t),kpo=i($),yp=n($,"LI",{});var jwe=s(yp);Une=n(jwe,"STRONG",{});var bJr=s(Une);Spo=r(bJr,"glpn"),bJr.forEach(t),Rpo=r(jwe," \u2014 "),LI=n(jwe,"A",{href:!0});var vJr=s(LI);Bpo=r(vJr,"GLPNModel"),vJr.forEach(t),Ppo=r(jwe," (GLPN model)"),jwe.forEach(t),Ipo=i($),Lp=n($,"LI",{});var Dwe=s(Lp);Jne=n(Dwe,"STRONG",{});var FJr=s(Jne);qpo=r(FJr,"gpt2"),FJr.forEach(t),Npo=r(Dwe," \u2014 "),xI=n(Dwe,"A",{href:!0});var TJr=s(xI);jpo=r(TJr,"GPT2Model"),TJr.forEach(t),Dpo=r(Dwe," (OpenAI GPT-2 model)"),Dwe.forEach(t),Gpo=i($),xp=n($,"LI",{});var Gwe=s(xp);Yne=n(Gwe,"STRONG",{});var MJr=s(Yne);Opo=r(MJr,"gpt_neo"),MJr.forEach(t),Vpo=r(Gwe," \u2014 "),$I=n(Gwe,"A",{href:!0});var EJr=s($I);Xpo=r(EJr,"GPTNeoModel"),EJr.forEach(t),zpo=r(Gwe," (GPT Neo model)"),Gwe.forEach(t),Qpo=i($),$p=n($,"LI",{});var Owe=s($p);Kne=n(Owe,"STRONG",{});var CJr=s(Kne);Wpo=r(CJr,"gptj"),CJr.forEach(t),Hpo=r(Owe," \u2014 "),kI=n(Owe,"A",{href:!0});var wJr=s(kI);Upo=r(wJr,"GPTJModel"),wJr.forEach(t),Jpo=r(Owe," (GPT-J model)"),Owe.forEach(t),Ypo=i($),kp=n($,"LI",{});var Vwe=s(kp);Zne=n(Vwe,"STRONG",{});var AJr=s(Zne);Kpo=r(AJr,"hubert"),AJr.forEach(t),Zpo=r(Vwe," \u2014 "),SI=n(Vwe,"A",{href:!0});var yJr=s(SI);euo=r(yJr,"HubertModel"),yJr.forEach(t),ouo=r(Vwe," (Hubert model)"),Vwe.forEach(t),ruo=i($),Sp=n($,"LI",{});var Xwe=s(Sp);ese=n(Xwe,"STRONG",{});var LJr=s(ese);tuo=r(LJr,"ibert"),LJr.forEach(t),auo=r(Xwe," \u2014 "),RI=n(Xwe,"A",{href:!0});var xJr=s(RI);nuo=r(xJr,"IBertModel"),xJr.forEach(t),suo=r(Xwe," (I-BERT model)"),Xwe.forEach(t),luo=i($),Rp=n($,"LI",{});var zwe=s(Rp);ose=n(zwe,"STRONG",{});var $Jr=s(ose);iuo=r($Jr,"imagegpt"),$Jr.forEach(t),duo=r(zwe," \u2014 "),BI=n(zwe,"A",{href:!0});var kJr=s(BI);cuo=r(kJr,"ImageGPTModel"),kJr.forEach(t),fuo=r(zwe," (ImageGPT model)"),zwe.forEach(t),muo=i($),Bp=n($,"LI",{});var Qwe=s(Bp);rse=n(Qwe,"STRONG",{});var SJr=s(rse);guo=r(SJr,"layoutlm"),SJr.forEach(t),huo=r(Qwe," \u2014 "),PI=n(Qwe,"A",{href:!0});var RJr=s(PI);puo=r(RJr,"LayoutLMModel"),RJr.forEach(t),uuo=r(Qwe," (LayoutLM model)"),Qwe.forEach(t),_uo=i($),Pp=n($,"LI",{});var Wwe=s(Pp);tse=n(Wwe,"STRONG",{});var BJr=s(tse);buo=r(BJr,"layoutlmv2"),BJr.forEach(t),vuo=r(Wwe," \u2014 "),II=n(Wwe,"A",{href:!0});var PJr=s(II);Fuo=r(PJr,"LayoutLMv2Model"),PJr.forEach(t),Tuo=r(Wwe," (LayoutLMv2 model)"),Wwe.forEach(t),Muo=i($),Ip=n($,"LI",{});var Hwe=s(Ip);ase=n(Hwe,"STRONG",{});var IJr=s(ase);Euo=r(IJr,"led"),IJr.forEach(t),Cuo=r(Hwe," \u2014 "),qI=n(Hwe,"A",{href:!0});var qJr=s(qI);wuo=r(qJr,"LEDModel"),qJr.forEach(t),Auo=r(Hwe," (LED model)"),Hwe.forEach(t),yuo=i($),qp=n($,"LI",{});var Uwe=s(qp);nse=n(Uwe,"STRONG",{});var NJr=s(nse);Luo=r(NJr,"longformer"),NJr.forEach(t),xuo=r(Uwe," \u2014 "),NI=n(Uwe,"A",{href:!0});var jJr=s(NI);$uo=r(jJr,"LongformerModel"),jJr.forEach(t),kuo=r(Uwe," (Longformer model)"),Uwe.forEach(t),Suo=i($),Np=n($,"LI",{});var Jwe=s(Np);sse=n(Jwe,"STRONG",{});var DJr=s(sse);Ruo=r(DJr,"luke"),DJr.forEach(t),Buo=r(Jwe," \u2014 "),jI=n(Jwe,"A",{href:!0});var GJr=s(jI);Puo=r(GJr,"LukeModel"),GJr.forEach(t),Iuo=r(Jwe," (LUKE model)"),Jwe.forEach(t),quo=i($),jp=n($,"LI",{});var Ywe=s(jp);lse=n(Ywe,"STRONG",{});var OJr=s(lse);Nuo=r(OJr,"lxmert"),OJr.forEach(t),juo=r(Ywe," \u2014 "),DI=n(Ywe,"A",{href:!0});var VJr=s(DI);Duo=r(VJr,"LxmertModel"),VJr.forEach(t),Guo=r(Ywe," (LXMERT model)"),Ywe.forEach(t),Ouo=i($),Dp=n($,"LI",{});var Kwe=s(Dp);ise=n(Kwe,"STRONG",{});var XJr=s(ise);Vuo=r(XJr,"m2m_100"),XJr.forEach(t),Xuo=r(Kwe," \u2014 "),GI=n(Kwe,"A",{href:!0});var zJr=s(GI);zuo=r(zJr,"M2M100Model"),zJr.forEach(t),Quo=r(Kwe," (M2M100 model)"),Kwe.forEach(t),Wuo=i($),Gp=n($,"LI",{});var Zwe=s(Gp);dse=n(Zwe,"STRONG",{});var QJr=s(dse);Huo=r(QJr,"marian"),QJr.forEach(t),Uuo=r(Zwe," \u2014 "),OI=n(Zwe,"A",{href:!0});var WJr=s(OI);Juo=r(WJr,"MarianModel"),WJr.forEach(t),Yuo=r(Zwe," (Marian model)"),Zwe.forEach(t),Kuo=i($),Op=n($,"LI",{});var eAe=s(Op);cse=n(eAe,"STRONG",{});var HJr=s(cse);Zuo=r(HJr,"maskformer"),HJr.forEach(t),e_o=r(eAe," \u2014 "),VI=n(eAe,"A",{href:!0});var UJr=s(VI);o_o=r(UJr,"MaskFormerModel"),UJr.forEach(t),r_o=r(eAe," (MaskFormer model)"),eAe.forEach(t),t_o=i($),Vp=n($,"LI",{});var oAe=s(Vp);fse=n(oAe,"STRONG",{});var JJr=s(fse);a_o=r(JJr,"mbart"),JJr.forEach(t),n_o=r(oAe," \u2014 "),XI=n(oAe,"A",{href:!0});var YJr=s(XI);s_o=r(YJr,"MBartModel"),YJr.forEach(t),l_o=r(oAe," (mBART model)"),oAe.forEach(t),i_o=i($),Xp=n($,"LI",{});var rAe=s(Xp);mse=n(rAe,"STRONG",{});var KJr=s(mse);d_o=r(KJr,"megatron-bert"),KJr.forEach(t),c_o=r(rAe," \u2014 "),zI=n(rAe,"A",{href:!0});var ZJr=s(zI);f_o=r(ZJr,"MegatronBertModel"),ZJr.forEach(t),m_o=r(rAe," (MegatronBert model)"),rAe.forEach(t),g_o=i($),zp=n($,"LI",{});var tAe=s(zp);gse=n(tAe,"STRONG",{});var eYr=s(gse);h_o=r(eYr,"mobilebert"),eYr.forEach(t),p_o=r(tAe," \u2014 "),QI=n(tAe,"A",{href:!0});var oYr=s(QI);u_o=r(oYr,"MobileBertModel"),oYr.forEach(t),__o=r(tAe," (MobileBERT model)"),tAe.forEach(t),b_o=i($),Qp=n($,"LI",{});var aAe=s(Qp);hse=n(aAe,"STRONG",{});var rYr=s(hse);v_o=r(rYr,"mpnet"),rYr.forEach(t),F_o=r(aAe," \u2014 "),WI=n(aAe,"A",{href:!0});var tYr=s(WI);T_o=r(tYr,"MPNetModel"),tYr.forEach(t),M_o=r(aAe," (MPNet model)"),aAe.forEach(t),E_o=i($),Wp=n($,"LI",{});var nAe=s(Wp);pse=n(nAe,"STRONG",{});var aYr=s(pse);C_o=r(aYr,"mt5"),aYr.forEach(t),w_o=r(nAe," \u2014 "),HI=n(nAe,"A",{href:!0});var nYr=s(HI);A_o=r(nYr,"MT5Model"),nYr.forEach(t),y_o=r(nAe," (mT5 model)"),nAe.forEach(t),L_o=i($),Hp=n($,"LI",{});var sAe=s(Hp);use=n(sAe,"STRONG",{});var sYr=s(use);x_o=r(sYr,"nystromformer"),sYr.forEach(t),$_o=r(sAe," \u2014 "),UI=n(sAe,"A",{href:!0});var lYr=s(UI);k_o=r(lYr,"NystromformerModel"),lYr.forEach(t),S_o=r(sAe," (Nystromformer model)"),sAe.forEach(t),R_o=i($),Up=n($,"LI",{});var lAe=s(Up);_se=n(lAe,"STRONG",{});var iYr=s(_se);B_o=r(iYr,"openai-gpt"),iYr.forEach(t),P_o=r(lAe," \u2014 "),JI=n(lAe,"A",{href:!0});var dYr=s(JI);I_o=r(dYr,"OpenAIGPTModel"),dYr.forEach(t),q_o=r(lAe," (OpenAI GPT model)"),lAe.forEach(t),N_o=i($),Jp=n($,"LI",{});var iAe=s(Jp);bse=n(iAe,"STRONG",{});var cYr=s(bse);j_o=r(cYr,"opt"),cYr.forEach(t),D_o=r(iAe," \u2014 "),YI=n(iAe,"A",{href:!0});var fYr=s(YI);G_o=r(fYr,"OPTModel"),fYr.forEach(t),O_o=r(iAe," (OPT model)"),iAe.forEach(t),V_o=i($),Yp=n($,"LI",{});var dAe=s(Yp);vse=n(dAe,"STRONG",{});var mYr=s(vse);X_o=r(mYr,"pegasus"),mYr.forEach(t),z_o=r(dAe," \u2014 "),KI=n(dAe,"A",{href:!0});var gYr=s(KI);Q_o=r(gYr,"PegasusModel"),gYr.forEach(t),W_o=r(dAe," (Pegasus model)"),dAe.forEach(t),H_o=i($),Kp=n($,"LI",{});var cAe=s(Kp);Fse=n(cAe,"STRONG",{});var hYr=s(Fse);U_o=r(hYr,"perceiver"),hYr.forEach(t),J_o=r(cAe," \u2014 "),ZI=n(cAe,"A",{href:!0});var pYr=s(ZI);Y_o=r(pYr,"PerceiverModel"),pYr.forEach(t),K_o=r(cAe," (Perceiver model)"),cAe.forEach(t),Z_o=i($),Zp=n($,"LI",{});var fAe=s(Zp);Tse=n(fAe,"STRONG",{});var uYr=s(Tse);e2o=r(uYr,"plbart"),uYr.forEach(t),o2o=r(fAe," \u2014 "),eq=n(fAe,"A",{href:!0});var _Yr=s(eq);r2o=r(_Yr,"PLBartModel"),_Yr.forEach(t),t2o=r(fAe," (PLBart model)"),fAe.forEach(t),a2o=i($),eu=n($,"LI",{});var mAe=s(eu);Mse=n(mAe,"STRONG",{});var bYr=s(Mse);n2o=r(bYr,"poolformer"),bYr.forEach(t),s2o=r(mAe," \u2014 "),oq=n(mAe,"A",{href:!0});var vYr=s(oq);l2o=r(vYr,"PoolFormerModel"),vYr.forEach(t),i2o=r(mAe," (PoolFormer model)"),mAe.forEach(t),d2o=i($),ou=n($,"LI",{});var gAe=s(ou);Ese=n(gAe,"STRONG",{});var FYr=s(Ese);c2o=r(FYr,"prophetnet"),FYr.forEach(t),f2o=r(gAe," \u2014 "),rq=n(gAe,"A",{href:!0});var TYr=s(rq);m2o=r(TYr,"ProphetNetModel"),TYr.forEach(t),g2o=r(gAe," (ProphetNet model)"),gAe.forEach(t),h2o=i($),ru=n($,"LI",{});var hAe=s(ru);Cse=n(hAe,"STRONG",{});var MYr=s(Cse);p2o=r(MYr,"qdqbert"),MYr.forEach(t),u2o=r(hAe," \u2014 "),tq=n(hAe,"A",{href:!0});var EYr=s(tq);_2o=r(EYr,"QDQBertModel"),EYr.forEach(t),b2o=r(hAe," (QDQBert model)"),hAe.forEach(t),v2o=i($),tu=n($,"LI",{});var pAe=s(tu);wse=n(pAe,"STRONG",{});var CYr=s(wse);F2o=r(CYr,"reformer"),CYr.forEach(t),T2o=r(pAe," \u2014 "),aq=n(pAe,"A",{href:!0});var wYr=s(aq);M2o=r(wYr,"ReformerModel"),wYr.forEach(t),E2o=r(pAe," (Reformer model)"),pAe.forEach(t),C2o=i($),au=n($,"LI",{});var uAe=s(au);Ase=n(uAe,"STRONG",{});var AYr=s(Ase);w2o=r(AYr,"regnet"),AYr.forEach(t),A2o=r(uAe," \u2014 "),nq=n(uAe,"A",{href:!0});var yYr=s(nq);y2o=r(yYr,"RegNetModel"),yYr.forEach(t),L2o=r(uAe," (RegNet model)"),uAe.forEach(t),x2o=i($),nu=n($,"LI",{});var _Ae=s(nu);yse=n(_Ae,"STRONG",{});var LYr=s(yse);$2o=r(LYr,"rembert"),LYr.forEach(t),k2o=r(_Ae," \u2014 "),sq=n(_Ae,"A",{href:!0});var xYr=s(sq);S2o=r(xYr,"RemBertModel"),xYr.forEach(t),R2o=r(_Ae," (RemBERT model)"),_Ae.forEach(t),B2o=i($),su=n($,"LI",{});var bAe=s(su);Lse=n(bAe,"STRONG",{});var $Yr=s(Lse);P2o=r($Yr,"resnet"),$Yr.forEach(t),I2o=r(bAe," \u2014 "),lq=n(bAe,"A",{href:!0});var kYr=s(lq);q2o=r(kYr,"ResNetModel"),kYr.forEach(t),N2o=r(bAe," (ResNet model)"),bAe.forEach(t),j2o=i($),lu=n($,"LI",{});var vAe=s(lu);xse=n(vAe,"STRONG",{});var SYr=s(xse);D2o=r(SYr,"retribert"),SYr.forEach(t),G2o=r(vAe," \u2014 "),iq=n(vAe,"A",{href:!0});var RYr=s(iq);O2o=r(RYr,"RetriBertModel"),RYr.forEach(t),V2o=r(vAe," (RetriBERT model)"),vAe.forEach(t),X2o=i($),iu=n($,"LI",{});var FAe=s(iu);$se=n(FAe,"STRONG",{});var BYr=s($se);z2o=r(BYr,"roberta"),BYr.forEach(t),Q2o=r(FAe," \u2014 "),dq=n(FAe,"A",{href:!0});var PYr=s(dq);W2o=r(PYr,"RobertaModel"),PYr.forEach(t),H2o=r(FAe," (RoBERTa model)"),FAe.forEach(t),U2o=i($),du=n($,"LI",{});var TAe=s(du);kse=n(TAe,"STRONG",{});var IYr=s(kse);J2o=r(IYr,"roformer"),IYr.forEach(t),Y2o=r(TAe," \u2014 "),cq=n(TAe,"A",{href:!0});var qYr=s(cq);K2o=r(qYr,"RoFormerModel"),qYr.forEach(t),Z2o=r(TAe," (RoFormer model)"),TAe.forEach(t),e1o=i($),cu=n($,"LI",{});var MAe=s(cu);Sse=n(MAe,"STRONG",{});var NYr=s(Sse);o1o=r(NYr,"segformer"),NYr.forEach(t),r1o=r(MAe," \u2014 "),fq=n(MAe,"A",{href:!0});var jYr=s(fq);t1o=r(jYr,"SegformerModel"),jYr.forEach(t),a1o=r(MAe," (SegFormer model)"),MAe.forEach(t),n1o=i($),fu=n($,"LI",{});var EAe=s(fu);Rse=n(EAe,"STRONG",{});var DYr=s(Rse);s1o=r(DYr,"sew"),DYr.forEach(t),l1o=r(EAe," \u2014 "),mq=n(EAe,"A",{href:!0});var GYr=s(mq);i1o=r(GYr,"SEWModel"),GYr.forEach(t),d1o=r(EAe," (SEW model)"),EAe.forEach(t),c1o=i($),mu=n($,"LI",{});var CAe=s(mu);Bse=n(CAe,"STRONG",{});var OYr=s(Bse);f1o=r(OYr,"sew-d"),OYr.forEach(t),m1o=r(CAe," \u2014 "),gq=n(CAe,"A",{href:!0});var VYr=s(gq);g1o=r(VYr,"SEWDModel"),VYr.forEach(t),h1o=r(CAe," (SEW-D model)"),CAe.forEach(t),p1o=i($),gu=n($,"LI",{});var wAe=s(gu);Pse=n(wAe,"STRONG",{});var XYr=s(Pse);u1o=r(XYr,"speech_to_text"),XYr.forEach(t),_1o=r(wAe," \u2014 "),hq=n(wAe,"A",{href:!0});var zYr=s(hq);b1o=r(zYr,"Speech2TextModel"),zYr.forEach(t),v1o=r(wAe," (Speech2Text model)"),wAe.forEach(t),F1o=i($),hu=n($,"LI",{});var AAe=s(hu);Ise=n(AAe,"STRONG",{});var QYr=s(Ise);T1o=r(QYr,"splinter"),QYr.forEach(t),M1o=r(AAe," \u2014 "),pq=n(AAe,"A",{href:!0});var WYr=s(pq);E1o=r(WYr,"SplinterModel"),WYr.forEach(t),C1o=r(AAe," (Splinter model)"),AAe.forEach(t),w1o=i($),pu=n($,"LI",{});var yAe=s(pu);qse=n(yAe,"STRONG",{});var HYr=s(qse);A1o=r(HYr,"squeezebert"),HYr.forEach(t),y1o=r(yAe," \u2014 "),uq=n(yAe,"A",{href:!0});var UYr=s(uq);L1o=r(UYr,"SqueezeBertModel"),UYr.forEach(t),x1o=r(yAe," (SqueezeBERT model)"),yAe.forEach(t),$1o=i($),uu=n($,"LI",{});var LAe=s(uu);Nse=n(LAe,"STRONG",{});var JYr=s(Nse);k1o=r(JYr,"swin"),JYr.forEach(t),S1o=r(LAe," \u2014 "),_q=n(LAe,"A",{href:!0});var YYr=s(_q);R1o=r(YYr,"SwinModel"),YYr.forEach(t),B1o=r(LAe," (Swin model)"),LAe.forEach(t),P1o=i($),_u=n($,"LI",{});var xAe=s(_u);jse=n(xAe,"STRONG",{});var KYr=s(jse);I1o=r(KYr,"t5"),KYr.forEach(t),q1o=r(xAe," \u2014 "),bq=n(xAe,"A",{href:!0});var ZYr=s(bq);N1o=r(ZYr,"T5Model"),ZYr.forEach(t),j1o=r(xAe," (T5 model)"),xAe.forEach(t),D1o=i($),bu=n($,"LI",{});var $Ae=s(bu);Dse=n($Ae,"STRONG",{});var eKr=s(Dse);G1o=r(eKr,"tapas"),eKr.forEach(t),O1o=r($Ae," \u2014 "),vq=n($Ae,"A",{href:!0});var oKr=s(vq);V1o=r(oKr,"TapasModel"),oKr.forEach(t),X1o=r($Ae," (TAPAS model)"),$Ae.forEach(t),z1o=i($),vu=n($,"LI",{});var kAe=s(vu);Gse=n(kAe,"STRONG",{});var rKr=s(Gse);Q1o=r(rKr,"transfo-xl"),rKr.forEach(t),W1o=r(kAe," \u2014 "),Fq=n(kAe,"A",{href:!0});var tKr=s(Fq);H1o=r(tKr,"TransfoXLModel"),tKr.forEach(t),U1o=r(kAe," (Transformer-XL model)"),kAe.forEach(t),J1o=i($),Fu=n($,"LI",{});var SAe=s(Fu);Ose=n(SAe,"STRONG",{});var aKr=s(Ose);Y1o=r(aKr,"unispeech"),aKr.forEach(t),K1o=r(SAe," \u2014 "),Tq=n(SAe,"A",{href:!0});var nKr=s(Tq);Z1o=r(nKr,"UniSpeechModel"),nKr.forEach(t),ebo=r(SAe," (UniSpeech model)"),SAe.forEach(t),obo=i($),Tu=n($,"LI",{});var RAe=s(Tu);Vse=n(RAe,"STRONG",{});var sKr=s(Vse);rbo=r(sKr,"unispeech-sat"),sKr.forEach(t),tbo=r(RAe," \u2014 "),Mq=n(RAe,"A",{href:!0});var lKr=s(Mq);abo=r(lKr,"UniSpeechSatModel"),lKr.forEach(t),nbo=r(RAe," (UniSpeechSat model)"),RAe.forEach(t),sbo=i($),Mu=n($,"LI",{});var BAe=s(Mu);Xse=n(BAe,"STRONG",{});var iKr=s(Xse);lbo=r(iKr,"van"),iKr.forEach(t),ibo=r(BAe," \u2014 "),Eq=n(BAe,"A",{href:!0});var dKr=s(Eq);dbo=r(dKr,"VanModel"),dKr.forEach(t),cbo=r(BAe," (VAN model)"),BAe.forEach(t),fbo=i($),Eu=n($,"LI",{});var PAe=s(Eu);zse=n(PAe,"STRONG",{});var cKr=s(zse);mbo=r(cKr,"vilt"),cKr.forEach(t),gbo=r(PAe," \u2014 "),Cq=n(PAe,"A",{href:!0});var fKr=s(Cq);hbo=r(fKr,"ViltModel"),fKr.forEach(t),pbo=r(PAe," (ViLT model)"),PAe.forEach(t),ubo=i($),Cu=n($,"LI",{});var IAe=s(Cu);Qse=n(IAe,"STRONG",{});var mKr=s(Qse);_bo=r(mKr,"vision-text-dual-encoder"),mKr.forEach(t),bbo=r(IAe," \u2014 "),wq=n(IAe,"A",{href:!0});var gKr=s(wq);vbo=r(gKr,"VisionTextDualEncoderModel"),gKr.forEach(t),Fbo=r(IAe," (VisionTextDualEncoder model)"),IAe.forEach(t),Tbo=i($),wu=n($,"LI",{});var qAe=s(wu);Wse=n(qAe,"STRONG",{});var hKr=s(Wse);Mbo=r(hKr,"visual_bert"),hKr.forEach(t),Ebo=r(qAe," \u2014 "),Aq=n(qAe,"A",{href:!0});var pKr=s(Aq);Cbo=r(pKr,"VisualBertModel"),pKr.forEach(t),wbo=r(qAe," (VisualBert model)"),qAe.forEach(t),Abo=i($),Au=n($,"LI",{});var NAe=s(Au);Hse=n(NAe,"STRONG",{});var uKr=s(Hse);ybo=r(uKr,"vit"),uKr.forEach(t),Lbo=r(NAe," \u2014 "),yq=n(NAe,"A",{href:!0});var _Kr=s(yq);xbo=r(_Kr,"ViTModel"),_Kr.forEach(t),$bo=r(NAe," (ViT model)"),NAe.forEach(t),kbo=i($),yu=n($,"LI",{});var jAe=s(yu);Use=n(jAe,"STRONG",{});var bKr=s(Use);Sbo=r(bKr,"vit_mae"),bKr.forEach(t),Rbo=r(jAe," \u2014 "),Lq=n(jAe,"A",{href:!0});var vKr=s(Lq);Bbo=r(vKr,"ViTMAEModel"),vKr.forEach(t),Pbo=r(jAe," (ViTMAE model)"),jAe.forEach(t),Ibo=i($),Lu=n($,"LI",{});var DAe=s(Lu);Jse=n(DAe,"STRONG",{});var FKr=s(Jse);qbo=r(FKr,"wav2vec2"),FKr.forEach(t),Nbo=r(DAe," \u2014 "),xq=n(DAe,"A",{href:!0});var TKr=s(xq);jbo=r(TKr,"Wav2Vec2Model"),TKr.forEach(t),Dbo=r(DAe," (Wav2Vec2 model)"),DAe.forEach(t),Gbo=i($),xu=n($,"LI",{});var GAe=s(xu);Yse=n(GAe,"STRONG",{});var MKr=s(Yse);Obo=r(MKr,"wavlm"),MKr.forEach(t),Vbo=r(GAe," \u2014 "),$q=n(GAe,"A",{href:!0});var EKr=s($q);Xbo=r(EKr,"WavLMModel"),EKr.forEach(t),zbo=r(GAe," (WavLM model)"),GAe.forEach(t),Qbo=i($),$u=n($,"LI",{});var OAe=s($u);Kse=n(OAe,"STRONG",{});var CKr=s(Kse);Wbo=r(CKr,"xglm"),CKr.forEach(t),Hbo=r(OAe," \u2014 "),kq=n(OAe,"A",{href:!0});var wKr=s(kq);Ubo=r(wKr,"XGLMModel"),wKr.forEach(t),Jbo=r(OAe," (XGLM model)"),OAe.forEach(t),Ybo=i($),ku=n($,"LI",{});var VAe=s(ku);Zse=n(VAe,"STRONG",{});var AKr=s(Zse);Kbo=r(AKr,"xlm"),AKr.forEach(t),Zbo=r(VAe," \u2014 "),Sq=n(VAe,"A",{href:!0});var yKr=s(Sq);evo=r(yKr,"XLMModel"),yKr.forEach(t),ovo=r(VAe," (XLM model)"),VAe.forEach(t),rvo=i($),Su=n($,"LI",{});var XAe=s(Su);ele=n(XAe,"STRONG",{});var LKr=s(ele);tvo=r(LKr,"xlm-prophetnet"),LKr.forEach(t),avo=r(XAe," \u2014 "),Rq=n(XAe,"A",{href:!0});var xKr=s(Rq);nvo=r(xKr,"XLMProphetNetModel"),xKr.forEach(t),svo=r(XAe," (XLMProphetNet model)"),XAe.forEach(t),lvo=i($),Ru=n($,"LI",{});var zAe=s(Ru);ole=n(zAe,"STRONG",{});var $Kr=s(ole);ivo=r($Kr,"xlm-roberta"),$Kr.forEach(t),dvo=r(zAe," \u2014 "),Bq=n(zAe,"A",{href:!0});var kKr=s(Bq);cvo=r(kKr,"XLMRobertaModel"),kKr.forEach(t),fvo=r(zAe," (XLM-RoBERTa model)"),zAe.forEach(t),mvo=i($),Bu=n($,"LI",{});var QAe=s(Bu);rle=n(QAe,"STRONG",{});var SKr=s(rle);gvo=r(SKr,"xlm-roberta-xl"),SKr.forEach(t),hvo=r(QAe," \u2014 "),Pq=n(QAe,"A",{href:!0});var RKr=s(Pq);pvo=r(RKr,"XLMRobertaXLModel"),RKr.forEach(t),uvo=r(QAe," (XLM-RoBERTa-XL model)"),QAe.forEach(t),_vo=i($),Pu=n($,"LI",{});var WAe=s(Pu);tle=n(WAe,"STRONG",{});var BKr=s(tle);bvo=r(BKr,"xlnet"),BKr.forEach(t),vvo=r(WAe," \u2014 "),Iq=n(WAe,"A",{href:!0});var PKr=s(Iq);Fvo=r(PKr,"XLNetModel"),PKr.forEach(t),Tvo=r(WAe," (XLNet model)"),WAe.forEach(t),Mvo=i($),Iu=n($,"LI",{});var HAe=s(Iu);ale=n(HAe,"STRONG",{});var IKr=s(ale);Evo=r(IKr,"yolos"),IKr.forEach(t),Cvo=r(HAe," \u2014 "),qq=n(HAe,"A",{href:!0});var qKr=s(qq);wvo=r(qKr,"YolosModel"),qKr.forEach(t),Avo=r(HAe," (YOLOS model)"),HAe.forEach(t),yvo=i($),qu=n($,"LI",{});var UAe=s(qu);nle=n(UAe,"STRONG",{});var NKr=s(nle);Lvo=r(NKr,"yoso"),NKr.forEach(t),xvo=r(UAe," \u2014 "),Nq=n(UAe,"A",{href:!0});var jKr=s(Nq);$vo=r(jKr,"YosoModel"),jKr.forEach(t),kvo=r(UAe," (YOSO model)"),UAe.forEach(t),$.forEach(t),Svo=i(Zt),Nu=n(Zt,"P",{});var JAe=s(Nu);Rvo=r(JAe,"The model is set in evaluation mode by default using "),sle=n(JAe,"CODE",{});var DKr=s(sle);Bvo=r(DKr,"model.eval()"),DKr.forEach(t),Pvo=r(JAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lle=n(JAe,"CODE",{});var GKr=s(lle);Ivo=r(GKr,"model.train()"),GKr.forEach(t),JAe.forEach(t),qvo=i(Zt),T(ju.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),CIe=i(f),Ci=n(f,"H2",{class:!0});var LNe=s(Ci);Du=n(LNe,"A",{id:!0,class:!0,href:!0});var OKr=s(Du);ile=n(OKr,"SPAN",{});var VKr=s(ile);T(R6.$$.fragment,VKr),VKr.forEach(t),OKr.forEach(t),Nvo=i(LNe),dle=n(LNe,"SPAN",{});var XKr=s(dle);jvo=r(XKr,"AutoModelForPreTraining"),XKr.forEach(t),LNe.forEach(t),wIe=i(f),xo=n(f,"DIV",{class:!0});var Ds=s(xo);T(B6.$$.fragment,Ds),Dvo=i(Ds),wi=n(Ds,"P",{});var FK=s(wi);Gvo=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jq=n(FK,"A",{href:!0});var zKr=s(jq);Ovo=r(zKr,"from_pretrained()"),zKr.forEach(t),Vvo=r(FK," class method or the "),Dq=n(FK,"A",{href:!0});var QKr=s(Dq);Xvo=r(QKr,"from_config()"),QKr.forEach(t),zvo=r(FK,` class
method.`),FK.forEach(t),Qvo=i(Ds),P6=n(Ds,"P",{});var xNe=s(P6);Wvo=r(xNe,"This class cannot be instantiated directly using "),cle=n(xNe,"CODE",{});var WKr=s(cle);Hvo=r(WKr,"__init__()"),WKr.forEach(t),Uvo=r(xNe," (throws an error)."),xNe.forEach(t),Jvo=i(Ds),rt=n(Ds,"DIV",{class:!0});var lw=s(rt);T(I6.$$.fragment,lw),Yvo=i(lw),fle=n(lw,"P",{});var HKr=s(fle);Kvo=r(HKr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),HKr.forEach(t),Zvo=i(lw),Ai=n(lw,"P",{});var TK=s(Ai);eFo=r(TK,`Note:
Loading a model from its configuration file does `),mle=n(TK,"STRONG",{});var UKr=s(mle);oFo=r(UKr,"not"),UKr.forEach(t),rFo=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gq=n(TK,"A",{href:!0});var JKr=s(Gq);tFo=r(JKr,"from_pretrained()"),JKr.forEach(t),aFo=r(TK," to load the model weights."),TK.forEach(t),nFo=i(lw),T(Gu.$$.fragment,lw),lw.forEach(t),sFo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(q6.$$.fragment,ea),lFo=i(ea),gle=n(ea,"P",{});var YKr=s(gle);iFo=r(YKr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),YKr.forEach(t),dFo=i(ea),ya=n(ea,"P",{});var iw=s(ya);cFo=r(iw,"The model class to instantiate is selected based on the "),hle=n(iw,"CODE",{});var KKr=s(hle);fFo=r(KKr,"model_type"),KKr.forEach(t),mFo=r(iw,` property of the config object (either
passed as an argument or loaded from `),ple=n(iw,"CODE",{});var ZKr=s(ple);gFo=r(ZKr,"pretrained_model_name_or_path"),ZKr.forEach(t),hFo=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ule=n(iw,"CODE",{});var eZr=s(ule);pFo=r(eZr,"pretrained_model_name_or_path"),eZr.forEach(t),uFo=r(iw,":"),iw.forEach(t),_Fo=i(ea),G=n(ea,"UL",{});var O=s(G);Ou=n(O,"LI",{});var YAe=s(Ou);_le=n(YAe,"STRONG",{});var oZr=s(_le);bFo=r(oZr,"albert"),oZr.forEach(t),vFo=r(YAe," \u2014 "),Oq=n(YAe,"A",{href:!0});var rZr=s(Oq);FFo=r(rZr,"AlbertForPreTraining"),rZr.forEach(t),TFo=r(YAe," (ALBERT model)"),YAe.forEach(t),MFo=i(O),Vu=n(O,"LI",{});var KAe=s(Vu);ble=n(KAe,"STRONG",{});var tZr=s(ble);EFo=r(tZr,"bart"),tZr.forEach(t),CFo=r(KAe," \u2014 "),Vq=n(KAe,"A",{href:!0});var aZr=s(Vq);wFo=r(aZr,"BartForConditionalGeneration"),aZr.forEach(t),AFo=r(KAe," (BART model)"),KAe.forEach(t),yFo=i(O),Xu=n(O,"LI",{});var ZAe=s(Xu);vle=n(ZAe,"STRONG",{});var nZr=s(vle);LFo=r(nZr,"bert"),nZr.forEach(t),xFo=r(ZAe," \u2014 "),Xq=n(ZAe,"A",{href:!0});var sZr=s(Xq);$Fo=r(sZr,"BertForPreTraining"),sZr.forEach(t),kFo=r(ZAe," (BERT model)"),ZAe.forEach(t),SFo=i(O),zu=n(O,"LI",{});var e6e=s(zu);Fle=n(e6e,"STRONG",{});var lZr=s(Fle);RFo=r(lZr,"big_bird"),lZr.forEach(t),BFo=r(e6e," \u2014 "),zq=n(e6e,"A",{href:!0});var iZr=s(zq);PFo=r(iZr,"BigBirdForPreTraining"),iZr.forEach(t),IFo=r(e6e," (BigBird model)"),e6e.forEach(t),qFo=i(O),Qu=n(O,"LI",{});var o6e=s(Qu);Tle=n(o6e,"STRONG",{});var dZr=s(Tle);NFo=r(dZr,"bloom"),dZr.forEach(t),jFo=r(o6e," \u2014 "),Qq=n(o6e,"A",{href:!0});var cZr=s(Qq);DFo=r(cZr,"BLOOMLMHeadModel"),cZr.forEach(t),GFo=r(o6e," (BLOOM model)"),o6e.forEach(t),OFo=i(O),Wu=n(O,"LI",{});var r6e=s(Wu);Mle=n(r6e,"STRONG",{});var fZr=s(Mle);VFo=r(fZr,"camembert"),fZr.forEach(t),XFo=r(r6e," \u2014 "),Wq=n(r6e,"A",{href:!0});var mZr=s(Wq);zFo=r(mZr,"CamembertForMaskedLM"),mZr.forEach(t),QFo=r(r6e," (CamemBERT model)"),r6e.forEach(t),WFo=i(O),Hu=n(O,"LI",{});var t6e=s(Hu);Ele=n(t6e,"STRONG",{});var gZr=s(Ele);HFo=r(gZr,"ctrl"),gZr.forEach(t),UFo=r(t6e," \u2014 "),Hq=n(t6e,"A",{href:!0});var hZr=s(Hq);JFo=r(hZr,"CTRLLMHeadModel"),hZr.forEach(t),YFo=r(t6e," (CTRL model)"),t6e.forEach(t),KFo=i(O),Uu=n(O,"LI",{});var a6e=s(Uu);Cle=n(a6e,"STRONG",{});var pZr=s(Cle);ZFo=r(pZr,"data2vec-text"),pZr.forEach(t),e0o=r(a6e," \u2014 "),Uq=n(a6e,"A",{href:!0});var uZr=s(Uq);o0o=r(uZr,"Data2VecTextForMaskedLM"),uZr.forEach(t),r0o=r(a6e," (Data2VecText model)"),a6e.forEach(t),t0o=i(O),Ju=n(O,"LI",{});var n6e=s(Ju);wle=n(n6e,"STRONG",{});var _Zr=s(wle);a0o=r(_Zr,"deberta"),_Zr.forEach(t),n0o=r(n6e," \u2014 "),Jq=n(n6e,"A",{href:!0});var bZr=s(Jq);s0o=r(bZr,"DebertaForMaskedLM"),bZr.forEach(t),l0o=r(n6e," (DeBERTa model)"),n6e.forEach(t),i0o=i(O),Yu=n(O,"LI",{});var s6e=s(Yu);Ale=n(s6e,"STRONG",{});var vZr=s(Ale);d0o=r(vZr,"deberta-v2"),vZr.forEach(t),c0o=r(s6e," \u2014 "),Yq=n(s6e,"A",{href:!0});var FZr=s(Yq);f0o=r(FZr,"DebertaV2ForMaskedLM"),FZr.forEach(t),m0o=r(s6e," (DeBERTa-v2 model)"),s6e.forEach(t),g0o=i(O),Ku=n(O,"LI",{});var l6e=s(Ku);yle=n(l6e,"STRONG",{});var TZr=s(yle);h0o=r(TZr,"distilbert"),TZr.forEach(t),p0o=r(l6e," \u2014 "),Kq=n(l6e,"A",{href:!0});var MZr=s(Kq);u0o=r(MZr,"DistilBertForMaskedLM"),MZr.forEach(t),_0o=r(l6e," (DistilBERT model)"),l6e.forEach(t),b0o=i(O),Zu=n(O,"LI",{});var i6e=s(Zu);Lle=n(i6e,"STRONG",{});var EZr=s(Lle);v0o=r(EZr,"electra"),EZr.forEach(t),F0o=r(i6e," \u2014 "),Zq=n(i6e,"A",{href:!0});var CZr=s(Zq);T0o=r(CZr,"ElectraForPreTraining"),CZr.forEach(t),M0o=r(i6e," (ELECTRA model)"),i6e.forEach(t),E0o=i(O),e_=n(O,"LI",{});var d6e=s(e_);xle=n(d6e,"STRONG",{});var wZr=s(xle);C0o=r(wZr,"flaubert"),wZr.forEach(t),w0o=r(d6e," \u2014 "),eN=n(d6e,"A",{href:!0});var AZr=s(eN);A0o=r(AZr,"FlaubertWithLMHeadModel"),AZr.forEach(t),y0o=r(d6e," (FlauBERT model)"),d6e.forEach(t),L0o=i(O),o_=n(O,"LI",{});var c6e=s(o_);$le=n(c6e,"STRONG",{});var yZr=s($le);x0o=r(yZr,"flava"),yZr.forEach(t),$0o=r(c6e," \u2014 "),oN=n(c6e,"A",{href:!0});var LZr=s(oN);k0o=r(LZr,"FlavaForPreTraining"),LZr.forEach(t),S0o=r(c6e," (Flava model)"),c6e.forEach(t),R0o=i(O),r_=n(O,"LI",{});var f6e=s(r_);kle=n(f6e,"STRONG",{});var xZr=s(kle);B0o=r(xZr,"fnet"),xZr.forEach(t),P0o=r(f6e," \u2014 "),rN=n(f6e,"A",{href:!0});var $Zr=s(rN);I0o=r($Zr,"FNetForPreTraining"),$Zr.forEach(t),q0o=r(f6e," (FNet model)"),f6e.forEach(t),N0o=i(O),t_=n(O,"LI",{});var m6e=s(t_);Sle=n(m6e,"STRONG",{});var kZr=s(Sle);j0o=r(kZr,"fsmt"),kZr.forEach(t),D0o=r(m6e," \u2014 "),tN=n(m6e,"A",{href:!0});var SZr=s(tN);G0o=r(SZr,"FSMTForConditionalGeneration"),SZr.forEach(t),O0o=r(m6e," (FairSeq Machine-Translation model)"),m6e.forEach(t),V0o=i(O),a_=n(O,"LI",{});var g6e=s(a_);Rle=n(g6e,"STRONG",{});var RZr=s(Rle);X0o=r(RZr,"funnel"),RZr.forEach(t),z0o=r(g6e," \u2014 "),aN=n(g6e,"A",{href:!0});var BZr=s(aN);Q0o=r(BZr,"FunnelForPreTraining"),BZr.forEach(t),W0o=r(g6e," (Funnel Transformer model)"),g6e.forEach(t),H0o=i(O),n_=n(O,"LI",{});var h6e=s(n_);Ble=n(h6e,"STRONG",{});var PZr=s(Ble);U0o=r(PZr,"gpt2"),PZr.forEach(t),J0o=r(h6e," \u2014 "),nN=n(h6e,"A",{href:!0});var IZr=s(nN);Y0o=r(IZr,"GPT2LMHeadModel"),IZr.forEach(t),K0o=r(h6e," (OpenAI GPT-2 model)"),h6e.forEach(t),Z0o=i(O),s_=n(O,"LI",{});var p6e=s(s_);Ple=n(p6e,"STRONG",{});var qZr=s(Ple);eTo=r(qZr,"ibert"),qZr.forEach(t),oTo=r(p6e," \u2014 "),sN=n(p6e,"A",{href:!0});var NZr=s(sN);rTo=r(NZr,"IBertForMaskedLM"),NZr.forEach(t),tTo=r(p6e," (I-BERT model)"),p6e.forEach(t),aTo=i(O),l_=n(O,"LI",{});var u6e=s(l_);Ile=n(u6e,"STRONG",{});var jZr=s(Ile);nTo=r(jZr,"layoutlm"),jZr.forEach(t),sTo=r(u6e," \u2014 "),lN=n(u6e,"A",{href:!0});var DZr=s(lN);lTo=r(DZr,"LayoutLMForMaskedLM"),DZr.forEach(t),iTo=r(u6e," (LayoutLM model)"),u6e.forEach(t),dTo=i(O),i_=n(O,"LI",{});var _6e=s(i_);qle=n(_6e,"STRONG",{});var GZr=s(qle);cTo=r(GZr,"longformer"),GZr.forEach(t),fTo=r(_6e," \u2014 "),iN=n(_6e,"A",{href:!0});var OZr=s(iN);mTo=r(OZr,"LongformerForMaskedLM"),OZr.forEach(t),gTo=r(_6e," (Longformer model)"),_6e.forEach(t),hTo=i(O),d_=n(O,"LI",{});var b6e=s(d_);Nle=n(b6e,"STRONG",{});var VZr=s(Nle);pTo=r(VZr,"lxmert"),VZr.forEach(t),uTo=r(b6e," \u2014 "),dN=n(b6e,"A",{href:!0});var XZr=s(dN);_To=r(XZr,"LxmertForPreTraining"),XZr.forEach(t),bTo=r(b6e," (LXMERT model)"),b6e.forEach(t),vTo=i(O),c_=n(O,"LI",{});var v6e=s(c_);jle=n(v6e,"STRONG",{});var zZr=s(jle);FTo=r(zZr,"megatron-bert"),zZr.forEach(t),TTo=r(v6e," \u2014 "),cN=n(v6e,"A",{href:!0});var QZr=s(cN);MTo=r(QZr,"MegatronBertForPreTraining"),QZr.forEach(t),ETo=r(v6e," (MegatronBert model)"),v6e.forEach(t),CTo=i(O),f_=n(O,"LI",{});var F6e=s(f_);Dle=n(F6e,"STRONG",{});var WZr=s(Dle);wTo=r(WZr,"mobilebert"),WZr.forEach(t),ATo=r(F6e," \u2014 "),fN=n(F6e,"A",{href:!0});var HZr=s(fN);yTo=r(HZr,"MobileBertForPreTraining"),HZr.forEach(t),LTo=r(F6e," (MobileBERT model)"),F6e.forEach(t),xTo=i(O),m_=n(O,"LI",{});var T6e=s(m_);Gle=n(T6e,"STRONG",{});var UZr=s(Gle);$To=r(UZr,"mpnet"),UZr.forEach(t),kTo=r(T6e," \u2014 "),mN=n(T6e,"A",{href:!0});var JZr=s(mN);STo=r(JZr,"MPNetForMaskedLM"),JZr.forEach(t),RTo=r(T6e," (MPNet model)"),T6e.forEach(t),BTo=i(O),g_=n(O,"LI",{});var M6e=s(g_);Ole=n(M6e,"STRONG",{});var YZr=s(Ole);PTo=r(YZr,"openai-gpt"),YZr.forEach(t),ITo=r(M6e," \u2014 "),gN=n(M6e,"A",{href:!0});var KZr=s(gN);qTo=r(KZr,"OpenAIGPTLMHeadModel"),KZr.forEach(t),NTo=r(M6e," (OpenAI GPT model)"),M6e.forEach(t),jTo=i(O),h_=n(O,"LI",{});var E6e=s(h_);Vle=n(E6e,"STRONG",{});var ZZr=s(Vle);DTo=r(ZZr,"retribert"),ZZr.forEach(t),GTo=r(E6e," \u2014 "),hN=n(E6e,"A",{href:!0});var eet=s(hN);OTo=r(eet,"RetriBertModel"),eet.forEach(t),VTo=r(E6e," (RetriBERT model)"),E6e.forEach(t),XTo=i(O),p_=n(O,"LI",{});var C6e=s(p_);Xle=n(C6e,"STRONG",{});var oet=s(Xle);zTo=r(oet,"roberta"),oet.forEach(t),QTo=r(C6e," \u2014 "),pN=n(C6e,"A",{href:!0});var ret=s(pN);WTo=r(ret,"RobertaForMaskedLM"),ret.forEach(t),HTo=r(C6e," (RoBERTa model)"),C6e.forEach(t),UTo=i(O),u_=n(O,"LI",{});var w6e=s(u_);zle=n(w6e,"STRONG",{});var tet=s(zle);JTo=r(tet,"squeezebert"),tet.forEach(t),YTo=r(w6e," \u2014 "),uN=n(w6e,"A",{href:!0});var aet=s(uN);KTo=r(aet,"SqueezeBertForMaskedLM"),aet.forEach(t),ZTo=r(w6e," (SqueezeBERT model)"),w6e.forEach(t),e7o=i(O),__=n(O,"LI",{});var A6e=s(__);Qle=n(A6e,"STRONG",{});var net=s(Qle);o7o=r(net,"t5"),net.forEach(t),r7o=r(A6e," \u2014 "),_N=n(A6e,"A",{href:!0});var set=s(_N);t7o=r(set,"T5ForConditionalGeneration"),set.forEach(t),a7o=r(A6e," (T5 model)"),A6e.forEach(t),n7o=i(O),b_=n(O,"LI",{});var y6e=s(b_);Wle=n(y6e,"STRONG",{});var iet=s(Wle);s7o=r(iet,"tapas"),iet.forEach(t),l7o=r(y6e," \u2014 "),bN=n(y6e,"A",{href:!0});var det=s(bN);i7o=r(det,"TapasForMaskedLM"),det.forEach(t),d7o=r(y6e," (TAPAS model)"),y6e.forEach(t),c7o=i(O),v_=n(O,"LI",{});var L6e=s(v_);Hle=n(L6e,"STRONG",{});var cet=s(Hle);f7o=r(cet,"transfo-xl"),cet.forEach(t),m7o=r(L6e," \u2014 "),vN=n(L6e,"A",{href:!0});var fet=s(vN);g7o=r(fet,"TransfoXLLMHeadModel"),fet.forEach(t),h7o=r(L6e," (Transformer-XL model)"),L6e.forEach(t),p7o=i(O),F_=n(O,"LI",{});var x6e=s(F_);Ule=n(x6e,"STRONG",{});var met=s(Ule);u7o=r(met,"unispeech"),met.forEach(t),_7o=r(x6e," \u2014 "),FN=n(x6e,"A",{href:!0});var get=s(FN);b7o=r(get,"UniSpeechForPreTraining"),get.forEach(t),v7o=r(x6e," (UniSpeech model)"),x6e.forEach(t),F7o=i(O),T_=n(O,"LI",{});var $6e=s(T_);Jle=n($6e,"STRONG",{});var het=s(Jle);T7o=r(het,"unispeech-sat"),het.forEach(t),M7o=r($6e," \u2014 "),TN=n($6e,"A",{href:!0});var pet=s(TN);E7o=r(pet,"UniSpeechSatForPreTraining"),pet.forEach(t),C7o=r($6e," (UniSpeechSat model)"),$6e.forEach(t),w7o=i(O),M_=n(O,"LI",{});var k6e=s(M_);Yle=n(k6e,"STRONG",{});var uet=s(Yle);A7o=r(uet,"visual_bert"),uet.forEach(t),y7o=r(k6e," \u2014 "),MN=n(k6e,"A",{href:!0});var _et=s(MN);L7o=r(_et,"VisualBertForPreTraining"),_et.forEach(t),x7o=r(k6e," (VisualBert model)"),k6e.forEach(t),$7o=i(O),E_=n(O,"LI",{});var S6e=s(E_);Kle=n(S6e,"STRONG",{});var bet=s(Kle);k7o=r(bet,"vit_mae"),bet.forEach(t),S7o=r(S6e," \u2014 "),EN=n(S6e,"A",{href:!0});var vet=s(EN);R7o=r(vet,"ViTMAEForPreTraining"),vet.forEach(t),B7o=r(S6e," (ViTMAE model)"),S6e.forEach(t),P7o=i(O),C_=n(O,"LI",{});var R6e=s(C_);Zle=n(R6e,"STRONG",{});var Fet=s(Zle);I7o=r(Fet,"wav2vec2"),Fet.forEach(t),q7o=r(R6e," \u2014 "),CN=n(R6e,"A",{href:!0});var Tet=s(CN);N7o=r(Tet,"Wav2Vec2ForPreTraining"),Tet.forEach(t),j7o=r(R6e," (Wav2Vec2 model)"),R6e.forEach(t),D7o=i(O),w_=n(O,"LI",{});var B6e=s(w_);eie=n(B6e,"STRONG",{});var Met=s(eie);G7o=r(Met,"xlm"),Met.forEach(t),O7o=r(B6e," \u2014 "),wN=n(B6e,"A",{href:!0});var Eet=s(wN);V7o=r(Eet,"XLMWithLMHeadModel"),Eet.forEach(t),X7o=r(B6e," (XLM model)"),B6e.forEach(t),z7o=i(O),A_=n(O,"LI",{});var P6e=s(A_);oie=n(P6e,"STRONG",{});var Cet=s(oie);Q7o=r(Cet,"xlm-roberta"),Cet.forEach(t),W7o=r(P6e," \u2014 "),AN=n(P6e,"A",{href:!0});var wet=s(AN);H7o=r(wet,"XLMRobertaForMaskedLM"),wet.forEach(t),U7o=r(P6e," (XLM-RoBERTa model)"),P6e.forEach(t),J7o=i(O),y_=n(O,"LI",{});var I6e=s(y_);rie=n(I6e,"STRONG",{});var Aet=s(rie);Y7o=r(Aet,"xlm-roberta-xl"),Aet.forEach(t),K7o=r(I6e," \u2014 "),yN=n(I6e,"A",{href:!0});var yet=s(yN);Z7o=r(yet,"XLMRobertaXLForMaskedLM"),yet.forEach(t),eMo=r(I6e," (XLM-RoBERTa-XL model)"),I6e.forEach(t),oMo=i(O),L_=n(O,"LI",{});var q6e=s(L_);tie=n(q6e,"STRONG",{});var Let=s(tie);rMo=r(Let,"xlnet"),Let.forEach(t),tMo=r(q6e," \u2014 "),LN=n(q6e,"A",{href:!0});var xet=s(LN);aMo=r(xet,"XLNetLMHeadModel"),xet.forEach(t),nMo=r(q6e," (XLNet model)"),q6e.forEach(t),O.forEach(t),sMo=i(ea),x_=n(ea,"P",{});var N6e=s(x_);lMo=r(N6e,"The model is set in evaluation mode by default using "),aie=n(N6e,"CODE",{});var $et=s(aie);iMo=r($et,"model.eval()"),$et.forEach(t),dMo=r(N6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nie=n(N6e,"CODE",{});var ket=s(nie);cMo=r(ket,"model.train()"),ket.forEach(t),N6e.forEach(t),fMo=i(ea),T($_.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),AIe=i(f),yi=n(f,"H2",{class:!0});var $Ne=s(yi);k_=n($Ne,"A",{id:!0,class:!0,href:!0});var Set=s(k_);sie=n(Set,"SPAN",{});var Ret=s(sie);T(N6.$$.fragment,Ret),Ret.forEach(t),Set.forEach(t),mMo=i($Ne),lie=n($Ne,"SPAN",{});var Bet=s(lie);gMo=r(Bet,"AutoModelForCausalLM"),Bet.forEach(t),$Ne.forEach(t),yIe=i(f),$o=n(f,"DIV",{class:!0});var Gs=s($o);T(j6.$$.fragment,Gs),hMo=i(Gs),Li=n(Gs,"P",{});var MK=s(Li);pMo=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xN=n(MK,"A",{href:!0});var Pet=s(xN);uMo=r(Pet,"from_pretrained()"),Pet.forEach(t),_Mo=r(MK," class method or the "),$N=n(MK,"A",{href:!0});var Iet=s($N);bMo=r(Iet,"from_config()"),Iet.forEach(t),vMo=r(MK,` class
method.`),MK.forEach(t),FMo=i(Gs),D6=n(Gs,"P",{});var kNe=s(D6);TMo=r(kNe,"This class cannot be instantiated directly using "),iie=n(kNe,"CODE",{});var qet=s(iie);MMo=r(qet,"__init__()"),qet.forEach(t),EMo=r(kNe," (throws an error)."),kNe.forEach(t),CMo=i(Gs),tt=n(Gs,"DIV",{class:!0});var dw=s(tt);T(G6.$$.fragment,dw),wMo=i(dw),die=n(dw,"P",{});var Net=s(die);AMo=r(Net,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Net.forEach(t),yMo=i(dw),xi=n(dw,"P",{});var EK=s(xi);LMo=r(EK,`Note:
Loading a model from its configuration file does `),cie=n(EK,"STRONG",{});var jet=s(cie);xMo=r(jet,"not"),jet.forEach(t),$Mo=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kN=n(EK,"A",{href:!0});var Det=s(kN);kMo=r(Det,"from_pretrained()"),Det.forEach(t),SMo=r(EK," to load the model weights."),EK.forEach(t),RMo=i(dw),T(S_.$$.fragment,dw),dw.forEach(t),BMo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(O6.$$.fragment,oa),PMo=i(oa),fie=n(oa,"P",{});var Get=s(fie);IMo=r(Get,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Get.forEach(t),qMo=i(oa),La=n(oa,"P",{});var cw=s(La);NMo=r(cw,"The model class to instantiate is selected based on the "),mie=n(cw,"CODE",{});var Oet=s(mie);jMo=r(Oet,"model_type"),Oet.forEach(t),DMo=r(cw,` property of the config object (either
passed as an argument or loaded from `),gie=n(cw,"CODE",{});var Vet=s(gie);GMo=r(Vet,"pretrained_model_name_or_path"),Vet.forEach(t),OMo=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hie=n(cw,"CODE",{});var Xet=s(hie);VMo=r(Xet,"pretrained_model_name_or_path"),Xet.forEach(t),XMo=r(cw,":"),cw.forEach(t),zMo=i(oa),z=n(oa,"UL",{});var Q=s(z);R_=n(Q,"LI",{});var j6e=s(R_);pie=n(j6e,"STRONG",{});var zet=s(pie);QMo=r(zet,"bart"),zet.forEach(t),WMo=r(j6e," \u2014 "),SN=n(j6e,"A",{href:!0});var Qet=s(SN);HMo=r(Qet,"BartForCausalLM"),Qet.forEach(t),UMo=r(j6e," (BART model)"),j6e.forEach(t),JMo=i(Q),B_=n(Q,"LI",{});var D6e=s(B_);uie=n(D6e,"STRONG",{});var Wet=s(uie);YMo=r(Wet,"bert"),Wet.forEach(t),KMo=r(D6e," \u2014 "),RN=n(D6e,"A",{href:!0});var Het=s(RN);ZMo=r(Het,"BertLMHeadModel"),Het.forEach(t),e4o=r(D6e," (BERT model)"),D6e.forEach(t),o4o=i(Q),P_=n(Q,"LI",{});var G6e=s(P_);_ie=n(G6e,"STRONG",{});var Uet=s(_ie);r4o=r(Uet,"bert-generation"),Uet.forEach(t),t4o=r(G6e," \u2014 "),BN=n(G6e,"A",{href:!0});var Jet=s(BN);a4o=r(Jet,"BertGenerationDecoder"),Jet.forEach(t),n4o=r(G6e," (Bert Generation model)"),G6e.forEach(t),s4o=i(Q),I_=n(Q,"LI",{});var O6e=s(I_);bie=n(O6e,"STRONG",{});var Yet=s(bie);l4o=r(Yet,"big_bird"),Yet.forEach(t),i4o=r(O6e," \u2014 "),PN=n(O6e,"A",{href:!0});var Ket=s(PN);d4o=r(Ket,"BigBirdForCausalLM"),Ket.forEach(t),c4o=r(O6e," (BigBird model)"),O6e.forEach(t),f4o=i(Q),q_=n(Q,"LI",{});var V6e=s(q_);vie=n(V6e,"STRONG",{});var Zet=s(vie);m4o=r(Zet,"bigbird_pegasus"),Zet.forEach(t),g4o=r(V6e," \u2014 "),IN=n(V6e,"A",{href:!0});var eot=s(IN);h4o=r(eot,"BigBirdPegasusForCausalLM"),eot.forEach(t),p4o=r(V6e," (BigBirdPegasus model)"),V6e.forEach(t),u4o=i(Q),N_=n(Q,"LI",{});var X6e=s(N_);Fie=n(X6e,"STRONG",{});var oot=s(Fie);_4o=r(oot,"blenderbot"),oot.forEach(t),b4o=r(X6e," \u2014 "),qN=n(X6e,"A",{href:!0});var rot=s(qN);v4o=r(rot,"BlenderbotForCausalLM"),rot.forEach(t),F4o=r(X6e," (Blenderbot model)"),X6e.forEach(t),T4o=i(Q),j_=n(Q,"LI",{});var z6e=s(j_);Tie=n(z6e,"STRONG",{});var tot=s(Tie);M4o=r(tot,"blenderbot-small"),tot.forEach(t),E4o=r(z6e," \u2014 "),NN=n(z6e,"A",{href:!0});var aot=s(NN);C4o=r(aot,"BlenderbotSmallForCausalLM"),aot.forEach(t),w4o=r(z6e," (BlenderbotSmall model)"),z6e.forEach(t),A4o=i(Q),D_=n(Q,"LI",{});var Q6e=s(D_);Mie=n(Q6e,"STRONG",{});var not=s(Mie);y4o=r(not,"bloom"),not.forEach(t),L4o=r(Q6e," \u2014 "),jN=n(Q6e,"A",{href:!0});var sot=s(jN);x4o=r(sot,"BLOOMLMHeadModel"),sot.forEach(t),$4o=r(Q6e," (BLOOM model)"),Q6e.forEach(t),k4o=i(Q),G_=n(Q,"LI",{});var W6e=s(G_);Eie=n(W6e,"STRONG",{});var lot=s(Eie);S4o=r(lot,"camembert"),lot.forEach(t),R4o=r(W6e," \u2014 "),DN=n(W6e,"A",{href:!0});var iot=s(DN);B4o=r(iot,"CamembertForCausalLM"),iot.forEach(t),P4o=r(W6e," (CamemBERT model)"),W6e.forEach(t),I4o=i(Q),O_=n(Q,"LI",{});var H6e=s(O_);Cie=n(H6e,"STRONG",{});var dot=s(Cie);q4o=r(dot,"ctrl"),dot.forEach(t),N4o=r(H6e," \u2014 "),GN=n(H6e,"A",{href:!0});var cot=s(GN);j4o=r(cot,"CTRLLMHeadModel"),cot.forEach(t),D4o=r(H6e," (CTRL model)"),H6e.forEach(t),G4o=i(Q),V_=n(Q,"LI",{});var U6e=s(V_);wie=n(U6e,"STRONG",{});var fot=s(wie);O4o=r(fot,"data2vec-text"),fot.forEach(t),V4o=r(U6e," \u2014 "),ON=n(U6e,"A",{href:!0});var mot=s(ON);X4o=r(mot,"Data2VecTextForCausalLM"),mot.forEach(t),z4o=r(U6e," (Data2VecText model)"),U6e.forEach(t),Q4o=i(Q),X_=n(Q,"LI",{});var J6e=s(X_);Aie=n(J6e,"STRONG",{});var got=s(Aie);W4o=r(got,"electra"),got.forEach(t),H4o=r(J6e," \u2014 "),VN=n(J6e,"A",{href:!0});var hot=s(VN);U4o=r(hot,"ElectraForCausalLM"),hot.forEach(t),J4o=r(J6e," (ELECTRA model)"),J6e.forEach(t),Y4o=i(Q),z_=n(Q,"LI",{});var Y6e=s(z_);yie=n(Y6e,"STRONG",{});var pot=s(yie);K4o=r(pot,"gpt2"),pot.forEach(t),Z4o=r(Y6e," \u2014 "),XN=n(Y6e,"A",{href:!0});var uot=s(XN);eEo=r(uot,"GPT2LMHeadModel"),uot.forEach(t),oEo=r(Y6e," (OpenAI GPT-2 model)"),Y6e.forEach(t),rEo=i(Q),Q_=n(Q,"LI",{});var K6e=s(Q_);Lie=n(K6e,"STRONG",{});var _ot=s(Lie);tEo=r(_ot,"gpt_neo"),_ot.forEach(t),aEo=r(K6e," \u2014 "),zN=n(K6e,"A",{href:!0});var bot=s(zN);nEo=r(bot,"GPTNeoForCausalLM"),bot.forEach(t),sEo=r(K6e," (GPT Neo model)"),K6e.forEach(t),lEo=i(Q),W_=n(Q,"LI",{});var Z6e=s(W_);xie=n(Z6e,"STRONG",{});var vot=s(xie);iEo=r(vot,"gptj"),vot.forEach(t),dEo=r(Z6e," \u2014 "),QN=n(Z6e,"A",{href:!0});var Fot=s(QN);cEo=r(Fot,"GPTJForCausalLM"),Fot.forEach(t),fEo=r(Z6e," (GPT-J model)"),Z6e.forEach(t),mEo=i(Q),H_=n(Q,"LI",{});var eye=s(H_);$ie=n(eye,"STRONG",{});var Tot=s($ie);gEo=r(Tot,"marian"),Tot.forEach(t),hEo=r(eye," \u2014 "),WN=n(eye,"A",{href:!0});var Mot=s(WN);pEo=r(Mot,"MarianForCausalLM"),Mot.forEach(t),uEo=r(eye," (Marian model)"),eye.forEach(t),_Eo=i(Q),U_=n(Q,"LI",{});var oye=s(U_);kie=n(oye,"STRONG",{});var Eot=s(kie);bEo=r(Eot,"mbart"),Eot.forEach(t),vEo=r(oye," \u2014 "),HN=n(oye,"A",{href:!0});var Cot=s(HN);FEo=r(Cot,"MBartForCausalLM"),Cot.forEach(t),TEo=r(oye," (mBART model)"),oye.forEach(t),MEo=i(Q),J_=n(Q,"LI",{});var rye=s(J_);Sie=n(rye,"STRONG",{});var wot=s(Sie);EEo=r(wot,"megatron-bert"),wot.forEach(t),CEo=r(rye," \u2014 "),UN=n(rye,"A",{href:!0});var Aot=s(UN);wEo=r(Aot,"MegatronBertForCausalLM"),Aot.forEach(t),AEo=r(rye," (MegatronBert model)"),rye.forEach(t),yEo=i(Q),Y_=n(Q,"LI",{});var tye=s(Y_);Rie=n(tye,"STRONG",{});var yot=s(Rie);LEo=r(yot,"openai-gpt"),yot.forEach(t),xEo=r(tye," \u2014 "),JN=n(tye,"A",{href:!0});var Lot=s(JN);$Eo=r(Lot,"OpenAIGPTLMHeadModel"),Lot.forEach(t),kEo=r(tye," (OpenAI GPT model)"),tye.forEach(t),SEo=i(Q),K_=n(Q,"LI",{});var aye=s(K_);Bie=n(aye,"STRONG",{});var xot=s(Bie);REo=r(xot,"opt"),xot.forEach(t),BEo=r(aye," \u2014 "),YN=n(aye,"A",{href:!0});var $ot=s(YN);PEo=r($ot,"OPTForCausalLM"),$ot.forEach(t),IEo=r(aye," (OPT model)"),aye.forEach(t),qEo=i(Q),Z_=n(Q,"LI",{});var nye=s(Z_);Pie=n(nye,"STRONG",{});var kot=s(Pie);NEo=r(kot,"pegasus"),kot.forEach(t),jEo=r(nye," \u2014 "),KN=n(nye,"A",{href:!0});var Sot=s(KN);DEo=r(Sot,"PegasusForCausalLM"),Sot.forEach(t),GEo=r(nye," (Pegasus model)"),nye.forEach(t),OEo=i(Q),e2=n(Q,"LI",{});var sye=s(e2);Iie=n(sye,"STRONG",{});var Rot=s(Iie);VEo=r(Rot,"plbart"),Rot.forEach(t),XEo=r(sye," \u2014 "),ZN=n(sye,"A",{href:!0});var Bot=s(ZN);zEo=r(Bot,"PLBartForCausalLM"),Bot.forEach(t),QEo=r(sye," (PLBart model)"),sye.forEach(t),WEo=i(Q),o2=n(Q,"LI",{});var lye=s(o2);qie=n(lye,"STRONG",{});var Pot=s(qie);HEo=r(Pot,"prophetnet"),Pot.forEach(t),UEo=r(lye," \u2014 "),ej=n(lye,"A",{href:!0});var Iot=s(ej);JEo=r(Iot,"ProphetNetForCausalLM"),Iot.forEach(t),YEo=r(lye," (ProphetNet model)"),lye.forEach(t),KEo=i(Q),r2=n(Q,"LI",{});var iye=s(r2);Nie=n(iye,"STRONG",{});var qot=s(Nie);ZEo=r(qot,"qdqbert"),qot.forEach(t),e5o=r(iye," \u2014 "),oj=n(iye,"A",{href:!0});var Not=s(oj);o5o=r(Not,"QDQBertLMHeadModel"),Not.forEach(t),r5o=r(iye," (QDQBert model)"),iye.forEach(t),t5o=i(Q),t2=n(Q,"LI",{});var dye=s(t2);jie=n(dye,"STRONG",{});var jot=s(jie);a5o=r(jot,"reformer"),jot.forEach(t),n5o=r(dye," \u2014 "),rj=n(dye,"A",{href:!0});var Dot=s(rj);s5o=r(Dot,"ReformerModelWithLMHead"),Dot.forEach(t),l5o=r(dye," (Reformer model)"),dye.forEach(t),i5o=i(Q),a2=n(Q,"LI",{});var cye=s(a2);Die=n(cye,"STRONG",{});var Got=s(Die);d5o=r(Got,"rembert"),Got.forEach(t),c5o=r(cye," \u2014 "),tj=n(cye,"A",{href:!0});var Oot=s(tj);f5o=r(Oot,"RemBertForCausalLM"),Oot.forEach(t),m5o=r(cye," (RemBERT model)"),cye.forEach(t),g5o=i(Q),n2=n(Q,"LI",{});var fye=s(n2);Gie=n(fye,"STRONG",{});var Vot=s(Gie);h5o=r(Vot,"roberta"),Vot.forEach(t),p5o=r(fye," \u2014 "),aj=n(fye,"A",{href:!0});var Xot=s(aj);u5o=r(Xot,"RobertaForCausalLM"),Xot.forEach(t),_5o=r(fye," (RoBERTa model)"),fye.forEach(t),b5o=i(Q),s2=n(Q,"LI",{});var mye=s(s2);Oie=n(mye,"STRONG",{});var zot=s(Oie);v5o=r(zot,"roformer"),zot.forEach(t),F5o=r(mye," \u2014 "),nj=n(mye,"A",{href:!0});var Qot=s(nj);T5o=r(Qot,"RoFormerForCausalLM"),Qot.forEach(t),M5o=r(mye," (RoFormer model)"),mye.forEach(t),E5o=i(Q),l2=n(Q,"LI",{});var gye=s(l2);Vie=n(gye,"STRONG",{});var Wot=s(Vie);C5o=r(Wot,"speech_to_text_2"),Wot.forEach(t),w5o=r(gye," \u2014 "),sj=n(gye,"A",{href:!0});var Hot=s(sj);A5o=r(Hot,"Speech2Text2ForCausalLM"),Hot.forEach(t),y5o=r(gye," (Speech2Text2 model)"),gye.forEach(t),L5o=i(Q),i2=n(Q,"LI",{});var hye=s(i2);Xie=n(hye,"STRONG",{});var Uot=s(Xie);x5o=r(Uot,"transfo-xl"),Uot.forEach(t),$5o=r(hye," \u2014 "),lj=n(hye,"A",{href:!0});var Jot=s(lj);k5o=r(Jot,"TransfoXLLMHeadModel"),Jot.forEach(t),S5o=r(hye," (Transformer-XL model)"),hye.forEach(t),R5o=i(Q),d2=n(Q,"LI",{});var pye=s(d2);zie=n(pye,"STRONG",{});var Yot=s(zie);B5o=r(Yot,"trocr"),Yot.forEach(t),P5o=r(pye," \u2014 "),ij=n(pye,"A",{href:!0});var Kot=s(ij);I5o=r(Kot,"TrOCRForCausalLM"),Kot.forEach(t),q5o=r(pye," (TrOCR model)"),pye.forEach(t),N5o=i(Q),c2=n(Q,"LI",{});var uye=s(c2);Qie=n(uye,"STRONG",{});var Zot=s(Qie);j5o=r(Zot,"xglm"),Zot.forEach(t),D5o=r(uye," \u2014 "),dj=n(uye,"A",{href:!0});var ert=s(dj);G5o=r(ert,"XGLMForCausalLM"),ert.forEach(t),O5o=r(uye," (XGLM model)"),uye.forEach(t),V5o=i(Q),f2=n(Q,"LI",{});var _ye=s(f2);Wie=n(_ye,"STRONG",{});var ort=s(Wie);X5o=r(ort,"xlm"),ort.forEach(t),z5o=r(_ye," \u2014 "),cj=n(_ye,"A",{href:!0});var rrt=s(cj);Q5o=r(rrt,"XLMWithLMHeadModel"),rrt.forEach(t),W5o=r(_ye," (XLM model)"),_ye.forEach(t),H5o=i(Q),m2=n(Q,"LI",{});var bye=s(m2);Hie=n(bye,"STRONG",{});var trt=s(Hie);U5o=r(trt,"xlm-prophetnet"),trt.forEach(t),J5o=r(bye," \u2014 "),fj=n(bye,"A",{href:!0});var art=s(fj);Y5o=r(art,"XLMProphetNetForCausalLM"),art.forEach(t),K5o=r(bye," (XLMProphetNet model)"),bye.forEach(t),Z5o=i(Q),g2=n(Q,"LI",{});var vye=s(g2);Uie=n(vye,"STRONG",{});var nrt=s(Uie);eCo=r(nrt,"xlm-roberta"),nrt.forEach(t),oCo=r(vye," \u2014 "),mj=n(vye,"A",{href:!0});var srt=s(mj);rCo=r(srt,"XLMRobertaForCausalLM"),srt.forEach(t),tCo=r(vye," (XLM-RoBERTa model)"),vye.forEach(t),aCo=i(Q),h2=n(Q,"LI",{});var Fye=s(h2);Jie=n(Fye,"STRONG",{});var lrt=s(Jie);nCo=r(lrt,"xlm-roberta-xl"),lrt.forEach(t),sCo=r(Fye," \u2014 "),gj=n(Fye,"A",{href:!0});var irt=s(gj);lCo=r(irt,"XLMRobertaXLForCausalLM"),irt.forEach(t),iCo=r(Fye," (XLM-RoBERTa-XL model)"),Fye.forEach(t),dCo=i(Q),p2=n(Q,"LI",{});var Tye=s(p2);Yie=n(Tye,"STRONG",{});var drt=s(Yie);cCo=r(drt,"xlnet"),drt.forEach(t),fCo=r(Tye," \u2014 "),hj=n(Tye,"A",{href:!0});var crt=s(hj);mCo=r(crt,"XLNetLMHeadModel"),crt.forEach(t),gCo=r(Tye," (XLNet model)"),Tye.forEach(t),Q.forEach(t),hCo=i(oa),u2=n(oa,"P",{});var Mye=s(u2);pCo=r(Mye,"The model is set in evaluation mode by default using "),Kie=n(Mye,"CODE",{});var frt=s(Kie);uCo=r(frt,"model.eval()"),frt.forEach(t),_Co=r(Mye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zie=n(Mye,"CODE",{});var mrt=s(Zie);bCo=r(mrt,"model.train()"),mrt.forEach(t),Mye.forEach(t),vCo=i(oa),T(_2.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),LIe=i(f),$i=n(f,"H2",{class:!0});var SNe=s($i);b2=n(SNe,"A",{id:!0,class:!0,href:!0});var grt=s(b2);ede=n(grt,"SPAN",{});var hrt=s(ede);T(V6.$$.fragment,hrt),hrt.forEach(t),grt.forEach(t),FCo=i(SNe),ode=n(SNe,"SPAN",{});var prt=s(ode);TCo=r(prt,"AutoModelForMaskedLM"),prt.forEach(t),SNe.forEach(t),xIe=i(f),ko=n(f,"DIV",{class:!0});var Os=s(ko);T(X6.$$.fragment,Os),MCo=i(Os),ki=n(Os,"P",{});var CK=s(ki);ECo=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pj=n(CK,"A",{href:!0});var urt=s(pj);CCo=r(urt,"from_pretrained()"),urt.forEach(t),wCo=r(CK," class method or the "),uj=n(CK,"A",{href:!0});var _rt=s(uj);ACo=r(_rt,"from_config()"),_rt.forEach(t),yCo=r(CK,` class
method.`),CK.forEach(t),LCo=i(Os),z6=n(Os,"P",{});var RNe=s(z6);xCo=r(RNe,"This class cannot be instantiated directly using "),rde=n(RNe,"CODE",{});var brt=s(rde);$Co=r(brt,"__init__()"),brt.forEach(t),kCo=r(RNe," (throws an error)."),RNe.forEach(t),SCo=i(Os),at=n(Os,"DIV",{class:!0});var fw=s(at);T(Q6.$$.fragment,fw),RCo=i(fw),tde=n(fw,"P",{});var vrt=s(tde);BCo=r(vrt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vrt.forEach(t),PCo=i(fw),Si=n(fw,"P",{});var wK=s(Si);ICo=r(wK,`Note:
Loading a model from its configuration file does `),ade=n(wK,"STRONG",{});var Frt=s(ade);qCo=r(Frt,"not"),Frt.forEach(t),NCo=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_j=n(wK,"A",{href:!0});var Trt=s(_j);jCo=r(Trt,"from_pretrained()"),Trt.forEach(t),DCo=r(wK," to load the model weights."),wK.forEach(t),GCo=i(fw),T(v2.$$.fragment,fw),fw.forEach(t),OCo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(W6.$$.fragment,ra),VCo=i(ra),nde=n(ra,"P",{});var Mrt=s(nde);XCo=r(Mrt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Mrt.forEach(t),zCo=i(ra),xa=n(ra,"P",{});var mw=s(xa);QCo=r(mw,"The model class to instantiate is selected based on the "),sde=n(mw,"CODE",{});var Ert=s(sde);WCo=r(Ert,"model_type"),Ert.forEach(t),HCo=r(mw,` property of the config object (either
passed as an argument or loaded from `),lde=n(mw,"CODE",{});var Crt=s(lde);UCo=r(Crt,"pretrained_model_name_or_path"),Crt.forEach(t),JCo=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ide=n(mw,"CODE",{});var wrt=s(ide);YCo=r(wrt,"pretrained_model_name_or_path"),wrt.forEach(t),KCo=r(mw,":"),mw.forEach(t),ZCo=i(ra),W=n(ra,"UL",{});var H=s(W);F2=n(H,"LI",{});var Eye=s(F2);dde=n(Eye,"STRONG",{});var Art=s(dde);e3o=r(Art,"albert"),Art.forEach(t),o3o=r(Eye," \u2014 "),bj=n(Eye,"A",{href:!0});var yrt=s(bj);r3o=r(yrt,"AlbertForMaskedLM"),yrt.forEach(t),t3o=r(Eye," (ALBERT model)"),Eye.forEach(t),a3o=i(H),T2=n(H,"LI",{});var Cye=s(T2);cde=n(Cye,"STRONG",{});var Lrt=s(cde);n3o=r(Lrt,"bart"),Lrt.forEach(t),s3o=r(Cye," \u2014 "),vj=n(Cye,"A",{href:!0});var xrt=s(vj);l3o=r(xrt,"BartForConditionalGeneration"),xrt.forEach(t),i3o=r(Cye," (BART model)"),Cye.forEach(t),d3o=i(H),M2=n(H,"LI",{});var wye=s(M2);fde=n(wye,"STRONG",{});var $rt=s(fde);c3o=r($rt,"bert"),$rt.forEach(t),f3o=r(wye," \u2014 "),Fj=n(wye,"A",{href:!0});var krt=s(Fj);m3o=r(krt,"BertForMaskedLM"),krt.forEach(t),g3o=r(wye," (BERT model)"),wye.forEach(t),h3o=i(H),E2=n(H,"LI",{});var Aye=s(E2);mde=n(Aye,"STRONG",{});var Srt=s(mde);p3o=r(Srt,"big_bird"),Srt.forEach(t),u3o=r(Aye," \u2014 "),Tj=n(Aye,"A",{href:!0});var Rrt=s(Tj);_3o=r(Rrt,"BigBirdForMaskedLM"),Rrt.forEach(t),b3o=r(Aye," (BigBird model)"),Aye.forEach(t),v3o=i(H),C2=n(H,"LI",{});var yye=s(C2);gde=n(yye,"STRONG",{});var Brt=s(gde);F3o=r(Brt,"camembert"),Brt.forEach(t),T3o=r(yye," \u2014 "),Mj=n(yye,"A",{href:!0});var Prt=s(Mj);M3o=r(Prt,"CamembertForMaskedLM"),Prt.forEach(t),E3o=r(yye," (CamemBERT model)"),yye.forEach(t),C3o=i(H),w2=n(H,"LI",{});var Lye=s(w2);hde=n(Lye,"STRONG",{});var Irt=s(hde);w3o=r(Irt,"convbert"),Irt.forEach(t),A3o=r(Lye," \u2014 "),Ej=n(Lye,"A",{href:!0});var qrt=s(Ej);y3o=r(qrt,"ConvBertForMaskedLM"),qrt.forEach(t),L3o=r(Lye," (ConvBERT model)"),Lye.forEach(t),x3o=i(H),A2=n(H,"LI",{});var xye=s(A2);pde=n(xye,"STRONG",{});var Nrt=s(pde);$3o=r(Nrt,"data2vec-text"),Nrt.forEach(t),k3o=r(xye," \u2014 "),Cj=n(xye,"A",{href:!0});var jrt=s(Cj);S3o=r(jrt,"Data2VecTextForMaskedLM"),jrt.forEach(t),R3o=r(xye," (Data2VecText model)"),xye.forEach(t),B3o=i(H),y2=n(H,"LI",{});var $ye=s(y2);ude=n($ye,"STRONG",{});var Drt=s(ude);P3o=r(Drt,"deberta"),Drt.forEach(t),I3o=r($ye," \u2014 "),wj=n($ye,"A",{href:!0});var Grt=s(wj);q3o=r(Grt,"DebertaForMaskedLM"),Grt.forEach(t),N3o=r($ye," (DeBERTa model)"),$ye.forEach(t),j3o=i(H),L2=n(H,"LI",{});var kye=s(L2);_de=n(kye,"STRONG",{});var Ort=s(_de);D3o=r(Ort,"deberta-v2"),Ort.forEach(t),G3o=r(kye," \u2014 "),Aj=n(kye,"A",{href:!0});var Vrt=s(Aj);O3o=r(Vrt,"DebertaV2ForMaskedLM"),Vrt.forEach(t),V3o=r(kye," (DeBERTa-v2 model)"),kye.forEach(t),X3o=i(H),x2=n(H,"LI",{});var Sye=s(x2);bde=n(Sye,"STRONG",{});var Xrt=s(bde);z3o=r(Xrt,"distilbert"),Xrt.forEach(t),Q3o=r(Sye," \u2014 "),yj=n(Sye,"A",{href:!0});var zrt=s(yj);W3o=r(zrt,"DistilBertForMaskedLM"),zrt.forEach(t),H3o=r(Sye," (DistilBERT model)"),Sye.forEach(t),U3o=i(H),$2=n(H,"LI",{});var Rye=s($2);vde=n(Rye,"STRONG",{});var Qrt=s(vde);J3o=r(Qrt,"electra"),Qrt.forEach(t),Y3o=r(Rye," \u2014 "),Lj=n(Rye,"A",{href:!0});var Wrt=s(Lj);K3o=r(Wrt,"ElectraForMaskedLM"),Wrt.forEach(t),Z3o=r(Rye," (ELECTRA model)"),Rye.forEach(t),ewo=i(H),k2=n(H,"LI",{});var Bye=s(k2);Fde=n(Bye,"STRONG",{});var Hrt=s(Fde);owo=r(Hrt,"flaubert"),Hrt.forEach(t),rwo=r(Bye," \u2014 "),xj=n(Bye,"A",{href:!0});var Urt=s(xj);two=r(Urt,"FlaubertWithLMHeadModel"),Urt.forEach(t),awo=r(Bye," (FlauBERT model)"),Bye.forEach(t),nwo=i(H),S2=n(H,"LI",{});var Pye=s(S2);Tde=n(Pye,"STRONG",{});var Jrt=s(Tde);swo=r(Jrt,"fnet"),Jrt.forEach(t),lwo=r(Pye," \u2014 "),$j=n(Pye,"A",{href:!0});var Yrt=s($j);iwo=r(Yrt,"FNetForMaskedLM"),Yrt.forEach(t),dwo=r(Pye," (FNet model)"),Pye.forEach(t),cwo=i(H),R2=n(H,"LI",{});var Iye=s(R2);Mde=n(Iye,"STRONG",{});var Krt=s(Mde);fwo=r(Krt,"funnel"),Krt.forEach(t),mwo=r(Iye," \u2014 "),kj=n(Iye,"A",{href:!0});var Zrt=s(kj);gwo=r(Zrt,"FunnelForMaskedLM"),Zrt.forEach(t),hwo=r(Iye," (Funnel Transformer model)"),Iye.forEach(t),pwo=i(H),B2=n(H,"LI",{});var qye=s(B2);Ede=n(qye,"STRONG",{});var ett=s(Ede);uwo=r(ett,"ibert"),ett.forEach(t),_wo=r(qye," \u2014 "),Sj=n(qye,"A",{href:!0});var ott=s(Sj);bwo=r(ott,"IBertForMaskedLM"),ott.forEach(t),vwo=r(qye," (I-BERT model)"),qye.forEach(t),Fwo=i(H),P2=n(H,"LI",{});var Nye=s(P2);Cde=n(Nye,"STRONG",{});var rtt=s(Cde);Two=r(rtt,"layoutlm"),rtt.forEach(t),Mwo=r(Nye," \u2014 "),Rj=n(Nye,"A",{href:!0});var ttt=s(Rj);Ewo=r(ttt,"LayoutLMForMaskedLM"),ttt.forEach(t),Cwo=r(Nye," (LayoutLM model)"),Nye.forEach(t),wwo=i(H),I2=n(H,"LI",{});var jye=s(I2);wde=n(jye,"STRONG",{});var att=s(wde);Awo=r(att,"longformer"),att.forEach(t),ywo=r(jye," \u2014 "),Bj=n(jye,"A",{href:!0});var ntt=s(Bj);Lwo=r(ntt,"LongformerForMaskedLM"),ntt.forEach(t),xwo=r(jye," (Longformer model)"),jye.forEach(t),$wo=i(H),q2=n(H,"LI",{});var Dye=s(q2);Ade=n(Dye,"STRONG",{});var stt=s(Ade);kwo=r(stt,"mbart"),stt.forEach(t),Swo=r(Dye," \u2014 "),Pj=n(Dye,"A",{href:!0});var ltt=s(Pj);Rwo=r(ltt,"MBartForConditionalGeneration"),ltt.forEach(t),Bwo=r(Dye," (mBART model)"),Dye.forEach(t),Pwo=i(H),N2=n(H,"LI",{});var Gye=s(N2);yde=n(Gye,"STRONG",{});var itt=s(yde);Iwo=r(itt,"megatron-bert"),itt.forEach(t),qwo=r(Gye," \u2014 "),Ij=n(Gye,"A",{href:!0});var dtt=s(Ij);Nwo=r(dtt,"MegatronBertForMaskedLM"),dtt.forEach(t),jwo=r(Gye," (MegatronBert model)"),Gye.forEach(t),Dwo=i(H),j2=n(H,"LI",{});var Oye=s(j2);Lde=n(Oye,"STRONG",{});var ctt=s(Lde);Gwo=r(ctt,"mobilebert"),ctt.forEach(t),Owo=r(Oye," \u2014 "),qj=n(Oye,"A",{href:!0});var ftt=s(qj);Vwo=r(ftt,"MobileBertForMaskedLM"),ftt.forEach(t),Xwo=r(Oye," (MobileBERT model)"),Oye.forEach(t),zwo=i(H),D2=n(H,"LI",{});var Vye=s(D2);xde=n(Vye,"STRONG",{});var mtt=s(xde);Qwo=r(mtt,"mpnet"),mtt.forEach(t),Wwo=r(Vye," \u2014 "),Nj=n(Vye,"A",{href:!0});var gtt=s(Nj);Hwo=r(gtt,"MPNetForMaskedLM"),gtt.forEach(t),Uwo=r(Vye," (MPNet model)"),Vye.forEach(t),Jwo=i(H),G2=n(H,"LI",{});var Xye=s(G2);$de=n(Xye,"STRONG",{});var htt=s($de);Ywo=r(htt,"nystromformer"),htt.forEach(t),Kwo=r(Xye," \u2014 "),jj=n(Xye,"A",{href:!0});var ptt=s(jj);Zwo=r(ptt,"NystromformerForMaskedLM"),ptt.forEach(t),eAo=r(Xye," (Nystromformer model)"),Xye.forEach(t),oAo=i(H),O2=n(H,"LI",{});var zye=s(O2);kde=n(zye,"STRONG",{});var utt=s(kde);rAo=r(utt,"perceiver"),utt.forEach(t),tAo=r(zye," \u2014 "),Dj=n(zye,"A",{href:!0});var _tt=s(Dj);aAo=r(_tt,"PerceiverForMaskedLM"),_tt.forEach(t),nAo=r(zye," (Perceiver model)"),zye.forEach(t),sAo=i(H),V2=n(H,"LI",{});var Qye=s(V2);Sde=n(Qye,"STRONG",{});var btt=s(Sde);lAo=r(btt,"qdqbert"),btt.forEach(t),iAo=r(Qye," \u2014 "),Gj=n(Qye,"A",{href:!0});var vtt=s(Gj);dAo=r(vtt,"QDQBertForMaskedLM"),vtt.forEach(t),cAo=r(Qye," (QDQBert model)"),Qye.forEach(t),fAo=i(H),X2=n(H,"LI",{});var Wye=s(X2);Rde=n(Wye,"STRONG",{});var Ftt=s(Rde);mAo=r(Ftt,"reformer"),Ftt.forEach(t),gAo=r(Wye," \u2014 "),Oj=n(Wye,"A",{href:!0});var Ttt=s(Oj);hAo=r(Ttt,"ReformerForMaskedLM"),Ttt.forEach(t),pAo=r(Wye," (Reformer model)"),Wye.forEach(t),uAo=i(H),z2=n(H,"LI",{});var Hye=s(z2);Bde=n(Hye,"STRONG",{});var Mtt=s(Bde);_Ao=r(Mtt,"rembert"),Mtt.forEach(t),bAo=r(Hye," \u2014 "),Vj=n(Hye,"A",{href:!0});var Ett=s(Vj);vAo=r(Ett,"RemBertForMaskedLM"),Ett.forEach(t),FAo=r(Hye," (RemBERT model)"),Hye.forEach(t),TAo=i(H),Q2=n(H,"LI",{});var Uye=s(Q2);Pde=n(Uye,"STRONG",{});var Ctt=s(Pde);MAo=r(Ctt,"roberta"),Ctt.forEach(t),EAo=r(Uye," \u2014 "),Xj=n(Uye,"A",{href:!0});var wtt=s(Xj);CAo=r(wtt,"RobertaForMaskedLM"),wtt.forEach(t),wAo=r(Uye," (RoBERTa model)"),Uye.forEach(t),AAo=i(H),W2=n(H,"LI",{});var Jye=s(W2);Ide=n(Jye,"STRONG",{});var Att=s(Ide);yAo=r(Att,"roformer"),Att.forEach(t),LAo=r(Jye," \u2014 "),zj=n(Jye,"A",{href:!0});var ytt=s(zj);xAo=r(ytt,"RoFormerForMaskedLM"),ytt.forEach(t),$Ao=r(Jye," (RoFormer model)"),Jye.forEach(t),kAo=i(H),H2=n(H,"LI",{});var Yye=s(H2);qde=n(Yye,"STRONG",{});var Ltt=s(qde);SAo=r(Ltt,"squeezebert"),Ltt.forEach(t),RAo=r(Yye," \u2014 "),Qj=n(Yye,"A",{href:!0});var xtt=s(Qj);BAo=r(xtt,"SqueezeBertForMaskedLM"),xtt.forEach(t),PAo=r(Yye," (SqueezeBERT model)"),Yye.forEach(t),IAo=i(H),U2=n(H,"LI",{});var Kye=s(U2);Nde=n(Kye,"STRONG",{});var $tt=s(Nde);qAo=r($tt,"tapas"),$tt.forEach(t),NAo=r(Kye," \u2014 "),Wj=n(Kye,"A",{href:!0});var ktt=s(Wj);jAo=r(ktt,"TapasForMaskedLM"),ktt.forEach(t),DAo=r(Kye," (TAPAS model)"),Kye.forEach(t),GAo=i(H),J2=n(H,"LI",{});var Zye=s(J2);jde=n(Zye,"STRONG",{});var Stt=s(jde);OAo=r(Stt,"wav2vec2"),Stt.forEach(t),VAo=r(Zye," \u2014 "),Dde=n(Zye,"CODE",{});var Rtt=s(Dde);XAo=r(Rtt,"Wav2Vec2ForMaskedLM"),Rtt.forEach(t),zAo=r(Zye," (Wav2Vec2 model)"),Zye.forEach(t),QAo=i(H),Y2=n(H,"LI",{});var eLe=s(Y2);Gde=n(eLe,"STRONG",{});var Btt=s(Gde);WAo=r(Btt,"xlm"),Btt.forEach(t),HAo=r(eLe," \u2014 "),Hj=n(eLe,"A",{href:!0});var Ptt=s(Hj);UAo=r(Ptt,"XLMWithLMHeadModel"),Ptt.forEach(t),JAo=r(eLe," (XLM model)"),eLe.forEach(t),YAo=i(H),K2=n(H,"LI",{});var oLe=s(K2);Ode=n(oLe,"STRONG",{});var Itt=s(Ode);KAo=r(Itt,"xlm-roberta"),Itt.forEach(t),ZAo=r(oLe," \u2014 "),Uj=n(oLe,"A",{href:!0});var qtt=s(Uj);e6o=r(qtt,"XLMRobertaForMaskedLM"),qtt.forEach(t),o6o=r(oLe," (XLM-RoBERTa model)"),oLe.forEach(t),r6o=i(H),Z2=n(H,"LI",{});var rLe=s(Z2);Vde=n(rLe,"STRONG",{});var Ntt=s(Vde);t6o=r(Ntt,"xlm-roberta-xl"),Ntt.forEach(t),a6o=r(rLe," \u2014 "),Jj=n(rLe,"A",{href:!0});var jtt=s(Jj);n6o=r(jtt,"XLMRobertaXLForMaskedLM"),jtt.forEach(t),s6o=r(rLe," (XLM-RoBERTa-XL model)"),rLe.forEach(t),l6o=i(H),e1=n(H,"LI",{});var tLe=s(e1);Xde=n(tLe,"STRONG",{});var Dtt=s(Xde);i6o=r(Dtt,"yoso"),Dtt.forEach(t),d6o=r(tLe," \u2014 "),Yj=n(tLe,"A",{href:!0});var Gtt=s(Yj);c6o=r(Gtt,"YosoForMaskedLM"),Gtt.forEach(t),f6o=r(tLe," (YOSO model)"),tLe.forEach(t),H.forEach(t),m6o=i(ra),o1=n(ra,"P",{});var aLe=s(o1);g6o=r(aLe,"The model is set in evaluation mode by default using "),zde=n(aLe,"CODE",{});var Ott=s(zde);h6o=r(Ott,"model.eval()"),Ott.forEach(t),p6o=r(aLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qde=n(aLe,"CODE",{});var Vtt=s(Qde);u6o=r(Vtt,"model.train()"),Vtt.forEach(t),aLe.forEach(t),_6o=i(ra),T(r1.$$.fragment,ra),ra.forEach(t),Os.forEach(t),$Ie=i(f),Ri=n(f,"H2",{class:!0});var BNe=s(Ri);t1=n(BNe,"A",{id:!0,class:!0,href:!0});var Xtt=s(t1);Wde=n(Xtt,"SPAN",{});var ztt=s(Wde);T(H6.$$.fragment,ztt),ztt.forEach(t),Xtt.forEach(t),b6o=i(BNe),Hde=n(BNe,"SPAN",{});var Qtt=s(Hde);v6o=r(Qtt,"AutoModelForSeq2SeqLM"),Qtt.forEach(t),BNe.forEach(t),kIe=i(f),So=n(f,"DIV",{class:!0});var Vs=s(So);T(U6.$$.fragment,Vs),F6o=i(Vs),Bi=n(Vs,"P",{});var AK=s(Bi);T6o=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Kj=n(AK,"A",{href:!0});var Wtt=s(Kj);M6o=r(Wtt,"from_pretrained()"),Wtt.forEach(t),E6o=r(AK," class method or the "),Zj=n(AK,"A",{href:!0});var Htt=s(Zj);C6o=r(Htt,"from_config()"),Htt.forEach(t),w6o=r(AK,` class
method.`),AK.forEach(t),A6o=i(Vs),J6=n(Vs,"P",{});var PNe=s(J6);y6o=r(PNe,"This class cannot be instantiated directly using "),Ude=n(PNe,"CODE",{});var Utt=s(Ude);L6o=r(Utt,"__init__()"),Utt.forEach(t),x6o=r(PNe," (throws an error)."),PNe.forEach(t),$6o=i(Vs),nt=n(Vs,"DIV",{class:!0});var gw=s(nt);T(Y6.$$.fragment,gw),k6o=i(gw),Jde=n(gw,"P",{});var Jtt=s(Jde);S6o=r(Jtt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jtt.forEach(t),R6o=i(gw),Pi=n(gw,"P",{});var yK=s(Pi);B6o=r(yK,`Note:
Loading a model from its configuration file does `),Yde=n(yK,"STRONG",{});var Ytt=s(Yde);P6o=r(Ytt,"not"),Ytt.forEach(t),I6o=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),eD=n(yK,"A",{href:!0});var Ktt=s(eD);q6o=r(Ktt,"from_pretrained()"),Ktt.forEach(t),N6o=r(yK," to load the model weights."),yK.forEach(t),j6o=i(gw),T(a1.$$.fragment,gw),gw.forEach(t),D6o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(K6.$$.fragment,ta),G6o=i(ta),Kde=n(ta,"P",{});var Ztt=s(Kde);O6o=r(Ztt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ztt.forEach(t),V6o=i(ta),$a=n(ta,"P",{});var hw=s($a);X6o=r(hw,"The model class to instantiate is selected based on the "),Zde=n(hw,"CODE",{});var eat=s(Zde);z6o=r(eat,"model_type"),eat.forEach(t),Q6o=r(hw,` property of the config object (either
passed as an argument or loaded from `),ece=n(hw,"CODE",{});var oat=s(ece);W6o=r(oat,"pretrained_model_name_or_path"),oat.forEach(t),H6o=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oce=n(hw,"CODE",{});var rat=s(oce);U6o=r(rat,"pretrained_model_name_or_path"),rat.forEach(t),J6o=r(hw,":"),hw.forEach(t),Y6o=i(ta),he=n(ta,"UL",{});var ue=s(he);n1=n(ue,"LI",{});var nLe=s(n1);rce=n(nLe,"STRONG",{});var tat=s(rce);K6o=r(tat,"bart"),tat.forEach(t),Z6o=r(nLe," \u2014 "),oD=n(nLe,"A",{href:!0});var aat=s(oD);eyo=r(aat,"BartForConditionalGeneration"),aat.forEach(t),oyo=r(nLe," (BART model)"),nLe.forEach(t),ryo=i(ue),s1=n(ue,"LI",{});var sLe=s(s1);tce=n(sLe,"STRONG",{});var nat=s(tce);tyo=r(nat,"bigbird_pegasus"),nat.forEach(t),ayo=r(sLe," \u2014 "),rD=n(sLe,"A",{href:!0});var sat=s(rD);nyo=r(sat,"BigBirdPegasusForConditionalGeneration"),sat.forEach(t),syo=r(sLe," (BigBirdPegasus model)"),sLe.forEach(t),lyo=i(ue),l1=n(ue,"LI",{});var lLe=s(l1);ace=n(lLe,"STRONG",{});var lat=s(ace);iyo=r(lat,"blenderbot"),lat.forEach(t),dyo=r(lLe," \u2014 "),tD=n(lLe,"A",{href:!0});var iat=s(tD);cyo=r(iat,"BlenderbotForConditionalGeneration"),iat.forEach(t),fyo=r(lLe," (Blenderbot model)"),lLe.forEach(t),myo=i(ue),i1=n(ue,"LI",{});var iLe=s(i1);nce=n(iLe,"STRONG",{});var dat=s(nce);gyo=r(dat,"blenderbot-small"),dat.forEach(t),hyo=r(iLe," \u2014 "),aD=n(iLe,"A",{href:!0});var cat=s(aD);pyo=r(cat,"BlenderbotSmallForConditionalGeneration"),cat.forEach(t),uyo=r(iLe," (BlenderbotSmall model)"),iLe.forEach(t),_yo=i(ue),d1=n(ue,"LI",{});var dLe=s(d1);sce=n(dLe,"STRONG",{});var fat=s(sce);byo=r(fat,"encoder-decoder"),fat.forEach(t),vyo=r(dLe," \u2014 "),nD=n(dLe,"A",{href:!0});var mat=s(nD);Fyo=r(mat,"EncoderDecoderModel"),mat.forEach(t),Tyo=r(dLe," (Encoder decoder model)"),dLe.forEach(t),Myo=i(ue),c1=n(ue,"LI",{});var cLe=s(c1);lce=n(cLe,"STRONG",{});var gat=s(lce);Eyo=r(gat,"fsmt"),gat.forEach(t),Cyo=r(cLe," \u2014 "),sD=n(cLe,"A",{href:!0});var hat=s(sD);wyo=r(hat,"FSMTForConditionalGeneration"),hat.forEach(t),Ayo=r(cLe," (FairSeq Machine-Translation model)"),cLe.forEach(t),yyo=i(ue),f1=n(ue,"LI",{});var fLe=s(f1);ice=n(fLe,"STRONG",{});var pat=s(ice);Lyo=r(pat,"led"),pat.forEach(t),xyo=r(fLe," \u2014 "),lD=n(fLe,"A",{href:!0});var uat=s(lD);$yo=r(uat,"LEDForConditionalGeneration"),uat.forEach(t),kyo=r(fLe," (LED model)"),fLe.forEach(t),Syo=i(ue),m1=n(ue,"LI",{});var mLe=s(m1);dce=n(mLe,"STRONG",{});var _at=s(dce);Ryo=r(_at,"m2m_100"),_at.forEach(t),Byo=r(mLe," \u2014 "),iD=n(mLe,"A",{href:!0});var bat=s(iD);Pyo=r(bat,"M2M100ForConditionalGeneration"),bat.forEach(t),Iyo=r(mLe," (M2M100 model)"),mLe.forEach(t),qyo=i(ue),g1=n(ue,"LI",{});var gLe=s(g1);cce=n(gLe,"STRONG",{});var vat=s(cce);Nyo=r(vat,"marian"),vat.forEach(t),jyo=r(gLe," \u2014 "),dD=n(gLe,"A",{href:!0});var Fat=s(dD);Dyo=r(Fat,"MarianMTModel"),Fat.forEach(t),Gyo=r(gLe," (Marian model)"),gLe.forEach(t),Oyo=i(ue),h1=n(ue,"LI",{});var hLe=s(h1);fce=n(hLe,"STRONG",{});var Tat=s(fce);Vyo=r(Tat,"mbart"),Tat.forEach(t),Xyo=r(hLe," \u2014 "),cD=n(hLe,"A",{href:!0});var Mat=s(cD);zyo=r(Mat,"MBartForConditionalGeneration"),Mat.forEach(t),Qyo=r(hLe," (mBART model)"),hLe.forEach(t),Wyo=i(ue),p1=n(ue,"LI",{});var pLe=s(p1);mce=n(pLe,"STRONG",{});var Eat=s(mce);Hyo=r(Eat,"mt5"),Eat.forEach(t),Uyo=r(pLe," \u2014 "),fD=n(pLe,"A",{href:!0});var Cat=s(fD);Jyo=r(Cat,"MT5ForConditionalGeneration"),Cat.forEach(t),Yyo=r(pLe," (mT5 model)"),pLe.forEach(t),Kyo=i(ue),u1=n(ue,"LI",{});var uLe=s(u1);gce=n(uLe,"STRONG",{});var wat=s(gce);Zyo=r(wat,"pegasus"),wat.forEach(t),eLo=r(uLe," \u2014 "),mD=n(uLe,"A",{href:!0});var Aat=s(mD);oLo=r(Aat,"PegasusForConditionalGeneration"),Aat.forEach(t),rLo=r(uLe," (Pegasus model)"),uLe.forEach(t),tLo=i(ue),_1=n(ue,"LI",{});var _Le=s(_1);hce=n(_Le,"STRONG",{});var yat=s(hce);aLo=r(yat,"plbart"),yat.forEach(t),nLo=r(_Le," \u2014 "),gD=n(_Le,"A",{href:!0});var Lat=s(gD);sLo=r(Lat,"PLBartForConditionalGeneration"),Lat.forEach(t),lLo=r(_Le," (PLBart model)"),_Le.forEach(t),iLo=i(ue),b1=n(ue,"LI",{});var bLe=s(b1);pce=n(bLe,"STRONG",{});var xat=s(pce);dLo=r(xat,"prophetnet"),xat.forEach(t),cLo=r(bLe," \u2014 "),hD=n(bLe,"A",{href:!0});var $at=s(hD);fLo=r($at,"ProphetNetForConditionalGeneration"),$at.forEach(t),mLo=r(bLe," (ProphetNet model)"),bLe.forEach(t),gLo=i(ue),v1=n(ue,"LI",{});var vLe=s(v1);uce=n(vLe,"STRONG",{});var kat=s(uce);hLo=r(kat,"t5"),kat.forEach(t),pLo=r(vLe," \u2014 "),pD=n(vLe,"A",{href:!0});var Sat=s(pD);uLo=r(Sat,"T5ForConditionalGeneration"),Sat.forEach(t),_Lo=r(vLe," (T5 model)"),vLe.forEach(t),bLo=i(ue),F1=n(ue,"LI",{});var FLe=s(F1);_ce=n(FLe,"STRONG",{});var Rat=s(_ce);vLo=r(Rat,"tapex"),Rat.forEach(t),FLo=r(FLe," \u2014 "),uD=n(FLe,"A",{href:!0});var Bat=s(uD);TLo=r(Bat,"BartForConditionalGeneration"),Bat.forEach(t),MLo=r(FLe," (TAPEX model)"),FLe.forEach(t),ELo=i(ue),T1=n(ue,"LI",{});var TLe=s(T1);bce=n(TLe,"STRONG",{});var Pat=s(bce);CLo=r(Pat,"xlm-prophetnet"),Pat.forEach(t),wLo=r(TLe," \u2014 "),_D=n(TLe,"A",{href:!0});var Iat=s(_D);ALo=r(Iat,"XLMProphetNetForConditionalGeneration"),Iat.forEach(t),yLo=r(TLe," (XLMProphetNet model)"),TLe.forEach(t),ue.forEach(t),LLo=i(ta),M1=n(ta,"P",{});var MLe=s(M1);xLo=r(MLe,"The model is set in evaluation mode by default using "),vce=n(MLe,"CODE",{});var qat=s(vce);$Lo=r(qat,"model.eval()"),qat.forEach(t),kLo=r(MLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fce=n(MLe,"CODE",{});var Nat=s(Fce);SLo=r(Nat,"model.train()"),Nat.forEach(t),MLe.forEach(t),RLo=i(ta),T(E1.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),SIe=i(f),Ii=n(f,"H2",{class:!0});var INe=s(Ii);C1=n(INe,"A",{id:!0,class:!0,href:!0});var jat=s(C1);Tce=n(jat,"SPAN",{});var Dat=s(Tce);T(Z6.$$.fragment,Dat),Dat.forEach(t),jat.forEach(t),BLo=i(INe),Mce=n(INe,"SPAN",{});var Gat=s(Mce);PLo=r(Gat,"AutoModelForSequenceClassification"),Gat.forEach(t),INe.forEach(t),RIe=i(f),Ro=n(f,"DIV",{class:!0});var Xs=s(Ro);T(ey.$$.fragment,Xs),ILo=i(Xs),qi=n(Xs,"P",{});var LK=s(qi);qLo=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bD=n(LK,"A",{href:!0});var Oat=s(bD);NLo=r(Oat,"from_pretrained()"),Oat.forEach(t),jLo=r(LK," class method or the "),vD=n(LK,"A",{href:!0});var Vat=s(vD);DLo=r(Vat,"from_config()"),Vat.forEach(t),GLo=r(LK,` class
method.`),LK.forEach(t),OLo=i(Xs),oy=n(Xs,"P",{});var qNe=s(oy);VLo=r(qNe,"This class cannot be instantiated directly using "),Ece=n(qNe,"CODE",{});var Xat=s(Ece);XLo=r(Xat,"__init__()"),Xat.forEach(t),zLo=r(qNe," (throws an error)."),qNe.forEach(t),QLo=i(Xs),st=n(Xs,"DIV",{class:!0});var pw=s(st);T(ry.$$.fragment,pw),WLo=i(pw),Cce=n(pw,"P",{});var zat=s(Cce);HLo=r(zat,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zat.forEach(t),ULo=i(pw),Ni=n(pw,"P",{});var xK=s(Ni);JLo=r(xK,`Note:
Loading a model from its configuration file does `),wce=n(xK,"STRONG",{});var Qat=s(wce);YLo=r(Qat,"not"),Qat.forEach(t),KLo=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FD=n(xK,"A",{href:!0});var Wat=s(FD);ZLo=r(Wat,"from_pretrained()"),Wat.forEach(t),e8o=r(xK," to load the model weights."),xK.forEach(t),o8o=i(pw),T(w1.$$.fragment,pw),pw.forEach(t),r8o=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(ty.$$.fragment,aa),t8o=i(aa),Ace=n(aa,"P",{});var Hat=s(Ace);a8o=r(Hat,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Hat.forEach(t),n8o=i(aa),ka=n(aa,"P",{});var uw=s(ka);s8o=r(uw,"The model class to instantiate is selected based on the "),yce=n(uw,"CODE",{});var Uat=s(yce);l8o=r(Uat,"model_type"),Uat.forEach(t),i8o=r(uw,` property of the config object (either
passed as an argument or loaded from `),Lce=n(uw,"CODE",{});var Jat=s(Lce);d8o=r(Jat,"pretrained_model_name_or_path"),Jat.forEach(t),c8o=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=n(uw,"CODE",{});var Yat=s(xce);f8o=r(Yat,"pretrained_model_name_or_path"),Yat.forEach(t),m8o=r(uw,":"),uw.forEach(t),g8o=i(aa),q=n(aa,"UL",{});var N=s(q);A1=n(N,"LI",{});var ELe=s(A1);$ce=n(ELe,"STRONG",{});var Kat=s($ce);h8o=r(Kat,"albert"),Kat.forEach(t),p8o=r(ELe," \u2014 "),TD=n(ELe,"A",{href:!0});var Zat=s(TD);u8o=r(Zat,"AlbertForSequenceClassification"),Zat.forEach(t),_8o=r(ELe," (ALBERT model)"),ELe.forEach(t),b8o=i(N),y1=n(N,"LI",{});var CLe=s(y1);kce=n(CLe,"STRONG",{});var ent=s(kce);v8o=r(ent,"bart"),ent.forEach(t),F8o=r(CLe," \u2014 "),MD=n(CLe,"A",{href:!0});var ont=s(MD);T8o=r(ont,"BartForSequenceClassification"),ont.forEach(t),M8o=r(CLe," (BART model)"),CLe.forEach(t),E8o=i(N),L1=n(N,"LI",{});var wLe=s(L1);Sce=n(wLe,"STRONG",{});var rnt=s(Sce);C8o=r(rnt,"bert"),rnt.forEach(t),w8o=r(wLe," \u2014 "),ED=n(wLe,"A",{href:!0});var tnt=s(ED);A8o=r(tnt,"BertForSequenceClassification"),tnt.forEach(t),y8o=r(wLe," (BERT model)"),wLe.forEach(t),L8o=i(N),x1=n(N,"LI",{});var ALe=s(x1);Rce=n(ALe,"STRONG",{});var ant=s(Rce);x8o=r(ant,"big_bird"),ant.forEach(t),$8o=r(ALe," \u2014 "),CD=n(ALe,"A",{href:!0});var nnt=s(CD);k8o=r(nnt,"BigBirdForSequenceClassification"),nnt.forEach(t),S8o=r(ALe," (BigBird model)"),ALe.forEach(t),R8o=i(N),$1=n(N,"LI",{});var yLe=s($1);Bce=n(yLe,"STRONG",{});var snt=s(Bce);B8o=r(snt,"bigbird_pegasus"),snt.forEach(t),P8o=r(yLe," \u2014 "),wD=n(yLe,"A",{href:!0});var lnt=s(wD);I8o=r(lnt,"BigBirdPegasusForSequenceClassification"),lnt.forEach(t),q8o=r(yLe," (BigBirdPegasus model)"),yLe.forEach(t),N8o=i(N),k1=n(N,"LI",{});var LLe=s(k1);Pce=n(LLe,"STRONG",{});var int=s(Pce);j8o=r(int,"camembert"),int.forEach(t),D8o=r(LLe," \u2014 "),AD=n(LLe,"A",{href:!0});var dnt=s(AD);G8o=r(dnt,"CamembertForSequenceClassification"),dnt.forEach(t),O8o=r(LLe," (CamemBERT model)"),LLe.forEach(t),V8o=i(N),S1=n(N,"LI",{});var xLe=s(S1);Ice=n(xLe,"STRONG",{});var cnt=s(Ice);X8o=r(cnt,"canine"),cnt.forEach(t),z8o=r(xLe," \u2014 "),yD=n(xLe,"A",{href:!0});var fnt=s(yD);Q8o=r(fnt,"CanineForSequenceClassification"),fnt.forEach(t),W8o=r(xLe," (Canine model)"),xLe.forEach(t),H8o=i(N),R1=n(N,"LI",{});var $Le=s(R1);qce=n($Le,"STRONG",{});var mnt=s(qce);U8o=r(mnt,"convbert"),mnt.forEach(t),J8o=r($Le," \u2014 "),LD=n($Le,"A",{href:!0});var gnt=s(LD);Y8o=r(gnt,"ConvBertForSequenceClassification"),gnt.forEach(t),K8o=r($Le," (ConvBERT model)"),$Le.forEach(t),Z8o=i(N),B1=n(N,"LI",{});var kLe=s(B1);Nce=n(kLe,"STRONG",{});var hnt=s(Nce);exo=r(hnt,"ctrl"),hnt.forEach(t),oxo=r(kLe," \u2014 "),xD=n(kLe,"A",{href:!0});var pnt=s(xD);rxo=r(pnt,"CTRLForSequenceClassification"),pnt.forEach(t),txo=r(kLe," (CTRL model)"),kLe.forEach(t),axo=i(N),P1=n(N,"LI",{});var SLe=s(P1);jce=n(SLe,"STRONG",{});var unt=s(jce);nxo=r(unt,"data2vec-text"),unt.forEach(t),sxo=r(SLe," \u2014 "),$D=n(SLe,"A",{href:!0});var _nt=s($D);lxo=r(_nt,"Data2VecTextForSequenceClassification"),_nt.forEach(t),ixo=r(SLe," (Data2VecText model)"),SLe.forEach(t),dxo=i(N),I1=n(N,"LI",{});var RLe=s(I1);Dce=n(RLe,"STRONG",{});var bnt=s(Dce);cxo=r(bnt,"deberta"),bnt.forEach(t),fxo=r(RLe," \u2014 "),kD=n(RLe,"A",{href:!0});var vnt=s(kD);mxo=r(vnt,"DebertaForSequenceClassification"),vnt.forEach(t),gxo=r(RLe," (DeBERTa model)"),RLe.forEach(t),hxo=i(N),q1=n(N,"LI",{});var BLe=s(q1);Gce=n(BLe,"STRONG",{});var Fnt=s(Gce);pxo=r(Fnt,"deberta-v2"),Fnt.forEach(t),uxo=r(BLe," \u2014 "),SD=n(BLe,"A",{href:!0});var Tnt=s(SD);_xo=r(Tnt,"DebertaV2ForSequenceClassification"),Tnt.forEach(t),bxo=r(BLe," (DeBERTa-v2 model)"),BLe.forEach(t),vxo=i(N),N1=n(N,"LI",{});var PLe=s(N1);Oce=n(PLe,"STRONG",{});var Mnt=s(Oce);Fxo=r(Mnt,"distilbert"),Mnt.forEach(t),Txo=r(PLe," \u2014 "),RD=n(PLe,"A",{href:!0});var Ent=s(RD);Mxo=r(Ent,"DistilBertForSequenceClassification"),Ent.forEach(t),Exo=r(PLe," (DistilBERT model)"),PLe.forEach(t),Cxo=i(N),j1=n(N,"LI",{});var ILe=s(j1);Vce=n(ILe,"STRONG",{});var Cnt=s(Vce);wxo=r(Cnt,"electra"),Cnt.forEach(t),Axo=r(ILe," \u2014 "),BD=n(ILe,"A",{href:!0});var wnt=s(BD);yxo=r(wnt,"ElectraForSequenceClassification"),wnt.forEach(t),Lxo=r(ILe," (ELECTRA model)"),ILe.forEach(t),xxo=i(N),D1=n(N,"LI",{});var qLe=s(D1);Xce=n(qLe,"STRONG",{});var Ant=s(Xce);$xo=r(Ant,"flaubert"),Ant.forEach(t),kxo=r(qLe," \u2014 "),PD=n(qLe,"A",{href:!0});var ynt=s(PD);Sxo=r(ynt,"FlaubertForSequenceClassification"),ynt.forEach(t),Rxo=r(qLe," (FlauBERT model)"),qLe.forEach(t),Bxo=i(N),G1=n(N,"LI",{});var NLe=s(G1);zce=n(NLe,"STRONG",{});var Lnt=s(zce);Pxo=r(Lnt,"fnet"),Lnt.forEach(t),Ixo=r(NLe," \u2014 "),ID=n(NLe,"A",{href:!0});var xnt=s(ID);qxo=r(xnt,"FNetForSequenceClassification"),xnt.forEach(t),Nxo=r(NLe," (FNet model)"),NLe.forEach(t),jxo=i(N),O1=n(N,"LI",{});var jLe=s(O1);Qce=n(jLe,"STRONG",{});var $nt=s(Qce);Dxo=r($nt,"funnel"),$nt.forEach(t),Gxo=r(jLe," \u2014 "),qD=n(jLe,"A",{href:!0});var knt=s(qD);Oxo=r(knt,"FunnelForSequenceClassification"),knt.forEach(t),Vxo=r(jLe," (Funnel Transformer model)"),jLe.forEach(t),Xxo=i(N),V1=n(N,"LI",{});var DLe=s(V1);Wce=n(DLe,"STRONG",{});var Snt=s(Wce);zxo=r(Snt,"gpt2"),Snt.forEach(t),Qxo=r(DLe," \u2014 "),ND=n(DLe,"A",{href:!0});var Rnt=s(ND);Wxo=r(Rnt,"GPT2ForSequenceClassification"),Rnt.forEach(t),Hxo=r(DLe," (OpenAI GPT-2 model)"),DLe.forEach(t),Uxo=i(N),X1=n(N,"LI",{});var GLe=s(X1);Hce=n(GLe,"STRONG",{});var Bnt=s(Hce);Jxo=r(Bnt,"gpt_neo"),Bnt.forEach(t),Yxo=r(GLe," \u2014 "),jD=n(GLe,"A",{href:!0});var Pnt=s(jD);Kxo=r(Pnt,"GPTNeoForSequenceClassification"),Pnt.forEach(t),Zxo=r(GLe," (GPT Neo model)"),GLe.forEach(t),e9o=i(N),z1=n(N,"LI",{});var OLe=s(z1);Uce=n(OLe,"STRONG",{});var Int=s(Uce);o9o=r(Int,"gptj"),Int.forEach(t),r9o=r(OLe," \u2014 "),DD=n(OLe,"A",{href:!0});var qnt=s(DD);t9o=r(qnt,"GPTJForSequenceClassification"),qnt.forEach(t),a9o=r(OLe," (GPT-J model)"),OLe.forEach(t),n9o=i(N),Q1=n(N,"LI",{});var VLe=s(Q1);Jce=n(VLe,"STRONG",{});var Nnt=s(Jce);s9o=r(Nnt,"ibert"),Nnt.forEach(t),l9o=r(VLe," \u2014 "),GD=n(VLe,"A",{href:!0});var jnt=s(GD);i9o=r(jnt,"IBertForSequenceClassification"),jnt.forEach(t),d9o=r(VLe," (I-BERT model)"),VLe.forEach(t),c9o=i(N),W1=n(N,"LI",{});var XLe=s(W1);Yce=n(XLe,"STRONG",{});var Dnt=s(Yce);f9o=r(Dnt,"layoutlm"),Dnt.forEach(t),m9o=r(XLe," \u2014 "),OD=n(XLe,"A",{href:!0});var Gnt=s(OD);g9o=r(Gnt,"LayoutLMForSequenceClassification"),Gnt.forEach(t),h9o=r(XLe," (LayoutLM model)"),XLe.forEach(t),p9o=i(N),H1=n(N,"LI",{});var zLe=s(H1);Kce=n(zLe,"STRONG",{});var Ont=s(Kce);u9o=r(Ont,"layoutlmv2"),Ont.forEach(t),_9o=r(zLe," \u2014 "),VD=n(zLe,"A",{href:!0});var Vnt=s(VD);b9o=r(Vnt,"LayoutLMv2ForSequenceClassification"),Vnt.forEach(t),v9o=r(zLe," (LayoutLMv2 model)"),zLe.forEach(t),F9o=i(N),U1=n(N,"LI",{});var QLe=s(U1);Zce=n(QLe,"STRONG",{});var Xnt=s(Zce);T9o=r(Xnt,"led"),Xnt.forEach(t),M9o=r(QLe," \u2014 "),XD=n(QLe,"A",{href:!0});var znt=s(XD);E9o=r(znt,"LEDForSequenceClassification"),znt.forEach(t),C9o=r(QLe," (LED model)"),QLe.forEach(t),w9o=i(N),J1=n(N,"LI",{});var WLe=s(J1);efe=n(WLe,"STRONG",{});var Qnt=s(efe);A9o=r(Qnt,"longformer"),Qnt.forEach(t),y9o=r(WLe," \u2014 "),zD=n(WLe,"A",{href:!0});var Wnt=s(zD);L9o=r(Wnt,"LongformerForSequenceClassification"),Wnt.forEach(t),x9o=r(WLe," (Longformer model)"),WLe.forEach(t),$9o=i(N),Y1=n(N,"LI",{});var HLe=s(Y1);ofe=n(HLe,"STRONG",{});var Hnt=s(ofe);k9o=r(Hnt,"mbart"),Hnt.forEach(t),S9o=r(HLe," \u2014 "),QD=n(HLe,"A",{href:!0});var Unt=s(QD);R9o=r(Unt,"MBartForSequenceClassification"),Unt.forEach(t),B9o=r(HLe," (mBART model)"),HLe.forEach(t),P9o=i(N),K1=n(N,"LI",{});var ULe=s(K1);rfe=n(ULe,"STRONG",{});var Jnt=s(rfe);I9o=r(Jnt,"megatron-bert"),Jnt.forEach(t),q9o=r(ULe," \u2014 "),WD=n(ULe,"A",{href:!0});var Ynt=s(WD);N9o=r(Ynt,"MegatronBertForSequenceClassification"),Ynt.forEach(t),j9o=r(ULe," (MegatronBert model)"),ULe.forEach(t),D9o=i(N),Z1=n(N,"LI",{});var JLe=s(Z1);tfe=n(JLe,"STRONG",{});var Knt=s(tfe);G9o=r(Knt,"mobilebert"),Knt.forEach(t),O9o=r(JLe," \u2014 "),HD=n(JLe,"A",{href:!0});var Znt=s(HD);V9o=r(Znt,"MobileBertForSequenceClassification"),Znt.forEach(t),X9o=r(JLe," (MobileBERT model)"),JLe.forEach(t),z9o=i(N),eb=n(N,"LI",{});var YLe=s(eb);afe=n(YLe,"STRONG",{});var est=s(afe);Q9o=r(est,"mpnet"),est.forEach(t),W9o=r(YLe," \u2014 "),UD=n(YLe,"A",{href:!0});var ost=s(UD);H9o=r(ost,"MPNetForSequenceClassification"),ost.forEach(t),U9o=r(YLe," (MPNet model)"),YLe.forEach(t),J9o=i(N),ob=n(N,"LI",{});var KLe=s(ob);nfe=n(KLe,"STRONG",{});var rst=s(nfe);Y9o=r(rst,"nystromformer"),rst.forEach(t),K9o=r(KLe," \u2014 "),JD=n(KLe,"A",{href:!0});var tst=s(JD);Z9o=r(tst,"NystromformerForSequenceClassification"),tst.forEach(t),e$o=r(KLe," (Nystromformer model)"),KLe.forEach(t),o$o=i(N),rb=n(N,"LI",{});var ZLe=s(rb);sfe=n(ZLe,"STRONG",{});var ast=s(sfe);r$o=r(ast,"openai-gpt"),ast.forEach(t),t$o=r(ZLe," \u2014 "),YD=n(ZLe,"A",{href:!0});var nst=s(YD);a$o=r(nst,"OpenAIGPTForSequenceClassification"),nst.forEach(t),n$o=r(ZLe," (OpenAI GPT model)"),ZLe.forEach(t),s$o=i(N),tb=n(N,"LI",{});var e8e=s(tb);lfe=n(e8e,"STRONG",{});var sst=s(lfe);l$o=r(sst,"perceiver"),sst.forEach(t),i$o=r(e8e," \u2014 "),KD=n(e8e,"A",{href:!0});var lst=s(KD);d$o=r(lst,"PerceiverForSequenceClassification"),lst.forEach(t),c$o=r(e8e," (Perceiver model)"),e8e.forEach(t),f$o=i(N),ab=n(N,"LI",{});var o8e=s(ab);ife=n(o8e,"STRONG",{});var ist=s(ife);m$o=r(ist,"plbart"),ist.forEach(t),g$o=r(o8e," \u2014 "),ZD=n(o8e,"A",{href:!0});var dst=s(ZD);h$o=r(dst,"PLBartForSequenceClassification"),dst.forEach(t),p$o=r(o8e," (PLBart model)"),o8e.forEach(t),u$o=i(N),nb=n(N,"LI",{});var r8e=s(nb);dfe=n(r8e,"STRONG",{});var cst=s(dfe);_$o=r(cst,"qdqbert"),cst.forEach(t),b$o=r(r8e," \u2014 "),eG=n(r8e,"A",{href:!0});var fst=s(eG);v$o=r(fst,"QDQBertForSequenceClassification"),fst.forEach(t),F$o=r(r8e," (QDQBert model)"),r8e.forEach(t),T$o=i(N),sb=n(N,"LI",{});var t8e=s(sb);cfe=n(t8e,"STRONG",{});var mst=s(cfe);M$o=r(mst,"reformer"),mst.forEach(t),E$o=r(t8e," \u2014 "),oG=n(t8e,"A",{href:!0});var gst=s(oG);C$o=r(gst,"ReformerForSequenceClassification"),gst.forEach(t),w$o=r(t8e," (Reformer model)"),t8e.forEach(t),A$o=i(N),lb=n(N,"LI",{});var a8e=s(lb);ffe=n(a8e,"STRONG",{});var hst=s(ffe);y$o=r(hst,"rembert"),hst.forEach(t),L$o=r(a8e," \u2014 "),rG=n(a8e,"A",{href:!0});var pst=s(rG);x$o=r(pst,"RemBertForSequenceClassification"),pst.forEach(t),$$o=r(a8e," (RemBERT model)"),a8e.forEach(t),k$o=i(N),ib=n(N,"LI",{});var n8e=s(ib);mfe=n(n8e,"STRONG",{});var ust=s(mfe);S$o=r(ust,"roberta"),ust.forEach(t),R$o=r(n8e," \u2014 "),tG=n(n8e,"A",{href:!0});var _st=s(tG);B$o=r(_st,"RobertaForSequenceClassification"),_st.forEach(t),P$o=r(n8e," (RoBERTa model)"),n8e.forEach(t),I$o=i(N),db=n(N,"LI",{});var s8e=s(db);gfe=n(s8e,"STRONG",{});var bst=s(gfe);q$o=r(bst,"roformer"),bst.forEach(t),N$o=r(s8e," \u2014 "),aG=n(s8e,"A",{href:!0});var vst=s(aG);j$o=r(vst,"RoFormerForSequenceClassification"),vst.forEach(t),D$o=r(s8e," (RoFormer model)"),s8e.forEach(t),G$o=i(N),cb=n(N,"LI",{});var l8e=s(cb);hfe=n(l8e,"STRONG",{});var Fst=s(hfe);O$o=r(Fst,"squeezebert"),Fst.forEach(t),V$o=r(l8e," \u2014 "),nG=n(l8e,"A",{href:!0});var Tst=s(nG);X$o=r(Tst,"SqueezeBertForSequenceClassification"),Tst.forEach(t),z$o=r(l8e," (SqueezeBERT model)"),l8e.forEach(t),Q$o=i(N),fb=n(N,"LI",{});var i8e=s(fb);pfe=n(i8e,"STRONG",{});var Mst=s(pfe);W$o=r(Mst,"tapas"),Mst.forEach(t),H$o=r(i8e," \u2014 "),sG=n(i8e,"A",{href:!0});var Est=s(sG);U$o=r(Est,"TapasForSequenceClassification"),Est.forEach(t),J$o=r(i8e," (TAPAS model)"),i8e.forEach(t),Y$o=i(N),mb=n(N,"LI",{});var d8e=s(mb);ufe=n(d8e,"STRONG",{});var Cst=s(ufe);K$o=r(Cst,"tapex"),Cst.forEach(t),Z$o=r(d8e," \u2014 "),lG=n(d8e,"A",{href:!0});var wst=s(lG);eko=r(wst,"BartForSequenceClassification"),wst.forEach(t),oko=r(d8e," (TAPEX model)"),d8e.forEach(t),rko=i(N),gb=n(N,"LI",{});var c8e=s(gb);_fe=n(c8e,"STRONG",{});var Ast=s(_fe);tko=r(Ast,"transfo-xl"),Ast.forEach(t),ako=r(c8e," \u2014 "),iG=n(c8e,"A",{href:!0});var yst=s(iG);nko=r(yst,"TransfoXLForSequenceClassification"),yst.forEach(t),sko=r(c8e," (Transformer-XL model)"),c8e.forEach(t),lko=i(N),hb=n(N,"LI",{});var f8e=s(hb);bfe=n(f8e,"STRONG",{});var Lst=s(bfe);iko=r(Lst,"xlm"),Lst.forEach(t),dko=r(f8e," \u2014 "),dG=n(f8e,"A",{href:!0});var xst=s(dG);cko=r(xst,"XLMForSequenceClassification"),xst.forEach(t),fko=r(f8e," (XLM model)"),f8e.forEach(t),mko=i(N),pb=n(N,"LI",{});var m8e=s(pb);vfe=n(m8e,"STRONG",{});var $st=s(vfe);gko=r($st,"xlm-roberta"),$st.forEach(t),hko=r(m8e," \u2014 "),cG=n(m8e,"A",{href:!0});var kst=s(cG);pko=r(kst,"XLMRobertaForSequenceClassification"),kst.forEach(t),uko=r(m8e," (XLM-RoBERTa model)"),m8e.forEach(t),_ko=i(N),ub=n(N,"LI",{});var g8e=s(ub);Ffe=n(g8e,"STRONG",{});var Sst=s(Ffe);bko=r(Sst,"xlm-roberta-xl"),Sst.forEach(t),vko=r(g8e," \u2014 "),fG=n(g8e,"A",{href:!0});var Rst=s(fG);Fko=r(Rst,"XLMRobertaXLForSequenceClassification"),Rst.forEach(t),Tko=r(g8e," (XLM-RoBERTa-XL model)"),g8e.forEach(t),Mko=i(N),_b=n(N,"LI",{});var h8e=s(_b);Tfe=n(h8e,"STRONG",{});var Bst=s(Tfe);Eko=r(Bst,"xlnet"),Bst.forEach(t),Cko=r(h8e," \u2014 "),mG=n(h8e,"A",{href:!0});var Pst=s(mG);wko=r(Pst,"XLNetForSequenceClassification"),Pst.forEach(t),Ako=r(h8e," (XLNet model)"),h8e.forEach(t),yko=i(N),bb=n(N,"LI",{});var p8e=s(bb);Mfe=n(p8e,"STRONG",{});var Ist=s(Mfe);Lko=r(Ist,"yoso"),Ist.forEach(t),xko=r(p8e," \u2014 "),gG=n(p8e,"A",{href:!0});var qst=s(gG);$ko=r(qst,"YosoForSequenceClassification"),qst.forEach(t),kko=r(p8e," (YOSO model)"),p8e.forEach(t),N.forEach(t),Sko=i(aa),vb=n(aa,"P",{});var u8e=s(vb);Rko=r(u8e,"The model is set in evaluation mode by default using "),Efe=n(u8e,"CODE",{});var Nst=s(Efe);Bko=r(Nst,"model.eval()"),Nst.forEach(t),Pko=r(u8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cfe=n(u8e,"CODE",{});var jst=s(Cfe);Iko=r(jst,"model.train()"),jst.forEach(t),u8e.forEach(t),qko=i(aa),T(Fb.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),BIe=i(f),ji=n(f,"H2",{class:!0});var NNe=s(ji);Tb=n(NNe,"A",{id:!0,class:!0,href:!0});var Dst=s(Tb);wfe=n(Dst,"SPAN",{});var Gst=s(wfe);T(ay.$$.fragment,Gst),Gst.forEach(t),Dst.forEach(t),Nko=i(NNe),Afe=n(NNe,"SPAN",{});var Ost=s(Afe);jko=r(Ost,"AutoModelForMultipleChoice"),Ost.forEach(t),NNe.forEach(t),PIe=i(f),Bo=n(f,"DIV",{class:!0});var zs=s(Bo);T(ny.$$.fragment,zs),Dko=i(zs),Di=n(zs,"P",{});var $K=s(Di);Gko=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hG=n($K,"A",{href:!0});var Vst=s(hG);Oko=r(Vst,"from_pretrained()"),Vst.forEach(t),Vko=r($K," class method or the "),pG=n($K,"A",{href:!0});var Xst=s(pG);Xko=r(Xst,"from_config()"),Xst.forEach(t),zko=r($K,` class
method.`),$K.forEach(t),Qko=i(zs),sy=n(zs,"P",{});var jNe=s(sy);Wko=r(jNe,"This class cannot be instantiated directly using "),yfe=n(jNe,"CODE",{});var zst=s(yfe);Hko=r(zst,"__init__()"),zst.forEach(t),Uko=r(jNe," (throws an error)."),jNe.forEach(t),Jko=i(zs),lt=n(zs,"DIV",{class:!0});var _w=s(lt);T(ly.$$.fragment,_w),Yko=i(_w),Lfe=n(_w,"P",{});var Qst=s(Lfe);Kko=r(Qst,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Qst.forEach(t),Zko=i(_w),Gi=n(_w,"P",{});var kK=s(Gi);eSo=r(kK,`Note:
Loading a model from its configuration file does `),xfe=n(kK,"STRONG",{});var Wst=s(xfe);oSo=r(Wst,"not"),Wst.forEach(t),rSo=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),uG=n(kK,"A",{href:!0});var Hst=s(uG);tSo=r(Hst,"from_pretrained()"),Hst.forEach(t),aSo=r(kK," to load the model weights."),kK.forEach(t),nSo=i(_w),T(Mb.$$.fragment,_w),_w.forEach(t),sSo=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(iy.$$.fragment,na),lSo=i(na),$fe=n(na,"P",{});var Ust=s($fe);iSo=r(Ust,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Ust.forEach(t),dSo=i(na),Sa=n(na,"P",{});var bw=s(Sa);cSo=r(bw,"The model class to instantiate is selected based on the "),kfe=n(bw,"CODE",{});var Jst=s(kfe);fSo=r(Jst,"model_type"),Jst.forEach(t),mSo=r(bw,` property of the config object (either
passed as an argument or loaded from `),Sfe=n(bw,"CODE",{});var Yst=s(Sfe);gSo=r(Yst,"pretrained_model_name_or_path"),Yst.forEach(t),hSo=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rfe=n(bw,"CODE",{});var Kst=s(Rfe);pSo=r(Kst,"pretrained_model_name_or_path"),Kst.forEach(t),uSo=r(bw,":"),bw.forEach(t),_So=i(na),Y=n(na,"UL",{});var K=s(Y);Eb=n(K,"LI",{});var _8e=s(Eb);Bfe=n(_8e,"STRONG",{});var Zst=s(Bfe);bSo=r(Zst,"albert"),Zst.forEach(t),vSo=r(_8e," \u2014 "),_G=n(_8e,"A",{href:!0});var elt=s(_G);FSo=r(elt,"AlbertForMultipleChoice"),elt.forEach(t),TSo=r(_8e," (ALBERT model)"),_8e.forEach(t),MSo=i(K),Cb=n(K,"LI",{});var b8e=s(Cb);Pfe=n(b8e,"STRONG",{});var olt=s(Pfe);ESo=r(olt,"bert"),olt.forEach(t),CSo=r(b8e," \u2014 "),bG=n(b8e,"A",{href:!0});var rlt=s(bG);wSo=r(rlt,"BertForMultipleChoice"),rlt.forEach(t),ASo=r(b8e," (BERT model)"),b8e.forEach(t),ySo=i(K),wb=n(K,"LI",{});var v8e=s(wb);Ife=n(v8e,"STRONG",{});var tlt=s(Ife);LSo=r(tlt,"big_bird"),tlt.forEach(t),xSo=r(v8e," \u2014 "),vG=n(v8e,"A",{href:!0});var alt=s(vG);$So=r(alt,"BigBirdForMultipleChoice"),alt.forEach(t),kSo=r(v8e," (BigBird model)"),v8e.forEach(t),SSo=i(K),Ab=n(K,"LI",{});var F8e=s(Ab);qfe=n(F8e,"STRONG",{});var nlt=s(qfe);RSo=r(nlt,"camembert"),nlt.forEach(t),BSo=r(F8e," \u2014 "),FG=n(F8e,"A",{href:!0});var slt=s(FG);PSo=r(slt,"CamembertForMultipleChoice"),slt.forEach(t),ISo=r(F8e," (CamemBERT model)"),F8e.forEach(t),qSo=i(K),yb=n(K,"LI",{});var T8e=s(yb);Nfe=n(T8e,"STRONG",{});var llt=s(Nfe);NSo=r(llt,"canine"),llt.forEach(t),jSo=r(T8e," \u2014 "),TG=n(T8e,"A",{href:!0});var ilt=s(TG);DSo=r(ilt,"CanineForMultipleChoice"),ilt.forEach(t),GSo=r(T8e," (Canine model)"),T8e.forEach(t),OSo=i(K),Lb=n(K,"LI",{});var M8e=s(Lb);jfe=n(M8e,"STRONG",{});var dlt=s(jfe);VSo=r(dlt,"convbert"),dlt.forEach(t),XSo=r(M8e," \u2014 "),MG=n(M8e,"A",{href:!0});var clt=s(MG);zSo=r(clt,"ConvBertForMultipleChoice"),clt.forEach(t),QSo=r(M8e," (ConvBERT model)"),M8e.forEach(t),WSo=i(K),xb=n(K,"LI",{});var E8e=s(xb);Dfe=n(E8e,"STRONG",{});var flt=s(Dfe);HSo=r(flt,"data2vec-text"),flt.forEach(t),USo=r(E8e," \u2014 "),EG=n(E8e,"A",{href:!0});var mlt=s(EG);JSo=r(mlt,"Data2VecTextForMultipleChoice"),mlt.forEach(t),YSo=r(E8e," (Data2VecText model)"),E8e.forEach(t),KSo=i(K),$b=n(K,"LI",{});var C8e=s($b);Gfe=n(C8e,"STRONG",{});var glt=s(Gfe);ZSo=r(glt,"deberta-v2"),glt.forEach(t),eRo=r(C8e," \u2014 "),CG=n(C8e,"A",{href:!0});var hlt=s(CG);oRo=r(hlt,"DebertaV2ForMultipleChoice"),hlt.forEach(t),rRo=r(C8e," (DeBERTa-v2 model)"),C8e.forEach(t),tRo=i(K),kb=n(K,"LI",{});var w8e=s(kb);Ofe=n(w8e,"STRONG",{});var plt=s(Ofe);aRo=r(plt,"distilbert"),plt.forEach(t),nRo=r(w8e," \u2014 "),wG=n(w8e,"A",{href:!0});var ult=s(wG);sRo=r(ult,"DistilBertForMultipleChoice"),ult.forEach(t),lRo=r(w8e," (DistilBERT model)"),w8e.forEach(t),iRo=i(K),Sb=n(K,"LI",{});var A8e=s(Sb);Vfe=n(A8e,"STRONG",{});var _lt=s(Vfe);dRo=r(_lt,"electra"),_lt.forEach(t),cRo=r(A8e," \u2014 "),AG=n(A8e,"A",{href:!0});var blt=s(AG);fRo=r(blt,"ElectraForMultipleChoice"),blt.forEach(t),mRo=r(A8e," (ELECTRA model)"),A8e.forEach(t),gRo=i(K),Rb=n(K,"LI",{});var y8e=s(Rb);Xfe=n(y8e,"STRONG",{});var vlt=s(Xfe);hRo=r(vlt,"flaubert"),vlt.forEach(t),pRo=r(y8e," \u2014 "),yG=n(y8e,"A",{href:!0});var Flt=s(yG);uRo=r(Flt,"FlaubertForMultipleChoice"),Flt.forEach(t),_Ro=r(y8e," (FlauBERT model)"),y8e.forEach(t),bRo=i(K),Bb=n(K,"LI",{});var L8e=s(Bb);zfe=n(L8e,"STRONG",{});var Tlt=s(zfe);vRo=r(Tlt,"fnet"),Tlt.forEach(t),FRo=r(L8e," \u2014 "),LG=n(L8e,"A",{href:!0});var Mlt=s(LG);TRo=r(Mlt,"FNetForMultipleChoice"),Mlt.forEach(t),MRo=r(L8e," (FNet model)"),L8e.forEach(t),ERo=i(K),Pb=n(K,"LI",{});var x8e=s(Pb);Qfe=n(x8e,"STRONG",{});var Elt=s(Qfe);CRo=r(Elt,"funnel"),Elt.forEach(t),wRo=r(x8e," \u2014 "),xG=n(x8e,"A",{href:!0});var Clt=s(xG);ARo=r(Clt,"FunnelForMultipleChoice"),Clt.forEach(t),yRo=r(x8e," (Funnel Transformer model)"),x8e.forEach(t),LRo=i(K),Ib=n(K,"LI",{});var $8e=s(Ib);Wfe=n($8e,"STRONG",{});var wlt=s(Wfe);xRo=r(wlt,"ibert"),wlt.forEach(t),$Ro=r($8e," \u2014 "),$G=n($8e,"A",{href:!0});var Alt=s($G);kRo=r(Alt,"IBertForMultipleChoice"),Alt.forEach(t),SRo=r($8e," (I-BERT model)"),$8e.forEach(t),RRo=i(K),qb=n(K,"LI",{});var k8e=s(qb);Hfe=n(k8e,"STRONG",{});var ylt=s(Hfe);BRo=r(ylt,"longformer"),ylt.forEach(t),PRo=r(k8e," \u2014 "),kG=n(k8e,"A",{href:!0});var Llt=s(kG);IRo=r(Llt,"LongformerForMultipleChoice"),Llt.forEach(t),qRo=r(k8e," (Longformer model)"),k8e.forEach(t),NRo=i(K),Nb=n(K,"LI",{});var S8e=s(Nb);Ufe=n(S8e,"STRONG",{});var xlt=s(Ufe);jRo=r(xlt,"megatron-bert"),xlt.forEach(t),DRo=r(S8e," \u2014 "),SG=n(S8e,"A",{href:!0});var $lt=s(SG);GRo=r($lt,"MegatronBertForMultipleChoice"),$lt.forEach(t),ORo=r(S8e," (MegatronBert model)"),S8e.forEach(t),VRo=i(K),jb=n(K,"LI",{});var R8e=s(jb);Jfe=n(R8e,"STRONG",{});var klt=s(Jfe);XRo=r(klt,"mobilebert"),klt.forEach(t),zRo=r(R8e," \u2014 "),RG=n(R8e,"A",{href:!0});var Slt=s(RG);QRo=r(Slt,"MobileBertForMultipleChoice"),Slt.forEach(t),WRo=r(R8e," (MobileBERT model)"),R8e.forEach(t),HRo=i(K),Db=n(K,"LI",{});var B8e=s(Db);Yfe=n(B8e,"STRONG",{});var Rlt=s(Yfe);URo=r(Rlt,"mpnet"),Rlt.forEach(t),JRo=r(B8e," \u2014 "),BG=n(B8e,"A",{href:!0});var Blt=s(BG);YRo=r(Blt,"MPNetForMultipleChoice"),Blt.forEach(t),KRo=r(B8e," (MPNet model)"),B8e.forEach(t),ZRo=i(K),Gb=n(K,"LI",{});var P8e=s(Gb);Kfe=n(P8e,"STRONG",{});var Plt=s(Kfe);eBo=r(Plt,"nystromformer"),Plt.forEach(t),oBo=r(P8e," \u2014 "),PG=n(P8e,"A",{href:!0});var Ilt=s(PG);rBo=r(Ilt,"NystromformerForMultipleChoice"),Ilt.forEach(t),tBo=r(P8e," (Nystromformer model)"),P8e.forEach(t),aBo=i(K),Ob=n(K,"LI",{});var I8e=s(Ob);Zfe=n(I8e,"STRONG",{});var qlt=s(Zfe);nBo=r(qlt,"qdqbert"),qlt.forEach(t),sBo=r(I8e," \u2014 "),IG=n(I8e,"A",{href:!0});var Nlt=s(IG);lBo=r(Nlt,"QDQBertForMultipleChoice"),Nlt.forEach(t),iBo=r(I8e," (QDQBert model)"),I8e.forEach(t),dBo=i(K),Vb=n(K,"LI",{});var q8e=s(Vb);eme=n(q8e,"STRONG",{});var jlt=s(eme);cBo=r(jlt,"rembert"),jlt.forEach(t),fBo=r(q8e," \u2014 "),qG=n(q8e,"A",{href:!0});var Dlt=s(qG);mBo=r(Dlt,"RemBertForMultipleChoice"),Dlt.forEach(t),gBo=r(q8e," (RemBERT model)"),q8e.forEach(t),hBo=i(K),Xb=n(K,"LI",{});var N8e=s(Xb);ome=n(N8e,"STRONG",{});var Glt=s(ome);pBo=r(Glt,"roberta"),Glt.forEach(t),uBo=r(N8e," \u2014 "),NG=n(N8e,"A",{href:!0});var Olt=s(NG);_Bo=r(Olt,"RobertaForMultipleChoice"),Olt.forEach(t),bBo=r(N8e," (RoBERTa model)"),N8e.forEach(t),vBo=i(K),zb=n(K,"LI",{});var j8e=s(zb);rme=n(j8e,"STRONG",{});var Vlt=s(rme);FBo=r(Vlt,"roformer"),Vlt.forEach(t),TBo=r(j8e," \u2014 "),jG=n(j8e,"A",{href:!0});var Xlt=s(jG);MBo=r(Xlt,"RoFormerForMultipleChoice"),Xlt.forEach(t),EBo=r(j8e," (RoFormer model)"),j8e.forEach(t),CBo=i(K),Qb=n(K,"LI",{});var D8e=s(Qb);tme=n(D8e,"STRONG",{});var zlt=s(tme);wBo=r(zlt,"squeezebert"),zlt.forEach(t),ABo=r(D8e," \u2014 "),DG=n(D8e,"A",{href:!0});var Qlt=s(DG);yBo=r(Qlt,"SqueezeBertForMultipleChoice"),Qlt.forEach(t),LBo=r(D8e," (SqueezeBERT model)"),D8e.forEach(t),xBo=i(K),Wb=n(K,"LI",{});var G8e=s(Wb);ame=n(G8e,"STRONG",{});var Wlt=s(ame);$Bo=r(Wlt,"xlm"),Wlt.forEach(t),kBo=r(G8e," \u2014 "),GG=n(G8e,"A",{href:!0});var Hlt=s(GG);SBo=r(Hlt,"XLMForMultipleChoice"),Hlt.forEach(t),RBo=r(G8e," (XLM model)"),G8e.forEach(t),BBo=i(K),Hb=n(K,"LI",{});var O8e=s(Hb);nme=n(O8e,"STRONG",{});var Ult=s(nme);PBo=r(Ult,"xlm-roberta"),Ult.forEach(t),IBo=r(O8e," \u2014 "),OG=n(O8e,"A",{href:!0});var Jlt=s(OG);qBo=r(Jlt,"XLMRobertaForMultipleChoice"),Jlt.forEach(t),NBo=r(O8e," (XLM-RoBERTa model)"),O8e.forEach(t),jBo=i(K),Ub=n(K,"LI",{});var V8e=s(Ub);sme=n(V8e,"STRONG",{});var Ylt=s(sme);DBo=r(Ylt,"xlm-roberta-xl"),Ylt.forEach(t),GBo=r(V8e," \u2014 "),VG=n(V8e,"A",{href:!0});var Klt=s(VG);OBo=r(Klt,"XLMRobertaXLForMultipleChoice"),Klt.forEach(t),VBo=r(V8e," (XLM-RoBERTa-XL model)"),V8e.forEach(t),XBo=i(K),Jb=n(K,"LI",{});var X8e=s(Jb);lme=n(X8e,"STRONG",{});var Zlt=s(lme);zBo=r(Zlt,"xlnet"),Zlt.forEach(t),QBo=r(X8e," \u2014 "),XG=n(X8e,"A",{href:!0});var eit=s(XG);WBo=r(eit,"XLNetForMultipleChoice"),eit.forEach(t),HBo=r(X8e," (XLNet model)"),X8e.forEach(t),UBo=i(K),Yb=n(K,"LI",{});var z8e=s(Yb);ime=n(z8e,"STRONG",{});var oit=s(ime);JBo=r(oit,"yoso"),oit.forEach(t),YBo=r(z8e," \u2014 "),zG=n(z8e,"A",{href:!0});var rit=s(zG);KBo=r(rit,"YosoForMultipleChoice"),rit.forEach(t),ZBo=r(z8e," (YOSO model)"),z8e.forEach(t),K.forEach(t),ePo=i(na),Kb=n(na,"P",{});var Q8e=s(Kb);oPo=r(Q8e,"The model is set in evaluation mode by default using "),dme=n(Q8e,"CODE",{});var tit=s(dme);rPo=r(tit,"model.eval()"),tit.forEach(t),tPo=r(Q8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cme=n(Q8e,"CODE",{});var ait=s(cme);aPo=r(ait,"model.train()"),ait.forEach(t),Q8e.forEach(t),nPo=i(na),T(Zb.$$.fragment,na),na.forEach(t),zs.forEach(t),IIe=i(f),Oi=n(f,"H2",{class:!0});var DNe=s(Oi);ev=n(DNe,"A",{id:!0,class:!0,href:!0});var nit=s(ev);fme=n(nit,"SPAN",{});var sit=s(fme);T(dy.$$.fragment,sit),sit.forEach(t),nit.forEach(t),sPo=i(DNe),mme=n(DNe,"SPAN",{});var lit=s(mme);lPo=r(lit,"AutoModelForNextSentencePrediction"),lit.forEach(t),DNe.forEach(t),qIe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(cy.$$.fragment,Qs),iPo=i(Qs),Vi=n(Qs,"P",{});var SK=s(Vi);dPo=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),QG=n(SK,"A",{href:!0});var iit=s(QG);cPo=r(iit,"from_pretrained()"),iit.forEach(t),fPo=r(SK," class method or the "),WG=n(SK,"A",{href:!0});var dit=s(WG);mPo=r(dit,"from_config()"),dit.forEach(t),gPo=r(SK,` class
method.`),SK.forEach(t),hPo=i(Qs),fy=n(Qs,"P",{});var GNe=s(fy);pPo=r(GNe,"This class cannot be instantiated directly using "),gme=n(GNe,"CODE",{});var cit=s(gme);uPo=r(cit,"__init__()"),cit.forEach(t),_Po=r(GNe," (throws an error)."),GNe.forEach(t),bPo=i(Qs),it=n(Qs,"DIV",{class:!0});var vw=s(it);T(my.$$.fragment,vw),vPo=i(vw),hme=n(vw,"P",{});var fit=s(hme);FPo=r(fit,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),fit.forEach(t),TPo=i(vw),Xi=n(vw,"P",{});var RK=s(Xi);MPo=r(RK,`Note:
Loading a model from its configuration file does `),pme=n(RK,"STRONG",{});var mit=s(pme);EPo=r(mit,"not"),mit.forEach(t),CPo=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=n(RK,"A",{href:!0});var git=s(HG);wPo=r(git,"from_pretrained()"),git.forEach(t),APo=r(RK," to load the model weights."),RK.forEach(t),yPo=i(vw),T(ov.$$.fragment,vw),vw.forEach(t),LPo=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(gy.$$.fragment,sa),xPo=i(sa),ume=n(sa,"P",{});var hit=s(ume);$Po=r(hit,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hit.forEach(t),kPo=i(sa),Ra=n(sa,"P",{});var Fw=s(Ra);SPo=r(Fw,"The model class to instantiate is selected based on the "),_me=n(Fw,"CODE",{});var pit=s(_me);RPo=r(pit,"model_type"),pit.forEach(t),BPo=r(Fw,` property of the config object (either
passed as an argument or loaded from `),bme=n(Fw,"CODE",{});var uit=s(bme);PPo=r(uit,"pretrained_model_name_or_path"),uit.forEach(t),IPo=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vme=n(Fw,"CODE",{});var _it=s(vme);qPo=r(_it,"pretrained_model_name_or_path"),_it.forEach(t),NPo=r(Fw,":"),Fw.forEach(t),jPo=i(sa),Yr=n(sa,"UL",{});var Ws=s(Yr);rv=n(Ws,"LI",{});var W8e=s(rv);Fme=n(W8e,"STRONG",{});var bit=s(Fme);DPo=r(bit,"bert"),bit.forEach(t),GPo=r(W8e," \u2014 "),UG=n(W8e,"A",{href:!0});var vit=s(UG);OPo=r(vit,"BertForNextSentencePrediction"),vit.forEach(t),VPo=r(W8e," (BERT model)"),W8e.forEach(t),XPo=i(Ws),tv=n(Ws,"LI",{});var H8e=s(tv);Tme=n(H8e,"STRONG",{});var Fit=s(Tme);zPo=r(Fit,"fnet"),Fit.forEach(t),QPo=r(H8e," \u2014 "),JG=n(H8e,"A",{href:!0});var Tit=s(JG);WPo=r(Tit,"FNetForNextSentencePrediction"),Tit.forEach(t),HPo=r(H8e," (FNet model)"),H8e.forEach(t),UPo=i(Ws),av=n(Ws,"LI",{});var U8e=s(av);Mme=n(U8e,"STRONG",{});var Mit=s(Mme);JPo=r(Mit,"megatron-bert"),Mit.forEach(t),YPo=r(U8e," \u2014 "),YG=n(U8e,"A",{href:!0});var Eit=s(YG);KPo=r(Eit,"MegatronBertForNextSentencePrediction"),Eit.forEach(t),ZPo=r(U8e," (MegatronBert model)"),U8e.forEach(t),eIo=i(Ws),nv=n(Ws,"LI",{});var J8e=s(nv);Eme=n(J8e,"STRONG",{});var Cit=s(Eme);oIo=r(Cit,"mobilebert"),Cit.forEach(t),rIo=r(J8e," \u2014 "),KG=n(J8e,"A",{href:!0});var wit=s(KG);tIo=r(wit,"MobileBertForNextSentencePrediction"),wit.forEach(t),aIo=r(J8e," (MobileBERT model)"),J8e.forEach(t),nIo=i(Ws),sv=n(Ws,"LI",{});var Y8e=s(sv);Cme=n(Y8e,"STRONG",{});var Ait=s(Cme);sIo=r(Ait,"qdqbert"),Ait.forEach(t),lIo=r(Y8e," \u2014 "),ZG=n(Y8e,"A",{href:!0});var yit=s(ZG);iIo=r(yit,"QDQBertForNextSentencePrediction"),yit.forEach(t),dIo=r(Y8e," (QDQBert model)"),Y8e.forEach(t),Ws.forEach(t),cIo=i(sa),lv=n(sa,"P",{});var K8e=s(lv);fIo=r(K8e,"The model is set in evaluation mode by default using "),wme=n(K8e,"CODE",{});var Lit=s(wme);mIo=r(Lit,"model.eval()"),Lit.forEach(t),gIo=r(K8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ame=n(K8e,"CODE",{});var xit=s(Ame);hIo=r(xit,"model.train()"),xit.forEach(t),K8e.forEach(t),pIo=i(sa),T(iv.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),NIe=i(f),zi=n(f,"H2",{class:!0});var ONe=s(zi);dv=n(ONe,"A",{id:!0,class:!0,href:!0});var $it=s(dv);yme=n($it,"SPAN",{});var kit=s(yme);T(hy.$$.fragment,kit),kit.forEach(t),$it.forEach(t),uIo=i(ONe),Lme=n(ONe,"SPAN",{});var Sit=s(Lme);_Io=r(Sit,"AutoModelForTokenClassification"),Sit.forEach(t),ONe.forEach(t),jIe=i(f),Io=n(f,"DIV",{class:!0});var Hs=s(Io);T(py.$$.fragment,Hs),bIo=i(Hs),Qi=n(Hs,"P",{});var BK=s(Qi);vIo=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),eO=n(BK,"A",{href:!0});var Rit=s(eO);FIo=r(Rit,"from_pretrained()"),Rit.forEach(t),TIo=r(BK," class method or the "),oO=n(BK,"A",{href:!0});var Bit=s(oO);MIo=r(Bit,"from_config()"),Bit.forEach(t),EIo=r(BK,` class
method.`),BK.forEach(t),CIo=i(Hs),uy=n(Hs,"P",{});var VNe=s(uy);wIo=r(VNe,"This class cannot be instantiated directly using "),xme=n(VNe,"CODE",{});var Pit=s(xme);AIo=r(Pit,"__init__()"),Pit.forEach(t),yIo=r(VNe," (throws an error)."),VNe.forEach(t),LIo=i(Hs),dt=n(Hs,"DIV",{class:!0});var Tw=s(dt);T(_y.$$.fragment,Tw),xIo=i(Tw),$me=n(Tw,"P",{});var Iit=s($me);$Io=r(Iit,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Iit.forEach(t),kIo=i(Tw),Wi=n(Tw,"P",{});var PK=s(Wi);SIo=r(PK,`Note:
Loading a model from its configuration file does `),kme=n(PK,"STRONG",{});var qit=s(kme);RIo=r(qit,"not"),qit.forEach(t),BIo=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rO=n(PK,"A",{href:!0});var Nit=s(rO);PIo=r(Nit,"from_pretrained()"),Nit.forEach(t),IIo=r(PK," to load the model weights."),PK.forEach(t),qIo=i(Tw),T(cv.$$.fragment,Tw),Tw.forEach(t),NIo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(by.$$.fragment,la),jIo=i(la),Sme=n(la,"P",{});var jit=s(Sme);DIo=r(jit,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jit.forEach(t),GIo=i(la),Ba=n(la,"P",{});var Mw=s(Ba);OIo=r(Mw,"The model class to instantiate is selected based on the "),Rme=n(Mw,"CODE",{});var Dit=s(Rme);VIo=r(Dit,"model_type"),Dit.forEach(t),XIo=r(Mw,` property of the config object (either
passed as an argument or loaded from `),Bme=n(Mw,"CODE",{});var Git=s(Bme);zIo=r(Git,"pretrained_model_name_or_path"),Git.forEach(t),QIo=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pme=n(Mw,"CODE",{});var Oit=s(Pme);WIo=r(Oit,"pretrained_model_name_or_path"),Oit.forEach(t),HIo=r(Mw,":"),Mw.forEach(t),UIo=i(la),U=n(la,"UL",{});var J=s(U);fv=n(J,"LI",{});var Z8e=s(fv);Ime=n(Z8e,"STRONG",{});var Vit=s(Ime);JIo=r(Vit,"albert"),Vit.forEach(t),YIo=r(Z8e," \u2014 "),tO=n(Z8e,"A",{href:!0});var Xit=s(tO);KIo=r(Xit,"AlbertForTokenClassification"),Xit.forEach(t),ZIo=r(Z8e," (ALBERT model)"),Z8e.forEach(t),eqo=i(J),mv=n(J,"LI",{});var exe=s(mv);qme=n(exe,"STRONG",{});var zit=s(qme);oqo=r(zit,"bert"),zit.forEach(t),rqo=r(exe," \u2014 "),aO=n(exe,"A",{href:!0});var Qit=s(aO);tqo=r(Qit,"BertForTokenClassification"),Qit.forEach(t),aqo=r(exe," (BERT model)"),exe.forEach(t),nqo=i(J),gv=n(J,"LI",{});var oxe=s(gv);Nme=n(oxe,"STRONG",{});var Wit=s(Nme);sqo=r(Wit,"big_bird"),Wit.forEach(t),lqo=r(oxe," \u2014 "),nO=n(oxe,"A",{href:!0});var Hit=s(nO);iqo=r(Hit,"BigBirdForTokenClassification"),Hit.forEach(t),dqo=r(oxe," (BigBird model)"),oxe.forEach(t),cqo=i(J),hv=n(J,"LI",{});var rxe=s(hv);jme=n(rxe,"STRONG",{});var Uit=s(jme);fqo=r(Uit,"camembert"),Uit.forEach(t),mqo=r(rxe," \u2014 "),sO=n(rxe,"A",{href:!0});var Jit=s(sO);gqo=r(Jit,"CamembertForTokenClassification"),Jit.forEach(t),hqo=r(rxe," (CamemBERT model)"),rxe.forEach(t),pqo=i(J),pv=n(J,"LI",{});var txe=s(pv);Dme=n(txe,"STRONG",{});var Yit=s(Dme);uqo=r(Yit,"canine"),Yit.forEach(t),_qo=r(txe," \u2014 "),lO=n(txe,"A",{href:!0});var Kit=s(lO);bqo=r(Kit,"CanineForTokenClassification"),Kit.forEach(t),vqo=r(txe," (Canine model)"),txe.forEach(t),Fqo=i(J),uv=n(J,"LI",{});var axe=s(uv);Gme=n(axe,"STRONG",{});var Zit=s(Gme);Tqo=r(Zit,"convbert"),Zit.forEach(t),Mqo=r(axe," \u2014 "),iO=n(axe,"A",{href:!0});var edt=s(iO);Eqo=r(edt,"ConvBertForTokenClassification"),edt.forEach(t),Cqo=r(axe," (ConvBERT model)"),axe.forEach(t),wqo=i(J),_v=n(J,"LI",{});var nxe=s(_v);Ome=n(nxe,"STRONG",{});var odt=s(Ome);Aqo=r(odt,"data2vec-text"),odt.forEach(t),yqo=r(nxe," \u2014 "),dO=n(nxe,"A",{href:!0});var rdt=s(dO);Lqo=r(rdt,"Data2VecTextForTokenClassification"),rdt.forEach(t),xqo=r(nxe," (Data2VecText model)"),nxe.forEach(t),$qo=i(J),bv=n(J,"LI",{});var sxe=s(bv);Vme=n(sxe,"STRONG",{});var tdt=s(Vme);kqo=r(tdt,"deberta"),tdt.forEach(t),Sqo=r(sxe," \u2014 "),cO=n(sxe,"A",{href:!0});var adt=s(cO);Rqo=r(adt,"DebertaForTokenClassification"),adt.forEach(t),Bqo=r(sxe," (DeBERTa model)"),sxe.forEach(t),Pqo=i(J),vv=n(J,"LI",{});var lxe=s(vv);Xme=n(lxe,"STRONG",{});var ndt=s(Xme);Iqo=r(ndt,"deberta-v2"),ndt.forEach(t),qqo=r(lxe," \u2014 "),fO=n(lxe,"A",{href:!0});var sdt=s(fO);Nqo=r(sdt,"DebertaV2ForTokenClassification"),sdt.forEach(t),jqo=r(lxe," (DeBERTa-v2 model)"),lxe.forEach(t),Dqo=i(J),Fv=n(J,"LI",{});var ixe=s(Fv);zme=n(ixe,"STRONG",{});var ldt=s(zme);Gqo=r(ldt,"distilbert"),ldt.forEach(t),Oqo=r(ixe," \u2014 "),mO=n(ixe,"A",{href:!0});var idt=s(mO);Vqo=r(idt,"DistilBertForTokenClassification"),idt.forEach(t),Xqo=r(ixe," (DistilBERT model)"),ixe.forEach(t),zqo=i(J),Tv=n(J,"LI",{});var dxe=s(Tv);Qme=n(dxe,"STRONG",{});var ddt=s(Qme);Qqo=r(ddt,"electra"),ddt.forEach(t),Wqo=r(dxe," \u2014 "),gO=n(dxe,"A",{href:!0});var cdt=s(gO);Hqo=r(cdt,"ElectraForTokenClassification"),cdt.forEach(t),Uqo=r(dxe," (ELECTRA model)"),dxe.forEach(t),Jqo=i(J),Mv=n(J,"LI",{});var cxe=s(Mv);Wme=n(cxe,"STRONG",{});var fdt=s(Wme);Yqo=r(fdt,"flaubert"),fdt.forEach(t),Kqo=r(cxe," \u2014 "),hO=n(cxe,"A",{href:!0});var mdt=s(hO);Zqo=r(mdt,"FlaubertForTokenClassification"),mdt.forEach(t),eNo=r(cxe," (FlauBERT model)"),cxe.forEach(t),oNo=i(J),Ev=n(J,"LI",{});var fxe=s(Ev);Hme=n(fxe,"STRONG",{});var gdt=s(Hme);rNo=r(gdt,"fnet"),gdt.forEach(t),tNo=r(fxe," \u2014 "),pO=n(fxe,"A",{href:!0});var hdt=s(pO);aNo=r(hdt,"FNetForTokenClassification"),hdt.forEach(t),nNo=r(fxe," (FNet model)"),fxe.forEach(t),sNo=i(J),Cv=n(J,"LI",{});var mxe=s(Cv);Ume=n(mxe,"STRONG",{});var pdt=s(Ume);lNo=r(pdt,"funnel"),pdt.forEach(t),iNo=r(mxe," \u2014 "),uO=n(mxe,"A",{href:!0});var udt=s(uO);dNo=r(udt,"FunnelForTokenClassification"),udt.forEach(t),cNo=r(mxe," (Funnel Transformer model)"),mxe.forEach(t),fNo=i(J),wv=n(J,"LI",{});var gxe=s(wv);Jme=n(gxe,"STRONG",{});var _dt=s(Jme);mNo=r(_dt,"gpt2"),_dt.forEach(t),gNo=r(gxe," \u2014 "),_O=n(gxe,"A",{href:!0});var bdt=s(_O);hNo=r(bdt,"GPT2ForTokenClassification"),bdt.forEach(t),pNo=r(gxe," (OpenAI GPT-2 model)"),gxe.forEach(t),uNo=i(J),Av=n(J,"LI",{});var hxe=s(Av);Yme=n(hxe,"STRONG",{});var vdt=s(Yme);_No=r(vdt,"ibert"),vdt.forEach(t),bNo=r(hxe," \u2014 "),bO=n(hxe,"A",{href:!0});var Fdt=s(bO);vNo=r(Fdt,"IBertForTokenClassification"),Fdt.forEach(t),FNo=r(hxe," (I-BERT model)"),hxe.forEach(t),TNo=i(J),yv=n(J,"LI",{});var pxe=s(yv);Kme=n(pxe,"STRONG",{});var Tdt=s(Kme);MNo=r(Tdt,"layoutlm"),Tdt.forEach(t),ENo=r(pxe," \u2014 "),vO=n(pxe,"A",{href:!0});var Mdt=s(vO);CNo=r(Mdt,"LayoutLMForTokenClassification"),Mdt.forEach(t),wNo=r(pxe," (LayoutLM model)"),pxe.forEach(t),ANo=i(J),Lv=n(J,"LI",{});var uxe=s(Lv);Zme=n(uxe,"STRONG",{});var Edt=s(Zme);yNo=r(Edt,"layoutlmv2"),Edt.forEach(t),LNo=r(uxe," \u2014 "),FO=n(uxe,"A",{href:!0});var Cdt=s(FO);xNo=r(Cdt,"LayoutLMv2ForTokenClassification"),Cdt.forEach(t),$No=r(uxe," (LayoutLMv2 model)"),uxe.forEach(t),kNo=i(J),xv=n(J,"LI",{});var _xe=s(xv);ege=n(_xe,"STRONG",{});var wdt=s(ege);SNo=r(wdt,"longformer"),wdt.forEach(t),RNo=r(_xe," \u2014 "),TO=n(_xe,"A",{href:!0});var Adt=s(TO);BNo=r(Adt,"LongformerForTokenClassification"),Adt.forEach(t),PNo=r(_xe," (Longformer model)"),_xe.forEach(t),INo=i(J),$v=n(J,"LI",{});var bxe=s($v);oge=n(bxe,"STRONG",{});var ydt=s(oge);qNo=r(ydt,"megatron-bert"),ydt.forEach(t),NNo=r(bxe," \u2014 "),MO=n(bxe,"A",{href:!0});var Ldt=s(MO);jNo=r(Ldt,"MegatronBertForTokenClassification"),Ldt.forEach(t),DNo=r(bxe," (MegatronBert model)"),bxe.forEach(t),GNo=i(J),kv=n(J,"LI",{});var vxe=s(kv);rge=n(vxe,"STRONG",{});var xdt=s(rge);ONo=r(xdt,"mobilebert"),xdt.forEach(t),VNo=r(vxe," \u2014 "),EO=n(vxe,"A",{href:!0});var $dt=s(EO);XNo=r($dt,"MobileBertForTokenClassification"),$dt.forEach(t),zNo=r(vxe," (MobileBERT model)"),vxe.forEach(t),QNo=i(J),Sv=n(J,"LI",{});var Fxe=s(Sv);tge=n(Fxe,"STRONG",{});var kdt=s(tge);WNo=r(kdt,"mpnet"),kdt.forEach(t),HNo=r(Fxe," \u2014 "),CO=n(Fxe,"A",{href:!0});var Sdt=s(CO);UNo=r(Sdt,"MPNetForTokenClassification"),Sdt.forEach(t),JNo=r(Fxe," (MPNet model)"),Fxe.forEach(t),YNo=i(J),Rv=n(J,"LI",{});var Txe=s(Rv);age=n(Txe,"STRONG",{});var Rdt=s(age);KNo=r(Rdt,"nystromformer"),Rdt.forEach(t),ZNo=r(Txe," \u2014 "),wO=n(Txe,"A",{href:!0});var Bdt=s(wO);ejo=r(Bdt,"NystromformerForTokenClassification"),Bdt.forEach(t),ojo=r(Txe," (Nystromformer model)"),Txe.forEach(t),rjo=i(J),Bv=n(J,"LI",{});var Mxe=s(Bv);nge=n(Mxe,"STRONG",{});var Pdt=s(nge);tjo=r(Pdt,"qdqbert"),Pdt.forEach(t),ajo=r(Mxe," \u2014 "),AO=n(Mxe,"A",{href:!0});var Idt=s(AO);njo=r(Idt,"QDQBertForTokenClassification"),Idt.forEach(t),sjo=r(Mxe," (QDQBert model)"),Mxe.forEach(t),ljo=i(J),Pv=n(J,"LI",{});var Exe=s(Pv);sge=n(Exe,"STRONG",{});var qdt=s(sge);ijo=r(qdt,"rembert"),qdt.forEach(t),djo=r(Exe," \u2014 "),yO=n(Exe,"A",{href:!0});var Ndt=s(yO);cjo=r(Ndt,"RemBertForTokenClassification"),Ndt.forEach(t),fjo=r(Exe," (RemBERT model)"),Exe.forEach(t),mjo=i(J),Iv=n(J,"LI",{});var Cxe=s(Iv);lge=n(Cxe,"STRONG",{});var jdt=s(lge);gjo=r(jdt,"roberta"),jdt.forEach(t),hjo=r(Cxe," \u2014 "),LO=n(Cxe,"A",{href:!0});var Ddt=s(LO);pjo=r(Ddt,"RobertaForTokenClassification"),Ddt.forEach(t),ujo=r(Cxe," (RoBERTa model)"),Cxe.forEach(t),_jo=i(J),qv=n(J,"LI",{});var wxe=s(qv);ige=n(wxe,"STRONG",{});var Gdt=s(ige);bjo=r(Gdt,"roformer"),Gdt.forEach(t),vjo=r(wxe," \u2014 "),xO=n(wxe,"A",{href:!0});var Odt=s(xO);Fjo=r(Odt,"RoFormerForTokenClassification"),Odt.forEach(t),Tjo=r(wxe," (RoFormer model)"),wxe.forEach(t),Mjo=i(J),Nv=n(J,"LI",{});var Axe=s(Nv);dge=n(Axe,"STRONG",{});var Vdt=s(dge);Ejo=r(Vdt,"squeezebert"),Vdt.forEach(t),Cjo=r(Axe," \u2014 "),$O=n(Axe,"A",{href:!0});var Xdt=s($O);wjo=r(Xdt,"SqueezeBertForTokenClassification"),Xdt.forEach(t),Ajo=r(Axe," (SqueezeBERT model)"),Axe.forEach(t),yjo=i(J),jv=n(J,"LI",{});var yxe=s(jv);cge=n(yxe,"STRONG",{});var zdt=s(cge);Ljo=r(zdt,"xlm"),zdt.forEach(t),xjo=r(yxe," \u2014 "),kO=n(yxe,"A",{href:!0});var Qdt=s(kO);$jo=r(Qdt,"XLMForTokenClassification"),Qdt.forEach(t),kjo=r(yxe," (XLM model)"),yxe.forEach(t),Sjo=i(J),Dv=n(J,"LI",{});var Lxe=s(Dv);fge=n(Lxe,"STRONG",{});var Wdt=s(fge);Rjo=r(Wdt,"xlm-roberta"),Wdt.forEach(t),Bjo=r(Lxe," \u2014 "),SO=n(Lxe,"A",{href:!0});var Hdt=s(SO);Pjo=r(Hdt,"XLMRobertaForTokenClassification"),Hdt.forEach(t),Ijo=r(Lxe," (XLM-RoBERTa model)"),Lxe.forEach(t),qjo=i(J),Gv=n(J,"LI",{});var xxe=s(Gv);mge=n(xxe,"STRONG",{});var Udt=s(mge);Njo=r(Udt,"xlm-roberta-xl"),Udt.forEach(t),jjo=r(xxe," \u2014 "),RO=n(xxe,"A",{href:!0});var Jdt=s(RO);Djo=r(Jdt,"XLMRobertaXLForTokenClassification"),Jdt.forEach(t),Gjo=r(xxe," (XLM-RoBERTa-XL model)"),xxe.forEach(t),Ojo=i(J),Ov=n(J,"LI",{});var $xe=s(Ov);gge=n($xe,"STRONG",{});var Ydt=s(gge);Vjo=r(Ydt,"xlnet"),Ydt.forEach(t),Xjo=r($xe," \u2014 "),BO=n($xe,"A",{href:!0});var Kdt=s(BO);zjo=r(Kdt,"XLNetForTokenClassification"),Kdt.forEach(t),Qjo=r($xe," (XLNet model)"),$xe.forEach(t),Wjo=i(J),Vv=n(J,"LI",{});var kxe=s(Vv);hge=n(kxe,"STRONG",{});var Zdt=s(hge);Hjo=r(Zdt,"yoso"),Zdt.forEach(t),Ujo=r(kxe," \u2014 "),PO=n(kxe,"A",{href:!0});var ect=s(PO);Jjo=r(ect,"YosoForTokenClassification"),ect.forEach(t),Yjo=r(kxe," (YOSO model)"),kxe.forEach(t),J.forEach(t),Kjo=i(la),Xv=n(la,"P",{});var Sxe=s(Xv);Zjo=r(Sxe,"The model is set in evaluation mode by default using "),pge=n(Sxe,"CODE",{});var oct=s(pge);eDo=r(oct,"model.eval()"),oct.forEach(t),oDo=r(Sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=n(Sxe,"CODE",{});var rct=s(uge);rDo=r(rct,"model.train()"),rct.forEach(t),Sxe.forEach(t),tDo=i(la),T(zv.$$.fragment,la),la.forEach(t),Hs.forEach(t),DIe=i(f),Hi=n(f,"H2",{class:!0});var XNe=s(Hi);Qv=n(XNe,"A",{id:!0,class:!0,href:!0});var tct=s(Qv);_ge=n(tct,"SPAN",{});var act=s(_ge);T(vy.$$.fragment,act),act.forEach(t),tct.forEach(t),aDo=i(XNe),bge=n(XNe,"SPAN",{});var nct=s(bge);nDo=r(nct,"AutoModelForQuestionAnswering"),nct.forEach(t),XNe.forEach(t),GIe=i(f),qo=n(f,"DIV",{class:!0});var Us=s(qo);T(Fy.$$.fragment,Us),sDo=i(Us),Ui=n(Us,"P",{});var IK=s(Ui);lDo=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),IO=n(IK,"A",{href:!0});var sct=s(IO);iDo=r(sct,"from_pretrained()"),sct.forEach(t),dDo=r(IK," class method or the "),qO=n(IK,"A",{href:!0});var lct=s(qO);cDo=r(lct,"from_config()"),lct.forEach(t),fDo=r(IK,` class
method.`),IK.forEach(t),mDo=i(Us),Ty=n(Us,"P",{});var zNe=s(Ty);gDo=r(zNe,"This class cannot be instantiated directly using "),vge=n(zNe,"CODE",{});var ict=s(vge);hDo=r(ict,"__init__()"),ict.forEach(t),pDo=r(zNe," (throws an error)."),zNe.forEach(t),uDo=i(Us),ct=n(Us,"DIV",{class:!0});var Ew=s(ct);T(My.$$.fragment,Ew),_Do=i(Ew),Fge=n(Ew,"P",{});var dct=s(Fge);bDo=r(dct,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dct.forEach(t),vDo=i(Ew),Ji=n(Ew,"P",{});var qK=s(Ji);FDo=r(qK,`Note:
Loading a model from its configuration file does `),Tge=n(qK,"STRONG",{});var cct=s(Tge);TDo=r(cct,"not"),cct.forEach(t),MDo=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=n(qK,"A",{href:!0});var fct=s(NO);EDo=r(fct,"from_pretrained()"),fct.forEach(t),CDo=r(qK," to load the model weights."),qK.forEach(t),wDo=i(Ew),T(Wv.$$.fragment,Ew),Ew.forEach(t),ADo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(Ey.$$.fragment,ia),yDo=i(ia),Mge=n(ia,"P",{});var mct=s(Mge);LDo=r(mct,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mct.forEach(t),xDo=i(ia),Pa=n(ia,"P",{});var Cw=s(Pa);$Do=r(Cw,"The model class to instantiate is selected based on the "),Ege=n(Cw,"CODE",{});var gct=s(Ege);kDo=r(gct,"model_type"),gct.forEach(t),SDo=r(Cw,` property of the config object (either
passed as an argument or loaded from `),Cge=n(Cw,"CODE",{});var hct=s(Cge);RDo=r(hct,"pretrained_model_name_or_path"),hct.forEach(t),BDo=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wge=n(Cw,"CODE",{});var pct=s(wge);PDo=r(pct,"pretrained_model_name_or_path"),pct.forEach(t),IDo=r(Cw,":"),Cw.forEach(t),qDo=i(ia),V=n(ia,"UL",{});var X=s(V);Hv=n(X,"LI",{});var Rxe=s(Hv);Age=n(Rxe,"STRONG",{});var uct=s(Age);NDo=r(uct,"albert"),uct.forEach(t),jDo=r(Rxe," \u2014 "),jO=n(Rxe,"A",{href:!0});var _ct=s(jO);DDo=r(_ct,"AlbertForQuestionAnswering"),_ct.forEach(t),GDo=r(Rxe," (ALBERT model)"),Rxe.forEach(t),ODo=i(X),Uv=n(X,"LI",{});var Bxe=s(Uv);yge=n(Bxe,"STRONG",{});var bct=s(yge);VDo=r(bct,"bart"),bct.forEach(t),XDo=r(Bxe," \u2014 "),DO=n(Bxe,"A",{href:!0});var vct=s(DO);zDo=r(vct,"BartForQuestionAnswering"),vct.forEach(t),QDo=r(Bxe," (BART model)"),Bxe.forEach(t),WDo=i(X),Jv=n(X,"LI",{});var Pxe=s(Jv);Lge=n(Pxe,"STRONG",{});var Fct=s(Lge);HDo=r(Fct,"bert"),Fct.forEach(t),UDo=r(Pxe," \u2014 "),GO=n(Pxe,"A",{href:!0});var Tct=s(GO);JDo=r(Tct,"BertForQuestionAnswering"),Tct.forEach(t),YDo=r(Pxe," (BERT model)"),Pxe.forEach(t),KDo=i(X),Yv=n(X,"LI",{});var Ixe=s(Yv);xge=n(Ixe,"STRONG",{});var Mct=s(xge);ZDo=r(Mct,"big_bird"),Mct.forEach(t),eGo=r(Ixe," \u2014 "),OO=n(Ixe,"A",{href:!0});var Ect=s(OO);oGo=r(Ect,"BigBirdForQuestionAnswering"),Ect.forEach(t),rGo=r(Ixe," (BigBird model)"),Ixe.forEach(t),tGo=i(X),Kv=n(X,"LI",{});var qxe=s(Kv);$ge=n(qxe,"STRONG",{});var Cct=s($ge);aGo=r(Cct,"bigbird_pegasus"),Cct.forEach(t),nGo=r(qxe," \u2014 "),VO=n(qxe,"A",{href:!0});var wct=s(VO);sGo=r(wct,"BigBirdPegasusForQuestionAnswering"),wct.forEach(t),lGo=r(qxe," (BigBirdPegasus model)"),qxe.forEach(t),iGo=i(X),Zv=n(X,"LI",{});var Nxe=s(Zv);kge=n(Nxe,"STRONG",{});var Act=s(kge);dGo=r(Act,"camembert"),Act.forEach(t),cGo=r(Nxe," \u2014 "),XO=n(Nxe,"A",{href:!0});var yct=s(XO);fGo=r(yct,"CamembertForQuestionAnswering"),yct.forEach(t),mGo=r(Nxe," (CamemBERT model)"),Nxe.forEach(t),gGo=i(X),eF=n(X,"LI",{});var jxe=s(eF);Sge=n(jxe,"STRONG",{});var Lct=s(Sge);hGo=r(Lct,"canine"),Lct.forEach(t),pGo=r(jxe," \u2014 "),zO=n(jxe,"A",{href:!0});var xct=s(zO);uGo=r(xct,"CanineForQuestionAnswering"),xct.forEach(t),_Go=r(jxe," (Canine model)"),jxe.forEach(t),bGo=i(X),oF=n(X,"LI",{});var Dxe=s(oF);Rge=n(Dxe,"STRONG",{});var $ct=s(Rge);vGo=r($ct,"convbert"),$ct.forEach(t),FGo=r(Dxe," \u2014 "),QO=n(Dxe,"A",{href:!0});var kct=s(QO);TGo=r(kct,"ConvBertForQuestionAnswering"),kct.forEach(t),MGo=r(Dxe," (ConvBERT model)"),Dxe.forEach(t),EGo=i(X),rF=n(X,"LI",{});var Gxe=s(rF);Bge=n(Gxe,"STRONG",{});var Sct=s(Bge);CGo=r(Sct,"data2vec-text"),Sct.forEach(t),wGo=r(Gxe," \u2014 "),WO=n(Gxe,"A",{href:!0});var Rct=s(WO);AGo=r(Rct,"Data2VecTextForQuestionAnswering"),Rct.forEach(t),yGo=r(Gxe," (Data2VecText model)"),Gxe.forEach(t),LGo=i(X),tF=n(X,"LI",{});var Oxe=s(tF);Pge=n(Oxe,"STRONG",{});var Bct=s(Pge);xGo=r(Bct,"deberta"),Bct.forEach(t),$Go=r(Oxe," \u2014 "),HO=n(Oxe,"A",{href:!0});var Pct=s(HO);kGo=r(Pct,"DebertaForQuestionAnswering"),Pct.forEach(t),SGo=r(Oxe," (DeBERTa model)"),Oxe.forEach(t),RGo=i(X),aF=n(X,"LI",{});var Vxe=s(aF);Ige=n(Vxe,"STRONG",{});var Ict=s(Ige);BGo=r(Ict,"deberta-v2"),Ict.forEach(t),PGo=r(Vxe," \u2014 "),UO=n(Vxe,"A",{href:!0});var qct=s(UO);IGo=r(qct,"DebertaV2ForQuestionAnswering"),qct.forEach(t),qGo=r(Vxe," (DeBERTa-v2 model)"),Vxe.forEach(t),NGo=i(X),nF=n(X,"LI",{});var Xxe=s(nF);qge=n(Xxe,"STRONG",{});var Nct=s(qge);jGo=r(Nct,"distilbert"),Nct.forEach(t),DGo=r(Xxe," \u2014 "),JO=n(Xxe,"A",{href:!0});var jct=s(JO);GGo=r(jct,"DistilBertForQuestionAnswering"),jct.forEach(t),OGo=r(Xxe," (DistilBERT model)"),Xxe.forEach(t),VGo=i(X),sF=n(X,"LI",{});var zxe=s(sF);Nge=n(zxe,"STRONG",{});var Dct=s(Nge);XGo=r(Dct,"electra"),Dct.forEach(t),zGo=r(zxe," \u2014 "),YO=n(zxe,"A",{href:!0});var Gct=s(YO);QGo=r(Gct,"ElectraForQuestionAnswering"),Gct.forEach(t),WGo=r(zxe," (ELECTRA model)"),zxe.forEach(t),HGo=i(X),lF=n(X,"LI",{});var Qxe=s(lF);jge=n(Qxe,"STRONG",{});var Oct=s(jge);UGo=r(Oct,"flaubert"),Oct.forEach(t),JGo=r(Qxe," \u2014 "),KO=n(Qxe,"A",{href:!0});var Vct=s(KO);YGo=r(Vct,"FlaubertForQuestionAnsweringSimple"),Vct.forEach(t),KGo=r(Qxe," (FlauBERT model)"),Qxe.forEach(t),ZGo=i(X),iF=n(X,"LI",{});var Wxe=s(iF);Dge=n(Wxe,"STRONG",{});var Xct=s(Dge);eOo=r(Xct,"fnet"),Xct.forEach(t),oOo=r(Wxe," \u2014 "),ZO=n(Wxe,"A",{href:!0});var zct=s(ZO);rOo=r(zct,"FNetForQuestionAnswering"),zct.forEach(t),tOo=r(Wxe," (FNet model)"),Wxe.forEach(t),aOo=i(X),dF=n(X,"LI",{});var Hxe=s(dF);Gge=n(Hxe,"STRONG",{});var Qct=s(Gge);nOo=r(Qct,"funnel"),Qct.forEach(t),sOo=r(Hxe," \u2014 "),eV=n(Hxe,"A",{href:!0});var Wct=s(eV);lOo=r(Wct,"FunnelForQuestionAnswering"),Wct.forEach(t),iOo=r(Hxe," (Funnel Transformer model)"),Hxe.forEach(t),dOo=i(X),cF=n(X,"LI",{});var Uxe=s(cF);Oge=n(Uxe,"STRONG",{});var Hct=s(Oge);cOo=r(Hct,"gptj"),Hct.forEach(t),fOo=r(Uxe," \u2014 "),oV=n(Uxe,"A",{href:!0});var Uct=s(oV);mOo=r(Uct,"GPTJForQuestionAnswering"),Uct.forEach(t),gOo=r(Uxe," (GPT-J model)"),Uxe.forEach(t),hOo=i(X),fF=n(X,"LI",{});var Jxe=s(fF);Vge=n(Jxe,"STRONG",{});var Jct=s(Vge);pOo=r(Jct,"ibert"),Jct.forEach(t),uOo=r(Jxe," \u2014 "),rV=n(Jxe,"A",{href:!0});var Yct=s(rV);_Oo=r(Yct,"IBertForQuestionAnswering"),Yct.forEach(t),bOo=r(Jxe," (I-BERT model)"),Jxe.forEach(t),vOo=i(X),mF=n(X,"LI",{});var Yxe=s(mF);Xge=n(Yxe,"STRONG",{});var Kct=s(Xge);FOo=r(Kct,"layoutlmv2"),Kct.forEach(t),TOo=r(Yxe," \u2014 "),tV=n(Yxe,"A",{href:!0});var Zct=s(tV);MOo=r(Zct,"LayoutLMv2ForQuestionAnswering"),Zct.forEach(t),EOo=r(Yxe," (LayoutLMv2 model)"),Yxe.forEach(t),COo=i(X),gF=n(X,"LI",{});var Kxe=s(gF);zge=n(Kxe,"STRONG",{});var eft=s(zge);wOo=r(eft,"led"),eft.forEach(t),AOo=r(Kxe," \u2014 "),aV=n(Kxe,"A",{href:!0});var oft=s(aV);yOo=r(oft,"LEDForQuestionAnswering"),oft.forEach(t),LOo=r(Kxe," (LED model)"),Kxe.forEach(t),xOo=i(X),hF=n(X,"LI",{});var Zxe=s(hF);Qge=n(Zxe,"STRONG",{});var rft=s(Qge);$Oo=r(rft,"longformer"),rft.forEach(t),kOo=r(Zxe," \u2014 "),nV=n(Zxe,"A",{href:!0});var tft=s(nV);SOo=r(tft,"LongformerForQuestionAnswering"),tft.forEach(t),ROo=r(Zxe," (Longformer model)"),Zxe.forEach(t),BOo=i(X),pF=n(X,"LI",{});var e9e=s(pF);Wge=n(e9e,"STRONG",{});var aft=s(Wge);POo=r(aft,"lxmert"),aft.forEach(t),IOo=r(e9e," \u2014 "),sV=n(e9e,"A",{href:!0});var nft=s(sV);qOo=r(nft,"LxmertForQuestionAnswering"),nft.forEach(t),NOo=r(e9e," (LXMERT model)"),e9e.forEach(t),jOo=i(X),uF=n(X,"LI",{});var o9e=s(uF);Hge=n(o9e,"STRONG",{});var sft=s(Hge);DOo=r(sft,"mbart"),sft.forEach(t),GOo=r(o9e," \u2014 "),lV=n(o9e,"A",{href:!0});var lft=s(lV);OOo=r(lft,"MBartForQuestionAnswering"),lft.forEach(t),VOo=r(o9e," (mBART model)"),o9e.forEach(t),XOo=i(X),_F=n(X,"LI",{});var r9e=s(_F);Uge=n(r9e,"STRONG",{});var ift=s(Uge);zOo=r(ift,"megatron-bert"),ift.forEach(t),QOo=r(r9e," \u2014 "),iV=n(r9e,"A",{href:!0});var dft=s(iV);WOo=r(dft,"MegatronBertForQuestionAnswering"),dft.forEach(t),HOo=r(r9e," (MegatronBert model)"),r9e.forEach(t),UOo=i(X),bF=n(X,"LI",{});var t9e=s(bF);Jge=n(t9e,"STRONG",{});var cft=s(Jge);JOo=r(cft,"mobilebert"),cft.forEach(t),YOo=r(t9e," \u2014 "),dV=n(t9e,"A",{href:!0});var fft=s(dV);KOo=r(fft,"MobileBertForQuestionAnswering"),fft.forEach(t),ZOo=r(t9e," (MobileBERT model)"),t9e.forEach(t),eVo=i(X),vF=n(X,"LI",{});var a9e=s(vF);Yge=n(a9e,"STRONG",{});var mft=s(Yge);oVo=r(mft,"mpnet"),mft.forEach(t),rVo=r(a9e," \u2014 "),cV=n(a9e,"A",{href:!0});var gft=s(cV);tVo=r(gft,"MPNetForQuestionAnswering"),gft.forEach(t),aVo=r(a9e," (MPNet model)"),a9e.forEach(t),nVo=i(X),FF=n(X,"LI",{});var n9e=s(FF);Kge=n(n9e,"STRONG",{});var hft=s(Kge);sVo=r(hft,"nystromformer"),hft.forEach(t),lVo=r(n9e," \u2014 "),fV=n(n9e,"A",{href:!0});var pft=s(fV);iVo=r(pft,"NystromformerForQuestionAnswering"),pft.forEach(t),dVo=r(n9e," (Nystromformer model)"),n9e.forEach(t),cVo=i(X),TF=n(X,"LI",{});var s9e=s(TF);Zge=n(s9e,"STRONG",{});var uft=s(Zge);fVo=r(uft,"qdqbert"),uft.forEach(t),mVo=r(s9e," \u2014 "),mV=n(s9e,"A",{href:!0});var _ft=s(mV);gVo=r(_ft,"QDQBertForQuestionAnswering"),_ft.forEach(t),hVo=r(s9e," (QDQBert model)"),s9e.forEach(t),pVo=i(X),MF=n(X,"LI",{});var l9e=s(MF);ehe=n(l9e,"STRONG",{});var bft=s(ehe);uVo=r(bft,"reformer"),bft.forEach(t),_Vo=r(l9e," \u2014 "),gV=n(l9e,"A",{href:!0});var vft=s(gV);bVo=r(vft,"ReformerForQuestionAnswering"),vft.forEach(t),vVo=r(l9e," (Reformer model)"),l9e.forEach(t),FVo=i(X),EF=n(X,"LI",{});var i9e=s(EF);ohe=n(i9e,"STRONG",{});var Fft=s(ohe);TVo=r(Fft,"rembert"),Fft.forEach(t),MVo=r(i9e," \u2014 "),hV=n(i9e,"A",{href:!0});var Tft=s(hV);EVo=r(Tft,"RemBertForQuestionAnswering"),Tft.forEach(t),CVo=r(i9e," (RemBERT model)"),i9e.forEach(t),wVo=i(X),CF=n(X,"LI",{});var d9e=s(CF);rhe=n(d9e,"STRONG",{});var Mft=s(rhe);AVo=r(Mft,"roberta"),Mft.forEach(t),yVo=r(d9e," \u2014 "),pV=n(d9e,"A",{href:!0});var Eft=s(pV);LVo=r(Eft,"RobertaForQuestionAnswering"),Eft.forEach(t),xVo=r(d9e," (RoBERTa model)"),d9e.forEach(t),$Vo=i(X),wF=n(X,"LI",{});var c9e=s(wF);the=n(c9e,"STRONG",{});var Cft=s(the);kVo=r(Cft,"roformer"),Cft.forEach(t),SVo=r(c9e," \u2014 "),uV=n(c9e,"A",{href:!0});var wft=s(uV);RVo=r(wft,"RoFormerForQuestionAnswering"),wft.forEach(t),BVo=r(c9e," (RoFormer model)"),c9e.forEach(t),PVo=i(X),AF=n(X,"LI",{});var f9e=s(AF);ahe=n(f9e,"STRONG",{});var Aft=s(ahe);IVo=r(Aft,"splinter"),Aft.forEach(t),qVo=r(f9e," \u2014 "),_V=n(f9e,"A",{href:!0});var yft=s(_V);NVo=r(yft,"SplinterForQuestionAnswering"),yft.forEach(t),jVo=r(f9e," (Splinter model)"),f9e.forEach(t),DVo=i(X),yF=n(X,"LI",{});var m9e=s(yF);nhe=n(m9e,"STRONG",{});var Lft=s(nhe);GVo=r(Lft,"squeezebert"),Lft.forEach(t),OVo=r(m9e," \u2014 "),bV=n(m9e,"A",{href:!0});var xft=s(bV);VVo=r(xft,"SqueezeBertForQuestionAnswering"),xft.forEach(t),XVo=r(m9e," (SqueezeBERT model)"),m9e.forEach(t),zVo=i(X),LF=n(X,"LI",{});var g9e=s(LF);she=n(g9e,"STRONG",{});var $ft=s(she);QVo=r($ft,"xlm"),$ft.forEach(t),WVo=r(g9e," \u2014 "),vV=n(g9e,"A",{href:!0});var kft=s(vV);HVo=r(kft,"XLMForQuestionAnsweringSimple"),kft.forEach(t),UVo=r(g9e," (XLM model)"),g9e.forEach(t),JVo=i(X),xF=n(X,"LI",{});var h9e=s(xF);lhe=n(h9e,"STRONG",{});var Sft=s(lhe);YVo=r(Sft,"xlm-roberta"),Sft.forEach(t),KVo=r(h9e," \u2014 "),FV=n(h9e,"A",{href:!0});var Rft=s(FV);ZVo=r(Rft,"XLMRobertaForQuestionAnswering"),Rft.forEach(t),eXo=r(h9e," (XLM-RoBERTa model)"),h9e.forEach(t),oXo=i(X),$F=n(X,"LI",{});var p9e=s($F);ihe=n(p9e,"STRONG",{});var Bft=s(ihe);rXo=r(Bft,"xlm-roberta-xl"),Bft.forEach(t),tXo=r(p9e," \u2014 "),TV=n(p9e,"A",{href:!0});var Pft=s(TV);aXo=r(Pft,"XLMRobertaXLForQuestionAnswering"),Pft.forEach(t),nXo=r(p9e," (XLM-RoBERTa-XL model)"),p9e.forEach(t),sXo=i(X),kF=n(X,"LI",{});var u9e=s(kF);dhe=n(u9e,"STRONG",{});var Ift=s(dhe);lXo=r(Ift,"xlnet"),Ift.forEach(t),iXo=r(u9e," \u2014 "),MV=n(u9e,"A",{href:!0});var qft=s(MV);dXo=r(qft,"XLNetForQuestionAnsweringSimple"),qft.forEach(t),cXo=r(u9e," (XLNet model)"),u9e.forEach(t),fXo=i(X),SF=n(X,"LI",{});var _9e=s(SF);che=n(_9e,"STRONG",{});var Nft=s(che);mXo=r(Nft,"yoso"),Nft.forEach(t),gXo=r(_9e," \u2014 "),EV=n(_9e,"A",{href:!0});var jft=s(EV);hXo=r(jft,"YosoForQuestionAnswering"),jft.forEach(t),pXo=r(_9e," (YOSO model)"),_9e.forEach(t),X.forEach(t),uXo=i(ia),RF=n(ia,"P",{});var b9e=s(RF);_Xo=r(b9e,"The model is set in evaluation mode by default using "),fhe=n(b9e,"CODE",{});var Dft=s(fhe);bXo=r(Dft,"model.eval()"),Dft.forEach(t),vXo=r(b9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mhe=n(b9e,"CODE",{});var Gft=s(mhe);FXo=r(Gft,"model.train()"),Gft.forEach(t),b9e.forEach(t),TXo=i(ia),T(BF.$$.fragment,ia),ia.forEach(t),Us.forEach(t),OIe=i(f),Yi=n(f,"H2",{class:!0});var QNe=s(Yi);PF=n(QNe,"A",{id:!0,class:!0,href:!0});var Oft=s(PF);ghe=n(Oft,"SPAN",{});var Vft=s(ghe);T(Cy.$$.fragment,Vft),Vft.forEach(t),Oft.forEach(t),MXo=i(QNe),hhe=n(QNe,"SPAN",{});var Xft=s(hhe);EXo=r(Xft,"AutoModelForTableQuestionAnswering"),Xft.forEach(t),QNe.forEach(t),VIe=i(f),No=n(f,"DIV",{class:!0});var Js=s(No);T(wy.$$.fragment,Js),CXo=i(Js),Ki=n(Js,"P",{});var NK=s(Ki);wXo=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),CV=n(NK,"A",{href:!0});var zft=s(CV);AXo=r(zft,"from_pretrained()"),zft.forEach(t),yXo=r(NK," class method or the "),wV=n(NK,"A",{href:!0});var Qft=s(wV);LXo=r(Qft,"from_config()"),Qft.forEach(t),xXo=r(NK,` class
method.`),NK.forEach(t),$Xo=i(Js),Ay=n(Js,"P",{});var WNe=s(Ay);kXo=r(WNe,"This class cannot be instantiated directly using "),phe=n(WNe,"CODE",{});var Wft=s(phe);SXo=r(Wft,"__init__()"),Wft.forEach(t),RXo=r(WNe," (throws an error)."),WNe.forEach(t),BXo=i(Js),ft=n(Js,"DIV",{class:!0});var ww=s(ft);T(yy.$$.fragment,ww),PXo=i(ww),uhe=n(ww,"P",{});var Hft=s(uhe);IXo=r(Hft,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Hft.forEach(t),qXo=i(ww),Zi=n(ww,"P",{});var jK=s(Zi);NXo=r(jK,`Note:
Loading a model from its configuration file does `),_he=n(jK,"STRONG",{});var Uft=s(_he);jXo=r(Uft,"not"),Uft.forEach(t),DXo=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=n(jK,"A",{href:!0});var Jft=s(AV);GXo=r(Jft,"from_pretrained()"),Jft.forEach(t),OXo=r(jK," to load the model weights."),jK.forEach(t),VXo=i(ww),T(IF.$$.fragment,ww),ww.forEach(t),XXo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(Ly.$$.fragment,da),zXo=i(da),bhe=n(da,"P",{});var Yft=s(bhe);QXo=r(Yft,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Yft.forEach(t),WXo=i(da),Ia=n(da,"P",{});var Aw=s(Ia);HXo=r(Aw,"The model class to instantiate is selected based on the "),vhe=n(Aw,"CODE",{});var Kft=s(vhe);UXo=r(Kft,"model_type"),Kft.forEach(t),JXo=r(Aw,` property of the config object (either
passed as an argument or loaded from `),Fhe=n(Aw,"CODE",{});var Zft=s(Fhe);YXo=r(Zft,"pretrained_model_name_or_path"),Zft.forEach(t),KXo=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),The=n(Aw,"CODE",{});var emt=s(The);ZXo=r(emt,"pretrained_model_name_or_path"),emt.forEach(t),ezo=r(Aw,":"),Aw.forEach(t),ozo=i(da),Mhe=n(da,"UL",{});var omt=s(Mhe);qF=n(omt,"LI",{});var v9e=s(qF);Ehe=n(v9e,"STRONG",{});var rmt=s(Ehe);rzo=r(rmt,"tapas"),rmt.forEach(t),tzo=r(v9e," \u2014 "),yV=n(v9e,"A",{href:!0});var tmt=s(yV);azo=r(tmt,"TapasForQuestionAnswering"),tmt.forEach(t),nzo=r(v9e," (TAPAS model)"),v9e.forEach(t),omt.forEach(t),szo=i(da),NF=n(da,"P",{});var F9e=s(NF);lzo=r(F9e,"The model is set in evaluation mode by default using "),Che=n(F9e,"CODE",{});var amt=s(Che);izo=r(amt,"model.eval()"),amt.forEach(t),dzo=r(F9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),whe=n(F9e,"CODE",{});var nmt=s(whe);czo=r(nmt,"model.train()"),nmt.forEach(t),F9e.forEach(t),fzo=i(da),T(jF.$$.fragment,da),da.forEach(t),Js.forEach(t),XIe=i(f),ed=n(f,"H2",{class:!0});var HNe=s(ed);DF=n(HNe,"A",{id:!0,class:!0,href:!0});var smt=s(DF);Ahe=n(smt,"SPAN",{});var lmt=s(Ahe);T(xy.$$.fragment,lmt),lmt.forEach(t),smt.forEach(t),mzo=i(HNe),yhe=n(HNe,"SPAN",{});var imt=s(yhe);gzo=r(imt,"AutoModelForImageClassification"),imt.forEach(t),HNe.forEach(t),zIe=i(f),jo=n(f,"DIV",{class:!0});var Ys=s(jo);T($y.$$.fragment,Ys),hzo=i(Ys),od=n(Ys,"P",{});var DK=s(od);pzo=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LV=n(DK,"A",{href:!0});var dmt=s(LV);uzo=r(dmt,"from_pretrained()"),dmt.forEach(t),_zo=r(DK," class method or the "),xV=n(DK,"A",{href:!0});var cmt=s(xV);bzo=r(cmt,"from_config()"),cmt.forEach(t),vzo=r(DK,` class
method.`),DK.forEach(t),Fzo=i(Ys),ky=n(Ys,"P",{});var UNe=s(ky);Tzo=r(UNe,"This class cannot be instantiated directly using "),Lhe=n(UNe,"CODE",{});var fmt=s(Lhe);Mzo=r(fmt,"__init__()"),fmt.forEach(t),Ezo=r(UNe," (throws an error)."),UNe.forEach(t),Czo=i(Ys),mt=n(Ys,"DIV",{class:!0});var yw=s(mt);T(Sy.$$.fragment,yw),wzo=i(yw),xhe=n(yw,"P",{});var mmt=s(xhe);Azo=r(mmt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mmt.forEach(t),yzo=i(yw),rd=n(yw,"P",{});var GK=s(rd);Lzo=r(GK,`Note:
Loading a model from its configuration file does `),$he=n(GK,"STRONG",{});var gmt=s($he);xzo=r(gmt,"not"),gmt.forEach(t),$zo=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$V=n(GK,"A",{href:!0});var hmt=s($V);kzo=r(hmt,"from_pretrained()"),hmt.forEach(t),Szo=r(GK," to load the model weights."),GK.forEach(t),Rzo=i(yw),T(GF.$$.fragment,yw),yw.forEach(t),Bzo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(Ry.$$.fragment,ca),Pzo=i(ca),khe=n(ca,"P",{});var pmt=s(khe);Izo=r(pmt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),pmt.forEach(t),qzo=i(ca),qa=n(ca,"P",{});var Lw=s(qa);Nzo=r(Lw,"The model class to instantiate is selected based on the "),She=n(Lw,"CODE",{});var umt=s(She);jzo=r(umt,"model_type"),umt.forEach(t),Dzo=r(Lw,` property of the config object (either
passed as an argument or loaded from `),Rhe=n(Lw,"CODE",{});var _mt=s(Rhe);Gzo=r(_mt,"pretrained_model_name_or_path"),_mt.forEach(t),Ozo=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=n(Lw,"CODE",{});var bmt=s(Bhe);Vzo=r(bmt,"pretrained_model_name_or_path"),bmt.forEach(t),Xzo=r(Lw,":"),Lw.forEach(t),zzo=i(ca),Fe=n(ca,"UL",{});var Ee=s(Fe);OF=n(Ee,"LI",{});var T9e=s(OF);Phe=n(T9e,"STRONG",{});var vmt=s(Phe);Qzo=r(vmt,"beit"),vmt.forEach(t),Wzo=r(T9e," \u2014 "),kV=n(T9e,"A",{href:!0});var Fmt=s(kV);Hzo=r(Fmt,"BeitForImageClassification"),Fmt.forEach(t),Uzo=r(T9e," (BEiT model)"),T9e.forEach(t),Jzo=i(Ee),VF=n(Ee,"LI",{});var M9e=s(VF);Ihe=n(M9e,"STRONG",{});var Tmt=s(Ihe);Yzo=r(Tmt,"convnext"),Tmt.forEach(t),Kzo=r(M9e," \u2014 "),SV=n(M9e,"A",{href:!0});var Mmt=s(SV);Zzo=r(Mmt,"ConvNextForImageClassification"),Mmt.forEach(t),eQo=r(M9e," (ConvNext model)"),M9e.forEach(t),oQo=i(Ee),XF=n(Ee,"LI",{});var E9e=s(XF);qhe=n(E9e,"STRONG",{});var Emt=s(qhe);rQo=r(Emt,"data2vec-vision"),Emt.forEach(t),tQo=r(E9e," \u2014 "),RV=n(E9e,"A",{href:!0});var Cmt=s(RV);aQo=r(Cmt,"Data2VecVisionForImageClassification"),Cmt.forEach(t),nQo=r(E9e," (Data2VecVision model)"),E9e.forEach(t),sQo=i(Ee),Rs=n(Ee,"LI",{});var _$=s(Rs);Nhe=n(_$,"STRONG",{});var wmt=s(Nhe);lQo=r(wmt,"deit"),wmt.forEach(t),iQo=r(_$," \u2014 "),BV=n(_$,"A",{href:!0});var Amt=s(BV);dQo=r(Amt,"DeiTForImageClassification"),Amt.forEach(t),cQo=r(_$," or "),PV=n(_$,"A",{href:!0});var ymt=s(PV);fQo=r(ymt,"DeiTForImageClassificationWithTeacher"),ymt.forEach(t),mQo=r(_$," (DeiT model)"),_$.forEach(t),gQo=i(Ee),zF=n(Ee,"LI",{});var C9e=s(zF);jhe=n(C9e,"STRONG",{});var Lmt=s(jhe);hQo=r(Lmt,"imagegpt"),Lmt.forEach(t),pQo=r(C9e," \u2014 "),IV=n(C9e,"A",{href:!0});var xmt=s(IV);uQo=r(xmt,"ImageGPTForImageClassification"),xmt.forEach(t),_Qo=r(C9e," (ImageGPT model)"),C9e.forEach(t),bQo=i(Ee),gt=n(Ee,"LI",{});var ff=s(gt);Dhe=n(ff,"STRONG",{});var $mt=s(Dhe);vQo=r($mt,"perceiver"),$mt.forEach(t),FQo=r(ff," \u2014 "),qV=n(ff,"A",{href:!0});var kmt=s(qV);TQo=r(kmt,"PerceiverForImageClassificationLearned"),kmt.forEach(t),MQo=r(ff," or "),NV=n(ff,"A",{href:!0});var Smt=s(NV);EQo=r(Smt,"PerceiverForImageClassificationFourier"),Smt.forEach(t),CQo=r(ff," or "),jV=n(ff,"A",{href:!0});var Rmt=s(jV);wQo=r(Rmt,"PerceiverForImageClassificationConvProcessing"),Rmt.forEach(t),AQo=r(ff," (Perceiver model)"),ff.forEach(t),yQo=i(Ee),QF=n(Ee,"LI",{});var w9e=s(QF);Ghe=n(w9e,"STRONG",{});var Bmt=s(Ghe);LQo=r(Bmt,"poolformer"),Bmt.forEach(t),xQo=r(w9e," \u2014 "),DV=n(w9e,"A",{href:!0});var Pmt=s(DV);$Qo=r(Pmt,"PoolFormerForImageClassification"),Pmt.forEach(t),kQo=r(w9e," (PoolFormer model)"),w9e.forEach(t),SQo=i(Ee),WF=n(Ee,"LI",{});var A9e=s(WF);Ohe=n(A9e,"STRONG",{});var Imt=s(Ohe);RQo=r(Imt,"regnet"),Imt.forEach(t),BQo=r(A9e," \u2014 "),GV=n(A9e,"A",{href:!0});var qmt=s(GV);PQo=r(qmt,"RegNetForImageClassification"),qmt.forEach(t),IQo=r(A9e," (RegNet model)"),A9e.forEach(t),qQo=i(Ee),HF=n(Ee,"LI",{});var y9e=s(HF);Vhe=n(y9e,"STRONG",{});var Nmt=s(Vhe);NQo=r(Nmt,"resnet"),Nmt.forEach(t),jQo=r(y9e," \u2014 "),OV=n(y9e,"A",{href:!0});var jmt=s(OV);DQo=r(jmt,"ResNetForImageClassification"),jmt.forEach(t),GQo=r(y9e," (ResNet model)"),y9e.forEach(t),OQo=i(Ee),UF=n(Ee,"LI",{});var L9e=s(UF);Xhe=n(L9e,"STRONG",{});var Dmt=s(Xhe);VQo=r(Dmt,"segformer"),Dmt.forEach(t),XQo=r(L9e," \u2014 "),VV=n(L9e,"A",{href:!0});var Gmt=s(VV);zQo=r(Gmt,"SegformerForImageClassification"),Gmt.forEach(t),QQo=r(L9e," (SegFormer model)"),L9e.forEach(t),WQo=i(Ee),JF=n(Ee,"LI",{});var x9e=s(JF);zhe=n(x9e,"STRONG",{});var Omt=s(zhe);HQo=r(Omt,"swin"),Omt.forEach(t),UQo=r(x9e," \u2014 "),XV=n(x9e,"A",{href:!0});var Vmt=s(XV);JQo=r(Vmt,"SwinForImageClassification"),Vmt.forEach(t),YQo=r(x9e," (Swin model)"),x9e.forEach(t),KQo=i(Ee),YF=n(Ee,"LI",{});var $9e=s(YF);Qhe=n($9e,"STRONG",{});var Xmt=s(Qhe);ZQo=r(Xmt,"van"),Xmt.forEach(t),eWo=r($9e," \u2014 "),zV=n($9e,"A",{href:!0});var zmt=s(zV);oWo=r(zmt,"VanForImageClassification"),zmt.forEach(t),rWo=r($9e," (VAN model)"),$9e.forEach(t),tWo=i(Ee),KF=n(Ee,"LI",{});var k9e=s(KF);Whe=n(k9e,"STRONG",{});var Qmt=s(Whe);aWo=r(Qmt,"vit"),Qmt.forEach(t),nWo=r(k9e," \u2014 "),QV=n(k9e,"A",{href:!0});var Wmt=s(QV);sWo=r(Wmt,"ViTForImageClassification"),Wmt.forEach(t),lWo=r(k9e," (ViT model)"),k9e.forEach(t),Ee.forEach(t),iWo=i(ca),ZF=n(ca,"P",{});var S9e=s(ZF);dWo=r(S9e,"The model is set in evaluation mode by default using "),Hhe=n(S9e,"CODE",{});var Hmt=s(Hhe);cWo=r(Hmt,"model.eval()"),Hmt.forEach(t),fWo=r(S9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uhe=n(S9e,"CODE",{});var Umt=s(Uhe);mWo=r(Umt,"model.train()"),Umt.forEach(t),S9e.forEach(t),gWo=i(ca),T(e0.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),QIe=i(f),td=n(f,"H2",{class:!0});var JNe=s(td);o0=n(JNe,"A",{id:!0,class:!0,href:!0});var Jmt=s(o0);Jhe=n(Jmt,"SPAN",{});var Ymt=s(Jhe);T(By.$$.fragment,Ymt),Ymt.forEach(t),Jmt.forEach(t),hWo=i(JNe),Yhe=n(JNe,"SPAN",{});var Kmt=s(Yhe);pWo=r(Kmt,"AutoModelForVision2Seq"),Kmt.forEach(t),JNe.forEach(t),WIe=i(f),Do=n(f,"DIV",{class:!0});var Ks=s(Do);T(Py.$$.fragment,Ks),uWo=i(Ks),ad=n(Ks,"P",{});var OK=s(ad);_Wo=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WV=n(OK,"A",{href:!0});var Zmt=s(WV);bWo=r(Zmt,"from_pretrained()"),Zmt.forEach(t),vWo=r(OK," class method or the "),HV=n(OK,"A",{href:!0});var egt=s(HV);FWo=r(egt,"from_config()"),egt.forEach(t),TWo=r(OK,` class
method.`),OK.forEach(t),MWo=i(Ks),Iy=n(Ks,"P",{});var YNe=s(Iy);EWo=r(YNe,"This class cannot be instantiated directly using "),Khe=n(YNe,"CODE",{});var ogt=s(Khe);CWo=r(ogt,"__init__()"),ogt.forEach(t),wWo=r(YNe," (throws an error)."),YNe.forEach(t),AWo=i(Ks),ht=n(Ks,"DIV",{class:!0});var xw=s(ht);T(qy.$$.fragment,xw),yWo=i(xw),Zhe=n(xw,"P",{});var rgt=s(Zhe);LWo=r(rgt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rgt.forEach(t),xWo=i(xw),nd=n(xw,"P",{});var VK=s(nd);$Wo=r(VK,`Note:
Loading a model from its configuration file does `),epe=n(VK,"STRONG",{});var tgt=s(epe);kWo=r(tgt,"not"),tgt.forEach(t),SWo=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=n(VK,"A",{href:!0});var agt=s(UV);RWo=r(agt,"from_pretrained()"),agt.forEach(t),BWo=r(VK," to load the model weights."),VK.forEach(t),PWo=i(xw),T(r0.$$.fragment,xw),xw.forEach(t),IWo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(Ny.$$.fragment,fa),qWo=i(fa),ope=n(fa,"P",{});var ngt=s(ope);NWo=r(ngt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ngt.forEach(t),jWo=i(fa),Na=n(fa,"P",{});var $w=s(Na);DWo=r($w,"The model class to instantiate is selected based on the "),rpe=n($w,"CODE",{});var sgt=s(rpe);GWo=r(sgt,"model_type"),sgt.forEach(t),OWo=r($w,` property of the config object (either
passed as an argument or loaded from `),tpe=n($w,"CODE",{});var lgt=s(tpe);VWo=r(lgt,"pretrained_model_name_or_path"),lgt.forEach(t),XWo=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=n($w,"CODE",{});var igt=s(ape);zWo=r(igt,"pretrained_model_name_or_path"),igt.forEach(t),QWo=r($w,":"),$w.forEach(t),WWo=i(fa),npe=n(fa,"UL",{});var dgt=s(npe);t0=n(dgt,"LI",{});var R9e=s(t0);spe=n(R9e,"STRONG",{});var cgt=s(spe);HWo=r(cgt,"vision-encoder-decoder"),cgt.forEach(t),UWo=r(R9e," \u2014 "),JV=n(R9e,"A",{href:!0});var fgt=s(JV);JWo=r(fgt,"VisionEncoderDecoderModel"),fgt.forEach(t),YWo=r(R9e," (Vision Encoder decoder model)"),R9e.forEach(t),dgt.forEach(t),KWo=i(fa),a0=n(fa,"P",{});var B9e=s(a0);ZWo=r(B9e,"The model is set in evaluation mode by default using "),lpe=n(B9e,"CODE",{});var mgt=s(lpe);eHo=r(mgt,"model.eval()"),mgt.forEach(t),oHo=r(B9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ipe=n(B9e,"CODE",{});var ggt=s(ipe);rHo=r(ggt,"model.train()"),ggt.forEach(t),B9e.forEach(t),tHo=i(fa),T(n0.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),HIe=i(f),sd=n(f,"H2",{class:!0});var KNe=s(sd);s0=n(KNe,"A",{id:!0,class:!0,href:!0});var hgt=s(s0);dpe=n(hgt,"SPAN",{});var pgt=s(dpe);T(jy.$$.fragment,pgt),pgt.forEach(t),hgt.forEach(t),aHo=i(KNe),cpe=n(KNe,"SPAN",{});var ugt=s(cpe);nHo=r(ugt,"AutoModelForAudioClassification"),ugt.forEach(t),KNe.forEach(t),UIe=i(f),Go=n(f,"DIV",{class:!0});var Zs=s(Go);T(Dy.$$.fragment,Zs),sHo=i(Zs),ld=n(Zs,"P",{});var XK=s(ld);lHo=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),YV=n(XK,"A",{href:!0});var _gt=s(YV);iHo=r(_gt,"from_pretrained()"),_gt.forEach(t),dHo=r(XK," class method or the "),KV=n(XK,"A",{href:!0});var bgt=s(KV);cHo=r(bgt,"from_config()"),bgt.forEach(t),fHo=r(XK,` class
method.`),XK.forEach(t),mHo=i(Zs),Gy=n(Zs,"P",{});var ZNe=s(Gy);gHo=r(ZNe,"This class cannot be instantiated directly using "),fpe=n(ZNe,"CODE",{});var vgt=s(fpe);hHo=r(vgt,"__init__()"),vgt.forEach(t),pHo=r(ZNe," (throws an error)."),ZNe.forEach(t),uHo=i(Zs),pt=n(Zs,"DIV",{class:!0});var kw=s(pt);T(Oy.$$.fragment,kw),_Ho=i(kw),mpe=n(kw,"P",{});var Fgt=s(mpe);bHo=r(Fgt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Fgt.forEach(t),vHo=i(kw),id=n(kw,"P",{});var zK=s(id);FHo=r(zK,`Note:
Loading a model from its configuration file does `),gpe=n(zK,"STRONG",{});var Tgt=s(gpe);THo=r(Tgt,"not"),Tgt.forEach(t),MHo=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=n(zK,"A",{href:!0});var Mgt=s(ZV);EHo=r(Mgt,"from_pretrained()"),Mgt.forEach(t),CHo=r(zK," to load the model weights."),zK.forEach(t),wHo=i(kw),T(l0.$$.fragment,kw),kw.forEach(t),AHo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(Vy.$$.fragment,ma),yHo=i(ma),hpe=n(ma,"P",{});var Egt=s(hpe);LHo=r(Egt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Egt.forEach(t),xHo=i(ma),ja=n(ma,"P",{});var Sw=s(ja);$Ho=r(Sw,"The model class to instantiate is selected based on the "),ppe=n(Sw,"CODE",{});var Cgt=s(ppe);kHo=r(Cgt,"model_type"),Cgt.forEach(t),SHo=r(Sw,` property of the config object (either
passed as an argument or loaded from `),upe=n(Sw,"CODE",{});var wgt=s(upe);RHo=r(wgt,"pretrained_model_name_or_path"),wgt.forEach(t),BHo=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_pe=n(Sw,"CODE",{});var Agt=s(_pe);PHo=r(Agt,"pretrained_model_name_or_path"),Agt.forEach(t),IHo=r(Sw,":"),Sw.forEach(t),qHo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);i0=n(bo,"LI",{});var P9e=s(i0);bpe=n(P9e,"STRONG",{});var ygt=s(bpe);NHo=r(ygt,"data2vec-audio"),ygt.forEach(t),jHo=r(P9e," \u2014 "),eX=n(P9e,"A",{href:!0});var Lgt=s(eX);DHo=r(Lgt,"Data2VecAudioForSequenceClassification"),Lgt.forEach(t),GHo=r(P9e," (Data2VecAudio model)"),P9e.forEach(t),OHo=i(bo),d0=n(bo,"LI",{});var I9e=s(d0);vpe=n(I9e,"STRONG",{});var xgt=s(vpe);VHo=r(xgt,"hubert"),xgt.forEach(t),XHo=r(I9e," \u2014 "),oX=n(I9e,"A",{href:!0});var $gt=s(oX);zHo=r($gt,"HubertForSequenceClassification"),$gt.forEach(t),QHo=r(I9e," (Hubert model)"),I9e.forEach(t),WHo=i(bo),c0=n(bo,"LI",{});var q9e=s(c0);Fpe=n(q9e,"STRONG",{});var kgt=s(Fpe);HHo=r(kgt,"sew"),kgt.forEach(t),UHo=r(q9e," \u2014 "),rX=n(q9e,"A",{href:!0});var Sgt=s(rX);JHo=r(Sgt,"SEWForSequenceClassification"),Sgt.forEach(t),YHo=r(q9e," (SEW model)"),q9e.forEach(t),KHo=i(bo),f0=n(bo,"LI",{});var N9e=s(f0);Tpe=n(N9e,"STRONG",{});var Rgt=s(Tpe);ZHo=r(Rgt,"sew-d"),Rgt.forEach(t),eUo=r(N9e," \u2014 "),tX=n(N9e,"A",{href:!0});var Bgt=s(tX);oUo=r(Bgt,"SEWDForSequenceClassification"),Bgt.forEach(t),rUo=r(N9e," (SEW-D model)"),N9e.forEach(t),tUo=i(bo),m0=n(bo,"LI",{});var j9e=s(m0);Mpe=n(j9e,"STRONG",{});var Pgt=s(Mpe);aUo=r(Pgt,"unispeech"),Pgt.forEach(t),nUo=r(j9e," \u2014 "),aX=n(j9e,"A",{href:!0});var Igt=s(aX);sUo=r(Igt,"UniSpeechForSequenceClassification"),Igt.forEach(t),lUo=r(j9e," (UniSpeech model)"),j9e.forEach(t),iUo=i(bo),g0=n(bo,"LI",{});var D9e=s(g0);Epe=n(D9e,"STRONG",{});var qgt=s(Epe);dUo=r(qgt,"unispeech-sat"),qgt.forEach(t),cUo=r(D9e," \u2014 "),nX=n(D9e,"A",{href:!0});var Ngt=s(nX);fUo=r(Ngt,"UniSpeechSatForSequenceClassification"),Ngt.forEach(t),mUo=r(D9e," (UniSpeechSat model)"),D9e.forEach(t),gUo=i(bo),h0=n(bo,"LI",{});var G9e=s(h0);Cpe=n(G9e,"STRONG",{});var jgt=s(Cpe);hUo=r(jgt,"wav2vec2"),jgt.forEach(t),pUo=r(G9e," \u2014 "),sX=n(G9e,"A",{href:!0});var Dgt=s(sX);uUo=r(Dgt,"Wav2Vec2ForSequenceClassification"),Dgt.forEach(t),_Uo=r(G9e," (Wav2Vec2 model)"),G9e.forEach(t),bUo=i(bo),p0=n(bo,"LI",{});var O9e=s(p0);wpe=n(O9e,"STRONG",{});var Ggt=s(wpe);vUo=r(Ggt,"wavlm"),Ggt.forEach(t),FUo=r(O9e," \u2014 "),lX=n(O9e,"A",{href:!0});var Ogt=s(lX);TUo=r(Ogt,"WavLMForSequenceClassification"),Ogt.forEach(t),MUo=r(O9e," (WavLM model)"),O9e.forEach(t),bo.forEach(t),EUo=i(ma),u0=n(ma,"P",{});var V9e=s(u0);CUo=r(V9e,"The model is set in evaluation mode by default using "),Ape=n(V9e,"CODE",{});var Vgt=s(Ape);wUo=r(Vgt,"model.eval()"),Vgt.forEach(t),AUo=r(V9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ype=n(V9e,"CODE",{});var Xgt=s(ype);yUo=r(Xgt,"model.train()"),Xgt.forEach(t),V9e.forEach(t),LUo=i(ma),T(_0.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),JIe=i(f),dd=n(f,"H2",{class:!0});var eje=s(dd);b0=n(eje,"A",{id:!0,class:!0,href:!0});var zgt=s(b0);Lpe=n(zgt,"SPAN",{});var Qgt=s(Lpe);T(Xy.$$.fragment,Qgt),Qgt.forEach(t),zgt.forEach(t),xUo=i(eje),xpe=n(eje,"SPAN",{});var Wgt=s(xpe);$Uo=r(Wgt,"AutoModelForAudioFrameClassification"),Wgt.forEach(t),eje.forEach(t),YIe=i(f),Oo=n(f,"DIV",{class:!0});var el=s(Oo);T(zy.$$.fragment,el),kUo=i(el),cd=n(el,"P",{});var QK=s(cd);SUo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),iX=n(QK,"A",{href:!0});var Hgt=s(iX);RUo=r(Hgt,"from_pretrained()"),Hgt.forEach(t),BUo=r(QK," class method or the "),dX=n(QK,"A",{href:!0});var Ugt=s(dX);PUo=r(Ugt,"from_config()"),Ugt.forEach(t),IUo=r(QK,` class
method.`),QK.forEach(t),qUo=i(el),Qy=n(el,"P",{});var oje=s(Qy);NUo=r(oje,"This class cannot be instantiated directly using "),$pe=n(oje,"CODE",{});var Jgt=s($pe);jUo=r(Jgt,"__init__()"),Jgt.forEach(t),DUo=r(oje," (throws an error)."),oje.forEach(t),GUo=i(el),ut=n(el,"DIV",{class:!0});var Rw=s(ut);T(Wy.$$.fragment,Rw),OUo=i(Rw),kpe=n(Rw,"P",{});var Ygt=s(kpe);VUo=r(Ygt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Ygt.forEach(t),XUo=i(Rw),fd=n(Rw,"P",{});var WK=s(fd);zUo=r(WK,`Note:
Loading a model from its configuration file does `),Spe=n(WK,"STRONG",{});var Kgt=s(Spe);QUo=r(Kgt,"not"),Kgt.forEach(t),WUo=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=n(WK,"A",{href:!0});var Zgt=s(cX);HUo=r(Zgt,"from_pretrained()"),Zgt.forEach(t),UUo=r(WK," to load the model weights."),WK.forEach(t),JUo=i(Rw),T(v0.$$.fragment,Rw),Rw.forEach(t),YUo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(Hy.$$.fragment,ga),KUo=i(ga),Rpe=n(ga,"P",{});var eht=s(Rpe);ZUo=r(eht,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),eht.forEach(t),eJo=i(ga),Da=n(ga,"P",{});var Bw=s(Da);oJo=r(Bw,"The model class to instantiate is selected based on the "),Bpe=n(Bw,"CODE",{});var oht=s(Bpe);rJo=r(oht,"model_type"),oht.forEach(t),tJo=r(Bw,` property of the config object (either
passed as an argument or loaded from `),Ppe=n(Bw,"CODE",{});var rht=s(Ppe);aJo=r(rht,"pretrained_model_name_or_path"),rht.forEach(t),nJo=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ipe=n(Bw,"CODE",{});var tht=s(Ipe);sJo=r(tht,"pretrained_model_name_or_path"),tht.forEach(t),lJo=r(Bw,":"),Bw.forEach(t),iJo=i(ga),Ga=n(ga,"UL",{});var Pw=s(Ga);F0=n(Pw,"LI",{});var X9e=s(F0);qpe=n(X9e,"STRONG",{});var aht=s(qpe);dJo=r(aht,"data2vec-audio"),aht.forEach(t),cJo=r(X9e," \u2014 "),fX=n(X9e,"A",{href:!0});var nht=s(fX);fJo=r(nht,"Data2VecAudioForAudioFrameClassification"),nht.forEach(t),mJo=r(X9e," (Data2VecAudio model)"),X9e.forEach(t),gJo=i(Pw),T0=n(Pw,"LI",{});var z9e=s(T0);Npe=n(z9e,"STRONG",{});var sht=s(Npe);hJo=r(sht,"unispeech-sat"),sht.forEach(t),pJo=r(z9e," \u2014 "),mX=n(z9e,"A",{href:!0});var lht=s(mX);uJo=r(lht,"UniSpeechSatForAudioFrameClassification"),lht.forEach(t),_Jo=r(z9e," (UniSpeechSat model)"),z9e.forEach(t),bJo=i(Pw),M0=n(Pw,"LI",{});var Q9e=s(M0);jpe=n(Q9e,"STRONG",{});var iht=s(jpe);vJo=r(iht,"wav2vec2"),iht.forEach(t),FJo=r(Q9e," \u2014 "),gX=n(Q9e,"A",{href:!0});var dht=s(gX);TJo=r(dht,"Wav2Vec2ForAudioFrameClassification"),dht.forEach(t),MJo=r(Q9e," (Wav2Vec2 model)"),Q9e.forEach(t),EJo=i(Pw),E0=n(Pw,"LI",{});var W9e=s(E0);Dpe=n(W9e,"STRONG",{});var cht=s(Dpe);CJo=r(cht,"wavlm"),cht.forEach(t),wJo=r(W9e," \u2014 "),hX=n(W9e,"A",{href:!0});var fht=s(hX);AJo=r(fht,"WavLMForAudioFrameClassification"),fht.forEach(t),yJo=r(W9e," (WavLM model)"),W9e.forEach(t),Pw.forEach(t),LJo=i(ga),C0=n(ga,"P",{});var H9e=s(C0);xJo=r(H9e,"The model is set in evaluation mode by default using "),Gpe=n(H9e,"CODE",{});var mht=s(Gpe);$Jo=r(mht,"model.eval()"),mht.forEach(t),kJo=r(H9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ope=n(H9e,"CODE",{});var ght=s(Ope);SJo=r(ght,"model.train()"),ght.forEach(t),H9e.forEach(t),RJo=i(ga),T(w0.$$.fragment,ga),ga.forEach(t),el.forEach(t),KIe=i(f),md=n(f,"H2",{class:!0});var rje=s(md);A0=n(rje,"A",{id:!0,class:!0,href:!0});var hht=s(A0);Vpe=n(hht,"SPAN",{});var pht=s(Vpe);T(Uy.$$.fragment,pht),pht.forEach(t),hht.forEach(t),BJo=i(rje),Xpe=n(rje,"SPAN",{});var uht=s(Xpe);PJo=r(uht,"AutoModelForCTC"),uht.forEach(t),rje.forEach(t),ZIe=i(f),Vo=n(f,"DIV",{class:!0});var ol=s(Vo);T(Jy.$$.fragment,ol),IJo=i(ol),gd=n(ol,"P",{});var HK=s(gd);qJo=r(HK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),pX=n(HK,"A",{href:!0});var _ht=s(pX);NJo=r(_ht,"from_pretrained()"),_ht.forEach(t),jJo=r(HK," class method or the "),uX=n(HK,"A",{href:!0});var bht=s(uX);DJo=r(bht,"from_config()"),bht.forEach(t),GJo=r(HK,` class
method.`),HK.forEach(t),OJo=i(ol),Yy=n(ol,"P",{});var tje=s(Yy);VJo=r(tje,"This class cannot be instantiated directly using "),zpe=n(tje,"CODE",{});var vht=s(zpe);XJo=r(vht,"__init__()"),vht.forEach(t),zJo=r(tje," (throws an error)."),tje.forEach(t),QJo=i(ol),_t=n(ol,"DIV",{class:!0});var Iw=s(_t);T(Ky.$$.fragment,Iw),WJo=i(Iw),Qpe=n(Iw,"P",{});var Fht=s(Qpe);HJo=r(Fht,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Fht.forEach(t),UJo=i(Iw),hd=n(Iw,"P",{});var UK=s(hd);JJo=r(UK,`Note:
Loading a model from its configuration file does `),Wpe=n(UK,"STRONG",{});var Tht=s(Wpe);YJo=r(Tht,"not"),Tht.forEach(t),KJo=r(UK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=n(UK,"A",{href:!0});var Mht=s(_X);ZJo=r(Mht,"from_pretrained()"),Mht.forEach(t),eYo=r(UK," to load the model weights."),UK.forEach(t),oYo=i(Iw),T(y0.$$.fragment,Iw),Iw.forEach(t),rYo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(Zy.$$.fragment,ha),tYo=i(ha),Hpe=n(ha,"P",{});var Eht=s(Hpe);aYo=r(Eht,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Eht.forEach(t),nYo=i(ha),Oa=n(ha,"P",{});var qw=s(Oa);sYo=r(qw,"The model class to instantiate is selected based on the "),Upe=n(qw,"CODE",{});var Cht=s(Upe);lYo=r(Cht,"model_type"),Cht.forEach(t),iYo=r(qw,` property of the config object (either
passed as an argument or loaded from `),Jpe=n(qw,"CODE",{});var wht=s(Jpe);dYo=r(wht,"pretrained_model_name_or_path"),wht.forEach(t),cYo=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ype=n(qw,"CODE",{});var Aht=s(Ype);fYo=r(Aht,"pretrained_model_name_or_path"),Aht.forEach(t),mYo=r(qw,":"),qw.forEach(t),gYo=i(ha),je=n(ha,"UL",{});var vo=s(je);L0=n(vo,"LI",{});var U9e=s(L0);Kpe=n(U9e,"STRONG",{});var yht=s(Kpe);hYo=r(yht,"data2vec-audio"),yht.forEach(t),pYo=r(U9e," \u2014 "),bX=n(U9e,"A",{href:!0});var Lht=s(bX);uYo=r(Lht,"Data2VecAudioForCTC"),Lht.forEach(t),_Yo=r(U9e," (Data2VecAudio model)"),U9e.forEach(t),bYo=i(vo),x0=n(vo,"LI",{});var J9e=s(x0);Zpe=n(J9e,"STRONG",{});var xht=s(Zpe);vYo=r(xht,"hubert"),xht.forEach(t),FYo=r(J9e," \u2014 "),vX=n(J9e,"A",{href:!0});var $ht=s(vX);TYo=r($ht,"HubertForCTC"),$ht.forEach(t),MYo=r(J9e," (Hubert model)"),J9e.forEach(t),EYo=i(vo),$0=n(vo,"LI",{});var Y9e=s($0);eue=n(Y9e,"STRONG",{});var kht=s(eue);CYo=r(kht,"sew"),kht.forEach(t),wYo=r(Y9e," \u2014 "),FX=n(Y9e,"A",{href:!0});var Sht=s(FX);AYo=r(Sht,"SEWForCTC"),Sht.forEach(t),yYo=r(Y9e," (SEW model)"),Y9e.forEach(t),LYo=i(vo),k0=n(vo,"LI",{});var K9e=s(k0);oue=n(K9e,"STRONG",{});var Rht=s(oue);xYo=r(Rht,"sew-d"),Rht.forEach(t),$Yo=r(K9e," \u2014 "),TX=n(K9e,"A",{href:!0});var Bht=s(TX);kYo=r(Bht,"SEWDForCTC"),Bht.forEach(t),SYo=r(K9e," (SEW-D model)"),K9e.forEach(t),RYo=i(vo),S0=n(vo,"LI",{});var Z9e=s(S0);rue=n(Z9e,"STRONG",{});var Pht=s(rue);BYo=r(Pht,"unispeech"),Pht.forEach(t),PYo=r(Z9e," \u2014 "),MX=n(Z9e,"A",{href:!0});var Iht=s(MX);IYo=r(Iht,"UniSpeechForCTC"),Iht.forEach(t),qYo=r(Z9e," (UniSpeech model)"),Z9e.forEach(t),NYo=i(vo),R0=n(vo,"LI",{});var e$e=s(R0);tue=n(e$e,"STRONG",{});var qht=s(tue);jYo=r(qht,"unispeech-sat"),qht.forEach(t),DYo=r(e$e," \u2014 "),EX=n(e$e,"A",{href:!0});var Nht=s(EX);GYo=r(Nht,"UniSpeechSatForCTC"),Nht.forEach(t),OYo=r(e$e," (UniSpeechSat model)"),e$e.forEach(t),VYo=i(vo),B0=n(vo,"LI",{});var o$e=s(B0);aue=n(o$e,"STRONG",{});var jht=s(aue);XYo=r(jht,"wav2vec2"),jht.forEach(t),zYo=r(o$e," \u2014 "),CX=n(o$e,"A",{href:!0});var Dht=s(CX);QYo=r(Dht,"Wav2Vec2ForCTC"),Dht.forEach(t),WYo=r(o$e," (Wav2Vec2 model)"),o$e.forEach(t),HYo=i(vo),P0=n(vo,"LI",{});var r$e=s(P0);nue=n(r$e,"STRONG",{});var Ght=s(nue);UYo=r(Ght,"wavlm"),Ght.forEach(t),JYo=r(r$e," \u2014 "),wX=n(r$e,"A",{href:!0});var Oht=s(wX);YYo=r(Oht,"WavLMForCTC"),Oht.forEach(t),KYo=r(r$e," (WavLM model)"),r$e.forEach(t),vo.forEach(t),ZYo=i(ha),I0=n(ha,"P",{});var t$e=s(I0);eKo=r(t$e,"The model is set in evaluation mode by default using "),sue=n(t$e,"CODE",{});var Vht=s(sue);oKo=r(Vht,"model.eval()"),Vht.forEach(t),rKo=r(t$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=n(t$e,"CODE",{});var Xht=s(lue);tKo=r(Xht,"model.train()"),Xht.forEach(t),t$e.forEach(t),aKo=i(ha),T(q0.$$.fragment,ha),ha.forEach(t),ol.forEach(t),eqe=i(f),pd=n(f,"H2",{class:!0});var aje=s(pd);N0=n(aje,"A",{id:!0,class:!0,href:!0});var zht=s(N0);iue=n(zht,"SPAN",{});var Qht=s(iue);T(eL.$$.fragment,Qht),Qht.forEach(t),zht.forEach(t),nKo=i(aje),due=n(aje,"SPAN",{});var Wht=s(due);sKo=r(Wht,"AutoModelForSpeechSeq2Seq"),Wht.forEach(t),aje.forEach(t),oqe=i(f),Xo=n(f,"DIV",{class:!0});var rl=s(Xo);T(oL.$$.fragment,rl),lKo=i(rl),ud=n(rl,"P",{});var JK=s(ud);iKo=r(JK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),AX=n(JK,"A",{href:!0});var Hht=s(AX);dKo=r(Hht,"from_pretrained()"),Hht.forEach(t),cKo=r(JK," class method or the "),yX=n(JK,"A",{href:!0});var Uht=s(yX);fKo=r(Uht,"from_config()"),Uht.forEach(t),mKo=r(JK,` class
method.`),JK.forEach(t),gKo=i(rl),rL=n(rl,"P",{});var nje=s(rL);hKo=r(nje,"This class cannot be instantiated directly using "),cue=n(nje,"CODE",{});var Jht=s(cue);pKo=r(Jht,"__init__()"),Jht.forEach(t),uKo=r(nje," (throws an error)."),nje.forEach(t),_Ko=i(rl),bt=n(rl,"DIV",{class:!0});var Nw=s(bt);T(tL.$$.fragment,Nw),bKo=i(Nw),fue=n(Nw,"P",{});var Yht=s(fue);vKo=r(Yht,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Yht.forEach(t),FKo=i(Nw),_d=n(Nw,"P",{});var YK=s(_d);TKo=r(YK,`Note:
Loading a model from its configuration file does `),mue=n(YK,"STRONG",{});var Kht=s(mue);MKo=r(Kht,"not"),Kht.forEach(t),EKo=r(YK,` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=n(YK,"A",{href:!0});var Zht=s(LX);CKo=r(Zht,"from_pretrained()"),Zht.forEach(t),wKo=r(YK," to load the model weights."),YK.forEach(t),AKo=i(Nw),T(j0.$$.fragment,Nw),Nw.forEach(t),yKo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(aL.$$.fragment,pa),LKo=i(pa),gue=n(pa,"P",{});var ept=s(gue);xKo=r(ept,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ept.forEach(t),$Ko=i(pa),Va=n(pa,"P",{});var jw=s(Va);kKo=r(jw,"The model class to instantiate is selected based on the "),hue=n(jw,"CODE",{});var opt=s(hue);SKo=r(opt,"model_type"),opt.forEach(t),RKo=r(jw,` property of the config object (either
passed as an argument or loaded from `),pue=n(jw,"CODE",{});var rpt=s(pue);BKo=r(rpt,"pretrained_model_name_or_path"),rpt.forEach(t),PKo=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=n(jw,"CODE",{});var tpt=s(uue);IKo=r(tpt,"pretrained_model_name_or_path"),tpt.forEach(t),qKo=r(jw,":"),jw.forEach(t),NKo=i(pa),nL=n(pa,"UL",{});var sje=s(nL);D0=n(sje,"LI",{});var a$e=s(D0);_ue=n(a$e,"STRONG",{});var apt=s(_ue);jKo=r(apt,"speech-encoder-decoder"),apt.forEach(t),DKo=r(a$e," \u2014 "),xX=n(a$e,"A",{href:!0});var npt=s(xX);GKo=r(npt,"SpeechEncoderDecoderModel"),npt.forEach(t),OKo=r(a$e," (Speech Encoder decoder model)"),a$e.forEach(t),VKo=i(sje),G0=n(sje,"LI",{});var n$e=s(G0);bue=n(n$e,"STRONG",{});var spt=s(bue);XKo=r(spt,"speech_to_text"),spt.forEach(t),zKo=r(n$e," \u2014 "),$X=n(n$e,"A",{href:!0});var lpt=s($X);QKo=r(lpt,"Speech2TextForConditionalGeneration"),lpt.forEach(t),WKo=r(n$e," (Speech2Text model)"),n$e.forEach(t),sje.forEach(t),HKo=i(pa),O0=n(pa,"P",{});var s$e=s(O0);UKo=r(s$e,"The model is set in evaluation mode by default using "),vue=n(s$e,"CODE",{});var ipt=s(vue);JKo=r(ipt,"model.eval()"),ipt.forEach(t),YKo=r(s$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=n(s$e,"CODE",{});var dpt=s(Fue);KKo=r(dpt,"model.train()"),dpt.forEach(t),s$e.forEach(t),ZKo=i(pa),T(V0.$$.fragment,pa),pa.forEach(t),rl.forEach(t),rqe=i(f),bd=n(f,"H2",{class:!0});var lje=s(bd);X0=n(lje,"A",{id:!0,class:!0,href:!0});var cpt=s(X0);Tue=n(cpt,"SPAN",{});var fpt=s(Tue);T(sL.$$.fragment,fpt),fpt.forEach(t),cpt.forEach(t),eZo=i(lje),Mue=n(lje,"SPAN",{});var mpt=s(Mue);oZo=r(mpt,"AutoModelForAudioXVector"),mpt.forEach(t),lje.forEach(t),tqe=i(f),zo=n(f,"DIV",{class:!0});var tl=s(zo);T(lL.$$.fragment,tl),rZo=i(tl),vd=n(tl,"P",{});var KK=s(vd);tZo=r(KK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),kX=n(KK,"A",{href:!0});var gpt=s(kX);aZo=r(gpt,"from_pretrained()"),gpt.forEach(t),nZo=r(KK," class method or the "),SX=n(KK,"A",{href:!0});var hpt=s(SX);sZo=r(hpt,"from_config()"),hpt.forEach(t),lZo=r(KK,` class
method.`),KK.forEach(t),iZo=i(tl),iL=n(tl,"P",{});var ije=s(iL);dZo=r(ije,"This class cannot be instantiated directly using "),Eue=n(ije,"CODE",{});var ppt=s(Eue);cZo=r(ppt,"__init__()"),ppt.forEach(t),fZo=r(ije," (throws an error)."),ije.forEach(t),mZo=i(tl),vt=n(tl,"DIV",{class:!0});var Dw=s(vt);T(dL.$$.fragment,Dw),gZo=i(Dw),Cue=n(Dw,"P",{});var upt=s(Cue);hZo=r(upt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),upt.forEach(t),pZo=i(Dw),Fd=n(Dw,"P",{});var ZK=s(Fd);uZo=r(ZK,`Note:
Loading a model from its configuration file does `),wue=n(ZK,"STRONG",{});var _pt=s(wue);_Zo=r(_pt,"not"),_pt.forEach(t),bZo=r(ZK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=n(ZK,"A",{href:!0});var bpt=s(RX);vZo=r(bpt,"from_pretrained()"),bpt.forEach(t),FZo=r(ZK," to load the model weights."),ZK.forEach(t),TZo=i(Dw),T(z0.$$.fragment,Dw),Dw.forEach(t),MZo=i(tl),mo=n(tl,"DIV",{class:!0});var ua=s(mo);T(cL.$$.fragment,ua),EZo=i(ua),Aue=n(ua,"P",{});var vpt=s(Aue);CZo=r(vpt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),vpt.forEach(t),wZo=i(ua),Xa=n(ua,"P",{});var Gw=s(Xa);AZo=r(Gw,"The model class to instantiate is selected based on the "),yue=n(Gw,"CODE",{});var Fpt=s(yue);yZo=r(Fpt,"model_type"),Fpt.forEach(t),LZo=r(Gw,` property of the config object (either
passed as an argument or loaded from `),Lue=n(Gw,"CODE",{});var Tpt=s(Lue);xZo=r(Tpt,"pretrained_model_name_or_path"),Tpt.forEach(t),$Zo=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=n(Gw,"CODE",{});var Mpt=s(xue);kZo=r(Mpt,"pretrained_model_name_or_path"),Mpt.forEach(t),SZo=r(Gw,":"),Gw.forEach(t),RZo=i(ua),za=n(ua,"UL",{});var Ow=s(za);Q0=n(Ow,"LI",{});var l$e=s(Q0);$ue=n(l$e,"STRONG",{});var Ept=s($ue);BZo=r(Ept,"data2vec-audio"),Ept.forEach(t),PZo=r(l$e," \u2014 "),BX=n(l$e,"A",{href:!0});var Cpt=s(BX);IZo=r(Cpt,"Data2VecAudioForXVector"),Cpt.forEach(t),qZo=r(l$e," (Data2VecAudio model)"),l$e.forEach(t),NZo=i(Ow),W0=n(Ow,"LI",{});var i$e=s(W0);kue=n(i$e,"STRONG",{});var wpt=s(kue);jZo=r(wpt,"unispeech-sat"),wpt.forEach(t),DZo=r(i$e," \u2014 "),PX=n(i$e,"A",{href:!0});var Apt=s(PX);GZo=r(Apt,"UniSpeechSatForXVector"),Apt.forEach(t),OZo=r(i$e," (UniSpeechSat model)"),i$e.forEach(t),VZo=i(Ow),H0=n(Ow,"LI",{});var d$e=s(H0);Sue=n(d$e,"STRONG",{});var ypt=s(Sue);XZo=r(ypt,"wav2vec2"),ypt.forEach(t),zZo=r(d$e," \u2014 "),IX=n(d$e,"A",{href:!0});var Lpt=s(IX);QZo=r(Lpt,"Wav2Vec2ForXVector"),Lpt.forEach(t),WZo=r(d$e," (Wav2Vec2 model)"),d$e.forEach(t),HZo=i(Ow),U0=n(Ow,"LI",{});var c$e=s(U0);Rue=n(c$e,"STRONG",{});var xpt=s(Rue);UZo=r(xpt,"wavlm"),xpt.forEach(t),JZo=r(c$e," \u2014 "),qX=n(c$e,"A",{href:!0});var $pt=s(qX);YZo=r($pt,"WavLMForXVector"),$pt.forEach(t),KZo=r(c$e," (WavLM model)"),c$e.forEach(t),Ow.forEach(t),ZZo=i(ua),J0=n(ua,"P",{});var f$e=s(J0);eer=r(f$e,"The model is set in evaluation mode by default using "),Bue=n(f$e,"CODE",{});var kpt=s(Bue);oer=r(kpt,"model.eval()"),kpt.forEach(t),rer=r(f$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pue=n(f$e,"CODE",{});var Spt=s(Pue);ter=r(Spt,"model.train()"),Spt.forEach(t),f$e.forEach(t),aer=i(ua),T(Y0.$$.fragment,ua),ua.forEach(t),tl.forEach(t),aqe=i(f),Td=n(f,"H2",{class:!0});var dje=s(Td);K0=n(dje,"A",{id:!0,class:!0,href:!0});var Rpt=s(K0);Iue=n(Rpt,"SPAN",{});var Bpt=s(Iue);T(fL.$$.fragment,Bpt),Bpt.forEach(t),Rpt.forEach(t),ner=i(dje),que=n(dje,"SPAN",{});var Ppt=s(que);ser=r(Ppt,"AutoModelForMaskedImageModeling"),Ppt.forEach(t),dje.forEach(t),nqe=i(f),Qo=n(f,"DIV",{class:!0});var al=s(Qo);T(mL.$$.fragment,al),ler=i(al),Md=n(al,"P",{});var eZ=s(Md);ier=r(eZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),NX=n(eZ,"A",{href:!0});var Ipt=s(NX);der=r(Ipt,"from_pretrained()"),Ipt.forEach(t),cer=r(eZ," class method or the "),jX=n(eZ,"A",{href:!0});var qpt=s(jX);fer=r(qpt,"from_config()"),qpt.forEach(t),mer=r(eZ,` class
method.`),eZ.forEach(t),ger=i(al),gL=n(al,"P",{});var cje=s(gL);her=r(cje,"This class cannot be instantiated directly using "),Nue=n(cje,"CODE",{});var Npt=s(Nue);per=r(Npt,"__init__()"),Npt.forEach(t),uer=r(cje," (throws an error)."),cje.forEach(t),_er=i(al),Ft=n(al,"DIV",{class:!0});var Vw=s(Ft);T(hL.$$.fragment,Vw),ber=i(Vw),jue=n(Vw,"P",{});var jpt=s(jue);ver=r(jpt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),jpt.forEach(t),Fer=i(Vw),Ed=n(Vw,"P",{});var oZ=s(Ed);Ter=r(oZ,`Note:
Loading a model from its configuration file does `),Due=n(oZ,"STRONG",{});var Dpt=s(Due);Mer=r(Dpt,"not"),Dpt.forEach(t),Eer=r(oZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(oZ,"A",{href:!0});var Gpt=s(DX);Cer=r(Gpt,"from_pretrained()"),Gpt.forEach(t),wer=r(oZ," to load the model weights."),oZ.forEach(t),Aer=i(Vw),T(Z0.$$.fragment,Vw),Vw.forEach(t),yer=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(pL.$$.fragment,_a),Ler=i(_a),Gue=n(_a,"P",{});var Opt=s(Gue);xer=r(Opt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Opt.forEach(t),$er=i(_a),Qa=n(_a,"P",{});var Xw=s(Qa);ker=r(Xw,"The model class to instantiate is selected based on the "),Oue=n(Xw,"CODE",{});var Vpt=s(Oue);Ser=r(Vpt,"model_type"),Vpt.forEach(t),Rer=r(Xw,` property of the config object (either
passed as an argument or loaded from `),Vue=n(Xw,"CODE",{});var Xpt=s(Vue);Ber=r(Xpt,"pretrained_model_name_or_path"),Xpt.forEach(t),Per=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xue=n(Xw,"CODE",{});var zpt=s(Xue);Ier=r(zpt,"pretrained_model_name_or_path"),zpt.forEach(t),qer=r(Xw,":"),Xw.forEach(t),Ner=i(_a),Cd=n(_a,"UL",{});var rZ=s(Cd);eT=n(rZ,"LI",{});var m$e=s(eT);zue=n(m$e,"STRONG",{});var Qpt=s(zue);jer=r(Qpt,"deit"),Qpt.forEach(t),Der=r(m$e," \u2014 "),GX=n(m$e,"A",{href:!0});var Wpt=s(GX);Ger=r(Wpt,"DeiTForMaskedImageModeling"),Wpt.forEach(t),Oer=r(m$e," (DeiT model)"),m$e.forEach(t),Ver=i(rZ),oT=n(rZ,"LI",{});var g$e=s(oT);Que=n(g$e,"STRONG",{});var Hpt=s(Que);Xer=r(Hpt,"swin"),Hpt.forEach(t),zer=r(g$e," \u2014 "),OX=n(g$e,"A",{href:!0});var Upt=s(OX);Qer=r(Upt,"SwinForMaskedImageModeling"),Upt.forEach(t),Wer=r(g$e," (Swin model)"),g$e.forEach(t),Her=i(rZ),rT=n(rZ,"LI",{});var h$e=s(rT);Wue=n(h$e,"STRONG",{});var Jpt=s(Wue);Uer=r(Jpt,"vit"),Jpt.forEach(t),Jer=r(h$e," \u2014 "),VX=n(h$e,"A",{href:!0});var Ypt=s(VX);Yer=r(Ypt,"ViTForMaskedImageModeling"),Ypt.forEach(t),Ker=r(h$e," (ViT model)"),h$e.forEach(t),rZ.forEach(t),Zer=i(_a),tT=n(_a,"P",{});var p$e=s(tT);eor=r(p$e,"The model is set in evaluation mode by default using "),Hue=n(p$e,"CODE",{});var Kpt=s(Hue);oor=r(Kpt,"model.eval()"),Kpt.forEach(t),ror=r(p$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=n(p$e,"CODE",{});var Zpt=s(Uue);tor=r(Zpt,"model.train()"),Zpt.forEach(t),p$e.forEach(t),aor=i(_a),T(aT.$$.fragment,_a),_a.forEach(t),al.forEach(t),sqe=i(f),wd=n(f,"H2",{class:!0});var fje=s(wd);nT=n(fje,"A",{id:!0,class:!0,href:!0});var eut=s(nT);Jue=n(eut,"SPAN",{});var out=s(Jue);T(uL.$$.fragment,out),out.forEach(t),eut.forEach(t),nor=i(fje),Yue=n(fje,"SPAN",{});var rut=s(Yue);sor=r(rut,"AutoModelForObjectDetection"),rut.forEach(t),fje.forEach(t),lqe=i(f),Wo=n(f,"DIV",{class:!0});var nl=s(Wo);T(_L.$$.fragment,nl),lor=i(nl),Ad=n(nl,"P",{});var tZ=s(Ad);ior=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),XX=n(tZ,"A",{href:!0});var tut=s(XX);dor=r(tut,"from_pretrained()"),tut.forEach(t),cor=r(tZ," class method or the "),zX=n(tZ,"A",{href:!0});var aut=s(zX);mor=r(aut,"from_config()"),aut.forEach(t),gor=r(tZ,` class
method.`),tZ.forEach(t),hor=i(nl),bL=n(nl,"P",{});var mje=s(bL);por=r(mje,"This class cannot be instantiated directly using "),Kue=n(mje,"CODE",{});var nut=s(Kue);uor=r(nut,"__init__()"),nut.forEach(t),_or=r(mje," (throws an error)."),mje.forEach(t),bor=i(nl),Tt=n(nl,"DIV",{class:!0});var zw=s(Tt);T(vL.$$.fragment,zw),vor=i(zw),Zue=n(zw,"P",{});var sut=s(Zue);For=r(sut,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),sut.forEach(t),Tor=i(zw),yd=n(zw,"P",{});var aZ=s(yd);Mor=r(aZ,`Note:
Loading a model from its configuration file does `),e_e=n(aZ,"STRONG",{});var lut=s(e_e);Eor=r(lut,"not"),lut.forEach(t),Cor=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=n(aZ,"A",{href:!0});var iut=s(QX);wor=r(iut,"from_pretrained()"),iut.forEach(t),Aor=r(aZ," to load the model weights."),aZ.forEach(t),yor=i(zw),T(sT.$$.fragment,zw),zw.forEach(t),Lor=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(FL.$$.fragment,ba),xor=i(ba),o_e=n(ba,"P",{});var dut=s(o_e);$or=r(dut,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),dut.forEach(t),kor=i(ba),Wa=n(ba,"P",{});var Qw=s(Wa);Sor=r(Qw,"The model class to instantiate is selected based on the "),r_e=n(Qw,"CODE",{});var cut=s(r_e);Ror=r(cut,"model_type"),cut.forEach(t),Bor=r(Qw,` property of the config object (either
passed as an argument or loaded from `),t_e=n(Qw,"CODE",{});var fut=s(t_e);Por=r(fut,"pretrained_model_name_or_path"),fut.forEach(t),Ior=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=n(Qw,"CODE",{});var mut=s(a_e);qor=r(mut,"pretrained_model_name_or_path"),mut.forEach(t),Nor=r(Qw,":"),Qw.forEach(t),jor=i(ba),TL=n(ba,"UL",{});var gje=s(TL);lT=n(gje,"LI",{});var u$e=s(lT);n_e=n(u$e,"STRONG",{});var gut=s(n_e);Dor=r(gut,"detr"),gut.forEach(t),Gor=r(u$e," \u2014 "),WX=n(u$e,"A",{href:!0});var hut=s(WX);Oor=r(hut,"DetrForObjectDetection"),hut.forEach(t),Vor=r(u$e," (DETR model)"),u$e.forEach(t),Xor=i(gje),iT=n(gje,"LI",{});var _$e=s(iT);s_e=n(_$e,"STRONG",{});var put=s(s_e);zor=r(put,"yolos"),put.forEach(t),Qor=r(_$e," \u2014 "),HX=n(_$e,"A",{href:!0});var uut=s(HX);Wor=r(uut,"YolosForObjectDetection"),uut.forEach(t),Hor=r(_$e," (YOLOS model)"),_$e.forEach(t),gje.forEach(t),Uor=i(ba),dT=n(ba,"P",{});var b$e=s(dT);Jor=r(b$e,"The model is set in evaluation mode by default using "),l_e=n(b$e,"CODE",{});var _ut=s(l_e);Yor=r(_ut,"model.eval()"),_ut.forEach(t),Kor=r(b$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=n(b$e,"CODE",{});var but=s(i_e);Zor=r(but,"model.train()"),but.forEach(t),b$e.forEach(t),err=i(ba),T(cT.$$.fragment,ba),ba.forEach(t),nl.forEach(t),iqe=i(f),Ld=n(f,"H2",{class:!0});var hje=s(Ld);fT=n(hje,"A",{id:!0,class:!0,href:!0});var vut=s(fT);d_e=n(vut,"SPAN",{});var Fut=s(d_e);T(ML.$$.fragment,Fut),Fut.forEach(t),vut.forEach(t),orr=i(hje),c_e=n(hje,"SPAN",{});var Tut=s(c_e);rrr=r(Tut,"AutoModelForImageSegmentation"),Tut.forEach(t),hje.forEach(t),dqe=i(f),Ho=n(f,"DIV",{class:!0});var sl=s(Ho);T(EL.$$.fragment,sl),trr=i(sl),xd=n(sl,"P",{});var nZ=s(xd);arr=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),UX=n(nZ,"A",{href:!0});var Mut=s(UX);nrr=r(Mut,"from_pretrained()"),Mut.forEach(t),srr=r(nZ," class method or the "),JX=n(nZ,"A",{href:!0});var Eut=s(JX);lrr=r(Eut,"from_config()"),Eut.forEach(t),irr=r(nZ,` class
method.`),nZ.forEach(t),drr=i(sl),CL=n(sl,"P",{});var pje=s(CL);crr=r(pje,"This class cannot be instantiated directly using "),f_e=n(pje,"CODE",{});var Cut=s(f_e);frr=r(Cut,"__init__()"),Cut.forEach(t),mrr=r(pje," (throws an error)."),pje.forEach(t),grr=i(sl),Mt=n(sl,"DIV",{class:!0});var Ww=s(Mt);T(wL.$$.fragment,Ww),hrr=i(Ww),m_e=n(Ww,"P",{});var wut=s(m_e);prr=r(wut,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),wut.forEach(t),urr=i(Ww),$d=n(Ww,"P",{});var sZ=s($d);_rr=r(sZ,`Note:
Loading a model from its configuration file does `),g_e=n(sZ,"STRONG",{});var Aut=s(g_e);brr=r(Aut,"not"),Aut.forEach(t),vrr=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=n(sZ,"A",{href:!0});var yut=s(YX);Frr=r(yut,"from_pretrained()"),yut.forEach(t),Trr=r(sZ," to load the model weights."),sZ.forEach(t),Mrr=i(Ww),T(mT.$$.fragment,Ww),Ww.forEach(t),Err=i(sl),po=n(sl,"DIV",{class:!0});var va=s(po);T(AL.$$.fragment,va),Crr=i(va),h_e=n(va,"P",{});var Lut=s(h_e);wrr=r(Lut,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Lut.forEach(t),Arr=i(va),Ha=n(va,"P",{});var Hw=s(Ha);yrr=r(Hw,"The model class to instantiate is selected based on the "),p_e=n(Hw,"CODE",{});var xut=s(p_e);Lrr=r(xut,"model_type"),xut.forEach(t),xrr=r(Hw,` property of the config object (either
passed as an argument or loaded from `),u_e=n(Hw,"CODE",{});var $ut=s(u_e);$rr=r($ut,"pretrained_model_name_or_path"),$ut.forEach(t),krr=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=n(Hw,"CODE",{});var kut=s(__e);Srr=r(kut,"pretrained_model_name_or_path"),kut.forEach(t),Rrr=r(Hw,":"),Hw.forEach(t),Brr=i(va),b_e=n(va,"UL",{});var Sut=s(b_e);gT=n(Sut,"LI",{});var v$e=s(gT);v_e=n(v$e,"STRONG",{});var Rut=s(v_e);Prr=r(Rut,"detr"),Rut.forEach(t),Irr=r(v$e," \u2014 "),KX=n(v$e,"A",{href:!0});var But=s(KX);qrr=r(But,"DetrForSegmentation"),But.forEach(t),Nrr=r(v$e," (DETR model)"),v$e.forEach(t),Sut.forEach(t),jrr=i(va),hT=n(va,"P",{});var F$e=s(hT);Drr=r(F$e,"The model is set in evaluation mode by default using "),F_e=n(F$e,"CODE",{});var Put=s(F_e);Grr=r(Put,"model.eval()"),Put.forEach(t),Orr=r(F$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=n(F$e,"CODE",{});var Iut=s(T_e);Vrr=r(Iut,"model.train()"),Iut.forEach(t),F$e.forEach(t),Xrr=i(va),T(pT.$$.fragment,va),va.forEach(t),sl.forEach(t),cqe=i(f),kd=n(f,"H2",{class:!0});var uje=s(kd);uT=n(uje,"A",{id:!0,class:!0,href:!0});var qut=s(uT);M_e=n(qut,"SPAN",{});var Nut=s(M_e);T(yL.$$.fragment,Nut),Nut.forEach(t),qut.forEach(t),zrr=i(uje),E_e=n(uje,"SPAN",{});var jut=s(E_e);Qrr=r(jut,"AutoModelForSemanticSegmentation"),jut.forEach(t),uje.forEach(t),fqe=i(f),Uo=n(f,"DIV",{class:!0});var ll=s(Uo);T(LL.$$.fragment,ll),Wrr=i(ll),Sd=n(ll,"P",{});var lZ=s(Sd);Hrr=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ZX=n(lZ,"A",{href:!0});var Dut=s(ZX);Urr=r(Dut,"from_pretrained()"),Dut.forEach(t),Jrr=r(lZ," class method or the "),ez=n(lZ,"A",{href:!0});var Gut=s(ez);Yrr=r(Gut,"from_config()"),Gut.forEach(t),Krr=r(lZ,` class
method.`),lZ.forEach(t),Zrr=i(ll),xL=n(ll,"P",{});var _je=s(xL);etr=r(_je,"This class cannot be instantiated directly using "),C_e=n(_je,"CODE",{});var Out=s(C_e);otr=r(Out,"__init__()"),Out.forEach(t),rtr=r(_je," (throws an error)."),_je.forEach(t),ttr=i(ll),Et=n(ll,"DIV",{class:!0});var Uw=s(Et);T($L.$$.fragment,Uw),atr=i(Uw),w_e=n(Uw,"P",{});var Vut=s(w_e);ntr=r(Vut,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Vut.forEach(t),str=i(Uw),Rd=n(Uw,"P",{});var iZ=s(Rd);ltr=r(iZ,`Note:
Loading a model from its configuration file does `),A_e=n(iZ,"STRONG",{});var Xut=s(A_e);itr=r(Xut,"not"),Xut.forEach(t),dtr=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(iZ,"A",{href:!0});var zut=s(oz);ctr=r(zut,"from_pretrained()"),zut.forEach(t),ftr=r(iZ," to load the model weights."),iZ.forEach(t),mtr=i(Uw),T(_T.$$.fragment,Uw),Uw.forEach(t),gtr=i(ll),uo=n(ll,"DIV",{class:!0});var Fa=s(uo);T(kL.$$.fragment,Fa),htr=i(Fa),y_e=n(Fa,"P",{});var Qut=s(y_e);ptr=r(Qut,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Qut.forEach(t),utr=i(Fa),Ua=n(Fa,"P",{});var Jw=s(Ua);_tr=r(Jw,"The model class to instantiate is selected based on the "),L_e=n(Jw,"CODE",{});var Wut=s(L_e);btr=r(Wut,"model_type"),Wut.forEach(t),vtr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),x_e=n(Jw,"CODE",{});var Hut=s(x_e);Ftr=r(Hut,"pretrained_model_name_or_path"),Hut.forEach(t),Ttr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=n(Jw,"CODE",{});var Uut=s($_e);Mtr=r(Uut,"pretrained_model_name_or_path"),Uut.forEach(t),Etr=r(Jw,":"),Jw.forEach(t),Ctr=i(Fa),Ja=n(Fa,"UL",{});var Yw=s(Ja);bT=n(Yw,"LI",{});var T$e=s(bT);k_e=n(T$e,"STRONG",{});var Jut=s(k_e);wtr=r(Jut,"beit"),Jut.forEach(t),Atr=r(T$e," \u2014 "),rz=n(T$e,"A",{href:!0});var Yut=s(rz);ytr=r(Yut,"BeitForSemanticSegmentation"),Yut.forEach(t),Ltr=r(T$e," (BEiT model)"),T$e.forEach(t),xtr=i(Yw),vT=n(Yw,"LI",{});var M$e=s(vT);S_e=n(M$e,"STRONG",{});var Kut=s(S_e);$tr=r(Kut,"data2vec-vision"),Kut.forEach(t),ktr=r(M$e," \u2014 "),tz=n(M$e,"A",{href:!0});var Zut=s(tz);Str=r(Zut,"Data2VecVisionForSemanticSegmentation"),Zut.forEach(t),Rtr=r(M$e," (Data2VecVision model)"),M$e.forEach(t),Btr=i(Yw),FT=n(Yw,"LI",{});var E$e=s(FT);R_e=n(E$e,"STRONG",{});var e_t=s(R_e);Ptr=r(e_t,"dpt"),e_t.forEach(t),Itr=r(E$e," \u2014 "),az=n(E$e,"A",{href:!0});var o_t=s(az);qtr=r(o_t,"DPTForSemanticSegmentation"),o_t.forEach(t),Ntr=r(E$e," (DPT model)"),E$e.forEach(t),jtr=i(Yw),TT=n(Yw,"LI",{});var C$e=s(TT);B_e=n(C$e,"STRONG",{});var r_t=s(B_e);Dtr=r(r_t,"segformer"),r_t.forEach(t),Gtr=r(C$e," \u2014 "),nz=n(C$e,"A",{href:!0});var t_t=s(nz);Otr=r(t_t,"SegformerForSemanticSegmentation"),t_t.forEach(t),Vtr=r(C$e," (SegFormer model)"),C$e.forEach(t),Yw.forEach(t),Xtr=i(Fa),MT=n(Fa,"P",{});var w$e=s(MT);ztr=r(w$e,"The model is set in evaluation mode by default using "),P_e=n(w$e,"CODE",{});var a_t=s(P_e);Qtr=r(a_t,"model.eval()"),a_t.forEach(t),Wtr=r(w$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I_e=n(w$e,"CODE",{});var n_t=s(I_e);Htr=r(n_t,"model.train()"),n_t.forEach(t),w$e.forEach(t),Utr=i(Fa),T(ET.$$.fragment,Fa),Fa.forEach(t),ll.forEach(t),mqe=i(f),Bd=n(f,"H2",{class:!0});var bje=s(Bd);CT=n(bje,"A",{id:!0,class:!0,href:!0});var s_t=s(CT);q_e=n(s_t,"SPAN",{});var l_t=s(q_e);T(SL.$$.fragment,l_t),l_t.forEach(t),s_t.forEach(t),Jtr=i(bje),N_e=n(bje,"SPAN",{});var i_t=s(N_e);Ytr=r(i_t,"AutoModelForInstanceSegmentation"),i_t.forEach(t),bje.forEach(t),gqe=i(f),Jo=n(f,"DIV",{class:!0});var il=s(Jo);T(RL.$$.fragment,il),Ktr=i(il),Pd=n(il,"P",{});var dZ=s(Pd);Ztr=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),sz=n(dZ,"A",{href:!0});var d_t=s(sz);ear=r(d_t,"from_pretrained()"),d_t.forEach(t),oar=r(dZ," class method or the "),lz=n(dZ,"A",{href:!0});var c_t=s(lz);rar=r(c_t,"from_config()"),c_t.forEach(t),tar=r(dZ,` class
method.`),dZ.forEach(t),aar=i(il),BL=n(il,"P",{});var vje=s(BL);nar=r(vje,"This class cannot be instantiated directly using "),j_e=n(vje,"CODE",{});var f_t=s(j_e);sar=r(f_t,"__init__()"),f_t.forEach(t),lar=r(vje," (throws an error)."),vje.forEach(t),iar=i(il),Ct=n(il,"DIV",{class:!0});var Kw=s(Ct);T(PL.$$.fragment,Kw),dar=i(Kw),D_e=n(Kw,"P",{});var m_t=s(D_e);car=r(m_t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),m_t.forEach(t),far=i(Kw),Id=n(Kw,"P",{});var cZ=s(Id);mar=r(cZ,`Note:
Loading a model from its configuration file does `),G_e=n(cZ,"STRONG",{});var g_t=s(G_e);gar=r(g_t,"not"),g_t.forEach(t),har=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=n(cZ,"A",{href:!0});var h_t=s(iz);par=r(h_t,"from_pretrained()"),h_t.forEach(t),uar=r(cZ," to load the model weights."),cZ.forEach(t),_ar=i(Kw),T(wT.$$.fragment,Kw),Kw.forEach(t),bar=i(il),_o=n(il,"DIV",{class:!0});var Ta=s(_o);T(IL.$$.fragment,Ta),Far=i(Ta),O_e=n(Ta,"P",{});var p_t=s(O_e);Tar=r(p_t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),p_t.forEach(t),Mar=i(Ta),Ya=n(Ta,"P",{});var Zw=s(Ya);Ear=r(Zw,"The model class to instantiate is selected based on the "),V_e=n(Zw,"CODE",{});var u_t=s(V_e);Car=r(u_t,"model_type"),u_t.forEach(t),war=r(Zw,` property of the config object (either
passed as an argument or loaded from `),X_e=n(Zw,"CODE",{});var __t=s(X_e);Aar=r(__t,"pretrained_model_name_or_path"),__t.forEach(t),yar=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z_e=n(Zw,"CODE",{});var b_t=s(z_e);Lar=r(b_t,"pretrained_model_name_or_path"),b_t.forEach(t),xar=r(Zw,":"),Zw.forEach(t),$ar=i(Ta),Q_e=n(Ta,"UL",{});var v_t=s(Q_e);AT=n(v_t,"LI",{});var A$e=s(AT);W_e=n(A$e,"STRONG",{});var F_t=s(W_e);kar=r(F_t,"maskformer"),F_t.forEach(t),Sar=r(A$e," \u2014 "),dz=n(A$e,"A",{href:!0});var T_t=s(dz);Rar=r(T_t,"MaskFormerForInstanceSegmentation"),T_t.forEach(t),Bar=r(A$e," (MaskFormer model)"),A$e.forEach(t),v_t.forEach(t),Par=i(Ta),yT=n(Ta,"P",{});var y$e=s(yT);Iar=r(y$e,"The model is set in evaluation mode by default using "),H_e=n(y$e,"CODE",{});var M_t=s(H_e);qar=r(M_t,"model.eval()"),M_t.forEach(t),Nar=r(y$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U_e=n(y$e,"CODE",{});var E_t=s(U_e);jar=r(E_t,"model.train()"),E_t.forEach(t),y$e.forEach(t),Dar=i(Ta),T(LT.$$.fragment,Ta),Ta.forEach(t),il.forEach(t),hqe=i(f),qd=n(f,"H2",{class:!0});var Fje=s(qd);xT=n(Fje,"A",{id:!0,class:!0,href:!0});var C_t=s(xT);J_e=n(C_t,"SPAN",{});var w_t=s(J_e);T(qL.$$.fragment,w_t),w_t.forEach(t),C_t.forEach(t),Gar=i(Fje),Y_e=n(Fje,"SPAN",{});var A_t=s(Y_e);Oar=r(A_t,"TFAutoModel"),A_t.forEach(t),Fje.forEach(t),pqe=i(f),Yo=n(f,"DIV",{class:!0});var dl=s(Yo);T(NL.$$.fragment,dl),Var=i(dl),Nd=n(dl,"P",{});var fZ=s(Nd);Xar=r(fZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cz=n(fZ,"A",{href:!0});var y_t=s(cz);zar=r(y_t,"from_pretrained()"),y_t.forEach(t),Qar=r(fZ," class method or the "),fz=n(fZ,"A",{href:!0});var L_t=s(fz);War=r(L_t,"from_config()"),L_t.forEach(t),Har=r(fZ,` class
method.`),fZ.forEach(t),Uar=i(dl),jL=n(dl,"P",{});var Tje=s(jL);Jar=r(Tje,"This class cannot be instantiated directly using "),K_e=n(Tje,"CODE",{});var x_t=s(K_e);Yar=r(x_t,"__init__()"),x_t.forEach(t),Kar=r(Tje," (throws an error)."),Tje.forEach(t),Zar=i(dl),wt=n(dl,"DIV",{class:!0});var eA=s(wt);T(DL.$$.fragment,eA),enr=i(eA),Z_e=n(eA,"P",{});var $_t=s(Z_e);onr=r($_t,"Instantiates one of the base model classes of the library from a configuration."),$_t.forEach(t),rnr=i(eA),jd=n(eA,"P",{});var mZ=s(jd);tnr=r(mZ,`Note:
Loading a model from its configuration file does `),e2e=n(mZ,"STRONG",{});var k_t=s(e2e);anr=r(k_t,"not"),k_t.forEach(t),nnr=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=n(mZ,"A",{href:!0});var S_t=s(mz);snr=r(S_t,"from_pretrained()"),S_t.forEach(t),lnr=r(mZ," to load the model weights."),mZ.forEach(t),inr=i(eA),T($T.$$.fragment,eA),eA.forEach(t),dnr=i(dl),wr=n(dl,"DIV",{class:!0});var cl=s(wr);T(GL.$$.fragment,cl),cnr=i(cl),o2e=n(cl,"P",{});var R_t=s(o2e);fnr=r(R_t,"Instantiate one of the base model classes of the library from a pretrained model."),R_t.forEach(t),mnr=i(cl),Ka=n(cl,"P",{});var oA=s(Ka);gnr=r(oA,"The model class to instantiate is selected based on the "),r2e=n(oA,"CODE",{});var B_t=s(r2e);hnr=r(B_t,"model_type"),B_t.forEach(t),pnr=r(oA,` property of the config object (either
passed as an argument or loaded from `),t2e=n(oA,"CODE",{});var P_t=s(t2e);unr=r(P_t,"pretrained_model_name_or_path"),P_t.forEach(t),_nr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a2e=n(oA,"CODE",{});var I_t=s(a2e);bnr=r(I_t,"pretrained_model_name_or_path"),I_t.forEach(t),vnr=r(oA,":"),oA.forEach(t),Fnr=i(cl),j=n(cl,"UL",{});var D=s(j);kT=n(D,"LI",{});var L$e=s(kT);n2e=n(L$e,"STRONG",{});var q_t=s(n2e);Tnr=r(q_t,"albert"),q_t.forEach(t),Mnr=r(L$e," \u2014 "),gz=n(L$e,"A",{href:!0});var N_t=s(gz);Enr=r(N_t,"TFAlbertModel"),N_t.forEach(t),Cnr=r(L$e," (ALBERT model)"),L$e.forEach(t),wnr=i(D),ST=n(D,"LI",{});var x$e=s(ST);s2e=n(x$e,"STRONG",{});var j_t=s(s2e);Anr=r(j_t,"bart"),j_t.forEach(t),ynr=r(x$e," \u2014 "),hz=n(x$e,"A",{href:!0});var D_t=s(hz);Lnr=r(D_t,"TFBartModel"),D_t.forEach(t),xnr=r(x$e," (BART model)"),x$e.forEach(t),$nr=i(D),RT=n(D,"LI",{});var $$e=s(RT);l2e=n($$e,"STRONG",{});var G_t=s(l2e);knr=r(G_t,"bert"),G_t.forEach(t),Snr=r($$e," \u2014 "),pz=n($$e,"A",{href:!0});var O_t=s(pz);Rnr=r(O_t,"TFBertModel"),O_t.forEach(t),Bnr=r($$e," (BERT model)"),$$e.forEach(t),Pnr=i(D),BT=n(D,"LI",{});var k$e=s(BT);i2e=n(k$e,"STRONG",{});var V_t=s(i2e);Inr=r(V_t,"blenderbot"),V_t.forEach(t),qnr=r(k$e," \u2014 "),uz=n(k$e,"A",{href:!0});var X_t=s(uz);Nnr=r(X_t,"TFBlenderbotModel"),X_t.forEach(t),jnr=r(k$e," (Blenderbot model)"),k$e.forEach(t),Dnr=i(D),PT=n(D,"LI",{});var S$e=s(PT);d2e=n(S$e,"STRONG",{});var z_t=s(d2e);Gnr=r(z_t,"blenderbot-small"),z_t.forEach(t),Onr=r(S$e," \u2014 "),_z=n(S$e,"A",{href:!0});var Q_t=s(_z);Vnr=r(Q_t,"TFBlenderbotSmallModel"),Q_t.forEach(t),Xnr=r(S$e," (BlenderbotSmall model)"),S$e.forEach(t),znr=i(D),IT=n(D,"LI",{});var R$e=s(IT);c2e=n(R$e,"STRONG",{});var W_t=s(c2e);Qnr=r(W_t,"camembert"),W_t.forEach(t),Wnr=r(R$e," \u2014 "),bz=n(R$e,"A",{href:!0});var H_t=s(bz);Hnr=r(H_t,"TFCamembertModel"),H_t.forEach(t),Unr=r(R$e," (CamemBERT model)"),R$e.forEach(t),Jnr=i(D),qT=n(D,"LI",{});var B$e=s(qT);f2e=n(B$e,"STRONG",{});var U_t=s(f2e);Ynr=r(U_t,"clip"),U_t.forEach(t),Knr=r(B$e," \u2014 "),vz=n(B$e,"A",{href:!0});var J_t=s(vz);Znr=r(J_t,"TFCLIPModel"),J_t.forEach(t),esr=r(B$e," (CLIP model)"),B$e.forEach(t),osr=i(D),NT=n(D,"LI",{});var P$e=s(NT);m2e=n(P$e,"STRONG",{});var Y_t=s(m2e);rsr=r(Y_t,"convbert"),Y_t.forEach(t),tsr=r(P$e," \u2014 "),Fz=n(P$e,"A",{href:!0});var K_t=s(Fz);asr=r(K_t,"TFConvBertModel"),K_t.forEach(t),nsr=r(P$e," (ConvBERT model)"),P$e.forEach(t),ssr=i(D),jT=n(D,"LI",{});var I$e=s(jT);g2e=n(I$e,"STRONG",{});var Z_t=s(g2e);lsr=r(Z_t,"convnext"),Z_t.forEach(t),isr=r(I$e," \u2014 "),Tz=n(I$e,"A",{href:!0});var e2t=s(Tz);dsr=r(e2t,"TFConvNextModel"),e2t.forEach(t),csr=r(I$e," (ConvNext model)"),I$e.forEach(t),fsr=i(D),DT=n(D,"LI",{});var q$e=s(DT);h2e=n(q$e,"STRONG",{});var o2t=s(h2e);msr=r(o2t,"ctrl"),o2t.forEach(t),gsr=r(q$e," \u2014 "),Mz=n(q$e,"A",{href:!0});var r2t=s(Mz);hsr=r(r2t,"TFCTRLModel"),r2t.forEach(t),psr=r(q$e," (CTRL model)"),q$e.forEach(t),usr=i(D),GT=n(D,"LI",{});var N$e=s(GT);p2e=n(N$e,"STRONG",{});var t2t=s(p2e);_sr=r(t2t,"data2vec-vision"),t2t.forEach(t),bsr=r(N$e," \u2014 "),Ez=n(N$e,"A",{href:!0});var a2t=s(Ez);vsr=r(a2t,"TFData2VecVisionModel"),a2t.forEach(t),Fsr=r(N$e," (Data2VecVision model)"),N$e.forEach(t),Tsr=i(D),OT=n(D,"LI",{});var j$e=s(OT);u2e=n(j$e,"STRONG",{});var n2t=s(u2e);Msr=r(n2t,"deberta"),n2t.forEach(t),Esr=r(j$e," \u2014 "),Cz=n(j$e,"A",{href:!0});var s2t=s(Cz);Csr=r(s2t,"TFDebertaModel"),s2t.forEach(t),wsr=r(j$e," (DeBERTa model)"),j$e.forEach(t),Asr=i(D),VT=n(D,"LI",{});var D$e=s(VT);_2e=n(D$e,"STRONG",{});var l2t=s(_2e);ysr=r(l2t,"deberta-v2"),l2t.forEach(t),Lsr=r(D$e," \u2014 "),wz=n(D$e,"A",{href:!0});var i2t=s(wz);xsr=r(i2t,"TFDebertaV2Model"),i2t.forEach(t),$sr=r(D$e," (DeBERTa-v2 model)"),D$e.forEach(t),ksr=i(D),XT=n(D,"LI",{});var G$e=s(XT);b2e=n(G$e,"STRONG",{});var d2t=s(b2e);Ssr=r(d2t,"distilbert"),d2t.forEach(t),Rsr=r(G$e," \u2014 "),Az=n(G$e,"A",{href:!0});var c2t=s(Az);Bsr=r(c2t,"TFDistilBertModel"),c2t.forEach(t),Psr=r(G$e," (DistilBERT model)"),G$e.forEach(t),Isr=i(D),zT=n(D,"LI",{});var O$e=s(zT);v2e=n(O$e,"STRONG",{});var f2t=s(v2e);qsr=r(f2t,"dpr"),f2t.forEach(t),Nsr=r(O$e," \u2014 "),yz=n(O$e,"A",{href:!0});var m2t=s(yz);jsr=r(m2t,"TFDPRQuestionEncoder"),m2t.forEach(t),Dsr=r(O$e," (DPR model)"),O$e.forEach(t),Gsr=i(D),QT=n(D,"LI",{});var V$e=s(QT);F2e=n(V$e,"STRONG",{});var g2t=s(F2e);Osr=r(g2t,"electra"),g2t.forEach(t),Vsr=r(V$e," \u2014 "),Lz=n(V$e,"A",{href:!0});var h2t=s(Lz);Xsr=r(h2t,"TFElectraModel"),h2t.forEach(t),zsr=r(V$e," (ELECTRA model)"),V$e.forEach(t),Qsr=i(D),WT=n(D,"LI",{});var X$e=s(WT);T2e=n(X$e,"STRONG",{});var p2t=s(T2e);Wsr=r(p2t,"flaubert"),p2t.forEach(t),Hsr=r(X$e," \u2014 "),xz=n(X$e,"A",{href:!0});var u2t=s(xz);Usr=r(u2t,"TFFlaubertModel"),u2t.forEach(t),Jsr=r(X$e," (FlauBERT model)"),X$e.forEach(t),Ysr=i(D),Bs=n(D,"LI",{});var b$=s(Bs);M2e=n(b$,"STRONG",{});var _2t=s(M2e);Ksr=r(_2t,"funnel"),_2t.forEach(t),Zsr=r(b$," \u2014 "),$z=n(b$,"A",{href:!0});var b2t=s($z);elr=r(b2t,"TFFunnelModel"),b2t.forEach(t),olr=r(b$," or "),kz=n(b$,"A",{href:!0});var v2t=s(kz);rlr=r(v2t,"TFFunnelBaseModel"),v2t.forEach(t),tlr=r(b$," (Funnel Transformer model)"),b$.forEach(t),alr=i(D),HT=n(D,"LI",{});var z$e=s(HT);E2e=n(z$e,"STRONG",{});var F2t=s(E2e);nlr=r(F2t,"gpt2"),F2t.forEach(t),slr=r(z$e," \u2014 "),Sz=n(z$e,"A",{href:!0});var T2t=s(Sz);llr=r(T2t,"TFGPT2Model"),T2t.forEach(t),ilr=r(z$e," (OpenAI GPT-2 model)"),z$e.forEach(t),dlr=i(D),UT=n(D,"LI",{});var Q$e=s(UT);C2e=n(Q$e,"STRONG",{});var M2t=s(C2e);clr=r(M2t,"gptj"),M2t.forEach(t),flr=r(Q$e," \u2014 "),Rz=n(Q$e,"A",{href:!0});var E2t=s(Rz);mlr=r(E2t,"TFGPTJModel"),E2t.forEach(t),glr=r(Q$e," (GPT-J model)"),Q$e.forEach(t),hlr=i(D),JT=n(D,"LI",{});var W$e=s(JT);w2e=n(W$e,"STRONG",{});var C2t=s(w2e);plr=r(C2t,"hubert"),C2t.forEach(t),ulr=r(W$e," \u2014 "),Bz=n(W$e,"A",{href:!0});var w2t=s(Bz);_lr=r(w2t,"TFHubertModel"),w2t.forEach(t),blr=r(W$e," (Hubert model)"),W$e.forEach(t),vlr=i(D),YT=n(D,"LI",{});var H$e=s(YT);A2e=n(H$e,"STRONG",{});var A2t=s(A2e);Flr=r(A2t,"layoutlm"),A2t.forEach(t),Tlr=r(H$e," \u2014 "),Pz=n(H$e,"A",{href:!0});var y2t=s(Pz);Mlr=r(y2t,"TFLayoutLMModel"),y2t.forEach(t),Elr=r(H$e," (LayoutLM model)"),H$e.forEach(t),Clr=i(D),KT=n(D,"LI",{});var U$e=s(KT);y2e=n(U$e,"STRONG",{});var L2t=s(y2e);wlr=r(L2t,"led"),L2t.forEach(t),Alr=r(U$e," \u2014 "),Iz=n(U$e,"A",{href:!0});var x2t=s(Iz);ylr=r(x2t,"TFLEDModel"),x2t.forEach(t),Llr=r(U$e," (LED model)"),U$e.forEach(t),xlr=i(D),ZT=n(D,"LI",{});var J$e=s(ZT);L2e=n(J$e,"STRONG",{});var $2t=s(L2e);$lr=r($2t,"longformer"),$2t.forEach(t),klr=r(J$e," \u2014 "),qz=n(J$e,"A",{href:!0});var k2t=s(qz);Slr=r(k2t,"TFLongformerModel"),k2t.forEach(t),Rlr=r(J$e," (Longformer model)"),J$e.forEach(t),Blr=i(D),e7=n(D,"LI",{});var Y$e=s(e7);x2e=n(Y$e,"STRONG",{});var S2t=s(x2e);Plr=r(S2t,"lxmert"),S2t.forEach(t),Ilr=r(Y$e," \u2014 "),Nz=n(Y$e,"A",{href:!0});var R2t=s(Nz);qlr=r(R2t,"TFLxmertModel"),R2t.forEach(t),Nlr=r(Y$e," (LXMERT model)"),Y$e.forEach(t),jlr=i(D),o7=n(D,"LI",{});var K$e=s(o7);$2e=n(K$e,"STRONG",{});var B2t=s($2e);Dlr=r(B2t,"marian"),B2t.forEach(t),Glr=r(K$e," \u2014 "),jz=n(K$e,"A",{href:!0});var P2t=s(jz);Olr=r(P2t,"TFMarianModel"),P2t.forEach(t),Vlr=r(K$e," (Marian model)"),K$e.forEach(t),Xlr=i(D),r7=n(D,"LI",{});var Z$e=s(r7);k2e=n(Z$e,"STRONG",{});var I2t=s(k2e);zlr=r(I2t,"mbart"),I2t.forEach(t),Qlr=r(Z$e," \u2014 "),Dz=n(Z$e,"A",{href:!0});var q2t=s(Dz);Wlr=r(q2t,"TFMBartModel"),q2t.forEach(t),Hlr=r(Z$e," (mBART model)"),Z$e.forEach(t),Ulr=i(D),t7=n(D,"LI",{});var eke=s(t7);S2e=n(eke,"STRONG",{});var N2t=s(S2e);Jlr=r(N2t,"mobilebert"),N2t.forEach(t),Ylr=r(eke," \u2014 "),Gz=n(eke,"A",{href:!0});var j2t=s(Gz);Klr=r(j2t,"TFMobileBertModel"),j2t.forEach(t),Zlr=r(eke," (MobileBERT model)"),eke.forEach(t),eir=i(D),a7=n(D,"LI",{});var oke=s(a7);R2e=n(oke,"STRONG",{});var D2t=s(R2e);oir=r(D2t,"mpnet"),D2t.forEach(t),rir=r(oke," \u2014 "),Oz=n(oke,"A",{href:!0});var G2t=s(Oz);tir=r(G2t,"TFMPNetModel"),G2t.forEach(t),air=r(oke," (MPNet model)"),oke.forEach(t),nir=i(D),n7=n(D,"LI",{});var rke=s(n7);B2e=n(rke,"STRONG",{});var O2t=s(B2e);sir=r(O2t,"mt5"),O2t.forEach(t),lir=r(rke," \u2014 "),Vz=n(rke,"A",{href:!0});var V2t=s(Vz);iir=r(V2t,"TFMT5Model"),V2t.forEach(t),dir=r(rke," (mT5 model)"),rke.forEach(t),cir=i(D),s7=n(D,"LI",{});var tke=s(s7);P2e=n(tke,"STRONG",{});var X2t=s(P2e);fir=r(X2t,"openai-gpt"),X2t.forEach(t),mir=r(tke," \u2014 "),Xz=n(tke,"A",{href:!0});var z2t=s(Xz);gir=r(z2t,"TFOpenAIGPTModel"),z2t.forEach(t),hir=r(tke," (OpenAI GPT model)"),tke.forEach(t),pir=i(D),l7=n(D,"LI",{});var ake=s(l7);I2e=n(ake,"STRONG",{});var Q2t=s(I2e);uir=r(Q2t,"pegasus"),Q2t.forEach(t),_ir=r(ake," \u2014 "),zz=n(ake,"A",{href:!0});var W2t=s(zz);bir=r(W2t,"TFPegasusModel"),W2t.forEach(t),vir=r(ake," (Pegasus model)"),ake.forEach(t),Fir=i(D),i7=n(D,"LI",{});var nke=s(i7);q2e=n(nke,"STRONG",{});var H2t=s(q2e);Tir=r(H2t,"rembert"),H2t.forEach(t),Mir=r(nke," \u2014 "),Qz=n(nke,"A",{href:!0});var U2t=s(Qz);Eir=r(U2t,"TFRemBertModel"),U2t.forEach(t),Cir=r(nke," (RemBERT model)"),nke.forEach(t),wir=i(D),d7=n(D,"LI",{});var ske=s(d7);N2e=n(ske,"STRONG",{});var J2t=s(N2e);Air=r(J2t,"roberta"),J2t.forEach(t),yir=r(ske," \u2014 "),Wz=n(ske,"A",{href:!0});var Y2t=s(Wz);Lir=r(Y2t,"TFRobertaModel"),Y2t.forEach(t),xir=r(ske," (RoBERTa model)"),ske.forEach(t),$ir=i(D),c7=n(D,"LI",{});var lke=s(c7);j2e=n(lke,"STRONG",{});var K2t=s(j2e);kir=r(K2t,"roformer"),K2t.forEach(t),Sir=r(lke," \u2014 "),Hz=n(lke,"A",{href:!0});var Z2t=s(Hz);Rir=r(Z2t,"TFRoFormerModel"),Z2t.forEach(t),Bir=r(lke," (RoFormer model)"),lke.forEach(t),Pir=i(D),f7=n(D,"LI",{});var ike=s(f7);D2e=n(ike,"STRONG",{});var e1t=s(D2e);Iir=r(e1t,"speech_to_text"),e1t.forEach(t),qir=r(ike," \u2014 "),Uz=n(ike,"A",{href:!0});var o1t=s(Uz);Nir=r(o1t,"TFSpeech2TextModel"),o1t.forEach(t),jir=r(ike," (Speech2Text model)"),ike.forEach(t),Dir=i(D),m7=n(D,"LI",{});var dke=s(m7);G2e=n(dke,"STRONG",{});var r1t=s(G2e);Gir=r(r1t,"t5"),r1t.forEach(t),Oir=r(dke," \u2014 "),Jz=n(dke,"A",{href:!0});var t1t=s(Jz);Vir=r(t1t,"TFT5Model"),t1t.forEach(t),Xir=r(dke," (T5 model)"),dke.forEach(t),zir=i(D),g7=n(D,"LI",{});var cke=s(g7);O2e=n(cke,"STRONG",{});var a1t=s(O2e);Qir=r(a1t,"tapas"),a1t.forEach(t),Wir=r(cke," \u2014 "),Yz=n(cke,"A",{href:!0});var n1t=s(Yz);Hir=r(n1t,"TFTapasModel"),n1t.forEach(t),Uir=r(cke," (TAPAS model)"),cke.forEach(t),Jir=i(D),h7=n(D,"LI",{});var fke=s(h7);V2e=n(fke,"STRONG",{});var s1t=s(V2e);Yir=r(s1t,"transfo-xl"),s1t.forEach(t),Kir=r(fke," \u2014 "),Kz=n(fke,"A",{href:!0});var l1t=s(Kz);Zir=r(l1t,"TFTransfoXLModel"),l1t.forEach(t),edr=r(fke," (Transformer-XL model)"),fke.forEach(t),odr=i(D),p7=n(D,"LI",{});var mke=s(p7);X2e=n(mke,"STRONG",{});var i1t=s(X2e);rdr=r(i1t,"vit"),i1t.forEach(t),tdr=r(mke," \u2014 "),Zz=n(mke,"A",{href:!0});var d1t=s(Zz);adr=r(d1t,"TFViTModel"),d1t.forEach(t),ndr=r(mke," (ViT model)"),mke.forEach(t),sdr=i(D),u7=n(D,"LI",{});var gke=s(u7);z2e=n(gke,"STRONG",{});var c1t=s(z2e);ldr=r(c1t,"vit_mae"),c1t.forEach(t),idr=r(gke," \u2014 "),eQ=n(gke,"A",{href:!0});var f1t=s(eQ);ddr=r(f1t,"TFViTMAEModel"),f1t.forEach(t),cdr=r(gke," (ViTMAE model)"),gke.forEach(t),fdr=i(D),_7=n(D,"LI",{});var hke=s(_7);Q2e=n(hke,"STRONG",{});var m1t=s(Q2e);mdr=r(m1t,"wav2vec2"),m1t.forEach(t),gdr=r(hke," \u2014 "),oQ=n(hke,"A",{href:!0});var g1t=s(oQ);hdr=r(g1t,"TFWav2Vec2Model"),g1t.forEach(t),pdr=r(hke," (Wav2Vec2 model)"),hke.forEach(t),udr=i(D),b7=n(D,"LI",{});var pke=s(b7);W2e=n(pke,"STRONG",{});var h1t=s(W2e);_dr=r(h1t,"xlm"),h1t.forEach(t),bdr=r(pke," \u2014 "),rQ=n(pke,"A",{href:!0});var p1t=s(rQ);vdr=r(p1t,"TFXLMModel"),p1t.forEach(t),Fdr=r(pke," (XLM model)"),pke.forEach(t),Tdr=i(D),v7=n(D,"LI",{});var uke=s(v7);H2e=n(uke,"STRONG",{});var u1t=s(H2e);Mdr=r(u1t,"xlm-roberta"),u1t.forEach(t),Edr=r(uke," \u2014 "),tQ=n(uke,"A",{href:!0});var _1t=s(tQ);Cdr=r(_1t,"TFXLMRobertaModel"),_1t.forEach(t),wdr=r(uke," (XLM-RoBERTa model)"),uke.forEach(t),Adr=i(D),F7=n(D,"LI",{});var _ke=s(F7);U2e=n(_ke,"STRONG",{});var b1t=s(U2e);ydr=r(b1t,"xlnet"),b1t.forEach(t),Ldr=r(_ke," \u2014 "),aQ=n(_ke,"A",{href:!0});var v1t=s(aQ);xdr=r(v1t,"TFXLNetModel"),v1t.forEach(t),$dr=r(_ke," (XLNet model)"),_ke.forEach(t),D.forEach(t),kdr=i(cl),T(T7.$$.fragment,cl),cl.forEach(t),dl.forEach(t),uqe=i(f),Dd=n(f,"H2",{class:!0});var Mje=s(Dd);M7=n(Mje,"A",{id:!0,class:!0,href:!0});var F1t=s(M7);J2e=n(F1t,"SPAN",{});var T1t=s(J2e);T(OL.$$.fragment,T1t),T1t.forEach(t),F1t.forEach(t),Sdr=i(Mje),Y2e=n(Mje,"SPAN",{});var M1t=s(Y2e);Rdr=r(M1t,"TFAutoModelForPreTraining"),M1t.forEach(t),Mje.forEach(t),_qe=i(f),Ko=n(f,"DIV",{class:!0});var fl=s(Ko);T(VL.$$.fragment,fl),Bdr=i(fl),Gd=n(fl,"P",{});var gZ=s(Gd);Pdr=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nQ=n(gZ,"A",{href:!0});var E1t=s(nQ);Idr=r(E1t,"from_pretrained()"),E1t.forEach(t),qdr=r(gZ," class method or the "),sQ=n(gZ,"A",{href:!0});var C1t=s(sQ);Ndr=r(C1t,"from_config()"),C1t.forEach(t),jdr=r(gZ,` class
method.`),gZ.forEach(t),Ddr=i(fl),XL=n(fl,"P",{});var Eje=s(XL);Gdr=r(Eje,"This class cannot be instantiated directly using "),K2e=n(Eje,"CODE",{});var w1t=s(K2e);Odr=r(w1t,"__init__()"),w1t.forEach(t),Vdr=r(Eje," (throws an error)."),Eje.forEach(t),Xdr=i(fl),At=n(fl,"DIV",{class:!0});var rA=s(At);T(zL.$$.fragment,rA),zdr=i(rA),Z2e=n(rA,"P",{});var A1t=s(Z2e);Qdr=r(A1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),A1t.forEach(t),Wdr=i(rA),Od=n(rA,"P",{});var hZ=s(Od);Hdr=r(hZ,`Note:
Loading a model from its configuration file does `),e1e=n(hZ,"STRONG",{});var y1t=s(e1e);Udr=r(y1t,"not"),y1t.forEach(t),Jdr=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=n(hZ,"A",{href:!0});var L1t=s(lQ);Ydr=r(L1t,"from_pretrained()"),L1t.forEach(t),Kdr=r(hZ," to load the model weights."),hZ.forEach(t),Zdr=i(rA),T(E7.$$.fragment,rA),rA.forEach(t),ecr=i(fl),Ar=n(fl,"DIV",{class:!0});var ml=s(Ar);T(QL.$$.fragment,ml),ocr=i(ml),o1e=n(ml,"P",{});var x1t=s(o1e);rcr=r(x1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),x1t.forEach(t),tcr=i(ml),Za=n(ml,"P",{});var tA=s(Za);acr=r(tA,"The model class to instantiate is selected based on the "),r1e=n(tA,"CODE",{});var $1t=s(r1e);ncr=r($1t,"model_type"),$1t.forEach(t),scr=r(tA,` property of the config object (either
passed as an argument or loaded from `),t1e=n(tA,"CODE",{});var k1t=s(t1e);lcr=r(k1t,"pretrained_model_name_or_path"),k1t.forEach(t),icr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a1e=n(tA,"CODE",{});var S1t=s(a1e);dcr=r(S1t,"pretrained_model_name_or_path"),S1t.forEach(t),ccr=r(tA,":"),tA.forEach(t),fcr=i(ml),se=n(ml,"UL",{});var le=s(se);C7=n(le,"LI",{});var bke=s(C7);n1e=n(bke,"STRONG",{});var R1t=s(n1e);mcr=r(R1t,"albert"),R1t.forEach(t),gcr=r(bke," \u2014 "),iQ=n(bke,"A",{href:!0});var B1t=s(iQ);hcr=r(B1t,"TFAlbertForPreTraining"),B1t.forEach(t),pcr=r(bke," (ALBERT model)"),bke.forEach(t),ucr=i(le),w7=n(le,"LI",{});var vke=s(w7);s1e=n(vke,"STRONG",{});var P1t=s(s1e);_cr=r(P1t,"bart"),P1t.forEach(t),bcr=r(vke," \u2014 "),dQ=n(vke,"A",{href:!0});var I1t=s(dQ);vcr=r(I1t,"TFBartForConditionalGeneration"),I1t.forEach(t),Fcr=r(vke," (BART model)"),vke.forEach(t),Tcr=i(le),A7=n(le,"LI",{});var Fke=s(A7);l1e=n(Fke,"STRONG",{});var q1t=s(l1e);Mcr=r(q1t,"bert"),q1t.forEach(t),Ecr=r(Fke," \u2014 "),cQ=n(Fke,"A",{href:!0});var N1t=s(cQ);Ccr=r(N1t,"TFBertForPreTraining"),N1t.forEach(t),wcr=r(Fke," (BERT model)"),Fke.forEach(t),Acr=i(le),y7=n(le,"LI",{});var Tke=s(y7);i1e=n(Tke,"STRONG",{});var j1t=s(i1e);ycr=r(j1t,"camembert"),j1t.forEach(t),Lcr=r(Tke," \u2014 "),fQ=n(Tke,"A",{href:!0});var D1t=s(fQ);xcr=r(D1t,"TFCamembertForMaskedLM"),D1t.forEach(t),$cr=r(Tke," (CamemBERT model)"),Tke.forEach(t),kcr=i(le),L7=n(le,"LI",{});var Mke=s(L7);d1e=n(Mke,"STRONG",{});var G1t=s(d1e);Scr=r(G1t,"ctrl"),G1t.forEach(t),Rcr=r(Mke," \u2014 "),mQ=n(Mke,"A",{href:!0});var O1t=s(mQ);Bcr=r(O1t,"TFCTRLLMHeadModel"),O1t.forEach(t),Pcr=r(Mke," (CTRL model)"),Mke.forEach(t),Icr=i(le),x7=n(le,"LI",{});var Eke=s(x7);c1e=n(Eke,"STRONG",{});var V1t=s(c1e);qcr=r(V1t,"distilbert"),V1t.forEach(t),Ncr=r(Eke," \u2014 "),gQ=n(Eke,"A",{href:!0});var X1t=s(gQ);jcr=r(X1t,"TFDistilBertForMaskedLM"),X1t.forEach(t),Dcr=r(Eke," (DistilBERT model)"),Eke.forEach(t),Gcr=i(le),$7=n(le,"LI",{});var Cke=s($7);f1e=n(Cke,"STRONG",{});var z1t=s(f1e);Ocr=r(z1t,"electra"),z1t.forEach(t),Vcr=r(Cke," \u2014 "),hQ=n(Cke,"A",{href:!0});var Q1t=s(hQ);Xcr=r(Q1t,"TFElectraForPreTraining"),Q1t.forEach(t),zcr=r(Cke," (ELECTRA model)"),Cke.forEach(t),Qcr=i(le),k7=n(le,"LI",{});var wke=s(k7);m1e=n(wke,"STRONG",{});var W1t=s(m1e);Wcr=r(W1t,"flaubert"),W1t.forEach(t),Hcr=r(wke," \u2014 "),pQ=n(wke,"A",{href:!0});var H1t=s(pQ);Ucr=r(H1t,"TFFlaubertWithLMHeadModel"),H1t.forEach(t),Jcr=r(wke," (FlauBERT model)"),wke.forEach(t),Ycr=i(le),S7=n(le,"LI",{});var Ake=s(S7);g1e=n(Ake,"STRONG",{});var U1t=s(g1e);Kcr=r(U1t,"funnel"),U1t.forEach(t),Zcr=r(Ake," \u2014 "),uQ=n(Ake,"A",{href:!0});var J1t=s(uQ);efr=r(J1t,"TFFunnelForPreTraining"),J1t.forEach(t),ofr=r(Ake," (Funnel Transformer model)"),Ake.forEach(t),rfr=i(le),R7=n(le,"LI",{});var yke=s(R7);h1e=n(yke,"STRONG",{});var Y1t=s(h1e);tfr=r(Y1t,"gpt2"),Y1t.forEach(t),afr=r(yke," \u2014 "),_Q=n(yke,"A",{href:!0});var K1t=s(_Q);nfr=r(K1t,"TFGPT2LMHeadModel"),K1t.forEach(t),sfr=r(yke," (OpenAI GPT-2 model)"),yke.forEach(t),lfr=i(le),B7=n(le,"LI",{});var Lke=s(B7);p1e=n(Lke,"STRONG",{});var Z1t=s(p1e);ifr=r(Z1t,"layoutlm"),Z1t.forEach(t),dfr=r(Lke," \u2014 "),bQ=n(Lke,"A",{href:!0});var ebt=s(bQ);cfr=r(ebt,"TFLayoutLMForMaskedLM"),ebt.forEach(t),ffr=r(Lke," (LayoutLM model)"),Lke.forEach(t),mfr=i(le),P7=n(le,"LI",{});var xke=s(P7);u1e=n(xke,"STRONG",{});var obt=s(u1e);gfr=r(obt,"lxmert"),obt.forEach(t),hfr=r(xke," \u2014 "),vQ=n(xke,"A",{href:!0});var rbt=s(vQ);pfr=r(rbt,"TFLxmertForPreTraining"),rbt.forEach(t),ufr=r(xke," (LXMERT model)"),xke.forEach(t),_fr=i(le),I7=n(le,"LI",{});var $ke=s(I7);_1e=n($ke,"STRONG",{});var tbt=s(_1e);bfr=r(tbt,"mobilebert"),tbt.forEach(t),vfr=r($ke," \u2014 "),FQ=n($ke,"A",{href:!0});var abt=s(FQ);Ffr=r(abt,"TFMobileBertForPreTraining"),abt.forEach(t),Tfr=r($ke," (MobileBERT model)"),$ke.forEach(t),Mfr=i(le),q7=n(le,"LI",{});var kke=s(q7);b1e=n(kke,"STRONG",{});var nbt=s(b1e);Efr=r(nbt,"mpnet"),nbt.forEach(t),Cfr=r(kke," \u2014 "),TQ=n(kke,"A",{href:!0});var sbt=s(TQ);wfr=r(sbt,"TFMPNetForMaskedLM"),sbt.forEach(t),Afr=r(kke," (MPNet model)"),kke.forEach(t),yfr=i(le),N7=n(le,"LI",{});var Ske=s(N7);v1e=n(Ske,"STRONG",{});var lbt=s(v1e);Lfr=r(lbt,"openai-gpt"),lbt.forEach(t),xfr=r(Ske," \u2014 "),MQ=n(Ske,"A",{href:!0});var ibt=s(MQ);$fr=r(ibt,"TFOpenAIGPTLMHeadModel"),ibt.forEach(t),kfr=r(Ske," (OpenAI GPT model)"),Ske.forEach(t),Sfr=i(le),j7=n(le,"LI",{});var Rke=s(j7);F1e=n(Rke,"STRONG",{});var dbt=s(F1e);Rfr=r(dbt,"roberta"),dbt.forEach(t),Bfr=r(Rke," \u2014 "),EQ=n(Rke,"A",{href:!0});var cbt=s(EQ);Pfr=r(cbt,"TFRobertaForMaskedLM"),cbt.forEach(t),Ifr=r(Rke," (RoBERTa model)"),Rke.forEach(t),qfr=i(le),D7=n(le,"LI",{});var Bke=s(D7);T1e=n(Bke,"STRONG",{});var fbt=s(T1e);Nfr=r(fbt,"t5"),fbt.forEach(t),jfr=r(Bke," \u2014 "),CQ=n(Bke,"A",{href:!0});var mbt=s(CQ);Dfr=r(mbt,"TFT5ForConditionalGeneration"),mbt.forEach(t),Gfr=r(Bke," (T5 model)"),Bke.forEach(t),Ofr=i(le),G7=n(le,"LI",{});var Pke=s(G7);M1e=n(Pke,"STRONG",{});var gbt=s(M1e);Vfr=r(gbt,"tapas"),gbt.forEach(t),Xfr=r(Pke," \u2014 "),wQ=n(Pke,"A",{href:!0});var hbt=s(wQ);zfr=r(hbt,"TFTapasForMaskedLM"),hbt.forEach(t),Qfr=r(Pke," (TAPAS model)"),Pke.forEach(t),Wfr=i(le),O7=n(le,"LI",{});var Ike=s(O7);E1e=n(Ike,"STRONG",{});var pbt=s(E1e);Hfr=r(pbt,"transfo-xl"),pbt.forEach(t),Ufr=r(Ike," \u2014 "),AQ=n(Ike,"A",{href:!0});var ubt=s(AQ);Jfr=r(ubt,"TFTransfoXLLMHeadModel"),ubt.forEach(t),Yfr=r(Ike," (Transformer-XL model)"),Ike.forEach(t),Kfr=i(le),V7=n(le,"LI",{});var qke=s(V7);C1e=n(qke,"STRONG",{});var _bt=s(C1e);Zfr=r(_bt,"vit_mae"),_bt.forEach(t),emr=r(qke," \u2014 "),yQ=n(qke,"A",{href:!0});var bbt=s(yQ);omr=r(bbt,"TFViTMAEForPreTraining"),bbt.forEach(t),rmr=r(qke," (ViTMAE model)"),qke.forEach(t),tmr=i(le),X7=n(le,"LI",{});var Nke=s(X7);w1e=n(Nke,"STRONG",{});var vbt=s(w1e);amr=r(vbt,"xlm"),vbt.forEach(t),nmr=r(Nke," \u2014 "),LQ=n(Nke,"A",{href:!0});var Fbt=s(LQ);smr=r(Fbt,"TFXLMWithLMHeadModel"),Fbt.forEach(t),lmr=r(Nke," (XLM model)"),Nke.forEach(t),imr=i(le),z7=n(le,"LI",{});var jke=s(z7);A1e=n(jke,"STRONG",{});var Tbt=s(A1e);dmr=r(Tbt,"xlm-roberta"),Tbt.forEach(t),cmr=r(jke," \u2014 "),xQ=n(jke,"A",{href:!0});var Mbt=s(xQ);fmr=r(Mbt,"TFXLMRobertaForMaskedLM"),Mbt.forEach(t),mmr=r(jke," (XLM-RoBERTa model)"),jke.forEach(t),gmr=i(le),Q7=n(le,"LI",{});var Dke=s(Q7);y1e=n(Dke,"STRONG",{});var Ebt=s(y1e);hmr=r(Ebt,"xlnet"),Ebt.forEach(t),pmr=r(Dke," \u2014 "),$Q=n(Dke,"A",{href:!0});var Cbt=s($Q);umr=r(Cbt,"TFXLNetLMHeadModel"),Cbt.forEach(t),_mr=r(Dke," (XLNet model)"),Dke.forEach(t),le.forEach(t),bmr=i(ml),T(W7.$$.fragment,ml),ml.forEach(t),fl.forEach(t),bqe=i(f),Vd=n(f,"H2",{class:!0});var Cje=s(Vd);H7=n(Cje,"A",{id:!0,class:!0,href:!0});var wbt=s(H7);L1e=n(wbt,"SPAN",{});var Abt=s(L1e);T(WL.$$.fragment,Abt),Abt.forEach(t),wbt.forEach(t),vmr=i(Cje),x1e=n(Cje,"SPAN",{});var ybt=s(x1e);Fmr=r(ybt,"TFAutoModelForCausalLM"),ybt.forEach(t),Cje.forEach(t),vqe=i(f),Zo=n(f,"DIV",{class:!0});var gl=s(Zo);T(HL.$$.fragment,gl),Tmr=i(gl),Xd=n(gl,"P",{});var pZ=s(Xd);Mmr=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kQ=n(pZ,"A",{href:!0});var Lbt=s(kQ);Emr=r(Lbt,"from_pretrained()"),Lbt.forEach(t),Cmr=r(pZ," class method or the "),SQ=n(pZ,"A",{href:!0});var xbt=s(SQ);wmr=r(xbt,"from_config()"),xbt.forEach(t),Amr=r(pZ,` class
method.`),pZ.forEach(t),ymr=i(gl),UL=n(gl,"P",{});var wje=s(UL);Lmr=r(wje,"This class cannot be instantiated directly using "),$1e=n(wje,"CODE",{});var $bt=s($1e);xmr=r($bt,"__init__()"),$bt.forEach(t),$mr=r(wje," (throws an error)."),wje.forEach(t),kmr=i(gl),yt=n(gl,"DIV",{class:!0});var aA=s(yt);T(JL.$$.fragment,aA),Smr=i(aA),k1e=n(aA,"P",{});var kbt=s(k1e);Rmr=r(kbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kbt.forEach(t),Bmr=i(aA),zd=n(aA,"P",{});var uZ=s(zd);Pmr=r(uZ,`Note:
Loading a model from its configuration file does `),S1e=n(uZ,"STRONG",{});var Sbt=s(S1e);Imr=r(Sbt,"not"),Sbt.forEach(t),qmr=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=n(uZ,"A",{href:!0});var Rbt=s(RQ);Nmr=r(Rbt,"from_pretrained()"),Rbt.forEach(t),jmr=r(uZ," to load the model weights."),uZ.forEach(t),Dmr=i(aA),T(U7.$$.fragment,aA),aA.forEach(t),Gmr=i(gl),yr=n(gl,"DIV",{class:!0});var hl=s(yr);T(YL.$$.fragment,hl),Omr=i(hl),R1e=n(hl,"P",{});var Bbt=s(R1e);Vmr=r(Bbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Bbt.forEach(t),Xmr=i(hl),en=n(hl,"P",{});var nA=s(en);zmr=r(nA,"The model class to instantiate is selected based on the "),B1e=n(nA,"CODE",{});var Pbt=s(B1e);Qmr=r(Pbt,"model_type"),Pbt.forEach(t),Wmr=r(nA,` property of the config object (either
passed as an argument or loaded from `),P1e=n(nA,"CODE",{});var Ibt=s(P1e);Hmr=r(Ibt,"pretrained_model_name_or_path"),Ibt.forEach(t),Umr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=n(nA,"CODE",{});var qbt=s(I1e);Jmr=r(qbt,"pretrained_model_name_or_path"),qbt.forEach(t),Ymr=r(nA,":"),nA.forEach(t),Kmr=i(hl),Te=n(hl,"UL",{});var Ce=s(Te);J7=n(Ce,"LI",{});var Gke=s(J7);q1e=n(Gke,"STRONG",{});var Nbt=s(q1e);Zmr=r(Nbt,"bert"),Nbt.forEach(t),egr=r(Gke," \u2014 "),BQ=n(Gke,"A",{href:!0});var jbt=s(BQ);ogr=r(jbt,"TFBertLMHeadModel"),jbt.forEach(t),rgr=r(Gke," (BERT model)"),Gke.forEach(t),tgr=i(Ce),Y7=n(Ce,"LI",{});var Oke=s(Y7);N1e=n(Oke,"STRONG",{});var Dbt=s(N1e);agr=r(Dbt,"camembert"),Dbt.forEach(t),ngr=r(Oke," \u2014 "),PQ=n(Oke,"A",{href:!0});var Gbt=s(PQ);sgr=r(Gbt,"TFCamembertForCausalLM"),Gbt.forEach(t),lgr=r(Oke," (CamemBERT model)"),Oke.forEach(t),igr=i(Ce),K7=n(Ce,"LI",{});var Vke=s(K7);j1e=n(Vke,"STRONG",{});var Obt=s(j1e);dgr=r(Obt,"ctrl"),Obt.forEach(t),cgr=r(Vke," \u2014 "),IQ=n(Vke,"A",{href:!0});var Vbt=s(IQ);fgr=r(Vbt,"TFCTRLLMHeadModel"),Vbt.forEach(t),mgr=r(Vke," (CTRL model)"),Vke.forEach(t),ggr=i(Ce),Z7=n(Ce,"LI",{});var Xke=s(Z7);D1e=n(Xke,"STRONG",{});var Xbt=s(D1e);hgr=r(Xbt,"gpt2"),Xbt.forEach(t),pgr=r(Xke," \u2014 "),qQ=n(Xke,"A",{href:!0});var zbt=s(qQ);ugr=r(zbt,"TFGPT2LMHeadModel"),zbt.forEach(t),_gr=r(Xke," (OpenAI GPT-2 model)"),Xke.forEach(t),bgr=i(Ce),eM=n(Ce,"LI",{});var zke=s(eM);G1e=n(zke,"STRONG",{});var Qbt=s(G1e);vgr=r(Qbt,"gptj"),Qbt.forEach(t),Fgr=r(zke," \u2014 "),NQ=n(zke,"A",{href:!0});var Wbt=s(NQ);Tgr=r(Wbt,"TFGPTJForCausalLM"),Wbt.forEach(t),Mgr=r(zke," (GPT-J model)"),zke.forEach(t),Egr=i(Ce),oM=n(Ce,"LI",{});var Qke=s(oM);O1e=n(Qke,"STRONG",{});var Hbt=s(O1e);Cgr=r(Hbt,"openai-gpt"),Hbt.forEach(t),wgr=r(Qke," \u2014 "),jQ=n(Qke,"A",{href:!0});var Ubt=s(jQ);Agr=r(Ubt,"TFOpenAIGPTLMHeadModel"),Ubt.forEach(t),ygr=r(Qke," (OpenAI GPT model)"),Qke.forEach(t),Lgr=i(Ce),rM=n(Ce,"LI",{});var Wke=s(rM);V1e=n(Wke,"STRONG",{});var Jbt=s(V1e);xgr=r(Jbt,"rembert"),Jbt.forEach(t),$gr=r(Wke," \u2014 "),DQ=n(Wke,"A",{href:!0});var Ybt=s(DQ);kgr=r(Ybt,"TFRemBertForCausalLM"),Ybt.forEach(t),Sgr=r(Wke," (RemBERT model)"),Wke.forEach(t),Rgr=i(Ce),tM=n(Ce,"LI",{});var Hke=s(tM);X1e=n(Hke,"STRONG",{});var Kbt=s(X1e);Bgr=r(Kbt,"roberta"),Kbt.forEach(t),Pgr=r(Hke," \u2014 "),GQ=n(Hke,"A",{href:!0});var Zbt=s(GQ);Igr=r(Zbt,"TFRobertaForCausalLM"),Zbt.forEach(t),qgr=r(Hke," (RoBERTa model)"),Hke.forEach(t),Ngr=i(Ce),aM=n(Ce,"LI",{});var Uke=s(aM);z1e=n(Uke,"STRONG",{});var evt=s(z1e);jgr=r(evt,"roformer"),evt.forEach(t),Dgr=r(Uke," \u2014 "),OQ=n(Uke,"A",{href:!0});var ovt=s(OQ);Ggr=r(ovt,"TFRoFormerForCausalLM"),ovt.forEach(t),Ogr=r(Uke," (RoFormer model)"),Uke.forEach(t),Vgr=i(Ce),nM=n(Ce,"LI",{});var Jke=s(nM);Q1e=n(Jke,"STRONG",{});var rvt=s(Q1e);Xgr=r(rvt,"transfo-xl"),rvt.forEach(t),zgr=r(Jke," \u2014 "),VQ=n(Jke,"A",{href:!0});var tvt=s(VQ);Qgr=r(tvt,"TFTransfoXLLMHeadModel"),tvt.forEach(t),Wgr=r(Jke," (Transformer-XL model)"),Jke.forEach(t),Hgr=i(Ce),sM=n(Ce,"LI",{});var Yke=s(sM);W1e=n(Yke,"STRONG",{});var avt=s(W1e);Ugr=r(avt,"xlm"),avt.forEach(t),Jgr=r(Yke," \u2014 "),XQ=n(Yke,"A",{href:!0});var nvt=s(XQ);Ygr=r(nvt,"TFXLMWithLMHeadModel"),nvt.forEach(t),Kgr=r(Yke," (XLM model)"),Yke.forEach(t),Zgr=i(Ce),lM=n(Ce,"LI",{});var Kke=s(lM);H1e=n(Kke,"STRONG",{});var svt=s(H1e);ehr=r(svt,"xlnet"),svt.forEach(t),ohr=r(Kke," \u2014 "),zQ=n(Kke,"A",{href:!0});var lvt=s(zQ);rhr=r(lvt,"TFXLNetLMHeadModel"),lvt.forEach(t),thr=r(Kke," (XLNet model)"),Kke.forEach(t),Ce.forEach(t),ahr=i(hl),T(iM.$$.fragment,hl),hl.forEach(t),gl.forEach(t),Fqe=i(f),Qd=n(f,"H2",{class:!0});var Aje=s(Qd);dM=n(Aje,"A",{id:!0,class:!0,href:!0});var ivt=s(dM);U1e=n(ivt,"SPAN",{});var dvt=s(U1e);T(KL.$$.fragment,dvt),dvt.forEach(t),ivt.forEach(t),nhr=i(Aje),J1e=n(Aje,"SPAN",{});var cvt=s(J1e);shr=r(cvt,"TFAutoModelForImageClassification"),cvt.forEach(t),Aje.forEach(t),Tqe=i(f),er=n(f,"DIV",{class:!0});var pl=s(er);T(ZL.$$.fragment,pl),lhr=i(pl),Wd=n(pl,"P",{});var _Z=s(Wd);ihr=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QQ=n(_Z,"A",{href:!0});var fvt=s(QQ);dhr=r(fvt,"from_pretrained()"),fvt.forEach(t),chr=r(_Z," class method or the "),WQ=n(_Z,"A",{href:!0});var mvt=s(WQ);fhr=r(mvt,"from_config()"),mvt.forEach(t),mhr=r(_Z,` class
method.`),_Z.forEach(t),ghr=i(pl),e8=n(pl,"P",{});var yje=s(e8);hhr=r(yje,"This class cannot be instantiated directly using "),Y1e=n(yje,"CODE",{});var gvt=s(Y1e);phr=r(gvt,"__init__()"),gvt.forEach(t),uhr=r(yje," (throws an error)."),yje.forEach(t),_hr=i(pl),Lt=n(pl,"DIV",{class:!0});var sA=s(Lt);T(o8.$$.fragment,sA),bhr=i(sA),K1e=n(sA,"P",{});var hvt=s(K1e);vhr=r(hvt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),hvt.forEach(t),Fhr=i(sA),Hd=n(sA,"P",{});var bZ=s(Hd);Thr=r(bZ,`Note:
Loading a model from its configuration file does `),Z1e=n(bZ,"STRONG",{});var pvt=s(Z1e);Mhr=r(pvt,"not"),pvt.forEach(t),Ehr=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=n(bZ,"A",{href:!0});var uvt=s(HQ);Chr=r(uvt,"from_pretrained()"),uvt.forEach(t),whr=r(bZ," to load the model weights."),bZ.forEach(t),Ahr=i(sA),T(cM.$$.fragment,sA),sA.forEach(t),yhr=i(pl),Lr=n(pl,"DIV",{class:!0});var ul=s(Lr);T(r8.$$.fragment,ul),Lhr=i(ul),ebe=n(ul,"P",{});var _vt=s(ebe);xhr=r(_vt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_vt.forEach(t),$hr=i(ul),on=n(ul,"P",{});var lA=s(on);khr=r(lA,"The model class to instantiate is selected based on the "),obe=n(lA,"CODE",{});var bvt=s(obe);Shr=r(bvt,"model_type"),bvt.forEach(t),Rhr=r(lA,` property of the config object (either
passed as an argument or loaded from `),rbe=n(lA,"CODE",{});var vvt=s(rbe);Bhr=r(vvt,"pretrained_model_name_or_path"),vvt.forEach(t),Phr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tbe=n(lA,"CODE",{});var Fvt=s(tbe);Ihr=r(Fvt,"pretrained_model_name_or_path"),Fvt.forEach(t),qhr=r(lA,":"),lA.forEach(t),Nhr=i(ul),Ud=n(ul,"UL",{});var vZ=s(Ud);fM=n(vZ,"LI",{});var Zke=s(fM);abe=n(Zke,"STRONG",{});var Tvt=s(abe);jhr=r(Tvt,"convnext"),Tvt.forEach(t),Dhr=r(Zke," \u2014 "),UQ=n(Zke,"A",{href:!0});var Mvt=s(UQ);Ghr=r(Mvt,"TFConvNextForImageClassification"),Mvt.forEach(t),Ohr=r(Zke," (ConvNext model)"),Zke.forEach(t),Vhr=i(vZ),mM=n(vZ,"LI",{});var eSe=s(mM);nbe=n(eSe,"STRONG",{});var Evt=s(nbe);Xhr=r(Evt,"data2vec-vision"),Evt.forEach(t),zhr=r(eSe," \u2014 "),JQ=n(eSe,"A",{href:!0});var Cvt=s(JQ);Qhr=r(Cvt,"TFData2VecVisionForImageClassification"),Cvt.forEach(t),Whr=r(eSe," (Data2VecVision model)"),eSe.forEach(t),Hhr=i(vZ),gM=n(vZ,"LI",{});var oSe=s(gM);sbe=n(oSe,"STRONG",{});var wvt=s(sbe);Uhr=r(wvt,"vit"),wvt.forEach(t),Jhr=r(oSe," \u2014 "),YQ=n(oSe,"A",{href:!0});var Avt=s(YQ);Yhr=r(Avt,"TFViTForImageClassification"),Avt.forEach(t),Khr=r(oSe," (ViT model)"),oSe.forEach(t),vZ.forEach(t),Zhr=i(ul),T(hM.$$.fragment,ul),ul.forEach(t),pl.forEach(t),Mqe=i(f),Jd=n(f,"H2",{class:!0});var Lje=s(Jd);pM=n(Lje,"A",{id:!0,class:!0,href:!0});var yvt=s(pM);lbe=n(yvt,"SPAN",{});var Lvt=s(lbe);T(t8.$$.fragment,Lvt),Lvt.forEach(t),yvt.forEach(t),epr=i(Lje),ibe=n(Lje,"SPAN",{});var xvt=s(ibe);opr=r(xvt,"TFAutoModelForMaskedLM"),xvt.forEach(t),Lje.forEach(t),Eqe=i(f),or=n(f,"DIV",{class:!0});var _l=s(or);T(a8.$$.fragment,_l),rpr=i(_l),Yd=n(_l,"P",{});var FZ=s(Yd);tpr=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),KQ=n(FZ,"A",{href:!0});var $vt=s(KQ);apr=r($vt,"from_pretrained()"),$vt.forEach(t),npr=r(FZ," class method or the "),ZQ=n(FZ,"A",{href:!0});var kvt=s(ZQ);spr=r(kvt,"from_config()"),kvt.forEach(t),lpr=r(FZ,` class
method.`),FZ.forEach(t),ipr=i(_l),n8=n(_l,"P",{});var xje=s(n8);dpr=r(xje,"This class cannot be instantiated directly using "),dbe=n(xje,"CODE",{});var Svt=s(dbe);cpr=r(Svt,"__init__()"),Svt.forEach(t),fpr=r(xje," (throws an error)."),xje.forEach(t),mpr=i(_l),xt=n(_l,"DIV",{class:!0});var iA=s(xt);T(s8.$$.fragment,iA),gpr=i(iA),cbe=n(iA,"P",{});var Rvt=s(cbe);hpr=r(Rvt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Rvt.forEach(t),ppr=i(iA),Kd=n(iA,"P",{});var TZ=s(Kd);upr=r(TZ,`Note:
Loading a model from its configuration file does `),fbe=n(TZ,"STRONG",{});var Bvt=s(fbe);_pr=r(Bvt,"not"),Bvt.forEach(t),bpr=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=n(TZ,"A",{href:!0});var Pvt=s(eW);vpr=r(Pvt,"from_pretrained()"),Pvt.forEach(t),Fpr=r(TZ," to load the model weights."),TZ.forEach(t),Tpr=i(iA),T(uM.$$.fragment,iA),iA.forEach(t),Mpr=i(_l),xr=n(_l,"DIV",{class:!0});var bl=s(xr);T(l8.$$.fragment,bl),Epr=i(bl),mbe=n(bl,"P",{});var Ivt=s(mbe);Cpr=r(Ivt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ivt.forEach(t),wpr=i(bl),rn=n(bl,"P",{});var dA=s(rn);Apr=r(dA,"The model class to instantiate is selected based on the "),gbe=n(dA,"CODE",{});var qvt=s(gbe);ypr=r(qvt,"model_type"),qvt.forEach(t),Lpr=r(dA,` property of the config object (either
passed as an argument or loaded from `),hbe=n(dA,"CODE",{});var Nvt=s(hbe);xpr=r(Nvt,"pretrained_model_name_or_path"),Nvt.forEach(t),$pr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=n(dA,"CODE",{});var jvt=s(pbe);kpr=r(jvt,"pretrained_model_name_or_path"),jvt.forEach(t),Spr=r(dA,":"),dA.forEach(t),Rpr=i(bl),ie=n(bl,"UL",{});var fe=s(ie);_M=n(fe,"LI",{});var rSe=s(_M);ube=n(rSe,"STRONG",{});var Dvt=s(ube);Bpr=r(Dvt,"albert"),Dvt.forEach(t),Ppr=r(rSe," \u2014 "),oW=n(rSe,"A",{href:!0});var Gvt=s(oW);Ipr=r(Gvt,"TFAlbertForMaskedLM"),Gvt.forEach(t),qpr=r(rSe," (ALBERT model)"),rSe.forEach(t),Npr=i(fe),bM=n(fe,"LI",{});var tSe=s(bM);_be=n(tSe,"STRONG",{});var Ovt=s(_be);jpr=r(Ovt,"bert"),Ovt.forEach(t),Dpr=r(tSe," \u2014 "),rW=n(tSe,"A",{href:!0});var Vvt=s(rW);Gpr=r(Vvt,"TFBertForMaskedLM"),Vvt.forEach(t),Opr=r(tSe," (BERT model)"),tSe.forEach(t),Vpr=i(fe),vM=n(fe,"LI",{});var aSe=s(vM);bbe=n(aSe,"STRONG",{});var Xvt=s(bbe);Xpr=r(Xvt,"camembert"),Xvt.forEach(t),zpr=r(aSe," \u2014 "),tW=n(aSe,"A",{href:!0});var zvt=s(tW);Qpr=r(zvt,"TFCamembertForMaskedLM"),zvt.forEach(t),Wpr=r(aSe," (CamemBERT model)"),aSe.forEach(t),Hpr=i(fe),FM=n(fe,"LI",{});var nSe=s(FM);vbe=n(nSe,"STRONG",{});var Qvt=s(vbe);Upr=r(Qvt,"convbert"),Qvt.forEach(t),Jpr=r(nSe," \u2014 "),aW=n(nSe,"A",{href:!0});var Wvt=s(aW);Ypr=r(Wvt,"TFConvBertForMaskedLM"),Wvt.forEach(t),Kpr=r(nSe," (ConvBERT model)"),nSe.forEach(t),Zpr=i(fe),TM=n(fe,"LI",{});var sSe=s(TM);Fbe=n(sSe,"STRONG",{});var Hvt=s(Fbe);eur=r(Hvt,"deberta"),Hvt.forEach(t),our=r(sSe," \u2014 "),nW=n(sSe,"A",{href:!0});var Uvt=s(nW);rur=r(Uvt,"TFDebertaForMaskedLM"),Uvt.forEach(t),tur=r(sSe," (DeBERTa model)"),sSe.forEach(t),aur=i(fe),MM=n(fe,"LI",{});var lSe=s(MM);Tbe=n(lSe,"STRONG",{});var Jvt=s(Tbe);nur=r(Jvt,"deberta-v2"),Jvt.forEach(t),sur=r(lSe," \u2014 "),sW=n(lSe,"A",{href:!0});var Yvt=s(sW);lur=r(Yvt,"TFDebertaV2ForMaskedLM"),Yvt.forEach(t),iur=r(lSe," (DeBERTa-v2 model)"),lSe.forEach(t),dur=i(fe),EM=n(fe,"LI",{});var iSe=s(EM);Mbe=n(iSe,"STRONG",{});var Kvt=s(Mbe);cur=r(Kvt,"distilbert"),Kvt.forEach(t),fur=r(iSe," \u2014 "),lW=n(iSe,"A",{href:!0});var Zvt=s(lW);mur=r(Zvt,"TFDistilBertForMaskedLM"),Zvt.forEach(t),gur=r(iSe," (DistilBERT model)"),iSe.forEach(t),hur=i(fe),CM=n(fe,"LI",{});var dSe=s(CM);Ebe=n(dSe,"STRONG",{});var eFt=s(Ebe);pur=r(eFt,"electra"),eFt.forEach(t),uur=r(dSe," \u2014 "),iW=n(dSe,"A",{href:!0});var oFt=s(iW);_ur=r(oFt,"TFElectraForMaskedLM"),oFt.forEach(t),bur=r(dSe," (ELECTRA model)"),dSe.forEach(t),vur=i(fe),wM=n(fe,"LI",{});var cSe=s(wM);Cbe=n(cSe,"STRONG",{});var rFt=s(Cbe);Fur=r(rFt,"flaubert"),rFt.forEach(t),Tur=r(cSe," \u2014 "),dW=n(cSe,"A",{href:!0});var tFt=s(dW);Mur=r(tFt,"TFFlaubertWithLMHeadModel"),tFt.forEach(t),Eur=r(cSe," (FlauBERT model)"),cSe.forEach(t),Cur=i(fe),AM=n(fe,"LI",{});var fSe=s(AM);wbe=n(fSe,"STRONG",{});var aFt=s(wbe);wur=r(aFt,"funnel"),aFt.forEach(t),Aur=r(fSe," \u2014 "),cW=n(fSe,"A",{href:!0});var nFt=s(cW);yur=r(nFt,"TFFunnelForMaskedLM"),nFt.forEach(t),Lur=r(fSe," (Funnel Transformer model)"),fSe.forEach(t),xur=i(fe),yM=n(fe,"LI",{});var mSe=s(yM);Abe=n(mSe,"STRONG",{});var sFt=s(Abe);$ur=r(sFt,"layoutlm"),sFt.forEach(t),kur=r(mSe," \u2014 "),fW=n(mSe,"A",{href:!0});var lFt=s(fW);Sur=r(lFt,"TFLayoutLMForMaskedLM"),lFt.forEach(t),Rur=r(mSe," (LayoutLM model)"),mSe.forEach(t),Bur=i(fe),LM=n(fe,"LI",{});var gSe=s(LM);ybe=n(gSe,"STRONG",{});var iFt=s(ybe);Pur=r(iFt,"longformer"),iFt.forEach(t),Iur=r(gSe," \u2014 "),mW=n(gSe,"A",{href:!0});var dFt=s(mW);qur=r(dFt,"TFLongformerForMaskedLM"),dFt.forEach(t),Nur=r(gSe," (Longformer model)"),gSe.forEach(t),jur=i(fe),xM=n(fe,"LI",{});var hSe=s(xM);Lbe=n(hSe,"STRONG",{});var cFt=s(Lbe);Dur=r(cFt,"mobilebert"),cFt.forEach(t),Gur=r(hSe," \u2014 "),gW=n(hSe,"A",{href:!0});var fFt=s(gW);Our=r(fFt,"TFMobileBertForMaskedLM"),fFt.forEach(t),Vur=r(hSe," (MobileBERT model)"),hSe.forEach(t),Xur=i(fe),$M=n(fe,"LI",{});var pSe=s($M);xbe=n(pSe,"STRONG",{});var mFt=s(xbe);zur=r(mFt,"mpnet"),mFt.forEach(t),Qur=r(pSe," \u2014 "),hW=n(pSe,"A",{href:!0});var gFt=s(hW);Wur=r(gFt,"TFMPNetForMaskedLM"),gFt.forEach(t),Hur=r(pSe," (MPNet model)"),pSe.forEach(t),Uur=i(fe),kM=n(fe,"LI",{});var uSe=s(kM);$be=n(uSe,"STRONG",{});var hFt=s($be);Jur=r(hFt,"rembert"),hFt.forEach(t),Yur=r(uSe," \u2014 "),pW=n(uSe,"A",{href:!0});var pFt=s(pW);Kur=r(pFt,"TFRemBertForMaskedLM"),pFt.forEach(t),Zur=r(uSe," (RemBERT model)"),uSe.forEach(t),e_r=i(fe),SM=n(fe,"LI",{});var _Se=s(SM);kbe=n(_Se,"STRONG",{});var uFt=s(kbe);o_r=r(uFt,"roberta"),uFt.forEach(t),r_r=r(_Se," \u2014 "),uW=n(_Se,"A",{href:!0});var _Ft=s(uW);t_r=r(_Ft,"TFRobertaForMaskedLM"),_Ft.forEach(t),a_r=r(_Se," (RoBERTa model)"),_Se.forEach(t),n_r=i(fe),RM=n(fe,"LI",{});var bSe=s(RM);Sbe=n(bSe,"STRONG",{});var bFt=s(Sbe);s_r=r(bFt,"roformer"),bFt.forEach(t),l_r=r(bSe," \u2014 "),_W=n(bSe,"A",{href:!0});var vFt=s(_W);i_r=r(vFt,"TFRoFormerForMaskedLM"),vFt.forEach(t),d_r=r(bSe," (RoFormer model)"),bSe.forEach(t),c_r=i(fe),BM=n(fe,"LI",{});var vSe=s(BM);Rbe=n(vSe,"STRONG",{});var FFt=s(Rbe);f_r=r(FFt,"tapas"),FFt.forEach(t),m_r=r(vSe," \u2014 "),bW=n(vSe,"A",{href:!0});var TFt=s(bW);g_r=r(TFt,"TFTapasForMaskedLM"),TFt.forEach(t),h_r=r(vSe," (TAPAS model)"),vSe.forEach(t),p_r=i(fe),PM=n(fe,"LI",{});var FSe=s(PM);Bbe=n(FSe,"STRONG",{});var MFt=s(Bbe);u_r=r(MFt,"xlm"),MFt.forEach(t),__r=r(FSe," \u2014 "),vW=n(FSe,"A",{href:!0});var EFt=s(vW);b_r=r(EFt,"TFXLMWithLMHeadModel"),EFt.forEach(t),v_r=r(FSe," (XLM model)"),FSe.forEach(t),F_r=i(fe),IM=n(fe,"LI",{});var TSe=s(IM);Pbe=n(TSe,"STRONG",{});var CFt=s(Pbe);T_r=r(CFt,"xlm-roberta"),CFt.forEach(t),M_r=r(TSe," \u2014 "),FW=n(TSe,"A",{href:!0});var wFt=s(FW);E_r=r(wFt,"TFXLMRobertaForMaskedLM"),wFt.forEach(t),C_r=r(TSe," (XLM-RoBERTa model)"),TSe.forEach(t),fe.forEach(t),w_r=i(bl),T(qM.$$.fragment,bl),bl.forEach(t),_l.forEach(t),Cqe=i(f),Zd=n(f,"H2",{class:!0});var $je=s(Zd);NM=n($je,"A",{id:!0,class:!0,href:!0});var AFt=s(NM);Ibe=n(AFt,"SPAN",{});var yFt=s(Ibe);T(i8.$$.fragment,yFt),yFt.forEach(t),AFt.forEach(t),A_r=i($je),qbe=n($je,"SPAN",{});var LFt=s(qbe);y_r=r(LFt,"TFAutoModelForSeq2SeqLM"),LFt.forEach(t),$je.forEach(t),wqe=i(f),rr=n(f,"DIV",{class:!0});var vl=s(rr);T(d8.$$.fragment,vl),L_r=i(vl),ec=n(vl,"P",{});var MZ=s(ec);x_r=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),TW=n(MZ,"A",{href:!0});var xFt=s(TW);$_r=r(xFt,"from_pretrained()"),xFt.forEach(t),k_r=r(MZ," class method or the "),MW=n(MZ,"A",{href:!0});var $Ft=s(MW);S_r=r($Ft,"from_config()"),$Ft.forEach(t),R_r=r(MZ,` class
method.`),MZ.forEach(t),B_r=i(vl),c8=n(vl,"P",{});var kje=s(c8);P_r=r(kje,"This class cannot be instantiated directly using "),Nbe=n(kje,"CODE",{});var kFt=s(Nbe);I_r=r(kFt,"__init__()"),kFt.forEach(t),q_r=r(kje," (throws an error)."),kje.forEach(t),N_r=i(vl),$t=n(vl,"DIV",{class:!0});var cA=s($t);T(f8.$$.fragment,cA),j_r=i(cA),jbe=n(cA,"P",{});var SFt=s(jbe);D_r=r(SFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),SFt.forEach(t),G_r=i(cA),oc=n(cA,"P",{});var EZ=s(oc);O_r=r(EZ,`Note:
Loading a model from its configuration file does `),Dbe=n(EZ,"STRONG",{});var RFt=s(Dbe);V_r=r(RFt,"not"),RFt.forEach(t),X_r=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=n(EZ,"A",{href:!0});var BFt=s(EW);z_r=r(BFt,"from_pretrained()"),BFt.forEach(t),Q_r=r(EZ," to load the model weights."),EZ.forEach(t),W_r=i(cA),T(jM.$$.fragment,cA),cA.forEach(t),H_r=i(vl),$r=n(vl,"DIV",{class:!0});var Fl=s($r);T(m8.$$.fragment,Fl),U_r=i(Fl),Gbe=n(Fl,"P",{});var PFt=s(Gbe);J_r=r(PFt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),PFt.forEach(t),Y_r=i(Fl),tn=n(Fl,"P",{});var fA=s(tn);K_r=r(fA,"The model class to instantiate is selected based on the "),Obe=n(fA,"CODE",{});var IFt=s(Obe);Z_r=r(IFt,"model_type"),IFt.forEach(t),e2r=r(fA,` property of the config object (either
passed as an argument or loaded from `),Vbe=n(fA,"CODE",{});var qFt=s(Vbe);o2r=r(qFt,"pretrained_model_name_or_path"),qFt.forEach(t),r2r=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xbe=n(fA,"CODE",{});var NFt=s(Xbe);t2r=r(NFt,"pretrained_model_name_or_path"),NFt.forEach(t),a2r=r(fA,":"),fA.forEach(t),n2r=i(Fl),ye=n(Fl,"UL",{});var Re=s(ye);DM=n(Re,"LI",{});var MSe=s(DM);zbe=n(MSe,"STRONG",{});var jFt=s(zbe);s2r=r(jFt,"bart"),jFt.forEach(t),l2r=r(MSe," \u2014 "),CW=n(MSe,"A",{href:!0});var DFt=s(CW);i2r=r(DFt,"TFBartForConditionalGeneration"),DFt.forEach(t),d2r=r(MSe," (BART model)"),MSe.forEach(t),c2r=i(Re),GM=n(Re,"LI",{});var ESe=s(GM);Qbe=n(ESe,"STRONG",{});var GFt=s(Qbe);f2r=r(GFt,"blenderbot"),GFt.forEach(t),m2r=r(ESe," \u2014 "),wW=n(ESe,"A",{href:!0});var OFt=s(wW);g2r=r(OFt,"TFBlenderbotForConditionalGeneration"),OFt.forEach(t),h2r=r(ESe," (Blenderbot model)"),ESe.forEach(t),p2r=i(Re),OM=n(Re,"LI",{});var CSe=s(OM);Wbe=n(CSe,"STRONG",{});var VFt=s(Wbe);u2r=r(VFt,"blenderbot-small"),VFt.forEach(t),_2r=r(CSe," \u2014 "),AW=n(CSe,"A",{href:!0});var XFt=s(AW);b2r=r(XFt,"TFBlenderbotSmallForConditionalGeneration"),XFt.forEach(t),v2r=r(CSe," (BlenderbotSmall model)"),CSe.forEach(t),F2r=i(Re),VM=n(Re,"LI",{});var wSe=s(VM);Hbe=n(wSe,"STRONG",{});var zFt=s(Hbe);T2r=r(zFt,"encoder-decoder"),zFt.forEach(t),M2r=r(wSe," \u2014 "),yW=n(wSe,"A",{href:!0});var QFt=s(yW);E2r=r(QFt,"TFEncoderDecoderModel"),QFt.forEach(t),C2r=r(wSe," (Encoder decoder model)"),wSe.forEach(t),w2r=i(Re),XM=n(Re,"LI",{});var ASe=s(XM);Ube=n(ASe,"STRONG",{});var WFt=s(Ube);A2r=r(WFt,"led"),WFt.forEach(t),y2r=r(ASe," \u2014 "),LW=n(ASe,"A",{href:!0});var HFt=s(LW);L2r=r(HFt,"TFLEDForConditionalGeneration"),HFt.forEach(t),x2r=r(ASe," (LED model)"),ASe.forEach(t),$2r=i(Re),zM=n(Re,"LI",{});var ySe=s(zM);Jbe=n(ySe,"STRONG",{});var UFt=s(Jbe);k2r=r(UFt,"marian"),UFt.forEach(t),S2r=r(ySe," \u2014 "),xW=n(ySe,"A",{href:!0});var JFt=s(xW);R2r=r(JFt,"TFMarianMTModel"),JFt.forEach(t),B2r=r(ySe," (Marian model)"),ySe.forEach(t),P2r=i(Re),QM=n(Re,"LI",{});var LSe=s(QM);Ybe=n(LSe,"STRONG",{});var YFt=s(Ybe);I2r=r(YFt,"mbart"),YFt.forEach(t),q2r=r(LSe," \u2014 "),$W=n(LSe,"A",{href:!0});var KFt=s($W);N2r=r(KFt,"TFMBartForConditionalGeneration"),KFt.forEach(t),j2r=r(LSe," (mBART model)"),LSe.forEach(t),D2r=i(Re),WM=n(Re,"LI",{});var xSe=s(WM);Kbe=n(xSe,"STRONG",{});var ZFt=s(Kbe);G2r=r(ZFt,"mt5"),ZFt.forEach(t),O2r=r(xSe," \u2014 "),kW=n(xSe,"A",{href:!0});var e0t=s(kW);V2r=r(e0t,"TFMT5ForConditionalGeneration"),e0t.forEach(t),X2r=r(xSe," (mT5 model)"),xSe.forEach(t),z2r=i(Re),HM=n(Re,"LI",{});var $Se=s(HM);Zbe=n($Se,"STRONG",{});var o0t=s(Zbe);Q2r=r(o0t,"pegasus"),o0t.forEach(t),W2r=r($Se," \u2014 "),SW=n($Se,"A",{href:!0});var r0t=s(SW);H2r=r(r0t,"TFPegasusForConditionalGeneration"),r0t.forEach(t),U2r=r($Se," (Pegasus model)"),$Se.forEach(t),J2r=i(Re),UM=n(Re,"LI",{});var kSe=s(UM);eve=n(kSe,"STRONG",{});var t0t=s(eve);Y2r=r(t0t,"t5"),t0t.forEach(t),K2r=r(kSe," \u2014 "),RW=n(kSe,"A",{href:!0});var a0t=s(RW);Z2r=r(a0t,"TFT5ForConditionalGeneration"),a0t.forEach(t),e1r=r(kSe," (T5 model)"),kSe.forEach(t),Re.forEach(t),o1r=i(Fl),T(JM.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),Aqe=i(f),rc=n(f,"H2",{class:!0});var Sje=s(rc);YM=n(Sje,"A",{id:!0,class:!0,href:!0});var n0t=s(YM);ove=n(n0t,"SPAN",{});var s0t=s(ove);T(g8.$$.fragment,s0t),s0t.forEach(t),n0t.forEach(t),r1r=i(Sje),rve=n(Sje,"SPAN",{});var l0t=s(rve);t1r=r(l0t,"TFAutoModelForSequenceClassification"),l0t.forEach(t),Sje.forEach(t),yqe=i(f),tr=n(f,"DIV",{class:!0});var Tl=s(tr);T(h8.$$.fragment,Tl),a1r=i(Tl),tc=n(Tl,"P",{});var CZ=s(tc);n1r=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BW=n(CZ,"A",{href:!0});var i0t=s(BW);s1r=r(i0t,"from_pretrained()"),i0t.forEach(t),l1r=r(CZ," class method or the "),PW=n(CZ,"A",{href:!0});var d0t=s(PW);i1r=r(d0t,"from_config()"),d0t.forEach(t),d1r=r(CZ,` class
method.`),CZ.forEach(t),c1r=i(Tl),p8=n(Tl,"P",{});var Rje=s(p8);f1r=r(Rje,"This class cannot be instantiated directly using "),tve=n(Rje,"CODE",{});var c0t=s(tve);m1r=r(c0t,"__init__()"),c0t.forEach(t),g1r=r(Rje," (throws an error)."),Rje.forEach(t),h1r=i(Tl),kt=n(Tl,"DIV",{class:!0});var mA=s(kt);T(u8.$$.fragment,mA),p1r=i(mA),ave=n(mA,"P",{});var f0t=s(ave);u1r=r(f0t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),f0t.forEach(t),_1r=i(mA),ac=n(mA,"P",{});var wZ=s(ac);b1r=r(wZ,`Note:
Loading a model from its configuration file does `),nve=n(wZ,"STRONG",{});var m0t=s(nve);v1r=r(m0t,"not"),m0t.forEach(t),F1r=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=n(wZ,"A",{href:!0});var g0t=s(IW);T1r=r(g0t,"from_pretrained()"),g0t.forEach(t),M1r=r(wZ," to load the model weights."),wZ.forEach(t),E1r=i(mA),T(KM.$$.fragment,mA),mA.forEach(t),C1r=i(Tl),kr=n(Tl,"DIV",{class:!0});var Ml=s(kr);T(_8.$$.fragment,Ml),w1r=i(Ml),sve=n(Ml,"P",{});var h0t=s(sve);A1r=r(h0t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),h0t.forEach(t),y1r=i(Ml),an=n(Ml,"P",{});var gA=s(an);L1r=r(gA,"The model class to instantiate is selected based on the "),lve=n(gA,"CODE",{});var p0t=s(lve);x1r=r(p0t,"model_type"),p0t.forEach(t),$1r=r(gA,` property of the config object (either
passed as an argument or loaded from `),ive=n(gA,"CODE",{});var u0t=s(ive);k1r=r(u0t,"pretrained_model_name_or_path"),u0t.forEach(t),S1r=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=n(gA,"CODE",{});var _0t=s(dve);R1r=r(_0t,"pretrained_model_name_or_path"),_0t.forEach(t),B1r=r(gA,":"),gA.forEach(t),P1r=i(Ml),Z=n(Ml,"UL",{});var te=s(Z);ZM=n(te,"LI",{});var SSe=s(ZM);cve=n(SSe,"STRONG",{});var b0t=s(cve);I1r=r(b0t,"albert"),b0t.forEach(t),q1r=r(SSe," \u2014 "),qW=n(SSe,"A",{href:!0});var v0t=s(qW);N1r=r(v0t,"TFAlbertForSequenceClassification"),v0t.forEach(t),j1r=r(SSe," (ALBERT model)"),SSe.forEach(t),D1r=i(te),e4=n(te,"LI",{});var RSe=s(e4);fve=n(RSe,"STRONG",{});var F0t=s(fve);G1r=r(F0t,"bert"),F0t.forEach(t),O1r=r(RSe," \u2014 "),NW=n(RSe,"A",{href:!0});var T0t=s(NW);V1r=r(T0t,"TFBertForSequenceClassification"),T0t.forEach(t),X1r=r(RSe," (BERT model)"),RSe.forEach(t),z1r=i(te),o4=n(te,"LI",{});var BSe=s(o4);mve=n(BSe,"STRONG",{});var M0t=s(mve);Q1r=r(M0t,"camembert"),M0t.forEach(t),W1r=r(BSe," \u2014 "),jW=n(BSe,"A",{href:!0});var E0t=s(jW);H1r=r(E0t,"TFCamembertForSequenceClassification"),E0t.forEach(t),U1r=r(BSe," (CamemBERT model)"),BSe.forEach(t),J1r=i(te),r4=n(te,"LI",{});var PSe=s(r4);gve=n(PSe,"STRONG",{});var C0t=s(gve);Y1r=r(C0t,"convbert"),C0t.forEach(t),K1r=r(PSe," \u2014 "),DW=n(PSe,"A",{href:!0});var w0t=s(DW);Z1r=r(w0t,"TFConvBertForSequenceClassification"),w0t.forEach(t),ebr=r(PSe," (ConvBERT model)"),PSe.forEach(t),obr=i(te),t4=n(te,"LI",{});var ISe=s(t4);hve=n(ISe,"STRONG",{});var A0t=s(hve);rbr=r(A0t,"ctrl"),A0t.forEach(t),tbr=r(ISe," \u2014 "),GW=n(ISe,"A",{href:!0});var y0t=s(GW);abr=r(y0t,"TFCTRLForSequenceClassification"),y0t.forEach(t),nbr=r(ISe," (CTRL model)"),ISe.forEach(t),sbr=i(te),a4=n(te,"LI",{});var qSe=s(a4);pve=n(qSe,"STRONG",{});var L0t=s(pve);lbr=r(L0t,"deberta"),L0t.forEach(t),ibr=r(qSe," \u2014 "),OW=n(qSe,"A",{href:!0});var x0t=s(OW);dbr=r(x0t,"TFDebertaForSequenceClassification"),x0t.forEach(t),cbr=r(qSe," (DeBERTa model)"),qSe.forEach(t),fbr=i(te),n4=n(te,"LI",{});var NSe=s(n4);uve=n(NSe,"STRONG",{});var $0t=s(uve);mbr=r($0t,"deberta-v2"),$0t.forEach(t),gbr=r(NSe," \u2014 "),VW=n(NSe,"A",{href:!0});var k0t=s(VW);hbr=r(k0t,"TFDebertaV2ForSequenceClassification"),k0t.forEach(t),pbr=r(NSe," (DeBERTa-v2 model)"),NSe.forEach(t),ubr=i(te),s4=n(te,"LI",{});var jSe=s(s4);_ve=n(jSe,"STRONG",{});var S0t=s(_ve);_br=r(S0t,"distilbert"),S0t.forEach(t),bbr=r(jSe," \u2014 "),XW=n(jSe,"A",{href:!0});var R0t=s(XW);vbr=r(R0t,"TFDistilBertForSequenceClassification"),R0t.forEach(t),Fbr=r(jSe," (DistilBERT model)"),jSe.forEach(t),Tbr=i(te),l4=n(te,"LI",{});var DSe=s(l4);bve=n(DSe,"STRONG",{});var B0t=s(bve);Mbr=r(B0t,"electra"),B0t.forEach(t),Ebr=r(DSe," \u2014 "),zW=n(DSe,"A",{href:!0});var P0t=s(zW);Cbr=r(P0t,"TFElectraForSequenceClassification"),P0t.forEach(t),wbr=r(DSe," (ELECTRA model)"),DSe.forEach(t),Abr=i(te),i4=n(te,"LI",{});var GSe=s(i4);vve=n(GSe,"STRONG",{});var I0t=s(vve);ybr=r(I0t,"flaubert"),I0t.forEach(t),Lbr=r(GSe," \u2014 "),QW=n(GSe,"A",{href:!0});var q0t=s(QW);xbr=r(q0t,"TFFlaubertForSequenceClassification"),q0t.forEach(t),$br=r(GSe," (FlauBERT model)"),GSe.forEach(t),kbr=i(te),d4=n(te,"LI",{});var OSe=s(d4);Fve=n(OSe,"STRONG",{});var N0t=s(Fve);Sbr=r(N0t,"funnel"),N0t.forEach(t),Rbr=r(OSe," \u2014 "),WW=n(OSe,"A",{href:!0});var j0t=s(WW);Bbr=r(j0t,"TFFunnelForSequenceClassification"),j0t.forEach(t),Pbr=r(OSe," (Funnel Transformer model)"),OSe.forEach(t),Ibr=i(te),c4=n(te,"LI",{});var VSe=s(c4);Tve=n(VSe,"STRONG",{});var D0t=s(Tve);qbr=r(D0t,"gpt2"),D0t.forEach(t),Nbr=r(VSe," \u2014 "),HW=n(VSe,"A",{href:!0});var G0t=s(HW);jbr=r(G0t,"TFGPT2ForSequenceClassification"),G0t.forEach(t),Dbr=r(VSe," (OpenAI GPT-2 model)"),VSe.forEach(t),Gbr=i(te),f4=n(te,"LI",{});var XSe=s(f4);Mve=n(XSe,"STRONG",{});var O0t=s(Mve);Obr=r(O0t,"gptj"),O0t.forEach(t),Vbr=r(XSe," \u2014 "),UW=n(XSe,"A",{href:!0});var V0t=s(UW);Xbr=r(V0t,"TFGPTJForSequenceClassification"),V0t.forEach(t),zbr=r(XSe," (GPT-J model)"),XSe.forEach(t),Qbr=i(te),m4=n(te,"LI",{});var zSe=s(m4);Eve=n(zSe,"STRONG",{});var X0t=s(Eve);Wbr=r(X0t,"layoutlm"),X0t.forEach(t),Hbr=r(zSe," \u2014 "),JW=n(zSe,"A",{href:!0});var z0t=s(JW);Ubr=r(z0t,"TFLayoutLMForSequenceClassification"),z0t.forEach(t),Jbr=r(zSe," (LayoutLM model)"),zSe.forEach(t),Ybr=i(te),g4=n(te,"LI",{});var QSe=s(g4);Cve=n(QSe,"STRONG",{});var Q0t=s(Cve);Kbr=r(Q0t,"longformer"),Q0t.forEach(t),Zbr=r(QSe," \u2014 "),YW=n(QSe,"A",{href:!0});var W0t=s(YW);evr=r(W0t,"TFLongformerForSequenceClassification"),W0t.forEach(t),ovr=r(QSe," (Longformer model)"),QSe.forEach(t),rvr=i(te),h4=n(te,"LI",{});var WSe=s(h4);wve=n(WSe,"STRONG",{});var H0t=s(wve);tvr=r(H0t,"mobilebert"),H0t.forEach(t),avr=r(WSe," \u2014 "),KW=n(WSe,"A",{href:!0});var U0t=s(KW);nvr=r(U0t,"TFMobileBertForSequenceClassification"),U0t.forEach(t),svr=r(WSe," (MobileBERT model)"),WSe.forEach(t),lvr=i(te),p4=n(te,"LI",{});var HSe=s(p4);Ave=n(HSe,"STRONG",{});var J0t=s(Ave);ivr=r(J0t,"mpnet"),J0t.forEach(t),dvr=r(HSe," \u2014 "),ZW=n(HSe,"A",{href:!0});var Y0t=s(ZW);cvr=r(Y0t,"TFMPNetForSequenceClassification"),Y0t.forEach(t),fvr=r(HSe," (MPNet model)"),HSe.forEach(t),mvr=i(te),u4=n(te,"LI",{});var USe=s(u4);yve=n(USe,"STRONG",{});var K0t=s(yve);gvr=r(K0t,"openai-gpt"),K0t.forEach(t),hvr=r(USe," \u2014 "),eH=n(USe,"A",{href:!0});var Z0t=s(eH);pvr=r(Z0t,"TFOpenAIGPTForSequenceClassification"),Z0t.forEach(t),uvr=r(USe," (OpenAI GPT model)"),USe.forEach(t),_vr=i(te),_4=n(te,"LI",{});var JSe=s(_4);Lve=n(JSe,"STRONG",{});var eTt=s(Lve);bvr=r(eTt,"rembert"),eTt.forEach(t),vvr=r(JSe," \u2014 "),oH=n(JSe,"A",{href:!0});var oTt=s(oH);Fvr=r(oTt,"TFRemBertForSequenceClassification"),oTt.forEach(t),Tvr=r(JSe," (RemBERT model)"),JSe.forEach(t),Mvr=i(te),b4=n(te,"LI",{});var YSe=s(b4);xve=n(YSe,"STRONG",{});var rTt=s(xve);Evr=r(rTt,"roberta"),rTt.forEach(t),Cvr=r(YSe," \u2014 "),rH=n(YSe,"A",{href:!0});var tTt=s(rH);wvr=r(tTt,"TFRobertaForSequenceClassification"),tTt.forEach(t),Avr=r(YSe," (RoBERTa model)"),YSe.forEach(t),yvr=i(te),v4=n(te,"LI",{});var KSe=s(v4);$ve=n(KSe,"STRONG",{});var aTt=s($ve);Lvr=r(aTt,"roformer"),aTt.forEach(t),xvr=r(KSe," \u2014 "),tH=n(KSe,"A",{href:!0});var nTt=s(tH);$vr=r(nTt,"TFRoFormerForSequenceClassification"),nTt.forEach(t),kvr=r(KSe," (RoFormer model)"),KSe.forEach(t),Svr=i(te),F4=n(te,"LI",{});var ZSe=s(F4);kve=n(ZSe,"STRONG",{});var sTt=s(kve);Rvr=r(sTt,"tapas"),sTt.forEach(t),Bvr=r(ZSe," \u2014 "),aH=n(ZSe,"A",{href:!0});var lTt=s(aH);Pvr=r(lTt,"TFTapasForSequenceClassification"),lTt.forEach(t),Ivr=r(ZSe," (TAPAS model)"),ZSe.forEach(t),qvr=i(te),T4=n(te,"LI",{});var eRe=s(T4);Sve=n(eRe,"STRONG",{});var iTt=s(Sve);Nvr=r(iTt,"transfo-xl"),iTt.forEach(t),jvr=r(eRe," \u2014 "),nH=n(eRe,"A",{href:!0});var dTt=s(nH);Dvr=r(dTt,"TFTransfoXLForSequenceClassification"),dTt.forEach(t),Gvr=r(eRe," (Transformer-XL model)"),eRe.forEach(t),Ovr=i(te),M4=n(te,"LI",{});var oRe=s(M4);Rve=n(oRe,"STRONG",{});var cTt=s(Rve);Vvr=r(cTt,"xlm"),cTt.forEach(t),Xvr=r(oRe," \u2014 "),sH=n(oRe,"A",{href:!0});var fTt=s(sH);zvr=r(fTt,"TFXLMForSequenceClassification"),fTt.forEach(t),Qvr=r(oRe," (XLM model)"),oRe.forEach(t),Wvr=i(te),E4=n(te,"LI",{});var rRe=s(E4);Bve=n(rRe,"STRONG",{});var mTt=s(Bve);Hvr=r(mTt,"xlm-roberta"),mTt.forEach(t),Uvr=r(rRe," \u2014 "),lH=n(rRe,"A",{href:!0});var gTt=s(lH);Jvr=r(gTt,"TFXLMRobertaForSequenceClassification"),gTt.forEach(t),Yvr=r(rRe," (XLM-RoBERTa model)"),rRe.forEach(t),Kvr=i(te),C4=n(te,"LI",{});var tRe=s(C4);Pve=n(tRe,"STRONG",{});var hTt=s(Pve);Zvr=r(hTt,"xlnet"),hTt.forEach(t),eFr=r(tRe," \u2014 "),iH=n(tRe,"A",{href:!0});var pTt=s(iH);oFr=r(pTt,"TFXLNetForSequenceClassification"),pTt.forEach(t),rFr=r(tRe," (XLNet model)"),tRe.forEach(t),te.forEach(t),tFr=i(Ml),T(w4.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),Lqe=i(f),nc=n(f,"H2",{class:!0});var Bje=s(nc);A4=n(Bje,"A",{id:!0,class:!0,href:!0});var uTt=s(A4);Ive=n(uTt,"SPAN",{});var _Tt=s(Ive);T(b8.$$.fragment,_Tt),_Tt.forEach(t),uTt.forEach(t),aFr=i(Bje),qve=n(Bje,"SPAN",{});var bTt=s(qve);nFr=r(bTt,"TFAutoModelForMultipleChoice"),bTt.forEach(t),Bje.forEach(t),xqe=i(f),ar=n(f,"DIV",{class:!0});var El=s(ar);T(v8.$$.fragment,El),sFr=i(El),sc=n(El,"P",{});var AZ=s(sc);lFr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dH=n(AZ,"A",{href:!0});var vTt=s(dH);iFr=r(vTt,"from_pretrained()"),vTt.forEach(t),dFr=r(AZ," class method or the "),cH=n(AZ,"A",{href:!0});var FTt=s(cH);cFr=r(FTt,"from_config()"),FTt.forEach(t),fFr=r(AZ,` class
method.`),AZ.forEach(t),mFr=i(El),F8=n(El,"P",{});var Pje=s(F8);gFr=r(Pje,"This class cannot be instantiated directly using "),Nve=n(Pje,"CODE",{});var TTt=s(Nve);hFr=r(TTt,"__init__()"),TTt.forEach(t),pFr=r(Pje," (throws an error)."),Pje.forEach(t),uFr=i(El),St=n(El,"DIV",{class:!0});var hA=s(St);T(T8.$$.fragment,hA),_Fr=i(hA),jve=n(hA,"P",{});var MTt=s(jve);bFr=r(MTt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),MTt.forEach(t),vFr=i(hA),lc=n(hA,"P",{});var yZ=s(lc);FFr=r(yZ,`Note:
Loading a model from its configuration file does `),Dve=n(yZ,"STRONG",{});var ETt=s(Dve);TFr=r(ETt,"not"),ETt.forEach(t),MFr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(yZ,"A",{href:!0});var CTt=s(fH);EFr=r(CTt,"from_pretrained()"),CTt.forEach(t),CFr=r(yZ," to load the model weights."),yZ.forEach(t),wFr=i(hA),T(y4.$$.fragment,hA),hA.forEach(t),AFr=i(El),Sr=n(El,"DIV",{class:!0});var Cl=s(Sr);T(M8.$$.fragment,Cl),yFr=i(Cl),Gve=n(Cl,"P",{});var wTt=s(Gve);LFr=r(wTt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wTt.forEach(t),xFr=i(Cl),nn=n(Cl,"P",{});var pA=s(nn);$Fr=r(pA,"The model class to instantiate is selected based on the "),Ove=n(pA,"CODE",{});var ATt=s(Ove);kFr=r(ATt,"model_type"),ATt.forEach(t),SFr=r(pA,` property of the config object (either
passed as an argument or loaded from `),Vve=n(pA,"CODE",{});var yTt=s(Vve);RFr=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),BFr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=n(pA,"CODE",{});var LTt=s(Xve);PFr=r(LTt,"pretrained_model_name_or_path"),LTt.forEach(t),IFr=r(pA,":"),pA.forEach(t),qFr=i(Cl),pe=n(Cl,"UL",{});var _e=s(pe);L4=n(_e,"LI",{});var aRe=s(L4);zve=n(aRe,"STRONG",{});var xTt=s(zve);NFr=r(xTt,"albert"),xTt.forEach(t),jFr=r(aRe," \u2014 "),mH=n(aRe,"A",{href:!0});var $Tt=s(mH);DFr=r($Tt,"TFAlbertForMultipleChoice"),$Tt.forEach(t),GFr=r(aRe," (ALBERT model)"),aRe.forEach(t),OFr=i(_e),x4=n(_e,"LI",{});var nRe=s(x4);Qve=n(nRe,"STRONG",{});var kTt=s(Qve);VFr=r(kTt,"bert"),kTt.forEach(t),XFr=r(nRe," \u2014 "),gH=n(nRe,"A",{href:!0});var STt=s(gH);zFr=r(STt,"TFBertForMultipleChoice"),STt.forEach(t),QFr=r(nRe," (BERT model)"),nRe.forEach(t),WFr=i(_e),$4=n(_e,"LI",{});var sRe=s($4);Wve=n(sRe,"STRONG",{});var RTt=s(Wve);HFr=r(RTt,"camembert"),RTt.forEach(t),UFr=r(sRe," \u2014 "),hH=n(sRe,"A",{href:!0});var BTt=s(hH);JFr=r(BTt,"TFCamembertForMultipleChoice"),BTt.forEach(t),YFr=r(sRe," (CamemBERT model)"),sRe.forEach(t),KFr=i(_e),k4=n(_e,"LI",{});var lRe=s(k4);Hve=n(lRe,"STRONG",{});var PTt=s(Hve);ZFr=r(PTt,"convbert"),PTt.forEach(t),e0r=r(lRe," \u2014 "),pH=n(lRe,"A",{href:!0});var ITt=s(pH);o0r=r(ITt,"TFConvBertForMultipleChoice"),ITt.forEach(t),r0r=r(lRe," (ConvBERT model)"),lRe.forEach(t),t0r=i(_e),S4=n(_e,"LI",{});var iRe=s(S4);Uve=n(iRe,"STRONG",{});var qTt=s(Uve);a0r=r(qTt,"distilbert"),qTt.forEach(t),n0r=r(iRe," \u2014 "),uH=n(iRe,"A",{href:!0});var NTt=s(uH);s0r=r(NTt,"TFDistilBertForMultipleChoice"),NTt.forEach(t),l0r=r(iRe," (DistilBERT model)"),iRe.forEach(t),i0r=i(_e),R4=n(_e,"LI",{});var dRe=s(R4);Jve=n(dRe,"STRONG",{});var jTt=s(Jve);d0r=r(jTt,"electra"),jTt.forEach(t),c0r=r(dRe," \u2014 "),_H=n(dRe,"A",{href:!0});var DTt=s(_H);f0r=r(DTt,"TFElectraForMultipleChoice"),DTt.forEach(t),m0r=r(dRe," (ELECTRA model)"),dRe.forEach(t),g0r=i(_e),B4=n(_e,"LI",{});var cRe=s(B4);Yve=n(cRe,"STRONG",{});var GTt=s(Yve);h0r=r(GTt,"flaubert"),GTt.forEach(t),p0r=r(cRe," \u2014 "),bH=n(cRe,"A",{href:!0});var OTt=s(bH);u0r=r(OTt,"TFFlaubertForMultipleChoice"),OTt.forEach(t),_0r=r(cRe," (FlauBERT model)"),cRe.forEach(t),b0r=i(_e),P4=n(_e,"LI",{});var fRe=s(P4);Kve=n(fRe,"STRONG",{});var VTt=s(Kve);v0r=r(VTt,"funnel"),VTt.forEach(t),F0r=r(fRe," \u2014 "),vH=n(fRe,"A",{href:!0});var XTt=s(vH);T0r=r(XTt,"TFFunnelForMultipleChoice"),XTt.forEach(t),M0r=r(fRe," (Funnel Transformer model)"),fRe.forEach(t),E0r=i(_e),I4=n(_e,"LI",{});var mRe=s(I4);Zve=n(mRe,"STRONG",{});var zTt=s(Zve);C0r=r(zTt,"longformer"),zTt.forEach(t),w0r=r(mRe," \u2014 "),FH=n(mRe,"A",{href:!0});var QTt=s(FH);A0r=r(QTt,"TFLongformerForMultipleChoice"),QTt.forEach(t),y0r=r(mRe," (Longformer model)"),mRe.forEach(t),L0r=i(_e),q4=n(_e,"LI",{});var gRe=s(q4);eFe=n(gRe,"STRONG",{});var WTt=s(eFe);x0r=r(WTt,"mobilebert"),WTt.forEach(t),$0r=r(gRe," \u2014 "),TH=n(gRe,"A",{href:!0});var HTt=s(TH);k0r=r(HTt,"TFMobileBertForMultipleChoice"),HTt.forEach(t),S0r=r(gRe," (MobileBERT model)"),gRe.forEach(t),R0r=i(_e),N4=n(_e,"LI",{});var hRe=s(N4);oFe=n(hRe,"STRONG",{});var UTt=s(oFe);B0r=r(UTt,"mpnet"),UTt.forEach(t),P0r=r(hRe," \u2014 "),MH=n(hRe,"A",{href:!0});var JTt=s(MH);I0r=r(JTt,"TFMPNetForMultipleChoice"),JTt.forEach(t),q0r=r(hRe," (MPNet model)"),hRe.forEach(t),N0r=i(_e),j4=n(_e,"LI",{});var pRe=s(j4);rFe=n(pRe,"STRONG",{});var YTt=s(rFe);j0r=r(YTt,"rembert"),YTt.forEach(t),D0r=r(pRe," \u2014 "),EH=n(pRe,"A",{href:!0});var KTt=s(EH);G0r=r(KTt,"TFRemBertForMultipleChoice"),KTt.forEach(t),O0r=r(pRe," (RemBERT model)"),pRe.forEach(t),V0r=i(_e),D4=n(_e,"LI",{});var uRe=s(D4);tFe=n(uRe,"STRONG",{});var ZTt=s(tFe);X0r=r(ZTt,"roberta"),ZTt.forEach(t),z0r=r(uRe," \u2014 "),CH=n(uRe,"A",{href:!0});var e7t=s(CH);Q0r=r(e7t,"TFRobertaForMultipleChoice"),e7t.forEach(t),W0r=r(uRe," (RoBERTa model)"),uRe.forEach(t),H0r=i(_e),G4=n(_e,"LI",{});var _Re=s(G4);aFe=n(_Re,"STRONG",{});var o7t=s(aFe);U0r=r(o7t,"roformer"),o7t.forEach(t),J0r=r(_Re," \u2014 "),wH=n(_Re,"A",{href:!0});var r7t=s(wH);Y0r=r(r7t,"TFRoFormerForMultipleChoice"),r7t.forEach(t),K0r=r(_Re," (RoFormer model)"),_Re.forEach(t),Z0r=i(_e),O4=n(_e,"LI",{});var bRe=s(O4);nFe=n(bRe,"STRONG",{});var t7t=s(nFe);eTr=r(t7t,"xlm"),t7t.forEach(t),oTr=r(bRe," \u2014 "),AH=n(bRe,"A",{href:!0});var a7t=s(AH);rTr=r(a7t,"TFXLMForMultipleChoice"),a7t.forEach(t),tTr=r(bRe," (XLM model)"),bRe.forEach(t),aTr=i(_e),V4=n(_e,"LI",{});var vRe=s(V4);sFe=n(vRe,"STRONG",{});var n7t=s(sFe);nTr=r(n7t,"xlm-roberta"),n7t.forEach(t),sTr=r(vRe," \u2014 "),yH=n(vRe,"A",{href:!0});var s7t=s(yH);lTr=r(s7t,"TFXLMRobertaForMultipleChoice"),s7t.forEach(t),iTr=r(vRe," (XLM-RoBERTa model)"),vRe.forEach(t),dTr=i(_e),X4=n(_e,"LI",{});var FRe=s(X4);lFe=n(FRe,"STRONG",{});var l7t=s(lFe);cTr=r(l7t,"xlnet"),l7t.forEach(t),fTr=r(FRe," \u2014 "),LH=n(FRe,"A",{href:!0});var i7t=s(LH);mTr=r(i7t,"TFXLNetForMultipleChoice"),i7t.forEach(t),gTr=r(FRe," (XLNet model)"),FRe.forEach(t),_e.forEach(t),hTr=i(Cl),T(z4.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),$qe=i(f),ic=n(f,"H2",{class:!0});var Ije=s(ic);Q4=n(Ije,"A",{id:!0,class:!0,href:!0});var d7t=s(Q4);iFe=n(d7t,"SPAN",{});var c7t=s(iFe);T(E8.$$.fragment,c7t),c7t.forEach(t),d7t.forEach(t),pTr=i(Ije),dFe=n(Ije,"SPAN",{});var f7t=s(dFe);uTr=r(f7t,"TFAutoModelForNextSentencePrediction"),f7t.forEach(t),Ije.forEach(t),kqe=i(f),nr=n(f,"DIV",{class:!0});var wl=s(nr);T(C8.$$.fragment,wl),_Tr=i(wl),dc=n(wl,"P",{});var LZ=s(dc);bTr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xH=n(LZ,"A",{href:!0});var m7t=s(xH);vTr=r(m7t,"from_pretrained()"),m7t.forEach(t),FTr=r(LZ," class method or the "),$H=n(LZ,"A",{href:!0});var g7t=s($H);TTr=r(g7t,"from_config()"),g7t.forEach(t),MTr=r(LZ,` class
method.`),LZ.forEach(t),ETr=i(wl),w8=n(wl,"P",{});var qje=s(w8);CTr=r(qje,"This class cannot be instantiated directly using "),cFe=n(qje,"CODE",{});var h7t=s(cFe);wTr=r(h7t,"__init__()"),h7t.forEach(t),ATr=r(qje," (throws an error)."),qje.forEach(t),yTr=i(wl),Rt=n(wl,"DIV",{class:!0});var uA=s(Rt);T(A8.$$.fragment,uA),LTr=i(uA),fFe=n(uA,"P",{});var p7t=s(fFe);xTr=r(p7t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),p7t.forEach(t),$Tr=i(uA),cc=n(uA,"P",{});var xZ=s(cc);kTr=r(xZ,`Note:
Loading a model from its configuration file does `),mFe=n(xZ,"STRONG",{});var u7t=s(mFe);STr=r(u7t,"not"),u7t.forEach(t),RTr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=n(xZ,"A",{href:!0});var _7t=s(kH);BTr=r(_7t,"from_pretrained()"),_7t.forEach(t),PTr=r(xZ," to load the model weights."),xZ.forEach(t),ITr=i(uA),T(W4.$$.fragment,uA),uA.forEach(t),qTr=i(wl),Rr=n(wl,"DIV",{class:!0});var Al=s(Rr);T(y8.$$.fragment,Al),NTr=i(Al),gFe=n(Al,"P",{});var b7t=s(gFe);jTr=r(b7t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),b7t.forEach(t),DTr=i(Al),sn=n(Al,"P",{});var _A=s(sn);GTr=r(_A,"The model class to instantiate is selected based on the "),hFe=n(_A,"CODE",{});var v7t=s(hFe);OTr=r(v7t,"model_type"),v7t.forEach(t),VTr=r(_A,` property of the config object (either
passed as an argument or loaded from `),pFe=n(_A,"CODE",{});var F7t=s(pFe);XTr=r(F7t,"pretrained_model_name_or_path"),F7t.forEach(t),zTr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=n(_A,"CODE",{});var T7t=s(uFe);QTr=r(T7t,"pretrained_model_name_or_path"),T7t.forEach(t),WTr=r(_A,":"),_A.forEach(t),HTr=i(Al),L8=n(Al,"UL",{});var Nje=s(L8);H4=n(Nje,"LI",{});var TRe=s(H4);_Fe=n(TRe,"STRONG",{});var M7t=s(_Fe);UTr=r(M7t,"bert"),M7t.forEach(t),JTr=r(TRe," \u2014 "),SH=n(TRe,"A",{href:!0});var E7t=s(SH);YTr=r(E7t,"TFBertForNextSentencePrediction"),E7t.forEach(t),KTr=r(TRe," (BERT model)"),TRe.forEach(t),ZTr=i(Nje),U4=n(Nje,"LI",{});var MRe=s(U4);bFe=n(MRe,"STRONG",{});var C7t=s(bFe);e7r=r(C7t,"mobilebert"),C7t.forEach(t),o7r=r(MRe," \u2014 "),RH=n(MRe,"A",{href:!0});var w7t=s(RH);r7r=r(w7t,"TFMobileBertForNextSentencePrediction"),w7t.forEach(t),t7r=r(MRe," (MobileBERT model)"),MRe.forEach(t),Nje.forEach(t),a7r=i(Al),T(J4.$$.fragment,Al),Al.forEach(t),wl.forEach(t),Sqe=i(f),fc=n(f,"H2",{class:!0});var jje=s(fc);Y4=n(jje,"A",{id:!0,class:!0,href:!0});var A7t=s(Y4);vFe=n(A7t,"SPAN",{});var y7t=s(vFe);T(x8.$$.fragment,y7t),y7t.forEach(t),A7t.forEach(t),n7r=i(jje),FFe=n(jje,"SPAN",{});var L7t=s(FFe);s7r=r(L7t,"TFAutoModelForTableQuestionAnswering"),L7t.forEach(t),jje.forEach(t),Rqe=i(f),sr=n(f,"DIV",{class:!0});var yl=s(sr);T($8.$$.fragment,yl),l7r=i(yl),mc=n(yl,"P",{});var $Z=s(mc);i7r=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BH=n($Z,"A",{href:!0});var x7t=s(BH);d7r=r(x7t,"from_pretrained()"),x7t.forEach(t),c7r=r($Z," class method or the "),PH=n($Z,"A",{href:!0});var $7t=s(PH);f7r=r($7t,"from_config()"),$7t.forEach(t),m7r=r($Z,` class
method.`),$Z.forEach(t),g7r=i(yl),k8=n(yl,"P",{});var Dje=s(k8);h7r=r(Dje,"This class cannot be instantiated directly using "),TFe=n(Dje,"CODE",{});var k7t=s(TFe);p7r=r(k7t,"__init__()"),k7t.forEach(t),u7r=r(Dje," (throws an error)."),Dje.forEach(t),_7r=i(yl),Bt=n(yl,"DIV",{class:!0});var bA=s(Bt);T(S8.$$.fragment,bA),b7r=i(bA),MFe=n(bA,"P",{});var S7t=s(MFe);v7r=r(S7t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),S7t.forEach(t),F7r=i(bA),gc=n(bA,"P",{});var kZ=s(gc);T7r=r(kZ,`Note:
Loading a model from its configuration file does `),EFe=n(kZ,"STRONG",{});var R7t=s(EFe);M7r=r(R7t,"not"),R7t.forEach(t),E7r=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(kZ,"A",{href:!0});var B7t=s(IH);C7r=r(B7t,"from_pretrained()"),B7t.forEach(t),w7r=r(kZ," to load the model weights."),kZ.forEach(t),A7r=i(bA),T(K4.$$.fragment,bA),bA.forEach(t),y7r=i(yl),Br=n(yl,"DIV",{class:!0});var Ll=s(Br);T(R8.$$.fragment,Ll),L7r=i(Ll),CFe=n(Ll,"P",{});var P7t=s(CFe);x7r=r(P7t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),P7t.forEach(t),$7r=i(Ll),ln=n(Ll,"P",{});var vA=s(ln);k7r=r(vA,"The model class to instantiate is selected based on the "),wFe=n(vA,"CODE",{});var I7t=s(wFe);S7r=r(I7t,"model_type"),I7t.forEach(t),R7r=r(vA,` property of the config object (either
passed as an argument or loaded from `),AFe=n(vA,"CODE",{});var q7t=s(AFe);B7r=r(q7t,"pretrained_model_name_or_path"),q7t.forEach(t),P7r=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=n(vA,"CODE",{});var N7t=s(yFe);I7r=r(N7t,"pretrained_model_name_or_path"),N7t.forEach(t),q7r=r(vA,":"),vA.forEach(t),N7r=i(Ll),LFe=n(Ll,"UL",{});var j7t=s(LFe);Z4=n(j7t,"LI",{});var ERe=s(Z4);xFe=n(ERe,"STRONG",{});var D7t=s(xFe);j7r=r(D7t,"tapas"),D7t.forEach(t),D7r=r(ERe," \u2014 "),qH=n(ERe,"A",{href:!0});var G7t=s(qH);G7r=r(G7t,"TFTapasForQuestionAnswering"),G7t.forEach(t),O7r=r(ERe," (TAPAS model)"),ERe.forEach(t),j7t.forEach(t),V7r=i(Ll),T(eE.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),Bqe=i(f),hc=n(f,"H2",{class:!0});var Gje=s(hc);oE=n(Gje,"A",{id:!0,class:!0,href:!0});var O7t=s(oE);$Fe=n(O7t,"SPAN",{});var V7t=s($Fe);T(B8.$$.fragment,V7t),V7t.forEach(t),O7t.forEach(t),X7r=i(Gje),kFe=n(Gje,"SPAN",{});var X7t=s(kFe);z7r=r(X7t,"TFAutoModelForTokenClassification"),X7t.forEach(t),Gje.forEach(t),Pqe=i(f),lr=n(f,"DIV",{class:!0});var xl=s(lr);T(P8.$$.fragment,xl),Q7r=i(xl),pc=n(xl,"P",{});var SZ=s(pc);W7r=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NH=n(SZ,"A",{href:!0});var z7t=s(NH);H7r=r(z7t,"from_pretrained()"),z7t.forEach(t),U7r=r(SZ," class method or the "),jH=n(SZ,"A",{href:!0});var Q7t=s(jH);J7r=r(Q7t,"from_config()"),Q7t.forEach(t),Y7r=r(SZ,` class
method.`),SZ.forEach(t),K7r=i(xl),I8=n(xl,"P",{});var Oje=s(I8);Z7r=r(Oje,"This class cannot be instantiated directly using "),SFe=n(Oje,"CODE",{});var W7t=s(SFe);eMr=r(W7t,"__init__()"),W7t.forEach(t),oMr=r(Oje," (throws an error)."),Oje.forEach(t),rMr=i(xl),Pt=n(xl,"DIV",{class:!0});var FA=s(Pt);T(q8.$$.fragment,FA),tMr=i(FA),RFe=n(FA,"P",{});var H7t=s(RFe);aMr=r(H7t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),H7t.forEach(t),nMr=i(FA),uc=n(FA,"P",{});var RZ=s(uc);sMr=r(RZ,`Note:
Loading a model from its configuration file does `),BFe=n(RZ,"STRONG",{});var U7t=s(BFe);lMr=r(U7t,"not"),U7t.forEach(t),iMr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(RZ,"A",{href:!0});var J7t=s(DH);dMr=r(J7t,"from_pretrained()"),J7t.forEach(t),cMr=r(RZ," to load the model weights."),RZ.forEach(t),fMr=i(FA),T(rE.$$.fragment,FA),FA.forEach(t),mMr=i(xl),Pr=n(xl,"DIV",{class:!0});var $l=s(Pr);T(N8.$$.fragment,$l),gMr=i($l),PFe=n($l,"P",{});var Y7t=s(PFe);hMr=r(Y7t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Y7t.forEach(t),pMr=i($l),dn=n($l,"P",{});var TA=s(dn);uMr=r(TA,"The model class to instantiate is selected based on the "),IFe=n(TA,"CODE",{});var K7t=s(IFe);_Mr=r(K7t,"model_type"),K7t.forEach(t),bMr=r(TA,` property of the config object (either
passed as an argument or loaded from `),qFe=n(TA,"CODE",{});var Z7t=s(qFe);vMr=r(Z7t,"pretrained_model_name_or_path"),Z7t.forEach(t),FMr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=n(TA,"CODE",{});var eMt=s(NFe);TMr=r(eMt,"pretrained_model_name_or_path"),eMt.forEach(t),MMr=r(TA,":"),TA.forEach(t),EMr=i($l),de=n($l,"UL",{});var me=s(de);tE=n(me,"LI",{});var CRe=s(tE);jFe=n(CRe,"STRONG",{});var oMt=s(jFe);CMr=r(oMt,"albert"),oMt.forEach(t),wMr=r(CRe," \u2014 "),GH=n(CRe,"A",{href:!0});var rMt=s(GH);AMr=r(rMt,"TFAlbertForTokenClassification"),rMt.forEach(t),yMr=r(CRe," (ALBERT model)"),CRe.forEach(t),LMr=i(me),aE=n(me,"LI",{});var wRe=s(aE);DFe=n(wRe,"STRONG",{});var tMt=s(DFe);xMr=r(tMt,"bert"),tMt.forEach(t),$Mr=r(wRe," \u2014 "),OH=n(wRe,"A",{href:!0});var aMt=s(OH);kMr=r(aMt,"TFBertForTokenClassification"),aMt.forEach(t),SMr=r(wRe," (BERT model)"),wRe.forEach(t),RMr=i(me),nE=n(me,"LI",{});var ARe=s(nE);GFe=n(ARe,"STRONG",{});var nMt=s(GFe);BMr=r(nMt,"camembert"),nMt.forEach(t),PMr=r(ARe," \u2014 "),VH=n(ARe,"A",{href:!0});var sMt=s(VH);IMr=r(sMt,"TFCamembertForTokenClassification"),sMt.forEach(t),qMr=r(ARe," (CamemBERT model)"),ARe.forEach(t),NMr=i(me),sE=n(me,"LI",{});var yRe=s(sE);OFe=n(yRe,"STRONG",{});var lMt=s(OFe);jMr=r(lMt,"convbert"),lMt.forEach(t),DMr=r(yRe," \u2014 "),XH=n(yRe,"A",{href:!0});var iMt=s(XH);GMr=r(iMt,"TFConvBertForTokenClassification"),iMt.forEach(t),OMr=r(yRe," (ConvBERT model)"),yRe.forEach(t),VMr=i(me),lE=n(me,"LI",{});var LRe=s(lE);VFe=n(LRe,"STRONG",{});var dMt=s(VFe);XMr=r(dMt,"deberta"),dMt.forEach(t),zMr=r(LRe," \u2014 "),zH=n(LRe,"A",{href:!0});var cMt=s(zH);QMr=r(cMt,"TFDebertaForTokenClassification"),cMt.forEach(t),WMr=r(LRe," (DeBERTa model)"),LRe.forEach(t),HMr=i(me),iE=n(me,"LI",{});var xRe=s(iE);XFe=n(xRe,"STRONG",{});var fMt=s(XFe);UMr=r(fMt,"deberta-v2"),fMt.forEach(t),JMr=r(xRe," \u2014 "),QH=n(xRe,"A",{href:!0});var mMt=s(QH);YMr=r(mMt,"TFDebertaV2ForTokenClassification"),mMt.forEach(t),KMr=r(xRe," (DeBERTa-v2 model)"),xRe.forEach(t),ZMr=i(me),dE=n(me,"LI",{});var $Re=s(dE);zFe=n($Re,"STRONG",{});var gMt=s(zFe);e4r=r(gMt,"distilbert"),gMt.forEach(t),o4r=r($Re," \u2014 "),WH=n($Re,"A",{href:!0});var hMt=s(WH);r4r=r(hMt,"TFDistilBertForTokenClassification"),hMt.forEach(t),t4r=r($Re," (DistilBERT model)"),$Re.forEach(t),a4r=i(me),cE=n(me,"LI",{});var kRe=s(cE);QFe=n(kRe,"STRONG",{});var pMt=s(QFe);n4r=r(pMt,"electra"),pMt.forEach(t),s4r=r(kRe," \u2014 "),HH=n(kRe,"A",{href:!0});var uMt=s(HH);l4r=r(uMt,"TFElectraForTokenClassification"),uMt.forEach(t),i4r=r(kRe," (ELECTRA model)"),kRe.forEach(t),d4r=i(me),fE=n(me,"LI",{});var SRe=s(fE);WFe=n(SRe,"STRONG",{});var _Mt=s(WFe);c4r=r(_Mt,"flaubert"),_Mt.forEach(t),f4r=r(SRe," \u2014 "),UH=n(SRe,"A",{href:!0});var bMt=s(UH);m4r=r(bMt,"TFFlaubertForTokenClassification"),bMt.forEach(t),g4r=r(SRe," (FlauBERT model)"),SRe.forEach(t),h4r=i(me),mE=n(me,"LI",{});var RRe=s(mE);HFe=n(RRe,"STRONG",{});var vMt=s(HFe);p4r=r(vMt,"funnel"),vMt.forEach(t),u4r=r(RRe," \u2014 "),JH=n(RRe,"A",{href:!0});var FMt=s(JH);_4r=r(FMt,"TFFunnelForTokenClassification"),FMt.forEach(t),b4r=r(RRe," (Funnel Transformer model)"),RRe.forEach(t),v4r=i(me),gE=n(me,"LI",{});var BRe=s(gE);UFe=n(BRe,"STRONG",{});var TMt=s(UFe);F4r=r(TMt,"layoutlm"),TMt.forEach(t),T4r=r(BRe," \u2014 "),YH=n(BRe,"A",{href:!0});var MMt=s(YH);M4r=r(MMt,"TFLayoutLMForTokenClassification"),MMt.forEach(t),E4r=r(BRe," (LayoutLM model)"),BRe.forEach(t),C4r=i(me),hE=n(me,"LI",{});var PRe=s(hE);JFe=n(PRe,"STRONG",{});var EMt=s(JFe);w4r=r(EMt,"longformer"),EMt.forEach(t),A4r=r(PRe," \u2014 "),KH=n(PRe,"A",{href:!0});var CMt=s(KH);y4r=r(CMt,"TFLongformerForTokenClassification"),CMt.forEach(t),L4r=r(PRe," (Longformer model)"),PRe.forEach(t),x4r=i(me),pE=n(me,"LI",{});var IRe=s(pE);YFe=n(IRe,"STRONG",{});var wMt=s(YFe);$4r=r(wMt,"mobilebert"),wMt.forEach(t),k4r=r(IRe," \u2014 "),ZH=n(IRe,"A",{href:!0});var AMt=s(ZH);S4r=r(AMt,"TFMobileBertForTokenClassification"),AMt.forEach(t),R4r=r(IRe," (MobileBERT model)"),IRe.forEach(t),B4r=i(me),uE=n(me,"LI",{});var qRe=s(uE);KFe=n(qRe,"STRONG",{});var yMt=s(KFe);P4r=r(yMt,"mpnet"),yMt.forEach(t),I4r=r(qRe," \u2014 "),eU=n(qRe,"A",{href:!0});var LMt=s(eU);q4r=r(LMt,"TFMPNetForTokenClassification"),LMt.forEach(t),N4r=r(qRe," (MPNet model)"),qRe.forEach(t),j4r=i(me),_E=n(me,"LI",{});var NRe=s(_E);ZFe=n(NRe,"STRONG",{});var xMt=s(ZFe);D4r=r(xMt,"rembert"),xMt.forEach(t),G4r=r(NRe," \u2014 "),oU=n(NRe,"A",{href:!0});var $Mt=s(oU);O4r=r($Mt,"TFRemBertForTokenClassification"),$Mt.forEach(t),V4r=r(NRe," (RemBERT model)"),NRe.forEach(t),X4r=i(me),bE=n(me,"LI",{});var jRe=s(bE);e0e=n(jRe,"STRONG",{});var kMt=s(e0e);z4r=r(kMt,"roberta"),kMt.forEach(t),Q4r=r(jRe," \u2014 "),rU=n(jRe,"A",{href:!0});var SMt=s(rU);W4r=r(SMt,"TFRobertaForTokenClassification"),SMt.forEach(t),H4r=r(jRe," (RoBERTa model)"),jRe.forEach(t),U4r=i(me),vE=n(me,"LI",{});var DRe=s(vE);o0e=n(DRe,"STRONG",{});var RMt=s(o0e);J4r=r(RMt,"roformer"),RMt.forEach(t),Y4r=r(DRe," \u2014 "),tU=n(DRe,"A",{href:!0});var BMt=s(tU);K4r=r(BMt,"TFRoFormerForTokenClassification"),BMt.forEach(t),Z4r=r(DRe," (RoFormer model)"),DRe.forEach(t),eEr=i(me),FE=n(me,"LI",{});var GRe=s(FE);r0e=n(GRe,"STRONG",{});var PMt=s(r0e);oEr=r(PMt,"xlm"),PMt.forEach(t),rEr=r(GRe," \u2014 "),aU=n(GRe,"A",{href:!0});var IMt=s(aU);tEr=r(IMt,"TFXLMForTokenClassification"),IMt.forEach(t),aEr=r(GRe," (XLM model)"),GRe.forEach(t),nEr=i(me),TE=n(me,"LI",{});var ORe=s(TE);t0e=n(ORe,"STRONG",{});var qMt=s(t0e);sEr=r(qMt,"xlm-roberta"),qMt.forEach(t),lEr=r(ORe," \u2014 "),nU=n(ORe,"A",{href:!0});var NMt=s(nU);iEr=r(NMt,"TFXLMRobertaForTokenClassification"),NMt.forEach(t),dEr=r(ORe," (XLM-RoBERTa model)"),ORe.forEach(t),cEr=i(me),ME=n(me,"LI",{});var VRe=s(ME);a0e=n(VRe,"STRONG",{});var jMt=s(a0e);fEr=r(jMt,"xlnet"),jMt.forEach(t),mEr=r(VRe," \u2014 "),sU=n(VRe,"A",{href:!0});var DMt=s(sU);gEr=r(DMt,"TFXLNetForTokenClassification"),DMt.forEach(t),hEr=r(VRe," (XLNet model)"),VRe.forEach(t),me.forEach(t),pEr=i($l),T(EE.$$.fragment,$l),$l.forEach(t),xl.forEach(t),Iqe=i(f),_c=n(f,"H2",{class:!0});var Vje=s(_c);CE=n(Vje,"A",{id:!0,class:!0,href:!0});var GMt=s(CE);n0e=n(GMt,"SPAN",{});var OMt=s(n0e);T(j8.$$.fragment,OMt),OMt.forEach(t),GMt.forEach(t),uEr=i(Vje),s0e=n(Vje,"SPAN",{});var VMt=s(s0e);_Er=r(VMt,"TFAutoModelForQuestionAnswering"),VMt.forEach(t),Vje.forEach(t),qqe=i(f),ir=n(f,"DIV",{class:!0});var kl=s(ir);T(D8.$$.fragment,kl),bEr=i(kl),bc=n(kl,"P",{});var BZ=s(bc);vEr=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),lU=n(BZ,"A",{href:!0});var XMt=s(lU);FEr=r(XMt,"from_pretrained()"),XMt.forEach(t),TEr=r(BZ," class method or the "),iU=n(BZ,"A",{href:!0});var zMt=s(iU);MEr=r(zMt,"from_config()"),zMt.forEach(t),EEr=r(BZ,` class
method.`),BZ.forEach(t),CEr=i(kl),G8=n(kl,"P",{});var Xje=s(G8);wEr=r(Xje,"This class cannot be instantiated directly using "),l0e=n(Xje,"CODE",{});var QMt=s(l0e);AEr=r(QMt,"__init__()"),QMt.forEach(t),yEr=r(Xje," (throws an error)."),Xje.forEach(t),LEr=i(kl),It=n(kl,"DIV",{class:!0});var MA=s(It);T(O8.$$.fragment,MA),xEr=i(MA),i0e=n(MA,"P",{});var WMt=s(i0e);$Er=r(WMt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),WMt.forEach(t),kEr=i(MA),vc=n(MA,"P",{});var PZ=s(vc);SEr=r(PZ,`Note:
Loading a model from its configuration file does `),d0e=n(PZ,"STRONG",{});var HMt=s(d0e);REr=r(HMt,"not"),HMt.forEach(t),BEr=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(PZ,"A",{href:!0});var UMt=s(dU);PEr=r(UMt,"from_pretrained()"),UMt.forEach(t),IEr=r(PZ," to load the model weights."),PZ.forEach(t),qEr=i(MA),T(wE.$$.fragment,MA),MA.forEach(t),NEr=i(kl),Ir=n(kl,"DIV",{class:!0});var Sl=s(Ir);T(V8.$$.fragment,Sl),jEr=i(Sl),c0e=n(Sl,"P",{});var JMt=s(c0e);DEr=r(JMt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),JMt.forEach(t),GEr=i(Sl),cn=n(Sl,"P",{});var EA=s(cn);OEr=r(EA,"The model class to instantiate is selected based on the "),f0e=n(EA,"CODE",{});var YMt=s(f0e);VEr=r(YMt,"model_type"),YMt.forEach(t),XEr=r(EA,` property of the config object (either
passed as an argument or loaded from `),m0e=n(EA,"CODE",{});var KMt=s(m0e);zEr=r(KMt,"pretrained_model_name_or_path"),KMt.forEach(t),QEr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g0e=n(EA,"CODE",{});var ZMt=s(g0e);WEr=r(ZMt,"pretrained_model_name_or_path"),ZMt.forEach(t),HEr=r(EA,":"),EA.forEach(t),UEr=i(Sl),ce=n(Sl,"UL",{});var ge=s(ce);AE=n(ge,"LI",{});var XRe=s(AE);h0e=n(XRe,"STRONG",{});var e4t=s(h0e);JEr=r(e4t,"albert"),e4t.forEach(t),YEr=r(XRe," \u2014 "),cU=n(XRe,"A",{href:!0});var o4t=s(cU);KEr=r(o4t,"TFAlbertForQuestionAnswering"),o4t.forEach(t),ZEr=r(XRe," (ALBERT model)"),XRe.forEach(t),e5r=i(ge),yE=n(ge,"LI",{});var zRe=s(yE);p0e=n(zRe,"STRONG",{});var r4t=s(p0e);o5r=r(r4t,"bert"),r4t.forEach(t),r5r=r(zRe," \u2014 "),fU=n(zRe,"A",{href:!0});var t4t=s(fU);t5r=r(t4t,"TFBertForQuestionAnswering"),t4t.forEach(t),a5r=r(zRe," (BERT model)"),zRe.forEach(t),n5r=i(ge),LE=n(ge,"LI",{});var QRe=s(LE);u0e=n(QRe,"STRONG",{});var a4t=s(u0e);s5r=r(a4t,"camembert"),a4t.forEach(t),l5r=r(QRe," \u2014 "),mU=n(QRe,"A",{href:!0});var n4t=s(mU);i5r=r(n4t,"TFCamembertForQuestionAnswering"),n4t.forEach(t),d5r=r(QRe," (CamemBERT model)"),QRe.forEach(t),c5r=i(ge),xE=n(ge,"LI",{});var WRe=s(xE);_0e=n(WRe,"STRONG",{});var s4t=s(_0e);f5r=r(s4t,"convbert"),s4t.forEach(t),m5r=r(WRe," \u2014 "),gU=n(WRe,"A",{href:!0});var l4t=s(gU);g5r=r(l4t,"TFConvBertForQuestionAnswering"),l4t.forEach(t),h5r=r(WRe," (ConvBERT model)"),WRe.forEach(t),p5r=i(ge),$E=n(ge,"LI",{});var HRe=s($E);b0e=n(HRe,"STRONG",{});var i4t=s(b0e);u5r=r(i4t,"deberta"),i4t.forEach(t),_5r=r(HRe," \u2014 "),hU=n(HRe,"A",{href:!0});var d4t=s(hU);b5r=r(d4t,"TFDebertaForQuestionAnswering"),d4t.forEach(t),v5r=r(HRe," (DeBERTa model)"),HRe.forEach(t),F5r=i(ge),kE=n(ge,"LI",{});var URe=s(kE);v0e=n(URe,"STRONG",{});var c4t=s(v0e);T5r=r(c4t,"deberta-v2"),c4t.forEach(t),M5r=r(URe," \u2014 "),pU=n(URe,"A",{href:!0});var f4t=s(pU);E5r=r(f4t,"TFDebertaV2ForQuestionAnswering"),f4t.forEach(t),C5r=r(URe," (DeBERTa-v2 model)"),URe.forEach(t),w5r=i(ge),SE=n(ge,"LI",{});var JRe=s(SE);F0e=n(JRe,"STRONG",{});var m4t=s(F0e);A5r=r(m4t,"distilbert"),m4t.forEach(t),y5r=r(JRe," \u2014 "),uU=n(JRe,"A",{href:!0});var g4t=s(uU);L5r=r(g4t,"TFDistilBertForQuestionAnswering"),g4t.forEach(t),x5r=r(JRe," (DistilBERT model)"),JRe.forEach(t),$5r=i(ge),RE=n(ge,"LI",{});var YRe=s(RE);T0e=n(YRe,"STRONG",{});var h4t=s(T0e);k5r=r(h4t,"electra"),h4t.forEach(t),S5r=r(YRe," \u2014 "),_U=n(YRe,"A",{href:!0});var p4t=s(_U);R5r=r(p4t,"TFElectraForQuestionAnswering"),p4t.forEach(t),B5r=r(YRe," (ELECTRA model)"),YRe.forEach(t),P5r=i(ge),BE=n(ge,"LI",{});var KRe=s(BE);M0e=n(KRe,"STRONG",{});var u4t=s(M0e);I5r=r(u4t,"flaubert"),u4t.forEach(t),q5r=r(KRe," \u2014 "),bU=n(KRe,"A",{href:!0});var _4t=s(bU);N5r=r(_4t,"TFFlaubertForQuestionAnsweringSimple"),_4t.forEach(t),j5r=r(KRe," (FlauBERT model)"),KRe.forEach(t),D5r=i(ge),PE=n(ge,"LI",{});var ZRe=s(PE);E0e=n(ZRe,"STRONG",{});var b4t=s(E0e);G5r=r(b4t,"funnel"),b4t.forEach(t),O5r=r(ZRe," \u2014 "),vU=n(ZRe,"A",{href:!0});var v4t=s(vU);V5r=r(v4t,"TFFunnelForQuestionAnswering"),v4t.forEach(t),X5r=r(ZRe," (Funnel Transformer model)"),ZRe.forEach(t),z5r=i(ge),IE=n(ge,"LI",{});var eBe=s(IE);C0e=n(eBe,"STRONG",{});var F4t=s(C0e);Q5r=r(F4t,"gptj"),F4t.forEach(t),W5r=r(eBe," \u2014 "),FU=n(eBe,"A",{href:!0});var T4t=s(FU);H5r=r(T4t,"TFGPTJForQuestionAnswering"),T4t.forEach(t),U5r=r(eBe," (GPT-J model)"),eBe.forEach(t),J5r=i(ge),qE=n(ge,"LI",{});var oBe=s(qE);w0e=n(oBe,"STRONG",{});var M4t=s(w0e);Y5r=r(M4t,"longformer"),M4t.forEach(t),K5r=r(oBe," \u2014 "),TU=n(oBe,"A",{href:!0});var E4t=s(TU);Z5r=r(E4t,"TFLongformerForQuestionAnswering"),E4t.forEach(t),eCr=r(oBe," (Longformer model)"),oBe.forEach(t),oCr=i(ge),NE=n(ge,"LI",{});var rBe=s(NE);A0e=n(rBe,"STRONG",{});var C4t=s(A0e);rCr=r(C4t,"mobilebert"),C4t.forEach(t),tCr=r(rBe," \u2014 "),MU=n(rBe,"A",{href:!0});var w4t=s(MU);aCr=r(w4t,"TFMobileBertForQuestionAnswering"),w4t.forEach(t),nCr=r(rBe," (MobileBERT model)"),rBe.forEach(t),sCr=i(ge),jE=n(ge,"LI",{});var tBe=s(jE);y0e=n(tBe,"STRONG",{});var A4t=s(y0e);lCr=r(A4t,"mpnet"),A4t.forEach(t),iCr=r(tBe," \u2014 "),EU=n(tBe,"A",{href:!0});var y4t=s(EU);dCr=r(y4t,"TFMPNetForQuestionAnswering"),y4t.forEach(t),cCr=r(tBe," (MPNet model)"),tBe.forEach(t),fCr=i(ge),DE=n(ge,"LI",{});var aBe=s(DE);L0e=n(aBe,"STRONG",{});var L4t=s(L0e);mCr=r(L4t,"rembert"),L4t.forEach(t),gCr=r(aBe," \u2014 "),CU=n(aBe,"A",{href:!0});var x4t=s(CU);hCr=r(x4t,"TFRemBertForQuestionAnswering"),x4t.forEach(t),pCr=r(aBe," (RemBERT model)"),aBe.forEach(t),uCr=i(ge),GE=n(ge,"LI",{});var nBe=s(GE);x0e=n(nBe,"STRONG",{});var $4t=s(x0e);_Cr=r($4t,"roberta"),$4t.forEach(t),bCr=r(nBe," \u2014 "),wU=n(nBe,"A",{href:!0});var k4t=s(wU);vCr=r(k4t,"TFRobertaForQuestionAnswering"),k4t.forEach(t),FCr=r(nBe," (RoBERTa model)"),nBe.forEach(t),TCr=i(ge),OE=n(ge,"LI",{});var sBe=s(OE);$0e=n(sBe,"STRONG",{});var S4t=s($0e);MCr=r(S4t,"roformer"),S4t.forEach(t),ECr=r(sBe," \u2014 "),AU=n(sBe,"A",{href:!0});var R4t=s(AU);CCr=r(R4t,"TFRoFormerForQuestionAnswering"),R4t.forEach(t),wCr=r(sBe," (RoFormer model)"),sBe.forEach(t),ACr=i(ge),VE=n(ge,"LI",{});var lBe=s(VE);k0e=n(lBe,"STRONG",{});var B4t=s(k0e);yCr=r(B4t,"xlm"),B4t.forEach(t),LCr=r(lBe," \u2014 "),yU=n(lBe,"A",{href:!0});var P4t=s(yU);xCr=r(P4t,"TFXLMForQuestionAnsweringSimple"),P4t.forEach(t),$Cr=r(lBe," (XLM model)"),lBe.forEach(t),kCr=i(ge),XE=n(ge,"LI",{});var iBe=s(XE);S0e=n(iBe,"STRONG",{});var I4t=s(S0e);SCr=r(I4t,"xlm-roberta"),I4t.forEach(t),RCr=r(iBe," \u2014 "),LU=n(iBe,"A",{href:!0});var q4t=s(LU);BCr=r(q4t,"TFXLMRobertaForQuestionAnswering"),q4t.forEach(t),PCr=r(iBe," (XLM-RoBERTa model)"),iBe.forEach(t),ICr=i(ge),zE=n(ge,"LI",{});var dBe=s(zE);R0e=n(dBe,"STRONG",{});var N4t=s(R0e);qCr=r(N4t,"xlnet"),N4t.forEach(t),NCr=r(dBe," \u2014 "),xU=n(dBe,"A",{href:!0});var j4t=s(xU);jCr=r(j4t,"TFXLNetForQuestionAnsweringSimple"),j4t.forEach(t),DCr=r(dBe," (XLNet model)"),dBe.forEach(t),ge.forEach(t),GCr=i(Sl),T(QE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),Nqe=i(f),Fc=n(f,"H2",{class:!0});var zje=s(Fc);WE=n(zje,"A",{id:!0,class:!0,href:!0});var D4t=s(WE);B0e=n(D4t,"SPAN",{});var G4t=s(B0e);T(X8.$$.fragment,G4t),G4t.forEach(t),D4t.forEach(t),OCr=i(zje),P0e=n(zje,"SPAN",{});var O4t=s(P0e);VCr=r(O4t,"TFAutoModelForVision2Seq"),O4t.forEach(t),zje.forEach(t),jqe=i(f),dr=n(f,"DIV",{class:!0});var Rl=s(dr);T(z8.$$.fragment,Rl),XCr=i(Rl),Tc=n(Rl,"P",{});var IZ=s(Tc);zCr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$U=n(IZ,"A",{href:!0});var V4t=s($U);QCr=r(V4t,"from_pretrained()"),V4t.forEach(t),WCr=r(IZ," class method or the "),kU=n(IZ,"A",{href:!0});var X4t=s(kU);HCr=r(X4t,"from_config()"),X4t.forEach(t),UCr=r(IZ,` class
method.`),IZ.forEach(t),JCr=i(Rl),Q8=n(Rl,"P",{});var Qje=s(Q8);YCr=r(Qje,"This class cannot be instantiated directly using "),I0e=n(Qje,"CODE",{});var z4t=s(I0e);KCr=r(z4t,"__init__()"),z4t.forEach(t),ZCr=r(Qje," (throws an error)."),Qje.forEach(t),e3r=i(Rl),qt=n(Rl,"DIV",{class:!0});var CA=s(qt);T(W8.$$.fragment,CA),o3r=i(CA),q0e=n(CA,"P",{});var Q4t=s(q0e);r3r=r(Q4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Q4t.forEach(t),t3r=i(CA),Mc=n(CA,"P",{});var qZ=s(Mc);a3r=r(qZ,`Note:
Loading a model from its configuration file does `),N0e=n(qZ,"STRONG",{});var W4t=s(N0e);n3r=r(W4t,"not"),W4t.forEach(t),s3r=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=n(qZ,"A",{href:!0});var H4t=s(SU);l3r=r(H4t,"from_pretrained()"),H4t.forEach(t),i3r=r(qZ," to load the model weights."),qZ.forEach(t),d3r=i(CA),T(HE.$$.fragment,CA),CA.forEach(t),c3r=i(Rl),qr=n(Rl,"DIV",{class:!0});var Bl=s(qr);T(H8.$$.fragment,Bl),f3r=i(Bl),j0e=n(Bl,"P",{});var U4t=s(j0e);m3r=r(U4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),U4t.forEach(t),g3r=i(Bl),fn=n(Bl,"P",{});var wA=s(fn);h3r=r(wA,"The model class to instantiate is selected based on the "),D0e=n(wA,"CODE",{});var J4t=s(D0e);p3r=r(J4t,"model_type"),J4t.forEach(t),u3r=r(wA,` property of the config object (either
passed as an argument or loaded from `),G0e=n(wA,"CODE",{});var Y4t=s(G0e);_3r=r(Y4t,"pretrained_model_name_or_path"),Y4t.forEach(t),b3r=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O0e=n(wA,"CODE",{});var K4t=s(O0e);v3r=r(K4t,"pretrained_model_name_or_path"),K4t.forEach(t),F3r=r(wA,":"),wA.forEach(t),T3r=i(Bl),V0e=n(Bl,"UL",{});var Z4t=s(V0e);UE=n(Z4t,"LI",{});var cBe=s(UE);X0e=n(cBe,"STRONG",{});var eEt=s(X0e);M3r=r(eEt,"vision-encoder-decoder"),eEt.forEach(t),E3r=r(cBe," \u2014 "),RU=n(cBe,"A",{href:!0});var oEt=s(RU);C3r=r(oEt,"TFVisionEncoderDecoderModel"),oEt.forEach(t),w3r=r(cBe," (Vision Encoder decoder model)"),cBe.forEach(t),Z4t.forEach(t),A3r=i(Bl),T(JE.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),Dqe=i(f),Ec=n(f,"H2",{class:!0});var Wje=s(Ec);YE=n(Wje,"A",{id:!0,class:!0,href:!0});var rEt=s(YE);z0e=n(rEt,"SPAN",{});var tEt=s(z0e);T(U8.$$.fragment,tEt),tEt.forEach(t),rEt.forEach(t),y3r=i(Wje),Q0e=n(Wje,"SPAN",{});var aEt=s(Q0e);L3r=r(aEt,"TFAutoModelForSpeechSeq2Seq"),aEt.forEach(t),Wje.forEach(t),Gqe=i(f),cr=n(f,"DIV",{class:!0});var Pl=s(cr);T(J8.$$.fragment,Pl),x3r=i(Pl),Cc=n(Pl,"P",{});var NZ=s(Cc);$3r=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BU=n(NZ,"A",{href:!0});var nEt=s(BU);k3r=r(nEt,"from_pretrained()"),nEt.forEach(t),S3r=r(NZ," class method or the "),PU=n(NZ,"A",{href:!0});var sEt=s(PU);R3r=r(sEt,"from_config()"),sEt.forEach(t),B3r=r(NZ,` class
method.`),NZ.forEach(t),P3r=i(Pl),Y8=n(Pl,"P",{});var Hje=s(Y8);I3r=r(Hje,"This class cannot be instantiated directly using "),W0e=n(Hje,"CODE",{});var lEt=s(W0e);q3r=r(lEt,"__init__()"),lEt.forEach(t),N3r=r(Hje," (throws an error)."),Hje.forEach(t),j3r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var AA=s(Nt);T(K8.$$.fragment,AA),D3r=i(AA),H0e=n(AA,"P",{});var iEt=s(H0e);G3r=r(iEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),iEt.forEach(t),O3r=i(AA),wc=n(AA,"P",{});var jZ=s(wc);V3r=r(jZ,`Note:
Loading a model from its configuration file does `),U0e=n(jZ,"STRONG",{});var dEt=s(U0e);X3r=r(dEt,"not"),dEt.forEach(t),z3r=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=n(jZ,"A",{href:!0});var cEt=s(IU);Q3r=r(cEt,"from_pretrained()"),cEt.forEach(t),W3r=r(jZ," to load the model weights."),jZ.forEach(t),H3r=i(AA),T(KE.$$.fragment,AA),AA.forEach(t),U3r=i(Pl),Nr=n(Pl,"DIV",{class:!0});var Il=s(Nr);T(Z8.$$.fragment,Il),J3r=i(Il),J0e=n(Il,"P",{});var fEt=s(J0e);Y3r=r(fEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),fEt.forEach(t),K3r=i(Il),mn=n(Il,"P",{});var yA=s(mn);Z3r=r(yA,"The model class to instantiate is selected based on the "),Y0e=n(yA,"CODE",{});var mEt=s(Y0e);ewr=r(mEt,"model_type"),mEt.forEach(t),owr=r(yA,` property of the config object (either
passed as an argument or loaded from `),K0e=n(yA,"CODE",{});var gEt=s(K0e);rwr=r(gEt,"pretrained_model_name_or_path"),gEt.forEach(t),twr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=n(yA,"CODE",{});var hEt=s(Z0e);awr=r(hEt,"pretrained_model_name_or_path"),hEt.forEach(t),nwr=r(yA,":"),yA.forEach(t),swr=i(Il),eTe=n(Il,"UL",{});var pEt=s(eTe);ZE=n(pEt,"LI",{});var fBe=s(ZE);oTe=n(fBe,"STRONG",{});var uEt=s(oTe);lwr=r(uEt,"speech_to_text"),uEt.forEach(t),iwr=r(fBe," \u2014 "),qU=n(fBe,"A",{href:!0});var _Et=s(qU);dwr=r(_Et,"TFSpeech2TextForConditionalGeneration"),_Et.forEach(t),cwr=r(fBe," (Speech2Text model)"),fBe.forEach(t),pEt.forEach(t),fwr=i(Il),T(e5.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),Oqe=i(f),Ac=n(f,"H2",{class:!0});var Uje=s(Ac);o5=n(Uje,"A",{id:!0,class:!0,href:!0});var bEt=s(o5);rTe=n(bEt,"SPAN",{});var vEt=s(rTe);T(ex.$$.fragment,vEt),vEt.forEach(t),bEt.forEach(t),mwr=i(Uje),tTe=n(Uje,"SPAN",{});var FEt=s(tTe);gwr=r(FEt,"FlaxAutoModel"),FEt.forEach(t),Uje.forEach(t),Vqe=i(f),fr=n(f,"DIV",{class:!0});var ql=s(fr);T(ox.$$.fragment,ql),hwr=i(ql),yc=n(ql,"P",{});var DZ=s(yc);pwr=r(DZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NU=n(DZ,"A",{href:!0});var TEt=s(NU);uwr=r(TEt,"from_pretrained()"),TEt.forEach(t),_wr=r(DZ," class method or the "),jU=n(DZ,"A",{href:!0});var MEt=s(jU);bwr=r(MEt,"from_config()"),MEt.forEach(t),vwr=r(DZ,` class
method.`),DZ.forEach(t),Fwr=i(ql),rx=n(ql,"P",{});var Jje=s(rx);Twr=r(Jje,"This class cannot be instantiated directly using "),aTe=n(Jje,"CODE",{});var EEt=s(aTe);Mwr=r(EEt,"__init__()"),EEt.forEach(t),Ewr=r(Jje," (throws an error)."),Jje.forEach(t),Cwr=i(ql),jt=n(ql,"DIV",{class:!0});var LA=s(jt);T(tx.$$.fragment,LA),wwr=i(LA),nTe=n(LA,"P",{});var CEt=s(nTe);Awr=r(CEt,"Instantiates one of the base model classes of the library from a configuration."),CEt.forEach(t),ywr=i(LA),Lc=n(LA,"P",{});var GZ=s(Lc);Lwr=r(GZ,`Note:
Loading a model from its configuration file does `),sTe=n(GZ,"STRONG",{});var wEt=s(sTe);xwr=r(wEt,"not"),wEt.forEach(t),$wr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DU=n(GZ,"A",{href:!0});var AEt=s(DU);kwr=r(AEt,"from_pretrained()"),AEt.forEach(t),Swr=r(GZ," to load the model weights."),GZ.forEach(t),Rwr=i(LA),T(r5.$$.fragment,LA),LA.forEach(t),Bwr=i(ql),jr=n(ql,"DIV",{class:!0});var Nl=s(jr);T(ax.$$.fragment,Nl),Pwr=i(Nl),lTe=n(Nl,"P",{});var yEt=s(lTe);Iwr=r(yEt,"Instantiate one of the base model classes of the library from a pretrained model."),yEt.forEach(t),qwr=i(Nl),gn=n(Nl,"P",{});var xA=s(gn);Nwr=r(xA,"The model class to instantiate is selected based on the "),iTe=n(xA,"CODE",{});var LEt=s(iTe);jwr=r(LEt,"model_type"),LEt.forEach(t),Dwr=r(xA,` property of the config object (either
passed as an argument or loaded from `),dTe=n(xA,"CODE",{});var xEt=s(dTe);Gwr=r(xEt,"pretrained_model_name_or_path"),xEt.forEach(t),Owr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=n(xA,"CODE",{});var $Et=s(cTe);Vwr=r($Et,"pretrained_model_name_or_path"),$Et.forEach(t),Xwr=r(xA,":"),xA.forEach(t),zwr=i(Nl),re=n(Nl,"UL",{});var ne=s(re);t5=n(ne,"LI",{});var mBe=s(t5);fTe=n(mBe,"STRONG",{});var kEt=s(fTe);Qwr=r(kEt,"albert"),kEt.forEach(t),Wwr=r(mBe," \u2014 "),GU=n(mBe,"A",{href:!0});var SEt=s(GU);Hwr=r(SEt,"FlaxAlbertModel"),SEt.forEach(t),Uwr=r(mBe," (ALBERT model)"),mBe.forEach(t),Jwr=i(ne),a5=n(ne,"LI",{});var gBe=s(a5);mTe=n(gBe,"STRONG",{});var REt=s(mTe);Ywr=r(REt,"bart"),REt.forEach(t),Kwr=r(gBe," \u2014 "),OU=n(gBe,"A",{href:!0});var BEt=s(OU);Zwr=r(BEt,"FlaxBartModel"),BEt.forEach(t),eAr=r(gBe," (BART model)"),gBe.forEach(t),oAr=i(ne),n5=n(ne,"LI",{});var hBe=s(n5);gTe=n(hBe,"STRONG",{});var PEt=s(gTe);rAr=r(PEt,"beit"),PEt.forEach(t),tAr=r(hBe," \u2014 "),VU=n(hBe,"A",{href:!0});var IEt=s(VU);aAr=r(IEt,"FlaxBeitModel"),IEt.forEach(t),nAr=r(hBe," (BEiT model)"),hBe.forEach(t),sAr=i(ne),s5=n(ne,"LI",{});var pBe=s(s5);hTe=n(pBe,"STRONG",{});var qEt=s(hTe);lAr=r(qEt,"bert"),qEt.forEach(t),iAr=r(pBe," \u2014 "),XU=n(pBe,"A",{href:!0});var NEt=s(XU);dAr=r(NEt,"FlaxBertModel"),NEt.forEach(t),cAr=r(pBe," (BERT model)"),pBe.forEach(t),fAr=i(ne),l5=n(ne,"LI",{});var uBe=s(l5);pTe=n(uBe,"STRONG",{});var jEt=s(pTe);mAr=r(jEt,"big_bird"),jEt.forEach(t),gAr=r(uBe," \u2014 "),zU=n(uBe,"A",{href:!0});var DEt=s(zU);hAr=r(DEt,"FlaxBigBirdModel"),DEt.forEach(t),pAr=r(uBe," (BigBird model)"),uBe.forEach(t),uAr=i(ne),i5=n(ne,"LI",{});var _Be=s(i5);uTe=n(_Be,"STRONG",{});var GEt=s(uTe);_Ar=r(GEt,"blenderbot"),GEt.forEach(t),bAr=r(_Be," \u2014 "),QU=n(_Be,"A",{href:!0});var OEt=s(QU);vAr=r(OEt,"FlaxBlenderbotModel"),OEt.forEach(t),FAr=r(_Be," (Blenderbot model)"),_Be.forEach(t),TAr=i(ne),d5=n(ne,"LI",{});var bBe=s(d5);_Te=n(bBe,"STRONG",{});var VEt=s(_Te);MAr=r(VEt,"blenderbot-small"),VEt.forEach(t),EAr=r(bBe," \u2014 "),WU=n(bBe,"A",{href:!0});var XEt=s(WU);CAr=r(XEt,"FlaxBlenderbotSmallModel"),XEt.forEach(t),wAr=r(bBe," (BlenderbotSmall model)"),bBe.forEach(t),AAr=i(ne),c5=n(ne,"LI",{});var vBe=s(c5);bTe=n(vBe,"STRONG",{});var zEt=s(bTe);yAr=r(zEt,"clip"),zEt.forEach(t),LAr=r(vBe," \u2014 "),HU=n(vBe,"A",{href:!0});var QEt=s(HU);xAr=r(QEt,"FlaxCLIPModel"),QEt.forEach(t),$Ar=r(vBe," (CLIP model)"),vBe.forEach(t),kAr=i(ne),f5=n(ne,"LI",{});var FBe=s(f5);vTe=n(FBe,"STRONG",{});var WEt=s(vTe);SAr=r(WEt,"distilbert"),WEt.forEach(t),RAr=r(FBe," \u2014 "),UU=n(FBe,"A",{href:!0});var HEt=s(UU);BAr=r(HEt,"FlaxDistilBertModel"),HEt.forEach(t),PAr=r(FBe," (DistilBERT model)"),FBe.forEach(t),IAr=i(ne),m5=n(ne,"LI",{});var TBe=s(m5);FTe=n(TBe,"STRONG",{});var UEt=s(FTe);qAr=r(UEt,"electra"),UEt.forEach(t),NAr=r(TBe," \u2014 "),JU=n(TBe,"A",{href:!0});var JEt=s(JU);jAr=r(JEt,"FlaxElectraModel"),JEt.forEach(t),DAr=r(TBe," (ELECTRA model)"),TBe.forEach(t),GAr=i(ne),g5=n(ne,"LI",{});var MBe=s(g5);TTe=n(MBe,"STRONG",{});var YEt=s(TTe);OAr=r(YEt,"gpt2"),YEt.forEach(t),VAr=r(MBe," \u2014 "),YU=n(MBe,"A",{href:!0});var KEt=s(YU);XAr=r(KEt,"FlaxGPT2Model"),KEt.forEach(t),zAr=r(MBe," (OpenAI GPT-2 model)"),MBe.forEach(t),QAr=i(ne),h5=n(ne,"LI",{});var EBe=s(h5);MTe=n(EBe,"STRONG",{});var ZEt=s(MTe);WAr=r(ZEt,"gpt_neo"),ZEt.forEach(t),HAr=r(EBe," \u2014 "),KU=n(EBe,"A",{href:!0});var e5t=s(KU);UAr=r(e5t,"FlaxGPTNeoModel"),e5t.forEach(t),JAr=r(EBe," (GPT Neo model)"),EBe.forEach(t),YAr=i(ne),p5=n(ne,"LI",{});var CBe=s(p5);ETe=n(CBe,"STRONG",{});var o5t=s(ETe);KAr=r(o5t,"gptj"),o5t.forEach(t),ZAr=r(CBe," \u2014 "),ZU=n(CBe,"A",{href:!0});var r5t=s(ZU);e6r=r(r5t,"FlaxGPTJModel"),r5t.forEach(t),o6r=r(CBe," (GPT-J model)"),CBe.forEach(t),r6r=i(ne),u5=n(ne,"LI",{});var wBe=s(u5);CTe=n(wBe,"STRONG",{});var t5t=s(CTe);t6r=r(t5t,"marian"),t5t.forEach(t),a6r=r(wBe," \u2014 "),eJ=n(wBe,"A",{href:!0});var a5t=s(eJ);n6r=r(a5t,"FlaxMarianModel"),a5t.forEach(t),s6r=r(wBe," (Marian model)"),wBe.forEach(t),l6r=i(ne),_5=n(ne,"LI",{});var ABe=s(_5);wTe=n(ABe,"STRONG",{});var n5t=s(wTe);i6r=r(n5t,"mbart"),n5t.forEach(t),d6r=r(ABe," \u2014 "),oJ=n(ABe,"A",{href:!0});var s5t=s(oJ);c6r=r(s5t,"FlaxMBartModel"),s5t.forEach(t),f6r=r(ABe," (mBART model)"),ABe.forEach(t),m6r=i(ne),b5=n(ne,"LI",{});var yBe=s(b5);ATe=n(yBe,"STRONG",{});var l5t=s(ATe);g6r=r(l5t,"mt5"),l5t.forEach(t),h6r=r(yBe," \u2014 "),rJ=n(yBe,"A",{href:!0});var i5t=s(rJ);p6r=r(i5t,"FlaxMT5Model"),i5t.forEach(t),u6r=r(yBe," (mT5 model)"),yBe.forEach(t),_6r=i(ne),v5=n(ne,"LI",{});var LBe=s(v5);yTe=n(LBe,"STRONG",{});var d5t=s(yTe);b6r=r(d5t,"pegasus"),d5t.forEach(t),v6r=r(LBe," \u2014 "),tJ=n(LBe,"A",{href:!0});var c5t=s(tJ);F6r=r(c5t,"FlaxPegasusModel"),c5t.forEach(t),T6r=r(LBe," (Pegasus model)"),LBe.forEach(t),M6r=i(ne),F5=n(ne,"LI",{});var xBe=s(F5);LTe=n(xBe,"STRONG",{});var f5t=s(LTe);E6r=r(f5t,"roberta"),f5t.forEach(t),C6r=r(xBe," \u2014 "),aJ=n(xBe,"A",{href:!0});var m5t=s(aJ);w6r=r(m5t,"FlaxRobertaModel"),m5t.forEach(t),A6r=r(xBe," (RoBERTa model)"),xBe.forEach(t),y6r=i(ne),T5=n(ne,"LI",{});var $Be=s(T5);xTe=n($Be,"STRONG",{});var g5t=s(xTe);L6r=r(g5t,"roformer"),g5t.forEach(t),x6r=r($Be," \u2014 "),nJ=n($Be,"A",{href:!0});var h5t=s(nJ);$6r=r(h5t,"FlaxRoFormerModel"),h5t.forEach(t),k6r=r($Be," (RoFormer model)"),$Be.forEach(t),S6r=i(ne),M5=n(ne,"LI",{});var kBe=s(M5);$Te=n(kBe,"STRONG",{});var p5t=s($Te);R6r=r(p5t,"t5"),p5t.forEach(t),B6r=r(kBe," \u2014 "),sJ=n(kBe,"A",{href:!0});var u5t=s(sJ);P6r=r(u5t,"FlaxT5Model"),u5t.forEach(t),I6r=r(kBe," (T5 model)"),kBe.forEach(t),q6r=i(ne),E5=n(ne,"LI",{});var SBe=s(E5);kTe=n(SBe,"STRONG",{});var _5t=s(kTe);N6r=r(_5t,"vision-text-dual-encoder"),_5t.forEach(t),j6r=r(SBe," \u2014 "),lJ=n(SBe,"A",{href:!0});var b5t=s(lJ);D6r=r(b5t,"FlaxVisionTextDualEncoderModel"),b5t.forEach(t),G6r=r(SBe," (VisionTextDualEncoder model)"),SBe.forEach(t),O6r=i(ne),C5=n(ne,"LI",{});var RBe=s(C5);STe=n(RBe,"STRONG",{});var v5t=s(STe);V6r=r(v5t,"vit"),v5t.forEach(t),X6r=r(RBe," \u2014 "),iJ=n(RBe,"A",{href:!0});var F5t=s(iJ);z6r=r(F5t,"FlaxViTModel"),F5t.forEach(t),Q6r=r(RBe," (ViT model)"),RBe.forEach(t),W6r=i(ne),w5=n(ne,"LI",{});var BBe=s(w5);RTe=n(BBe,"STRONG",{});var T5t=s(RTe);H6r=r(T5t,"wav2vec2"),T5t.forEach(t),U6r=r(BBe," \u2014 "),dJ=n(BBe,"A",{href:!0});var M5t=s(dJ);J6r=r(M5t,"FlaxWav2Vec2Model"),M5t.forEach(t),Y6r=r(BBe," (Wav2Vec2 model)"),BBe.forEach(t),K6r=i(ne),A5=n(ne,"LI",{});var PBe=s(A5);BTe=n(PBe,"STRONG",{});var E5t=s(BTe);Z6r=r(E5t,"xglm"),E5t.forEach(t),eyr=r(PBe," \u2014 "),cJ=n(PBe,"A",{href:!0});var C5t=s(cJ);oyr=r(C5t,"FlaxXGLMModel"),C5t.forEach(t),ryr=r(PBe," (XGLM model)"),PBe.forEach(t),tyr=i(ne),y5=n(ne,"LI",{});var IBe=s(y5);PTe=n(IBe,"STRONG",{});var w5t=s(PTe);ayr=r(w5t,"xlm-roberta"),w5t.forEach(t),nyr=r(IBe," \u2014 "),fJ=n(IBe,"A",{href:!0});var A5t=s(fJ);syr=r(A5t,"FlaxXLMRobertaModel"),A5t.forEach(t),lyr=r(IBe," (XLM-RoBERTa model)"),IBe.forEach(t),ne.forEach(t),iyr=i(Nl),T(L5.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),Xqe=i(f),xc=n(f,"H2",{class:!0});var Yje=s(xc);x5=n(Yje,"A",{id:!0,class:!0,href:!0});var y5t=s(x5);ITe=n(y5t,"SPAN",{});var L5t=s(ITe);T(nx.$$.fragment,L5t),L5t.forEach(t),y5t.forEach(t),dyr=i(Yje),qTe=n(Yje,"SPAN",{});var x5t=s(qTe);cyr=r(x5t,"FlaxAutoModelForCausalLM"),x5t.forEach(t),Yje.forEach(t),zqe=i(f),mr=n(f,"DIV",{class:!0});var jl=s(mr);T(sx.$$.fragment,jl),fyr=i(jl),$c=n(jl,"P",{});var OZ=s($c);myr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mJ=n(OZ,"A",{href:!0});var $5t=s(mJ);gyr=r($5t,"from_pretrained()"),$5t.forEach(t),hyr=r(OZ," class method or the "),gJ=n(OZ,"A",{href:!0});var k5t=s(gJ);pyr=r(k5t,"from_config()"),k5t.forEach(t),uyr=r(OZ,` class
method.`),OZ.forEach(t),_yr=i(jl),lx=n(jl,"P",{});var Kje=s(lx);byr=r(Kje,"This class cannot be instantiated directly using "),NTe=n(Kje,"CODE",{});var S5t=s(NTe);vyr=r(S5t,"__init__()"),S5t.forEach(t),Fyr=r(Kje," (throws an error)."),Kje.forEach(t),Tyr=i(jl),Dt=n(jl,"DIV",{class:!0});var $A=s(Dt);T(ix.$$.fragment,$A),Myr=i($A),jTe=n($A,"P",{});var R5t=s(jTe);Eyr=r(R5t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),R5t.forEach(t),Cyr=i($A),kc=n($A,"P",{});var VZ=s(kc);wyr=r(VZ,`Note:
Loading a model from its configuration file does `),DTe=n(VZ,"STRONG",{});var B5t=s(DTe);Ayr=r(B5t,"not"),B5t.forEach(t),yyr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(VZ,"A",{href:!0});var P5t=s(hJ);Lyr=r(P5t,"from_pretrained()"),P5t.forEach(t),xyr=r(VZ," to load the model weights."),VZ.forEach(t),$yr=i($A),T($5.$$.fragment,$A),$A.forEach(t),kyr=i(jl),Dr=n(jl,"DIV",{class:!0});var Dl=s(Dr);T(dx.$$.fragment,Dl),Syr=i(Dl),GTe=n(Dl,"P",{});var I5t=s(GTe);Ryr=r(I5t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),I5t.forEach(t),Byr=i(Dl),hn=n(Dl,"P",{});var kA=s(hn);Pyr=r(kA,"The model class to instantiate is selected based on the "),OTe=n(kA,"CODE",{});var q5t=s(OTe);Iyr=r(q5t,"model_type"),q5t.forEach(t),qyr=r(kA,` property of the config object (either
passed as an argument or loaded from `),VTe=n(kA,"CODE",{});var N5t=s(VTe);Nyr=r(N5t,"pretrained_model_name_or_path"),N5t.forEach(t),jyr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XTe=n(kA,"CODE",{});var j5t=s(XTe);Dyr=r(j5t,"pretrained_model_name_or_path"),j5t.forEach(t),Gyr=r(kA,":"),kA.forEach(t),Oyr=i(Dl),ke=n(Dl,"UL",{});var Oe=s(ke);k5=n(Oe,"LI",{});var qBe=s(k5);zTe=n(qBe,"STRONG",{});var D5t=s(zTe);Vyr=r(D5t,"bart"),D5t.forEach(t),Xyr=r(qBe," \u2014 "),pJ=n(qBe,"A",{href:!0});var G5t=s(pJ);zyr=r(G5t,"FlaxBartForCausalLM"),G5t.forEach(t),Qyr=r(qBe," (BART model)"),qBe.forEach(t),Wyr=i(Oe),S5=n(Oe,"LI",{});var NBe=s(S5);QTe=n(NBe,"STRONG",{});var O5t=s(QTe);Hyr=r(O5t,"bert"),O5t.forEach(t),Uyr=r(NBe," \u2014 "),uJ=n(NBe,"A",{href:!0});var V5t=s(uJ);Jyr=r(V5t,"FlaxBertForCausalLM"),V5t.forEach(t),Yyr=r(NBe," (BERT model)"),NBe.forEach(t),Kyr=i(Oe),R5=n(Oe,"LI",{});var jBe=s(R5);WTe=n(jBe,"STRONG",{});var X5t=s(WTe);Zyr=r(X5t,"big_bird"),X5t.forEach(t),eLr=r(jBe," \u2014 "),_J=n(jBe,"A",{href:!0});var z5t=s(_J);oLr=r(z5t,"FlaxBigBirdForCausalLM"),z5t.forEach(t),rLr=r(jBe," (BigBird model)"),jBe.forEach(t),tLr=i(Oe),B5=n(Oe,"LI",{});var DBe=s(B5);HTe=n(DBe,"STRONG",{});var Q5t=s(HTe);aLr=r(Q5t,"electra"),Q5t.forEach(t),nLr=r(DBe," \u2014 "),bJ=n(DBe,"A",{href:!0});var W5t=s(bJ);sLr=r(W5t,"FlaxElectraForCausalLM"),W5t.forEach(t),lLr=r(DBe," (ELECTRA model)"),DBe.forEach(t),iLr=i(Oe),P5=n(Oe,"LI",{});var GBe=s(P5);UTe=n(GBe,"STRONG",{});var H5t=s(UTe);dLr=r(H5t,"gpt2"),H5t.forEach(t),cLr=r(GBe," \u2014 "),vJ=n(GBe,"A",{href:!0});var U5t=s(vJ);fLr=r(U5t,"FlaxGPT2LMHeadModel"),U5t.forEach(t),mLr=r(GBe," (OpenAI GPT-2 model)"),GBe.forEach(t),gLr=i(Oe),I5=n(Oe,"LI",{});var OBe=s(I5);JTe=n(OBe,"STRONG",{});var J5t=s(JTe);hLr=r(J5t,"gpt_neo"),J5t.forEach(t),pLr=r(OBe," \u2014 "),FJ=n(OBe,"A",{href:!0});var Y5t=s(FJ);uLr=r(Y5t,"FlaxGPTNeoForCausalLM"),Y5t.forEach(t),_Lr=r(OBe," (GPT Neo model)"),OBe.forEach(t),bLr=i(Oe),q5=n(Oe,"LI",{});var VBe=s(q5);YTe=n(VBe,"STRONG",{});var K5t=s(YTe);vLr=r(K5t,"gptj"),K5t.forEach(t),FLr=r(VBe," \u2014 "),TJ=n(VBe,"A",{href:!0});var Z5t=s(TJ);TLr=r(Z5t,"FlaxGPTJForCausalLM"),Z5t.forEach(t),MLr=r(VBe," (GPT-J model)"),VBe.forEach(t),ELr=i(Oe),N5=n(Oe,"LI",{});var XBe=s(N5);KTe=n(XBe,"STRONG",{});var eCt=s(KTe);CLr=r(eCt,"roberta"),eCt.forEach(t),wLr=r(XBe," \u2014 "),MJ=n(XBe,"A",{href:!0});var oCt=s(MJ);ALr=r(oCt,"FlaxRobertaForCausalLM"),oCt.forEach(t),yLr=r(XBe," (RoBERTa model)"),XBe.forEach(t),LLr=i(Oe),j5=n(Oe,"LI",{});var zBe=s(j5);ZTe=n(zBe,"STRONG",{});var rCt=s(ZTe);xLr=r(rCt,"xglm"),rCt.forEach(t),$Lr=r(zBe," \u2014 "),EJ=n(zBe,"A",{href:!0});var tCt=s(EJ);kLr=r(tCt,"FlaxXGLMForCausalLM"),tCt.forEach(t),SLr=r(zBe," (XGLM model)"),zBe.forEach(t),Oe.forEach(t),RLr=i(Dl),T(D5.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),Qqe=i(f),Sc=n(f,"H2",{class:!0});var Zje=s(Sc);G5=n(Zje,"A",{id:!0,class:!0,href:!0});var aCt=s(G5);e7e=n(aCt,"SPAN",{});var nCt=s(e7e);T(cx.$$.fragment,nCt),nCt.forEach(t),aCt.forEach(t),BLr=i(Zje),o7e=n(Zje,"SPAN",{});var sCt=s(o7e);PLr=r(sCt,"FlaxAutoModelForPreTraining"),sCt.forEach(t),Zje.forEach(t),Wqe=i(f),gr=n(f,"DIV",{class:!0});var Gl=s(gr);T(fx.$$.fragment,Gl),ILr=i(Gl),Rc=n(Gl,"P",{});var XZ=s(Rc);qLr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),CJ=n(XZ,"A",{href:!0});var lCt=s(CJ);NLr=r(lCt,"from_pretrained()"),lCt.forEach(t),jLr=r(XZ," class method or the "),wJ=n(XZ,"A",{href:!0});var iCt=s(wJ);DLr=r(iCt,"from_config()"),iCt.forEach(t),GLr=r(XZ,` class
method.`),XZ.forEach(t),OLr=i(Gl),mx=n(Gl,"P",{});var eDe=s(mx);VLr=r(eDe,"This class cannot be instantiated directly using "),r7e=n(eDe,"CODE",{});var dCt=s(r7e);XLr=r(dCt,"__init__()"),dCt.forEach(t),zLr=r(eDe," (throws an error)."),eDe.forEach(t),QLr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var SA=s(Gt);T(gx.$$.fragment,SA),WLr=i(SA),t7e=n(SA,"P",{});var cCt=s(t7e);HLr=r(cCt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cCt.forEach(t),ULr=i(SA),Bc=n(SA,"P",{});var zZ=s(Bc);JLr=r(zZ,`Note:
Loading a model from its configuration file does `),a7e=n(zZ,"STRONG",{});var fCt=s(a7e);YLr=r(fCt,"not"),fCt.forEach(t),KLr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AJ=n(zZ,"A",{href:!0});var mCt=s(AJ);ZLr=r(mCt,"from_pretrained()"),mCt.forEach(t),e8r=r(zZ," to load the model weights."),zZ.forEach(t),o8r=i(SA),T(O5.$$.fragment,SA),SA.forEach(t),r8r=i(Gl),Gr=n(Gl,"DIV",{class:!0});var Ol=s(Gr);T(hx.$$.fragment,Ol),t8r=i(Ol),n7e=n(Ol,"P",{});var gCt=s(n7e);a8r=r(gCt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),gCt.forEach(t),n8r=i(Ol),pn=n(Ol,"P",{});var RA=s(pn);s8r=r(RA,"The model class to instantiate is selected based on the "),s7e=n(RA,"CODE",{});var hCt=s(s7e);l8r=r(hCt,"model_type"),hCt.forEach(t),i8r=r(RA,` property of the config object (either
passed as an argument or loaded from `),l7e=n(RA,"CODE",{});var pCt=s(l7e);d8r=r(pCt,"pretrained_model_name_or_path"),pCt.forEach(t),c8r=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i7e=n(RA,"CODE",{});var uCt=s(i7e);f8r=r(uCt,"pretrained_model_name_or_path"),uCt.forEach(t),m8r=r(RA,":"),RA.forEach(t),g8r=i(Ol),Me=n(Ol,"UL",{});var we=s(Me);V5=n(we,"LI",{});var QBe=s(V5);d7e=n(QBe,"STRONG",{});var _Ct=s(d7e);h8r=r(_Ct,"albert"),_Ct.forEach(t),p8r=r(QBe," \u2014 "),yJ=n(QBe,"A",{href:!0});var bCt=s(yJ);u8r=r(bCt,"FlaxAlbertForPreTraining"),bCt.forEach(t),_8r=r(QBe," (ALBERT model)"),QBe.forEach(t),b8r=i(we),X5=n(we,"LI",{});var WBe=s(X5);c7e=n(WBe,"STRONG",{});var vCt=s(c7e);v8r=r(vCt,"bart"),vCt.forEach(t),F8r=r(WBe," \u2014 "),LJ=n(WBe,"A",{href:!0});var FCt=s(LJ);T8r=r(FCt,"FlaxBartForConditionalGeneration"),FCt.forEach(t),M8r=r(WBe," (BART model)"),WBe.forEach(t),E8r=i(we),z5=n(we,"LI",{});var HBe=s(z5);f7e=n(HBe,"STRONG",{});var TCt=s(f7e);C8r=r(TCt,"bert"),TCt.forEach(t),w8r=r(HBe," \u2014 "),xJ=n(HBe,"A",{href:!0});var MCt=s(xJ);A8r=r(MCt,"FlaxBertForPreTraining"),MCt.forEach(t),y8r=r(HBe," (BERT model)"),HBe.forEach(t),L8r=i(we),Q5=n(we,"LI",{});var UBe=s(Q5);m7e=n(UBe,"STRONG",{});var ECt=s(m7e);x8r=r(ECt,"big_bird"),ECt.forEach(t),$8r=r(UBe," \u2014 "),$J=n(UBe,"A",{href:!0});var CCt=s($J);k8r=r(CCt,"FlaxBigBirdForPreTraining"),CCt.forEach(t),S8r=r(UBe," (BigBird model)"),UBe.forEach(t),R8r=i(we),W5=n(we,"LI",{});var JBe=s(W5);g7e=n(JBe,"STRONG",{});var wCt=s(g7e);B8r=r(wCt,"electra"),wCt.forEach(t),P8r=r(JBe," \u2014 "),kJ=n(JBe,"A",{href:!0});var ACt=s(kJ);I8r=r(ACt,"FlaxElectraForPreTraining"),ACt.forEach(t),q8r=r(JBe," (ELECTRA model)"),JBe.forEach(t),N8r=i(we),H5=n(we,"LI",{});var YBe=s(H5);h7e=n(YBe,"STRONG",{});var yCt=s(h7e);j8r=r(yCt,"mbart"),yCt.forEach(t),D8r=r(YBe," \u2014 "),SJ=n(YBe,"A",{href:!0});var LCt=s(SJ);G8r=r(LCt,"FlaxMBartForConditionalGeneration"),LCt.forEach(t),O8r=r(YBe," (mBART model)"),YBe.forEach(t),V8r=i(we),U5=n(we,"LI",{});var KBe=s(U5);p7e=n(KBe,"STRONG",{});var xCt=s(p7e);X8r=r(xCt,"mt5"),xCt.forEach(t),z8r=r(KBe," \u2014 "),RJ=n(KBe,"A",{href:!0});var $Ct=s(RJ);Q8r=r($Ct,"FlaxMT5ForConditionalGeneration"),$Ct.forEach(t),W8r=r(KBe," (mT5 model)"),KBe.forEach(t),H8r=i(we),J5=n(we,"LI",{});var ZBe=s(J5);u7e=n(ZBe,"STRONG",{});var kCt=s(u7e);U8r=r(kCt,"roberta"),kCt.forEach(t),J8r=r(ZBe," \u2014 "),BJ=n(ZBe,"A",{href:!0});var SCt=s(BJ);Y8r=r(SCt,"FlaxRobertaForMaskedLM"),SCt.forEach(t),K8r=r(ZBe," (RoBERTa model)"),ZBe.forEach(t),Z8r=i(we),Y5=n(we,"LI",{});var ePe=s(Y5);_7e=n(ePe,"STRONG",{});var RCt=s(_7e);exr=r(RCt,"roformer"),RCt.forEach(t),oxr=r(ePe," \u2014 "),PJ=n(ePe,"A",{href:!0});var BCt=s(PJ);rxr=r(BCt,"FlaxRoFormerForMaskedLM"),BCt.forEach(t),txr=r(ePe," (RoFormer model)"),ePe.forEach(t),axr=i(we),K5=n(we,"LI",{});var oPe=s(K5);b7e=n(oPe,"STRONG",{});var PCt=s(b7e);nxr=r(PCt,"t5"),PCt.forEach(t),sxr=r(oPe," \u2014 "),IJ=n(oPe,"A",{href:!0});var ICt=s(IJ);lxr=r(ICt,"FlaxT5ForConditionalGeneration"),ICt.forEach(t),ixr=r(oPe," (T5 model)"),oPe.forEach(t),dxr=i(we),Z5=n(we,"LI",{});var rPe=s(Z5);v7e=n(rPe,"STRONG",{});var qCt=s(v7e);cxr=r(qCt,"wav2vec2"),qCt.forEach(t),fxr=r(rPe," \u2014 "),qJ=n(rPe,"A",{href:!0});var NCt=s(qJ);mxr=r(NCt,"FlaxWav2Vec2ForPreTraining"),NCt.forEach(t),gxr=r(rPe," (Wav2Vec2 model)"),rPe.forEach(t),hxr=i(we),eC=n(we,"LI",{});var tPe=s(eC);F7e=n(tPe,"STRONG",{});var jCt=s(F7e);pxr=r(jCt,"xlm-roberta"),jCt.forEach(t),uxr=r(tPe," \u2014 "),NJ=n(tPe,"A",{href:!0});var DCt=s(NJ);_xr=r(DCt,"FlaxXLMRobertaForMaskedLM"),DCt.forEach(t),bxr=r(tPe," (XLM-RoBERTa model)"),tPe.forEach(t),we.forEach(t),vxr=i(Ol),T(oC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Hqe=i(f),Pc=n(f,"H2",{class:!0});var oDe=s(Pc);rC=n(oDe,"A",{id:!0,class:!0,href:!0});var GCt=s(rC);T7e=n(GCt,"SPAN",{});var OCt=s(T7e);T(px.$$.fragment,OCt),OCt.forEach(t),GCt.forEach(t),Fxr=i(oDe),M7e=n(oDe,"SPAN",{});var VCt=s(M7e);Txr=r(VCt,"FlaxAutoModelForMaskedLM"),VCt.forEach(t),oDe.forEach(t),Uqe=i(f),hr=n(f,"DIV",{class:!0});var Vl=s(hr);T(ux.$$.fragment,Vl),Mxr=i(Vl),Ic=n(Vl,"P",{});var QZ=s(Ic);Exr=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jJ=n(QZ,"A",{href:!0});var XCt=s(jJ);Cxr=r(XCt,"from_pretrained()"),XCt.forEach(t),wxr=r(QZ," class method or the "),DJ=n(QZ,"A",{href:!0});var zCt=s(DJ);Axr=r(zCt,"from_config()"),zCt.forEach(t),yxr=r(QZ,` class
method.`),QZ.forEach(t),Lxr=i(Vl),_x=n(Vl,"P",{});var rDe=s(_x);xxr=r(rDe,"This class cannot be instantiated directly using "),E7e=n(rDe,"CODE",{});var QCt=s(E7e);$xr=r(QCt,"__init__()"),QCt.forEach(t),kxr=r(rDe," (throws an error)."),rDe.forEach(t),Sxr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var BA=s(Ot);T(bx.$$.fragment,BA),Rxr=i(BA),C7e=n(BA,"P",{});var WCt=s(C7e);Bxr=r(WCt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),WCt.forEach(t),Pxr=i(BA),qc=n(BA,"P",{});var WZ=s(qc);Ixr=r(WZ,`Note:
Loading a model from its configuration file does `),w7e=n(WZ,"STRONG",{});var HCt=s(w7e);qxr=r(HCt,"not"),HCt.forEach(t),Nxr=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=n(WZ,"A",{href:!0});var UCt=s(GJ);jxr=r(UCt,"from_pretrained()"),UCt.forEach(t),Dxr=r(WZ," to load the model weights."),WZ.forEach(t),Gxr=i(BA),T(tC.$$.fragment,BA),BA.forEach(t),Oxr=i(Vl),Or=n(Vl,"DIV",{class:!0});var Xl=s(Or);T(vx.$$.fragment,Xl),Vxr=i(Xl),A7e=n(Xl,"P",{});var JCt=s(A7e);Xxr=r(JCt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),JCt.forEach(t),zxr=i(Xl),un=n(Xl,"P",{});var PA=s(un);Qxr=r(PA,"The model class to instantiate is selected based on the "),y7e=n(PA,"CODE",{});var YCt=s(y7e);Wxr=r(YCt,"model_type"),YCt.forEach(t),Hxr=r(PA,` property of the config object (either
passed as an argument or loaded from `),L7e=n(PA,"CODE",{});var KCt=s(L7e);Uxr=r(KCt,"pretrained_model_name_or_path"),KCt.forEach(t),Jxr=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x7e=n(PA,"CODE",{});var ZCt=s(x7e);Yxr=r(ZCt,"pretrained_model_name_or_path"),ZCt.forEach(t),Kxr=r(PA,":"),PA.forEach(t),Zxr=i(Xl),Le=n(Xl,"UL",{});var Be=s(Le);aC=n(Be,"LI",{});var aPe=s(aC);$7e=n(aPe,"STRONG",{});var e3t=s($7e);e9r=r(e3t,"albert"),e3t.forEach(t),o9r=r(aPe," \u2014 "),OJ=n(aPe,"A",{href:!0});var o3t=s(OJ);r9r=r(o3t,"FlaxAlbertForMaskedLM"),o3t.forEach(t),t9r=r(aPe," (ALBERT model)"),aPe.forEach(t),a9r=i(Be),nC=n(Be,"LI",{});var nPe=s(nC);k7e=n(nPe,"STRONG",{});var r3t=s(k7e);n9r=r(r3t,"bart"),r3t.forEach(t),s9r=r(nPe," \u2014 "),VJ=n(nPe,"A",{href:!0});var t3t=s(VJ);l9r=r(t3t,"FlaxBartForConditionalGeneration"),t3t.forEach(t),i9r=r(nPe," (BART model)"),nPe.forEach(t),d9r=i(Be),sC=n(Be,"LI",{});var sPe=s(sC);S7e=n(sPe,"STRONG",{});var a3t=s(S7e);c9r=r(a3t,"bert"),a3t.forEach(t),f9r=r(sPe," \u2014 "),XJ=n(sPe,"A",{href:!0});var n3t=s(XJ);m9r=r(n3t,"FlaxBertForMaskedLM"),n3t.forEach(t),g9r=r(sPe," (BERT model)"),sPe.forEach(t),h9r=i(Be),lC=n(Be,"LI",{});var lPe=s(lC);R7e=n(lPe,"STRONG",{});var s3t=s(R7e);p9r=r(s3t,"big_bird"),s3t.forEach(t),u9r=r(lPe," \u2014 "),zJ=n(lPe,"A",{href:!0});var l3t=s(zJ);_9r=r(l3t,"FlaxBigBirdForMaskedLM"),l3t.forEach(t),b9r=r(lPe," (BigBird model)"),lPe.forEach(t),v9r=i(Be),iC=n(Be,"LI",{});var iPe=s(iC);B7e=n(iPe,"STRONG",{});var i3t=s(B7e);F9r=r(i3t,"distilbert"),i3t.forEach(t),T9r=r(iPe," \u2014 "),QJ=n(iPe,"A",{href:!0});var d3t=s(QJ);M9r=r(d3t,"FlaxDistilBertForMaskedLM"),d3t.forEach(t),E9r=r(iPe," (DistilBERT model)"),iPe.forEach(t),C9r=i(Be),dC=n(Be,"LI",{});var dPe=s(dC);P7e=n(dPe,"STRONG",{});var c3t=s(P7e);w9r=r(c3t,"electra"),c3t.forEach(t),A9r=r(dPe," \u2014 "),WJ=n(dPe,"A",{href:!0});var f3t=s(WJ);y9r=r(f3t,"FlaxElectraForMaskedLM"),f3t.forEach(t),L9r=r(dPe," (ELECTRA model)"),dPe.forEach(t),x9r=i(Be),cC=n(Be,"LI",{});var cPe=s(cC);I7e=n(cPe,"STRONG",{});var m3t=s(I7e);$9r=r(m3t,"mbart"),m3t.forEach(t),k9r=r(cPe," \u2014 "),HJ=n(cPe,"A",{href:!0});var g3t=s(HJ);S9r=r(g3t,"FlaxMBartForConditionalGeneration"),g3t.forEach(t),R9r=r(cPe," (mBART model)"),cPe.forEach(t),B9r=i(Be),fC=n(Be,"LI",{});var fPe=s(fC);q7e=n(fPe,"STRONG",{});var h3t=s(q7e);P9r=r(h3t,"roberta"),h3t.forEach(t),I9r=r(fPe," \u2014 "),UJ=n(fPe,"A",{href:!0});var p3t=s(UJ);q9r=r(p3t,"FlaxRobertaForMaskedLM"),p3t.forEach(t),N9r=r(fPe," (RoBERTa model)"),fPe.forEach(t),j9r=i(Be),mC=n(Be,"LI",{});var mPe=s(mC);N7e=n(mPe,"STRONG",{});var u3t=s(N7e);D9r=r(u3t,"roformer"),u3t.forEach(t),G9r=r(mPe," \u2014 "),JJ=n(mPe,"A",{href:!0});var _3t=s(JJ);O9r=r(_3t,"FlaxRoFormerForMaskedLM"),_3t.forEach(t),V9r=r(mPe," (RoFormer model)"),mPe.forEach(t),X9r=i(Be),gC=n(Be,"LI",{});var gPe=s(gC);j7e=n(gPe,"STRONG",{});var b3t=s(j7e);z9r=r(b3t,"xlm-roberta"),b3t.forEach(t),Q9r=r(gPe," \u2014 "),YJ=n(gPe,"A",{href:!0});var v3t=s(YJ);W9r=r(v3t,"FlaxXLMRobertaForMaskedLM"),v3t.forEach(t),H9r=r(gPe," (XLM-RoBERTa model)"),gPe.forEach(t),Be.forEach(t),U9r=i(Xl),T(hC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),Jqe=i(f),Nc=n(f,"H2",{class:!0});var tDe=s(Nc);pC=n(tDe,"A",{id:!0,class:!0,href:!0});var F3t=s(pC);D7e=n(F3t,"SPAN",{});var T3t=s(D7e);T(Fx.$$.fragment,T3t),T3t.forEach(t),F3t.forEach(t),J9r=i(tDe),G7e=n(tDe,"SPAN",{});var M3t=s(G7e);Y9r=r(M3t,"FlaxAutoModelForSeq2SeqLM"),M3t.forEach(t),tDe.forEach(t),Yqe=i(f),pr=n(f,"DIV",{class:!0});var zl=s(pr);T(Tx.$$.fragment,zl),K9r=i(zl),jc=n(zl,"P",{});var HZ=s(jc);Z9r=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),KJ=n(HZ,"A",{href:!0});var E3t=s(KJ);e$r=r(E3t,"from_pretrained()"),E3t.forEach(t),o$r=r(HZ," class method or the "),ZJ=n(HZ,"A",{href:!0});var C3t=s(ZJ);r$r=r(C3t,"from_config()"),C3t.forEach(t),t$r=r(HZ,` class
method.`),HZ.forEach(t),a$r=i(zl),Mx=n(zl,"P",{});var aDe=s(Mx);n$r=r(aDe,"This class cannot be instantiated directly using "),O7e=n(aDe,"CODE",{});var w3t=s(O7e);s$r=r(w3t,"__init__()"),w3t.forEach(t),l$r=r(aDe," (throws an error)."),aDe.forEach(t),i$r=i(zl),Vt=n(zl,"DIV",{class:!0});var IA=s(Vt);T(Ex.$$.fragment,IA),d$r=i(IA),V7e=n(IA,"P",{});var A3t=s(V7e);c$r=r(A3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),A3t.forEach(t),f$r=i(IA),Dc=n(IA,"P",{});var UZ=s(Dc);m$r=r(UZ,`Note:
Loading a model from its configuration file does `),X7e=n(UZ,"STRONG",{});var y3t=s(X7e);g$r=r(y3t,"not"),y3t.forEach(t),h$r=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=n(UZ,"A",{href:!0});var L3t=s(eY);p$r=r(L3t,"from_pretrained()"),L3t.forEach(t),u$r=r(UZ," to load the model weights."),UZ.forEach(t),_$r=i(IA),T(uC.$$.fragment,IA),IA.forEach(t),b$r=i(zl),Vr=n(zl,"DIV",{class:!0});var Ql=s(Vr);T(Cx.$$.fragment,Ql),v$r=i(Ql),z7e=n(Ql,"P",{});var x3t=s(z7e);F$r=r(x3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),x3t.forEach(t),T$r=i(Ql),_n=n(Ql,"P",{});var qA=s(_n);M$r=r(qA,"The model class to instantiate is selected based on the "),Q7e=n(qA,"CODE",{});var $3t=s(Q7e);E$r=r($3t,"model_type"),$3t.forEach(t),C$r=r(qA,` property of the config object (either
passed as an argument or loaded from `),W7e=n(qA,"CODE",{});var k3t=s(W7e);w$r=r(k3t,"pretrained_model_name_or_path"),k3t.forEach(t),A$r=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H7e=n(qA,"CODE",{});var S3t=s(H7e);y$r=r(S3t,"pretrained_model_name_or_path"),S3t.forEach(t),L$r=r(qA,":"),qA.forEach(t),x$r=i(Ql),Se=n(Ql,"UL",{});var Ve=s(Se);_C=n(Ve,"LI",{});var hPe=s(_C);U7e=n(hPe,"STRONG",{});var R3t=s(U7e);$$r=r(R3t,"bart"),R3t.forEach(t),k$r=r(hPe," \u2014 "),oY=n(hPe,"A",{href:!0});var B3t=s(oY);S$r=r(B3t,"FlaxBartForConditionalGeneration"),B3t.forEach(t),R$r=r(hPe," (BART model)"),hPe.forEach(t),B$r=i(Ve),bC=n(Ve,"LI",{});var pPe=s(bC);J7e=n(pPe,"STRONG",{});var P3t=s(J7e);P$r=r(P3t,"blenderbot"),P3t.forEach(t),I$r=r(pPe," \u2014 "),rY=n(pPe,"A",{href:!0});var I3t=s(rY);q$r=r(I3t,"FlaxBlenderbotForConditionalGeneration"),I3t.forEach(t),N$r=r(pPe," (Blenderbot model)"),pPe.forEach(t),j$r=i(Ve),vC=n(Ve,"LI",{});var uPe=s(vC);Y7e=n(uPe,"STRONG",{});var q3t=s(Y7e);D$r=r(q3t,"blenderbot-small"),q3t.forEach(t),G$r=r(uPe," \u2014 "),tY=n(uPe,"A",{href:!0});var N3t=s(tY);O$r=r(N3t,"FlaxBlenderbotSmallForConditionalGeneration"),N3t.forEach(t),V$r=r(uPe," (BlenderbotSmall model)"),uPe.forEach(t),X$r=i(Ve),FC=n(Ve,"LI",{});var _Pe=s(FC);K7e=n(_Pe,"STRONG",{});var j3t=s(K7e);z$r=r(j3t,"encoder-decoder"),j3t.forEach(t),Q$r=r(_Pe," \u2014 "),aY=n(_Pe,"A",{href:!0});var D3t=s(aY);W$r=r(D3t,"FlaxEncoderDecoderModel"),D3t.forEach(t),H$r=r(_Pe," (Encoder decoder model)"),_Pe.forEach(t),U$r=i(Ve),TC=n(Ve,"LI",{});var bPe=s(TC);Z7e=n(bPe,"STRONG",{});var G3t=s(Z7e);J$r=r(G3t,"marian"),G3t.forEach(t),Y$r=r(bPe," \u2014 "),nY=n(bPe,"A",{href:!0});var O3t=s(nY);K$r=r(O3t,"FlaxMarianMTModel"),O3t.forEach(t),Z$r=r(bPe," (Marian model)"),bPe.forEach(t),ekr=i(Ve),MC=n(Ve,"LI",{});var vPe=s(MC);eMe=n(vPe,"STRONG",{});var V3t=s(eMe);okr=r(V3t,"mbart"),V3t.forEach(t),rkr=r(vPe," \u2014 "),sY=n(vPe,"A",{href:!0});var X3t=s(sY);tkr=r(X3t,"FlaxMBartForConditionalGeneration"),X3t.forEach(t),akr=r(vPe," (mBART model)"),vPe.forEach(t),nkr=i(Ve),EC=n(Ve,"LI",{});var FPe=s(EC);oMe=n(FPe,"STRONG",{});var z3t=s(oMe);skr=r(z3t,"mt5"),z3t.forEach(t),lkr=r(FPe," \u2014 "),lY=n(FPe,"A",{href:!0});var Q3t=s(lY);ikr=r(Q3t,"FlaxMT5ForConditionalGeneration"),Q3t.forEach(t),dkr=r(FPe," (mT5 model)"),FPe.forEach(t),ckr=i(Ve),CC=n(Ve,"LI",{});var TPe=s(CC);rMe=n(TPe,"STRONG",{});var W3t=s(rMe);fkr=r(W3t,"pegasus"),W3t.forEach(t),mkr=r(TPe," \u2014 "),iY=n(TPe,"A",{href:!0});var H3t=s(iY);gkr=r(H3t,"FlaxPegasusForConditionalGeneration"),H3t.forEach(t),hkr=r(TPe," (Pegasus model)"),TPe.forEach(t),pkr=i(Ve),wC=n(Ve,"LI",{});var MPe=s(wC);tMe=n(MPe,"STRONG",{});var U3t=s(tMe);ukr=r(U3t,"t5"),U3t.forEach(t),_kr=r(MPe," \u2014 "),dY=n(MPe,"A",{href:!0});var J3t=s(dY);bkr=r(J3t,"FlaxT5ForConditionalGeneration"),J3t.forEach(t),vkr=r(MPe," (T5 model)"),MPe.forEach(t),Ve.forEach(t),Fkr=i(Ql),T(AC.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),Kqe=i(f),Gc=n(f,"H2",{class:!0});var nDe=s(Gc);yC=n(nDe,"A",{id:!0,class:!0,href:!0});var Y3t=s(yC);aMe=n(Y3t,"SPAN",{});var K3t=s(aMe);T(wx.$$.fragment,K3t),K3t.forEach(t),Y3t.forEach(t),Tkr=i(nDe),nMe=n(nDe,"SPAN",{});var Z3t=s(nMe);Mkr=r(Z3t,"FlaxAutoModelForSequenceClassification"),Z3t.forEach(t),nDe.forEach(t),Zqe=i(f),ur=n(f,"DIV",{class:!0});var Wl=s(ur);T(Ax.$$.fragment,Wl),Ekr=i(Wl),Oc=n(Wl,"P",{});var JZ=s(Oc);Ckr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cY=n(JZ,"A",{href:!0});var ewt=s(cY);wkr=r(ewt,"from_pretrained()"),ewt.forEach(t),Akr=r(JZ," class method or the "),fY=n(JZ,"A",{href:!0});var owt=s(fY);ykr=r(owt,"from_config()"),owt.forEach(t),Lkr=r(JZ,` class
method.`),JZ.forEach(t),xkr=i(Wl),yx=n(Wl,"P",{});var sDe=s(yx);$kr=r(sDe,"This class cannot be instantiated directly using "),sMe=n(sDe,"CODE",{});var rwt=s(sMe);kkr=r(rwt,"__init__()"),rwt.forEach(t),Skr=r(sDe," (throws an error)."),sDe.forEach(t),Rkr=i(Wl),Xt=n(Wl,"DIV",{class:!0});var NA=s(Xt);T(Lx.$$.fragment,NA),Bkr=i(NA),lMe=n(NA,"P",{});var twt=s(lMe);Pkr=r(twt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),twt.forEach(t),Ikr=i(NA),Vc=n(NA,"P",{});var YZ=s(Vc);qkr=r(YZ,`Note:
Loading a model from its configuration file does `),iMe=n(YZ,"STRONG",{});var awt=s(iMe);Nkr=r(awt,"not"),awt.forEach(t),jkr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=n(YZ,"A",{href:!0});var nwt=s(mY);Dkr=r(nwt,"from_pretrained()"),nwt.forEach(t),Gkr=r(YZ," to load the model weights."),YZ.forEach(t),Okr=i(NA),T(LC.$$.fragment,NA),NA.forEach(t),Vkr=i(Wl),Xr=n(Wl,"DIV",{class:!0});var Hl=s(Xr);T(xx.$$.fragment,Hl),Xkr=i(Hl),dMe=n(Hl,"P",{});var swt=s(dMe);zkr=r(swt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),swt.forEach(t),Qkr=i(Hl),bn=n(Hl,"P",{});var jA=s(bn);Wkr=r(jA,"The model class to instantiate is selected based on the "),cMe=n(jA,"CODE",{});var lwt=s(cMe);Hkr=r(lwt,"model_type"),lwt.forEach(t),Ukr=r(jA,` property of the config object (either
passed as an argument or loaded from `),fMe=n(jA,"CODE",{});var iwt=s(fMe);Jkr=r(iwt,"pretrained_model_name_or_path"),iwt.forEach(t),Ykr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=n(jA,"CODE",{});var dwt=s(mMe);Kkr=r(dwt,"pretrained_model_name_or_path"),dwt.forEach(t),Zkr=r(jA,":"),jA.forEach(t),eSr=i(Hl),xe=n(Hl,"UL",{});var Pe=s(xe);xC=n(Pe,"LI",{});var EPe=s(xC);gMe=n(EPe,"STRONG",{});var cwt=s(gMe);oSr=r(cwt,"albert"),cwt.forEach(t),rSr=r(EPe," \u2014 "),gY=n(EPe,"A",{href:!0});var fwt=s(gY);tSr=r(fwt,"FlaxAlbertForSequenceClassification"),fwt.forEach(t),aSr=r(EPe," (ALBERT model)"),EPe.forEach(t),nSr=i(Pe),$C=n(Pe,"LI",{});var CPe=s($C);hMe=n(CPe,"STRONG",{});var mwt=s(hMe);sSr=r(mwt,"bart"),mwt.forEach(t),lSr=r(CPe," \u2014 "),hY=n(CPe,"A",{href:!0});var gwt=s(hY);iSr=r(gwt,"FlaxBartForSequenceClassification"),gwt.forEach(t),dSr=r(CPe," (BART model)"),CPe.forEach(t),cSr=i(Pe),kC=n(Pe,"LI",{});var wPe=s(kC);pMe=n(wPe,"STRONG",{});var hwt=s(pMe);fSr=r(hwt,"bert"),hwt.forEach(t),mSr=r(wPe," \u2014 "),pY=n(wPe,"A",{href:!0});var pwt=s(pY);gSr=r(pwt,"FlaxBertForSequenceClassification"),pwt.forEach(t),hSr=r(wPe," (BERT model)"),wPe.forEach(t),pSr=i(Pe),SC=n(Pe,"LI",{});var APe=s(SC);uMe=n(APe,"STRONG",{});var uwt=s(uMe);uSr=r(uwt,"big_bird"),uwt.forEach(t),_Sr=r(APe," \u2014 "),uY=n(APe,"A",{href:!0});var _wt=s(uY);bSr=r(_wt,"FlaxBigBirdForSequenceClassification"),_wt.forEach(t),vSr=r(APe," (BigBird model)"),APe.forEach(t),FSr=i(Pe),RC=n(Pe,"LI",{});var yPe=s(RC);_Me=n(yPe,"STRONG",{});var bwt=s(_Me);TSr=r(bwt,"distilbert"),bwt.forEach(t),MSr=r(yPe," \u2014 "),_Y=n(yPe,"A",{href:!0});var vwt=s(_Y);ESr=r(vwt,"FlaxDistilBertForSequenceClassification"),vwt.forEach(t),CSr=r(yPe," (DistilBERT model)"),yPe.forEach(t),wSr=i(Pe),BC=n(Pe,"LI",{});var LPe=s(BC);bMe=n(LPe,"STRONG",{});var Fwt=s(bMe);ASr=r(Fwt,"electra"),Fwt.forEach(t),ySr=r(LPe," \u2014 "),bY=n(LPe,"A",{href:!0});var Twt=s(bY);LSr=r(Twt,"FlaxElectraForSequenceClassification"),Twt.forEach(t),xSr=r(LPe," (ELECTRA model)"),LPe.forEach(t),$Sr=i(Pe),PC=n(Pe,"LI",{});var xPe=s(PC);vMe=n(xPe,"STRONG",{});var Mwt=s(vMe);kSr=r(Mwt,"mbart"),Mwt.forEach(t),SSr=r(xPe," \u2014 "),vY=n(xPe,"A",{href:!0});var Ewt=s(vY);RSr=r(Ewt,"FlaxMBartForSequenceClassification"),Ewt.forEach(t),BSr=r(xPe," (mBART model)"),xPe.forEach(t),PSr=i(Pe),IC=n(Pe,"LI",{});var $Pe=s(IC);FMe=n($Pe,"STRONG",{});var Cwt=s(FMe);ISr=r(Cwt,"roberta"),Cwt.forEach(t),qSr=r($Pe," \u2014 "),FY=n($Pe,"A",{href:!0});var wwt=s(FY);NSr=r(wwt,"FlaxRobertaForSequenceClassification"),wwt.forEach(t),jSr=r($Pe," (RoBERTa model)"),$Pe.forEach(t),DSr=i(Pe),qC=n(Pe,"LI",{});var kPe=s(qC);TMe=n(kPe,"STRONG",{});var Awt=s(TMe);GSr=r(Awt,"roformer"),Awt.forEach(t),OSr=r(kPe," \u2014 "),TY=n(kPe,"A",{href:!0});var ywt=s(TY);VSr=r(ywt,"FlaxRoFormerForSequenceClassification"),ywt.forEach(t),XSr=r(kPe," (RoFormer model)"),kPe.forEach(t),zSr=i(Pe),NC=n(Pe,"LI",{});var SPe=s(NC);MMe=n(SPe,"STRONG",{});var Lwt=s(MMe);QSr=r(Lwt,"xlm-roberta"),Lwt.forEach(t),WSr=r(SPe," \u2014 "),MY=n(SPe,"A",{href:!0});var xwt=s(MY);HSr=r(xwt,"FlaxXLMRobertaForSequenceClassification"),xwt.forEach(t),USr=r(SPe," (XLM-RoBERTa model)"),SPe.forEach(t),Pe.forEach(t),JSr=i(Hl),T(jC.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),eNe=i(f),Xc=n(f,"H2",{class:!0});var lDe=s(Xc);DC=n(lDe,"A",{id:!0,class:!0,href:!0});var $wt=s(DC);EMe=n($wt,"SPAN",{});var kwt=s(EMe);T($x.$$.fragment,kwt),kwt.forEach(t),$wt.forEach(t),YSr=i(lDe),CMe=n(lDe,"SPAN",{});var Swt=s(CMe);KSr=r(Swt,"FlaxAutoModelForQuestionAnswering"),Swt.forEach(t),lDe.forEach(t),oNe=i(f),_r=n(f,"DIV",{class:!0});var Ul=s(_r);T(kx.$$.fragment,Ul),ZSr=i(Ul),zc=n(Ul,"P",{});var KZ=s(zc);eRr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EY=n(KZ,"A",{href:!0});var Rwt=s(EY);oRr=r(Rwt,"from_pretrained()"),Rwt.forEach(t),rRr=r(KZ," class method or the "),CY=n(KZ,"A",{href:!0});var Bwt=s(CY);tRr=r(Bwt,"from_config()"),Bwt.forEach(t),aRr=r(KZ,` class
method.`),KZ.forEach(t),nRr=i(Ul),Sx=n(Ul,"P",{});var iDe=s(Sx);sRr=r(iDe,"This class cannot be instantiated directly using "),wMe=n(iDe,"CODE",{});var Pwt=s(wMe);lRr=r(Pwt,"__init__()"),Pwt.forEach(t),iRr=r(iDe," (throws an error)."),iDe.forEach(t),dRr=i(Ul),zt=n(Ul,"DIV",{class:!0});var DA=s(zt);T(Rx.$$.fragment,DA),cRr=i(DA),AMe=n(DA,"P",{});var Iwt=s(AMe);fRr=r(Iwt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Iwt.forEach(t),mRr=i(DA),Qc=n(DA,"P",{});var ZZ=s(Qc);gRr=r(ZZ,`Note:
Loading a model from its configuration file does `),yMe=n(ZZ,"STRONG",{});var qwt=s(yMe);hRr=r(qwt,"not"),qwt.forEach(t),pRr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=n(ZZ,"A",{href:!0});var Nwt=s(wY);uRr=r(Nwt,"from_pretrained()"),Nwt.forEach(t),_Rr=r(ZZ," to load the model weights."),ZZ.forEach(t),bRr=i(DA),T(GC.$$.fragment,DA),DA.forEach(t),vRr=i(Ul),zr=n(Ul,"DIV",{class:!0});var Jl=s(zr);T(Bx.$$.fragment,Jl),FRr=i(Jl),LMe=n(Jl,"P",{});var jwt=s(LMe);TRr=r(jwt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),jwt.forEach(t),MRr=i(Jl),vn=n(Jl,"P",{});var GA=s(vn);ERr=r(GA,"The model class to instantiate is selected based on the "),xMe=n(GA,"CODE",{});var Dwt=s(xMe);CRr=r(Dwt,"model_type"),Dwt.forEach(t),wRr=r(GA,` property of the config object (either
passed as an argument or loaded from `),$Me=n(GA,"CODE",{});var Gwt=s($Me);ARr=r(Gwt,"pretrained_model_name_or_path"),Gwt.forEach(t),yRr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kMe=n(GA,"CODE",{});var Owt=s(kMe);LRr=r(Owt,"pretrained_model_name_or_path"),Owt.forEach(t),xRr=r(GA,":"),GA.forEach(t),$Rr=i(Jl),$e=n(Jl,"UL",{});var Ie=s($e);OC=n(Ie,"LI",{});var RPe=s(OC);SMe=n(RPe,"STRONG",{});var Vwt=s(SMe);kRr=r(Vwt,"albert"),Vwt.forEach(t),SRr=r(RPe," \u2014 "),AY=n(RPe,"A",{href:!0});var Xwt=s(AY);RRr=r(Xwt,"FlaxAlbertForQuestionAnswering"),Xwt.forEach(t),BRr=r(RPe," (ALBERT model)"),RPe.forEach(t),PRr=i(Ie),VC=n(Ie,"LI",{});var BPe=s(VC);RMe=n(BPe,"STRONG",{});var zwt=s(RMe);IRr=r(zwt,"bart"),zwt.forEach(t),qRr=r(BPe," \u2014 "),yY=n(BPe,"A",{href:!0});var Qwt=s(yY);NRr=r(Qwt,"FlaxBartForQuestionAnswering"),Qwt.forEach(t),jRr=r(BPe," (BART model)"),BPe.forEach(t),DRr=i(Ie),XC=n(Ie,"LI",{});var PPe=s(XC);BMe=n(PPe,"STRONG",{});var Wwt=s(BMe);GRr=r(Wwt,"bert"),Wwt.forEach(t),ORr=r(PPe," \u2014 "),LY=n(PPe,"A",{href:!0});var Hwt=s(LY);VRr=r(Hwt,"FlaxBertForQuestionAnswering"),Hwt.forEach(t),XRr=r(PPe," (BERT model)"),PPe.forEach(t),zRr=i(Ie),zC=n(Ie,"LI",{});var IPe=s(zC);PMe=n(IPe,"STRONG",{});var Uwt=s(PMe);QRr=r(Uwt,"big_bird"),Uwt.forEach(t),WRr=r(IPe," \u2014 "),xY=n(IPe,"A",{href:!0});var Jwt=s(xY);HRr=r(Jwt,"FlaxBigBirdForQuestionAnswering"),Jwt.forEach(t),URr=r(IPe," (BigBird model)"),IPe.forEach(t),JRr=i(Ie),QC=n(Ie,"LI",{});var qPe=s(QC);IMe=n(qPe,"STRONG",{});var Ywt=s(IMe);YRr=r(Ywt,"distilbert"),Ywt.forEach(t),KRr=r(qPe," \u2014 "),$Y=n(qPe,"A",{href:!0});var Kwt=s($Y);ZRr=r(Kwt,"FlaxDistilBertForQuestionAnswering"),Kwt.forEach(t),eBr=r(qPe," (DistilBERT model)"),qPe.forEach(t),oBr=i(Ie),WC=n(Ie,"LI",{});var NPe=s(WC);qMe=n(NPe,"STRONG",{});var Zwt=s(qMe);rBr=r(Zwt,"electra"),Zwt.forEach(t),tBr=r(NPe," \u2014 "),kY=n(NPe,"A",{href:!0});var eAt=s(kY);aBr=r(eAt,"FlaxElectraForQuestionAnswering"),eAt.forEach(t),nBr=r(NPe," (ELECTRA model)"),NPe.forEach(t),sBr=i(Ie),HC=n(Ie,"LI",{});var jPe=s(HC);NMe=n(jPe,"STRONG",{});var oAt=s(NMe);lBr=r(oAt,"mbart"),oAt.forEach(t),iBr=r(jPe," \u2014 "),SY=n(jPe,"A",{href:!0});var rAt=s(SY);dBr=r(rAt,"FlaxMBartForQuestionAnswering"),rAt.forEach(t),cBr=r(jPe," (mBART model)"),jPe.forEach(t),fBr=i(Ie),UC=n(Ie,"LI",{});var DPe=s(UC);jMe=n(DPe,"STRONG",{});var tAt=s(jMe);mBr=r(tAt,"roberta"),tAt.forEach(t),gBr=r(DPe," \u2014 "),RY=n(DPe,"A",{href:!0});var aAt=s(RY);hBr=r(aAt,"FlaxRobertaForQuestionAnswering"),aAt.forEach(t),pBr=r(DPe," (RoBERTa model)"),DPe.forEach(t),uBr=i(Ie),JC=n(Ie,"LI",{});var GPe=s(JC);DMe=n(GPe,"STRONG",{});var nAt=s(DMe);_Br=r(nAt,"roformer"),nAt.forEach(t),bBr=r(GPe," \u2014 "),BY=n(GPe,"A",{href:!0});var sAt=s(BY);vBr=r(sAt,"FlaxRoFormerForQuestionAnswering"),sAt.forEach(t),FBr=r(GPe," (RoFormer model)"),GPe.forEach(t),TBr=i(Ie),YC=n(Ie,"LI",{});var OPe=s(YC);GMe=n(OPe,"STRONG",{});var lAt=s(GMe);MBr=r(lAt,"xlm-roberta"),lAt.forEach(t),EBr=r(OPe," \u2014 "),PY=n(OPe,"A",{href:!0});var iAt=s(PY);CBr=r(iAt,"FlaxXLMRobertaForQuestionAnswering"),iAt.forEach(t),wBr=r(OPe," (XLM-RoBERTa model)"),OPe.forEach(t),Ie.forEach(t),ABr=i(Jl),T(KC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),rNe=i(f),Wc=n(f,"H2",{class:!0});var dDe=s(Wc);ZC=n(dDe,"A",{id:!0,class:!0,href:!0});var dAt=s(ZC);OMe=n(dAt,"SPAN",{});var cAt=s(OMe);T(Px.$$.fragment,cAt),cAt.forEach(t),dAt.forEach(t),yBr=i(dDe),VMe=n(dDe,"SPAN",{});var fAt=s(VMe);LBr=r(fAt,"FlaxAutoModelForTokenClassification"),fAt.forEach(t),dDe.forEach(t),tNe=i(f),br=n(f,"DIV",{class:!0});var Yl=s(br);T(Ix.$$.fragment,Yl),xBr=i(Yl),Hc=n(Yl,"P",{});var eee=s(Hc);$Br=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),IY=n(eee,"A",{href:!0});var mAt=s(IY);kBr=r(mAt,"from_pretrained()"),mAt.forEach(t),SBr=r(eee," class method or the "),qY=n(eee,"A",{href:!0});var gAt=s(qY);RBr=r(gAt,"from_config()"),gAt.forEach(t),BBr=r(eee,` class
method.`),eee.forEach(t),PBr=i(Yl),qx=n(Yl,"P",{});var cDe=s(qx);IBr=r(cDe,"This class cannot be instantiated directly using "),XMe=n(cDe,"CODE",{});var hAt=s(XMe);qBr=r(hAt,"__init__()"),hAt.forEach(t),NBr=r(cDe," (throws an error)."),cDe.forEach(t),jBr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var OA=s(Qt);T(Nx.$$.fragment,OA),DBr=i(OA),zMe=n(OA,"P",{});var pAt=s(zMe);GBr=r(pAt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pAt.forEach(t),OBr=i(OA),Uc=n(OA,"P",{});var oee=s(Uc);VBr=r(oee,`Note:
Loading a model from its configuration file does `),QMe=n(oee,"STRONG",{});var uAt=s(QMe);XBr=r(uAt,"not"),uAt.forEach(t),zBr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=n(oee,"A",{href:!0});var _At=s(NY);QBr=r(_At,"from_pretrained()"),_At.forEach(t),WBr=r(oee," to load the model weights."),oee.forEach(t),HBr=i(OA),T(e3.$$.fragment,OA),OA.forEach(t),UBr=i(Yl),Qr=n(Yl,"DIV",{class:!0});var Kl=s(Qr);T(jx.$$.fragment,Kl),JBr=i(Kl),WMe=n(Kl,"P",{});var bAt=s(WMe);YBr=r(bAt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bAt.forEach(t),KBr=i(Kl),Fn=n(Kl,"P",{});var VA=s(Fn);ZBr=r(VA,"The model class to instantiate is selected based on the "),HMe=n(VA,"CODE",{});var vAt=s(HMe);ePr=r(vAt,"model_type"),vAt.forEach(t),oPr=r(VA,` property of the config object (either
passed as an argument or loaded from `),UMe=n(VA,"CODE",{});var FAt=s(UMe);rPr=r(FAt,"pretrained_model_name_or_path"),FAt.forEach(t),tPr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JMe=n(VA,"CODE",{});var TAt=s(JMe);aPr=r(TAt,"pretrained_model_name_or_path"),TAt.forEach(t),nPr=r(VA,":"),VA.forEach(t),sPr=i(Kl),De=n(Kl,"UL",{});var Fo=s(De);o3=n(Fo,"LI",{});var VPe=s(o3);YMe=n(VPe,"STRONG",{});var MAt=s(YMe);lPr=r(MAt,"albert"),MAt.forEach(t),iPr=r(VPe," \u2014 "),jY=n(VPe,"A",{href:!0});var EAt=s(jY);dPr=r(EAt,"FlaxAlbertForTokenClassification"),EAt.forEach(t),cPr=r(VPe," (ALBERT model)"),VPe.forEach(t),fPr=i(Fo),r3=n(Fo,"LI",{});var XPe=s(r3);KMe=n(XPe,"STRONG",{});var CAt=s(KMe);mPr=r(CAt,"bert"),CAt.forEach(t),gPr=r(XPe," \u2014 "),DY=n(XPe,"A",{href:!0});var wAt=s(DY);hPr=r(wAt,"FlaxBertForTokenClassification"),wAt.forEach(t),pPr=r(XPe," (BERT model)"),XPe.forEach(t),uPr=i(Fo),t3=n(Fo,"LI",{});var zPe=s(t3);ZMe=n(zPe,"STRONG",{});var AAt=s(ZMe);_Pr=r(AAt,"big_bird"),AAt.forEach(t),bPr=r(zPe," \u2014 "),GY=n(zPe,"A",{href:!0});var yAt=s(GY);vPr=r(yAt,"FlaxBigBirdForTokenClassification"),yAt.forEach(t),FPr=r(zPe," (BigBird model)"),zPe.forEach(t),TPr=i(Fo),a3=n(Fo,"LI",{});var QPe=s(a3);e4e=n(QPe,"STRONG",{});var LAt=s(e4e);MPr=r(LAt,"distilbert"),LAt.forEach(t),EPr=r(QPe," \u2014 "),OY=n(QPe,"A",{href:!0});var xAt=s(OY);CPr=r(xAt,"FlaxDistilBertForTokenClassification"),xAt.forEach(t),wPr=r(QPe," (DistilBERT model)"),QPe.forEach(t),APr=i(Fo),n3=n(Fo,"LI",{});var WPe=s(n3);o4e=n(WPe,"STRONG",{});var $At=s(o4e);yPr=r($At,"electra"),$At.forEach(t),LPr=r(WPe," \u2014 "),VY=n(WPe,"A",{href:!0});var kAt=s(VY);xPr=r(kAt,"FlaxElectraForTokenClassification"),kAt.forEach(t),$Pr=r(WPe," (ELECTRA model)"),WPe.forEach(t),kPr=i(Fo),s3=n(Fo,"LI",{});var HPe=s(s3);r4e=n(HPe,"STRONG",{});var SAt=s(r4e);SPr=r(SAt,"roberta"),SAt.forEach(t),RPr=r(HPe," \u2014 "),XY=n(HPe,"A",{href:!0});var RAt=s(XY);BPr=r(RAt,"FlaxRobertaForTokenClassification"),RAt.forEach(t),PPr=r(HPe," (RoBERTa model)"),HPe.forEach(t),IPr=i(Fo),l3=n(Fo,"LI",{});var UPe=s(l3);t4e=n(UPe,"STRONG",{});var BAt=s(t4e);qPr=r(BAt,"roformer"),BAt.forEach(t),NPr=r(UPe," \u2014 "),zY=n(UPe,"A",{href:!0});var PAt=s(zY);jPr=r(PAt,"FlaxRoFormerForTokenClassification"),PAt.forEach(t),DPr=r(UPe," (RoFormer model)"),UPe.forEach(t),GPr=i(Fo),i3=n(Fo,"LI",{});var JPe=s(i3);a4e=n(JPe,"STRONG",{});var IAt=s(a4e);OPr=r(IAt,"xlm-roberta"),IAt.forEach(t),VPr=r(JPe," \u2014 "),QY=n(JPe,"A",{href:!0});var qAt=s(QY);XPr=r(qAt,"FlaxXLMRobertaForTokenClassification"),qAt.forEach(t),zPr=r(JPe," (XLM-RoBERTa model)"),JPe.forEach(t),Fo.forEach(t),QPr=i(Kl),T(d3.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),aNe=i(f),Jc=n(f,"H2",{class:!0});var fDe=s(Jc);c3=n(fDe,"A",{id:!0,class:!0,href:!0});var NAt=s(c3);n4e=n(NAt,"SPAN",{});var jAt=s(n4e);T(Dx.$$.fragment,jAt),jAt.forEach(t),NAt.forEach(t),WPr=i(fDe),s4e=n(fDe,"SPAN",{});var DAt=s(s4e);HPr=r(DAt,"FlaxAutoModelForMultipleChoice"),DAt.forEach(t),fDe.forEach(t),nNe=i(f),vr=n(f,"DIV",{class:!0});var Zl=s(vr);T(Gx.$$.fragment,Zl),UPr=i(Zl),Yc=n(Zl,"P",{});var ree=s(Yc);JPr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WY=n(ree,"A",{href:!0});var GAt=s(WY);YPr=r(GAt,"from_pretrained()"),GAt.forEach(t),KPr=r(ree," class method or the "),HY=n(ree,"A",{href:!0});var OAt=s(HY);ZPr=r(OAt,"from_config()"),OAt.forEach(t),eIr=r(ree,` class
method.`),ree.forEach(t),oIr=i(Zl),Ox=n(Zl,"P",{});var mDe=s(Ox);rIr=r(mDe,"This class cannot be instantiated directly using "),l4e=n(mDe,"CODE",{});var VAt=s(l4e);tIr=r(VAt,"__init__()"),VAt.forEach(t),aIr=r(mDe," (throws an error)."),mDe.forEach(t),nIr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var XA=s(Wt);T(Vx.$$.fragment,XA),sIr=i(XA),i4e=n(XA,"P",{});var XAt=s(i4e);lIr=r(XAt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),XAt.forEach(t),iIr=i(XA),Kc=n(XA,"P",{});var tee=s(Kc);dIr=r(tee,`Note:
Loading a model from its configuration file does `),d4e=n(tee,"STRONG",{});var zAt=s(d4e);cIr=r(zAt,"not"),zAt.forEach(t),fIr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=n(tee,"A",{href:!0});var QAt=s(UY);mIr=r(QAt,"from_pretrained()"),QAt.forEach(t),gIr=r(tee," to load the model weights."),tee.forEach(t),hIr=i(XA),T(f3.$$.fragment,XA),XA.forEach(t),pIr=i(Zl),Wr=n(Zl,"DIV",{class:!0});var ei=s(Wr);T(Xx.$$.fragment,ei),uIr=i(ei),c4e=n(ei,"P",{});var WAt=s(c4e);_Ir=r(WAt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),WAt.forEach(t),bIr=i(ei),Tn=n(ei,"P",{});var zA=s(Tn);vIr=r(zA,"The model class to instantiate is selected based on the "),f4e=n(zA,"CODE",{});var HAt=s(f4e);FIr=r(HAt,"model_type"),HAt.forEach(t),TIr=r(zA,` property of the config object (either
passed as an argument or loaded from `),m4e=n(zA,"CODE",{});var UAt=s(m4e);MIr=r(UAt,"pretrained_model_name_or_path"),UAt.forEach(t),EIr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g4e=n(zA,"CODE",{});var JAt=s(g4e);CIr=r(JAt,"pretrained_model_name_or_path"),JAt.forEach(t),wIr=r(zA,":"),zA.forEach(t),AIr=i(ei),Ge=n(ei,"UL",{});var To=s(Ge);m3=n(To,"LI",{});var YPe=s(m3);h4e=n(YPe,"STRONG",{});var YAt=s(h4e);yIr=r(YAt,"albert"),YAt.forEach(t),LIr=r(YPe," \u2014 "),JY=n(YPe,"A",{href:!0});var KAt=s(JY);xIr=r(KAt,"FlaxAlbertForMultipleChoice"),KAt.forEach(t),$Ir=r(YPe," (ALBERT model)"),YPe.forEach(t),kIr=i(To),g3=n(To,"LI",{});var KPe=s(g3);p4e=n(KPe,"STRONG",{});var ZAt=s(p4e);SIr=r(ZAt,"bert"),ZAt.forEach(t),RIr=r(KPe," \u2014 "),YY=n(KPe,"A",{href:!0});var e6t=s(YY);BIr=r(e6t,"FlaxBertForMultipleChoice"),e6t.forEach(t),PIr=r(KPe," (BERT model)"),KPe.forEach(t),IIr=i(To),h3=n(To,"LI",{});var ZPe=s(h3);u4e=n(ZPe,"STRONG",{});var o6t=s(u4e);qIr=r(o6t,"big_bird"),o6t.forEach(t),NIr=r(ZPe," \u2014 "),KY=n(ZPe,"A",{href:!0});var r6t=s(KY);jIr=r(r6t,"FlaxBigBirdForMultipleChoice"),r6t.forEach(t),DIr=r(ZPe," (BigBird model)"),ZPe.forEach(t),GIr=i(To),p3=n(To,"LI",{});var eIe=s(p3);_4e=n(eIe,"STRONG",{});var t6t=s(_4e);OIr=r(t6t,"distilbert"),t6t.forEach(t),VIr=r(eIe," \u2014 "),ZY=n(eIe,"A",{href:!0});var a6t=s(ZY);XIr=r(a6t,"FlaxDistilBertForMultipleChoice"),a6t.forEach(t),zIr=r(eIe," (DistilBERT model)"),eIe.forEach(t),QIr=i(To),u3=n(To,"LI",{});var oIe=s(u3);b4e=n(oIe,"STRONG",{});var n6t=s(b4e);WIr=r(n6t,"electra"),n6t.forEach(t),HIr=r(oIe," \u2014 "),eK=n(oIe,"A",{href:!0});var s6t=s(eK);UIr=r(s6t,"FlaxElectraForMultipleChoice"),s6t.forEach(t),JIr=r(oIe," (ELECTRA model)"),oIe.forEach(t),YIr=i(To),_3=n(To,"LI",{});var rIe=s(_3);v4e=n(rIe,"STRONG",{});var l6t=s(v4e);KIr=r(l6t,"roberta"),l6t.forEach(t),ZIr=r(rIe," \u2014 "),oK=n(rIe,"A",{href:!0});var i6t=s(oK);eqr=r(i6t,"FlaxRobertaForMultipleChoice"),i6t.forEach(t),oqr=r(rIe," (RoBERTa model)"),rIe.forEach(t),rqr=i(To),b3=n(To,"LI",{});var tIe=s(b3);F4e=n(tIe,"STRONG",{});var d6t=s(F4e);tqr=r(d6t,"roformer"),d6t.forEach(t),aqr=r(tIe," \u2014 "),rK=n(tIe,"A",{href:!0});var c6t=s(rK);nqr=r(c6t,"FlaxRoFormerForMultipleChoice"),c6t.forEach(t),sqr=r(tIe," (RoFormer model)"),tIe.forEach(t),lqr=i(To),v3=n(To,"LI",{});var aIe=s(v3);T4e=n(aIe,"STRONG",{});var f6t=s(T4e);iqr=r(f6t,"xlm-roberta"),f6t.forEach(t),dqr=r(aIe," \u2014 "),tK=n(aIe,"A",{href:!0});var m6t=s(tK);cqr=r(m6t,"FlaxXLMRobertaForMultipleChoice"),m6t.forEach(t),fqr=r(aIe," (XLM-RoBERTa model)"),aIe.forEach(t),To.forEach(t),mqr=i(ei),T(F3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),sNe=i(f),Zc=n(f,"H2",{class:!0});var gDe=s(Zc);T3=n(gDe,"A",{id:!0,class:!0,href:!0});var g6t=s(T3);M4e=n(g6t,"SPAN",{});var h6t=s(M4e);T(zx.$$.fragment,h6t),h6t.forEach(t),g6t.forEach(t),gqr=i(gDe),E4e=n(gDe,"SPAN",{});var p6t=s(E4e);hqr=r(p6t,"FlaxAutoModelForNextSentencePrediction"),p6t.forEach(t),gDe.forEach(t),lNe=i(f),Fr=n(f,"DIV",{class:!0});var oi=s(Fr);T(Qx.$$.fragment,oi),pqr=i(oi),ef=n(oi,"P",{});var aee=s(ef);uqr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aK=n(aee,"A",{href:!0});var u6t=s(aK);_qr=r(u6t,"from_pretrained()"),u6t.forEach(t),bqr=r(aee," class method or the "),nK=n(aee,"A",{href:!0});var _6t=s(nK);vqr=r(_6t,"from_config()"),_6t.forEach(t),Fqr=r(aee,` class
method.`),aee.forEach(t),Tqr=i(oi),Wx=n(oi,"P",{});var hDe=s(Wx);Mqr=r(hDe,"This class cannot be instantiated directly using "),C4e=n(hDe,"CODE",{});var b6t=s(C4e);Eqr=r(b6t,"__init__()"),b6t.forEach(t),Cqr=r(hDe," (throws an error)."),hDe.forEach(t),wqr=i(oi),Ht=n(oi,"DIV",{class:!0});var QA=s(Ht);T(Hx.$$.fragment,QA),Aqr=i(QA),w4e=n(QA,"P",{});var v6t=s(w4e);yqr=r(v6t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),v6t.forEach(t),Lqr=i(QA),of=n(QA,"P",{});var nee=s(of);xqr=r(nee,`Note:
Loading a model from its configuration file does `),A4e=n(nee,"STRONG",{});var F6t=s(A4e);$qr=r(F6t,"not"),F6t.forEach(t),kqr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=n(nee,"A",{href:!0});var T6t=s(sK);Sqr=r(T6t,"from_pretrained()"),T6t.forEach(t),Rqr=r(nee," to load the model weights."),nee.forEach(t),Bqr=i(QA),T(M3.$$.fragment,QA),QA.forEach(t),Pqr=i(oi),Hr=n(oi,"DIV",{class:!0});var ri=s(Hr);T(Ux.$$.fragment,ri),Iqr=i(ri),y4e=n(ri,"P",{});var M6t=s(y4e);qqr=r(M6t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),M6t.forEach(t),Nqr=i(ri),Mn=n(ri,"P",{});var WA=s(Mn);jqr=r(WA,"The model class to instantiate is selected based on the "),L4e=n(WA,"CODE",{});var E6t=s(L4e);Dqr=r(E6t,"model_type"),E6t.forEach(t),Gqr=r(WA,` property of the config object (either
passed as an argument or loaded from `),x4e=n(WA,"CODE",{});var C6t=s(x4e);Oqr=r(C6t,"pretrained_model_name_or_path"),C6t.forEach(t),Vqr=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=n(WA,"CODE",{});var w6t=s($4e);Xqr=r(w6t,"pretrained_model_name_or_path"),w6t.forEach(t),zqr=r(WA,":"),WA.forEach(t),Qqr=i(ri),k4e=n(ri,"UL",{});var A6t=s(k4e);E3=n(A6t,"LI",{});var nIe=s(E3);S4e=n(nIe,"STRONG",{});var y6t=s(S4e);Wqr=r(y6t,"bert"),y6t.forEach(t),Hqr=r(nIe," \u2014 "),lK=n(nIe,"A",{href:!0});var L6t=s(lK);Uqr=r(L6t,"FlaxBertForNextSentencePrediction"),L6t.forEach(t),Jqr=r(nIe," (BERT model)"),nIe.forEach(t),A6t.forEach(t),Yqr=i(ri),T(C3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),iNe=i(f),rf=n(f,"H2",{class:!0});var pDe=s(rf);w3=n(pDe,"A",{id:!0,class:!0,href:!0});var x6t=s(w3);R4e=n(x6t,"SPAN",{});var $6t=s(R4e);T(Jx.$$.fragment,$6t),$6t.forEach(t),x6t.forEach(t),Kqr=i(pDe),B4e=n(pDe,"SPAN",{});var k6t=s(B4e);Zqr=r(k6t,"FlaxAutoModelForImageClassification"),k6t.forEach(t),pDe.forEach(t),dNe=i(f),Tr=n(f,"DIV",{class:!0});var ti=s(Tr);T(Yx.$$.fragment,ti),eNr=i(ti),tf=n(ti,"P",{});var see=s(tf);oNr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iK=n(see,"A",{href:!0});var S6t=s(iK);rNr=r(S6t,"from_pretrained()"),S6t.forEach(t),tNr=r(see," class method or the "),dK=n(see,"A",{href:!0});var R6t=s(dK);aNr=r(R6t,"from_config()"),R6t.forEach(t),nNr=r(see,` class
method.`),see.forEach(t),sNr=i(ti),Kx=n(ti,"P",{});var uDe=s(Kx);lNr=r(uDe,"This class cannot be instantiated directly using "),P4e=n(uDe,"CODE",{});var B6t=s(P4e);iNr=r(B6t,"__init__()"),B6t.forEach(t),dNr=r(uDe," (throws an error)."),uDe.forEach(t),cNr=i(ti),Ut=n(ti,"DIV",{class:!0});var HA=s(Ut);T(Zx.$$.fragment,HA),fNr=i(HA),I4e=n(HA,"P",{});var P6t=s(I4e);mNr=r(P6t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),P6t.forEach(t),gNr=i(HA),af=n(HA,"P",{});var lee=s(af);hNr=r(lee,`Note:
Loading a model from its configuration file does `),q4e=n(lee,"STRONG",{});var I6t=s(q4e);pNr=r(I6t,"not"),I6t.forEach(t),uNr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=n(lee,"A",{href:!0});var q6t=s(cK);_Nr=r(q6t,"from_pretrained()"),q6t.forEach(t),bNr=r(lee," to load the model weights."),lee.forEach(t),vNr=i(HA),T(A3.$$.fragment,HA),HA.forEach(t),FNr=i(ti),Ur=n(ti,"DIV",{class:!0});var ai=s(Ur);T(e9.$$.fragment,ai),TNr=i(ai),N4e=n(ai,"P",{});var N6t=s(N4e);MNr=r(N6t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),N6t.forEach(t),ENr=i(ai),En=n(ai,"P",{});var UA=s(En);CNr=r(UA,"The model class to instantiate is selected based on the "),j4e=n(UA,"CODE",{});var j6t=s(j4e);wNr=r(j6t,"model_type"),j6t.forEach(t),ANr=r(UA,` property of the config object (either
passed as an argument or loaded from `),D4e=n(UA,"CODE",{});var D6t=s(D4e);yNr=r(D6t,"pretrained_model_name_or_path"),D6t.forEach(t),LNr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G4e=n(UA,"CODE",{});var G6t=s(G4e);xNr=r(G6t,"pretrained_model_name_or_path"),G6t.forEach(t),$Nr=r(UA,":"),UA.forEach(t),kNr=i(ai),o9=n(ai,"UL",{});var _De=s(o9);y3=n(_De,"LI",{});var sIe=s(y3);O4e=n(sIe,"STRONG",{});var O6t=s(O4e);SNr=r(O6t,"beit"),O6t.forEach(t),RNr=r(sIe," \u2014 "),fK=n(sIe,"A",{href:!0});var V6t=s(fK);BNr=r(V6t,"FlaxBeitForImageClassification"),V6t.forEach(t),PNr=r(sIe," (BEiT model)"),sIe.forEach(t),INr=i(_De),L3=n(_De,"LI",{});var lIe=s(L3);V4e=n(lIe,"STRONG",{});var X6t=s(V4e);qNr=r(X6t,"vit"),X6t.forEach(t),NNr=r(lIe," \u2014 "),mK=n(lIe,"A",{href:!0});var z6t=s(mK);jNr=r(z6t,"FlaxViTForImageClassification"),z6t.forEach(t),DNr=r(lIe," (ViT model)"),lIe.forEach(t),_De.forEach(t),GNr=i(ai),T(x3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),cNe=i(f),nf=n(f,"H2",{class:!0});var bDe=s(nf);$3=n(bDe,"A",{id:!0,class:!0,href:!0});var Q6t=s($3);X4e=n(Q6t,"SPAN",{});var W6t=s(X4e);T(r9.$$.fragment,W6t),W6t.forEach(t),Q6t.forEach(t),ONr=i(bDe),z4e=n(bDe,"SPAN",{});var H6t=s(z4e);VNr=r(H6t,"FlaxAutoModelForVision2Seq"),H6t.forEach(t),bDe.forEach(t),fNe=i(f),Mr=n(f,"DIV",{class:!0});var ni=s(Mr);T(t9.$$.fragment,ni),XNr=i(ni),sf=n(ni,"P",{});var iee=s(sf);zNr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gK=n(iee,"A",{href:!0});var U6t=s(gK);QNr=r(U6t,"from_pretrained()"),U6t.forEach(t),WNr=r(iee," class method or the "),hK=n(iee,"A",{href:!0});var J6t=s(hK);HNr=r(J6t,"from_config()"),J6t.forEach(t),UNr=r(iee,` class
method.`),iee.forEach(t),JNr=i(ni),a9=n(ni,"P",{});var vDe=s(a9);YNr=r(vDe,"This class cannot be instantiated directly using "),Q4e=n(vDe,"CODE",{});var Y6t=s(Q4e);KNr=r(Y6t,"__init__()"),Y6t.forEach(t),ZNr=r(vDe," (throws an error)."),vDe.forEach(t),ejr=i(ni),Jt=n(ni,"DIV",{class:!0});var JA=s(Jt);T(n9.$$.fragment,JA),ojr=i(JA),W4e=n(JA,"P",{});var K6t=s(W4e);rjr=r(K6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),K6t.forEach(t),tjr=i(JA),lf=n(JA,"P",{});var dee=s(lf);ajr=r(dee,`Note:
Loading a model from its configuration file does `),H4e=n(dee,"STRONG",{});var Z6t=s(H4e);njr=r(Z6t,"not"),Z6t.forEach(t),sjr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=n(dee,"A",{href:!0});var eyt=s(pK);ljr=r(eyt,"from_pretrained()"),eyt.forEach(t),ijr=r(dee," to load the model weights."),dee.forEach(t),djr=i(JA),T(k3.$$.fragment,JA),JA.forEach(t),cjr=i(ni),Jr=n(ni,"DIV",{class:!0});var si=s(Jr);T(s9.$$.fragment,si),fjr=i(si),U4e=n(si,"P",{});var oyt=s(U4e);mjr=r(oyt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oyt.forEach(t),gjr=i(si),Cn=n(si,"P",{});var YA=s(Cn);hjr=r(YA,"The model class to instantiate is selected based on the "),J4e=n(YA,"CODE",{});var ryt=s(J4e);pjr=r(ryt,"model_type"),ryt.forEach(t),ujr=r(YA,` property of the config object (either
passed as an argument or loaded from `),Y4e=n(YA,"CODE",{});var tyt=s(Y4e);_jr=r(tyt,"pretrained_model_name_or_path"),tyt.forEach(t),bjr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K4e=n(YA,"CODE",{});var ayt=s(K4e);vjr=r(ayt,"pretrained_model_name_or_path"),ayt.forEach(t),Fjr=r(YA,":"),YA.forEach(t),Tjr=i(si),Z4e=n(si,"UL",{});var nyt=s(Z4e);S3=n(nyt,"LI",{});var iIe=s(S3);eEe=n(iIe,"STRONG",{});var syt=s(eEe);Mjr=r(syt,"vision-encoder-decoder"),syt.forEach(t),Ejr=r(iIe," \u2014 "),uK=n(iIe,"A",{href:!0});var lyt=s(uK);Cjr=r(lyt,"FlaxVisionEncoderDecoderModel"),lyt.forEach(t),wjr=r(iIe," (Vision Encoder decoder model)"),iIe.forEach(t),nyt.forEach(t),Ajr=i(si),T(R3.$$.fragment,si),si.forEach(t),ni.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(f8t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoTokenizer"),c(gi,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertModel"),c(uf,"id","extending-the-auto-classes"),c(uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uf,"href","#extending-the-auto-classes"),c(hi,"class","relative group"),c(bf,"id","transformers.AutoConfig"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#transformers.AutoConfig"),c(pi,"class","relative group"),c(w$,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(A$,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig"),c(y$,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig"),c(L$,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig"),c(x$,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig"),c($$,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(k$,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig"),c(S$,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(R$,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(B$,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(P$,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BLOOMConfig"),c(I$,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig"),c(q$,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig"),c(N$,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig"),c(j$,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig"),c(D$,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig"),c(G$,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig"),c(O$,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(V$,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(X$,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(z$,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig"),c(Q$,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(W$,"href","/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(H$,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig"),c(U$,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig"),c(J$,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Y$,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRConfig"),c(K$,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTConfig"),c(Z$,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig"),c(ek,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(ok,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig"),c(rk,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaConfig"),c(tk,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig"),c(ak,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig"),c(nk,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig"),c(sk,"href","/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNConfig"),c(lk,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config"),c(ik,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(dk,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig"),c(ck,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig"),c(fk,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig"),c(mk,"href","/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(gk,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(hk,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(pk,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig"),c(uk,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig"),c(_k,"href","/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeConfig"),c(bk,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig"),c(vk,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Config"),c(Fk,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig"),c(Tk,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Mk,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig"),c(Ek,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Ck,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(wk,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig"),c(Ak,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config"),c(yk,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Lk,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(xk,"href","/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTConfig"),c($k,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig"),c(kk,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Sk,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig"),c(Rk,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Bk,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Pk,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Ik,"href","/docs/transformers/pr_17202/en/model_doc/rag#transformers.RagConfig"),c(qk,"href","/docs/transformers/pr_17202/en/model_doc/realm#transformers.RealmConfig"),c(Nk,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig"),c(jk,"href","/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetConfig"),c(Dk,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig"),c(Gk,"href","/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetConfig"),c(Ok,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertConfig"),c(Vk,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig"),c(Xk,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig"),c(zk,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig"),c(Qk,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig"),c(Wk,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig"),c(Hk,"href","/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Uk,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Jk,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Yk,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterConfig"),c(Kk,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Zk,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig"),c(eS,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config"),c(oS,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig"),c(rS,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig"),c(tS,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(aS,"href","/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRConfig"),c(nS,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(sS,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(lS,"href","/docs/transformers/pr_17202/en/model_doc/van#transformers.VanConfig"),c(iS,"href","/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltConfig"),c(dS,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(cS,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(fS,"href","/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(mS,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig"),c(gS,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(hS,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(pS,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig"),c(uS,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig"),c(_S,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig"),c(bS,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(vS,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(FS,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(TS,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig"),c(MS,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosConfig"),c(ES,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vg,"id","transformers.AutoTokenizer"),c(vg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vg,"href","#transformers.AutoTokenizer"),c(_i,"class","relative group"),c(CS,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(wS,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizer"),c(AS,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yS,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartTokenizer"),c(LS,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartTokenizerFast"),c(xS,"href","/docs/transformers/pr_17202/en/model_doc/barthez#transformers.BarthezTokenizer"),c($S,"href","/docs/transformers/pr_17202/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(kS,"href","/docs/transformers/pr_17202/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(SS,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(RS,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(BS,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(PS,"href","/docs/transformers/pr_17202/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(IS,"href","/docs/transformers/pr_17202/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(qS,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(NS,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(jS,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(DS,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(GS,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(OS,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(VS,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(XS,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BLOOMTokenizerFast"),c(zS,"href","/docs/transformers/pr_17202/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(QS,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertTokenizer"),c(WS,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(HS,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineTokenizer"),c(US,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPTokenizer"),c(JS,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(YS,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(KS,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(ZS,"href","/docs/transformers/pr_17202/en/model_doc/cpm#transformers.CpmTokenizer"),c(eR,"href","/docs/transformers/pr_17202/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(oR,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(rR,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c(tR,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(aR,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaTokenizer"),c(nR,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(sR,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(lR,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(iR,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(dR,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(cR,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(fR,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(mR,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraTokenizer"),c(gR,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(hR,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(pR,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetTokenizer"),c(uR,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(_R,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(bR,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelTokenizer"),c(vR,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(FR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(TR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(MR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ER,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(CR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AR,"href","/docs/transformers/pr_17202/en/model_doc/herbert#transformers.HerbertTokenizer"),c(yR,"href","/docs/transformers/pr_17202/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(LR,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(xR,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c($R,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kR,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(SR,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(RR,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(BR,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(PR,"href","/docs/transformers/pr_17202/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(IR,"href","/docs/transformers/pr_17202/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(qR,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDTokenizer"),c(NR,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDTokenizerFast"),c(jR,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerTokenizer"),c(DR,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(GR,"href","/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeTokenizer"),c(OR,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(VR,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(XR,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(zR,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianTokenizer"),c(QR,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartTokenizer"),c(WR,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(HR,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(UR,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(JR,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(YR,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(KR,"href","/docs/transformers/pr_17202/en/model_doc/mluke#transformers.MLukeTokenizer"),c(ZR,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(eB,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(oB,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(rB,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(tB,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.T5Tokenizer"),c(aB,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.T5TokenizerFast"),c(nB,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizer"),c(sB,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(lB,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(iB,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(dB,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(cB,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(fB,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(mB,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(gB,"href","/docs/transformers/pr_17202/en/model_doc/phobert#transformers.PhobertTokenizer"),c(hB,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartTokenizer"),c(pB,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(uB,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(_B,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(bB,"href","/docs/transformers/pr_17202/en/model_doc/rag#transformers.RagTokenizer"),c(vB,"href","/docs/transformers/pr_17202/en/model_doc/realm#transformers.RealmTokenizer"),c(FB,"href","/docs/transformers/pr_17202/en/model_doc/realm#transformers.RealmTokenizerFast"),c(TB,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerTokenizer"),c(MB,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(EB,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertTokenizer"),c(CB,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(wB,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(AB,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(yB,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c(LB,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(xB,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerTokenizer"),c($B,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(kB,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(SB,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(RB,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterTokenizer"),c(BB,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(PB,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(IB,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(qB,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.T5Tokenizer"),c(NB,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.T5TokenizerFast"),c(jB,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasTokenizer"),c(DB,"href","/docs/transformers/pr_17202/en/model_doc/tapex#transformers.TapexTokenizer"),c(GB,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(OB,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(VB,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(XB,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(zB,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(QB,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMTokenizer"),c(WB,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(HB,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMTokenizer"),c(UB,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(JB,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(YB,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(KB,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ZB,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(eP,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(oP,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(rP,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizer"),c(tP,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"id","transformers.AutoFeatureExtractor"),c(Zg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zg,"href","#transformers.AutoFeatureExtractor"),c(bi,"class","relative group"),c(aP,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(nP,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(sP,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(lP,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(iP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dP,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(cP,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(fP,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(mP,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(gP,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(hP,"href","/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(pP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(uP,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(_P,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(bP,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(vP,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(FP,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TP,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(MP,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(EP,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(CP,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(wP,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AP,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yP,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(LP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(xP,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lh,"id","transformers.AutoProcessor"),c(Lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lh,"href","#transformers.AutoProcessor"),c(vi,"class","relative group"),c($P,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(kP,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPProcessor"),c(SP,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(RP,"href","/docs/transformers/pr_17202/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(BP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(IP,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(qP,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(NP,"href","/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRProcessor"),c(jP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(GP,"href","/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltProcessor"),c(OP,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(VP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(XP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wh,"id","transformers.AutoModel"),c(Wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wh,"href","#transformers.AutoModel"),c(Ti,"class","relative group"),c(zP,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QP,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WP,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HP,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertModel"),c(UP,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartModel"),c(JP,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitModel"),c(YP,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertModel"),c(KP,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(ZP,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdModel"),c(eI,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(oI,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(rI,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(tI,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BLOOMModel"),c(aI,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertModel"),c(nI,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineModel"),c(sI,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPModel"),c(lI,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertModel"),c(iI,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextModel"),c(dI,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLModel"),c(cI,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(fI,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(mI,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(gI,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaModel"),c(hI,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(pI,"href","/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(uI,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTModel"),c(_I,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrModel"),c(bI,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertModel"),c(vI,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(FI,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTModel"),c(TI,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraModel"),c(MI,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertModel"),c(EI,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaModel"),c(CI,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetModel"),c(wI,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTModel"),c(AI,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelModel"),c(yI,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelBaseModel"),c(LI,"href","/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNModel"),c(xI,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Model"),c($I,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(kI,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJModel"),c(SI,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertModel"),c(RI,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertModel"),c(BI,"href","/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(PI,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(II,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(qI,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDModel"),c(NI,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerModel"),c(jI,"href","/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeModel"),c(DI,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertModel"),c(GI,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Model"),c(OI,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianModel"),c(VI,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerModel"),c(XI,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartModel"),c(zI,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(QI,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertModel"),c(WI,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetModel"),c(HI,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Model"),c(UI,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerModel"),c(JI,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(YI,"href","/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTModel"),c(KI,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusModel"),c(ZI,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverModel"),c(eq,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartModel"),c(oq,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerModel"),c(rq,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(tq,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertModel"),c(aq,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModel"),c(nq,"href","/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetModel"),c(sq,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertModel"),c(lq,"href","/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetModel"),c(iq,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel"),c(dq,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaModel"),c(cq,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerModel"),c(fq,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerModel"),c(mq,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWModel"),c(gq,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDModel"),c(hq,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(pq,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterModel"),c(uq,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(_q,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinModel"),c(bq,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Model"),c(vq,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasModel"),c(Fq,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Tq,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Mq,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Eq,"href","/docs/transformers/pr_17202/en/model_doc/van#transformers.VanModel"),c(Cq,"href","/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltModel"),c(wq,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Aq,"href","/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertModel"),c(yq,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTModel"),c(Lq,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(xq,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c($q,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMModel"),c(kq,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMModel"),c(Sq,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMModel"),c(Rq,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Bq,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Pq,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Iq,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetModel"),c(qq,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosModel"),c(Nq,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Du,"id","transformers.AutoModelForPreTraining"),c(Du,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Du,"href","#transformers.AutoModelForPreTraining"),c(Ci,"class","relative group"),c(jq,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dq,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gq,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oq,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Vq,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Xq,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForPreTraining"),c(zq,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Qq,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BLOOMLMHeadModel"),c(Wq,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Hq,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Uq,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Jq,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Yq,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Kq,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Zq,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForPreTraining"),c(eN,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(oN,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaForPreTraining"),c(rN,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForPreTraining"),c(tN,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(aN,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(nN,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(sN,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(lN,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(iN,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(dN,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(cN,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(fN,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(mN,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(gN,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(hN,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel"),c(pN,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(uN,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(_N,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(bN,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(vN,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(FN,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(TN,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(MN,"href","/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(EN,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(CN,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(wN,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(AN,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(yN,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(LN,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k_,"id","transformers.AutoModelForCausalLM"),c(k_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k_,"href","#transformers.AutoModelForCausalLM"),c(yi,"class","relative group"),c(xN,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($N,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kN,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SN,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForCausalLM"),c(RN,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertLMHeadModel"),c(BN,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(PN,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(IN,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(qN,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(NN,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(jN,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BLOOMLMHeadModel"),c(DN,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(GN,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ON,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(VN,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForCausalLM"),c(XN,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(zN,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(QN,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(WN,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianForCausalLM"),c(HN,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForCausalLM"),c(UN,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(JN,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(YN,"href","/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTForCausalLM"),c(KN,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(ZN,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(ej,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(oj,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(rj,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(tj,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(aj,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(nj,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(sj,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(lj,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(ij,"href","/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(dj,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(cj,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(fj,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(mj,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(gj,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(hj,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b2,"id","transformers.AutoModelForMaskedLM"),c(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b2,"href","#transformers.AutoModelForMaskedLM"),c($i,"class","relative group"),c(pj,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uj,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_j,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bj,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(vj,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Fj,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(Mj,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Ej,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(Cj,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(wj,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(yj,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(xj,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c($j,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(kj,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Bj,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Ij,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(qj,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(jj,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Dj,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Gj,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Vj,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Xj,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(zj,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Qj,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Wj,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Hj,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Uj,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Jj,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Yj,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t1,"id","transformers.AutoModelForSeq2SeqLM"),c(t1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ri,"class","relative group"),c(Kj,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zj,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oD,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(rD,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(tD,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(aD,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(nD,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(sD,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(lD,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(iD,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(dD,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianMTModel"),c(cD,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(fD,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(mD,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(gD,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(hD,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(pD,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(uD,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(_D,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C1,"id","transformers.AutoModelForSequenceClassification"),c(C1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C1,"href","#transformers.AutoModelForSequenceClassification"),c(Ii,"class","relative group"),c(bD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TD,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(MD,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForSequenceClassification"),c(ED,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(wD,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c($D,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tb,"id","transformers.AutoModelForMultipleChoice"),c(Tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tb,"href","#transformers.AutoModelForMultipleChoice"),c(ji,"class","relative group"),c(hG,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pG,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uG,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_G,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(bG,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMultipleChoice"),c(vG,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(FG,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(TG,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(MG,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(EG,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(CG,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(wG,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(AG,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(yG,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(LG,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(xG,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c($G,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(kG,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(SG,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(RG,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(BG,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(PG,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(IG,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(qG,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(NG,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(jG,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(DG,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(GG,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(OG,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(VG,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(XG,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(zG,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ev,"id","transformers.AutoModelForNextSentencePrediction"),c(ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ev,"href","#transformers.AutoModelForNextSentencePrediction"),c(Oi,"class","relative group"),c(QG,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WG,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HG,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UG,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(JG,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(YG,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(KG,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(ZG,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dv,"id","transformers.AutoModelForTokenClassification"),c(dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dv,"href","#transformers.AutoModelForTokenClassification"),c(zi,"class","relative group"),c(eO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tO,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(aO,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForTokenClassification"),c(nO,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(sO,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(lO,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForTokenClassification"),c(iO,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(dO,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(cO,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(fO,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(mO,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(gO,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(hO,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(pO,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(uO,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(_O,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(bO,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(vO,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(FO,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(TO,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(MO,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(EO,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(CO,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(wO,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(AO,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(yO,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(LO,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(xO,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c($O,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(kO,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(SO,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(RO,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(BO,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(PO,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qv,"id","transformers.AutoModelForQuestionAnswering"),c(Qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qv,"href","#transformers.AutoModelForQuestionAnswering"),c(Hi,"class","relative group"),c(IO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jO,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(ZO,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(FV,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(EV,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PF,"id","transformers.AutoModelForTableQuestionAnswering"),c(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Yi,"class","relative group"),c(CV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yV,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.AutoModelForImageClassification"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.AutoModelForImageClassification"),c(ed,"class","relative group"),c(LV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($V,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kV,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForImageClassification"),c(SV,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(RV,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(BV,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassification"),c(PV,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(IV,"href","/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(qV,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(NV,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(jV,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(DV,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(GV,"href","/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(OV,"href","/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(VV,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(XV,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForImageClassification"),c(zV,"href","/docs/transformers/pr_17202/en/model_doc/van#transformers.VanForImageClassification"),c(QV,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o0,"id","transformers.AutoModelForVision2Seq"),c(o0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o0,"href","#transformers.AutoModelForVision2Seq"),c(td,"class","relative group"),c(WV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JV,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s0,"id","transformers.AutoModelForAudioClassification"),c(s0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s0,"href","#transformers.AutoModelForAudioClassification"),c(sd,"class","relative group"),c(YV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eX,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(oX,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(rX,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(nX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b0,"id","transformers.AutoModelForAudioFrameClassification"),c(b0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b0,"href","#transformers.AutoModelForAudioFrameClassification"),c(dd,"class","relative group"),c(iX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fX,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(mX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(gX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(hX,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A0,"id","transformers.AutoModelForCTC"),c(A0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A0,"href","#transformers.AutoModelForCTC"),c(md,"class","relative group"),c(pX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_X,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bX,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(vX,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForCTC"),c(FX,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForCTC"),c(TX,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForCTC"),c(MX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(EX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(CX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(wX,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N0,"id","transformers.AutoModelForSpeechSeq2Seq"),c(N0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N0,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(pd,"class","relative group"),c(AX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xX,"href","/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c($X,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X0,"id","transformers.AutoModelForAudioXVector"),c(X0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X0,"href","#transformers.AutoModelForAudioXVector"),c(bd,"class","relative group"),c(kX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(PX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(IX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(qX,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K0,"id","transformers.AutoModelForMaskedImageModeling"),c(K0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K0,"href","#transformers.AutoModelForMaskedImageModeling"),c(Td,"class","relative group"),c(NX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GX,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(OX,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(VX,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.AutoModelForObjectDetection"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.AutoModelForObjectDetection"),c(wd,"class","relative group"),c(XX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WX,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForObjectDetection"),c(HX,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fT,"id","transformers.AutoModelForImageSegmentation"),c(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fT,"href","#transformers.AutoModelForImageSegmentation"),c(Ld,"class","relative group"),c(UX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KX,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uT,"id","transformers.AutoModelForSemanticSegmentation"),c(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uT,"href","#transformers.AutoModelForSemanticSegmentation"),c(kd,"class","relative group"),c(ZX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(tz,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(az,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(nz,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CT,"id","transformers.AutoModelForInstanceSegmentation"),c(CT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Bd,"class","relative group"),c(sz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dz,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xT,"id","transformers.TFAutoModel"),c(xT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xT,"href","#transformers.TFAutoModel"),c(qd,"class","relative group"),c(cz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gz,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertModel"),c(hz,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartModel"),c(pz,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertModel"),c(uz,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(_z,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(bz,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertModel"),c(vz,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.TFCLIPModel"),c(Fz,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertModel"),c(Tz,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextModel"),c(Mz,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Ez,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(Cz,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaModel"),c(wz,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Az,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(yz,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Lz,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraModel"),c(xz,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertModel"),c($z,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelModel"),c(kz,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Sz,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Rz,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJModel"),c(Bz,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.TFHubertModel"),c(Pz,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Iz,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDModel"),c(qz,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerModel"),c(Nz,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertModel"),c(jz,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianModel"),c(Dz,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartModel"),c(Gz,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Oz,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Vz,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5Model"),c(Xz,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(zz,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Qz,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertModel"),c(Wz,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaModel"),c(Hz,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Uz,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Jz,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5Model"),c(Yz,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasModel"),c(Kz,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Zz,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTModel"),c(eQ,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(oQ,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(rQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMModel"),c(tQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(aQ,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M7,"id","transformers.TFAutoModelForPreTraining"),c(M7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M7,"href","#transformers.TFAutoModelForPreTraining"),c(Dd,"class","relative group"),c(nQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iQ,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(dQ,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(cQ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForPreTraining"),c(fQ,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(mQ,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(gQ,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(hQ,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(pQ,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(uQ,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(_Q,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(bQ,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(vQ,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(FQ,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(TQ,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(EQ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(wQ,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(AQ,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(yQ,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(LQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(xQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c($Q,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H7,"id","transformers.TFAutoModelForCausalLM"),c(H7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H7,"href","#transformers.TFAutoModelForCausalLM"),c(Vd,"class","relative group"),c(kQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BQ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(PQ,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(IQ,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(qQ,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(NQ,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(jQ,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(DQ,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(GQ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(OQ,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(VQ,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(XQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zQ,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dM,"id","transformers.TFAutoModelForImageClassification"),c(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dM,"href","#transformers.TFAutoModelForImageClassification"),c(Qd,"class","relative group"),c(QQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UQ,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(JQ,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(YQ,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.TFAutoModelForMaskedLM"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(KQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oW,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(rW,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(tW,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(aW,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(nW,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(sW,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(lW,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(iW,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(dW,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(cW,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(fW,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(mW,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(gW,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(hW,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(pW,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(uW,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(_W,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(bW,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(vW,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(FW,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(NM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(TW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CW,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(wW,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(AW,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(yW,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(LW,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(xW,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianMTModel"),c($W,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(kW,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(SW,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(RW,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YM,"id","transformers.TFAutoModelForSequenceClassification"),c(YM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YM,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(BW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qW,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(NW,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(jW,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(DW,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(GW,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(OW,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(VW,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(XW,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(zW,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(QW,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(WW,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(HW,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(UW,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(JW,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(YW,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(KW,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(eH,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(oH,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(rH,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(tH,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(aH,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(nH,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(sH,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(lH,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(iH,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A4,"id","transformers.TFAutoModelForMultipleChoice"),c(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A4,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(dH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(gH,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(hH,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(pH,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(uH,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(_H,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(bH,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(vH,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(FH,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(TH,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(MH,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(EH,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(CH,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(wH,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(AH,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(yH,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(LH,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(Q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(xH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($H,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SH,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(RH,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(Y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(fc,"class","relative group"),c(BH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oE,"id","transformers.TFAutoModelForTokenClassification"),c(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oE,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(NH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GH,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(OH,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(VH,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(XH,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(zH,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(QH,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(WH,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(HH,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(UH,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(JH,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(YH,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(KH,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(ZH,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(eU,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(oU,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(rU,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(tU,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(aU,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(nU,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(sU,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CE,"id","transformers.TFAutoModelForQuestionAnswering"),c(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(lU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cU,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(fU,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(mU,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(gU,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(hU,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(pU,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(uU,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(_U,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(bU,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(vU,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(FU,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(TU,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(MU,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(EU,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(CU,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(wU,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(AU,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(yU,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(LU,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(xU,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WE,"id","transformers.TFAutoModelForVision2Seq"),c(WE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WE,"href","#transformers.TFAutoModelForVision2Seq"),c(Fc,"class","relative group"),c($U,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RU,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(BU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qU,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.FlaxAutoModel"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(NU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GU,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertModel"),c(OU,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartModel"),c(VU,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitModel"),c(XU,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertModel"),c(zU,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(QU,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(WU,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(HU,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.FlaxCLIPModel"),c(UU,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(JU,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraModel"),c(YU,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(KU,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(ZU,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(eJ,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianModel"),c(oJ,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartModel"),c(rJ,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5Model"),c(tJ,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(aJ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(nJ,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(sJ,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5Model"),c(lJ,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(iJ,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTModel"),c(dJ,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(cJ,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(fJ,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x5,"id","transformers.FlaxAutoModelForCausalLM"),c(x5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x5,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(mJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(uJ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(_J,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(bJ,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(vJ,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(FJ,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(TJ,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(MJ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(EJ,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.FlaxAutoModelForPreTraining"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(CJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yJ,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(LJ,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(xJ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c($J,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(kJ,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(SJ,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(RJ,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(BJ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(PJ,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(IJ,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(qJ,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(NJ,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rC,"id","transformers.FlaxAutoModelForMaskedLM"),c(rC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(jJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OJ,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(VJ,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(XJ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(zJ,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(QJ,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(WJ,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(HJ,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(UJ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(JJ,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(YJ,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(KJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oY,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(rY,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(tY,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(aY,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(nY,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(sY,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(lY,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(iY,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(dY,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(cY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gY,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(hY,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(pY,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(uY,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(_Y,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(bY,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(vY,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(FY,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(TY,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(MY,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(DC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(EY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AY,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(yY,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(LY,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(xY,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c($Y,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(kY,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(SY,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(RY,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(BY,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(PY,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.FlaxAutoModelForTokenClassification"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(IY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jY,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(DY,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(GY,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(OY,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(VY,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(XY,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(zY,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(QY,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(c3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(WY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JY,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(YY,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(KY,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(ZY,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(eK,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(oK,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(rK,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(tK,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(T3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(aK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lK,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w3,"id","transformers.FlaxAutoModelForImageClassification"),c(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w3,"href","#transformers.FlaxAutoModelForImageClassification"),c(rf,"class","relative group"),c(iK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fK,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(mK,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($3,"id","transformers.FlaxAutoModelForVision2Seq"),c($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nf,"class","relative group"),c(gK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uK,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,li),b(f,mf,_),b(f,et,_),e(et,ii),e(et,di),e(di,KA),e(et,gf),b(f,qe,_),b(f,Xe,_),e(Xe,ci),e(Xe,An),e(An,ZA),e(Xe,yn),e(Xe,Ln),e(Ln,e6),e(Xe,fi),e(Xe,xn),e(xn,o6),e(Xe,mi),b(f,hf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,v$),e(Ae,gi),e(gi,F$),e(Ae,T$),b(f,Eo,_),b(f,Ea,_),e(Ea,M$),e(Ea,pf),e(pf,E$),e(Ea,FDe),b(f,dIe,_),b(f,hi,_),e(hi,uf),e(uf,cee),M(r6,cee,null),e(hi,TDe),e(hi,fee),e(fee,MDe),b(f,cIe,_),b(f,$n,_),e($n,EDe),e($n,mee),e(mee,CDe),e($n,wDe),e($n,gee),e(gee,ADe),e($n,yDe),b(f,fIe,_),M(t6,f,_),b(f,mIe,_),b(f,C$,_),e(C$,LDe),b(f,gIe,_),M(_f,f,_),b(f,hIe,_),b(f,pi,_),e(pi,bf),e(bf,hee),M(a6,hee,null),e(pi,xDe),e(pi,pee),e(pee,$De),b(f,pIe,_),b(f,Co,_),M(n6,Co,null),e(Co,kDe),e(Co,s6),e(s6,SDe),e(s6,w$),e(w$,RDe),e(s6,BDe),e(Co,PDe),e(Co,l6),e(l6,IDe),e(l6,uee),e(uee,qDe),e(l6,NDe),e(Co,jDe),e(Co,Er),M(i6,Er,null),e(Er,DDe),e(Er,_ee),e(_ee,GDe),e(Er,ODe),e(Er,ui),e(ui,VDe),e(ui,bee),e(bee,XDe),e(ui,zDe),e(ui,vee),e(vee,QDe),e(ui,WDe),e(Er,HDe),e(Er,A),e(A,vf),e(vf,Fee),e(Fee,UDe),e(vf,JDe),e(vf,A$),e(A$,YDe),e(vf,KDe),e(A,ZDe),e(A,Ff),e(Ff,Tee),e(Tee,eGe),e(Ff,oGe),e(Ff,y$),e(y$,rGe),e(Ff,tGe),e(A,aGe),e(A,Tf),e(Tf,Mee),e(Mee,nGe),e(Tf,sGe),e(Tf,L$),e(L$,lGe),e(Tf,iGe),e(A,dGe),e(A,Mf),e(Mf,Eee),e(Eee,cGe),e(Mf,fGe),e(Mf,x$),e(x$,mGe),e(Mf,gGe),e(A,hGe),e(A,Ef),e(Ef,Cee),e(Cee,pGe),e(Ef,uGe),e(Ef,$$),e($$,_Ge),e(Ef,bGe),e(A,vGe),e(A,Cf),e(Cf,wee),e(wee,FGe),e(Cf,TGe),e(Cf,k$),e(k$,MGe),e(Cf,EGe),e(A,CGe),e(A,wf),e(wf,Aee),e(Aee,wGe),e(wf,AGe),e(wf,S$),e(S$,yGe),e(wf,LGe),e(A,xGe),e(A,Af),e(Af,yee),e(yee,$Ge),e(Af,kGe),e(Af,R$),e(R$,SGe),e(Af,RGe),e(A,BGe),e(A,yf),e(yf,Lee),e(Lee,PGe),e(yf,IGe),e(yf,B$),e(B$,qGe),e(yf,NGe),e(A,jGe),e(A,Lf),e(Lf,xee),e(xee,DGe),e(Lf,GGe),e(Lf,P$),e(P$,OGe),e(Lf,VGe),e(A,XGe),e(A,xf),e(xf,$ee),e($ee,zGe),e(xf,QGe),e(xf,I$),e(I$,WGe),e(xf,HGe),e(A,UGe),e(A,$f),e($f,kee),e(kee,JGe),e($f,YGe),e($f,q$),e(q$,KGe),e($f,ZGe),e(A,eOe),e(A,kf),e(kf,See),e(See,oOe),e(kf,rOe),e(kf,N$),e(N$,tOe),e(kf,aOe),e(A,nOe),e(A,Sf),e(Sf,Ree),e(Ree,sOe),e(Sf,lOe),e(Sf,j$),e(j$,iOe),e(Sf,dOe),e(A,cOe),e(A,Rf),e(Rf,Bee),e(Bee,fOe),e(Rf,mOe),e(Rf,D$),e(D$,gOe),e(Rf,hOe),e(A,pOe),e(A,Bf),e(Bf,Pee),e(Pee,uOe),e(Bf,_Oe),e(Bf,G$),e(G$,bOe),e(Bf,vOe),e(A,FOe),e(A,Pf),e(Pf,Iee),e(Iee,TOe),e(Pf,MOe),e(Pf,O$),e(O$,EOe),e(Pf,COe),e(A,wOe),e(A,If),e(If,qee),e(qee,AOe),e(If,yOe),e(If,V$),e(V$,LOe),e(If,xOe),e(A,$Oe),e(A,qf),e(qf,Nee),e(Nee,kOe),e(qf,SOe),e(qf,X$),e(X$,ROe),e(qf,BOe),e(A,POe),e(A,Nf),e(Nf,jee),e(jee,IOe),e(Nf,qOe),e(Nf,z$),e(z$,NOe),e(Nf,jOe),e(A,DOe),e(A,jf),e(jf,Dee),e(Dee,GOe),e(jf,OOe),e(jf,Q$),e(Q$,VOe),e(jf,XOe),e(A,zOe),e(A,Df),e(Df,Gee),e(Gee,QOe),e(Df,WOe),e(Df,W$),e(W$,HOe),e(Df,UOe),e(A,JOe),e(A,Gf),e(Gf,Oee),e(Oee,YOe),e(Gf,KOe),e(Gf,H$),e(H$,ZOe),e(Gf,eVe),e(A,oVe),e(A,Of),e(Of,Vee),e(Vee,rVe),e(Of,tVe),e(Of,U$),e(U$,aVe),e(Of,nVe),e(A,sVe),e(A,Vf),e(Vf,Xee),e(Xee,lVe),e(Vf,iVe),e(Vf,J$),e(J$,dVe),e(Vf,cVe),e(A,fVe),e(A,Xf),e(Xf,zee),e(zee,mVe),e(Xf,gVe),e(Xf,Y$),e(Y$,hVe),e(Xf,pVe),e(A,uVe),e(A,zf),e(zf,Qee),e(Qee,_Ve),e(zf,bVe),e(zf,K$),e(K$,vVe),e(zf,FVe),e(A,TVe),e(A,Qf),e(Qf,Wee),e(Wee,MVe),e(Qf,EVe),e(Qf,Z$),e(Z$,CVe),e(Qf,wVe),e(A,AVe),e(A,Wf),e(Wf,Hee),e(Hee,yVe),e(Wf,LVe),e(Wf,ek),e(ek,xVe),e(Wf,$Ve),e(A,kVe),e(A,Hf),e(Hf,Uee),e(Uee,SVe),e(Hf,RVe),e(Hf,ok),e(ok,BVe),e(Hf,PVe),e(A,IVe),e(A,Uf),e(Uf,Jee),e(Jee,qVe),e(Uf,NVe),e(Uf,rk),e(rk,jVe),e(Uf,DVe),e(A,GVe),e(A,Jf),e(Jf,Yee),e(Yee,OVe),e(Jf,VVe),e(Jf,tk),e(tk,XVe),e(Jf,zVe),e(A,QVe),e(A,Yf),e(Yf,Kee),e(Kee,WVe),e(Yf,HVe),e(Yf,ak),e(ak,UVe),e(Yf,JVe),e(A,YVe),e(A,Kf),e(Kf,Zee),e(Zee,KVe),e(Kf,ZVe),e(Kf,nk),e(nk,eXe),e(Kf,oXe),e(A,rXe),e(A,Zf),e(Zf,eoe),e(eoe,tXe),e(Zf,aXe),e(Zf,sk),e(sk,nXe),e(Zf,sXe),e(A,lXe),e(A,em),e(em,ooe),e(ooe,iXe),e(em,dXe),e(em,lk),e(lk,cXe),e(em,fXe),e(A,mXe),e(A,om),e(om,roe),e(roe,gXe),e(om,hXe),e(om,ik),e(ik,pXe),e(om,uXe),e(A,_Xe),e(A,rm),e(rm,toe),e(toe,bXe),e(rm,vXe),e(rm,dk),e(dk,FXe),e(rm,TXe),e(A,MXe),e(A,tm),e(tm,aoe),e(aoe,EXe),e(tm,CXe),e(tm,ck),e(ck,wXe),e(tm,AXe),e(A,yXe),e(A,am),e(am,noe),e(noe,LXe),e(am,xXe),e(am,fk),e(fk,$Xe),e(am,kXe),e(A,SXe),e(A,nm),e(nm,soe),e(soe,RXe),e(nm,BXe),e(nm,mk),e(mk,PXe),e(nm,IXe),e(A,qXe),e(A,sm),e(sm,loe),e(loe,NXe),e(sm,jXe),e(sm,gk),e(gk,DXe),e(sm,GXe),e(A,OXe),e(A,lm),e(lm,ioe),e(ioe,VXe),e(lm,XXe),e(lm,hk),e(hk,zXe),e(lm,QXe),e(A,WXe),e(A,im),e(im,doe),e(doe,HXe),e(im,UXe),e(im,pk),e(pk,JXe),e(im,YXe),e(A,KXe),e(A,dm),e(dm,coe),e(coe,ZXe),e(dm,eze),e(dm,uk),e(uk,oze),e(dm,rze),e(A,tze),e(A,cm),e(cm,foe),e(foe,aze),e(cm,nze),e(cm,_k),e(_k,sze),e(cm,lze),e(A,ize),e(A,fm),e(fm,moe),e(moe,dze),e(fm,cze),e(fm,bk),e(bk,fze),e(fm,mze),e(A,gze),e(A,mm),e(mm,goe),e(goe,hze),e(mm,pze),e(mm,vk),e(vk,uze),e(mm,_ze),e(A,bze),e(A,gm),e(gm,hoe),e(hoe,vze),e(gm,Fze),e(gm,Fk),e(Fk,Tze),e(gm,Mze),e(A,Eze),e(A,hm),e(hm,poe),e(poe,Cze),e(hm,wze),e(hm,Tk),e(Tk,Aze),e(hm,yze),e(A,Lze),e(A,pm),e(pm,uoe),e(uoe,xze),e(pm,$ze),e(pm,Mk),e(Mk,kze),e(pm,Sze),e(A,Rze),e(A,um),e(um,_oe),e(_oe,Bze),e(um,Pze),e(um,Ek),e(Ek,Ize),e(um,qze),e(A,Nze),e(A,_m),e(_m,boe),e(boe,jze),e(_m,Dze),e(_m,Ck),e(Ck,Gze),e(_m,Oze),e(A,Vze),e(A,bm),e(bm,voe),e(voe,Xze),e(bm,zze),e(bm,wk),e(wk,Qze),e(bm,Wze),e(A,Hze),e(A,vm),e(vm,Foe),e(Foe,Uze),e(vm,Jze),e(vm,Ak),e(Ak,Yze),e(vm,Kze),e(A,Zze),e(A,Fm),e(Fm,Toe),e(Toe,eQe),e(Fm,oQe),e(Fm,yk),e(yk,rQe),e(Fm,tQe),e(A,aQe),e(A,Tm),e(Tm,Moe),e(Moe,nQe),e(Tm,sQe),e(Tm,Lk),e(Lk,lQe),e(Tm,iQe),e(A,dQe),e(A,Mm),e(Mm,Eoe),e(Eoe,cQe),e(Mm,fQe),e(Mm,xk),e(xk,mQe),e(Mm,gQe),e(A,hQe),e(A,Em),e(Em,Coe),e(Coe,pQe),e(Em,uQe),e(Em,$k),e($k,_Qe),e(Em,bQe),e(A,vQe),e(A,Cm),e(Cm,woe),e(woe,FQe),e(Cm,TQe),e(Cm,kk),e(kk,MQe),e(Cm,EQe),e(A,CQe),e(A,wm),e(wm,Aoe),e(Aoe,wQe),e(wm,AQe),e(wm,Sk),e(Sk,yQe),e(wm,LQe),e(A,xQe),e(A,Am),e(Am,yoe),e(yoe,$Qe),e(Am,kQe),e(Am,Rk),e(Rk,SQe),e(Am,RQe),e(A,BQe),e(A,ym),e(ym,Loe),e(Loe,PQe),e(ym,IQe),e(ym,Bk),e(Bk,qQe),e(ym,NQe),e(A,jQe),e(A,Lm),e(Lm,xoe),e(xoe,DQe),e(Lm,GQe),e(Lm,Pk),e(Pk,OQe),e(Lm,VQe),e(A,XQe),e(A,xm),e(xm,$oe),e($oe,zQe),e(xm,QQe),e(xm,Ik),e(Ik,WQe),e(xm,HQe),e(A,UQe),e(A,$m),e($m,koe),e(koe,JQe),e($m,YQe),e($m,qk),e(qk,KQe),e($m,ZQe),e(A,eWe),e(A,km),e(km,Soe),e(Soe,oWe),e(km,rWe),e(km,Nk),e(Nk,tWe),e(km,aWe),e(A,nWe),e(A,Sm),e(Sm,Roe),e(Roe,sWe),e(Sm,lWe),e(Sm,jk),e(jk,iWe),e(Sm,dWe),e(A,cWe),e(A,Rm),e(Rm,Boe),e(Boe,fWe),e(Rm,mWe),e(Rm,Dk),e(Dk,gWe),e(Rm,hWe),e(A,pWe),e(A,Bm),e(Bm,Poe),e(Poe,uWe),e(Bm,_We),e(Bm,Gk),e(Gk,bWe),e(Bm,vWe),e(A,FWe),e(A,Pm),e(Pm,Ioe),e(Ioe,TWe),e(Pm,MWe),e(Pm,Ok),e(Ok,EWe),e(Pm,CWe),e(A,wWe),e(A,Im),e(Im,qoe),e(qoe,AWe),e(Im,yWe),e(Im,Vk),e(Vk,LWe),e(Im,xWe),e(A,$We),e(A,qm),e(qm,Noe),e(Noe,kWe),e(qm,SWe),e(qm,Xk),e(Xk,RWe),e(qm,BWe),e(A,PWe),e(A,Nm),e(Nm,joe),e(joe,IWe),e(Nm,qWe),e(Nm,zk),e(zk,NWe),e(Nm,jWe),e(A,DWe),e(A,jm),e(jm,Doe),e(Doe,GWe),e(jm,OWe),e(jm,Qk),e(Qk,VWe),e(jm,XWe),e(A,zWe),e(A,Dm),e(Dm,Goe),e(Goe,QWe),e(Dm,WWe),e(Dm,Wk),e(Wk,HWe),e(Dm,UWe),e(A,JWe),e(A,Gm),e(Gm,Ooe),e(Ooe,YWe),e(Gm,KWe),e(Gm,Hk),e(Hk,ZWe),e(Gm,eHe),e(A,oHe),e(A,Om),e(Om,Voe),e(Voe,rHe),e(Om,tHe),e(Om,Uk),e(Uk,aHe),e(Om,nHe),e(A,sHe),e(A,Vm),e(Vm,Xoe),e(Xoe,lHe),e(Vm,iHe),e(Vm,Jk),e(Jk,dHe),e(Vm,cHe),e(A,fHe),e(A,Xm),e(Xm,zoe),e(zoe,mHe),e(Xm,gHe),e(Xm,Yk),e(Yk,hHe),e(Xm,pHe),e(A,uHe),e(A,zm),e(zm,Qoe),e(Qoe,_He),e(zm,bHe),e(zm,Kk),e(Kk,vHe),e(zm,FHe),e(A,THe),e(A,Qm),e(Qm,Woe),e(Woe,MHe),e(Qm,EHe),e(Qm,Zk),e(Zk,CHe),e(Qm,wHe),e(A,AHe),e(A,Wm),e(Wm,Hoe),e(Hoe,yHe),e(Wm,LHe),e(Wm,eS),e(eS,xHe),e(Wm,$He),e(A,kHe),e(A,Hm),e(Hm,Uoe),e(Uoe,SHe),e(Hm,RHe),e(Hm,oS),e(oS,BHe),e(Hm,PHe),e(A,IHe),e(A,Um),e(Um,Joe),e(Joe,qHe),e(Um,NHe),e(Um,rS),e(rS,jHe),e(Um,DHe),e(A,GHe),e(A,Jm),e(Jm,Yoe),e(Yoe,OHe),e(Jm,VHe),e(Jm,tS),e(tS,XHe),e(Jm,zHe),e(A,QHe),e(A,Ym),e(Ym,Koe),e(Koe,WHe),e(Ym,HHe),e(Ym,aS),e(aS,UHe),e(Ym,JHe),e(A,YHe),e(A,Km),e(Km,Zoe),e(Zoe,KHe),e(Km,ZHe),e(Km,nS),e(nS,eUe),e(Km,oUe),e(A,rUe),e(A,Zm),e(Zm,ere),e(ere,tUe),e(Zm,aUe),e(Zm,sS),e(sS,nUe),e(Zm,sUe),e(A,lUe),e(A,eg),e(eg,ore),e(ore,iUe),e(eg,dUe),e(eg,lS),e(lS,cUe),e(eg,fUe),e(A,mUe),e(A,og),e(og,rre),e(rre,gUe),e(og,hUe),e(og,iS),e(iS,pUe),e(og,uUe),e(A,_Ue),e(A,rg),e(rg,tre),e(tre,bUe),e(rg,vUe),e(rg,dS),e(dS,FUe),e(rg,TUe),e(A,MUe),e(A,tg),e(tg,are),e(are,EUe),e(tg,CUe),e(tg,cS),e(cS,wUe),e(tg,AUe),e(A,yUe),e(A,ag),e(ag,nre),e(nre,LUe),e(ag,xUe),e(ag,fS),e(fS,$Ue),e(ag,kUe),e(A,SUe),e(A,ng),e(ng,sre),e(sre,RUe),e(ng,BUe),e(ng,mS),e(mS,PUe),e(ng,IUe),e(A,qUe),e(A,sg),e(sg,lre),e(lre,NUe),e(sg,jUe),e(sg,gS),e(gS,DUe),e(sg,GUe),e(A,OUe),e(A,lg),e(lg,ire),e(ire,VUe),e(lg,XUe),e(lg,hS),e(hS,zUe),e(lg,QUe),e(A,WUe),e(A,ig),e(ig,dre),e(dre,HUe),e(ig,UUe),e(ig,pS),e(pS,JUe),e(ig,YUe),e(A,KUe),e(A,dg),e(dg,cre),e(cre,ZUe),e(dg,eJe),e(dg,uS),e(uS,oJe),e(dg,rJe),e(A,tJe),e(A,cg),e(cg,fre),e(fre,aJe),e(cg,nJe),e(cg,_S),e(_S,sJe),e(cg,lJe),e(A,iJe),e(A,fg),e(fg,mre),e(mre,dJe),e(fg,cJe),e(fg,bS),e(bS,fJe),e(fg,mJe),e(A,gJe),e(A,mg),e(mg,gre),e(gre,hJe),e(mg,pJe),e(mg,vS),e(vS,uJe),e(mg,_Je),e(A,bJe),e(A,gg),e(gg,hre),e(hre,vJe),e(gg,FJe),e(gg,FS),e(FS,TJe),e(gg,MJe),e(A,EJe),e(A,hg),e(hg,pre),e(pre,CJe),e(hg,wJe),e(hg,TS),e(TS,AJe),e(hg,yJe),e(A,LJe),e(A,pg),e(pg,ure),e(ure,xJe),e(pg,$Je),e(pg,MS),e(MS,kJe),e(pg,SJe),e(A,RJe),e(A,ug),e(ug,_re),e(_re,BJe),e(ug,PJe),e(ug,ES),e(ES,IJe),e(ug,qJe),e(Er,NJe),M(_g,Er,null),e(Co,jJe),e(Co,bg),M(d6,bg,null),e(bg,DJe),e(bg,bre),e(bre,GJe),b(f,uIe,_),b(f,_i,_),e(_i,vg),e(vg,vre),M(c6,vre,null),e(_i,OJe),e(_i,Fre),e(Fre,VJe),b(f,_Ie,_),b(f,wo,_),M(f6,wo,null),e(wo,XJe),e(wo,m6),e(m6,zJe),e(m6,CS),e(CS,QJe),e(m6,WJe),e(wo,HJe),e(wo,g6),e(g6,UJe),e(g6,Tre),e(Tre,JJe),e(g6,YJe),e(wo,KJe),e(wo,Cr),M(h6,Cr,null),e(Cr,ZJe),e(Cr,Mre),e(Mre,eYe),e(Cr,oYe),e(Cr,Ca),e(Ca,rYe),e(Ca,Ere),e(Ere,tYe),e(Ca,aYe),e(Ca,Cre),e(Cre,nYe),e(Ca,sYe),e(Ca,wre),e(wre,lYe),e(Ca,iYe),e(Cr,dYe),e(Cr,k),e(k,kn),e(kn,Are),e(Are,cYe),e(kn,fYe),e(kn,wS),e(wS,mYe),e(kn,gYe),e(kn,AS),e(AS,hYe),e(kn,pYe),e(k,uYe),e(k,Sn),e(Sn,yre),e(yre,_Ye),e(Sn,bYe),e(Sn,yS),e(yS,vYe),e(Sn,FYe),e(Sn,LS),e(LS,TYe),e(Sn,MYe),e(k,EYe),e(k,Rn),e(Rn,Lre),e(Lre,CYe),e(Rn,wYe),e(Rn,xS),e(xS,AYe),e(Rn,yYe),e(Rn,$S),e($S,LYe),e(Rn,xYe),e(k,$Ye),e(k,Fg),e(Fg,xre),e(xre,kYe),e(Fg,SYe),e(Fg,kS),e(kS,RYe),e(Fg,BYe),e(k,PYe),e(k,Bn),e(Bn,$re),e($re,IYe),e(Bn,qYe),e(Bn,SS),e(SS,NYe),e(Bn,jYe),e(Bn,RS),e(RS,DYe),e(Bn,GYe),e(k,OYe),e(k,Tg),e(Tg,kre),e(kre,VYe),e(Tg,XYe),e(Tg,BS),e(BS,zYe),e(Tg,QYe),e(k,WYe),e(k,Mg),e(Mg,Sre),e(Sre,HYe),e(Mg,UYe),e(Mg,PS),e(PS,JYe),e(Mg,YYe),e(k,KYe),e(k,Eg),e(Eg,Rre),e(Rre,ZYe),e(Eg,eKe),e(Eg,IS),e(IS,oKe),e(Eg,rKe),e(k,tKe),e(k,Pn),e(Pn,Bre),e(Bre,aKe),e(Pn,nKe),e(Pn,qS),e(qS,sKe),e(Pn,lKe),e(Pn,NS),e(NS,iKe),e(Pn,dKe),e(k,cKe),e(k,In),e(In,Pre),e(Pre,fKe),e(In,mKe),e(In,jS),e(jS,gKe),e(In,hKe),e(In,DS),e(DS,pKe),e(In,uKe),e(k,_Ke),e(k,qn),e(qn,Ire),e(Ire,bKe),e(qn,vKe),e(qn,GS),e(GS,FKe),e(qn,TKe),e(qn,OS),e(OS,MKe),e(qn,EKe),e(k,CKe),e(k,Cg),e(Cg,qre),e(qre,wKe),e(Cg,AKe),e(Cg,VS),e(VS,yKe),e(Cg,LKe),e(k,xKe),e(k,wg),e(wg,Nre),e(Nre,$Ke),e(wg,kKe),e(wg,XS),e(XS,SKe),e(wg,RKe),e(k,BKe),e(k,Ag),e(Ag,jre),e(jre,PKe),e(Ag,IKe),e(Ag,zS),e(zS,qKe),e(Ag,NKe),e(k,jKe),e(k,Nn),e(Nn,Dre),e(Dre,DKe),e(Nn,GKe),e(Nn,QS),e(QS,OKe),e(Nn,VKe),e(Nn,WS),e(WS,XKe),e(Nn,zKe),e(k,QKe),e(k,yg),e(yg,Gre),e(Gre,WKe),e(yg,HKe),e(yg,HS),e(HS,UKe),e(yg,JKe),e(k,YKe),e(k,jn),e(jn,Ore),e(Ore,KKe),e(jn,ZKe),e(jn,US),e(US,eZe),e(jn,oZe),e(jn,JS),e(JS,rZe),e(jn,tZe),e(k,aZe),e(k,Dn),e(Dn,Vre),e(Vre,nZe),e(Dn,sZe),e(Dn,YS),e(YS,lZe),e(Dn,iZe),e(Dn,KS),e(KS,dZe),e(Dn,cZe),e(k,fZe),e(k,Gn),e(Gn,Xre),e(Xre,mZe),e(Gn,gZe),e(Gn,ZS),e(ZS,hZe),e(Gn,pZe),e(Gn,eR),e(eR,uZe),e(Gn,_Ze),e(k,bZe),e(k,Lg),e(Lg,zre),e(zre,vZe),e(Lg,FZe),e(Lg,oR),e(oR,TZe),e(Lg,MZe),e(k,EZe),e(k,On),e(On,Qre),e(Qre,CZe),e(On,wZe),e(On,rR),e(rR,AZe),e(On,yZe),e(On,tR),e(tR,LZe),e(On,xZe),e(k,$Ze),e(k,Vn),e(Vn,Wre),e(Wre,kZe),e(Vn,SZe),e(Vn,aR),e(aR,RZe),e(Vn,BZe),e(Vn,nR),e(nR,PZe),e(Vn,IZe),e(k,qZe),e(k,Xn),e(Xn,Hre),e(Hre,NZe),e(Xn,jZe),e(Xn,sR),e(sR,DZe),e(Xn,GZe),e(Xn,lR),e(lR,OZe),e(Xn,VZe),e(k,XZe),e(k,zn),e(zn,Ure),e(Ure,zZe),e(zn,QZe),e(zn,iR),e(iR,WZe),e(zn,HZe),e(zn,dR),e(dR,UZe),e(zn,JZe),e(k,YZe),e(k,Qn),e(Qn,Jre),e(Jre,KZe),e(Qn,ZZe),e(Qn,cR),e(cR,eeo),e(Qn,oeo),e(Qn,fR),e(fR,reo),e(Qn,teo),e(k,aeo),e(k,Wn),e(Wn,Yre),e(Yre,neo),e(Wn,seo),e(Wn,mR),e(mR,leo),e(Wn,ieo),e(Wn,gR),e(gR,deo),e(Wn,ceo),e(k,feo),e(k,xg),e(xg,Kre),e(Kre,meo),e(xg,geo),e(xg,hR),e(hR,heo),e(xg,peo),e(k,ueo),e(k,Hn),e(Hn,Zre),e(Zre,_eo),e(Hn,beo),e(Hn,pR),e(pR,veo),e(Hn,Feo),e(Hn,uR),e(uR,Teo),e(Hn,Meo),e(k,Eeo),e(k,$g),e($g,ete),e(ete,Ceo),e($g,weo),e($g,_R),e(_R,Aeo),e($g,yeo),e(k,Leo),e(k,Un),e(Un,ote),e(ote,xeo),e(Un,$eo),e(Un,bR),e(bR,keo),e(Un,Seo),e(Un,vR),e(vR,Reo),e(Un,Beo),e(k,Peo),e(k,Jn),e(Jn,rte),e(rte,Ieo),e(Jn,qeo),e(Jn,FR),e(FR,Neo),e(Jn,jeo),e(Jn,TR),e(TR,Deo),e(Jn,Geo),e(k,Oeo),e(k,Yn),e(Yn,tte),e(tte,Veo),e(Yn,Xeo),e(Yn,MR),e(MR,zeo),e(Yn,Qeo),e(Yn,ER),e(ER,Weo),e(Yn,Heo),e(k,Ueo),e(k,Kn),e(Kn,ate),e(ate,Jeo),e(Kn,Yeo),e(Kn,CR),e(CR,Keo),e(Kn,Zeo),e(Kn,wR),e(wR,eoo),e(Kn,ooo),e(k,roo),e(k,Zn),e(Zn,nte),e(nte,too),e(Zn,aoo),e(Zn,AR),e(AR,noo),e(Zn,soo),e(Zn,yR),e(yR,loo),e(Zn,ioo),e(k,doo),e(k,kg),e(kg,ste),e(ste,coo),e(kg,foo),e(kg,LR),e(LR,moo),e(kg,goo),e(k,hoo),e(k,es),e(es,lte),e(lte,poo),e(es,uoo),e(es,xR),e(xR,_oo),e(es,boo),e(es,$R),e($R,voo),e(es,Foo),e(k,Too),e(k,os),e(os,ite),e(ite,Moo),e(os,Eoo),e(os,kR),e(kR,Coo),e(os,woo),e(os,SR),e(SR,Aoo),e(os,yoo),e(k,Loo),e(k,rs),e(rs,dte),e(dte,xoo),e(rs,$oo),e(rs,RR),e(RR,koo),e(rs,Soo),e(rs,BR),e(BR,Roo),e(rs,Boo),e(k,Poo),e(k,ts),e(ts,cte),e(cte,Ioo),e(ts,qoo),e(ts,PR),e(PR,Noo),e(ts,joo),e(ts,IR),e(IR,Doo),e(ts,Goo),e(k,Ooo),e(k,as),e(as,fte),e(fte,Voo),e(as,Xoo),e(as,qR),e(qR,zoo),e(as,Qoo),e(as,NR),e(NR,Woo),e(as,Hoo),e(k,Uoo),e(k,ns),e(ns,mte),e(mte,Joo),e(ns,Yoo),e(ns,jR),e(jR,Koo),e(ns,Zoo),e(ns,DR),e(DR,ero),e(ns,oro),e(k,rro),e(k,Sg),e(Sg,gte),e(gte,tro),e(Sg,aro),e(Sg,GR),e(GR,nro),e(Sg,sro),e(k,lro),e(k,ss),e(ss,hte),e(hte,iro),e(ss,dro),e(ss,OR),e(OR,cro),e(ss,fro),e(ss,VR),e(VR,mro),e(ss,gro),e(k,hro),e(k,Rg),e(Rg,pte),e(pte,pro),e(Rg,uro),e(Rg,XR),e(XR,_ro),e(Rg,bro),e(k,vro),e(k,Bg),e(Bg,ute),e(ute,Fro),e(Bg,Tro),e(Bg,zR),e(zR,Mro),e(Bg,Ero),e(k,Cro),e(k,ls),e(ls,_te),e(_te,wro),e(ls,Aro),e(ls,QR),e(QR,yro),e(ls,Lro),e(ls,WR),e(WR,xro),e(ls,$ro),e(k,kro),e(k,is),e(is,bte),e(bte,Sro),e(is,Rro),e(is,HR),e(HR,Bro),e(is,Pro),e(is,UR),e(UR,Iro),e(is,qro),e(k,Nro),e(k,ds),e(ds,vte),e(vte,jro),e(ds,Dro),e(ds,JR),e(JR,Gro),e(ds,Oro),e(ds,YR),e(YR,Vro),e(ds,Xro),e(k,zro),e(k,Pg),e(Pg,Fte),e(Fte,Qro),e(Pg,Wro),e(Pg,KR),e(KR,Hro),e(Pg,Uro),e(k,Jro),e(k,cs),e(cs,Tte),e(Tte,Yro),e(cs,Kro),e(cs,ZR),e(ZR,Zro),e(cs,eto),e(cs,eB),e(eB,oto),e(cs,rto),e(k,tto),e(k,fs),e(fs,Mte),e(Mte,ato),e(fs,nto),e(fs,oB),e(oB,sto),e(fs,lto),e(fs,rB),e(rB,ito),e(fs,dto),e(k,cto),e(k,ms),e(ms,Ete),e(Ete,fto),e(ms,mto),e(ms,tB),e(tB,gto),e(ms,hto),e(ms,aB),e(aB,pto),e(ms,uto),e(k,_to),e(k,gs),e(gs,Cte),e(Cte,bto),e(gs,vto),e(gs,nB),e(nB,Fto),e(gs,Tto),e(gs,sB),e(sB,Mto),e(gs,Eto),e(k,Cto),e(k,hs),e(hs,wte),e(wte,wto),e(hs,Ato),e(hs,lB),e(lB,yto),e(hs,Lto),e(hs,iB),e(iB,xto),e(hs,$to),e(k,kto),e(k,Ig),e(Ig,Ate),e(Ate,Sto),e(Ig,Rto),e(Ig,dB),e(dB,Bto),e(Ig,Pto),e(k,Ito),e(k,ps),e(ps,yte),e(yte,qto),e(ps,Nto),e(ps,cB),e(cB,jto),e(ps,Dto),e(ps,fB),e(fB,Gto),e(ps,Oto),e(k,Vto),e(k,qg),e(qg,Lte),e(Lte,Xto),e(qg,zto),e(qg,mB),e(mB,Qto),e(qg,Wto),e(k,Hto),e(k,Ng),e(Ng,xte),e(xte,Uto),e(Ng,Jto),e(Ng,gB),e(gB,Yto),e(Ng,Kto),e(k,Zto),e(k,jg),e(jg,$te),e($te,eao),e(jg,oao),e(jg,hB),e(hB,rao),e(jg,tao),e(k,aao),e(k,Dg),e(Dg,kte),e(kte,nao),e(Dg,sao),e(Dg,pB),e(pB,lao),e(Dg,iao),e(k,dao),e(k,us),e(us,Ste),e(Ste,cao),e(us,fao),e(us,uB),e(uB,mao),e(us,gao),e(us,_B),e(_B,hao),e(us,pao),e(k,uao),e(k,Gg),e(Gg,Rte),e(Rte,_ao),e(Gg,bao),e(Gg,bB),e(bB,vao),e(Gg,Fao),e(k,Tao),e(k,_s),e(_s,Bte),e(Bte,Mao),e(_s,Eao),e(_s,vB),e(vB,Cao),e(_s,wao),e(_s,FB),e(FB,Aao),e(_s,yao),e(k,Lao),e(k,bs),e(bs,Pte),e(Pte,xao),e(bs,$ao),e(bs,TB),e(TB,kao),e(bs,Sao),e(bs,MB),e(MB,Rao),e(bs,Bao),e(k,Pao),e(k,vs),e(vs,Ite),e(Ite,Iao),e(vs,qao),e(vs,EB),e(EB,Nao),e(vs,jao),e(vs,CB),e(CB,Dao),e(vs,Gao),e(k,Oao),e(k,Fs),e(Fs,qte),e(qte,Vao),e(Fs,Xao),e(Fs,wB),e(wB,zao),e(Fs,Qao),e(Fs,AB),e(AB,Wao),e(Fs,Hao),e(k,Uao),e(k,Ts),e(Ts,Nte),e(Nte,Jao),e(Ts,Yao),e(Ts,yB),e(yB,Kao),e(Ts,Zao),e(Ts,LB),e(LB,eno),e(Ts,ono),e(k,rno),e(k,Ms),e(Ms,jte),e(jte,tno),e(Ms,ano),e(Ms,xB),e(xB,nno),e(Ms,sno),e(Ms,$B),e($B,lno),e(Ms,ino),e(k,dno),e(k,Og),e(Og,Dte),e(Dte,cno),e(Og,fno),e(Og,kB),e(kB,mno),e(Og,gno),e(k,hno),e(k,Vg),e(Vg,Gte),e(Gte,pno),e(Vg,uno),e(Vg,SB),e(SB,_no),e(Vg,bno),e(k,vno),e(k,Es),e(Es,Ote),e(Ote,Fno),e(Es,Tno),e(Es,RB),e(RB,Mno),e(Es,Eno),e(Es,BB),e(BB,Cno),e(Es,wno),e(k,Ano),e(k,Cs),e(Cs,Vte),e(Vte,yno),e(Cs,Lno),e(Cs,PB),e(PB,xno),e(Cs,$no),e(Cs,IB),e(IB,kno),e(Cs,Sno),e(k,Rno),e(k,ws),e(ws,Xte),e(Xte,Bno),e(ws,Pno),e(ws,qB),e(qB,Ino),e(ws,qno),e(ws,NB),e(NB,Nno),e(ws,jno),e(k,Dno),e(k,Xg),e(Xg,zte),e(zte,Gno),e(Xg,Ono),e(Xg,jB),e(jB,Vno),e(Xg,Xno),e(k,zno),e(k,zg),e(zg,Qte),e(Qte,Qno),e(zg,Wno),e(zg,DB),e(DB,Hno),e(zg,Uno),e(k,Jno),e(k,Qg),e(Qg,Wte),e(Wte,Yno),e(Qg,Kno),e(Qg,GB),e(GB,Zno),e(Qg,eso),e(k,oso),e(k,As),e(As,Hte),e(Hte,rso),e(As,tso),e(As,OB),e(OB,aso),e(As,nso),e(As,VB),e(VB,sso),e(As,lso),e(k,iso),e(k,Wg),e(Wg,Ute),e(Ute,dso),e(Wg,cso),e(Wg,XB),e(XB,fso),e(Wg,mso),e(k,gso),e(k,Hg),e(Hg,Jte),e(Jte,hso),e(Hg,pso),e(Hg,zB),e(zB,uso),e(Hg,_so),e(k,bso),e(k,ys),e(ys,Yte),e(Yte,vso),e(ys,Fso),e(ys,QB),e(QB,Tso),e(ys,Mso),e(ys,WB),e(WB,Eso),e(ys,Cso),e(k,wso),e(k,Ug),e(Ug,Kte),e(Kte,Aso),e(Ug,yso),e(Ug,HB),e(HB,Lso),e(Ug,xso),e(k,$so),e(k,Jg),e(Jg,Zte),e(Zte,kso),e(Jg,Sso),e(Jg,UB),e(UB,Rso),e(Jg,Bso),e(k,Pso),e(k,Ls),e(Ls,eae),e(eae,Iso),e(Ls,qso),e(Ls,JB),e(JB,Nso),e(Ls,jso),e(Ls,YB),e(YB,Dso),e(Ls,Gso),e(k,Oso),e(k,xs),e(xs,oae),e(oae,Vso),e(xs,Xso),e(xs,KB),e(KB,zso),e(xs,Qso),e(xs,ZB),e(ZB,Wso),e(xs,Hso),e(k,Uso),e(k,$s),e($s,rae),e(rae,Jso),e($s,Yso),e($s,eP),e(eP,Kso),e($s,Zso),e($s,oP),e(oP,elo),e($s,olo),e(k,rlo),e(k,ks),e(ks,tae),e(tae,tlo),e(ks,alo),e(ks,rP),e(rP,nlo),e(ks,slo),e(ks,tP),e(tP,llo),e(ks,ilo),e(Cr,dlo),M(Yg,Cr,null),e(wo,clo),e(wo,Kg),M(p6,Kg,null),e(Kg,flo),e(Kg,aae),e(aae,mlo),b(f,bIe,_),b(f,bi,_),e(bi,Zg),e(Zg,nae),M(u6,nae,null),e(bi,glo),e(bi,sae),e(sae,hlo),b(f,vIe,_),b(f,Ao,_),M(_6,Ao,null),e(Ao,plo),e(Ao,b6),e(b6,ulo),e(b6,aP),e(aP,_lo),e(b6,blo),e(Ao,vlo),e(Ao,v6),e(v6,Flo),e(v6,lae),e(lae,Tlo),e(v6,Mlo),e(Ao,Elo),e(Ao,Qe),M(F6,Qe,null),e(Qe,Clo),e(Qe,iae),e(iae,wlo),e(Qe,Alo),e(Qe,wa),e(wa,ylo),e(wa,dae),e(dae,Llo),e(wa,xlo),e(wa,cae),e(cae,$lo),e(wa,klo),e(wa,fae),e(fae,Slo),e(wa,Rlo),e(Qe,Blo),e(Qe,oe),e(oe,eh),e(eh,mae),e(mae,Plo),e(eh,Ilo),e(eh,nP),e(nP,qlo),e(eh,Nlo),e(oe,jlo),e(oe,oh),e(oh,gae),e(gae,Dlo),e(oh,Glo),e(oh,sP),e(sP,Olo),e(oh,Vlo),e(oe,Xlo),e(oe,rh),e(rh,hae),e(hae,zlo),e(rh,Qlo),e(rh,lP),e(lP,Wlo),e(rh,Hlo),e(oe,Ulo),e(oe,th),e(th,pae),e(pae,Jlo),e(th,Ylo),e(th,iP),e(iP,Klo),e(th,Zlo),e(oe,eio),e(oe,ah),e(ah,uae),e(uae,oio),e(ah,rio),e(ah,dP),e(dP,tio),e(ah,aio),e(oe,nio),e(oe,nh),e(nh,_ae),e(_ae,sio),e(nh,lio),e(nh,cP),e(cP,iio),e(nh,dio),e(oe,cio),e(oe,sh),e(sh,bae),e(bae,fio),e(sh,mio),e(sh,fP),e(fP,gio),e(sh,hio),e(oe,pio),e(oe,lh),e(lh,vae),e(vae,uio),e(lh,_io),e(lh,mP),e(mP,bio),e(lh,vio),e(oe,Fio),e(oe,ih),e(ih,Fae),e(Fae,Tio),e(ih,Mio),e(ih,gP),e(gP,Eio),e(ih,Cio),e(oe,wio),e(oe,dh),e(dh,Tae),e(Tae,Aio),e(dh,yio),e(dh,hP),e(hP,Lio),e(dh,xio),e(oe,$io),e(oe,ch),e(ch,Mae),e(Mae,kio),e(ch,Sio),e(ch,pP),e(pP,Rio),e(ch,Bio),e(oe,Pio),e(oe,fh),e(fh,Eae),e(Eae,Iio),e(fh,qio),e(fh,uP),e(uP,Nio),e(fh,jio),e(oe,Dio),e(oe,mh),e(mh,Cae),e(Cae,Gio),e(mh,Oio),e(mh,_P),e(_P,Vio),e(mh,Xio),e(oe,zio),e(oe,gh),e(gh,wae),e(wae,Qio),e(gh,Wio),e(gh,bP),e(bP,Hio),e(gh,Uio),e(oe,Jio),e(oe,hh),e(hh,Aae),e(Aae,Yio),e(hh,Kio),e(hh,vP),e(vP,Zio),e(hh,edo),e(oe,odo),e(oe,ph),e(ph,yae),e(yae,rdo),e(ph,tdo),e(ph,FP),e(FP,ado),e(ph,ndo),e(oe,sdo),e(oe,uh),e(uh,Lae),e(Lae,ldo),e(uh,ido),e(uh,TP),e(TP,ddo),e(uh,cdo),e(oe,fdo),e(oe,_h),e(_h,xae),e(xae,mdo),e(_h,gdo),e(_h,MP),e(MP,hdo),e(_h,pdo),e(oe,udo),e(oe,bh),e(bh,$ae),e($ae,_do),e(bh,bdo),e(bh,EP),e(EP,vdo),e(bh,Fdo),e(oe,Tdo),e(oe,vh),e(vh,kae),e(kae,Mdo),e(vh,Edo),e(vh,CP),e(CP,Cdo),e(vh,wdo),e(oe,Ado),e(oe,Fh),e(Fh,Sae),e(Sae,ydo),e(Fh,Ldo),e(Fh,wP),e(wP,xdo),e(Fh,$do),e(oe,kdo),e(oe,Th),e(Th,Rae),e(Rae,Sdo),e(Th,Rdo),e(Th,AP),e(AP,Bdo),e(Th,Pdo),e(oe,Ido),e(oe,Mh),e(Mh,Bae),e(Bae,qdo),e(Mh,Ndo),e(Mh,yP),e(yP,jdo),e(Mh,Ddo),e(oe,Gdo),e(oe,Eh),e(Eh,Pae),e(Pae,Odo),e(Eh,Vdo),e(Eh,LP),e(LP,Xdo),e(Eh,zdo),e(oe,Qdo),e(oe,Ch),e(Ch,Iae),e(Iae,Wdo),e(Ch,Hdo),e(Ch,xP),e(xP,Udo),e(Ch,Jdo),e(Qe,Ydo),M(wh,Qe,null),e(Qe,Kdo),M(Ah,Qe,null),e(Ao,Zdo),e(Ao,yh),M(T6,yh,null),e(yh,eco),e(yh,qae),e(qae,oco),b(f,FIe,_),b(f,vi,_),e(vi,Lh),e(Lh,Nae),M(M6,Nae,null),e(vi,rco),e(vi,jae),e(jae,tco),b(f,TIe,_),b(f,yo,_),M(E6,yo,null),e(yo,aco),e(yo,C6),e(C6,nco),e(C6,$P),e($P,sco),e(C6,lco),e(yo,ico),e(yo,w6),e(w6,dco),e(w6,Dae),e(Dae,cco),e(w6,fco),e(yo,mco),e(yo,We),M(A6,We,null),e(We,gco),e(We,Gae),e(Gae,hco),e(We,pco),e(We,Fi),e(Fi,uco),e(Fi,Oae),e(Oae,_co),e(Fi,bco),e(Fi,Vae),e(Vae,vco),e(Fi,Fco),e(We,Tco),e(We,be),e(be,xh),e(xh,Xae),e(Xae,Mco),e(xh,Eco),e(xh,kP),e(kP,Cco),e(xh,wco),e(be,Aco),e(be,$h),e($h,zae),e(zae,yco),e($h,Lco),e($h,Qae),e(Qae,xco),e($h,$co),e(be,kco),e(be,kh),e(kh,Wae),e(Wae,Sco),e(kh,Rco),e(kh,SP),e(SP,Bco),e(kh,Pco),e(be,Ico),e(be,Sh),e(Sh,Hae),e(Hae,qco),e(Sh,Nco),e(Sh,RP),e(RP,jco),e(Sh,Dco),e(be,Gco),e(be,Rh),e(Rh,Uae),e(Uae,Oco),e(Rh,Vco),e(Rh,BP),e(BP,Xco),e(Rh,zco),e(be,Qco),e(be,Bh),e(Bh,Jae),e(Jae,Wco),e(Bh,Hco),e(Bh,PP),e(PP,Uco),e(Bh,Jco),e(be,Yco),e(be,Ph),e(Ph,Yae),e(Yae,Kco),e(Ph,Zco),e(Ph,IP),e(IP,efo),e(Ph,ofo),e(be,rfo),e(be,Ih),e(Ih,Kae),e(Kae,tfo),e(Ih,afo),e(Ih,qP),e(qP,nfo),e(Ih,sfo),e(be,lfo),e(be,qh),e(qh,Zae),e(Zae,ifo),e(qh,dfo),e(qh,NP),e(NP,cfo),e(qh,ffo),e(be,mfo),e(be,Nh),e(Nh,ene),e(ene,gfo),e(Nh,hfo),e(Nh,jP),e(jP,pfo),e(Nh,ufo),e(be,_fo),e(be,jh),e(jh,one),e(one,bfo),e(jh,vfo),e(jh,DP),e(DP,Ffo),e(jh,Tfo),e(be,Mfo),e(be,Dh),e(Dh,rne),e(rne,Efo),e(Dh,Cfo),e(Dh,GP),e(GP,wfo),e(Dh,Afo),e(be,yfo),e(be,Gh),e(Gh,tne),e(tne,Lfo),e(Gh,xfo),e(Gh,OP),e(OP,$fo),e(Gh,kfo),e(be,Sfo),e(be,Oh),e(Oh,ane),e(ane,Rfo),e(Oh,Bfo),e(Oh,VP),e(VP,Pfo),e(Oh,Ifo),e(be,qfo),e(be,Vh),e(Vh,nne),e(nne,Nfo),e(Vh,jfo),e(Vh,XP),e(XP,Dfo),e(Vh,Gfo),e(We,Ofo),M(Xh,We,null),e(We,Vfo),M(zh,We,null),e(yo,Xfo),e(yo,Qh),M(y6,Qh,null),e(Qh,zfo),e(Qh,sne),e(sne,Qfo),b(f,MIe,_),b(f,Ti,_),e(Ti,Wh),e(Wh,lne),M(L6,lne,null),e(Ti,Wfo),e(Ti,ine),e(ine,Hfo),b(f,EIe,_),b(f,Lo,_),M(x6,Lo,null),e(Lo,Ufo),e(Lo,Mi),e(Mi,Jfo),e(Mi,zP),e(zP,Yfo),e(Mi,Kfo),e(Mi,QP),e(QP,Zfo),e(Mi,emo),e(Lo,omo),e(Lo,$6),e($6,rmo),e($6,dne),e(dne,tmo),e($6,amo),e(Lo,nmo),e(Lo,ot),M(k6,ot,null),e(ot,smo),e(ot,cne),e(cne,lmo),e(ot,imo),e(ot,Ei),e(Ei,dmo),e(Ei,fne),e(fne,cmo),e(Ei,fmo),e(Ei,WP),e(WP,mmo),e(Ei,gmo),e(ot,hmo),M(Hh,ot,null),e(Lo,pmo),e(Lo,He),M(S6,He,null),e(He,umo),e(He,mne),e(mne,_mo),e(He,bmo),e(He,Aa),e(Aa,vmo),e(Aa,gne),e(gne,Fmo),e(Aa,Tmo),e(Aa,hne),e(hne,Mmo),e(Aa,Emo),e(Aa,pne),e(pne,Cmo),e(Aa,wmo),e(He,Amo),e(He,x),e(x,Uh),e(Uh,une),e(une,ymo),e(Uh,Lmo),e(Uh,HP),e(HP,xmo),e(Uh,$mo),e(x,kmo),e(x,Jh),e(Jh,_ne),e(_ne,Smo),e(Jh,Rmo),e(Jh,UP),e(UP,Bmo),e(Jh,Pmo),e(x,Imo),e(x,Yh),e(Yh,bne),e(bne,qmo),e(Yh,Nmo),e(Yh,JP),e(JP,jmo),e(Yh,Dmo),e(x,Gmo),e(x,Kh),e(Kh,vne),e(vne,Omo),e(Kh,Vmo),e(Kh,YP),e(YP,Xmo),e(Kh,zmo),e(x,Qmo),e(x,Zh),e(Zh,Fne),e(Fne,Wmo),e(Zh,Hmo),e(Zh,KP),e(KP,Umo),e(Zh,Jmo),e(x,Ymo),e(x,ep),e(ep,Tne),e(Tne,Kmo),e(ep,Zmo),e(ep,ZP),e(ZP,ego),e(ep,ogo),e(x,rgo),e(x,op),e(op,Mne),e(Mne,tgo),e(op,ago),e(op,eI),e(eI,ngo),e(op,sgo),e(x,lgo),e(x,rp),e(rp,Ene),e(Ene,igo),e(rp,dgo),e(rp,oI),e(oI,cgo),e(rp,fgo),e(x,mgo),e(x,tp),e(tp,Cne),e(Cne,ggo),e(tp,hgo),e(tp,rI),e(rI,pgo),e(tp,ugo),e(x,_go),e(x,ap),e(ap,wne),e(wne,bgo),e(ap,vgo),e(ap,tI),e(tI,Fgo),e(ap,Tgo),e(x,Mgo),e(x,np),e(np,Ane),e(Ane,Ego),e(np,Cgo),e(np,aI),e(aI,wgo),e(np,Ago),e(x,ygo),e(x,sp),e(sp,yne),e(yne,Lgo),e(sp,xgo),e(sp,nI),e(nI,$go),e(sp,kgo),e(x,Sgo),e(x,lp),e(lp,Lne),e(Lne,Rgo),e(lp,Bgo),e(lp,sI),e(sI,Pgo),e(lp,Igo),e(x,qgo),e(x,ip),e(ip,xne),e(xne,Ngo),e(ip,jgo),e(ip,lI),e(lI,Dgo),e(ip,Ggo),e(x,Ogo),e(x,dp),e(dp,$ne),e($ne,Vgo),e(dp,Xgo),e(dp,iI),e(iI,zgo),e(dp,Qgo),e(x,Wgo),e(x,cp),e(cp,kne),e(kne,Hgo),e(cp,Ugo),e(cp,dI),e(dI,Jgo),e(cp,Ygo),e(x,Kgo),e(x,fp),e(fp,Sne),e(Sne,Zgo),e(fp,eho),e(fp,cI),e(cI,oho),e(fp,rho),e(x,tho),e(x,mp),e(mp,Rne),e(Rne,aho),e(mp,nho),e(mp,fI),e(fI,sho),e(mp,lho),e(x,iho),e(x,gp),e(gp,Bne),e(Bne,dho),e(gp,cho),e(gp,mI),e(mI,fho),e(gp,mho),e(x,gho),e(x,hp),e(hp,Pne),e(Pne,hho),e(hp,pho),e(hp,gI),e(gI,uho),e(hp,_ho),e(x,bho),e(x,pp),e(pp,Ine),e(Ine,vho),e(pp,Fho),e(pp,hI),e(hI,Tho),e(pp,Mho),e(x,Eho),e(x,up),e(up,qne),e(qne,Cho),e(up,who),e(up,pI),e(pI,Aho),e(up,yho),e(x,Lho),e(x,_p),e(_p,Nne),e(Nne,xho),e(_p,$ho),e(_p,uI),e(uI,kho),e(_p,Sho),e(x,Rho),e(x,bp),e(bp,jne),e(jne,Bho),e(bp,Pho),e(bp,_I),e(_I,Iho),e(bp,qho),e(x,Nho),e(x,vp),e(vp,Dne),e(Dne,jho),e(vp,Dho),e(vp,bI),e(bI,Gho),e(vp,Oho),e(x,Vho),e(x,Fp),e(Fp,Gne),e(Gne,Xho),e(Fp,zho),e(Fp,vI),e(vI,Qho),e(Fp,Who),e(x,Hho),e(x,Tp),e(Tp,One),e(One,Uho),e(Tp,Jho),e(Tp,FI),e(FI,Yho),e(Tp,Kho),e(x,Zho),e(x,Mp),e(Mp,Vne),e(Vne,epo),e(Mp,opo),e(Mp,TI),e(TI,rpo),e(Mp,tpo),e(x,apo),e(x,Ep),e(Ep,Xne),e(Xne,npo),e(Ep,spo),e(Ep,MI),e(MI,lpo),e(Ep,ipo),e(x,dpo),e(x,Cp),e(Cp,zne),e(zne,cpo),e(Cp,fpo),e(Cp,EI),e(EI,mpo),e(Cp,gpo),e(x,hpo),e(x,wp),e(wp,Qne),e(Qne,ppo),e(wp,upo),e(wp,CI),e(CI,_po),e(wp,bpo),e(x,vpo),e(x,Ap),e(Ap,Wne),e(Wne,Fpo),e(Ap,Tpo),e(Ap,wI),e(wI,Mpo),e(Ap,Epo),e(x,Cpo),e(x,Ss),e(Ss,Hne),e(Hne,wpo),e(Ss,Apo),e(Ss,AI),e(AI,ypo),e(Ss,Lpo),e(Ss,yI),e(yI,xpo),e(Ss,$po),e(x,kpo),e(x,yp),e(yp,Une),e(Une,Spo),e(yp,Rpo),e(yp,LI),e(LI,Bpo),e(yp,Ppo),e(x,Ipo),e(x,Lp),e(Lp,Jne),e(Jne,qpo),e(Lp,Npo),e(Lp,xI),e(xI,jpo),e(Lp,Dpo),e(x,Gpo),e(x,xp),e(xp,Yne),e(Yne,Opo),e(xp,Vpo),e(xp,$I),e($I,Xpo),e(xp,zpo),e(x,Qpo),e(x,$p),e($p,Kne),e(Kne,Wpo),e($p,Hpo),e($p,kI),e(kI,Upo),e($p,Jpo),e(x,Ypo),e(x,kp),e(kp,Zne),e(Zne,Kpo),e(kp,Zpo),e(kp,SI),e(SI,euo),e(kp,ouo),e(x,ruo),e(x,Sp),e(Sp,ese),e(ese,tuo),e(Sp,auo),e(Sp,RI),e(RI,nuo),e(Sp,suo),e(x,luo),e(x,Rp),e(Rp,ose),e(ose,iuo),e(Rp,duo),e(Rp,BI),e(BI,cuo),e(Rp,fuo),e(x,muo),e(x,Bp),e(Bp,rse),e(rse,guo),e(Bp,huo),e(Bp,PI),e(PI,puo),e(Bp,uuo),e(x,_uo),e(x,Pp),e(Pp,tse),e(tse,buo),e(Pp,vuo),e(Pp,II),e(II,Fuo),e(Pp,Tuo),e(x,Muo),e(x,Ip),e(Ip,ase),e(ase,Euo),e(Ip,Cuo),e(Ip,qI),e(qI,wuo),e(Ip,Auo),e(x,yuo),e(x,qp),e(qp,nse),e(nse,Luo),e(qp,xuo),e(qp,NI),e(NI,$uo),e(qp,kuo),e(x,Suo),e(x,Np),e(Np,sse),e(sse,Ruo),e(Np,Buo),e(Np,jI),e(jI,Puo),e(Np,Iuo),e(x,quo),e(x,jp),e(jp,lse),e(lse,Nuo),e(jp,juo),e(jp,DI),e(DI,Duo),e(jp,Guo),e(x,Ouo),e(x,Dp),e(Dp,ise),e(ise,Vuo),e(Dp,Xuo),e(Dp,GI),e(GI,zuo),e(Dp,Quo),e(x,Wuo),e(x,Gp),e(Gp,dse),e(dse,Huo),e(Gp,Uuo),e(Gp,OI),e(OI,Juo),e(Gp,Yuo),e(x,Kuo),e(x,Op),e(Op,cse),e(cse,Zuo),e(Op,e_o),e(Op,VI),e(VI,o_o),e(Op,r_o),e(x,t_o),e(x,Vp),e(Vp,fse),e(fse,a_o),e(Vp,n_o),e(Vp,XI),e(XI,s_o),e(Vp,l_o),e(x,i_o),e(x,Xp),e(Xp,mse),e(mse,d_o),e(Xp,c_o),e(Xp,zI),e(zI,f_o),e(Xp,m_o),e(x,g_o),e(x,zp),e(zp,gse),e(gse,h_o),e(zp,p_o),e(zp,QI),e(QI,u_o),e(zp,__o),e(x,b_o),e(x,Qp),e(Qp,hse),e(hse,v_o),e(Qp,F_o),e(Qp,WI),e(WI,T_o),e(Qp,M_o),e(x,E_o),e(x,Wp),e(Wp,pse),e(pse,C_o),e(Wp,w_o),e(Wp,HI),e(HI,A_o),e(Wp,y_o),e(x,L_o),e(x,Hp),e(Hp,use),e(use,x_o),e(Hp,$_o),e(Hp,UI),e(UI,k_o),e(Hp,S_o),e(x,R_o),e(x,Up),e(Up,_se),e(_se,B_o),e(Up,P_o),e(Up,JI),e(JI,I_o),e(Up,q_o),e(x,N_o),e(x,Jp),e(Jp,bse),e(bse,j_o),e(Jp,D_o),e(Jp,YI),e(YI,G_o),e(Jp,O_o),e(x,V_o),e(x,Yp),e(Yp,vse),e(vse,X_o),e(Yp,z_o),e(Yp,KI),e(KI,Q_o),e(Yp,W_o),e(x,H_o),e(x,Kp),e(Kp,Fse),e(Fse,U_o),e(Kp,J_o),e(Kp,ZI),e(ZI,Y_o),e(Kp,K_o),e(x,Z_o),e(x,Zp),e(Zp,Tse),e(Tse,e2o),e(Zp,o2o),e(Zp,eq),e(eq,r2o),e(Zp,t2o),e(x,a2o),e(x,eu),e(eu,Mse),e(Mse,n2o),e(eu,s2o),e(eu,oq),e(oq,l2o),e(eu,i2o),e(x,d2o),e(x,ou),e(ou,Ese),e(Ese,c2o),e(ou,f2o),e(ou,rq),e(rq,m2o),e(ou,g2o),e(x,h2o),e(x,ru),e(ru,Cse),e(Cse,p2o),e(ru,u2o),e(ru,tq),e(tq,_2o),e(ru,b2o),e(x,v2o),e(x,tu),e(tu,wse),e(wse,F2o),e(tu,T2o),e(tu,aq),e(aq,M2o),e(tu,E2o),e(x,C2o),e(x,au),e(au,Ase),e(Ase,w2o),e(au,A2o),e(au,nq),e(nq,y2o),e(au,L2o),e(x,x2o),e(x,nu),e(nu,yse),e(yse,$2o),e(nu,k2o),e(nu,sq),e(sq,S2o),e(nu,R2o),e(x,B2o),e(x,su),e(su,Lse),e(Lse,P2o),e(su,I2o),e(su,lq),e(lq,q2o),e(su,N2o),e(x,j2o),e(x,lu),e(lu,xse),e(xse,D2o),e(lu,G2o),e(lu,iq),e(iq,O2o),e(lu,V2o),e(x,X2o),e(x,iu),e(iu,$se),e($se,z2o),e(iu,Q2o),e(iu,dq),e(dq,W2o),e(iu,H2o),e(x,U2o),e(x,du),e(du,kse),e(kse,J2o),e(du,Y2o),e(du,cq),e(cq,K2o),e(du,Z2o),e(x,e1o),e(x,cu),e(cu,Sse),e(Sse,o1o),e(cu,r1o),e(cu,fq),e(fq,t1o),e(cu,a1o),e(x,n1o),e(x,fu),e(fu,Rse),e(Rse,s1o),e(fu,l1o),e(fu,mq),e(mq,i1o),e(fu,d1o),e(x,c1o),e(x,mu),e(mu,Bse),e(Bse,f1o),e(mu,m1o),e(mu,gq),e(gq,g1o),e(mu,h1o),e(x,p1o),e(x,gu),e(gu,Pse),e(Pse,u1o),e(gu,_1o),e(gu,hq),e(hq,b1o),e(gu,v1o),e(x,F1o),e(x,hu),e(hu,Ise),e(Ise,T1o),e(hu,M1o),e(hu,pq),e(pq,E1o),e(hu,C1o),e(x,w1o),e(x,pu),e(pu,qse),e(qse,A1o),e(pu,y1o),e(pu,uq),e(uq,L1o),e(pu,x1o),e(x,$1o),e(x,uu),e(uu,Nse),e(Nse,k1o),e(uu,S1o),e(uu,_q),e(_q,R1o),e(uu,B1o),e(x,P1o),e(x,_u),e(_u,jse),e(jse,I1o),e(_u,q1o),e(_u,bq),e(bq,N1o),e(_u,j1o),e(x,D1o),e(x,bu),e(bu,Dse),e(Dse,G1o),e(bu,O1o),e(bu,vq),e(vq,V1o),e(bu,X1o),e(x,z1o),e(x,vu),e(vu,Gse),e(Gse,Q1o),e(vu,W1o),e(vu,Fq),e(Fq,H1o),e(vu,U1o),e(x,J1o),e(x,Fu),e(Fu,Ose),e(Ose,Y1o),e(Fu,K1o),e(Fu,Tq),e(Tq,Z1o),e(Fu,ebo),e(x,obo),e(x,Tu),e(Tu,Vse),e(Vse,rbo),e(Tu,tbo),e(Tu,Mq),e(Mq,abo),e(Tu,nbo),e(x,sbo),e(x,Mu),e(Mu,Xse),e(Xse,lbo),e(Mu,ibo),e(Mu,Eq),e(Eq,dbo),e(Mu,cbo),e(x,fbo),e(x,Eu),e(Eu,zse),e(zse,mbo),e(Eu,gbo),e(Eu,Cq),e(Cq,hbo),e(Eu,pbo),e(x,ubo),e(x,Cu),e(Cu,Qse),e(Qse,_bo),e(Cu,bbo),e(Cu,wq),e(wq,vbo),e(Cu,Fbo),e(x,Tbo),e(x,wu),e(wu,Wse),e(Wse,Mbo),e(wu,Ebo),e(wu,Aq),e(Aq,Cbo),e(wu,wbo),e(x,Abo),e(x,Au),e(Au,Hse),e(Hse,ybo),e(Au,Lbo),e(Au,yq),e(yq,xbo),e(Au,$bo),e(x,kbo),e(x,yu),e(yu,Use),e(Use,Sbo),e(yu,Rbo),e(yu,Lq),e(Lq,Bbo),e(yu,Pbo),e(x,Ibo),e(x,Lu),e(Lu,Jse),e(Jse,qbo),e(Lu,Nbo),e(Lu,xq),e(xq,jbo),e(Lu,Dbo),e(x,Gbo),e(x,xu),e(xu,Yse),e(Yse,Obo),e(xu,Vbo),e(xu,$q),e($q,Xbo),e(xu,zbo),e(x,Qbo),e(x,$u),e($u,Kse),e(Kse,Wbo),e($u,Hbo),e($u,kq),e(kq,Ubo),e($u,Jbo),e(x,Ybo),e(x,ku),e(ku,Zse),e(Zse,Kbo),e(ku,Zbo),e(ku,Sq),e(Sq,evo),e(ku,ovo),e(x,rvo),e(x,Su),e(Su,ele),e(ele,tvo),e(Su,avo),e(Su,Rq),e(Rq,nvo),e(Su,svo),e(x,lvo),e(x,Ru),e(Ru,ole),e(ole,ivo),e(Ru,dvo),e(Ru,Bq),e(Bq,cvo),e(Ru,fvo),e(x,mvo),e(x,Bu),e(Bu,rle),e(rle,gvo),e(Bu,hvo),e(Bu,Pq),e(Pq,pvo),e(Bu,uvo),e(x,_vo),e(x,Pu),e(Pu,tle),e(tle,bvo),e(Pu,vvo),e(Pu,Iq),e(Iq,Fvo),e(Pu,Tvo),e(x,Mvo),e(x,Iu),e(Iu,ale),e(ale,Evo),e(Iu,Cvo),e(Iu,qq),e(qq,wvo),e(Iu,Avo),e(x,yvo),e(x,qu),e(qu,nle),e(nle,Lvo),e(qu,xvo),e(qu,Nq),e(Nq,$vo),e(qu,kvo),e(He,Svo),e(He,Nu),e(Nu,Rvo),e(Nu,sle),e(sle,Bvo),e(Nu,Pvo),e(Nu,lle),e(lle,Ivo),e(He,qvo),M(ju,He,null),b(f,CIe,_),b(f,Ci,_),e(Ci,Du),e(Du,ile),M(R6,ile,null),e(Ci,Nvo),e(Ci,dle),e(dle,jvo),b(f,wIe,_),b(f,xo,_),M(B6,xo,null),e(xo,Dvo),e(xo,wi),e(wi,Gvo),e(wi,jq),e(jq,Ovo),e(wi,Vvo),e(wi,Dq),e(Dq,Xvo),e(wi,zvo),e(xo,Qvo),e(xo,P6),e(P6,Wvo),e(P6,cle),e(cle,Hvo),e(P6,Uvo),e(xo,Jvo),e(xo,rt),M(I6,rt,null),e(rt,Yvo),e(rt,fle),e(fle,Kvo),e(rt,Zvo),e(rt,Ai),e(Ai,eFo),e(Ai,mle),e(mle,oFo),e(Ai,rFo),e(Ai,Gq),e(Gq,tFo),e(Ai,aFo),e(rt,nFo),M(Gu,rt,null),e(xo,sFo),e(xo,Ue),M(q6,Ue,null),e(Ue,lFo),e(Ue,gle),e(gle,iFo),e(Ue,dFo),e(Ue,ya),e(ya,cFo),e(ya,hle),e(hle,fFo),e(ya,mFo),e(ya,ple),e(ple,gFo),e(ya,hFo),e(ya,ule),e(ule,pFo),e(ya,uFo),e(Ue,_Fo),e(Ue,G),e(G,Ou),e(Ou,_le),e(_le,bFo),e(Ou,vFo),e(Ou,Oq),e(Oq,FFo),e(Ou,TFo),e(G,MFo),e(G,Vu),e(Vu,ble),e(ble,EFo),e(Vu,CFo),e(Vu,Vq),e(Vq,wFo),e(Vu,AFo),e(G,yFo),e(G,Xu),e(Xu,vle),e(vle,LFo),e(Xu,xFo),e(Xu,Xq),e(Xq,$Fo),e(Xu,kFo),e(G,SFo),e(G,zu),e(zu,Fle),e(Fle,RFo),e(zu,BFo),e(zu,zq),e(zq,PFo),e(zu,IFo),e(G,qFo),e(G,Qu),e(Qu,Tle),e(Tle,NFo),e(Qu,jFo),e(Qu,Qq),e(Qq,DFo),e(Qu,GFo),e(G,OFo),e(G,Wu),e(Wu,Mle),e(Mle,VFo),e(Wu,XFo),e(Wu,Wq),e(Wq,zFo),e(Wu,QFo),e(G,WFo),e(G,Hu),e(Hu,Ele),e(Ele,HFo),e(Hu,UFo),e(Hu,Hq),e(Hq,JFo),e(Hu,YFo),e(G,KFo),e(G,Uu),e(Uu,Cle),e(Cle,ZFo),e(Uu,e0o),e(Uu,Uq),e(Uq,o0o),e(Uu,r0o),e(G,t0o),e(G,Ju),e(Ju,wle),e(wle,a0o),e(Ju,n0o),e(Ju,Jq),e(Jq,s0o),e(Ju,l0o),e(G,i0o),e(G,Yu),e(Yu,Ale),e(Ale,d0o),e(Yu,c0o),e(Yu,Yq),e(Yq,f0o),e(Yu,m0o),e(G,g0o),e(G,Ku),e(Ku,yle),e(yle,h0o),e(Ku,p0o),e(Ku,Kq),e(Kq,u0o),e(Ku,_0o),e(G,b0o),e(G,Zu),e(Zu,Lle),e(Lle,v0o),e(Zu,F0o),e(Zu,Zq),e(Zq,T0o),e(Zu,M0o),e(G,E0o),e(G,e_),e(e_,xle),e(xle,C0o),e(e_,w0o),e(e_,eN),e(eN,A0o),e(e_,y0o),e(G,L0o),e(G,o_),e(o_,$le),e($le,x0o),e(o_,$0o),e(o_,oN),e(oN,k0o),e(o_,S0o),e(G,R0o),e(G,r_),e(r_,kle),e(kle,B0o),e(r_,P0o),e(r_,rN),e(rN,I0o),e(r_,q0o),e(G,N0o),e(G,t_),e(t_,Sle),e(Sle,j0o),e(t_,D0o),e(t_,tN),e(tN,G0o),e(t_,O0o),e(G,V0o),e(G,a_),e(a_,Rle),e(Rle,X0o),e(a_,z0o),e(a_,aN),e(aN,Q0o),e(a_,W0o),e(G,H0o),e(G,n_),e(n_,Ble),e(Ble,U0o),e(n_,J0o),e(n_,nN),e(nN,Y0o),e(n_,K0o),e(G,Z0o),e(G,s_),e(s_,Ple),e(Ple,eTo),e(s_,oTo),e(s_,sN),e(sN,rTo),e(s_,tTo),e(G,aTo),e(G,l_),e(l_,Ile),e(Ile,nTo),e(l_,sTo),e(l_,lN),e(lN,lTo),e(l_,iTo),e(G,dTo),e(G,i_),e(i_,qle),e(qle,cTo),e(i_,fTo),e(i_,iN),e(iN,mTo),e(i_,gTo),e(G,hTo),e(G,d_),e(d_,Nle),e(Nle,pTo),e(d_,uTo),e(d_,dN),e(dN,_To),e(d_,bTo),e(G,vTo),e(G,c_),e(c_,jle),e(jle,FTo),e(c_,TTo),e(c_,cN),e(cN,MTo),e(c_,ETo),e(G,CTo),e(G,f_),e(f_,Dle),e(Dle,wTo),e(f_,ATo),e(f_,fN),e(fN,yTo),e(f_,LTo),e(G,xTo),e(G,m_),e(m_,Gle),e(Gle,$To),e(m_,kTo),e(m_,mN),e(mN,STo),e(m_,RTo),e(G,BTo),e(G,g_),e(g_,Ole),e(Ole,PTo),e(g_,ITo),e(g_,gN),e(gN,qTo),e(g_,NTo),e(G,jTo),e(G,h_),e(h_,Vle),e(Vle,DTo),e(h_,GTo),e(h_,hN),e(hN,OTo),e(h_,VTo),e(G,XTo),e(G,p_),e(p_,Xle),e(Xle,zTo),e(p_,QTo),e(p_,pN),e(pN,WTo),e(p_,HTo),e(G,UTo),e(G,u_),e(u_,zle),e(zle,JTo),e(u_,YTo),e(u_,uN),e(uN,KTo),e(u_,ZTo),e(G,e7o),e(G,__),e(__,Qle),e(Qle,o7o),e(__,r7o),e(__,_N),e(_N,t7o),e(__,a7o),e(G,n7o),e(G,b_),e(b_,Wle),e(Wle,s7o),e(b_,l7o),e(b_,bN),e(bN,i7o),e(b_,d7o),e(G,c7o),e(G,v_),e(v_,Hle),e(Hle,f7o),e(v_,m7o),e(v_,vN),e(vN,g7o),e(v_,h7o),e(G,p7o),e(G,F_),e(F_,Ule),e(Ule,u7o),e(F_,_7o),e(F_,FN),e(FN,b7o),e(F_,v7o),e(G,F7o),e(G,T_),e(T_,Jle),e(Jle,T7o),e(T_,M7o),e(T_,TN),e(TN,E7o),e(T_,C7o),e(G,w7o),e(G,M_),e(M_,Yle),e(Yle,A7o),e(M_,y7o),e(M_,MN),e(MN,L7o),e(M_,x7o),e(G,$7o),e(G,E_),e(E_,Kle),e(Kle,k7o),e(E_,S7o),e(E_,EN),e(EN,R7o),e(E_,B7o),e(G,P7o),e(G,C_),e(C_,Zle),e(Zle,I7o),e(C_,q7o),e(C_,CN),e(CN,N7o),e(C_,j7o),e(G,D7o),e(G,w_),e(w_,eie),e(eie,G7o),e(w_,O7o),e(w_,wN),e(wN,V7o),e(w_,X7o),e(G,z7o),e(G,A_),e(A_,oie),e(oie,Q7o),e(A_,W7o),e(A_,AN),e(AN,H7o),e(A_,U7o),e(G,J7o),e(G,y_),e(y_,rie),e(rie,Y7o),e(y_,K7o),e(y_,yN),e(yN,Z7o),e(y_,eMo),e(G,oMo),e(G,L_),e(L_,tie),e(tie,rMo),e(L_,tMo),e(L_,LN),e(LN,aMo),e(L_,nMo),e(Ue,sMo),e(Ue,x_),e(x_,lMo),e(x_,aie),e(aie,iMo),e(x_,dMo),e(x_,nie),e(nie,cMo),e(Ue,fMo),M($_,Ue,null),b(f,AIe,_),b(f,yi,_),e(yi,k_),e(k_,sie),M(N6,sie,null),e(yi,mMo),e(yi,lie),e(lie,gMo),b(f,yIe,_),b(f,$o,_),M(j6,$o,null),e($o,hMo),e($o,Li),e(Li,pMo),e(Li,xN),e(xN,uMo),e(Li,_Mo),e(Li,$N),e($N,bMo),e(Li,vMo),e($o,FMo),e($o,D6),e(D6,TMo),e(D6,iie),e(iie,MMo),e(D6,EMo),e($o,CMo),e($o,tt),M(G6,tt,null),e(tt,wMo),e(tt,die),e(die,AMo),e(tt,yMo),e(tt,xi),e(xi,LMo),e(xi,cie),e(cie,xMo),e(xi,$Mo),e(xi,kN),e(kN,kMo),e(xi,SMo),e(tt,RMo),M(S_,tt,null),e($o,BMo),e($o,Je),M(O6,Je,null),e(Je,PMo),e(Je,fie),e(fie,IMo),e(Je,qMo),e(Je,La),e(La,NMo),e(La,mie),e(mie,jMo),e(La,DMo),e(La,gie),e(gie,GMo),e(La,OMo),e(La,hie),e(hie,VMo),e(La,XMo),e(Je,zMo),e(Je,z),e(z,R_),e(R_,pie),e(pie,QMo),e(R_,WMo),e(R_,SN),e(SN,HMo),e(R_,UMo),e(z,JMo),e(z,B_),e(B_,uie),e(uie,YMo),e(B_,KMo),e(B_,RN),e(RN,ZMo),e(B_,e4o),e(z,o4o),e(z,P_),e(P_,_ie),e(_ie,r4o),e(P_,t4o),e(P_,BN),e(BN,a4o),e(P_,n4o),e(z,s4o),e(z,I_),e(I_,bie),e(bie,l4o),e(I_,i4o),e(I_,PN),e(PN,d4o),e(I_,c4o),e(z,f4o),e(z,q_),e(q_,vie),e(vie,m4o),e(q_,g4o),e(q_,IN),e(IN,h4o),e(q_,p4o),e(z,u4o),e(z,N_),e(N_,Fie),e(Fie,_4o),e(N_,b4o),e(N_,qN),e(qN,v4o),e(N_,F4o),e(z,T4o),e(z,j_),e(j_,Tie),e(Tie,M4o),e(j_,E4o),e(j_,NN),e(NN,C4o),e(j_,w4o),e(z,A4o),e(z,D_),e(D_,Mie),e(Mie,y4o),e(D_,L4o),e(D_,jN),e(jN,x4o),e(D_,$4o),e(z,k4o),e(z,G_),e(G_,Eie),e(Eie,S4o),e(G_,R4o),e(G_,DN),e(DN,B4o),e(G_,P4o),e(z,I4o),e(z,O_),e(O_,Cie),e(Cie,q4o),e(O_,N4o),e(O_,GN),e(GN,j4o),e(O_,D4o),e(z,G4o),e(z,V_),e(V_,wie),e(wie,O4o),e(V_,V4o),e(V_,ON),e(ON,X4o),e(V_,z4o),e(z,Q4o),e(z,X_),e(X_,Aie),e(Aie,W4o),e(X_,H4o),e(X_,VN),e(VN,U4o),e(X_,J4o),e(z,Y4o),e(z,z_),e(z_,yie),e(yie,K4o),e(z_,Z4o),e(z_,XN),e(XN,eEo),e(z_,oEo),e(z,rEo),e(z,Q_),e(Q_,Lie),e(Lie,tEo),e(Q_,aEo),e(Q_,zN),e(zN,nEo),e(Q_,sEo),e(z,lEo),e(z,W_),e(W_,xie),e(xie,iEo),e(W_,dEo),e(W_,QN),e(QN,cEo),e(W_,fEo),e(z,mEo),e(z,H_),e(H_,$ie),e($ie,gEo),e(H_,hEo),e(H_,WN),e(WN,pEo),e(H_,uEo),e(z,_Eo),e(z,U_),e(U_,kie),e(kie,bEo),e(U_,vEo),e(U_,HN),e(HN,FEo),e(U_,TEo),e(z,MEo),e(z,J_),e(J_,Sie),e(Sie,EEo),e(J_,CEo),e(J_,UN),e(UN,wEo),e(J_,AEo),e(z,yEo),e(z,Y_),e(Y_,Rie),e(Rie,LEo),e(Y_,xEo),e(Y_,JN),e(JN,$Eo),e(Y_,kEo),e(z,SEo),e(z,K_),e(K_,Bie),e(Bie,REo),e(K_,BEo),e(K_,YN),e(YN,PEo),e(K_,IEo),e(z,qEo),e(z,Z_),e(Z_,Pie),e(Pie,NEo),e(Z_,jEo),e(Z_,KN),e(KN,DEo),e(Z_,GEo),e(z,OEo),e(z,e2),e(e2,Iie),e(Iie,VEo),e(e2,XEo),e(e2,ZN),e(ZN,zEo),e(e2,QEo),e(z,WEo),e(z,o2),e(o2,qie),e(qie,HEo),e(o2,UEo),e(o2,ej),e(ej,JEo),e(o2,YEo),e(z,KEo),e(z,r2),e(r2,Nie),e(Nie,ZEo),e(r2,e5o),e(r2,oj),e(oj,o5o),e(r2,r5o),e(z,t5o),e(z,t2),e(t2,jie),e(jie,a5o),e(t2,n5o),e(t2,rj),e(rj,s5o),e(t2,l5o),e(z,i5o),e(z,a2),e(a2,Die),e(Die,d5o),e(a2,c5o),e(a2,tj),e(tj,f5o),e(a2,m5o),e(z,g5o),e(z,n2),e(n2,Gie),e(Gie,h5o),e(n2,p5o),e(n2,aj),e(aj,u5o),e(n2,_5o),e(z,b5o),e(z,s2),e(s2,Oie),e(Oie,v5o),e(s2,F5o),e(s2,nj),e(nj,T5o),e(s2,M5o),e(z,E5o),e(z,l2),e(l2,Vie),e(Vie,C5o),e(l2,w5o),e(l2,sj),e(sj,A5o),e(l2,y5o),e(z,L5o),e(z,i2),e(i2,Xie),e(Xie,x5o),e(i2,$5o),e(i2,lj),e(lj,k5o),e(i2,S5o),e(z,R5o),e(z,d2),e(d2,zie),e(zie,B5o),e(d2,P5o),e(d2,ij),e(ij,I5o),e(d2,q5o),e(z,N5o),e(z,c2),e(c2,Qie),e(Qie,j5o),e(c2,D5o),e(c2,dj),e(dj,G5o),e(c2,O5o),e(z,V5o),e(z,f2),e(f2,Wie),e(Wie,X5o),e(f2,z5o),e(f2,cj),e(cj,Q5o),e(f2,W5o),e(z,H5o),e(z,m2),e(m2,Hie),e(Hie,U5o),e(m2,J5o),e(m2,fj),e(fj,Y5o),e(m2,K5o),e(z,Z5o),e(z,g2),e(g2,Uie),e(Uie,eCo),e(g2,oCo),e(g2,mj),e(mj,rCo),e(g2,tCo),e(z,aCo),e(z,h2),e(h2,Jie),e(Jie,nCo),e(h2,sCo),e(h2,gj),e(gj,lCo),e(h2,iCo),e(z,dCo),e(z,p2),e(p2,Yie),e(Yie,cCo),e(p2,fCo),e(p2,hj),e(hj,mCo),e(p2,gCo),e(Je,hCo),e(Je,u2),e(u2,pCo),e(u2,Kie),e(Kie,uCo),e(u2,_Co),e(u2,Zie),e(Zie,bCo),e(Je,vCo),M(_2,Je,null),b(f,LIe,_),b(f,$i,_),e($i,b2),e(b2,ede),M(V6,ede,null),e($i,FCo),e($i,ode),e(ode,TCo),b(f,xIe,_),b(f,ko,_),M(X6,ko,null),e(ko,MCo),e(ko,ki),e(ki,ECo),e(ki,pj),e(pj,CCo),e(ki,wCo),e(ki,uj),e(uj,ACo),e(ki,yCo),e(ko,LCo),e(ko,z6),e(z6,xCo),e(z6,rde),e(rde,$Co),e(z6,kCo),e(ko,SCo),e(ko,at),M(Q6,at,null),e(at,RCo),e(at,tde),e(tde,BCo),e(at,PCo),e(at,Si),e(Si,ICo),e(Si,ade),e(ade,qCo),e(Si,NCo),e(Si,_j),e(_j,jCo),e(Si,DCo),e(at,GCo),M(v2,at,null),e(ko,OCo),e(ko,Ye),M(W6,Ye,null),e(Ye,VCo),e(Ye,nde),e(nde,XCo),e(Ye,zCo),e(Ye,xa),e(xa,QCo),e(xa,sde),e(sde,WCo),e(xa,HCo),e(xa,lde),e(lde,UCo),e(xa,JCo),e(xa,ide),e(ide,YCo),e(xa,KCo),e(Ye,ZCo),e(Ye,W),e(W,F2),e(F2,dde),e(dde,e3o),e(F2,o3o),e(F2,bj),e(bj,r3o),e(F2,t3o),e(W,a3o),e(W,T2),e(T2,cde),e(cde,n3o),e(T2,s3o),e(T2,vj),e(vj,l3o),e(T2,i3o),e(W,d3o),e(W,M2),e(M2,fde),e(fde,c3o),e(M2,f3o),e(M2,Fj),e(Fj,m3o),e(M2,g3o),e(W,h3o),e(W,E2),e(E2,mde),e(mde,p3o),e(E2,u3o),e(E2,Tj),e(Tj,_3o),e(E2,b3o),e(W,v3o),e(W,C2),e(C2,gde),e(gde,F3o),e(C2,T3o),e(C2,Mj),e(Mj,M3o),e(C2,E3o),e(W,C3o),e(W,w2),e(w2,hde),e(hde,w3o),e(w2,A3o),e(w2,Ej),e(Ej,y3o),e(w2,L3o),e(W,x3o),e(W,A2),e(A2,pde),e(pde,$3o),e(A2,k3o),e(A2,Cj),e(Cj,S3o),e(A2,R3o),e(W,B3o),e(W,y2),e(y2,ude),e(ude,P3o),e(y2,I3o),e(y2,wj),e(wj,q3o),e(y2,N3o),e(W,j3o),e(W,L2),e(L2,_de),e(_de,D3o),e(L2,G3o),e(L2,Aj),e(Aj,O3o),e(L2,V3o),e(W,X3o),e(W,x2),e(x2,bde),e(bde,z3o),e(x2,Q3o),e(x2,yj),e(yj,W3o),e(x2,H3o),e(W,U3o),e(W,$2),e($2,vde),e(vde,J3o),e($2,Y3o),e($2,Lj),e(Lj,K3o),e($2,Z3o),e(W,ewo),e(W,k2),e(k2,Fde),e(Fde,owo),e(k2,rwo),e(k2,xj),e(xj,two),e(k2,awo),e(W,nwo),e(W,S2),e(S2,Tde),e(Tde,swo),e(S2,lwo),e(S2,$j),e($j,iwo),e(S2,dwo),e(W,cwo),e(W,R2),e(R2,Mde),e(Mde,fwo),e(R2,mwo),e(R2,kj),e(kj,gwo),e(R2,hwo),e(W,pwo),e(W,B2),e(B2,Ede),e(Ede,uwo),e(B2,_wo),e(B2,Sj),e(Sj,bwo),e(B2,vwo),e(W,Fwo),e(W,P2),e(P2,Cde),e(Cde,Two),e(P2,Mwo),e(P2,Rj),e(Rj,Ewo),e(P2,Cwo),e(W,wwo),e(W,I2),e(I2,wde),e(wde,Awo),e(I2,ywo),e(I2,Bj),e(Bj,Lwo),e(I2,xwo),e(W,$wo),e(W,q2),e(q2,Ade),e(Ade,kwo),e(q2,Swo),e(q2,Pj),e(Pj,Rwo),e(q2,Bwo),e(W,Pwo),e(W,N2),e(N2,yde),e(yde,Iwo),e(N2,qwo),e(N2,Ij),e(Ij,Nwo),e(N2,jwo),e(W,Dwo),e(W,j2),e(j2,Lde),e(Lde,Gwo),e(j2,Owo),e(j2,qj),e(qj,Vwo),e(j2,Xwo),e(W,zwo),e(W,D2),e(D2,xde),e(xde,Qwo),e(D2,Wwo),e(D2,Nj),e(Nj,Hwo),e(D2,Uwo),e(W,Jwo),e(W,G2),e(G2,$de),e($de,Ywo),e(G2,Kwo),e(G2,jj),e(jj,Zwo),e(G2,eAo),e(W,oAo),e(W,O2),e(O2,kde),e(kde,rAo),e(O2,tAo),e(O2,Dj),e(Dj,aAo),e(O2,nAo),e(W,sAo),e(W,V2),e(V2,Sde),e(Sde,lAo),e(V2,iAo),e(V2,Gj),e(Gj,dAo),e(V2,cAo),e(W,fAo),e(W,X2),e(X2,Rde),e(Rde,mAo),e(X2,gAo),e(X2,Oj),e(Oj,hAo),e(X2,pAo),e(W,uAo),e(W,z2),e(z2,Bde),e(Bde,_Ao),e(z2,bAo),e(z2,Vj),e(Vj,vAo),e(z2,FAo),e(W,TAo),e(W,Q2),e(Q2,Pde),e(Pde,MAo),e(Q2,EAo),e(Q2,Xj),e(Xj,CAo),e(Q2,wAo),e(W,AAo),e(W,W2),e(W2,Ide),e(Ide,yAo),e(W2,LAo),e(W2,zj),e(zj,xAo),e(W2,$Ao),e(W,kAo),e(W,H2),e(H2,qde),e(qde,SAo),e(H2,RAo),e(H2,Qj),e(Qj,BAo),e(H2,PAo),e(W,IAo),e(W,U2),e(U2,Nde),e(Nde,qAo),e(U2,NAo),e(U2,Wj),e(Wj,jAo),e(U2,DAo),e(W,GAo),e(W,J2),e(J2,jde),e(jde,OAo),e(J2,VAo),e(J2,Dde),e(Dde,XAo),e(J2,zAo),e(W,QAo),e(W,Y2),e(Y2,Gde),e(Gde,WAo),e(Y2,HAo),e(Y2,Hj),e(Hj,UAo),e(Y2,JAo),e(W,YAo),e(W,K2),e(K2,Ode),e(Ode,KAo),e(K2,ZAo),e(K2,Uj),e(Uj,e6o),e(K2,o6o),e(W,r6o),e(W,Z2),e(Z2,Vde),e(Vde,t6o),e(Z2,a6o),e(Z2,Jj),e(Jj,n6o),e(Z2,s6o),e(W,l6o),e(W,e1),e(e1,Xde),e(Xde,i6o),e(e1,d6o),e(e1,Yj),e(Yj,c6o),e(e1,f6o),e(Ye,m6o),e(Ye,o1),e(o1,g6o),e(o1,zde),e(zde,h6o),e(o1,p6o),e(o1,Qde),e(Qde,u6o),e(Ye,_6o),M(r1,Ye,null),b(f,$Ie,_),b(f,Ri,_),e(Ri,t1),e(t1,Wde),M(H6,Wde,null),e(Ri,b6o),e(Ri,Hde),e(Hde,v6o),b(f,kIe,_),b(f,So,_),M(U6,So,null),e(So,F6o),e(So,Bi),e(Bi,T6o),e(Bi,Kj),e(Kj,M6o),e(Bi,E6o),e(Bi,Zj),e(Zj,C6o),e(Bi,w6o),e(So,A6o),e(So,J6),e(J6,y6o),e(J6,Ude),e(Ude,L6o),e(J6,x6o),e(So,$6o),e(So,nt),M(Y6,nt,null),e(nt,k6o),e(nt,Jde),e(Jde,S6o),e(nt,R6o),e(nt,Pi),e(Pi,B6o),e(Pi,Yde),e(Yde,P6o),e(Pi,I6o),e(Pi,eD),e(eD,q6o),e(Pi,N6o),e(nt,j6o),M(a1,nt,null),e(So,D6o),e(So,Ke),M(K6,Ke,null),e(Ke,G6o),e(Ke,Kde),e(Kde,O6o),e(Ke,V6o),e(Ke,$a),e($a,X6o),e($a,Zde),e(Zde,z6o),e($a,Q6o),e($a,ece),e(ece,W6o),e($a,H6o),e($a,oce),e(oce,U6o),e($a,J6o),e(Ke,Y6o),e(Ke,he),e(he,n1),e(n1,rce),e(rce,K6o),e(n1,Z6o),e(n1,oD),e(oD,eyo),e(n1,oyo),e(he,ryo),e(he,s1),e(s1,tce),e(tce,tyo),e(s1,ayo),e(s1,rD),e(rD,nyo),e(s1,syo),e(he,lyo),e(he,l1),e(l1,ace),e(ace,iyo),e(l1,dyo),e(l1,tD),e(tD,cyo),e(l1,fyo),e(he,myo),e(he,i1),e(i1,nce),e(nce,gyo),e(i1,hyo),e(i1,aD),e(aD,pyo),e(i1,uyo),e(he,_yo),e(he,d1),e(d1,sce),e(sce,byo),e(d1,vyo),e(d1,nD),e(nD,Fyo),e(d1,Tyo),e(he,Myo),e(he,c1),e(c1,lce),e(lce,Eyo),e(c1,Cyo),e(c1,sD),e(sD,wyo),e(c1,Ayo),e(he,yyo),e(he,f1),e(f1,ice),e(ice,Lyo),e(f1,xyo),e(f1,lD),e(lD,$yo),e(f1,kyo),e(he,Syo),e(he,m1),e(m1,dce),e(dce,Ryo),e(m1,Byo),e(m1,iD),e(iD,Pyo),e(m1,Iyo),e(he,qyo),e(he,g1),e(g1,cce),e(cce,Nyo),e(g1,jyo),e(g1,dD),e(dD,Dyo),e(g1,Gyo),e(he,Oyo),e(he,h1),e(h1,fce),e(fce,Vyo),e(h1,Xyo),e(h1,cD),e(cD,zyo),e(h1,Qyo),e(he,Wyo),e(he,p1),e(p1,mce),e(mce,Hyo),e(p1,Uyo),e(p1,fD),e(fD,Jyo),e(p1,Yyo),e(he,Kyo),e(he,u1),e(u1,gce),e(gce,Zyo),e(u1,eLo),e(u1,mD),e(mD,oLo),e(u1,rLo),e(he,tLo),e(he,_1),e(_1,hce),e(hce,aLo),e(_1,nLo),e(_1,gD),e(gD,sLo),e(_1,lLo),e(he,iLo),e(he,b1),e(b1,pce),e(pce,dLo),e(b1,cLo),e(b1,hD),e(hD,fLo),e(b1,mLo),e(he,gLo),e(he,v1),e(v1,uce),e(uce,hLo),e(v1,pLo),e(v1,pD),e(pD,uLo),e(v1,_Lo),e(he,bLo),e(he,F1),e(F1,_ce),e(_ce,vLo),e(F1,FLo),e(F1,uD),e(uD,TLo),e(F1,MLo),e(he,ELo),e(he,T1),e(T1,bce),e(bce,CLo),e(T1,wLo),e(T1,_D),e(_D,ALo),e(T1,yLo),e(Ke,LLo),e(Ke,M1),e(M1,xLo),e(M1,vce),e(vce,$Lo),e(M1,kLo),e(M1,Fce),e(Fce,SLo),e(Ke,RLo),M(E1,Ke,null),b(f,SIe,_),b(f,Ii,_),e(Ii,C1),e(C1,Tce),M(Z6,Tce,null),e(Ii,BLo),e(Ii,Mce),e(Mce,PLo),b(f,RIe,_),b(f,Ro,_),M(ey,Ro,null),e(Ro,ILo),e(Ro,qi),e(qi,qLo),e(qi,bD),e(bD,NLo),e(qi,jLo),e(qi,vD),e(vD,DLo),e(qi,GLo),e(Ro,OLo),e(Ro,oy),e(oy,VLo),e(oy,Ece),e(Ece,XLo),e(oy,zLo),e(Ro,QLo),e(Ro,st),M(ry,st,null),e(st,WLo),e(st,Cce),e(Cce,HLo),e(st,ULo),e(st,Ni),e(Ni,JLo),e(Ni,wce),e(wce,YLo),e(Ni,KLo),e(Ni,FD),e(FD,ZLo),e(Ni,e8o),e(st,o8o),M(w1,st,null),e(Ro,r8o),e(Ro,Ze),M(ty,Ze,null),e(Ze,t8o),e(Ze,Ace),e(Ace,a8o),e(Ze,n8o),e(Ze,ka),e(ka,s8o),e(ka,yce),e(yce,l8o),e(ka,i8o),e(ka,Lce),e(Lce,d8o),e(ka,c8o),e(ka,xce),e(xce,f8o),e(ka,m8o),e(Ze,g8o),e(Ze,q),e(q,A1),e(A1,$ce),e($ce,h8o),e(A1,p8o),e(A1,TD),e(TD,u8o),e(A1,_8o),e(q,b8o),e(q,y1),e(y1,kce),e(kce,v8o),e(y1,F8o),e(y1,MD),e(MD,T8o),e(y1,M8o),e(q,E8o),e(q,L1),e(L1,Sce),e(Sce,C8o),e(L1,w8o),e(L1,ED),e(ED,A8o),e(L1,y8o),e(q,L8o),e(q,x1),e(x1,Rce),e(Rce,x8o),e(x1,$8o),e(x1,CD),e(CD,k8o),e(x1,S8o),e(q,R8o),e(q,$1),e($1,Bce),e(Bce,B8o),e($1,P8o),e($1,wD),e(wD,I8o),e($1,q8o),e(q,N8o),e(q,k1),e(k1,Pce),e(Pce,j8o),e(k1,D8o),e(k1,AD),e(AD,G8o),e(k1,O8o),e(q,V8o),e(q,S1),e(S1,Ice),e(Ice,X8o),e(S1,z8o),e(S1,yD),e(yD,Q8o),e(S1,W8o),e(q,H8o),e(q,R1),e(R1,qce),e(qce,U8o),e(R1,J8o),e(R1,LD),e(LD,Y8o),e(R1,K8o),e(q,Z8o),e(q,B1),e(B1,Nce),e(Nce,exo),e(B1,oxo),e(B1,xD),e(xD,rxo),e(B1,txo),e(q,axo),e(q,P1),e(P1,jce),e(jce,nxo),e(P1,sxo),e(P1,$D),e($D,lxo),e(P1,ixo),e(q,dxo),e(q,I1),e(I1,Dce),e(Dce,cxo),e(I1,fxo),e(I1,kD),e(kD,mxo),e(I1,gxo),e(q,hxo),e(q,q1),e(q1,Gce),e(Gce,pxo),e(q1,uxo),e(q1,SD),e(SD,_xo),e(q1,bxo),e(q,vxo),e(q,N1),e(N1,Oce),e(Oce,Fxo),e(N1,Txo),e(N1,RD),e(RD,Mxo),e(N1,Exo),e(q,Cxo),e(q,j1),e(j1,Vce),e(Vce,wxo),e(j1,Axo),e(j1,BD),e(BD,yxo),e(j1,Lxo),e(q,xxo),e(q,D1),e(D1,Xce),e(Xce,$xo),e(D1,kxo),e(D1,PD),e(PD,Sxo),e(D1,Rxo),e(q,Bxo),e(q,G1),e(G1,zce),e(zce,Pxo),e(G1,Ixo),e(G1,ID),e(ID,qxo),e(G1,Nxo),e(q,jxo),e(q,O1),e(O1,Qce),e(Qce,Dxo),e(O1,Gxo),e(O1,qD),e(qD,Oxo),e(O1,Vxo),e(q,Xxo),e(q,V1),e(V1,Wce),e(Wce,zxo),e(V1,Qxo),e(V1,ND),e(ND,Wxo),e(V1,Hxo),e(q,Uxo),e(q,X1),e(X1,Hce),e(Hce,Jxo),e(X1,Yxo),e(X1,jD),e(jD,Kxo),e(X1,Zxo),e(q,e9o),e(q,z1),e(z1,Uce),e(Uce,o9o),e(z1,r9o),e(z1,DD),e(DD,t9o),e(z1,a9o),e(q,n9o),e(q,Q1),e(Q1,Jce),e(Jce,s9o),e(Q1,l9o),e(Q1,GD),e(GD,i9o),e(Q1,d9o),e(q,c9o),e(q,W1),e(W1,Yce),e(Yce,f9o),e(W1,m9o),e(W1,OD),e(OD,g9o),e(W1,h9o),e(q,p9o),e(q,H1),e(H1,Kce),e(Kce,u9o),e(H1,_9o),e(H1,VD),e(VD,b9o),e(H1,v9o),e(q,F9o),e(q,U1),e(U1,Zce),e(Zce,T9o),e(U1,M9o),e(U1,XD),e(XD,E9o),e(U1,C9o),e(q,w9o),e(q,J1),e(J1,efe),e(efe,A9o),e(J1,y9o),e(J1,zD),e(zD,L9o),e(J1,x9o),e(q,$9o),e(q,Y1),e(Y1,ofe),e(ofe,k9o),e(Y1,S9o),e(Y1,QD),e(QD,R9o),e(Y1,B9o),e(q,P9o),e(q,K1),e(K1,rfe),e(rfe,I9o),e(K1,q9o),e(K1,WD),e(WD,N9o),e(K1,j9o),e(q,D9o),e(q,Z1),e(Z1,tfe),e(tfe,G9o),e(Z1,O9o),e(Z1,HD),e(HD,V9o),e(Z1,X9o),e(q,z9o),e(q,eb),e(eb,afe),e(afe,Q9o),e(eb,W9o),e(eb,UD),e(UD,H9o),e(eb,U9o),e(q,J9o),e(q,ob),e(ob,nfe),e(nfe,Y9o),e(ob,K9o),e(ob,JD),e(JD,Z9o),e(ob,e$o),e(q,o$o),e(q,rb),e(rb,sfe),e(sfe,r$o),e(rb,t$o),e(rb,YD),e(YD,a$o),e(rb,n$o),e(q,s$o),e(q,tb),e(tb,lfe),e(lfe,l$o),e(tb,i$o),e(tb,KD),e(KD,d$o),e(tb,c$o),e(q,f$o),e(q,ab),e(ab,ife),e(ife,m$o),e(ab,g$o),e(ab,ZD),e(ZD,h$o),e(ab,p$o),e(q,u$o),e(q,nb),e(nb,dfe),e(dfe,_$o),e(nb,b$o),e(nb,eG),e(eG,v$o),e(nb,F$o),e(q,T$o),e(q,sb),e(sb,cfe),e(cfe,M$o),e(sb,E$o),e(sb,oG),e(oG,C$o),e(sb,w$o),e(q,A$o),e(q,lb),e(lb,ffe),e(ffe,y$o),e(lb,L$o),e(lb,rG),e(rG,x$o),e(lb,$$o),e(q,k$o),e(q,ib),e(ib,mfe),e(mfe,S$o),e(ib,R$o),e(ib,tG),e(tG,B$o),e(ib,P$o),e(q,I$o),e(q,db),e(db,gfe),e(gfe,q$o),e(db,N$o),e(db,aG),e(aG,j$o),e(db,D$o),e(q,G$o),e(q,cb),e(cb,hfe),e(hfe,O$o),e(cb,V$o),e(cb,nG),e(nG,X$o),e(cb,z$o),e(q,Q$o),e(q,fb),e(fb,pfe),e(pfe,W$o),e(fb,H$o),e(fb,sG),e(sG,U$o),e(fb,J$o),e(q,Y$o),e(q,mb),e(mb,ufe),e(ufe,K$o),e(mb,Z$o),e(mb,lG),e(lG,eko),e(mb,oko),e(q,rko),e(q,gb),e(gb,_fe),e(_fe,tko),e(gb,ako),e(gb,iG),e(iG,nko),e(gb,sko),e(q,lko),e(q,hb),e(hb,bfe),e(bfe,iko),e(hb,dko),e(hb,dG),e(dG,cko),e(hb,fko),e(q,mko),e(q,pb),e(pb,vfe),e(vfe,gko),e(pb,hko),e(pb,cG),e(cG,pko),e(pb,uko),e(q,_ko),e(q,ub),e(ub,Ffe),e(Ffe,bko),e(ub,vko),e(ub,fG),e(fG,Fko),e(ub,Tko),e(q,Mko),e(q,_b),e(_b,Tfe),e(Tfe,Eko),e(_b,Cko),e(_b,mG),e(mG,wko),e(_b,Ako),e(q,yko),e(q,bb),e(bb,Mfe),e(Mfe,Lko),e(bb,xko),e(bb,gG),e(gG,$ko),e(bb,kko),e(Ze,Sko),e(Ze,vb),e(vb,Rko),e(vb,Efe),e(Efe,Bko),e(vb,Pko),e(vb,Cfe),e(Cfe,Iko),e(Ze,qko),M(Fb,Ze,null),b(f,BIe,_),b(f,ji,_),e(ji,Tb),e(Tb,wfe),M(ay,wfe,null),e(ji,Nko),e(ji,Afe),e(Afe,jko),b(f,PIe,_),b(f,Bo,_),M(ny,Bo,null),e(Bo,Dko),e(Bo,Di),e(Di,Gko),e(Di,hG),e(hG,Oko),e(Di,Vko),e(Di,pG),e(pG,Xko),e(Di,zko),e(Bo,Qko),e(Bo,sy),e(sy,Wko),e(sy,yfe),e(yfe,Hko),e(sy,Uko),e(Bo,Jko),e(Bo,lt),M(ly,lt,null),e(lt,Yko),e(lt,Lfe),e(Lfe,Kko),e(lt,Zko),e(lt,Gi),e(Gi,eSo),e(Gi,xfe),e(xfe,oSo),e(Gi,rSo),e(Gi,uG),e(uG,tSo),e(Gi,aSo),e(lt,nSo),M(Mb,lt,null),e(Bo,sSo),e(Bo,eo),M(iy,eo,null),e(eo,lSo),e(eo,$fe),e($fe,iSo),e(eo,dSo),e(eo,Sa),e(Sa,cSo),e(Sa,kfe),e(kfe,fSo),e(Sa,mSo),e(Sa,Sfe),e(Sfe,gSo),e(Sa,hSo),e(Sa,Rfe),e(Rfe,pSo),e(Sa,uSo),e(eo,_So),e(eo,Y),e(Y,Eb),e(Eb,Bfe),e(Bfe,bSo),e(Eb,vSo),e(Eb,_G),e(_G,FSo),e(Eb,TSo),e(Y,MSo),e(Y,Cb),e(Cb,Pfe),e(Pfe,ESo),e(Cb,CSo),e(Cb,bG),e(bG,wSo),e(Cb,ASo),e(Y,ySo),e(Y,wb),e(wb,Ife),e(Ife,LSo),e(wb,xSo),e(wb,vG),e(vG,$So),e(wb,kSo),e(Y,SSo),e(Y,Ab),e(Ab,qfe),e(qfe,RSo),e(Ab,BSo),e(Ab,FG),e(FG,PSo),e(Ab,ISo),e(Y,qSo),e(Y,yb),e(yb,Nfe),e(Nfe,NSo),e(yb,jSo),e(yb,TG),e(TG,DSo),e(yb,GSo),e(Y,OSo),e(Y,Lb),e(Lb,jfe),e(jfe,VSo),e(Lb,XSo),e(Lb,MG),e(MG,zSo),e(Lb,QSo),e(Y,WSo),e(Y,xb),e(xb,Dfe),e(Dfe,HSo),e(xb,USo),e(xb,EG),e(EG,JSo),e(xb,YSo),e(Y,KSo),e(Y,$b),e($b,Gfe),e(Gfe,ZSo),e($b,eRo),e($b,CG),e(CG,oRo),e($b,rRo),e(Y,tRo),e(Y,kb),e(kb,Ofe),e(Ofe,aRo),e(kb,nRo),e(kb,wG),e(wG,sRo),e(kb,lRo),e(Y,iRo),e(Y,Sb),e(Sb,Vfe),e(Vfe,dRo),e(Sb,cRo),e(Sb,AG),e(AG,fRo),e(Sb,mRo),e(Y,gRo),e(Y,Rb),e(Rb,Xfe),e(Xfe,hRo),e(Rb,pRo),e(Rb,yG),e(yG,uRo),e(Rb,_Ro),e(Y,bRo),e(Y,Bb),e(Bb,zfe),e(zfe,vRo),e(Bb,FRo),e(Bb,LG),e(LG,TRo),e(Bb,MRo),e(Y,ERo),e(Y,Pb),e(Pb,Qfe),e(Qfe,CRo),e(Pb,wRo),e(Pb,xG),e(xG,ARo),e(Pb,yRo),e(Y,LRo),e(Y,Ib),e(Ib,Wfe),e(Wfe,xRo),e(Ib,$Ro),e(Ib,$G),e($G,kRo),e(Ib,SRo),e(Y,RRo),e(Y,qb),e(qb,Hfe),e(Hfe,BRo),e(qb,PRo),e(qb,kG),e(kG,IRo),e(qb,qRo),e(Y,NRo),e(Y,Nb),e(Nb,Ufe),e(Ufe,jRo),e(Nb,DRo),e(Nb,SG),e(SG,GRo),e(Nb,ORo),e(Y,VRo),e(Y,jb),e(jb,Jfe),e(Jfe,XRo),e(jb,zRo),e(jb,RG),e(RG,QRo),e(jb,WRo),e(Y,HRo),e(Y,Db),e(Db,Yfe),e(Yfe,URo),e(Db,JRo),e(Db,BG),e(BG,YRo),e(Db,KRo),e(Y,ZRo),e(Y,Gb),e(Gb,Kfe),e(Kfe,eBo),e(Gb,oBo),e(Gb,PG),e(PG,rBo),e(Gb,tBo),e(Y,aBo),e(Y,Ob),e(Ob,Zfe),e(Zfe,nBo),e(Ob,sBo),e(Ob,IG),e(IG,lBo),e(Ob,iBo),e(Y,dBo),e(Y,Vb),e(Vb,eme),e(eme,cBo),e(Vb,fBo),e(Vb,qG),e(qG,mBo),e(Vb,gBo),e(Y,hBo),e(Y,Xb),e(Xb,ome),e(ome,pBo),e(Xb,uBo),e(Xb,NG),e(NG,_Bo),e(Xb,bBo),e(Y,vBo),e(Y,zb),e(zb,rme),e(rme,FBo),e(zb,TBo),e(zb,jG),e(jG,MBo),e(zb,EBo),e(Y,CBo),e(Y,Qb),e(Qb,tme),e(tme,wBo),e(Qb,ABo),e(Qb,DG),e(DG,yBo),e(Qb,LBo),e(Y,xBo),e(Y,Wb),e(Wb,ame),e(ame,$Bo),e(Wb,kBo),e(Wb,GG),e(GG,SBo),e(Wb,RBo),e(Y,BBo),e(Y,Hb),e(Hb,nme),e(nme,PBo),e(Hb,IBo),e(Hb,OG),e(OG,qBo),e(Hb,NBo),e(Y,jBo),e(Y,Ub),e(Ub,sme),e(sme,DBo),e(Ub,GBo),e(Ub,VG),e(VG,OBo),e(Ub,VBo),e(Y,XBo),e(Y,Jb),e(Jb,lme),e(lme,zBo),e(Jb,QBo),e(Jb,XG),e(XG,WBo),e(Jb,HBo),e(Y,UBo),e(Y,Yb),e(Yb,ime),e(ime,JBo),e(Yb,YBo),e(Yb,zG),e(zG,KBo),e(Yb,ZBo),e(eo,ePo),e(eo,Kb),e(Kb,oPo),e(Kb,dme),e(dme,rPo),e(Kb,tPo),e(Kb,cme),e(cme,aPo),e(eo,nPo),M(Zb,eo,null),b(f,IIe,_),b(f,Oi,_),e(Oi,ev),e(ev,fme),M(dy,fme,null),e(Oi,sPo),e(Oi,mme),e(mme,lPo),b(f,qIe,_),b(f,Po,_),M(cy,Po,null),e(Po,iPo),e(Po,Vi),e(Vi,dPo),e(Vi,QG),e(QG,cPo),e(Vi,fPo),e(Vi,WG),e(WG,mPo),e(Vi,gPo),e(Po,hPo),e(Po,fy),e(fy,pPo),e(fy,gme),e(gme,uPo),e(fy,_Po),e(Po,bPo),e(Po,it),M(my,it,null),e(it,vPo),e(it,hme),e(hme,FPo),e(it,TPo),e(it,Xi),e(Xi,MPo),e(Xi,pme),e(pme,EPo),e(Xi,CPo),e(Xi,HG),e(HG,wPo),e(Xi,APo),e(it,yPo),M(ov,it,null),e(Po,LPo),e(Po,oo),M(gy,oo,null),e(oo,xPo),e(oo,ume),e(ume,$Po),e(oo,kPo),e(oo,Ra),e(Ra,SPo),e(Ra,_me),e(_me,RPo),e(Ra,BPo),e(Ra,bme),e(bme,PPo),e(Ra,IPo),e(Ra,vme),e(vme,qPo),e(Ra,NPo),e(oo,jPo),e(oo,Yr),e(Yr,rv),e(rv,Fme),e(Fme,DPo),e(rv,GPo),e(rv,UG),e(UG,OPo),e(rv,VPo),e(Yr,XPo),e(Yr,tv),e(tv,Tme),e(Tme,zPo),e(tv,QPo),e(tv,JG),e(JG,WPo),e(tv,HPo),e(Yr,UPo),e(Yr,av),e(av,Mme),e(Mme,JPo),e(av,YPo),e(av,YG),e(YG,KPo),e(av,ZPo),e(Yr,eIo),e(Yr,nv),e(nv,Eme),e(Eme,oIo),e(nv,rIo),e(nv,KG),e(KG,tIo),e(nv,aIo),e(Yr,nIo),e(Yr,sv),e(sv,Cme),e(Cme,sIo),e(sv,lIo),e(sv,ZG),e(ZG,iIo),e(sv,dIo),e(oo,cIo),e(oo,lv),e(lv,fIo),e(lv,wme),e(wme,mIo),e(lv,gIo),e(lv,Ame),e(Ame,hIo),e(oo,pIo),M(iv,oo,null),b(f,NIe,_),b(f,zi,_),e(zi,dv),e(dv,yme),M(hy,yme,null),e(zi,uIo),e(zi,Lme),e(Lme,_Io),b(f,jIe,_),b(f,Io,_),M(py,Io,null),e(Io,bIo),e(Io,Qi),e(Qi,vIo),e(Qi,eO),e(eO,FIo),e(Qi,TIo),e(Qi,oO),e(oO,MIo),e(Qi,EIo),e(Io,CIo),e(Io,uy),e(uy,wIo),e(uy,xme),e(xme,AIo),e(uy,yIo),e(Io,LIo),e(Io,dt),M(_y,dt,null),e(dt,xIo),e(dt,$me),e($me,$Io),e(dt,kIo),e(dt,Wi),e(Wi,SIo),e(Wi,kme),e(kme,RIo),e(Wi,BIo),e(Wi,rO),e(rO,PIo),e(Wi,IIo),e(dt,qIo),M(cv,dt,null),e(Io,NIo),e(Io,ro),M(by,ro,null),e(ro,jIo),e(ro,Sme),e(Sme,DIo),e(ro,GIo),e(ro,Ba),e(Ba,OIo),e(Ba,Rme),e(Rme,VIo),e(Ba,XIo),e(Ba,Bme),e(Bme,zIo),e(Ba,QIo),e(Ba,Pme),e(Pme,WIo),e(Ba,HIo),e(ro,UIo),e(ro,U),e(U,fv),e(fv,Ime),e(Ime,JIo),e(fv,YIo),e(fv,tO),e(tO,KIo),e(fv,ZIo),e(U,eqo),e(U,mv),e(mv,qme),e(qme,oqo),e(mv,rqo),e(mv,aO),e(aO,tqo),e(mv,aqo),e(U,nqo),e(U,gv),e(gv,Nme),e(Nme,sqo),e(gv,lqo),e(gv,nO),e(nO,iqo),e(gv,dqo),e(U,cqo),e(U,hv),e(hv,jme),e(jme,fqo),e(hv,mqo),e(hv,sO),e(sO,gqo),e(hv,hqo),e(U,pqo),e(U,pv),e(pv,Dme),e(Dme,uqo),e(pv,_qo),e(pv,lO),e(lO,bqo),e(pv,vqo),e(U,Fqo),e(U,uv),e(uv,Gme),e(Gme,Tqo),e(uv,Mqo),e(uv,iO),e(iO,Eqo),e(uv,Cqo),e(U,wqo),e(U,_v),e(_v,Ome),e(Ome,Aqo),e(_v,yqo),e(_v,dO),e(dO,Lqo),e(_v,xqo),e(U,$qo),e(U,bv),e(bv,Vme),e(Vme,kqo),e(bv,Sqo),e(bv,cO),e(cO,Rqo),e(bv,Bqo),e(U,Pqo),e(U,vv),e(vv,Xme),e(Xme,Iqo),e(vv,qqo),e(vv,fO),e(fO,Nqo),e(vv,jqo),e(U,Dqo),e(U,Fv),e(Fv,zme),e(zme,Gqo),e(Fv,Oqo),e(Fv,mO),e(mO,Vqo),e(Fv,Xqo),e(U,zqo),e(U,Tv),e(Tv,Qme),e(Qme,Qqo),e(Tv,Wqo),e(Tv,gO),e(gO,Hqo),e(Tv,Uqo),e(U,Jqo),e(U,Mv),e(Mv,Wme),e(Wme,Yqo),e(Mv,Kqo),e(Mv,hO),e(hO,Zqo),e(Mv,eNo),e(U,oNo),e(U,Ev),e(Ev,Hme),e(Hme,rNo),e(Ev,tNo),e(Ev,pO),e(pO,aNo),e(Ev,nNo),e(U,sNo),e(U,Cv),e(Cv,Ume),e(Ume,lNo),e(Cv,iNo),e(Cv,uO),e(uO,dNo),e(Cv,cNo),e(U,fNo),e(U,wv),e(wv,Jme),e(Jme,mNo),e(wv,gNo),e(wv,_O),e(_O,hNo),e(wv,pNo),e(U,uNo),e(U,Av),e(Av,Yme),e(Yme,_No),e(Av,bNo),e(Av,bO),e(bO,vNo),e(Av,FNo),e(U,TNo),e(U,yv),e(yv,Kme),e(Kme,MNo),e(yv,ENo),e(yv,vO),e(vO,CNo),e(yv,wNo),e(U,ANo),e(U,Lv),e(Lv,Zme),e(Zme,yNo),e(Lv,LNo),e(Lv,FO),e(FO,xNo),e(Lv,$No),e(U,kNo),e(U,xv),e(xv,ege),e(ege,SNo),e(xv,RNo),e(xv,TO),e(TO,BNo),e(xv,PNo),e(U,INo),e(U,$v),e($v,oge),e(oge,qNo),e($v,NNo),e($v,MO),e(MO,jNo),e($v,DNo),e(U,GNo),e(U,kv),e(kv,rge),e(rge,ONo),e(kv,VNo),e(kv,EO),e(EO,XNo),e(kv,zNo),e(U,QNo),e(U,Sv),e(Sv,tge),e(tge,WNo),e(Sv,HNo),e(Sv,CO),e(CO,UNo),e(Sv,JNo),e(U,YNo),e(U,Rv),e(Rv,age),e(age,KNo),e(Rv,ZNo),e(Rv,wO),e(wO,ejo),e(Rv,ojo),e(U,rjo),e(U,Bv),e(Bv,nge),e(nge,tjo),e(Bv,ajo),e(Bv,AO),e(AO,njo),e(Bv,sjo),e(U,ljo),e(U,Pv),e(Pv,sge),e(sge,ijo),e(Pv,djo),e(Pv,yO),e(yO,cjo),e(Pv,fjo),e(U,mjo),e(U,Iv),e(Iv,lge),e(lge,gjo),e(Iv,hjo),e(Iv,LO),e(LO,pjo),e(Iv,ujo),e(U,_jo),e(U,qv),e(qv,ige),e(ige,bjo),e(qv,vjo),e(qv,xO),e(xO,Fjo),e(qv,Tjo),e(U,Mjo),e(U,Nv),e(Nv,dge),e(dge,Ejo),e(Nv,Cjo),e(Nv,$O),e($O,wjo),e(Nv,Ajo),e(U,yjo),e(U,jv),e(jv,cge),e(cge,Ljo),e(jv,xjo),e(jv,kO),e(kO,$jo),e(jv,kjo),e(U,Sjo),e(U,Dv),e(Dv,fge),e(fge,Rjo),e(Dv,Bjo),e(Dv,SO),e(SO,Pjo),e(Dv,Ijo),e(U,qjo),e(U,Gv),e(Gv,mge),e(mge,Njo),e(Gv,jjo),e(Gv,RO),e(RO,Djo),e(Gv,Gjo),e(U,Ojo),e(U,Ov),e(Ov,gge),e(gge,Vjo),e(Ov,Xjo),e(Ov,BO),e(BO,zjo),e(Ov,Qjo),e(U,Wjo),e(U,Vv),e(Vv,hge),e(hge,Hjo),e(Vv,Ujo),e(Vv,PO),e(PO,Jjo),e(Vv,Yjo),e(ro,Kjo),e(ro,Xv),e(Xv,Zjo),e(Xv,pge),e(pge,eDo),e(Xv,oDo),e(Xv,uge),e(uge,rDo),e(ro,tDo),M(zv,ro,null),b(f,DIe,_),b(f,Hi,_),e(Hi,Qv),e(Qv,_ge),M(vy,_ge,null),e(Hi,aDo),e(Hi,bge),e(bge,nDo),b(f,GIe,_),b(f,qo,_),M(Fy,qo,null),e(qo,sDo),e(qo,Ui),e(Ui,lDo),e(Ui,IO),e(IO,iDo),e(Ui,dDo),e(Ui,qO),e(qO,cDo),e(Ui,fDo),e(qo,mDo),e(qo,Ty),e(Ty,gDo),e(Ty,vge),e(vge,hDo),e(Ty,pDo),e(qo,uDo),e(qo,ct),M(My,ct,null),e(ct,_Do),e(ct,Fge),e(Fge,bDo),e(ct,vDo),e(ct,Ji),e(Ji,FDo),e(Ji,Tge),e(Tge,TDo),e(Ji,MDo),e(Ji,NO),e(NO,EDo),e(Ji,CDo),e(ct,wDo),M(Wv,ct,null),e(qo,ADo),e(qo,to),M(Ey,to,null),e(to,yDo),e(to,Mge),e(Mge,LDo),e(to,xDo),e(to,Pa),e(Pa,$Do),e(Pa,Ege),e(Ege,kDo),e(Pa,SDo),e(Pa,Cge),e(Cge,RDo),e(Pa,BDo),e(Pa,wge),e(wge,PDo),e(Pa,IDo),e(to,qDo),e(to,V),e(V,Hv),e(Hv,Age),e(Age,NDo),e(Hv,jDo),e(Hv,jO),e(jO,DDo),e(Hv,GDo),e(V,ODo),e(V,Uv),e(Uv,yge),e(yge,VDo),e(Uv,XDo),e(Uv,DO),e(DO,zDo),e(Uv,QDo),e(V,WDo),e(V,Jv),e(Jv,Lge),e(Lge,HDo),e(Jv,UDo),e(Jv,GO),e(GO,JDo),e(Jv,YDo),e(V,KDo),e(V,Yv),e(Yv,xge),e(xge,ZDo),e(Yv,eGo),e(Yv,OO),e(OO,oGo),e(Yv,rGo),e(V,tGo),e(V,Kv),e(Kv,$ge),e($ge,aGo),e(Kv,nGo),e(Kv,VO),e(VO,sGo),e(Kv,lGo),e(V,iGo),e(V,Zv),e(Zv,kge),e(kge,dGo),e(Zv,cGo),e(Zv,XO),e(XO,fGo),e(Zv,mGo),e(V,gGo),e(V,eF),e(eF,Sge),e(Sge,hGo),e(eF,pGo),e(eF,zO),e(zO,uGo),e(eF,_Go),e(V,bGo),e(V,oF),e(oF,Rge),e(Rge,vGo),e(oF,FGo),e(oF,QO),e(QO,TGo),e(oF,MGo),e(V,EGo),e(V,rF),e(rF,Bge),e(Bge,CGo),e(rF,wGo),e(rF,WO),e(WO,AGo),e(rF,yGo),e(V,LGo),e(V,tF),e(tF,Pge),e(Pge,xGo),e(tF,$Go),e(tF,HO),e(HO,kGo),e(tF,SGo),e(V,RGo),e(V,aF),e(aF,Ige),e(Ige,BGo),e(aF,PGo),e(aF,UO),e(UO,IGo),e(aF,qGo),e(V,NGo),e(V,nF),e(nF,qge),e(qge,jGo),e(nF,DGo),e(nF,JO),e(JO,GGo),e(nF,OGo),e(V,VGo),e(V,sF),e(sF,Nge),e(Nge,XGo),e(sF,zGo),e(sF,YO),e(YO,QGo),e(sF,WGo),e(V,HGo),e(V,lF),e(lF,jge),e(jge,UGo),e(lF,JGo),e(lF,KO),e(KO,YGo),e(lF,KGo),e(V,ZGo),e(V,iF),e(iF,Dge),e(Dge,eOo),e(iF,oOo),e(iF,ZO),e(ZO,rOo),e(iF,tOo),e(V,aOo),e(V,dF),e(dF,Gge),e(Gge,nOo),e(dF,sOo),e(dF,eV),e(eV,lOo),e(dF,iOo),e(V,dOo),e(V,cF),e(cF,Oge),e(Oge,cOo),e(cF,fOo),e(cF,oV),e(oV,mOo),e(cF,gOo),e(V,hOo),e(V,fF),e(fF,Vge),e(Vge,pOo),e(fF,uOo),e(fF,rV),e(rV,_Oo),e(fF,bOo),e(V,vOo),e(V,mF),e(mF,Xge),e(Xge,FOo),e(mF,TOo),e(mF,tV),e(tV,MOo),e(mF,EOo),e(V,COo),e(V,gF),e(gF,zge),e(zge,wOo),e(gF,AOo),e(gF,aV),e(aV,yOo),e(gF,LOo),e(V,xOo),e(V,hF),e(hF,Qge),e(Qge,$Oo),e(hF,kOo),e(hF,nV),e(nV,SOo),e(hF,ROo),e(V,BOo),e(V,pF),e(pF,Wge),e(Wge,POo),e(pF,IOo),e(pF,sV),e(sV,qOo),e(pF,NOo),e(V,jOo),e(V,uF),e(uF,Hge),e(Hge,DOo),e(uF,GOo),e(uF,lV),e(lV,OOo),e(uF,VOo),e(V,XOo),e(V,_F),e(_F,Uge),e(Uge,zOo),e(_F,QOo),e(_F,iV),e(iV,WOo),e(_F,HOo),e(V,UOo),e(V,bF),e(bF,Jge),e(Jge,JOo),e(bF,YOo),e(bF,dV),e(dV,KOo),e(bF,ZOo),e(V,eVo),e(V,vF),e(vF,Yge),e(Yge,oVo),e(vF,rVo),e(vF,cV),e(cV,tVo),e(vF,aVo),e(V,nVo),e(V,FF),e(FF,Kge),e(Kge,sVo),e(FF,lVo),e(FF,fV),e(fV,iVo),e(FF,dVo),e(V,cVo),e(V,TF),e(TF,Zge),e(Zge,fVo),e(TF,mVo),e(TF,mV),e(mV,gVo),e(TF,hVo),e(V,pVo),e(V,MF),e(MF,ehe),e(ehe,uVo),e(MF,_Vo),e(MF,gV),e(gV,bVo),e(MF,vVo),e(V,FVo),e(V,EF),e(EF,ohe),e(ohe,TVo),e(EF,MVo),e(EF,hV),e(hV,EVo),e(EF,CVo),e(V,wVo),e(V,CF),e(CF,rhe),e(rhe,AVo),e(CF,yVo),e(CF,pV),e(pV,LVo),e(CF,xVo),e(V,$Vo),e(V,wF),e(wF,the),e(the,kVo),e(wF,SVo),e(wF,uV),e(uV,RVo),e(wF,BVo),e(V,PVo),e(V,AF),e(AF,ahe),e(ahe,IVo),e(AF,qVo),e(AF,_V),e(_V,NVo),e(AF,jVo),e(V,DVo),e(V,yF),e(yF,nhe),e(nhe,GVo),e(yF,OVo),e(yF,bV),e(bV,VVo),e(yF,XVo),e(V,zVo),e(V,LF),e(LF,she),e(she,QVo),e(LF,WVo),e(LF,vV),e(vV,HVo),e(LF,UVo),e(V,JVo),e(V,xF),e(xF,lhe),e(lhe,YVo),e(xF,KVo),e(xF,FV),e(FV,ZVo),e(xF,eXo),e(V,oXo),e(V,$F),e($F,ihe),e(ihe,rXo),e($F,tXo),e($F,TV),e(TV,aXo),e($F,nXo),e(V,sXo),e(V,kF),e(kF,dhe),e(dhe,lXo),e(kF,iXo),e(kF,MV),e(MV,dXo),e(kF,cXo),e(V,fXo),e(V,SF),e(SF,che),e(che,mXo),e(SF,gXo),e(SF,EV),e(EV,hXo),e(SF,pXo),e(to,uXo),e(to,RF),e(RF,_Xo),e(RF,fhe),e(fhe,bXo),e(RF,vXo),e(RF,mhe),e(mhe,FXo),e(to,TXo),M(BF,to,null),b(f,OIe,_),b(f,Yi,_),e(Yi,PF),e(PF,ghe),M(Cy,ghe,null),e(Yi,MXo),e(Yi,hhe),e(hhe,EXo),b(f,VIe,_),b(f,No,_),M(wy,No,null),e(No,CXo),e(No,Ki),e(Ki,wXo),e(Ki,CV),e(CV,AXo),e(Ki,yXo),e(Ki,wV),e(wV,LXo),e(Ki,xXo),e(No,$Xo),e(No,Ay),e(Ay,kXo),e(Ay,phe),e(phe,SXo),e(Ay,RXo),e(No,BXo),e(No,ft),M(yy,ft,null),e(ft,PXo),e(ft,uhe),e(uhe,IXo),e(ft,qXo),e(ft,Zi),e(Zi,NXo),e(Zi,_he),e(_he,jXo),e(Zi,DXo),e(Zi,AV),e(AV,GXo),e(Zi,OXo),e(ft,VXo),M(IF,ft,null),e(No,XXo),e(No,ao),M(Ly,ao,null),e(ao,zXo),e(ao,bhe),e(bhe,QXo),e(ao,WXo),e(ao,Ia),e(Ia,HXo),e(Ia,vhe),e(vhe,UXo),e(Ia,JXo),e(Ia,Fhe),e(Fhe,YXo),e(Ia,KXo),e(Ia,The),e(The,ZXo),e(Ia,ezo),e(ao,ozo),e(ao,Mhe),e(Mhe,qF),e(qF,Ehe),e(Ehe,rzo),e(qF,tzo),e(qF,yV),e(yV,azo),e(qF,nzo),e(ao,szo),e(ao,NF),e(NF,lzo),e(NF,Che),e(Che,izo),e(NF,dzo),e(NF,whe),e(whe,czo),e(ao,fzo),M(jF,ao,null),b(f,XIe,_),b(f,ed,_),e(ed,DF),e(DF,Ahe),M(xy,Ahe,null),e(ed,mzo),e(ed,yhe),e(yhe,gzo),b(f,zIe,_),b(f,jo,_),M($y,jo,null),e(jo,hzo),e(jo,od),e(od,pzo),e(od,LV),e(LV,uzo),e(od,_zo),e(od,xV),e(xV,bzo),e(od,vzo),e(jo,Fzo),e(jo,ky),e(ky,Tzo),e(ky,Lhe),e(Lhe,Mzo),e(ky,Ezo),e(jo,Czo),e(jo,mt),M(Sy,mt,null),e(mt,wzo),e(mt,xhe),e(xhe,Azo),e(mt,yzo),e(mt,rd),e(rd,Lzo),e(rd,$he),e($he,xzo),e(rd,$zo),e(rd,$V),e($V,kzo),e(rd,Szo),e(mt,Rzo),M(GF,mt,null),e(jo,Bzo),e(jo,no),M(Ry,no,null),e(no,Pzo),e(no,khe),e(khe,Izo),e(no,qzo),e(no,qa),e(qa,Nzo),e(qa,She),e(She,jzo),e(qa,Dzo),e(qa,Rhe),e(Rhe,Gzo),e(qa,Ozo),e(qa,Bhe),e(Bhe,Vzo),e(qa,Xzo),e(no,zzo),e(no,Fe),e(Fe,OF),e(OF,Phe),e(Phe,Qzo),e(OF,Wzo),e(OF,kV),e(kV,Hzo),e(OF,Uzo),e(Fe,Jzo),e(Fe,VF),e(VF,Ihe),e(Ihe,Yzo),e(VF,Kzo),e(VF,SV),e(SV,Zzo),e(VF,eQo),e(Fe,oQo),e(Fe,XF),e(XF,qhe),e(qhe,rQo),e(XF,tQo),e(XF,RV),e(RV,aQo),e(XF,nQo),e(Fe,sQo),e(Fe,Rs),e(Rs,Nhe),e(Nhe,lQo),e(Rs,iQo),e(Rs,BV),e(BV,dQo),e(Rs,cQo),e(Rs,PV),e(PV,fQo),e(Rs,mQo),e(Fe,gQo),e(Fe,zF),e(zF,jhe),e(jhe,hQo),e(zF,pQo),e(zF,IV),e(IV,uQo),e(zF,_Qo),e(Fe,bQo),e(Fe,gt),e(gt,Dhe),e(Dhe,vQo),e(gt,FQo),e(gt,qV),e(qV,TQo),e(gt,MQo),e(gt,NV),e(NV,EQo),e(gt,CQo),e(gt,jV),e(jV,wQo),e(gt,AQo),e(Fe,yQo),e(Fe,QF),e(QF,Ghe),e(Ghe,LQo),e(QF,xQo),e(QF,DV),e(DV,$Qo),e(QF,kQo),e(Fe,SQo),e(Fe,WF),e(WF,Ohe),e(Ohe,RQo),e(WF,BQo),e(WF,GV),e(GV,PQo),e(WF,IQo),e(Fe,qQo),e(Fe,HF),e(HF,Vhe),e(Vhe,NQo),e(HF,jQo),e(HF,OV),e(OV,DQo),e(HF,GQo),e(Fe,OQo),e(Fe,UF),e(UF,Xhe),e(Xhe,VQo),e(UF,XQo),e(UF,VV),e(VV,zQo),e(UF,QQo),e(Fe,WQo),e(Fe,JF),e(JF,zhe),e(zhe,HQo),e(JF,UQo),e(JF,XV),e(XV,JQo),e(JF,YQo),e(Fe,KQo),e(Fe,YF),e(YF,Qhe),e(Qhe,ZQo),e(YF,eWo),e(YF,zV),e(zV,oWo),e(YF,rWo),e(Fe,tWo),e(Fe,KF),e(KF,Whe),e(Whe,aWo),e(KF,nWo),e(KF,QV),e(QV,sWo),e(KF,lWo),e(no,iWo),e(no,ZF),e(ZF,dWo),e(ZF,Hhe),e(Hhe,cWo),e(ZF,fWo),e(ZF,Uhe),e(Uhe,mWo),e(no,gWo),M(e0,no,null),b(f,QIe,_),b(f,td,_),e(td,o0),e(o0,Jhe),M(By,Jhe,null),e(td,hWo),e(td,Yhe),e(Yhe,pWo),b(f,WIe,_),b(f,Do,_),M(Py,Do,null),e(Do,uWo),e(Do,ad),e(ad,_Wo),e(ad,WV),e(WV,bWo),e(ad,vWo),e(ad,HV),e(HV,FWo),e(ad,TWo),e(Do,MWo),e(Do,Iy),e(Iy,EWo),e(Iy,Khe),e(Khe,CWo),e(Iy,wWo),e(Do,AWo),e(Do,ht),M(qy,ht,null),e(ht,yWo),e(ht,Zhe),e(Zhe,LWo),e(ht,xWo),e(ht,nd),e(nd,$Wo),e(nd,epe),e(epe,kWo),e(nd,SWo),e(nd,UV),e(UV,RWo),e(nd,BWo),e(ht,PWo),M(r0,ht,null),e(Do,IWo),e(Do,so),M(Ny,so,null),e(so,qWo),e(so,ope),e(ope,NWo),e(so,jWo),e(so,Na),e(Na,DWo),e(Na,rpe),e(rpe,GWo),e(Na,OWo),e(Na,tpe),e(tpe,VWo),e(Na,XWo),e(Na,ape),e(ape,zWo),e(Na,QWo),e(so,WWo),e(so,npe),e(npe,t0),e(t0,spe),e(spe,HWo),e(t0,UWo),e(t0,JV),e(JV,JWo),e(t0,YWo),e(so,KWo),e(so,a0),e(a0,ZWo),e(a0,lpe),e(lpe,eHo),e(a0,oHo),e(a0,ipe),e(ipe,rHo),e(so,tHo),M(n0,so,null),b(f,HIe,_),b(f,sd,_),e(sd,s0),e(s0,dpe),M(jy,dpe,null),e(sd,aHo),e(sd,cpe),e(cpe,nHo),b(f,UIe,_),b(f,Go,_),M(Dy,Go,null),e(Go,sHo),e(Go,ld),e(ld,lHo),e(ld,YV),e(YV,iHo),e(ld,dHo),e(ld,KV),e(KV,cHo),e(ld,fHo),e(Go,mHo),e(Go,Gy),e(Gy,gHo),e(Gy,fpe),e(fpe,hHo),e(Gy,pHo),e(Go,uHo),e(Go,pt),M(Oy,pt,null),e(pt,_Ho),e(pt,mpe),e(mpe,bHo),e(pt,vHo),e(pt,id),e(id,FHo),e(id,gpe),e(gpe,THo),e(id,MHo),e(id,ZV),e(ZV,EHo),e(id,CHo),e(pt,wHo),M(l0,pt,null),e(Go,AHo),e(Go,lo),M(Vy,lo,null),e(lo,yHo),e(lo,hpe),e(hpe,LHo),e(lo,xHo),e(lo,ja),e(ja,$Ho),e(ja,ppe),e(ppe,kHo),e(ja,SHo),e(ja,upe),e(upe,RHo),e(ja,BHo),e(ja,_pe),e(_pe,PHo),e(ja,IHo),e(lo,qHo),e(lo,Ne),e(Ne,i0),e(i0,bpe),e(bpe,NHo),e(i0,jHo),e(i0,eX),e(eX,DHo),e(i0,GHo),e(Ne,OHo),e(Ne,d0),e(d0,vpe),e(vpe,VHo),e(d0,XHo),e(d0,oX),e(oX,zHo),e(d0,QHo),e(Ne,WHo),e(Ne,c0),e(c0,Fpe),e(Fpe,HHo),e(c0,UHo),e(c0,rX),e(rX,JHo),e(c0,YHo),e(Ne,KHo),e(Ne,f0),e(f0,Tpe),e(Tpe,ZHo),e(f0,eUo),e(f0,tX),e(tX,oUo),e(f0,rUo),e(Ne,tUo),e(Ne,m0),e(m0,Mpe),e(Mpe,aUo),e(m0,nUo),e(m0,aX),e(aX,sUo),e(m0,lUo),e(Ne,iUo),e(Ne,g0),e(g0,Epe),e(Epe,dUo),e(g0,cUo),e(g0,nX),e(nX,fUo),e(g0,mUo),e(Ne,gUo),e(Ne,h0),e(h0,Cpe),e(Cpe,hUo),e(h0,pUo),e(h0,sX),e(sX,uUo),e(h0,_Uo),e(Ne,bUo),e(Ne,p0),e(p0,wpe),e(wpe,vUo),e(p0,FUo),e(p0,lX),e(lX,TUo),e(p0,MUo),e(lo,EUo),e(lo,u0),e(u0,CUo),e(u0,Ape),e(Ape,wUo),e(u0,AUo),e(u0,ype),e(ype,yUo),e(lo,LUo),M(_0,lo,null),b(f,JIe,_),b(f,dd,_),e(dd,b0),e(b0,Lpe),M(Xy,Lpe,null),e(dd,xUo),e(dd,xpe),e(xpe,$Uo),b(f,YIe,_),b(f,Oo,_),M(zy,Oo,null),e(Oo,kUo),e(Oo,cd),e(cd,SUo),e(cd,iX),e(iX,RUo),e(cd,BUo),e(cd,dX),e(dX,PUo),e(cd,IUo),e(Oo,qUo),e(Oo,Qy),e(Qy,NUo),e(Qy,$pe),e($pe,jUo),e(Qy,DUo),e(Oo,GUo),e(Oo,ut),M(Wy,ut,null),e(ut,OUo),e(ut,kpe),e(kpe,VUo),e(ut,XUo),e(ut,fd),e(fd,zUo),e(fd,Spe),e(Spe,QUo),e(fd,WUo),e(fd,cX),e(cX,HUo),e(fd,UUo),e(ut,JUo),M(v0,ut,null),e(Oo,YUo),e(Oo,io),M(Hy,io,null),e(io,KUo),e(io,Rpe),e(Rpe,ZUo),e(io,eJo),e(io,Da),e(Da,oJo),e(Da,Bpe),e(Bpe,rJo),e(Da,tJo),e(Da,Ppe),e(Ppe,aJo),e(Da,nJo),e(Da,Ipe),e(Ipe,sJo),e(Da,lJo),e(io,iJo),e(io,Ga),e(Ga,F0),e(F0,qpe),e(qpe,dJo),e(F0,cJo),e(F0,fX),e(fX,fJo),e(F0,mJo),e(Ga,gJo),e(Ga,T0),e(T0,Npe),e(Npe,hJo),e(T0,pJo),e(T0,mX),e(mX,uJo),e(T0,_Jo),e(Ga,bJo),e(Ga,M0),e(M0,jpe),e(jpe,vJo),e(M0,FJo),e(M0,gX),e(gX,TJo),e(M0,MJo),e(Ga,EJo),e(Ga,E0),e(E0,Dpe),e(Dpe,CJo),e(E0,wJo),e(E0,hX),e(hX,AJo),e(E0,yJo),e(io,LJo),e(io,C0),e(C0,xJo),e(C0,Gpe),e(Gpe,$Jo),e(C0,kJo),e(C0,Ope),e(Ope,SJo),e(io,RJo),M(w0,io,null),b(f,KIe,_),b(f,md,_),e(md,A0),e(A0,Vpe),M(Uy,Vpe,null),e(md,BJo),e(md,Xpe),e(Xpe,PJo),b(f,ZIe,_),b(f,Vo,_),M(Jy,Vo,null),e(Vo,IJo),e(Vo,gd),e(gd,qJo),e(gd,pX),e(pX,NJo),e(gd,jJo),e(gd,uX),e(uX,DJo),e(gd,GJo),e(Vo,OJo),e(Vo,Yy),e(Yy,VJo),e(Yy,zpe),e(zpe,XJo),e(Yy,zJo),e(Vo,QJo),e(Vo,_t),M(Ky,_t,null),e(_t,WJo),e(_t,Qpe),e(Qpe,HJo),e(_t,UJo),e(_t,hd),e(hd,JJo),e(hd,Wpe),e(Wpe,YJo),e(hd,KJo),e(hd,_X),e(_X,ZJo),e(hd,eYo),e(_t,oYo),M(y0,_t,null),e(Vo,rYo),e(Vo,co),M(Zy,co,null),e(co,tYo),e(co,Hpe),e(Hpe,aYo),e(co,nYo),e(co,Oa),e(Oa,sYo),e(Oa,Upe),e(Upe,lYo),e(Oa,iYo),e(Oa,Jpe),e(Jpe,dYo),e(Oa,cYo),e(Oa,Ype),e(Ype,fYo),e(Oa,mYo),e(co,gYo),e(co,je),e(je,L0),e(L0,Kpe),e(Kpe,hYo),e(L0,pYo),e(L0,bX),e(bX,uYo),e(L0,_Yo),e(je,bYo),e(je,x0),e(x0,Zpe),e(Zpe,vYo),e(x0,FYo),e(x0,vX),e(vX,TYo),e(x0,MYo),e(je,EYo),e(je,$0),e($0,eue),e(eue,CYo),e($0,wYo),e($0,FX),e(FX,AYo),e($0,yYo),e(je,LYo),e(je,k0),e(k0,oue),e(oue,xYo),e(k0,$Yo),e(k0,TX),e(TX,kYo),e(k0,SYo),e(je,RYo),e(je,S0),e(S0,rue),e(rue,BYo),e(S0,PYo),e(S0,MX),e(MX,IYo),e(S0,qYo),e(je,NYo),e(je,R0),e(R0,tue),e(tue,jYo),e(R0,DYo),e(R0,EX),e(EX,GYo),e(R0,OYo),e(je,VYo),e(je,B0),e(B0,aue),e(aue,XYo),e(B0,zYo),e(B0,CX),e(CX,QYo),e(B0,WYo),e(je,HYo),e(je,P0),e(P0,nue),e(nue,UYo),e(P0,JYo),e(P0,wX),e(wX,YYo),e(P0,KYo),e(co,ZYo),e(co,I0),e(I0,eKo),e(I0,sue),e(sue,oKo),e(I0,rKo),e(I0,lue),e(lue,tKo),e(co,aKo),M(q0,co,null),b(f,eqe,_),b(f,pd,_),e(pd,N0),e(N0,iue),M(eL,iue,null),e(pd,nKo),e(pd,due),e(due,sKo),b(f,oqe,_),b(f,Xo,_),M(oL,Xo,null),e(Xo,lKo),e(Xo,ud),e(ud,iKo),e(ud,AX),e(AX,dKo),e(ud,cKo),e(ud,yX),e(yX,fKo),e(ud,mKo),e(Xo,gKo),e(Xo,rL),e(rL,hKo),e(rL,cue),e(cue,pKo),e(rL,uKo),e(Xo,_Ko),e(Xo,bt),M(tL,bt,null),e(bt,bKo),e(bt,fue),e(fue,vKo),e(bt,FKo),e(bt,_d),e(_d,TKo),e(_d,mue),e(mue,MKo),e(_d,EKo),e(_d,LX),e(LX,CKo),e(_d,wKo),e(bt,AKo),M(j0,bt,null),e(Xo,yKo),e(Xo,fo),M(aL,fo,null),e(fo,LKo),e(fo,gue),e(gue,xKo),e(fo,$Ko),e(fo,Va),e(Va,kKo),e(Va,hue),e(hue,SKo),e(Va,RKo),e(Va,pue),e(pue,BKo),e(Va,PKo),e(Va,uue),e(uue,IKo),e(Va,qKo),e(fo,NKo),e(fo,nL),e(nL,D0),e(D0,_ue),e(_ue,jKo),e(D0,DKo),e(D0,xX),e(xX,GKo),e(D0,OKo),e(nL,VKo),e(nL,G0),e(G0,bue),e(bue,XKo),e(G0,zKo),e(G0,$X),e($X,QKo),e(G0,WKo),e(fo,HKo),e(fo,O0),e(O0,UKo),e(O0,vue),e(vue,JKo),e(O0,YKo),e(O0,Fue),e(Fue,KKo),e(fo,ZKo),M(V0,fo,null),b(f,rqe,_),b(f,bd,_),e(bd,X0),e(X0,Tue),M(sL,Tue,null),e(bd,eZo),e(bd,Mue),e(Mue,oZo),b(f,tqe,_),b(f,zo,_),M(lL,zo,null),e(zo,rZo),e(zo,vd),e(vd,tZo),e(vd,kX),e(kX,aZo),e(vd,nZo),e(vd,SX),e(SX,sZo),e(vd,lZo),e(zo,iZo),e(zo,iL),e(iL,dZo),e(iL,Eue),e(Eue,cZo),e(iL,fZo),e(zo,mZo),e(zo,vt),M(dL,vt,null),e(vt,gZo),e(vt,Cue),e(Cue,hZo),e(vt,pZo),e(vt,Fd),e(Fd,uZo),e(Fd,wue),e(wue,_Zo),e(Fd,bZo),e(Fd,RX),e(RX,vZo),e(Fd,FZo),e(vt,TZo),M(z0,vt,null),e(zo,MZo),e(zo,mo),M(cL,mo,null),e(mo,EZo),e(mo,Aue),e(Aue,CZo),e(mo,wZo),e(mo,Xa),e(Xa,AZo),e(Xa,yue),e(yue,yZo),e(Xa,LZo),e(Xa,Lue),e(Lue,xZo),e(Xa,$Zo),e(Xa,xue),e(xue,kZo),e(Xa,SZo),e(mo,RZo),e(mo,za),e(za,Q0),e(Q0,$ue),e($ue,BZo),e(Q0,PZo),e(Q0,BX),e(BX,IZo),e(Q0,qZo),e(za,NZo),e(za,W0),e(W0,kue),e(kue,jZo),e(W0,DZo),e(W0,PX),e(PX,GZo),e(W0,OZo),e(za,VZo),e(za,H0),e(H0,Sue),e(Sue,XZo),e(H0,zZo),e(H0,IX),e(IX,QZo),e(H0,WZo),e(za,HZo),e(za,U0),e(U0,Rue),e(Rue,UZo),e(U0,JZo),e(U0,qX),e(qX,YZo),e(U0,KZo),e(mo,ZZo),e(mo,J0),e(J0,eer),e(J0,Bue),e(Bue,oer),e(J0,rer),e(J0,Pue),e(Pue,ter),e(mo,aer),M(Y0,mo,null),b(f,aqe,_),b(f,Td,_),e(Td,K0),e(K0,Iue),M(fL,Iue,null),e(Td,ner),e(Td,que),e(que,ser),b(f,nqe,_),b(f,Qo,_),M(mL,Qo,null),e(Qo,ler),e(Qo,Md),e(Md,ier),e(Md,NX),e(NX,der),e(Md,cer),e(Md,jX),e(jX,fer),e(Md,mer),e(Qo,ger),e(Qo,gL),e(gL,her),e(gL,Nue),e(Nue,per),e(gL,uer),e(Qo,_er),e(Qo,Ft),M(hL,Ft,null),e(Ft,ber),e(Ft,jue),e(jue,ver),e(Ft,Fer),e(Ft,Ed),e(Ed,Ter),e(Ed,Due),e(Due,Mer),e(Ed,Eer),e(Ed,DX),e(DX,Cer),e(Ed,wer),e(Ft,Aer),M(Z0,Ft,null),e(Qo,yer),e(Qo,go),M(pL,go,null),e(go,Ler),e(go,Gue),e(Gue,xer),e(go,$er),e(go,Qa),e(Qa,ker),e(Qa,Oue),e(Oue,Ser),e(Qa,Rer),e(Qa,Vue),e(Vue,Ber),e(Qa,Per),e(Qa,Xue),e(Xue,Ier),e(Qa,qer),e(go,Ner),e(go,Cd),e(Cd,eT),e(eT,zue),e(zue,jer),e(eT,Der),e(eT,GX),e(GX,Ger),e(eT,Oer),e(Cd,Ver),e(Cd,oT),e(oT,Que),e(Que,Xer),e(oT,zer),e(oT,OX),e(OX,Qer),e(oT,Wer),e(Cd,Her),e(Cd,rT),e(rT,Wue),e(Wue,Uer),e(rT,Jer),e(rT,VX),e(VX,Yer),e(rT,Ker),e(go,Zer),e(go,tT),e(tT,eor),e(tT,Hue),e(Hue,oor),e(tT,ror),e(tT,Uue),e(Uue,tor),e(go,aor),M(aT,go,null),b(f,sqe,_),b(f,wd,_),e(wd,nT),e(nT,Jue),M(uL,Jue,null),e(wd,nor),e(wd,Yue),e(Yue,sor),b(f,lqe,_),b(f,Wo,_),M(_L,Wo,null),e(Wo,lor),e(Wo,Ad),e(Ad,ior),e(Ad,XX),e(XX,dor),e(Ad,cor),e(Ad,zX),e(zX,mor),e(Ad,gor),e(Wo,hor),e(Wo,bL),e(bL,por),e(bL,Kue),e(Kue,uor),e(bL,_or),e(Wo,bor),e(Wo,Tt),M(vL,Tt,null),e(Tt,vor),e(Tt,Zue),e(Zue,For),e(Tt,Tor),e(Tt,yd),e(yd,Mor),e(yd,e_e),e(e_e,Eor),e(yd,Cor),e(yd,QX),e(QX,wor),e(yd,Aor),e(Tt,yor),M(sT,Tt,null),e(Wo,Lor),e(Wo,ho),M(FL,ho,null),e(ho,xor),e(ho,o_e),e(o_e,$or),e(ho,kor),e(ho,Wa),e(Wa,Sor),e(Wa,r_e),e(r_e,Ror),e(Wa,Bor),e(Wa,t_e),e(t_e,Por),e(Wa,Ior),e(Wa,a_e),e(a_e,qor),e(Wa,Nor),e(ho,jor),e(ho,TL),e(TL,lT),e(lT,n_e),e(n_e,Dor),e(lT,Gor),e(lT,WX),e(WX,Oor),e(lT,Vor),e(TL,Xor),e(TL,iT),e(iT,s_e),e(s_e,zor),e(iT,Qor),e(iT,HX),e(HX,Wor),e(iT,Hor),e(ho,Uor),e(ho,dT),e(dT,Jor),e(dT,l_e),e(l_e,Yor),e(dT,Kor),e(dT,i_e),e(i_e,Zor),e(ho,err),M(cT,ho,null),b(f,iqe,_),b(f,Ld,_),e(Ld,fT),e(fT,d_e),M(ML,d_e,null),e(Ld,orr),e(Ld,c_e),e(c_e,rrr),b(f,dqe,_),b(f,Ho,_),M(EL,Ho,null),e(Ho,trr),e(Ho,xd),e(xd,arr),e(xd,UX),e(UX,nrr),e(xd,srr),e(xd,JX),e(JX,lrr),e(xd,irr),e(Ho,drr),e(Ho,CL),e(CL,crr),e(CL,f_e),e(f_e,frr),e(CL,mrr),e(Ho,grr),e(Ho,Mt),M(wL,Mt,null),e(Mt,hrr),e(Mt,m_e),e(m_e,prr),e(Mt,urr),e(Mt,$d),e($d,_rr),e($d,g_e),e(g_e,brr),e($d,vrr),e($d,YX),e(YX,Frr),e($d,Trr),e(Mt,Mrr),M(mT,Mt,null),e(Ho,Err),e(Ho,po),M(AL,po,null),e(po,Crr),e(po,h_e),e(h_e,wrr),e(po,Arr),e(po,Ha),e(Ha,yrr),e(Ha,p_e),e(p_e,Lrr),e(Ha,xrr),e(Ha,u_e),e(u_e,$rr),e(Ha,krr),e(Ha,__e),e(__e,Srr),e(Ha,Rrr),e(po,Brr),e(po,b_e),e(b_e,gT),e(gT,v_e),e(v_e,Prr),e(gT,Irr),e(gT,KX),e(KX,qrr),e(gT,Nrr),e(po,jrr),e(po,hT),e(hT,Drr),e(hT,F_e),e(F_e,Grr),e(hT,Orr),e(hT,T_e),e(T_e,Vrr),e(po,Xrr),M(pT,po,null),b(f,cqe,_),b(f,kd,_),e(kd,uT),e(uT,M_e),M(yL,M_e,null),e(kd,zrr),e(kd,E_e),e(E_e,Qrr),b(f,fqe,_),b(f,Uo,_),M(LL,Uo,null),e(Uo,Wrr),e(Uo,Sd),e(Sd,Hrr),e(Sd,ZX),e(ZX,Urr),e(Sd,Jrr),e(Sd,ez),e(ez,Yrr),e(Sd,Krr),e(Uo,Zrr),e(Uo,xL),e(xL,etr),e(xL,C_e),e(C_e,otr),e(xL,rtr),e(Uo,ttr),e(Uo,Et),M($L,Et,null),e(Et,atr),e(Et,w_e),e(w_e,ntr),e(Et,str),e(Et,Rd),e(Rd,ltr),e(Rd,A_e),e(A_e,itr),e(Rd,dtr),e(Rd,oz),e(oz,ctr),e(Rd,ftr),e(Et,mtr),M(_T,Et,null),e(Uo,gtr),e(Uo,uo),M(kL,uo,null),e(uo,htr),e(uo,y_e),e(y_e,ptr),e(uo,utr),e(uo,Ua),e(Ua,_tr),e(Ua,L_e),e(L_e,btr),e(Ua,vtr),e(Ua,x_e),e(x_e,Ftr),e(Ua,Ttr),e(Ua,$_e),e($_e,Mtr),e(Ua,Etr),e(uo,Ctr),e(uo,Ja),e(Ja,bT),e(bT,k_e),e(k_e,wtr),e(bT,Atr),e(bT,rz),e(rz,ytr),e(bT,Ltr),e(Ja,xtr),e(Ja,vT),e(vT,S_e),e(S_e,$tr),e(vT,ktr),e(vT,tz),e(tz,Str),e(vT,Rtr),e(Ja,Btr),e(Ja,FT),e(FT,R_e),e(R_e,Ptr),e(FT,Itr),e(FT,az),e(az,qtr),e(FT,Ntr),e(Ja,jtr),e(Ja,TT),e(TT,B_e),e(B_e,Dtr),e(TT,Gtr),e(TT,nz),e(nz,Otr),e(TT,Vtr),e(uo,Xtr),e(uo,MT),e(MT,ztr),e(MT,P_e),e(P_e,Qtr),e(MT,Wtr),e(MT,I_e),e(I_e,Htr),e(uo,Utr),M(ET,uo,null),b(f,mqe,_),b(f,Bd,_),e(Bd,CT),e(CT,q_e),M(SL,q_e,null),e(Bd,Jtr),e(Bd,N_e),e(N_e,Ytr),b(f,gqe,_),b(f,Jo,_),M(RL,Jo,null),e(Jo,Ktr),e(Jo,Pd),e(Pd,Ztr),e(Pd,sz),e(sz,ear),e(Pd,oar),e(Pd,lz),e(lz,rar),e(Pd,tar),e(Jo,aar),e(Jo,BL),e(BL,nar),e(BL,j_e),e(j_e,sar),e(BL,lar),e(Jo,iar),e(Jo,Ct),M(PL,Ct,null),e(Ct,dar),e(Ct,D_e),e(D_e,car),e(Ct,far),e(Ct,Id),e(Id,mar),e(Id,G_e),e(G_e,gar),e(Id,har),e(Id,iz),e(iz,par),e(Id,uar),e(Ct,_ar),M(wT,Ct,null),e(Jo,bar),e(Jo,_o),M(IL,_o,null),e(_o,Far),e(_o,O_e),e(O_e,Tar),e(_o,Mar),e(_o,Ya),e(Ya,Ear),e(Ya,V_e),e(V_e,Car),e(Ya,war),e(Ya,X_e),e(X_e,Aar),e(Ya,yar),e(Ya,z_e),e(z_e,Lar),e(Ya,xar),e(_o,$ar),e(_o,Q_e),e(Q_e,AT),e(AT,W_e),e(W_e,kar),e(AT,Sar),e(AT,dz),e(dz,Rar),e(AT,Bar),e(_o,Par),e(_o,yT),e(yT,Iar),e(yT,H_e),e(H_e,qar),e(yT,Nar),e(yT,U_e),e(U_e,jar),e(_o,Dar),M(LT,_o,null),b(f,hqe,_),b(f,qd,_),e(qd,xT),e(xT,J_e),M(qL,J_e,null),e(qd,Gar),e(qd,Y_e),e(Y_e,Oar),b(f,pqe,_),b(f,Yo,_),M(NL,Yo,null),e(Yo,Var),e(Yo,Nd),e(Nd,Xar),e(Nd,cz),e(cz,zar),e(Nd,Qar),e(Nd,fz),e(fz,War),e(Nd,Har),e(Yo,Uar),e(Yo,jL),e(jL,Jar),e(jL,K_e),e(K_e,Yar),e(jL,Kar),e(Yo,Zar),e(Yo,wt),M(DL,wt,null),e(wt,enr),e(wt,Z_e),e(Z_e,onr),e(wt,rnr),e(wt,jd),e(jd,tnr),e(jd,e2e),e(e2e,anr),e(jd,nnr),e(jd,mz),e(mz,snr),e(jd,lnr),e(wt,inr),M($T,wt,null),e(Yo,dnr),e(Yo,wr),M(GL,wr,null),e(wr,cnr),e(wr,o2e),e(o2e,fnr),e(wr,mnr),e(wr,Ka),e(Ka,gnr),e(Ka,r2e),e(r2e,hnr),e(Ka,pnr),e(Ka,t2e),e(t2e,unr),e(Ka,_nr),e(Ka,a2e),e(a2e,bnr),e(Ka,vnr),e(wr,Fnr),e(wr,j),e(j,kT),e(kT,n2e),e(n2e,Tnr),e(kT,Mnr),e(kT,gz),e(gz,Enr),e(kT,Cnr),e(j,wnr),e(j,ST),e(ST,s2e),e(s2e,Anr),e(ST,ynr),e(ST,hz),e(hz,Lnr),e(ST,xnr),e(j,$nr),e(j,RT),e(RT,l2e),e(l2e,knr),e(RT,Snr),e(RT,pz),e(pz,Rnr),e(RT,Bnr),e(j,Pnr),e(j,BT),e(BT,i2e),e(i2e,Inr),e(BT,qnr),e(BT,uz),e(uz,Nnr),e(BT,jnr),e(j,Dnr),e(j,PT),e(PT,d2e),e(d2e,Gnr),e(PT,Onr),e(PT,_z),e(_z,Vnr),e(PT,Xnr),e(j,znr),e(j,IT),e(IT,c2e),e(c2e,Qnr),e(IT,Wnr),e(IT,bz),e(bz,Hnr),e(IT,Unr),e(j,Jnr),e(j,qT),e(qT,f2e),e(f2e,Ynr),e(qT,Knr),e(qT,vz),e(vz,Znr),e(qT,esr),e(j,osr),e(j,NT),e(NT,m2e),e(m2e,rsr),e(NT,tsr),e(NT,Fz),e(Fz,asr),e(NT,nsr),e(j,ssr),e(j,jT),e(jT,g2e),e(g2e,lsr),e(jT,isr),e(jT,Tz),e(Tz,dsr),e(jT,csr),e(j,fsr),e(j,DT),e(DT,h2e),e(h2e,msr),e(DT,gsr),e(DT,Mz),e(Mz,hsr),e(DT,psr),e(j,usr),e(j,GT),e(GT,p2e),e(p2e,_sr),e(GT,bsr),e(GT,Ez),e(Ez,vsr),e(GT,Fsr),e(j,Tsr),e(j,OT),e(OT,u2e),e(u2e,Msr),e(OT,Esr),e(OT,Cz),e(Cz,Csr),e(OT,wsr),e(j,Asr),e(j,VT),e(VT,_2e),e(_2e,ysr),e(VT,Lsr),e(VT,wz),e(wz,xsr),e(VT,$sr),e(j,ksr),e(j,XT),e(XT,b2e),e(b2e,Ssr),e(XT,Rsr),e(XT,Az),e(Az,Bsr),e(XT,Psr),e(j,Isr),e(j,zT),e(zT,v2e),e(v2e,qsr),e(zT,Nsr),e(zT,yz),e(yz,jsr),e(zT,Dsr),e(j,Gsr),e(j,QT),e(QT,F2e),e(F2e,Osr),e(QT,Vsr),e(QT,Lz),e(Lz,Xsr),e(QT,zsr),e(j,Qsr),e(j,WT),e(WT,T2e),e(T2e,Wsr),e(WT,Hsr),e(WT,xz),e(xz,Usr),e(WT,Jsr),e(j,Ysr),e(j,Bs),e(Bs,M2e),e(M2e,Ksr),e(Bs,Zsr),e(Bs,$z),e($z,elr),e(Bs,olr),e(Bs,kz),e(kz,rlr),e(Bs,tlr),e(j,alr),e(j,HT),e(HT,E2e),e(E2e,nlr),e(HT,slr),e(HT,Sz),e(Sz,llr),e(HT,ilr),e(j,dlr),e(j,UT),e(UT,C2e),e(C2e,clr),e(UT,flr),e(UT,Rz),e(Rz,mlr),e(UT,glr),e(j,hlr),e(j,JT),e(JT,w2e),e(w2e,plr),e(JT,ulr),e(JT,Bz),e(Bz,_lr),e(JT,blr),e(j,vlr),e(j,YT),e(YT,A2e),e(A2e,Flr),e(YT,Tlr),e(YT,Pz),e(Pz,Mlr),e(YT,Elr),e(j,Clr),e(j,KT),e(KT,y2e),e(y2e,wlr),e(KT,Alr),e(KT,Iz),e(Iz,ylr),e(KT,Llr),e(j,xlr),e(j,ZT),e(ZT,L2e),e(L2e,$lr),e(ZT,klr),e(ZT,qz),e(qz,Slr),e(ZT,Rlr),e(j,Blr),e(j,e7),e(e7,x2e),e(x2e,Plr),e(e7,Ilr),e(e7,Nz),e(Nz,qlr),e(e7,Nlr),e(j,jlr),e(j,o7),e(o7,$2e),e($2e,Dlr),e(o7,Glr),e(o7,jz),e(jz,Olr),e(o7,Vlr),e(j,Xlr),e(j,r7),e(r7,k2e),e(k2e,zlr),e(r7,Qlr),e(r7,Dz),e(Dz,Wlr),e(r7,Hlr),e(j,Ulr),e(j,t7),e(t7,S2e),e(S2e,Jlr),e(t7,Ylr),e(t7,Gz),e(Gz,Klr),e(t7,Zlr),e(j,eir),e(j,a7),e(a7,R2e),e(R2e,oir),e(a7,rir),e(a7,Oz),e(Oz,tir),e(a7,air),e(j,nir),e(j,n7),e(n7,B2e),e(B2e,sir),e(n7,lir),e(n7,Vz),e(Vz,iir),e(n7,dir),e(j,cir),e(j,s7),e(s7,P2e),e(P2e,fir),e(s7,mir),e(s7,Xz),e(Xz,gir),e(s7,hir),e(j,pir),e(j,l7),e(l7,I2e),e(I2e,uir),e(l7,_ir),e(l7,zz),e(zz,bir),e(l7,vir),e(j,Fir),e(j,i7),e(i7,q2e),e(q2e,Tir),e(i7,Mir),e(i7,Qz),e(Qz,Eir),e(i7,Cir),e(j,wir),e(j,d7),e(d7,N2e),e(N2e,Air),e(d7,yir),e(d7,Wz),e(Wz,Lir),e(d7,xir),e(j,$ir),e(j,c7),e(c7,j2e),e(j2e,kir),e(c7,Sir),e(c7,Hz),e(Hz,Rir),e(c7,Bir),e(j,Pir),e(j,f7),e(f7,D2e),e(D2e,Iir),e(f7,qir),e(f7,Uz),e(Uz,Nir),e(f7,jir),e(j,Dir),e(j,m7),e(m7,G2e),e(G2e,Gir),e(m7,Oir),e(m7,Jz),e(Jz,Vir),e(m7,Xir),e(j,zir),e(j,g7),e(g7,O2e),e(O2e,Qir),e(g7,Wir),e(g7,Yz),e(Yz,Hir),e(g7,Uir),e(j,Jir),e(j,h7),e(h7,V2e),e(V2e,Yir),e(h7,Kir),e(h7,Kz),e(Kz,Zir),e(h7,edr),e(j,odr),e(j,p7),e(p7,X2e),e(X2e,rdr),e(p7,tdr),e(p7,Zz),e(Zz,adr),e(p7,ndr),e(j,sdr),e(j,u7),e(u7,z2e),e(z2e,ldr),e(u7,idr),e(u7,eQ),e(eQ,ddr),e(u7,cdr),e(j,fdr),e(j,_7),e(_7,Q2e),e(Q2e,mdr),e(_7,gdr),e(_7,oQ),e(oQ,hdr),e(_7,pdr),e(j,udr),e(j,b7),e(b7,W2e),e(W2e,_dr),e(b7,bdr),e(b7,rQ),e(rQ,vdr),e(b7,Fdr),e(j,Tdr),e(j,v7),e(v7,H2e),e(H2e,Mdr),e(v7,Edr),e(v7,tQ),e(tQ,Cdr),e(v7,wdr),e(j,Adr),e(j,F7),e(F7,U2e),e(U2e,ydr),e(F7,Ldr),e(F7,aQ),e(aQ,xdr),e(F7,$dr),e(wr,kdr),M(T7,wr,null),b(f,uqe,_),b(f,Dd,_),e(Dd,M7),e(M7,J2e),M(OL,J2e,null),e(Dd,Sdr),e(Dd,Y2e),e(Y2e,Rdr),b(f,_qe,_),b(f,Ko,_),M(VL,Ko,null),e(Ko,Bdr),e(Ko,Gd),e(Gd,Pdr),e(Gd,nQ),e(nQ,Idr),e(Gd,qdr),e(Gd,sQ),e(sQ,Ndr),e(Gd,jdr),e(Ko,Ddr),e(Ko,XL),e(XL,Gdr),e(XL,K2e),e(K2e,Odr),e(XL,Vdr),e(Ko,Xdr),e(Ko,At),M(zL,At,null),e(At,zdr),e(At,Z2e),e(Z2e,Qdr),e(At,Wdr),e(At,Od),e(Od,Hdr),e(Od,e1e),e(e1e,Udr),e(Od,Jdr),e(Od,lQ),e(lQ,Ydr),e(Od,Kdr),e(At,Zdr),M(E7,At,null),e(Ko,ecr),e(Ko,Ar),M(QL,Ar,null),e(Ar,ocr),e(Ar,o1e),e(o1e,rcr),e(Ar,tcr),e(Ar,Za),e(Za,acr),e(Za,r1e),e(r1e,ncr),e(Za,scr),e(Za,t1e),e(t1e,lcr),e(Za,icr),e(Za,a1e),e(a1e,dcr),e(Za,ccr),e(Ar,fcr),e(Ar,se),e(se,C7),e(C7,n1e),e(n1e,mcr),e(C7,gcr),e(C7,iQ),e(iQ,hcr),e(C7,pcr),e(se,ucr),e(se,w7),e(w7,s1e),e(s1e,_cr),e(w7,bcr),e(w7,dQ),e(dQ,vcr),e(w7,Fcr),e(se,Tcr),e(se,A7),e(A7,l1e),e(l1e,Mcr),e(A7,Ecr),e(A7,cQ),e(cQ,Ccr),e(A7,wcr),e(se,Acr),e(se,y7),e(y7,i1e),e(i1e,ycr),e(y7,Lcr),e(y7,fQ),e(fQ,xcr),e(y7,$cr),e(se,kcr),e(se,L7),e(L7,d1e),e(d1e,Scr),e(L7,Rcr),e(L7,mQ),e(mQ,Bcr),e(L7,Pcr),e(se,Icr),e(se,x7),e(x7,c1e),e(c1e,qcr),e(x7,Ncr),e(x7,gQ),e(gQ,jcr),e(x7,Dcr),e(se,Gcr),e(se,$7),e($7,f1e),e(f1e,Ocr),e($7,Vcr),e($7,hQ),e(hQ,Xcr),e($7,zcr),e(se,Qcr),e(se,k7),e(k7,m1e),e(m1e,Wcr),e(k7,Hcr),e(k7,pQ),e(pQ,Ucr),e(k7,Jcr),e(se,Ycr),e(se,S7),e(S7,g1e),e(g1e,Kcr),e(S7,Zcr),e(S7,uQ),e(uQ,efr),e(S7,ofr),e(se,rfr),e(se,R7),e(R7,h1e),e(h1e,tfr),e(R7,afr),e(R7,_Q),e(_Q,nfr),e(R7,sfr),e(se,lfr),e(se,B7),e(B7,p1e),e(p1e,ifr),e(B7,dfr),e(B7,bQ),e(bQ,cfr),e(B7,ffr),e(se,mfr),e(se,P7),e(P7,u1e),e(u1e,gfr),e(P7,hfr),e(P7,vQ),e(vQ,pfr),e(P7,ufr),e(se,_fr),e(se,I7),e(I7,_1e),e(_1e,bfr),e(I7,vfr),e(I7,FQ),e(FQ,Ffr),e(I7,Tfr),e(se,Mfr),e(se,q7),e(q7,b1e),e(b1e,Efr),e(q7,Cfr),e(q7,TQ),e(TQ,wfr),e(q7,Afr),e(se,yfr),e(se,N7),e(N7,v1e),e(v1e,Lfr),e(N7,xfr),e(N7,MQ),e(MQ,$fr),e(N7,kfr),e(se,Sfr),e(se,j7),e(j7,F1e),e(F1e,Rfr),e(j7,Bfr),e(j7,EQ),e(EQ,Pfr),e(j7,Ifr),e(se,qfr),e(se,D7),e(D7,T1e),e(T1e,Nfr),e(D7,jfr),e(D7,CQ),e(CQ,Dfr),e(D7,Gfr),e(se,Ofr),e(se,G7),e(G7,M1e),e(M1e,Vfr),e(G7,Xfr),e(G7,wQ),e(wQ,zfr),e(G7,Qfr),e(se,Wfr),e(se,O7),e(O7,E1e),e(E1e,Hfr),e(O7,Ufr),e(O7,AQ),e(AQ,Jfr),e(O7,Yfr),e(se,Kfr),e(se,V7),e(V7,C1e),e(C1e,Zfr),e(V7,emr),e(V7,yQ),e(yQ,omr),e(V7,rmr),e(se,tmr),e(se,X7),e(X7,w1e),e(w1e,amr),e(X7,nmr),e(X7,LQ),e(LQ,smr),e(X7,lmr),e(se,imr),e(se,z7),e(z7,A1e),e(A1e,dmr),e(z7,cmr),e(z7,xQ),e(xQ,fmr),e(z7,mmr),e(se,gmr),e(se,Q7),e(Q7,y1e),e(y1e,hmr),e(Q7,pmr),e(Q7,$Q),e($Q,umr),e(Q7,_mr),e(Ar,bmr),M(W7,Ar,null),b(f,bqe,_),b(f,Vd,_),e(Vd,H7),e(H7,L1e),M(WL,L1e,null),e(Vd,vmr),e(Vd,x1e),e(x1e,Fmr),b(f,vqe,_),b(f,Zo,_),M(HL,Zo,null),e(Zo,Tmr),e(Zo,Xd),e(Xd,Mmr),e(Xd,kQ),e(kQ,Emr),e(Xd,Cmr),e(Xd,SQ),e(SQ,wmr),e(Xd,Amr),e(Zo,ymr),e(Zo,UL),e(UL,Lmr),e(UL,$1e),e($1e,xmr),e(UL,$mr),e(Zo,kmr),e(Zo,yt),M(JL,yt,null),e(yt,Smr),e(yt,k1e),e(k1e,Rmr),e(yt,Bmr),e(yt,zd),e(zd,Pmr),e(zd,S1e),e(S1e,Imr),e(zd,qmr),e(zd,RQ),e(RQ,Nmr),e(zd,jmr),e(yt,Dmr),M(U7,yt,null),e(Zo,Gmr),e(Zo,yr),M(YL,yr,null),e(yr,Omr),e(yr,R1e),e(R1e,Vmr),e(yr,Xmr),e(yr,en),e(en,zmr),e(en,B1e),e(B1e,Qmr),e(en,Wmr),e(en,P1e),e(P1e,Hmr),e(en,Umr),e(en,I1e),e(I1e,Jmr),e(en,Ymr),e(yr,Kmr),e(yr,Te),e(Te,J7),e(J7,q1e),e(q1e,Zmr),e(J7,egr),e(J7,BQ),e(BQ,ogr),e(J7,rgr),e(Te,tgr),e(Te,Y7),e(Y7,N1e),e(N1e,agr),e(Y7,ngr),e(Y7,PQ),e(PQ,sgr),e(Y7,lgr),e(Te,igr),e(Te,K7),e(K7,j1e),e(j1e,dgr),e(K7,cgr),e(K7,IQ),e(IQ,fgr),e(K7,mgr),e(Te,ggr),e(Te,Z7),e(Z7,D1e),e(D1e,hgr),e(Z7,pgr),e(Z7,qQ),e(qQ,ugr),e(Z7,_gr),e(Te,bgr),e(Te,eM),e(eM,G1e),e(G1e,vgr),e(eM,Fgr),e(eM,NQ),e(NQ,Tgr),e(eM,Mgr),e(Te,Egr),e(Te,oM),e(oM,O1e),e(O1e,Cgr),e(oM,wgr),e(oM,jQ),e(jQ,Agr),e(oM,ygr),e(Te,Lgr),e(Te,rM),e(rM,V1e),e(V1e,xgr),e(rM,$gr),e(rM,DQ),e(DQ,kgr),e(rM,Sgr),e(Te,Rgr),e(Te,tM),e(tM,X1e),e(X1e,Bgr),e(tM,Pgr),e(tM,GQ),e(GQ,Igr),e(tM,qgr),e(Te,Ngr),e(Te,aM),e(aM,z1e),e(z1e,jgr),e(aM,Dgr),e(aM,OQ),e(OQ,Ggr),e(aM,Ogr),e(Te,Vgr),e(Te,nM),e(nM,Q1e),e(Q1e,Xgr),e(nM,zgr),e(nM,VQ),e(VQ,Qgr),e(nM,Wgr),e(Te,Hgr),e(Te,sM),e(sM,W1e),e(W1e,Ugr),e(sM,Jgr),e(sM,XQ),e(XQ,Ygr),e(sM,Kgr),e(Te,Zgr),e(Te,lM),e(lM,H1e),e(H1e,ehr),e(lM,ohr),e(lM,zQ),e(zQ,rhr),e(lM,thr),e(yr,ahr),M(iM,yr,null),b(f,Fqe,_),b(f,Qd,_),e(Qd,dM),e(dM,U1e),M(KL,U1e,null),e(Qd,nhr),e(Qd,J1e),e(J1e,shr),b(f,Tqe,_),b(f,er,_),M(ZL,er,null),e(er,lhr),e(er,Wd),e(Wd,ihr),e(Wd,QQ),e(QQ,dhr),e(Wd,chr),e(Wd,WQ),e(WQ,fhr),e(Wd,mhr),e(er,ghr),e(er,e8),e(e8,hhr),e(e8,Y1e),e(Y1e,phr),e(e8,uhr),e(er,_hr),e(er,Lt),M(o8,Lt,null),e(Lt,bhr),e(Lt,K1e),e(K1e,vhr),e(Lt,Fhr),e(Lt,Hd),e(Hd,Thr),e(Hd,Z1e),e(Z1e,Mhr),e(Hd,Ehr),e(Hd,HQ),e(HQ,Chr),e(Hd,whr),e(Lt,Ahr),M(cM,Lt,null),e(er,yhr),e(er,Lr),M(r8,Lr,null),e(Lr,Lhr),e(Lr,ebe),e(ebe,xhr),e(Lr,$hr),e(Lr,on),e(on,khr),e(on,obe),e(obe,Shr),e(on,Rhr),e(on,rbe),e(rbe,Bhr),e(on,Phr),e(on,tbe),e(tbe,Ihr),e(on,qhr),e(Lr,Nhr),e(Lr,Ud),e(Ud,fM),e(fM,abe),e(abe,jhr),e(fM,Dhr),e(fM,UQ),e(UQ,Ghr),e(fM,Ohr),e(Ud,Vhr),e(Ud,mM),e(mM,nbe),e(nbe,Xhr),e(mM,zhr),e(mM,JQ),e(JQ,Qhr),e(mM,Whr),e(Ud,Hhr),e(Ud,gM),e(gM,sbe),e(sbe,Uhr),e(gM,Jhr),e(gM,YQ),e(YQ,Yhr),e(gM,Khr),e(Lr,Zhr),M(hM,Lr,null),b(f,Mqe,_),b(f,Jd,_),e(Jd,pM),e(pM,lbe),M(t8,lbe,null),e(Jd,epr),e(Jd,ibe),e(ibe,opr),b(f,Eqe,_),b(f,or,_),M(a8,or,null),e(or,rpr),e(or,Yd),e(Yd,tpr),e(Yd,KQ),e(KQ,apr),e(Yd,npr),e(Yd,ZQ),e(ZQ,spr),e(Yd,lpr),e(or,ipr),e(or,n8),e(n8,dpr),e(n8,dbe),e(dbe,cpr),e(n8,fpr),e(or,mpr),e(or,xt),M(s8,xt,null),e(xt,gpr),e(xt,cbe),e(cbe,hpr),e(xt,ppr),e(xt,Kd),e(Kd,upr),e(Kd,fbe),e(fbe,_pr),e(Kd,bpr),e(Kd,eW),e(eW,vpr),e(Kd,Fpr),e(xt,Tpr),M(uM,xt,null),e(or,Mpr),e(or,xr),M(l8,xr,null),e(xr,Epr),e(xr,mbe),e(mbe,Cpr),e(xr,wpr),e(xr,rn),e(rn,Apr),e(rn,gbe),e(gbe,ypr),e(rn,Lpr),e(rn,hbe),e(hbe,xpr),e(rn,$pr),e(rn,pbe),e(pbe,kpr),e(rn,Spr),e(xr,Rpr),e(xr,ie),e(ie,_M),e(_M,ube),e(ube,Bpr),e(_M,Ppr),e(_M,oW),e(oW,Ipr),e(_M,qpr),e(ie,Npr),e(ie,bM),e(bM,_be),e(_be,jpr),e(bM,Dpr),e(bM,rW),e(rW,Gpr),e(bM,Opr),e(ie,Vpr),e(ie,vM),e(vM,bbe),e(bbe,Xpr),e(vM,zpr),e(vM,tW),e(tW,Qpr),e(vM,Wpr),e(ie,Hpr),e(ie,FM),e(FM,vbe),e(vbe,Upr),e(FM,Jpr),e(FM,aW),e(aW,Ypr),e(FM,Kpr),e(ie,Zpr),e(ie,TM),e(TM,Fbe),e(Fbe,eur),e(TM,our),e(TM,nW),e(nW,rur),e(TM,tur),e(ie,aur),e(ie,MM),e(MM,Tbe),e(Tbe,nur),e(MM,sur),e(MM,sW),e(sW,lur),e(MM,iur),e(ie,dur),e(ie,EM),e(EM,Mbe),e(Mbe,cur),e(EM,fur),e(EM,lW),e(lW,mur),e(EM,gur),e(ie,hur),e(ie,CM),e(CM,Ebe),e(Ebe,pur),e(CM,uur),e(CM,iW),e(iW,_ur),e(CM,bur),e(ie,vur),e(ie,wM),e(wM,Cbe),e(Cbe,Fur),e(wM,Tur),e(wM,dW),e(dW,Mur),e(wM,Eur),e(ie,Cur),e(ie,AM),e(AM,wbe),e(wbe,wur),e(AM,Aur),e(AM,cW),e(cW,yur),e(AM,Lur),e(ie,xur),e(ie,yM),e(yM,Abe),e(Abe,$ur),e(yM,kur),e(yM,fW),e(fW,Sur),e(yM,Rur),e(ie,Bur),e(ie,LM),e(LM,ybe),e(ybe,Pur),e(LM,Iur),e(LM,mW),e(mW,qur),e(LM,Nur),e(ie,jur),e(ie,xM),e(xM,Lbe),e(Lbe,Dur),e(xM,Gur),e(xM,gW),e(gW,Our),e(xM,Vur),e(ie,Xur),e(ie,$M),e($M,xbe),e(xbe,zur),e($M,Qur),e($M,hW),e(hW,Wur),e($M,Hur),e(ie,Uur),e(ie,kM),e(kM,$be),e($be,Jur),e(kM,Yur),e(kM,pW),e(pW,Kur),e(kM,Zur),e(ie,e_r),e(ie,SM),e(SM,kbe),e(kbe,o_r),e(SM,r_r),e(SM,uW),e(uW,t_r),e(SM,a_r),e(ie,n_r),e(ie,RM),e(RM,Sbe),e(Sbe,s_r),e(RM,l_r),e(RM,_W),e(_W,i_r),e(RM,d_r),e(ie,c_r),e(ie,BM),e(BM,Rbe),e(Rbe,f_r),e(BM,m_r),e(BM,bW),e(bW,g_r),e(BM,h_r),e(ie,p_r),e(ie,PM),e(PM,Bbe),e(Bbe,u_r),e(PM,__r),e(PM,vW),e(vW,b_r),e(PM,v_r),e(ie,F_r),e(ie,IM),e(IM,Pbe),e(Pbe,T_r),e(IM,M_r),e(IM,FW),e(FW,E_r),e(IM,C_r),e(xr,w_r),M(qM,xr,null),b(f,Cqe,_),b(f,Zd,_),e(Zd,NM),e(NM,Ibe),M(i8,Ibe,null),e(Zd,A_r),e(Zd,qbe),e(qbe,y_r),b(f,wqe,_),b(f,rr,_),M(d8,rr,null),e(rr,L_r),e(rr,ec),e(ec,x_r),e(ec,TW),e(TW,$_r),e(ec,k_r),e(ec,MW),e(MW,S_r),e(ec,R_r),e(rr,B_r),e(rr,c8),e(c8,P_r),e(c8,Nbe),e(Nbe,I_r),e(c8,q_r),e(rr,N_r),e(rr,$t),M(f8,$t,null),e($t,j_r),e($t,jbe),e(jbe,D_r),e($t,G_r),e($t,oc),e(oc,O_r),e(oc,Dbe),e(Dbe,V_r),e(oc,X_r),e(oc,EW),e(EW,z_r),e(oc,Q_r),e($t,W_r),M(jM,$t,null),e(rr,H_r),e(rr,$r),M(m8,$r,null),e($r,U_r),e($r,Gbe),e(Gbe,J_r),e($r,Y_r),e($r,tn),e(tn,K_r),e(tn,Obe),e(Obe,Z_r),e(tn,e2r),e(tn,Vbe),e(Vbe,o2r),e(tn,r2r),e(tn,Xbe),e(Xbe,t2r),e(tn,a2r),e($r,n2r),e($r,ye),e(ye,DM),e(DM,zbe),e(zbe,s2r),e(DM,l2r),e(DM,CW),e(CW,i2r),e(DM,d2r),e(ye,c2r),e(ye,GM),e(GM,Qbe),e(Qbe,f2r),e(GM,m2r),e(GM,wW),e(wW,g2r),e(GM,h2r),e(ye,p2r),e(ye,OM),e(OM,Wbe),e(Wbe,u2r),e(OM,_2r),e(OM,AW),e(AW,b2r),e(OM,v2r),e(ye,F2r),e(ye,VM),e(VM,Hbe),e(Hbe,T2r),e(VM,M2r),e(VM,yW),e(yW,E2r),e(VM,C2r),e(ye,w2r),e(ye,XM),e(XM,Ube),e(Ube,A2r),e(XM,y2r),e(XM,LW),e(LW,L2r),e(XM,x2r),e(ye,$2r),e(ye,zM),e(zM,Jbe),e(Jbe,k2r),e(zM,S2r),e(zM,xW),e(xW,R2r),e(zM,B2r),e(ye,P2r),e(ye,QM),e(QM,Ybe),e(Ybe,I2r),e(QM,q2r),e(QM,$W),e($W,N2r),e(QM,j2r),e(ye,D2r),e(ye,WM),e(WM,Kbe),e(Kbe,G2r),e(WM,O2r),e(WM,kW),e(kW,V2r),e(WM,X2r),e(ye,z2r),e(ye,HM),e(HM,Zbe),e(Zbe,Q2r),e(HM,W2r),e(HM,SW),e(SW,H2r),e(HM,U2r),e(ye,J2r),e(ye,UM),e(UM,eve),e(eve,Y2r),e(UM,K2r),e(UM,RW),e(RW,Z2r),e(UM,e1r),e($r,o1r),M(JM,$r,null),b(f,Aqe,_),b(f,rc,_),e(rc,YM),e(YM,ove),M(g8,ove,null),e(rc,r1r),e(rc,rve),e(rve,t1r),b(f,yqe,_),b(f,tr,_),M(h8,tr,null),e(tr,a1r),e(tr,tc),e(tc,n1r),e(tc,BW),e(BW,s1r),e(tc,l1r),e(tc,PW),e(PW,i1r),e(tc,d1r),e(tr,c1r),e(tr,p8),e(p8,f1r),e(p8,tve),e(tve,m1r),e(p8,g1r),e(tr,h1r),e(tr,kt),M(u8,kt,null),e(kt,p1r),e(kt,ave),e(ave,u1r),e(kt,_1r),e(kt,ac),e(ac,b1r),e(ac,nve),e(nve,v1r),e(ac,F1r),e(ac,IW),e(IW,T1r),e(ac,M1r),e(kt,E1r),M(KM,kt,null),e(tr,C1r),e(tr,kr),M(_8,kr,null),e(kr,w1r),e(kr,sve),e(sve,A1r),e(kr,y1r),e(kr,an),e(an,L1r),e(an,lve),e(lve,x1r),e(an,$1r),e(an,ive),e(ive,k1r),e(an,S1r),e(an,dve),e(dve,R1r),e(an,B1r),e(kr,P1r),e(kr,Z),e(Z,ZM),e(ZM,cve),e(cve,I1r),e(ZM,q1r),e(ZM,qW),e(qW,N1r),e(ZM,j1r),e(Z,D1r),e(Z,e4),e(e4,fve),e(fve,G1r),e(e4,O1r),e(e4,NW),e(NW,V1r),e(e4,X1r),e(Z,z1r),e(Z,o4),e(o4,mve),e(mve,Q1r),e(o4,W1r),e(o4,jW),e(jW,H1r),e(o4,U1r),e(Z,J1r),e(Z,r4),e(r4,gve),e(gve,Y1r),e(r4,K1r),e(r4,DW),e(DW,Z1r),e(r4,ebr),e(Z,obr),e(Z,t4),e(t4,hve),e(hve,rbr),e(t4,tbr),e(t4,GW),e(GW,abr),e(t4,nbr),e(Z,sbr),e(Z,a4),e(a4,pve),e(pve,lbr),e(a4,ibr),e(a4,OW),e(OW,dbr),e(a4,cbr),e(Z,fbr),e(Z,n4),e(n4,uve),e(uve,mbr),e(n4,gbr),e(n4,VW),e(VW,hbr),e(n4,pbr),e(Z,ubr),e(Z,s4),e(s4,_ve),e(_ve,_br),e(s4,bbr),e(s4,XW),e(XW,vbr),e(s4,Fbr),e(Z,Tbr),e(Z,l4),e(l4,bve),e(bve,Mbr),e(l4,Ebr),e(l4,zW),e(zW,Cbr),e(l4,wbr),e(Z,Abr),e(Z,i4),e(i4,vve),e(vve,ybr),e(i4,Lbr),e(i4,QW),e(QW,xbr),e(i4,$br),e(Z,kbr),e(Z,d4),e(d4,Fve),e(Fve,Sbr),e(d4,Rbr),e(d4,WW),e(WW,Bbr),e(d4,Pbr),e(Z,Ibr),e(Z,c4),e(c4,Tve),e(Tve,qbr),e(c4,Nbr),e(c4,HW),e(HW,jbr),e(c4,Dbr),e(Z,Gbr),e(Z,f4),e(f4,Mve),e(Mve,Obr),e(f4,Vbr),e(f4,UW),e(UW,Xbr),e(f4,zbr),e(Z,Qbr),e(Z,m4),e(m4,Eve),e(Eve,Wbr),e(m4,Hbr),e(m4,JW),e(JW,Ubr),e(m4,Jbr),e(Z,Ybr),e(Z,g4),e(g4,Cve),e(Cve,Kbr),e(g4,Zbr),e(g4,YW),e(YW,evr),e(g4,ovr),e(Z,rvr),e(Z,h4),e(h4,wve),e(wve,tvr),e(h4,avr),e(h4,KW),e(KW,nvr),e(h4,svr),e(Z,lvr),e(Z,p4),e(p4,Ave),e(Ave,ivr),e(p4,dvr),e(p4,ZW),e(ZW,cvr),e(p4,fvr),e(Z,mvr),e(Z,u4),e(u4,yve),e(yve,gvr),e(u4,hvr),e(u4,eH),e(eH,pvr),e(u4,uvr),e(Z,_vr),e(Z,_4),e(_4,Lve),e(Lve,bvr),e(_4,vvr),e(_4,oH),e(oH,Fvr),e(_4,Tvr),e(Z,Mvr),e(Z,b4),e(b4,xve),e(xve,Evr),e(b4,Cvr),e(b4,rH),e(rH,wvr),e(b4,Avr),e(Z,yvr),e(Z,v4),e(v4,$ve),e($ve,Lvr),e(v4,xvr),e(v4,tH),e(tH,$vr),e(v4,kvr),e(Z,Svr),e(Z,F4),e(F4,kve),e(kve,Rvr),e(F4,Bvr),e(F4,aH),e(aH,Pvr),e(F4,Ivr),e(Z,qvr),e(Z,T4),e(T4,Sve),e(Sve,Nvr),e(T4,jvr),e(T4,nH),e(nH,Dvr),e(T4,Gvr),e(Z,Ovr),e(Z,M4),e(M4,Rve),e(Rve,Vvr),e(M4,Xvr),e(M4,sH),e(sH,zvr),e(M4,Qvr),e(Z,Wvr),e(Z,E4),e(E4,Bve),e(Bve,Hvr),e(E4,Uvr),e(E4,lH),e(lH,Jvr),e(E4,Yvr),e(Z,Kvr),e(Z,C4),e(C4,Pve),e(Pve,Zvr),e(C4,eFr),e(C4,iH),e(iH,oFr),e(C4,rFr),e(kr,tFr),M(w4,kr,null),b(f,Lqe,_),b(f,nc,_),e(nc,A4),e(A4,Ive),M(b8,Ive,null),e(nc,aFr),e(nc,qve),e(qve,nFr),b(f,xqe,_),b(f,ar,_),M(v8,ar,null),e(ar,sFr),e(ar,sc),e(sc,lFr),e(sc,dH),e(dH,iFr),e(sc,dFr),e(sc,cH),e(cH,cFr),e(sc,fFr),e(ar,mFr),e(ar,F8),e(F8,gFr),e(F8,Nve),e(Nve,hFr),e(F8,pFr),e(ar,uFr),e(ar,St),M(T8,St,null),e(St,_Fr),e(St,jve),e(jve,bFr),e(St,vFr),e(St,lc),e(lc,FFr),e(lc,Dve),e(Dve,TFr),e(lc,MFr),e(lc,fH),e(fH,EFr),e(lc,CFr),e(St,wFr),M(y4,St,null),e(ar,AFr),e(ar,Sr),M(M8,Sr,null),e(Sr,yFr),e(Sr,Gve),e(Gve,LFr),e(Sr,xFr),e(Sr,nn),e(nn,$Fr),e(nn,Ove),e(Ove,kFr),e(nn,SFr),e(nn,Vve),e(Vve,RFr),e(nn,BFr),e(nn,Xve),e(Xve,PFr),e(nn,IFr),e(Sr,qFr),e(Sr,pe),e(pe,L4),e(L4,zve),e(zve,NFr),e(L4,jFr),e(L4,mH),e(mH,DFr),e(L4,GFr),e(pe,OFr),e(pe,x4),e(x4,Qve),e(Qve,VFr),e(x4,XFr),e(x4,gH),e(gH,zFr),e(x4,QFr),e(pe,WFr),e(pe,$4),e($4,Wve),e(Wve,HFr),e($4,UFr),e($4,hH),e(hH,JFr),e($4,YFr),e(pe,KFr),e(pe,k4),e(k4,Hve),e(Hve,ZFr),e(k4,e0r),e(k4,pH),e(pH,o0r),e(k4,r0r),e(pe,t0r),e(pe,S4),e(S4,Uve),e(Uve,a0r),e(S4,n0r),e(S4,uH),e(uH,s0r),e(S4,l0r),e(pe,i0r),e(pe,R4),e(R4,Jve),e(Jve,d0r),e(R4,c0r),e(R4,_H),e(_H,f0r),e(R4,m0r),e(pe,g0r),e(pe,B4),e(B4,Yve),e(Yve,h0r),e(B4,p0r),e(B4,bH),e(bH,u0r),e(B4,_0r),e(pe,b0r),e(pe,P4),e(P4,Kve),e(Kve,v0r),e(P4,F0r),e(P4,vH),e(vH,T0r),e(P4,M0r),e(pe,E0r),e(pe,I4),e(I4,Zve),e(Zve,C0r),e(I4,w0r),e(I4,FH),e(FH,A0r),e(I4,y0r),e(pe,L0r),e(pe,q4),e(q4,eFe),e(eFe,x0r),e(q4,$0r),e(q4,TH),e(TH,k0r),e(q4,S0r),e(pe,R0r),e(pe,N4),e(N4,oFe),e(oFe,B0r),e(N4,P0r),e(N4,MH),e(MH,I0r),e(N4,q0r),e(pe,N0r),e(pe,j4),e(j4,rFe),e(rFe,j0r),e(j4,D0r),e(j4,EH),e(EH,G0r),e(j4,O0r),e(pe,V0r),e(pe,D4),e(D4,tFe),e(tFe,X0r),e(D4,z0r),e(D4,CH),e(CH,Q0r),e(D4,W0r),e(pe,H0r),e(pe,G4),e(G4,aFe),e(aFe,U0r),e(G4,J0r),e(G4,wH),e(wH,Y0r),e(G4,K0r),e(pe,Z0r),e(pe,O4),e(O4,nFe),e(nFe,eTr),e(O4,oTr),e(O4,AH),e(AH,rTr),e(O4,tTr),e(pe,aTr),e(pe,V4),e(V4,sFe),e(sFe,nTr),e(V4,sTr),e(V4,yH),e(yH,lTr),e(V4,iTr),e(pe,dTr),e(pe,X4),e(X4,lFe),e(lFe,cTr),e(X4,fTr),e(X4,LH),e(LH,mTr),e(X4,gTr),e(Sr,hTr),M(z4,Sr,null),b(f,$qe,_),b(f,ic,_),e(ic,Q4),e(Q4,iFe),M(E8,iFe,null),e(ic,pTr),e(ic,dFe),e(dFe,uTr),b(f,kqe,_),b(f,nr,_),M(C8,nr,null),e(nr,_Tr),e(nr,dc),e(dc,bTr),e(dc,xH),e(xH,vTr),e(dc,FTr),e(dc,$H),e($H,TTr),e(dc,MTr),e(nr,ETr),e(nr,w8),e(w8,CTr),e(w8,cFe),e(cFe,wTr),e(w8,ATr),e(nr,yTr),e(nr,Rt),M(A8,Rt,null),e(Rt,LTr),e(Rt,fFe),e(fFe,xTr),e(Rt,$Tr),e(Rt,cc),e(cc,kTr),e(cc,mFe),e(mFe,STr),e(cc,RTr),e(cc,kH),e(kH,BTr),e(cc,PTr),e(Rt,ITr),M(W4,Rt,null),e(nr,qTr),e(nr,Rr),M(y8,Rr,null),e(Rr,NTr),e(Rr,gFe),e(gFe,jTr),e(Rr,DTr),e(Rr,sn),e(sn,GTr),e(sn,hFe),e(hFe,OTr),e(sn,VTr),e(sn,pFe),e(pFe,XTr),e(sn,zTr),e(sn,uFe),e(uFe,QTr),e(sn,WTr),e(Rr,HTr),e(Rr,L8),e(L8,H4),e(H4,_Fe),e(_Fe,UTr),e(H4,JTr),e(H4,SH),e(SH,YTr),e(H4,KTr),e(L8,ZTr),e(L8,U4),e(U4,bFe),e(bFe,e7r),e(U4,o7r),e(U4,RH),e(RH,r7r),e(U4,t7r),e(Rr,a7r),M(J4,Rr,null),b(f,Sqe,_),b(f,fc,_),e(fc,Y4),e(Y4,vFe),M(x8,vFe,null),e(fc,n7r),e(fc,FFe),e(FFe,s7r),b(f,Rqe,_),b(f,sr,_),M($8,sr,null),e(sr,l7r),e(sr,mc),e(mc,i7r),e(mc,BH),e(BH,d7r),e(mc,c7r),e(mc,PH),e(PH,f7r),e(mc,m7r),e(sr,g7r),e(sr,k8),e(k8,h7r),e(k8,TFe),e(TFe,p7r),e(k8,u7r),e(sr,_7r),e(sr,Bt),M(S8,Bt,null),e(Bt,b7r),e(Bt,MFe),e(MFe,v7r),e(Bt,F7r),e(Bt,gc),e(gc,T7r),e(gc,EFe),e(EFe,M7r),e(gc,E7r),e(gc,IH),e(IH,C7r),e(gc,w7r),e(Bt,A7r),M(K4,Bt,null),e(sr,y7r),e(sr,Br),M(R8,Br,null),e(Br,L7r),e(Br,CFe),e(CFe,x7r),e(Br,$7r),e(Br,ln),e(ln,k7r),e(ln,wFe),e(wFe,S7r),e(ln,R7r),e(ln,AFe),e(AFe,B7r),e(ln,P7r),e(ln,yFe),e(yFe,I7r),e(ln,q7r),e(Br,N7r),e(Br,LFe),e(LFe,Z4),e(Z4,xFe),e(xFe,j7r),e(Z4,D7r),e(Z4,qH),e(qH,G7r),e(Z4,O7r),e(Br,V7r),M(eE,Br,null),b(f,Bqe,_),b(f,hc,_),e(hc,oE),e(oE,$Fe),M(B8,$Fe,null),e(hc,X7r),e(hc,kFe),e(kFe,z7r),b(f,Pqe,_),b(f,lr,_),M(P8,lr,null),e(lr,Q7r),e(lr,pc),e(pc,W7r),e(pc,NH),e(NH,H7r),e(pc,U7r),e(pc,jH),e(jH,J7r),e(pc,Y7r),e(lr,K7r),e(lr,I8),e(I8,Z7r),e(I8,SFe),e(SFe,eMr),e(I8,oMr),e(lr,rMr),e(lr,Pt),M(q8,Pt,null),e(Pt,tMr),e(Pt,RFe),e(RFe,aMr),e(Pt,nMr),e(Pt,uc),e(uc,sMr),e(uc,BFe),e(BFe,lMr),e(uc,iMr),e(uc,DH),e(DH,dMr),e(uc,cMr),e(Pt,fMr),M(rE,Pt,null),e(lr,mMr),e(lr,Pr),M(N8,Pr,null),e(Pr,gMr),e(Pr,PFe),e(PFe,hMr),e(Pr,pMr),e(Pr,dn),e(dn,uMr),e(dn,IFe),e(IFe,_Mr),e(dn,bMr),e(dn,qFe),e(qFe,vMr),e(dn,FMr),e(dn,NFe),e(NFe,TMr),e(dn,MMr),e(Pr,EMr),e(Pr,de),e(de,tE),e(tE,jFe),e(jFe,CMr),e(tE,wMr),e(tE,GH),e(GH,AMr),e(tE,yMr),e(de,LMr),e(de,aE),e(aE,DFe),e(DFe,xMr),e(aE,$Mr),e(aE,OH),e(OH,kMr),e(aE,SMr),e(de,RMr),e(de,nE),e(nE,GFe),e(GFe,BMr),e(nE,PMr),e(nE,VH),e(VH,IMr),e(nE,qMr),e(de,NMr),e(de,sE),e(sE,OFe),e(OFe,jMr),e(sE,DMr),e(sE,XH),e(XH,GMr),e(sE,OMr),e(de,VMr),e(de,lE),e(lE,VFe),e(VFe,XMr),e(lE,zMr),e(lE,zH),e(zH,QMr),e(lE,WMr),e(de,HMr),e(de,iE),e(iE,XFe),e(XFe,UMr),e(iE,JMr),e(iE,QH),e(QH,YMr),e(iE,KMr),e(de,ZMr),e(de,dE),e(dE,zFe),e(zFe,e4r),e(dE,o4r),e(dE,WH),e(WH,r4r),e(dE,t4r),e(de,a4r),e(de,cE),e(cE,QFe),e(QFe,n4r),e(cE,s4r),e(cE,HH),e(HH,l4r),e(cE,i4r),e(de,d4r),e(de,fE),e(fE,WFe),e(WFe,c4r),e(fE,f4r),e(fE,UH),e(UH,m4r),e(fE,g4r),e(de,h4r),e(de,mE),e(mE,HFe),e(HFe,p4r),e(mE,u4r),e(mE,JH),e(JH,_4r),e(mE,b4r),e(de,v4r),e(de,gE),e(gE,UFe),e(UFe,F4r),e(gE,T4r),e(gE,YH),e(YH,M4r),e(gE,E4r),e(de,C4r),e(de,hE),e(hE,JFe),e(JFe,w4r),e(hE,A4r),e(hE,KH),e(KH,y4r),e(hE,L4r),e(de,x4r),e(de,pE),e(pE,YFe),e(YFe,$4r),e(pE,k4r),e(pE,ZH),e(ZH,S4r),e(pE,R4r),e(de,B4r),e(de,uE),e(uE,KFe),e(KFe,P4r),e(uE,I4r),e(uE,eU),e(eU,q4r),e(uE,N4r),e(de,j4r),e(de,_E),e(_E,ZFe),e(ZFe,D4r),e(_E,G4r),e(_E,oU),e(oU,O4r),e(_E,V4r),e(de,X4r),e(de,bE),e(bE,e0e),e(e0e,z4r),e(bE,Q4r),e(bE,rU),e(rU,W4r),e(bE,H4r),e(de,U4r),e(de,vE),e(vE,o0e),e(o0e,J4r),e(vE,Y4r),e(vE,tU),e(tU,K4r),e(vE,Z4r),e(de,eEr),e(de,FE),e(FE,r0e),e(r0e,oEr),e(FE,rEr),e(FE,aU),e(aU,tEr),e(FE,aEr),e(de,nEr),e(de,TE),e(TE,t0e),e(t0e,sEr),e(TE,lEr),e(TE,nU),e(nU,iEr),e(TE,dEr),e(de,cEr),e(de,ME),e(ME,a0e),e(a0e,fEr),e(ME,mEr),e(ME,sU),e(sU,gEr),e(ME,hEr),e(Pr,pEr),M(EE,Pr,null),b(f,Iqe,_),b(f,_c,_),e(_c,CE),e(CE,n0e),M(j8,n0e,null),e(_c,uEr),e(_c,s0e),e(s0e,_Er),b(f,qqe,_),b(f,ir,_),M(D8,ir,null),e(ir,bEr),e(ir,bc),e(bc,vEr),e(bc,lU),e(lU,FEr),e(bc,TEr),e(bc,iU),e(iU,MEr),e(bc,EEr),e(ir,CEr),e(ir,G8),e(G8,wEr),e(G8,l0e),e(l0e,AEr),e(G8,yEr),e(ir,LEr),e(ir,It),M(O8,It,null),e(It,xEr),e(It,i0e),e(i0e,$Er),e(It,kEr),e(It,vc),e(vc,SEr),e(vc,d0e),e(d0e,REr),e(vc,BEr),e(vc,dU),e(dU,PEr),e(vc,IEr),e(It,qEr),M(wE,It,null),e(ir,NEr),e(ir,Ir),M(V8,Ir,null),e(Ir,jEr),e(Ir,c0e),e(c0e,DEr),e(Ir,GEr),e(Ir,cn),e(cn,OEr),e(cn,f0e),e(f0e,VEr),e(cn,XEr),e(cn,m0e),e(m0e,zEr),e(cn,QEr),e(cn,g0e),e(g0e,WEr),e(cn,HEr),e(Ir,UEr),e(Ir,ce),e(ce,AE),e(AE,h0e),e(h0e,JEr),e(AE,YEr),e(AE,cU),e(cU,KEr),e(AE,ZEr),e(ce,e5r),e(ce,yE),e(yE,p0e),e(p0e,o5r),e(yE,r5r),e(yE,fU),e(fU,t5r),e(yE,a5r),e(ce,n5r),e(ce,LE),e(LE,u0e),e(u0e,s5r),e(LE,l5r),e(LE,mU),e(mU,i5r),e(LE,d5r),e(ce,c5r),e(ce,xE),e(xE,_0e),e(_0e,f5r),e(xE,m5r),e(xE,gU),e(gU,g5r),e(xE,h5r),e(ce,p5r),e(ce,$E),e($E,b0e),e(b0e,u5r),e($E,_5r),e($E,hU),e(hU,b5r),e($E,v5r),e(ce,F5r),e(ce,kE),e(kE,v0e),e(v0e,T5r),e(kE,M5r),e(kE,pU),e(pU,E5r),e(kE,C5r),e(ce,w5r),e(ce,SE),e(SE,F0e),e(F0e,A5r),e(SE,y5r),e(SE,uU),e(uU,L5r),e(SE,x5r),e(ce,$5r),e(ce,RE),e(RE,T0e),e(T0e,k5r),e(RE,S5r),e(RE,_U),e(_U,R5r),e(RE,B5r),e(ce,P5r),e(ce,BE),e(BE,M0e),e(M0e,I5r),e(BE,q5r),e(BE,bU),e(bU,N5r),e(BE,j5r),e(ce,D5r),e(ce,PE),e(PE,E0e),e(E0e,G5r),e(PE,O5r),e(PE,vU),e(vU,V5r),e(PE,X5r),e(ce,z5r),e(ce,IE),e(IE,C0e),e(C0e,Q5r),e(IE,W5r),e(IE,FU),e(FU,H5r),e(IE,U5r),e(ce,J5r),e(ce,qE),e(qE,w0e),e(w0e,Y5r),e(qE,K5r),e(qE,TU),e(TU,Z5r),e(qE,eCr),e(ce,oCr),e(ce,NE),e(NE,A0e),e(A0e,rCr),e(NE,tCr),e(NE,MU),e(MU,aCr),e(NE,nCr),e(ce,sCr),e(ce,jE),e(jE,y0e),e(y0e,lCr),e(jE,iCr),e(jE,EU),e(EU,dCr),e(jE,cCr),e(ce,fCr),e(ce,DE),e(DE,L0e),e(L0e,mCr),e(DE,gCr),e(DE,CU),e(CU,hCr),e(DE,pCr),e(ce,uCr),e(ce,GE),e(GE,x0e),e(x0e,_Cr),e(GE,bCr),e(GE,wU),e(wU,vCr),e(GE,FCr),e(ce,TCr),e(ce,OE),e(OE,$0e),e($0e,MCr),e(OE,ECr),e(OE,AU),e(AU,CCr),e(OE,wCr),e(ce,ACr),e(ce,VE),e(VE,k0e),e(k0e,yCr),e(VE,LCr),e(VE,yU),e(yU,xCr),e(VE,$Cr),e(ce,kCr),e(ce,XE),e(XE,S0e),e(S0e,SCr),e(XE,RCr),e(XE,LU),e(LU,BCr),e(XE,PCr),e(ce,ICr),e(ce,zE),e(zE,R0e),e(R0e,qCr),e(zE,NCr),e(zE,xU),e(xU,jCr),e(zE,DCr),e(Ir,GCr),M(QE,Ir,null),b(f,Nqe,_),b(f,Fc,_),e(Fc,WE),e(WE,B0e),M(X8,B0e,null),e(Fc,OCr),e(Fc,P0e),e(P0e,VCr),b(f,jqe,_),b(f,dr,_),M(z8,dr,null),e(dr,XCr),e(dr,Tc),e(Tc,zCr),e(Tc,$U),e($U,QCr),e(Tc,WCr),e(Tc,kU),e(kU,HCr),e(Tc,UCr),e(dr,JCr),e(dr,Q8),e(Q8,YCr),e(Q8,I0e),e(I0e,KCr),e(Q8,ZCr),e(dr,e3r),e(dr,qt),M(W8,qt,null),e(qt,o3r),e(qt,q0e),e(q0e,r3r),e(qt,t3r),e(qt,Mc),e(Mc,a3r),e(Mc,N0e),e(N0e,n3r),e(Mc,s3r),e(Mc,SU),e(SU,l3r),e(Mc,i3r),e(qt,d3r),M(HE,qt,null),e(dr,c3r),e(dr,qr),M(H8,qr,null),e(qr,f3r),e(qr,j0e),e(j0e,m3r),e(qr,g3r),e(qr,fn),e(fn,h3r),e(fn,D0e),e(D0e,p3r),e(fn,u3r),e(fn,G0e),e(G0e,_3r),e(fn,b3r),e(fn,O0e),e(O0e,v3r),e(fn,F3r),e(qr,T3r),e(qr,V0e),e(V0e,UE),e(UE,X0e),e(X0e,M3r),e(UE,E3r),e(UE,RU),e(RU,C3r),e(UE,w3r),e(qr,A3r),M(JE,qr,null),b(f,Dqe,_),b(f,Ec,_),e(Ec,YE),e(YE,z0e),M(U8,z0e,null),e(Ec,y3r),e(Ec,Q0e),e(Q0e,L3r),b(f,Gqe,_),b(f,cr,_),M(J8,cr,null),e(cr,x3r),e(cr,Cc),e(Cc,$3r),e(Cc,BU),e(BU,k3r),e(Cc,S3r),e(Cc,PU),e(PU,R3r),e(Cc,B3r),e(cr,P3r),e(cr,Y8),e(Y8,I3r),e(Y8,W0e),e(W0e,q3r),e(Y8,N3r),e(cr,j3r),e(cr,Nt),M(K8,Nt,null),e(Nt,D3r),e(Nt,H0e),e(H0e,G3r),e(Nt,O3r),e(Nt,wc),e(wc,V3r),e(wc,U0e),e(U0e,X3r),e(wc,z3r),e(wc,IU),e(IU,Q3r),e(wc,W3r),e(Nt,H3r),M(KE,Nt,null),e(cr,U3r),e(cr,Nr),M(Z8,Nr,null),e(Nr,J3r),e(Nr,J0e),e(J0e,Y3r),e(Nr,K3r),e(Nr,mn),e(mn,Z3r),e(mn,Y0e),e(Y0e,ewr),e(mn,owr),e(mn,K0e),e(K0e,rwr),e(mn,twr),e(mn,Z0e),e(Z0e,awr),e(mn,nwr),e(Nr,swr),e(Nr,eTe),e(eTe,ZE),e(ZE,oTe),e(oTe,lwr),e(ZE,iwr),e(ZE,qU),e(qU,dwr),e(ZE,cwr),e(Nr,fwr),M(e5,Nr,null),b(f,Oqe,_),b(f,Ac,_),e(Ac,o5),e(o5,rTe),M(ex,rTe,null),e(Ac,mwr),e(Ac,tTe),e(tTe,gwr),b(f,Vqe,_),b(f,fr,_),M(ox,fr,null),e(fr,hwr),e(fr,yc),e(yc,pwr),e(yc,NU),e(NU,uwr),e(yc,_wr),e(yc,jU),e(jU,bwr),e(yc,vwr),e(fr,Fwr),e(fr,rx),e(rx,Twr),e(rx,aTe),e(aTe,Mwr),e(rx,Ewr),e(fr,Cwr),e(fr,jt),M(tx,jt,null),e(jt,wwr),e(jt,nTe),e(nTe,Awr),e(jt,ywr),e(jt,Lc),e(Lc,Lwr),e(Lc,sTe),e(sTe,xwr),e(Lc,$wr),e(Lc,DU),e(DU,kwr),e(Lc,Swr),e(jt,Rwr),M(r5,jt,null),e(fr,Bwr),e(fr,jr),M(ax,jr,null),e(jr,Pwr),e(jr,lTe),e(lTe,Iwr),e(jr,qwr),e(jr,gn),e(gn,Nwr),e(gn,iTe),e(iTe,jwr),e(gn,Dwr),e(gn,dTe),e(dTe,Gwr),e(gn,Owr),e(gn,cTe),e(cTe,Vwr),e(gn,Xwr),e(jr,zwr),e(jr,re),e(re,t5),e(t5,fTe),e(fTe,Qwr),e(t5,Wwr),e(t5,GU),e(GU,Hwr),e(t5,Uwr),e(re,Jwr),e(re,a5),e(a5,mTe),e(mTe,Ywr),e(a5,Kwr),e(a5,OU),e(OU,Zwr),e(a5,eAr),e(re,oAr),e(re,n5),e(n5,gTe),e(gTe,rAr),e(n5,tAr),e(n5,VU),e(VU,aAr),e(n5,nAr),e(re,sAr),e(re,s5),e(s5,hTe),e(hTe,lAr),e(s5,iAr),e(s5,XU),e(XU,dAr),e(s5,cAr),e(re,fAr),e(re,l5),e(l5,pTe),e(pTe,mAr),e(l5,gAr),e(l5,zU),e(zU,hAr),e(l5,pAr),e(re,uAr),e(re,i5),e(i5,uTe),e(uTe,_Ar),e(i5,bAr),e(i5,QU),e(QU,vAr),e(i5,FAr),e(re,TAr),e(re,d5),e(d5,_Te),e(_Te,MAr),e(d5,EAr),e(d5,WU),e(WU,CAr),e(d5,wAr),e(re,AAr),e(re,c5),e(c5,bTe),e(bTe,yAr),e(c5,LAr),e(c5,HU),e(HU,xAr),e(c5,$Ar),e(re,kAr),e(re,f5),e(f5,vTe),e(vTe,SAr),e(f5,RAr),e(f5,UU),e(UU,BAr),e(f5,PAr),e(re,IAr),e(re,m5),e(m5,FTe),e(FTe,qAr),e(m5,NAr),e(m5,JU),e(JU,jAr),e(m5,DAr),e(re,GAr),e(re,g5),e(g5,TTe),e(TTe,OAr),e(g5,VAr),e(g5,YU),e(YU,XAr),e(g5,zAr),e(re,QAr),e(re,h5),e(h5,MTe),e(MTe,WAr),e(h5,HAr),e(h5,KU),e(KU,UAr),e(h5,JAr),e(re,YAr),e(re,p5),e(p5,ETe),e(ETe,KAr),e(p5,ZAr),e(p5,ZU),e(ZU,e6r),e(p5,o6r),e(re,r6r),e(re,u5),e(u5,CTe),e(CTe,t6r),e(u5,a6r),e(u5,eJ),e(eJ,n6r),e(u5,s6r),e(re,l6r),e(re,_5),e(_5,wTe),e(wTe,i6r),e(_5,d6r),e(_5,oJ),e(oJ,c6r),e(_5,f6r),e(re,m6r),e(re,b5),e(b5,ATe),e(ATe,g6r),e(b5,h6r),e(b5,rJ),e(rJ,p6r),e(b5,u6r),e(re,_6r),e(re,v5),e(v5,yTe),e(yTe,b6r),e(v5,v6r),e(v5,tJ),e(tJ,F6r),e(v5,T6r),e(re,M6r),e(re,F5),e(F5,LTe),e(LTe,E6r),e(F5,C6r),e(F5,aJ),e(aJ,w6r),e(F5,A6r),e(re,y6r),e(re,T5),e(T5,xTe),e(xTe,L6r),e(T5,x6r),e(T5,nJ),e(nJ,$6r),e(T5,k6r),e(re,S6r),e(re,M5),e(M5,$Te),e($Te,R6r),e(M5,B6r),e(M5,sJ),e(sJ,P6r),e(M5,I6r),e(re,q6r),e(re,E5),e(E5,kTe),e(kTe,N6r),e(E5,j6r),e(E5,lJ),e(lJ,D6r),e(E5,G6r),e(re,O6r),e(re,C5),e(C5,STe),e(STe,V6r),e(C5,X6r),e(C5,iJ),e(iJ,z6r),e(C5,Q6r),e(re,W6r),e(re,w5),e(w5,RTe),e(RTe,H6r),e(w5,U6r),e(w5,dJ),e(dJ,J6r),e(w5,Y6r),e(re,K6r),e(re,A5),e(A5,BTe),e(BTe,Z6r),e(A5,eyr),e(A5,cJ),e(cJ,oyr),e(A5,ryr),e(re,tyr),e(re,y5),e(y5,PTe),e(PTe,ayr),e(y5,nyr),e(y5,fJ),e(fJ,syr),e(y5,lyr),e(jr,iyr),M(L5,jr,null),b(f,Xqe,_),b(f,xc,_),e(xc,x5),e(x5,ITe),M(nx,ITe,null),e(xc,dyr),e(xc,qTe),e(qTe,cyr),b(f,zqe,_),b(f,mr,_),M(sx,mr,null),e(mr,fyr),e(mr,$c),e($c,myr),e($c,mJ),e(mJ,gyr),e($c,hyr),e($c,gJ),e(gJ,pyr),e($c,uyr),e(mr,_yr),e(mr,lx),e(lx,byr),e(lx,NTe),e(NTe,vyr),e(lx,Fyr),e(mr,Tyr),e(mr,Dt),M(ix,Dt,null),e(Dt,Myr),e(Dt,jTe),e(jTe,Eyr),e(Dt,Cyr),e(Dt,kc),e(kc,wyr),e(kc,DTe),e(DTe,Ayr),e(kc,yyr),e(kc,hJ),e(hJ,Lyr),e(kc,xyr),e(Dt,$yr),M($5,Dt,null),e(mr,kyr),e(mr,Dr),M(dx,Dr,null),e(Dr,Syr),e(Dr,GTe),e(GTe,Ryr),e(Dr,Byr),e(Dr,hn),e(hn,Pyr),e(hn,OTe),e(OTe,Iyr),e(hn,qyr),e(hn,VTe),e(VTe,Nyr),e(hn,jyr),e(hn,XTe),e(XTe,Dyr),e(hn,Gyr),e(Dr,Oyr),e(Dr,ke),e(ke,k5),e(k5,zTe),e(zTe,Vyr),e(k5,Xyr),e(k5,pJ),e(pJ,zyr),e(k5,Qyr),e(ke,Wyr),e(ke,S5),e(S5,QTe),e(QTe,Hyr),e(S5,Uyr),e(S5,uJ),e(uJ,Jyr),e(S5,Yyr),e(ke,Kyr),e(ke,R5),e(R5,WTe),e(WTe,Zyr),e(R5,eLr),e(R5,_J),e(_J,oLr),e(R5,rLr),e(ke,tLr),e(ke,B5),e(B5,HTe),e(HTe,aLr),e(B5,nLr),e(B5,bJ),e(bJ,sLr),e(B5,lLr),e(ke,iLr),e(ke,P5),e(P5,UTe),e(UTe,dLr),e(P5,cLr),e(P5,vJ),e(vJ,fLr),e(P5,mLr),e(ke,gLr),e(ke,I5),e(I5,JTe),e(JTe,hLr),e(I5,pLr),e(I5,FJ),e(FJ,uLr),e(I5,_Lr),e(ke,bLr),e(ke,q5),e(q5,YTe),e(YTe,vLr),e(q5,FLr),e(q5,TJ),e(TJ,TLr),e(q5,MLr),e(ke,ELr),e(ke,N5),e(N5,KTe),e(KTe,CLr),e(N5,wLr),e(N5,MJ),e(MJ,ALr),e(N5,yLr),e(ke,LLr),e(ke,j5),e(j5,ZTe),e(ZTe,xLr),e(j5,$Lr),e(j5,EJ),e(EJ,kLr),e(j5,SLr),e(Dr,RLr),M(D5,Dr,null),b(f,Qqe,_),b(f,Sc,_),e(Sc,G5),e(G5,e7e),M(cx,e7e,null),e(Sc,BLr),e(Sc,o7e),e(o7e,PLr),b(f,Wqe,_),b(f,gr,_),M(fx,gr,null),e(gr,ILr),e(gr,Rc),e(Rc,qLr),e(Rc,CJ),e(CJ,NLr),e(Rc,jLr),e(Rc,wJ),e(wJ,DLr),e(Rc,GLr),e(gr,OLr),e(gr,mx),e(mx,VLr),e(mx,r7e),e(r7e,XLr),e(mx,zLr),e(gr,QLr),e(gr,Gt),M(gx,Gt,null),e(Gt,WLr),e(Gt,t7e),e(t7e,HLr),e(Gt,ULr),e(Gt,Bc),e(Bc,JLr),e(Bc,a7e),e(a7e,YLr),e(Bc,KLr),e(Bc,AJ),e(AJ,ZLr),e(Bc,e8r),e(Gt,o8r),M(O5,Gt,null),e(gr,r8r),e(gr,Gr),M(hx,Gr,null),e(Gr,t8r),e(Gr,n7e),e(n7e,a8r),e(Gr,n8r),e(Gr,pn),e(pn,s8r),e(pn,s7e),e(s7e,l8r),e(pn,i8r),e(pn,l7e),e(l7e,d8r),e(pn,c8r),e(pn,i7e),e(i7e,f8r),e(pn,m8r),e(Gr,g8r),e(Gr,Me),e(Me,V5),e(V5,d7e),e(d7e,h8r),e(V5,p8r),e(V5,yJ),e(yJ,u8r),e(V5,_8r),e(Me,b8r),e(Me,X5),e(X5,c7e),e(c7e,v8r),e(X5,F8r),e(X5,LJ),e(LJ,T8r),e(X5,M8r),e(Me,E8r),e(Me,z5),e(z5,f7e),e(f7e,C8r),e(z5,w8r),e(z5,xJ),e(xJ,A8r),e(z5,y8r),e(Me,L8r),e(Me,Q5),e(Q5,m7e),e(m7e,x8r),e(Q5,$8r),e(Q5,$J),e($J,k8r),e(Q5,S8r),e(Me,R8r),e(Me,W5),e(W5,g7e),e(g7e,B8r),e(W5,P8r),e(W5,kJ),e(kJ,I8r),e(W5,q8r),e(Me,N8r),e(Me,H5),e(H5,h7e),e(h7e,j8r),e(H5,D8r),e(H5,SJ),e(SJ,G8r),e(H5,O8r),e(Me,V8r),e(Me,U5),e(U5,p7e),e(p7e,X8r),e(U5,z8r),e(U5,RJ),e(RJ,Q8r),e(U5,W8r),e(Me,H8r),e(Me,J5),e(J5,u7e),e(u7e,U8r),e(J5,J8r),e(J5,BJ),e(BJ,Y8r),e(J5,K8r),e(Me,Z8r),e(Me,Y5),e(Y5,_7e),e(_7e,exr),e(Y5,oxr),e(Y5,PJ),e(PJ,rxr),e(Y5,txr),e(Me,axr),e(Me,K5),e(K5,b7e),e(b7e,nxr),e(K5,sxr),e(K5,IJ),e(IJ,lxr),e(K5,ixr),e(Me,dxr),e(Me,Z5),e(Z5,v7e),e(v7e,cxr),e(Z5,fxr),e(Z5,qJ),e(qJ,mxr),e(Z5,gxr),e(Me,hxr),e(Me,eC),e(eC,F7e),e(F7e,pxr),e(eC,uxr),e(eC,NJ),e(NJ,_xr),e(eC,bxr),e(Gr,vxr),M(oC,Gr,null),b(f,Hqe,_),b(f,Pc,_),e(Pc,rC),e(rC,T7e),M(px,T7e,null),e(Pc,Fxr),e(Pc,M7e),e(M7e,Txr),b(f,Uqe,_),b(f,hr,_),M(ux,hr,null),e(hr,Mxr),e(hr,Ic),e(Ic,Exr),e(Ic,jJ),e(jJ,Cxr),e(Ic,wxr),e(Ic,DJ),e(DJ,Axr),e(Ic,yxr),e(hr,Lxr),e(hr,_x),e(_x,xxr),e(_x,E7e),e(E7e,$xr),e(_x,kxr),e(hr,Sxr),e(hr,Ot),M(bx,Ot,null),e(Ot,Rxr),e(Ot,C7e),e(C7e,Bxr),e(Ot,Pxr),e(Ot,qc),e(qc,Ixr),e(qc,w7e),e(w7e,qxr),e(qc,Nxr),e(qc,GJ),e(GJ,jxr),e(qc,Dxr),e(Ot,Gxr),M(tC,Ot,null),e(hr,Oxr),e(hr,Or),M(vx,Or,null),e(Or,Vxr),e(Or,A7e),e(A7e,Xxr),e(Or,zxr),e(Or,un),e(un,Qxr),e(un,y7e),e(y7e,Wxr),e(un,Hxr),e(un,L7e),e(L7e,Uxr),e(un,Jxr),e(un,x7e),e(x7e,Yxr),e(un,Kxr),e(Or,Zxr),e(Or,Le),e(Le,aC),e(aC,$7e),e($7e,e9r),e(aC,o9r),e(aC,OJ),e(OJ,r9r),e(aC,t9r),e(Le,a9r),e(Le,nC),e(nC,k7e),e(k7e,n9r),e(nC,s9r),e(nC,VJ),e(VJ,l9r),e(nC,i9r),e(Le,d9r),e(Le,sC),e(sC,S7e),e(S7e,c9r),e(sC,f9r),e(sC,XJ),e(XJ,m9r),e(sC,g9r),e(Le,h9r),e(Le,lC),e(lC,R7e),e(R7e,p9r),e(lC,u9r),e(lC,zJ),e(zJ,_9r),e(lC,b9r),e(Le,v9r),e(Le,iC),e(iC,B7e),e(B7e,F9r),e(iC,T9r),e(iC,QJ),e(QJ,M9r),e(iC,E9r),e(Le,C9r),e(Le,dC),e(dC,P7e),e(P7e,w9r),e(dC,A9r),e(dC,WJ),e(WJ,y9r),e(dC,L9r),e(Le,x9r),e(Le,cC),e(cC,I7e),e(I7e,$9r),e(cC,k9r),e(cC,HJ),e(HJ,S9r),e(cC,R9r),e(Le,B9r),e(Le,fC),e(fC,q7e),e(q7e,P9r),e(fC,I9r),e(fC,UJ),e(UJ,q9r),e(fC,N9r),e(Le,j9r),e(Le,mC),e(mC,N7e),e(N7e,D9r),e(mC,G9r),e(mC,JJ),e(JJ,O9r),e(mC,V9r),e(Le,X9r),e(Le,gC),e(gC,j7e),e(j7e,z9r),e(gC,Q9r),e(gC,YJ),e(YJ,W9r),e(gC,H9r),e(Or,U9r),M(hC,Or,null),b(f,Jqe,_),b(f,Nc,_),e(Nc,pC),e(pC,D7e),M(Fx,D7e,null),e(Nc,J9r),e(Nc,G7e),e(G7e,Y9r),b(f,Yqe,_),b(f,pr,_),M(Tx,pr,null),e(pr,K9r),e(pr,jc),e(jc,Z9r),e(jc,KJ),e(KJ,e$r),e(jc,o$r),e(jc,ZJ),e(ZJ,r$r),e(jc,t$r),e(pr,a$r),e(pr,Mx),e(Mx,n$r),e(Mx,O7e),e(O7e,s$r),e(Mx,l$r),e(pr,i$r),e(pr,Vt),M(Ex,Vt,null),e(Vt,d$r),e(Vt,V7e),e(V7e,c$r),e(Vt,f$r),e(Vt,Dc),e(Dc,m$r),e(Dc,X7e),e(X7e,g$r),e(Dc,h$r),e(Dc,eY),e(eY,p$r),e(Dc,u$r),e(Vt,_$r),M(uC,Vt,null),e(pr,b$r),e(pr,Vr),M(Cx,Vr,null),e(Vr,v$r),e(Vr,z7e),e(z7e,F$r),e(Vr,T$r),e(Vr,_n),e(_n,M$r),e(_n,Q7e),e(Q7e,E$r),e(_n,C$r),e(_n,W7e),e(W7e,w$r),e(_n,A$r),e(_n,H7e),e(H7e,y$r),e(_n,L$r),e(Vr,x$r),e(Vr,Se),e(Se,_C),e(_C,U7e),e(U7e,$$r),e(_C,k$r),e(_C,oY),e(oY,S$r),e(_C,R$r),e(Se,B$r),e(Se,bC),e(bC,J7e),e(J7e,P$r),e(bC,I$r),e(bC,rY),e(rY,q$r),e(bC,N$r),e(Se,j$r),e(Se,vC),e(vC,Y7e),e(Y7e,D$r),e(vC,G$r),e(vC,tY),e(tY,O$r),e(vC,V$r),e(Se,X$r),e(Se,FC),e(FC,K7e),e(K7e,z$r),e(FC,Q$r),e(FC,aY),e(aY,W$r),e(FC,H$r),e(Se,U$r),e(Se,TC),e(TC,Z7e),e(Z7e,J$r),e(TC,Y$r),e(TC,nY),e(nY,K$r),e(TC,Z$r),e(Se,ekr),e(Se,MC),e(MC,eMe),e(eMe,okr),e(MC,rkr),e(MC,sY),e(sY,tkr),e(MC,akr),e(Se,nkr),e(Se,EC),e(EC,oMe),e(oMe,skr),e(EC,lkr),e(EC,lY),e(lY,ikr),e(EC,dkr),e(Se,ckr),e(Se,CC),e(CC,rMe),e(rMe,fkr),e(CC,mkr),e(CC,iY),e(iY,gkr),e(CC,hkr),e(Se,pkr),e(Se,wC),e(wC,tMe),e(tMe,ukr),e(wC,_kr),e(wC,dY),e(dY,bkr),e(wC,vkr),e(Vr,Fkr),M(AC,Vr,null),b(f,Kqe,_),b(f,Gc,_),e(Gc,yC),e(yC,aMe),M(wx,aMe,null),e(Gc,Tkr),e(Gc,nMe),e(nMe,Mkr),b(f,Zqe,_),b(f,ur,_),M(Ax,ur,null),e(ur,Ekr),e(ur,Oc),e(Oc,Ckr),e(Oc,cY),e(cY,wkr),e(Oc,Akr),e(Oc,fY),e(fY,ykr),e(Oc,Lkr),e(ur,xkr),e(ur,yx),e(yx,$kr),e(yx,sMe),e(sMe,kkr),e(yx,Skr),e(ur,Rkr),e(ur,Xt),M(Lx,Xt,null),e(Xt,Bkr),e(Xt,lMe),e(lMe,Pkr),e(Xt,Ikr),e(Xt,Vc),e(Vc,qkr),e(Vc,iMe),e(iMe,Nkr),e(Vc,jkr),e(Vc,mY),e(mY,Dkr),e(Vc,Gkr),e(Xt,Okr),M(LC,Xt,null),e(ur,Vkr),e(ur,Xr),M(xx,Xr,null),e(Xr,Xkr),e(Xr,dMe),e(dMe,zkr),e(Xr,Qkr),e(Xr,bn),e(bn,Wkr),e(bn,cMe),e(cMe,Hkr),e(bn,Ukr),e(bn,fMe),e(fMe,Jkr),e(bn,Ykr),e(bn,mMe),e(mMe,Kkr),e(bn,Zkr),e(Xr,eSr),e(Xr,xe),e(xe,xC),e(xC,gMe),e(gMe,oSr),e(xC,rSr),e(xC,gY),e(gY,tSr),e(xC,aSr),e(xe,nSr),e(xe,$C),e($C,hMe),e(hMe,sSr),e($C,lSr),e($C,hY),e(hY,iSr),e($C,dSr),e(xe,cSr),e(xe,kC),e(kC,pMe),e(pMe,fSr),e(kC,mSr),e(kC,pY),e(pY,gSr),e(kC,hSr),e(xe,pSr),e(xe,SC),e(SC,uMe),e(uMe,uSr),e(SC,_Sr),e(SC,uY),e(uY,bSr),e(SC,vSr),e(xe,FSr),e(xe,RC),e(RC,_Me),e(_Me,TSr),e(RC,MSr),e(RC,_Y),e(_Y,ESr),e(RC,CSr),e(xe,wSr),e(xe,BC),e(BC,bMe),e(bMe,ASr),e(BC,ySr),e(BC,bY),e(bY,LSr),e(BC,xSr),e(xe,$Sr),e(xe,PC),e(PC,vMe),e(vMe,kSr),e(PC,SSr),e(PC,vY),e(vY,RSr),e(PC,BSr),e(xe,PSr),e(xe,IC),e(IC,FMe),e(FMe,ISr),e(IC,qSr),e(IC,FY),e(FY,NSr),e(IC,jSr),e(xe,DSr),e(xe,qC),e(qC,TMe),e(TMe,GSr),e(qC,OSr),e(qC,TY),e(TY,VSr),e(qC,XSr),e(xe,zSr),e(xe,NC),e(NC,MMe),e(MMe,QSr),e(NC,WSr),e(NC,MY),e(MY,HSr),e(NC,USr),e(Xr,JSr),M(jC,Xr,null),b(f,eNe,_),b(f,Xc,_),e(Xc,DC),e(DC,EMe),M($x,EMe,null),e(Xc,YSr),e(Xc,CMe),e(CMe,KSr),b(f,oNe,_),b(f,_r,_),M(kx,_r,null),e(_r,ZSr),e(_r,zc),e(zc,eRr),e(zc,EY),e(EY,oRr),e(zc,rRr),e(zc,CY),e(CY,tRr),e(zc,aRr),e(_r,nRr),e(_r,Sx),e(Sx,sRr),e(Sx,wMe),e(wMe,lRr),e(Sx,iRr),e(_r,dRr),e(_r,zt),M(Rx,zt,null),e(zt,cRr),e(zt,AMe),e(AMe,fRr),e(zt,mRr),e(zt,Qc),e(Qc,gRr),e(Qc,yMe),e(yMe,hRr),e(Qc,pRr),e(Qc,wY),e(wY,uRr),e(Qc,_Rr),e(zt,bRr),M(GC,zt,null),e(_r,vRr),e(_r,zr),M(Bx,zr,null),e(zr,FRr),e(zr,LMe),e(LMe,TRr),e(zr,MRr),e(zr,vn),e(vn,ERr),e(vn,xMe),e(xMe,CRr),e(vn,wRr),e(vn,$Me),e($Me,ARr),e(vn,yRr),e(vn,kMe),e(kMe,LRr),e(vn,xRr),e(zr,$Rr),e(zr,$e),e($e,OC),e(OC,SMe),e(SMe,kRr),e(OC,SRr),e(OC,AY),e(AY,RRr),e(OC,BRr),e($e,PRr),e($e,VC),e(VC,RMe),e(RMe,IRr),e(VC,qRr),e(VC,yY),e(yY,NRr),e(VC,jRr),e($e,DRr),e($e,XC),e(XC,BMe),e(BMe,GRr),e(XC,ORr),e(XC,LY),e(LY,VRr),e(XC,XRr),e($e,zRr),e($e,zC),e(zC,PMe),e(PMe,QRr),e(zC,WRr),e(zC,xY),e(xY,HRr),e(zC,URr),e($e,JRr),e($e,QC),e(QC,IMe),e(IMe,YRr),e(QC,KRr),e(QC,$Y),e($Y,ZRr),e(QC,eBr),e($e,oBr),e($e,WC),e(WC,qMe),e(qMe,rBr),e(WC,tBr),e(WC,kY),e(kY,aBr),e(WC,nBr),e($e,sBr),e($e,HC),e(HC,NMe),e(NMe,lBr),e(HC,iBr),e(HC,SY),e(SY,dBr),e(HC,cBr),e($e,fBr),e($e,UC),e(UC,jMe),e(jMe,mBr),e(UC,gBr),e(UC,RY),e(RY,hBr),e(UC,pBr),e($e,uBr),e($e,JC),e(JC,DMe),e(DMe,_Br),e(JC,bBr),e(JC,BY),e(BY,vBr),e(JC,FBr),e($e,TBr),e($e,YC),e(YC,GMe),e(GMe,MBr),e(YC,EBr),e(YC,PY),e(PY,CBr),e(YC,wBr),e(zr,ABr),M(KC,zr,null),b(f,rNe,_),b(f,Wc,_),e(Wc,ZC),e(ZC,OMe),M(Px,OMe,null),e(Wc,yBr),e(Wc,VMe),e(VMe,LBr),b(f,tNe,_),b(f,br,_),M(Ix,br,null),e(br,xBr),e(br,Hc),e(Hc,$Br),e(Hc,IY),e(IY,kBr),e(Hc,SBr),e(Hc,qY),e(qY,RBr),e(Hc,BBr),e(br,PBr),e(br,qx),e(qx,IBr),e(qx,XMe),e(XMe,qBr),e(qx,NBr),e(br,jBr),e(br,Qt),M(Nx,Qt,null),e(Qt,DBr),e(Qt,zMe),e(zMe,GBr),e(Qt,OBr),e(Qt,Uc),e(Uc,VBr),e(Uc,QMe),e(QMe,XBr),e(Uc,zBr),e(Uc,NY),e(NY,QBr),e(Uc,WBr),e(Qt,HBr),M(e3,Qt,null),e(br,UBr),e(br,Qr),M(jx,Qr,null),e(Qr,JBr),e(Qr,WMe),e(WMe,YBr),e(Qr,KBr),e(Qr,Fn),e(Fn,ZBr),e(Fn,HMe),e(HMe,ePr),e(Fn,oPr),e(Fn,UMe),e(UMe,rPr),e(Fn,tPr),e(Fn,JMe),e(JMe,aPr),e(Fn,nPr),e(Qr,sPr),e(Qr,De),e(De,o3),e(o3,YMe),e(YMe,lPr),e(o3,iPr),e(o3,jY),e(jY,dPr),e(o3,cPr),e(De,fPr),e(De,r3),e(r3,KMe),e(KMe,mPr),e(r3,gPr),e(r3,DY),e(DY,hPr),e(r3,pPr),e(De,uPr),e(De,t3),e(t3,ZMe),e(ZMe,_Pr),e(t3,bPr),e(t3,GY),e(GY,vPr),e(t3,FPr),e(De,TPr),e(De,a3),e(a3,e4e),e(e4e,MPr),e(a3,EPr),e(a3,OY),e(OY,CPr),e(a3,wPr),e(De,APr),e(De,n3),e(n3,o4e),e(o4e,yPr),e(n3,LPr),e(n3,VY),e(VY,xPr),e(n3,$Pr),e(De,kPr),e(De,s3),e(s3,r4e),e(r4e,SPr),e(s3,RPr),e(s3,XY),e(XY,BPr),e(s3,PPr),e(De,IPr),e(De,l3),e(l3,t4e),e(t4e,qPr),e(l3,NPr),e(l3,zY),e(zY,jPr),e(l3,DPr),e(De,GPr),e(De,i3),e(i3,a4e),e(a4e,OPr),e(i3,VPr),e(i3,QY),e(QY,XPr),e(i3,zPr),e(Qr,QPr),M(d3,Qr,null),b(f,aNe,_),b(f,Jc,_),e(Jc,c3),e(c3,n4e),M(Dx,n4e,null),e(Jc,WPr),e(Jc,s4e),e(s4e,HPr),b(f,nNe,_),b(f,vr,_),M(Gx,vr,null),e(vr,UPr),e(vr,Yc),e(Yc,JPr),e(Yc,WY),e(WY,YPr),e(Yc,KPr),e(Yc,HY),e(HY,ZPr),e(Yc,eIr),e(vr,oIr),e(vr,Ox),e(Ox,rIr),e(Ox,l4e),e(l4e,tIr),e(Ox,aIr),e(vr,nIr),e(vr,Wt),M(Vx,Wt,null),e(Wt,sIr),e(Wt,i4e),e(i4e,lIr),e(Wt,iIr),e(Wt,Kc),e(Kc,dIr),e(Kc,d4e),e(d4e,cIr),e(Kc,fIr),e(Kc,UY),e(UY,mIr),e(Kc,gIr),e(Wt,hIr),M(f3,Wt,null),e(vr,pIr),e(vr,Wr),M(Xx,Wr,null),e(Wr,uIr),e(Wr,c4e),e(c4e,_Ir),e(Wr,bIr),e(Wr,Tn),e(Tn,vIr),e(Tn,f4e),e(f4e,FIr),e(Tn,TIr),e(Tn,m4e),e(m4e,MIr),e(Tn,EIr),e(Tn,g4e),e(g4e,CIr),e(Tn,wIr),e(Wr,AIr),e(Wr,Ge),e(Ge,m3),e(m3,h4e),e(h4e,yIr),e(m3,LIr),e(m3,JY),e(JY,xIr),e(m3,$Ir),e(Ge,kIr),e(Ge,g3),e(g3,p4e),e(p4e,SIr),e(g3,RIr),e(g3,YY),e(YY,BIr),e(g3,PIr),e(Ge,IIr),e(Ge,h3),e(h3,u4e),e(u4e,qIr),e(h3,NIr),e(h3,KY),e(KY,jIr),e(h3,DIr),e(Ge,GIr),e(Ge,p3),e(p3,_4e),e(_4e,OIr),e(p3,VIr),e(p3,ZY),e(ZY,XIr),e(p3,zIr),e(Ge,QIr),e(Ge,u3),e(u3,b4e),e(b4e,WIr),e(u3,HIr),e(u3,eK),e(eK,UIr),e(u3,JIr),e(Ge,YIr),e(Ge,_3),e(_3,v4e),e(v4e,KIr),e(_3,ZIr),e(_3,oK),e(oK,eqr),e(_3,oqr),e(Ge,rqr),e(Ge,b3),e(b3,F4e),e(F4e,tqr),e(b3,aqr),e(b3,rK),e(rK,nqr),e(b3,sqr),e(Ge,lqr),e(Ge,v3),e(v3,T4e),e(T4e,iqr),e(v3,dqr),e(v3,tK),e(tK,cqr),e(v3,fqr),e(Wr,mqr),M(F3,Wr,null),b(f,sNe,_),b(f,Zc,_),e(Zc,T3),e(T3,M4e),M(zx,M4e,null),e(Zc,gqr),e(Zc,E4e),e(E4e,hqr),b(f,lNe,_),b(f,Fr,_),M(Qx,Fr,null),e(Fr,pqr),e(Fr,ef),e(ef,uqr),e(ef,aK),e(aK,_qr),e(ef,bqr),e(ef,nK),e(nK,vqr),e(ef,Fqr),e(Fr,Tqr),e(Fr,Wx),e(Wx,Mqr),e(Wx,C4e),e(C4e,Eqr),e(Wx,Cqr),e(Fr,wqr),e(Fr,Ht),M(Hx,Ht,null),e(Ht,Aqr),e(Ht,w4e),e(w4e,yqr),e(Ht,Lqr),e(Ht,of),e(of,xqr),e(of,A4e),e(A4e,$qr),e(of,kqr),e(of,sK),e(sK,Sqr),e(of,Rqr),e(Ht,Bqr),M(M3,Ht,null),e(Fr,Pqr),e(Fr,Hr),M(Ux,Hr,null),e(Hr,Iqr),e(Hr,y4e),e(y4e,qqr),e(Hr,Nqr),e(Hr,Mn),e(Mn,jqr),e(Mn,L4e),e(L4e,Dqr),e(Mn,Gqr),e(Mn,x4e),e(x4e,Oqr),e(Mn,Vqr),e(Mn,$4e),e($4e,Xqr),e(Mn,zqr),e(Hr,Qqr),e(Hr,k4e),e(k4e,E3),e(E3,S4e),e(S4e,Wqr),e(E3,Hqr),e(E3,lK),e(lK,Uqr),e(E3,Jqr),e(Hr,Yqr),M(C3,Hr,null),b(f,iNe,_),b(f,rf,_),e(rf,w3),e(w3,R4e),M(Jx,R4e,null),e(rf,Kqr),e(rf,B4e),e(B4e,Zqr),b(f,dNe,_),b(f,Tr,_),M(Yx,Tr,null),e(Tr,eNr),e(Tr,tf),e(tf,oNr),e(tf,iK),e(iK,rNr),e(tf,tNr),e(tf,dK),e(dK,aNr),e(tf,nNr),e(Tr,sNr),e(Tr,Kx),e(Kx,lNr),e(Kx,P4e),e(P4e,iNr),e(Kx,dNr),e(Tr,cNr),e(Tr,Ut),M(Zx,Ut,null),e(Ut,fNr),e(Ut,I4e),e(I4e,mNr),e(Ut,gNr),e(Ut,af),e(af,hNr),e(af,q4e),e(q4e,pNr),e(af,uNr),e(af,cK),e(cK,_Nr),e(af,bNr),e(Ut,vNr),M(A3,Ut,null),e(Tr,FNr),e(Tr,Ur),M(e9,Ur,null),e(Ur,TNr),e(Ur,N4e),e(N4e,MNr),e(Ur,ENr),e(Ur,En),e(En,CNr),e(En,j4e),e(j4e,wNr),e(En,ANr),e(En,D4e),e(D4e,yNr),e(En,LNr),e(En,G4e),e(G4e,xNr),e(En,$Nr),e(Ur,kNr),e(Ur,o9),e(o9,y3),e(y3,O4e),e(O4e,SNr),e(y3,RNr),e(y3,fK),e(fK,BNr),e(y3,PNr),e(o9,INr),e(o9,L3),e(L3,V4e),e(V4e,qNr),e(L3,NNr),e(L3,mK),e(mK,jNr),e(L3,DNr),e(Ur,GNr),M(x3,Ur,null),b(f,cNe,_),b(f,nf,_),e(nf,$3),e($3,X4e),M(r9,X4e,null),e(nf,ONr),e(nf,z4e),e(z4e,VNr),b(f,fNe,_),b(f,Mr,_),M(t9,Mr,null),e(Mr,XNr),e(Mr,sf),e(sf,zNr),e(sf,gK),e(gK,QNr),e(sf,WNr),e(sf,hK),e(hK,HNr),e(sf,UNr),e(Mr,JNr),e(Mr,a9),e(a9,YNr),e(a9,Q4e),e(Q4e,KNr),e(a9,ZNr),e(Mr,ejr),e(Mr,Jt),M(n9,Jt,null),e(Jt,ojr),e(Jt,W4e),e(W4e,rjr),e(Jt,tjr),e(Jt,lf),e(lf,ajr),e(lf,H4e),e(H4e,njr),e(lf,sjr),e(lf,pK),e(pK,ljr),e(lf,ijr),e(Jt,djr),M(k3,Jt,null),e(Mr,cjr),e(Mr,Jr),M(s9,Jr,null),e(Jr,fjr),e(Jr,U4e),e(U4e,mjr),e(Jr,gjr),e(Jr,Cn),e(Cn,hjr),e(Cn,J4e),e(J4e,pjr),e(Cn,ujr),e(Cn,Y4e),e(Y4e,_jr),e(Cn,bjr),e(Cn,K4e),e(K4e,vjr),e(Cn,Fjr),e(Jr,Tjr),e(Jr,Z4e),e(Z4e,S3),e(S3,eEe),e(eEe,Mjr),e(S3,Ejr),e(S3,uK),e(uK,Cjr),e(S3,wjr),e(Jr,Ajr),M(R3,Jr,null),mNe=!0},p(f,[_]){const l9={};_&2&&(l9.$$scope={dirty:_,ctx:f}),_f.$set(l9);const oEe={};_&2&&(oEe.$$scope={dirty:_,ctx:f}),_g.$set(oEe);const rEe={};_&2&&(rEe.$$scope={dirty:_,ctx:f}),Yg.$set(rEe);const tEe={};_&2&&(tEe.$$scope={dirty:_,ctx:f}),wh.$set(tEe);const i9={};_&2&&(i9.$$scope={dirty:_,ctx:f}),Ah.$set(i9);const aEe={};_&2&&(aEe.$$scope={dirty:_,ctx:f}),Xh.$set(aEe);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),zh.$set(wn);const nEe={};_&2&&(nEe.$$scope={dirty:_,ctx:f}),Hh.$set(nEe);const sEe={};_&2&&(sEe.$$scope={dirty:_,ctx:f}),ju.$set(sEe);const lEe={};_&2&&(lEe.$$scope={dirty:_,ctx:f}),Gu.$set(lEe);const d9={};_&2&&(d9.$$scope={dirty:_,ctx:f}),$_.$set(d9);const iEe={};_&2&&(iEe.$$scope={dirty:_,ctx:f}),S_.$set(iEe);const c9={};_&2&&(c9.$$scope={dirty:_,ctx:f}),_2.$set(c9);const dEe={};_&2&&(dEe.$$scope={dirty:_,ctx:f}),v2.$set(dEe);const f9={};_&2&&(f9.$$scope={dirty:_,ctx:f}),r1.$set(f9);const cEe={};_&2&&(cEe.$$scope={dirty:_,ctx:f}),a1.$set(cEe);const fEe={};_&2&&(fEe.$$scope={dirty:_,ctx:f}),E1.$set(fEe);const mEe={};_&2&&(mEe.$$scope={dirty:_,ctx:f}),w1.$set(mEe);const df={};_&2&&(df.$$scope={dirty:_,ctx:f}),Fb.$set(df);const gEe={};_&2&&(gEe.$$scope={dirty:_,ctx:f}),Mb.$set(gEe);const hEe={};_&2&&(hEe.$$scope={dirty:_,ctx:f}),Zb.$set(hEe);const pEe={};_&2&&(pEe.$$scope={dirty:_,ctx:f}),ov.$set(pEe);const m9={};_&2&&(m9.$$scope={dirty:_,ctx:f}),iv.$set(m9);const uEe={};_&2&&(uEe.$$scope={dirty:_,ctx:f}),cv.$set(uEe);const _Ee={};_&2&&(_Ee.$$scope={dirty:_,ctx:f}),zv.$set(_Ee);const bEe={};_&2&&(bEe.$$scope={dirty:_,ctx:f}),Wv.$set(bEe);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),BF.$set(Kr);const g9={};_&2&&(g9.$$scope={dirty:_,ctx:f}),IF.$set(g9);const vEe={};_&2&&(vEe.$$scope={dirty:_,ctx:f}),jF.$set(vEe);const h9={};_&2&&(h9.$$scope={dirty:_,ctx:f}),GF.$set(h9);const FEe={};_&2&&(FEe.$$scope={dirty:_,ctx:f}),e0.$set(FEe);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),r0.$set(Zr);const TEe={};_&2&&(TEe.$$scope={dirty:_,ctx:f}),n0.$set(TEe);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),l0.$set(cf);const MEe={};_&2&&(MEe.$$scope={dirty:_,ctx:f}),_0.$set(MEe);const EEe={};_&2&&(EEe.$$scope={dirty:_,ctx:f}),v0.$set(EEe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),w0.$set(y);const B3={};_&2&&(B3.$$scope={dirty:_,ctx:f}),y0.$set(B3);const CEe={};_&2&&(CEe.$$scope={dirty:_,ctx:f}),q0.$set(CEe);const wEe={};_&2&&(wEe.$$scope={dirty:_,ctx:f}),j0.$set(wEe);const P3={};_&2&&(P3.$$scope={dirty:_,ctx:f}),V0.$set(P3);const AEe={};_&2&&(AEe.$$scope={dirty:_,ctx:f}),z0.$set(AEe);const yEe={};_&2&&(yEe.$$scope={dirty:_,ctx:f}),Y0.$set(yEe);const I3={};_&2&&(I3.$$scope={dirty:_,ctx:f}),Z0.$set(I3);const LEe={};_&2&&(LEe.$$scope={dirty:_,ctx:f}),aT.$set(LEe);const xEe={};_&2&&(xEe.$$scope={dirty:_,ctx:f}),sT.$set(xEe);const q3={};_&2&&(q3.$$scope={dirty:_,ctx:f}),cT.$set(q3);const $Ee={};_&2&&($Ee.$$scope={dirty:_,ctx:f}),mT.$set($Ee);const kEe={};_&2&&(kEe.$$scope={dirty:_,ctx:f}),pT.$set(kEe);const N3={};_&2&&(N3.$$scope={dirty:_,ctx:f}),_T.$set(N3);const SEe={};_&2&&(SEe.$$scope={dirty:_,ctx:f}),ET.$set(SEe);const REe={};_&2&&(REe.$$scope={dirty:_,ctx:f}),wT.$set(REe);const j3={};_&2&&(j3.$$scope={dirty:_,ctx:f}),LT.$set(j3);const BEe={};_&2&&(BEe.$$scope={dirty:_,ctx:f}),$T.$set(BEe);const PEe={};_&2&&(PEe.$$scope={dirty:_,ctx:f}),T7.$set(PEe);const D3={};_&2&&(D3.$$scope={dirty:_,ctx:f}),E7.$set(D3);const IEe={};_&2&&(IEe.$$scope={dirty:_,ctx:f}),W7.$set(IEe);const qEe={};_&2&&(qEe.$$scope={dirty:_,ctx:f}),U7.$set(qEe);const G3={};_&2&&(G3.$$scope={dirty:_,ctx:f}),iM.$set(G3);const NEe={};_&2&&(NEe.$$scope={dirty:_,ctx:f}),cM.$set(NEe);const jEe={};_&2&&(jEe.$$scope={dirty:_,ctx:f}),hM.$set(jEe);const O3={};_&2&&(O3.$$scope={dirty:_,ctx:f}),uM.$set(O3);const DEe={};_&2&&(DEe.$$scope={dirty:_,ctx:f}),qM.$set(DEe);const GEe={};_&2&&(GEe.$$scope={dirty:_,ctx:f}),jM.$set(GEe);const V3={};_&2&&(V3.$$scope={dirty:_,ctx:f}),JM.$set(V3);const OEe={};_&2&&(OEe.$$scope={dirty:_,ctx:f}),KM.$set(OEe);const VEe={};_&2&&(VEe.$$scope={dirty:_,ctx:f}),w4.$set(VEe);const X3={};_&2&&(X3.$$scope={dirty:_,ctx:f}),y4.$set(X3);const XEe={};_&2&&(XEe.$$scope={dirty:_,ctx:f}),z4.$set(XEe);const zEe={};_&2&&(zEe.$$scope={dirty:_,ctx:f}),W4.$set(zEe);const z3={};_&2&&(z3.$$scope={dirty:_,ctx:f}),J4.$set(z3);const QEe={};_&2&&(QEe.$$scope={dirty:_,ctx:f}),K4.$set(QEe);const WEe={};_&2&&(WEe.$$scope={dirty:_,ctx:f}),eE.$set(WEe);const Q3={};_&2&&(Q3.$$scope={dirty:_,ctx:f}),rE.$set(Q3);const HEe={};_&2&&(HEe.$$scope={dirty:_,ctx:f}),EE.$set(HEe);const UEe={};_&2&&(UEe.$$scope={dirty:_,ctx:f}),wE.$set(UEe);const W3={};_&2&&(W3.$$scope={dirty:_,ctx:f}),QE.$set(W3);const JEe={};_&2&&(JEe.$$scope={dirty:_,ctx:f}),HE.$set(JEe);const YEe={};_&2&&(YEe.$$scope={dirty:_,ctx:f}),JE.$set(YEe);const H3={};_&2&&(H3.$$scope={dirty:_,ctx:f}),KE.$set(H3);const KEe={};_&2&&(KEe.$$scope={dirty:_,ctx:f}),e5.$set(KEe);const ZEe={};_&2&&(ZEe.$$scope={dirty:_,ctx:f}),r5.$set(ZEe);const U3={};_&2&&(U3.$$scope={dirty:_,ctx:f}),L5.$set(U3);const e5e={};_&2&&(e5e.$$scope={dirty:_,ctx:f}),$5.$set(e5e);const o5e={};_&2&&(o5e.$$scope={dirty:_,ctx:f}),D5.$set(o5e);const J3={};_&2&&(J3.$$scope={dirty:_,ctx:f}),O5.$set(J3);const r5e={};_&2&&(r5e.$$scope={dirty:_,ctx:f}),oC.$set(r5e);const t5e={};_&2&&(t5e.$$scope={dirty:_,ctx:f}),tC.$set(t5e);const Y3={};_&2&&(Y3.$$scope={dirty:_,ctx:f}),hC.$set(Y3);const a5e={};_&2&&(a5e.$$scope={dirty:_,ctx:f}),uC.$set(a5e);const n5e={};_&2&&(n5e.$$scope={dirty:_,ctx:f}),AC.$set(n5e);const K3={};_&2&&(K3.$$scope={dirty:_,ctx:f}),LC.$set(K3);const s5e={};_&2&&(s5e.$$scope={dirty:_,ctx:f}),jC.$set(s5e);const l5e={};_&2&&(l5e.$$scope={dirty:_,ctx:f}),GC.$set(l5e);const Z3={};_&2&&(Z3.$$scope={dirty:_,ctx:f}),KC.$set(Z3);const i5e={};_&2&&(i5e.$$scope={dirty:_,ctx:f}),e3.$set(i5e);const d5e={};_&2&&(d5e.$$scope={dirty:_,ctx:f}),d3.$set(d5e);const ew={};_&2&&(ew.$$scope={dirty:_,ctx:f}),f3.$set(ew);const c5e={};_&2&&(c5e.$$scope={dirty:_,ctx:f}),F3.$set(c5e);const f5e={};_&2&&(f5e.$$scope={dirty:_,ctx:f}),M3.$set(f5e);const ow={};_&2&&(ow.$$scope={dirty:_,ctx:f}),C3.$set(ow);const m5e={};_&2&&(m5e.$$scope={dirty:_,ctx:f}),A3.$set(m5e);const g5e={};_&2&&(g5e.$$scope={dirty:_,ctx:f}),x3.$set(g5e);const rw={};_&2&&(rw.$$scope={dirty:_,ctx:f}),k3.$set(rw);const h5e={};_&2&&(h5e.$$scope={dirty:_,ctx:f}),R3.$set(h5e)},i(f){mNe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(r6.$$.fragment,f),E(t6.$$.fragment,f),E(_f.$$.fragment,f),E(a6.$$.fragment,f),E(n6.$$.fragment,f),E(i6.$$.fragment,f),E(_g.$$.fragment,f),E(d6.$$.fragment,f),E(c6.$$.fragment,f),E(f6.$$.fragment,f),E(h6.$$.fragment,f),E(Yg.$$.fragment,f),E(p6.$$.fragment,f),E(u6.$$.fragment,f),E(_6.$$.fragment,f),E(F6.$$.fragment,f),E(wh.$$.fragment,f),E(Ah.$$.fragment,f),E(T6.$$.fragment,f),E(M6.$$.fragment,f),E(E6.$$.fragment,f),E(A6.$$.fragment,f),E(Xh.$$.fragment,f),E(zh.$$.fragment,f),E(y6.$$.fragment,f),E(L6.$$.fragment,f),E(x6.$$.fragment,f),E(k6.$$.fragment,f),E(Hh.$$.fragment,f),E(S6.$$.fragment,f),E(ju.$$.fragment,f),E(R6.$$.fragment,f),E(B6.$$.fragment,f),E(I6.$$.fragment,f),E(Gu.$$.fragment,f),E(q6.$$.fragment,f),E($_.$$.fragment,f),E(N6.$$.fragment,f),E(j6.$$.fragment,f),E(G6.$$.fragment,f),E(S_.$$.fragment,f),E(O6.$$.fragment,f),E(_2.$$.fragment,f),E(V6.$$.fragment,f),E(X6.$$.fragment,f),E(Q6.$$.fragment,f),E(v2.$$.fragment,f),E(W6.$$.fragment,f),E(r1.$$.fragment,f),E(H6.$$.fragment,f),E(U6.$$.fragment,f),E(Y6.$$.fragment,f),E(a1.$$.fragment,f),E(K6.$$.fragment,f),E(E1.$$.fragment,f),E(Z6.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(w1.$$.fragment,f),E(ty.$$.fragment,f),E(Fb.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(Mb.$$.fragment,f),E(iy.$$.fragment,f),E(Zb.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(ov.$$.fragment,f),E(gy.$$.fragment,f),E(iv.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(cv.$$.fragment,f),E(by.$$.fragment,f),E(zv.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(Wv.$$.fragment,f),E(Ey.$$.fragment,f),E(BF.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(IF.$$.fragment,f),E(Ly.$$.fragment,f),E(jF.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(GF.$$.fragment,f),E(Ry.$$.fragment,f),E(e0.$$.fragment,f),E(By.$$.fragment,f),E(Py.$$.fragment,f),E(qy.$$.fragment,f),E(r0.$$.fragment,f),E(Ny.$$.fragment,f),E(n0.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(l0.$$.fragment,f),E(Vy.$$.fragment,f),E(_0.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(v0.$$.fragment,f),E(Hy.$$.fragment,f),E(w0.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(y0.$$.fragment,f),E(Zy.$$.fragment,f),E(q0.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(j0.$$.fragment,f),E(aL.$$.fragment,f),E(V0.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(z0.$$.fragment,f),E(cL.$$.fragment,f),E(Y0.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(Z0.$$.fragment,f),E(pL.$$.fragment,f),E(aT.$$.fragment,f),E(uL.$$.fragment,f),E(_L.$$.fragment,f),E(vL.$$.fragment,f),E(sT.$$.fragment,f),E(FL.$$.fragment,f),E(cT.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(mT.$$.fragment,f),E(AL.$$.fragment,f),E(pT.$$.fragment,f),E(yL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(_T.$$.fragment,f),E(kL.$$.fragment,f),E(ET.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(wT.$$.fragment,f),E(IL.$$.fragment,f),E(LT.$$.fragment,f),E(qL.$$.fragment,f),E(NL.$$.fragment,f),E(DL.$$.fragment,f),E($T.$$.fragment,f),E(GL.$$.fragment,f),E(T7.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(E7.$$.fragment,f),E(QL.$$.fragment,f),E(W7.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(U7.$$.fragment,f),E(YL.$$.fragment,f),E(iM.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(cM.$$.fragment,f),E(r8.$$.fragment,f),E(hM.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(uM.$$.fragment,f),E(l8.$$.fragment,f),E(qM.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(jM.$$.fragment,f),E(m8.$$.fragment,f),E(JM.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(u8.$$.fragment,f),E(KM.$$.fragment,f),E(_8.$$.fragment,f),E(w4.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(y4.$$.fragment,f),E(M8.$$.fragment,f),E(z4.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(W4.$$.fragment,f),E(y8.$$.fragment,f),E(J4.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E(K4.$$.fragment,f),E(R8.$$.fragment,f),E(eE.$$.fragment,f),E(B8.$$.fragment,f),E(P8.$$.fragment,f),E(q8.$$.fragment,f),E(rE.$$.fragment,f),E(N8.$$.fragment,f),E(EE.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(wE.$$.fragment,f),E(V8.$$.fragment,f),E(QE.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(W8.$$.fragment,f),E(HE.$$.fragment,f),E(H8.$$.fragment,f),E(JE.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(KE.$$.fragment,f),E(Z8.$$.fragment,f),E(e5.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(r5.$$.fragment,f),E(ax.$$.fragment,f),E(L5.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E($5.$$.fragment,f),E(dx.$$.fragment,f),E(D5.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(O5.$$.fragment,f),E(hx.$$.fragment,f),E(oC.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(tC.$$.fragment,f),E(vx.$$.fragment,f),E(hC.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(uC.$$.fragment,f),E(Cx.$$.fragment,f),E(AC.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(LC.$$.fragment,f),E(xx.$$.fragment,f),E(jC.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(GC.$$.fragment,f),E(Bx.$$.fragment,f),E(KC.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(e3.$$.fragment,f),E(jx.$$.fragment,f),E(d3.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(f3.$$.fragment,f),E(Xx.$$.fragment,f),E(F3.$$.fragment,f),E(zx.$$.fragment,f),E(Qx.$$.fragment,f),E(Hx.$$.fragment,f),E(M3.$$.fragment,f),E(Ux.$$.fragment,f),E(C3.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(A3.$$.fragment,f),E(e9.$$.fragment,f),E(x3.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(k3.$$.fragment,f),E(s9.$$.fragment,f),E(R3.$$.fragment,f),mNe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(r6.$$.fragment,f),C(t6.$$.fragment,f),C(_f.$$.fragment,f),C(a6.$$.fragment,f),C(n6.$$.fragment,f),C(i6.$$.fragment,f),C(_g.$$.fragment,f),C(d6.$$.fragment,f),C(c6.$$.fragment,f),C(f6.$$.fragment,f),C(h6.$$.fragment,f),C(Yg.$$.fragment,f),C(p6.$$.fragment,f),C(u6.$$.fragment,f),C(_6.$$.fragment,f),C(F6.$$.fragment,f),C(wh.$$.fragment,f),C(Ah.$$.fragment,f),C(T6.$$.fragment,f),C(M6.$$.fragment,f),C(E6.$$.fragment,f),C(A6.$$.fragment,f),C(Xh.$$.fragment,f),C(zh.$$.fragment,f),C(y6.$$.fragment,f),C(L6.$$.fragment,f),C(x6.$$.fragment,f),C(k6.$$.fragment,f),C(Hh.$$.fragment,f),C(S6.$$.fragment,f),C(ju.$$.fragment,f),C(R6.$$.fragment,f),C(B6.$$.fragment,f),C(I6.$$.fragment,f),C(Gu.$$.fragment,f),C(q6.$$.fragment,f),C($_.$$.fragment,f),C(N6.$$.fragment,f),C(j6.$$.fragment,f),C(G6.$$.fragment,f),C(S_.$$.fragment,f),C(O6.$$.fragment,f),C(_2.$$.fragment,f),C(V6.$$.fragment,f),C(X6.$$.fragment,f),C(Q6.$$.fragment,f),C(v2.$$.fragment,f),C(W6.$$.fragment,f),C(r1.$$.fragment,f),C(H6.$$.fragment,f),C(U6.$$.fragment,f),C(Y6.$$.fragment,f),C(a1.$$.fragment,f),C(K6.$$.fragment,f),C(E1.$$.fragment,f),C(Z6.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(w1.$$.fragment,f),C(ty.$$.fragment,f),C(Fb.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(Mb.$$.fragment,f),C(iy.$$.fragment,f),C(Zb.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(ov.$$.fragment,f),C(gy.$$.fragment,f),C(iv.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(cv.$$.fragment,f),C(by.$$.fragment,f),C(zv.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(Wv.$$.fragment,f),C(Ey.$$.fragment,f),C(BF.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(IF.$$.fragment,f),C(Ly.$$.fragment,f),C(jF.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(GF.$$.fragment,f),C(Ry.$$.fragment,f),C(e0.$$.fragment,f),C(By.$$.fragment,f),C(Py.$$.fragment,f),C(qy.$$.fragment,f),C(r0.$$.fragment,f),C(Ny.$$.fragment,f),C(n0.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(l0.$$.fragment,f),C(Vy.$$.fragment,f),C(_0.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(v0.$$.fragment,f),C(Hy.$$.fragment,f),C(w0.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(y0.$$.fragment,f),C(Zy.$$.fragment,f),C(q0.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(j0.$$.fragment,f),C(aL.$$.fragment,f),C(V0.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(z0.$$.fragment,f),C(cL.$$.fragment,f),C(Y0.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(Z0.$$.fragment,f),C(pL.$$.fragment,f),C(aT.$$.fragment,f),C(uL.$$.fragment,f),C(_L.$$.fragment,f),C(vL.$$.fragment,f),C(sT.$$.fragment,f),C(FL.$$.fragment,f),C(cT.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(mT.$$.fragment,f),C(AL.$$.fragment,f),C(pT.$$.fragment,f),C(yL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(_T.$$.fragment,f),C(kL.$$.fragment,f),C(ET.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(wT.$$.fragment,f),C(IL.$$.fragment,f),C(LT.$$.fragment,f),C(qL.$$.fragment,f),C(NL.$$.fragment,f),C(DL.$$.fragment,f),C($T.$$.fragment,f),C(GL.$$.fragment,f),C(T7.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(E7.$$.fragment,f),C(QL.$$.fragment,f),C(W7.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(U7.$$.fragment,f),C(YL.$$.fragment,f),C(iM.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(cM.$$.fragment,f),C(r8.$$.fragment,f),C(hM.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(uM.$$.fragment,f),C(l8.$$.fragment,f),C(qM.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(jM.$$.fragment,f),C(m8.$$.fragment,f),C(JM.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(u8.$$.fragment,f),C(KM.$$.fragment,f),C(_8.$$.fragment,f),C(w4.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(y4.$$.fragment,f),C(M8.$$.fragment,f),C(z4.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(W4.$$.fragment,f),C(y8.$$.fragment,f),C(J4.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C(K4.$$.fragment,f),C(R8.$$.fragment,f),C(eE.$$.fragment,f),C(B8.$$.fragment,f),C(P8.$$.fragment,f),C(q8.$$.fragment,f),C(rE.$$.fragment,f),C(N8.$$.fragment,f),C(EE.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(wE.$$.fragment,f),C(V8.$$.fragment,f),C(QE.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(W8.$$.fragment,f),C(HE.$$.fragment,f),C(H8.$$.fragment,f),C(JE.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(KE.$$.fragment,f),C(Z8.$$.fragment,f),C(e5.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(r5.$$.fragment,f),C(ax.$$.fragment,f),C(L5.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C($5.$$.fragment,f),C(dx.$$.fragment,f),C(D5.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(O5.$$.fragment,f),C(hx.$$.fragment,f),C(oC.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(tC.$$.fragment,f),C(vx.$$.fragment,f),C(hC.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(uC.$$.fragment,f),C(Cx.$$.fragment,f),C(AC.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(LC.$$.fragment,f),C(xx.$$.fragment,f),C(jC.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(GC.$$.fragment,f),C(Bx.$$.fragment,f),C(KC.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(e3.$$.fragment,f),C(jx.$$.fragment,f),C(d3.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(f3.$$.fragment,f),C(Xx.$$.fragment,f),C(F3.$$.fragment,f),C(zx.$$.fragment,f),C(Qx.$$.fragment,f),C(Hx.$$.fragment,f),C(M3.$$.fragment,f),C(Ux.$$.fragment,f),C(C3.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(A3.$$.fragment,f),C(e9.$$.fragment,f),C(x3.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(k3.$$.fragment,f),C(s9.$$.fragment,f),C(R3.$$.fragment,f),mNe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(mf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(hf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(dIe),f&&t(hi),w(r6),f&&t(cIe),f&&t($n),f&&t(fIe),w(t6,f),f&&t(mIe),f&&t(C$),f&&t(gIe),w(_f,f),f&&t(hIe),f&&t(pi),w(a6),f&&t(pIe),f&&t(Co),w(n6),w(i6),w(_g),w(d6),f&&t(uIe),f&&t(_i),w(c6),f&&t(_Ie),f&&t(wo),w(f6),w(h6),w(Yg),w(p6),f&&t(bIe),f&&t(bi),w(u6),f&&t(vIe),f&&t(Ao),w(_6),w(F6),w(wh),w(Ah),w(T6),f&&t(FIe),f&&t(vi),w(M6),f&&t(TIe),f&&t(yo),w(E6),w(A6),w(Xh),w(zh),w(y6),f&&t(MIe),f&&t(Ti),w(L6),f&&t(EIe),f&&t(Lo),w(x6),w(k6),w(Hh),w(S6),w(ju),f&&t(CIe),f&&t(Ci),w(R6),f&&t(wIe),f&&t(xo),w(B6),w(I6),w(Gu),w(q6),w($_),f&&t(AIe),f&&t(yi),w(N6),f&&t(yIe),f&&t($o),w(j6),w(G6),w(S_),w(O6),w(_2),f&&t(LIe),f&&t($i),w(V6),f&&t(xIe),f&&t(ko),w(X6),w(Q6),w(v2),w(W6),w(r1),f&&t($Ie),f&&t(Ri),w(H6),f&&t(kIe),f&&t(So),w(U6),w(Y6),w(a1),w(K6),w(E1),f&&t(SIe),f&&t(Ii),w(Z6),f&&t(RIe),f&&t(Ro),w(ey),w(ry),w(w1),w(ty),w(Fb),f&&t(BIe),f&&t(ji),w(ay),f&&t(PIe),f&&t(Bo),w(ny),w(ly),w(Mb),w(iy),w(Zb),f&&t(IIe),f&&t(Oi),w(dy),f&&t(qIe),f&&t(Po),w(cy),w(my),w(ov),w(gy),w(iv),f&&t(NIe),f&&t(zi),w(hy),f&&t(jIe),f&&t(Io),w(py),w(_y),w(cv),w(by),w(zv),f&&t(DIe),f&&t(Hi),w(vy),f&&t(GIe),f&&t(qo),w(Fy),w(My),w(Wv),w(Ey),w(BF),f&&t(OIe),f&&t(Yi),w(Cy),f&&t(VIe),f&&t(No),w(wy),w(yy),w(IF),w(Ly),w(jF),f&&t(XIe),f&&t(ed),w(xy),f&&t(zIe),f&&t(jo),w($y),w(Sy),w(GF),w(Ry),w(e0),f&&t(QIe),f&&t(td),w(By),f&&t(WIe),f&&t(Do),w(Py),w(qy),w(r0),w(Ny),w(n0),f&&t(HIe),f&&t(sd),w(jy),f&&t(UIe),f&&t(Go),w(Dy),w(Oy),w(l0),w(Vy),w(_0),f&&t(JIe),f&&t(dd),w(Xy),f&&t(YIe),f&&t(Oo),w(zy),w(Wy),w(v0),w(Hy),w(w0),f&&t(KIe),f&&t(md),w(Uy),f&&t(ZIe),f&&t(Vo),w(Jy),w(Ky),w(y0),w(Zy),w(q0),f&&t(eqe),f&&t(pd),w(eL),f&&t(oqe),f&&t(Xo),w(oL),w(tL),w(j0),w(aL),w(V0),f&&t(rqe),f&&t(bd),w(sL),f&&t(tqe),f&&t(zo),w(lL),w(dL),w(z0),w(cL),w(Y0),f&&t(aqe),f&&t(Td),w(fL),f&&t(nqe),f&&t(Qo),w(mL),w(hL),w(Z0),w(pL),w(aT),f&&t(sqe),f&&t(wd),w(uL),f&&t(lqe),f&&t(Wo),w(_L),w(vL),w(sT),w(FL),w(cT),f&&t(iqe),f&&t(Ld),w(ML),f&&t(dqe),f&&t(Ho),w(EL),w(wL),w(mT),w(AL),w(pT),f&&t(cqe),f&&t(kd),w(yL),f&&t(fqe),f&&t(Uo),w(LL),w($L),w(_T),w(kL),w(ET),f&&t(mqe),f&&t(Bd),w(SL),f&&t(gqe),f&&t(Jo),w(RL),w(PL),w(wT),w(IL),w(LT),f&&t(hqe),f&&t(qd),w(qL),f&&t(pqe),f&&t(Yo),w(NL),w(DL),w($T),w(GL),w(T7),f&&t(uqe),f&&t(Dd),w(OL),f&&t(_qe),f&&t(Ko),w(VL),w(zL),w(E7),w(QL),w(W7),f&&t(bqe),f&&t(Vd),w(WL),f&&t(vqe),f&&t(Zo),w(HL),w(JL),w(U7),w(YL),w(iM),f&&t(Fqe),f&&t(Qd),w(KL),f&&t(Tqe),f&&t(er),w(ZL),w(o8),w(cM),w(r8),w(hM),f&&t(Mqe),f&&t(Jd),w(t8),f&&t(Eqe),f&&t(or),w(a8),w(s8),w(uM),w(l8),w(qM),f&&t(Cqe),f&&t(Zd),w(i8),f&&t(wqe),f&&t(rr),w(d8),w(f8),w(jM),w(m8),w(JM),f&&t(Aqe),f&&t(rc),w(g8),f&&t(yqe),f&&t(tr),w(h8),w(u8),w(KM),w(_8),w(w4),f&&t(Lqe),f&&t(nc),w(b8),f&&t(xqe),f&&t(ar),w(v8),w(T8),w(y4),w(M8),w(z4),f&&t($qe),f&&t(ic),w(E8),f&&t(kqe),f&&t(nr),w(C8),w(A8),w(W4),w(y8),w(J4),f&&t(Sqe),f&&t(fc),w(x8),f&&t(Rqe),f&&t(sr),w($8),w(S8),w(K4),w(R8),w(eE),f&&t(Bqe),f&&t(hc),w(B8),f&&t(Pqe),f&&t(lr),w(P8),w(q8),w(rE),w(N8),w(EE),f&&t(Iqe),f&&t(_c),w(j8),f&&t(qqe),f&&t(ir),w(D8),w(O8),w(wE),w(V8),w(QE),f&&t(Nqe),f&&t(Fc),w(X8),f&&t(jqe),f&&t(dr),w(z8),w(W8),w(HE),w(H8),w(JE),f&&t(Dqe),f&&t(Ec),w(U8),f&&t(Gqe),f&&t(cr),w(J8),w(K8),w(KE),w(Z8),w(e5),f&&t(Oqe),f&&t(Ac),w(ex),f&&t(Vqe),f&&t(fr),w(ox),w(tx),w(r5),w(ax),w(L5),f&&t(Xqe),f&&t(xc),w(nx),f&&t(zqe),f&&t(mr),w(sx),w(ix),w($5),w(dx),w(D5),f&&t(Qqe),f&&t(Sc),w(cx),f&&t(Wqe),f&&t(gr),w(fx),w(gx),w(O5),w(hx),w(oC),f&&t(Hqe),f&&t(Pc),w(px),f&&t(Uqe),f&&t(hr),w(ux),w(bx),w(tC),w(vx),w(hC),f&&t(Jqe),f&&t(Nc),w(Fx),f&&t(Yqe),f&&t(pr),w(Tx),w(Ex),w(uC),w(Cx),w(AC),f&&t(Kqe),f&&t(Gc),w(wx),f&&t(Zqe),f&&t(ur),w(Ax),w(Lx),w(LC),w(xx),w(jC),f&&t(eNe),f&&t(Xc),w($x),f&&t(oNe),f&&t(_r),w(kx),w(Rx),w(GC),w(Bx),w(KC),f&&t(rNe),f&&t(Wc),w(Px),f&&t(tNe),f&&t(br),w(Ix),w(Nx),w(e3),w(jx),w(d3),f&&t(aNe),f&&t(Jc),w(Dx),f&&t(nNe),f&&t(vr),w(Gx),w(Vx),w(f3),w(Xx),w(F3),f&&t(sNe),f&&t(Zc),w(zx),f&&t(lNe),f&&t(Fr),w(Qx),w(Hx),w(M3),w(Ux),w(C3),f&&t(iNe),f&&t(rf),w(Jx),f&&t(dNe),f&&t(Tr),w(Yx),w(Zx),w(A3),w(e9),w(x3),f&&t(cNe),f&&t(nf),w(r9),f&&t(fNe),f&&t(Mr),w(t9),w(n9),w(k3),w(s9),w(R3)}}}const f8t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function m8t(L){return myt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class v8t extends iyt{constructor(g){super();dyt(this,g,m8t,c8t,cyt,{})}}export{v8t as default,f8t as metadata};
