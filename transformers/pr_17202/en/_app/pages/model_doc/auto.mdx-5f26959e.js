import{S as ZLt,i as e8t,s as o8t,e as a,k as l,w as F,t as o,M as r8t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as t8t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as eGr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function a8t(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,i6,pf,je,We,gi,yn,d6,Ln,xn,c6,hi,$n,f6,pi,_f,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ci=a("code"),hf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),fi=a("code"),mi=o('"new-model"'),i6=o(")."),pf=l(),je=a("p"),We=o("Likewise, if your "),gi=a("code"),yn=o("NewModel"),d6=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),c6=o(`, make sure its
`),hi=a("code"),$n=o("config_class"),f6=o(` attribute is set to the same class you use when registering the model (here
`),pi=a("code"),_f=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var x$=s(p);m=r(x$,"NewModelConfig"),x$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),ci=n(Ae,"CODE",{});var $$=s(ci);hf=r($$,"model_type"),$$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),fi=n(Ae,"CODE",{});var k$=s(fi);mi=r(k$,'"new-model"'),k$.forEach(t),i6=r(Ae,")."),Ae.forEach(t),pf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),gi=n(Eo,"CODE",{});var wa=s(gi);yn=r(wa,"NewModel"),wa.forEach(t),d6=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var S$=s(Ln);xn=r(S$,"PreTrainedModel"),S$.forEach(t),c6=r(Eo,`, make sure its
`),hi=n(Eo,"CODE",{});var uf=s(hi);$n=r(uf,"config_class"),uf.forEach(t),f6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),pi=n(Eo,"CODE",{});var R$=s(pi);_f=r(R$,"NewModelConfig"),R$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,ci),e(ci,hf),e(g,rt),e(g,fi),e(fi,mi),e(g,i6),b(Qe,pf,Ae),b(Qe,je,Ae),e(je,We),e(je,gi),e(gi,yn),e(je,d6),e(je,Ln),e(Ln,xn),e(je,c6),e(je,hi),e(hi,$n),e(je,f6),e(je,pi),e(pi,_f),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(pf),Qe&&t(je)}}}function n8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l8t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function i8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d8t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function c8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z8t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z9t(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,_;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oxt(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,i6,pf,je,We,gi,yn,d6,Ln,xn,c6,hi,$n,f6,pi,_f,Ca,Qe,Ae,x$,_i,$$,k$,Eo,wa,S$,uf,R$,rGe,zIe,ui,bf,Lee,m6,tGe,xee,aGe,WIe,kn,nGe,$ee,sGe,lGe,kee,iGe,dGe,QIe,g6,HIe,B$,cGe,UIe,vf,JIe,bi,Ff,See,h6,fGe,Ree,mGe,YIe,Co,p6,gGe,_6,hGe,P$,pGe,_Ge,uGe,u6,bGe,Bee,vGe,FGe,TGe,Er,b6,MGe,Pee,EGe,CGe,vi,wGe,Iee,AGe,yGe,qee,LGe,xGe,$Ge,A,Tf,Nee,kGe,SGe,I$,RGe,BGe,PGe,Mf,jee,IGe,qGe,q$,NGe,jGe,DGe,Ef,Dee,GGe,OGe,N$,VGe,XGe,zGe,Cf,Gee,WGe,QGe,j$,HGe,UGe,JGe,wf,Oee,YGe,KGe,D$,ZGe,eOe,oOe,Af,Vee,rOe,tOe,G$,aOe,nOe,sOe,yf,Xee,lOe,iOe,O$,dOe,cOe,fOe,Lf,zee,mOe,gOe,V$,hOe,pOe,_Oe,xf,Wee,uOe,bOe,X$,vOe,FOe,TOe,$f,Qee,MOe,EOe,z$,COe,wOe,AOe,kf,Hee,yOe,LOe,W$,xOe,$Oe,kOe,Sf,Uee,SOe,ROe,Q$,BOe,POe,IOe,Rf,Jee,qOe,NOe,H$,jOe,DOe,GOe,Bf,Yee,OOe,VOe,U$,XOe,zOe,WOe,Pf,Kee,QOe,HOe,J$,UOe,JOe,YOe,If,Zee,KOe,ZOe,Y$,eVe,oVe,rVe,qf,eoe,tVe,aVe,K$,nVe,sVe,lVe,Nf,ooe,iVe,dVe,Z$,cVe,fVe,mVe,jf,roe,gVe,hVe,ek,pVe,_Ve,uVe,Df,toe,bVe,vVe,ok,FVe,TVe,MVe,Gf,aoe,EVe,CVe,rk,wVe,AVe,yVe,Of,noe,LVe,xVe,tk,$Ve,kVe,SVe,Vf,soe,RVe,BVe,ak,PVe,IVe,qVe,Xf,loe,NVe,jVe,nk,DVe,GVe,OVe,zf,ioe,VVe,XVe,sk,zVe,WVe,QVe,Wf,doe,HVe,UVe,lk,JVe,YVe,KVe,Qf,coe,ZVe,eXe,ik,oXe,rXe,tXe,Hf,foe,aXe,nXe,dk,sXe,lXe,iXe,Uf,moe,dXe,cXe,ck,fXe,mXe,gXe,Jf,goe,hXe,pXe,fk,_Xe,uXe,bXe,Yf,hoe,vXe,FXe,mk,TXe,MXe,EXe,Kf,poe,CXe,wXe,gk,AXe,yXe,LXe,Zf,_oe,xXe,$Xe,hk,kXe,SXe,RXe,em,uoe,BXe,PXe,pk,IXe,qXe,NXe,om,boe,jXe,DXe,_k,GXe,OXe,VXe,rm,voe,XXe,zXe,uk,WXe,QXe,HXe,tm,Foe,UXe,JXe,bk,YXe,KXe,ZXe,am,Toe,eze,oze,vk,rze,tze,aze,nm,Moe,nze,sze,Fk,lze,ize,dze,sm,Eoe,cze,fze,Tk,mze,gze,hze,lm,Coe,pze,_ze,Mk,uze,bze,vze,im,woe,Fze,Tze,Ek,Mze,Eze,Cze,dm,Aoe,wze,Aze,Ck,yze,Lze,xze,cm,yoe,$ze,kze,wk,Sze,Rze,Bze,fm,Loe,Pze,Ize,Ak,qze,Nze,jze,mm,xoe,Dze,Gze,yk,Oze,Vze,Xze,gm,$oe,zze,Wze,Lk,Qze,Hze,Uze,hm,koe,Jze,Yze,xk,Kze,Zze,eWe,pm,Soe,oWe,rWe,$k,tWe,aWe,nWe,_m,Roe,sWe,lWe,kk,iWe,dWe,cWe,um,Boe,fWe,mWe,Sk,gWe,hWe,pWe,bm,Poe,_We,uWe,Rk,bWe,vWe,FWe,vm,Ioe,TWe,MWe,Bk,EWe,CWe,wWe,Fm,qoe,AWe,yWe,Pk,LWe,xWe,$We,Tm,Noe,kWe,SWe,Ik,RWe,BWe,PWe,Mm,joe,IWe,qWe,qk,NWe,jWe,DWe,Em,Doe,GWe,OWe,Nk,VWe,XWe,zWe,Cm,Goe,WWe,QWe,jk,HWe,UWe,JWe,wm,Ooe,YWe,KWe,Dk,ZWe,eQe,oQe,Am,Voe,rQe,tQe,Gk,aQe,nQe,sQe,ym,Xoe,lQe,iQe,Ok,dQe,cQe,fQe,Lm,zoe,mQe,gQe,Vk,hQe,pQe,_Qe,xm,Woe,uQe,bQe,Xk,vQe,FQe,TQe,$m,Qoe,MQe,EQe,zk,CQe,wQe,AQe,km,Hoe,yQe,LQe,Wk,xQe,$Qe,kQe,Sm,Uoe,SQe,RQe,Qk,BQe,PQe,IQe,Rm,Joe,qQe,NQe,Hk,jQe,DQe,GQe,Bm,Yoe,OQe,VQe,Uk,XQe,zQe,WQe,Pm,Koe,QQe,HQe,Jk,UQe,JQe,YQe,Im,Zoe,KQe,ZQe,Yk,eHe,oHe,rHe,qm,ere,tHe,aHe,Kk,nHe,sHe,lHe,Nm,ore,iHe,dHe,Zk,cHe,fHe,mHe,jm,rre,gHe,hHe,eS,pHe,_He,uHe,Dm,tre,bHe,vHe,oS,FHe,THe,MHe,Gm,are,EHe,CHe,rS,wHe,AHe,yHe,Om,nre,LHe,xHe,tS,$He,kHe,SHe,Vm,sre,RHe,BHe,aS,PHe,IHe,qHe,Xm,lre,NHe,jHe,nS,DHe,GHe,OHe,zm,ire,VHe,XHe,sS,zHe,WHe,QHe,Wm,dre,HHe,UHe,lS,JHe,YHe,KHe,Qm,cre,ZHe,eUe,iS,oUe,rUe,tUe,Hm,fre,aUe,nUe,dS,sUe,lUe,iUe,Um,mre,dUe,cUe,cS,fUe,mUe,gUe,Jm,gre,hUe,pUe,fS,_Ue,uUe,bUe,Ym,hre,vUe,FUe,mS,TUe,MUe,EUe,Km,pre,CUe,wUe,gS,AUe,yUe,LUe,Zm,_re,xUe,$Ue,hS,kUe,SUe,RUe,eg,ure,BUe,PUe,pS,IUe,qUe,NUe,og,bre,jUe,DUe,_S,GUe,OUe,VUe,rg,vre,XUe,zUe,uS,WUe,QUe,HUe,tg,Fre,UUe,JUe,bS,YUe,KUe,ZUe,ag,Tre,eJe,oJe,vS,rJe,tJe,aJe,ng,Mre,nJe,sJe,FS,lJe,iJe,dJe,sg,Ere,cJe,fJe,TS,mJe,gJe,hJe,lg,Cre,pJe,_Je,MS,uJe,bJe,vJe,ig,wre,FJe,TJe,ES,MJe,EJe,CJe,dg,Are,wJe,AJe,CS,yJe,LJe,xJe,cg,yre,$Je,kJe,wS,SJe,RJe,BJe,fg,Lre,PJe,IJe,AS,qJe,NJe,jJe,mg,xre,DJe,GJe,yS,OJe,VJe,XJe,gg,$re,zJe,WJe,LS,QJe,HJe,UJe,hg,kre,JJe,YJe,xS,KJe,ZJe,eYe,pg,Sre,oYe,rYe,$S,tYe,aYe,nYe,_g,Rre,sYe,lYe,kS,iYe,dYe,cYe,ug,Bre,fYe,mYe,SS,gYe,hYe,pYe,bg,Pre,_Ye,uYe,RS,bYe,vYe,FYe,vg,TYe,Fg,v6,MYe,Ire,EYe,KIe,Fi,Tg,qre,F6,CYe,Nre,wYe,ZIe,wo,T6,AYe,M6,yYe,BS,LYe,xYe,$Ye,E6,kYe,jre,SYe,RYe,BYe,Cr,C6,PYe,Dre,IYe,qYe,Aa,NYe,Gre,jYe,DYe,Ore,GYe,OYe,Vre,VYe,XYe,zYe,k,Sn,Xre,WYe,QYe,PS,HYe,UYe,IS,JYe,YYe,KYe,Rn,zre,ZYe,eKe,qS,oKe,rKe,NS,tKe,aKe,nKe,Bn,Wre,sKe,lKe,jS,iKe,dKe,DS,cKe,fKe,mKe,Mg,Qre,gKe,hKe,GS,pKe,_Ke,uKe,Pn,Hre,bKe,vKe,OS,FKe,TKe,VS,MKe,EKe,CKe,Eg,Ure,wKe,AKe,XS,yKe,LKe,xKe,Cg,Jre,$Ke,kKe,zS,SKe,RKe,BKe,wg,Yre,PKe,IKe,WS,qKe,NKe,jKe,In,Kre,DKe,GKe,QS,OKe,VKe,HS,XKe,zKe,WKe,qn,Zre,QKe,HKe,US,UKe,JKe,JS,YKe,KKe,ZKe,Nn,ete,eZe,oZe,YS,rZe,tZe,KS,aZe,nZe,sZe,Ag,ote,lZe,iZe,ZS,dZe,cZe,fZe,yg,rte,mZe,gZe,eR,hZe,pZe,_Ze,Lg,tte,uZe,bZe,oR,vZe,FZe,TZe,jn,ate,MZe,EZe,rR,CZe,wZe,tR,AZe,yZe,LZe,xg,nte,xZe,$Ze,aR,kZe,SZe,RZe,Dn,ste,BZe,PZe,nR,IZe,qZe,sR,NZe,jZe,DZe,Gn,lte,GZe,OZe,lR,VZe,XZe,iR,zZe,WZe,QZe,On,ite,HZe,UZe,dR,JZe,YZe,cR,KZe,ZZe,eeo,$g,dte,oeo,reo,fR,teo,aeo,neo,Vn,cte,seo,leo,mR,ieo,deo,gR,ceo,feo,meo,Xn,fte,geo,heo,hR,peo,_eo,pR,ueo,beo,veo,zn,mte,Feo,Teo,_R,Meo,Eeo,uR,Ceo,weo,Aeo,Wn,gte,yeo,Leo,bR,xeo,$eo,vR,keo,Seo,Reo,Qn,hte,Beo,Peo,FR,Ieo,qeo,TR,Neo,jeo,Deo,Hn,pte,Geo,Oeo,MR,Veo,Xeo,ER,zeo,Weo,Qeo,kg,_te,Heo,Ueo,CR,Jeo,Yeo,Keo,Un,ute,Zeo,eoo,wR,ooo,roo,AR,too,aoo,noo,Sg,bte,soo,loo,yR,ioo,doo,coo,Jn,vte,foo,moo,LR,goo,hoo,xR,poo,_oo,uoo,Yn,Fte,boo,voo,$R,Foo,Too,kR,Moo,Eoo,Coo,Kn,Tte,woo,Aoo,SR,yoo,Loo,RR,xoo,$oo,koo,Zn,Mte,Soo,Roo,BR,Boo,Poo,PR,Ioo,qoo,Noo,es,Ete,joo,Doo,IR,Goo,Ooo,qR,Voo,Xoo,zoo,Rg,Cte,Woo,Qoo,NR,Hoo,Uoo,Joo,os,wte,Yoo,Koo,jR,Zoo,ero,DR,oro,rro,tro,rs,Ate,aro,nro,GR,sro,lro,OR,iro,dro,cro,ts,yte,fro,mro,VR,gro,hro,XR,pro,_ro,uro,as,Lte,bro,vro,zR,Fro,Tro,WR,Mro,Ero,Cro,ns,xte,wro,Aro,QR,yro,Lro,HR,xro,$ro,kro,ss,$te,Sro,Rro,UR,Bro,Pro,JR,Iro,qro,Nro,Bg,kte,jro,Dro,YR,Gro,Oro,Vro,ls,Ste,Xro,zro,KR,Wro,Qro,ZR,Hro,Uro,Jro,Pg,Rte,Yro,Kro,eB,Zro,eto,oto,Ig,Bte,rto,tto,oB,ato,nto,sto,is,Pte,lto,ito,rB,dto,cto,tB,fto,mto,gto,ds,Ite,hto,pto,aB,_to,uto,nB,bto,vto,Fto,cs,qte,Tto,Mto,sB,Eto,Cto,lB,wto,Ato,yto,qg,Nte,Lto,xto,iB,$to,kto,Sto,fs,jte,Rto,Bto,dB,Pto,Ito,cB,qto,Nto,jto,ms,Dte,Dto,Gto,fB,Oto,Vto,mB,Xto,zto,Wto,gs,Gte,Qto,Hto,gB,Uto,Jto,hB,Yto,Kto,Zto,hs,Ote,eao,oao,pB,rao,tao,_B,aao,nao,sao,ps,Vte,lao,iao,uB,dao,cao,bB,fao,mao,gao,Ng,Xte,hao,pao,vB,_ao,uao,bao,_s,zte,vao,Fao,FB,Tao,Mao,TB,Eao,Cao,wao,jg,Wte,Aao,yao,MB,Lao,xao,$ao,Dg,Qte,kao,Sao,EB,Rao,Bao,Pao,Gg,Hte,Iao,qao,CB,Nao,jao,Dao,Og,Ute,Gao,Oao,wB,Vao,Xao,zao,us,Jte,Wao,Qao,AB,Hao,Uao,yB,Jao,Yao,Kao,Vg,Yte,Zao,eno,LB,ono,rno,tno,bs,Kte,ano,nno,xB,sno,lno,$B,ino,dno,cno,vs,Zte,fno,mno,kB,gno,hno,SB,pno,_no,uno,Fs,eae,bno,vno,RB,Fno,Tno,BB,Mno,Eno,Cno,Ts,oae,wno,Ano,PB,yno,Lno,IB,xno,$no,kno,Ms,rae,Sno,Rno,qB,Bno,Pno,NB,Ino,qno,Nno,Es,tae,jno,Dno,jB,Gno,Ono,DB,Vno,Xno,zno,Xg,aae,Wno,Qno,GB,Hno,Uno,Jno,zg,nae,Yno,Kno,OB,Zno,eso,oso,Cs,sae,rso,tso,VB,aso,nso,XB,sso,lso,iso,ws,lae,dso,cso,zB,fso,mso,WB,gso,hso,pso,As,iae,_so,uso,QB,bso,vso,HB,Fso,Tso,Mso,Wg,dae,Eso,Cso,UB,wso,Aso,yso,Qg,cae,Lso,xso,JB,$so,kso,Sso,Hg,fae,Rso,Bso,YB,Pso,Iso,qso,ys,mae,Nso,jso,KB,Dso,Gso,ZB,Oso,Vso,Xso,Ug,gae,zso,Wso,eP,Qso,Hso,Uso,Jg,hae,Jso,Yso,oP,Kso,Zso,elo,Yg,pae,olo,rlo,rP,tlo,alo,nlo,Ls,_ae,slo,llo,tP,ilo,dlo,aP,clo,flo,mlo,Kg,uae,glo,hlo,nP,plo,_lo,ulo,Zg,bae,blo,vlo,sP,Flo,Tlo,Mlo,xs,vae,Elo,Clo,lP,wlo,Alo,iP,ylo,Llo,xlo,$s,Fae,$lo,klo,dP,Slo,Rlo,cP,Blo,Plo,Ilo,ks,Tae,qlo,Nlo,fP,jlo,Dlo,mP,Glo,Olo,Vlo,Ss,Mae,Xlo,zlo,gP,Wlo,Qlo,hP,Hlo,Ulo,Jlo,eh,Ylo,oh,w6,Klo,Eae,Zlo,eqe,Ti,rh,Cae,A6,eio,wae,oio,oqe,Ao,y6,rio,L6,tio,pP,aio,nio,sio,x6,lio,Aae,iio,dio,cio,He,$6,fio,yae,mio,gio,ya,hio,Lae,pio,_io,xae,uio,bio,$ae,vio,Fio,Tio,Z,th,kae,Mio,Eio,_P,Cio,wio,Aio,ah,Sae,yio,Lio,uP,xio,$io,kio,nh,Rae,Sio,Rio,bP,Bio,Pio,Iio,sh,Bae,qio,Nio,vP,jio,Dio,Gio,lh,Pae,Oio,Vio,FP,Xio,zio,Wio,ih,Iae,Qio,Hio,TP,Uio,Jio,Yio,dh,qae,Kio,Zio,MP,edo,odo,rdo,ch,Nae,tdo,ado,EP,ndo,sdo,ldo,fh,jae,ido,ddo,CP,cdo,fdo,mdo,mh,Dae,gdo,hdo,wP,pdo,_do,udo,gh,Gae,bdo,vdo,AP,Fdo,Tdo,Mdo,hh,Oae,Edo,Cdo,yP,wdo,Ado,ydo,ph,Vae,Ldo,xdo,LP,$do,kdo,Sdo,_h,Xae,Rdo,Bdo,xP,Pdo,Ido,qdo,uh,zae,Ndo,jdo,$P,Ddo,Gdo,Odo,bh,Wae,Vdo,Xdo,kP,zdo,Wdo,Qdo,vh,Qae,Hdo,Udo,SP,Jdo,Ydo,Kdo,Fh,Hae,Zdo,eco,RP,oco,rco,tco,Th,Uae,aco,nco,BP,sco,lco,ico,Mh,Jae,dco,cco,PP,fco,mco,gco,Eh,Yae,hco,pco,IP,_co,uco,bco,Ch,Kae,vco,Fco,qP,Tco,Mco,Eco,wh,Zae,Cco,wco,NP,Aco,yco,Lco,Ah,ene,xco,$co,jP,kco,Sco,Rco,yh,one,Bco,Pco,DP,Ico,qco,Nco,Lh,rne,jco,Dco,GP,Gco,Oco,Vco,xh,Xco,$h,zco,kh,k6,Wco,tne,Qco,rqe,Mi,Sh,ane,S6,Hco,nne,Uco,tqe,yo,R6,Jco,B6,Yco,OP,Kco,Zco,efo,P6,ofo,sne,rfo,tfo,afo,Ue,I6,nfo,lne,sfo,lfo,Ei,ifo,ine,dfo,cfo,dne,ffo,mfo,gfo,pe,Rh,cne,hfo,pfo,VP,_fo,ufo,bfo,Bh,fne,vfo,Ffo,mne,Tfo,Mfo,Efo,Ph,gne,Cfo,wfo,XP,Afo,yfo,Lfo,Ih,hne,xfo,$fo,zP,kfo,Sfo,Rfo,qh,pne,Bfo,Pfo,WP,Ifo,qfo,Nfo,Nh,_ne,jfo,Dfo,QP,Gfo,Ofo,Vfo,jh,une,Xfo,zfo,HP,Wfo,Qfo,Hfo,Dh,bne,Ufo,Jfo,UP,Yfo,Kfo,Zfo,Gh,vne,emo,omo,JP,rmo,tmo,amo,Oh,Fne,nmo,smo,YP,lmo,imo,dmo,Vh,Tne,cmo,fmo,KP,mmo,gmo,hmo,Xh,Mne,pmo,_mo,ZP,umo,bmo,vmo,zh,Ene,Fmo,Tmo,eI,Mmo,Emo,Cmo,Wh,Cne,wmo,Amo,oI,ymo,Lmo,xmo,Qh,wne,$mo,kmo,rI,Smo,Rmo,Bmo,Hh,Ane,Pmo,Imo,tI,qmo,Nmo,jmo,Uh,Dmo,Jh,Gmo,Yh,q6,Omo,yne,Vmo,aqe,Ci,Kh,Lne,N6,Xmo,xne,zmo,nqe,Lo,j6,Wmo,wi,Qmo,aI,Hmo,Umo,nI,Jmo,Ymo,Kmo,D6,Zmo,$ne,ego,ogo,rgo,tt,G6,tgo,kne,ago,ngo,Ai,sgo,Sne,lgo,igo,sI,dgo,cgo,fgo,Zh,mgo,Je,O6,ggo,Rne,hgo,pgo,La,_go,Bne,ugo,bgo,Pne,vgo,Fgo,Ine,Tgo,Mgo,Ego,x,ep,qne,Cgo,wgo,lI,Ago,ygo,Lgo,op,Nne,xgo,$go,iI,kgo,Sgo,Rgo,rp,jne,Bgo,Pgo,dI,Igo,qgo,Ngo,tp,Dne,jgo,Dgo,cI,Ggo,Ogo,Vgo,ap,Gne,Xgo,zgo,fI,Wgo,Qgo,Hgo,np,One,Ugo,Jgo,mI,Ygo,Kgo,Zgo,sp,Vne,eho,oho,gI,rho,tho,aho,lp,Xne,nho,sho,hI,lho,iho,dho,ip,zne,cho,fho,pI,mho,gho,hho,dp,Wne,pho,_ho,_I,uho,bho,vho,cp,Qne,Fho,Tho,uI,Mho,Eho,Cho,fp,Hne,who,Aho,bI,yho,Lho,xho,mp,Une,$ho,kho,vI,Sho,Rho,Bho,gp,Jne,Pho,Iho,FI,qho,Nho,jho,hp,Yne,Dho,Gho,TI,Oho,Vho,Xho,pp,Kne,zho,Who,MI,Qho,Hho,Uho,_p,Zne,Jho,Yho,EI,Kho,Zho,epo,up,ese,opo,rpo,CI,tpo,apo,npo,bp,ose,spo,lpo,wI,ipo,dpo,cpo,vp,rse,fpo,mpo,AI,gpo,hpo,ppo,Fp,tse,_po,upo,yI,bpo,vpo,Fpo,Tp,ase,Tpo,Mpo,LI,Epo,Cpo,wpo,Mp,nse,Apo,ypo,xI,Lpo,xpo,$po,Ep,sse,kpo,Spo,$I,Rpo,Bpo,Ppo,Cp,lse,Ipo,qpo,kI,Npo,jpo,Dpo,wp,ise,Gpo,Opo,SI,Vpo,Xpo,zpo,Ap,dse,Wpo,Qpo,RI,Hpo,Upo,Jpo,yp,cse,Ypo,Kpo,BI,Zpo,e_o,o_o,Lp,fse,r_o,t_o,PI,a_o,n_o,s_o,xp,mse,l_o,i_o,II,d_o,c_o,f_o,$p,gse,m_o,g_o,qI,h_o,p_o,__o,kp,hse,u_o,b_o,NI,v_o,F_o,T_o,Rs,pse,M_o,E_o,jI,C_o,w_o,DI,A_o,y_o,L_o,Sp,_se,x_o,$_o,GI,k_o,S_o,R_o,Rp,use,B_o,P_o,OI,I_o,q_o,N_o,Bp,bse,j_o,D_o,VI,G_o,O_o,V_o,Pp,vse,X_o,z_o,XI,W_o,Q_o,H_o,Ip,Fse,U_o,J_o,zI,Y_o,K_o,Z_o,qp,Tse,euo,ouo,WI,ruo,tuo,auo,Np,Mse,nuo,suo,QI,luo,iuo,duo,jp,Ese,cuo,fuo,HI,muo,guo,huo,Dp,Cse,puo,_uo,UI,uuo,buo,vuo,Gp,wse,Fuo,Tuo,JI,Muo,Euo,Cuo,Op,Ase,wuo,Auo,YI,yuo,Luo,xuo,Vp,yse,$uo,kuo,KI,Suo,Ruo,Buo,Xp,Lse,Puo,Iuo,ZI,quo,Nuo,juo,zp,xse,Duo,Guo,eq,Ouo,Vuo,Xuo,Wp,$se,zuo,Wuo,oq,Quo,Huo,Uuo,Qp,kse,Juo,Yuo,rq,Kuo,Zuo,e2o,Hp,Sse,o2o,r2o,tq,t2o,a2o,n2o,Up,Rse,s2o,l2o,aq,i2o,d2o,c2o,Jp,Bse,f2o,m2o,nq,g2o,h2o,p2o,Yp,Pse,_2o,u2o,sq,b2o,v2o,F2o,Kp,Ise,T2o,M2o,lq,E2o,C2o,w2o,Zp,qse,A2o,y2o,iq,L2o,x2o,$2o,e_,Nse,k2o,S2o,dq,R2o,B2o,P2o,o_,jse,I2o,q2o,cq,N2o,j2o,D2o,r_,Dse,G2o,O2o,fq,V2o,X2o,z2o,t_,Gse,W2o,Q2o,mq,H2o,U2o,J2o,a_,Ose,Y2o,K2o,gq,Z2o,e1o,o1o,n_,Vse,r1o,t1o,hq,a1o,n1o,s1o,s_,Xse,l1o,i1o,pq,d1o,c1o,f1o,l_,zse,m1o,g1o,_q,h1o,p1o,_1o,i_,Wse,u1o,b1o,uq,v1o,F1o,T1o,d_,Qse,M1o,E1o,bq,C1o,w1o,A1o,c_,Hse,y1o,L1o,vq,x1o,$1o,k1o,f_,Use,S1o,R1o,Fq,B1o,P1o,I1o,m_,Jse,q1o,N1o,Tq,j1o,D1o,G1o,g_,Yse,O1o,V1o,Mq,X1o,z1o,W1o,h_,Kse,Q1o,H1o,Eq,U1o,J1o,Y1o,p_,Zse,K1o,Z1o,Cq,ebo,obo,rbo,__,ele,tbo,abo,wq,nbo,sbo,lbo,u_,ole,ibo,dbo,Aq,cbo,fbo,mbo,b_,rle,gbo,hbo,yq,pbo,_bo,ubo,v_,tle,bbo,vbo,Lq,Fbo,Tbo,Mbo,F_,ale,Ebo,Cbo,xq,wbo,Abo,ybo,T_,nle,Lbo,xbo,$q,$bo,kbo,Sbo,M_,sle,Rbo,Bbo,kq,Pbo,Ibo,qbo,E_,lle,Nbo,jbo,Sq,Dbo,Gbo,Obo,C_,ile,Vbo,Xbo,Rq,zbo,Wbo,Qbo,w_,dle,Hbo,Ubo,Bq,Jbo,Ybo,Kbo,A_,cle,Zbo,evo,Pq,ovo,rvo,tvo,y_,fle,avo,nvo,Iq,svo,lvo,ivo,L_,mle,dvo,cvo,qq,fvo,mvo,gvo,x_,gle,hvo,pvo,Nq,_vo,uvo,bvo,$_,hle,vvo,Fvo,jq,Tvo,Mvo,Evo,k_,ple,Cvo,wvo,Dq,Avo,yvo,Lvo,S_,_le,xvo,$vo,Gq,kvo,Svo,Rvo,R_,ule,Bvo,Pvo,Oq,Ivo,qvo,Nvo,B_,ble,jvo,Dvo,Vq,Gvo,Ovo,Vvo,P_,vle,Xvo,zvo,Xq,Wvo,Qvo,Hvo,I_,Fle,Uvo,Jvo,zq,Yvo,Kvo,Zvo,q_,Tle,eFo,oFo,Wq,rFo,tFo,aFo,N_,Mle,nFo,sFo,Qq,lFo,iFo,dFo,j_,Ele,cFo,fFo,Hq,mFo,gFo,hFo,D_,Cle,pFo,_Fo,Uq,uFo,bFo,vFo,G_,wle,FFo,TFo,Jq,MFo,EFo,CFo,O_,Ale,wFo,AFo,Yq,yFo,LFo,xFo,V_,yle,$Fo,kFo,Kq,SFo,RFo,BFo,X_,PFo,Lle,IFo,qFo,xle,NFo,jFo,z_,sqe,yi,W_,$le,V6,DFo,kle,GFo,lqe,xo,X6,OFo,Li,VFo,Zq,XFo,zFo,eN,WFo,QFo,HFo,z6,UFo,Sle,JFo,YFo,KFo,at,W6,ZFo,Rle,e0o,o0o,xi,r0o,Ble,t0o,a0o,oN,n0o,s0o,l0o,Q_,i0o,Ye,Q6,d0o,Ple,c0o,f0o,xa,m0o,Ile,g0o,h0o,qle,p0o,_0o,Nle,u0o,b0o,v0o,G,H_,jle,F0o,T0o,rN,M0o,E0o,C0o,U_,Dle,w0o,A0o,tN,y0o,L0o,x0o,J_,Gle,$0o,k0o,aN,S0o,R0o,B0o,Y_,Ole,P0o,I0o,nN,q0o,N0o,j0o,K_,Vle,D0o,G0o,sN,O0o,V0o,X0o,Z_,Xle,z0o,W0o,lN,Q0o,H0o,U0o,eu,zle,J0o,Y0o,iN,K0o,Z0o,eTo,ou,Wle,oTo,rTo,dN,tTo,aTo,nTo,ru,Qle,sTo,lTo,cN,iTo,dTo,cTo,tu,Hle,fTo,mTo,fN,gTo,hTo,pTo,au,Ule,_To,uTo,mN,bTo,vTo,FTo,nu,Jle,TTo,MTo,gN,ETo,CTo,wTo,su,Yle,ATo,yTo,hN,LTo,xTo,$To,lu,Kle,kTo,STo,pN,RTo,BTo,PTo,iu,Zle,ITo,qTo,_N,NTo,jTo,DTo,du,eie,GTo,OTo,uN,VTo,XTo,zTo,cu,oie,WTo,QTo,bN,HTo,UTo,JTo,fu,rie,YTo,KTo,vN,ZTo,e7o,o7o,mu,tie,r7o,t7o,FN,a7o,n7o,s7o,gu,aie,l7o,i7o,TN,d7o,c7o,f7o,hu,nie,m7o,g7o,MN,h7o,p7o,_7o,pu,sie,u7o,b7o,EN,v7o,F7o,T7o,_u,lie,M7o,E7o,CN,C7o,w7o,A7o,uu,iie,y7o,L7o,wN,x7o,$7o,k7o,bu,die,S7o,R7o,AN,B7o,P7o,I7o,vu,cie,q7o,N7o,yN,j7o,D7o,G7o,Fu,fie,O7o,V7o,LN,X7o,z7o,W7o,Tu,mie,Q7o,H7o,xN,U7o,J7o,Y7o,Mu,gie,K7o,Z7o,$N,eMo,oMo,rMo,Eu,hie,tMo,aMo,kN,nMo,sMo,lMo,Cu,pie,iMo,dMo,SN,cMo,fMo,mMo,wu,_ie,gMo,hMo,RN,pMo,_Mo,uMo,Au,uie,bMo,vMo,BN,FMo,TMo,MMo,yu,bie,EMo,CMo,PN,wMo,AMo,yMo,Lu,vie,LMo,xMo,IN,$Mo,kMo,SMo,xu,Fie,RMo,BMo,qN,PMo,IMo,qMo,$u,Tie,NMo,jMo,NN,DMo,GMo,OMo,ku,Mie,VMo,XMo,jN,zMo,WMo,QMo,Su,Eie,HMo,UMo,DN,JMo,YMo,KMo,Ru,Cie,ZMo,e4o,GN,o4o,r4o,t4o,Bu,wie,a4o,n4o,ON,s4o,l4o,i4o,Pu,Aie,d4o,c4o,VN,f4o,m4o,g4o,Iu,h4o,yie,p4o,_4o,Lie,u4o,b4o,qu,iqe,$i,Nu,xie,H6,v4o,$ie,F4o,dqe,$o,U6,T4o,ki,M4o,XN,E4o,C4o,zN,w4o,A4o,y4o,J6,L4o,kie,x4o,$4o,k4o,nt,Y6,S4o,Sie,R4o,B4o,Si,P4o,Rie,I4o,q4o,WN,N4o,j4o,D4o,ju,G4o,Ke,K6,O4o,Bie,V4o,X4o,$a,z4o,Pie,W4o,Q4o,Iie,H4o,U4o,qie,J4o,Y4o,K4o,z,Du,Nie,Z4o,eEo,QN,oEo,rEo,tEo,Gu,jie,aEo,nEo,HN,sEo,lEo,iEo,Ou,Die,dEo,cEo,UN,fEo,mEo,gEo,Vu,Gie,hEo,pEo,JN,_Eo,uEo,bEo,Xu,Oie,vEo,FEo,YN,TEo,MEo,EEo,zu,Vie,CEo,wEo,KN,AEo,yEo,LEo,Wu,Xie,xEo,$Eo,ZN,kEo,SEo,REo,Qu,zie,BEo,PEo,ej,IEo,qEo,NEo,Hu,Wie,jEo,DEo,oj,GEo,OEo,VEo,Uu,Qie,XEo,zEo,rj,WEo,QEo,HEo,Ju,Hie,UEo,JEo,tj,YEo,KEo,ZEo,Yu,Uie,eCo,oCo,aj,rCo,tCo,aCo,Ku,Jie,nCo,sCo,nj,lCo,iCo,dCo,Zu,Yie,cCo,fCo,sj,mCo,gCo,hCo,e2,Kie,pCo,_Co,lj,uCo,bCo,vCo,o2,Zie,FCo,TCo,ij,MCo,ECo,CCo,r2,ede,wCo,ACo,dj,yCo,LCo,xCo,t2,ode,$Co,kCo,cj,SCo,RCo,BCo,a2,rde,PCo,ICo,fj,qCo,NCo,jCo,n2,tde,DCo,GCo,mj,OCo,VCo,XCo,s2,ade,zCo,WCo,gj,QCo,HCo,UCo,l2,nde,JCo,YCo,hj,KCo,ZCo,e5o,i2,sde,o5o,r5o,pj,t5o,a5o,n5o,d2,lde,s5o,l5o,_j,i5o,d5o,c5o,c2,ide,f5o,m5o,uj,g5o,h5o,p5o,f2,dde,_5o,u5o,bj,b5o,v5o,F5o,m2,cde,T5o,M5o,vj,E5o,C5o,w5o,g2,fde,A5o,y5o,Fj,L5o,x5o,$5o,h2,mde,k5o,S5o,Tj,R5o,B5o,P5o,p2,gde,I5o,q5o,Mj,N5o,j5o,D5o,_2,hde,G5o,O5o,Ej,V5o,X5o,z5o,u2,pde,W5o,Q5o,Cj,H5o,U5o,J5o,b2,_de,Y5o,K5o,wj,Z5o,e3o,o3o,v2,ude,r3o,t3o,Aj,a3o,n3o,s3o,F2,bde,l3o,i3o,yj,d3o,c3o,f3o,T2,vde,m3o,g3o,Lj,h3o,p3o,_3o,M2,Fde,u3o,b3o,xj,v3o,F3o,T3o,E2,M3o,Tde,E3o,C3o,Mde,w3o,A3o,C2,cqe,Ri,w2,Ede,Z6,y3o,Cde,L3o,fqe,ko,ey,x3o,Bi,$3o,$j,k3o,S3o,kj,R3o,B3o,P3o,oy,I3o,wde,q3o,N3o,j3o,st,ry,D3o,Ade,G3o,O3o,Pi,V3o,yde,X3o,z3o,Sj,W3o,Q3o,H3o,A2,U3o,Ze,ty,J3o,Lde,Y3o,K3o,ka,Z3o,xde,ewo,owo,$de,rwo,two,kde,awo,nwo,swo,Q,y2,Sde,lwo,iwo,Rj,dwo,cwo,fwo,L2,Rde,mwo,gwo,Bj,hwo,pwo,_wo,x2,Bde,uwo,bwo,Pj,vwo,Fwo,Two,$2,Pde,Mwo,Ewo,Ij,Cwo,wwo,Awo,k2,Ide,ywo,Lwo,qj,xwo,$wo,kwo,S2,qde,Swo,Rwo,Nj,Bwo,Pwo,Iwo,R2,Nde,qwo,Nwo,jj,jwo,Dwo,Gwo,B2,jde,Owo,Vwo,Dj,Xwo,zwo,Wwo,P2,Dde,Qwo,Hwo,Gj,Uwo,Jwo,Ywo,I2,Gde,Kwo,Zwo,Oj,eAo,oAo,rAo,q2,Ode,tAo,aAo,Vj,nAo,sAo,lAo,N2,Vde,iAo,dAo,Xj,cAo,fAo,mAo,j2,Xde,gAo,hAo,zj,pAo,_Ao,uAo,D2,zde,bAo,vAo,Wj,FAo,TAo,MAo,G2,Wde,EAo,CAo,Qj,wAo,AAo,yAo,O2,Qde,LAo,xAo,Hj,$Ao,kAo,SAo,V2,Hde,RAo,BAo,Uj,PAo,IAo,qAo,X2,Ude,NAo,jAo,Jj,DAo,GAo,OAo,z2,Jde,VAo,XAo,Yj,zAo,WAo,QAo,W2,Yde,HAo,UAo,Kj,JAo,YAo,KAo,Q2,Kde,ZAo,e6o,Zj,o6o,r6o,t6o,H2,Zde,a6o,n6o,eD,s6o,l6o,i6o,U2,ece,d6o,c6o,oD,f6o,m6o,g6o,J2,oce,h6o,p6o,rD,_6o,u6o,b6o,Y2,rce,v6o,F6o,tD,T6o,M6o,E6o,K2,tce,C6o,w6o,aD,A6o,y6o,L6o,Z2,ace,x6o,$6o,nD,k6o,S6o,R6o,e1,nce,B6o,P6o,sD,I6o,q6o,N6o,o1,sce,j6o,D6o,lD,G6o,O6o,V6o,r1,lce,X6o,z6o,iD,W6o,Q6o,H6o,t1,ice,U6o,J6o,dce,Y6o,K6o,Z6o,a1,cce,eyo,oyo,dD,ryo,tyo,ayo,n1,fce,nyo,syo,cD,lyo,iyo,dyo,s1,mce,cyo,fyo,fD,myo,gyo,hyo,l1,gce,pyo,_yo,mD,uyo,byo,vyo,i1,Fyo,hce,Tyo,Myo,pce,Eyo,Cyo,d1,mqe,Ii,c1,_ce,ay,wyo,uce,Ayo,gqe,So,ny,yyo,qi,Lyo,gD,xyo,$yo,hD,kyo,Syo,Ryo,sy,Byo,bce,Pyo,Iyo,qyo,lt,ly,Nyo,vce,jyo,Dyo,Ni,Gyo,Fce,Oyo,Vyo,pD,Xyo,zyo,Wyo,f1,Qyo,eo,iy,Hyo,Tce,Uyo,Jyo,Sa,Yyo,Mce,Kyo,Zyo,Ece,eLo,oLo,Cce,rLo,tLo,aLo,_e,m1,wce,nLo,sLo,_D,lLo,iLo,dLo,g1,Ace,cLo,fLo,uD,mLo,gLo,hLo,h1,yce,pLo,_Lo,bD,uLo,bLo,vLo,p1,Lce,FLo,TLo,vD,MLo,ELo,CLo,_1,xce,wLo,ALo,FD,yLo,LLo,xLo,u1,$ce,$Lo,kLo,TD,SLo,RLo,BLo,b1,kce,PLo,ILo,MD,qLo,NLo,jLo,v1,Sce,DLo,GLo,ED,OLo,VLo,XLo,F1,Rce,zLo,WLo,CD,QLo,HLo,ULo,T1,Bce,JLo,YLo,wD,KLo,ZLo,e8o,M1,Pce,o8o,r8o,AD,t8o,a8o,n8o,E1,Ice,s8o,l8o,yD,i8o,d8o,c8o,C1,qce,f8o,m8o,LD,g8o,h8o,p8o,w1,Nce,_8o,u8o,xD,b8o,v8o,F8o,A1,jce,T8o,M8o,$D,E8o,C8o,w8o,y1,Dce,A8o,y8o,kD,L8o,x8o,$8o,L1,k8o,Gce,S8o,R8o,Oce,B8o,P8o,x1,hqe,ji,$1,Vce,dy,I8o,Xce,q8o,pqe,Ro,cy,N8o,Di,j8o,SD,D8o,G8o,RD,O8o,V8o,X8o,fy,z8o,zce,W8o,Q8o,H8o,it,my,U8o,Wce,J8o,Y8o,Gi,K8o,Qce,Z8o,e9o,BD,o9o,r9o,t9o,k1,a9o,oo,gy,n9o,Hce,s9o,l9o,Ra,i9o,Uce,d9o,c9o,Jce,f9o,m9o,Yce,g9o,h9o,p9o,q,S1,Kce,_9o,u9o,PD,b9o,v9o,F9o,R1,Zce,T9o,M9o,ID,E9o,C9o,w9o,B1,efe,A9o,y9o,qD,L9o,x9o,$9o,P1,ofe,k9o,S9o,ND,R9o,B9o,P9o,I1,rfe,I9o,q9o,jD,N9o,j9o,D9o,q1,tfe,G9o,O9o,DD,V9o,X9o,z9o,N1,afe,W9o,Q9o,GD,H9o,U9o,J9o,j1,nfe,Y9o,K9o,OD,Z9o,exo,oxo,D1,sfe,rxo,txo,VD,axo,nxo,sxo,G1,lfe,lxo,ixo,XD,dxo,cxo,fxo,O1,ife,mxo,gxo,zD,hxo,pxo,_xo,V1,dfe,uxo,bxo,WD,vxo,Fxo,Txo,X1,cfe,Mxo,Exo,QD,Cxo,wxo,Axo,z1,ffe,yxo,Lxo,HD,xxo,$xo,kxo,W1,mfe,Sxo,Rxo,UD,Bxo,Pxo,Ixo,Q1,gfe,qxo,Nxo,JD,jxo,Dxo,Gxo,H1,hfe,Oxo,Vxo,YD,Xxo,zxo,Wxo,U1,pfe,Qxo,Hxo,KD,Uxo,Jxo,Yxo,J1,_fe,Kxo,Zxo,ZD,e$o,o$o,r$o,Y1,ufe,t$o,a$o,eG,n$o,s$o,l$o,K1,bfe,i$o,d$o,oG,c$o,f$o,m$o,Z1,vfe,g$o,h$o,rG,p$o,_$o,u$o,eb,Ffe,b$o,v$o,tG,F$o,T$o,M$o,ob,Tfe,E$o,C$o,aG,w$o,A$o,y$o,rb,Mfe,L$o,x$o,nG,$$o,k$o,S$o,tb,Efe,R$o,B$o,sG,P$o,I$o,q$o,ab,Cfe,N$o,j$o,lG,D$o,G$o,O$o,nb,wfe,V$o,X$o,iG,z$o,W$o,Q$o,sb,Afe,H$o,U$o,dG,J$o,Y$o,K$o,lb,yfe,Z$o,eko,cG,oko,rko,tko,ib,Lfe,ako,nko,fG,sko,lko,iko,db,xfe,dko,cko,mG,fko,mko,gko,cb,$fe,hko,pko,gG,_ko,uko,bko,fb,kfe,vko,Fko,hG,Tko,Mko,Eko,mb,Sfe,Cko,wko,pG,Ako,yko,Lko,gb,Rfe,xko,$ko,_G,kko,Sko,Rko,hb,Bfe,Bko,Pko,uG,Iko,qko,Nko,pb,Pfe,jko,Dko,bG,Gko,Oko,Vko,_b,Ife,Xko,zko,vG,Wko,Qko,Hko,ub,qfe,Uko,Jko,FG,Yko,Kko,Zko,bb,Nfe,eSo,oSo,TG,rSo,tSo,aSo,vb,jfe,nSo,sSo,MG,lSo,iSo,dSo,Fb,Dfe,cSo,fSo,EG,mSo,gSo,hSo,Tb,Gfe,pSo,_So,CG,uSo,bSo,vSo,Mb,Ofe,FSo,TSo,wG,MSo,ESo,CSo,Eb,Vfe,wSo,ASo,AG,ySo,LSo,xSo,Cb,$So,Xfe,kSo,SSo,zfe,RSo,BSo,wb,_qe,Oi,Ab,Wfe,hy,PSo,Qfe,ISo,uqe,Bo,py,qSo,Vi,NSo,yG,jSo,DSo,LG,GSo,OSo,VSo,_y,XSo,Hfe,zSo,WSo,QSo,dt,uy,HSo,Ufe,USo,JSo,Xi,YSo,Jfe,KSo,ZSo,xG,eRo,oRo,rRo,yb,tRo,ro,by,aRo,Yfe,nRo,sRo,Ba,lRo,Kfe,iRo,dRo,Zfe,cRo,fRo,eme,mRo,gRo,hRo,Y,Lb,ome,pRo,_Ro,$G,uRo,bRo,vRo,xb,rme,FRo,TRo,kG,MRo,ERo,CRo,$b,tme,wRo,ARo,SG,yRo,LRo,xRo,kb,ame,$Ro,kRo,RG,SRo,RRo,BRo,Sb,nme,PRo,IRo,BG,qRo,NRo,jRo,Rb,sme,DRo,GRo,PG,ORo,VRo,XRo,Bb,lme,zRo,WRo,IG,QRo,HRo,URo,Pb,ime,JRo,YRo,qG,KRo,ZRo,eBo,Ib,dme,oBo,rBo,NG,tBo,aBo,nBo,qb,cme,sBo,lBo,jG,iBo,dBo,cBo,Nb,fme,fBo,mBo,DG,gBo,hBo,pBo,jb,mme,_Bo,uBo,GG,bBo,vBo,FBo,Db,gme,TBo,MBo,OG,EBo,CBo,wBo,Gb,hme,ABo,yBo,VG,LBo,xBo,$Bo,Ob,pme,kBo,SBo,XG,RBo,BBo,PBo,Vb,_me,IBo,qBo,zG,NBo,jBo,DBo,Xb,ume,GBo,OBo,WG,VBo,XBo,zBo,zb,bme,WBo,QBo,QG,HBo,UBo,JBo,Wb,vme,YBo,KBo,HG,ZBo,ePo,oPo,Qb,Fme,rPo,tPo,UG,aPo,nPo,sPo,Hb,Tme,lPo,iPo,JG,dPo,cPo,fPo,Ub,Mme,mPo,gPo,YG,hPo,pPo,_Po,Jb,Eme,uPo,bPo,KG,vPo,FPo,TPo,Yb,Cme,MPo,EPo,ZG,CPo,wPo,APo,Kb,wme,yPo,LPo,eO,xPo,$Po,kPo,Zb,Ame,SPo,RPo,oO,BPo,PPo,IPo,ev,yme,qPo,NPo,rO,jPo,DPo,GPo,ov,Lme,OPo,VPo,tO,XPo,zPo,WPo,rv,xme,QPo,HPo,aO,UPo,JPo,YPo,tv,KPo,$me,ZPo,eIo,kme,oIo,rIo,av,bqe,zi,nv,Sme,vy,tIo,Rme,aIo,vqe,Po,Fy,nIo,Wi,sIo,nO,lIo,iIo,sO,dIo,cIo,fIo,Ty,mIo,Bme,gIo,hIo,pIo,ct,My,_Io,Pme,uIo,bIo,Qi,vIo,Ime,FIo,TIo,lO,MIo,EIo,CIo,sv,wIo,to,Ey,AIo,qme,yIo,LIo,Pa,xIo,Nme,$Io,kIo,jme,SIo,RIo,Dme,BIo,PIo,IIo,Yr,lv,Gme,qIo,NIo,iO,jIo,DIo,GIo,iv,Ome,OIo,VIo,dO,XIo,zIo,WIo,dv,Vme,QIo,HIo,cO,UIo,JIo,YIo,cv,Xme,KIo,ZIo,fO,eqo,oqo,rqo,fv,zme,tqo,aqo,mO,nqo,sqo,lqo,mv,iqo,Wme,dqo,cqo,Qme,fqo,mqo,gv,Fqe,Hi,hv,Hme,Cy,gqo,Ume,hqo,Tqe,Io,wy,pqo,Ui,_qo,gO,uqo,bqo,hO,vqo,Fqo,Tqo,Ay,Mqo,Jme,Eqo,Cqo,wqo,ft,yy,Aqo,Yme,yqo,Lqo,Ji,xqo,Kme,$qo,kqo,pO,Sqo,Rqo,Bqo,pv,Pqo,ao,Ly,Iqo,Zme,qqo,Nqo,Ia,jqo,ege,Dqo,Gqo,oge,Oqo,Vqo,rge,Xqo,zqo,Wqo,U,_v,tge,Qqo,Hqo,_O,Uqo,Jqo,Yqo,uv,age,Kqo,Zqo,uO,eNo,oNo,rNo,bv,nge,tNo,aNo,bO,nNo,sNo,lNo,vv,sge,iNo,dNo,vO,cNo,fNo,mNo,Fv,lge,gNo,hNo,FO,pNo,_No,uNo,Tv,ige,bNo,vNo,TO,FNo,TNo,MNo,Mv,dge,ENo,CNo,MO,wNo,ANo,yNo,Ev,cge,LNo,xNo,EO,$No,kNo,SNo,Cv,fge,RNo,BNo,CO,PNo,INo,qNo,wv,mge,NNo,jNo,wO,DNo,GNo,ONo,Av,gge,VNo,XNo,AO,zNo,WNo,QNo,yv,hge,HNo,UNo,yO,JNo,YNo,KNo,Lv,pge,ZNo,ejo,LO,ojo,rjo,tjo,xv,_ge,ajo,njo,xO,sjo,ljo,ijo,$v,uge,djo,cjo,$O,fjo,mjo,gjo,kv,bge,hjo,pjo,kO,_jo,ujo,bjo,Sv,vge,vjo,Fjo,SO,Tjo,Mjo,Ejo,Rv,Fge,Cjo,wjo,RO,Ajo,yjo,Ljo,Bv,Tge,xjo,$jo,BO,kjo,Sjo,Rjo,Pv,Mge,Bjo,Pjo,PO,Ijo,qjo,Njo,Iv,Ege,jjo,Djo,IO,Gjo,Ojo,Vjo,qv,Cge,Xjo,zjo,qO,Wjo,Qjo,Hjo,Nv,wge,Ujo,Jjo,NO,Yjo,Kjo,Zjo,jv,Age,eDo,oDo,jO,rDo,tDo,aDo,Dv,yge,nDo,sDo,DO,lDo,iDo,dDo,Gv,Lge,cDo,fDo,GO,mDo,gDo,hDo,Ov,xge,pDo,_Do,OO,uDo,bDo,vDo,Vv,$ge,FDo,TDo,VO,MDo,EDo,CDo,Xv,kge,wDo,ADo,XO,yDo,LDo,xDo,zv,Sge,$Do,kDo,zO,SDo,RDo,BDo,Wv,Rge,PDo,IDo,WO,qDo,NDo,jDo,Qv,Bge,DDo,GDo,QO,ODo,VDo,XDo,Hv,Pge,zDo,WDo,HO,QDo,HDo,UDo,Uv,JDo,Ige,YDo,KDo,qge,ZDo,eGo,Jv,Mqe,Yi,Yv,Nge,xy,oGo,jge,rGo,Eqe,qo,$y,tGo,Ki,aGo,UO,nGo,sGo,JO,lGo,iGo,dGo,ky,cGo,Dge,fGo,mGo,gGo,mt,Sy,hGo,Gge,pGo,_Go,Zi,uGo,Oge,bGo,vGo,YO,FGo,TGo,MGo,Kv,EGo,no,Ry,CGo,Vge,wGo,AGo,qa,yGo,Xge,LGo,xGo,zge,$Go,kGo,Wge,SGo,RGo,BGo,V,Zv,Qge,PGo,IGo,KO,qGo,NGo,jGo,eF,Hge,DGo,GGo,ZO,OGo,VGo,XGo,oF,Uge,zGo,WGo,eV,QGo,HGo,UGo,rF,Jge,JGo,YGo,oV,KGo,ZGo,eOo,tF,Yge,oOo,rOo,rV,tOo,aOo,nOo,aF,Kge,sOo,lOo,tV,iOo,dOo,cOo,nF,Zge,fOo,mOo,aV,gOo,hOo,pOo,sF,ehe,_Oo,uOo,nV,bOo,vOo,FOo,lF,ohe,TOo,MOo,sV,EOo,COo,wOo,iF,rhe,AOo,yOo,lV,LOo,xOo,$Oo,dF,the,kOo,SOo,iV,ROo,BOo,POo,cF,ahe,IOo,qOo,dV,NOo,jOo,DOo,fF,nhe,GOo,OOo,cV,VOo,XOo,zOo,mF,she,WOo,QOo,fV,HOo,UOo,JOo,gF,lhe,YOo,KOo,mV,ZOo,eVo,oVo,hF,ihe,rVo,tVo,gV,aVo,nVo,sVo,pF,dhe,lVo,iVo,hV,dVo,cVo,fVo,_F,che,mVo,gVo,pV,hVo,pVo,_Vo,uF,fhe,uVo,bVo,_V,vVo,FVo,TVo,bF,mhe,MVo,EVo,uV,CVo,wVo,AVo,vF,ghe,yVo,LVo,bV,xVo,$Vo,kVo,FF,hhe,SVo,RVo,vV,BVo,PVo,IVo,TF,phe,qVo,NVo,FV,jVo,DVo,GVo,MF,_he,OVo,VVo,TV,XVo,zVo,WVo,EF,uhe,QVo,HVo,MV,UVo,JVo,YVo,CF,bhe,KVo,ZVo,EV,eXo,oXo,rXo,wF,vhe,tXo,aXo,CV,nXo,sXo,lXo,AF,Fhe,iXo,dXo,wV,cXo,fXo,mXo,yF,The,gXo,hXo,AV,pXo,_Xo,uXo,LF,Mhe,bXo,vXo,yV,FXo,TXo,MXo,xF,Ehe,EXo,CXo,LV,wXo,AXo,yXo,$F,Che,LXo,xXo,xV,$Xo,kXo,SXo,kF,whe,RXo,BXo,$V,PXo,IXo,qXo,SF,Ahe,NXo,jXo,kV,DXo,GXo,OXo,RF,yhe,VXo,XXo,SV,zXo,WXo,QXo,BF,Lhe,HXo,UXo,RV,JXo,YXo,KXo,PF,xhe,ZXo,ezo,BV,ozo,rzo,tzo,IF,$he,azo,nzo,PV,szo,lzo,izo,qF,khe,dzo,czo,IV,fzo,mzo,gzo,NF,hzo,She,pzo,_zo,Rhe,uzo,bzo,jF,Cqe,ed,DF,Bhe,By,vzo,Phe,Fzo,wqe,No,Py,Tzo,od,Mzo,qV,Ezo,Czo,NV,wzo,Azo,yzo,Iy,Lzo,Ihe,xzo,$zo,kzo,gt,qy,Szo,qhe,Rzo,Bzo,rd,Pzo,Nhe,Izo,qzo,jV,Nzo,jzo,Dzo,GF,Gzo,so,Ny,Ozo,jhe,Vzo,Xzo,Na,zzo,Dhe,Wzo,Qzo,Ghe,Hzo,Uzo,Ohe,Jzo,Yzo,Kzo,Vhe,OF,Xhe,Zzo,eWo,DV,oWo,rWo,tWo,VF,aWo,zhe,nWo,sWo,Whe,lWo,iWo,XF,Aqe,td,zF,Qhe,jy,dWo,Hhe,cWo,yqe,jo,Dy,fWo,ad,mWo,GV,gWo,hWo,OV,pWo,_Wo,uWo,Gy,bWo,Uhe,vWo,FWo,TWo,ht,Oy,MWo,Jhe,EWo,CWo,nd,wWo,Yhe,AWo,yWo,VV,LWo,xWo,$Wo,WF,kWo,lo,Vy,SWo,Khe,RWo,BWo,ja,PWo,Zhe,IWo,qWo,epe,NWo,jWo,ope,DWo,GWo,OWo,Fe,QF,rpe,VWo,XWo,XV,zWo,WWo,QWo,HF,tpe,HWo,UWo,zV,JWo,YWo,KWo,UF,ape,ZWo,eQo,WV,oQo,rQo,tQo,Bs,npe,aQo,nQo,QV,sQo,lQo,HV,iQo,dQo,cQo,JF,spe,fQo,mQo,UV,gQo,hQo,pQo,pt,lpe,_Qo,uQo,JV,bQo,vQo,YV,FQo,TQo,KV,MQo,EQo,CQo,YF,ipe,wQo,AQo,ZV,yQo,LQo,xQo,KF,dpe,$Qo,kQo,eX,SQo,RQo,BQo,ZF,cpe,PQo,IQo,oX,qQo,NQo,jQo,e0,fpe,DQo,GQo,rX,OQo,VQo,XQo,o0,mpe,zQo,WQo,tX,QQo,HQo,UQo,r0,gpe,JQo,YQo,aX,KQo,ZQo,eHo,t0,hpe,oHo,rHo,nX,tHo,aHo,nHo,a0,sHo,ppe,lHo,iHo,_pe,dHo,cHo,n0,Lqe,sd,s0,upe,Xy,fHo,bpe,mHo,xqe,Do,zy,gHo,ld,hHo,sX,pHo,_Ho,lX,uHo,bHo,vHo,Wy,FHo,vpe,THo,MHo,EHo,_t,Qy,CHo,Fpe,wHo,AHo,id,yHo,Tpe,LHo,xHo,iX,$Ho,kHo,SHo,l0,RHo,io,Hy,BHo,Mpe,PHo,IHo,Da,qHo,Epe,NHo,jHo,Cpe,DHo,GHo,wpe,OHo,VHo,XHo,Ape,i0,ype,zHo,WHo,dX,QHo,HHo,UHo,d0,JHo,Lpe,YHo,KHo,xpe,ZHo,eUo,c0,$qe,dd,f0,$pe,Uy,oUo,kpe,rUo,kqe,Go,Jy,tUo,cd,aUo,cX,nUo,sUo,fX,lUo,iUo,dUo,Yy,cUo,Spe,fUo,mUo,gUo,ut,Ky,hUo,Rpe,pUo,_Uo,fd,uUo,Bpe,bUo,vUo,mX,FUo,TUo,MUo,m0,EUo,co,Zy,CUo,Ppe,wUo,AUo,Ga,yUo,Ipe,LUo,xUo,qpe,$Uo,kUo,Npe,SUo,RUo,BUo,ke,g0,jpe,PUo,IUo,gX,qUo,NUo,jUo,h0,Dpe,DUo,GUo,hX,OUo,VUo,XUo,p0,Gpe,zUo,WUo,pX,QUo,HUo,UUo,_0,Ope,JUo,YUo,_X,KUo,ZUo,eJo,u0,Vpe,oJo,rJo,uX,tJo,aJo,nJo,b0,Xpe,sJo,lJo,bX,iJo,dJo,cJo,v0,zpe,fJo,mJo,vX,gJo,hJo,pJo,F0,Wpe,_Jo,uJo,FX,bJo,vJo,FJo,T0,Qpe,TJo,MJo,TX,EJo,CJo,wJo,M0,AJo,Hpe,yJo,LJo,Upe,xJo,$Jo,E0,Sqe,md,C0,Jpe,eL,kJo,Ype,SJo,Rqe,Oo,oL,RJo,gd,BJo,MX,PJo,IJo,EX,qJo,NJo,jJo,rL,DJo,Kpe,GJo,OJo,VJo,bt,tL,XJo,Zpe,zJo,WJo,hd,QJo,e_e,HJo,UJo,CX,JJo,YJo,KJo,w0,ZJo,fo,aL,eYo,o_e,oYo,rYo,Oa,tYo,r_e,aYo,nYo,t_e,sYo,lYo,a_e,iYo,dYo,cYo,Kr,A0,n_e,fYo,mYo,wX,gYo,hYo,pYo,y0,s_e,_Yo,uYo,AX,bYo,vYo,FYo,L0,l_e,TYo,MYo,yX,EYo,CYo,wYo,x0,i_e,AYo,yYo,LX,LYo,xYo,$Yo,$0,d_e,kYo,SYo,xX,RYo,BYo,PYo,k0,IYo,c_e,qYo,NYo,f_e,jYo,DYo,S0,Bqe,pd,R0,m_e,nL,GYo,g_e,OYo,Pqe,Vo,sL,VYo,_d,XYo,$X,zYo,WYo,kX,QYo,HYo,UYo,lL,JYo,h_e,YYo,KYo,ZYo,vt,iL,eKo,p_e,oKo,rKo,ud,tKo,__e,aKo,nKo,SX,sKo,lKo,iKo,B0,dKo,mo,dL,cKo,u_e,fKo,mKo,Va,gKo,b_e,hKo,pKo,v_e,_Ko,uKo,F_e,bKo,vKo,FKo,Se,P0,T_e,TKo,MKo,RX,EKo,CKo,wKo,I0,M_e,AKo,yKo,BX,LKo,xKo,$Ko,q0,E_e,kKo,SKo,PX,RKo,BKo,PKo,N0,C_e,IKo,qKo,IX,NKo,jKo,DKo,j0,w_e,GKo,OKo,qX,VKo,XKo,zKo,D0,A_e,WKo,QKo,NX,HKo,UKo,JKo,G0,y_e,YKo,KKo,jX,ZKo,eZo,oZo,O0,L_e,rZo,tZo,DX,aZo,nZo,sZo,V0,x_e,lZo,iZo,GX,dZo,cZo,fZo,X0,mZo,$_e,gZo,hZo,k_e,pZo,_Zo,z0,Iqe,bd,W0,S_e,cL,uZo,R_e,bZo,qqe,Xo,fL,vZo,vd,FZo,OX,TZo,MZo,VX,EZo,CZo,wZo,mL,AZo,B_e,yZo,LZo,xZo,Ft,gL,$Zo,P_e,kZo,SZo,Fd,RZo,I_e,BZo,PZo,XX,IZo,qZo,NZo,Q0,jZo,go,hL,DZo,q_e,GZo,OZo,Xa,VZo,N_e,XZo,zZo,j_e,WZo,QZo,D_e,HZo,UZo,JZo,pL,H0,G_e,YZo,KZo,zX,ZZo,eer,oer,U0,O_e,rer,ter,WX,aer,ner,ser,J0,ler,V_e,ier,der,X_e,cer,fer,Y0,Nqe,Td,K0,z_e,_L,mer,W_e,ger,jqe,zo,uL,her,Md,per,QX,_er,uer,HX,ber,ver,Fer,bL,Ter,Q_e,Mer,Eer,Cer,Tt,vL,wer,H_e,Aer,yer,Ed,Ler,U_e,xer,$er,UX,ker,Ser,Rer,Z0,Ber,ho,FL,Per,J_e,Ier,qer,za,Ner,Y_e,jer,Der,K_e,Ger,Oer,Z_e,Ver,Xer,zer,Zr,eT,eue,Wer,Qer,JX,Her,Uer,Jer,oT,oue,Yer,Ker,YX,Zer,eor,oor,rT,rue,ror,tor,KX,aor,nor,sor,tT,tue,lor,ior,ZX,dor,cor,mor,aT,aue,gor,hor,ez,por,_or,uor,nT,bor,nue,vor,For,sue,Tor,Mor,sT,Dqe,Cd,lT,lue,TL,Eor,iue,Cor,Gqe,Wo,ML,wor,wd,Aor,oz,yor,Lor,rz,xor,$or,kor,EL,Sor,due,Ror,Bor,Por,Mt,CL,Ior,cue,qor,Nor,Ad,jor,fue,Dor,Gor,tz,Oor,Vor,Xor,iT,zor,po,wL,Wor,mue,Qor,Hor,Wa,Uor,gue,Jor,Yor,hue,Kor,Zor,pue,err,orr,rrr,yd,dT,_ue,trr,arr,az,nrr,srr,lrr,cT,uue,irr,drr,nz,crr,frr,mrr,fT,bue,grr,hrr,sz,prr,_rr,urr,mT,brr,vue,vrr,Frr,Fue,Trr,Mrr,gT,Oqe,Ld,hT,Tue,AL,Err,Mue,Crr,Vqe,Qo,yL,wrr,xd,Arr,lz,yrr,Lrr,iz,xrr,$rr,krr,LL,Srr,Eue,Rrr,Brr,Prr,Et,xL,Irr,Cue,qrr,Nrr,$d,jrr,wue,Drr,Grr,dz,Orr,Vrr,Xrr,pT,zrr,_o,$L,Wrr,Aue,Qrr,Hrr,Qa,Urr,yue,Jrr,Yrr,Lue,Krr,Zrr,xue,etr,otr,rtr,kL,_T,$ue,ttr,atr,cz,ntr,str,ltr,uT,kue,itr,dtr,fz,ctr,ftr,mtr,bT,gtr,Sue,htr,ptr,Rue,_tr,utr,vT,Xqe,kd,FT,Bue,SL,btr,Pue,vtr,zqe,Ho,RL,Ftr,Sd,Ttr,mz,Mtr,Etr,gz,Ctr,wtr,Atr,BL,ytr,Iue,Ltr,xtr,$tr,Ct,PL,ktr,que,Str,Rtr,Rd,Btr,Nue,Ptr,Itr,hz,qtr,Ntr,jtr,TT,Dtr,uo,IL,Gtr,jue,Otr,Vtr,Ha,Xtr,Due,ztr,Wtr,Gue,Qtr,Htr,Oue,Utr,Jtr,Ytr,Vue,MT,Xue,Ktr,Ztr,pz,ear,oar,rar,ET,tar,zue,aar,nar,Wue,sar,lar,CT,Wqe,Bd,wT,Que,qL,iar,Hue,dar,Qqe,Uo,NL,car,Pd,far,_z,mar,gar,uz,har,par,_ar,jL,uar,Uue,bar,Far,Tar,wt,DL,Mar,Jue,Ear,Car,Id,war,Yue,Aar,yar,bz,Lar,xar,$ar,AT,kar,bo,GL,Sar,Kue,Rar,Bar,Ua,Par,Zue,Iar,qar,e2e,Nar,jar,o2e,Dar,Gar,Oar,Ja,yT,r2e,Var,Xar,vz,zar,War,Qar,LT,t2e,Har,Uar,Fz,Jar,Yar,Kar,xT,a2e,Zar,enr,Tz,onr,rnr,tnr,$T,n2e,anr,nnr,Mz,snr,lnr,inr,kT,dnr,s2e,cnr,fnr,l2e,mnr,gnr,ST,Hqe,qd,RT,i2e,OL,hnr,d2e,pnr,Uqe,Jo,VL,_nr,Nd,unr,Ez,bnr,vnr,Cz,Fnr,Tnr,Mnr,XL,Enr,c2e,Cnr,wnr,Anr,At,zL,ynr,f2e,Lnr,xnr,jd,$nr,m2e,knr,Snr,wz,Rnr,Bnr,Pnr,BT,Inr,vo,WL,qnr,g2e,Nnr,jnr,Ya,Dnr,h2e,Gnr,Onr,p2e,Vnr,Xnr,_2e,znr,Wnr,Qnr,u2e,PT,b2e,Hnr,Unr,Az,Jnr,Ynr,Knr,IT,Znr,v2e,esr,osr,F2e,rsr,tsr,qT,Jqe,Dd,NT,T2e,QL,asr,M2e,nsr,Yqe,Yo,HL,ssr,Gd,lsr,yz,isr,dsr,Lz,csr,fsr,msr,UL,gsr,E2e,hsr,psr,_sr,yt,JL,usr,C2e,bsr,vsr,Od,Fsr,w2e,Tsr,Msr,xz,Esr,Csr,wsr,jT,Asr,wr,YL,ysr,A2e,Lsr,xsr,Ka,$sr,y2e,ksr,Ssr,L2e,Rsr,Bsr,x2e,Psr,Isr,qsr,N,DT,$2e,Nsr,jsr,$z,Dsr,Gsr,Osr,GT,k2e,Vsr,Xsr,kz,zsr,Wsr,Qsr,OT,S2e,Hsr,Usr,Sz,Jsr,Ysr,Ksr,VT,R2e,Zsr,elr,Rz,olr,rlr,tlr,XT,B2e,alr,nlr,Bz,slr,llr,ilr,zT,P2e,dlr,clr,Pz,flr,mlr,glr,WT,I2e,hlr,plr,Iz,_lr,ulr,blr,QT,q2e,vlr,Flr,qz,Tlr,Mlr,Elr,HT,N2e,Clr,wlr,Nz,Alr,ylr,Llr,UT,j2e,xlr,$lr,jz,klr,Slr,Rlr,JT,D2e,Blr,Plr,Dz,Ilr,qlr,Nlr,YT,G2e,jlr,Dlr,Gz,Glr,Olr,Vlr,KT,O2e,Xlr,zlr,Oz,Wlr,Qlr,Hlr,ZT,V2e,Ulr,Jlr,Vz,Ylr,Klr,Zlr,e7,X2e,eir,oir,Xz,rir,tir,air,o7,z2e,nir,sir,zz,lir,iir,dir,r7,W2e,cir,fir,Wz,mir,gir,hir,Ps,Q2e,pir,_ir,Qz,uir,bir,Hz,vir,Fir,Tir,t7,H2e,Mir,Eir,Uz,Cir,wir,Air,a7,U2e,yir,Lir,Jz,xir,$ir,kir,n7,J2e,Sir,Rir,Yz,Bir,Pir,Iir,s7,Y2e,qir,Nir,Kz,jir,Dir,Gir,l7,K2e,Oir,Vir,Zz,Xir,zir,Wir,i7,Z2e,Qir,Hir,eW,Uir,Jir,Yir,d7,e1e,Kir,Zir,oW,edr,odr,rdr,c7,o1e,tdr,adr,rW,ndr,sdr,ldr,f7,r1e,idr,ddr,tW,cdr,fdr,mdr,m7,t1e,gdr,hdr,aW,pdr,_dr,udr,g7,a1e,bdr,vdr,nW,Fdr,Tdr,Mdr,h7,n1e,Edr,Cdr,sW,wdr,Adr,ydr,p7,s1e,Ldr,xdr,lW,$dr,kdr,Sdr,_7,l1e,Rdr,Bdr,iW,Pdr,Idr,qdr,u7,i1e,Ndr,jdr,dW,Ddr,Gdr,Odr,b7,d1e,Vdr,Xdr,cW,zdr,Wdr,Qdr,v7,c1e,Hdr,Udr,fW,Jdr,Ydr,Kdr,F7,f1e,Zdr,ecr,mW,ocr,rcr,tcr,T7,m1e,acr,ncr,gW,scr,lcr,icr,M7,g1e,dcr,ccr,hW,fcr,mcr,gcr,E7,h1e,hcr,pcr,pW,_cr,ucr,bcr,C7,p1e,vcr,Fcr,_W,Tcr,Mcr,Ecr,w7,_1e,Ccr,wcr,uW,Acr,ycr,Lcr,A7,u1e,xcr,$cr,bW,kcr,Scr,Rcr,y7,b1e,Bcr,Pcr,vW,Icr,qcr,Ncr,L7,v1e,jcr,Dcr,FW,Gcr,Ocr,Vcr,x7,F1e,Xcr,zcr,TW,Wcr,Qcr,Hcr,$7,T1e,Ucr,Jcr,MW,Ycr,Kcr,Zcr,k7,Kqe,Vd,S7,M1e,KL,efr,E1e,ofr,Zqe,Ko,ZL,rfr,Xd,tfr,EW,afr,nfr,CW,sfr,lfr,ifr,e8,dfr,C1e,cfr,ffr,mfr,Lt,o8,gfr,w1e,hfr,pfr,zd,_fr,A1e,ufr,bfr,wW,vfr,Ffr,Tfr,R7,Mfr,Ar,r8,Efr,y1e,Cfr,wfr,Za,Afr,L1e,yfr,Lfr,x1e,xfr,$fr,$1e,kfr,Sfr,Rfr,se,B7,k1e,Bfr,Pfr,AW,Ifr,qfr,Nfr,P7,S1e,jfr,Dfr,yW,Gfr,Ofr,Vfr,I7,R1e,Xfr,zfr,LW,Wfr,Qfr,Hfr,q7,B1e,Ufr,Jfr,xW,Yfr,Kfr,Zfr,N7,P1e,emr,omr,$W,rmr,tmr,amr,j7,I1e,nmr,smr,kW,lmr,imr,dmr,D7,q1e,cmr,fmr,SW,mmr,gmr,hmr,G7,N1e,pmr,_mr,RW,umr,bmr,vmr,O7,j1e,Fmr,Tmr,BW,Mmr,Emr,Cmr,V7,D1e,wmr,Amr,PW,ymr,Lmr,xmr,X7,G1e,$mr,kmr,IW,Smr,Rmr,Bmr,z7,O1e,Pmr,Imr,qW,qmr,Nmr,jmr,W7,V1e,Dmr,Gmr,NW,Omr,Vmr,Xmr,Q7,X1e,zmr,Wmr,jW,Qmr,Hmr,Umr,H7,z1e,Jmr,Ymr,DW,Kmr,Zmr,egr,U7,W1e,ogr,rgr,GW,tgr,agr,ngr,J7,Q1e,sgr,lgr,OW,igr,dgr,cgr,Y7,H1e,fgr,mgr,VW,ggr,hgr,pgr,K7,U1e,_gr,ugr,XW,bgr,vgr,Fgr,Z7,J1e,Tgr,Mgr,zW,Egr,Cgr,wgr,eM,Y1e,Agr,ygr,WW,Lgr,xgr,$gr,oM,K1e,kgr,Sgr,QW,Rgr,Bgr,Pgr,rM,Z1e,Igr,qgr,HW,Ngr,jgr,Dgr,tM,eNe,Wd,aM,ebe,t8,Ggr,obe,Ogr,oNe,Zo,a8,Vgr,Qd,Xgr,UW,zgr,Wgr,JW,Qgr,Hgr,Ugr,n8,Jgr,rbe,Ygr,Kgr,Zgr,xt,s8,ehr,tbe,ohr,rhr,Hd,thr,abe,ahr,nhr,YW,shr,lhr,ihr,nM,dhr,yr,l8,chr,nbe,fhr,mhr,en,ghr,sbe,hhr,phr,lbe,_hr,uhr,ibe,bhr,vhr,Fhr,Te,sM,dbe,Thr,Mhr,KW,Ehr,Chr,whr,lM,cbe,Ahr,yhr,ZW,Lhr,xhr,$hr,iM,fbe,khr,Shr,eQ,Rhr,Bhr,Phr,dM,mbe,Ihr,qhr,oQ,Nhr,jhr,Dhr,cM,gbe,Ghr,Ohr,rQ,Vhr,Xhr,zhr,fM,hbe,Whr,Qhr,tQ,Hhr,Uhr,Jhr,mM,pbe,Yhr,Khr,aQ,Zhr,epr,opr,gM,_be,rpr,tpr,nQ,apr,npr,spr,hM,ube,lpr,ipr,sQ,dpr,cpr,fpr,pM,bbe,mpr,gpr,lQ,hpr,ppr,_pr,_M,vbe,upr,bpr,iQ,vpr,Fpr,Tpr,uM,Fbe,Mpr,Epr,dQ,Cpr,wpr,Apr,bM,rNe,Ud,vM,Tbe,i8,ypr,Mbe,Lpr,tNe,er,d8,xpr,Jd,$pr,cQ,kpr,Spr,fQ,Rpr,Bpr,Ppr,c8,Ipr,Ebe,qpr,Npr,jpr,$t,f8,Dpr,Cbe,Gpr,Opr,Yd,Vpr,wbe,Xpr,zpr,mQ,Wpr,Qpr,Hpr,FM,Upr,Lr,m8,Jpr,Abe,Ypr,Kpr,on,Zpr,ybe,e_r,o_r,Lbe,r_r,t_r,xbe,a_r,n_r,s_r,rn,TM,$be,l_r,i_r,gQ,d_r,c_r,f_r,MM,kbe,m_r,g_r,hQ,h_r,p_r,__r,EM,Sbe,u_r,b_r,pQ,v_r,F_r,T_r,CM,Rbe,M_r,E_r,_Q,C_r,w_r,A_r,wM,aNe,Kd,AM,Bbe,g8,y_r,Pbe,L_r,nNe,or,h8,x_r,Zd,$_r,uQ,k_r,S_r,bQ,R_r,B_r,P_r,p8,I_r,Ibe,q_r,N_r,j_r,kt,_8,D_r,qbe,G_r,O_r,ec,V_r,Nbe,X_r,z_r,vQ,W_r,Q_r,H_r,yM,U_r,xr,u8,J_r,jbe,Y_r,K_r,tn,Z_r,Dbe,eur,our,Gbe,rur,tur,Obe,aur,nur,sur,ie,LM,Vbe,lur,iur,FQ,dur,cur,fur,xM,Xbe,mur,gur,TQ,hur,pur,_ur,$M,zbe,uur,bur,MQ,vur,Fur,Tur,kM,Wbe,Mur,Eur,EQ,Cur,wur,Aur,SM,Qbe,yur,Lur,CQ,xur,$ur,kur,RM,Hbe,Sur,Rur,wQ,Bur,Pur,Iur,BM,Ube,qur,Nur,AQ,jur,Dur,Gur,PM,Jbe,Our,Vur,yQ,Xur,zur,Wur,IM,Ybe,Qur,Hur,LQ,Uur,Jur,Yur,qM,Kbe,Kur,Zur,xQ,e2r,o2r,r2r,NM,Zbe,t2r,a2r,$Q,n2r,s2r,l2r,jM,eve,i2r,d2r,kQ,c2r,f2r,m2r,DM,ove,g2r,h2r,SQ,p2r,_2r,u2r,GM,rve,b2r,v2r,RQ,F2r,T2r,M2r,OM,tve,E2r,C2r,BQ,w2r,A2r,y2r,VM,ave,L2r,x2r,PQ,$2r,k2r,S2r,XM,nve,R2r,B2r,IQ,P2r,I2r,q2r,zM,sve,N2r,j2r,qQ,D2r,G2r,O2r,WM,lve,V2r,X2r,NQ,z2r,W2r,Q2r,QM,ive,H2r,U2r,jQ,J2r,Y2r,K2r,HM,sNe,oc,UM,dve,b8,Z2r,cve,e1r,lNe,rr,v8,o1r,rc,r1r,DQ,t1r,a1r,GQ,n1r,s1r,l1r,F8,i1r,fve,d1r,c1r,f1r,St,T8,m1r,mve,g1r,h1r,tc,p1r,gve,_1r,u1r,OQ,b1r,v1r,F1r,JM,T1r,$r,M8,M1r,hve,E1r,C1r,an,w1r,pve,A1r,y1r,_ve,L1r,x1r,uve,$1r,k1r,S1r,ye,YM,bve,R1r,B1r,VQ,P1r,I1r,q1r,KM,vve,N1r,j1r,XQ,D1r,G1r,O1r,ZM,Fve,V1r,X1r,zQ,z1r,W1r,Q1r,e4,Tve,H1r,U1r,WQ,J1r,Y1r,K1r,o4,Mve,Z1r,ebr,QQ,obr,rbr,tbr,r4,Eve,abr,nbr,HQ,sbr,lbr,ibr,t4,Cve,dbr,cbr,UQ,fbr,mbr,gbr,a4,wve,hbr,pbr,JQ,_br,ubr,bbr,n4,Ave,vbr,Fbr,YQ,Tbr,Mbr,Ebr,s4,yve,Cbr,wbr,KQ,Abr,ybr,Lbr,l4,iNe,ac,i4,Lve,E8,xbr,xve,$br,dNe,tr,C8,kbr,nc,Sbr,ZQ,Rbr,Bbr,eH,Pbr,Ibr,qbr,w8,Nbr,$ve,jbr,Dbr,Gbr,Rt,A8,Obr,kve,Vbr,Xbr,sc,zbr,Sve,Wbr,Qbr,oH,Hbr,Ubr,Jbr,d4,Ybr,kr,y8,Kbr,Rve,Zbr,evr,nn,ovr,Bve,rvr,tvr,Pve,avr,nvr,Ive,svr,lvr,ivr,ee,c4,qve,dvr,cvr,rH,fvr,mvr,gvr,f4,Nve,hvr,pvr,tH,_vr,uvr,bvr,m4,jve,vvr,Fvr,aH,Tvr,Mvr,Evr,g4,Dve,Cvr,wvr,nH,Avr,yvr,Lvr,h4,Gve,xvr,$vr,sH,kvr,Svr,Rvr,p4,Ove,Bvr,Pvr,lH,Ivr,qvr,Nvr,_4,Vve,jvr,Dvr,iH,Gvr,Ovr,Vvr,u4,Xve,Xvr,zvr,dH,Wvr,Qvr,Hvr,b4,zve,Uvr,Jvr,cH,Yvr,Kvr,Zvr,v4,Wve,eFr,oFr,fH,rFr,tFr,aFr,F4,Qve,nFr,sFr,mH,lFr,iFr,dFr,T4,Hve,cFr,fFr,gH,mFr,gFr,hFr,M4,Uve,pFr,_Fr,hH,uFr,bFr,vFr,E4,Jve,FFr,TFr,pH,MFr,EFr,CFr,C4,Yve,wFr,AFr,_H,yFr,LFr,xFr,w4,Kve,$Fr,kFr,uH,SFr,RFr,BFr,A4,Zve,PFr,IFr,bH,qFr,NFr,jFr,y4,eFe,DFr,GFr,vH,OFr,VFr,XFr,L4,oFe,zFr,WFr,FH,QFr,HFr,UFr,x4,rFe,JFr,YFr,TH,KFr,ZFr,e0r,$4,tFe,o0r,r0r,MH,t0r,a0r,n0r,k4,aFe,s0r,l0r,EH,i0r,d0r,c0r,S4,nFe,f0r,m0r,CH,g0r,h0r,p0r,R4,sFe,_0r,u0r,wH,b0r,v0r,F0r,B4,lFe,T0r,M0r,AH,E0r,C0r,w0r,P4,iFe,A0r,y0r,yH,L0r,x0r,$0r,I4,cNe,lc,q4,dFe,L8,k0r,cFe,S0r,fNe,ar,x8,R0r,ic,B0r,LH,P0r,I0r,xH,q0r,N0r,j0r,$8,D0r,fFe,G0r,O0r,V0r,Bt,k8,X0r,mFe,z0r,W0r,dc,Q0r,gFe,H0r,U0r,$H,J0r,Y0r,K0r,N4,Z0r,Sr,S8,eTr,hFe,oTr,rTr,sn,tTr,pFe,aTr,nTr,_Fe,sTr,lTr,uFe,iTr,dTr,cTr,he,j4,bFe,fTr,mTr,kH,gTr,hTr,pTr,D4,vFe,_Tr,uTr,SH,bTr,vTr,FTr,G4,FFe,TTr,MTr,RH,ETr,CTr,wTr,O4,TFe,ATr,yTr,BH,LTr,xTr,$Tr,V4,MFe,kTr,STr,PH,RTr,BTr,PTr,X4,EFe,ITr,qTr,IH,NTr,jTr,DTr,z4,CFe,GTr,OTr,qH,VTr,XTr,zTr,W4,wFe,WTr,QTr,NH,HTr,UTr,JTr,Q4,AFe,YTr,KTr,jH,ZTr,e7r,o7r,H4,yFe,r7r,t7r,DH,a7r,n7r,s7r,U4,LFe,l7r,i7r,GH,d7r,c7r,f7r,J4,xFe,m7r,g7r,OH,h7r,p7r,_7r,Y4,$Fe,u7r,b7r,VH,v7r,F7r,T7r,K4,kFe,M7r,E7r,XH,C7r,w7r,A7r,Z4,SFe,y7r,L7r,zH,x7r,$7r,k7r,eE,RFe,S7r,R7r,WH,B7r,P7r,I7r,oE,BFe,q7r,N7r,QH,j7r,D7r,G7r,rE,mNe,cc,tE,PFe,R8,O7r,IFe,V7r,gNe,nr,B8,X7r,fc,z7r,HH,W7r,Q7r,UH,H7r,U7r,J7r,P8,Y7r,qFe,K7r,Z7r,eMr,Pt,I8,oMr,NFe,rMr,tMr,mc,aMr,jFe,nMr,sMr,JH,lMr,iMr,dMr,aE,cMr,Rr,q8,fMr,DFe,mMr,gMr,ln,hMr,GFe,pMr,_Mr,OFe,uMr,bMr,VFe,vMr,FMr,TMr,N8,nE,XFe,MMr,EMr,YH,CMr,wMr,AMr,sE,zFe,yMr,LMr,KH,xMr,$Mr,kMr,lE,hNe,gc,iE,WFe,j8,SMr,QFe,RMr,pNe,sr,D8,BMr,hc,PMr,ZH,IMr,qMr,eU,NMr,jMr,DMr,G8,GMr,HFe,OMr,VMr,XMr,It,O8,zMr,UFe,WMr,QMr,pc,HMr,JFe,UMr,JMr,oU,YMr,KMr,ZMr,dE,e4r,Br,V8,o4r,YFe,r4r,t4r,dn,a4r,KFe,n4r,s4r,ZFe,l4r,i4r,e0e,d4r,c4r,f4r,o0e,cE,r0e,m4r,g4r,rU,h4r,p4r,_4r,fE,_Ne,_c,mE,t0e,X8,u4r,a0e,b4r,uNe,lr,z8,v4r,uc,F4r,tU,T4r,M4r,aU,E4r,C4r,w4r,W8,A4r,n0e,y4r,L4r,x4r,qt,Q8,$4r,s0e,k4r,S4r,bc,R4r,l0e,B4r,P4r,nU,I4r,q4r,N4r,gE,j4r,Pr,H8,D4r,i0e,G4r,O4r,cn,V4r,d0e,X4r,z4r,c0e,W4r,Q4r,f0e,H4r,U4r,J4r,de,hE,m0e,Y4r,K4r,sU,Z4r,eEr,oEr,pE,g0e,rEr,tEr,lU,aEr,nEr,sEr,_E,h0e,lEr,iEr,iU,dEr,cEr,fEr,uE,p0e,mEr,gEr,dU,hEr,pEr,_Er,bE,_0e,uEr,bEr,cU,vEr,FEr,TEr,vE,u0e,MEr,EEr,fU,CEr,wEr,AEr,FE,b0e,yEr,LEr,mU,xEr,$Er,kEr,TE,v0e,SEr,REr,gU,BEr,PEr,IEr,ME,F0e,qEr,NEr,hU,jEr,DEr,GEr,EE,T0e,OEr,VEr,pU,XEr,zEr,WEr,CE,M0e,QEr,HEr,_U,UEr,JEr,YEr,wE,E0e,KEr,ZEr,uU,eCr,oCr,rCr,AE,C0e,tCr,aCr,bU,nCr,sCr,lCr,yE,w0e,iCr,dCr,vU,cCr,fCr,mCr,LE,A0e,gCr,hCr,FU,pCr,_Cr,uCr,xE,y0e,bCr,vCr,TU,FCr,TCr,MCr,$E,L0e,ECr,CCr,MU,wCr,ACr,yCr,kE,x0e,LCr,xCr,EU,$Cr,kCr,SCr,SE,$0e,RCr,BCr,CU,PCr,ICr,qCr,RE,k0e,NCr,jCr,wU,DCr,GCr,OCr,BE,bNe,vc,PE,S0e,U8,VCr,R0e,XCr,vNe,ir,J8,zCr,Fc,WCr,AU,QCr,HCr,yU,UCr,JCr,YCr,Y8,KCr,B0e,ZCr,e5r,o5r,Nt,K8,r5r,P0e,t5r,a5r,Tc,n5r,I0e,s5r,l5r,LU,i5r,d5r,c5r,IE,f5r,Ir,Z8,m5r,q0e,g5r,h5r,fn,p5r,N0e,_5r,u5r,j0e,b5r,v5r,D0e,F5r,T5r,M5r,ce,qE,G0e,E5r,C5r,xU,w5r,A5r,y5r,NE,O0e,L5r,x5r,$U,$5r,k5r,S5r,jE,V0e,R5r,B5r,kU,P5r,I5r,q5r,DE,X0e,N5r,j5r,SU,D5r,G5r,O5r,GE,z0e,V5r,X5r,RU,z5r,W5r,Q5r,OE,W0e,H5r,U5r,BU,J5r,Y5r,K5r,VE,Q0e,Z5r,e3r,PU,o3r,r3r,t3r,XE,H0e,a3r,n3r,IU,s3r,l3r,i3r,zE,U0e,d3r,c3r,qU,f3r,m3r,g3r,WE,J0e,h3r,p3r,NU,_3r,u3r,b3r,QE,Y0e,v3r,F3r,jU,T3r,M3r,E3r,HE,K0e,C3r,w3r,DU,A3r,y3r,L3r,UE,Z0e,x3r,$3r,GU,k3r,S3r,R3r,JE,eTe,B3r,P3r,OU,I3r,q3r,N3r,YE,oTe,j3r,D3r,VU,G3r,O3r,V3r,KE,rTe,X3r,z3r,XU,W3r,Q3r,H3r,ZE,tTe,U3r,J3r,zU,Y3r,K3r,Z3r,eC,aTe,ewr,owr,WU,rwr,twr,awr,oC,nTe,nwr,swr,QU,lwr,iwr,dwr,rC,sTe,cwr,fwr,HU,mwr,gwr,hwr,tC,FNe,Mc,aC,lTe,e9,pwr,iTe,_wr,TNe,dr,o9,uwr,Ec,bwr,UU,vwr,Fwr,JU,Twr,Mwr,Ewr,r9,Cwr,dTe,wwr,Awr,ywr,jt,t9,Lwr,cTe,xwr,$wr,Cc,kwr,fTe,Swr,Rwr,YU,Bwr,Pwr,Iwr,nC,qwr,qr,a9,Nwr,mTe,jwr,Dwr,mn,Gwr,gTe,Owr,Vwr,hTe,Xwr,zwr,pTe,Wwr,Qwr,Hwr,_Te,sC,uTe,Uwr,Jwr,KU,Ywr,Kwr,Zwr,lC,MNe,wc,iC,bTe,n9,eAr,vTe,oAr,ENe,cr,s9,rAr,Ac,tAr,ZU,aAr,nAr,eJ,sAr,lAr,iAr,l9,dAr,FTe,cAr,fAr,mAr,Dt,i9,gAr,TTe,hAr,pAr,yc,_Ar,MTe,uAr,bAr,oJ,vAr,FAr,TAr,dC,MAr,Nr,d9,EAr,ETe,CAr,wAr,gn,AAr,CTe,yAr,LAr,wTe,xAr,$Ar,ATe,kAr,SAr,RAr,yTe,cC,LTe,BAr,PAr,rJ,IAr,qAr,NAr,fC,CNe,Lc,mC,xTe,c9,jAr,$Te,DAr,wNe,fr,f9,GAr,xc,OAr,tJ,VAr,XAr,aJ,zAr,WAr,QAr,m9,HAr,kTe,UAr,JAr,YAr,Gt,g9,KAr,STe,ZAr,e6r,$c,o6r,RTe,r6r,t6r,nJ,a6r,n6r,s6r,gC,l6r,jr,h9,i6r,BTe,d6r,c6r,hn,f6r,PTe,m6r,g6r,ITe,h6r,p6r,qTe,_6r,u6r,b6r,re,hC,NTe,v6r,F6r,sJ,T6r,M6r,E6r,pC,jTe,C6r,w6r,lJ,A6r,y6r,L6r,_C,DTe,x6r,$6r,iJ,k6r,S6r,R6r,uC,GTe,B6r,P6r,dJ,I6r,q6r,N6r,bC,OTe,j6r,D6r,cJ,G6r,O6r,V6r,vC,VTe,X6r,z6r,fJ,W6r,Q6r,H6r,FC,XTe,U6r,J6r,mJ,Y6r,K6r,Z6r,TC,zTe,eyr,oyr,gJ,ryr,tyr,ayr,MC,WTe,nyr,syr,hJ,lyr,iyr,dyr,EC,QTe,cyr,fyr,pJ,myr,gyr,hyr,CC,HTe,pyr,_yr,_J,uyr,byr,vyr,wC,UTe,Fyr,Tyr,uJ,Myr,Eyr,Cyr,AC,JTe,wyr,Ayr,bJ,yyr,Lyr,xyr,yC,YTe,$yr,kyr,vJ,Syr,Ryr,Byr,LC,KTe,Pyr,Iyr,FJ,qyr,Nyr,jyr,xC,ZTe,Dyr,Gyr,TJ,Oyr,Vyr,Xyr,$C,e7e,zyr,Wyr,MJ,Qyr,Hyr,Uyr,kC,o7e,Jyr,Yyr,EJ,Kyr,Zyr,eLr,SC,r7e,oLr,rLr,CJ,tLr,aLr,nLr,RC,t7e,sLr,lLr,wJ,iLr,dLr,cLr,BC,a7e,fLr,mLr,AJ,gLr,hLr,pLr,PC,n7e,_Lr,uLr,yJ,bLr,vLr,FLr,IC,s7e,TLr,MLr,LJ,ELr,CLr,wLr,qC,l7e,ALr,yLr,xJ,LLr,xLr,$Lr,NC,i7e,kLr,SLr,$J,RLr,BLr,PLr,jC,ANe,kc,DC,d7e,p9,ILr,c7e,qLr,yNe,mr,_9,NLr,Sc,jLr,kJ,DLr,GLr,SJ,OLr,VLr,XLr,u9,zLr,f7e,WLr,QLr,HLr,Ot,b9,ULr,m7e,JLr,YLr,Rc,KLr,g7e,ZLr,e8r,RJ,o8r,r8r,t8r,GC,a8r,Dr,v9,n8r,h7e,s8r,l8r,pn,i8r,p7e,d8r,c8r,_7e,f8r,m8r,u7e,g8r,h8r,p8r,Re,OC,b7e,_8r,u8r,BJ,b8r,v8r,F8r,VC,v7e,T8r,M8r,PJ,E8r,C8r,w8r,XC,F7e,A8r,y8r,IJ,L8r,x8r,$8r,zC,T7e,k8r,S8r,qJ,R8r,B8r,P8r,WC,M7e,I8r,q8r,NJ,N8r,j8r,D8r,QC,E7e,G8r,O8r,jJ,V8r,X8r,z8r,HC,C7e,W8r,Q8r,DJ,H8r,U8r,J8r,UC,w7e,Y8r,K8r,GJ,Z8r,e9r,o9r,JC,A7e,r9r,t9r,OJ,a9r,n9r,s9r,YC,LNe,Bc,KC,y7e,F9,l9r,L7e,i9r,xNe,gr,T9,d9r,Pc,c9r,VJ,f9r,m9r,XJ,g9r,h9r,p9r,M9,_9r,x7e,u9r,b9r,v9r,Vt,E9,F9r,$7e,T9r,M9r,Ic,E9r,k7e,C9r,w9r,zJ,A9r,y9r,L9r,ZC,x9r,Gr,C9,$9r,S7e,k9r,S9r,_n,R9r,R7e,B9r,P9r,B7e,I9r,q9r,P7e,N9r,j9r,D9r,Me,e5,I7e,G9r,O9r,WJ,V9r,X9r,z9r,o5,q7e,W9r,Q9r,QJ,H9r,U9r,J9r,r5,N7e,Y9r,K9r,HJ,Z9r,exr,oxr,t5,j7e,rxr,txr,UJ,axr,nxr,sxr,a5,D7e,lxr,ixr,JJ,dxr,cxr,fxr,n5,G7e,mxr,gxr,YJ,hxr,pxr,_xr,s5,O7e,uxr,bxr,KJ,vxr,Fxr,Txr,l5,V7e,Mxr,Exr,ZJ,Cxr,wxr,Axr,i5,X7e,yxr,Lxr,eY,xxr,$xr,kxr,d5,z7e,Sxr,Rxr,oY,Bxr,Pxr,Ixr,c5,W7e,qxr,Nxr,rY,jxr,Dxr,Gxr,f5,Q7e,Oxr,Vxr,tY,Xxr,zxr,Wxr,m5,$Ne,qc,g5,H7e,w9,Qxr,U7e,Hxr,kNe,hr,A9,Uxr,Nc,Jxr,aY,Yxr,Kxr,nY,Zxr,e$r,o$r,y9,r$r,J7e,t$r,a$r,n$r,Xt,L9,s$r,Y7e,l$r,i$r,jc,d$r,K7e,c$r,f$r,sY,m$r,g$r,h$r,h5,p$r,Or,x9,_$r,Z7e,u$r,b$r,un,v$r,eMe,F$r,T$r,oMe,M$r,E$r,rMe,C$r,w$r,A$r,Le,p5,tMe,y$r,L$r,lY,x$r,$$r,k$r,_5,aMe,S$r,R$r,iY,B$r,P$r,I$r,u5,nMe,q$r,N$r,dY,j$r,D$r,G$r,b5,sMe,O$r,V$r,cY,X$r,z$r,W$r,v5,lMe,Q$r,H$r,fY,U$r,J$r,Y$r,F5,iMe,K$r,Z$r,mY,ekr,okr,rkr,T5,dMe,tkr,akr,gY,nkr,skr,lkr,M5,cMe,ikr,dkr,hY,ckr,fkr,mkr,E5,fMe,gkr,hkr,pY,pkr,_kr,ukr,C5,mMe,bkr,vkr,_Y,Fkr,Tkr,Mkr,w5,SNe,Dc,A5,gMe,$9,Ekr,hMe,Ckr,RNe,pr,k9,wkr,Gc,Akr,uY,ykr,Lkr,bY,xkr,$kr,kkr,S9,Skr,pMe,Rkr,Bkr,Pkr,zt,R9,Ikr,_Me,qkr,Nkr,Oc,jkr,uMe,Dkr,Gkr,vY,Okr,Vkr,Xkr,y5,zkr,Vr,B9,Wkr,bMe,Qkr,Hkr,bn,Ukr,vMe,Jkr,Ykr,FMe,Kkr,Zkr,TMe,eSr,oSr,rSr,Be,L5,MMe,tSr,aSr,FY,nSr,sSr,lSr,x5,EMe,iSr,dSr,TY,cSr,fSr,mSr,$5,CMe,gSr,hSr,MY,pSr,_Sr,uSr,k5,wMe,bSr,vSr,EY,FSr,TSr,MSr,S5,AMe,ESr,CSr,CY,wSr,ASr,ySr,R5,yMe,LSr,xSr,wY,$Sr,kSr,SSr,B5,LMe,RSr,BSr,AY,PSr,ISr,qSr,P5,xMe,NSr,jSr,yY,DSr,GSr,OSr,I5,$Me,VSr,XSr,LY,zSr,WSr,QSr,q5,BNe,Vc,N5,kMe,P9,HSr,SMe,USr,PNe,_r,I9,JSr,Xc,YSr,xY,KSr,ZSr,$Y,eRr,oRr,rRr,q9,tRr,RMe,aRr,nRr,sRr,Wt,N9,lRr,BMe,iRr,dRr,zc,cRr,PMe,fRr,mRr,kY,gRr,hRr,pRr,j5,_Rr,Xr,j9,uRr,IMe,bRr,vRr,vn,FRr,qMe,TRr,MRr,NMe,ERr,CRr,jMe,wRr,ARr,yRr,xe,D5,DMe,LRr,xRr,SY,$Rr,kRr,SRr,G5,GMe,RRr,BRr,RY,PRr,IRr,qRr,O5,OMe,NRr,jRr,BY,DRr,GRr,ORr,V5,VMe,VRr,XRr,PY,zRr,WRr,QRr,X5,XMe,HRr,URr,IY,JRr,YRr,KRr,z5,zMe,ZRr,eBr,qY,oBr,rBr,tBr,W5,WMe,aBr,nBr,NY,sBr,lBr,iBr,Q5,QMe,dBr,cBr,jY,fBr,mBr,gBr,H5,HMe,hBr,pBr,DY,_Br,uBr,bBr,U5,UMe,vBr,FBr,GY,TBr,MBr,EBr,J5,INe,Wc,Y5,JMe,D9,CBr,YMe,wBr,qNe,ur,G9,ABr,Qc,yBr,OY,LBr,xBr,VY,$Br,kBr,SBr,O9,RBr,KMe,BBr,PBr,IBr,Qt,V9,qBr,ZMe,NBr,jBr,Hc,DBr,e4e,GBr,OBr,XY,VBr,XBr,zBr,K5,WBr,zr,X9,QBr,o4e,HBr,UBr,Fn,JBr,r4e,YBr,KBr,t4e,ZBr,ePr,a4e,oPr,rPr,tPr,$e,Z5,n4e,aPr,nPr,zY,sPr,lPr,iPr,e3,s4e,dPr,cPr,WY,fPr,mPr,gPr,o3,l4e,hPr,pPr,QY,_Pr,uPr,bPr,r3,i4e,vPr,FPr,HY,TPr,MPr,EPr,t3,d4e,CPr,wPr,UY,APr,yPr,LPr,a3,c4e,xPr,$Pr,JY,kPr,SPr,RPr,n3,f4e,BPr,PPr,YY,IPr,qPr,NPr,s3,m4e,jPr,DPr,KY,GPr,OPr,VPr,l3,g4e,XPr,zPr,ZY,WPr,QPr,HPr,i3,h4e,UPr,JPr,eK,YPr,KPr,ZPr,d3,NNe,Uc,c3,p4e,z9,eIr,_4e,oIr,jNe,br,W9,rIr,Jc,tIr,oK,aIr,nIr,rK,sIr,lIr,iIr,Q9,dIr,u4e,cIr,fIr,mIr,Ht,H9,gIr,b4e,hIr,pIr,Yc,_Ir,v4e,uIr,bIr,tK,vIr,FIr,TIr,f3,MIr,Wr,U9,EIr,F4e,CIr,wIr,Tn,AIr,T4e,yIr,LIr,M4e,xIr,$Ir,E4e,kIr,SIr,RIr,De,m3,C4e,BIr,PIr,aK,IIr,qIr,NIr,g3,w4e,jIr,DIr,nK,GIr,OIr,VIr,h3,A4e,XIr,zIr,sK,WIr,QIr,HIr,p3,y4e,UIr,JIr,lK,YIr,KIr,ZIr,_3,L4e,eqr,oqr,iK,rqr,tqr,aqr,u3,x4e,nqr,sqr,dK,lqr,iqr,dqr,b3,$4e,cqr,fqr,cK,mqr,gqr,hqr,v3,k4e,pqr,_qr,fK,uqr,bqr,vqr,F3,DNe,Kc,T3,S4e,J9,Fqr,R4e,Tqr,GNe,vr,Y9,Mqr,Zc,Eqr,mK,Cqr,wqr,gK,Aqr,yqr,Lqr,K9,xqr,B4e,$qr,kqr,Sqr,Ut,Z9,Rqr,P4e,Bqr,Pqr,ef,Iqr,I4e,qqr,Nqr,hK,jqr,Dqr,Gqr,M3,Oqr,Qr,ex,Vqr,q4e,Xqr,zqr,Mn,Wqr,N4e,Qqr,Hqr,j4e,Uqr,Jqr,D4e,Yqr,Kqr,Zqr,Ge,E3,G4e,eNr,oNr,pK,rNr,tNr,aNr,C3,O4e,nNr,sNr,_K,lNr,iNr,dNr,w3,V4e,cNr,fNr,uK,mNr,gNr,hNr,A3,X4e,pNr,_Nr,bK,uNr,bNr,vNr,y3,z4e,FNr,TNr,vK,MNr,ENr,CNr,L3,W4e,wNr,ANr,FK,yNr,LNr,xNr,x3,Q4e,$Nr,kNr,TK,SNr,RNr,BNr,$3,H4e,PNr,INr,MK,qNr,NNr,jNr,k3,ONe,of,S3,U4e,ox,DNr,J4e,GNr,VNe,Fr,rx,ONr,rf,VNr,EK,XNr,zNr,CK,WNr,QNr,HNr,tx,UNr,Y4e,JNr,YNr,KNr,Jt,ax,ZNr,K4e,ejr,ojr,tf,rjr,Z4e,tjr,ajr,wK,njr,sjr,ljr,R3,ijr,Hr,nx,djr,eEe,cjr,fjr,En,mjr,oEe,gjr,hjr,rEe,pjr,_jr,tEe,ujr,bjr,vjr,aEe,B3,nEe,Fjr,Tjr,AK,Mjr,Ejr,Cjr,P3,XNe,af,I3,sEe,sx,wjr,lEe,Ajr,zNe,Tr,lx,yjr,nf,Ljr,yK,xjr,$jr,LK,kjr,Sjr,Rjr,ix,Bjr,iEe,Pjr,Ijr,qjr,Yt,dx,Njr,dEe,jjr,Djr,sf,Gjr,cEe,Ojr,Vjr,xK,Xjr,zjr,Wjr,q3,Qjr,Ur,cx,Hjr,fEe,Ujr,Jjr,Cn,Yjr,mEe,Kjr,Zjr,gEe,eDr,oDr,hEe,rDr,tDr,aDr,fx,N3,pEe,nDr,sDr,$K,lDr,iDr,dDr,j3,_Ee,cDr,fDr,kK,mDr,gDr,hDr,D3,WNe,lf,G3,uEe,mx,pDr,bEe,_Dr,QNe,Mr,gx,uDr,df,bDr,SK,vDr,FDr,RK,TDr,MDr,EDr,hx,CDr,vEe,wDr,ADr,yDr,Kt,px,LDr,FEe,xDr,$Dr,cf,kDr,TEe,SDr,RDr,BK,BDr,PDr,IDr,O3,qDr,Jr,_x,NDr,MEe,jDr,DDr,wn,GDr,EEe,ODr,VDr,CEe,XDr,zDr,wEe,WDr,QDr,HDr,AEe,V3,yEe,UDr,JDr,PK,YDr,KDr,ZDr,X3,HNe;return d=new oe({}),Ca=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),m6=new oe({}),g6=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),vf=new eGr({props:{warning:!0,$$slots:{default:[a8t]},$$scope:{ctx:L}}}),h6=new oe({}),p6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/configuration_auto.py#L614"}}),b6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/configuration_auto.py#L637"}}),vg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[n8t]},$$scope:{ctx:L}}}),v6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/configuration_auto.py#L760"}}),F6=new oe({}),T6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/tokenization_auto.py#L399"}}),C6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17202/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/tokenization_auto.py#L413"}}),eh=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[s8t]},$$scope:{ctx:L}}}),w6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/tokenization_auto.py#L609"}}),A6=new oe({}),y6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/feature_extraction_auto.py#L187"}}),$6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17202/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/feature_extraction_auto.py#L201"}}),xh=new eGr({props:{$$slots:{default:[l8t]},$$scope:{ctx:L}}}),$h=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[i8t]},$$scope:{ctx:L}}}),k6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/feature_extraction_auto.py#L328"}}),S6=new oe({}),R6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/processing_auto.py#L87"}}),I6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/processing_auto.py#L101"}}),Uh=new eGr({props:{$$slots:{default:[d8t]},$$scope:{ctx:L}}}),Jh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[c8t]},$$scope:{ctx:L}}}),q6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/processing_auto.py#L254"}}),N6=new oe({}),j6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L753"}}),G6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (Bloom model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Zh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[f8t]},$$scope:{ctx:L}}}),O6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),z_=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[m8t]},$$scope:{ctx:L}}}),V6=new oe({}),X6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L760"}}),W6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (Bloom model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Q_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[g8t]},$$scope:{ctx:L}}}),Q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),qu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[h8t]},$$scope:{ctx:L}}}),H6=new oe({}),U6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L775"}}),Y6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (Bloom model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),ju=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[p8t]},$$scope:{ctx:L}}}),K6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),C2=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[_8t]},$$scope:{ctx:L}}}),Z6=new oe({}),ey=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L782"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),A2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[u8t]},$$scope:{ctx:L}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),d1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[b8t]},$$scope:{ctx:L}}}),ay=new oe({}),ny=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L789"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),f1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[v8t]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),x1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[F8t]},$$scope:{ctx:L}}}),dy=new oe({}),cy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L798"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),k1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[T8t]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),wb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[M8t]},$$scope:{ctx:L}}}),hy=new oe({}),py=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L832"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),yb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[E8t]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),av=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[C8t]},$$scope:{ctx:L}}}),vy=new oe({}),Fy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L839"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),sv=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[w8t]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),gv=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[A8t]},$$scope:{ctx:L}}}),Cy=new oe({}),wy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L825"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),pv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[y8t]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),Jv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[L8t]},$$scope:{ctx:L}}}),xy=new oe({}),$y=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L807"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Kv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[x8t]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[$8t]},$$scope:{ctx:L}}}),By=new oe({}),Py=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L814"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[k8t]},$$scope:{ctx:L}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),XF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[S8t]},$$scope:{ctx:L}}}),jy=new oe({}),Dy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L848"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),WF=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[R8t]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),n0=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[B8t]},$$scope:{ctx:L}}}),Xy=new oe({}),zy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L887"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),l0=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[P8t]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),c0=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[I8t]},$$scope:{ctx:L}}}),Uy=new oe({}),Jy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L894"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),m0=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[q8t]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),E0=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[N8t]},$$scope:{ctx:L}}}),eL=new oe({}),oL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L917"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),w0=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[j8t]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),S0=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[D8t]},$$scope:{ctx:L}}}),nL=new oe({}),sL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L901"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),B0=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[G8t]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),z0=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[O8t]},$$scope:{ctx:L}}}),cL=new oe({}),fL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L908"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[V8t]},$$scope:{ctx:L}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),Y0=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[X8t]},$$scope:{ctx:L}}}),_L=new oe({}),uL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L926"}}),vL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),Z0=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[z8t]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),sT=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[W8t]},$$scope:{ctx:L}}}),TL=new oe({}),ML=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L933"}}),CL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),iT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Q8t]},$$scope:{ctx:L}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),gT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[H8t]},$$scope:{ctx:L}}}),AL=new oe({}),yL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L880"}}),xL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),pT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[U8t]},$$scope:{ctx:L}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),vT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[J8t]},$$scope:{ctx:L}}}),SL=new oe({}),RL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L855"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),TT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Y8t]},$$scope:{ctx:L}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),CT=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[K8t]},$$scope:{ctx:L}}}),qL=new oe({}),NL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L862"}}),DL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),AT=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Z8t]},$$scope:{ctx:L}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),ST=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[e9t]},$$scope:{ctx:L}}}),OL=new oe({}),VL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_auto.py#L871"}}),zL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[o9t]},$$scope:{ctx:L}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),qT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[r9t]},$$scope:{ctx:L}}}),QL=new oe({}),HL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),JL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[t9t]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),k7=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[a9t]},$$scope:{ctx:L}}}),KL=new oe({}),ZL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),o8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),R7=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[n9t]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),tM=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[s9t]},$$scope:{ctx:L}}}),t8=new oe({}),a8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),s8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),nM=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[l9t]},$$scope:{ctx:L}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),bM=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[i9t]},$$scope:{ctx:L}}}),i8=new oe({}),d8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),f8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),FM=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[d9t]},$$scope:{ctx:L}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),wM=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[c9t]},$$scope:{ctx:L}}}),g8=new oe({}),h8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),_8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),yM=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[f9t]},$$scope:{ctx:L}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),HM=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[m9t]},$$scope:{ctx:L}}}),b8=new oe({}),v8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),T8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),JM=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[g9t]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),l4=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[h9t]},$$scope:{ctx:L}}}),E8=new oe({}),C8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),d4=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[p9t]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),I4=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[_9t]},$$scope:{ctx:L}}}),L8=new oe({}),x8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),N4=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[u9t]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),rE=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[b9t]},$$scope:{ctx:L}}}),R8=new oe({}),B8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),I8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),aE=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[v9t]},$$scope:{ctx:L}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),lE=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[F9t]},$$scope:{ctx:L}}}),j8=new oe({}),D8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),O8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),dE=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[T9t]},$$scope:{ctx:L}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),fE=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[M9t]},$$scope:{ctx:L}}}),X8=new oe({}),z8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),gE=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[E9t]},$$scope:{ctx:L}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),BE=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[C9t]},$$scope:{ctx:L}}}),U8=new oe({}),J8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),K8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),IE=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[w9t]},$$scope:{ctx:L}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[A9t]},$$scope:{ctx:L}}}),e9=new oe({}),o9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),t9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),nC=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[y9t]},$$scope:{ctx:L}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),lC=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[L9t]},$$scope:{ctx:L}}}),n9=new oe({}),s9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),i9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),dC=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[x9t]},$$scope:{ctx:L}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),fC=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[$9t]},$$scope:{ctx:L}}}),c9=new oe({}),f9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),g9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),gC=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[k9t]},$$scope:{ctx:L}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),jC=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[S9t]},$$scope:{ctx:L}}}),p9=new oe({}),_9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),b9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),GC=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[R9t]},$$scope:{ctx:L}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),YC=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[B9t]},$$scope:{ctx:L}}}),F9=new oe({}),T9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),E9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),ZC=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[P9t]},$$scope:{ctx:L}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),m5=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[I9t]},$$scope:{ctx:L}}}),w9=new oe({}),A9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),L9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),h5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[q9t]},$$scope:{ctx:L}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),w5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[N9t]},$$scope:{ctx:L}}}),$9=new oe({}),k9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),R9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),y5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[j9t]},$$scope:{ctx:L}}}),B9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),q5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[D9t]},$$scope:{ctx:L}}}),P9=new oe({}),I9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),N9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),j5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[G9t]},$$scope:{ctx:L}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),J5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[O9t]},$$scope:{ctx:L}}}),D9=new oe({}),G9=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),V9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),K5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[V9t]},$$scope:{ctx:L}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),d3=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[X9t]},$$scope:{ctx:L}}}),z9=new oe({}),W9=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),H9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),f3=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[z9t]},$$scope:{ctx:L}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),F3=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[W9t]},$$scope:{ctx:L}}}),J9=new oe({}),Y9=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),M3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Q9t]},$$scope:{ctx:L}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),k3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[H9t]},$$scope:{ctx:L}}}),ox=new oe({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),R3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[U9t]},$$scope:{ctx:L}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),P3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[J9t]},$$scope:{ctx:L}}}),sx=new oe({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),q3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Y9t]},$$scope:{ctx:L}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),D3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[K9t]},$$scope:{ctx:L}}}),mx=new oe({}),gx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L389"}}),O3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Z9t]},$$scope:{ctx:L}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17202/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17202/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17202/src/transformers/models/auto/auto_factory.py#L417"}}),X3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ci=o("Auto Classes"),hf=l(),rt=a("p"),fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=a("code"),i6=o("from_pretrained()"),pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),gi=o("Instantiating one of "),yn=a("a"),d6=o("AutoConfig"),Ln=o(", "),xn=a("a"),c6=o("AutoModel"),hi=o(`, and
`),$n=a("a"),f6=o("AutoTokenizer"),pi=o(" will directly create a class of the relevant architecture. For instance"),_f=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),x$=o("will create a model that is an instance of "),_i=a("a"),$$=o("BertModel"),k$=o("."),Eo=l(),wa=a("p"),S$=o("There is one class of "),uf=a("code"),R$=o("AutoModel"),rGe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),zIe=l(),ui=a("h2"),bf=a("a"),Lee=a("span"),F(m6.$$.fragment),tGe=l(),xee=a("span"),aGe=o("Extending the Auto Classes"),WIe=l(),kn=a("p"),nGe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),$ee=a("code"),sGe=o("NewModel"),lGe=o(", make sure you have a "),kee=a("code"),iGe=o("NewModelConfig"),dGe=o(` then you can add those to the auto
classes like this:`),QIe=l(),F(g6.$$.fragment),HIe=l(),B$=a("p"),cGe=o("You will then be able to use the auto classes like you would usually do!"),UIe=l(),F(vf.$$.fragment),JIe=l(),bi=a("h2"),Ff=a("a"),See=a("span"),F(h6.$$.fragment),fGe=l(),Ree=a("span"),mGe=o("AutoConfig"),YIe=l(),Co=a("div"),F(p6.$$.fragment),gGe=l(),_6=a("p"),hGe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),P$=a("a"),pGe=o("from_pretrained()"),_Ge=o(" class method."),uGe=l(),u6=a("p"),bGe=o("This class cannot be instantiated directly using "),Bee=a("code"),vGe=o("__init__()"),FGe=o(" (throws an error)."),TGe=l(),Er=a("div"),F(b6.$$.fragment),MGe=l(),Pee=a("p"),EGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),CGe=l(),vi=a("p"),wGe=o("The configuration class to instantiate is selected based on the "),Iee=a("code"),AGe=o("model_type"),yGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),qee=a("code"),LGe=o("pretrained_model_name_or_path"),xGe=o(":"),$Ge=l(),A=a("ul"),Tf=a("li"),Nee=a("strong"),kGe=o("albert"),SGe=o(" \u2014 "),I$=a("a"),RGe=o("AlbertConfig"),BGe=o(" (ALBERT model)"),PGe=l(),Mf=a("li"),jee=a("strong"),IGe=o("bart"),qGe=o(" \u2014 "),q$=a("a"),NGe=o("BartConfig"),jGe=o(" (BART model)"),DGe=l(),Ef=a("li"),Dee=a("strong"),GGe=o("beit"),OGe=o(" \u2014 "),N$=a("a"),VGe=o("BeitConfig"),XGe=o(" (BEiT model)"),zGe=l(),Cf=a("li"),Gee=a("strong"),WGe=o("bert"),QGe=o(" \u2014 "),j$=a("a"),HGe=o("BertConfig"),UGe=o(" (BERT model)"),JGe=l(),wf=a("li"),Oee=a("strong"),YGe=o("bert-generation"),KGe=o(" \u2014 "),D$=a("a"),ZGe=o("BertGenerationConfig"),eOe=o(" (Bert Generation model)"),oOe=l(),Af=a("li"),Vee=a("strong"),rOe=o("big_bird"),tOe=o(" \u2014 "),G$=a("a"),aOe=o("BigBirdConfig"),nOe=o(" (BigBird model)"),sOe=l(),yf=a("li"),Xee=a("strong"),lOe=o("bigbird_pegasus"),iOe=o(" \u2014 "),O$=a("a"),dOe=o("BigBirdPegasusConfig"),cOe=o(" (BigBirdPegasus model)"),fOe=l(),Lf=a("li"),zee=a("strong"),mOe=o("blenderbot"),gOe=o(" \u2014 "),V$=a("a"),hOe=o("BlenderbotConfig"),pOe=o(" (Blenderbot model)"),_Oe=l(),xf=a("li"),Wee=a("strong"),uOe=o("blenderbot-small"),bOe=o(" \u2014 "),X$=a("a"),vOe=o("BlenderbotSmallConfig"),FOe=o(" (BlenderbotSmall model)"),TOe=l(),$f=a("li"),Qee=a("strong"),MOe=o("bloom"),EOe=o(" \u2014 "),z$=a("a"),COe=o("BloomConfig"),wOe=o(" (Bloom model)"),AOe=l(),kf=a("li"),Hee=a("strong"),yOe=o("camembert"),LOe=o(" \u2014 "),W$=a("a"),xOe=o("CamembertConfig"),$Oe=o(" (CamemBERT model)"),kOe=l(),Sf=a("li"),Uee=a("strong"),SOe=o("canine"),ROe=o(" \u2014 "),Q$=a("a"),BOe=o("CanineConfig"),POe=o(" (Canine model)"),IOe=l(),Rf=a("li"),Jee=a("strong"),qOe=o("clip"),NOe=o(" \u2014 "),H$=a("a"),jOe=o("CLIPConfig"),DOe=o(" (CLIP model)"),GOe=l(),Bf=a("li"),Yee=a("strong"),OOe=o("convbert"),VOe=o(" \u2014 "),U$=a("a"),XOe=o("ConvBertConfig"),zOe=o(" (ConvBERT model)"),WOe=l(),Pf=a("li"),Kee=a("strong"),QOe=o("convnext"),HOe=o(" \u2014 "),J$=a("a"),UOe=o("ConvNextConfig"),JOe=o(" (ConvNext model)"),YOe=l(),If=a("li"),Zee=a("strong"),KOe=o("ctrl"),ZOe=o(" \u2014 "),Y$=a("a"),eVe=o("CTRLConfig"),oVe=o(" (CTRL model)"),rVe=l(),qf=a("li"),eoe=a("strong"),tVe=o("data2vec-audio"),aVe=o(" \u2014 "),K$=a("a"),nVe=o("Data2VecAudioConfig"),sVe=o(" (Data2VecAudio model)"),lVe=l(),Nf=a("li"),ooe=a("strong"),iVe=o("data2vec-text"),dVe=o(" \u2014 "),Z$=a("a"),cVe=o("Data2VecTextConfig"),fVe=o(" (Data2VecText model)"),mVe=l(),jf=a("li"),roe=a("strong"),gVe=o("data2vec-vision"),hVe=o(" \u2014 "),ek=a("a"),pVe=o("Data2VecVisionConfig"),_Ve=o(" (Data2VecVision model)"),uVe=l(),Df=a("li"),toe=a("strong"),bVe=o("deberta"),vVe=o(" \u2014 "),ok=a("a"),FVe=o("DebertaConfig"),TVe=o(" (DeBERTa model)"),MVe=l(),Gf=a("li"),aoe=a("strong"),EVe=o("deberta-v2"),CVe=o(" \u2014 "),rk=a("a"),wVe=o("DebertaV2Config"),AVe=o(" (DeBERTa-v2 model)"),yVe=l(),Of=a("li"),noe=a("strong"),LVe=o("decision_transformer"),xVe=o(" \u2014 "),tk=a("a"),$Ve=o("DecisionTransformerConfig"),kVe=o(" (Decision Transformer model)"),SVe=l(),Vf=a("li"),soe=a("strong"),RVe=o("deit"),BVe=o(" \u2014 "),ak=a("a"),PVe=o("DeiTConfig"),IVe=o(" (DeiT model)"),qVe=l(),Xf=a("li"),loe=a("strong"),NVe=o("detr"),jVe=o(" \u2014 "),nk=a("a"),DVe=o("DetrConfig"),GVe=o(" (DETR model)"),OVe=l(),zf=a("li"),ioe=a("strong"),VVe=o("distilbert"),XVe=o(" \u2014 "),sk=a("a"),zVe=o("DistilBertConfig"),WVe=o(" (DistilBERT model)"),QVe=l(),Wf=a("li"),doe=a("strong"),HVe=o("dpr"),UVe=o(" \u2014 "),lk=a("a"),JVe=o("DPRConfig"),YVe=o(" (DPR model)"),KVe=l(),Qf=a("li"),coe=a("strong"),ZVe=o("dpt"),eXe=o(" \u2014 "),ik=a("a"),oXe=o("DPTConfig"),rXe=o(" (DPT model)"),tXe=l(),Hf=a("li"),foe=a("strong"),aXe=o("electra"),nXe=o(" \u2014 "),dk=a("a"),sXe=o("ElectraConfig"),lXe=o(" (ELECTRA model)"),iXe=l(),Uf=a("li"),moe=a("strong"),dXe=o("encoder-decoder"),cXe=o(" \u2014 "),ck=a("a"),fXe=o("EncoderDecoderConfig"),mXe=o(" (Encoder decoder model)"),gXe=l(),Jf=a("li"),goe=a("strong"),hXe=o("flaubert"),pXe=o(" \u2014 "),fk=a("a"),_Xe=o("FlaubertConfig"),uXe=o(" (FlauBERT model)"),bXe=l(),Yf=a("li"),hoe=a("strong"),vXe=o("flava"),FXe=o(" \u2014 "),mk=a("a"),TXe=o("FlavaConfig"),MXe=o(" (Flava model)"),EXe=l(),Kf=a("li"),poe=a("strong"),CXe=o("fnet"),wXe=o(" \u2014 "),gk=a("a"),AXe=o("FNetConfig"),yXe=o(" (FNet model)"),LXe=l(),Zf=a("li"),_oe=a("strong"),xXe=o("fsmt"),$Xe=o(" \u2014 "),hk=a("a"),kXe=o("FSMTConfig"),SXe=o(" (FairSeq Machine-Translation model)"),RXe=l(),em=a("li"),uoe=a("strong"),BXe=o("funnel"),PXe=o(" \u2014 "),pk=a("a"),IXe=o("FunnelConfig"),qXe=o(" (Funnel Transformer model)"),NXe=l(),om=a("li"),boe=a("strong"),jXe=o("glpn"),DXe=o(" \u2014 "),_k=a("a"),GXe=o("GLPNConfig"),OXe=o(" (GLPN model)"),VXe=l(),rm=a("li"),voe=a("strong"),XXe=o("gpt2"),zXe=o(" \u2014 "),uk=a("a"),WXe=o("GPT2Config"),QXe=o(" (OpenAI GPT-2 model)"),HXe=l(),tm=a("li"),Foe=a("strong"),UXe=o("gpt_neo"),JXe=o(" \u2014 "),bk=a("a"),YXe=o("GPTNeoConfig"),KXe=o(" (GPT Neo model)"),ZXe=l(),am=a("li"),Toe=a("strong"),eze=o("gptj"),oze=o(" \u2014 "),vk=a("a"),rze=o("GPTJConfig"),tze=o(" (GPT-J model)"),aze=l(),nm=a("li"),Moe=a("strong"),nze=o("hubert"),sze=o(" \u2014 "),Fk=a("a"),lze=o("HubertConfig"),ize=o(" (Hubert model)"),dze=l(),sm=a("li"),Eoe=a("strong"),cze=o("ibert"),fze=o(" \u2014 "),Tk=a("a"),mze=o("IBertConfig"),gze=o(" (I-BERT model)"),hze=l(),lm=a("li"),Coe=a("strong"),pze=o("imagegpt"),_ze=o(" \u2014 "),Mk=a("a"),uze=o("ImageGPTConfig"),bze=o(" (ImageGPT model)"),vze=l(),im=a("li"),woe=a("strong"),Fze=o("layoutlm"),Tze=o(" \u2014 "),Ek=a("a"),Mze=o("LayoutLMConfig"),Eze=o(" (LayoutLM model)"),Cze=l(),dm=a("li"),Aoe=a("strong"),wze=o("layoutlmv2"),Aze=o(" \u2014 "),Ck=a("a"),yze=o("LayoutLMv2Config"),Lze=o(" (LayoutLMv2 model)"),xze=l(),cm=a("li"),yoe=a("strong"),$ze=o("led"),kze=o(" \u2014 "),wk=a("a"),Sze=o("LEDConfig"),Rze=o(" (LED model)"),Bze=l(),fm=a("li"),Loe=a("strong"),Pze=o("longformer"),Ize=o(" \u2014 "),Ak=a("a"),qze=o("LongformerConfig"),Nze=o(" (Longformer model)"),jze=l(),mm=a("li"),xoe=a("strong"),Dze=o("luke"),Gze=o(" \u2014 "),yk=a("a"),Oze=o("LukeConfig"),Vze=o(" (LUKE model)"),Xze=l(),gm=a("li"),$oe=a("strong"),zze=o("lxmert"),Wze=o(" \u2014 "),Lk=a("a"),Qze=o("LxmertConfig"),Hze=o(" (LXMERT model)"),Uze=l(),hm=a("li"),koe=a("strong"),Jze=o("m2m_100"),Yze=o(" \u2014 "),xk=a("a"),Kze=o("M2M100Config"),Zze=o(" (M2M100 model)"),eWe=l(),pm=a("li"),Soe=a("strong"),oWe=o("marian"),rWe=o(" \u2014 "),$k=a("a"),tWe=o("MarianConfig"),aWe=o(" (Marian model)"),nWe=l(),_m=a("li"),Roe=a("strong"),sWe=o("maskformer"),lWe=o(" \u2014 "),kk=a("a"),iWe=o("MaskFormerConfig"),dWe=o(" (MaskFormer model)"),cWe=l(),um=a("li"),Boe=a("strong"),fWe=o("mbart"),mWe=o(" \u2014 "),Sk=a("a"),gWe=o("MBartConfig"),hWe=o(" (mBART model)"),pWe=l(),bm=a("li"),Poe=a("strong"),_We=o("megatron-bert"),uWe=o(" \u2014 "),Rk=a("a"),bWe=o("MegatronBertConfig"),vWe=o(" (MegatronBert model)"),FWe=l(),vm=a("li"),Ioe=a("strong"),TWe=o("mobilebert"),MWe=o(" \u2014 "),Bk=a("a"),EWe=o("MobileBertConfig"),CWe=o(" (MobileBERT model)"),wWe=l(),Fm=a("li"),qoe=a("strong"),AWe=o("mpnet"),yWe=o(" \u2014 "),Pk=a("a"),LWe=o("MPNetConfig"),xWe=o(" (MPNet model)"),$We=l(),Tm=a("li"),Noe=a("strong"),kWe=o("mt5"),SWe=o(" \u2014 "),Ik=a("a"),RWe=o("MT5Config"),BWe=o(" (mT5 model)"),PWe=l(),Mm=a("li"),joe=a("strong"),IWe=o("nystromformer"),qWe=o(" \u2014 "),qk=a("a"),NWe=o("NystromformerConfig"),jWe=o(" (Nystromformer model)"),DWe=l(),Em=a("li"),Doe=a("strong"),GWe=o("openai-gpt"),OWe=o(" \u2014 "),Nk=a("a"),VWe=o("OpenAIGPTConfig"),XWe=o(" (OpenAI GPT model)"),zWe=l(),Cm=a("li"),Goe=a("strong"),WWe=o("opt"),QWe=o(" \u2014 "),jk=a("a"),HWe=o("OPTConfig"),UWe=o(" (OPT model)"),JWe=l(),wm=a("li"),Ooe=a("strong"),YWe=o("pegasus"),KWe=o(" \u2014 "),Dk=a("a"),ZWe=o("PegasusConfig"),eQe=o(" (Pegasus model)"),oQe=l(),Am=a("li"),Voe=a("strong"),rQe=o("perceiver"),tQe=o(" \u2014 "),Gk=a("a"),aQe=o("PerceiverConfig"),nQe=o(" (Perceiver model)"),sQe=l(),ym=a("li"),Xoe=a("strong"),lQe=o("plbart"),iQe=o(" \u2014 "),Ok=a("a"),dQe=o("PLBartConfig"),cQe=o(" (PLBart model)"),fQe=l(),Lm=a("li"),zoe=a("strong"),mQe=o("poolformer"),gQe=o(" \u2014 "),Vk=a("a"),hQe=o("PoolFormerConfig"),pQe=o(" (PoolFormer model)"),_Qe=l(),xm=a("li"),Woe=a("strong"),uQe=o("prophetnet"),bQe=o(" \u2014 "),Xk=a("a"),vQe=o("ProphetNetConfig"),FQe=o(" (ProphetNet model)"),TQe=l(),$m=a("li"),Qoe=a("strong"),MQe=o("qdqbert"),EQe=o(" \u2014 "),zk=a("a"),CQe=o("QDQBertConfig"),wQe=o(" (QDQBert model)"),AQe=l(),km=a("li"),Hoe=a("strong"),yQe=o("rag"),LQe=o(" \u2014 "),Wk=a("a"),xQe=o("RagConfig"),$Qe=o(" (RAG model)"),kQe=l(),Sm=a("li"),Uoe=a("strong"),SQe=o("realm"),RQe=o(" \u2014 "),Qk=a("a"),BQe=o("RealmConfig"),PQe=o(" (Realm model)"),IQe=l(),Rm=a("li"),Joe=a("strong"),qQe=o("reformer"),NQe=o(" \u2014 "),Hk=a("a"),jQe=o("ReformerConfig"),DQe=o(" (Reformer model)"),GQe=l(),Bm=a("li"),Yoe=a("strong"),OQe=o("regnet"),VQe=o(" \u2014 "),Uk=a("a"),XQe=o("RegNetConfig"),zQe=o(" (RegNet model)"),WQe=l(),Pm=a("li"),Koe=a("strong"),QQe=o("rembert"),HQe=o(" \u2014 "),Jk=a("a"),UQe=o("RemBertConfig"),JQe=o(" (RemBERT model)"),YQe=l(),Im=a("li"),Zoe=a("strong"),KQe=o("resnet"),ZQe=o(" \u2014 "),Yk=a("a"),eHe=o("ResNetConfig"),oHe=o(" (ResNet model)"),rHe=l(),qm=a("li"),ere=a("strong"),tHe=o("retribert"),aHe=o(" \u2014 "),Kk=a("a"),nHe=o("RetriBertConfig"),sHe=o(" (RetriBERT model)"),lHe=l(),Nm=a("li"),ore=a("strong"),iHe=o("roberta"),dHe=o(" \u2014 "),Zk=a("a"),cHe=o("RobertaConfig"),fHe=o(" (RoBERTa model)"),mHe=l(),jm=a("li"),rre=a("strong"),gHe=o("roformer"),hHe=o(" \u2014 "),eS=a("a"),pHe=o("RoFormerConfig"),_He=o(" (RoFormer model)"),uHe=l(),Dm=a("li"),tre=a("strong"),bHe=o("segformer"),vHe=o(" \u2014 "),oS=a("a"),FHe=o("SegformerConfig"),THe=o(" (SegFormer model)"),MHe=l(),Gm=a("li"),are=a("strong"),EHe=o("sew"),CHe=o(" \u2014 "),rS=a("a"),wHe=o("SEWConfig"),AHe=o(" (SEW model)"),yHe=l(),Om=a("li"),nre=a("strong"),LHe=o("sew-d"),xHe=o(" \u2014 "),tS=a("a"),$He=o("SEWDConfig"),kHe=o(" (SEW-D model)"),SHe=l(),Vm=a("li"),sre=a("strong"),RHe=o("speech-encoder-decoder"),BHe=o(" \u2014 "),aS=a("a"),PHe=o("SpeechEncoderDecoderConfig"),IHe=o(" (Speech Encoder decoder model)"),qHe=l(),Xm=a("li"),lre=a("strong"),NHe=o("speech_to_text"),jHe=o(" \u2014 "),nS=a("a"),DHe=o("Speech2TextConfig"),GHe=o(" (Speech2Text model)"),OHe=l(),zm=a("li"),ire=a("strong"),VHe=o("speech_to_text_2"),XHe=o(" \u2014 "),sS=a("a"),zHe=o("Speech2Text2Config"),WHe=o(" (Speech2Text2 model)"),QHe=l(),Wm=a("li"),dre=a("strong"),HHe=o("splinter"),UHe=o(" \u2014 "),lS=a("a"),JHe=o("SplinterConfig"),YHe=o(" (Splinter model)"),KHe=l(),Qm=a("li"),cre=a("strong"),ZHe=o("squeezebert"),eUe=o(" \u2014 "),iS=a("a"),oUe=o("SqueezeBertConfig"),rUe=o(" (SqueezeBERT model)"),tUe=l(),Hm=a("li"),fre=a("strong"),aUe=o("swin"),nUe=o(" \u2014 "),dS=a("a"),sUe=o("SwinConfig"),lUe=o(" (Swin model)"),iUe=l(),Um=a("li"),mre=a("strong"),dUe=o("t5"),cUe=o(" \u2014 "),cS=a("a"),fUe=o("T5Config"),mUe=o(" (T5 model)"),gUe=l(),Jm=a("li"),gre=a("strong"),hUe=o("tapas"),pUe=o(" \u2014 "),fS=a("a"),_Ue=o("TapasConfig"),uUe=o(" (TAPAS model)"),bUe=l(),Ym=a("li"),hre=a("strong"),vUe=o("transfo-xl"),FUe=o(" \u2014 "),mS=a("a"),TUe=o("TransfoXLConfig"),MUe=o(" (Transformer-XL model)"),EUe=l(),Km=a("li"),pre=a("strong"),CUe=o("trocr"),wUe=o(" \u2014 "),gS=a("a"),AUe=o("TrOCRConfig"),yUe=o(" (TrOCR model)"),LUe=l(),Zm=a("li"),_re=a("strong"),xUe=o("unispeech"),$Ue=o(" \u2014 "),hS=a("a"),kUe=o("UniSpeechConfig"),SUe=o(" (UniSpeech model)"),RUe=l(),eg=a("li"),ure=a("strong"),BUe=o("unispeech-sat"),PUe=o(" \u2014 "),pS=a("a"),IUe=o("UniSpeechSatConfig"),qUe=o(" (UniSpeechSat model)"),NUe=l(),og=a("li"),bre=a("strong"),jUe=o("van"),DUe=o(" \u2014 "),_S=a("a"),GUe=o("VanConfig"),OUe=o(" (VAN model)"),VUe=l(),rg=a("li"),vre=a("strong"),XUe=o("vilt"),zUe=o(" \u2014 "),uS=a("a"),WUe=o("ViltConfig"),QUe=o(" (ViLT model)"),HUe=l(),tg=a("li"),Fre=a("strong"),UUe=o("vision-encoder-decoder"),JUe=o(" \u2014 "),bS=a("a"),YUe=o("VisionEncoderDecoderConfig"),KUe=o(" (Vision Encoder decoder model)"),ZUe=l(),ag=a("li"),Tre=a("strong"),eJe=o("vision-text-dual-encoder"),oJe=o(" \u2014 "),vS=a("a"),rJe=o("VisionTextDualEncoderConfig"),tJe=o(" (VisionTextDualEncoder model)"),aJe=l(),ng=a("li"),Mre=a("strong"),nJe=o("visual_bert"),sJe=o(" \u2014 "),FS=a("a"),lJe=o("VisualBertConfig"),iJe=o(" (VisualBert model)"),dJe=l(),sg=a("li"),Ere=a("strong"),cJe=o("vit"),fJe=o(" \u2014 "),TS=a("a"),mJe=o("ViTConfig"),gJe=o(" (ViT model)"),hJe=l(),lg=a("li"),Cre=a("strong"),pJe=o("vit_mae"),_Je=o(" \u2014 "),MS=a("a"),uJe=o("ViTMAEConfig"),bJe=o(" (ViTMAE model)"),vJe=l(),ig=a("li"),wre=a("strong"),FJe=o("wav2vec2"),TJe=o(" \u2014 "),ES=a("a"),MJe=o("Wav2Vec2Config"),EJe=o(" (Wav2Vec2 model)"),CJe=l(),dg=a("li"),Are=a("strong"),wJe=o("wav2vec2-conformer"),AJe=o(" \u2014 "),CS=a("a"),yJe=o("Wav2Vec2ConformerConfig"),LJe=o(" (Wav2Vec2-Conformer model)"),xJe=l(),cg=a("li"),yre=a("strong"),$Je=o("wavlm"),kJe=o(" \u2014 "),wS=a("a"),SJe=o("WavLMConfig"),RJe=o(" (WavLM model)"),BJe=l(),fg=a("li"),Lre=a("strong"),PJe=o("xglm"),IJe=o(" \u2014 "),AS=a("a"),qJe=o("XGLMConfig"),NJe=o(" (XGLM model)"),jJe=l(),mg=a("li"),xre=a("strong"),DJe=o("xlm"),GJe=o(" \u2014 "),yS=a("a"),OJe=o("XLMConfig"),VJe=o(" (XLM model)"),XJe=l(),gg=a("li"),$re=a("strong"),zJe=o("xlm-prophetnet"),WJe=o(" \u2014 "),LS=a("a"),QJe=o("XLMProphetNetConfig"),HJe=o(" (XLMProphetNet model)"),UJe=l(),hg=a("li"),kre=a("strong"),JJe=o("xlm-roberta"),YJe=o(" \u2014 "),xS=a("a"),KJe=o("XLMRobertaConfig"),ZJe=o(" (XLM-RoBERTa model)"),eYe=l(),pg=a("li"),Sre=a("strong"),oYe=o("xlm-roberta-xl"),rYe=o(" \u2014 "),$S=a("a"),tYe=o("XLMRobertaXLConfig"),aYe=o(" (XLM-RoBERTa-XL model)"),nYe=l(),_g=a("li"),Rre=a("strong"),sYe=o("xlnet"),lYe=o(" \u2014 "),kS=a("a"),iYe=o("XLNetConfig"),dYe=o(" (XLNet model)"),cYe=l(),ug=a("li"),Bre=a("strong"),fYe=o("yolos"),mYe=o(" \u2014 "),SS=a("a"),gYe=o("YolosConfig"),hYe=o(" (YOLOS model)"),pYe=l(),bg=a("li"),Pre=a("strong"),_Ye=o("yoso"),uYe=o(" \u2014 "),RS=a("a"),bYe=o("YosoConfig"),vYe=o(" (YOSO model)"),FYe=l(),F(vg.$$.fragment),TYe=l(),Fg=a("div"),F(v6.$$.fragment),MYe=l(),Ire=a("p"),EYe=o("Register a new configuration for this class."),KIe=l(),Fi=a("h2"),Tg=a("a"),qre=a("span"),F(F6.$$.fragment),CYe=l(),Nre=a("span"),wYe=o("AutoTokenizer"),ZIe=l(),wo=a("div"),F(T6.$$.fragment),AYe=l(),M6=a("p"),yYe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),BS=a("a"),LYe=o("AutoTokenizer.from_pretrained()"),xYe=o(" class method."),$Ye=l(),E6=a("p"),kYe=o("This class cannot be instantiated directly using "),jre=a("code"),SYe=o("__init__()"),RYe=o(" (throws an error)."),BYe=l(),Cr=a("div"),F(C6.$$.fragment),PYe=l(),Dre=a("p"),IYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),qYe=l(),Aa=a("p"),NYe=o("The tokenizer class to instantiate is selected based on the "),Gre=a("code"),jYe=o("model_type"),DYe=o(` property of the config object (either
passed as an argument or loaded from `),Ore=a("code"),GYe=o("pretrained_model_name_or_path"),OYe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vre=a("code"),VYe=o("pretrained_model_name_or_path"),XYe=o(":"),zYe=l(),k=a("ul"),Sn=a("li"),Xre=a("strong"),WYe=o("albert"),QYe=o(" \u2014 "),PS=a("a"),HYe=o("AlbertTokenizer"),UYe=o(" or "),IS=a("a"),JYe=o("AlbertTokenizerFast"),YYe=o(" (ALBERT model)"),KYe=l(),Rn=a("li"),zre=a("strong"),ZYe=o("bart"),eKe=o(" \u2014 "),qS=a("a"),oKe=o("BartTokenizer"),rKe=o(" or "),NS=a("a"),tKe=o("BartTokenizerFast"),aKe=o(" (BART model)"),nKe=l(),Bn=a("li"),Wre=a("strong"),sKe=o("barthez"),lKe=o(" \u2014 "),jS=a("a"),iKe=o("BarthezTokenizer"),dKe=o(" or "),DS=a("a"),cKe=o("BarthezTokenizerFast"),fKe=o(" (BARThez model)"),mKe=l(),Mg=a("li"),Qre=a("strong"),gKe=o("bartpho"),hKe=o(" \u2014 "),GS=a("a"),pKe=o("BartphoTokenizer"),_Ke=o(" (BARTpho model)"),uKe=l(),Pn=a("li"),Hre=a("strong"),bKe=o("bert"),vKe=o(" \u2014 "),OS=a("a"),FKe=o("BertTokenizer"),TKe=o(" or "),VS=a("a"),MKe=o("BertTokenizerFast"),EKe=o(" (BERT model)"),CKe=l(),Eg=a("li"),Ure=a("strong"),wKe=o("bert-generation"),AKe=o(" \u2014 "),XS=a("a"),yKe=o("BertGenerationTokenizer"),LKe=o(" (Bert Generation model)"),xKe=l(),Cg=a("li"),Jre=a("strong"),$Ke=o("bert-japanese"),kKe=o(" \u2014 "),zS=a("a"),SKe=o("BertJapaneseTokenizer"),RKe=o(" (BertJapanese model)"),BKe=l(),wg=a("li"),Yre=a("strong"),PKe=o("bertweet"),IKe=o(" \u2014 "),WS=a("a"),qKe=o("BertweetTokenizer"),NKe=o(" (Bertweet model)"),jKe=l(),In=a("li"),Kre=a("strong"),DKe=o("big_bird"),GKe=o(" \u2014 "),QS=a("a"),OKe=o("BigBirdTokenizer"),VKe=o(" or "),HS=a("a"),XKe=o("BigBirdTokenizerFast"),zKe=o(" (BigBird model)"),WKe=l(),qn=a("li"),Zre=a("strong"),QKe=o("bigbird_pegasus"),HKe=o(" \u2014 "),US=a("a"),UKe=o("PegasusTokenizer"),JKe=o(" or "),JS=a("a"),YKe=o("PegasusTokenizerFast"),KKe=o(" (BigBirdPegasus model)"),ZKe=l(),Nn=a("li"),ete=a("strong"),eZe=o("blenderbot"),oZe=o(" \u2014 "),YS=a("a"),rZe=o("BlenderbotTokenizer"),tZe=o(" or "),KS=a("a"),aZe=o("BlenderbotTokenizerFast"),nZe=o(" (Blenderbot model)"),sZe=l(),Ag=a("li"),ote=a("strong"),lZe=o("blenderbot-small"),iZe=o(" \u2014 "),ZS=a("a"),dZe=o("BlenderbotSmallTokenizer"),cZe=o(" (BlenderbotSmall model)"),fZe=l(),yg=a("li"),rte=a("strong"),mZe=o("bloom"),gZe=o(" \u2014 "),eR=a("a"),hZe=o("BloomTokenizerFast"),pZe=o(" (Bloom model)"),_Ze=l(),Lg=a("li"),tte=a("strong"),uZe=o("byt5"),bZe=o(" \u2014 "),oR=a("a"),vZe=o("ByT5Tokenizer"),FZe=o(" (ByT5 model)"),TZe=l(),jn=a("li"),ate=a("strong"),MZe=o("camembert"),EZe=o(" \u2014 "),rR=a("a"),CZe=o("CamembertTokenizer"),wZe=o(" or "),tR=a("a"),AZe=o("CamembertTokenizerFast"),yZe=o(" (CamemBERT model)"),LZe=l(),xg=a("li"),nte=a("strong"),xZe=o("canine"),$Ze=o(" \u2014 "),aR=a("a"),kZe=o("CanineTokenizer"),SZe=o(" (Canine model)"),RZe=l(),Dn=a("li"),ste=a("strong"),BZe=o("clip"),PZe=o(" \u2014 "),nR=a("a"),IZe=o("CLIPTokenizer"),qZe=o(" or "),sR=a("a"),NZe=o("CLIPTokenizerFast"),jZe=o(" (CLIP model)"),DZe=l(),Gn=a("li"),lte=a("strong"),GZe=o("convbert"),OZe=o(" \u2014 "),lR=a("a"),VZe=o("ConvBertTokenizer"),XZe=o(" or "),iR=a("a"),zZe=o("ConvBertTokenizerFast"),WZe=o(" (ConvBERT model)"),QZe=l(),On=a("li"),ite=a("strong"),HZe=o("cpm"),UZe=o(" \u2014 "),dR=a("a"),JZe=o("CpmTokenizer"),YZe=o(" or "),cR=a("a"),KZe=o("CpmTokenizerFast"),ZZe=o(" (CPM model)"),eeo=l(),$g=a("li"),dte=a("strong"),oeo=o("ctrl"),reo=o(" \u2014 "),fR=a("a"),teo=o("CTRLTokenizer"),aeo=o(" (CTRL model)"),neo=l(),Vn=a("li"),cte=a("strong"),seo=o("data2vec-text"),leo=o(" \u2014 "),mR=a("a"),ieo=o("RobertaTokenizer"),deo=o(" or "),gR=a("a"),ceo=o("RobertaTokenizerFast"),feo=o(" (Data2VecText model)"),meo=l(),Xn=a("li"),fte=a("strong"),geo=o("deberta"),heo=o(" \u2014 "),hR=a("a"),peo=o("DebertaTokenizer"),_eo=o(" or "),pR=a("a"),ueo=o("DebertaTokenizerFast"),beo=o(" (DeBERTa model)"),veo=l(),zn=a("li"),mte=a("strong"),Feo=o("deberta-v2"),Teo=o(" \u2014 "),_R=a("a"),Meo=o("DebertaV2Tokenizer"),Eeo=o(" or "),uR=a("a"),Ceo=o("DebertaV2TokenizerFast"),weo=o(" (DeBERTa-v2 model)"),Aeo=l(),Wn=a("li"),gte=a("strong"),yeo=o("distilbert"),Leo=o(" \u2014 "),bR=a("a"),xeo=o("DistilBertTokenizer"),$eo=o(" or "),vR=a("a"),keo=o("DistilBertTokenizerFast"),Seo=o(" (DistilBERT model)"),Reo=l(),Qn=a("li"),hte=a("strong"),Beo=o("dpr"),Peo=o(" \u2014 "),FR=a("a"),Ieo=o("DPRQuestionEncoderTokenizer"),qeo=o(" or "),TR=a("a"),Neo=o("DPRQuestionEncoderTokenizerFast"),jeo=o(" (DPR model)"),Deo=l(),Hn=a("li"),pte=a("strong"),Geo=o("electra"),Oeo=o(" \u2014 "),MR=a("a"),Veo=o("ElectraTokenizer"),Xeo=o(" or "),ER=a("a"),zeo=o("ElectraTokenizerFast"),Weo=o(" (ELECTRA model)"),Qeo=l(),kg=a("li"),_te=a("strong"),Heo=o("flaubert"),Ueo=o(" \u2014 "),CR=a("a"),Jeo=o("FlaubertTokenizer"),Yeo=o(" (FlauBERT model)"),Keo=l(),Un=a("li"),ute=a("strong"),Zeo=o("fnet"),eoo=o(" \u2014 "),wR=a("a"),ooo=o("FNetTokenizer"),roo=o(" or "),AR=a("a"),too=o("FNetTokenizerFast"),aoo=o(" (FNet model)"),noo=l(),Sg=a("li"),bte=a("strong"),soo=o("fsmt"),loo=o(" \u2014 "),yR=a("a"),ioo=o("FSMTTokenizer"),doo=o(" (FairSeq Machine-Translation model)"),coo=l(),Jn=a("li"),vte=a("strong"),foo=o("funnel"),moo=o(" \u2014 "),LR=a("a"),goo=o("FunnelTokenizer"),hoo=o(" or "),xR=a("a"),poo=o("FunnelTokenizerFast"),_oo=o(" (Funnel Transformer model)"),uoo=l(),Yn=a("li"),Fte=a("strong"),boo=o("gpt2"),voo=o(" \u2014 "),$R=a("a"),Foo=o("GPT2Tokenizer"),Too=o(" or "),kR=a("a"),Moo=o("GPT2TokenizerFast"),Eoo=o(" (OpenAI GPT-2 model)"),Coo=l(),Kn=a("li"),Tte=a("strong"),woo=o("gpt_neo"),Aoo=o(" \u2014 "),SR=a("a"),yoo=o("GPT2Tokenizer"),Loo=o(" or "),RR=a("a"),xoo=o("GPT2TokenizerFast"),$oo=o(" (GPT Neo model)"),koo=l(),Zn=a("li"),Mte=a("strong"),Soo=o("gptj"),Roo=o(" \u2014 "),BR=a("a"),Boo=o("GPT2Tokenizer"),Poo=o(" or "),PR=a("a"),Ioo=o("GPT2TokenizerFast"),qoo=o(" (GPT-J model)"),Noo=l(),es=a("li"),Ete=a("strong"),joo=o("herbert"),Doo=o(" \u2014 "),IR=a("a"),Goo=o("HerbertTokenizer"),Ooo=o(" or "),qR=a("a"),Voo=o("HerbertTokenizerFast"),Xoo=o(" (HerBERT model)"),zoo=l(),Rg=a("li"),Cte=a("strong"),Woo=o("hubert"),Qoo=o(" \u2014 "),NR=a("a"),Hoo=o("Wav2Vec2CTCTokenizer"),Uoo=o(" (Hubert model)"),Joo=l(),os=a("li"),wte=a("strong"),Yoo=o("ibert"),Koo=o(" \u2014 "),jR=a("a"),Zoo=o("RobertaTokenizer"),ero=o(" or "),DR=a("a"),oro=o("RobertaTokenizerFast"),rro=o(" (I-BERT model)"),tro=l(),rs=a("li"),Ate=a("strong"),aro=o("layoutlm"),nro=o(" \u2014 "),GR=a("a"),sro=o("LayoutLMTokenizer"),lro=o(" or "),OR=a("a"),iro=o("LayoutLMTokenizerFast"),dro=o(" (LayoutLM model)"),cro=l(),ts=a("li"),yte=a("strong"),fro=o("layoutlmv2"),mro=o(" \u2014 "),VR=a("a"),gro=o("LayoutLMv2Tokenizer"),hro=o(" or "),XR=a("a"),pro=o("LayoutLMv2TokenizerFast"),_ro=o(" (LayoutLMv2 model)"),uro=l(),as=a("li"),Lte=a("strong"),bro=o("layoutxlm"),vro=o(" \u2014 "),zR=a("a"),Fro=o("LayoutXLMTokenizer"),Tro=o(" or "),WR=a("a"),Mro=o("LayoutXLMTokenizerFast"),Ero=o(" (LayoutXLM model)"),Cro=l(),ns=a("li"),xte=a("strong"),wro=o("led"),Aro=o(" \u2014 "),QR=a("a"),yro=o("LEDTokenizer"),Lro=o(" or "),HR=a("a"),xro=o("LEDTokenizerFast"),$ro=o(" (LED model)"),kro=l(),ss=a("li"),$te=a("strong"),Sro=o("longformer"),Rro=o(" \u2014 "),UR=a("a"),Bro=o("LongformerTokenizer"),Pro=o(" or "),JR=a("a"),Iro=o("LongformerTokenizerFast"),qro=o(" (Longformer model)"),Nro=l(),Bg=a("li"),kte=a("strong"),jro=o("luke"),Dro=o(" \u2014 "),YR=a("a"),Gro=o("LukeTokenizer"),Oro=o(" (LUKE model)"),Vro=l(),ls=a("li"),Ste=a("strong"),Xro=o("lxmert"),zro=o(" \u2014 "),KR=a("a"),Wro=o("LxmertTokenizer"),Qro=o(" or "),ZR=a("a"),Hro=o("LxmertTokenizerFast"),Uro=o(" (LXMERT model)"),Jro=l(),Pg=a("li"),Rte=a("strong"),Yro=o("m2m_100"),Kro=o(" \u2014 "),eB=a("a"),Zro=o("M2M100Tokenizer"),eto=o(" (M2M100 model)"),oto=l(),Ig=a("li"),Bte=a("strong"),rto=o("marian"),tto=o(" \u2014 "),oB=a("a"),ato=o("MarianTokenizer"),nto=o(" (Marian model)"),sto=l(),is=a("li"),Pte=a("strong"),lto=o("mbart"),ito=o(" \u2014 "),rB=a("a"),dto=o("MBartTokenizer"),cto=o(" or "),tB=a("a"),fto=o("MBartTokenizerFast"),mto=o(" (mBART model)"),gto=l(),ds=a("li"),Ite=a("strong"),hto=o("mbart50"),pto=o(" \u2014 "),aB=a("a"),_to=o("MBart50Tokenizer"),uto=o(" or "),nB=a("a"),bto=o("MBart50TokenizerFast"),vto=o(" (mBART-50 model)"),Fto=l(),cs=a("li"),qte=a("strong"),Tto=o("megatron-bert"),Mto=o(" \u2014 "),sB=a("a"),Eto=o("BertTokenizer"),Cto=o(" or "),lB=a("a"),wto=o("BertTokenizerFast"),Ato=o(" (MegatronBert model)"),yto=l(),qg=a("li"),Nte=a("strong"),Lto=o("mluke"),xto=o(" \u2014 "),iB=a("a"),$to=o("MLukeTokenizer"),kto=o(" (mLUKE model)"),Sto=l(),fs=a("li"),jte=a("strong"),Rto=o("mobilebert"),Bto=o(" \u2014 "),dB=a("a"),Pto=o("MobileBertTokenizer"),Ito=o(" or "),cB=a("a"),qto=o("MobileBertTokenizerFast"),Nto=o(" (MobileBERT model)"),jto=l(),ms=a("li"),Dte=a("strong"),Dto=o("mpnet"),Gto=o(" \u2014 "),fB=a("a"),Oto=o("MPNetTokenizer"),Vto=o(" or "),mB=a("a"),Xto=o("MPNetTokenizerFast"),zto=o(" (MPNet model)"),Wto=l(),gs=a("li"),Gte=a("strong"),Qto=o("mt5"),Hto=o(" \u2014 "),gB=a("a"),Uto=o("MT5Tokenizer"),Jto=o(" or "),hB=a("a"),Yto=o("MT5TokenizerFast"),Kto=o(" (mT5 model)"),Zto=l(),hs=a("li"),Ote=a("strong"),eao=o("nystromformer"),oao=o(" \u2014 "),pB=a("a"),rao=o("AlbertTokenizer"),tao=o(" or "),_B=a("a"),aao=o("AlbertTokenizerFast"),nao=o(" (Nystromformer model)"),sao=l(),ps=a("li"),Vte=a("strong"),lao=o("openai-gpt"),iao=o(" \u2014 "),uB=a("a"),dao=o("OpenAIGPTTokenizer"),cao=o(" or "),bB=a("a"),fao=o("OpenAIGPTTokenizerFast"),mao=o(" (OpenAI GPT model)"),gao=l(),Ng=a("li"),Xte=a("strong"),hao=o("opt"),pao=o(" \u2014 "),vB=a("a"),_ao=o("GPT2Tokenizer"),uao=o(" (OPT model)"),bao=l(),_s=a("li"),zte=a("strong"),vao=o("pegasus"),Fao=o(" \u2014 "),FB=a("a"),Tao=o("PegasusTokenizer"),Mao=o(" or "),TB=a("a"),Eao=o("PegasusTokenizerFast"),Cao=o(" (Pegasus model)"),wao=l(),jg=a("li"),Wte=a("strong"),Aao=o("perceiver"),yao=o(" \u2014 "),MB=a("a"),Lao=o("PerceiverTokenizer"),xao=o(" (Perceiver model)"),$ao=l(),Dg=a("li"),Qte=a("strong"),kao=o("phobert"),Sao=o(" \u2014 "),EB=a("a"),Rao=o("PhobertTokenizer"),Bao=o(" (PhoBERT model)"),Pao=l(),Gg=a("li"),Hte=a("strong"),Iao=o("plbart"),qao=o(" \u2014 "),CB=a("a"),Nao=o("PLBartTokenizer"),jao=o(" (PLBart model)"),Dao=l(),Og=a("li"),Ute=a("strong"),Gao=o("prophetnet"),Oao=o(" \u2014 "),wB=a("a"),Vao=o("ProphetNetTokenizer"),Xao=o(" (ProphetNet model)"),zao=l(),us=a("li"),Jte=a("strong"),Wao=o("qdqbert"),Qao=o(" \u2014 "),AB=a("a"),Hao=o("BertTokenizer"),Uao=o(" or "),yB=a("a"),Jao=o("BertTokenizerFast"),Yao=o(" (QDQBert model)"),Kao=l(),Vg=a("li"),Yte=a("strong"),Zao=o("rag"),eno=o(" \u2014 "),LB=a("a"),ono=o("RagTokenizer"),rno=o(" (RAG model)"),tno=l(),bs=a("li"),Kte=a("strong"),ano=o("realm"),nno=o(" \u2014 "),xB=a("a"),sno=o("RealmTokenizer"),lno=o(" or "),$B=a("a"),ino=o("RealmTokenizerFast"),dno=o(" (Realm model)"),cno=l(),vs=a("li"),Zte=a("strong"),fno=o("reformer"),mno=o(" \u2014 "),kB=a("a"),gno=o("ReformerTokenizer"),hno=o(" or "),SB=a("a"),pno=o("ReformerTokenizerFast"),_no=o(" (Reformer model)"),uno=l(),Fs=a("li"),eae=a("strong"),bno=o("rembert"),vno=o(" \u2014 "),RB=a("a"),Fno=o("RemBertTokenizer"),Tno=o(" or "),BB=a("a"),Mno=o("RemBertTokenizerFast"),Eno=o(" (RemBERT model)"),Cno=l(),Ts=a("li"),oae=a("strong"),wno=o("retribert"),Ano=o(" \u2014 "),PB=a("a"),yno=o("RetriBertTokenizer"),Lno=o(" or "),IB=a("a"),xno=o("RetriBertTokenizerFast"),$no=o(" (RetriBERT model)"),kno=l(),Ms=a("li"),rae=a("strong"),Sno=o("roberta"),Rno=o(" \u2014 "),qB=a("a"),Bno=o("RobertaTokenizer"),Pno=o(" or "),NB=a("a"),Ino=o("RobertaTokenizerFast"),qno=o(" (RoBERTa model)"),Nno=l(),Es=a("li"),tae=a("strong"),jno=o("roformer"),Dno=o(" \u2014 "),jB=a("a"),Gno=o("RoFormerTokenizer"),Ono=o(" or "),DB=a("a"),Vno=o("RoFormerTokenizerFast"),Xno=o(" (RoFormer model)"),zno=l(),Xg=a("li"),aae=a("strong"),Wno=o("speech_to_text"),Qno=o(" \u2014 "),GB=a("a"),Hno=o("Speech2TextTokenizer"),Uno=o(" (Speech2Text model)"),Jno=l(),zg=a("li"),nae=a("strong"),Yno=o("speech_to_text_2"),Kno=o(" \u2014 "),OB=a("a"),Zno=o("Speech2Text2Tokenizer"),eso=o(" (Speech2Text2 model)"),oso=l(),Cs=a("li"),sae=a("strong"),rso=o("splinter"),tso=o(" \u2014 "),VB=a("a"),aso=o("SplinterTokenizer"),nso=o(" or "),XB=a("a"),sso=o("SplinterTokenizerFast"),lso=o(" (Splinter model)"),iso=l(),ws=a("li"),lae=a("strong"),dso=o("squeezebert"),cso=o(" \u2014 "),zB=a("a"),fso=o("SqueezeBertTokenizer"),mso=o(" or "),WB=a("a"),gso=o("SqueezeBertTokenizerFast"),hso=o(" (SqueezeBERT model)"),pso=l(),As=a("li"),iae=a("strong"),_so=o("t5"),uso=o(" \u2014 "),QB=a("a"),bso=o("T5Tokenizer"),vso=o(" or "),HB=a("a"),Fso=o("T5TokenizerFast"),Tso=o(" (T5 model)"),Mso=l(),Wg=a("li"),dae=a("strong"),Eso=o("tapas"),Cso=o(" \u2014 "),UB=a("a"),wso=o("TapasTokenizer"),Aso=o(" (TAPAS model)"),yso=l(),Qg=a("li"),cae=a("strong"),Lso=o("tapex"),xso=o(" \u2014 "),JB=a("a"),$so=o("TapexTokenizer"),kso=o(" (TAPEX model)"),Sso=l(),Hg=a("li"),fae=a("strong"),Rso=o("transfo-xl"),Bso=o(" \u2014 "),YB=a("a"),Pso=o("TransfoXLTokenizer"),Iso=o(" (Transformer-XL model)"),qso=l(),ys=a("li"),mae=a("strong"),Nso=o("visual_bert"),jso=o(" \u2014 "),KB=a("a"),Dso=o("BertTokenizer"),Gso=o(" or "),ZB=a("a"),Oso=o("BertTokenizerFast"),Vso=o(" (VisualBert model)"),Xso=l(),Ug=a("li"),gae=a("strong"),zso=o("wav2vec2"),Wso=o(" \u2014 "),eP=a("a"),Qso=o("Wav2Vec2CTCTokenizer"),Hso=o(" (Wav2Vec2 model)"),Uso=l(),Jg=a("li"),hae=a("strong"),Jso=o("wav2vec2-conformer"),Yso=o(" \u2014 "),oP=a("a"),Kso=o("Wav2Vec2CTCTokenizer"),Zso=o(" (Wav2Vec2-Conformer model)"),elo=l(),Yg=a("li"),pae=a("strong"),olo=o("wav2vec2_phoneme"),rlo=o(" \u2014 "),rP=a("a"),tlo=o("Wav2Vec2PhonemeCTCTokenizer"),alo=o(" (Wav2Vec2Phoneme model)"),nlo=l(),Ls=a("li"),_ae=a("strong"),slo=o("xglm"),llo=o(" \u2014 "),tP=a("a"),ilo=o("XGLMTokenizer"),dlo=o(" or "),aP=a("a"),clo=o("XGLMTokenizerFast"),flo=o(" (XGLM model)"),mlo=l(),Kg=a("li"),uae=a("strong"),glo=o("xlm"),hlo=o(" \u2014 "),nP=a("a"),plo=o("XLMTokenizer"),_lo=o(" (XLM model)"),ulo=l(),Zg=a("li"),bae=a("strong"),blo=o("xlm-prophetnet"),vlo=o(" \u2014 "),sP=a("a"),Flo=o("XLMProphetNetTokenizer"),Tlo=o(" (XLMProphetNet model)"),Mlo=l(),xs=a("li"),vae=a("strong"),Elo=o("xlm-roberta"),Clo=o(" \u2014 "),lP=a("a"),wlo=o("XLMRobertaTokenizer"),Alo=o(" or "),iP=a("a"),ylo=o("XLMRobertaTokenizerFast"),Llo=o(" (XLM-RoBERTa model)"),xlo=l(),$s=a("li"),Fae=a("strong"),$lo=o("xlm-roberta-xl"),klo=o(" \u2014 "),dP=a("a"),Slo=o("RobertaTokenizer"),Rlo=o(" or "),cP=a("a"),Blo=o("RobertaTokenizerFast"),Plo=o(" (XLM-RoBERTa-XL model)"),Ilo=l(),ks=a("li"),Tae=a("strong"),qlo=o("xlnet"),Nlo=o(" \u2014 "),fP=a("a"),jlo=o("XLNetTokenizer"),Dlo=o(" or "),mP=a("a"),Glo=o("XLNetTokenizerFast"),Olo=o(" (XLNet model)"),Vlo=l(),Ss=a("li"),Mae=a("strong"),Xlo=o("yoso"),zlo=o(" \u2014 "),gP=a("a"),Wlo=o("AlbertTokenizer"),Qlo=o(" or "),hP=a("a"),Hlo=o("AlbertTokenizerFast"),Ulo=o(" (YOSO model)"),Jlo=l(),F(eh.$$.fragment),Ylo=l(),oh=a("div"),F(w6.$$.fragment),Klo=l(),Eae=a("p"),Zlo=o("Register a new tokenizer in this mapping."),eqe=l(),Ti=a("h2"),rh=a("a"),Cae=a("span"),F(A6.$$.fragment),eio=l(),wae=a("span"),oio=o("AutoFeatureExtractor"),oqe=l(),Ao=a("div"),F(y6.$$.fragment),rio=l(),L6=a("p"),tio=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),pP=a("a"),aio=o("AutoFeatureExtractor.from_pretrained()"),nio=o(" class method."),sio=l(),x6=a("p"),lio=o("This class cannot be instantiated directly using "),Aae=a("code"),iio=o("__init__()"),dio=o(" (throws an error)."),cio=l(),He=a("div"),F($6.$$.fragment),fio=l(),yae=a("p"),mio=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),gio=l(),ya=a("p"),hio=o("The feature extractor class to instantiate is selected based on the "),Lae=a("code"),pio=o("model_type"),_io=o(` property of the config object
(either passed as an argument or loaded from `),xae=a("code"),uio=o("pretrained_model_name_or_path"),bio=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),$ae=a("code"),vio=o("pretrained_model_name_or_path"),Fio=o(":"),Tio=l(),Z=a("ul"),th=a("li"),kae=a("strong"),Mio=o("beit"),Eio=o(" \u2014 "),_P=a("a"),Cio=o("BeitFeatureExtractor"),wio=o(" (BEiT model)"),Aio=l(),ah=a("li"),Sae=a("strong"),yio=o("clip"),Lio=o(" \u2014 "),uP=a("a"),xio=o("CLIPFeatureExtractor"),$io=o(" (CLIP model)"),kio=l(),nh=a("li"),Rae=a("strong"),Sio=o("convnext"),Rio=o(" \u2014 "),bP=a("a"),Bio=o("ConvNextFeatureExtractor"),Pio=o(" (ConvNext model)"),Iio=l(),sh=a("li"),Bae=a("strong"),qio=o("data2vec-audio"),Nio=o(" \u2014 "),vP=a("a"),jio=o("Wav2Vec2FeatureExtractor"),Dio=o(" (Data2VecAudio model)"),Gio=l(),lh=a("li"),Pae=a("strong"),Oio=o("data2vec-vision"),Vio=o(" \u2014 "),FP=a("a"),Xio=o("BeitFeatureExtractor"),zio=o(" (Data2VecVision model)"),Wio=l(),ih=a("li"),Iae=a("strong"),Qio=o("deit"),Hio=o(" \u2014 "),TP=a("a"),Uio=o("DeiTFeatureExtractor"),Jio=o(" (DeiT model)"),Yio=l(),dh=a("li"),qae=a("strong"),Kio=o("detr"),Zio=o(" \u2014 "),MP=a("a"),edo=o("DetrFeatureExtractor"),odo=o(" (DETR model)"),rdo=l(),ch=a("li"),Nae=a("strong"),tdo=o("dpt"),ado=o(" \u2014 "),EP=a("a"),ndo=o("DPTFeatureExtractor"),sdo=o(" (DPT model)"),ldo=l(),fh=a("li"),jae=a("strong"),ido=o("flava"),ddo=o(" \u2014 "),CP=a("a"),cdo=o("FlavaFeatureExtractor"),fdo=o(" (Flava model)"),mdo=l(),mh=a("li"),Dae=a("strong"),gdo=o("glpn"),hdo=o(" \u2014 "),wP=a("a"),pdo=o("GLPNFeatureExtractor"),_do=o(" (GLPN model)"),udo=l(),gh=a("li"),Gae=a("strong"),bdo=o("hubert"),vdo=o(" \u2014 "),AP=a("a"),Fdo=o("Wav2Vec2FeatureExtractor"),Tdo=o(" (Hubert model)"),Mdo=l(),hh=a("li"),Oae=a("strong"),Edo=o("layoutlmv2"),Cdo=o(" \u2014 "),yP=a("a"),wdo=o("LayoutLMv2FeatureExtractor"),Ado=o(" (LayoutLMv2 model)"),ydo=l(),ph=a("li"),Vae=a("strong"),Ldo=o("maskformer"),xdo=o(" \u2014 "),LP=a("a"),$do=o("MaskFormerFeatureExtractor"),kdo=o(" (MaskFormer model)"),Sdo=l(),_h=a("li"),Xae=a("strong"),Rdo=o("perceiver"),Bdo=o(" \u2014 "),xP=a("a"),Pdo=o("PerceiverFeatureExtractor"),Ido=o(" (Perceiver model)"),qdo=l(),uh=a("li"),zae=a("strong"),Ndo=o("poolformer"),jdo=o(" \u2014 "),$P=a("a"),Ddo=o("PoolFormerFeatureExtractor"),Gdo=o(" (PoolFormer model)"),Odo=l(),bh=a("li"),Wae=a("strong"),Vdo=o("regnet"),Xdo=o(" \u2014 "),kP=a("a"),zdo=o("ConvNextFeatureExtractor"),Wdo=o(" (RegNet model)"),Qdo=l(),vh=a("li"),Qae=a("strong"),Hdo=o("resnet"),Udo=o(" \u2014 "),SP=a("a"),Jdo=o("ConvNextFeatureExtractor"),Ydo=o(" (ResNet model)"),Kdo=l(),Fh=a("li"),Hae=a("strong"),Zdo=o("segformer"),eco=o(" \u2014 "),RP=a("a"),oco=o("SegformerFeatureExtractor"),rco=o(" (SegFormer model)"),tco=l(),Th=a("li"),Uae=a("strong"),aco=o("speech_to_text"),nco=o(" \u2014 "),BP=a("a"),sco=o("Speech2TextFeatureExtractor"),lco=o(" (Speech2Text model)"),ico=l(),Mh=a("li"),Jae=a("strong"),dco=o("swin"),cco=o(" \u2014 "),PP=a("a"),fco=o("ViTFeatureExtractor"),mco=o(" (Swin model)"),gco=l(),Eh=a("li"),Yae=a("strong"),hco=o("van"),pco=o(" \u2014 "),IP=a("a"),_co=o("ConvNextFeatureExtractor"),uco=o(" (VAN model)"),bco=l(),Ch=a("li"),Kae=a("strong"),vco=o("vit"),Fco=o(" \u2014 "),qP=a("a"),Tco=o("ViTFeatureExtractor"),Mco=o(" (ViT model)"),Eco=l(),wh=a("li"),Zae=a("strong"),Cco=o("vit_mae"),wco=o(" \u2014 "),NP=a("a"),Aco=o("ViTFeatureExtractor"),yco=o(" (ViTMAE model)"),Lco=l(),Ah=a("li"),ene=a("strong"),xco=o("wav2vec2"),$co=o(" \u2014 "),jP=a("a"),kco=o("Wav2Vec2FeatureExtractor"),Sco=o(" (Wav2Vec2 model)"),Rco=l(),yh=a("li"),one=a("strong"),Bco=o("wav2vec2-conformer"),Pco=o(" \u2014 "),DP=a("a"),Ico=o("Wav2Vec2FeatureExtractor"),qco=o(" (Wav2Vec2-Conformer model)"),Nco=l(),Lh=a("li"),rne=a("strong"),jco=o("yolos"),Dco=o(" \u2014 "),GP=a("a"),Gco=o("YolosFeatureExtractor"),Oco=o(" (YOLOS model)"),Vco=l(),F(xh.$$.fragment),Xco=l(),F($h.$$.fragment),zco=l(),kh=a("div"),F(k6.$$.fragment),Wco=l(),tne=a("p"),Qco=o("Register a new feature extractor for this class."),rqe=l(),Mi=a("h2"),Sh=a("a"),ane=a("span"),F(S6.$$.fragment),Hco=l(),nne=a("span"),Uco=o("AutoProcessor"),tqe=l(),yo=a("div"),F(R6.$$.fragment),Jco=l(),B6=a("p"),Yco=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),OP=a("a"),Kco=o("AutoProcessor.from_pretrained()"),Zco=o(" class method."),efo=l(),P6=a("p"),ofo=o("This class cannot be instantiated directly using "),sne=a("code"),rfo=o("__init__()"),tfo=o(" (throws an error)."),afo=l(),Ue=a("div"),F(I6.$$.fragment),nfo=l(),lne=a("p"),sfo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),lfo=l(),Ei=a("p"),ifo=o("The processor class to instantiate is selected based on the "),ine=a("code"),dfo=o("model_type"),cfo=o(` property of the config object (either
passed as an argument or loaded from `),dne=a("code"),ffo=o("pretrained_model_name_or_path"),mfo=o(" if possible):"),gfo=l(),pe=a("ul"),Rh=a("li"),cne=a("strong"),hfo=o("clip"),pfo=o(" \u2014 "),VP=a("a"),_fo=o("CLIPProcessor"),ufo=o(" (CLIP model)"),bfo=l(),Bh=a("li"),fne=a("strong"),vfo=o("flava"),Ffo=o(" \u2014 "),mne=a("code"),Tfo=o("FLAVAProcessor"),Mfo=o(" (Flava model)"),Efo=l(),Ph=a("li"),gne=a("strong"),Cfo=o("layoutlmv2"),wfo=o(" \u2014 "),XP=a("a"),Afo=o("LayoutLMv2Processor"),yfo=o(" (LayoutLMv2 model)"),Lfo=l(),Ih=a("li"),hne=a("strong"),xfo=o("layoutxlm"),$fo=o(" \u2014 "),zP=a("a"),kfo=o("LayoutXLMProcessor"),Sfo=o(" (LayoutXLM model)"),Rfo=l(),qh=a("li"),pne=a("strong"),Bfo=o("sew"),Pfo=o(" \u2014 "),WP=a("a"),Ifo=o("Wav2Vec2Processor"),qfo=o(" (SEW model)"),Nfo=l(),Nh=a("li"),_ne=a("strong"),jfo=o("sew-d"),Dfo=o(" \u2014 "),QP=a("a"),Gfo=o("Wav2Vec2Processor"),Ofo=o(" (SEW-D model)"),Vfo=l(),jh=a("li"),une=a("strong"),Xfo=o("speech_to_text"),zfo=o(" \u2014 "),HP=a("a"),Wfo=o("Speech2TextProcessor"),Qfo=o(" (Speech2Text model)"),Hfo=l(),Dh=a("li"),bne=a("strong"),Ufo=o("speech_to_text_2"),Jfo=o(" \u2014 "),UP=a("a"),Yfo=o("Speech2Text2Processor"),Kfo=o(" (Speech2Text2 model)"),Zfo=l(),Gh=a("li"),vne=a("strong"),emo=o("trocr"),omo=o(" \u2014 "),JP=a("a"),rmo=o("TrOCRProcessor"),tmo=o(" (TrOCR model)"),amo=l(),Oh=a("li"),Fne=a("strong"),nmo=o("unispeech"),smo=o(" \u2014 "),YP=a("a"),lmo=o("Wav2Vec2Processor"),imo=o(" (UniSpeech model)"),dmo=l(),Vh=a("li"),Tne=a("strong"),cmo=o("unispeech-sat"),fmo=o(" \u2014 "),KP=a("a"),mmo=o("Wav2Vec2Processor"),gmo=o(" (UniSpeechSat model)"),hmo=l(),Xh=a("li"),Mne=a("strong"),pmo=o("vilt"),_mo=o(" \u2014 "),ZP=a("a"),umo=o("ViltProcessor"),bmo=o(" (ViLT model)"),vmo=l(),zh=a("li"),Ene=a("strong"),Fmo=o("vision-text-dual-encoder"),Tmo=o(" \u2014 "),eI=a("a"),Mmo=o("VisionTextDualEncoderProcessor"),Emo=o(" (VisionTextDualEncoder model)"),Cmo=l(),Wh=a("li"),Cne=a("strong"),wmo=o("wav2vec2"),Amo=o(" \u2014 "),oI=a("a"),ymo=o("Wav2Vec2Processor"),Lmo=o(" (Wav2Vec2 model)"),xmo=l(),Qh=a("li"),wne=a("strong"),$mo=o("wav2vec2-conformer"),kmo=o(" \u2014 "),rI=a("a"),Smo=o("Wav2Vec2Processor"),Rmo=o(" (Wav2Vec2-Conformer model)"),Bmo=l(),Hh=a("li"),Ane=a("strong"),Pmo=o("wavlm"),Imo=o(" \u2014 "),tI=a("a"),qmo=o("Wav2Vec2Processor"),Nmo=o(" (WavLM model)"),jmo=l(),F(Uh.$$.fragment),Dmo=l(),F(Jh.$$.fragment),Gmo=l(),Yh=a("div"),F(q6.$$.fragment),Omo=l(),yne=a("p"),Vmo=o("Register a new processor for this class."),aqe=l(),Ci=a("h2"),Kh=a("a"),Lne=a("span"),F(N6.$$.fragment),Xmo=l(),xne=a("span"),zmo=o("AutoModel"),nqe=l(),Lo=a("div"),F(j6.$$.fragment),Wmo=l(),wi=a("p"),Qmo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aI=a("a"),Hmo=o("from_pretrained()"),Umo=o(" class method or the "),nI=a("a"),Jmo=o("from_config()"),Ymo=o(` class
method.`),Kmo=l(),D6=a("p"),Zmo=o("This class cannot be instantiated directly using "),$ne=a("code"),ego=o("__init__()"),ogo=o(" (throws an error)."),rgo=l(),tt=a("div"),F(G6.$$.fragment),tgo=l(),kne=a("p"),ago=o("Instantiates one of the base model classes of the library from a configuration."),ngo=l(),Ai=a("p"),sgo=o(`Note:
Loading a model from its configuration file does `),Sne=a("strong"),lgo=o("not"),igo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sI=a("a"),dgo=o("from_pretrained()"),cgo=o(" to load the model weights."),fgo=l(),F(Zh.$$.fragment),mgo=l(),Je=a("div"),F(O6.$$.fragment),ggo=l(),Rne=a("p"),hgo=o("Instantiate one of the base model classes of the library from a pretrained model."),pgo=l(),La=a("p"),_go=o("The model class to instantiate is selected based on the "),Bne=a("code"),ugo=o("model_type"),bgo=o(` property of the config object (either
passed as an argument or loaded from `),Pne=a("code"),vgo=o("pretrained_model_name_or_path"),Fgo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ine=a("code"),Tgo=o("pretrained_model_name_or_path"),Mgo=o(":"),Ego=l(),x=a("ul"),ep=a("li"),qne=a("strong"),Cgo=o("albert"),wgo=o(" \u2014 "),lI=a("a"),Ago=o("AlbertModel"),ygo=o(" (ALBERT model)"),Lgo=l(),op=a("li"),Nne=a("strong"),xgo=o("bart"),$go=o(" \u2014 "),iI=a("a"),kgo=o("BartModel"),Sgo=o(" (BART model)"),Rgo=l(),rp=a("li"),jne=a("strong"),Bgo=o("beit"),Pgo=o(" \u2014 "),dI=a("a"),Igo=o("BeitModel"),qgo=o(" (BEiT model)"),Ngo=l(),tp=a("li"),Dne=a("strong"),jgo=o("bert"),Dgo=o(" \u2014 "),cI=a("a"),Ggo=o("BertModel"),Ogo=o(" (BERT model)"),Vgo=l(),ap=a("li"),Gne=a("strong"),Xgo=o("bert-generation"),zgo=o(" \u2014 "),fI=a("a"),Wgo=o("BertGenerationEncoder"),Qgo=o(" (Bert Generation model)"),Hgo=l(),np=a("li"),One=a("strong"),Ugo=o("big_bird"),Jgo=o(" \u2014 "),mI=a("a"),Ygo=o("BigBirdModel"),Kgo=o(" (BigBird model)"),Zgo=l(),sp=a("li"),Vne=a("strong"),eho=o("bigbird_pegasus"),oho=o(" \u2014 "),gI=a("a"),rho=o("BigBirdPegasusModel"),tho=o(" (BigBirdPegasus model)"),aho=l(),lp=a("li"),Xne=a("strong"),nho=o("blenderbot"),sho=o(" \u2014 "),hI=a("a"),lho=o("BlenderbotModel"),iho=o(" (Blenderbot model)"),dho=l(),ip=a("li"),zne=a("strong"),cho=o("blenderbot-small"),fho=o(" \u2014 "),pI=a("a"),mho=o("BlenderbotSmallModel"),gho=o(" (BlenderbotSmall model)"),hho=l(),dp=a("li"),Wne=a("strong"),pho=o("bloom"),_ho=o(" \u2014 "),_I=a("a"),uho=o("BloomModel"),bho=o(" (Bloom model)"),vho=l(),cp=a("li"),Qne=a("strong"),Fho=o("camembert"),Tho=o(" \u2014 "),uI=a("a"),Mho=o("CamembertModel"),Eho=o(" (CamemBERT model)"),Cho=l(),fp=a("li"),Hne=a("strong"),who=o("canine"),Aho=o(" \u2014 "),bI=a("a"),yho=o("CanineModel"),Lho=o(" (Canine model)"),xho=l(),mp=a("li"),Une=a("strong"),$ho=o("clip"),kho=o(" \u2014 "),vI=a("a"),Sho=o("CLIPModel"),Rho=o(" (CLIP model)"),Bho=l(),gp=a("li"),Jne=a("strong"),Pho=o("convbert"),Iho=o(" \u2014 "),FI=a("a"),qho=o("ConvBertModel"),Nho=o(" (ConvBERT model)"),jho=l(),hp=a("li"),Yne=a("strong"),Dho=o("convnext"),Gho=o(" \u2014 "),TI=a("a"),Oho=o("ConvNextModel"),Vho=o(" (ConvNext model)"),Xho=l(),pp=a("li"),Kne=a("strong"),zho=o("ctrl"),Who=o(" \u2014 "),MI=a("a"),Qho=o("CTRLModel"),Hho=o(" (CTRL model)"),Uho=l(),_p=a("li"),Zne=a("strong"),Jho=o("data2vec-audio"),Yho=o(" \u2014 "),EI=a("a"),Kho=o("Data2VecAudioModel"),Zho=o(" (Data2VecAudio model)"),epo=l(),up=a("li"),ese=a("strong"),opo=o("data2vec-text"),rpo=o(" \u2014 "),CI=a("a"),tpo=o("Data2VecTextModel"),apo=o(" (Data2VecText model)"),npo=l(),bp=a("li"),ose=a("strong"),spo=o("data2vec-vision"),lpo=o(" \u2014 "),wI=a("a"),ipo=o("Data2VecVisionModel"),dpo=o(" (Data2VecVision model)"),cpo=l(),vp=a("li"),rse=a("strong"),fpo=o("deberta"),mpo=o(" \u2014 "),AI=a("a"),gpo=o("DebertaModel"),hpo=o(" (DeBERTa model)"),ppo=l(),Fp=a("li"),tse=a("strong"),_po=o("deberta-v2"),upo=o(" \u2014 "),yI=a("a"),bpo=o("DebertaV2Model"),vpo=o(" (DeBERTa-v2 model)"),Fpo=l(),Tp=a("li"),ase=a("strong"),Tpo=o("decision_transformer"),Mpo=o(" \u2014 "),LI=a("a"),Epo=o("DecisionTransformerModel"),Cpo=o(" (Decision Transformer model)"),wpo=l(),Mp=a("li"),nse=a("strong"),Apo=o("deit"),ypo=o(" \u2014 "),xI=a("a"),Lpo=o("DeiTModel"),xpo=o(" (DeiT model)"),$po=l(),Ep=a("li"),sse=a("strong"),kpo=o("detr"),Spo=o(" \u2014 "),$I=a("a"),Rpo=o("DetrModel"),Bpo=o(" (DETR model)"),Ppo=l(),Cp=a("li"),lse=a("strong"),Ipo=o("distilbert"),qpo=o(" \u2014 "),kI=a("a"),Npo=o("DistilBertModel"),jpo=o(" (DistilBERT model)"),Dpo=l(),wp=a("li"),ise=a("strong"),Gpo=o("dpr"),Opo=o(" \u2014 "),SI=a("a"),Vpo=o("DPRQuestionEncoder"),Xpo=o(" (DPR model)"),zpo=l(),Ap=a("li"),dse=a("strong"),Wpo=o("dpt"),Qpo=o(" \u2014 "),RI=a("a"),Hpo=o("DPTModel"),Upo=o(" (DPT model)"),Jpo=l(),yp=a("li"),cse=a("strong"),Ypo=o("electra"),Kpo=o(" \u2014 "),BI=a("a"),Zpo=o("ElectraModel"),e_o=o(" (ELECTRA model)"),o_o=l(),Lp=a("li"),fse=a("strong"),r_o=o("flaubert"),t_o=o(" \u2014 "),PI=a("a"),a_o=o("FlaubertModel"),n_o=o(" (FlauBERT model)"),s_o=l(),xp=a("li"),mse=a("strong"),l_o=o("flava"),i_o=o(" \u2014 "),II=a("a"),d_o=o("FlavaModel"),c_o=o(" (Flava model)"),f_o=l(),$p=a("li"),gse=a("strong"),m_o=o("fnet"),g_o=o(" \u2014 "),qI=a("a"),h_o=o("FNetModel"),p_o=o(" (FNet model)"),__o=l(),kp=a("li"),hse=a("strong"),u_o=o("fsmt"),b_o=o(" \u2014 "),NI=a("a"),v_o=o("FSMTModel"),F_o=o(" (FairSeq Machine-Translation model)"),T_o=l(),Rs=a("li"),pse=a("strong"),M_o=o("funnel"),E_o=o(" \u2014 "),jI=a("a"),C_o=o("FunnelModel"),w_o=o(" or "),DI=a("a"),A_o=o("FunnelBaseModel"),y_o=o(" (Funnel Transformer model)"),L_o=l(),Sp=a("li"),_se=a("strong"),x_o=o("glpn"),$_o=o(" \u2014 "),GI=a("a"),k_o=o("GLPNModel"),S_o=o(" (GLPN model)"),R_o=l(),Rp=a("li"),use=a("strong"),B_o=o("gpt2"),P_o=o(" \u2014 "),OI=a("a"),I_o=o("GPT2Model"),q_o=o(" (OpenAI GPT-2 model)"),N_o=l(),Bp=a("li"),bse=a("strong"),j_o=o("gpt_neo"),D_o=o(" \u2014 "),VI=a("a"),G_o=o("GPTNeoModel"),O_o=o(" (GPT Neo model)"),V_o=l(),Pp=a("li"),vse=a("strong"),X_o=o("gptj"),z_o=o(" \u2014 "),XI=a("a"),W_o=o("GPTJModel"),Q_o=o(" (GPT-J model)"),H_o=l(),Ip=a("li"),Fse=a("strong"),U_o=o("hubert"),J_o=o(" \u2014 "),zI=a("a"),Y_o=o("HubertModel"),K_o=o(" (Hubert model)"),Z_o=l(),qp=a("li"),Tse=a("strong"),euo=o("ibert"),ouo=o(" \u2014 "),WI=a("a"),ruo=o("IBertModel"),tuo=o(" (I-BERT model)"),auo=l(),Np=a("li"),Mse=a("strong"),nuo=o("imagegpt"),suo=o(" \u2014 "),QI=a("a"),luo=o("ImageGPTModel"),iuo=o(" (ImageGPT model)"),duo=l(),jp=a("li"),Ese=a("strong"),cuo=o("layoutlm"),fuo=o(" \u2014 "),HI=a("a"),muo=o("LayoutLMModel"),guo=o(" (LayoutLM model)"),huo=l(),Dp=a("li"),Cse=a("strong"),puo=o("layoutlmv2"),_uo=o(" \u2014 "),UI=a("a"),uuo=o("LayoutLMv2Model"),buo=o(" (LayoutLMv2 model)"),vuo=l(),Gp=a("li"),wse=a("strong"),Fuo=o("led"),Tuo=o(" \u2014 "),JI=a("a"),Muo=o("LEDModel"),Euo=o(" (LED model)"),Cuo=l(),Op=a("li"),Ase=a("strong"),wuo=o("longformer"),Auo=o(" \u2014 "),YI=a("a"),yuo=o("LongformerModel"),Luo=o(" (Longformer model)"),xuo=l(),Vp=a("li"),yse=a("strong"),$uo=o("luke"),kuo=o(" \u2014 "),KI=a("a"),Suo=o("LukeModel"),Ruo=o(" (LUKE model)"),Buo=l(),Xp=a("li"),Lse=a("strong"),Puo=o("lxmert"),Iuo=o(" \u2014 "),ZI=a("a"),quo=o("LxmertModel"),Nuo=o(" (LXMERT model)"),juo=l(),zp=a("li"),xse=a("strong"),Duo=o("m2m_100"),Guo=o(" \u2014 "),eq=a("a"),Ouo=o("M2M100Model"),Vuo=o(" (M2M100 model)"),Xuo=l(),Wp=a("li"),$se=a("strong"),zuo=o("marian"),Wuo=o(" \u2014 "),oq=a("a"),Quo=o("MarianModel"),Huo=o(" (Marian model)"),Uuo=l(),Qp=a("li"),kse=a("strong"),Juo=o("maskformer"),Yuo=o(" \u2014 "),rq=a("a"),Kuo=o("MaskFormerModel"),Zuo=o(" (MaskFormer model)"),e2o=l(),Hp=a("li"),Sse=a("strong"),o2o=o("mbart"),r2o=o(" \u2014 "),tq=a("a"),t2o=o("MBartModel"),a2o=o(" (mBART model)"),n2o=l(),Up=a("li"),Rse=a("strong"),s2o=o("megatron-bert"),l2o=o(" \u2014 "),aq=a("a"),i2o=o("MegatronBertModel"),d2o=o(" (MegatronBert model)"),c2o=l(),Jp=a("li"),Bse=a("strong"),f2o=o("mobilebert"),m2o=o(" \u2014 "),nq=a("a"),g2o=o("MobileBertModel"),h2o=o(" (MobileBERT model)"),p2o=l(),Yp=a("li"),Pse=a("strong"),_2o=o("mpnet"),u2o=o(" \u2014 "),sq=a("a"),b2o=o("MPNetModel"),v2o=o(" (MPNet model)"),F2o=l(),Kp=a("li"),Ise=a("strong"),T2o=o("mt5"),M2o=o(" \u2014 "),lq=a("a"),E2o=o("MT5Model"),C2o=o(" (mT5 model)"),w2o=l(),Zp=a("li"),qse=a("strong"),A2o=o("nystromformer"),y2o=o(" \u2014 "),iq=a("a"),L2o=o("NystromformerModel"),x2o=o(" (Nystromformer model)"),$2o=l(),e_=a("li"),Nse=a("strong"),k2o=o("openai-gpt"),S2o=o(" \u2014 "),dq=a("a"),R2o=o("OpenAIGPTModel"),B2o=o(" (OpenAI GPT model)"),P2o=l(),o_=a("li"),jse=a("strong"),I2o=o("opt"),q2o=o(" \u2014 "),cq=a("a"),N2o=o("OPTModel"),j2o=o(" (OPT model)"),D2o=l(),r_=a("li"),Dse=a("strong"),G2o=o("pegasus"),O2o=o(" \u2014 "),fq=a("a"),V2o=o("PegasusModel"),X2o=o(" (Pegasus model)"),z2o=l(),t_=a("li"),Gse=a("strong"),W2o=o("perceiver"),Q2o=o(" \u2014 "),mq=a("a"),H2o=o("PerceiverModel"),U2o=o(" (Perceiver model)"),J2o=l(),a_=a("li"),Ose=a("strong"),Y2o=o("plbart"),K2o=o(" \u2014 "),gq=a("a"),Z2o=o("PLBartModel"),e1o=o(" (PLBart model)"),o1o=l(),n_=a("li"),Vse=a("strong"),r1o=o("poolformer"),t1o=o(" \u2014 "),hq=a("a"),a1o=o("PoolFormerModel"),n1o=o(" (PoolFormer model)"),s1o=l(),s_=a("li"),Xse=a("strong"),l1o=o("prophetnet"),i1o=o(" \u2014 "),pq=a("a"),d1o=o("ProphetNetModel"),c1o=o(" (ProphetNet model)"),f1o=l(),l_=a("li"),zse=a("strong"),m1o=o("qdqbert"),g1o=o(" \u2014 "),_q=a("a"),h1o=o("QDQBertModel"),p1o=o(" (QDQBert model)"),_1o=l(),i_=a("li"),Wse=a("strong"),u1o=o("reformer"),b1o=o(" \u2014 "),uq=a("a"),v1o=o("ReformerModel"),F1o=o(" (Reformer model)"),T1o=l(),d_=a("li"),Qse=a("strong"),M1o=o("regnet"),E1o=o(" \u2014 "),bq=a("a"),C1o=o("RegNetModel"),w1o=o(" (RegNet model)"),A1o=l(),c_=a("li"),Hse=a("strong"),y1o=o("rembert"),L1o=o(" \u2014 "),vq=a("a"),x1o=o("RemBertModel"),$1o=o(" (RemBERT model)"),k1o=l(),f_=a("li"),Use=a("strong"),S1o=o("resnet"),R1o=o(" \u2014 "),Fq=a("a"),B1o=o("ResNetModel"),P1o=o(" (ResNet model)"),I1o=l(),m_=a("li"),Jse=a("strong"),q1o=o("retribert"),N1o=o(" \u2014 "),Tq=a("a"),j1o=o("RetriBertModel"),D1o=o(" (RetriBERT model)"),G1o=l(),g_=a("li"),Yse=a("strong"),O1o=o("roberta"),V1o=o(" \u2014 "),Mq=a("a"),X1o=o("RobertaModel"),z1o=o(" (RoBERTa model)"),W1o=l(),h_=a("li"),Kse=a("strong"),Q1o=o("roformer"),H1o=o(" \u2014 "),Eq=a("a"),U1o=o("RoFormerModel"),J1o=o(" (RoFormer model)"),Y1o=l(),p_=a("li"),Zse=a("strong"),K1o=o("segformer"),Z1o=o(" \u2014 "),Cq=a("a"),ebo=o("SegformerModel"),obo=o(" (SegFormer model)"),rbo=l(),__=a("li"),ele=a("strong"),tbo=o("sew"),abo=o(" \u2014 "),wq=a("a"),nbo=o("SEWModel"),sbo=o(" (SEW model)"),lbo=l(),u_=a("li"),ole=a("strong"),ibo=o("sew-d"),dbo=o(" \u2014 "),Aq=a("a"),cbo=o("SEWDModel"),fbo=o(" (SEW-D model)"),mbo=l(),b_=a("li"),rle=a("strong"),gbo=o("speech_to_text"),hbo=o(" \u2014 "),yq=a("a"),pbo=o("Speech2TextModel"),_bo=o(" (Speech2Text model)"),ubo=l(),v_=a("li"),tle=a("strong"),bbo=o("splinter"),vbo=o(" \u2014 "),Lq=a("a"),Fbo=o("SplinterModel"),Tbo=o(" (Splinter model)"),Mbo=l(),F_=a("li"),ale=a("strong"),Ebo=o("squeezebert"),Cbo=o(" \u2014 "),xq=a("a"),wbo=o("SqueezeBertModel"),Abo=o(" (SqueezeBERT model)"),ybo=l(),T_=a("li"),nle=a("strong"),Lbo=o("swin"),xbo=o(" \u2014 "),$q=a("a"),$bo=o("SwinModel"),kbo=o(" (Swin model)"),Sbo=l(),M_=a("li"),sle=a("strong"),Rbo=o("t5"),Bbo=o(" \u2014 "),kq=a("a"),Pbo=o("T5Model"),Ibo=o(" (T5 model)"),qbo=l(),E_=a("li"),lle=a("strong"),Nbo=o("tapas"),jbo=o(" \u2014 "),Sq=a("a"),Dbo=o("TapasModel"),Gbo=o(" (TAPAS model)"),Obo=l(),C_=a("li"),ile=a("strong"),Vbo=o("transfo-xl"),Xbo=o(" \u2014 "),Rq=a("a"),zbo=o("TransfoXLModel"),Wbo=o(" (Transformer-XL model)"),Qbo=l(),w_=a("li"),dle=a("strong"),Hbo=o("unispeech"),Ubo=o(" \u2014 "),Bq=a("a"),Jbo=o("UniSpeechModel"),Ybo=o(" (UniSpeech model)"),Kbo=l(),A_=a("li"),cle=a("strong"),Zbo=o("unispeech-sat"),evo=o(" \u2014 "),Pq=a("a"),ovo=o("UniSpeechSatModel"),rvo=o(" (UniSpeechSat model)"),tvo=l(),y_=a("li"),fle=a("strong"),avo=o("van"),nvo=o(" \u2014 "),Iq=a("a"),svo=o("VanModel"),lvo=o(" (VAN model)"),ivo=l(),L_=a("li"),mle=a("strong"),dvo=o("vilt"),cvo=o(" \u2014 "),qq=a("a"),fvo=o("ViltModel"),mvo=o(" (ViLT model)"),gvo=l(),x_=a("li"),gle=a("strong"),hvo=o("vision-text-dual-encoder"),pvo=o(" \u2014 "),Nq=a("a"),_vo=o("VisionTextDualEncoderModel"),uvo=o(" (VisionTextDualEncoder model)"),bvo=l(),$_=a("li"),hle=a("strong"),vvo=o("visual_bert"),Fvo=o(" \u2014 "),jq=a("a"),Tvo=o("VisualBertModel"),Mvo=o(" (VisualBert model)"),Evo=l(),k_=a("li"),ple=a("strong"),Cvo=o("vit"),wvo=o(" \u2014 "),Dq=a("a"),Avo=o("ViTModel"),yvo=o(" (ViT model)"),Lvo=l(),S_=a("li"),_le=a("strong"),xvo=o("vit_mae"),$vo=o(" \u2014 "),Gq=a("a"),kvo=o("ViTMAEModel"),Svo=o(" (ViTMAE model)"),Rvo=l(),R_=a("li"),ule=a("strong"),Bvo=o("wav2vec2"),Pvo=o(" \u2014 "),Oq=a("a"),Ivo=o("Wav2Vec2Model"),qvo=o(" (Wav2Vec2 model)"),Nvo=l(),B_=a("li"),ble=a("strong"),jvo=o("wav2vec2-conformer"),Dvo=o(" \u2014 "),Vq=a("a"),Gvo=o("Wav2Vec2ConformerModel"),Ovo=o(" (Wav2Vec2-Conformer model)"),Vvo=l(),P_=a("li"),vle=a("strong"),Xvo=o("wavlm"),zvo=o(" \u2014 "),Xq=a("a"),Wvo=o("WavLMModel"),Qvo=o(" (WavLM model)"),Hvo=l(),I_=a("li"),Fle=a("strong"),Uvo=o("xglm"),Jvo=o(" \u2014 "),zq=a("a"),Yvo=o("XGLMModel"),Kvo=o(" (XGLM model)"),Zvo=l(),q_=a("li"),Tle=a("strong"),eFo=o("xlm"),oFo=o(" \u2014 "),Wq=a("a"),rFo=o("XLMModel"),tFo=o(" (XLM model)"),aFo=l(),N_=a("li"),Mle=a("strong"),nFo=o("xlm-prophetnet"),sFo=o(" \u2014 "),Qq=a("a"),lFo=o("XLMProphetNetModel"),iFo=o(" (XLMProphetNet model)"),dFo=l(),j_=a("li"),Ele=a("strong"),cFo=o("xlm-roberta"),fFo=o(" \u2014 "),Hq=a("a"),mFo=o("XLMRobertaModel"),gFo=o(" (XLM-RoBERTa model)"),hFo=l(),D_=a("li"),Cle=a("strong"),pFo=o("xlm-roberta-xl"),_Fo=o(" \u2014 "),Uq=a("a"),uFo=o("XLMRobertaXLModel"),bFo=o(" (XLM-RoBERTa-XL model)"),vFo=l(),G_=a("li"),wle=a("strong"),FFo=o("xlnet"),TFo=o(" \u2014 "),Jq=a("a"),MFo=o("XLNetModel"),EFo=o(" (XLNet model)"),CFo=l(),O_=a("li"),Ale=a("strong"),wFo=o("yolos"),AFo=o(" \u2014 "),Yq=a("a"),yFo=o("YolosModel"),LFo=o(" (YOLOS model)"),xFo=l(),V_=a("li"),yle=a("strong"),$Fo=o("yoso"),kFo=o(" \u2014 "),Kq=a("a"),SFo=o("YosoModel"),RFo=o(" (YOSO model)"),BFo=l(),X_=a("p"),PFo=o("The model is set in evaluation mode by default using "),Lle=a("code"),IFo=o("model.eval()"),qFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xle=a("code"),NFo=o("model.train()"),jFo=l(),F(z_.$$.fragment),sqe=l(),yi=a("h2"),W_=a("a"),$le=a("span"),F(V6.$$.fragment),DFo=l(),kle=a("span"),GFo=o("AutoModelForPreTraining"),lqe=l(),xo=a("div"),F(X6.$$.fragment),OFo=l(),Li=a("p"),VFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Zq=a("a"),XFo=o("from_pretrained()"),zFo=o(" class method or the "),eN=a("a"),WFo=o("from_config()"),QFo=o(` class
method.`),HFo=l(),z6=a("p"),UFo=o("This class cannot be instantiated directly using "),Sle=a("code"),JFo=o("__init__()"),YFo=o(" (throws an error)."),KFo=l(),at=a("div"),F(W6.$$.fragment),ZFo=l(),Rle=a("p"),e0o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),o0o=l(),xi=a("p"),r0o=o(`Note:
Loading a model from its configuration file does `),Ble=a("strong"),t0o=o("not"),a0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oN=a("a"),n0o=o("from_pretrained()"),s0o=o(" to load the model weights."),l0o=l(),F(Q_.$$.fragment),i0o=l(),Ye=a("div"),F(Q6.$$.fragment),d0o=l(),Ple=a("p"),c0o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),f0o=l(),xa=a("p"),m0o=o("The model class to instantiate is selected based on the "),Ile=a("code"),g0o=o("model_type"),h0o=o(` property of the config object (either
passed as an argument or loaded from `),qle=a("code"),p0o=o("pretrained_model_name_or_path"),_0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nle=a("code"),u0o=o("pretrained_model_name_or_path"),b0o=o(":"),v0o=l(),G=a("ul"),H_=a("li"),jle=a("strong"),F0o=o("albert"),T0o=o(" \u2014 "),rN=a("a"),M0o=o("AlbertForPreTraining"),E0o=o(" (ALBERT model)"),C0o=l(),U_=a("li"),Dle=a("strong"),w0o=o("bart"),A0o=o(" \u2014 "),tN=a("a"),y0o=o("BartForConditionalGeneration"),L0o=o(" (BART model)"),x0o=l(),J_=a("li"),Gle=a("strong"),$0o=o("bert"),k0o=o(" \u2014 "),aN=a("a"),S0o=o("BertForPreTraining"),R0o=o(" (BERT model)"),B0o=l(),Y_=a("li"),Ole=a("strong"),P0o=o("big_bird"),I0o=o(" \u2014 "),nN=a("a"),q0o=o("BigBirdForPreTraining"),N0o=o(" (BigBird model)"),j0o=l(),K_=a("li"),Vle=a("strong"),D0o=o("bloom"),G0o=o(" \u2014 "),sN=a("a"),O0o=o("BloomForCausalLM"),V0o=o(" (Bloom model)"),X0o=l(),Z_=a("li"),Xle=a("strong"),z0o=o("camembert"),W0o=o(" \u2014 "),lN=a("a"),Q0o=o("CamembertForMaskedLM"),H0o=o(" (CamemBERT model)"),U0o=l(),eu=a("li"),zle=a("strong"),J0o=o("ctrl"),Y0o=o(" \u2014 "),iN=a("a"),K0o=o("CTRLLMHeadModel"),Z0o=o(" (CTRL model)"),eTo=l(),ou=a("li"),Wle=a("strong"),oTo=o("data2vec-text"),rTo=o(" \u2014 "),dN=a("a"),tTo=o("Data2VecTextForMaskedLM"),aTo=o(" (Data2VecText model)"),nTo=l(),ru=a("li"),Qle=a("strong"),sTo=o("deberta"),lTo=o(" \u2014 "),cN=a("a"),iTo=o("DebertaForMaskedLM"),dTo=o(" (DeBERTa model)"),cTo=l(),tu=a("li"),Hle=a("strong"),fTo=o("deberta-v2"),mTo=o(" \u2014 "),fN=a("a"),gTo=o("DebertaV2ForMaskedLM"),hTo=o(" (DeBERTa-v2 model)"),pTo=l(),au=a("li"),Ule=a("strong"),_To=o("distilbert"),uTo=o(" \u2014 "),mN=a("a"),bTo=o("DistilBertForMaskedLM"),vTo=o(" (DistilBERT model)"),FTo=l(),nu=a("li"),Jle=a("strong"),TTo=o("electra"),MTo=o(" \u2014 "),gN=a("a"),ETo=o("ElectraForPreTraining"),CTo=o(" (ELECTRA model)"),wTo=l(),su=a("li"),Yle=a("strong"),ATo=o("flaubert"),yTo=o(" \u2014 "),hN=a("a"),LTo=o("FlaubertWithLMHeadModel"),xTo=o(" (FlauBERT model)"),$To=l(),lu=a("li"),Kle=a("strong"),kTo=o("flava"),STo=o(" \u2014 "),pN=a("a"),RTo=o("FlavaForPreTraining"),BTo=o(" (Flava model)"),PTo=l(),iu=a("li"),Zle=a("strong"),ITo=o("fnet"),qTo=o(" \u2014 "),_N=a("a"),NTo=o("FNetForPreTraining"),jTo=o(" (FNet model)"),DTo=l(),du=a("li"),eie=a("strong"),GTo=o("fsmt"),OTo=o(" \u2014 "),uN=a("a"),VTo=o("FSMTForConditionalGeneration"),XTo=o(" (FairSeq Machine-Translation model)"),zTo=l(),cu=a("li"),oie=a("strong"),WTo=o("funnel"),QTo=o(" \u2014 "),bN=a("a"),HTo=o("FunnelForPreTraining"),UTo=o(" (Funnel Transformer model)"),JTo=l(),fu=a("li"),rie=a("strong"),YTo=o("gpt2"),KTo=o(" \u2014 "),vN=a("a"),ZTo=o("GPT2LMHeadModel"),e7o=o(" (OpenAI GPT-2 model)"),o7o=l(),mu=a("li"),tie=a("strong"),r7o=o("ibert"),t7o=o(" \u2014 "),FN=a("a"),a7o=o("IBertForMaskedLM"),n7o=o(" (I-BERT model)"),s7o=l(),gu=a("li"),aie=a("strong"),l7o=o("layoutlm"),i7o=o(" \u2014 "),TN=a("a"),d7o=o("LayoutLMForMaskedLM"),c7o=o(" (LayoutLM model)"),f7o=l(),hu=a("li"),nie=a("strong"),m7o=o("longformer"),g7o=o(" \u2014 "),MN=a("a"),h7o=o("LongformerForMaskedLM"),p7o=o(" (Longformer model)"),_7o=l(),pu=a("li"),sie=a("strong"),u7o=o("lxmert"),b7o=o(" \u2014 "),EN=a("a"),v7o=o("LxmertForPreTraining"),F7o=o(" (LXMERT model)"),T7o=l(),_u=a("li"),lie=a("strong"),M7o=o("megatron-bert"),E7o=o(" \u2014 "),CN=a("a"),C7o=o("MegatronBertForPreTraining"),w7o=o(" (MegatronBert model)"),A7o=l(),uu=a("li"),iie=a("strong"),y7o=o("mobilebert"),L7o=o(" \u2014 "),wN=a("a"),x7o=o("MobileBertForPreTraining"),$7o=o(" (MobileBERT model)"),k7o=l(),bu=a("li"),die=a("strong"),S7o=o("mpnet"),R7o=o(" \u2014 "),AN=a("a"),B7o=o("MPNetForMaskedLM"),P7o=o(" (MPNet model)"),I7o=l(),vu=a("li"),cie=a("strong"),q7o=o("openai-gpt"),N7o=o(" \u2014 "),yN=a("a"),j7o=o("OpenAIGPTLMHeadModel"),D7o=o(" (OpenAI GPT model)"),G7o=l(),Fu=a("li"),fie=a("strong"),O7o=o("retribert"),V7o=o(" \u2014 "),LN=a("a"),X7o=o("RetriBertModel"),z7o=o(" (RetriBERT model)"),W7o=l(),Tu=a("li"),mie=a("strong"),Q7o=o("roberta"),H7o=o(" \u2014 "),xN=a("a"),U7o=o("RobertaForMaskedLM"),J7o=o(" (RoBERTa model)"),Y7o=l(),Mu=a("li"),gie=a("strong"),K7o=o("squeezebert"),Z7o=o(" \u2014 "),$N=a("a"),eMo=o("SqueezeBertForMaskedLM"),oMo=o(" (SqueezeBERT model)"),rMo=l(),Eu=a("li"),hie=a("strong"),tMo=o("t5"),aMo=o(" \u2014 "),kN=a("a"),nMo=o("T5ForConditionalGeneration"),sMo=o(" (T5 model)"),lMo=l(),Cu=a("li"),pie=a("strong"),iMo=o("tapas"),dMo=o(" \u2014 "),SN=a("a"),cMo=o("TapasForMaskedLM"),fMo=o(" (TAPAS model)"),mMo=l(),wu=a("li"),_ie=a("strong"),gMo=o("transfo-xl"),hMo=o(" \u2014 "),RN=a("a"),pMo=o("TransfoXLLMHeadModel"),_Mo=o(" (Transformer-XL model)"),uMo=l(),Au=a("li"),uie=a("strong"),bMo=o("unispeech"),vMo=o(" \u2014 "),BN=a("a"),FMo=o("UniSpeechForPreTraining"),TMo=o(" (UniSpeech model)"),MMo=l(),yu=a("li"),bie=a("strong"),EMo=o("unispeech-sat"),CMo=o(" \u2014 "),PN=a("a"),wMo=o("UniSpeechSatForPreTraining"),AMo=o(" (UniSpeechSat model)"),yMo=l(),Lu=a("li"),vie=a("strong"),LMo=o("visual_bert"),xMo=o(" \u2014 "),IN=a("a"),$Mo=o("VisualBertForPreTraining"),kMo=o(" (VisualBert model)"),SMo=l(),xu=a("li"),Fie=a("strong"),RMo=o("vit_mae"),BMo=o(" \u2014 "),qN=a("a"),PMo=o("ViTMAEForPreTraining"),IMo=o(" (ViTMAE model)"),qMo=l(),$u=a("li"),Tie=a("strong"),NMo=o("wav2vec2"),jMo=o(" \u2014 "),NN=a("a"),DMo=o("Wav2Vec2ForPreTraining"),GMo=o(" (Wav2Vec2 model)"),OMo=l(),ku=a("li"),Mie=a("strong"),VMo=o("wav2vec2-conformer"),XMo=o(" \u2014 "),jN=a("a"),zMo=o("Wav2Vec2ConformerForPreTraining"),WMo=o(" (Wav2Vec2-Conformer model)"),QMo=l(),Su=a("li"),Eie=a("strong"),HMo=o("xlm"),UMo=o(" \u2014 "),DN=a("a"),JMo=o("XLMWithLMHeadModel"),YMo=o(" (XLM model)"),KMo=l(),Ru=a("li"),Cie=a("strong"),ZMo=o("xlm-roberta"),e4o=o(" \u2014 "),GN=a("a"),o4o=o("XLMRobertaForMaskedLM"),r4o=o(" (XLM-RoBERTa model)"),t4o=l(),Bu=a("li"),wie=a("strong"),a4o=o("xlm-roberta-xl"),n4o=o(" \u2014 "),ON=a("a"),s4o=o("XLMRobertaXLForMaskedLM"),l4o=o(" (XLM-RoBERTa-XL model)"),i4o=l(),Pu=a("li"),Aie=a("strong"),d4o=o("xlnet"),c4o=o(" \u2014 "),VN=a("a"),f4o=o("XLNetLMHeadModel"),m4o=o(" (XLNet model)"),g4o=l(),Iu=a("p"),h4o=o("The model is set in evaluation mode by default using "),yie=a("code"),p4o=o("model.eval()"),_4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lie=a("code"),u4o=o("model.train()"),b4o=l(),F(qu.$$.fragment),iqe=l(),$i=a("h2"),Nu=a("a"),xie=a("span"),F(H6.$$.fragment),v4o=l(),$ie=a("span"),F4o=o("AutoModelForCausalLM"),dqe=l(),$o=a("div"),F(U6.$$.fragment),T4o=l(),ki=a("p"),M4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),XN=a("a"),E4o=o("from_pretrained()"),C4o=o(" class method or the "),zN=a("a"),w4o=o("from_config()"),A4o=o(` class
method.`),y4o=l(),J6=a("p"),L4o=o("This class cannot be instantiated directly using "),kie=a("code"),x4o=o("__init__()"),$4o=o(" (throws an error)."),k4o=l(),nt=a("div"),F(Y6.$$.fragment),S4o=l(),Sie=a("p"),R4o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),B4o=l(),Si=a("p"),P4o=o(`Note:
Loading a model from its configuration file does `),Rie=a("strong"),I4o=o("not"),q4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WN=a("a"),N4o=o("from_pretrained()"),j4o=o(" to load the model weights."),D4o=l(),F(ju.$$.fragment),G4o=l(),Ke=a("div"),F(K6.$$.fragment),O4o=l(),Bie=a("p"),V4o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),X4o=l(),$a=a("p"),z4o=o("The model class to instantiate is selected based on the "),Pie=a("code"),W4o=o("model_type"),Q4o=o(` property of the config object (either
passed as an argument or loaded from `),Iie=a("code"),H4o=o("pretrained_model_name_or_path"),U4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qie=a("code"),J4o=o("pretrained_model_name_or_path"),Y4o=o(":"),K4o=l(),z=a("ul"),Du=a("li"),Nie=a("strong"),Z4o=o("bart"),eEo=o(" \u2014 "),QN=a("a"),oEo=o("BartForCausalLM"),rEo=o(" (BART model)"),tEo=l(),Gu=a("li"),jie=a("strong"),aEo=o("bert"),nEo=o(" \u2014 "),HN=a("a"),sEo=o("BertLMHeadModel"),lEo=o(" (BERT model)"),iEo=l(),Ou=a("li"),Die=a("strong"),dEo=o("bert-generation"),cEo=o(" \u2014 "),UN=a("a"),fEo=o("BertGenerationDecoder"),mEo=o(" (Bert Generation model)"),gEo=l(),Vu=a("li"),Gie=a("strong"),hEo=o("big_bird"),pEo=o(" \u2014 "),JN=a("a"),_Eo=o("BigBirdForCausalLM"),uEo=o(" (BigBird model)"),bEo=l(),Xu=a("li"),Oie=a("strong"),vEo=o("bigbird_pegasus"),FEo=o(" \u2014 "),YN=a("a"),TEo=o("BigBirdPegasusForCausalLM"),MEo=o(" (BigBirdPegasus model)"),EEo=l(),zu=a("li"),Vie=a("strong"),CEo=o("blenderbot"),wEo=o(" \u2014 "),KN=a("a"),AEo=o("BlenderbotForCausalLM"),yEo=o(" (Blenderbot model)"),LEo=l(),Wu=a("li"),Xie=a("strong"),xEo=o("blenderbot-small"),$Eo=o(" \u2014 "),ZN=a("a"),kEo=o("BlenderbotSmallForCausalLM"),SEo=o(" (BlenderbotSmall model)"),REo=l(),Qu=a("li"),zie=a("strong"),BEo=o("bloom"),PEo=o(" \u2014 "),ej=a("a"),IEo=o("BloomForCausalLM"),qEo=o(" (Bloom model)"),NEo=l(),Hu=a("li"),Wie=a("strong"),jEo=o("camembert"),DEo=o(" \u2014 "),oj=a("a"),GEo=o("CamembertForCausalLM"),OEo=o(" (CamemBERT model)"),VEo=l(),Uu=a("li"),Qie=a("strong"),XEo=o("ctrl"),zEo=o(" \u2014 "),rj=a("a"),WEo=o("CTRLLMHeadModel"),QEo=o(" (CTRL model)"),HEo=l(),Ju=a("li"),Hie=a("strong"),UEo=o("data2vec-text"),JEo=o(" \u2014 "),tj=a("a"),YEo=o("Data2VecTextForCausalLM"),KEo=o(" (Data2VecText model)"),ZEo=l(),Yu=a("li"),Uie=a("strong"),eCo=o("electra"),oCo=o(" \u2014 "),aj=a("a"),rCo=o("ElectraForCausalLM"),tCo=o(" (ELECTRA model)"),aCo=l(),Ku=a("li"),Jie=a("strong"),nCo=o("gpt2"),sCo=o(" \u2014 "),nj=a("a"),lCo=o("GPT2LMHeadModel"),iCo=o(" (OpenAI GPT-2 model)"),dCo=l(),Zu=a("li"),Yie=a("strong"),cCo=o("gpt_neo"),fCo=o(" \u2014 "),sj=a("a"),mCo=o("GPTNeoForCausalLM"),gCo=o(" (GPT Neo model)"),hCo=l(),e2=a("li"),Kie=a("strong"),pCo=o("gptj"),_Co=o(" \u2014 "),lj=a("a"),uCo=o("GPTJForCausalLM"),bCo=o(" (GPT-J model)"),vCo=l(),o2=a("li"),Zie=a("strong"),FCo=o("marian"),TCo=o(" \u2014 "),ij=a("a"),MCo=o("MarianForCausalLM"),ECo=o(" (Marian model)"),CCo=l(),r2=a("li"),ede=a("strong"),wCo=o("mbart"),ACo=o(" \u2014 "),dj=a("a"),yCo=o("MBartForCausalLM"),LCo=o(" (mBART model)"),xCo=l(),t2=a("li"),ode=a("strong"),$Co=o("megatron-bert"),kCo=o(" \u2014 "),cj=a("a"),SCo=o("MegatronBertForCausalLM"),RCo=o(" (MegatronBert model)"),BCo=l(),a2=a("li"),rde=a("strong"),PCo=o("openai-gpt"),ICo=o(" \u2014 "),fj=a("a"),qCo=o("OpenAIGPTLMHeadModel"),NCo=o(" (OpenAI GPT model)"),jCo=l(),n2=a("li"),tde=a("strong"),DCo=o("opt"),GCo=o(" \u2014 "),mj=a("a"),OCo=o("OPTForCausalLM"),VCo=o(" (OPT model)"),XCo=l(),s2=a("li"),ade=a("strong"),zCo=o("pegasus"),WCo=o(" \u2014 "),gj=a("a"),QCo=o("PegasusForCausalLM"),HCo=o(" (Pegasus model)"),UCo=l(),l2=a("li"),nde=a("strong"),JCo=o("plbart"),YCo=o(" \u2014 "),hj=a("a"),KCo=o("PLBartForCausalLM"),ZCo=o(" (PLBart model)"),e5o=l(),i2=a("li"),sde=a("strong"),o5o=o("prophetnet"),r5o=o(" \u2014 "),pj=a("a"),t5o=o("ProphetNetForCausalLM"),a5o=o(" (ProphetNet model)"),n5o=l(),d2=a("li"),lde=a("strong"),s5o=o("qdqbert"),l5o=o(" \u2014 "),_j=a("a"),i5o=o("QDQBertLMHeadModel"),d5o=o(" (QDQBert model)"),c5o=l(),c2=a("li"),ide=a("strong"),f5o=o("reformer"),m5o=o(" \u2014 "),uj=a("a"),g5o=o("ReformerModelWithLMHead"),h5o=o(" (Reformer model)"),p5o=l(),f2=a("li"),dde=a("strong"),_5o=o("rembert"),u5o=o(" \u2014 "),bj=a("a"),b5o=o("RemBertForCausalLM"),v5o=o(" (RemBERT model)"),F5o=l(),m2=a("li"),cde=a("strong"),T5o=o("roberta"),M5o=o(" \u2014 "),vj=a("a"),E5o=o("RobertaForCausalLM"),C5o=o(" (RoBERTa model)"),w5o=l(),g2=a("li"),fde=a("strong"),A5o=o("roformer"),y5o=o(" \u2014 "),Fj=a("a"),L5o=o("RoFormerForCausalLM"),x5o=o(" (RoFormer model)"),$5o=l(),h2=a("li"),mde=a("strong"),k5o=o("speech_to_text_2"),S5o=o(" \u2014 "),Tj=a("a"),R5o=o("Speech2Text2ForCausalLM"),B5o=o(" (Speech2Text2 model)"),P5o=l(),p2=a("li"),gde=a("strong"),I5o=o("transfo-xl"),q5o=o(" \u2014 "),Mj=a("a"),N5o=o("TransfoXLLMHeadModel"),j5o=o(" (Transformer-XL model)"),D5o=l(),_2=a("li"),hde=a("strong"),G5o=o("trocr"),O5o=o(" \u2014 "),Ej=a("a"),V5o=o("TrOCRForCausalLM"),X5o=o(" (TrOCR model)"),z5o=l(),u2=a("li"),pde=a("strong"),W5o=o("xglm"),Q5o=o(" \u2014 "),Cj=a("a"),H5o=o("XGLMForCausalLM"),U5o=o(" (XGLM model)"),J5o=l(),b2=a("li"),_de=a("strong"),Y5o=o("xlm"),K5o=o(" \u2014 "),wj=a("a"),Z5o=o("XLMWithLMHeadModel"),e3o=o(" (XLM model)"),o3o=l(),v2=a("li"),ude=a("strong"),r3o=o("xlm-prophetnet"),t3o=o(" \u2014 "),Aj=a("a"),a3o=o("XLMProphetNetForCausalLM"),n3o=o(" (XLMProphetNet model)"),s3o=l(),F2=a("li"),bde=a("strong"),l3o=o("xlm-roberta"),i3o=o(" \u2014 "),yj=a("a"),d3o=o("XLMRobertaForCausalLM"),c3o=o(" (XLM-RoBERTa model)"),f3o=l(),T2=a("li"),vde=a("strong"),m3o=o("xlm-roberta-xl"),g3o=o(" \u2014 "),Lj=a("a"),h3o=o("XLMRobertaXLForCausalLM"),p3o=o(" (XLM-RoBERTa-XL model)"),_3o=l(),M2=a("li"),Fde=a("strong"),u3o=o("xlnet"),b3o=o(" \u2014 "),xj=a("a"),v3o=o("XLNetLMHeadModel"),F3o=o(" (XLNet model)"),T3o=l(),E2=a("p"),M3o=o("The model is set in evaluation mode by default using "),Tde=a("code"),E3o=o("model.eval()"),C3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mde=a("code"),w3o=o("model.train()"),A3o=l(),F(C2.$$.fragment),cqe=l(),Ri=a("h2"),w2=a("a"),Ede=a("span"),F(Z6.$$.fragment),y3o=l(),Cde=a("span"),L3o=o("AutoModelForMaskedLM"),fqe=l(),ko=a("div"),F(ey.$$.fragment),x3o=l(),Bi=a("p"),$3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$j=a("a"),k3o=o("from_pretrained()"),S3o=o(" class method or the "),kj=a("a"),R3o=o("from_config()"),B3o=o(` class
method.`),P3o=l(),oy=a("p"),I3o=o("This class cannot be instantiated directly using "),wde=a("code"),q3o=o("__init__()"),N3o=o(" (throws an error)."),j3o=l(),st=a("div"),F(ry.$$.fragment),D3o=l(),Ade=a("p"),G3o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),O3o=l(),Pi=a("p"),V3o=o(`Note:
Loading a model from its configuration file does `),yde=a("strong"),X3o=o("not"),z3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sj=a("a"),W3o=o("from_pretrained()"),Q3o=o(" to load the model weights."),H3o=l(),F(A2.$$.fragment),U3o=l(),Ze=a("div"),F(ty.$$.fragment),J3o=l(),Lde=a("p"),Y3o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),K3o=l(),ka=a("p"),Z3o=o("The model class to instantiate is selected based on the "),xde=a("code"),ewo=o("model_type"),owo=o(` property of the config object (either
passed as an argument or loaded from `),$de=a("code"),rwo=o("pretrained_model_name_or_path"),two=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kde=a("code"),awo=o("pretrained_model_name_or_path"),nwo=o(":"),swo=l(),Q=a("ul"),y2=a("li"),Sde=a("strong"),lwo=o("albert"),iwo=o(" \u2014 "),Rj=a("a"),dwo=o("AlbertForMaskedLM"),cwo=o(" (ALBERT model)"),fwo=l(),L2=a("li"),Rde=a("strong"),mwo=o("bart"),gwo=o(" \u2014 "),Bj=a("a"),hwo=o("BartForConditionalGeneration"),pwo=o(" (BART model)"),_wo=l(),x2=a("li"),Bde=a("strong"),uwo=o("bert"),bwo=o(" \u2014 "),Pj=a("a"),vwo=o("BertForMaskedLM"),Fwo=o(" (BERT model)"),Two=l(),$2=a("li"),Pde=a("strong"),Mwo=o("big_bird"),Ewo=o(" \u2014 "),Ij=a("a"),Cwo=o("BigBirdForMaskedLM"),wwo=o(" (BigBird model)"),Awo=l(),k2=a("li"),Ide=a("strong"),ywo=o("camembert"),Lwo=o(" \u2014 "),qj=a("a"),xwo=o("CamembertForMaskedLM"),$wo=o(" (CamemBERT model)"),kwo=l(),S2=a("li"),qde=a("strong"),Swo=o("convbert"),Rwo=o(" \u2014 "),Nj=a("a"),Bwo=o("ConvBertForMaskedLM"),Pwo=o(" (ConvBERT model)"),Iwo=l(),R2=a("li"),Nde=a("strong"),qwo=o("data2vec-text"),Nwo=o(" \u2014 "),jj=a("a"),jwo=o("Data2VecTextForMaskedLM"),Dwo=o(" (Data2VecText model)"),Gwo=l(),B2=a("li"),jde=a("strong"),Owo=o("deberta"),Vwo=o(" \u2014 "),Dj=a("a"),Xwo=o("DebertaForMaskedLM"),zwo=o(" (DeBERTa model)"),Wwo=l(),P2=a("li"),Dde=a("strong"),Qwo=o("deberta-v2"),Hwo=o(" \u2014 "),Gj=a("a"),Uwo=o("DebertaV2ForMaskedLM"),Jwo=o(" (DeBERTa-v2 model)"),Ywo=l(),I2=a("li"),Gde=a("strong"),Kwo=o("distilbert"),Zwo=o(" \u2014 "),Oj=a("a"),eAo=o("DistilBertForMaskedLM"),oAo=o(" (DistilBERT model)"),rAo=l(),q2=a("li"),Ode=a("strong"),tAo=o("electra"),aAo=o(" \u2014 "),Vj=a("a"),nAo=o("ElectraForMaskedLM"),sAo=o(" (ELECTRA model)"),lAo=l(),N2=a("li"),Vde=a("strong"),iAo=o("flaubert"),dAo=o(" \u2014 "),Xj=a("a"),cAo=o("FlaubertWithLMHeadModel"),fAo=o(" (FlauBERT model)"),mAo=l(),j2=a("li"),Xde=a("strong"),gAo=o("fnet"),hAo=o(" \u2014 "),zj=a("a"),pAo=o("FNetForMaskedLM"),_Ao=o(" (FNet model)"),uAo=l(),D2=a("li"),zde=a("strong"),bAo=o("funnel"),vAo=o(" \u2014 "),Wj=a("a"),FAo=o("FunnelForMaskedLM"),TAo=o(" (Funnel Transformer model)"),MAo=l(),G2=a("li"),Wde=a("strong"),EAo=o("ibert"),CAo=o(" \u2014 "),Qj=a("a"),wAo=o("IBertForMaskedLM"),AAo=o(" (I-BERT model)"),yAo=l(),O2=a("li"),Qde=a("strong"),LAo=o("layoutlm"),xAo=o(" \u2014 "),Hj=a("a"),$Ao=o("LayoutLMForMaskedLM"),kAo=o(" (LayoutLM model)"),SAo=l(),V2=a("li"),Hde=a("strong"),RAo=o("longformer"),BAo=o(" \u2014 "),Uj=a("a"),PAo=o("LongformerForMaskedLM"),IAo=o(" (Longformer model)"),qAo=l(),X2=a("li"),Ude=a("strong"),NAo=o("mbart"),jAo=o(" \u2014 "),Jj=a("a"),DAo=o("MBartForConditionalGeneration"),GAo=o(" (mBART model)"),OAo=l(),z2=a("li"),Jde=a("strong"),VAo=o("megatron-bert"),XAo=o(" \u2014 "),Yj=a("a"),zAo=o("MegatronBertForMaskedLM"),WAo=o(" (MegatronBert model)"),QAo=l(),W2=a("li"),Yde=a("strong"),HAo=o("mobilebert"),UAo=o(" \u2014 "),Kj=a("a"),JAo=o("MobileBertForMaskedLM"),YAo=o(" (MobileBERT model)"),KAo=l(),Q2=a("li"),Kde=a("strong"),ZAo=o("mpnet"),e6o=o(" \u2014 "),Zj=a("a"),o6o=o("MPNetForMaskedLM"),r6o=o(" (MPNet model)"),t6o=l(),H2=a("li"),Zde=a("strong"),a6o=o("nystromformer"),n6o=o(" \u2014 "),eD=a("a"),s6o=o("NystromformerForMaskedLM"),l6o=o(" (Nystromformer model)"),i6o=l(),U2=a("li"),ece=a("strong"),d6o=o("perceiver"),c6o=o(" \u2014 "),oD=a("a"),f6o=o("PerceiverForMaskedLM"),m6o=o(" (Perceiver model)"),g6o=l(),J2=a("li"),oce=a("strong"),h6o=o("qdqbert"),p6o=o(" \u2014 "),rD=a("a"),_6o=o("QDQBertForMaskedLM"),u6o=o(" (QDQBert model)"),b6o=l(),Y2=a("li"),rce=a("strong"),v6o=o("reformer"),F6o=o(" \u2014 "),tD=a("a"),T6o=o("ReformerForMaskedLM"),M6o=o(" (Reformer model)"),E6o=l(),K2=a("li"),tce=a("strong"),C6o=o("rembert"),w6o=o(" \u2014 "),aD=a("a"),A6o=o("RemBertForMaskedLM"),y6o=o(" (RemBERT model)"),L6o=l(),Z2=a("li"),ace=a("strong"),x6o=o("roberta"),$6o=o(" \u2014 "),nD=a("a"),k6o=o("RobertaForMaskedLM"),S6o=o(" (RoBERTa model)"),R6o=l(),e1=a("li"),nce=a("strong"),B6o=o("roformer"),P6o=o(" \u2014 "),sD=a("a"),I6o=o("RoFormerForMaskedLM"),q6o=o(" (RoFormer model)"),N6o=l(),o1=a("li"),sce=a("strong"),j6o=o("squeezebert"),D6o=o(" \u2014 "),lD=a("a"),G6o=o("SqueezeBertForMaskedLM"),O6o=o(" (SqueezeBERT model)"),V6o=l(),r1=a("li"),lce=a("strong"),X6o=o("tapas"),z6o=o(" \u2014 "),iD=a("a"),W6o=o("TapasForMaskedLM"),Q6o=o(" (TAPAS model)"),H6o=l(),t1=a("li"),ice=a("strong"),U6o=o("wav2vec2"),J6o=o(" \u2014 "),dce=a("code"),Y6o=o("Wav2Vec2ForMaskedLM"),K6o=o(" (Wav2Vec2 model)"),Z6o=l(),a1=a("li"),cce=a("strong"),eyo=o("xlm"),oyo=o(" \u2014 "),dD=a("a"),ryo=o("XLMWithLMHeadModel"),tyo=o(" (XLM model)"),ayo=l(),n1=a("li"),fce=a("strong"),nyo=o("xlm-roberta"),syo=o(" \u2014 "),cD=a("a"),lyo=o("XLMRobertaForMaskedLM"),iyo=o(" (XLM-RoBERTa model)"),dyo=l(),s1=a("li"),mce=a("strong"),cyo=o("xlm-roberta-xl"),fyo=o(" \u2014 "),fD=a("a"),myo=o("XLMRobertaXLForMaskedLM"),gyo=o(" (XLM-RoBERTa-XL model)"),hyo=l(),l1=a("li"),gce=a("strong"),pyo=o("yoso"),_yo=o(" \u2014 "),mD=a("a"),uyo=o("YosoForMaskedLM"),byo=o(" (YOSO model)"),vyo=l(),i1=a("p"),Fyo=o("The model is set in evaluation mode by default using "),hce=a("code"),Tyo=o("model.eval()"),Myo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pce=a("code"),Eyo=o("model.train()"),Cyo=l(),F(d1.$$.fragment),mqe=l(),Ii=a("h2"),c1=a("a"),_ce=a("span"),F(ay.$$.fragment),wyo=l(),uce=a("span"),Ayo=o("AutoModelForSeq2SeqLM"),gqe=l(),So=a("div"),F(ny.$$.fragment),yyo=l(),qi=a("p"),Lyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gD=a("a"),xyo=o("from_pretrained()"),$yo=o(" class method or the "),hD=a("a"),kyo=o("from_config()"),Syo=o(` class
method.`),Ryo=l(),sy=a("p"),Byo=o("This class cannot be instantiated directly using "),bce=a("code"),Pyo=o("__init__()"),Iyo=o(" (throws an error)."),qyo=l(),lt=a("div"),F(ly.$$.fragment),Nyo=l(),vce=a("p"),jyo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Dyo=l(),Ni=a("p"),Gyo=o(`Note:
Loading a model from its configuration file does `),Fce=a("strong"),Oyo=o("not"),Vyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pD=a("a"),Xyo=o("from_pretrained()"),zyo=o(" to load the model weights."),Wyo=l(),F(f1.$$.fragment),Qyo=l(),eo=a("div"),F(iy.$$.fragment),Hyo=l(),Tce=a("p"),Uyo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Jyo=l(),Sa=a("p"),Yyo=o("The model class to instantiate is selected based on the "),Mce=a("code"),Kyo=o("model_type"),Zyo=o(` property of the config object (either
passed as an argument or loaded from `),Ece=a("code"),eLo=o("pretrained_model_name_or_path"),oLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cce=a("code"),rLo=o("pretrained_model_name_or_path"),tLo=o(":"),aLo=l(),_e=a("ul"),m1=a("li"),wce=a("strong"),nLo=o("bart"),sLo=o(" \u2014 "),_D=a("a"),lLo=o("BartForConditionalGeneration"),iLo=o(" (BART model)"),dLo=l(),g1=a("li"),Ace=a("strong"),cLo=o("bigbird_pegasus"),fLo=o(" \u2014 "),uD=a("a"),mLo=o("BigBirdPegasusForConditionalGeneration"),gLo=o(" (BigBirdPegasus model)"),hLo=l(),h1=a("li"),yce=a("strong"),pLo=o("blenderbot"),_Lo=o(" \u2014 "),bD=a("a"),uLo=o("BlenderbotForConditionalGeneration"),bLo=o(" (Blenderbot model)"),vLo=l(),p1=a("li"),Lce=a("strong"),FLo=o("blenderbot-small"),TLo=o(" \u2014 "),vD=a("a"),MLo=o("BlenderbotSmallForConditionalGeneration"),ELo=o(" (BlenderbotSmall model)"),CLo=l(),_1=a("li"),xce=a("strong"),wLo=o("encoder-decoder"),ALo=o(" \u2014 "),FD=a("a"),yLo=o("EncoderDecoderModel"),LLo=o(" (Encoder decoder model)"),xLo=l(),u1=a("li"),$ce=a("strong"),$Lo=o("fsmt"),kLo=o(" \u2014 "),TD=a("a"),SLo=o("FSMTForConditionalGeneration"),RLo=o(" (FairSeq Machine-Translation model)"),BLo=l(),b1=a("li"),kce=a("strong"),PLo=o("led"),ILo=o(" \u2014 "),MD=a("a"),qLo=o("LEDForConditionalGeneration"),NLo=o(" (LED model)"),jLo=l(),v1=a("li"),Sce=a("strong"),DLo=o("m2m_100"),GLo=o(" \u2014 "),ED=a("a"),OLo=o("M2M100ForConditionalGeneration"),VLo=o(" (M2M100 model)"),XLo=l(),F1=a("li"),Rce=a("strong"),zLo=o("marian"),WLo=o(" \u2014 "),CD=a("a"),QLo=o("MarianMTModel"),HLo=o(" (Marian model)"),ULo=l(),T1=a("li"),Bce=a("strong"),JLo=o("mbart"),YLo=o(" \u2014 "),wD=a("a"),KLo=o("MBartForConditionalGeneration"),ZLo=o(" (mBART model)"),e8o=l(),M1=a("li"),Pce=a("strong"),o8o=o("mt5"),r8o=o(" \u2014 "),AD=a("a"),t8o=o("MT5ForConditionalGeneration"),a8o=o(" (mT5 model)"),n8o=l(),E1=a("li"),Ice=a("strong"),s8o=o("pegasus"),l8o=o(" \u2014 "),yD=a("a"),i8o=o("PegasusForConditionalGeneration"),d8o=o(" (Pegasus model)"),c8o=l(),C1=a("li"),qce=a("strong"),f8o=o("plbart"),m8o=o(" \u2014 "),LD=a("a"),g8o=o("PLBartForConditionalGeneration"),h8o=o(" (PLBart model)"),p8o=l(),w1=a("li"),Nce=a("strong"),_8o=o("prophetnet"),u8o=o(" \u2014 "),xD=a("a"),b8o=o("ProphetNetForConditionalGeneration"),v8o=o(" (ProphetNet model)"),F8o=l(),A1=a("li"),jce=a("strong"),T8o=o("t5"),M8o=o(" \u2014 "),$D=a("a"),E8o=o("T5ForConditionalGeneration"),C8o=o(" (T5 model)"),w8o=l(),y1=a("li"),Dce=a("strong"),A8o=o("xlm-prophetnet"),y8o=o(" \u2014 "),kD=a("a"),L8o=o("XLMProphetNetForConditionalGeneration"),x8o=o(" (XLMProphetNet model)"),$8o=l(),L1=a("p"),k8o=o("The model is set in evaluation mode by default using "),Gce=a("code"),S8o=o("model.eval()"),R8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oce=a("code"),B8o=o("model.train()"),P8o=l(),F(x1.$$.fragment),hqe=l(),ji=a("h2"),$1=a("a"),Vce=a("span"),F(dy.$$.fragment),I8o=l(),Xce=a("span"),q8o=o("AutoModelForSequenceClassification"),pqe=l(),Ro=a("div"),F(cy.$$.fragment),N8o=l(),Di=a("p"),j8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),SD=a("a"),D8o=o("from_pretrained()"),G8o=o(" class method or the "),RD=a("a"),O8o=o("from_config()"),V8o=o(` class
method.`),X8o=l(),fy=a("p"),z8o=o("This class cannot be instantiated directly using "),zce=a("code"),W8o=o("__init__()"),Q8o=o(" (throws an error)."),H8o=l(),it=a("div"),F(my.$$.fragment),U8o=l(),Wce=a("p"),J8o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Y8o=l(),Gi=a("p"),K8o=o(`Note:
Loading a model from its configuration file does `),Qce=a("strong"),Z8o=o("not"),e9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BD=a("a"),o9o=o("from_pretrained()"),r9o=o(" to load the model weights."),t9o=l(),F(k1.$$.fragment),a9o=l(),oo=a("div"),F(gy.$$.fragment),n9o=l(),Hce=a("p"),s9o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),l9o=l(),Ra=a("p"),i9o=o("The model class to instantiate is selected based on the "),Uce=a("code"),d9o=o("model_type"),c9o=o(` property of the config object (either
passed as an argument or loaded from `),Jce=a("code"),f9o=o("pretrained_model_name_or_path"),m9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=a("code"),g9o=o("pretrained_model_name_or_path"),h9o=o(":"),p9o=l(),q=a("ul"),S1=a("li"),Kce=a("strong"),_9o=o("albert"),u9o=o(" \u2014 "),PD=a("a"),b9o=o("AlbertForSequenceClassification"),v9o=o(" (ALBERT model)"),F9o=l(),R1=a("li"),Zce=a("strong"),T9o=o("bart"),M9o=o(" \u2014 "),ID=a("a"),E9o=o("BartForSequenceClassification"),C9o=o(" (BART model)"),w9o=l(),B1=a("li"),efe=a("strong"),A9o=o("bert"),y9o=o(" \u2014 "),qD=a("a"),L9o=o("BertForSequenceClassification"),x9o=o(" (BERT model)"),$9o=l(),P1=a("li"),ofe=a("strong"),k9o=o("big_bird"),S9o=o(" \u2014 "),ND=a("a"),R9o=o("BigBirdForSequenceClassification"),B9o=o(" (BigBird model)"),P9o=l(),I1=a("li"),rfe=a("strong"),I9o=o("bigbird_pegasus"),q9o=o(" \u2014 "),jD=a("a"),N9o=o("BigBirdPegasusForSequenceClassification"),j9o=o(" (BigBirdPegasus model)"),D9o=l(),q1=a("li"),tfe=a("strong"),G9o=o("camembert"),O9o=o(" \u2014 "),DD=a("a"),V9o=o("CamembertForSequenceClassification"),X9o=o(" (CamemBERT model)"),z9o=l(),N1=a("li"),afe=a("strong"),W9o=o("canine"),Q9o=o(" \u2014 "),GD=a("a"),H9o=o("CanineForSequenceClassification"),U9o=o(" (Canine model)"),J9o=l(),j1=a("li"),nfe=a("strong"),Y9o=o("convbert"),K9o=o(" \u2014 "),OD=a("a"),Z9o=o("ConvBertForSequenceClassification"),exo=o(" (ConvBERT model)"),oxo=l(),D1=a("li"),sfe=a("strong"),rxo=o("ctrl"),txo=o(" \u2014 "),VD=a("a"),axo=o("CTRLForSequenceClassification"),nxo=o(" (CTRL model)"),sxo=l(),G1=a("li"),lfe=a("strong"),lxo=o("data2vec-text"),ixo=o(" \u2014 "),XD=a("a"),dxo=o("Data2VecTextForSequenceClassification"),cxo=o(" (Data2VecText model)"),fxo=l(),O1=a("li"),ife=a("strong"),mxo=o("deberta"),gxo=o(" \u2014 "),zD=a("a"),hxo=o("DebertaForSequenceClassification"),pxo=o(" (DeBERTa model)"),_xo=l(),V1=a("li"),dfe=a("strong"),uxo=o("deberta-v2"),bxo=o(" \u2014 "),WD=a("a"),vxo=o("DebertaV2ForSequenceClassification"),Fxo=o(" (DeBERTa-v2 model)"),Txo=l(),X1=a("li"),cfe=a("strong"),Mxo=o("distilbert"),Exo=o(" \u2014 "),QD=a("a"),Cxo=o("DistilBertForSequenceClassification"),wxo=o(" (DistilBERT model)"),Axo=l(),z1=a("li"),ffe=a("strong"),yxo=o("electra"),Lxo=o(" \u2014 "),HD=a("a"),xxo=o("ElectraForSequenceClassification"),$xo=o(" (ELECTRA model)"),kxo=l(),W1=a("li"),mfe=a("strong"),Sxo=o("flaubert"),Rxo=o(" \u2014 "),UD=a("a"),Bxo=o("FlaubertForSequenceClassification"),Pxo=o(" (FlauBERT model)"),Ixo=l(),Q1=a("li"),gfe=a("strong"),qxo=o("fnet"),Nxo=o(" \u2014 "),JD=a("a"),jxo=o("FNetForSequenceClassification"),Dxo=o(" (FNet model)"),Gxo=l(),H1=a("li"),hfe=a("strong"),Oxo=o("funnel"),Vxo=o(" \u2014 "),YD=a("a"),Xxo=o("FunnelForSequenceClassification"),zxo=o(" (Funnel Transformer model)"),Wxo=l(),U1=a("li"),pfe=a("strong"),Qxo=o("gpt2"),Hxo=o(" \u2014 "),KD=a("a"),Uxo=o("GPT2ForSequenceClassification"),Jxo=o(" (OpenAI GPT-2 model)"),Yxo=l(),J1=a("li"),_fe=a("strong"),Kxo=o("gpt_neo"),Zxo=o(" \u2014 "),ZD=a("a"),e$o=o("GPTNeoForSequenceClassification"),o$o=o(" (GPT Neo model)"),r$o=l(),Y1=a("li"),ufe=a("strong"),t$o=o("gptj"),a$o=o(" \u2014 "),eG=a("a"),n$o=o("GPTJForSequenceClassification"),s$o=o(" (GPT-J model)"),l$o=l(),K1=a("li"),bfe=a("strong"),i$o=o("ibert"),d$o=o(" \u2014 "),oG=a("a"),c$o=o("IBertForSequenceClassification"),f$o=o(" (I-BERT model)"),m$o=l(),Z1=a("li"),vfe=a("strong"),g$o=o("layoutlm"),h$o=o(" \u2014 "),rG=a("a"),p$o=o("LayoutLMForSequenceClassification"),_$o=o(" (LayoutLM model)"),u$o=l(),eb=a("li"),Ffe=a("strong"),b$o=o("layoutlmv2"),v$o=o(" \u2014 "),tG=a("a"),F$o=o("LayoutLMv2ForSequenceClassification"),T$o=o(" (LayoutLMv2 model)"),M$o=l(),ob=a("li"),Tfe=a("strong"),E$o=o("led"),C$o=o(" \u2014 "),aG=a("a"),w$o=o("LEDForSequenceClassification"),A$o=o(" (LED model)"),y$o=l(),rb=a("li"),Mfe=a("strong"),L$o=o("longformer"),x$o=o(" \u2014 "),nG=a("a"),$$o=o("LongformerForSequenceClassification"),k$o=o(" (Longformer model)"),S$o=l(),tb=a("li"),Efe=a("strong"),R$o=o("mbart"),B$o=o(" \u2014 "),sG=a("a"),P$o=o("MBartForSequenceClassification"),I$o=o(" (mBART model)"),q$o=l(),ab=a("li"),Cfe=a("strong"),N$o=o("megatron-bert"),j$o=o(" \u2014 "),lG=a("a"),D$o=o("MegatronBertForSequenceClassification"),G$o=o(" (MegatronBert model)"),O$o=l(),nb=a("li"),wfe=a("strong"),V$o=o("mobilebert"),X$o=o(" \u2014 "),iG=a("a"),z$o=o("MobileBertForSequenceClassification"),W$o=o(" (MobileBERT model)"),Q$o=l(),sb=a("li"),Afe=a("strong"),H$o=o("mpnet"),U$o=o(" \u2014 "),dG=a("a"),J$o=o("MPNetForSequenceClassification"),Y$o=o(" (MPNet model)"),K$o=l(),lb=a("li"),yfe=a("strong"),Z$o=o("nystromformer"),eko=o(" \u2014 "),cG=a("a"),oko=o("NystromformerForSequenceClassification"),rko=o(" (Nystromformer model)"),tko=l(),ib=a("li"),Lfe=a("strong"),ako=o("openai-gpt"),nko=o(" \u2014 "),fG=a("a"),sko=o("OpenAIGPTForSequenceClassification"),lko=o(" (OpenAI GPT model)"),iko=l(),db=a("li"),xfe=a("strong"),dko=o("perceiver"),cko=o(" \u2014 "),mG=a("a"),fko=o("PerceiverForSequenceClassification"),mko=o(" (Perceiver model)"),gko=l(),cb=a("li"),$fe=a("strong"),hko=o("plbart"),pko=o(" \u2014 "),gG=a("a"),_ko=o("PLBartForSequenceClassification"),uko=o(" (PLBart model)"),bko=l(),fb=a("li"),kfe=a("strong"),vko=o("qdqbert"),Fko=o(" \u2014 "),hG=a("a"),Tko=o("QDQBertForSequenceClassification"),Mko=o(" (QDQBert model)"),Eko=l(),mb=a("li"),Sfe=a("strong"),Cko=o("reformer"),wko=o(" \u2014 "),pG=a("a"),Ako=o("ReformerForSequenceClassification"),yko=o(" (Reformer model)"),Lko=l(),gb=a("li"),Rfe=a("strong"),xko=o("rembert"),$ko=o(" \u2014 "),_G=a("a"),kko=o("RemBertForSequenceClassification"),Sko=o(" (RemBERT model)"),Rko=l(),hb=a("li"),Bfe=a("strong"),Bko=o("roberta"),Pko=o(" \u2014 "),uG=a("a"),Iko=o("RobertaForSequenceClassification"),qko=o(" (RoBERTa model)"),Nko=l(),pb=a("li"),Pfe=a("strong"),jko=o("roformer"),Dko=o(" \u2014 "),bG=a("a"),Gko=o("RoFormerForSequenceClassification"),Oko=o(" (RoFormer model)"),Vko=l(),_b=a("li"),Ife=a("strong"),Xko=o("squeezebert"),zko=o(" \u2014 "),vG=a("a"),Wko=o("SqueezeBertForSequenceClassification"),Qko=o(" (SqueezeBERT model)"),Hko=l(),ub=a("li"),qfe=a("strong"),Uko=o("tapas"),Jko=o(" \u2014 "),FG=a("a"),Yko=o("TapasForSequenceClassification"),Kko=o(" (TAPAS model)"),Zko=l(),bb=a("li"),Nfe=a("strong"),eSo=o("transfo-xl"),oSo=o(" \u2014 "),TG=a("a"),rSo=o("TransfoXLForSequenceClassification"),tSo=o(" (Transformer-XL model)"),aSo=l(),vb=a("li"),jfe=a("strong"),nSo=o("xlm"),sSo=o(" \u2014 "),MG=a("a"),lSo=o("XLMForSequenceClassification"),iSo=o(" (XLM model)"),dSo=l(),Fb=a("li"),Dfe=a("strong"),cSo=o("xlm-roberta"),fSo=o(" \u2014 "),EG=a("a"),mSo=o("XLMRobertaForSequenceClassification"),gSo=o(" (XLM-RoBERTa model)"),hSo=l(),Tb=a("li"),Gfe=a("strong"),pSo=o("xlm-roberta-xl"),_So=o(" \u2014 "),CG=a("a"),uSo=o("XLMRobertaXLForSequenceClassification"),bSo=o(" (XLM-RoBERTa-XL model)"),vSo=l(),Mb=a("li"),Ofe=a("strong"),FSo=o("xlnet"),TSo=o(" \u2014 "),wG=a("a"),MSo=o("XLNetForSequenceClassification"),ESo=o(" (XLNet model)"),CSo=l(),Eb=a("li"),Vfe=a("strong"),wSo=o("yoso"),ASo=o(" \u2014 "),AG=a("a"),ySo=o("YosoForSequenceClassification"),LSo=o(" (YOSO model)"),xSo=l(),Cb=a("p"),$So=o("The model is set in evaluation mode by default using "),Xfe=a("code"),kSo=o("model.eval()"),SSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zfe=a("code"),RSo=o("model.train()"),BSo=l(),F(wb.$$.fragment),_qe=l(),Oi=a("h2"),Ab=a("a"),Wfe=a("span"),F(hy.$$.fragment),PSo=l(),Qfe=a("span"),ISo=o("AutoModelForMultipleChoice"),uqe=l(),Bo=a("div"),F(py.$$.fragment),qSo=l(),Vi=a("p"),NSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yG=a("a"),jSo=o("from_pretrained()"),DSo=o(" class method or the "),LG=a("a"),GSo=o("from_config()"),OSo=o(` class
method.`),VSo=l(),_y=a("p"),XSo=o("This class cannot be instantiated directly using "),Hfe=a("code"),zSo=o("__init__()"),WSo=o(" (throws an error)."),QSo=l(),dt=a("div"),F(uy.$$.fragment),HSo=l(),Ufe=a("p"),USo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),JSo=l(),Xi=a("p"),YSo=o(`Note:
Loading a model from its configuration file does `),Jfe=a("strong"),KSo=o("not"),ZSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=a("a"),eRo=o("from_pretrained()"),oRo=o(" to load the model weights."),rRo=l(),F(yb.$$.fragment),tRo=l(),ro=a("div"),F(by.$$.fragment),aRo=l(),Yfe=a("p"),nRo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),sRo=l(),Ba=a("p"),lRo=o("The model class to instantiate is selected based on the "),Kfe=a("code"),iRo=o("model_type"),dRo=o(` property of the config object (either
passed as an argument or loaded from `),Zfe=a("code"),cRo=o("pretrained_model_name_or_path"),fRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eme=a("code"),mRo=o("pretrained_model_name_or_path"),gRo=o(":"),hRo=l(),Y=a("ul"),Lb=a("li"),ome=a("strong"),pRo=o("albert"),_Ro=o(" \u2014 "),$G=a("a"),uRo=o("AlbertForMultipleChoice"),bRo=o(" (ALBERT model)"),vRo=l(),xb=a("li"),rme=a("strong"),FRo=o("bert"),TRo=o(" \u2014 "),kG=a("a"),MRo=o("BertForMultipleChoice"),ERo=o(" (BERT model)"),CRo=l(),$b=a("li"),tme=a("strong"),wRo=o("big_bird"),ARo=o(" \u2014 "),SG=a("a"),yRo=o("BigBirdForMultipleChoice"),LRo=o(" (BigBird model)"),xRo=l(),kb=a("li"),ame=a("strong"),$Ro=o("camembert"),kRo=o(" \u2014 "),RG=a("a"),SRo=o("CamembertForMultipleChoice"),RRo=o(" (CamemBERT model)"),BRo=l(),Sb=a("li"),nme=a("strong"),PRo=o("canine"),IRo=o(" \u2014 "),BG=a("a"),qRo=o("CanineForMultipleChoice"),NRo=o(" (Canine model)"),jRo=l(),Rb=a("li"),sme=a("strong"),DRo=o("convbert"),GRo=o(" \u2014 "),PG=a("a"),ORo=o("ConvBertForMultipleChoice"),VRo=o(" (ConvBERT model)"),XRo=l(),Bb=a("li"),lme=a("strong"),zRo=o("data2vec-text"),WRo=o(" \u2014 "),IG=a("a"),QRo=o("Data2VecTextForMultipleChoice"),HRo=o(" (Data2VecText model)"),URo=l(),Pb=a("li"),ime=a("strong"),JRo=o("deberta-v2"),YRo=o(" \u2014 "),qG=a("a"),KRo=o("DebertaV2ForMultipleChoice"),ZRo=o(" (DeBERTa-v2 model)"),eBo=l(),Ib=a("li"),dme=a("strong"),oBo=o("distilbert"),rBo=o(" \u2014 "),NG=a("a"),tBo=o("DistilBertForMultipleChoice"),aBo=o(" (DistilBERT model)"),nBo=l(),qb=a("li"),cme=a("strong"),sBo=o("electra"),lBo=o(" \u2014 "),jG=a("a"),iBo=o("ElectraForMultipleChoice"),dBo=o(" (ELECTRA model)"),cBo=l(),Nb=a("li"),fme=a("strong"),fBo=o("flaubert"),mBo=o(" \u2014 "),DG=a("a"),gBo=o("FlaubertForMultipleChoice"),hBo=o(" (FlauBERT model)"),pBo=l(),jb=a("li"),mme=a("strong"),_Bo=o("fnet"),uBo=o(" \u2014 "),GG=a("a"),bBo=o("FNetForMultipleChoice"),vBo=o(" (FNet model)"),FBo=l(),Db=a("li"),gme=a("strong"),TBo=o("funnel"),MBo=o(" \u2014 "),OG=a("a"),EBo=o("FunnelForMultipleChoice"),CBo=o(" (Funnel Transformer model)"),wBo=l(),Gb=a("li"),hme=a("strong"),ABo=o("ibert"),yBo=o(" \u2014 "),VG=a("a"),LBo=o("IBertForMultipleChoice"),xBo=o(" (I-BERT model)"),$Bo=l(),Ob=a("li"),pme=a("strong"),kBo=o("longformer"),SBo=o(" \u2014 "),XG=a("a"),RBo=o("LongformerForMultipleChoice"),BBo=o(" (Longformer model)"),PBo=l(),Vb=a("li"),_me=a("strong"),IBo=o("megatron-bert"),qBo=o(" \u2014 "),zG=a("a"),NBo=o("MegatronBertForMultipleChoice"),jBo=o(" (MegatronBert model)"),DBo=l(),Xb=a("li"),ume=a("strong"),GBo=o("mobilebert"),OBo=o(" \u2014 "),WG=a("a"),VBo=o("MobileBertForMultipleChoice"),XBo=o(" (MobileBERT model)"),zBo=l(),zb=a("li"),bme=a("strong"),WBo=o("mpnet"),QBo=o(" \u2014 "),QG=a("a"),HBo=o("MPNetForMultipleChoice"),UBo=o(" (MPNet model)"),JBo=l(),Wb=a("li"),vme=a("strong"),YBo=o("nystromformer"),KBo=o(" \u2014 "),HG=a("a"),ZBo=o("NystromformerForMultipleChoice"),ePo=o(" (Nystromformer model)"),oPo=l(),Qb=a("li"),Fme=a("strong"),rPo=o("qdqbert"),tPo=o(" \u2014 "),UG=a("a"),aPo=o("QDQBertForMultipleChoice"),nPo=o(" (QDQBert model)"),sPo=l(),Hb=a("li"),Tme=a("strong"),lPo=o("rembert"),iPo=o(" \u2014 "),JG=a("a"),dPo=o("RemBertForMultipleChoice"),cPo=o(" (RemBERT model)"),fPo=l(),Ub=a("li"),Mme=a("strong"),mPo=o("roberta"),gPo=o(" \u2014 "),YG=a("a"),hPo=o("RobertaForMultipleChoice"),pPo=o(" (RoBERTa model)"),_Po=l(),Jb=a("li"),Eme=a("strong"),uPo=o("roformer"),bPo=o(" \u2014 "),KG=a("a"),vPo=o("RoFormerForMultipleChoice"),FPo=o(" (RoFormer model)"),TPo=l(),Yb=a("li"),Cme=a("strong"),MPo=o("squeezebert"),EPo=o(" \u2014 "),ZG=a("a"),CPo=o("SqueezeBertForMultipleChoice"),wPo=o(" (SqueezeBERT model)"),APo=l(),Kb=a("li"),wme=a("strong"),yPo=o("xlm"),LPo=o(" \u2014 "),eO=a("a"),xPo=o("XLMForMultipleChoice"),$Po=o(" (XLM model)"),kPo=l(),Zb=a("li"),Ame=a("strong"),SPo=o("xlm-roberta"),RPo=o(" \u2014 "),oO=a("a"),BPo=o("XLMRobertaForMultipleChoice"),PPo=o(" (XLM-RoBERTa model)"),IPo=l(),ev=a("li"),yme=a("strong"),qPo=o("xlm-roberta-xl"),NPo=o(" \u2014 "),rO=a("a"),jPo=o("XLMRobertaXLForMultipleChoice"),DPo=o(" (XLM-RoBERTa-XL model)"),GPo=l(),ov=a("li"),Lme=a("strong"),OPo=o("xlnet"),VPo=o(" \u2014 "),tO=a("a"),XPo=o("XLNetForMultipleChoice"),zPo=o(" (XLNet model)"),WPo=l(),rv=a("li"),xme=a("strong"),QPo=o("yoso"),HPo=o(" \u2014 "),aO=a("a"),UPo=o("YosoForMultipleChoice"),JPo=o(" (YOSO model)"),YPo=l(),tv=a("p"),KPo=o("The model is set in evaluation mode by default using "),$me=a("code"),ZPo=o("model.eval()"),eIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=a("code"),oIo=o("model.train()"),rIo=l(),F(av.$$.fragment),bqe=l(),zi=a("h2"),nv=a("a"),Sme=a("span"),F(vy.$$.fragment),tIo=l(),Rme=a("span"),aIo=o("AutoModelForNextSentencePrediction"),vqe=l(),Po=a("div"),F(Fy.$$.fragment),nIo=l(),Wi=a("p"),sIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),nO=a("a"),lIo=o("from_pretrained()"),iIo=o(" class method or the "),sO=a("a"),dIo=o("from_config()"),cIo=o(` class
method.`),fIo=l(),Ty=a("p"),mIo=o("This class cannot be instantiated directly using "),Bme=a("code"),gIo=o("__init__()"),hIo=o(" (throws an error)."),pIo=l(),ct=a("div"),F(My.$$.fragment),_Io=l(),Pme=a("p"),uIo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bIo=l(),Qi=a("p"),vIo=o(`Note:
Loading a model from its configuration file does `),Ime=a("strong"),FIo=o("not"),TIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=a("a"),MIo=o("from_pretrained()"),EIo=o(" to load the model weights."),CIo=l(),F(sv.$$.fragment),wIo=l(),to=a("div"),F(Ey.$$.fragment),AIo=l(),qme=a("p"),yIo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),LIo=l(),Pa=a("p"),xIo=o("The model class to instantiate is selected based on the "),Nme=a("code"),$Io=o("model_type"),kIo=o(` property of the config object (either
passed as an argument or loaded from `),jme=a("code"),SIo=o("pretrained_model_name_or_path"),RIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dme=a("code"),BIo=o("pretrained_model_name_or_path"),PIo=o(":"),IIo=l(),Yr=a("ul"),lv=a("li"),Gme=a("strong"),qIo=o("bert"),NIo=o(" \u2014 "),iO=a("a"),jIo=o("BertForNextSentencePrediction"),DIo=o(" (BERT model)"),GIo=l(),iv=a("li"),Ome=a("strong"),OIo=o("fnet"),VIo=o(" \u2014 "),dO=a("a"),XIo=o("FNetForNextSentencePrediction"),zIo=o(" (FNet model)"),WIo=l(),dv=a("li"),Vme=a("strong"),QIo=o("megatron-bert"),HIo=o(" \u2014 "),cO=a("a"),UIo=o("MegatronBertForNextSentencePrediction"),JIo=o(" (MegatronBert model)"),YIo=l(),cv=a("li"),Xme=a("strong"),KIo=o("mobilebert"),ZIo=o(" \u2014 "),fO=a("a"),eqo=o("MobileBertForNextSentencePrediction"),oqo=o(" (MobileBERT model)"),rqo=l(),fv=a("li"),zme=a("strong"),tqo=o("qdqbert"),aqo=o(" \u2014 "),mO=a("a"),nqo=o("QDQBertForNextSentencePrediction"),sqo=o(" (QDQBert model)"),lqo=l(),mv=a("p"),iqo=o("The model is set in evaluation mode by default using "),Wme=a("code"),dqo=o("model.eval()"),cqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qme=a("code"),fqo=o("model.train()"),mqo=l(),F(gv.$$.fragment),Fqe=l(),Hi=a("h2"),hv=a("a"),Hme=a("span"),F(Cy.$$.fragment),gqo=l(),Ume=a("span"),hqo=o("AutoModelForTokenClassification"),Tqe=l(),Io=a("div"),F(wy.$$.fragment),pqo=l(),Ui=a("p"),_qo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gO=a("a"),uqo=o("from_pretrained()"),bqo=o(" class method or the "),hO=a("a"),vqo=o("from_config()"),Fqo=o(` class
method.`),Tqo=l(),Ay=a("p"),Mqo=o("This class cannot be instantiated directly using "),Jme=a("code"),Eqo=o("__init__()"),Cqo=o(" (throws an error)."),wqo=l(),ft=a("div"),F(yy.$$.fragment),Aqo=l(),Yme=a("p"),yqo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Lqo=l(),Ji=a("p"),xqo=o(`Note:
Loading a model from its configuration file does `),Kme=a("strong"),$qo=o("not"),kqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pO=a("a"),Sqo=o("from_pretrained()"),Rqo=o(" to load the model weights."),Bqo=l(),F(pv.$$.fragment),Pqo=l(),ao=a("div"),F(Ly.$$.fragment),Iqo=l(),Zme=a("p"),qqo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Nqo=l(),Ia=a("p"),jqo=o("The model class to instantiate is selected based on the "),ege=a("code"),Dqo=o("model_type"),Gqo=o(` property of the config object (either
passed as an argument or loaded from `),oge=a("code"),Oqo=o("pretrained_model_name_or_path"),Vqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rge=a("code"),Xqo=o("pretrained_model_name_or_path"),zqo=o(":"),Wqo=l(),U=a("ul"),_v=a("li"),tge=a("strong"),Qqo=o("albert"),Hqo=o(" \u2014 "),_O=a("a"),Uqo=o("AlbertForTokenClassification"),Jqo=o(" (ALBERT model)"),Yqo=l(),uv=a("li"),age=a("strong"),Kqo=o("bert"),Zqo=o(" \u2014 "),uO=a("a"),eNo=o("BertForTokenClassification"),oNo=o(" (BERT model)"),rNo=l(),bv=a("li"),nge=a("strong"),tNo=o("big_bird"),aNo=o(" \u2014 "),bO=a("a"),nNo=o("BigBirdForTokenClassification"),sNo=o(" (BigBird model)"),lNo=l(),vv=a("li"),sge=a("strong"),iNo=o("camembert"),dNo=o(" \u2014 "),vO=a("a"),cNo=o("CamembertForTokenClassification"),fNo=o(" (CamemBERT model)"),mNo=l(),Fv=a("li"),lge=a("strong"),gNo=o("canine"),hNo=o(" \u2014 "),FO=a("a"),pNo=o("CanineForTokenClassification"),_No=o(" (Canine model)"),uNo=l(),Tv=a("li"),ige=a("strong"),bNo=o("convbert"),vNo=o(" \u2014 "),TO=a("a"),FNo=o("ConvBertForTokenClassification"),TNo=o(" (ConvBERT model)"),MNo=l(),Mv=a("li"),dge=a("strong"),ENo=o("data2vec-text"),CNo=o(" \u2014 "),MO=a("a"),wNo=o("Data2VecTextForTokenClassification"),ANo=o(" (Data2VecText model)"),yNo=l(),Ev=a("li"),cge=a("strong"),LNo=o("deberta"),xNo=o(" \u2014 "),EO=a("a"),$No=o("DebertaForTokenClassification"),kNo=o(" (DeBERTa model)"),SNo=l(),Cv=a("li"),fge=a("strong"),RNo=o("deberta-v2"),BNo=o(" \u2014 "),CO=a("a"),PNo=o("DebertaV2ForTokenClassification"),INo=o(" (DeBERTa-v2 model)"),qNo=l(),wv=a("li"),mge=a("strong"),NNo=o("distilbert"),jNo=o(" \u2014 "),wO=a("a"),DNo=o("DistilBertForTokenClassification"),GNo=o(" (DistilBERT model)"),ONo=l(),Av=a("li"),gge=a("strong"),VNo=o("electra"),XNo=o(" \u2014 "),AO=a("a"),zNo=o("ElectraForTokenClassification"),WNo=o(" (ELECTRA model)"),QNo=l(),yv=a("li"),hge=a("strong"),HNo=o("flaubert"),UNo=o(" \u2014 "),yO=a("a"),JNo=o("FlaubertForTokenClassification"),YNo=o(" (FlauBERT model)"),KNo=l(),Lv=a("li"),pge=a("strong"),ZNo=o("fnet"),ejo=o(" \u2014 "),LO=a("a"),ojo=o("FNetForTokenClassification"),rjo=o(" (FNet model)"),tjo=l(),xv=a("li"),_ge=a("strong"),ajo=o("funnel"),njo=o(" \u2014 "),xO=a("a"),sjo=o("FunnelForTokenClassification"),ljo=o(" (Funnel Transformer model)"),ijo=l(),$v=a("li"),uge=a("strong"),djo=o("gpt2"),cjo=o(" \u2014 "),$O=a("a"),fjo=o("GPT2ForTokenClassification"),mjo=o(" (OpenAI GPT-2 model)"),gjo=l(),kv=a("li"),bge=a("strong"),hjo=o("ibert"),pjo=o(" \u2014 "),kO=a("a"),_jo=o("IBertForTokenClassification"),ujo=o(" (I-BERT model)"),bjo=l(),Sv=a("li"),vge=a("strong"),vjo=o("layoutlm"),Fjo=o(" \u2014 "),SO=a("a"),Tjo=o("LayoutLMForTokenClassification"),Mjo=o(" (LayoutLM model)"),Ejo=l(),Rv=a("li"),Fge=a("strong"),Cjo=o("layoutlmv2"),wjo=o(" \u2014 "),RO=a("a"),Ajo=o("LayoutLMv2ForTokenClassification"),yjo=o(" (LayoutLMv2 model)"),Ljo=l(),Bv=a("li"),Tge=a("strong"),xjo=o("longformer"),$jo=o(" \u2014 "),BO=a("a"),kjo=o("LongformerForTokenClassification"),Sjo=o(" (Longformer model)"),Rjo=l(),Pv=a("li"),Mge=a("strong"),Bjo=o("megatron-bert"),Pjo=o(" \u2014 "),PO=a("a"),Ijo=o("MegatronBertForTokenClassification"),qjo=o(" (MegatronBert model)"),Njo=l(),Iv=a("li"),Ege=a("strong"),jjo=o("mobilebert"),Djo=o(" \u2014 "),IO=a("a"),Gjo=o("MobileBertForTokenClassification"),Ojo=o(" (MobileBERT model)"),Vjo=l(),qv=a("li"),Cge=a("strong"),Xjo=o("mpnet"),zjo=o(" \u2014 "),qO=a("a"),Wjo=o("MPNetForTokenClassification"),Qjo=o(" (MPNet model)"),Hjo=l(),Nv=a("li"),wge=a("strong"),Ujo=o("nystromformer"),Jjo=o(" \u2014 "),NO=a("a"),Yjo=o("NystromformerForTokenClassification"),Kjo=o(" (Nystromformer model)"),Zjo=l(),jv=a("li"),Age=a("strong"),eDo=o("qdqbert"),oDo=o(" \u2014 "),jO=a("a"),rDo=o("QDQBertForTokenClassification"),tDo=o(" (QDQBert model)"),aDo=l(),Dv=a("li"),yge=a("strong"),nDo=o("rembert"),sDo=o(" \u2014 "),DO=a("a"),lDo=o("RemBertForTokenClassification"),iDo=o(" (RemBERT model)"),dDo=l(),Gv=a("li"),Lge=a("strong"),cDo=o("roberta"),fDo=o(" \u2014 "),GO=a("a"),mDo=o("RobertaForTokenClassification"),gDo=o(" (RoBERTa model)"),hDo=l(),Ov=a("li"),xge=a("strong"),pDo=o("roformer"),_Do=o(" \u2014 "),OO=a("a"),uDo=o("RoFormerForTokenClassification"),bDo=o(" (RoFormer model)"),vDo=l(),Vv=a("li"),$ge=a("strong"),FDo=o("squeezebert"),TDo=o(" \u2014 "),VO=a("a"),MDo=o("SqueezeBertForTokenClassification"),EDo=o(" (SqueezeBERT model)"),CDo=l(),Xv=a("li"),kge=a("strong"),wDo=o("xlm"),ADo=o(" \u2014 "),XO=a("a"),yDo=o("XLMForTokenClassification"),LDo=o(" (XLM model)"),xDo=l(),zv=a("li"),Sge=a("strong"),$Do=o("xlm-roberta"),kDo=o(" \u2014 "),zO=a("a"),SDo=o("XLMRobertaForTokenClassification"),RDo=o(" (XLM-RoBERTa model)"),BDo=l(),Wv=a("li"),Rge=a("strong"),PDo=o("xlm-roberta-xl"),IDo=o(" \u2014 "),WO=a("a"),qDo=o("XLMRobertaXLForTokenClassification"),NDo=o(" (XLM-RoBERTa-XL model)"),jDo=l(),Qv=a("li"),Bge=a("strong"),DDo=o("xlnet"),GDo=o(" \u2014 "),QO=a("a"),ODo=o("XLNetForTokenClassification"),VDo=o(" (XLNet model)"),XDo=l(),Hv=a("li"),Pge=a("strong"),zDo=o("yoso"),WDo=o(" \u2014 "),HO=a("a"),QDo=o("YosoForTokenClassification"),HDo=o(" (YOSO model)"),UDo=l(),Uv=a("p"),JDo=o("The model is set in evaluation mode by default using "),Ige=a("code"),YDo=o("model.eval()"),KDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=a("code"),ZDo=o("model.train()"),eGo=l(),F(Jv.$$.fragment),Mqe=l(),Yi=a("h2"),Yv=a("a"),Nge=a("span"),F(xy.$$.fragment),oGo=l(),jge=a("span"),rGo=o("AutoModelForQuestionAnswering"),Eqe=l(),qo=a("div"),F($y.$$.fragment),tGo=l(),Ki=a("p"),aGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),UO=a("a"),nGo=o("from_pretrained()"),sGo=o(" class method or the "),JO=a("a"),lGo=o("from_config()"),iGo=o(` class
method.`),dGo=l(),ky=a("p"),cGo=o("This class cannot be instantiated directly using "),Dge=a("code"),fGo=o("__init__()"),mGo=o(" (throws an error)."),gGo=l(),mt=a("div"),F(Sy.$$.fragment),hGo=l(),Gge=a("p"),pGo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_Go=l(),Zi=a("p"),uGo=o(`Note:
Loading a model from its configuration file does `),Oge=a("strong"),bGo=o("not"),vGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YO=a("a"),FGo=o("from_pretrained()"),TGo=o(" to load the model weights."),MGo=l(),F(Kv.$$.fragment),EGo=l(),no=a("div"),F(Ry.$$.fragment),CGo=l(),Vge=a("p"),wGo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),AGo=l(),qa=a("p"),yGo=o("The model class to instantiate is selected based on the "),Xge=a("code"),LGo=o("model_type"),xGo=o(` property of the config object (either
passed as an argument or loaded from `),zge=a("code"),$Go=o("pretrained_model_name_or_path"),kGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wge=a("code"),SGo=o("pretrained_model_name_or_path"),RGo=o(":"),BGo=l(),V=a("ul"),Zv=a("li"),Qge=a("strong"),PGo=o("albert"),IGo=o(" \u2014 "),KO=a("a"),qGo=o("AlbertForQuestionAnswering"),NGo=o(" (ALBERT model)"),jGo=l(),eF=a("li"),Hge=a("strong"),DGo=o("bart"),GGo=o(" \u2014 "),ZO=a("a"),OGo=o("BartForQuestionAnswering"),VGo=o(" (BART model)"),XGo=l(),oF=a("li"),Uge=a("strong"),zGo=o("bert"),WGo=o(" \u2014 "),eV=a("a"),QGo=o("BertForQuestionAnswering"),HGo=o(" (BERT model)"),UGo=l(),rF=a("li"),Jge=a("strong"),JGo=o("big_bird"),YGo=o(" \u2014 "),oV=a("a"),KGo=o("BigBirdForQuestionAnswering"),ZGo=o(" (BigBird model)"),eOo=l(),tF=a("li"),Yge=a("strong"),oOo=o("bigbird_pegasus"),rOo=o(" \u2014 "),rV=a("a"),tOo=o("BigBirdPegasusForQuestionAnswering"),aOo=o(" (BigBirdPegasus model)"),nOo=l(),aF=a("li"),Kge=a("strong"),sOo=o("camembert"),lOo=o(" \u2014 "),tV=a("a"),iOo=o("CamembertForQuestionAnswering"),dOo=o(" (CamemBERT model)"),cOo=l(),nF=a("li"),Zge=a("strong"),fOo=o("canine"),mOo=o(" \u2014 "),aV=a("a"),gOo=o("CanineForQuestionAnswering"),hOo=o(" (Canine model)"),pOo=l(),sF=a("li"),ehe=a("strong"),_Oo=o("convbert"),uOo=o(" \u2014 "),nV=a("a"),bOo=o("ConvBertForQuestionAnswering"),vOo=o(" (ConvBERT model)"),FOo=l(),lF=a("li"),ohe=a("strong"),TOo=o("data2vec-text"),MOo=o(" \u2014 "),sV=a("a"),EOo=o("Data2VecTextForQuestionAnswering"),COo=o(" (Data2VecText model)"),wOo=l(),iF=a("li"),rhe=a("strong"),AOo=o("deberta"),yOo=o(" \u2014 "),lV=a("a"),LOo=o("DebertaForQuestionAnswering"),xOo=o(" (DeBERTa model)"),$Oo=l(),dF=a("li"),the=a("strong"),kOo=o("deberta-v2"),SOo=o(" \u2014 "),iV=a("a"),ROo=o("DebertaV2ForQuestionAnswering"),BOo=o(" (DeBERTa-v2 model)"),POo=l(),cF=a("li"),ahe=a("strong"),IOo=o("distilbert"),qOo=o(" \u2014 "),dV=a("a"),NOo=o("DistilBertForQuestionAnswering"),jOo=o(" (DistilBERT model)"),DOo=l(),fF=a("li"),nhe=a("strong"),GOo=o("electra"),OOo=o(" \u2014 "),cV=a("a"),VOo=o("ElectraForQuestionAnswering"),XOo=o(" (ELECTRA model)"),zOo=l(),mF=a("li"),she=a("strong"),WOo=o("flaubert"),QOo=o(" \u2014 "),fV=a("a"),HOo=o("FlaubertForQuestionAnsweringSimple"),UOo=o(" (FlauBERT model)"),JOo=l(),gF=a("li"),lhe=a("strong"),YOo=o("fnet"),KOo=o(" \u2014 "),mV=a("a"),ZOo=o("FNetForQuestionAnswering"),eVo=o(" (FNet model)"),oVo=l(),hF=a("li"),ihe=a("strong"),rVo=o("funnel"),tVo=o(" \u2014 "),gV=a("a"),aVo=o("FunnelForQuestionAnswering"),nVo=o(" (Funnel Transformer model)"),sVo=l(),pF=a("li"),dhe=a("strong"),lVo=o("gptj"),iVo=o(" \u2014 "),hV=a("a"),dVo=o("GPTJForQuestionAnswering"),cVo=o(" (GPT-J model)"),fVo=l(),_F=a("li"),che=a("strong"),mVo=o("ibert"),gVo=o(" \u2014 "),pV=a("a"),hVo=o("IBertForQuestionAnswering"),pVo=o(" (I-BERT model)"),_Vo=l(),uF=a("li"),fhe=a("strong"),uVo=o("layoutlmv2"),bVo=o(" \u2014 "),_V=a("a"),vVo=o("LayoutLMv2ForQuestionAnswering"),FVo=o(" (LayoutLMv2 model)"),TVo=l(),bF=a("li"),mhe=a("strong"),MVo=o("led"),EVo=o(" \u2014 "),uV=a("a"),CVo=o("LEDForQuestionAnswering"),wVo=o(" (LED model)"),AVo=l(),vF=a("li"),ghe=a("strong"),yVo=o("longformer"),LVo=o(" \u2014 "),bV=a("a"),xVo=o("LongformerForQuestionAnswering"),$Vo=o(" (Longformer model)"),kVo=l(),FF=a("li"),hhe=a("strong"),SVo=o("lxmert"),RVo=o(" \u2014 "),vV=a("a"),BVo=o("LxmertForQuestionAnswering"),PVo=o(" (LXMERT model)"),IVo=l(),TF=a("li"),phe=a("strong"),qVo=o("mbart"),NVo=o(" \u2014 "),FV=a("a"),jVo=o("MBartForQuestionAnswering"),DVo=o(" (mBART model)"),GVo=l(),MF=a("li"),_he=a("strong"),OVo=o("megatron-bert"),VVo=o(" \u2014 "),TV=a("a"),XVo=o("MegatronBertForQuestionAnswering"),zVo=o(" (MegatronBert model)"),WVo=l(),EF=a("li"),uhe=a("strong"),QVo=o("mobilebert"),HVo=o(" \u2014 "),MV=a("a"),UVo=o("MobileBertForQuestionAnswering"),JVo=o(" (MobileBERT model)"),YVo=l(),CF=a("li"),bhe=a("strong"),KVo=o("mpnet"),ZVo=o(" \u2014 "),EV=a("a"),eXo=o("MPNetForQuestionAnswering"),oXo=o(" (MPNet model)"),rXo=l(),wF=a("li"),vhe=a("strong"),tXo=o("nystromformer"),aXo=o(" \u2014 "),CV=a("a"),nXo=o("NystromformerForQuestionAnswering"),sXo=o(" (Nystromformer model)"),lXo=l(),AF=a("li"),Fhe=a("strong"),iXo=o("qdqbert"),dXo=o(" \u2014 "),wV=a("a"),cXo=o("QDQBertForQuestionAnswering"),fXo=o(" (QDQBert model)"),mXo=l(),yF=a("li"),The=a("strong"),gXo=o("reformer"),hXo=o(" \u2014 "),AV=a("a"),pXo=o("ReformerForQuestionAnswering"),_Xo=o(" (Reformer model)"),uXo=l(),LF=a("li"),Mhe=a("strong"),bXo=o("rembert"),vXo=o(" \u2014 "),yV=a("a"),FXo=o("RemBertForQuestionAnswering"),TXo=o(" (RemBERT model)"),MXo=l(),xF=a("li"),Ehe=a("strong"),EXo=o("roberta"),CXo=o(" \u2014 "),LV=a("a"),wXo=o("RobertaForQuestionAnswering"),AXo=o(" (RoBERTa model)"),yXo=l(),$F=a("li"),Che=a("strong"),LXo=o("roformer"),xXo=o(" \u2014 "),xV=a("a"),$Xo=o("RoFormerForQuestionAnswering"),kXo=o(" (RoFormer model)"),SXo=l(),kF=a("li"),whe=a("strong"),RXo=o("splinter"),BXo=o(" \u2014 "),$V=a("a"),PXo=o("SplinterForQuestionAnswering"),IXo=o(" (Splinter model)"),qXo=l(),SF=a("li"),Ahe=a("strong"),NXo=o("squeezebert"),jXo=o(" \u2014 "),kV=a("a"),DXo=o("SqueezeBertForQuestionAnswering"),GXo=o(" (SqueezeBERT model)"),OXo=l(),RF=a("li"),yhe=a("strong"),VXo=o("xlm"),XXo=o(" \u2014 "),SV=a("a"),zXo=o("XLMForQuestionAnsweringSimple"),WXo=o(" (XLM model)"),QXo=l(),BF=a("li"),Lhe=a("strong"),HXo=o("xlm-roberta"),UXo=o(" \u2014 "),RV=a("a"),JXo=o("XLMRobertaForQuestionAnswering"),YXo=o(" (XLM-RoBERTa model)"),KXo=l(),PF=a("li"),xhe=a("strong"),ZXo=o("xlm-roberta-xl"),ezo=o(" \u2014 "),BV=a("a"),ozo=o("XLMRobertaXLForQuestionAnswering"),rzo=o(" (XLM-RoBERTa-XL model)"),tzo=l(),IF=a("li"),$he=a("strong"),azo=o("xlnet"),nzo=o(" \u2014 "),PV=a("a"),szo=o("XLNetForQuestionAnsweringSimple"),lzo=o(" (XLNet model)"),izo=l(),qF=a("li"),khe=a("strong"),dzo=o("yoso"),czo=o(" \u2014 "),IV=a("a"),fzo=o("YosoForQuestionAnswering"),mzo=o(" (YOSO model)"),gzo=l(),NF=a("p"),hzo=o("The model is set in evaluation mode by default using "),She=a("code"),pzo=o("model.eval()"),_zo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=a("code"),uzo=o("model.train()"),bzo=l(),F(jF.$$.fragment),Cqe=l(),ed=a("h2"),DF=a("a"),Bhe=a("span"),F(By.$$.fragment),vzo=l(),Phe=a("span"),Fzo=o("AutoModelForTableQuestionAnswering"),wqe=l(),No=a("div"),F(Py.$$.fragment),Tzo=l(),od=a("p"),Mzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),qV=a("a"),Ezo=o("from_pretrained()"),Czo=o(" class method or the "),NV=a("a"),wzo=o("from_config()"),Azo=o(` class
method.`),yzo=l(),Iy=a("p"),Lzo=o("This class cannot be instantiated directly using "),Ihe=a("code"),xzo=o("__init__()"),$zo=o(" (throws an error)."),kzo=l(),gt=a("div"),F(qy.$$.fragment),Szo=l(),qhe=a("p"),Rzo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Bzo=l(),rd=a("p"),Pzo=o(`Note:
Loading a model from its configuration file does `),Nhe=a("strong"),Izo=o("not"),qzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=a("a"),Nzo=o("from_pretrained()"),jzo=o(" to load the model weights."),Dzo=l(),F(GF.$$.fragment),Gzo=l(),so=a("div"),F(Ny.$$.fragment),Ozo=l(),jhe=a("p"),Vzo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Xzo=l(),Na=a("p"),zzo=o("The model class to instantiate is selected based on the "),Dhe=a("code"),Wzo=o("model_type"),Qzo=o(` property of the config object (either
passed as an argument or loaded from `),Ghe=a("code"),Hzo=o("pretrained_model_name_or_path"),Uzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=a("code"),Jzo=o("pretrained_model_name_or_path"),Yzo=o(":"),Kzo=l(),Vhe=a("ul"),OF=a("li"),Xhe=a("strong"),Zzo=o("tapas"),eWo=o(" \u2014 "),DV=a("a"),oWo=o("TapasForQuestionAnswering"),rWo=o(" (TAPAS model)"),tWo=l(),VF=a("p"),aWo=o("The model is set in evaluation mode by default using "),zhe=a("code"),nWo=o("model.eval()"),sWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=a("code"),lWo=o("model.train()"),iWo=l(),F(XF.$$.fragment),Aqe=l(),td=a("h2"),zF=a("a"),Qhe=a("span"),F(jy.$$.fragment),dWo=l(),Hhe=a("span"),cWo=o("AutoModelForImageClassification"),yqe=l(),jo=a("div"),F(Dy.$$.fragment),fWo=l(),ad=a("p"),mWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),GV=a("a"),gWo=o("from_pretrained()"),hWo=o(" class method or the "),OV=a("a"),pWo=o("from_config()"),_Wo=o(` class
method.`),uWo=l(),Gy=a("p"),bWo=o("This class cannot be instantiated directly using "),Uhe=a("code"),vWo=o("__init__()"),FWo=o(" (throws an error)."),TWo=l(),ht=a("div"),F(Oy.$$.fragment),MWo=l(),Jhe=a("p"),EWo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),CWo=l(),nd=a("p"),wWo=o(`Note:
Loading a model from its configuration file does `),Yhe=a("strong"),AWo=o("not"),yWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=a("a"),LWo=o("from_pretrained()"),xWo=o(" to load the model weights."),$Wo=l(),F(WF.$$.fragment),kWo=l(),lo=a("div"),F(Vy.$$.fragment),SWo=l(),Khe=a("p"),RWo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),BWo=l(),ja=a("p"),PWo=o("The model class to instantiate is selected based on the "),Zhe=a("code"),IWo=o("model_type"),qWo=o(` property of the config object (either
passed as an argument or loaded from `),epe=a("code"),NWo=o("pretrained_model_name_or_path"),jWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=a("code"),DWo=o("pretrained_model_name_or_path"),GWo=o(":"),OWo=l(),Fe=a("ul"),QF=a("li"),rpe=a("strong"),VWo=o("beit"),XWo=o(" \u2014 "),XV=a("a"),zWo=o("BeitForImageClassification"),WWo=o(" (BEiT model)"),QWo=l(),HF=a("li"),tpe=a("strong"),HWo=o("convnext"),UWo=o(" \u2014 "),zV=a("a"),JWo=o("ConvNextForImageClassification"),YWo=o(" (ConvNext model)"),KWo=l(),UF=a("li"),ape=a("strong"),ZWo=o("data2vec-vision"),eQo=o(" \u2014 "),WV=a("a"),oQo=o("Data2VecVisionForImageClassification"),rQo=o(" (Data2VecVision model)"),tQo=l(),Bs=a("li"),npe=a("strong"),aQo=o("deit"),nQo=o(" \u2014 "),QV=a("a"),sQo=o("DeiTForImageClassification"),lQo=o(" or "),HV=a("a"),iQo=o("DeiTForImageClassificationWithTeacher"),dQo=o(" (DeiT model)"),cQo=l(),JF=a("li"),spe=a("strong"),fQo=o("imagegpt"),mQo=o(" \u2014 "),UV=a("a"),gQo=o("ImageGPTForImageClassification"),hQo=o(" (ImageGPT model)"),pQo=l(),pt=a("li"),lpe=a("strong"),_Qo=o("perceiver"),uQo=o(" \u2014 "),JV=a("a"),bQo=o("PerceiverForImageClassificationLearned"),vQo=o(" or "),YV=a("a"),FQo=o("PerceiverForImageClassificationFourier"),TQo=o(" or "),KV=a("a"),MQo=o("PerceiverForImageClassificationConvProcessing"),EQo=o(" (Perceiver model)"),CQo=l(),YF=a("li"),ipe=a("strong"),wQo=o("poolformer"),AQo=o(" \u2014 "),ZV=a("a"),yQo=o("PoolFormerForImageClassification"),LQo=o(" (PoolFormer model)"),xQo=l(),KF=a("li"),dpe=a("strong"),$Qo=o("regnet"),kQo=o(" \u2014 "),eX=a("a"),SQo=o("RegNetForImageClassification"),RQo=o(" (RegNet model)"),BQo=l(),ZF=a("li"),cpe=a("strong"),PQo=o("resnet"),IQo=o(" \u2014 "),oX=a("a"),qQo=o("ResNetForImageClassification"),NQo=o(" (ResNet model)"),jQo=l(),e0=a("li"),fpe=a("strong"),DQo=o("segformer"),GQo=o(" \u2014 "),rX=a("a"),OQo=o("SegformerForImageClassification"),VQo=o(" (SegFormer model)"),XQo=l(),o0=a("li"),mpe=a("strong"),zQo=o("swin"),WQo=o(" \u2014 "),tX=a("a"),QQo=o("SwinForImageClassification"),HQo=o(" (Swin model)"),UQo=l(),r0=a("li"),gpe=a("strong"),JQo=o("van"),YQo=o(" \u2014 "),aX=a("a"),KQo=o("VanForImageClassification"),ZQo=o(" (VAN model)"),eHo=l(),t0=a("li"),hpe=a("strong"),oHo=o("vit"),rHo=o(" \u2014 "),nX=a("a"),tHo=o("ViTForImageClassification"),aHo=o(" (ViT model)"),nHo=l(),a0=a("p"),sHo=o("The model is set in evaluation mode by default using "),ppe=a("code"),lHo=o("model.eval()"),iHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=a("code"),dHo=o("model.train()"),cHo=l(),F(n0.$$.fragment),Lqe=l(),sd=a("h2"),s0=a("a"),upe=a("span"),F(Xy.$$.fragment),fHo=l(),bpe=a("span"),mHo=o("AutoModelForVision2Seq"),xqe=l(),Do=a("div"),F(zy.$$.fragment),gHo=l(),ld=a("p"),hHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sX=a("a"),pHo=o("from_pretrained()"),_Ho=o(" class method or the "),lX=a("a"),uHo=o("from_config()"),bHo=o(` class
method.`),vHo=l(),Wy=a("p"),FHo=o("This class cannot be instantiated directly using "),vpe=a("code"),THo=o("__init__()"),MHo=o(" (throws an error)."),EHo=l(),_t=a("div"),F(Qy.$$.fragment),CHo=l(),Fpe=a("p"),wHo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),AHo=l(),id=a("p"),yHo=o(`Note:
Loading a model from its configuration file does `),Tpe=a("strong"),LHo=o("not"),xHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=a("a"),$Ho=o("from_pretrained()"),kHo=o(" to load the model weights."),SHo=l(),F(l0.$$.fragment),RHo=l(),io=a("div"),F(Hy.$$.fragment),BHo=l(),Mpe=a("p"),PHo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),IHo=l(),Da=a("p"),qHo=o("The model class to instantiate is selected based on the "),Epe=a("code"),NHo=o("model_type"),jHo=o(` property of the config object (either
passed as an argument or loaded from `),Cpe=a("code"),DHo=o("pretrained_model_name_or_path"),GHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=a("code"),OHo=o("pretrained_model_name_or_path"),VHo=o(":"),XHo=l(),Ape=a("ul"),i0=a("li"),ype=a("strong"),zHo=o("vision-encoder-decoder"),WHo=o(" \u2014 "),dX=a("a"),QHo=o("VisionEncoderDecoderModel"),HHo=o(" (Vision Encoder decoder model)"),UHo=l(),d0=a("p"),JHo=o("The model is set in evaluation mode by default using "),Lpe=a("code"),YHo=o("model.eval()"),KHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=a("code"),ZHo=o("model.train()"),eUo=l(),F(c0.$$.fragment),$qe=l(),dd=a("h2"),f0=a("a"),$pe=a("span"),F(Uy.$$.fragment),oUo=l(),kpe=a("span"),rUo=o("AutoModelForAudioClassification"),kqe=l(),Go=a("div"),F(Jy.$$.fragment),tUo=l(),cd=a("p"),aUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),cX=a("a"),nUo=o("from_pretrained()"),sUo=o(" class method or the "),fX=a("a"),lUo=o("from_config()"),iUo=o(` class
method.`),dUo=l(),Yy=a("p"),cUo=o("This class cannot be instantiated directly using "),Spe=a("code"),fUo=o("__init__()"),mUo=o(" (throws an error)."),gUo=l(),ut=a("div"),F(Ky.$$.fragment),hUo=l(),Rpe=a("p"),pUo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),_Uo=l(),fd=a("p"),uUo=o(`Note:
Loading a model from its configuration file does `),Bpe=a("strong"),bUo=o("not"),vUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=a("a"),FUo=o("from_pretrained()"),TUo=o(" to load the model weights."),MUo=l(),F(m0.$$.fragment),EUo=l(),co=a("div"),F(Zy.$$.fragment),CUo=l(),Ppe=a("p"),wUo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),AUo=l(),Ga=a("p"),yUo=o("The model class to instantiate is selected based on the "),Ipe=a("code"),LUo=o("model_type"),xUo=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),$Uo=o("pretrained_model_name_or_path"),kUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=a("code"),SUo=o("pretrained_model_name_or_path"),RUo=o(":"),BUo=l(),ke=a("ul"),g0=a("li"),jpe=a("strong"),PUo=o("data2vec-audio"),IUo=o(" \u2014 "),gX=a("a"),qUo=o("Data2VecAudioForSequenceClassification"),NUo=o(" (Data2VecAudio model)"),jUo=l(),h0=a("li"),Dpe=a("strong"),DUo=o("hubert"),GUo=o(" \u2014 "),hX=a("a"),OUo=o("HubertForSequenceClassification"),VUo=o(" (Hubert model)"),XUo=l(),p0=a("li"),Gpe=a("strong"),zUo=o("sew"),WUo=o(" \u2014 "),pX=a("a"),QUo=o("SEWForSequenceClassification"),HUo=o(" (SEW model)"),UUo=l(),_0=a("li"),Ope=a("strong"),JUo=o("sew-d"),YUo=o(" \u2014 "),_X=a("a"),KUo=o("SEWDForSequenceClassification"),ZUo=o(" (SEW-D model)"),eJo=l(),u0=a("li"),Vpe=a("strong"),oJo=o("unispeech"),rJo=o(" \u2014 "),uX=a("a"),tJo=o("UniSpeechForSequenceClassification"),aJo=o(" (UniSpeech model)"),nJo=l(),b0=a("li"),Xpe=a("strong"),sJo=o("unispeech-sat"),lJo=o(" \u2014 "),bX=a("a"),iJo=o("UniSpeechSatForSequenceClassification"),dJo=o(" (UniSpeechSat model)"),cJo=l(),v0=a("li"),zpe=a("strong"),fJo=o("wav2vec2"),mJo=o(" \u2014 "),vX=a("a"),gJo=o("Wav2Vec2ForSequenceClassification"),hJo=o(" (Wav2Vec2 model)"),pJo=l(),F0=a("li"),Wpe=a("strong"),_Jo=o("wav2vec2-conformer"),uJo=o(" \u2014 "),FX=a("a"),bJo=o("Wav2Vec2ConformerForSequenceClassification"),vJo=o(" (Wav2Vec2-Conformer model)"),FJo=l(),T0=a("li"),Qpe=a("strong"),TJo=o("wavlm"),MJo=o(" \u2014 "),TX=a("a"),EJo=o("WavLMForSequenceClassification"),CJo=o(" (WavLM model)"),wJo=l(),M0=a("p"),AJo=o("The model is set in evaluation mode by default using "),Hpe=a("code"),yJo=o("model.eval()"),LJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=a("code"),xJo=o("model.train()"),$Jo=l(),F(E0.$$.fragment),Sqe=l(),md=a("h2"),C0=a("a"),Jpe=a("span"),F(eL.$$.fragment),kJo=l(),Ype=a("span"),SJo=o("AutoModelForAudioFrameClassification"),Rqe=l(),Oo=a("div"),F(oL.$$.fragment),RJo=l(),gd=a("p"),BJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),MX=a("a"),PJo=o("from_pretrained()"),IJo=o(" class method or the "),EX=a("a"),qJo=o("from_config()"),NJo=o(` class
method.`),jJo=l(),rL=a("p"),DJo=o("This class cannot be instantiated directly using "),Kpe=a("code"),GJo=o("__init__()"),OJo=o(" (throws an error)."),VJo=l(),bt=a("div"),F(tL.$$.fragment),XJo=l(),Zpe=a("p"),zJo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),WJo=l(),hd=a("p"),QJo=o(`Note:
Loading a model from its configuration file does `),e_e=a("strong"),HJo=o("not"),UJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=a("a"),JJo=o("from_pretrained()"),YJo=o(" to load the model weights."),KJo=l(),F(w0.$$.fragment),ZJo=l(),fo=a("div"),F(aL.$$.fragment),eYo=l(),o_e=a("p"),oYo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),rYo=l(),Oa=a("p"),tYo=o("The model class to instantiate is selected based on the "),r_e=a("code"),aYo=o("model_type"),nYo=o(` property of the config object (either
passed as an argument or loaded from `),t_e=a("code"),sYo=o("pretrained_model_name_or_path"),lYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=a("code"),iYo=o("pretrained_model_name_or_path"),dYo=o(":"),cYo=l(),Kr=a("ul"),A0=a("li"),n_e=a("strong"),fYo=o("data2vec-audio"),mYo=o(" \u2014 "),wX=a("a"),gYo=o("Data2VecAudioForAudioFrameClassification"),hYo=o(" (Data2VecAudio model)"),pYo=l(),y0=a("li"),s_e=a("strong"),_Yo=o("unispeech-sat"),uYo=o(" \u2014 "),AX=a("a"),bYo=o("UniSpeechSatForAudioFrameClassification"),vYo=o(" (UniSpeechSat model)"),FYo=l(),L0=a("li"),l_e=a("strong"),TYo=o("wav2vec2"),MYo=o(" \u2014 "),yX=a("a"),EYo=o("Wav2Vec2ForAudioFrameClassification"),CYo=o(" (Wav2Vec2 model)"),wYo=l(),x0=a("li"),i_e=a("strong"),AYo=o("wav2vec2-conformer"),yYo=o(" \u2014 "),LX=a("a"),LYo=o("Wav2Vec2ConformerForAudioFrameClassification"),xYo=o(" (Wav2Vec2-Conformer model)"),$Yo=l(),$0=a("li"),d_e=a("strong"),kYo=o("wavlm"),SYo=o(" \u2014 "),xX=a("a"),RYo=o("WavLMForAudioFrameClassification"),BYo=o(" (WavLM model)"),PYo=l(),k0=a("p"),IYo=o("The model is set in evaluation mode by default using "),c_e=a("code"),qYo=o("model.eval()"),NYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f_e=a("code"),jYo=o("model.train()"),DYo=l(),F(S0.$$.fragment),Bqe=l(),pd=a("h2"),R0=a("a"),m_e=a("span"),F(nL.$$.fragment),GYo=l(),g_e=a("span"),OYo=o("AutoModelForCTC"),Pqe=l(),Vo=a("div"),F(sL.$$.fragment),VYo=l(),_d=a("p"),XYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),$X=a("a"),zYo=o("from_pretrained()"),WYo=o(" class method or the "),kX=a("a"),QYo=o("from_config()"),HYo=o(` class
method.`),UYo=l(),lL=a("p"),JYo=o("This class cannot be instantiated directly using "),h_e=a("code"),YYo=o("__init__()"),KYo=o(" (throws an error)."),ZYo=l(),vt=a("div"),F(iL.$$.fragment),eKo=l(),p_e=a("p"),oKo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),rKo=l(),ud=a("p"),tKo=o(`Note:
Loading a model from its configuration file does `),__e=a("strong"),aKo=o("not"),nKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=a("a"),sKo=o("from_pretrained()"),lKo=o(" to load the model weights."),iKo=l(),F(B0.$$.fragment),dKo=l(),mo=a("div"),F(dL.$$.fragment),cKo=l(),u_e=a("p"),fKo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),mKo=l(),Va=a("p"),gKo=o("The model class to instantiate is selected based on the "),b_e=a("code"),hKo=o("model_type"),pKo=o(` property of the config object (either
passed as an argument or loaded from `),v_e=a("code"),_Ko=o("pretrained_model_name_or_path"),uKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=a("code"),bKo=o("pretrained_model_name_or_path"),vKo=o(":"),FKo=l(),Se=a("ul"),P0=a("li"),T_e=a("strong"),TKo=o("data2vec-audio"),MKo=o(" \u2014 "),RX=a("a"),EKo=o("Data2VecAudioForCTC"),CKo=o(" (Data2VecAudio model)"),wKo=l(),I0=a("li"),M_e=a("strong"),AKo=o("hubert"),yKo=o(" \u2014 "),BX=a("a"),LKo=o("HubertForCTC"),xKo=o(" (Hubert model)"),$Ko=l(),q0=a("li"),E_e=a("strong"),kKo=o("sew"),SKo=o(" \u2014 "),PX=a("a"),RKo=o("SEWForCTC"),BKo=o(" (SEW model)"),PKo=l(),N0=a("li"),C_e=a("strong"),IKo=o("sew-d"),qKo=o(" \u2014 "),IX=a("a"),NKo=o("SEWDForCTC"),jKo=o(" (SEW-D model)"),DKo=l(),j0=a("li"),w_e=a("strong"),GKo=o("unispeech"),OKo=o(" \u2014 "),qX=a("a"),VKo=o("UniSpeechForCTC"),XKo=o(" (UniSpeech model)"),zKo=l(),D0=a("li"),A_e=a("strong"),WKo=o("unispeech-sat"),QKo=o(" \u2014 "),NX=a("a"),HKo=o("UniSpeechSatForCTC"),UKo=o(" (UniSpeechSat model)"),JKo=l(),G0=a("li"),y_e=a("strong"),YKo=o("wav2vec2"),KKo=o(" \u2014 "),jX=a("a"),ZKo=o("Wav2Vec2ForCTC"),eZo=o(" (Wav2Vec2 model)"),oZo=l(),O0=a("li"),L_e=a("strong"),rZo=o("wav2vec2-conformer"),tZo=o(" \u2014 "),DX=a("a"),aZo=o("Wav2Vec2ConformerForCTC"),nZo=o(" (Wav2Vec2-Conformer model)"),sZo=l(),V0=a("li"),x_e=a("strong"),lZo=o("wavlm"),iZo=o(" \u2014 "),GX=a("a"),dZo=o("WavLMForCTC"),cZo=o(" (WavLM model)"),fZo=l(),X0=a("p"),mZo=o("The model is set in evaluation mode by default using "),$_e=a("code"),gZo=o("model.eval()"),hZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k_e=a("code"),pZo=o("model.train()"),_Zo=l(),F(z0.$$.fragment),Iqe=l(),bd=a("h2"),W0=a("a"),S_e=a("span"),F(cL.$$.fragment),uZo=l(),R_e=a("span"),bZo=o("AutoModelForSpeechSeq2Seq"),qqe=l(),Xo=a("div"),F(fL.$$.fragment),vZo=l(),vd=a("p"),FZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),OX=a("a"),TZo=o("from_pretrained()"),MZo=o(" class method or the "),VX=a("a"),EZo=o("from_config()"),CZo=o(` class
method.`),wZo=l(),mL=a("p"),AZo=o("This class cannot be instantiated directly using "),B_e=a("code"),yZo=o("__init__()"),LZo=o(" (throws an error)."),xZo=l(),Ft=a("div"),F(gL.$$.fragment),$Zo=l(),P_e=a("p"),kZo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),SZo=l(),Fd=a("p"),RZo=o(`Note:
Loading a model from its configuration file does `),I_e=a("strong"),BZo=o("not"),PZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),IZo=o("from_pretrained()"),qZo=o(" to load the model weights."),NZo=l(),F(Q0.$$.fragment),jZo=l(),go=a("div"),F(hL.$$.fragment),DZo=l(),q_e=a("p"),GZo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),OZo=l(),Xa=a("p"),VZo=o("The model class to instantiate is selected based on the "),N_e=a("code"),XZo=o("model_type"),zZo=o(` property of the config object (either
passed as an argument or loaded from `),j_e=a("code"),WZo=o("pretrained_model_name_or_path"),QZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=a("code"),HZo=o("pretrained_model_name_or_path"),UZo=o(":"),JZo=l(),pL=a("ul"),H0=a("li"),G_e=a("strong"),YZo=o("speech-encoder-decoder"),KZo=o(" \u2014 "),zX=a("a"),ZZo=o("SpeechEncoderDecoderModel"),eer=o(" (Speech Encoder decoder model)"),oer=l(),U0=a("li"),O_e=a("strong"),rer=o("speech_to_text"),ter=o(" \u2014 "),WX=a("a"),aer=o("Speech2TextForConditionalGeneration"),ner=o(" (Speech2Text model)"),ser=l(),J0=a("p"),ler=o("The model is set in evaluation mode by default using "),V_e=a("code"),ier=o("model.eval()"),der=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X_e=a("code"),cer=o("model.train()"),fer=l(),F(Y0.$$.fragment),Nqe=l(),Td=a("h2"),K0=a("a"),z_e=a("span"),F(_L.$$.fragment),mer=l(),W_e=a("span"),ger=o("AutoModelForAudioXVector"),jqe=l(),zo=a("div"),F(uL.$$.fragment),her=l(),Md=a("p"),per=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),QX=a("a"),_er=o("from_pretrained()"),uer=o(" class method or the "),HX=a("a"),ber=o("from_config()"),ver=o(` class
method.`),Fer=l(),bL=a("p"),Ter=o("This class cannot be instantiated directly using "),Q_e=a("code"),Mer=o("__init__()"),Eer=o(" (throws an error)."),Cer=l(),Tt=a("div"),F(vL.$$.fragment),wer=l(),H_e=a("p"),Aer=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),yer=l(),Ed=a("p"),Ler=o(`Note:
Loading a model from its configuration file does `),U_e=a("strong"),xer=o("not"),$er=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),ker=o("from_pretrained()"),Ser=o(" to load the model weights."),Rer=l(),F(Z0.$$.fragment),Ber=l(),ho=a("div"),F(FL.$$.fragment),Per=l(),J_e=a("p"),Ier=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),qer=l(),za=a("p"),Ner=o("The model class to instantiate is selected based on the "),Y_e=a("code"),jer=o("model_type"),Der=o(` property of the config object (either
passed as an argument or loaded from `),K_e=a("code"),Ger=o("pretrained_model_name_or_path"),Oer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=a("code"),Ver=o("pretrained_model_name_or_path"),Xer=o(":"),zer=l(),Zr=a("ul"),eT=a("li"),eue=a("strong"),Wer=o("data2vec-audio"),Qer=o(" \u2014 "),JX=a("a"),Her=o("Data2VecAudioForXVector"),Uer=o(" (Data2VecAudio model)"),Jer=l(),oT=a("li"),oue=a("strong"),Yer=o("unispeech-sat"),Ker=o(" \u2014 "),YX=a("a"),Zer=o("UniSpeechSatForXVector"),eor=o(" (UniSpeechSat model)"),oor=l(),rT=a("li"),rue=a("strong"),ror=o("wav2vec2"),tor=o(" \u2014 "),KX=a("a"),aor=o("Wav2Vec2ForXVector"),nor=o(" (Wav2Vec2 model)"),sor=l(),tT=a("li"),tue=a("strong"),lor=o("wav2vec2-conformer"),ior=o(" \u2014 "),ZX=a("a"),dor=o("Wav2Vec2ConformerForXVector"),cor=o(" (Wav2Vec2-Conformer model)"),mor=l(),aT=a("li"),aue=a("strong"),gor=o("wavlm"),hor=o(" \u2014 "),ez=a("a"),por=o("WavLMForXVector"),_or=o(" (WavLM model)"),uor=l(),nT=a("p"),bor=o("The model is set in evaluation mode by default using "),nue=a("code"),vor=o("model.eval()"),For=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sue=a("code"),Tor=o("model.train()"),Mor=l(),F(sT.$$.fragment),Dqe=l(),Cd=a("h2"),lT=a("a"),lue=a("span"),F(TL.$$.fragment),Eor=l(),iue=a("span"),Cor=o("AutoModelForMaskedImageModeling"),Gqe=l(),Wo=a("div"),F(ML.$$.fragment),wor=l(),wd=a("p"),Aor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),oz=a("a"),yor=o("from_pretrained()"),Lor=o(" class method or the "),rz=a("a"),xor=o("from_config()"),$or=o(` class
method.`),kor=l(),EL=a("p"),Sor=o("This class cannot be instantiated directly using "),due=a("code"),Ror=o("__init__()"),Bor=o(" (throws an error)."),Por=l(),Mt=a("div"),F(CL.$$.fragment),Ior=l(),cue=a("p"),qor=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Nor=l(),Ad=a("p"),jor=o(`Note:
Loading a model from its configuration file does `),fue=a("strong"),Dor=o("not"),Gor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=a("a"),Oor=o("from_pretrained()"),Vor=o(" to load the model weights."),Xor=l(),F(iT.$$.fragment),zor=l(),po=a("div"),F(wL.$$.fragment),Wor=l(),mue=a("p"),Qor=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Hor=l(),Wa=a("p"),Uor=o("The model class to instantiate is selected based on the "),gue=a("code"),Jor=o("model_type"),Yor=o(` property of the config object (either
passed as an argument or loaded from `),hue=a("code"),Kor=o("pretrained_model_name_or_path"),Zor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=a("code"),err=o("pretrained_model_name_or_path"),orr=o(":"),rrr=l(),yd=a("ul"),dT=a("li"),_ue=a("strong"),trr=o("deit"),arr=o(" \u2014 "),az=a("a"),nrr=o("DeiTForMaskedImageModeling"),srr=o(" (DeiT model)"),lrr=l(),cT=a("li"),uue=a("strong"),irr=o("swin"),drr=o(" \u2014 "),nz=a("a"),crr=o("SwinForMaskedImageModeling"),frr=o(" (Swin model)"),mrr=l(),fT=a("li"),bue=a("strong"),grr=o("vit"),hrr=o(" \u2014 "),sz=a("a"),prr=o("ViTForMaskedImageModeling"),_rr=o(" (ViT model)"),urr=l(),mT=a("p"),brr=o("The model is set in evaluation mode by default using "),vue=a("code"),vrr=o("model.eval()"),Frr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=a("code"),Trr=o("model.train()"),Mrr=l(),F(gT.$$.fragment),Oqe=l(),Ld=a("h2"),hT=a("a"),Tue=a("span"),F(AL.$$.fragment),Err=l(),Mue=a("span"),Crr=o("AutoModelForObjectDetection"),Vqe=l(),Qo=a("div"),F(yL.$$.fragment),wrr=l(),xd=a("p"),Arr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),lz=a("a"),yrr=o("from_pretrained()"),Lrr=o(" class method or the "),iz=a("a"),xrr=o("from_config()"),$rr=o(` class
method.`),krr=l(),LL=a("p"),Srr=o("This class cannot be instantiated directly using "),Eue=a("code"),Rrr=o("__init__()"),Brr=o(" (throws an error)."),Prr=l(),Et=a("div"),F(xL.$$.fragment),Irr=l(),Cue=a("p"),qrr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Nrr=l(),$d=a("p"),jrr=o(`Note:
Loading a model from its configuration file does `),wue=a("strong"),Drr=o("not"),Grr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=a("a"),Orr=o("from_pretrained()"),Vrr=o(" to load the model weights."),Xrr=l(),F(pT.$$.fragment),zrr=l(),_o=a("div"),F($L.$$.fragment),Wrr=l(),Aue=a("p"),Qrr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Hrr=l(),Qa=a("p"),Urr=o("The model class to instantiate is selected based on the "),yue=a("code"),Jrr=o("model_type"),Yrr=o(` property of the config object (either
passed as an argument or loaded from `),Lue=a("code"),Krr=o("pretrained_model_name_or_path"),Zrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=a("code"),etr=o("pretrained_model_name_or_path"),otr=o(":"),rtr=l(),kL=a("ul"),_T=a("li"),$ue=a("strong"),ttr=o("detr"),atr=o(" \u2014 "),cz=a("a"),ntr=o("DetrForObjectDetection"),str=o(" (DETR model)"),ltr=l(),uT=a("li"),kue=a("strong"),itr=o("yolos"),dtr=o(" \u2014 "),fz=a("a"),ctr=o("YolosForObjectDetection"),ftr=o(" (YOLOS model)"),mtr=l(),bT=a("p"),gtr=o("The model is set in evaluation mode by default using "),Sue=a("code"),htr=o("model.eval()"),ptr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=a("code"),_tr=o("model.train()"),utr=l(),F(vT.$$.fragment),Xqe=l(),kd=a("h2"),FT=a("a"),Bue=a("span"),F(SL.$$.fragment),btr=l(),Pue=a("span"),vtr=o("AutoModelForImageSegmentation"),zqe=l(),Ho=a("div"),F(RL.$$.fragment),Ftr=l(),Sd=a("p"),Ttr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),mz=a("a"),Mtr=o("from_pretrained()"),Etr=o(" class method or the "),gz=a("a"),Ctr=o("from_config()"),wtr=o(` class
method.`),Atr=l(),BL=a("p"),ytr=o("This class cannot be instantiated directly using "),Iue=a("code"),Ltr=o("__init__()"),xtr=o(" (throws an error)."),$tr=l(),Ct=a("div"),F(PL.$$.fragment),ktr=l(),que=a("p"),Str=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Rtr=l(),Rd=a("p"),Btr=o(`Note:
Loading a model from its configuration file does `),Nue=a("strong"),Ptr=o("not"),Itr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=a("a"),qtr=o("from_pretrained()"),Ntr=o(" to load the model weights."),jtr=l(),F(TT.$$.fragment),Dtr=l(),uo=a("div"),F(IL.$$.fragment),Gtr=l(),jue=a("p"),Otr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Vtr=l(),Ha=a("p"),Xtr=o("The model class to instantiate is selected based on the "),Due=a("code"),ztr=o("model_type"),Wtr=o(` property of the config object (either
passed as an argument or loaded from `),Gue=a("code"),Qtr=o("pretrained_model_name_or_path"),Htr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=a("code"),Utr=o("pretrained_model_name_or_path"),Jtr=o(":"),Ytr=l(),Vue=a("ul"),MT=a("li"),Xue=a("strong"),Ktr=o("detr"),Ztr=o(" \u2014 "),pz=a("a"),ear=o("DetrForSegmentation"),oar=o(" (DETR model)"),rar=l(),ET=a("p"),tar=o("The model is set in evaluation mode by default using "),zue=a("code"),aar=o("model.eval()"),nar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=a("code"),sar=o("model.train()"),lar=l(),F(CT.$$.fragment),Wqe=l(),Bd=a("h2"),wT=a("a"),Que=a("span"),F(qL.$$.fragment),iar=l(),Hue=a("span"),dar=o("AutoModelForSemanticSegmentation"),Qqe=l(),Uo=a("div"),F(NL.$$.fragment),car=l(),Pd=a("p"),far=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),_z=a("a"),mar=o("from_pretrained()"),gar=o(" class method or the "),uz=a("a"),har=o("from_config()"),par=o(` class
method.`),_ar=l(),jL=a("p"),uar=o("This class cannot be instantiated directly using "),Uue=a("code"),bar=o("__init__()"),Far=o(" (throws an error)."),Tar=l(),wt=a("div"),F(DL.$$.fragment),Mar=l(),Jue=a("p"),Ear=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Car=l(),Id=a("p"),war=o(`Note:
Loading a model from its configuration file does `),Yue=a("strong"),Aar=o("not"),yar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=a("a"),Lar=o("from_pretrained()"),xar=o(" to load the model weights."),$ar=l(),F(AT.$$.fragment),kar=l(),bo=a("div"),F(GL.$$.fragment),Sar=l(),Kue=a("p"),Rar=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Bar=l(),Ua=a("p"),Par=o("The model class to instantiate is selected based on the "),Zue=a("code"),Iar=o("model_type"),qar=o(` property of the config object (either
passed as an argument or loaded from `),e2e=a("code"),Nar=o("pretrained_model_name_or_path"),jar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=a("code"),Dar=o("pretrained_model_name_or_path"),Gar=o(":"),Oar=l(),Ja=a("ul"),yT=a("li"),r2e=a("strong"),Var=o("beit"),Xar=o(" \u2014 "),vz=a("a"),zar=o("BeitForSemanticSegmentation"),War=o(" (BEiT model)"),Qar=l(),LT=a("li"),t2e=a("strong"),Har=o("data2vec-vision"),Uar=o(" \u2014 "),Fz=a("a"),Jar=o("Data2VecVisionForSemanticSegmentation"),Yar=o(" (Data2VecVision model)"),Kar=l(),xT=a("li"),a2e=a("strong"),Zar=o("dpt"),enr=o(" \u2014 "),Tz=a("a"),onr=o("DPTForSemanticSegmentation"),rnr=o(" (DPT model)"),tnr=l(),$T=a("li"),n2e=a("strong"),anr=o("segformer"),nnr=o(" \u2014 "),Mz=a("a"),snr=o("SegformerForSemanticSegmentation"),lnr=o(" (SegFormer model)"),inr=l(),kT=a("p"),dnr=o("The model is set in evaluation mode by default using "),s2e=a("code"),cnr=o("model.eval()"),fnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l2e=a("code"),mnr=o("model.train()"),gnr=l(),F(ST.$$.fragment),Hqe=l(),qd=a("h2"),RT=a("a"),i2e=a("span"),F(OL.$$.fragment),hnr=l(),d2e=a("span"),pnr=o("AutoModelForInstanceSegmentation"),Uqe=l(),Jo=a("div"),F(VL.$$.fragment),_nr=l(),Nd=a("p"),unr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Ez=a("a"),bnr=o("from_pretrained()"),vnr=o(" class method or the "),Cz=a("a"),Fnr=o("from_config()"),Tnr=o(` class
method.`),Mnr=l(),XL=a("p"),Enr=o("This class cannot be instantiated directly using "),c2e=a("code"),Cnr=o("__init__()"),wnr=o(" (throws an error)."),Anr=l(),At=a("div"),F(zL.$$.fragment),ynr=l(),f2e=a("p"),Lnr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),xnr=l(),jd=a("p"),$nr=o(`Note:
Loading a model from its configuration file does `),m2e=a("strong"),knr=o("not"),Snr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=a("a"),Rnr=o("from_pretrained()"),Bnr=o(" to load the model weights."),Pnr=l(),F(BT.$$.fragment),Inr=l(),vo=a("div"),F(WL.$$.fragment),qnr=l(),g2e=a("p"),Nnr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),jnr=l(),Ya=a("p"),Dnr=o("The model class to instantiate is selected based on the "),h2e=a("code"),Gnr=o("model_type"),Onr=o(` property of the config object (either
passed as an argument or loaded from `),p2e=a("code"),Vnr=o("pretrained_model_name_or_path"),Xnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=a("code"),znr=o("pretrained_model_name_or_path"),Wnr=o(":"),Qnr=l(),u2e=a("ul"),PT=a("li"),b2e=a("strong"),Hnr=o("maskformer"),Unr=o(" \u2014 "),Az=a("a"),Jnr=o("MaskFormerForInstanceSegmentation"),Ynr=o(" (MaskFormer model)"),Knr=l(),IT=a("p"),Znr=o("The model is set in evaluation mode by default using "),v2e=a("code"),esr=o("model.eval()"),osr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F2e=a("code"),rsr=o("model.train()"),tsr=l(),F(qT.$$.fragment),Jqe=l(),Dd=a("h2"),NT=a("a"),T2e=a("span"),F(QL.$$.fragment),asr=l(),M2e=a("span"),nsr=o("TFAutoModel"),Yqe=l(),Yo=a("div"),F(HL.$$.fragment),ssr=l(),Gd=a("p"),lsr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yz=a("a"),isr=o("from_pretrained()"),dsr=o(" class method or the "),Lz=a("a"),csr=o("from_config()"),fsr=o(` class
method.`),msr=l(),UL=a("p"),gsr=o("This class cannot be instantiated directly using "),E2e=a("code"),hsr=o("__init__()"),psr=o(" (throws an error)."),_sr=l(),yt=a("div"),F(JL.$$.fragment),usr=l(),C2e=a("p"),bsr=o("Instantiates one of the base model classes of the library from a configuration."),vsr=l(),Od=a("p"),Fsr=o(`Note:
Loading a model from its configuration file does `),w2e=a("strong"),Tsr=o("not"),Msr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=a("a"),Esr=o("from_pretrained()"),Csr=o(" to load the model weights."),wsr=l(),F(jT.$$.fragment),Asr=l(),wr=a("div"),F(YL.$$.fragment),ysr=l(),A2e=a("p"),Lsr=o("Instantiate one of the base model classes of the library from a pretrained model."),xsr=l(),Ka=a("p"),$sr=o("The model class to instantiate is selected based on the "),y2e=a("code"),ksr=o("model_type"),Ssr=o(` property of the config object (either
passed as an argument or loaded from `),L2e=a("code"),Rsr=o("pretrained_model_name_or_path"),Bsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=a("code"),Psr=o("pretrained_model_name_or_path"),Isr=o(":"),qsr=l(),N=a("ul"),DT=a("li"),$2e=a("strong"),Nsr=o("albert"),jsr=o(" \u2014 "),$z=a("a"),Dsr=o("TFAlbertModel"),Gsr=o(" (ALBERT model)"),Osr=l(),GT=a("li"),k2e=a("strong"),Vsr=o("bart"),Xsr=o(" \u2014 "),kz=a("a"),zsr=o("TFBartModel"),Wsr=o(" (BART model)"),Qsr=l(),OT=a("li"),S2e=a("strong"),Hsr=o("bert"),Usr=o(" \u2014 "),Sz=a("a"),Jsr=o("TFBertModel"),Ysr=o(" (BERT model)"),Ksr=l(),VT=a("li"),R2e=a("strong"),Zsr=o("blenderbot"),elr=o(" \u2014 "),Rz=a("a"),olr=o("TFBlenderbotModel"),rlr=o(" (Blenderbot model)"),tlr=l(),XT=a("li"),B2e=a("strong"),alr=o("blenderbot-small"),nlr=o(" \u2014 "),Bz=a("a"),slr=o("TFBlenderbotSmallModel"),llr=o(" (BlenderbotSmall model)"),ilr=l(),zT=a("li"),P2e=a("strong"),dlr=o("camembert"),clr=o(" \u2014 "),Pz=a("a"),flr=o("TFCamembertModel"),mlr=o(" (CamemBERT model)"),glr=l(),WT=a("li"),I2e=a("strong"),hlr=o("clip"),plr=o(" \u2014 "),Iz=a("a"),_lr=o("TFCLIPModel"),ulr=o(" (CLIP model)"),blr=l(),QT=a("li"),q2e=a("strong"),vlr=o("convbert"),Flr=o(" \u2014 "),qz=a("a"),Tlr=o("TFConvBertModel"),Mlr=o(" (ConvBERT model)"),Elr=l(),HT=a("li"),N2e=a("strong"),Clr=o("convnext"),wlr=o(" \u2014 "),Nz=a("a"),Alr=o("TFConvNextModel"),ylr=o(" (ConvNext model)"),Llr=l(),UT=a("li"),j2e=a("strong"),xlr=o("ctrl"),$lr=o(" \u2014 "),jz=a("a"),klr=o("TFCTRLModel"),Slr=o(" (CTRL model)"),Rlr=l(),JT=a("li"),D2e=a("strong"),Blr=o("data2vec-vision"),Plr=o(" \u2014 "),Dz=a("a"),Ilr=o("TFData2VecVisionModel"),qlr=o(" (Data2VecVision model)"),Nlr=l(),YT=a("li"),G2e=a("strong"),jlr=o("deberta"),Dlr=o(" \u2014 "),Gz=a("a"),Glr=o("TFDebertaModel"),Olr=o(" (DeBERTa model)"),Vlr=l(),KT=a("li"),O2e=a("strong"),Xlr=o("deberta-v2"),zlr=o(" \u2014 "),Oz=a("a"),Wlr=o("TFDebertaV2Model"),Qlr=o(" (DeBERTa-v2 model)"),Hlr=l(),ZT=a("li"),V2e=a("strong"),Ulr=o("distilbert"),Jlr=o(" \u2014 "),Vz=a("a"),Ylr=o("TFDistilBertModel"),Klr=o(" (DistilBERT model)"),Zlr=l(),e7=a("li"),X2e=a("strong"),eir=o("dpr"),oir=o(" \u2014 "),Xz=a("a"),rir=o("TFDPRQuestionEncoder"),tir=o(" (DPR model)"),air=l(),o7=a("li"),z2e=a("strong"),nir=o("electra"),sir=o(" \u2014 "),zz=a("a"),lir=o("TFElectraModel"),iir=o(" (ELECTRA model)"),dir=l(),r7=a("li"),W2e=a("strong"),cir=o("flaubert"),fir=o(" \u2014 "),Wz=a("a"),mir=o("TFFlaubertModel"),gir=o(" (FlauBERT model)"),hir=l(),Ps=a("li"),Q2e=a("strong"),pir=o("funnel"),_ir=o(" \u2014 "),Qz=a("a"),uir=o("TFFunnelModel"),bir=o(" or "),Hz=a("a"),vir=o("TFFunnelBaseModel"),Fir=o(" (Funnel Transformer model)"),Tir=l(),t7=a("li"),H2e=a("strong"),Mir=o("gpt2"),Eir=o(" \u2014 "),Uz=a("a"),Cir=o("TFGPT2Model"),wir=o(" (OpenAI GPT-2 model)"),Air=l(),a7=a("li"),U2e=a("strong"),yir=o("gptj"),Lir=o(" \u2014 "),Jz=a("a"),xir=o("TFGPTJModel"),$ir=o(" (GPT-J model)"),kir=l(),n7=a("li"),J2e=a("strong"),Sir=o("hubert"),Rir=o(" \u2014 "),Yz=a("a"),Bir=o("TFHubertModel"),Pir=o(" (Hubert model)"),Iir=l(),s7=a("li"),Y2e=a("strong"),qir=o("layoutlm"),Nir=o(" \u2014 "),Kz=a("a"),jir=o("TFLayoutLMModel"),Dir=o(" (LayoutLM model)"),Gir=l(),l7=a("li"),K2e=a("strong"),Oir=o("led"),Vir=o(" \u2014 "),Zz=a("a"),Xir=o("TFLEDModel"),zir=o(" (LED model)"),Wir=l(),i7=a("li"),Z2e=a("strong"),Qir=o("longformer"),Hir=o(" \u2014 "),eW=a("a"),Uir=o("TFLongformerModel"),Jir=o(" (Longformer model)"),Yir=l(),d7=a("li"),e1e=a("strong"),Kir=o("lxmert"),Zir=o(" \u2014 "),oW=a("a"),edr=o("TFLxmertModel"),odr=o(" (LXMERT model)"),rdr=l(),c7=a("li"),o1e=a("strong"),tdr=o("marian"),adr=o(" \u2014 "),rW=a("a"),ndr=o("TFMarianModel"),sdr=o(" (Marian model)"),ldr=l(),f7=a("li"),r1e=a("strong"),idr=o("mbart"),ddr=o(" \u2014 "),tW=a("a"),cdr=o("TFMBartModel"),fdr=o(" (mBART model)"),mdr=l(),m7=a("li"),t1e=a("strong"),gdr=o("mobilebert"),hdr=o(" \u2014 "),aW=a("a"),pdr=o("TFMobileBertModel"),_dr=o(" (MobileBERT model)"),udr=l(),g7=a("li"),a1e=a("strong"),bdr=o("mpnet"),vdr=o(" \u2014 "),nW=a("a"),Fdr=o("TFMPNetModel"),Tdr=o(" (MPNet model)"),Mdr=l(),h7=a("li"),n1e=a("strong"),Edr=o("mt5"),Cdr=o(" \u2014 "),sW=a("a"),wdr=o("TFMT5Model"),Adr=o(" (mT5 model)"),ydr=l(),p7=a("li"),s1e=a("strong"),Ldr=o("openai-gpt"),xdr=o(" \u2014 "),lW=a("a"),$dr=o("TFOpenAIGPTModel"),kdr=o(" (OpenAI GPT model)"),Sdr=l(),_7=a("li"),l1e=a("strong"),Rdr=o("pegasus"),Bdr=o(" \u2014 "),iW=a("a"),Pdr=o("TFPegasusModel"),Idr=o(" (Pegasus model)"),qdr=l(),u7=a("li"),i1e=a("strong"),Ndr=o("rembert"),jdr=o(" \u2014 "),dW=a("a"),Ddr=o("TFRemBertModel"),Gdr=o(" (RemBERT model)"),Odr=l(),b7=a("li"),d1e=a("strong"),Vdr=o("roberta"),Xdr=o(" \u2014 "),cW=a("a"),zdr=o("TFRobertaModel"),Wdr=o(" (RoBERTa model)"),Qdr=l(),v7=a("li"),c1e=a("strong"),Hdr=o("roformer"),Udr=o(" \u2014 "),fW=a("a"),Jdr=o("TFRoFormerModel"),Ydr=o(" (RoFormer model)"),Kdr=l(),F7=a("li"),f1e=a("strong"),Zdr=o("speech_to_text"),ecr=o(" \u2014 "),mW=a("a"),ocr=o("TFSpeech2TextModel"),rcr=o(" (Speech2Text model)"),tcr=l(),T7=a("li"),m1e=a("strong"),acr=o("swin"),ncr=o(" \u2014 "),gW=a("a"),scr=o("TFSwinModel"),lcr=o(" (Swin model)"),icr=l(),M7=a("li"),g1e=a("strong"),dcr=o("t5"),ccr=o(" \u2014 "),hW=a("a"),fcr=o("TFT5Model"),mcr=o(" (T5 model)"),gcr=l(),E7=a("li"),h1e=a("strong"),hcr=o("tapas"),pcr=o(" \u2014 "),pW=a("a"),_cr=o("TFTapasModel"),ucr=o(" (TAPAS model)"),bcr=l(),C7=a("li"),p1e=a("strong"),vcr=o("transfo-xl"),Fcr=o(" \u2014 "),_W=a("a"),Tcr=o("TFTransfoXLModel"),Mcr=o(" (Transformer-XL model)"),Ecr=l(),w7=a("li"),_1e=a("strong"),Ccr=o("vit"),wcr=o(" \u2014 "),uW=a("a"),Acr=o("TFViTModel"),ycr=o(" (ViT model)"),Lcr=l(),A7=a("li"),u1e=a("strong"),xcr=o("vit_mae"),$cr=o(" \u2014 "),bW=a("a"),kcr=o("TFViTMAEModel"),Scr=o(" (ViTMAE model)"),Rcr=l(),y7=a("li"),b1e=a("strong"),Bcr=o("wav2vec2"),Pcr=o(" \u2014 "),vW=a("a"),Icr=o("TFWav2Vec2Model"),qcr=o(" (Wav2Vec2 model)"),Ncr=l(),L7=a("li"),v1e=a("strong"),jcr=o("xlm"),Dcr=o(" \u2014 "),FW=a("a"),Gcr=o("TFXLMModel"),Ocr=o(" (XLM model)"),Vcr=l(),x7=a("li"),F1e=a("strong"),Xcr=o("xlm-roberta"),zcr=o(" \u2014 "),TW=a("a"),Wcr=o("TFXLMRobertaModel"),Qcr=o(" (XLM-RoBERTa model)"),Hcr=l(),$7=a("li"),T1e=a("strong"),Ucr=o("xlnet"),Jcr=o(" \u2014 "),MW=a("a"),Ycr=o("TFXLNetModel"),Kcr=o(" (XLNet model)"),Zcr=l(),F(k7.$$.fragment),Kqe=l(),Vd=a("h2"),S7=a("a"),M1e=a("span"),F(KL.$$.fragment),efr=l(),E1e=a("span"),ofr=o("TFAutoModelForPreTraining"),Zqe=l(),Ko=a("div"),F(ZL.$$.fragment),rfr=l(),Xd=a("p"),tfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),EW=a("a"),afr=o("from_pretrained()"),nfr=o(" class method or the "),CW=a("a"),sfr=o("from_config()"),lfr=o(` class
method.`),ifr=l(),e8=a("p"),dfr=o("This class cannot be instantiated directly using "),C1e=a("code"),cfr=o("__init__()"),ffr=o(" (throws an error)."),mfr=l(),Lt=a("div"),F(o8.$$.fragment),gfr=l(),w1e=a("p"),hfr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pfr=l(),zd=a("p"),_fr=o(`Note:
Loading a model from its configuration file does `),A1e=a("strong"),ufr=o("not"),bfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=a("a"),vfr=o("from_pretrained()"),Ffr=o(" to load the model weights."),Tfr=l(),F(R7.$$.fragment),Mfr=l(),Ar=a("div"),F(r8.$$.fragment),Efr=l(),y1e=a("p"),Cfr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wfr=l(),Za=a("p"),Afr=o("The model class to instantiate is selected based on the "),L1e=a("code"),yfr=o("model_type"),Lfr=o(` property of the config object (either
passed as an argument or loaded from `),x1e=a("code"),xfr=o("pretrained_model_name_or_path"),$fr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=a("code"),kfr=o("pretrained_model_name_or_path"),Sfr=o(":"),Rfr=l(),se=a("ul"),B7=a("li"),k1e=a("strong"),Bfr=o("albert"),Pfr=o(" \u2014 "),AW=a("a"),Ifr=o("TFAlbertForPreTraining"),qfr=o(" (ALBERT model)"),Nfr=l(),P7=a("li"),S1e=a("strong"),jfr=o("bart"),Dfr=o(" \u2014 "),yW=a("a"),Gfr=o("TFBartForConditionalGeneration"),Ofr=o(" (BART model)"),Vfr=l(),I7=a("li"),R1e=a("strong"),Xfr=o("bert"),zfr=o(" \u2014 "),LW=a("a"),Wfr=o("TFBertForPreTraining"),Qfr=o(" (BERT model)"),Hfr=l(),q7=a("li"),B1e=a("strong"),Ufr=o("camembert"),Jfr=o(" \u2014 "),xW=a("a"),Yfr=o("TFCamembertForMaskedLM"),Kfr=o(" (CamemBERT model)"),Zfr=l(),N7=a("li"),P1e=a("strong"),emr=o("ctrl"),omr=o(" \u2014 "),$W=a("a"),rmr=o("TFCTRLLMHeadModel"),tmr=o(" (CTRL model)"),amr=l(),j7=a("li"),I1e=a("strong"),nmr=o("distilbert"),smr=o(" \u2014 "),kW=a("a"),lmr=o("TFDistilBertForMaskedLM"),imr=o(" (DistilBERT model)"),dmr=l(),D7=a("li"),q1e=a("strong"),cmr=o("electra"),fmr=o(" \u2014 "),SW=a("a"),mmr=o("TFElectraForPreTraining"),gmr=o(" (ELECTRA model)"),hmr=l(),G7=a("li"),N1e=a("strong"),pmr=o("flaubert"),_mr=o(" \u2014 "),RW=a("a"),umr=o("TFFlaubertWithLMHeadModel"),bmr=o(" (FlauBERT model)"),vmr=l(),O7=a("li"),j1e=a("strong"),Fmr=o("funnel"),Tmr=o(" \u2014 "),BW=a("a"),Mmr=o("TFFunnelForPreTraining"),Emr=o(" (Funnel Transformer model)"),Cmr=l(),V7=a("li"),D1e=a("strong"),wmr=o("gpt2"),Amr=o(" \u2014 "),PW=a("a"),ymr=o("TFGPT2LMHeadModel"),Lmr=o(" (OpenAI GPT-2 model)"),xmr=l(),X7=a("li"),G1e=a("strong"),$mr=o("layoutlm"),kmr=o(" \u2014 "),IW=a("a"),Smr=o("TFLayoutLMForMaskedLM"),Rmr=o(" (LayoutLM model)"),Bmr=l(),z7=a("li"),O1e=a("strong"),Pmr=o("lxmert"),Imr=o(" \u2014 "),qW=a("a"),qmr=o("TFLxmertForPreTraining"),Nmr=o(" (LXMERT model)"),jmr=l(),W7=a("li"),V1e=a("strong"),Dmr=o("mobilebert"),Gmr=o(" \u2014 "),NW=a("a"),Omr=o("TFMobileBertForPreTraining"),Vmr=o(" (MobileBERT model)"),Xmr=l(),Q7=a("li"),X1e=a("strong"),zmr=o("mpnet"),Wmr=o(" \u2014 "),jW=a("a"),Qmr=o("TFMPNetForMaskedLM"),Hmr=o(" (MPNet model)"),Umr=l(),H7=a("li"),z1e=a("strong"),Jmr=o("openai-gpt"),Ymr=o(" \u2014 "),DW=a("a"),Kmr=o("TFOpenAIGPTLMHeadModel"),Zmr=o(" (OpenAI GPT model)"),egr=l(),U7=a("li"),W1e=a("strong"),ogr=o("roberta"),rgr=o(" \u2014 "),GW=a("a"),tgr=o("TFRobertaForMaskedLM"),agr=o(" (RoBERTa model)"),ngr=l(),J7=a("li"),Q1e=a("strong"),sgr=o("t5"),lgr=o(" \u2014 "),OW=a("a"),igr=o("TFT5ForConditionalGeneration"),dgr=o(" (T5 model)"),cgr=l(),Y7=a("li"),H1e=a("strong"),fgr=o("tapas"),mgr=o(" \u2014 "),VW=a("a"),ggr=o("TFTapasForMaskedLM"),hgr=o(" (TAPAS model)"),pgr=l(),K7=a("li"),U1e=a("strong"),_gr=o("transfo-xl"),ugr=o(" \u2014 "),XW=a("a"),bgr=o("TFTransfoXLLMHeadModel"),vgr=o(" (Transformer-XL model)"),Fgr=l(),Z7=a("li"),J1e=a("strong"),Tgr=o("vit_mae"),Mgr=o(" \u2014 "),zW=a("a"),Egr=o("TFViTMAEForPreTraining"),Cgr=o(" (ViTMAE model)"),wgr=l(),eM=a("li"),Y1e=a("strong"),Agr=o("xlm"),ygr=o(" \u2014 "),WW=a("a"),Lgr=o("TFXLMWithLMHeadModel"),xgr=o(" (XLM model)"),$gr=l(),oM=a("li"),K1e=a("strong"),kgr=o("xlm-roberta"),Sgr=o(" \u2014 "),QW=a("a"),Rgr=o("TFXLMRobertaForMaskedLM"),Bgr=o(" (XLM-RoBERTa model)"),Pgr=l(),rM=a("li"),Z1e=a("strong"),Igr=o("xlnet"),qgr=o(" \u2014 "),HW=a("a"),Ngr=o("TFXLNetLMHeadModel"),jgr=o(" (XLNet model)"),Dgr=l(),F(tM.$$.fragment),eNe=l(),Wd=a("h2"),aM=a("a"),ebe=a("span"),F(t8.$$.fragment),Ggr=l(),obe=a("span"),Ogr=o("TFAutoModelForCausalLM"),oNe=l(),Zo=a("div"),F(a8.$$.fragment),Vgr=l(),Qd=a("p"),Xgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),UW=a("a"),zgr=o("from_pretrained()"),Wgr=o(" class method or the "),JW=a("a"),Qgr=o("from_config()"),Hgr=o(` class
method.`),Ugr=l(),n8=a("p"),Jgr=o("This class cannot be instantiated directly using "),rbe=a("code"),Ygr=o("__init__()"),Kgr=o(" (throws an error)."),Zgr=l(),xt=a("div"),F(s8.$$.fragment),ehr=l(),tbe=a("p"),ohr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rhr=l(),Hd=a("p"),thr=o(`Note:
Loading a model from its configuration file does `),abe=a("strong"),ahr=o("not"),nhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=a("a"),shr=o("from_pretrained()"),lhr=o(" to load the model weights."),ihr=l(),F(nM.$$.fragment),dhr=l(),yr=a("div"),F(l8.$$.fragment),chr=l(),nbe=a("p"),fhr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mhr=l(),en=a("p"),ghr=o("The model class to instantiate is selected based on the "),sbe=a("code"),hhr=o("model_type"),phr=o(` property of the config object (either
passed as an argument or loaded from `),lbe=a("code"),_hr=o("pretrained_model_name_or_path"),uhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=a("code"),bhr=o("pretrained_model_name_or_path"),vhr=o(":"),Fhr=l(),Te=a("ul"),sM=a("li"),dbe=a("strong"),Thr=o("bert"),Mhr=o(" \u2014 "),KW=a("a"),Ehr=o("TFBertLMHeadModel"),Chr=o(" (BERT model)"),whr=l(),lM=a("li"),cbe=a("strong"),Ahr=o("camembert"),yhr=o(" \u2014 "),ZW=a("a"),Lhr=o("TFCamembertForCausalLM"),xhr=o(" (CamemBERT model)"),$hr=l(),iM=a("li"),fbe=a("strong"),khr=o("ctrl"),Shr=o(" \u2014 "),eQ=a("a"),Rhr=o("TFCTRLLMHeadModel"),Bhr=o(" (CTRL model)"),Phr=l(),dM=a("li"),mbe=a("strong"),Ihr=o("gpt2"),qhr=o(" \u2014 "),oQ=a("a"),Nhr=o("TFGPT2LMHeadModel"),jhr=o(" (OpenAI GPT-2 model)"),Dhr=l(),cM=a("li"),gbe=a("strong"),Ghr=o("gptj"),Ohr=o(" \u2014 "),rQ=a("a"),Vhr=o("TFGPTJForCausalLM"),Xhr=o(" (GPT-J model)"),zhr=l(),fM=a("li"),hbe=a("strong"),Whr=o("openai-gpt"),Qhr=o(" \u2014 "),tQ=a("a"),Hhr=o("TFOpenAIGPTLMHeadModel"),Uhr=o(" (OpenAI GPT model)"),Jhr=l(),mM=a("li"),pbe=a("strong"),Yhr=o("rembert"),Khr=o(" \u2014 "),aQ=a("a"),Zhr=o("TFRemBertForCausalLM"),epr=o(" (RemBERT model)"),opr=l(),gM=a("li"),_be=a("strong"),rpr=o("roberta"),tpr=o(" \u2014 "),nQ=a("a"),apr=o("TFRobertaForCausalLM"),npr=o(" (RoBERTa model)"),spr=l(),hM=a("li"),ube=a("strong"),lpr=o("roformer"),ipr=o(" \u2014 "),sQ=a("a"),dpr=o("TFRoFormerForCausalLM"),cpr=o(" (RoFormer model)"),fpr=l(),pM=a("li"),bbe=a("strong"),mpr=o("transfo-xl"),gpr=o(" \u2014 "),lQ=a("a"),hpr=o("TFTransfoXLLMHeadModel"),ppr=o(" (Transformer-XL model)"),_pr=l(),_M=a("li"),vbe=a("strong"),upr=o("xlm"),bpr=o(" \u2014 "),iQ=a("a"),vpr=o("TFXLMWithLMHeadModel"),Fpr=o(" (XLM model)"),Tpr=l(),uM=a("li"),Fbe=a("strong"),Mpr=o("xlnet"),Epr=o(" \u2014 "),dQ=a("a"),Cpr=o("TFXLNetLMHeadModel"),wpr=o(" (XLNet model)"),Apr=l(),F(bM.$$.fragment),rNe=l(),Ud=a("h2"),vM=a("a"),Tbe=a("span"),F(i8.$$.fragment),ypr=l(),Mbe=a("span"),Lpr=o("TFAutoModelForImageClassification"),tNe=l(),er=a("div"),F(d8.$$.fragment),xpr=l(),Jd=a("p"),$pr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cQ=a("a"),kpr=o("from_pretrained()"),Spr=o(" class method or the "),fQ=a("a"),Rpr=o("from_config()"),Bpr=o(` class
method.`),Ppr=l(),c8=a("p"),Ipr=o("This class cannot be instantiated directly using "),Ebe=a("code"),qpr=o("__init__()"),Npr=o(" (throws an error)."),jpr=l(),$t=a("div"),F(f8.$$.fragment),Dpr=l(),Cbe=a("p"),Gpr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Opr=l(),Yd=a("p"),Vpr=o(`Note:
Loading a model from its configuration file does `),wbe=a("strong"),Xpr=o("not"),zpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mQ=a("a"),Wpr=o("from_pretrained()"),Qpr=o(" to load the model weights."),Hpr=l(),F(FM.$$.fragment),Upr=l(),Lr=a("div"),F(m8.$$.fragment),Jpr=l(),Abe=a("p"),Ypr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Kpr=l(),on=a("p"),Zpr=o("The model class to instantiate is selected based on the "),ybe=a("code"),e_r=o("model_type"),o_r=o(` property of the config object (either
passed as an argument or loaded from `),Lbe=a("code"),r_r=o("pretrained_model_name_or_path"),t_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=a("code"),a_r=o("pretrained_model_name_or_path"),n_r=o(":"),s_r=l(),rn=a("ul"),TM=a("li"),$be=a("strong"),l_r=o("convnext"),i_r=o(" \u2014 "),gQ=a("a"),d_r=o("TFConvNextForImageClassification"),c_r=o(" (ConvNext model)"),f_r=l(),MM=a("li"),kbe=a("strong"),m_r=o("data2vec-vision"),g_r=o(" \u2014 "),hQ=a("a"),h_r=o("TFData2VecVisionForImageClassification"),p_r=o(" (Data2VecVision model)"),__r=l(),EM=a("li"),Sbe=a("strong"),u_r=o("swin"),b_r=o(" \u2014 "),pQ=a("a"),v_r=o("TFSwinForImageClassification"),F_r=o(" (Swin model)"),T_r=l(),CM=a("li"),Rbe=a("strong"),M_r=o("vit"),E_r=o(" \u2014 "),_Q=a("a"),C_r=o("TFViTForImageClassification"),w_r=o(" (ViT model)"),A_r=l(),F(wM.$$.fragment),aNe=l(),Kd=a("h2"),AM=a("a"),Bbe=a("span"),F(g8.$$.fragment),y_r=l(),Pbe=a("span"),L_r=o("TFAutoModelForMaskedLM"),nNe=l(),or=a("div"),F(h8.$$.fragment),x_r=l(),Zd=a("p"),$_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uQ=a("a"),k_r=o("from_pretrained()"),S_r=o(" class method or the "),bQ=a("a"),R_r=o("from_config()"),B_r=o(` class
method.`),P_r=l(),p8=a("p"),I_r=o("This class cannot be instantiated directly using "),Ibe=a("code"),q_r=o("__init__()"),N_r=o(" (throws an error)."),j_r=l(),kt=a("div"),F(_8.$$.fragment),D_r=l(),qbe=a("p"),G_r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),O_r=l(),ec=a("p"),V_r=o(`Note:
Loading a model from its configuration file does `),Nbe=a("strong"),X_r=o("not"),z_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=a("a"),W_r=o("from_pretrained()"),Q_r=o(" to load the model weights."),H_r=l(),F(yM.$$.fragment),U_r=l(),xr=a("div"),F(u8.$$.fragment),J_r=l(),jbe=a("p"),Y_r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),K_r=l(),tn=a("p"),Z_r=o("The model class to instantiate is selected based on the "),Dbe=a("code"),eur=o("model_type"),our=o(` property of the config object (either
passed as an argument or loaded from `),Gbe=a("code"),rur=o("pretrained_model_name_or_path"),tur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=a("code"),aur=o("pretrained_model_name_or_path"),nur=o(":"),sur=l(),ie=a("ul"),LM=a("li"),Vbe=a("strong"),lur=o("albert"),iur=o(" \u2014 "),FQ=a("a"),dur=o("TFAlbertForMaskedLM"),cur=o(" (ALBERT model)"),fur=l(),xM=a("li"),Xbe=a("strong"),mur=o("bert"),gur=o(" \u2014 "),TQ=a("a"),hur=o("TFBertForMaskedLM"),pur=o(" (BERT model)"),_ur=l(),$M=a("li"),zbe=a("strong"),uur=o("camembert"),bur=o(" \u2014 "),MQ=a("a"),vur=o("TFCamembertForMaskedLM"),Fur=o(" (CamemBERT model)"),Tur=l(),kM=a("li"),Wbe=a("strong"),Mur=o("convbert"),Eur=o(" \u2014 "),EQ=a("a"),Cur=o("TFConvBertForMaskedLM"),wur=o(" (ConvBERT model)"),Aur=l(),SM=a("li"),Qbe=a("strong"),yur=o("deberta"),Lur=o(" \u2014 "),CQ=a("a"),xur=o("TFDebertaForMaskedLM"),$ur=o(" (DeBERTa model)"),kur=l(),RM=a("li"),Hbe=a("strong"),Sur=o("deberta-v2"),Rur=o(" \u2014 "),wQ=a("a"),Bur=o("TFDebertaV2ForMaskedLM"),Pur=o(" (DeBERTa-v2 model)"),Iur=l(),BM=a("li"),Ube=a("strong"),qur=o("distilbert"),Nur=o(" \u2014 "),AQ=a("a"),jur=o("TFDistilBertForMaskedLM"),Dur=o(" (DistilBERT model)"),Gur=l(),PM=a("li"),Jbe=a("strong"),Our=o("electra"),Vur=o(" \u2014 "),yQ=a("a"),Xur=o("TFElectraForMaskedLM"),zur=o(" (ELECTRA model)"),Wur=l(),IM=a("li"),Ybe=a("strong"),Qur=o("flaubert"),Hur=o(" \u2014 "),LQ=a("a"),Uur=o("TFFlaubertWithLMHeadModel"),Jur=o(" (FlauBERT model)"),Yur=l(),qM=a("li"),Kbe=a("strong"),Kur=o("funnel"),Zur=o(" \u2014 "),xQ=a("a"),e2r=o("TFFunnelForMaskedLM"),o2r=o(" (Funnel Transformer model)"),r2r=l(),NM=a("li"),Zbe=a("strong"),t2r=o("layoutlm"),a2r=o(" \u2014 "),$Q=a("a"),n2r=o("TFLayoutLMForMaskedLM"),s2r=o(" (LayoutLM model)"),l2r=l(),jM=a("li"),eve=a("strong"),i2r=o("longformer"),d2r=o(" \u2014 "),kQ=a("a"),c2r=o("TFLongformerForMaskedLM"),f2r=o(" (Longformer model)"),m2r=l(),DM=a("li"),ove=a("strong"),g2r=o("mobilebert"),h2r=o(" \u2014 "),SQ=a("a"),p2r=o("TFMobileBertForMaskedLM"),_2r=o(" (MobileBERT model)"),u2r=l(),GM=a("li"),rve=a("strong"),b2r=o("mpnet"),v2r=o(" \u2014 "),RQ=a("a"),F2r=o("TFMPNetForMaskedLM"),T2r=o(" (MPNet model)"),M2r=l(),OM=a("li"),tve=a("strong"),E2r=o("rembert"),C2r=o(" \u2014 "),BQ=a("a"),w2r=o("TFRemBertForMaskedLM"),A2r=o(" (RemBERT model)"),y2r=l(),VM=a("li"),ave=a("strong"),L2r=o("roberta"),x2r=o(" \u2014 "),PQ=a("a"),$2r=o("TFRobertaForMaskedLM"),k2r=o(" (RoBERTa model)"),S2r=l(),XM=a("li"),nve=a("strong"),R2r=o("roformer"),B2r=o(" \u2014 "),IQ=a("a"),P2r=o("TFRoFormerForMaskedLM"),I2r=o(" (RoFormer model)"),q2r=l(),zM=a("li"),sve=a("strong"),N2r=o("tapas"),j2r=o(" \u2014 "),qQ=a("a"),D2r=o("TFTapasForMaskedLM"),G2r=o(" (TAPAS model)"),O2r=l(),WM=a("li"),lve=a("strong"),V2r=o("xlm"),X2r=o(" \u2014 "),NQ=a("a"),z2r=o("TFXLMWithLMHeadModel"),W2r=o(" (XLM model)"),Q2r=l(),QM=a("li"),ive=a("strong"),H2r=o("xlm-roberta"),U2r=o(" \u2014 "),jQ=a("a"),J2r=o("TFXLMRobertaForMaskedLM"),Y2r=o(" (XLM-RoBERTa model)"),K2r=l(),F(HM.$$.fragment),sNe=l(),oc=a("h2"),UM=a("a"),dve=a("span"),F(b8.$$.fragment),Z2r=l(),cve=a("span"),e1r=o("TFAutoModelForSeq2SeqLM"),lNe=l(),rr=a("div"),F(v8.$$.fragment),o1r=l(),rc=a("p"),r1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),DQ=a("a"),t1r=o("from_pretrained()"),a1r=o(" class method or the "),GQ=a("a"),n1r=o("from_config()"),s1r=o(` class
method.`),l1r=l(),F8=a("p"),i1r=o("This class cannot be instantiated directly using "),fve=a("code"),d1r=o("__init__()"),c1r=o(" (throws an error)."),f1r=l(),St=a("div"),F(T8.$$.fragment),m1r=l(),mve=a("p"),g1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),h1r=l(),tc=a("p"),p1r=o(`Note:
Loading a model from its configuration file does `),gve=a("strong"),_1r=o("not"),u1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=a("a"),b1r=o("from_pretrained()"),v1r=o(" to load the model weights."),F1r=l(),F(JM.$$.fragment),T1r=l(),$r=a("div"),F(M8.$$.fragment),M1r=l(),hve=a("p"),E1r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),C1r=l(),an=a("p"),w1r=o("The model class to instantiate is selected based on the "),pve=a("code"),A1r=o("model_type"),y1r=o(` property of the config object (either
passed as an argument or loaded from `),_ve=a("code"),L1r=o("pretrained_model_name_or_path"),x1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=a("code"),$1r=o("pretrained_model_name_or_path"),k1r=o(":"),S1r=l(),ye=a("ul"),YM=a("li"),bve=a("strong"),R1r=o("bart"),B1r=o(" \u2014 "),VQ=a("a"),P1r=o("TFBartForConditionalGeneration"),I1r=o(" (BART model)"),q1r=l(),KM=a("li"),vve=a("strong"),N1r=o("blenderbot"),j1r=o(" \u2014 "),XQ=a("a"),D1r=o("TFBlenderbotForConditionalGeneration"),G1r=o(" (Blenderbot model)"),O1r=l(),ZM=a("li"),Fve=a("strong"),V1r=o("blenderbot-small"),X1r=o(" \u2014 "),zQ=a("a"),z1r=o("TFBlenderbotSmallForConditionalGeneration"),W1r=o(" (BlenderbotSmall model)"),Q1r=l(),e4=a("li"),Tve=a("strong"),H1r=o("encoder-decoder"),U1r=o(" \u2014 "),WQ=a("a"),J1r=o("TFEncoderDecoderModel"),Y1r=o(" (Encoder decoder model)"),K1r=l(),o4=a("li"),Mve=a("strong"),Z1r=o("led"),ebr=o(" \u2014 "),QQ=a("a"),obr=o("TFLEDForConditionalGeneration"),rbr=o(" (LED model)"),tbr=l(),r4=a("li"),Eve=a("strong"),abr=o("marian"),nbr=o(" \u2014 "),HQ=a("a"),sbr=o("TFMarianMTModel"),lbr=o(" (Marian model)"),ibr=l(),t4=a("li"),Cve=a("strong"),dbr=o("mbart"),cbr=o(" \u2014 "),UQ=a("a"),fbr=o("TFMBartForConditionalGeneration"),mbr=o(" (mBART model)"),gbr=l(),a4=a("li"),wve=a("strong"),hbr=o("mt5"),pbr=o(" \u2014 "),JQ=a("a"),_br=o("TFMT5ForConditionalGeneration"),ubr=o(" (mT5 model)"),bbr=l(),n4=a("li"),Ave=a("strong"),vbr=o("pegasus"),Fbr=o(" \u2014 "),YQ=a("a"),Tbr=o("TFPegasusForConditionalGeneration"),Mbr=o(" (Pegasus model)"),Ebr=l(),s4=a("li"),yve=a("strong"),Cbr=o("t5"),wbr=o(" \u2014 "),KQ=a("a"),Abr=o("TFT5ForConditionalGeneration"),ybr=o(" (T5 model)"),Lbr=l(),F(l4.$$.fragment),iNe=l(),ac=a("h2"),i4=a("a"),Lve=a("span"),F(E8.$$.fragment),xbr=l(),xve=a("span"),$br=o("TFAutoModelForSequenceClassification"),dNe=l(),tr=a("div"),F(C8.$$.fragment),kbr=l(),nc=a("p"),Sbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZQ=a("a"),Rbr=o("from_pretrained()"),Bbr=o(" class method or the "),eH=a("a"),Pbr=o("from_config()"),Ibr=o(` class
method.`),qbr=l(),w8=a("p"),Nbr=o("This class cannot be instantiated directly using "),$ve=a("code"),jbr=o("__init__()"),Dbr=o(" (throws an error)."),Gbr=l(),Rt=a("div"),F(A8.$$.fragment),Obr=l(),kve=a("p"),Vbr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Xbr=l(),sc=a("p"),zbr=o(`Note:
Loading a model from its configuration file does `),Sve=a("strong"),Wbr=o("not"),Qbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=a("a"),Hbr=o("from_pretrained()"),Ubr=o(" to load the model weights."),Jbr=l(),F(d4.$$.fragment),Ybr=l(),kr=a("div"),F(y8.$$.fragment),Kbr=l(),Rve=a("p"),Zbr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),evr=l(),nn=a("p"),ovr=o("The model class to instantiate is selected based on the "),Bve=a("code"),rvr=o("model_type"),tvr=o(` property of the config object (either
passed as an argument or loaded from `),Pve=a("code"),avr=o("pretrained_model_name_or_path"),nvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=a("code"),svr=o("pretrained_model_name_or_path"),lvr=o(":"),ivr=l(),ee=a("ul"),c4=a("li"),qve=a("strong"),dvr=o("albert"),cvr=o(" \u2014 "),rH=a("a"),fvr=o("TFAlbertForSequenceClassification"),mvr=o(" (ALBERT model)"),gvr=l(),f4=a("li"),Nve=a("strong"),hvr=o("bert"),pvr=o(" \u2014 "),tH=a("a"),_vr=o("TFBertForSequenceClassification"),uvr=o(" (BERT model)"),bvr=l(),m4=a("li"),jve=a("strong"),vvr=o("camembert"),Fvr=o(" \u2014 "),aH=a("a"),Tvr=o("TFCamembertForSequenceClassification"),Mvr=o(" (CamemBERT model)"),Evr=l(),g4=a("li"),Dve=a("strong"),Cvr=o("convbert"),wvr=o(" \u2014 "),nH=a("a"),Avr=o("TFConvBertForSequenceClassification"),yvr=o(" (ConvBERT model)"),Lvr=l(),h4=a("li"),Gve=a("strong"),xvr=o("ctrl"),$vr=o(" \u2014 "),sH=a("a"),kvr=o("TFCTRLForSequenceClassification"),Svr=o(" (CTRL model)"),Rvr=l(),p4=a("li"),Ove=a("strong"),Bvr=o("deberta"),Pvr=o(" \u2014 "),lH=a("a"),Ivr=o("TFDebertaForSequenceClassification"),qvr=o(" (DeBERTa model)"),Nvr=l(),_4=a("li"),Vve=a("strong"),jvr=o("deberta-v2"),Dvr=o(" \u2014 "),iH=a("a"),Gvr=o("TFDebertaV2ForSequenceClassification"),Ovr=o(" (DeBERTa-v2 model)"),Vvr=l(),u4=a("li"),Xve=a("strong"),Xvr=o("distilbert"),zvr=o(" \u2014 "),dH=a("a"),Wvr=o("TFDistilBertForSequenceClassification"),Qvr=o(" (DistilBERT model)"),Hvr=l(),b4=a("li"),zve=a("strong"),Uvr=o("electra"),Jvr=o(" \u2014 "),cH=a("a"),Yvr=o("TFElectraForSequenceClassification"),Kvr=o(" (ELECTRA model)"),Zvr=l(),v4=a("li"),Wve=a("strong"),eFr=o("flaubert"),oFr=o(" \u2014 "),fH=a("a"),rFr=o("TFFlaubertForSequenceClassification"),tFr=o(" (FlauBERT model)"),aFr=l(),F4=a("li"),Qve=a("strong"),nFr=o("funnel"),sFr=o(" \u2014 "),mH=a("a"),lFr=o("TFFunnelForSequenceClassification"),iFr=o(" (Funnel Transformer model)"),dFr=l(),T4=a("li"),Hve=a("strong"),cFr=o("gpt2"),fFr=o(" \u2014 "),gH=a("a"),mFr=o("TFGPT2ForSequenceClassification"),gFr=o(" (OpenAI GPT-2 model)"),hFr=l(),M4=a("li"),Uve=a("strong"),pFr=o("gptj"),_Fr=o(" \u2014 "),hH=a("a"),uFr=o("TFGPTJForSequenceClassification"),bFr=o(" (GPT-J model)"),vFr=l(),E4=a("li"),Jve=a("strong"),FFr=o("layoutlm"),TFr=o(" \u2014 "),pH=a("a"),MFr=o("TFLayoutLMForSequenceClassification"),EFr=o(" (LayoutLM model)"),CFr=l(),C4=a("li"),Yve=a("strong"),wFr=o("longformer"),AFr=o(" \u2014 "),_H=a("a"),yFr=o("TFLongformerForSequenceClassification"),LFr=o(" (Longformer model)"),xFr=l(),w4=a("li"),Kve=a("strong"),$Fr=o("mobilebert"),kFr=o(" \u2014 "),uH=a("a"),SFr=o("TFMobileBertForSequenceClassification"),RFr=o(" (MobileBERT model)"),BFr=l(),A4=a("li"),Zve=a("strong"),PFr=o("mpnet"),IFr=o(" \u2014 "),bH=a("a"),qFr=o("TFMPNetForSequenceClassification"),NFr=o(" (MPNet model)"),jFr=l(),y4=a("li"),eFe=a("strong"),DFr=o("openai-gpt"),GFr=o(" \u2014 "),vH=a("a"),OFr=o("TFOpenAIGPTForSequenceClassification"),VFr=o(" (OpenAI GPT model)"),XFr=l(),L4=a("li"),oFe=a("strong"),zFr=o("rembert"),WFr=o(" \u2014 "),FH=a("a"),QFr=o("TFRemBertForSequenceClassification"),HFr=o(" (RemBERT model)"),UFr=l(),x4=a("li"),rFe=a("strong"),JFr=o("roberta"),YFr=o(" \u2014 "),TH=a("a"),KFr=o("TFRobertaForSequenceClassification"),ZFr=o(" (RoBERTa model)"),e0r=l(),$4=a("li"),tFe=a("strong"),o0r=o("roformer"),r0r=o(" \u2014 "),MH=a("a"),t0r=o("TFRoFormerForSequenceClassification"),a0r=o(" (RoFormer model)"),n0r=l(),k4=a("li"),aFe=a("strong"),s0r=o("tapas"),l0r=o(" \u2014 "),EH=a("a"),i0r=o("TFTapasForSequenceClassification"),d0r=o(" (TAPAS model)"),c0r=l(),S4=a("li"),nFe=a("strong"),f0r=o("transfo-xl"),m0r=o(" \u2014 "),CH=a("a"),g0r=o("TFTransfoXLForSequenceClassification"),h0r=o(" (Transformer-XL model)"),p0r=l(),R4=a("li"),sFe=a("strong"),_0r=o("xlm"),u0r=o(" \u2014 "),wH=a("a"),b0r=o("TFXLMForSequenceClassification"),v0r=o(" (XLM model)"),F0r=l(),B4=a("li"),lFe=a("strong"),T0r=o("xlm-roberta"),M0r=o(" \u2014 "),AH=a("a"),E0r=o("TFXLMRobertaForSequenceClassification"),C0r=o(" (XLM-RoBERTa model)"),w0r=l(),P4=a("li"),iFe=a("strong"),A0r=o("xlnet"),y0r=o(" \u2014 "),yH=a("a"),L0r=o("TFXLNetForSequenceClassification"),x0r=o(" (XLNet model)"),$0r=l(),F(I4.$$.fragment),cNe=l(),lc=a("h2"),q4=a("a"),dFe=a("span"),F(L8.$$.fragment),k0r=l(),cFe=a("span"),S0r=o("TFAutoModelForMultipleChoice"),fNe=l(),ar=a("div"),F(x8.$$.fragment),R0r=l(),ic=a("p"),B0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LH=a("a"),P0r=o("from_pretrained()"),I0r=o(" class method or the "),xH=a("a"),q0r=o("from_config()"),N0r=o(` class
method.`),j0r=l(),$8=a("p"),D0r=o("This class cannot be instantiated directly using "),fFe=a("code"),G0r=o("__init__()"),O0r=o(" (throws an error)."),V0r=l(),Bt=a("div"),F(k8.$$.fragment),X0r=l(),mFe=a("p"),z0r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),W0r=l(),dc=a("p"),Q0r=o(`Note:
Loading a model from its configuration file does `),gFe=a("strong"),H0r=o("not"),U0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),J0r=o("from_pretrained()"),Y0r=o(" to load the model weights."),K0r=l(),F(N4.$$.fragment),Z0r=l(),Sr=a("div"),F(S8.$$.fragment),eTr=l(),hFe=a("p"),oTr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rTr=l(),sn=a("p"),tTr=o("The model class to instantiate is selected based on the "),pFe=a("code"),aTr=o("model_type"),nTr=o(` property of the config object (either
passed as an argument or loaded from `),_Fe=a("code"),sTr=o("pretrained_model_name_or_path"),lTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=a("code"),iTr=o("pretrained_model_name_or_path"),dTr=o(":"),cTr=l(),he=a("ul"),j4=a("li"),bFe=a("strong"),fTr=o("albert"),mTr=o(" \u2014 "),kH=a("a"),gTr=o("TFAlbertForMultipleChoice"),hTr=o(" (ALBERT model)"),pTr=l(),D4=a("li"),vFe=a("strong"),_Tr=o("bert"),uTr=o(" \u2014 "),SH=a("a"),bTr=o("TFBertForMultipleChoice"),vTr=o(" (BERT model)"),FTr=l(),G4=a("li"),FFe=a("strong"),TTr=o("camembert"),MTr=o(" \u2014 "),RH=a("a"),ETr=o("TFCamembertForMultipleChoice"),CTr=o(" (CamemBERT model)"),wTr=l(),O4=a("li"),TFe=a("strong"),ATr=o("convbert"),yTr=o(" \u2014 "),BH=a("a"),LTr=o("TFConvBertForMultipleChoice"),xTr=o(" (ConvBERT model)"),$Tr=l(),V4=a("li"),MFe=a("strong"),kTr=o("distilbert"),STr=o(" \u2014 "),PH=a("a"),RTr=o("TFDistilBertForMultipleChoice"),BTr=o(" (DistilBERT model)"),PTr=l(),X4=a("li"),EFe=a("strong"),ITr=o("electra"),qTr=o(" \u2014 "),IH=a("a"),NTr=o("TFElectraForMultipleChoice"),jTr=o(" (ELECTRA model)"),DTr=l(),z4=a("li"),CFe=a("strong"),GTr=o("flaubert"),OTr=o(" \u2014 "),qH=a("a"),VTr=o("TFFlaubertForMultipleChoice"),XTr=o(" (FlauBERT model)"),zTr=l(),W4=a("li"),wFe=a("strong"),WTr=o("funnel"),QTr=o(" \u2014 "),NH=a("a"),HTr=o("TFFunnelForMultipleChoice"),UTr=o(" (Funnel Transformer model)"),JTr=l(),Q4=a("li"),AFe=a("strong"),YTr=o("longformer"),KTr=o(" \u2014 "),jH=a("a"),ZTr=o("TFLongformerForMultipleChoice"),e7r=o(" (Longformer model)"),o7r=l(),H4=a("li"),yFe=a("strong"),r7r=o("mobilebert"),t7r=o(" \u2014 "),DH=a("a"),a7r=o("TFMobileBertForMultipleChoice"),n7r=o(" (MobileBERT model)"),s7r=l(),U4=a("li"),LFe=a("strong"),l7r=o("mpnet"),i7r=o(" \u2014 "),GH=a("a"),d7r=o("TFMPNetForMultipleChoice"),c7r=o(" (MPNet model)"),f7r=l(),J4=a("li"),xFe=a("strong"),m7r=o("rembert"),g7r=o(" \u2014 "),OH=a("a"),h7r=o("TFRemBertForMultipleChoice"),p7r=o(" (RemBERT model)"),_7r=l(),Y4=a("li"),$Fe=a("strong"),u7r=o("roberta"),b7r=o(" \u2014 "),VH=a("a"),v7r=o("TFRobertaForMultipleChoice"),F7r=o(" (RoBERTa model)"),T7r=l(),K4=a("li"),kFe=a("strong"),M7r=o("roformer"),E7r=o(" \u2014 "),XH=a("a"),C7r=o("TFRoFormerForMultipleChoice"),w7r=o(" (RoFormer model)"),A7r=l(),Z4=a("li"),SFe=a("strong"),y7r=o("xlm"),L7r=o(" \u2014 "),zH=a("a"),x7r=o("TFXLMForMultipleChoice"),$7r=o(" (XLM model)"),k7r=l(),eE=a("li"),RFe=a("strong"),S7r=o("xlm-roberta"),R7r=o(" \u2014 "),WH=a("a"),B7r=o("TFXLMRobertaForMultipleChoice"),P7r=o(" (XLM-RoBERTa model)"),I7r=l(),oE=a("li"),BFe=a("strong"),q7r=o("xlnet"),N7r=o(" \u2014 "),QH=a("a"),j7r=o("TFXLNetForMultipleChoice"),D7r=o(" (XLNet model)"),G7r=l(),F(rE.$$.fragment),mNe=l(),cc=a("h2"),tE=a("a"),PFe=a("span"),F(R8.$$.fragment),O7r=l(),IFe=a("span"),V7r=o("TFAutoModelForNextSentencePrediction"),gNe=l(),nr=a("div"),F(B8.$$.fragment),X7r=l(),fc=a("p"),z7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HH=a("a"),W7r=o("from_pretrained()"),Q7r=o(" class method or the "),UH=a("a"),H7r=o("from_config()"),U7r=o(` class
method.`),J7r=l(),P8=a("p"),Y7r=o("This class cannot be instantiated directly using "),qFe=a("code"),K7r=o("__init__()"),Z7r=o(" (throws an error)."),eMr=l(),Pt=a("div"),F(I8.$$.fragment),oMr=l(),NFe=a("p"),rMr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tMr=l(),mc=a("p"),aMr=o(`Note:
Loading a model from its configuration file does `),jFe=a("strong"),nMr=o("not"),sMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=a("a"),lMr=o("from_pretrained()"),iMr=o(" to load the model weights."),dMr=l(),F(aE.$$.fragment),cMr=l(),Rr=a("div"),F(q8.$$.fragment),fMr=l(),DFe=a("p"),mMr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gMr=l(),ln=a("p"),hMr=o("The model class to instantiate is selected based on the "),GFe=a("code"),pMr=o("model_type"),_Mr=o(` property of the config object (either
passed as an argument or loaded from `),OFe=a("code"),uMr=o("pretrained_model_name_or_path"),bMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=a("code"),vMr=o("pretrained_model_name_or_path"),FMr=o(":"),TMr=l(),N8=a("ul"),nE=a("li"),XFe=a("strong"),MMr=o("bert"),EMr=o(" \u2014 "),YH=a("a"),CMr=o("TFBertForNextSentencePrediction"),wMr=o(" (BERT model)"),AMr=l(),sE=a("li"),zFe=a("strong"),yMr=o("mobilebert"),LMr=o(" \u2014 "),KH=a("a"),xMr=o("TFMobileBertForNextSentencePrediction"),$Mr=o(" (MobileBERT model)"),kMr=l(),F(lE.$$.fragment),hNe=l(),gc=a("h2"),iE=a("a"),WFe=a("span"),F(j8.$$.fragment),SMr=l(),QFe=a("span"),RMr=o("TFAutoModelForTableQuestionAnswering"),pNe=l(),sr=a("div"),F(D8.$$.fragment),BMr=l(),hc=a("p"),PMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ZH=a("a"),IMr=o("from_pretrained()"),qMr=o(" class method or the "),eU=a("a"),NMr=o("from_config()"),jMr=o(` class
method.`),DMr=l(),G8=a("p"),GMr=o("This class cannot be instantiated directly using "),HFe=a("code"),OMr=o("__init__()"),VMr=o(" (throws an error)."),XMr=l(),It=a("div"),F(O8.$$.fragment),zMr=l(),UFe=a("p"),WMr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),QMr=l(),pc=a("p"),HMr=o(`Note:
Loading a model from its configuration file does `),JFe=a("strong"),UMr=o("not"),JMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),YMr=o("from_pretrained()"),KMr=o(" to load the model weights."),ZMr=l(),F(dE.$$.fragment),e4r=l(),Br=a("div"),F(V8.$$.fragment),o4r=l(),YFe=a("p"),r4r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),t4r=l(),dn=a("p"),a4r=o("The model class to instantiate is selected based on the "),KFe=a("code"),n4r=o("model_type"),s4r=o(` property of the config object (either
passed as an argument or loaded from `),ZFe=a("code"),l4r=o("pretrained_model_name_or_path"),i4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e0e=a("code"),d4r=o("pretrained_model_name_or_path"),c4r=o(":"),f4r=l(),o0e=a("ul"),cE=a("li"),r0e=a("strong"),m4r=o("tapas"),g4r=o(" \u2014 "),rU=a("a"),h4r=o("TFTapasForQuestionAnswering"),p4r=o(" (TAPAS model)"),_4r=l(),F(fE.$$.fragment),_Ne=l(),_c=a("h2"),mE=a("a"),t0e=a("span"),F(X8.$$.fragment),u4r=l(),a0e=a("span"),b4r=o("TFAutoModelForTokenClassification"),uNe=l(),lr=a("div"),F(z8.$$.fragment),v4r=l(),uc=a("p"),F4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tU=a("a"),T4r=o("from_pretrained()"),M4r=o(" class method or the "),aU=a("a"),E4r=o("from_config()"),C4r=o(` class
method.`),w4r=l(),W8=a("p"),A4r=o("This class cannot be instantiated directly using "),n0e=a("code"),y4r=o("__init__()"),L4r=o(" (throws an error)."),x4r=l(),qt=a("div"),F(Q8.$$.fragment),$4r=l(),s0e=a("p"),k4r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),S4r=l(),bc=a("p"),R4r=o(`Note:
Loading a model from its configuration file does `),l0e=a("strong"),B4r=o("not"),P4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),I4r=o("from_pretrained()"),q4r=o(" to load the model weights."),N4r=l(),F(gE.$$.fragment),j4r=l(),Pr=a("div"),F(H8.$$.fragment),D4r=l(),i0e=a("p"),G4r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),O4r=l(),cn=a("p"),V4r=o("The model class to instantiate is selected based on the "),d0e=a("code"),X4r=o("model_type"),z4r=o(` property of the config object (either
passed as an argument or loaded from `),c0e=a("code"),W4r=o("pretrained_model_name_or_path"),Q4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f0e=a("code"),H4r=o("pretrained_model_name_or_path"),U4r=o(":"),J4r=l(),de=a("ul"),hE=a("li"),m0e=a("strong"),Y4r=o("albert"),K4r=o(" \u2014 "),sU=a("a"),Z4r=o("TFAlbertForTokenClassification"),eEr=o(" (ALBERT model)"),oEr=l(),pE=a("li"),g0e=a("strong"),rEr=o("bert"),tEr=o(" \u2014 "),lU=a("a"),aEr=o("TFBertForTokenClassification"),nEr=o(" (BERT model)"),sEr=l(),_E=a("li"),h0e=a("strong"),lEr=o("camembert"),iEr=o(" \u2014 "),iU=a("a"),dEr=o("TFCamembertForTokenClassification"),cEr=o(" (CamemBERT model)"),fEr=l(),uE=a("li"),p0e=a("strong"),mEr=o("convbert"),gEr=o(" \u2014 "),dU=a("a"),hEr=o("TFConvBertForTokenClassification"),pEr=o(" (ConvBERT model)"),_Er=l(),bE=a("li"),_0e=a("strong"),uEr=o("deberta"),bEr=o(" \u2014 "),cU=a("a"),vEr=o("TFDebertaForTokenClassification"),FEr=o(" (DeBERTa model)"),TEr=l(),vE=a("li"),u0e=a("strong"),MEr=o("deberta-v2"),EEr=o(" \u2014 "),fU=a("a"),CEr=o("TFDebertaV2ForTokenClassification"),wEr=o(" (DeBERTa-v2 model)"),AEr=l(),FE=a("li"),b0e=a("strong"),yEr=o("distilbert"),LEr=o(" \u2014 "),mU=a("a"),xEr=o("TFDistilBertForTokenClassification"),$Er=o(" (DistilBERT model)"),kEr=l(),TE=a("li"),v0e=a("strong"),SEr=o("electra"),REr=o(" \u2014 "),gU=a("a"),BEr=o("TFElectraForTokenClassification"),PEr=o(" (ELECTRA model)"),IEr=l(),ME=a("li"),F0e=a("strong"),qEr=o("flaubert"),NEr=o(" \u2014 "),hU=a("a"),jEr=o("TFFlaubertForTokenClassification"),DEr=o(" (FlauBERT model)"),GEr=l(),EE=a("li"),T0e=a("strong"),OEr=o("funnel"),VEr=o(" \u2014 "),pU=a("a"),XEr=o("TFFunnelForTokenClassification"),zEr=o(" (Funnel Transformer model)"),WEr=l(),CE=a("li"),M0e=a("strong"),QEr=o("layoutlm"),HEr=o(" \u2014 "),_U=a("a"),UEr=o("TFLayoutLMForTokenClassification"),JEr=o(" (LayoutLM model)"),YEr=l(),wE=a("li"),E0e=a("strong"),KEr=o("longformer"),ZEr=o(" \u2014 "),uU=a("a"),eCr=o("TFLongformerForTokenClassification"),oCr=o(" (Longformer model)"),rCr=l(),AE=a("li"),C0e=a("strong"),tCr=o("mobilebert"),aCr=o(" \u2014 "),bU=a("a"),nCr=o("TFMobileBertForTokenClassification"),sCr=o(" (MobileBERT model)"),lCr=l(),yE=a("li"),w0e=a("strong"),iCr=o("mpnet"),dCr=o(" \u2014 "),vU=a("a"),cCr=o("TFMPNetForTokenClassification"),fCr=o(" (MPNet model)"),mCr=l(),LE=a("li"),A0e=a("strong"),gCr=o("rembert"),hCr=o(" \u2014 "),FU=a("a"),pCr=o("TFRemBertForTokenClassification"),_Cr=o(" (RemBERT model)"),uCr=l(),xE=a("li"),y0e=a("strong"),bCr=o("roberta"),vCr=o(" \u2014 "),TU=a("a"),FCr=o("TFRobertaForTokenClassification"),TCr=o(" (RoBERTa model)"),MCr=l(),$E=a("li"),L0e=a("strong"),ECr=o("roformer"),CCr=o(" \u2014 "),MU=a("a"),wCr=o("TFRoFormerForTokenClassification"),ACr=o(" (RoFormer model)"),yCr=l(),kE=a("li"),x0e=a("strong"),LCr=o("xlm"),xCr=o(" \u2014 "),EU=a("a"),$Cr=o("TFXLMForTokenClassification"),kCr=o(" (XLM model)"),SCr=l(),SE=a("li"),$0e=a("strong"),RCr=o("xlm-roberta"),BCr=o(" \u2014 "),CU=a("a"),PCr=o("TFXLMRobertaForTokenClassification"),ICr=o(" (XLM-RoBERTa model)"),qCr=l(),RE=a("li"),k0e=a("strong"),NCr=o("xlnet"),jCr=o(" \u2014 "),wU=a("a"),DCr=o("TFXLNetForTokenClassification"),GCr=o(" (XLNet model)"),OCr=l(),F(BE.$$.fragment),bNe=l(),vc=a("h2"),PE=a("a"),S0e=a("span"),F(U8.$$.fragment),VCr=l(),R0e=a("span"),XCr=o("TFAutoModelForQuestionAnswering"),vNe=l(),ir=a("div"),F(J8.$$.fragment),zCr=l(),Fc=a("p"),WCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AU=a("a"),QCr=o("from_pretrained()"),HCr=o(" class method or the "),yU=a("a"),UCr=o("from_config()"),JCr=o(` class
method.`),YCr=l(),Y8=a("p"),KCr=o("This class cannot be instantiated directly using "),B0e=a("code"),ZCr=o("__init__()"),e5r=o(" (throws an error)."),o5r=l(),Nt=a("div"),F(K8.$$.fragment),r5r=l(),P0e=a("p"),t5r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),a5r=l(),Tc=a("p"),n5r=o(`Note:
Loading a model from its configuration file does `),I0e=a("strong"),s5r=o("not"),l5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=a("a"),i5r=o("from_pretrained()"),d5r=o(" to load the model weights."),c5r=l(),F(IE.$$.fragment),f5r=l(),Ir=a("div"),F(Z8.$$.fragment),m5r=l(),q0e=a("p"),g5r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),h5r=l(),fn=a("p"),p5r=o("The model class to instantiate is selected based on the "),N0e=a("code"),_5r=o("model_type"),u5r=o(` property of the config object (either
passed as an argument or loaded from `),j0e=a("code"),b5r=o("pretrained_model_name_or_path"),v5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D0e=a("code"),F5r=o("pretrained_model_name_or_path"),T5r=o(":"),M5r=l(),ce=a("ul"),qE=a("li"),G0e=a("strong"),E5r=o("albert"),C5r=o(" \u2014 "),xU=a("a"),w5r=o("TFAlbertForQuestionAnswering"),A5r=o(" (ALBERT model)"),y5r=l(),NE=a("li"),O0e=a("strong"),L5r=o("bert"),x5r=o(" \u2014 "),$U=a("a"),$5r=o("TFBertForQuestionAnswering"),k5r=o(" (BERT model)"),S5r=l(),jE=a("li"),V0e=a("strong"),R5r=o("camembert"),B5r=o(" \u2014 "),kU=a("a"),P5r=o("TFCamembertForQuestionAnswering"),I5r=o(" (CamemBERT model)"),q5r=l(),DE=a("li"),X0e=a("strong"),N5r=o("convbert"),j5r=o(" \u2014 "),SU=a("a"),D5r=o("TFConvBertForQuestionAnswering"),G5r=o(" (ConvBERT model)"),O5r=l(),GE=a("li"),z0e=a("strong"),V5r=o("deberta"),X5r=o(" \u2014 "),RU=a("a"),z5r=o("TFDebertaForQuestionAnswering"),W5r=o(" (DeBERTa model)"),Q5r=l(),OE=a("li"),W0e=a("strong"),H5r=o("deberta-v2"),U5r=o(" \u2014 "),BU=a("a"),J5r=o("TFDebertaV2ForQuestionAnswering"),Y5r=o(" (DeBERTa-v2 model)"),K5r=l(),VE=a("li"),Q0e=a("strong"),Z5r=o("distilbert"),e3r=o(" \u2014 "),PU=a("a"),o3r=o("TFDistilBertForQuestionAnswering"),r3r=o(" (DistilBERT model)"),t3r=l(),XE=a("li"),H0e=a("strong"),a3r=o("electra"),n3r=o(" \u2014 "),IU=a("a"),s3r=o("TFElectraForQuestionAnswering"),l3r=o(" (ELECTRA model)"),i3r=l(),zE=a("li"),U0e=a("strong"),d3r=o("flaubert"),c3r=o(" \u2014 "),qU=a("a"),f3r=o("TFFlaubertForQuestionAnsweringSimple"),m3r=o(" (FlauBERT model)"),g3r=l(),WE=a("li"),J0e=a("strong"),h3r=o("funnel"),p3r=o(" \u2014 "),NU=a("a"),_3r=o("TFFunnelForQuestionAnswering"),u3r=o(" (Funnel Transformer model)"),b3r=l(),QE=a("li"),Y0e=a("strong"),v3r=o("gptj"),F3r=o(" \u2014 "),jU=a("a"),T3r=o("TFGPTJForQuestionAnswering"),M3r=o(" (GPT-J model)"),E3r=l(),HE=a("li"),K0e=a("strong"),C3r=o("longformer"),w3r=o(" \u2014 "),DU=a("a"),A3r=o("TFLongformerForQuestionAnswering"),y3r=o(" (Longformer model)"),L3r=l(),UE=a("li"),Z0e=a("strong"),x3r=o("mobilebert"),$3r=o(" \u2014 "),GU=a("a"),k3r=o("TFMobileBertForQuestionAnswering"),S3r=o(" (MobileBERT model)"),R3r=l(),JE=a("li"),eTe=a("strong"),B3r=o("mpnet"),P3r=o(" \u2014 "),OU=a("a"),I3r=o("TFMPNetForQuestionAnswering"),q3r=o(" (MPNet model)"),N3r=l(),YE=a("li"),oTe=a("strong"),j3r=o("rembert"),D3r=o(" \u2014 "),VU=a("a"),G3r=o("TFRemBertForQuestionAnswering"),O3r=o(" (RemBERT model)"),V3r=l(),KE=a("li"),rTe=a("strong"),X3r=o("roberta"),z3r=o(" \u2014 "),XU=a("a"),W3r=o("TFRobertaForQuestionAnswering"),Q3r=o(" (RoBERTa model)"),H3r=l(),ZE=a("li"),tTe=a("strong"),U3r=o("roformer"),J3r=o(" \u2014 "),zU=a("a"),Y3r=o("TFRoFormerForQuestionAnswering"),K3r=o(" (RoFormer model)"),Z3r=l(),eC=a("li"),aTe=a("strong"),ewr=o("xlm"),owr=o(" \u2014 "),WU=a("a"),rwr=o("TFXLMForQuestionAnsweringSimple"),twr=o(" (XLM model)"),awr=l(),oC=a("li"),nTe=a("strong"),nwr=o("xlm-roberta"),swr=o(" \u2014 "),QU=a("a"),lwr=o("TFXLMRobertaForQuestionAnswering"),iwr=o(" (XLM-RoBERTa model)"),dwr=l(),rC=a("li"),sTe=a("strong"),cwr=o("xlnet"),fwr=o(" \u2014 "),HU=a("a"),mwr=o("TFXLNetForQuestionAnsweringSimple"),gwr=o(" (XLNet model)"),hwr=l(),F(tC.$$.fragment),FNe=l(),Mc=a("h2"),aC=a("a"),lTe=a("span"),F(e9.$$.fragment),pwr=l(),iTe=a("span"),_wr=o("TFAutoModelForVision2Seq"),TNe=l(),dr=a("div"),F(o9.$$.fragment),uwr=l(),Ec=a("p"),bwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),UU=a("a"),vwr=o("from_pretrained()"),Fwr=o(" class method or the "),JU=a("a"),Twr=o("from_config()"),Mwr=o(` class
method.`),Ewr=l(),r9=a("p"),Cwr=o("This class cannot be instantiated directly using "),dTe=a("code"),wwr=o("__init__()"),Awr=o(" (throws an error)."),ywr=l(),jt=a("div"),F(t9.$$.fragment),Lwr=l(),cTe=a("p"),xwr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$wr=l(),Cc=a("p"),kwr=o(`Note:
Loading a model from its configuration file does `),fTe=a("strong"),Swr=o("not"),Rwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),Bwr=o("from_pretrained()"),Pwr=o(" to load the model weights."),Iwr=l(),F(nC.$$.fragment),qwr=l(),qr=a("div"),F(a9.$$.fragment),Nwr=l(),mTe=a("p"),jwr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Dwr=l(),mn=a("p"),Gwr=o("The model class to instantiate is selected based on the "),gTe=a("code"),Owr=o("model_type"),Vwr=o(` property of the config object (either
passed as an argument or loaded from `),hTe=a("code"),Xwr=o("pretrained_model_name_or_path"),zwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pTe=a("code"),Wwr=o("pretrained_model_name_or_path"),Qwr=o(":"),Hwr=l(),_Te=a("ul"),sC=a("li"),uTe=a("strong"),Uwr=o("vision-encoder-decoder"),Jwr=o(" \u2014 "),KU=a("a"),Ywr=o("TFVisionEncoderDecoderModel"),Kwr=o(" (Vision Encoder decoder model)"),Zwr=l(),F(lC.$$.fragment),MNe=l(),wc=a("h2"),iC=a("a"),bTe=a("span"),F(n9.$$.fragment),eAr=l(),vTe=a("span"),oAr=o("TFAutoModelForSpeechSeq2Seq"),ENe=l(),cr=a("div"),F(s9.$$.fragment),rAr=l(),Ac=a("p"),tAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZU=a("a"),aAr=o("from_pretrained()"),nAr=o(" class method or the "),eJ=a("a"),sAr=o("from_config()"),lAr=o(` class
method.`),iAr=l(),l9=a("p"),dAr=o("This class cannot be instantiated directly using "),FTe=a("code"),cAr=o("__init__()"),fAr=o(" (throws an error)."),mAr=l(),Dt=a("div"),F(i9.$$.fragment),gAr=l(),TTe=a("p"),hAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),pAr=l(),yc=a("p"),_Ar=o(`Note:
Loading a model from its configuration file does `),MTe=a("strong"),uAr=o("not"),bAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=a("a"),vAr=o("from_pretrained()"),FAr=o(" to load the model weights."),TAr=l(),F(dC.$$.fragment),MAr=l(),Nr=a("div"),F(d9.$$.fragment),EAr=l(),ETe=a("p"),CAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),wAr=l(),gn=a("p"),AAr=o("The model class to instantiate is selected based on the "),CTe=a("code"),yAr=o("model_type"),LAr=o(` property of the config object (either
passed as an argument or loaded from `),wTe=a("code"),xAr=o("pretrained_model_name_or_path"),$Ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ATe=a("code"),kAr=o("pretrained_model_name_or_path"),SAr=o(":"),RAr=l(),yTe=a("ul"),cC=a("li"),LTe=a("strong"),BAr=o("speech_to_text"),PAr=o(" \u2014 "),rJ=a("a"),IAr=o("TFSpeech2TextForConditionalGeneration"),qAr=o(" (Speech2Text model)"),NAr=l(),F(fC.$$.fragment),CNe=l(),Lc=a("h2"),mC=a("a"),xTe=a("span"),F(c9.$$.fragment),jAr=l(),$Te=a("span"),DAr=o("FlaxAutoModel"),wNe=l(),fr=a("div"),F(f9.$$.fragment),GAr=l(),xc=a("p"),OAr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tJ=a("a"),VAr=o("from_pretrained()"),XAr=o(" class method or the "),aJ=a("a"),zAr=o("from_config()"),WAr=o(` class
method.`),QAr=l(),m9=a("p"),HAr=o("This class cannot be instantiated directly using "),kTe=a("code"),UAr=o("__init__()"),JAr=o(" (throws an error)."),YAr=l(),Gt=a("div"),F(g9.$$.fragment),KAr=l(),STe=a("p"),ZAr=o("Instantiates one of the base model classes of the library from a configuration."),e6r=l(),$c=a("p"),o6r=o(`Note:
Loading a model from its configuration file does `),RTe=a("strong"),r6r=o("not"),t6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("a"),a6r=o("from_pretrained()"),n6r=o(" to load the model weights."),s6r=l(),F(gC.$$.fragment),l6r=l(),jr=a("div"),F(h9.$$.fragment),i6r=l(),BTe=a("p"),d6r=o("Instantiate one of the base model classes of the library from a pretrained model."),c6r=l(),hn=a("p"),f6r=o("The model class to instantiate is selected based on the "),PTe=a("code"),m6r=o("model_type"),g6r=o(` property of the config object (either
passed as an argument or loaded from `),ITe=a("code"),h6r=o("pretrained_model_name_or_path"),p6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=a("code"),_6r=o("pretrained_model_name_or_path"),u6r=o(":"),b6r=l(),re=a("ul"),hC=a("li"),NTe=a("strong"),v6r=o("albert"),F6r=o(" \u2014 "),sJ=a("a"),T6r=o("FlaxAlbertModel"),M6r=o(" (ALBERT model)"),E6r=l(),pC=a("li"),jTe=a("strong"),C6r=o("bart"),w6r=o(" \u2014 "),lJ=a("a"),A6r=o("FlaxBartModel"),y6r=o(" (BART model)"),L6r=l(),_C=a("li"),DTe=a("strong"),x6r=o("beit"),$6r=o(" \u2014 "),iJ=a("a"),k6r=o("FlaxBeitModel"),S6r=o(" (BEiT model)"),R6r=l(),uC=a("li"),GTe=a("strong"),B6r=o("bert"),P6r=o(" \u2014 "),dJ=a("a"),I6r=o("FlaxBertModel"),q6r=o(" (BERT model)"),N6r=l(),bC=a("li"),OTe=a("strong"),j6r=o("big_bird"),D6r=o(" \u2014 "),cJ=a("a"),G6r=o("FlaxBigBirdModel"),O6r=o(" (BigBird model)"),V6r=l(),vC=a("li"),VTe=a("strong"),X6r=o("blenderbot"),z6r=o(" \u2014 "),fJ=a("a"),W6r=o("FlaxBlenderbotModel"),Q6r=o(" (Blenderbot model)"),H6r=l(),FC=a("li"),XTe=a("strong"),U6r=o("blenderbot-small"),J6r=o(" \u2014 "),mJ=a("a"),Y6r=o("FlaxBlenderbotSmallModel"),K6r=o(" (BlenderbotSmall model)"),Z6r=l(),TC=a("li"),zTe=a("strong"),eyr=o("clip"),oyr=o(" \u2014 "),gJ=a("a"),ryr=o("FlaxCLIPModel"),tyr=o(" (CLIP model)"),ayr=l(),MC=a("li"),WTe=a("strong"),nyr=o("distilbert"),syr=o(" \u2014 "),hJ=a("a"),lyr=o("FlaxDistilBertModel"),iyr=o(" (DistilBERT model)"),dyr=l(),EC=a("li"),QTe=a("strong"),cyr=o("electra"),fyr=o(" \u2014 "),pJ=a("a"),myr=o("FlaxElectraModel"),gyr=o(" (ELECTRA model)"),hyr=l(),CC=a("li"),HTe=a("strong"),pyr=o("gpt2"),_yr=o(" \u2014 "),_J=a("a"),uyr=o("FlaxGPT2Model"),byr=o(" (OpenAI GPT-2 model)"),vyr=l(),wC=a("li"),UTe=a("strong"),Fyr=o("gpt_neo"),Tyr=o(" \u2014 "),uJ=a("a"),Myr=o("FlaxGPTNeoModel"),Eyr=o(" (GPT Neo model)"),Cyr=l(),AC=a("li"),JTe=a("strong"),wyr=o("gptj"),Ayr=o(" \u2014 "),bJ=a("a"),yyr=o("FlaxGPTJModel"),Lyr=o(" (GPT-J model)"),xyr=l(),yC=a("li"),YTe=a("strong"),$yr=o("marian"),kyr=o(" \u2014 "),vJ=a("a"),Syr=o("FlaxMarianModel"),Ryr=o(" (Marian model)"),Byr=l(),LC=a("li"),KTe=a("strong"),Pyr=o("mbart"),Iyr=o(" \u2014 "),FJ=a("a"),qyr=o("FlaxMBartModel"),Nyr=o(" (mBART model)"),jyr=l(),xC=a("li"),ZTe=a("strong"),Dyr=o("mt5"),Gyr=o(" \u2014 "),TJ=a("a"),Oyr=o("FlaxMT5Model"),Vyr=o(" (mT5 model)"),Xyr=l(),$C=a("li"),e7e=a("strong"),zyr=o("pegasus"),Wyr=o(" \u2014 "),MJ=a("a"),Qyr=o("FlaxPegasusModel"),Hyr=o(" (Pegasus model)"),Uyr=l(),kC=a("li"),o7e=a("strong"),Jyr=o("roberta"),Yyr=o(" \u2014 "),EJ=a("a"),Kyr=o("FlaxRobertaModel"),Zyr=o(" (RoBERTa model)"),eLr=l(),SC=a("li"),r7e=a("strong"),oLr=o("roformer"),rLr=o(" \u2014 "),CJ=a("a"),tLr=o("FlaxRoFormerModel"),aLr=o(" (RoFormer model)"),nLr=l(),RC=a("li"),t7e=a("strong"),sLr=o("t5"),lLr=o(" \u2014 "),wJ=a("a"),iLr=o("FlaxT5Model"),dLr=o(" (T5 model)"),cLr=l(),BC=a("li"),a7e=a("strong"),fLr=o("vision-text-dual-encoder"),mLr=o(" \u2014 "),AJ=a("a"),gLr=o("FlaxVisionTextDualEncoderModel"),hLr=o(" (VisionTextDualEncoder model)"),pLr=l(),PC=a("li"),n7e=a("strong"),_Lr=o("vit"),uLr=o(" \u2014 "),yJ=a("a"),bLr=o("FlaxViTModel"),vLr=o(" (ViT model)"),FLr=l(),IC=a("li"),s7e=a("strong"),TLr=o("wav2vec2"),MLr=o(" \u2014 "),LJ=a("a"),ELr=o("FlaxWav2Vec2Model"),CLr=o(" (Wav2Vec2 model)"),wLr=l(),qC=a("li"),l7e=a("strong"),ALr=o("xglm"),yLr=o(" \u2014 "),xJ=a("a"),LLr=o("FlaxXGLMModel"),xLr=o(" (XGLM model)"),$Lr=l(),NC=a("li"),i7e=a("strong"),kLr=o("xlm-roberta"),SLr=o(" \u2014 "),$J=a("a"),RLr=o("FlaxXLMRobertaModel"),BLr=o(" (XLM-RoBERTa model)"),PLr=l(),F(jC.$$.fragment),ANe=l(),kc=a("h2"),DC=a("a"),d7e=a("span"),F(p9.$$.fragment),ILr=l(),c7e=a("span"),qLr=o("FlaxAutoModelForCausalLM"),yNe=l(),mr=a("div"),F(_9.$$.fragment),NLr=l(),Sc=a("p"),jLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kJ=a("a"),DLr=o("from_pretrained()"),GLr=o(" class method or the "),SJ=a("a"),OLr=o("from_config()"),VLr=o(` class
method.`),XLr=l(),u9=a("p"),zLr=o("This class cannot be instantiated directly using "),f7e=a("code"),WLr=o("__init__()"),QLr=o(" (throws an error)."),HLr=l(),Ot=a("div"),F(b9.$$.fragment),ULr=l(),m7e=a("p"),JLr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),YLr=l(),Rc=a("p"),KLr=o(`Note:
Loading a model from its configuration file does `),g7e=a("strong"),ZLr=o("not"),e8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=a("a"),o8r=o("from_pretrained()"),r8r=o(" to load the model weights."),t8r=l(),F(GC.$$.fragment),a8r=l(),Dr=a("div"),F(v9.$$.fragment),n8r=l(),h7e=a("p"),s8r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),l8r=l(),pn=a("p"),i8r=o("The model class to instantiate is selected based on the "),p7e=a("code"),d8r=o("model_type"),c8r=o(` property of the config object (either
passed as an argument or loaded from `),_7e=a("code"),f8r=o("pretrained_model_name_or_path"),m8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u7e=a("code"),g8r=o("pretrained_model_name_or_path"),h8r=o(":"),p8r=l(),Re=a("ul"),OC=a("li"),b7e=a("strong"),_8r=o("bart"),u8r=o(" \u2014 "),BJ=a("a"),b8r=o("FlaxBartForCausalLM"),v8r=o(" (BART model)"),F8r=l(),VC=a("li"),v7e=a("strong"),T8r=o("bert"),M8r=o(" \u2014 "),PJ=a("a"),E8r=o("FlaxBertForCausalLM"),C8r=o(" (BERT model)"),w8r=l(),XC=a("li"),F7e=a("strong"),A8r=o("big_bird"),y8r=o(" \u2014 "),IJ=a("a"),L8r=o("FlaxBigBirdForCausalLM"),x8r=o(" (BigBird model)"),$8r=l(),zC=a("li"),T7e=a("strong"),k8r=o("electra"),S8r=o(" \u2014 "),qJ=a("a"),R8r=o("FlaxElectraForCausalLM"),B8r=o(" (ELECTRA model)"),P8r=l(),WC=a("li"),M7e=a("strong"),I8r=o("gpt2"),q8r=o(" \u2014 "),NJ=a("a"),N8r=o("FlaxGPT2LMHeadModel"),j8r=o(" (OpenAI GPT-2 model)"),D8r=l(),QC=a("li"),E7e=a("strong"),G8r=o("gpt_neo"),O8r=o(" \u2014 "),jJ=a("a"),V8r=o("FlaxGPTNeoForCausalLM"),X8r=o(" (GPT Neo model)"),z8r=l(),HC=a("li"),C7e=a("strong"),W8r=o("gptj"),Q8r=o(" \u2014 "),DJ=a("a"),H8r=o("FlaxGPTJForCausalLM"),U8r=o(" (GPT-J model)"),J8r=l(),UC=a("li"),w7e=a("strong"),Y8r=o("roberta"),K8r=o(" \u2014 "),GJ=a("a"),Z8r=o("FlaxRobertaForCausalLM"),e9r=o(" (RoBERTa model)"),o9r=l(),JC=a("li"),A7e=a("strong"),r9r=o("xglm"),t9r=o(" \u2014 "),OJ=a("a"),a9r=o("FlaxXGLMForCausalLM"),n9r=o(" (XGLM model)"),s9r=l(),F(YC.$$.fragment),LNe=l(),Bc=a("h2"),KC=a("a"),y7e=a("span"),F(F9.$$.fragment),l9r=l(),L7e=a("span"),i9r=o("FlaxAutoModelForPreTraining"),xNe=l(),gr=a("div"),F(T9.$$.fragment),d9r=l(),Pc=a("p"),c9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),VJ=a("a"),f9r=o("from_pretrained()"),m9r=o(" class method or the "),XJ=a("a"),g9r=o("from_config()"),h9r=o(` class
method.`),p9r=l(),M9=a("p"),_9r=o("This class cannot be instantiated directly using "),x7e=a("code"),u9r=o("__init__()"),b9r=o(" (throws an error)."),v9r=l(),Vt=a("div"),F(E9.$$.fragment),F9r=l(),$7e=a("p"),T9r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),M9r=l(),Ic=a("p"),E9r=o(`Note:
Loading a model from its configuration file does `),k7e=a("strong"),C9r=o("not"),w9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),A9r=o("from_pretrained()"),y9r=o(" to load the model weights."),L9r=l(),F(ZC.$$.fragment),x9r=l(),Gr=a("div"),F(C9.$$.fragment),$9r=l(),S7e=a("p"),k9r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),S9r=l(),_n=a("p"),R9r=o("The model class to instantiate is selected based on the "),R7e=a("code"),B9r=o("model_type"),P9r=o(` property of the config object (either
passed as an argument or loaded from `),B7e=a("code"),I9r=o("pretrained_model_name_or_path"),q9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P7e=a("code"),N9r=o("pretrained_model_name_or_path"),j9r=o(":"),D9r=l(),Me=a("ul"),e5=a("li"),I7e=a("strong"),G9r=o("albert"),O9r=o(" \u2014 "),WJ=a("a"),V9r=o("FlaxAlbertForPreTraining"),X9r=o(" (ALBERT model)"),z9r=l(),o5=a("li"),q7e=a("strong"),W9r=o("bart"),Q9r=o(" \u2014 "),QJ=a("a"),H9r=o("FlaxBartForConditionalGeneration"),U9r=o(" (BART model)"),J9r=l(),r5=a("li"),N7e=a("strong"),Y9r=o("bert"),K9r=o(" \u2014 "),HJ=a("a"),Z9r=o("FlaxBertForPreTraining"),exr=o(" (BERT model)"),oxr=l(),t5=a("li"),j7e=a("strong"),rxr=o("big_bird"),txr=o(" \u2014 "),UJ=a("a"),axr=o("FlaxBigBirdForPreTraining"),nxr=o(" (BigBird model)"),sxr=l(),a5=a("li"),D7e=a("strong"),lxr=o("electra"),ixr=o(" \u2014 "),JJ=a("a"),dxr=o("FlaxElectraForPreTraining"),cxr=o(" (ELECTRA model)"),fxr=l(),n5=a("li"),G7e=a("strong"),mxr=o("mbart"),gxr=o(" \u2014 "),YJ=a("a"),hxr=o("FlaxMBartForConditionalGeneration"),pxr=o(" (mBART model)"),_xr=l(),s5=a("li"),O7e=a("strong"),uxr=o("mt5"),bxr=o(" \u2014 "),KJ=a("a"),vxr=o("FlaxMT5ForConditionalGeneration"),Fxr=o(" (mT5 model)"),Txr=l(),l5=a("li"),V7e=a("strong"),Mxr=o("roberta"),Exr=o(" \u2014 "),ZJ=a("a"),Cxr=o("FlaxRobertaForMaskedLM"),wxr=o(" (RoBERTa model)"),Axr=l(),i5=a("li"),X7e=a("strong"),yxr=o("roformer"),Lxr=o(" \u2014 "),eY=a("a"),xxr=o("FlaxRoFormerForMaskedLM"),$xr=o(" (RoFormer model)"),kxr=l(),d5=a("li"),z7e=a("strong"),Sxr=o("t5"),Rxr=o(" \u2014 "),oY=a("a"),Bxr=o("FlaxT5ForConditionalGeneration"),Pxr=o(" (T5 model)"),Ixr=l(),c5=a("li"),W7e=a("strong"),qxr=o("wav2vec2"),Nxr=o(" \u2014 "),rY=a("a"),jxr=o("FlaxWav2Vec2ForPreTraining"),Dxr=o(" (Wav2Vec2 model)"),Gxr=l(),f5=a("li"),Q7e=a("strong"),Oxr=o("xlm-roberta"),Vxr=o(" \u2014 "),tY=a("a"),Xxr=o("FlaxXLMRobertaForMaskedLM"),zxr=o(" (XLM-RoBERTa model)"),Wxr=l(),F(m5.$$.fragment),$Ne=l(),qc=a("h2"),g5=a("a"),H7e=a("span"),F(w9.$$.fragment),Qxr=l(),U7e=a("span"),Hxr=o("FlaxAutoModelForMaskedLM"),kNe=l(),hr=a("div"),F(A9.$$.fragment),Uxr=l(),Nc=a("p"),Jxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aY=a("a"),Yxr=o("from_pretrained()"),Kxr=o(" class method or the "),nY=a("a"),Zxr=o("from_config()"),e$r=o(` class
method.`),o$r=l(),y9=a("p"),r$r=o("This class cannot be instantiated directly using "),J7e=a("code"),t$r=o("__init__()"),a$r=o(" (throws an error)."),n$r=l(),Xt=a("div"),F(L9.$$.fragment),s$r=l(),Y7e=a("p"),l$r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),i$r=l(),jc=a("p"),d$r=o(`Note:
Loading a model from its configuration file does `),K7e=a("strong"),c$r=o("not"),f$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=a("a"),m$r=o("from_pretrained()"),g$r=o(" to load the model weights."),h$r=l(),F(h5.$$.fragment),p$r=l(),Or=a("div"),F(x9.$$.fragment),_$r=l(),Z7e=a("p"),u$r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),b$r=l(),un=a("p"),v$r=o("The model class to instantiate is selected based on the "),eMe=a("code"),F$r=o("model_type"),T$r=o(` property of the config object (either
passed as an argument or loaded from `),oMe=a("code"),M$r=o("pretrained_model_name_or_path"),E$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rMe=a("code"),C$r=o("pretrained_model_name_or_path"),w$r=o(":"),A$r=l(),Le=a("ul"),p5=a("li"),tMe=a("strong"),y$r=o("albert"),L$r=o(" \u2014 "),lY=a("a"),x$r=o("FlaxAlbertForMaskedLM"),$$r=o(" (ALBERT model)"),k$r=l(),_5=a("li"),aMe=a("strong"),S$r=o("bart"),R$r=o(" \u2014 "),iY=a("a"),B$r=o("FlaxBartForConditionalGeneration"),P$r=o(" (BART model)"),I$r=l(),u5=a("li"),nMe=a("strong"),q$r=o("bert"),N$r=o(" \u2014 "),dY=a("a"),j$r=o("FlaxBertForMaskedLM"),D$r=o(" (BERT model)"),G$r=l(),b5=a("li"),sMe=a("strong"),O$r=o("big_bird"),V$r=o(" \u2014 "),cY=a("a"),X$r=o("FlaxBigBirdForMaskedLM"),z$r=o(" (BigBird model)"),W$r=l(),v5=a("li"),lMe=a("strong"),Q$r=o("distilbert"),H$r=o(" \u2014 "),fY=a("a"),U$r=o("FlaxDistilBertForMaskedLM"),J$r=o(" (DistilBERT model)"),Y$r=l(),F5=a("li"),iMe=a("strong"),K$r=o("electra"),Z$r=o(" \u2014 "),mY=a("a"),ekr=o("FlaxElectraForMaskedLM"),okr=o(" (ELECTRA model)"),rkr=l(),T5=a("li"),dMe=a("strong"),tkr=o("mbart"),akr=o(" \u2014 "),gY=a("a"),nkr=o("FlaxMBartForConditionalGeneration"),skr=o(" (mBART model)"),lkr=l(),M5=a("li"),cMe=a("strong"),ikr=o("roberta"),dkr=o(" \u2014 "),hY=a("a"),ckr=o("FlaxRobertaForMaskedLM"),fkr=o(" (RoBERTa model)"),mkr=l(),E5=a("li"),fMe=a("strong"),gkr=o("roformer"),hkr=o(" \u2014 "),pY=a("a"),pkr=o("FlaxRoFormerForMaskedLM"),_kr=o(" (RoFormer model)"),ukr=l(),C5=a("li"),mMe=a("strong"),bkr=o("xlm-roberta"),vkr=o(" \u2014 "),_Y=a("a"),Fkr=o("FlaxXLMRobertaForMaskedLM"),Tkr=o(" (XLM-RoBERTa model)"),Mkr=l(),F(w5.$$.fragment),SNe=l(),Dc=a("h2"),A5=a("a"),gMe=a("span"),F($9.$$.fragment),Ekr=l(),hMe=a("span"),Ckr=o("FlaxAutoModelForSeq2SeqLM"),RNe=l(),pr=a("div"),F(k9.$$.fragment),wkr=l(),Gc=a("p"),Akr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uY=a("a"),ykr=o("from_pretrained()"),Lkr=o(" class method or the "),bY=a("a"),xkr=o("from_config()"),$kr=o(` class
method.`),kkr=l(),S9=a("p"),Skr=o("This class cannot be instantiated directly using "),pMe=a("code"),Rkr=o("__init__()"),Bkr=o(" (throws an error)."),Pkr=l(),zt=a("div"),F(R9.$$.fragment),Ikr=l(),_Me=a("p"),qkr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Nkr=l(),Oc=a("p"),jkr=o(`Note:
Loading a model from its configuration file does `),uMe=a("strong"),Dkr=o("not"),Gkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=a("a"),Okr=o("from_pretrained()"),Vkr=o(" to load the model weights."),Xkr=l(),F(y5.$$.fragment),zkr=l(),Vr=a("div"),F(B9.$$.fragment),Wkr=l(),bMe=a("p"),Qkr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Hkr=l(),bn=a("p"),Ukr=o("The model class to instantiate is selected based on the "),vMe=a("code"),Jkr=o("model_type"),Ykr=o(` property of the config object (either
passed as an argument or loaded from `),FMe=a("code"),Kkr=o("pretrained_model_name_or_path"),Zkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TMe=a("code"),eSr=o("pretrained_model_name_or_path"),oSr=o(":"),rSr=l(),Be=a("ul"),L5=a("li"),MMe=a("strong"),tSr=o("bart"),aSr=o(" \u2014 "),FY=a("a"),nSr=o("FlaxBartForConditionalGeneration"),sSr=o(" (BART model)"),lSr=l(),x5=a("li"),EMe=a("strong"),iSr=o("blenderbot"),dSr=o(" \u2014 "),TY=a("a"),cSr=o("FlaxBlenderbotForConditionalGeneration"),fSr=o(" (Blenderbot model)"),mSr=l(),$5=a("li"),CMe=a("strong"),gSr=o("blenderbot-small"),hSr=o(" \u2014 "),MY=a("a"),pSr=o("FlaxBlenderbotSmallForConditionalGeneration"),_Sr=o(" (BlenderbotSmall model)"),uSr=l(),k5=a("li"),wMe=a("strong"),bSr=o("encoder-decoder"),vSr=o(" \u2014 "),EY=a("a"),FSr=o("FlaxEncoderDecoderModel"),TSr=o(" (Encoder decoder model)"),MSr=l(),S5=a("li"),AMe=a("strong"),ESr=o("marian"),CSr=o(" \u2014 "),CY=a("a"),wSr=o("FlaxMarianMTModel"),ASr=o(" (Marian model)"),ySr=l(),R5=a("li"),yMe=a("strong"),LSr=o("mbart"),xSr=o(" \u2014 "),wY=a("a"),$Sr=o("FlaxMBartForConditionalGeneration"),kSr=o(" (mBART model)"),SSr=l(),B5=a("li"),LMe=a("strong"),RSr=o("mt5"),BSr=o(" \u2014 "),AY=a("a"),PSr=o("FlaxMT5ForConditionalGeneration"),ISr=o(" (mT5 model)"),qSr=l(),P5=a("li"),xMe=a("strong"),NSr=o("pegasus"),jSr=o(" \u2014 "),yY=a("a"),DSr=o("FlaxPegasusForConditionalGeneration"),GSr=o(" (Pegasus model)"),OSr=l(),I5=a("li"),$Me=a("strong"),VSr=o("t5"),XSr=o(" \u2014 "),LY=a("a"),zSr=o("FlaxT5ForConditionalGeneration"),WSr=o(" (T5 model)"),QSr=l(),F(q5.$$.fragment),BNe=l(),Vc=a("h2"),N5=a("a"),kMe=a("span"),F(P9.$$.fragment),HSr=l(),SMe=a("span"),USr=o("FlaxAutoModelForSequenceClassification"),PNe=l(),_r=a("div"),F(I9.$$.fragment),JSr=l(),Xc=a("p"),YSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xY=a("a"),KSr=o("from_pretrained()"),ZSr=o(" class method or the "),$Y=a("a"),eRr=o("from_config()"),oRr=o(` class
method.`),rRr=l(),q9=a("p"),tRr=o("This class cannot be instantiated directly using "),RMe=a("code"),aRr=o("__init__()"),nRr=o(" (throws an error)."),sRr=l(),Wt=a("div"),F(N9.$$.fragment),lRr=l(),BMe=a("p"),iRr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dRr=l(),zc=a("p"),cRr=o(`Note:
Loading a model from its configuration file does `),PMe=a("strong"),fRr=o("not"),mRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=a("a"),gRr=o("from_pretrained()"),hRr=o(" to load the model weights."),pRr=l(),F(j5.$$.fragment),_Rr=l(),Xr=a("div"),F(j9.$$.fragment),uRr=l(),IMe=a("p"),bRr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vRr=l(),vn=a("p"),FRr=o("The model class to instantiate is selected based on the "),qMe=a("code"),TRr=o("model_type"),MRr=o(` property of the config object (either
passed as an argument or loaded from `),NMe=a("code"),ERr=o("pretrained_model_name_or_path"),CRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jMe=a("code"),wRr=o("pretrained_model_name_or_path"),ARr=o(":"),yRr=l(),xe=a("ul"),D5=a("li"),DMe=a("strong"),LRr=o("albert"),xRr=o(" \u2014 "),SY=a("a"),$Rr=o("FlaxAlbertForSequenceClassification"),kRr=o(" (ALBERT model)"),SRr=l(),G5=a("li"),GMe=a("strong"),RRr=o("bart"),BRr=o(" \u2014 "),RY=a("a"),PRr=o("FlaxBartForSequenceClassification"),IRr=o(" (BART model)"),qRr=l(),O5=a("li"),OMe=a("strong"),NRr=o("bert"),jRr=o(" \u2014 "),BY=a("a"),DRr=o("FlaxBertForSequenceClassification"),GRr=o(" (BERT model)"),ORr=l(),V5=a("li"),VMe=a("strong"),VRr=o("big_bird"),XRr=o(" \u2014 "),PY=a("a"),zRr=o("FlaxBigBirdForSequenceClassification"),WRr=o(" (BigBird model)"),QRr=l(),X5=a("li"),XMe=a("strong"),HRr=o("distilbert"),URr=o(" \u2014 "),IY=a("a"),JRr=o("FlaxDistilBertForSequenceClassification"),YRr=o(" (DistilBERT model)"),KRr=l(),z5=a("li"),zMe=a("strong"),ZRr=o("electra"),eBr=o(" \u2014 "),qY=a("a"),oBr=o("FlaxElectraForSequenceClassification"),rBr=o(" (ELECTRA model)"),tBr=l(),W5=a("li"),WMe=a("strong"),aBr=o("mbart"),nBr=o(" \u2014 "),NY=a("a"),sBr=o("FlaxMBartForSequenceClassification"),lBr=o(" (mBART model)"),iBr=l(),Q5=a("li"),QMe=a("strong"),dBr=o("roberta"),cBr=o(" \u2014 "),jY=a("a"),fBr=o("FlaxRobertaForSequenceClassification"),mBr=o(" (RoBERTa model)"),gBr=l(),H5=a("li"),HMe=a("strong"),hBr=o("roformer"),pBr=o(" \u2014 "),DY=a("a"),_Br=o("FlaxRoFormerForSequenceClassification"),uBr=o(" (RoFormer model)"),bBr=l(),U5=a("li"),UMe=a("strong"),vBr=o("xlm-roberta"),FBr=o(" \u2014 "),GY=a("a"),TBr=o("FlaxXLMRobertaForSequenceClassification"),MBr=o(" (XLM-RoBERTa model)"),EBr=l(),F(J5.$$.fragment),INe=l(),Wc=a("h2"),Y5=a("a"),JMe=a("span"),F(D9.$$.fragment),CBr=l(),YMe=a("span"),wBr=o("FlaxAutoModelForQuestionAnswering"),qNe=l(),ur=a("div"),F(G9.$$.fragment),ABr=l(),Qc=a("p"),yBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),OY=a("a"),LBr=o("from_pretrained()"),xBr=o(" class method or the "),VY=a("a"),$Br=o("from_config()"),kBr=o(` class
method.`),SBr=l(),O9=a("p"),RBr=o("This class cannot be instantiated directly using "),KMe=a("code"),BBr=o("__init__()"),PBr=o(" (throws an error)."),IBr=l(),Qt=a("div"),F(V9.$$.fragment),qBr=l(),ZMe=a("p"),NBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jBr=l(),Hc=a("p"),DBr=o(`Note:
Loading a model from its configuration file does `),e4e=a("strong"),GBr=o("not"),OBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=a("a"),VBr=o("from_pretrained()"),XBr=o(" to load the model weights."),zBr=l(),F(K5.$$.fragment),WBr=l(),zr=a("div"),F(X9.$$.fragment),QBr=l(),o4e=a("p"),HBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),UBr=l(),Fn=a("p"),JBr=o("The model class to instantiate is selected based on the "),r4e=a("code"),YBr=o("model_type"),KBr=o(` property of the config object (either
passed as an argument or loaded from `),t4e=a("code"),ZBr=o("pretrained_model_name_or_path"),ePr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=a("code"),oPr=o("pretrained_model_name_or_path"),rPr=o(":"),tPr=l(),$e=a("ul"),Z5=a("li"),n4e=a("strong"),aPr=o("albert"),nPr=o(" \u2014 "),zY=a("a"),sPr=o("FlaxAlbertForQuestionAnswering"),lPr=o(" (ALBERT model)"),iPr=l(),e3=a("li"),s4e=a("strong"),dPr=o("bart"),cPr=o(" \u2014 "),WY=a("a"),fPr=o("FlaxBartForQuestionAnswering"),mPr=o(" (BART model)"),gPr=l(),o3=a("li"),l4e=a("strong"),hPr=o("bert"),pPr=o(" \u2014 "),QY=a("a"),_Pr=o("FlaxBertForQuestionAnswering"),uPr=o(" (BERT model)"),bPr=l(),r3=a("li"),i4e=a("strong"),vPr=o("big_bird"),FPr=o(" \u2014 "),HY=a("a"),TPr=o("FlaxBigBirdForQuestionAnswering"),MPr=o(" (BigBird model)"),EPr=l(),t3=a("li"),d4e=a("strong"),CPr=o("distilbert"),wPr=o(" \u2014 "),UY=a("a"),APr=o("FlaxDistilBertForQuestionAnswering"),yPr=o(" (DistilBERT model)"),LPr=l(),a3=a("li"),c4e=a("strong"),xPr=o("electra"),$Pr=o(" \u2014 "),JY=a("a"),kPr=o("FlaxElectraForQuestionAnswering"),SPr=o(" (ELECTRA model)"),RPr=l(),n3=a("li"),f4e=a("strong"),BPr=o("mbart"),PPr=o(" \u2014 "),YY=a("a"),IPr=o("FlaxMBartForQuestionAnswering"),qPr=o(" (mBART model)"),NPr=l(),s3=a("li"),m4e=a("strong"),jPr=o("roberta"),DPr=o(" \u2014 "),KY=a("a"),GPr=o("FlaxRobertaForQuestionAnswering"),OPr=o(" (RoBERTa model)"),VPr=l(),l3=a("li"),g4e=a("strong"),XPr=o("roformer"),zPr=o(" \u2014 "),ZY=a("a"),WPr=o("FlaxRoFormerForQuestionAnswering"),QPr=o(" (RoFormer model)"),HPr=l(),i3=a("li"),h4e=a("strong"),UPr=o("xlm-roberta"),JPr=o(" \u2014 "),eK=a("a"),YPr=o("FlaxXLMRobertaForQuestionAnswering"),KPr=o(" (XLM-RoBERTa model)"),ZPr=l(),F(d3.$$.fragment),NNe=l(),Uc=a("h2"),c3=a("a"),p4e=a("span"),F(z9.$$.fragment),eIr=l(),_4e=a("span"),oIr=o("FlaxAutoModelForTokenClassification"),jNe=l(),br=a("div"),F(W9.$$.fragment),rIr=l(),Jc=a("p"),tIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),oK=a("a"),aIr=o("from_pretrained()"),nIr=o(" class method or the "),rK=a("a"),sIr=o("from_config()"),lIr=o(` class
method.`),iIr=l(),Q9=a("p"),dIr=o("This class cannot be instantiated directly using "),u4e=a("code"),cIr=o("__init__()"),fIr=o(" (throws an error)."),mIr=l(),Ht=a("div"),F(H9.$$.fragment),gIr=l(),b4e=a("p"),hIr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pIr=l(),Yc=a("p"),_Ir=o(`Note:
Loading a model from its configuration file does `),v4e=a("strong"),uIr=o("not"),bIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tK=a("a"),vIr=o("from_pretrained()"),FIr=o(" to load the model weights."),TIr=l(),F(f3.$$.fragment),MIr=l(),Wr=a("div"),F(U9.$$.fragment),EIr=l(),F4e=a("p"),CIr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wIr=l(),Tn=a("p"),AIr=o("The model class to instantiate is selected based on the "),T4e=a("code"),yIr=o("model_type"),LIr=o(` property of the config object (either
passed as an argument or loaded from `),M4e=a("code"),xIr=o("pretrained_model_name_or_path"),$Ir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=a("code"),kIr=o("pretrained_model_name_or_path"),SIr=o(":"),RIr=l(),De=a("ul"),m3=a("li"),C4e=a("strong"),BIr=o("albert"),PIr=o(" \u2014 "),aK=a("a"),IIr=o("FlaxAlbertForTokenClassification"),qIr=o(" (ALBERT model)"),NIr=l(),g3=a("li"),w4e=a("strong"),jIr=o("bert"),DIr=o(" \u2014 "),nK=a("a"),GIr=o("FlaxBertForTokenClassification"),OIr=o(" (BERT model)"),VIr=l(),h3=a("li"),A4e=a("strong"),XIr=o("big_bird"),zIr=o(" \u2014 "),sK=a("a"),WIr=o("FlaxBigBirdForTokenClassification"),QIr=o(" (BigBird model)"),HIr=l(),p3=a("li"),y4e=a("strong"),UIr=o("distilbert"),JIr=o(" \u2014 "),lK=a("a"),YIr=o("FlaxDistilBertForTokenClassification"),KIr=o(" (DistilBERT model)"),ZIr=l(),_3=a("li"),L4e=a("strong"),eqr=o("electra"),oqr=o(" \u2014 "),iK=a("a"),rqr=o("FlaxElectraForTokenClassification"),tqr=o(" (ELECTRA model)"),aqr=l(),u3=a("li"),x4e=a("strong"),nqr=o("roberta"),sqr=o(" \u2014 "),dK=a("a"),lqr=o("FlaxRobertaForTokenClassification"),iqr=o(" (RoBERTa model)"),dqr=l(),b3=a("li"),$4e=a("strong"),cqr=o("roformer"),fqr=o(" \u2014 "),cK=a("a"),mqr=o("FlaxRoFormerForTokenClassification"),gqr=o(" (RoFormer model)"),hqr=l(),v3=a("li"),k4e=a("strong"),pqr=o("xlm-roberta"),_qr=o(" \u2014 "),fK=a("a"),uqr=o("FlaxXLMRobertaForTokenClassification"),bqr=o(" (XLM-RoBERTa model)"),vqr=l(),F(F3.$$.fragment),DNe=l(),Kc=a("h2"),T3=a("a"),S4e=a("span"),F(J9.$$.fragment),Fqr=l(),R4e=a("span"),Tqr=o("FlaxAutoModelForMultipleChoice"),GNe=l(),vr=a("div"),F(Y9.$$.fragment),Mqr=l(),Zc=a("p"),Eqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mK=a("a"),Cqr=o("from_pretrained()"),wqr=o(" class method or the "),gK=a("a"),Aqr=o("from_config()"),yqr=o(` class
method.`),Lqr=l(),K9=a("p"),xqr=o("This class cannot be instantiated directly using "),B4e=a("code"),$qr=o("__init__()"),kqr=o(" (throws an error)."),Sqr=l(),Ut=a("div"),F(Z9.$$.fragment),Rqr=l(),P4e=a("p"),Bqr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Pqr=l(),ef=a("p"),Iqr=o(`Note:
Loading a model from its configuration file does `),I4e=a("strong"),qqr=o("not"),Nqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=a("a"),jqr=o("from_pretrained()"),Dqr=o(" to load the model weights."),Gqr=l(),F(M3.$$.fragment),Oqr=l(),Qr=a("div"),F(ex.$$.fragment),Vqr=l(),q4e=a("p"),Xqr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zqr=l(),Mn=a("p"),Wqr=o("The model class to instantiate is selected based on the "),N4e=a("code"),Qqr=o("model_type"),Hqr=o(` property of the config object (either
passed as an argument or loaded from `),j4e=a("code"),Uqr=o("pretrained_model_name_or_path"),Jqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D4e=a("code"),Yqr=o("pretrained_model_name_or_path"),Kqr=o(":"),Zqr=l(),Ge=a("ul"),E3=a("li"),G4e=a("strong"),eNr=o("albert"),oNr=o(" \u2014 "),pK=a("a"),rNr=o("FlaxAlbertForMultipleChoice"),tNr=o(" (ALBERT model)"),aNr=l(),C3=a("li"),O4e=a("strong"),nNr=o("bert"),sNr=o(" \u2014 "),_K=a("a"),lNr=o("FlaxBertForMultipleChoice"),iNr=o(" (BERT model)"),dNr=l(),w3=a("li"),V4e=a("strong"),cNr=o("big_bird"),fNr=o(" \u2014 "),uK=a("a"),mNr=o("FlaxBigBirdForMultipleChoice"),gNr=o(" (BigBird model)"),hNr=l(),A3=a("li"),X4e=a("strong"),pNr=o("distilbert"),_Nr=o(" \u2014 "),bK=a("a"),uNr=o("FlaxDistilBertForMultipleChoice"),bNr=o(" (DistilBERT model)"),vNr=l(),y3=a("li"),z4e=a("strong"),FNr=o("electra"),TNr=o(" \u2014 "),vK=a("a"),MNr=o("FlaxElectraForMultipleChoice"),ENr=o(" (ELECTRA model)"),CNr=l(),L3=a("li"),W4e=a("strong"),wNr=o("roberta"),ANr=o(" \u2014 "),FK=a("a"),yNr=o("FlaxRobertaForMultipleChoice"),LNr=o(" (RoBERTa model)"),xNr=l(),x3=a("li"),Q4e=a("strong"),$Nr=o("roformer"),kNr=o(" \u2014 "),TK=a("a"),SNr=o("FlaxRoFormerForMultipleChoice"),RNr=o(" (RoFormer model)"),BNr=l(),$3=a("li"),H4e=a("strong"),PNr=o("xlm-roberta"),INr=o(" \u2014 "),MK=a("a"),qNr=o("FlaxXLMRobertaForMultipleChoice"),NNr=o(" (XLM-RoBERTa model)"),jNr=l(),F(k3.$$.fragment),ONe=l(),of=a("h2"),S3=a("a"),U4e=a("span"),F(ox.$$.fragment),DNr=l(),J4e=a("span"),GNr=o("FlaxAutoModelForNextSentencePrediction"),VNe=l(),Fr=a("div"),F(rx.$$.fragment),ONr=l(),rf=a("p"),VNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),EK=a("a"),XNr=o("from_pretrained()"),zNr=o(" class method or the "),CK=a("a"),WNr=o("from_config()"),QNr=o(` class
method.`),HNr=l(),tx=a("p"),UNr=o("This class cannot be instantiated directly using "),Y4e=a("code"),JNr=o("__init__()"),YNr=o(" (throws an error)."),KNr=l(),Jt=a("div"),F(ax.$$.fragment),ZNr=l(),K4e=a("p"),ejr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ojr=l(),tf=a("p"),rjr=o(`Note:
Loading a model from its configuration file does `),Z4e=a("strong"),tjr=o("not"),ajr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=a("a"),njr=o("from_pretrained()"),sjr=o(" to load the model weights."),ljr=l(),F(R3.$$.fragment),ijr=l(),Hr=a("div"),F(nx.$$.fragment),djr=l(),eEe=a("p"),cjr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fjr=l(),En=a("p"),mjr=o("The model class to instantiate is selected based on the "),oEe=a("code"),gjr=o("model_type"),hjr=o(` property of the config object (either
passed as an argument or loaded from `),rEe=a("code"),pjr=o("pretrained_model_name_or_path"),_jr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=a("code"),ujr=o("pretrained_model_name_or_path"),bjr=o(":"),vjr=l(),aEe=a("ul"),B3=a("li"),nEe=a("strong"),Fjr=o("bert"),Tjr=o(" \u2014 "),AK=a("a"),Mjr=o("FlaxBertForNextSentencePrediction"),Ejr=o(" (BERT model)"),Cjr=l(),F(P3.$$.fragment),XNe=l(),af=a("h2"),I3=a("a"),sEe=a("span"),F(sx.$$.fragment),wjr=l(),lEe=a("span"),Ajr=o("FlaxAutoModelForImageClassification"),zNe=l(),Tr=a("div"),F(lx.$$.fragment),yjr=l(),nf=a("p"),Ljr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),yK=a("a"),xjr=o("from_pretrained()"),$jr=o(" class method or the "),LK=a("a"),kjr=o("from_config()"),Sjr=o(` class
method.`),Rjr=l(),ix=a("p"),Bjr=o("This class cannot be instantiated directly using "),iEe=a("code"),Pjr=o("__init__()"),Ijr=o(" (throws an error)."),qjr=l(),Yt=a("div"),F(dx.$$.fragment),Njr=l(),dEe=a("p"),jjr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Djr=l(),sf=a("p"),Gjr=o(`Note:
Loading a model from its configuration file does `),cEe=a("strong"),Ojr=o("not"),Vjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=a("a"),Xjr=o("from_pretrained()"),zjr=o(" to load the model weights."),Wjr=l(),F(q3.$$.fragment),Qjr=l(),Ur=a("div"),F(cx.$$.fragment),Hjr=l(),fEe=a("p"),Ujr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Jjr=l(),Cn=a("p"),Yjr=o("The model class to instantiate is selected based on the "),mEe=a("code"),Kjr=o("model_type"),Zjr=o(` property of the config object (either
passed as an argument or loaded from `),gEe=a("code"),eDr=o("pretrained_model_name_or_path"),oDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hEe=a("code"),rDr=o("pretrained_model_name_or_path"),tDr=o(":"),aDr=l(),fx=a("ul"),N3=a("li"),pEe=a("strong"),nDr=o("beit"),sDr=o(" \u2014 "),$K=a("a"),lDr=o("FlaxBeitForImageClassification"),iDr=o(" (BEiT model)"),dDr=l(),j3=a("li"),_Ee=a("strong"),cDr=o("vit"),fDr=o(" \u2014 "),kK=a("a"),mDr=o("FlaxViTForImageClassification"),gDr=o(" (ViT model)"),hDr=l(),F(D3.$$.fragment),WNe=l(),lf=a("h2"),G3=a("a"),uEe=a("span"),F(mx.$$.fragment),pDr=l(),bEe=a("span"),_Dr=o("FlaxAutoModelForVision2Seq"),QNe=l(),Mr=a("div"),F(gx.$$.fragment),uDr=l(),df=a("p"),bDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SK=a("a"),vDr=o("from_pretrained()"),FDr=o(" class method or the "),RK=a("a"),TDr=o("from_config()"),MDr=o(` class
method.`),EDr=l(),hx=a("p"),CDr=o("This class cannot be instantiated directly using "),vEe=a("code"),wDr=o("__init__()"),ADr=o(" (throws an error)."),yDr=l(),Kt=a("div"),F(px.$$.fragment),LDr=l(),FEe=a("p"),xDr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$Dr=l(),cf=a("p"),kDr=o(`Note:
Loading a model from its configuration file does `),TEe=a("strong"),SDr=o("not"),RDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=a("a"),BDr=o("from_pretrained()"),PDr=o(" to load the model weights."),IDr=l(),F(O3.$$.fragment),qDr=l(),Jr=a("div"),F(_x.$$.fragment),NDr=l(),MEe=a("p"),jDr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),DDr=l(),wn=a("p"),GDr=o("The model class to instantiate is selected based on the "),EEe=a("code"),ODr=o("model_type"),VDr=o(` property of the config object (either
passed as an argument or loaded from `),CEe=a("code"),XDr=o("pretrained_model_name_or_path"),zDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wEe=a("code"),WDr=o("pretrained_model_name_or_path"),QDr=o(":"),HDr=l(),AEe=a("ul"),V3=a("li"),yEe=a("strong"),UDr=o("vision-encoder-decoder"),JDr=o(" \u2014 "),PK=a("a"),YDr=o("FlaxVisionEncoderDecoderModel"),KDr=o(" (Vision Encoder decoder model)"),ZDr=l(),F(X3.$$.fragment),this.h()},l(f){const u=r8t('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var ux=s(p);m=n(ux,"A",{id:!0,class:!0,href:!0});var LEe=s(m);_=n(LEe,"SPAN",{});var xEe=s(_);T(d.$$.fragment,xEe),xEe.forEach(t),LEe.forEach(t),h=i(ux),Mo=n(ux,"SPAN",{});var $Ee=s(Mo);ci=r($Ee,"Auto Classes"),$Ee.forEach(t),ux.forEach(t),hf=i(f),rt=n(f,"P",{});var bx=s(rt);fi=r(bx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=n(bx,"CODE",{});var kEe=s(mi);i6=r(kEe,"from_pretrained()"),kEe.forEach(t),pf=r(bx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),bx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);gi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var SEe=s(yn);d6=r(SEe,"AutoConfig"),SEe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var REe=s(xn);c6=r(REe,"AutoModel"),REe.forEach(t),hi=r(An,`, and
`),$n=n(An,"A",{href:!0});var BEe=s($n);f6=r(BEe,"AutoTokenizer"),BEe.forEach(t),pi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_f=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var vx=s(Ae);x$=r(vx,"will create a model that is an instance of "),_i=n(vx,"A",{href:!0});var PEe=s(_i);$$=r(PEe,"BertModel"),PEe.forEach(t),k$=r(vx,"."),vx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Fx=s(wa);S$=r(Fx,"There is one class of "),uf=n(Fx,"CODE",{});var IEe=s(uf);R$=r(IEe,"AutoModel"),IEe.forEach(t),rGe=r(Fx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Fx.forEach(t),zIe=i(f),ui=n(f,"H2",{class:!0});var Tx=s(ui);bf=n(Tx,"A",{id:!0,class:!0,href:!0});var qEe=s(bf);Lee=n(qEe,"SPAN",{});var NEe=s(Lee);T(m6.$$.fragment,NEe),NEe.forEach(t),qEe.forEach(t),tGe=i(Tx),xee=n(Tx,"SPAN",{});var jEe=s(xee);aGe=r(jEe,"Extending the Auto Classes"),jEe.forEach(t),Tx.forEach(t),WIe=i(f),kn=n(f,"P",{});var ff=s(kn);nGe=r(ff,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),$ee=n(ff,"CODE",{});var DEe=s($ee);sGe=r(DEe,"NewModel"),DEe.forEach(t),lGe=r(ff,", make sure you have a "),kee=n(ff,"CODE",{});var GEe=s(kee);iGe=r(GEe,"NewModelConfig"),GEe.forEach(t),dGe=r(ff,` then you can add those to the auto
classes like this:`),ff.forEach(t),QIe=i(f),T(g6.$$.fragment,f),HIe=i(f),B$=n(f,"P",{});var OEe=s(B$);cGe=r(OEe,"You will then be able to use the auto classes like you would usually do!"),OEe.forEach(t),UIe=i(f),T(vf.$$.fragment,f),JIe=i(f),bi=n(f,"H2",{class:!0});var Mx=s(bi);Ff=n(Mx,"A",{id:!0,class:!0,href:!0});var VEe=s(Ff);See=n(VEe,"SPAN",{});var XEe=s(See);T(h6.$$.fragment,XEe),XEe.forEach(t),VEe.forEach(t),fGe=i(Mx),Ree=n(Mx,"SPAN",{});var zEe=s(Ree);mGe=r(zEe,"AutoConfig"),zEe.forEach(t),Mx.forEach(t),YIe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(p6.$$.fragment,et),gGe=i(et),_6=n(et,"P",{});var Ex=s(_6);hGe=r(Ex,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),P$=n(Ex,"A",{href:!0});var WEe=s(P$);pGe=r(WEe,"from_pretrained()"),WEe.forEach(t),_Ge=r(Ex," class method."),Ex.forEach(t),uGe=i(et),u6=n(et,"P",{});var Cx=s(u6);bGe=r(Cx,"This class cannot be instantiated directly using "),Bee=n(Cx,"CODE",{});var QEe=s(Bee);vGe=r(QEe,"__init__()"),QEe.forEach(t),FGe=r(Cx," (throws an error)."),Cx.forEach(t),TGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(b6.$$.fragment,ot),MGe=i(ot),Pee=n(ot,"P",{});var HEe=s(Pee);EGe=r(HEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),HEe.forEach(t),CGe=i(ot),vi=n(ot,"P",{});var mf=s(vi);wGe=r(mf,"The configuration class to instantiate is selected based on the "),Iee=n(mf,"CODE",{});var UEe=s(Iee);AGe=r(UEe,"model_type"),UEe.forEach(t),yGe=r(mf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),qee=n(mf,"CODE",{});var JEe=s(qee);LGe=r(JEe,"pretrained_model_name_or_path"),JEe.forEach(t),xGe=r(mf,":"),mf.forEach(t),$Ge=i(ot),A=n(ot,"UL",{});var y=s(A);Tf=n(y,"LI",{});var z3=s(Tf);Nee=n(z3,"STRONG",{});var YEe=s(Nee);kGe=r(YEe,"albert"),YEe.forEach(t),SGe=r(z3," \u2014 "),I$=n(z3,"A",{href:!0});var KEe=s(I$);RGe=r(KEe,"AlbertConfig"),KEe.forEach(t),BGe=r(z3," (ALBERT model)"),z3.forEach(t),PGe=i(y),Mf=n(y,"LI",{});var W3=s(Mf);jee=n(W3,"STRONG",{});var ZEe=s(jee);IGe=r(ZEe,"bart"),ZEe.forEach(t),qGe=r(W3," \u2014 "),q$=n(W3,"A",{href:!0});var eCe=s(q$);NGe=r(eCe,"BartConfig"),eCe.forEach(t),jGe=r(W3," (BART model)"),W3.forEach(t),DGe=i(y),Ef=n(y,"LI",{});var Q3=s(Ef);Dee=n(Q3,"STRONG",{});var oCe=s(Dee);GGe=r(oCe,"beit"),oCe.forEach(t),OGe=r(Q3," \u2014 "),N$=n(Q3,"A",{href:!0});var rCe=s(N$);VGe=r(rCe,"BeitConfig"),rCe.forEach(t),XGe=r(Q3," (BEiT model)"),Q3.forEach(t),zGe=i(y),Cf=n(y,"LI",{});var H3=s(Cf);Gee=n(H3,"STRONG",{});var tCe=s(Gee);WGe=r(tCe,"bert"),tCe.forEach(t),QGe=r(H3," \u2014 "),j$=n(H3,"A",{href:!0});var aCe=s(j$);HGe=r(aCe,"BertConfig"),aCe.forEach(t),UGe=r(H3," (BERT model)"),H3.forEach(t),JGe=i(y),wf=n(y,"LI",{});var U3=s(wf);Oee=n(U3,"STRONG",{});var nCe=s(Oee);YGe=r(nCe,"bert-generation"),nCe.forEach(t),KGe=r(U3," \u2014 "),D$=n(U3,"A",{href:!0});var sCe=s(D$);ZGe=r(sCe,"BertGenerationConfig"),sCe.forEach(t),eOe=r(U3," (Bert Generation model)"),U3.forEach(t),oOe=i(y),Af=n(y,"LI",{});var J3=s(Af);Vee=n(J3,"STRONG",{});var lCe=s(Vee);rOe=r(lCe,"big_bird"),lCe.forEach(t),tOe=r(J3," \u2014 "),G$=n(J3,"A",{href:!0});var iCe=s(G$);aOe=r(iCe,"BigBirdConfig"),iCe.forEach(t),nOe=r(J3," (BigBird model)"),J3.forEach(t),sOe=i(y),yf=n(y,"LI",{});var Y3=s(yf);Xee=n(Y3,"STRONG",{});var dCe=s(Xee);lOe=r(dCe,"bigbird_pegasus"),dCe.forEach(t),iOe=r(Y3," \u2014 "),O$=n(Y3,"A",{href:!0});var cCe=s(O$);dOe=r(cCe,"BigBirdPegasusConfig"),cCe.forEach(t),cOe=r(Y3," (BigBirdPegasus model)"),Y3.forEach(t),fOe=i(y),Lf=n(y,"LI",{});var K3=s(Lf);zee=n(K3,"STRONG",{});var fCe=s(zee);mOe=r(fCe,"blenderbot"),fCe.forEach(t),gOe=r(K3," \u2014 "),V$=n(K3,"A",{href:!0});var mCe=s(V$);hOe=r(mCe,"BlenderbotConfig"),mCe.forEach(t),pOe=r(K3," (Blenderbot model)"),K3.forEach(t),_Oe=i(y),xf=n(y,"LI",{});var Z3=s(xf);Wee=n(Z3,"STRONG",{});var gCe=s(Wee);uOe=r(gCe,"blenderbot-small"),gCe.forEach(t),bOe=r(Z3," \u2014 "),X$=n(Z3,"A",{href:!0});var hCe=s(X$);vOe=r(hCe,"BlenderbotSmallConfig"),hCe.forEach(t),FOe=r(Z3," (BlenderbotSmall model)"),Z3.forEach(t),TOe=i(y),$f=n(y,"LI",{});var ew=s($f);Qee=n(ew,"STRONG",{});var pCe=s(Qee);MOe=r(pCe,"bloom"),pCe.forEach(t),EOe=r(ew," \u2014 "),z$=n(ew,"A",{href:!0});var _Ce=s(z$);COe=r(_Ce,"BloomConfig"),_Ce.forEach(t),wOe=r(ew," (Bloom model)"),ew.forEach(t),AOe=i(y),kf=n(y,"LI",{});var ow=s(kf);Hee=n(ow,"STRONG",{});var uCe=s(Hee);yOe=r(uCe,"camembert"),uCe.forEach(t),LOe=r(ow," \u2014 "),W$=n(ow,"A",{href:!0});var bCe=s(W$);xOe=r(bCe,"CamembertConfig"),bCe.forEach(t),$Oe=r(ow," (CamemBERT model)"),ow.forEach(t),kOe=i(y),Sf=n(y,"LI",{});var rw=s(Sf);Uee=n(rw,"STRONG",{});var vCe=s(Uee);SOe=r(vCe,"canine"),vCe.forEach(t),ROe=r(rw," \u2014 "),Q$=n(rw,"A",{href:!0});var FCe=s(Q$);BOe=r(FCe,"CanineConfig"),FCe.forEach(t),POe=r(rw," (Canine model)"),rw.forEach(t),IOe=i(y),Rf=n(y,"LI",{});var tw=s(Rf);Jee=n(tw,"STRONG",{});var TCe=s(Jee);qOe=r(TCe,"clip"),TCe.forEach(t),NOe=r(tw," \u2014 "),H$=n(tw,"A",{href:!0});var MCe=s(H$);jOe=r(MCe,"CLIPConfig"),MCe.forEach(t),DOe=r(tw," (CLIP model)"),tw.forEach(t),GOe=i(y),Bf=n(y,"LI",{});var aw=s(Bf);Yee=n(aw,"STRONG",{});var ECe=s(Yee);OOe=r(ECe,"convbert"),ECe.forEach(t),VOe=r(aw," \u2014 "),U$=n(aw,"A",{href:!0});var CCe=s(U$);XOe=r(CCe,"ConvBertConfig"),CCe.forEach(t),zOe=r(aw," (ConvBERT model)"),aw.forEach(t),WOe=i(y),Pf=n(y,"LI",{});var nw=s(Pf);Kee=n(nw,"STRONG",{});var wCe=s(Kee);QOe=r(wCe,"convnext"),wCe.forEach(t),HOe=r(nw," \u2014 "),J$=n(nw,"A",{href:!0});var ACe=s(J$);UOe=r(ACe,"ConvNextConfig"),ACe.forEach(t),JOe=r(nw," (ConvNext model)"),nw.forEach(t),YOe=i(y),If=n(y,"LI",{});var sw=s(If);Zee=n(sw,"STRONG",{});var yCe=s(Zee);KOe=r(yCe,"ctrl"),yCe.forEach(t),ZOe=r(sw," \u2014 "),Y$=n(sw,"A",{href:!0});var LCe=s(Y$);eVe=r(LCe,"CTRLConfig"),LCe.forEach(t),oVe=r(sw," (CTRL model)"),sw.forEach(t),rVe=i(y),qf=n(y,"LI",{});var lw=s(qf);eoe=n(lw,"STRONG",{});var xCe=s(eoe);tVe=r(xCe,"data2vec-audio"),xCe.forEach(t),aVe=r(lw," \u2014 "),K$=n(lw,"A",{href:!0});var $Ce=s(K$);nVe=r($Ce,"Data2VecAudioConfig"),$Ce.forEach(t),sVe=r(lw," (Data2VecAudio model)"),lw.forEach(t),lVe=i(y),Nf=n(y,"LI",{});var iw=s(Nf);ooe=n(iw,"STRONG",{});var kCe=s(ooe);iVe=r(kCe,"data2vec-text"),kCe.forEach(t),dVe=r(iw," \u2014 "),Z$=n(iw,"A",{href:!0});var SCe=s(Z$);cVe=r(SCe,"Data2VecTextConfig"),SCe.forEach(t),fVe=r(iw," (Data2VecText model)"),iw.forEach(t),mVe=i(y),jf=n(y,"LI",{});var dw=s(jf);roe=n(dw,"STRONG",{});var RCe=s(roe);gVe=r(RCe,"data2vec-vision"),RCe.forEach(t),hVe=r(dw," \u2014 "),ek=n(dw,"A",{href:!0});var BCe=s(ek);pVe=r(BCe,"Data2VecVisionConfig"),BCe.forEach(t),_Ve=r(dw," (Data2VecVision model)"),dw.forEach(t),uVe=i(y),Df=n(y,"LI",{});var cw=s(Df);toe=n(cw,"STRONG",{});var PCe=s(toe);bVe=r(PCe,"deberta"),PCe.forEach(t),vVe=r(cw," \u2014 "),ok=n(cw,"A",{href:!0});var ICe=s(ok);FVe=r(ICe,"DebertaConfig"),ICe.forEach(t),TVe=r(cw," (DeBERTa model)"),cw.forEach(t),MVe=i(y),Gf=n(y,"LI",{});var fw=s(Gf);aoe=n(fw,"STRONG",{});var qCe=s(aoe);EVe=r(qCe,"deberta-v2"),qCe.forEach(t),CVe=r(fw," \u2014 "),rk=n(fw,"A",{href:!0});var NCe=s(rk);wVe=r(NCe,"DebertaV2Config"),NCe.forEach(t),AVe=r(fw," (DeBERTa-v2 model)"),fw.forEach(t),yVe=i(y),Of=n(y,"LI",{});var mw=s(Of);noe=n(mw,"STRONG",{});var jCe=s(noe);LVe=r(jCe,"decision_transformer"),jCe.forEach(t),xVe=r(mw," \u2014 "),tk=n(mw,"A",{href:!0});var DCe=s(tk);$Ve=r(DCe,"DecisionTransformerConfig"),DCe.forEach(t),kVe=r(mw," (Decision Transformer model)"),mw.forEach(t),SVe=i(y),Vf=n(y,"LI",{});var gw=s(Vf);soe=n(gw,"STRONG",{});var GCe=s(soe);RVe=r(GCe,"deit"),GCe.forEach(t),BVe=r(gw," \u2014 "),ak=n(gw,"A",{href:!0});var oGr=s(ak);PVe=r(oGr,"DeiTConfig"),oGr.forEach(t),IVe=r(gw," (DeiT model)"),gw.forEach(t),qVe=i(y),Xf=n(y,"LI",{});var OCe=s(Xf);loe=n(OCe,"STRONG",{});var rGr=s(loe);NVe=r(rGr,"detr"),rGr.forEach(t),jVe=r(OCe," \u2014 "),nk=n(OCe,"A",{href:!0});var tGr=s(nk);DVe=r(tGr,"DetrConfig"),tGr.forEach(t),GVe=r(OCe," (DETR model)"),OCe.forEach(t),OVe=i(y),zf=n(y,"LI",{});var VCe=s(zf);ioe=n(VCe,"STRONG",{});var aGr=s(ioe);VVe=r(aGr,"distilbert"),aGr.forEach(t),XVe=r(VCe," \u2014 "),sk=n(VCe,"A",{href:!0});var nGr=s(sk);zVe=r(nGr,"DistilBertConfig"),nGr.forEach(t),WVe=r(VCe," (DistilBERT model)"),VCe.forEach(t),QVe=i(y),Wf=n(y,"LI",{});var XCe=s(Wf);doe=n(XCe,"STRONG",{});var sGr=s(doe);HVe=r(sGr,"dpr"),sGr.forEach(t),UVe=r(XCe," \u2014 "),lk=n(XCe,"A",{href:!0});var lGr=s(lk);JVe=r(lGr,"DPRConfig"),lGr.forEach(t),YVe=r(XCe," (DPR model)"),XCe.forEach(t),KVe=i(y),Qf=n(y,"LI",{});var zCe=s(Qf);coe=n(zCe,"STRONG",{});var iGr=s(coe);ZVe=r(iGr,"dpt"),iGr.forEach(t),eXe=r(zCe," \u2014 "),ik=n(zCe,"A",{href:!0});var dGr=s(ik);oXe=r(dGr,"DPTConfig"),dGr.forEach(t),rXe=r(zCe," (DPT model)"),zCe.forEach(t),tXe=i(y),Hf=n(y,"LI",{});var WCe=s(Hf);foe=n(WCe,"STRONG",{});var cGr=s(foe);aXe=r(cGr,"electra"),cGr.forEach(t),nXe=r(WCe," \u2014 "),dk=n(WCe,"A",{href:!0});var fGr=s(dk);sXe=r(fGr,"ElectraConfig"),fGr.forEach(t),lXe=r(WCe," (ELECTRA model)"),WCe.forEach(t),iXe=i(y),Uf=n(y,"LI",{});var QCe=s(Uf);moe=n(QCe,"STRONG",{});var mGr=s(moe);dXe=r(mGr,"encoder-decoder"),mGr.forEach(t),cXe=r(QCe," \u2014 "),ck=n(QCe,"A",{href:!0});var gGr=s(ck);fXe=r(gGr,"EncoderDecoderConfig"),gGr.forEach(t),mXe=r(QCe," (Encoder decoder model)"),QCe.forEach(t),gXe=i(y),Jf=n(y,"LI",{});var HCe=s(Jf);goe=n(HCe,"STRONG",{});var hGr=s(goe);hXe=r(hGr,"flaubert"),hGr.forEach(t),pXe=r(HCe," \u2014 "),fk=n(HCe,"A",{href:!0});var pGr=s(fk);_Xe=r(pGr,"FlaubertConfig"),pGr.forEach(t),uXe=r(HCe," (FlauBERT model)"),HCe.forEach(t),bXe=i(y),Yf=n(y,"LI",{});var UCe=s(Yf);hoe=n(UCe,"STRONG",{});var _Gr=s(hoe);vXe=r(_Gr,"flava"),_Gr.forEach(t),FXe=r(UCe," \u2014 "),mk=n(UCe,"A",{href:!0});var uGr=s(mk);TXe=r(uGr,"FlavaConfig"),uGr.forEach(t),MXe=r(UCe," (Flava model)"),UCe.forEach(t),EXe=i(y),Kf=n(y,"LI",{});var JCe=s(Kf);poe=n(JCe,"STRONG",{});var bGr=s(poe);CXe=r(bGr,"fnet"),bGr.forEach(t),wXe=r(JCe," \u2014 "),gk=n(JCe,"A",{href:!0});var vGr=s(gk);AXe=r(vGr,"FNetConfig"),vGr.forEach(t),yXe=r(JCe," (FNet model)"),JCe.forEach(t),LXe=i(y),Zf=n(y,"LI",{});var YCe=s(Zf);_oe=n(YCe,"STRONG",{});var FGr=s(_oe);xXe=r(FGr,"fsmt"),FGr.forEach(t),$Xe=r(YCe," \u2014 "),hk=n(YCe,"A",{href:!0});var TGr=s(hk);kXe=r(TGr,"FSMTConfig"),TGr.forEach(t),SXe=r(YCe," (FairSeq Machine-Translation model)"),YCe.forEach(t),RXe=i(y),em=n(y,"LI",{});var KCe=s(em);uoe=n(KCe,"STRONG",{});var MGr=s(uoe);BXe=r(MGr,"funnel"),MGr.forEach(t),PXe=r(KCe," \u2014 "),pk=n(KCe,"A",{href:!0});var EGr=s(pk);IXe=r(EGr,"FunnelConfig"),EGr.forEach(t),qXe=r(KCe," (Funnel Transformer model)"),KCe.forEach(t),NXe=i(y),om=n(y,"LI",{});var ZCe=s(om);boe=n(ZCe,"STRONG",{});var CGr=s(boe);jXe=r(CGr,"glpn"),CGr.forEach(t),DXe=r(ZCe," \u2014 "),_k=n(ZCe,"A",{href:!0});var wGr=s(_k);GXe=r(wGr,"GLPNConfig"),wGr.forEach(t),OXe=r(ZCe," (GLPN model)"),ZCe.forEach(t),VXe=i(y),rm=n(y,"LI",{});var e5e=s(rm);voe=n(e5e,"STRONG",{});var AGr=s(voe);XXe=r(AGr,"gpt2"),AGr.forEach(t),zXe=r(e5e," \u2014 "),uk=n(e5e,"A",{href:!0});var yGr=s(uk);WXe=r(yGr,"GPT2Config"),yGr.forEach(t),QXe=r(e5e," (OpenAI GPT-2 model)"),e5e.forEach(t),HXe=i(y),tm=n(y,"LI",{});var o5e=s(tm);Foe=n(o5e,"STRONG",{});var LGr=s(Foe);UXe=r(LGr,"gpt_neo"),LGr.forEach(t),JXe=r(o5e," \u2014 "),bk=n(o5e,"A",{href:!0});var xGr=s(bk);YXe=r(xGr,"GPTNeoConfig"),xGr.forEach(t),KXe=r(o5e," (GPT Neo model)"),o5e.forEach(t),ZXe=i(y),am=n(y,"LI",{});var r5e=s(am);Toe=n(r5e,"STRONG",{});var $Gr=s(Toe);eze=r($Gr,"gptj"),$Gr.forEach(t),oze=r(r5e," \u2014 "),vk=n(r5e,"A",{href:!0});var kGr=s(vk);rze=r(kGr,"GPTJConfig"),kGr.forEach(t),tze=r(r5e," (GPT-J model)"),r5e.forEach(t),aze=i(y),nm=n(y,"LI",{});var t5e=s(nm);Moe=n(t5e,"STRONG",{});var SGr=s(Moe);nze=r(SGr,"hubert"),SGr.forEach(t),sze=r(t5e," \u2014 "),Fk=n(t5e,"A",{href:!0});var RGr=s(Fk);lze=r(RGr,"HubertConfig"),RGr.forEach(t),ize=r(t5e," (Hubert model)"),t5e.forEach(t),dze=i(y),sm=n(y,"LI",{});var a5e=s(sm);Eoe=n(a5e,"STRONG",{});var BGr=s(Eoe);cze=r(BGr,"ibert"),BGr.forEach(t),fze=r(a5e," \u2014 "),Tk=n(a5e,"A",{href:!0});var PGr=s(Tk);mze=r(PGr,"IBertConfig"),PGr.forEach(t),gze=r(a5e," (I-BERT model)"),a5e.forEach(t),hze=i(y),lm=n(y,"LI",{});var n5e=s(lm);Coe=n(n5e,"STRONG",{});var IGr=s(Coe);pze=r(IGr,"imagegpt"),IGr.forEach(t),_ze=r(n5e," \u2014 "),Mk=n(n5e,"A",{href:!0});var qGr=s(Mk);uze=r(qGr,"ImageGPTConfig"),qGr.forEach(t),bze=r(n5e," (ImageGPT model)"),n5e.forEach(t),vze=i(y),im=n(y,"LI",{});var s5e=s(im);woe=n(s5e,"STRONG",{});var NGr=s(woe);Fze=r(NGr,"layoutlm"),NGr.forEach(t),Tze=r(s5e," \u2014 "),Ek=n(s5e,"A",{href:!0});var jGr=s(Ek);Mze=r(jGr,"LayoutLMConfig"),jGr.forEach(t),Eze=r(s5e," (LayoutLM model)"),s5e.forEach(t),Cze=i(y),dm=n(y,"LI",{});var l5e=s(dm);Aoe=n(l5e,"STRONG",{});var DGr=s(Aoe);wze=r(DGr,"layoutlmv2"),DGr.forEach(t),Aze=r(l5e," \u2014 "),Ck=n(l5e,"A",{href:!0});var GGr=s(Ck);yze=r(GGr,"LayoutLMv2Config"),GGr.forEach(t),Lze=r(l5e," (LayoutLMv2 model)"),l5e.forEach(t),xze=i(y),cm=n(y,"LI",{});var i5e=s(cm);yoe=n(i5e,"STRONG",{});var OGr=s(yoe);$ze=r(OGr,"led"),OGr.forEach(t),kze=r(i5e," \u2014 "),wk=n(i5e,"A",{href:!0});var VGr=s(wk);Sze=r(VGr,"LEDConfig"),VGr.forEach(t),Rze=r(i5e," (LED model)"),i5e.forEach(t),Bze=i(y),fm=n(y,"LI",{});var d5e=s(fm);Loe=n(d5e,"STRONG",{});var XGr=s(Loe);Pze=r(XGr,"longformer"),XGr.forEach(t),Ize=r(d5e," \u2014 "),Ak=n(d5e,"A",{href:!0});var zGr=s(Ak);qze=r(zGr,"LongformerConfig"),zGr.forEach(t),Nze=r(d5e," (Longformer model)"),d5e.forEach(t),jze=i(y),mm=n(y,"LI",{});var c5e=s(mm);xoe=n(c5e,"STRONG",{});var WGr=s(xoe);Dze=r(WGr,"luke"),WGr.forEach(t),Gze=r(c5e," \u2014 "),yk=n(c5e,"A",{href:!0});var QGr=s(yk);Oze=r(QGr,"LukeConfig"),QGr.forEach(t),Vze=r(c5e," (LUKE model)"),c5e.forEach(t),Xze=i(y),gm=n(y,"LI",{});var f5e=s(gm);$oe=n(f5e,"STRONG",{});var HGr=s($oe);zze=r(HGr,"lxmert"),HGr.forEach(t),Wze=r(f5e," \u2014 "),Lk=n(f5e,"A",{href:!0});var UGr=s(Lk);Qze=r(UGr,"LxmertConfig"),UGr.forEach(t),Hze=r(f5e," (LXMERT model)"),f5e.forEach(t),Uze=i(y),hm=n(y,"LI",{});var m5e=s(hm);koe=n(m5e,"STRONG",{});var JGr=s(koe);Jze=r(JGr,"m2m_100"),JGr.forEach(t),Yze=r(m5e," \u2014 "),xk=n(m5e,"A",{href:!0});var YGr=s(xk);Kze=r(YGr,"M2M100Config"),YGr.forEach(t),Zze=r(m5e," (M2M100 model)"),m5e.forEach(t),eWe=i(y),pm=n(y,"LI",{});var g5e=s(pm);Soe=n(g5e,"STRONG",{});var KGr=s(Soe);oWe=r(KGr,"marian"),KGr.forEach(t),rWe=r(g5e," \u2014 "),$k=n(g5e,"A",{href:!0});var ZGr=s($k);tWe=r(ZGr,"MarianConfig"),ZGr.forEach(t),aWe=r(g5e," (Marian model)"),g5e.forEach(t),nWe=i(y),_m=n(y,"LI",{});var h5e=s(_m);Roe=n(h5e,"STRONG",{});var eOr=s(Roe);sWe=r(eOr,"maskformer"),eOr.forEach(t),lWe=r(h5e," \u2014 "),kk=n(h5e,"A",{href:!0});var oOr=s(kk);iWe=r(oOr,"MaskFormerConfig"),oOr.forEach(t),dWe=r(h5e," (MaskFormer model)"),h5e.forEach(t),cWe=i(y),um=n(y,"LI",{});var p5e=s(um);Boe=n(p5e,"STRONG",{});var rOr=s(Boe);fWe=r(rOr,"mbart"),rOr.forEach(t),mWe=r(p5e," \u2014 "),Sk=n(p5e,"A",{href:!0});var tOr=s(Sk);gWe=r(tOr,"MBartConfig"),tOr.forEach(t),hWe=r(p5e," (mBART model)"),p5e.forEach(t),pWe=i(y),bm=n(y,"LI",{});var _5e=s(bm);Poe=n(_5e,"STRONG",{});var aOr=s(Poe);_We=r(aOr,"megatron-bert"),aOr.forEach(t),uWe=r(_5e," \u2014 "),Rk=n(_5e,"A",{href:!0});var nOr=s(Rk);bWe=r(nOr,"MegatronBertConfig"),nOr.forEach(t),vWe=r(_5e," (MegatronBert model)"),_5e.forEach(t),FWe=i(y),vm=n(y,"LI",{});var u5e=s(vm);Ioe=n(u5e,"STRONG",{});var sOr=s(Ioe);TWe=r(sOr,"mobilebert"),sOr.forEach(t),MWe=r(u5e," \u2014 "),Bk=n(u5e,"A",{href:!0});var lOr=s(Bk);EWe=r(lOr,"MobileBertConfig"),lOr.forEach(t),CWe=r(u5e," (MobileBERT model)"),u5e.forEach(t),wWe=i(y),Fm=n(y,"LI",{});var b5e=s(Fm);qoe=n(b5e,"STRONG",{});var iOr=s(qoe);AWe=r(iOr,"mpnet"),iOr.forEach(t),yWe=r(b5e," \u2014 "),Pk=n(b5e,"A",{href:!0});var dOr=s(Pk);LWe=r(dOr,"MPNetConfig"),dOr.forEach(t),xWe=r(b5e," (MPNet model)"),b5e.forEach(t),$We=i(y),Tm=n(y,"LI",{});var v5e=s(Tm);Noe=n(v5e,"STRONG",{});var cOr=s(Noe);kWe=r(cOr,"mt5"),cOr.forEach(t),SWe=r(v5e," \u2014 "),Ik=n(v5e,"A",{href:!0});var fOr=s(Ik);RWe=r(fOr,"MT5Config"),fOr.forEach(t),BWe=r(v5e," (mT5 model)"),v5e.forEach(t),PWe=i(y),Mm=n(y,"LI",{});var F5e=s(Mm);joe=n(F5e,"STRONG",{});var mOr=s(joe);IWe=r(mOr,"nystromformer"),mOr.forEach(t),qWe=r(F5e," \u2014 "),qk=n(F5e,"A",{href:!0});var gOr=s(qk);NWe=r(gOr,"NystromformerConfig"),gOr.forEach(t),jWe=r(F5e," (Nystromformer model)"),F5e.forEach(t),DWe=i(y),Em=n(y,"LI",{});var T5e=s(Em);Doe=n(T5e,"STRONG",{});var hOr=s(Doe);GWe=r(hOr,"openai-gpt"),hOr.forEach(t),OWe=r(T5e," \u2014 "),Nk=n(T5e,"A",{href:!0});var pOr=s(Nk);VWe=r(pOr,"OpenAIGPTConfig"),pOr.forEach(t),XWe=r(T5e," (OpenAI GPT model)"),T5e.forEach(t),zWe=i(y),Cm=n(y,"LI",{});var M5e=s(Cm);Goe=n(M5e,"STRONG",{});var _Or=s(Goe);WWe=r(_Or,"opt"),_Or.forEach(t),QWe=r(M5e," \u2014 "),jk=n(M5e,"A",{href:!0});var uOr=s(jk);HWe=r(uOr,"OPTConfig"),uOr.forEach(t),UWe=r(M5e," (OPT model)"),M5e.forEach(t),JWe=i(y),wm=n(y,"LI",{});var E5e=s(wm);Ooe=n(E5e,"STRONG",{});var bOr=s(Ooe);YWe=r(bOr,"pegasus"),bOr.forEach(t),KWe=r(E5e," \u2014 "),Dk=n(E5e,"A",{href:!0});var vOr=s(Dk);ZWe=r(vOr,"PegasusConfig"),vOr.forEach(t),eQe=r(E5e," (Pegasus model)"),E5e.forEach(t),oQe=i(y),Am=n(y,"LI",{});var C5e=s(Am);Voe=n(C5e,"STRONG",{});var FOr=s(Voe);rQe=r(FOr,"perceiver"),FOr.forEach(t),tQe=r(C5e," \u2014 "),Gk=n(C5e,"A",{href:!0});var TOr=s(Gk);aQe=r(TOr,"PerceiverConfig"),TOr.forEach(t),nQe=r(C5e," (Perceiver model)"),C5e.forEach(t),sQe=i(y),ym=n(y,"LI",{});var w5e=s(ym);Xoe=n(w5e,"STRONG",{});var MOr=s(Xoe);lQe=r(MOr,"plbart"),MOr.forEach(t),iQe=r(w5e," \u2014 "),Ok=n(w5e,"A",{href:!0});var EOr=s(Ok);dQe=r(EOr,"PLBartConfig"),EOr.forEach(t),cQe=r(w5e," (PLBart model)"),w5e.forEach(t),fQe=i(y),Lm=n(y,"LI",{});var A5e=s(Lm);zoe=n(A5e,"STRONG",{});var COr=s(zoe);mQe=r(COr,"poolformer"),COr.forEach(t),gQe=r(A5e," \u2014 "),Vk=n(A5e,"A",{href:!0});var wOr=s(Vk);hQe=r(wOr,"PoolFormerConfig"),wOr.forEach(t),pQe=r(A5e," (PoolFormer model)"),A5e.forEach(t),_Qe=i(y),xm=n(y,"LI",{});var y5e=s(xm);Woe=n(y5e,"STRONG",{});var AOr=s(Woe);uQe=r(AOr,"prophetnet"),AOr.forEach(t),bQe=r(y5e," \u2014 "),Xk=n(y5e,"A",{href:!0});var yOr=s(Xk);vQe=r(yOr,"ProphetNetConfig"),yOr.forEach(t),FQe=r(y5e," (ProphetNet model)"),y5e.forEach(t),TQe=i(y),$m=n(y,"LI",{});var L5e=s($m);Qoe=n(L5e,"STRONG",{});var LOr=s(Qoe);MQe=r(LOr,"qdqbert"),LOr.forEach(t),EQe=r(L5e," \u2014 "),zk=n(L5e,"A",{href:!0});var xOr=s(zk);CQe=r(xOr,"QDQBertConfig"),xOr.forEach(t),wQe=r(L5e," (QDQBert model)"),L5e.forEach(t),AQe=i(y),km=n(y,"LI",{});var x5e=s(km);Hoe=n(x5e,"STRONG",{});var $Or=s(Hoe);yQe=r($Or,"rag"),$Or.forEach(t),LQe=r(x5e," \u2014 "),Wk=n(x5e,"A",{href:!0});var kOr=s(Wk);xQe=r(kOr,"RagConfig"),kOr.forEach(t),$Qe=r(x5e," (RAG model)"),x5e.forEach(t),kQe=i(y),Sm=n(y,"LI",{});var $5e=s(Sm);Uoe=n($5e,"STRONG",{});var SOr=s(Uoe);SQe=r(SOr,"realm"),SOr.forEach(t),RQe=r($5e," \u2014 "),Qk=n($5e,"A",{href:!0});var ROr=s(Qk);BQe=r(ROr,"RealmConfig"),ROr.forEach(t),PQe=r($5e," (Realm model)"),$5e.forEach(t),IQe=i(y),Rm=n(y,"LI",{});var k5e=s(Rm);Joe=n(k5e,"STRONG",{});var BOr=s(Joe);qQe=r(BOr,"reformer"),BOr.forEach(t),NQe=r(k5e," \u2014 "),Hk=n(k5e,"A",{href:!0});var POr=s(Hk);jQe=r(POr,"ReformerConfig"),POr.forEach(t),DQe=r(k5e," (Reformer model)"),k5e.forEach(t),GQe=i(y),Bm=n(y,"LI",{});var S5e=s(Bm);Yoe=n(S5e,"STRONG",{});var IOr=s(Yoe);OQe=r(IOr,"regnet"),IOr.forEach(t),VQe=r(S5e," \u2014 "),Uk=n(S5e,"A",{href:!0});var qOr=s(Uk);XQe=r(qOr,"RegNetConfig"),qOr.forEach(t),zQe=r(S5e," (RegNet model)"),S5e.forEach(t),WQe=i(y),Pm=n(y,"LI",{});var R5e=s(Pm);Koe=n(R5e,"STRONG",{});var NOr=s(Koe);QQe=r(NOr,"rembert"),NOr.forEach(t),HQe=r(R5e," \u2014 "),Jk=n(R5e,"A",{href:!0});var jOr=s(Jk);UQe=r(jOr,"RemBertConfig"),jOr.forEach(t),JQe=r(R5e," (RemBERT model)"),R5e.forEach(t),YQe=i(y),Im=n(y,"LI",{});var B5e=s(Im);Zoe=n(B5e,"STRONG",{});var DOr=s(Zoe);KQe=r(DOr,"resnet"),DOr.forEach(t),ZQe=r(B5e," \u2014 "),Yk=n(B5e,"A",{href:!0});var GOr=s(Yk);eHe=r(GOr,"ResNetConfig"),GOr.forEach(t),oHe=r(B5e," (ResNet model)"),B5e.forEach(t),rHe=i(y),qm=n(y,"LI",{});var P5e=s(qm);ere=n(P5e,"STRONG",{});var OOr=s(ere);tHe=r(OOr,"retribert"),OOr.forEach(t),aHe=r(P5e," \u2014 "),Kk=n(P5e,"A",{href:!0});var VOr=s(Kk);nHe=r(VOr,"RetriBertConfig"),VOr.forEach(t),sHe=r(P5e," (RetriBERT model)"),P5e.forEach(t),lHe=i(y),Nm=n(y,"LI",{});var I5e=s(Nm);ore=n(I5e,"STRONG",{});var XOr=s(ore);iHe=r(XOr,"roberta"),XOr.forEach(t),dHe=r(I5e," \u2014 "),Zk=n(I5e,"A",{href:!0});var zOr=s(Zk);cHe=r(zOr,"RobertaConfig"),zOr.forEach(t),fHe=r(I5e," (RoBERTa model)"),I5e.forEach(t),mHe=i(y),jm=n(y,"LI",{});var q5e=s(jm);rre=n(q5e,"STRONG",{});var WOr=s(rre);gHe=r(WOr,"roformer"),WOr.forEach(t),hHe=r(q5e," \u2014 "),eS=n(q5e,"A",{href:!0});var QOr=s(eS);pHe=r(QOr,"RoFormerConfig"),QOr.forEach(t),_He=r(q5e," (RoFormer model)"),q5e.forEach(t),uHe=i(y),Dm=n(y,"LI",{});var N5e=s(Dm);tre=n(N5e,"STRONG",{});var HOr=s(tre);bHe=r(HOr,"segformer"),HOr.forEach(t),vHe=r(N5e," \u2014 "),oS=n(N5e,"A",{href:!0});var UOr=s(oS);FHe=r(UOr,"SegformerConfig"),UOr.forEach(t),THe=r(N5e," (SegFormer model)"),N5e.forEach(t),MHe=i(y),Gm=n(y,"LI",{});var j5e=s(Gm);are=n(j5e,"STRONG",{});var JOr=s(are);EHe=r(JOr,"sew"),JOr.forEach(t),CHe=r(j5e," \u2014 "),rS=n(j5e,"A",{href:!0});var YOr=s(rS);wHe=r(YOr,"SEWConfig"),YOr.forEach(t),AHe=r(j5e," (SEW model)"),j5e.forEach(t),yHe=i(y),Om=n(y,"LI",{});var D5e=s(Om);nre=n(D5e,"STRONG",{});var KOr=s(nre);LHe=r(KOr,"sew-d"),KOr.forEach(t),xHe=r(D5e," \u2014 "),tS=n(D5e,"A",{href:!0});var ZOr=s(tS);$He=r(ZOr,"SEWDConfig"),ZOr.forEach(t),kHe=r(D5e," (SEW-D model)"),D5e.forEach(t),SHe=i(y),Vm=n(y,"LI",{});var G5e=s(Vm);sre=n(G5e,"STRONG",{});var eVr=s(sre);RHe=r(eVr,"speech-encoder-decoder"),eVr.forEach(t),BHe=r(G5e," \u2014 "),aS=n(G5e,"A",{href:!0});var oVr=s(aS);PHe=r(oVr,"SpeechEncoderDecoderConfig"),oVr.forEach(t),IHe=r(G5e," (Speech Encoder decoder model)"),G5e.forEach(t),qHe=i(y),Xm=n(y,"LI",{});var O5e=s(Xm);lre=n(O5e,"STRONG",{});var rVr=s(lre);NHe=r(rVr,"speech_to_text"),rVr.forEach(t),jHe=r(O5e," \u2014 "),nS=n(O5e,"A",{href:!0});var tVr=s(nS);DHe=r(tVr,"Speech2TextConfig"),tVr.forEach(t),GHe=r(O5e," (Speech2Text model)"),O5e.forEach(t),OHe=i(y),zm=n(y,"LI",{});var V5e=s(zm);ire=n(V5e,"STRONG",{});var aVr=s(ire);VHe=r(aVr,"speech_to_text_2"),aVr.forEach(t),XHe=r(V5e," \u2014 "),sS=n(V5e,"A",{href:!0});var nVr=s(sS);zHe=r(nVr,"Speech2Text2Config"),nVr.forEach(t),WHe=r(V5e," (Speech2Text2 model)"),V5e.forEach(t),QHe=i(y),Wm=n(y,"LI",{});var X5e=s(Wm);dre=n(X5e,"STRONG",{});var sVr=s(dre);HHe=r(sVr,"splinter"),sVr.forEach(t),UHe=r(X5e," \u2014 "),lS=n(X5e,"A",{href:!0});var lVr=s(lS);JHe=r(lVr,"SplinterConfig"),lVr.forEach(t),YHe=r(X5e," (Splinter model)"),X5e.forEach(t),KHe=i(y),Qm=n(y,"LI",{});var z5e=s(Qm);cre=n(z5e,"STRONG",{});var iVr=s(cre);ZHe=r(iVr,"squeezebert"),iVr.forEach(t),eUe=r(z5e," \u2014 "),iS=n(z5e,"A",{href:!0});var dVr=s(iS);oUe=r(dVr,"SqueezeBertConfig"),dVr.forEach(t),rUe=r(z5e," (SqueezeBERT model)"),z5e.forEach(t),tUe=i(y),Hm=n(y,"LI",{});var W5e=s(Hm);fre=n(W5e,"STRONG",{});var cVr=s(fre);aUe=r(cVr,"swin"),cVr.forEach(t),nUe=r(W5e," \u2014 "),dS=n(W5e,"A",{href:!0});var fVr=s(dS);sUe=r(fVr,"SwinConfig"),fVr.forEach(t),lUe=r(W5e," (Swin model)"),W5e.forEach(t),iUe=i(y),Um=n(y,"LI",{});var Q5e=s(Um);mre=n(Q5e,"STRONG",{});var mVr=s(mre);dUe=r(mVr,"t5"),mVr.forEach(t),cUe=r(Q5e," \u2014 "),cS=n(Q5e,"A",{href:!0});var gVr=s(cS);fUe=r(gVr,"T5Config"),gVr.forEach(t),mUe=r(Q5e," (T5 model)"),Q5e.forEach(t),gUe=i(y),Jm=n(y,"LI",{});var H5e=s(Jm);gre=n(H5e,"STRONG",{});var hVr=s(gre);hUe=r(hVr,"tapas"),hVr.forEach(t),pUe=r(H5e," \u2014 "),fS=n(H5e,"A",{href:!0});var pVr=s(fS);_Ue=r(pVr,"TapasConfig"),pVr.forEach(t),uUe=r(H5e," (TAPAS model)"),H5e.forEach(t),bUe=i(y),Ym=n(y,"LI",{});var U5e=s(Ym);hre=n(U5e,"STRONG",{});var _Vr=s(hre);vUe=r(_Vr,"transfo-xl"),_Vr.forEach(t),FUe=r(U5e," \u2014 "),mS=n(U5e,"A",{href:!0});var uVr=s(mS);TUe=r(uVr,"TransfoXLConfig"),uVr.forEach(t),MUe=r(U5e," (Transformer-XL model)"),U5e.forEach(t),EUe=i(y),Km=n(y,"LI",{});var J5e=s(Km);pre=n(J5e,"STRONG",{});var bVr=s(pre);CUe=r(bVr,"trocr"),bVr.forEach(t),wUe=r(J5e," \u2014 "),gS=n(J5e,"A",{href:!0});var vVr=s(gS);AUe=r(vVr,"TrOCRConfig"),vVr.forEach(t),yUe=r(J5e," (TrOCR model)"),J5e.forEach(t),LUe=i(y),Zm=n(y,"LI",{});var Y5e=s(Zm);_re=n(Y5e,"STRONG",{});var FVr=s(_re);xUe=r(FVr,"unispeech"),FVr.forEach(t),$Ue=r(Y5e," \u2014 "),hS=n(Y5e,"A",{href:!0});var TVr=s(hS);kUe=r(TVr,"UniSpeechConfig"),TVr.forEach(t),SUe=r(Y5e," (UniSpeech model)"),Y5e.forEach(t),RUe=i(y),eg=n(y,"LI",{});var K5e=s(eg);ure=n(K5e,"STRONG",{});var MVr=s(ure);BUe=r(MVr,"unispeech-sat"),MVr.forEach(t),PUe=r(K5e," \u2014 "),pS=n(K5e,"A",{href:!0});var EVr=s(pS);IUe=r(EVr,"UniSpeechSatConfig"),EVr.forEach(t),qUe=r(K5e," (UniSpeechSat model)"),K5e.forEach(t),NUe=i(y),og=n(y,"LI",{});var Z5e=s(og);bre=n(Z5e,"STRONG",{});var CVr=s(bre);jUe=r(CVr,"van"),CVr.forEach(t),DUe=r(Z5e," \u2014 "),_S=n(Z5e,"A",{href:!0});var wVr=s(_S);GUe=r(wVr,"VanConfig"),wVr.forEach(t),OUe=r(Z5e," (VAN model)"),Z5e.forEach(t),VUe=i(y),rg=n(y,"LI",{});var e3e=s(rg);vre=n(e3e,"STRONG",{});var AVr=s(vre);XUe=r(AVr,"vilt"),AVr.forEach(t),zUe=r(e3e," \u2014 "),uS=n(e3e,"A",{href:!0});var yVr=s(uS);WUe=r(yVr,"ViltConfig"),yVr.forEach(t),QUe=r(e3e," (ViLT model)"),e3e.forEach(t),HUe=i(y),tg=n(y,"LI",{});var o3e=s(tg);Fre=n(o3e,"STRONG",{});var LVr=s(Fre);UUe=r(LVr,"vision-encoder-decoder"),LVr.forEach(t),JUe=r(o3e," \u2014 "),bS=n(o3e,"A",{href:!0});var xVr=s(bS);YUe=r(xVr,"VisionEncoderDecoderConfig"),xVr.forEach(t),KUe=r(o3e," (Vision Encoder decoder model)"),o3e.forEach(t),ZUe=i(y),ag=n(y,"LI",{});var r3e=s(ag);Tre=n(r3e,"STRONG",{});var $Vr=s(Tre);eJe=r($Vr,"vision-text-dual-encoder"),$Vr.forEach(t),oJe=r(r3e," \u2014 "),vS=n(r3e,"A",{href:!0});var kVr=s(vS);rJe=r(kVr,"VisionTextDualEncoderConfig"),kVr.forEach(t),tJe=r(r3e," (VisionTextDualEncoder model)"),r3e.forEach(t),aJe=i(y),ng=n(y,"LI",{});var t3e=s(ng);Mre=n(t3e,"STRONG",{});var SVr=s(Mre);nJe=r(SVr,"visual_bert"),SVr.forEach(t),sJe=r(t3e," \u2014 "),FS=n(t3e,"A",{href:!0});var RVr=s(FS);lJe=r(RVr,"VisualBertConfig"),RVr.forEach(t),iJe=r(t3e," (VisualBert model)"),t3e.forEach(t),dJe=i(y),sg=n(y,"LI",{});var a3e=s(sg);Ere=n(a3e,"STRONG",{});var BVr=s(Ere);cJe=r(BVr,"vit"),BVr.forEach(t),fJe=r(a3e," \u2014 "),TS=n(a3e,"A",{href:!0});var PVr=s(TS);mJe=r(PVr,"ViTConfig"),PVr.forEach(t),gJe=r(a3e," (ViT model)"),a3e.forEach(t),hJe=i(y),lg=n(y,"LI",{});var n3e=s(lg);Cre=n(n3e,"STRONG",{});var IVr=s(Cre);pJe=r(IVr,"vit_mae"),IVr.forEach(t),_Je=r(n3e," \u2014 "),MS=n(n3e,"A",{href:!0});var qVr=s(MS);uJe=r(qVr,"ViTMAEConfig"),qVr.forEach(t),bJe=r(n3e," (ViTMAE model)"),n3e.forEach(t),vJe=i(y),ig=n(y,"LI",{});var s3e=s(ig);wre=n(s3e,"STRONG",{});var NVr=s(wre);FJe=r(NVr,"wav2vec2"),NVr.forEach(t),TJe=r(s3e," \u2014 "),ES=n(s3e,"A",{href:!0});var jVr=s(ES);MJe=r(jVr,"Wav2Vec2Config"),jVr.forEach(t),EJe=r(s3e," (Wav2Vec2 model)"),s3e.forEach(t),CJe=i(y),dg=n(y,"LI",{});var l3e=s(dg);Are=n(l3e,"STRONG",{});var DVr=s(Are);wJe=r(DVr,"wav2vec2-conformer"),DVr.forEach(t),AJe=r(l3e," \u2014 "),CS=n(l3e,"A",{href:!0});var GVr=s(CS);yJe=r(GVr,"Wav2Vec2ConformerConfig"),GVr.forEach(t),LJe=r(l3e," (Wav2Vec2-Conformer model)"),l3e.forEach(t),xJe=i(y),cg=n(y,"LI",{});var i3e=s(cg);yre=n(i3e,"STRONG",{});var OVr=s(yre);$Je=r(OVr,"wavlm"),OVr.forEach(t),kJe=r(i3e," \u2014 "),wS=n(i3e,"A",{href:!0});var VVr=s(wS);SJe=r(VVr,"WavLMConfig"),VVr.forEach(t),RJe=r(i3e," (WavLM model)"),i3e.forEach(t),BJe=i(y),fg=n(y,"LI",{});var d3e=s(fg);Lre=n(d3e,"STRONG",{});var XVr=s(Lre);PJe=r(XVr,"xglm"),XVr.forEach(t),IJe=r(d3e," \u2014 "),AS=n(d3e,"A",{href:!0});var zVr=s(AS);qJe=r(zVr,"XGLMConfig"),zVr.forEach(t),NJe=r(d3e," (XGLM model)"),d3e.forEach(t),jJe=i(y),mg=n(y,"LI",{});var c3e=s(mg);xre=n(c3e,"STRONG",{});var WVr=s(xre);DJe=r(WVr,"xlm"),WVr.forEach(t),GJe=r(c3e," \u2014 "),yS=n(c3e,"A",{href:!0});var QVr=s(yS);OJe=r(QVr,"XLMConfig"),QVr.forEach(t),VJe=r(c3e," (XLM model)"),c3e.forEach(t),XJe=i(y),gg=n(y,"LI",{});var f3e=s(gg);$re=n(f3e,"STRONG",{});var HVr=s($re);zJe=r(HVr,"xlm-prophetnet"),HVr.forEach(t),WJe=r(f3e," \u2014 "),LS=n(f3e,"A",{href:!0});var UVr=s(LS);QJe=r(UVr,"XLMProphetNetConfig"),UVr.forEach(t),HJe=r(f3e," (XLMProphetNet model)"),f3e.forEach(t),UJe=i(y),hg=n(y,"LI",{});var m3e=s(hg);kre=n(m3e,"STRONG",{});var JVr=s(kre);JJe=r(JVr,"xlm-roberta"),JVr.forEach(t),YJe=r(m3e," \u2014 "),xS=n(m3e,"A",{href:!0});var YVr=s(xS);KJe=r(YVr,"XLMRobertaConfig"),YVr.forEach(t),ZJe=r(m3e," (XLM-RoBERTa model)"),m3e.forEach(t),eYe=i(y),pg=n(y,"LI",{});var g3e=s(pg);Sre=n(g3e,"STRONG",{});var KVr=s(Sre);oYe=r(KVr,"xlm-roberta-xl"),KVr.forEach(t),rYe=r(g3e," \u2014 "),$S=n(g3e,"A",{href:!0});var ZVr=s($S);tYe=r(ZVr,"XLMRobertaXLConfig"),ZVr.forEach(t),aYe=r(g3e," (XLM-RoBERTa-XL model)"),g3e.forEach(t),nYe=i(y),_g=n(y,"LI",{});var h3e=s(_g);Rre=n(h3e,"STRONG",{});var eXr=s(Rre);sYe=r(eXr,"xlnet"),eXr.forEach(t),lYe=r(h3e," \u2014 "),kS=n(h3e,"A",{href:!0});var oXr=s(kS);iYe=r(oXr,"XLNetConfig"),oXr.forEach(t),dYe=r(h3e," (XLNet model)"),h3e.forEach(t),cYe=i(y),ug=n(y,"LI",{});var p3e=s(ug);Bre=n(p3e,"STRONG",{});var rXr=s(Bre);fYe=r(rXr,"yolos"),rXr.forEach(t),mYe=r(p3e," \u2014 "),SS=n(p3e,"A",{href:!0});var tXr=s(SS);gYe=r(tXr,"YolosConfig"),tXr.forEach(t),hYe=r(p3e," (YOLOS model)"),p3e.forEach(t),pYe=i(y),bg=n(y,"LI",{});var _3e=s(bg);Pre=n(_3e,"STRONG",{});var aXr=s(Pre);_Ye=r(aXr,"yoso"),aXr.forEach(t),uYe=r(_3e," \u2014 "),RS=n(_3e,"A",{href:!0});var nXr=s(RS);bYe=r(nXr,"YosoConfig"),nXr.forEach(t),vYe=r(_3e," (YOSO model)"),_3e.forEach(t),y.forEach(t),FYe=i(ot),T(vg.$$.fragment,ot),ot.forEach(t),TYe=i(et),Fg=n(et,"DIV",{class:!0});var UNe=s(Fg);T(v6.$$.fragment,UNe),MYe=i(UNe),Ire=n(UNe,"P",{});var sXr=s(Ire);EYe=r(sXr,"Register a new configuration for this class."),sXr.forEach(t),UNe.forEach(t),et.forEach(t),KIe=i(f),Fi=n(f,"H2",{class:!0});var JNe=s(Fi);Tg=n(JNe,"A",{id:!0,class:!0,href:!0});var lXr=s(Tg);qre=n(lXr,"SPAN",{});var iXr=s(qre);T(F6.$$.fragment,iXr),iXr.forEach(t),lXr.forEach(t),CYe=i(JNe),Nre=n(JNe,"SPAN",{});var dXr=s(Nre);wYe=r(dXr,"AutoTokenizer"),dXr.forEach(t),JNe.forEach(t),ZIe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(T6.$$.fragment,Is),AYe=i(Is),M6=n(Is,"P",{});var YNe=s(M6);yYe=r(YNe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),BS=n(YNe,"A",{href:!0});var cXr=s(BS);LYe=r(cXr,"AutoTokenizer.from_pretrained()"),cXr.forEach(t),xYe=r(YNe," class method."),YNe.forEach(t),$Ye=i(Is),E6=n(Is,"P",{});var KNe=s(E6);kYe=r(KNe,"This class cannot be instantiated directly using "),jre=n(KNe,"CODE",{});var fXr=s(jre);SYe=r(fXr,"__init__()"),fXr.forEach(t),RYe=r(KNe," (throws an error)."),KNe.forEach(t),BYe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(C6.$$.fragment,qs),PYe=i(qs),Dre=n(qs,"P",{});var mXr=s(Dre);IYe=r(mXr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),mXr.forEach(t),qYe=i(qs),Aa=n(qs,"P",{});var hw=s(Aa);NYe=r(hw,"The tokenizer class to instantiate is selected based on the "),Gre=n(hw,"CODE",{});var gXr=s(Gre);jYe=r(gXr,"model_type"),gXr.forEach(t),DYe=r(hw,` property of the config object (either
passed as an argument or loaded from `),Ore=n(hw,"CODE",{});var hXr=s(Ore);GYe=r(hXr,"pretrained_model_name_or_path"),hXr.forEach(t),OYe=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vre=n(hw,"CODE",{});var pXr=s(Vre);VYe=r(pXr,"pretrained_model_name_or_path"),pXr.forEach(t),XYe=r(hw,":"),hw.forEach(t),zYe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var wx=s(Sn);Xre=n(wx,"STRONG",{});var _Xr=s(Xre);WYe=r(_Xr,"albert"),_Xr.forEach(t),QYe=r(wx," \u2014 "),PS=n(wx,"A",{href:!0});var uXr=s(PS);HYe=r(uXr,"AlbertTokenizer"),uXr.forEach(t),UYe=r(wx," or "),IS=n(wx,"A",{href:!0});var bXr=s(IS);JYe=r(bXr,"AlbertTokenizerFast"),bXr.forEach(t),YYe=r(wx," (ALBERT model)"),wx.forEach(t),KYe=i(S),Rn=n(S,"LI",{});var Ax=s(Rn);zre=n(Ax,"STRONG",{});var vXr=s(zre);ZYe=r(vXr,"bart"),vXr.forEach(t),eKe=r(Ax," \u2014 "),qS=n(Ax,"A",{href:!0});var FXr=s(qS);oKe=r(FXr,"BartTokenizer"),FXr.forEach(t),rKe=r(Ax," or "),NS=n(Ax,"A",{href:!0});var TXr=s(NS);tKe=r(TXr,"BartTokenizerFast"),TXr.forEach(t),aKe=r(Ax," (BART model)"),Ax.forEach(t),nKe=i(S),Bn=n(S,"LI",{});var yx=s(Bn);Wre=n(yx,"STRONG",{});var MXr=s(Wre);sKe=r(MXr,"barthez"),MXr.forEach(t),lKe=r(yx," \u2014 "),jS=n(yx,"A",{href:!0});var EXr=s(jS);iKe=r(EXr,"BarthezTokenizer"),EXr.forEach(t),dKe=r(yx," or "),DS=n(yx,"A",{href:!0});var CXr=s(DS);cKe=r(CXr,"BarthezTokenizerFast"),CXr.forEach(t),fKe=r(yx," (BARThez model)"),yx.forEach(t),mKe=i(S),Mg=n(S,"LI",{});var u3e=s(Mg);Qre=n(u3e,"STRONG",{});var wXr=s(Qre);gKe=r(wXr,"bartpho"),wXr.forEach(t),hKe=r(u3e," \u2014 "),GS=n(u3e,"A",{href:!0});var AXr=s(GS);pKe=r(AXr,"BartphoTokenizer"),AXr.forEach(t),_Ke=r(u3e," (BARTpho model)"),u3e.forEach(t),uKe=i(S),Pn=n(S,"LI",{});var Lx=s(Pn);Hre=n(Lx,"STRONG",{});var yXr=s(Hre);bKe=r(yXr,"bert"),yXr.forEach(t),vKe=r(Lx," \u2014 "),OS=n(Lx,"A",{href:!0});var LXr=s(OS);FKe=r(LXr,"BertTokenizer"),LXr.forEach(t),TKe=r(Lx," or "),VS=n(Lx,"A",{href:!0});var xXr=s(VS);MKe=r(xXr,"BertTokenizerFast"),xXr.forEach(t),EKe=r(Lx," (BERT model)"),Lx.forEach(t),CKe=i(S),Eg=n(S,"LI",{});var b3e=s(Eg);Ure=n(b3e,"STRONG",{});var $Xr=s(Ure);wKe=r($Xr,"bert-generation"),$Xr.forEach(t),AKe=r(b3e," \u2014 "),XS=n(b3e,"A",{href:!0});var kXr=s(XS);yKe=r(kXr,"BertGenerationTokenizer"),kXr.forEach(t),LKe=r(b3e," (Bert Generation model)"),b3e.forEach(t),xKe=i(S),Cg=n(S,"LI",{});var v3e=s(Cg);Jre=n(v3e,"STRONG",{});var SXr=s(Jre);$Ke=r(SXr,"bert-japanese"),SXr.forEach(t),kKe=r(v3e," \u2014 "),zS=n(v3e,"A",{href:!0});var RXr=s(zS);SKe=r(RXr,"BertJapaneseTokenizer"),RXr.forEach(t),RKe=r(v3e," (BertJapanese model)"),v3e.forEach(t),BKe=i(S),wg=n(S,"LI",{});var F3e=s(wg);Yre=n(F3e,"STRONG",{});var BXr=s(Yre);PKe=r(BXr,"bertweet"),BXr.forEach(t),IKe=r(F3e," \u2014 "),WS=n(F3e,"A",{href:!0});var PXr=s(WS);qKe=r(PXr,"BertweetTokenizer"),PXr.forEach(t),NKe=r(F3e," (Bertweet model)"),F3e.forEach(t),jKe=i(S),In=n(S,"LI",{});var xx=s(In);Kre=n(xx,"STRONG",{});var IXr=s(Kre);DKe=r(IXr,"big_bird"),IXr.forEach(t),GKe=r(xx," \u2014 "),QS=n(xx,"A",{href:!0});var qXr=s(QS);OKe=r(qXr,"BigBirdTokenizer"),qXr.forEach(t),VKe=r(xx," or "),HS=n(xx,"A",{href:!0});var NXr=s(HS);XKe=r(NXr,"BigBirdTokenizerFast"),NXr.forEach(t),zKe=r(xx," (BigBird model)"),xx.forEach(t),WKe=i(S),qn=n(S,"LI",{});var $x=s(qn);Zre=n($x,"STRONG",{});var jXr=s(Zre);QKe=r(jXr,"bigbird_pegasus"),jXr.forEach(t),HKe=r($x," \u2014 "),US=n($x,"A",{href:!0});var DXr=s(US);UKe=r(DXr,"PegasusTokenizer"),DXr.forEach(t),JKe=r($x," or "),JS=n($x,"A",{href:!0});var GXr=s(JS);YKe=r(GXr,"PegasusTokenizerFast"),GXr.forEach(t),KKe=r($x," (BigBirdPegasus model)"),$x.forEach(t),ZKe=i(S),Nn=n(S,"LI",{});var kx=s(Nn);ete=n(kx,"STRONG",{});var OXr=s(ete);eZe=r(OXr,"blenderbot"),OXr.forEach(t),oZe=r(kx," \u2014 "),YS=n(kx,"A",{href:!0});var VXr=s(YS);rZe=r(VXr,"BlenderbotTokenizer"),VXr.forEach(t),tZe=r(kx," or "),KS=n(kx,"A",{href:!0});var XXr=s(KS);aZe=r(XXr,"BlenderbotTokenizerFast"),XXr.forEach(t),nZe=r(kx," (Blenderbot model)"),kx.forEach(t),sZe=i(S),Ag=n(S,"LI",{});var T3e=s(Ag);ote=n(T3e,"STRONG",{});var zXr=s(ote);lZe=r(zXr,"blenderbot-small"),zXr.forEach(t),iZe=r(T3e," \u2014 "),ZS=n(T3e,"A",{href:!0});var WXr=s(ZS);dZe=r(WXr,"BlenderbotSmallTokenizer"),WXr.forEach(t),cZe=r(T3e," (BlenderbotSmall model)"),T3e.forEach(t),fZe=i(S),yg=n(S,"LI",{});var M3e=s(yg);rte=n(M3e,"STRONG",{});var QXr=s(rte);mZe=r(QXr,"bloom"),QXr.forEach(t),gZe=r(M3e," \u2014 "),eR=n(M3e,"A",{href:!0});var HXr=s(eR);hZe=r(HXr,"BloomTokenizerFast"),HXr.forEach(t),pZe=r(M3e," (Bloom model)"),M3e.forEach(t),_Ze=i(S),Lg=n(S,"LI",{});var E3e=s(Lg);tte=n(E3e,"STRONG",{});var UXr=s(tte);uZe=r(UXr,"byt5"),UXr.forEach(t),bZe=r(E3e," \u2014 "),oR=n(E3e,"A",{href:!0});var JXr=s(oR);vZe=r(JXr,"ByT5Tokenizer"),JXr.forEach(t),FZe=r(E3e," (ByT5 model)"),E3e.forEach(t),TZe=i(S),jn=n(S,"LI",{});var Sx=s(jn);ate=n(Sx,"STRONG",{});var YXr=s(ate);MZe=r(YXr,"camembert"),YXr.forEach(t),EZe=r(Sx," \u2014 "),rR=n(Sx,"A",{href:!0});var KXr=s(rR);CZe=r(KXr,"CamembertTokenizer"),KXr.forEach(t),wZe=r(Sx," or "),tR=n(Sx,"A",{href:!0});var ZXr=s(tR);AZe=r(ZXr,"CamembertTokenizerFast"),ZXr.forEach(t),yZe=r(Sx," (CamemBERT model)"),Sx.forEach(t),LZe=i(S),xg=n(S,"LI",{});var C3e=s(xg);nte=n(C3e,"STRONG",{});var ezr=s(nte);xZe=r(ezr,"canine"),ezr.forEach(t),$Ze=r(C3e," \u2014 "),aR=n(C3e,"A",{href:!0});var ozr=s(aR);kZe=r(ozr,"CanineTokenizer"),ozr.forEach(t),SZe=r(C3e," (Canine model)"),C3e.forEach(t),RZe=i(S),Dn=n(S,"LI",{});var Rx=s(Dn);ste=n(Rx,"STRONG",{});var rzr=s(ste);BZe=r(rzr,"clip"),rzr.forEach(t),PZe=r(Rx," \u2014 "),nR=n(Rx,"A",{href:!0});var tzr=s(nR);IZe=r(tzr,"CLIPTokenizer"),tzr.forEach(t),qZe=r(Rx," or "),sR=n(Rx,"A",{href:!0});var azr=s(sR);NZe=r(azr,"CLIPTokenizerFast"),azr.forEach(t),jZe=r(Rx," (CLIP model)"),Rx.forEach(t),DZe=i(S),Gn=n(S,"LI",{});var Bx=s(Gn);lte=n(Bx,"STRONG",{});var nzr=s(lte);GZe=r(nzr,"convbert"),nzr.forEach(t),OZe=r(Bx," \u2014 "),lR=n(Bx,"A",{href:!0});var szr=s(lR);VZe=r(szr,"ConvBertTokenizer"),szr.forEach(t),XZe=r(Bx," or "),iR=n(Bx,"A",{href:!0});var lzr=s(iR);zZe=r(lzr,"ConvBertTokenizerFast"),lzr.forEach(t),WZe=r(Bx," (ConvBERT model)"),Bx.forEach(t),QZe=i(S),On=n(S,"LI",{});var Px=s(On);ite=n(Px,"STRONG",{});var izr=s(ite);HZe=r(izr,"cpm"),izr.forEach(t),UZe=r(Px," \u2014 "),dR=n(Px,"A",{href:!0});var dzr=s(dR);JZe=r(dzr,"CpmTokenizer"),dzr.forEach(t),YZe=r(Px," or "),cR=n(Px,"A",{href:!0});var czr=s(cR);KZe=r(czr,"CpmTokenizerFast"),czr.forEach(t),ZZe=r(Px," (CPM model)"),Px.forEach(t),eeo=i(S),$g=n(S,"LI",{});var w3e=s($g);dte=n(w3e,"STRONG",{});var fzr=s(dte);oeo=r(fzr,"ctrl"),fzr.forEach(t),reo=r(w3e," \u2014 "),fR=n(w3e,"A",{href:!0});var mzr=s(fR);teo=r(mzr,"CTRLTokenizer"),mzr.forEach(t),aeo=r(w3e," (CTRL model)"),w3e.forEach(t),neo=i(S),Vn=n(S,"LI",{});var Ix=s(Vn);cte=n(Ix,"STRONG",{});var gzr=s(cte);seo=r(gzr,"data2vec-text"),gzr.forEach(t),leo=r(Ix," \u2014 "),mR=n(Ix,"A",{href:!0});var hzr=s(mR);ieo=r(hzr,"RobertaTokenizer"),hzr.forEach(t),deo=r(Ix," or "),gR=n(Ix,"A",{href:!0});var pzr=s(gR);ceo=r(pzr,"RobertaTokenizerFast"),pzr.forEach(t),feo=r(Ix," (Data2VecText model)"),Ix.forEach(t),meo=i(S),Xn=n(S,"LI",{});var qx=s(Xn);fte=n(qx,"STRONG",{});var _zr=s(fte);geo=r(_zr,"deberta"),_zr.forEach(t),heo=r(qx," \u2014 "),hR=n(qx,"A",{href:!0});var uzr=s(hR);peo=r(uzr,"DebertaTokenizer"),uzr.forEach(t),_eo=r(qx," or "),pR=n(qx,"A",{href:!0});var bzr=s(pR);ueo=r(bzr,"DebertaTokenizerFast"),bzr.forEach(t),beo=r(qx," (DeBERTa model)"),qx.forEach(t),veo=i(S),zn=n(S,"LI",{});var Nx=s(zn);mte=n(Nx,"STRONG",{});var vzr=s(mte);Feo=r(vzr,"deberta-v2"),vzr.forEach(t),Teo=r(Nx," \u2014 "),_R=n(Nx,"A",{href:!0});var Fzr=s(_R);Meo=r(Fzr,"DebertaV2Tokenizer"),Fzr.forEach(t),Eeo=r(Nx," or "),uR=n(Nx,"A",{href:!0});var Tzr=s(uR);Ceo=r(Tzr,"DebertaV2TokenizerFast"),Tzr.forEach(t),weo=r(Nx," (DeBERTa-v2 model)"),Nx.forEach(t),Aeo=i(S),Wn=n(S,"LI",{});var jx=s(Wn);gte=n(jx,"STRONG",{});var Mzr=s(gte);yeo=r(Mzr,"distilbert"),Mzr.forEach(t),Leo=r(jx," \u2014 "),bR=n(jx,"A",{href:!0});var Ezr=s(bR);xeo=r(Ezr,"DistilBertTokenizer"),Ezr.forEach(t),$eo=r(jx," or "),vR=n(jx,"A",{href:!0});var Czr=s(vR);keo=r(Czr,"DistilBertTokenizerFast"),Czr.forEach(t),Seo=r(jx," (DistilBERT model)"),jx.forEach(t),Reo=i(S),Qn=n(S,"LI",{});var Dx=s(Qn);hte=n(Dx,"STRONG",{});var wzr=s(hte);Beo=r(wzr,"dpr"),wzr.forEach(t),Peo=r(Dx," \u2014 "),FR=n(Dx,"A",{href:!0});var Azr=s(FR);Ieo=r(Azr,"DPRQuestionEncoderTokenizer"),Azr.forEach(t),qeo=r(Dx," or "),TR=n(Dx,"A",{href:!0});var yzr=s(TR);Neo=r(yzr,"DPRQuestionEncoderTokenizerFast"),yzr.forEach(t),jeo=r(Dx," (DPR model)"),Dx.forEach(t),Deo=i(S),Hn=n(S,"LI",{});var Gx=s(Hn);pte=n(Gx,"STRONG",{});var Lzr=s(pte);Geo=r(Lzr,"electra"),Lzr.forEach(t),Oeo=r(Gx," \u2014 "),MR=n(Gx,"A",{href:!0});var xzr=s(MR);Veo=r(xzr,"ElectraTokenizer"),xzr.forEach(t),Xeo=r(Gx," or "),ER=n(Gx,"A",{href:!0});var $zr=s(ER);zeo=r($zr,"ElectraTokenizerFast"),$zr.forEach(t),Weo=r(Gx," (ELECTRA model)"),Gx.forEach(t),Qeo=i(S),kg=n(S,"LI",{});var A3e=s(kg);_te=n(A3e,"STRONG",{});var kzr=s(_te);Heo=r(kzr,"flaubert"),kzr.forEach(t),Ueo=r(A3e," \u2014 "),CR=n(A3e,"A",{href:!0});var Szr=s(CR);Jeo=r(Szr,"FlaubertTokenizer"),Szr.forEach(t),Yeo=r(A3e," (FlauBERT model)"),A3e.forEach(t),Keo=i(S),Un=n(S,"LI",{});var Ox=s(Un);ute=n(Ox,"STRONG",{});var Rzr=s(ute);Zeo=r(Rzr,"fnet"),Rzr.forEach(t),eoo=r(Ox," \u2014 "),wR=n(Ox,"A",{href:!0});var Bzr=s(wR);ooo=r(Bzr,"FNetTokenizer"),Bzr.forEach(t),roo=r(Ox," or "),AR=n(Ox,"A",{href:!0});var Pzr=s(AR);too=r(Pzr,"FNetTokenizerFast"),Pzr.forEach(t),aoo=r(Ox," (FNet model)"),Ox.forEach(t),noo=i(S),Sg=n(S,"LI",{});var y3e=s(Sg);bte=n(y3e,"STRONG",{});var Izr=s(bte);soo=r(Izr,"fsmt"),Izr.forEach(t),loo=r(y3e," \u2014 "),yR=n(y3e,"A",{href:!0});var qzr=s(yR);ioo=r(qzr,"FSMTTokenizer"),qzr.forEach(t),doo=r(y3e," (FairSeq Machine-Translation model)"),y3e.forEach(t),coo=i(S),Jn=n(S,"LI",{});var Vx=s(Jn);vte=n(Vx,"STRONG",{});var Nzr=s(vte);foo=r(Nzr,"funnel"),Nzr.forEach(t),moo=r(Vx," \u2014 "),LR=n(Vx,"A",{href:!0});var jzr=s(LR);goo=r(jzr,"FunnelTokenizer"),jzr.forEach(t),hoo=r(Vx," or "),xR=n(Vx,"A",{href:!0});var Dzr=s(xR);poo=r(Dzr,"FunnelTokenizerFast"),Dzr.forEach(t),_oo=r(Vx," (Funnel Transformer model)"),Vx.forEach(t),uoo=i(S),Yn=n(S,"LI",{});var Xx=s(Yn);Fte=n(Xx,"STRONG",{});var Gzr=s(Fte);boo=r(Gzr,"gpt2"),Gzr.forEach(t),voo=r(Xx," \u2014 "),$R=n(Xx,"A",{href:!0});var Ozr=s($R);Foo=r(Ozr,"GPT2Tokenizer"),Ozr.forEach(t),Too=r(Xx," or "),kR=n(Xx,"A",{href:!0});var Vzr=s(kR);Moo=r(Vzr,"GPT2TokenizerFast"),Vzr.forEach(t),Eoo=r(Xx," (OpenAI GPT-2 model)"),Xx.forEach(t),Coo=i(S),Kn=n(S,"LI",{});var zx=s(Kn);Tte=n(zx,"STRONG",{});var Xzr=s(Tte);woo=r(Xzr,"gpt_neo"),Xzr.forEach(t),Aoo=r(zx," \u2014 "),SR=n(zx,"A",{href:!0});var zzr=s(SR);yoo=r(zzr,"GPT2Tokenizer"),zzr.forEach(t),Loo=r(zx," or "),RR=n(zx,"A",{href:!0});var Wzr=s(RR);xoo=r(Wzr,"GPT2TokenizerFast"),Wzr.forEach(t),$oo=r(zx," (GPT Neo model)"),zx.forEach(t),koo=i(S),Zn=n(S,"LI",{});var Wx=s(Zn);Mte=n(Wx,"STRONG",{});var Qzr=s(Mte);Soo=r(Qzr,"gptj"),Qzr.forEach(t),Roo=r(Wx," \u2014 "),BR=n(Wx,"A",{href:!0});var Hzr=s(BR);Boo=r(Hzr,"GPT2Tokenizer"),Hzr.forEach(t),Poo=r(Wx," or "),PR=n(Wx,"A",{href:!0});var Uzr=s(PR);Ioo=r(Uzr,"GPT2TokenizerFast"),Uzr.forEach(t),qoo=r(Wx," (GPT-J model)"),Wx.forEach(t),Noo=i(S),es=n(S,"LI",{});var Qx=s(es);Ete=n(Qx,"STRONG",{});var Jzr=s(Ete);joo=r(Jzr,"herbert"),Jzr.forEach(t),Doo=r(Qx," \u2014 "),IR=n(Qx,"A",{href:!0});var Yzr=s(IR);Goo=r(Yzr,"HerbertTokenizer"),Yzr.forEach(t),Ooo=r(Qx," or "),qR=n(Qx,"A",{href:!0});var Kzr=s(qR);Voo=r(Kzr,"HerbertTokenizerFast"),Kzr.forEach(t),Xoo=r(Qx," (HerBERT model)"),Qx.forEach(t),zoo=i(S),Rg=n(S,"LI",{});var L3e=s(Rg);Cte=n(L3e,"STRONG",{});var Zzr=s(Cte);Woo=r(Zzr,"hubert"),Zzr.forEach(t),Qoo=r(L3e," \u2014 "),NR=n(L3e,"A",{href:!0});var eWr=s(NR);Hoo=r(eWr,"Wav2Vec2CTCTokenizer"),eWr.forEach(t),Uoo=r(L3e," (Hubert model)"),L3e.forEach(t),Joo=i(S),os=n(S,"LI",{});var Hx=s(os);wte=n(Hx,"STRONG",{});var oWr=s(wte);Yoo=r(oWr,"ibert"),oWr.forEach(t),Koo=r(Hx," \u2014 "),jR=n(Hx,"A",{href:!0});var rWr=s(jR);Zoo=r(rWr,"RobertaTokenizer"),rWr.forEach(t),ero=r(Hx," or "),DR=n(Hx,"A",{href:!0});var tWr=s(DR);oro=r(tWr,"RobertaTokenizerFast"),tWr.forEach(t),rro=r(Hx," (I-BERT model)"),Hx.forEach(t),tro=i(S),rs=n(S,"LI",{});var Ux=s(rs);Ate=n(Ux,"STRONG",{});var aWr=s(Ate);aro=r(aWr,"layoutlm"),aWr.forEach(t),nro=r(Ux," \u2014 "),GR=n(Ux,"A",{href:!0});var nWr=s(GR);sro=r(nWr,"LayoutLMTokenizer"),nWr.forEach(t),lro=r(Ux," or "),OR=n(Ux,"A",{href:!0});var sWr=s(OR);iro=r(sWr,"LayoutLMTokenizerFast"),sWr.forEach(t),dro=r(Ux," (LayoutLM model)"),Ux.forEach(t),cro=i(S),ts=n(S,"LI",{});var Jx=s(ts);yte=n(Jx,"STRONG",{});var lWr=s(yte);fro=r(lWr,"layoutlmv2"),lWr.forEach(t),mro=r(Jx," \u2014 "),VR=n(Jx,"A",{href:!0});var iWr=s(VR);gro=r(iWr,"LayoutLMv2Tokenizer"),iWr.forEach(t),hro=r(Jx," or "),XR=n(Jx,"A",{href:!0});var dWr=s(XR);pro=r(dWr,"LayoutLMv2TokenizerFast"),dWr.forEach(t),_ro=r(Jx," (LayoutLMv2 model)"),Jx.forEach(t),uro=i(S),as=n(S,"LI",{});var Yx=s(as);Lte=n(Yx,"STRONG",{});var cWr=s(Lte);bro=r(cWr,"layoutxlm"),cWr.forEach(t),vro=r(Yx," \u2014 "),zR=n(Yx,"A",{href:!0});var fWr=s(zR);Fro=r(fWr,"LayoutXLMTokenizer"),fWr.forEach(t),Tro=r(Yx," or "),WR=n(Yx,"A",{href:!0});var mWr=s(WR);Mro=r(mWr,"LayoutXLMTokenizerFast"),mWr.forEach(t),Ero=r(Yx," (LayoutXLM model)"),Yx.forEach(t),Cro=i(S),ns=n(S,"LI",{});var Kx=s(ns);xte=n(Kx,"STRONG",{});var gWr=s(xte);wro=r(gWr,"led"),gWr.forEach(t),Aro=r(Kx," \u2014 "),QR=n(Kx,"A",{href:!0});var hWr=s(QR);yro=r(hWr,"LEDTokenizer"),hWr.forEach(t),Lro=r(Kx," or "),HR=n(Kx,"A",{href:!0});var pWr=s(HR);xro=r(pWr,"LEDTokenizerFast"),pWr.forEach(t),$ro=r(Kx," (LED model)"),Kx.forEach(t),kro=i(S),ss=n(S,"LI",{});var Zx=s(ss);$te=n(Zx,"STRONG",{});var _Wr=s($te);Sro=r(_Wr,"longformer"),_Wr.forEach(t),Rro=r(Zx," \u2014 "),UR=n(Zx,"A",{href:!0});var uWr=s(UR);Bro=r(uWr,"LongformerTokenizer"),uWr.forEach(t),Pro=r(Zx," or "),JR=n(Zx,"A",{href:!0});var bWr=s(JR);Iro=r(bWr,"LongformerTokenizerFast"),bWr.forEach(t),qro=r(Zx," (Longformer model)"),Zx.forEach(t),Nro=i(S),Bg=n(S,"LI",{});var x3e=s(Bg);kte=n(x3e,"STRONG",{});var vWr=s(kte);jro=r(vWr,"luke"),vWr.forEach(t),Dro=r(x3e," \u2014 "),YR=n(x3e,"A",{href:!0});var FWr=s(YR);Gro=r(FWr,"LukeTokenizer"),FWr.forEach(t),Oro=r(x3e," (LUKE model)"),x3e.forEach(t),Vro=i(S),ls=n(S,"LI",{});var e$=s(ls);Ste=n(e$,"STRONG",{});var TWr=s(Ste);Xro=r(TWr,"lxmert"),TWr.forEach(t),zro=r(e$," \u2014 "),KR=n(e$,"A",{href:!0});var MWr=s(KR);Wro=r(MWr,"LxmertTokenizer"),MWr.forEach(t),Qro=r(e$," or "),ZR=n(e$,"A",{href:!0});var EWr=s(ZR);Hro=r(EWr,"LxmertTokenizerFast"),EWr.forEach(t),Uro=r(e$," (LXMERT model)"),e$.forEach(t),Jro=i(S),Pg=n(S,"LI",{});var $3e=s(Pg);Rte=n($3e,"STRONG",{});var CWr=s(Rte);Yro=r(CWr,"m2m_100"),CWr.forEach(t),Kro=r($3e," \u2014 "),eB=n($3e,"A",{href:!0});var wWr=s(eB);Zro=r(wWr,"M2M100Tokenizer"),wWr.forEach(t),eto=r($3e," (M2M100 model)"),$3e.forEach(t),oto=i(S),Ig=n(S,"LI",{});var k3e=s(Ig);Bte=n(k3e,"STRONG",{});var AWr=s(Bte);rto=r(AWr,"marian"),AWr.forEach(t),tto=r(k3e," \u2014 "),oB=n(k3e,"A",{href:!0});var yWr=s(oB);ato=r(yWr,"MarianTokenizer"),yWr.forEach(t),nto=r(k3e," (Marian model)"),k3e.forEach(t),sto=i(S),is=n(S,"LI",{});var o$=s(is);Pte=n(o$,"STRONG",{});var LWr=s(Pte);lto=r(LWr,"mbart"),LWr.forEach(t),ito=r(o$," \u2014 "),rB=n(o$,"A",{href:!0});var xWr=s(rB);dto=r(xWr,"MBartTokenizer"),xWr.forEach(t),cto=r(o$," or "),tB=n(o$,"A",{href:!0});var $Wr=s(tB);fto=r($Wr,"MBartTokenizerFast"),$Wr.forEach(t),mto=r(o$," (mBART model)"),o$.forEach(t),gto=i(S),ds=n(S,"LI",{});var r$=s(ds);Ite=n(r$,"STRONG",{});var kWr=s(Ite);hto=r(kWr,"mbart50"),kWr.forEach(t),pto=r(r$," \u2014 "),aB=n(r$,"A",{href:!0});var SWr=s(aB);_to=r(SWr,"MBart50Tokenizer"),SWr.forEach(t),uto=r(r$," or "),nB=n(r$,"A",{href:!0});var RWr=s(nB);bto=r(RWr,"MBart50TokenizerFast"),RWr.forEach(t),vto=r(r$," (mBART-50 model)"),r$.forEach(t),Fto=i(S),cs=n(S,"LI",{});var t$=s(cs);qte=n(t$,"STRONG",{});var BWr=s(qte);Tto=r(BWr,"megatron-bert"),BWr.forEach(t),Mto=r(t$," \u2014 "),sB=n(t$,"A",{href:!0});var PWr=s(sB);Eto=r(PWr,"BertTokenizer"),PWr.forEach(t),Cto=r(t$," or "),lB=n(t$,"A",{href:!0});var IWr=s(lB);wto=r(IWr,"BertTokenizerFast"),IWr.forEach(t),Ato=r(t$," (MegatronBert model)"),t$.forEach(t),yto=i(S),qg=n(S,"LI",{});var S3e=s(qg);Nte=n(S3e,"STRONG",{});var qWr=s(Nte);Lto=r(qWr,"mluke"),qWr.forEach(t),xto=r(S3e," \u2014 "),iB=n(S3e,"A",{href:!0});var NWr=s(iB);$to=r(NWr,"MLukeTokenizer"),NWr.forEach(t),kto=r(S3e," (mLUKE model)"),S3e.forEach(t),Sto=i(S),fs=n(S,"LI",{});var a$=s(fs);jte=n(a$,"STRONG",{});var jWr=s(jte);Rto=r(jWr,"mobilebert"),jWr.forEach(t),Bto=r(a$," \u2014 "),dB=n(a$,"A",{href:!0});var DWr=s(dB);Pto=r(DWr,"MobileBertTokenizer"),DWr.forEach(t),Ito=r(a$," or "),cB=n(a$,"A",{href:!0});var GWr=s(cB);qto=r(GWr,"MobileBertTokenizerFast"),GWr.forEach(t),Nto=r(a$," (MobileBERT model)"),a$.forEach(t),jto=i(S),ms=n(S,"LI",{});var n$=s(ms);Dte=n(n$,"STRONG",{});var OWr=s(Dte);Dto=r(OWr,"mpnet"),OWr.forEach(t),Gto=r(n$," \u2014 "),fB=n(n$,"A",{href:!0});var VWr=s(fB);Oto=r(VWr,"MPNetTokenizer"),VWr.forEach(t),Vto=r(n$," or "),mB=n(n$,"A",{href:!0});var XWr=s(mB);Xto=r(XWr,"MPNetTokenizerFast"),XWr.forEach(t),zto=r(n$," (MPNet model)"),n$.forEach(t),Wto=i(S),gs=n(S,"LI",{});var s$=s(gs);Gte=n(s$,"STRONG",{});var zWr=s(Gte);Qto=r(zWr,"mt5"),zWr.forEach(t),Hto=r(s$," \u2014 "),gB=n(s$,"A",{href:!0});var WWr=s(gB);Uto=r(WWr,"MT5Tokenizer"),WWr.forEach(t),Jto=r(s$," or "),hB=n(s$,"A",{href:!0});var QWr=s(hB);Yto=r(QWr,"MT5TokenizerFast"),QWr.forEach(t),Kto=r(s$," (mT5 model)"),s$.forEach(t),Zto=i(S),hs=n(S,"LI",{});var l$=s(hs);Ote=n(l$,"STRONG",{});var HWr=s(Ote);eao=r(HWr,"nystromformer"),HWr.forEach(t),oao=r(l$," \u2014 "),pB=n(l$,"A",{href:!0});var UWr=s(pB);rao=r(UWr,"AlbertTokenizer"),UWr.forEach(t),tao=r(l$," or "),_B=n(l$,"A",{href:!0});var JWr=s(_B);aao=r(JWr,"AlbertTokenizerFast"),JWr.forEach(t),nao=r(l$," (Nystromformer model)"),l$.forEach(t),sao=i(S),ps=n(S,"LI",{});var i$=s(ps);Vte=n(i$,"STRONG",{});var YWr=s(Vte);lao=r(YWr,"openai-gpt"),YWr.forEach(t),iao=r(i$," \u2014 "),uB=n(i$,"A",{href:!0});var KWr=s(uB);dao=r(KWr,"OpenAIGPTTokenizer"),KWr.forEach(t),cao=r(i$," or "),bB=n(i$,"A",{href:!0});var ZWr=s(bB);fao=r(ZWr,"OpenAIGPTTokenizerFast"),ZWr.forEach(t),mao=r(i$," (OpenAI GPT model)"),i$.forEach(t),gao=i(S),Ng=n(S,"LI",{});var R3e=s(Ng);Xte=n(R3e,"STRONG",{});var eQr=s(Xte);hao=r(eQr,"opt"),eQr.forEach(t),pao=r(R3e," \u2014 "),vB=n(R3e,"A",{href:!0});var oQr=s(vB);_ao=r(oQr,"GPT2Tokenizer"),oQr.forEach(t),uao=r(R3e," (OPT model)"),R3e.forEach(t),bao=i(S),_s=n(S,"LI",{});var d$=s(_s);zte=n(d$,"STRONG",{});var rQr=s(zte);vao=r(rQr,"pegasus"),rQr.forEach(t),Fao=r(d$," \u2014 "),FB=n(d$,"A",{href:!0});var tQr=s(FB);Tao=r(tQr,"PegasusTokenizer"),tQr.forEach(t),Mao=r(d$," or "),TB=n(d$,"A",{href:!0});var aQr=s(TB);Eao=r(aQr,"PegasusTokenizerFast"),aQr.forEach(t),Cao=r(d$," (Pegasus model)"),d$.forEach(t),wao=i(S),jg=n(S,"LI",{});var B3e=s(jg);Wte=n(B3e,"STRONG",{});var nQr=s(Wte);Aao=r(nQr,"perceiver"),nQr.forEach(t),yao=r(B3e," \u2014 "),MB=n(B3e,"A",{href:!0});var sQr=s(MB);Lao=r(sQr,"PerceiverTokenizer"),sQr.forEach(t),xao=r(B3e," (Perceiver model)"),B3e.forEach(t),$ao=i(S),Dg=n(S,"LI",{});var P3e=s(Dg);Qte=n(P3e,"STRONG",{});var lQr=s(Qte);kao=r(lQr,"phobert"),lQr.forEach(t),Sao=r(P3e," \u2014 "),EB=n(P3e,"A",{href:!0});var iQr=s(EB);Rao=r(iQr,"PhobertTokenizer"),iQr.forEach(t),Bao=r(P3e," (PhoBERT model)"),P3e.forEach(t),Pao=i(S),Gg=n(S,"LI",{});var I3e=s(Gg);Hte=n(I3e,"STRONG",{});var dQr=s(Hte);Iao=r(dQr,"plbart"),dQr.forEach(t),qao=r(I3e," \u2014 "),CB=n(I3e,"A",{href:!0});var cQr=s(CB);Nao=r(cQr,"PLBartTokenizer"),cQr.forEach(t),jao=r(I3e," (PLBart model)"),I3e.forEach(t),Dao=i(S),Og=n(S,"LI",{});var q3e=s(Og);Ute=n(q3e,"STRONG",{});var fQr=s(Ute);Gao=r(fQr,"prophetnet"),fQr.forEach(t),Oao=r(q3e," \u2014 "),wB=n(q3e,"A",{href:!0});var mQr=s(wB);Vao=r(mQr,"ProphetNetTokenizer"),mQr.forEach(t),Xao=r(q3e," (ProphetNet model)"),q3e.forEach(t),zao=i(S),us=n(S,"LI",{});var c$=s(us);Jte=n(c$,"STRONG",{});var gQr=s(Jte);Wao=r(gQr,"qdqbert"),gQr.forEach(t),Qao=r(c$," \u2014 "),AB=n(c$,"A",{href:!0});var hQr=s(AB);Hao=r(hQr,"BertTokenizer"),hQr.forEach(t),Uao=r(c$," or "),yB=n(c$,"A",{href:!0});var pQr=s(yB);Jao=r(pQr,"BertTokenizerFast"),pQr.forEach(t),Yao=r(c$," (QDQBert model)"),c$.forEach(t),Kao=i(S),Vg=n(S,"LI",{});var N3e=s(Vg);Yte=n(N3e,"STRONG",{});var _Qr=s(Yte);Zao=r(_Qr,"rag"),_Qr.forEach(t),eno=r(N3e," \u2014 "),LB=n(N3e,"A",{href:!0});var uQr=s(LB);ono=r(uQr,"RagTokenizer"),uQr.forEach(t),rno=r(N3e," (RAG model)"),N3e.forEach(t),tno=i(S),bs=n(S,"LI",{});var f$=s(bs);Kte=n(f$,"STRONG",{});var bQr=s(Kte);ano=r(bQr,"realm"),bQr.forEach(t),nno=r(f$," \u2014 "),xB=n(f$,"A",{href:!0});var vQr=s(xB);sno=r(vQr,"RealmTokenizer"),vQr.forEach(t),lno=r(f$," or "),$B=n(f$,"A",{href:!0});var FQr=s($B);ino=r(FQr,"RealmTokenizerFast"),FQr.forEach(t),dno=r(f$," (Realm model)"),f$.forEach(t),cno=i(S),vs=n(S,"LI",{});var m$=s(vs);Zte=n(m$,"STRONG",{});var TQr=s(Zte);fno=r(TQr,"reformer"),TQr.forEach(t),mno=r(m$," \u2014 "),kB=n(m$,"A",{href:!0});var MQr=s(kB);gno=r(MQr,"ReformerTokenizer"),MQr.forEach(t),hno=r(m$," or "),SB=n(m$,"A",{href:!0});var EQr=s(SB);pno=r(EQr,"ReformerTokenizerFast"),EQr.forEach(t),_no=r(m$," (Reformer model)"),m$.forEach(t),uno=i(S),Fs=n(S,"LI",{});var g$=s(Fs);eae=n(g$,"STRONG",{});var CQr=s(eae);bno=r(CQr,"rembert"),CQr.forEach(t),vno=r(g$," \u2014 "),RB=n(g$,"A",{href:!0});var wQr=s(RB);Fno=r(wQr,"RemBertTokenizer"),wQr.forEach(t),Tno=r(g$," or "),BB=n(g$,"A",{href:!0});var AQr=s(BB);Mno=r(AQr,"RemBertTokenizerFast"),AQr.forEach(t),Eno=r(g$," (RemBERT model)"),g$.forEach(t),Cno=i(S),Ts=n(S,"LI",{});var h$=s(Ts);oae=n(h$,"STRONG",{});var yQr=s(oae);wno=r(yQr,"retribert"),yQr.forEach(t),Ano=r(h$," \u2014 "),PB=n(h$,"A",{href:!0});var LQr=s(PB);yno=r(LQr,"RetriBertTokenizer"),LQr.forEach(t),Lno=r(h$," or "),IB=n(h$,"A",{href:!0});var xQr=s(IB);xno=r(xQr,"RetriBertTokenizerFast"),xQr.forEach(t),$no=r(h$," (RetriBERT model)"),h$.forEach(t),kno=i(S),Ms=n(S,"LI",{});var p$=s(Ms);rae=n(p$,"STRONG",{});var $Qr=s(rae);Sno=r($Qr,"roberta"),$Qr.forEach(t),Rno=r(p$," \u2014 "),qB=n(p$,"A",{href:!0});var kQr=s(qB);Bno=r(kQr,"RobertaTokenizer"),kQr.forEach(t),Pno=r(p$," or "),NB=n(p$,"A",{href:!0});var SQr=s(NB);Ino=r(SQr,"RobertaTokenizerFast"),SQr.forEach(t),qno=r(p$," (RoBERTa model)"),p$.forEach(t),Nno=i(S),Es=n(S,"LI",{});var _$=s(Es);tae=n(_$,"STRONG",{});var RQr=s(tae);jno=r(RQr,"roformer"),RQr.forEach(t),Dno=r(_$," \u2014 "),jB=n(_$,"A",{href:!0});var BQr=s(jB);Gno=r(BQr,"RoFormerTokenizer"),BQr.forEach(t),Ono=r(_$," or "),DB=n(_$,"A",{href:!0});var PQr=s(DB);Vno=r(PQr,"RoFormerTokenizerFast"),PQr.forEach(t),Xno=r(_$," (RoFormer model)"),_$.forEach(t),zno=i(S),Xg=n(S,"LI",{});var j3e=s(Xg);aae=n(j3e,"STRONG",{});var IQr=s(aae);Wno=r(IQr,"speech_to_text"),IQr.forEach(t),Qno=r(j3e," \u2014 "),GB=n(j3e,"A",{href:!0});var qQr=s(GB);Hno=r(qQr,"Speech2TextTokenizer"),qQr.forEach(t),Uno=r(j3e," (Speech2Text model)"),j3e.forEach(t),Jno=i(S),zg=n(S,"LI",{});var D3e=s(zg);nae=n(D3e,"STRONG",{});var NQr=s(nae);Yno=r(NQr,"speech_to_text_2"),NQr.forEach(t),Kno=r(D3e," \u2014 "),OB=n(D3e,"A",{href:!0});var jQr=s(OB);Zno=r(jQr,"Speech2Text2Tokenizer"),jQr.forEach(t),eso=r(D3e," (Speech2Text2 model)"),D3e.forEach(t),oso=i(S),Cs=n(S,"LI",{});var u$=s(Cs);sae=n(u$,"STRONG",{});var DQr=s(sae);rso=r(DQr,"splinter"),DQr.forEach(t),tso=r(u$," \u2014 "),VB=n(u$,"A",{href:!0});var GQr=s(VB);aso=r(GQr,"SplinterTokenizer"),GQr.forEach(t),nso=r(u$," or "),XB=n(u$,"A",{href:!0});var OQr=s(XB);sso=r(OQr,"SplinterTokenizerFast"),OQr.forEach(t),lso=r(u$," (Splinter model)"),u$.forEach(t),iso=i(S),ws=n(S,"LI",{});var b$=s(ws);lae=n(b$,"STRONG",{});var VQr=s(lae);dso=r(VQr,"squeezebert"),VQr.forEach(t),cso=r(b$," \u2014 "),zB=n(b$,"A",{href:!0});var XQr=s(zB);fso=r(XQr,"SqueezeBertTokenizer"),XQr.forEach(t),mso=r(b$," or "),WB=n(b$,"A",{href:!0});var zQr=s(WB);gso=r(zQr,"SqueezeBertTokenizerFast"),zQr.forEach(t),hso=r(b$," (SqueezeBERT model)"),b$.forEach(t),pso=i(S),As=n(S,"LI",{});var v$=s(As);iae=n(v$,"STRONG",{});var WQr=s(iae);_so=r(WQr,"t5"),WQr.forEach(t),uso=r(v$," \u2014 "),QB=n(v$,"A",{href:!0});var QQr=s(QB);bso=r(QQr,"T5Tokenizer"),QQr.forEach(t),vso=r(v$," or "),HB=n(v$,"A",{href:!0});var HQr=s(HB);Fso=r(HQr,"T5TokenizerFast"),HQr.forEach(t),Tso=r(v$," (T5 model)"),v$.forEach(t),Mso=i(S),Wg=n(S,"LI",{});var G3e=s(Wg);dae=n(G3e,"STRONG",{});var UQr=s(dae);Eso=r(UQr,"tapas"),UQr.forEach(t),Cso=r(G3e," \u2014 "),UB=n(G3e,"A",{href:!0});var JQr=s(UB);wso=r(JQr,"TapasTokenizer"),JQr.forEach(t),Aso=r(G3e," (TAPAS model)"),G3e.forEach(t),yso=i(S),Qg=n(S,"LI",{});var O3e=s(Qg);cae=n(O3e,"STRONG",{});var YQr=s(cae);Lso=r(YQr,"tapex"),YQr.forEach(t),xso=r(O3e," \u2014 "),JB=n(O3e,"A",{href:!0});var KQr=s(JB);$so=r(KQr,"TapexTokenizer"),KQr.forEach(t),kso=r(O3e," (TAPEX model)"),O3e.forEach(t),Sso=i(S),Hg=n(S,"LI",{});var V3e=s(Hg);fae=n(V3e,"STRONG",{});var ZQr=s(fae);Rso=r(ZQr,"transfo-xl"),ZQr.forEach(t),Bso=r(V3e," \u2014 "),YB=n(V3e,"A",{href:!0});var eHr=s(YB);Pso=r(eHr,"TransfoXLTokenizer"),eHr.forEach(t),Iso=r(V3e," (Transformer-XL model)"),V3e.forEach(t),qso=i(S),ys=n(S,"LI",{});var F$=s(ys);mae=n(F$,"STRONG",{});var oHr=s(mae);Nso=r(oHr,"visual_bert"),oHr.forEach(t),jso=r(F$," \u2014 "),KB=n(F$,"A",{href:!0});var rHr=s(KB);Dso=r(rHr,"BertTokenizer"),rHr.forEach(t),Gso=r(F$," or "),ZB=n(F$,"A",{href:!0});var tHr=s(ZB);Oso=r(tHr,"BertTokenizerFast"),tHr.forEach(t),Vso=r(F$," (VisualBert model)"),F$.forEach(t),Xso=i(S),Ug=n(S,"LI",{});var X3e=s(Ug);gae=n(X3e,"STRONG",{});var aHr=s(gae);zso=r(aHr,"wav2vec2"),aHr.forEach(t),Wso=r(X3e," \u2014 "),eP=n(X3e,"A",{href:!0});var nHr=s(eP);Qso=r(nHr,"Wav2Vec2CTCTokenizer"),nHr.forEach(t),Hso=r(X3e," (Wav2Vec2 model)"),X3e.forEach(t),Uso=i(S),Jg=n(S,"LI",{});var z3e=s(Jg);hae=n(z3e,"STRONG",{});var sHr=s(hae);Jso=r(sHr,"wav2vec2-conformer"),sHr.forEach(t),Yso=r(z3e," \u2014 "),oP=n(z3e,"A",{href:!0});var lHr=s(oP);Kso=r(lHr,"Wav2Vec2CTCTokenizer"),lHr.forEach(t),Zso=r(z3e," (Wav2Vec2-Conformer model)"),z3e.forEach(t),elo=i(S),Yg=n(S,"LI",{});var W3e=s(Yg);pae=n(W3e,"STRONG",{});var iHr=s(pae);olo=r(iHr,"wav2vec2_phoneme"),iHr.forEach(t),rlo=r(W3e," \u2014 "),rP=n(W3e,"A",{href:!0});var dHr=s(rP);tlo=r(dHr,"Wav2Vec2PhonemeCTCTokenizer"),dHr.forEach(t),alo=r(W3e," (Wav2Vec2Phoneme model)"),W3e.forEach(t),nlo=i(S),Ls=n(S,"LI",{});var T$=s(Ls);_ae=n(T$,"STRONG",{});var cHr=s(_ae);slo=r(cHr,"xglm"),cHr.forEach(t),llo=r(T$," \u2014 "),tP=n(T$,"A",{href:!0});var fHr=s(tP);ilo=r(fHr,"XGLMTokenizer"),fHr.forEach(t),dlo=r(T$," or "),aP=n(T$,"A",{href:!0});var mHr=s(aP);clo=r(mHr,"XGLMTokenizerFast"),mHr.forEach(t),flo=r(T$," (XGLM model)"),T$.forEach(t),mlo=i(S),Kg=n(S,"LI",{});var Q3e=s(Kg);uae=n(Q3e,"STRONG",{});var gHr=s(uae);glo=r(gHr,"xlm"),gHr.forEach(t),hlo=r(Q3e," \u2014 "),nP=n(Q3e,"A",{href:!0});var hHr=s(nP);plo=r(hHr,"XLMTokenizer"),hHr.forEach(t),_lo=r(Q3e," (XLM model)"),Q3e.forEach(t),ulo=i(S),Zg=n(S,"LI",{});var H3e=s(Zg);bae=n(H3e,"STRONG",{});var pHr=s(bae);blo=r(pHr,"xlm-prophetnet"),pHr.forEach(t),vlo=r(H3e," \u2014 "),sP=n(H3e,"A",{href:!0});var _Hr=s(sP);Flo=r(_Hr,"XLMProphetNetTokenizer"),_Hr.forEach(t),Tlo=r(H3e," (XLMProphetNet model)"),H3e.forEach(t),Mlo=i(S),xs=n(S,"LI",{});var M$=s(xs);vae=n(M$,"STRONG",{});var uHr=s(vae);Elo=r(uHr,"xlm-roberta"),uHr.forEach(t),Clo=r(M$," \u2014 "),lP=n(M$,"A",{href:!0});var bHr=s(lP);wlo=r(bHr,"XLMRobertaTokenizer"),bHr.forEach(t),Alo=r(M$," or "),iP=n(M$,"A",{href:!0});var vHr=s(iP);ylo=r(vHr,"XLMRobertaTokenizerFast"),vHr.forEach(t),Llo=r(M$," (XLM-RoBERTa model)"),M$.forEach(t),xlo=i(S),$s=n(S,"LI",{});var E$=s($s);Fae=n(E$,"STRONG",{});var FHr=s(Fae);$lo=r(FHr,"xlm-roberta-xl"),FHr.forEach(t),klo=r(E$," \u2014 "),dP=n(E$,"A",{href:!0});var THr=s(dP);Slo=r(THr,"RobertaTokenizer"),THr.forEach(t),Rlo=r(E$," or "),cP=n(E$,"A",{href:!0});var MHr=s(cP);Blo=r(MHr,"RobertaTokenizerFast"),MHr.forEach(t),Plo=r(E$," (XLM-RoBERTa-XL model)"),E$.forEach(t),Ilo=i(S),ks=n(S,"LI",{});var C$=s(ks);Tae=n(C$,"STRONG",{});var EHr=s(Tae);qlo=r(EHr,"xlnet"),EHr.forEach(t),Nlo=r(C$," \u2014 "),fP=n(C$,"A",{href:!0});var CHr=s(fP);jlo=r(CHr,"XLNetTokenizer"),CHr.forEach(t),Dlo=r(C$," or "),mP=n(C$,"A",{href:!0});var wHr=s(mP);Glo=r(wHr,"XLNetTokenizerFast"),wHr.forEach(t),Olo=r(C$," (XLNet model)"),C$.forEach(t),Vlo=i(S),Ss=n(S,"LI",{});var w$=s(Ss);Mae=n(w$,"STRONG",{});var AHr=s(Mae);Xlo=r(AHr,"yoso"),AHr.forEach(t),zlo=r(w$," \u2014 "),gP=n(w$,"A",{href:!0});var yHr=s(gP);Wlo=r(yHr,"AlbertTokenizer"),yHr.forEach(t),Qlo=r(w$," or "),hP=n(w$,"A",{href:!0});var LHr=s(hP);Hlo=r(LHr,"AlbertTokenizerFast"),LHr.forEach(t),Ulo=r(w$," (YOSO model)"),w$.forEach(t),S.forEach(t),Jlo=i(qs),T(eh.$$.fragment,qs),qs.forEach(t),Ylo=i(Is),oh=n(Is,"DIV",{class:!0});var ZNe=s(oh);T(w6.$$.fragment,ZNe),Klo=i(ZNe),Eae=n(ZNe,"P",{});var xHr=s(Eae);Zlo=r(xHr,"Register a new tokenizer in this mapping."),xHr.forEach(t),ZNe.forEach(t),Is.forEach(t),eqe=i(f),Ti=n(f,"H2",{class:!0});var eje=s(Ti);rh=n(eje,"A",{id:!0,class:!0,href:!0});var $Hr=s(rh);Cae=n($Hr,"SPAN",{});var kHr=s(Cae);T(A6.$$.fragment,kHr),kHr.forEach(t),$Hr.forEach(t),eio=i(eje),wae=n(eje,"SPAN",{});var SHr=s(wae);oio=r(SHr,"AutoFeatureExtractor"),SHr.forEach(t),eje.forEach(t),oqe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(y6.$$.fragment,Ns),rio=i(Ns),L6=n(Ns,"P",{});var oje=s(L6);tio=r(oje,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),pP=n(oje,"A",{href:!0});var RHr=s(pP);aio=r(RHr,"AutoFeatureExtractor.from_pretrained()"),RHr.forEach(t),nio=r(oje," class method."),oje.forEach(t),sio=i(Ns),x6=n(Ns,"P",{});var rje=s(x6);lio=r(rje,"This class cannot be instantiated directly using "),Aae=n(rje,"CODE",{});var BHr=s(Aae);iio=r(BHr,"__init__()"),BHr.forEach(t),dio=r(rje," (throws an error)."),rje.forEach(t),cio=i(Ns),He=n(Ns,"DIV",{class:!0});var Zt=s(He);T($6.$$.fragment,Zt),fio=i(Zt),yae=n(Zt,"P",{});var PHr=s(yae);mio=r(PHr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),PHr.forEach(t),gio=i(Zt),ya=n(Zt,"P",{});var pw=s(ya);hio=r(pw,"The feature extractor class to instantiate is selected based on the "),Lae=n(pw,"CODE",{});var IHr=s(Lae);pio=r(IHr,"model_type"),IHr.forEach(t),_io=r(pw,` property of the config object
(either passed as an argument or loaded from `),xae=n(pw,"CODE",{});var qHr=s(xae);uio=r(qHr,"pretrained_model_name_or_path"),qHr.forEach(t),bio=r(pw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),$ae=n(pw,"CODE",{});var NHr=s($ae);vio=r(NHr,"pretrained_model_name_or_path"),NHr.forEach(t),Fio=r(pw,":"),pw.forEach(t),Tio=i(Zt),Z=n(Zt,"UL",{});var te=s(Z);th=n(te,"LI",{});var U3e=s(th);kae=n(U3e,"STRONG",{});var jHr=s(kae);Mio=r(jHr,"beit"),jHr.forEach(t),Eio=r(U3e," \u2014 "),_P=n(U3e,"A",{href:!0});var DHr=s(_P);Cio=r(DHr,"BeitFeatureExtractor"),DHr.forEach(t),wio=r(U3e," (BEiT model)"),U3e.forEach(t),Aio=i(te),ah=n(te,"LI",{});var J3e=s(ah);Sae=n(J3e,"STRONG",{});var GHr=s(Sae);yio=r(GHr,"clip"),GHr.forEach(t),Lio=r(J3e," \u2014 "),uP=n(J3e,"A",{href:!0});var OHr=s(uP);xio=r(OHr,"CLIPFeatureExtractor"),OHr.forEach(t),$io=r(J3e," (CLIP model)"),J3e.forEach(t),kio=i(te),nh=n(te,"LI",{});var Y3e=s(nh);Rae=n(Y3e,"STRONG",{});var VHr=s(Rae);Sio=r(VHr,"convnext"),VHr.forEach(t),Rio=r(Y3e," \u2014 "),bP=n(Y3e,"A",{href:!0});var XHr=s(bP);Bio=r(XHr,"ConvNextFeatureExtractor"),XHr.forEach(t),Pio=r(Y3e," (ConvNext model)"),Y3e.forEach(t),Iio=i(te),sh=n(te,"LI",{});var K3e=s(sh);Bae=n(K3e,"STRONG",{});var zHr=s(Bae);qio=r(zHr,"data2vec-audio"),zHr.forEach(t),Nio=r(K3e," \u2014 "),vP=n(K3e,"A",{href:!0});var WHr=s(vP);jio=r(WHr,"Wav2Vec2FeatureExtractor"),WHr.forEach(t),Dio=r(K3e," (Data2VecAudio model)"),K3e.forEach(t),Gio=i(te),lh=n(te,"LI",{});var Z3e=s(lh);Pae=n(Z3e,"STRONG",{});var QHr=s(Pae);Oio=r(QHr,"data2vec-vision"),QHr.forEach(t),Vio=r(Z3e," \u2014 "),FP=n(Z3e,"A",{href:!0});var HHr=s(FP);Xio=r(HHr,"BeitFeatureExtractor"),HHr.forEach(t),zio=r(Z3e," (Data2VecVision model)"),Z3e.forEach(t),Wio=i(te),ih=n(te,"LI",{});var ewe=s(ih);Iae=n(ewe,"STRONG",{});var UHr=s(Iae);Qio=r(UHr,"deit"),UHr.forEach(t),Hio=r(ewe," \u2014 "),TP=n(ewe,"A",{href:!0});var JHr=s(TP);Uio=r(JHr,"DeiTFeatureExtractor"),JHr.forEach(t),Jio=r(ewe," (DeiT model)"),ewe.forEach(t),Yio=i(te),dh=n(te,"LI",{});var owe=s(dh);qae=n(owe,"STRONG",{});var YHr=s(qae);Kio=r(YHr,"detr"),YHr.forEach(t),Zio=r(owe," \u2014 "),MP=n(owe,"A",{href:!0});var KHr=s(MP);edo=r(KHr,"DetrFeatureExtractor"),KHr.forEach(t),odo=r(owe," (DETR model)"),owe.forEach(t),rdo=i(te),ch=n(te,"LI",{});var rwe=s(ch);Nae=n(rwe,"STRONG",{});var ZHr=s(Nae);tdo=r(ZHr,"dpt"),ZHr.forEach(t),ado=r(rwe," \u2014 "),EP=n(rwe,"A",{href:!0});var eUr=s(EP);ndo=r(eUr,"DPTFeatureExtractor"),eUr.forEach(t),sdo=r(rwe," (DPT model)"),rwe.forEach(t),ldo=i(te),fh=n(te,"LI",{});var twe=s(fh);jae=n(twe,"STRONG",{});var oUr=s(jae);ido=r(oUr,"flava"),oUr.forEach(t),ddo=r(twe," \u2014 "),CP=n(twe,"A",{href:!0});var rUr=s(CP);cdo=r(rUr,"FlavaFeatureExtractor"),rUr.forEach(t),fdo=r(twe," (Flava model)"),twe.forEach(t),mdo=i(te),mh=n(te,"LI",{});var awe=s(mh);Dae=n(awe,"STRONG",{});var tUr=s(Dae);gdo=r(tUr,"glpn"),tUr.forEach(t),hdo=r(awe," \u2014 "),wP=n(awe,"A",{href:!0});var aUr=s(wP);pdo=r(aUr,"GLPNFeatureExtractor"),aUr.forEach(t),_do=r(awe," (GLPN model)"),awe.forEach(t),udo=i(te),gh=n(te,"LI",{});var nwe=s(gh);Gae=n(nwe,"STRONG",{});var nUr=s(Gae);bdo=r(nUr,"hubert"),nUr.forEach(t),vdo=r(nwe," \u2014 "),AP=n(nwe,"A",{href:!0});var sUr=s(AP);Fdo=r(sUr,"Wav2Vec2FeatureExtractor"),sUr.forEach(t),Tdo=r(nwe," (Hubert model)"),nwe.forEach(t),Mdo=i(te),hh=n(te,"LI",{});var swe=s(hh);Oae=n(swe,"STRONG",{});var lUr=s(Oae);Edo=r(lUr,"layoutlmv2"),lUr.forEach(t),Cdo=r(swe," \u2014 "),yP=n(swe,"A",{href:!0});var iUr=s(yP);wdo=r(iUr,"LayoutLMv2FeatureExtractor"),iUr.forEach(t),Ado=r(swe," (LayoutLMv2 model)"),swe.forEach(t),ydo=i(te),ph=n(te,"LI",{});var lwe=s(ph);Vae=n(lwe,"STRONG",{});var dUr=s(Vae);Ldo=r(dUr,"maskformer"),dUr.forEach(t),xdo=r(lwe," \u2014 "),LP=n(lwe,"A",{href:!0});var cUr=s(LP);$do=r(cUr,"MaskFormerFeatureExtractor"),cUr.forEach(t),kdo=r(lwe," (MaskFormer model)"),lwe.forEach(t),Sdo=i(te),_h=n(te,"LI",{});var iwe=s(_h);Xae=n(iwe,"STRONG",{});var fUr=s(Xae);Rdo=r(fUr,"perceiver"),fUr.forEach(t),Bdo=r(iwe," \u2014 "),xP=n(iwe,"A",{href:!0});var mUr=s(xP);Pdo=r(mUr,"PerceiverFeatureExtractor"),mUr.forEach(t),Ido=r(iwe," (Perceiver model)"),iwe.forEach(t),qdo=i(te),uh=n(te,"LI",{});var dwe=s(uh);zae=n(dwe,"STRONG",{});var gUr=s(zae);Ndo=r(gUr,"poolformer"),gUr.forEach(t),jdo=r(dwe," \u2014 "),$P=n(dwe,"A",{href:!0});var hUr=s($P);Ddo=r(hUr,"PoolFormerFeatureExtractor"),hUr.forEach(t),Gdo=r(dwe," (PoolFormer model)"),dwe.forEach(t),Odo=i(te),bh=n(te,"LI",{});var cwe=s(bh);Wae=n(cwe,"STRONG",{});var pUr=s(Wae);Vdo=r(pUr,"regnet"),pUr.forEach(t),Xdo=r(cwe," \u2014 "),kP=n(cwe,"A",{href:!0});var _Ur=s(kP);zdo=r(_Ur,"ConvNextFeatureExtractor"),_Ur.forEach(t),Wdo=r(cwe," (RegNet model)"),cwe.forEach(t),Qdo=i(te),vh=n(te,"LI",{});var fwe=s(vh);Qae=n(fwe,"STRONG",{});var uUr=s(Qae);Hdo=r(uUr,"resnet"),uUr.forEach(t),Udo=r(fwe," \u2014 "),SP=n(fwe,"A",{href:!0});var bUr=s(SP);Jdo=r(bUr,"ConvNextFeatureExtractor"),bUr.forEach(t),Ydo=r(fwe," (ResNet model)"),fwe.forEach(t),Kdo=i(te),Fh=n(te,"LI",{});var mwe=s(Fh);Hae=n(mwe,"STRONG",{});var vUr=s(Hae);Zdo=r(vUr,"segformer"),vUr.forEach(t),eco=r(mwe," \u2014 "),RP=n(mwe,"A",{href:!0});var FUr=s(RP);oco=r(FUr,"SegformerFeatureExtractor"),FUr.forEach(t),rco=r(mwe," (SegFormer model)"),mwe.forEach(t),tco=i(te),Th=n(te,"LI",{});var gwe=s(Th);Uae=n(gwe,"STRONG",{});var TUr=s(Uae);aco=r(TUr,"speech_to_text"),TUr.forEach(t),nco=r(gwe," \u2014 "),BP=n(gwe,"A",{href:!0});var MUr=s(BP);sco=r(MUr,"Speech2TextFeatureExtractor"),MUr.forEach(t),lco=r(gwe," (Speech2Text model)"),gwe.forEach(t),ico=i(te),Mh=n(te,"LI",{});var hwe=s(Mh);Jae=n(hwe,"STRONG",{});var EUr=s(Jae);dco=r(EUr,"swin"),EUr.forEach(t),cco=r(hwe," \u2014 "),PP=n(hwe,"A",{href:!0});var CUr=s(PP);fco=r(CUr,"ViTFeatureExtractor"),CUr.forEach(t),mco=r(hwe," (Swin model)"),hwe.forEach(t),gco=i(te),Eh=n(te,"LI",{});var pwe=s(Eh);Yae=n(pwe,"STRONG",{});var wUr=s(Yae);hco=r(wUr,"van"),wUr.forEach(t),pco=r(pwe," \u2014 "),IP=n(pwe,"A",{href:!0});var AUr=s(IP);_co=r(AUr,"ConvNextFeatureExtractor"),AUr.forEach(t),uco=r(pwe," (VAN model)"),pwe.forEach(t),bco=i(te),Ch=n(te,"LI",{});var _we=s(Ch);Kae=n(_we,"STRONG",{});var yUr=s(Kae);vco=r(yUr,"vit"),yUr.forEach(t),Fco=r(_we," \u2014 "),qP=n(_we,"A",{href:!0});var LUr=s(qP);Tco=r(LUr,"ViTFeatureExtractor"),LUr.forEach(t),Mco=r(_we," (ViT model)"),_we.forEach(t),Eco=i(te),wh=n(te,"LI",{});var uwe=s(wh);Zae=n(uwe,"STRONG",{});var xUr=s(Zae);Cco=r(xUr,"vit_mae"),xUr.forEach(t),wco=r(uwe," \u2014 "),NP=n(uwe,"A",{href:!0});var $Ur=s(NP);Aco=r($Ur,"ViTFeatureExtractor"),$Ur.forEach(t),yco=r(uwe," (ViTMAE model)"),uwe.forEach(t),Lco=i(te),Ah=n(te,"LI",{});var bwe=s(Ah);ene=n(bwe,"STRONG",{});var kUr=s(ene);xco=r(kUr,"wav2vec2"),kUr.forEach(t),$co=r(bwe," \u2014 "),jP=n(bwe,"A",{href:!0});var SUr=s(jP);kco=r(SUr,"Wav2Vec2FeatureExtractor"),SUr.forEach(t),Sco=r(bwe," (Wav2Vec2 model)"),bwe.forEach(t),Rco=i(te),yh=n(te,"LI",{});var vwe=s(yh);one=n(vwe,"STRONG",{});var RUr=s(one);Bco=r(RUr,"wav2vec2-conformer"),RUr.forEach(t),Pco=r(vwe," \u2014 "),DP=n(vwe,"A",{href:!0});var BUr=s(DP);Ico=r(BUr,"Wav2Vec2FeatureExtractor"),BUr.forEach(t),qco=r(vwe," (Wav2Vec2-Conformer model)"),vwe.forEach(t),Nco=i(te),Lh=n(te,"LI",{});var Fwe=s(Lh);rne=n(Fwe,"STRONG",{});var PUr=s(rne);jco=r(PUr,"yolos"),PUr.forEach(t),Dco=r(Fwe," \u2014 "),GP=n(Fwe,"A",{href:!0});var IUr=s(GP);Gco=r(IUr,"YolosFeatureExtractor"),IUr.forEach(t),Oco=r(Fwe," (YOLOS model)"),Fwe.forEach(t),te.forEach(t),Vco=i(Zt),T(xh.$$.fragment,Zt),Xco=i(Zt),T($h.$$.fragment,Zt),Zt.forEach(t),zco=i(Ns),kh=n(Ns,"DIV",{class:!0});var tje=s(kh);T(k6.$$.fragment,tje),Wco=i(tje),tne=n(tje,"P",{});var qUr=s(tne);Qco=r(qUr,"Register a new feature extractor for this class."),qUr.forEach(t),tje.forEach(t),Ns.forEach(t),rqe=i(f),Mi=n(f,"H2",{class:!0});var aje=s(Mi);Sh=n(aje,"A",{id:!0,class:!0,href:!0});var NUr=s(Sh);ane=n(NUr,"SPAN",{});var jUr=s(ane);T(S6.$$.fragment,jUr),jUr.forEach(t),NUr.forEach(t),Hco=i(aje),nne=n(aje,"SPAN",{});var DUr=s(nne);Uco=r(DUr,"AutoProcessor"),DUr.forEach(t),aje.forEach(t),tqe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(R6.$$.fragment,js),Jco=i(js),B6=n(js,"P",{});var nje=s(B6);Yco=r(nje,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),OP=n(nje,"A",{href:!0});var GUr=s(OP);Kco=r(GUr,"AutoProcessor.from_pretrained()"),GUr.forEach(t),Zco=r(nje," class method."),nje.forEach(t),efo=i(js),P6=n(js,"P",{});var sje=s(P6);ofo=r(sje,"This class cannot be instantiated directly using "),sne=n(sje,"CODE",{});var OUr=s(sne);rfo=r(OUr,"__init__()"),OUr.forEach(t),tfo=r(sje," (throws an error)."),sje.forEach(t),afo=i(js),Ue=n(js,"DIV",{class:!0});var ea=s(Ue);T(I6.$$.fragment,ea),nfo=i(ea),lne=n(ea,"P",{});var VUr=s(lne);sfo=r(VUr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),VUr.forEach(t),lfo=i(ea),Ei=n(ea,"P",{});var IK=s(Ei);ifo=r(IK,"The processor class to instantiate is selected based on the "),ine=n(IK,"CODE",{});var XUr=s(ine);dfo=r(XUr,"model_type"),XUr.forEach(t),cfo=r(IK,` property of the config object (either
passed as an argument or loaded from `),dne=n(IK,"CODE",{});var zUr=s(dne);ffo=r(zUr,"pretrained_model_name_or_path"),zUr.forEach(t),mfo=r(IK," if possible):"),IK.forEach(t),gfo=i(ea),pe=n(ea,"UL",{});var be=s(pe);Rh=n(be,"LI",{});var Twe=s(Rh);cne=n(Twe,"STRONG",{});var WUr=s(cne);hfo=r(WUr,"clip"),WUr.forEach(t),pfo=r(Twe," \u2014 "),VP=n(Twe,"A",{href:!0});var QUr=s(VP);_fo=r(QUr,"CLIPProcessor"),QUr.forEach(t),ufo=r(Twe," (CLIP model)"),Twe.forEach(t),bfo=i(be),Bh=n(be,"LI",{});var Mwe=s(Bh);fne=n(Mwe,"STRONG",{});var HUr=s(fne);vfo=r(HUr,"flava"),HUr.forEach(t),Ffo=r(Mwe," \u2014 "),mne=n(Mwe,"CODE",{});var UUr=s(mne);Tfo=r(UUr,"FLAVAProcessor"),UUr.forEach(t),Mfo=r(Mwe," (Flava model)"),Mwe.forEach(t),Efo=i(be),Ph=n(be,"LI",{});var Ewe=s(Ph);gne=n(Ewe,"STRONG",{});var JUr=s(gne);Cfo=r(JUr,"layoutlmv2"),JUr.forEach(t),wfo=r(Ewe," \u2014 "),XP=n(Ewe,"A",{href:!0});var YUr=s(XP);Afo=r(YUr,"LayoutLMv2Processor"),YUr.forEach(t),yfo=r(Ewe," (LayoutLMv2 model)"),Ewe.forEach(t),Lfo=i(be),Ih=n(be,"LI",{});var Cwe=s(Ih);hne=n(Cwe,"STRONG",{});var KUr=s(hne);xfo=r(KUr,"layoutxlm"),KUr.forEach(t),$fo=r(Cwe," \u2014 "),zP=n(Cwe,"A",{href:!0});var ZUr=s(zP);kfo=r(ZUr,"LayoutXLMProcessor"),ZUr.forEach(t),Sfo=r(Cwe," (LayoutXLM model)"),Cwe.forEach(t),Rfo=i(be),qh=n(be,"LI",{});var wwe=s(qh);pne=n(wwe,"STRONG",{});var eJr=s(pne);Bfo=r(eJr,"sew"),eJr.forEach(t),Pfo=r(wwe," \u2014 "),WP=n(wwe,"A",{href:!0});var oJr=s(WP);Ifo=r(oJr,"Wav2Vec2Processor"),oJr.forEach(t),qfo=r(wwe," (SEW model)"),wwe.forEach(t),Nfo=i(be),Nh=n(be,"LI",{});var Awe=s(Nh);_ne=n(Awe,"STRONG",{});var rJr=s(_ne);jfo=r(rJr,"sew-d"),rJr.forEach(t),Dfo=r(Awe," \u2014 "),QP=n(Awe,"A",{href:!0});var tJr=s(QP);Gfo=r(tJr,"Wav2Vec2Processor"),tJr.forEach(t),Ofo=r(Awe," (SEW-D model)"),Awe.forEach(t),Vfo=i(be),jh=n(be,"LI",{});var ywe=s(jh);une=n(ywe,"STRONG",{});var aJr=s(une);Xfo=r(aJr,"speech_to_text"),aJr.forEach(t),zfo=r(ywe," \u2014 "),HP=n(ywe,"A",{href:!0});var nJr=s(HP);Wfo=r(nJr,"Speech2TextProcessor"),nJr.forEach(t),Qfo=r(ywe," (Speech2Text model)"),ywe.forEach(t),Hfo=i(be),Dh=n(be,"LI",{});var Lwe=s(Dh);bne=n(Lwe,"STRONG",{});var sJr=s(bne);Ufo=r(sJr,"speech_to_text_2"),sJr.forEach(t),Jfo=r(Lwe," \u2014 "),UP=n(Lwe,"A",{href:!0});var lJr=s(UP);Yfo=r(lJr,"Speech2Text2Processor"),lJr.forEach(t),Kfo=r(Lwe," (Speech2Text2 model)"),Lwe.forEach(t),Zfo=i(be),Gh=n(be,"LI",{});var xwe=s(Gh);vne=n(xwe,"STRONG",{});var iJr=s(vne);emo=r(iJr,"trocr"),iJr.forEach(t),omo=r(xwe," \u2014 "),JP=n(xwe,"A",{href:!0});var dJr=s(JP);rmo=r(dJr,"TrOCRProcessor"),dJr.forEach(t),tmo=r(xwe," (TrOCR model)"),xwe.forEach(t),amo=i(be),Oh=n(be,"LI",{});var $we=s(Oh);Fne=n($we,"STRONG",{});var cJr=s(Fne);nmo=r(cJr,"unispeech"),cJr.forEach(t),smo=r($we," \u2014 "),YP=n($we,"A",{href:!0});var fJr=s(YP);lmo=r(fJr,"Wav2Vec2Processor"),fJr.forEach(t),imo=r($we," (UniSpeech model)"),$we.forEach(t),dmo=i(be),Vh=n(be,"LI",{});var kwe=s(Vh);Tne=n(kwe,"STRONG",{});var mJr=s(Tne);cmo=r(mJr,"unispeech-sat"),mJr.forEach(t),fmo=r(kwe," \u2014 "),KP=n(kwe,"A",{href:!0});var gJr=s(KP);mmo=r(gJr,"Wav2Vec2Processor"),gJr.forEach(t),gmo=r(kwe," (UniSpeechSat model)"),kwe.forEach(t),hmo=i(be),Xh=n(be,"LI",{});var Swe=s(Xh);Mne=n(Swe,"STRONG",{});var hJr=s(Mne);pmo=r(hJr,"vilt"),hJr.forEach(t),_mo=r(Swe," \u2014 "),ZP=n(Swe,"A",{href:!0});var pJr=s(ZP);umo=r(pJr,"ViltProcessor"),pJr.forEach(t),bmo=r(Swe," (ViLT model)"),Swe.forEach(t),vmo=i(be),zh=n(be,"LI",{});var Rwe=s(zh);Ene=n(Rwe,"STRONG",{});var _Jr=s(Ene);Fmo=r(_Jr,"vision-text-dual-encoder"),_Jr.forEach(t),Tmo=r(Rwe," \u2014 "),eI=n(Rwe,"A",{href:!0});var uJr=s(eI);Mmo=r(uJr,"VisionTextDualEncoderProcessor"),uJr.forEach(t),Emo=r(Rwe," (VisionTextDualEncoder model)"),Rwe.forEach(t),Cmo=i(be),Wh=n(be,"LI",{});var Bwe=s(Wh);Cne=n(Bwe,"STRONG",{});var bJr=s(Cne);wmo=r(bJr,"wav2vec2"),bJr.forEach(t),Amo=r(Bwe," \u2014 "),oI=n(Bwe,"A",{href:!0});var vJr=s(oI);ymo=r(vJr,"Wav2Vec2Processor"),vJr.forEach(t),Lmo=r(Bwe," (Wav2Vec2 model)"),Bwe.forEach(t),xmo=i(be),Qh=n(be,"LI",{});var Pwe=s(Qh);wne=n(Pwe,"STRONG",{});var FJr=s(wne);$mo=r(FJr,"wav2vec2-conformer"),FJr.forEach(t),kmo=r(Pwe," \u2014 "),rI=n(Pwe,"A",{href:!0});var TJr=s(rI);Smo=r(TJr,"Wav2Vec2Processor"),TJr.forEach(t),Rmo=r(Pwe," (Wav2Vec2-Conformer model)"),Pwe.forEach(t),Bmo=i(be),Hh=n(be,"LI",{});var Iwe=s(Hh);Ane=n(Iwe,"STRONG",{});var MJr=s(Ane);Pmo=r(MJr,"wavlm"),MJr.forEach(t),Imo=r(Iwe," \u2014 "),tI=n(Iwe,"A",{href:!0});var EJr=s(tI);qmo=r(EJr,"Wav2Vec2Processor"),EJr.forEach(t),Nmo=r(Iwe," (WavLM model)"),Iwe.forEach(t),be.forEach(t),jmo=i(ea),T(Uh.$$.fragment,ea),Dmo=i(ea),T(Jh.$$.fragment,ea),ea.forEach(t),Gmo=i(js),Yh=n(js,"DIV",{class:!0});var lje=s(Yh);T(q6.$$.fragment,lje),Omo=i(lje),yne=n(lje,"P",{});var CJr=s(yne);Vmo=r(CJr,"Register a new processor for this class."),CJr.forEach(t),lje.forEach(t),js.forEach(t),aqe=i(f),Ci=n(f,"H2",{class:!0});var ije=s(Ci);Kh=n(ije,"A",{id:!0,class:!0,href:!0});var wJr=s(Kh);Lne=n(wJr,"SPAN",{});var AJr=s(Lne);T(N6.$$.fragment,AJr),AJr.forEach(t),wJr.forEach(t),Xmo=i(ije),xne=n(ije,"SPAN",{});var yJr=s(xne);zmo=r(yJr,"AutoModel"),yJr.forEach(t),ije.forEach(t),nqe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(j6.$$.fragment,Ds),Wmo=i(Ds),wi=n(Ds,"P",{});var qK=s(wi);Qmo=r(qK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aI=n(qK,"A",{href:!0});var LJr=s(aI);Hmo=r(LJr,"from_pretrained()"),LJr.forEach(t),Umo=r(qK," class method or the "),nI=n(qK,"A",{href:!0});var xJr=s(nI);Jmo=r(xJr,"from_config()"),xJr.forEach(t),Ymo=r(qK,` class
method.`),qK.forEach(t),Kmo=i(Ds),D6=n(Ds,"P",{});var dje=s(D6);Zmo=r(dje,"This class cannot be instantiated directly using "),$ne=n(dje,"CODE",{});var $Jr=s($ne);ego=r($Jr,"__init__()"),$Jr.forEach(t),ogo=r(dje," (throws an error)."),dje.forEach(t),rgo=i(Ds),tt=n(Ds,"DIV",{class:!0});var _w=s(tt);T(G6.$$.fragment,_w),tgo=i(_w),kne=n(_w,"P",{});var kJr=s(kne);ago=r(kJr,"Instantiates one of the base model classes of the library from a configuration."),kJr.forEach(t),ngo=i(_w),Ai=n(_w,"P",{});var NK=s(Ai);sgo=r(NK,`Note:
Loading a model from its configuration file does `),Sne=n(NK,"STRONG",{});var SJr=s(Sne);lgo=r(SJr,"not"),SJr.forEach(t),igo=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sI=n(NK,"A",{href:!0});var RJr=s(sI);dgo=r(RJr,"from_pretrained()"),RJr.forEach(t),cgo=r(NK," to load the model weights."),NK.forEach(t),fgo=i(_w),T(Zh.$$.fragment,_w),_w.forEach(t),mgo=i(Ds),Je=n(Ds,"DIV",{class:!0});var oa=s(Je);T(O6.$$.fragment,oa),ggo=i(oa),Rne=n(oa,"P",{});var BJr=s(Rne);hgo=r(BJr,"Instantiate one of the base model classes of the library from a pretrained model."),BJr.forEach(t),pgo=i(oa),La=n(oa,"P",{});var uw=s(La);_go=r(uw,"The model class to instantiate is selected based on the "),Bne=n(uw,"CODE",{});var PJr=s(Bne);ugo=r(PJr,"model_type"),PJr.forEach(t),bgo=r(uw,` property of the config object (either
passed as an argument or loaded from `),Pne=n(uw,"CODE",{});var IJr=s(Pne);vgo=r(IJr,"pretrained_model_name_or_path"),IJr.forEach(t),Fgo=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ine=n(uw,"CODE",{});var qJr=s(Ine);Tgo=r(qJr,"pretrained_model_name_or_path"),qJr.forEach(t),Mgo=r(uw,":"),uw.forEach(t),Ego=i(oa),x=n(oa,"UL",{});var $=s(x);ep=n($,"LI",{});var qwe=s(ep);qne=n(qwe,"STRONG",{});var NJr=s(qne);Cgo=r(NJr,"albert"),NJr.forEach(t),wgo=r(qwe," \u2014 "),lI=n(qwe,"A",{href:!0});var jJr=s(lI);Ago=r(jJr,"AlbertModel"),jJr.forEach(t),ygo=r(qwe," (ALBERT model)"),qwe.forEach(t),Lgo=i($),op=n($,"LI",{});var Nwe=s(op);Nne=n(Nwe,"STRONG",{});var DJr=s(Nne);xgo=r(DJr,"bart"),DJr.forEach(t),$go=r(Nwe," \u2014 "),iI=n(Nwe,"A",{href:!0});var GJr=s(iI);kgo=r(GJr,"BartModel"),GJr.forEach(t),Sgo=r(Nwe," (BART model)"),Nwe.forEach(t),Rgo=i($),rp=n($,"LI",{});var jwe=s(rp);jne=n(jwe,"STRONG",{});var OJr=s(jne);Bgo=r(OJr,"beit"),OJr.forEach(t),Pgo=r(jwe," \u2014 "),dI=n(jwe,"A",{href:!0});var VJr=s(dI);Igo=r(VJr,"BeitModel"),VJr.forEach(t),qgo=r(jwe," (BEiT model)"),jwe.forEach(t),Ngo=i($),tp=n($,"LI",{});var Dwe=s(tp);Dne=n(Dwe,"STRONG",{});var XJr=s(Dne);jgo=r(XJr,"bert"),XJr.forEach(t),Dgo=r(Dwe," \u2014 "),cI=n(Dwe,"A",{href:!0});var zJr=s(cI);Ggo=r(zJr,"BertModel"),zJr.forEach(t),Ogo=r(Dwe," (BERT model)"),Dwe.forEach(t),Vgo=i($),ap=n($,"LI",{});var Gwe=s(ap);Gne=n(Gwe,"STRONG",{});var WJr=s(Gne);Xgo=r(WJr,"bert-generation"),WJr.forEach(t),zgo=r(Gwe," \u2014 "),fI=n(Gwe,"A",{href:!0});var QJr=s(fI);Wgo=r(QJr,"BertGenerationEncoder"),QJr.forEach(t),Qgo=r(Gwe," (Bert Generation model)"),Gwe.forEach(t),Hgo=i($),np=n($,"LI",{});var Owe=s(np);One=n(Owe,"STRONG",{});var HJr=s(One);Ugo=r(HJr,"big_bird"),HJr.forEach(t),Jgo=r(Owe," \u2014 "),mI=n(Owe,"A",{href:!0});var UJr=s(mI);Ygo=r(UJr,"BigBirdModel"),UJr.forEach(t),Kgo=r(Owe," (BigBird model)"),Owe.forEach(t),Zgo=i($),sp=n($,"LI",{});var Vwe=s(sp);Vne=n(Vwe,"STRONG",{});var JJr=s(Vne);eho=r(JJr,"bigbird_pegasus"),JJr.forEach(t),oho=r(Vwe," \u2014 "),gI=n(Vwe,"A",{href:!0});var YJr=s(gI);rho=r(YJr,"BigBirdPegasusModel"),YJr.forEach(t),tho=r(Vwe," (BigBirdPegasus model)"),Vwe.forEach(t),aho=i($),lp=n($,"LI",{});var Xwe=s(lp);Xne=n(Xwe,"STRONG",{});var KJr=s(Xne);nho=r(KJr,"blenderbot"),KJr.forEach(t),sho=r(Xwe," \u2014 "),hI=n(Xwe,"A",{href:!0});var ZJr=s(hI);lho=r(ZJr,"BlenderbotModel"),ZJr.forEach(t),iho=r(Xwe," (Blenderbot model)"),Xwe.forEach(t),dho=i($),ip=n($,"LI",{});var zwe=s(ip);zne=n(zwe,"STRONG",{});var eYr=s(zne);cho=r(eYr,"blenderbot-small"),eYr.forEach(t),fho=r(zwe," \u2014 "),pI=n(zwe,"A",{href:!0});var oYr=s(pI);mho=r(oYr,"BlenderbotSmallModel"),oYr.forEach(t),gho=r(zwe," (BlenderbotSmall model)"),zwe.forEach(t),hho=i($),dp=n($,"LI",{});var Wwe=s(dp);Wne=n(Wwe,"STRONG",{});var rYr=s(Wne);pho=r(rYr,"bloom"),rYr.forEach(t),_ho=r(Wwe," \u2014 "),_I=n(Wwe,"A",{href:!0});var tYr=s(_I);uho=r(tYr,"BloomModel"),tYr.forEach(t),bho=r(Wwe," (Bloom model)"),Wwe.forEach(t),vho=i($),cp=n($,"LI",{});var Qwe=s(cp);Qne=n(Qwe,"STRONG",{});var aYr=s(Qne);Fho=r(aYr,"camembert"),aYr.forEach(t),Tho=r(Qwe," \u2014 "),uI=n(Qwe,"A",{href:!0});var nYr=s(uI);Mho=r(nYr,"CamembertModel"),nYr.forEach(t),Eho=r(Qwe," (CamemBERT model)"),Qwe.forEach(t),Cho=i($),fp=n($,"LI",{});var Hwe=s(fp);Hne=n(Hwe,"STRONG",{});var sYr=s(Hne);who=r(sYr,"canine"),sYr.forEach(t),Aho=r(Hwe," \u2014 "),bI=n(Hwe,"A",{href:!0});var lYr=s(bI);yho=r(lYr,"CanineModel"),lYr.forEach(t),Lho=r(Hwe," (Canine model)"),Hwe.forEach(t),xho=i($),mp=n($,"LI",{});var Uwe=s(mp);Une=n(Uwe,"STRONG",{});var iYr=s(Une);$ho=r(iYr,"clip"),iYr.forEach(t),kho=r(Uwe," \u2014 "),vI=n(Uwe,"A",{href:!0});var dYr=s(vI);Sho=r(dYr,"CLIPModel"),dYr.forEach(t),Rho=r(Uwe," (CLIP model)"),Uwe.forEach(t),Bho=i($),gp=n($,"LI",{});var Jwe=s(gp);Jne=n(Jwe,"STRONG",{});var cYr=s(Jne);Pho=r(cYr,"convbert"),cYr.forEach(t),Iho=r(Jwe," \u2014 "),FI=n(Jwe,"A",{href:!0});var fYr=s(FI);qho=r(fYr,"ConvBertModel"),fYr.forEach(t),Nho=r(Jwe," (ConvBERT model)"),Jwe.forEach(t),jho=i($),hp=n($,"LI",{});var Ywe=s(hp);Yne=n(Ywe,"STRONG",{});var mYr=s(Yne);Dho=r(mYr,"convnext"),mYr.forEach(t),Gho=r(Ywe," \u2014 "),TI=n(Ywe,"A",{href:!0});var gYr=s(TI);Oho=r(gYr,"ConvNextModel"),gYr.forEach(t),Vho=r(Ywe," (ConvNext model)"),Ywe.forEach(t),Xho=i($),pp=n($,"LI",{});var Kwe=s(pp);Kne=n(Kwe,"STRONG",{});var hYr=s(Kne);zho=r(hYr,"ctrl"),hYr.forEach(t),Who=r(Kwe," \u2014 "),MI=n(Kwe,"A",{href:!0});var pYr=s(MI);Qho=r(pYr,"CTRLModel"),pYr.forEach(t),Hho=r(Kwe," (CTRL model)"),Kwe.forEach(t),Uho=i($),_p=n($,"LI",{});var Zwe=s(_p);Zne=n(Zwe,"STRONG",{});var _Yr=s(Zne);Jho=r(_Yr,"data2vec-audio"),_Yr.forEach(t),Yho=r(Zwe," \u2014 "),EI=n(Zwe,"A",{href:!0});var uYr=s(EI);Kho=r(uYr,"Data2VecAudioModel"),uYr.forEach(t),Zho=r(Zwe," (Data2VecAudio model)"),Zwe.forEach(t),epo=i($),up=n($,"LI",{});var eAe=s(up);ese=n(eAe,"STRONG",{});var bYr=s(ese);opo=r(bYr,"data2vec-text"),bYr.forEach(t),rpo=r(eAe," \u2014 "),CI=n(eAe,"A",{href:!0});var vYr=s(CI);tpo=r(vYr,"Data2VecTextModel"),vYr.forEach(t),apo=r(eAe," (Data2VecText model)"),eAe.forEach(t),npo=i($),bp=n($,"LI",{});var oAe=s(bp);ose=n(oAe,"STRONG",{});var FYr=s(ose);spo=r(FYr,"data2vec-vision"),FYr.forEach(t),lpo=r(oAe," \u2014 "),wI=n(oAe,"A",{href:!0});var TYr=s(wI);ipo=r(TYr,"Data2VecVisionModel"),TYr.forEach(t),dpo=r(oAe," (Data2VecVision model)"),oAe.forEach(t),cpo=i($),vp=n($,"LI",{});var rAe=s(vp);rse=n(rAe,"STRONG",{});var MYr=s(rse);fpo=r(MYr,"deberta"),MYr.forEach(t),mpo=r(rAe," \u2014 "),AI=n(rAe,"A",{href:!0});var EYr=s(AI);gpo=r(EYr,"DebertaModel"),EYr.forEach(t),hpo=r(rAe," (DeBERTa model)"),rAe.forEach(t),ppo=i($),Fp=n($,"LI",{});var tAe=s(Fp);tse=n(tAe,"STRONG",{});var CYr=s(tse);_po=r(CYr,"deberta-v2"),CYr.forEach(t),upo=r(tAe," \u2014 "),yI=n(tAe,"A",{href:!0});var wYr=s(yI);bpo=r(wYr,"DebertaV2Model"),wYr.forEach(t),vpo=r(tAe," (DeBERTa-v2 model)"),tAe.forEach(t),Fpo=i($),Tp=n($,"LI",{});var aAe=s(Tp);ase=n(aAe,"STRONG",{});var AYr=s(ase);Tpo=r(AYr,"decision_transformer"),AYr.forEach(t),Mpo=r(aAe," \u2014 "),LI=n(aAe,"A",{href:!0});var yYr=s(LI);Epo=r(yYr,"DecisionTransformerModel"),yYr.forEach(t),Cpo=r(aAe," (Decision Transformer model)"),aAe.forEach(t),wpo=i($),Mp=n($,"LI",{});var nAe=s(Mp);nse=n(nAe,"STRONG",{});var LYr=s(nse);Apo=r(LYr,"deit"),LYr.forEach(t),ypo=r(nAe," \u2014 "),xI=n(nAe,"A",{href:!0});var xYr=s(xI);Lpo=r(xYr,"DeiTModel"),xYr.forEach(t),xpo=r(nAe," (DeiT model)"),nAe.forEach(t),$po=i($),Ep=n($,"LI",{});var sAe=s(Ep);sse=n(sAe,"STRONG",{});var $Yr=s(sse);kpo=r($Yr,"detr"),$Yr.forEach(t),Spo=r(sAe," \u2014 "),$I=n(sAe,"A",{href:!0});var kYr=s($I);Rpo=r(kYr,"DetrModel"),kYr.forEach(t),Bpo=r(sAe," (DETR model)"),sAe.forEach(t),Ppo=i($),Cp=n($,"LI",{});var lAe=s(Cp);lse=n(lAe,"STRONG",{});var SYr=s(lse);Ipo=r(SYr,"distilbert"),SYr.forEach(t),qpo=r(lAe," \u2014 "),kI=n(lAe,"A",{href:!0});var RYr=s(kI);Npo=r(RYr,"DistilBertModel"),RYr.forEach(t),jpo=r(lAe," (DistilBERT model)"),lAe.forEach(t),Dpo=i($),wp=n($,"LI",{});var iAe=s(wp);ise=n(iAe,"STRONG",{});var BYr=s(ise);Gpo=r(BYr,"dpr"),BYr.forEach(t),Opo=r(iAe," \u2014 "),SI=n(iAe,"A",{href:!0});var PYr=s(SI);Vpo=r(PYr,"DPRQuestionEncoder"),PYr.forEach(t),Xpo=r(iAe," (DPR model)"),iAe.forEach(t),zpo=i($),Ap=n($,"LI",{});var dAe=s(Ap);dse=n(dAe,"STRONG",{});var IYr=s(dse);Wpo=r(IYr,"dpt"),IYr.forEach(t),Qpo=r(dAe," \u2014 "),RI=n(dAe,"A",{href:!0});var qYr=s(RI);Hpo=r(qYr,"DPTModel"),qYr.forEach(t),Upo=r(dAe," (DPT model)"),dAe.forEach(t),Jpo=i($),yp=n($,"LI",{});var cAe=s(yp);cse=n(cAe,"STRONG",{});var NYr=s(cse);Ypo=r(NYr,"electra"),NYr.forEach(t),Kpo=r(cAe," \u2014 "),BI=n(cAe,"A",{href:!0});var jYr=s(BI);Zpo=r(jYr,"ElectraModel"),jYr.forEach(t),e_o=r(cAe," (ELECTRA model)"),cAe.forEach(t),o_o=i($),Lp=n($,"LI",{});var fAe=s(Lp);fse=n(fAe,"STRONG",{});var DYr=s(fse);r_o=r(DYr,"flaubert"),DYr.forEach(t),t_o=r(fAe," \u2014 "),PI=n(fAe,"A",{href:!0});var GYr=s(PI);a_o=r(GYr,"FlaubertModel"),GYr.forEach(t),n_o=r(fAe," (FlauBERT model)"),fAe.forEach(t),s_o=i($),xp=n($,"LI",{});var mAe=s(xp);mse=n(mAe,"STRONG",{});var OYr=s(mse);l_o=r(OYr,"flava"),OYr.forEach(t),i_o=r(mAe," \u2014 "),II=n(mAe,"A",{href:!0});var VYr=s(II);d_o=r(VYr,"FlavaModel"),VYr.forEach(t),c_o=r(mAe," (Flava model)"),mAe.forEach(t),f_o=i($),$p=n($,"LI",{});var gAe=s($p);gse=n(gAe,"STRONG",{});var XYr=s(gse);m_o=r(XYr,"fnet"),XYr.forEach(t),g_o=r(gAe," \u2014 "),qI=n(gAe,"A",{href:!0});var zYr=s(qI);h_o=r(zYr,"FNetModel"),zYr.forEach(t),p_o=r(gAe," (FNet model)"),gAe.forEach(t),__o=i($),kp=n($,"LI",{});var hAe=s(kp);hse=n(hAe,"STRONG",{});var WYr=s(hse);u_o=r(WYr,"fsmt"),WYr.forEach(t),b_o=r(hAe," \u2014 "),NI=n(hAe,"A",{href:!0});var QYr=s(NI);v_o=r(QYr,"FSMTModel"),QYr.forEach(t),F_o=r(hAe," (FairSeq Machine-Translation model)"),hAe.forEach(t),T_o=i($),Rs=n($,"LI",{});var A$=s(Rs);pse=n(A$,"STRONG",{});var HYr=s(pse);M_o=r(HYr,"funnel"),HYr.forEach(t),E_o=r(A$," \u2014 "),jI=n(A$,"A",{href:!0});var UYr=s(jI);C_o=r(UYr,"FunnelModel"),UYr.forEach(t),w_o=r(A$," or "),DI=n(A$,"A",{href:!0});var JYr=s(DI);A_o=r(JYr,"FunnelBaseModel"),JYr.forEach(t),y_o=r(A$," (Funnel Transformer model)"),A$.forEach(t),L_o=i($),Sp=n($,"LI",{});var pAe=s(Sp);_se=n(pAe,"STRONG",{});var YYr=s(_se);x_o=r(YYr,"glpn"),YYr.forEach(t),$_o=r(pAe," \u2014 "),GI=n(pAe,"A",{href:!0});var KYr=s(GI);k_o=r(KYr,"GLPNModel"),KYr.forEach(t),S_o=r(pAe," (GLPN model)"),pAe.forEach(t),R_o=i($),Rp=n($,"LI",{});var _Ae=s(Rp);use=n(_Ae,"STRONG",{});var ZYr=s(use);B_o=r(ZYr,"gpt2"),ZYr.forEach(t),P_o=r(_Ae," \u2014 "),OI=n(_Ae,"A",{href:!0});var eKr=s(OI);I_o=r(eKr,"GPT2Model"),eKr.forEach(t),q_o=r(_Ae," (OpenAI GPT-2 model)"),_Ae.forEach(t),N_o=i($),Bp=n($,"LI",{});var uAe=s(Bp);bse=n(uAe,"STRONG",{});var oKr=s(bse);j_o=r(oKr,"gpt_neo"),oKr.forEach(t),D_o=r(uAe," \u2014 "),VI=n(uAe,"A",{href:!0});var rKr=s(VI);G_o=r(rKr,"GPTNeoModel"),rKr.forEach(t),O_o=r(uAe," (GPT Neo model)"),uAe.forEach(t),V_o=i($),Pp=n($,"LI",{});var bAe=s(Pp);vse=n(bAe,"STRONG",{});var tKr=s(vse);X_o=r(tKr,"gptj"),tKr.forEach(t),z_o=r(bAe," \u2014 "),XI=n(bAe,"A",{href:!0});var aKr=s(XI);W_o=r(aKr,"GPTJModel"),aKr.forEach(t),Q_o=r(bAe," (GPT-J model)"),bAe.forEach(t),H_o=i($),Ip=n($,"LI",{});var vAe=s(Ip);Fse=n(vAe,"STRONG",{});var nKr=s(Fse);U_o=r(nKr,"hubert"),nKr.forEach(t),J_o=r(vAe," \u2014 "),zI=n(vAe,"A",{href:!0});var sKr=s(zI);Y_o=r(sKr,"HubertModel"),sKr.forEach(t),K_o=r(vAe," (Hubert model)"),vAe.forEach(t),Z_o=i($),qp=n($,"LI",{});var FAe=s(qp);Tse=n(FAe,"STRONG",{});var lKr=s(Tse);euo=r(lKr,"ibert"),lKr.forEach(t),ouo=r(FAe," \u2014 "),WI=n(FAe,"A",{href:!0});var iKr=s(WI);ruo=r(iKr,"IBertModel"),iKr.forEach(t),tuo=r(FAe," (I-BERT model)"),FAe.forEach(t),auo=i($),Np=n($,"LI",{});var TAe=s(Np);Mse=n(TAe,"STRONG",{});var dKr=s(Mse);nuo=r(dKr,"imagegpt"),dKr.forEach(t),suo=r(TAe," \u2014 "),QI=n(TAe,"A",{href:!0});var cKr=s(QI);luo=r(cKr,"ImageGPTModel"),cKr.forEach(t),iuo=r(TAe," (ImageGPT model)"),TAe.forEach(t),duo=i($),jp=n($,"LI",{});var MAe=s(jp);Ese=n(MAe,"STRONG",{});var fKr=s(Ese);cuo=r(fKr,"layoutlm"),fKr.forEach(t),fuo=r(MAe," \u2014 "),HI=n(MAe,"A",{href:!0});var mKr=s(HI);muo=r(mKr,"LayoutLMModel"),mKr.forEach(t),guo=r(MAe," (LayoutLM model)"),MAe.forEach(t),huo=i($),Dp=n($,"LI",{});var EAe=s(Dp);Cse=n(EAe,"STRONG",{});var gKr=s(Cse);puo=r(gKr,"layoutlmv2"),gKr.forEach(t),_uo=r(EAe," \u2014 "),UI=n(EAe,"A",{href:!0});var hKr=s(UI);uuo=r(hKr,"LayoutLMv2Model"),hKr.forEach(t),buo=r(EAe," (LayoutLMv2 model)"),EAe.forEach(t),vuo=i($),Gp=n($,"LI",{});var CAe=s(Gp);wse=n(CAe,"STRONG",{});var pKr=s(wse);Fuo=r(pKr,"led"),pKr.forEach(t),Tuo=r(CAe," \u2014 "),JI=n(CAe,"A",{href:!0});var _Kr=s(JI);Muo=r(_Kr,"LEDModel"),_Kr.forEach(t),Euo=r(CAe," (LED model)"),CAe.forEach(t),Cuo=i($),Op=n($,"LI",{});var wAe=s(Op);Ase=n(wAe,"STRONG",{});var uKr=s(Ase);wuo=r(uKr,"longformer"),uKr.forEach(t),Auo=r(wAe," \u2014 "),YI=n(wAe,"A",{href:!0});var bKr=s(YI);yuo=r(bKr,"LongformerModel"),bKr.forEach(t),Luo=r(wAe," (Longformer model)"),wAe.forEach(t),xuo=i($),Vp=n($,"LI",{});var AAe=s(Vp);yse=n(AAe,"STRONG",{});var vKr=s(yse);$uo=r(vKr,"luke"),vKr.forEach(t),kuo=r(AAe," \u2014 "),KI=n(AAe,"A",{href:!0});var FKr=s(KI);Suo=r(FKr,"LukeModel"),FKr.forEach(t),Ruo=r(AAe," (LUKE model)"),AAe.forEach(t),Buo=i($),Xp=n($,"LI",{});var yAe=s(Xp);Lse=n(yAe,"STRONG",{});var TKr=s(Lse);Puo=r(TKr,"lxmert"),TKr.forEach(t),Iuo=r(yAe," \u2014 "),ZI=n(yAe,"A",{href:!0});var MKr=s(ZI);quo=r(MKr,"LxmertModel"),MKr.forEach(t),Nuo=r(yAe," (LXMERT model)"),yAe.forEach(t),juo=i($),zp=n($,"LI",{});var LAe=s(zp);xse=n(LAe,"STRONG",{});var EKr=s(xse);Duo=r(EKr,"m2m_100"),EKr.forEach(t),Guo=r(LAe," \u2014 "),eq=n(LAe,"A",{href:!0});var CKr=s(eq);Ouo=r(CKr,"M2M100Model"),CKr.forEach(t),Vuo=r(LAe," (M2M100 model)"),LAe.forEach(t),Xuo=i($),Wp=n($,"LI",{});var xAe=s(Wp);$se=n(xAe,"STRONG",{});var wKr=s($se);zuo=r(wKr,"marian"),wKr.forEach(t),Wuo=r(xAe," \u2014 "),oq=n(xAe,"A",{href:!0});var AKr=s(oq);Quo=r(AKr,"MarianModel"),AKr.forEach(t),Huo=r(xAe," (Marian model)"),xAe.forEach(t),Uuo=i($),Qp=n($,"LI",{});var $Ae=s(Qp);kse=n($Ae,"STRONG",{});var yKr=s(kse);Juo=r(yKr,"maskformer"),yKr.forEach(t),Yuo=r($Ae," \u2014 "),rq=n($Ae,"A",{href:!0});var LKr=s(rq);Kuo=r(LKr,"MaskFormerModel"),LKr.forEach(t),Zuo=r($Ae," (MaskFormer model)"),$Ae.forEach(t),e2o=i($),Hp=n($,"LI",{});var kAe=s(Hp);Sse=n(kAe,"STRONG",{});var xKr=s(Sse);o2o=r(xKr,"mbart"),xKr.forEach(t),r2o=r(kAe," \u2014 "),tq=n(kAe,"A",{href:!0});var $Kr=s(tq);t2o=r($Kr,"MBartModel"),$Kr.forEach(t),a2o=r(kAe," (mBART model)"),kAe.forEach(t),n2o=i($),Up=n($,"LI",{});var SAe=s(Up);Rse=n(SAe,"STRONG",{});var kKr=s(Rse);s2o=r(kKr,"megatron-bert"),kKr.forEach(t),l2o=r(SAe," \u2014 "),aq=n(SAe,"A",{href:!0});var SKr=s(aq);i2o=r(SKr,"MegatronBertModel"),SKr.forEach(t),d2o=r(SAe," (MegatronBert model)"),SAe.forEach(t),c2o=i($),Jp=n($,"LI",{});var RAe=s(Jp);Bse=n(RAe,"STRONG",{});var RKr=s(Bse);f2o=r(RKr,"mobilebert"),RKr.forEach(t),m2o=r(RAe," \u2014 "),nq=n(RAe,"A",{href:!0});var BKr=s(nq);g2o=r(BKr,"MobileBertModel"),BKr.forEach(t),h2o=r(RAe," (MobileBERT model)"),RAe.forEach(t),p2o=i($),Yp=n($,"LI",{});var BAe=s(Yp);Pse=n(BAe,"STRONG",{});var PKr=s(Pse);_2o=r(PKr,"mpnet"),PKr.forEach(t),u2o=r(BAe," \u2014 "),sq=n(BAe,"A",{href:!0});var IKr=s(sq);b2o=r(IKr,"MPNetModel"),IKr.forEach(t),v2o=r(BAe," (MPNet model)"),BAe.forEach(t),F2o=i($),Kp=n($,"LI",{});var PAe=s(Kp);Ise=n(PAe,"STRONG",{});var qKr=s(Ise);T2o=r(qKr,"mt5"),qKr.forEach(t),M2o=r(PAe," \u2014 "),lq=n(PAe,"A",{href:!0});var NKr=s(lq);E2o=r(NKr,"MT5Model"),NKr.forEach(t),C2o=r(PAe," (mT5 model)"),PAe.forEach(t),w2o=i($),Zp=n($,"LI",{});var IAe=s(Zp);qse=n(IAe,"STRONG",{});var jKr=s(qse);A2o=r(jKr,"nystromformer"),jKr.forEach(t),y2o=r(IAe," \u2014 "),iq=n(IAe,"A",{href:!0});var DKr=s(iq);L2o=r(DKr,"NystromformerModel"),DKr.forEach(t),x2o=r(IAe," (Nystromformer model)"),IAe.forEach(t),$2o=i($),e_=n($,"LI",{});var qAe=s(e_);Nse=n(qAe,"STRONG",{});var GKr=s(Nse);k2o=r(GKr,"openai-gpt"),GKr.forEach(t),S2o=r(qAe," \u2014 "),dq=n(qAe,"A",{href:!0});var OKr=s(dq);R2o=r(OKr,"OpenAIGPTModel"),OKr.forEach(t),B2o=r(qAe," (OpenAI GPT model)"),qAe.forEach(t),P2o=i($),o_=n($,"LI",{});var NAe=s(o_);jse=n(NAe,"STRONG",{});var VKr=s(jse);I2o=r(VKr,"opt"),VKr.forEach(t),q2o=r(NAe," \u2014 "),cq=n(NAe,"A",{href:!0});var XKr=s(cq);N2o=r(XKr,"OPTModel"),XKr.forEach(t),j2o=r(NAe," (OPT model)"),NAe.forEach(t),D2o=i($),r_=n($,"LI",{});var jAe=s(r_);Dse=n(jAe,"STRONG",{});var zKr=s(Dse);G2o=r(zKr,"pegasus"),zKr.forEach(t),O2o=r(jAe," \u2014 "),fq=n(jAe,"A",{href:!0});var WKr=s(fq);V2o=r(WKr,"PegasusModel"),WKr.forEach(t),X2o=r(jAe," (Pegasus model)"),jAe.forEach(t),z2o=i($),t_=n($,"LI",{});var DAe=s(t_);Gse=n(DAe,"STRONG",{});var QKr=s(Gse);W2o=r(QKr,"perceiver"),QKr.forEach(t),Q2o=r(DAe," \u2014 "),mq=n(DAe,"A",{href:!0});var HKr=s(mq);H2o=r(HKr,"PerceiverModel"),HKr.forEach(t),U2o=r(DAe," (Perceiver model)"),DAe.forEach(t),J2o=i($),a_=n($,"LI",{});var GAe=s(a_);Ose=n(GAe,"STRONG",{});var UKr=s(Ose);Y2o=r(UKr,"plbart"),UKr.forEach(t),K2o=r(GAe," \u2014 "),gq=n(GAe,"A",{href:!0});var JKr=s(gq);Z2o=r(JKr,"PLBartModel"),JKr.forEach(t),e1o=r(GAe," (PLBart model)"),GAe.forEach(t),o1o=i($),n_=n($,"LI",{});var OAe=s(n_);Vse=n(OAe,"STRONG",{});var YKr=s(Vse);r1o=r(YKr,"poolformer"),YKr.forEach(t),t1o=r(OAe," \u2014 "),hq=n(OAe,"A",{href:!0});var KKr=s(hq);a1o=r(KKr,"PoolFormerModel"),KKr.forEach(t),n1o=r(OAe," (PoolFormer model)"),OAe.forEach(t),s1o=i($),s_=n($,"LI",{});var VAe=s(s_);Xse=n(VAe,"STRONG",{});var ZKr=s(Xse);l1o=r(ZKr,"prophetnet"),ZKr.forEach(t),i1o=r(VAe," \u2014 "),pq=n(VAe,"A",{href:!0});var eZr=s(pq);d1o=r(eZr,"ProphetNetModel"),eZr.forEach(t),c1o=r(VAe," (ProphetNet model)"),VAe.forEach(t),f1o=i($),l_=n($,"LI",{});var XAe=s(l_);zse=n(XAe,"STRONG",{});var oZr=s(zse);m1o=r(oZr,"qdqbert"),oZr.forEach(t),g1o=r(XAe," \u2014 "),_q=n(XAe,"A",{href:!0});var rZr=s(_q);h1o=r(rZr,"QDQBertModel"),rZr.forEach(t),p1o=r(XAe," (QDQBert model)"),XAe.forEach(t),_1o=i($),i_=n($,"LI",{});var zAe=s(i_);Wse=n(zAe,"STRONG",{});var tZr=s(Wse);u1o=r(tZr,"reformer"),tZr.forEach(t),b1o=r(zAe," \u2014 "),uq=n(zAe,"A",{href:!0});var aZr=s(uq);v1o=r(aZr,"ReformerModel"),aZr.forEach(t),F1o=r(zAe," (Reformer model)"),zAe.forEach(t),T1o=i($),d_=n($,"LI",{});var WAe=s(d_);Qse=n(WAe,"STRONG",{});var nZr=s(Qse);M1o=r(nZr,"regnet"),nZr.forEach(t),E1o=r(WAe," \u2014 "),bq=n(WAe,"A",{href:!0});var sZr=s(bq);C1o=r(sZr,"RegNetModel"),sZr.forEach(t),w1o=r(WAe," (RegNet model)"),WAe.forEach(t),A1o=i($),c_=n($,"LI",{});var QAe=s(c_);Hse=n(QAe,"STRONG",{});var lZr=s(Hse);y1o=r(lZr,"rembert"),lZr.forEach(t),L1o=r(QAe," \u2014 "),vq=n(QAe,"A",{href:!0});var iZr=s(vq);x1o=r(iZr,"RemBertModel"),iZr.forEach(t),$1o=r(QAe," (RemBERT model)"),QAe.forEach(t),k1o=i($),f_=n($,"LI",{});var HAe=s(f_);Use=n(HAe,"STRONG",{});var dZr=s(Use);S1o=r(dZr,"resnet"),dZr.forEach(t),R1o=r(HAe," \u2014 "),Fq=n(HAe,"A",{href:!0});var cZr=s(Fq);B1o=r(cZr,"ResNetModel"),cZr.forEach(t),P1o=r(HAe," (ResNet model)"),HAe.forEach(t),I1o=i($),m_=n($,"LI",{});var UAe=s(m_);Jse=n(UAe,"STRONG",{});var fZr=s(Jse);q1o=r(fZr,"retribert"),fZr.forEach(t),N1o=r(UAe," \u2014 "),Tq=n(UAe,"A",{href:!0});var mZr=s(Tq);j1o=r(mZr,"RetriBertModel"),mZr.forEach(t),D1o=r(UAe," (RetriBERT model)"),UAe.forEach(t),G1o=i($),g_=n($,"LI",{});var JAe=s(g_);Yse=n(JAe,"STRONG",{});var gZr=s(Yse);O1o=r(gZr,"roberta"),gZr.forEach(t),V1o=r(JAe," \u2014 "),Mq=n(JAe,"A",{href:!0});var hZr=s(Mq);X1o=r(hZr,"RobertaModel"),hZr.forEach(t),z1o=r(JAe," (RoBERTa model)"),JAe.forEach(t),W1o=i($),h_=n($,"LI",{});var YAe=s(h_);Kse=n(YAe,"STRONG",{});var pZr=s(Kse);Q1o=r(pZr,"roformer"),pZr.forEach(t),H1o=r(YAe," \u2014 "),Eq=n(YAe,"A",{href:!0});var _Zr=s(Eq);U1o=r(_Zr,"RoFormerModel"),_Zr.forEach(t),J1o=r(YAe," (RoFormer model)"),YAe.forEach(t),Y1o=i($),p_=n($,"LI",{});var KAe=s(p_);Zse=n(KAe,"STRONG",{});var uZr=s(Zse);K1o=r(uZr,"segformer"),uZr.forEach(t),Z1o=r(KAe," \u2014 "),Cq=n(KAe,"A",{href:!0});var bZr=s(Cq);ebo=r(bZr,"SegformerModel"),bZr.forEach(t),obo=r(KAe," (SegFormer model)"),KAe.forEach(t),rbo=i($),__=n($,"LI",{});var ZAe=s(__);ele=n(ZAe,"STRONG",{});var vZr=s(ele);tbo=r(vZr,"sew"),vZr.forEach(t),abo=r(ZAe," \u2014 "),wq=n(ZAe,"A",{href:!0});var FZr=s(wq);nbo=r(FZr,"SEWModel"),FZr.forEach(t),sbo=r(ZAe," (SEW model)"),ZAe.forEach(t),lbo=i($),u_=n($,"LI",{});var e6e=s(u_);ole=n(e6e,"STRONG",{});var TZr=s(ole);ibo=r(TZr,"sew-d"),TZr.forEach(t),dbo=r(e6e," \u2014 "),Aq=n(e6e,"A",{href:!0});var MZr=s(Aq);cbo=r(MZr,"SEWDModel"),MZr.forEach(t),fbo=r(e6e," (SEW-D model)"),e6e.forEach(t),mbo=i($),b_=n($,"LI",{});var o6e=s(b_);rle=n(o6e,"STRONG",{});var EZr=s(rle);gbo=r(EZr,"speech_to_text"),EZr.forEach(t),hbo=r(o6e," \u2014 "),yq=n(o6e,"A",{href:!0});var CZr=s(yq);pbo=r(CZr,"Speech2TextModel"),CZr.forEach(t),_bo=r(o6e," (Speech2Text model)"),o6e.forEach(t),ubo=i($),v_=n($,"LI",{});var r6e=s(v_);tle=n(r6e,"STRONG",{});var wZr=s(tle);bbo=r(wZr,"splinter"),wZr.forEach(t),vbo=r(r6e," \u2014 "),Lq=n(r6e,"A",{href:!0});var AZr=s(Lq);Fbo=r(AZr,"SplinterModel"),AZr.forEach(t),Tbo=r(r6e," (Splinter model)"),r6e.forEach(t),Mbo=i($),F_=n($,"LI",{});var t6e=s(F_);ale=n(t6e,"STRONG",{});var yZr=s(ale);Ebo=r(yZr,"squeezebert"),yZr.forEach(t),Cbo=r(t6e," \u2014 "),xq=n(t6e,"A",{href:!0});var LZr=s(xq);wbo=r(LZr,"SqueezeBertModel"),LZr.forEach(t),Abo=r(t6e," (SqueezeBERT model)"),t6e.forEach(t),ybo=i($),T_=n($,"LI",{});var a6e=s(T_);nle=n(a6e,"STRONG",{});var xZr=s(nle);Lbo=r(xZr,"swin"),xZr.forEach(t),xbo=r(a6e," \u2014 "),$q=n(a6e,"A",{href:!0});var $Zr=s($q);$bo=r($Zr,"SwinModel"),$Zr.forEach(t),kbo=r(a6e," (Swin model)"),a6e.forEach(t),Sbo=i($),M_=n($,"LI",{});var n6e=s(M_);sle=n(n6e,"STRONG",{});var kZr=s(sle);Rbo=r(kZr,"t5"),kZr.forEach(t),Bbo=r(n6e," \u2014 "),kq=n(n6e,"A",{href:!0});var SZr=s(kq);Pbo=r(SZr,"T5Model"),SZr.forEach(t),Ibo=r(n6e," (T5 model)"),n6e.forEach(t),qbo=i($),E_=n($,"LI",{});var s6e=s(E_);lle=n(s6e,"STRONG",{});var RZr=s(lle);Nbo=r(RZr,"tapas"),RZr.forEach(t),jbo=r(s6e," \u2014 "),Sq=n(s6e,"A",{href:!0});var BZr=s(Sq);Dbo=r(BZr,"TapasModel"),BZr.forEach(t),Gbo=r(s6e," (TAPAS model)"),s6e.forEach(t),Obo=i($),C_=n($,"LI",{});var l6e=s(C_);ile=n(l6e,"STRONG",{});var PZr=s(ile);Vbo=r(PZr,"transfo-xl"),PZr.forEach(t),Xbo=r(l6e," \u2014 "),Rq=n(l6e,"A",{href:!0});var IZr=s(Rq);zbo=r(IZr,"TransfoXLModel"),IZr.forEach(t),Wbo=r(l6e," (Transformer-XL model)"),l6e.forEach(t),Qbo=i($),w_=n($,"LI",{});var i6e=s(w_);dle=n(i6e,"STRONG",{});var qZr=s(dle);Hbo=r(qZr,"unispeech"),qZr.forEach(t),Ubo=r(i6e," \u2014 "),Bq=n(i6e,"A",{href:!0});var NZr=s(Bq);Jbo=r(NZr,"UniSpeechModel"),NZr.forEach(t),Ybo=r(i6e," (UniSpeech model)"),i6e.forEach(t),Kbo=i($),A_=n($,"LI",{});var d6e=s(A_);cle=n(d6e,"STRONG",{});var jZr=s(cle);Zbo=r(jZr,"unispeech-sat"),jZr.forEach(t),evo=r(d6e," \u2014 "),Pq=n(d6e,"A",{href:!0});var DZr=s(Pq);ovo=r(DZr,"UniSpeechSatModel"),DZr.forEach(t),rvo=r(d6e," (UniSpeechSat model)"),d6e.forEach(t),tvo=i($),y_=n($,"LI",{});var c6e=s(y_);fle=n(c6e,"STRONG",{});var GZr=s(fle);avo=r(GZr,"van"),GZr.forEach(t),nvo=r(c6e," \u2014 "),Iq=n(c6e,"A",{href:!0});var OZr=s(Iq);svo=r(OZr,"VanModel"),OZr.forEach(t),lvo=r(c6e," (VAN model)"),c6e.forEach(t),ivo=i($),L_=n($,"LI",{});var f6e=s(L_);mle=n(f6e,"STRONG",{});var VZr=s(mle);dvo=r(VZr,"vilt"),VZr.forEach(t),cvo=r(f6e," \u2014 "),qq=n(f6e,"A",{href:!0});var XZr=s(qq);fvo=r(XZr,"ViltModel"),XZr.forEach(t),mvo=r(f6e," (ViLT model)"),f6e.forEach(t),gvo=i($),x_=n($,"LI",{});var m6e=s(x_);gle=n(m6e,"STRONG",{});var zZr=s(gle);hvo=r(zZr,"vision-text-dual-encoder"),zZr.forEach(t),pvo=r(m6e," \u2014 "),Nq=n(m6e,"A",{href:!0});var WZr=s(Nq);_vo=r(WZr,"VisionTextDualEncoderModel"),WZr.forEach(t),uvo=r(m6e," (VisionTextDualEncoder model)"),m6e.forEach(t),bvo=i($),$_=n($,"LI",{});var g6e=s($_);hle=n(g6e,"STRONG",{});var QZr=s(hle);vvo=r(QZr,"visual_bert"),QZr.forEach(t),Fvo=r(g6e," \u2014 "),jq=n(g6e,"A",{href:!0});var HZr=s(jq);Tvo=r(HZr,"VisualBertModel"),HZr.forEach(t),Mvo=r(g6e," (VisualBert model)"),g6e.forEach(t),Evo=i($),k_=n($,"LI",{});var h6e=s(k_);ple=n(h6e,"STRONG",{});var UZr=s(ple);Cvo=r(UZr,"vit"),UZr.forEach(t),wvo=r(h6e," \u2014 "),Dq=n(h6e,"A",{href:!0});var JZr=s(Dq);Avo=r(JZr,"ViTModel"),JZr.forEach(t),yvo=r(h6e," (ViT model)"),h6e.forEach(t),Lvo=i($),S_=n($,"LI",{});var p6e=s(S_);_le=n(p6e,"STRONG",{});var YZr=s(_le);xvo=r(YZr,"vit_mae"),YZr.forEach(t),$vo=r(p6e," \u2014 "),Gq=n(p6e,"A",{href:!0});var KZr=s(Gq);kvo=r(KZr,"ViTMAEModel"),KZr.forEach(t),Svo=r(p6e," (ViTMAE model)"),p6e.forEach(t),Rvo=i($),R_=n($,"LI",{});var _6e=s(R_);ule=n(_6e,"STRONG",{});var ZZr=s(ule);Bvo=r(ZZr,"wav2vec2"),ZZr.forEach(t),Pvo=r(_6e," \u2014 "),Oq=n(_6e,"A",{href:!0});var eet=s(Oq);Ivo=r(eet,"Wav2Vec2Model"),eet.forEach(t),qvo=r(_6e," (Wav2Vec2 model)"),_6e.forEach(t),Nvo=i($),B_=n($,"LI",{});var u6e=s(B_);ble=n(u6e,"STRONG",{});var oet=s(ble);jvo=r(oet,"wav2vec2-conformer"),oet.forEach(t),Dvo=r(u6e," \u2014 "),Vq=n(u6e,"A",{href:!0});var ret=s(Vq);Gvo=r(ret,"Wav2Vec2ConformerModel"),ret.forEach(t),Ovo=r(u6e," (Wav2Vec2-Conformer model)"),u6e.forEach(t),Vvo=i($),P_=n($,"LI",{});var b6e=s(P_);vle=n(b6e,"STRONG",{});var tet=s(vle);Xvo=r(tet,"wavlm"),tet.forEach(t),zvo=r(b6e," \u2014 "),Xq=n(b6e,"A",{href:!0});var aet=s(Xq);Wvo=r(aet,"WavLMModel"),aet.forEach(t),Qvo=r(b6e," (WavLM model)"),b6e.forEach(t),Hvo=i($),I_=n($,"LI",{});var v6e=s(I_);Fle=n(v6e,"STRONG",{});var net=s(Fle);Uvo=r(net,"xglm"),net.forEach(t),Jvo=r(v6e," \u2014 "),zq=n(v6e,"A",{href:!0});var set=s(zq);Yvo=r(set,"XGLMModel"),set.forEach(t),Kvo=r(v6e," (XGLM model)"),v6e.forEach(t),Zvo=i($),q_=n($,"LI",{});var F6e=s(q_);Tle=n(F6e,"STRONG",{});var iet=s(Tle);eFo=r(iet,"xlm"),iet.forEach(t),oFo=r(F6e," \u2014 "),Wq=n(F6e,"A",{href:!0});var det=s(Wq);rFo=r(det,"XLMModel"),det.forEach(t),tFo=r(F6e," (XLM model)"),F6e.forEach(t),aFo=i($),N_=n($,"LI",{});var T6e=s(N_);Mle=n(T6e,"STRONG",{});var cet=s(Mle);nFo=r(cet,"xlm-prophetnet"),cet.forEach(t),sFo=r(T6e," \u2014 "),Qq=n(T6e,"A",{href:!0});var fet=s(Qq);lFo=r(fet,"XLMProphetNetModel"),fet.forEach(t),iFo=r(T6e," (XLMProphetNet model)"),T6e.forEach(t),dFo=i($),j_=n($,"LI",{});var M6e=s(j_);Ele=n(M6e,"STRONG",{});var met=s(Ele);cFo=r(met,"xlm-roberta"),met.forEach(t),fFo=r(M6e," \u2014 "),Hq=n(M6e,"A",{href:!0});var get=s(Hq);mFo=r(get,"XLMRobertaModel"),get.forEach(t),gFo=r(M6e," (XLM-RoBERTa model)"),M6e.forEach(t),hFo=i($),D_=n($,"LI",{});var E6e=s(D_);Cle=n(E6e,"STRONG",{});var het=s(Cle);pFo=r(het,"xlm-roberta-xl"),het.forEach(t),_Fo=r(E6e," \u2014 "),Uq=n(E6e,"A",{href:!0});var pet=s(Uq);uFo=r(pet,"XLMRobertaXLModel"),pet.forEach(t),bFo=r(E6e," (XLM-RoBERTa-XL model)"),E6e.forEach(t),vFo=i($),G_=n($,"LI",{});var C6e=s(G_);wle=n(C6e,"STRONG",{});var _et=s(wle);FFo=r(_et,"xlnet"),_et.forEach(t),TFo=r(C6e," \u2014 "),Jq=n(C6e,"A",{href:!0});var uet=s(Jq);MFo=r(uet,"XLNetModel"),uet.forEach(t),EFo=r(C6e," (XLNet model)"),C6e.forEach(t),CFo=i($),O_=n($,"LI",{});var w6e=s(O_);Ale=n(w6e,"STRONG",{});var bet=s(Ale);wFo=r(bet,"yolos"),bet.forEach(t),AFo=r(w6e," \u2014 "),Yq=n(w6e,"A",{href:!0});var vet=s(Yq);yFo=r(vet,"YolosModel"),vet.forEach(t),LFo=r(w6e," (YOLOS model)"),w6e.forEach(t),xFo=i($),V_=n($,"LI",{});var A6e=s(V_);yle=n(A6e,"STRONG",{});var Fet=s(yle);$Fo=r(Fet,"yoso"),Fet.forEach(t),kFo=r(A6e," \u2014 "),Kq=n(A6e,"A",{href:!0});var Tet=s(Kq);SFo=r(Tet,"YosoModel"),Tet.forEach(t),RFo=r(A6e," (YOSO model)"),A6e.forEach(t),$.forEach(t),BFo=i(oa),X_=n(oa,"P",{});var y6e=s(X_);PFo=r(y6e,"The model is set in evaluation mode by default using "),Lle=n(y6e,"CODE",{});var Met=s(Lle);IFo=r(Met,"model.eval()"),Met.forEach(t),qFo=r(y6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xle=n(y6e,"CODE",{});var Eet=s(xle);NFo=r(Eet,"model.train()"),Eet.forEach(t),y6e.forEach(t),jFo=i(oa),T(z_.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),sqe=i(f),yi=n(f,"H2",{class:!0});var cje=s(yi);W_=n(cje,"A",{id:!0,class:!0,href:!0});var Cet=s(W_);$le=n(Cet,"SPAN",{});var wet=s($le);T(V6.$$.fragment,wet),wet.forEach(t),Cet.forEach(t),DFo=i(cje),kle=n(cje,"SPAN",{});var Aet=s(kle);GFo=r(Aet,"AutoModelForPreTraining"),Aet.forEach(t),cje.forEach(t),lqe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(X6.$$.fragment,Gs),OFo=i(Gs),Li=n(Gs,"P",{});var jK=s(Li);VFo=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Zq=n(jK,"A",{href:!0});var yet=s(Zq);XFo=r(yet,"from_pretrained()"),yet.forEach(t),zFo=r(jK," class method or the "),eN=n(jK,"A",{href:!0});var Let=s(eN);WFo=r(Let,"from_config()"),Let.forEach(t),QFo=r(jK,` class
method.`),jK.forEach(t),HFo=i(Gs),z6=n(Gs,"P",{});var fje=s(z6);UFo=r(fje,"This class cannot be instantiated directly using "),Sle=n(fje,"CODE",{});var xet=s(Sle);JFo=r(xet,"__init__()"),xet.forEach(t),YFo=r(fje," (throws an error)."),fje.forEach(t),KFo=i(Gs),at=n(Gs,"DIV",{class:!0});var bw=s(at);T(W6.$$.fragment,bw),ZFo=i(bw),Rle=n(bw,"P",{});var $et=s(Rle);e0o=r($et,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$et.forEach(t),o0o=i(bw),xi=n(bw,"P",{});var DK=s(xi);r0o=r(DK,`Note:
Loading a model from its configuration file does `),Ble=n(DK,"STRONG",{});var ket=s(Ble);t0o=r(ket,"not"),ket.forEach(t),a0o=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oN=n(DK,"A",{href:!0});var Set=s(oN);n0o=r(Set,"from_pretrained()"),Set.forEach(t),s0o=r(DK," to load the model weights."),DK.forEach(t),l0o=i(bw),T(Q_.$$.fragment,bw),bw.forEach(t),i0o=i(Gs),Ye=n(Gs,"DIV",{class:!0});var ra=s(Ye);T(Q6.$$.fragment,ra),d0o=i(ra),Ple=n(ra,"P",{});var Ret=s(Ple);c0o=r(Ret,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ret.forEach(t),f0o=i(ra),xa=n(ra,"P",{});var vw=s(xa);m0o=r(vw,"The model class to instantiate is selected based on the "),Ile=n(vw,"CODE",{});var Bet=s(Ile);g0o=r(Bet,"model_type"),Bet.forEach(t),h0o=r(vw,` property of the config object (either
passed as an argument or loaded from `),qle=n(vw,"CODE",{});var Pet=s(qle);p0o=r(Pet,"pretrained_model_name_or_path"),Pet.forEach(t),_0o=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nle=n(vw,"CODE",{});var Iet=s(Nle);u0o=r(Iet,"pretrained_model_name_or_path"),Iet.forEach(t),b0o=r(vw,":"),vw.forEach(t),v0o=i(ra),G=n(ra,"UL",{});var O=s(G);H_=n(O,"LI",{});var L6e=s(H_);jle=n(L6e,"STRONG",{});var qet=s(jle);F0o=r(qet,"albert"),qet.forEach(t),T0o=r(L6e," \u2014 "),rN=n(L6e,"A",{href:!0});var Net=s(rN);M0o=r(Net,"AlbertForPreTraining"),Net.forEach(t),E0o=r(L6e," (ALBERT model)"),L6e.forEach(t),C0o=i(O),U_=n(O,"LI",{});var x6e=s(U_);Dle=n(x6e,"STRONG",{});var jet=s(Dle);w0o=r(jet,"bart"),jet.forEach(t),A0o=r(x6e," \u2014 "),tN=n(x6e,"A",{href:!0});var Det=s(tN);y0o=r(Det,"BartForConditionalGeneration"),Det.forEach(t),L0o=r(x6e," (BART model)"),x6e.forEach(t),x0o=i(O),J_=n(O,"LI",{});var $6e=s(J_);Gle=n($6e,"STRONG",{});var Get=s(Gle);$0o=r(Get,"bert"),Get.forEach(t),k0o=r($6e," \u2014 "),aN=n($6e,"A",{href:!0});var Oet=s(aN);S0o=r(Oet,"BertForPreTraining"),Oet.forEach(t),R0o=r($6e," (BERT model)"),$6e.forEach(t),B0o=i(O),Y_=n(O,"LI",{});var k6e=s(Y_);Ole=n(k6e,"STRONG",{});var Vet=s(Ole);P0o=r(Vet,"big_bird"),Vet.forEach(t),I0o=r(k6e," \u2014 "),nN=n(k6e,"A",{href:!0});var Xet=s(nN);q0o=r(Xet,"BigBirdForPreTraining"),Xet.forEach(t),N0o=r(k6e," (BigBird model)"),k6e.forEach(t),j0o=i(O),K_=n(O,"LI",{});var S6e=s(K_);Vle=n(S6e,"STRONG",{});var zet=s(Vle);D0o=r(zet,"bloom"),zet.forEach(t),G0o=r(S6e," \u2014 "),sN=n(S6e,"A",{href:!0});var Wet=s(sN);O0o=r(Wet,"BloomForCausalLM"),Wet.forEach(t),V0o=r(S6e," (Bloom model)"),S6e.forEach(t),X0o=i(O),Z_=n(O,"LI",{});var R6e=s(Z_);Xle=n(R6e,"STRONG",{});var Qet=s(Xle);z0o=r(Qet,"camembert"),Qet.forEach(t),W0o=r(R6e," \u2014 "),lN=n(R6e,"A",{href:!0});var Het=s(lN);Q0o=r(Het,"CamembertForMaskedLM"),Het.forEach(t),H0o=r(R6e," (CamemBERT model)"),R6e.forEach(t),U0o=i(O),eu=n(O,"LI",{});var B6e=s(eu);zle=n(B6e,"STRONG",{});var Uet=s(zle);J0o=r(Uet,"ctrl"),Uet.forEach(t),Y0o=r(B6e," \u2014 "),iN=n(B6e,"A",{href:!0});var Jet=s(iN);K0o=r(Jet,"CTRLLMHeadModel"),Jet.forEach(t),Z0o=r(B6e," (CTRL model)"),B6e.forEach(t),eTo=i(O),ou=n(O,"LI",{});var P6e=s(ou);Wle=n(P6e,"STRONG",{});var Yet=s(Wle);oTo=r(Yet,"data2vec-text"),Yet.forEach(t),rTo=r(P6e," \u2014 "),dN=n(P6e,"A",{href:!0});var Ket=s(dN);tTo=r(Ket,"Data2VecTextForMaskedLM"),Ket.forEach(t),aTo=r(P6e," (Data2VecText model)"),P6e.forEach(t),nTo=i(O),ru=n(O,"LI",{});var I6e=s(ru);Qle=n(I6e,"STRONG",{});var Zet=s(Qle);sTo=r(Zet,"deberta"),Zet.forEach(t),lTo=r(I6e," \u2014 "),cN=n(I6e,"A",{href:!0});var eot=s(cN);iTo=r(eot,"DebertaForMaskedLM"),eot.forEach(t),dTo=r(I6e," (DeBERTa model)"),I6e.forEach(t),cTo=i(O),tu=n(O,"LI",{});var q6e=s(tu);Hle=n(q6e,"STRONG",{});var oot=s(Hle);fTo=r(oot,"deberta-v2"),oot.forEach(t),mTo=r(q6e," \u2014 "),fN=n(q6e,"A",{href:!0});var rot=s(fN);gTo=r(rot,"DebertaV2ForMaskedLM"),rot.forEach(t),hTo=r(q6e," (DeBERTa-v2 model)"),q6e.forEach(t),pTo=i(O),au=n(O,"LI",{});var N6e=s(au);Ule=n(N6e,"STRONG",{});var tot=s(Ule);_To=r(tot,"distilbert"),tot.forEach(t),uTo=r(N6e," \u2014 "),mN=n(N6e,"A",{href:!0});var aot=s(mN);bTo=r(aot,"DistilBertForMaskedLM"),aot.forEach(t),vTo=r(N6e," (DistilBERT model)"),N6e.forEach(t),FTo=i(O),nu=n(O,"LI",{});var j6e=s(nu);Jle=n(j6e,"STRONG",{});var not=s(Jle);TTo=r(not,"electra"),not.forEach(t),MTo=r(j6e," \u2014 "),gN=n(j6e,"A",{href:!0});var sot=s(gN);ETo=r(sot,"ElectraForPreTraining"),sot.forEach(t),CTo=r(j6e," (ELECTRA model)"),j6e.forEach(t),wTo=i(O),su=n(O,"LI",{});var D6e=s(su);Yle=n(D6e,"STRONG",{});var lot=s(Yle);ATo=r(lot,"flaubert"),lot.forEach(t),yTo=r(D6e," \u2014 "),hN=n(D6e,"A",{href:!0});var iot=s(hN);LTo=r(iot,"FlaubertWithLMHeadModel"),iot.forEach(t),xTo=r(D6e," (FlauBERT model)"),D6e.forEach(t),$To=i(O),lu=n(O,"LI",{});var G6e=s(lu);Kle=n(G6e,"STRONG",{});var dot=s(Kle);kTo=r(dot,"flava"),dot.forEach(t),STo=r(G6e," \u2014 "),pN=n(G6e,"A",{href:!0});var cot=s(pN);RTo=r(cot,"FlavaForPreTraining"),cot.forEach(t),BTo=r(G6e," (Flava model)"),G6e.forEach(t),PTo=i(O),iu=n(O,"LI",{});var O6e=s(iu);Zle=n(O6e,"STRONG",{});var fot=s(Zle);ITo=r(fot,"fnet"),fot.forEach(t),qTo=r(O6e," \u2014 "),_N=n(O6e,"A",{href:!0});var mot=s(_N);NTo=r(mot,"FNetForPreTraining"),mot.forEach(t),jTo=r(O6e," (FNet model)"),O6e.forEach(t),DTo=i(O),du=n(O,"LI",{});var V6e=s(du);eie=n(V6e,"STRONG",{});var got=s(eie);GTo=r(got,"fsmt"),got.forEach(t),OTo=r(V6e," \u2014 "),uN=n(V6e,"A",{href:!0});var hot=s(uN);VTo=r(hot,"FSMTForConditionalGeneration"),hot.forEach(t),XTo=r(V6e," (FairSeq Machine-Translation model)"),V6e.forEach(t),zTo=i(O),cu=n(O,"LI",{});var X6e=s(cu);oie=n(X6e,"STRONG",{});var pot=s(oie);WTo=r(pot,"funnel"),pot.forEach(t),QTo=r(X6e," \u2014 "),bN=n(X6e,"A",{href:!0});var _ot=s(bN);HTo=r(_ot,"FunnelForPreTraining"),_ot.forEach(t),UTo=r(X6e," (Funnel Transformer model)"),X6e.forEach(t),JTo=i(O),fu=n(O,"LI",{});var z6e=s(fu);rie=n(z6e,"STRONG",{});var uot=s(rie);YTo=r(uot,"gpt2"),uot.forEach(t),KTo=r(z6e," \u2014 "),vN=n(z6e,"A",{href:!0});var bot=s(vN);ZTo=r(bot,"GPT2LMHeadModel"),bot.forEach(t),e7o=r(z6e," (OpenAI GPT-2 model)"),z6e.forEach(t),o7o=i(O),mu=n(O,"LI",{});var W6e=s(mu);tie=n(W6e,"STRONG",{});var vot=s(tie);r7o=r(vot,"ibert"),vot.forEach(t),t7o=r(W6e," \u2014 "),FN=n(W6e,"A",{href:!0});var Fot=s(FN);a7o=r(Fot,"IBertForMaskedLM"),Fot.forEach(t),n7o=r(W6e," (I-BERT model)"),W6e.forEach(t),s7o=i(O),gu=n(O,"LI",{});var Q6e=s(gu);aie=n(Q6e,"STRONG",{});var Tot=s(aie);l7o=r(Tot,"layoutlm"),Tot.forEach(t),i7o=r(Q6e," \u2014 "),TN=n(Q6e,"A",{href:!0});var Mot=s(TN);d7o=r(Mot,"LayoutLMForMaskedLM"),Mot.forEach(t),c7o=r(Q6e," (LayoutLM model)"),Q6e.forEach(t),f7o=i(O),hu=n(O,"LI",{});var H6e=s(hu);nie=n(H6e,"STRONG",{});var Eot=s(nie);m7o=r(Eot,"longformer"),Eot.forEach(t),g7o=r(H6e," \u2014 "),MN=n(H6e,"A",{href:!0});var Cot=s(MN);h7o=r(Cot,"LongformerForMaskedLM"),Cot.forEach(t),p7o=r(H6e," (Longformer model)"),H6e.forEach(t),_7o=i(O),pu=n(O,"LI",{});var U6e=s(pu);sie=n(U6e,"STRONG",{});var wot=s(sie);u7o=r(wot,"lxmert"),wot.forEach(t),b7o=r(U6e," \u2014 "),EN=n(U6e,"A",{href:!0});var Aot=s(EN);v7o=r(Aot,"LxmertForPreTraining"),Aot.forEach(t),F7o=r(U6e," (LXMERT model)"),U6e.forEach(t),T7o=i(O),_u=n(O,"LI",{});var J6e=s(_u);lie=n(J6e,"STRONG",{});var yot=s(lie);M7o=r(yot,"megatron-bert"),yot.forEach(t),E7o=r(J6e," \u2014 "),CN=n(J6e,"A",{href:!0});var Lot=s(CN);C7o=r(Lot,"MegatronBertForPreTraining"),Lot.forEach(t),w7o=r(J6e," (MegatronBert model)"),J6e.forEach(t),A7o=i(O),uu=n(O,"LI",{});var Y6e=s(uu);iie=n(Y6e,"STRONG",{});var xot=s(iie);y7o=r(xot,"mobilebert"),xot.forEach(t),L7o=r(Y6e," \u2014 "),wN=n(Y6e,"A",{href:!0});var $ot=s(wN);x7o=r($ot,"MobileBertForPreTraining"),$ot.forEach(t),$7o=r(Y6e," (MobileBERT model)"),Y6e.forEach(t),k7o=i(O),bu=n(O,"LI",{});var K6e=s(bu);die=n(K6e,"STRONG",{});var kot=s(die);S7o=r(kot,"mpnet"),kot.forEach(t),R7o=r(K6e," \u2014 "),AN=n(K6e,"A",{href:!0});var Sot=s(AN);B7o=r(Sot,"MPNetForMaskedLM"),Sot.forEach(t),P7o=r(K6e," (MPNet model)"),K6e.forEach(t),I7o=i(O),vu=n(O,"LI",{});var Z6e=s(vu);cie=n(Z6e,"STRONG",{});var Rot=s(cie);q7o=r(Rot,"openai-gpt"),Rot.forEach(t),N7o=r(Z6e," \u2014 "),yN=n(Z6e,"A",{href:!0});var Bot=s(yN);j7o=r(Bot,"OpenAIGPTLMHeadModel"),Bot.forEach(t),D7o=r(Z6e," (OpenAI GPT model)"),Z6e.forEach(t),G7o=i(O),Fu=n(O,"LI",{});var eye=s(Fu);fie=n(eye,"STRONG",{});var Pot=s(fie);O7o=r(Pot,"retribert"),Pot.forEach(t),V7o=r(eye," \u2014 "),LN=n(eye,"A",{href:!0});var Iot=s(LN);X7o=r(Iot,"RetriBertModel"),Iot.forEach(t),z7o=r(eye," (RetriBERT model)"),eye.forEach(t),W7o=i(O),Tu=n(O,"LI",{});var oye=s(Tu);mie=n(oye,"STRONG",{});var qot=s(mie);Q7o=r(qot,"roberta"),qot.forEach(t),H7o=r(oye," \u2014 "),xN=n(oye,"A",{href:!0});var Not=s(xN);U7o=r(Not,"RobertaForMaskedLM"),Not.forEach(t),J7o=r(oye," (RoBERTa model)"),oye.forEach(t),Y7o=i(O),Mu=n(O,"LI",{});var rye=s(Mu);gie=n(rye,"STRONG",{});var jot=s(gie);K7o=r(jot,"squeezebert"),jot.forEach(t),Z7o=r(rye," \u2014 "),$N=n(rye,"A",{href:!0});var Dot=s($N);eMo=r(Dot,"SqueezeBertForMaskedLM"),Dot.forEach(t),oMo=r(rye," (SqueezeBERT model)"),rye.forEach(t),rMo=i(O),Eu=n(O,"LI",{});var tye=s(Eu);hie=n(tye,"STRONG",{});var Got=s(hie);tMo=r(Got,"t5"),Got.forEach(t),aMo=r(tye," \u2014 "),kN=n(tye,"A",{href:!0});var Oot=s(kN);nMo=r(Oot,"T5ForConditionalGeneration"),Oot.forEach(t),sMo=r(tye," (T5 model)"),tye.forEach(t),lMo=i(O),Cu=n(O,"LI",{});var aye=s(Cu);pie=n(aye,"STRONG",{});var Vot=s(pie);iMo=r(Vot,"tapas"),Vot.forEach(t),dMo=r(aye," \u2014 "),SN=n(aye,"A",{href:!0});var Xot=s(SN);cMo=r(Xot,"TapasForMaskedLM"),Xot.forEach(t),fMo=r(aye," (TAPAS model)"),aye.forEach(t),mMo=i(O),wu=n(O,"LI",{});var nye=s(wu);_ie=n(nye,"STRONG",{});var zot=s(_ie);gMo=r(zot,"transfo-xl"),zot.forEach(t),hMo=r(nye," \u2014 "),RN=n(nye,"A",{href:!0});var Wot=s(RN);pMo=r(Wot,"TransfoXLLMHeadModel"),Wot.forEach(t),_Mo=r(nye," (Transformer-XL model)"),nye.forEach(t),uMo=i(O),Au=n(O,"LI",{});var sye=s(Au);uie=n(sye,"STRONG",{});var Qot=s(uie);bMo=r(Qot,"unispeech"),Qot.forEach(t),vMo=r(sye," \u2014 "),BN=n(sye,"A",{href:!0});var Hot=s(BN);FMo=r(Hot,"UniSpeechForPreTraining"),Hot.forEach(t),TMo=r(sye," (UniSpeech model)"),sye.forEach(t),MMo=i(O),yu=n(O,"LI",{});var lye=s(yu);bie=n(lye,"STRONG",{});var Uot=s(bie);EMo=r(Uot,"unispeech-sat"),Uot.forEach(t),CMo=r(lye," \u2014 "),PN=n(lye,"A",{href:!0});var Jot=s(PN);wMo=r(Jot,"UniSpeechSatForPreTraining"),Jot.forEach(t),AMo=r(lye," (UniSpeechSat model)"),lye.forEach(t),yMo=i(O),Lu=n(O,"LI",{});var iye=s(Lu);vie=n(iye,"STRONG",{});var Yot=s(vie);LMo=r(Yot,"visual_bert"),Yot.forEach(t),xMo=r(iye," \u2014 "),IN=n(iye,"A",{href:!0});var Kot=s(IN);$Mo=r(Kot,"VisualBertForPreTraining"),Kot.forEach(t),kMo=r(iye," (VisualBert model)"),iye.forEach(t),SMo=i(O),xu=n(O,"LI",{});var dye=s(xu);Fie=n(dye,"STRONG",{});var Zot=s(Fie);RMo=r(Zot,"vit_mae"),Zot.forEach(t),BMo=r(dye," \u2014 "),qN=n(dye,"A",{href:!0});var ert=s(qN);PMo=r(ert,"ViTMAEForPreTraining"),ert.forEach(t),IMo=r(dye," (ViTMAE model)"),dye.forEach(t),qMo=i(O),$u=n(O,"LI",{});var cye=s($u);Tie=n(cye,"STRONG",{});var ort=s(Tie);NMo=r(ort,"wav2vec2"),ort.forEach(t),jMo=r(cye," \u2014 "),NN=n(cye,"A",{href:!0});var rrt=s(NN);DMo=r(rrt,"Wav2Vec2ForPreTraining"),rrt.forEach(t),GMo=r(cye," (Wav2Vec2 model)"),cye.forEach(t),OMo=i(O),ku=n(O,"LI",{});var fye=s(ku);Mie=n(fye,"STRONG",{});var trt=s(Mie);VMo=r(trt,"wav2vec2-conformer"),trt.forEach(t),XMo=r(fye," \u2014 "),jN=n(fye,"A",{href:!0});var art=s(jN);zMo=r(art,"Wav2Vec2ConformerForPreTraining"),art.forEach(t),WMo=r(fye," (Wav2Vec2-Conformer model)"),fye.forEach(t),QMo=i(O),Su=n(O,"LI",{});var mye=s(Su);Eie=n(mye,"STRONG",{});var nrt=s(Eie);HMo=r(nrt,"xlm"),nrt.forEach(t),UMo=r(mye," \u2014 "),DN=n(mye,"A",{href:!0});var srt=s(DN);JMo=r(srt,"XLMWithLMHeadModel"),srt.forEach(t),YMo=r(mye," (XLM model)"),mye.forEach(t),KMo=i(O),Ru=n(O,"LI",{});var gye=s(Ru);Cie=n(gye,"STRONG",{});var lrt=s(Cie);ZMo=r(lrt,"xlm-roberta"),lrt.forEach(t),e4o=r(gye," \u2014 "),GN=n(gye,"A",{href:!0});var irt=s(GN);o4o=r(irt,"XLMRobertaForMaskedLM"),irt.forEach(t),r4o=r(gye," (XLM-RoBERTa model)"),gye.forEach(t),t4o=i(O),Bu=n(O,"LI",{});var hye=s(Bu);wie=n(hye,"STRONG",{});var drt=s(wie);a4o=r(drt,"xlm-roberta-xl"),drt.forEach(t),n4o=r(hye," \u2014 "),ON=n(hye,"A",{href:!0});var crt=s(ON);s4o=r(crt,"XLMRobertaXLForMaskedLM"),crt.forEach(t),l4o=r(hye," (XLM-RoBERTa-XL model)"),hye.forEach(t),i4o=i(O),Pu=n(O,"LI",{});var pye=s(Pu);Aie=n(pye,"STRONG",{});var frt=s(Aie);d4o=r(frt,"xlnet"),frt.forEach(t),c4o=r(pye," \u2014 "),VN=n(pye,"A",{href:!0});var mrt=s(VN);f4o=r(mrt,"XLNetLMHeadModel"),mrt.forEach(t),m4o=r(pye," (XLNet model)"),pye.forEach(t),O.forEach(t),g4o=i(ra),Iu=n(ra,"P",{});var _ye=s(Iu);h4o=r(_ye,"The model is set in evaluation mode by default using "),yie=n(_ye,"CODE",{});var grt=s(yie);p4o=r(grt,"model.eval()"),grt.forEach(t),_4o=r(_ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lie=n(_ye,"CODE",{});var hrt=s(Lie);u4o=r(hrt,"model.train()"),hrt.forEach(t),_ye.forEach(t),b4o=i(ra),T(qu.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),iqe=i(f),$i=n(f,"H2",{class:!0});var mje=s($i);Nu=n(mje,"A",{id:!0,class:!0,href:!0});var prt=s(Nu);xie=n(prt,"SPAN",{});var _rt=s(xie);T(H6.$$.fragment,_rt),_rt.forEach(t),prt.forEach(t),v4o=i(mje),$ie=n(mje,"SPAN",{});var urt=s($ie);F4o=r(urt,"AutoModelForCausalLM"),urt.forEach(t),mje.forEach(t),dqe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(U6.$$.fragment,Os),T4o=i(Os),ki=n(Os,"P",{});var GK=s(ki);M4o=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),XN=n(GK,"A",{href:!0});var brt=s(XN);E4o=r(brt,"from_pretrained()"),brt.forEach(t),C4o=r(GK," class method or the "),zN=n(GK,"A",{href:!0});var vrt=s(zN);w4o=r(vrt,"from_config()"),vrt.forEach(t),A4o=r(GK,` class
method.`),GK.forEach(t),y4o=i(Os),J6=n(Os,"P",{});var gje=s(J6);L4o=r(gje,"This class cannot be instantiated directly using "),kie=n(gje,"CODE",{});var Frt=s(kie);x4o=r(Frt,"__init__()"),Frt.forEach(t),$4o=r(gje," (throws an error)."),gje.forEach(t),k4o=i(Os),nt=n(Os,"DIV",{class:!0});var Fw=s(nt);T(Y6.$$.fragment,Fw),S4o=i(Fw),Sie=n(Fw,"P",{});var Trt=s(Sie);R4o=r(Trt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Trt.forEach(t),B4o=i(Fw),Si=n(Fw,"P",{});var OK=s(Si);P4o=r(OK,`Note:
Loading a model from its configuration file does `),Rie=n(OK,"STRONG",{});var Mrt=s(Rie);I4o=r(Mrt,"not"),Mrt.forEach(t),q4o=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),WN=n(OK,"A",{href:!0});var Ert=s(WN);N4o=r(Ert,"from_pretrained()"),Ert.forEach(t),j4o=r(OK," to load the model weights."),OK.forEach(t),D4o=i(Fw),T(ju.$$.fragment,Fw),Fw.forEach(t),G4o=i(Os),Ke=n(Os,"DIV",{class:!0});var ta=s(Ke);T(K6.$$.fragment,ta),O4o=i(ta),Bie=n(ta,"P",{});var Crt=s(Bie);V4o=r(Crt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Crt.forEach(t),X4o=i(ta),$a=n(ta,"P",{});var Tw=s($a);z4o=r(Tw,"The model class to instantiate is selected based on the "),Pie=n(Tw,"CODE",{});var wrt=s(Pie);W4o=r(wrt,"model_type"),wrt.forEach(t),Q4o=r(Tw,` property of the config object (either
passed as an argument or loaded from `),Iie=n(Tw,"CODE",{});var Art=s(Iie);H4o=r(Art,"pretrained_model_name_or_path"),Art.forEach(t),U4o=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qie=n(Tw,"CODE",{});var yrt=s(qie);J4o=r(yrt,"pretrained_model_name_or_path"),yrt.forEach(t),Y4o=r(Tw,":"),Tw.forEach(t),K4o=i(ta),z=n(ta,"UL",{});var W=s(z);Du=n(W,"LI",{});var uye=s(Du);Nie=n(uye,"STRONG",{});var Lrt=s(Nie);Z4o=r(Lrt,"bart"),Lrt.forEach(t),eEo=r(uye," \u2014 "),QN=n(uye,"A",{href:!0});var xrt=s(QN);oEo=r(xrt,"BartForCausalLM"),xrt.forEach(t),rEo=r(uye," (BART model)"),uye.forEach(t),tEo=i(W),Gu=n(W,"LI",{});var bye=s(Gu);jie=n(bye,"STRONG",{});var $rt=s(jie);aEo=r($rt,"bert"),$rt.forEach(t),nEo=r(bye," \u2014 "),HN=n(bye,"A",{href:!0});var krt=s(HN);sEo=r(krt,"BertLMHeadModel"),krt.forEach(t),lEo=r(bye," (BERT model)"),bye.forEach(t),iEo=i(W),Ou=n(W,"LI",{});var vye=s(Ou);Die=n(vye,"STRONG",{});var Srt=s(Die);dEo=r(Srt,"bert-generation"),Srt.forEach(t),cEo=r(vye," \u2014 "),UN=n(vye,"A",{href:!0});var Rrt=s(UN);fEo=r(Rrt,"BertGenerationDecoder"),Rrt.forEach(t),mEo=r(vye," (Bert Generation model)"),vye.forEach(t),gEo=i(W),Vu=n(W,"LI",{});var Fye=s(Vu);Gie=n(Fye,"STRONG",{});var Brt=s(Gie);hEo=r(Brt,"big_bird"),Brt.forEach(t),pEo=r(Fye," \u2014 "),JN=n(Fye,"A",{href:!0});var Prt=s(JN);_Eo=r(Prt,"BigBirdForCausalLM"),Prt.forEach(t),uEo=r(Fye," (BigBird model)"),Fye.forEach(t),bEo=i(W),Xu=n(W,"LI",{});var Tye=s(Xu);Oie=n(Tye,"STRONG",{});var Irt=s(Oie);vEo=r(Irt,"bigbird_pegasus"),Irt.forEach(t),FEo=r(Tye," \u2014 "),YN=n(Tye,"A",{href:!0});var qrt=s(YN);TEo=r(qrt,"BigBirdPegasusForCausalLM"),qrt.forEach(t),MEo=r(Tye," (BigBirdPegasus model)"),Tye.forEach(t),EEo=i(W),zu=n(W,"LI",{});var Mye=s(zu);Vie=n(Mye,"STRONG",{});var Nrt=s(Vie);CEo=r(Nrt,"blenderbot"),Nrt.forEach(t),wEo=r(Mye," \u2014 "),KN=n(Mye,"A",{href:!0});var jrt=s(KN);AEo=r(jrt,"BlenderbotForCausalLM"),jrt.forEach(t),yEo=r(Mye," (Blenderbot model)"),Mye.forEach(t),LEo=i(W),Wu=n(W,"LI",{});var Eye=s(Wu);Xie=n(Eye,"STRONG",{});var Drt=s(Xie);xEo=r(Drt,"blenderbot-small"),Drt.forEach(t),$Eo=r(Eye," \u2014 "),ZN=n(Eye,"A",{href:!0});var Grt=s(ZN);kEo=r(Grt,"BlenderbotSmallForCausalLM"),Grt.forEach(t),SEo=r(Eye," (BlenderbotSmall model)"),Eye.forEach(t),REo=i(W),Qu=n(W,"LI",{});var Cye=s(Qu);zie=n(Cye,"STRONG",{});var Ort=s(zie);BEo=r(Ort,"bloom"),Ort.forEach(t),PEo=r(Cye," \u2014 "),ej=n(Cye,"A",{href:!0});var Vrt=s(ej);IEo=r(Vrt,"BloomForCausalLM"),Vrt.forEach(t),qEo=r(Cye," (Bloom model)"),Cye.forEach(t),NEo=i(W),Hu=n(W,"LI",{});var wye=s(Hu);Wie=n(wye,"STRONG",{});var Xrt=s(Wie);jEo=r(Xrt,"camembert"),Xrt.forEach(t),DEo=r(wye," \u2014 "),oj=n(wye,"A",{href:!0});var zrt=s(oj);GEo=r(zrt,"CamembertForCausalLM"),zrt.forEach(t),OEo=r(wye," (CamemBERT model)"),wye.forEach(t),VEo=i(W),Uu=n(W,"LI",{});var Aye=s(Uu);Qie=n(Aye,"STRONG",{});var Wrt=s(Qie);XEo=r(Wrt,"ctrl"),Wrt.forEach(t),zEo=r(Aye," \u2014 "),rj=n(Aye,"A",{href:!0});var Qrt=s(rj);WEo=r(Qrt,"CTRLLMHeadModel"),Qrt.forEach(t),QEo=r(Aye," (CTRL model)"),Aye.forEach(t),HEo=i(W),Ju=n(W,"LI",{});var yye=s(Ju);Hie=n(yye,"STRONG",{});var Hrt=s(Hie);UEo=r(Hrt,"data2vec-text"),Hrt.forEach(t),JEo=r(yye," \u2014 "),tj=n(yye,"A",{href:!0});var Urt=s(tj);YEo=r(Urt,"Data2VecTextForCausalLM"),Urt.forEach(t),KEo=r(yye," (Data2VecText model)"),yye.forEach(t),ZEo=i(W),Yu=n(W,"LI",{});var Lye=s(Yu);Uie=n(Lye,"STRONG",{});var Jrt=s(Uie);eCo=r(Jrt,"electra"),Jrt.forEach(t),oCo=r(Lye," \u2014 "),aj=n(Lye,"A",{href:!0});var Yrt=s(aj);rCo=r(Yrt,"ElectraForCausalLM"),Yrt.forEach(t),tCo=r(Lye," (ELECTRA model)"),Lye.forEach(t),aCo=i(W),Ku=n(W,"LI",{});var xye=s(Ku);Jie=n(xye,"STRONG",{});var Krt=s(Jie);nCo=r(Krt,"gpt2"),Krt.forEach(t),sCo=r(xye," \u2014 "),nj=n(xye,"A",{href:!0});var Zrt=s(nj);lCo=r(Zrt,"GPT2LMHeadModel"),Zrt.forEach(t),iCo=r(xye," (OpenAI GPT-2 model)"),xye.forEach(t),dCo=i(W),Zu=n(W,"LI",{});var $ye=s(Zu);Yie=n($ye,"STRONG",{});var ett=s(Yie);cCo=r(ett,"gpt_neo"),ett.forEach(t),fCo=r($ye," \u2014 "),sj=n($ye,"A",{href:!0});var ott=s(sj);mCo=r(ott,"GPTNeoForCausalLM"),ott.forEach(t),gCo=r($ye," (GPT Neo model)"),$ye.forEach(t),hCo=i(W),e2=n(W,"LI",{});var kye=s(e2);Kie=n(kye,"STRONG",{});var rtt=s(Kie);pCo=r(rtt,"gptj"),rtt.forEach(t),_Co=r(kye," \u2014 "),lj=n(kye,"A",{href:!0});var ttt=s(lj);uCo=r(ttt,"GPTJForCausalLM"),ttt.forEach(t),bCo=r(kye," (GPT-J model)"),kye.forEach(t),vCo=i(W),o2=n(W,"LI",{});var Sye=s(o2);Zie=n(Sye,"STRONG",{});var att=s(Zie);FCo=r(att,"marian"),att.forEach(t),TCo=r(Sye," \u2014 "),ij=n(Sye,"A",{href:!0});var ntt=s(ij);MCo=r(ntt,"MarianForCausalLM"),ntt.forEach(t),ECo=r(Sye," (Marian model)"),Sye.forEach(t),CCo=i(W),r2=n(W,"LI",{});var Rye=s(r2);ede=n(Rye,"STRONG",{});var stt=s(ede);wCo=r(stt,"mbart"),stt.forEach(t),ACo=r(Rye," \u2014 "),dj=n(Rye,"A",{href:!0});var ltt=s(dj);yCo=r(ltt,"MBartForCausalLM"),ltt.forEach(t),LCo=r(Rye," (mBART model)"),Rye.forEach(t),xCo=i(W),t2=n(W,"LI",{});var Bye=s(t2);ode=n(Bye,"STRONG",{});var itt=s(ode);$Co=r(itt,"megatron-bert"),itt.forEach(t),kCo=r(Bye," \u2014 "),cj=n(Bye,"A",{href:!0});var dtt=s(cj);SCo=r(dtt,"MegatronBertForCausalLM"),dtt.forEach(t),RCo=r(Bye," (MegatronBert model)"),Bye.forEach(t),BCo=i(W),a2=n(W,"LI",{});var Pye=s(a2);rde=n(Pye,"STRONG",{});var ctt=s(rde);PCo=r(ctt,"openai-gpt"),ctt.forEach(t),ICo=r(Pye," \u2014 "),fj=n(Pye,"A",{href:!0});var ftt=s(fj);qCo=r(ftt,"OpenAIGPTLMHeadModel"),ftt.forEach(t),NCo=r(Pye," (OpenAI GPT model)"),Pye.forEach(t),jCo=i(W),n2=n(W,"LI",{});var Iye=s(n2);tde=n(Iye,"STRONG",{});var mtt=s(tde);DCo=r(mtt,"opt"),mtt.forEach(t),GCo=r(Iye," \u2014 "),mj=n(Iye,"A",{href:!0});var gtt=s(mj);OCo=r(gtt,"OPTForCausalLM"),gtt.forEach(t),VCo=r(Iye," (OPT model)"),Iye.forEach(t),XCo=i(W),s2=n(W,"LI",{});var qye=s(s2);ade=n(qye,"STRONG",{});var htt=s(ade);zCo=r(htt,"pegasus"),htt.forEach(t),WCo=r(qye," \u2014 "),gj=n(qye,"A",{href:!0});var ptt=s(gj);QCo=r(ptt,"PegasusForCausalLM"),ptt.forEach(t),HCo=r(qye," (Pegasus model)"),qye.forEach(t),UCo=i(W),l2=n(W,"LI",{});var Nye=s(l2);nde=n(Nye,"STRONG",{});var _tt=s(nde);JCo=r(_tt,"plbart"),_tt.forEach(t),YCo=r(Nye," \u2014 "),hj=n(Nye,"A",{href:!0});var utt=s(hj);KCo=r(utt,"PLBartForCausalLM"),utt.forEach(t),ZCo=r(Nye," (PLBart model)"),Nye.forEach(t),e5o=i(W),i2=n(W,"LI",{});var jye=s(i2);sde=n(jye,"STRONG",{});var btt=s(sde);o5o=r(btt,"prophetnet"),btt.forEach(t),r5o=r(jye," \u2014 "),pj=n(jye,"A",{href:!0});var vtt=s(pj);t5o=r(vtt,"ProphetNetForCausalLM"),vtt.forEach(t),a5o=r(jye," (ProphetNet model)"),jye.forEach(t),n5o=i(W),d2=n(W,"LI",{});var Dye=s(d2);lde=n(Dye,"STRONG",{});var Ftt=s(lde);s5o=r(Ftt,"qdqbert"),Ftt.forEach(t),l5o=r(Dye," \u2014 "),_j=n(Dye,"A",{href:!0});var Ttt=s(_j);i5o=r(Ttt,"QDQBertLMHeadModel"),Ttt.forEach(t),d5o=r(Dye," (QDQBert model)"),Dye.forEach(t),c5o=i(W),c2=n(W,"LI",{});var Gye=s(c2);ide=n(Gye,"STRONG",{});var Mtt=s(ide);f5o=r(Mtt,"reformer"),Mtt.forEach(t),m5o=r(Gye," \u2014 "),uj=n(Gye,"A",{href:!0});var Ett=s(uj);g5o=r(Ett,"ReformerModelWithLMHead"),Ett.forEach(t),h5o=r(Gye," (Reformer model)"),Gye.forEach(t),p5o=i(W),f2=n(W,"LI",{});var Oye=s(f2);dde=n(Oye,"STRONG",{});var Ctt=s(dde);_5o=r(Ctt,"rembert"),Ctt.forEach(t),u5o=r(Oye," \u2014 "),bj=n(Oye,"A",{href:!0});var wtt=s(bj);b5o=r(wtt,"RemBertForCausalLM"),wtt.forEach(t),v5o=r(Oye," (RemBERT model)"),Oye.forEach(t),F5o=i(W),m2=n(W,"LI",{});var Vye=s(m2);cde=n(Vye,"STRONG",{});var Att=s(cde);T5o=r(Att,"roberta"),Att.forEach(t),M5o=r(Vye," \u2014 "),vj=n(Vye,"A",{href:!0});var ytt=s(vj);E5o=r(ytt,"RobertaForCausalLM"),ytt.forEach(t),C5o=r(Vye," (RoBERTa model)"),Vye.forEach(t),w5o=i(W),g2=n(W,"LI",{});var Xye=s(g2);fde=n(Xye,"STRONG",{});var Ltt=s(fde);A5o=r(Ltt,"roformer"),Ltt.forEach(t),y5o=r(Xye," \u2014 "),Fj=n(Xye,"A",{href:!0});var xtt=s(Fj);L5o=r(xtt,"RoFormerForCausalLM"),xtt.forEach(t),x5o=r(Xye," (RoFormer model)"),Xye.forEach(t),$5o=i(W),h2=n(W,"LI",{});var zye=s(h2);mde=n(zye,"STRONG",{});var $tt=s(mde);k5o=r($tt,"speech_to_text_2"),$tt.forEach(t),S5o=r(zye," \u2014 "),Tj=n(zye,"A",{href:!0});var ktt=s(Tj);R5o=r(ktt,"Speech2Text2ForCausalLM"),ktt.forEach(t),B5o=r(zye," (Speech2Text2 model)"),zye.forEach(t),P5o=i(W),p2=n(W,"LI",{});var Wye=s(p2);gde=n(Wye,"STRONG",{});var Stt=s(gde);I5o=r(Stt,"transfo-xl"),Stt.forEach(t),q5o=r(Wye," \u2014 "),Mj=n(Wye,"A",{href:!0});var Rtt=s(Mj);N5o=r(Rtt,"TransfoXLLMHeadModel"),Rtt.forEach(t),j5o=r(Wye," (Transformer-XL model)"),Wye.forEach(t),D5o=i(W),_2=n(W,"LI",{});var Qye=s(_2);hde=n(Qye,"STRONG",{});var Btt=s(hde);G5o=r(Btt,"trocr"),Btt.forEach(t),O5o=r(Qye," \u2014 "),Ej=n(Qye,"A",{href:!0});var Ptt=s(Ej);V5o=r(Ptt,"TrOCRForCausalLM"),Ptt.forEach(t),X5o=r(Qye," (TrOCR model)"),Qye.forEach(t),z5o=i(W),u2=n(W,"LI",{});var Hye=s(u2);pde=n(Hye,"STRONG",{});var Itt=s(pde);W5o=r(Itt,"xglm"),Itt.forEach(t),Q5o=r(Hye," \u2014 "),Cj=n(Hye,"A",{href:!0});var qtt=s(Cj);H5o=r(qtt,"XGLMForCausalLM"),qtt.forEach(t),U5o=r(Hye," (XGLM model)"),Hye.forEach(t),J5o=i(W),b2=n(W,"LI",{});var Uye=s(b2);_de=n(Uye,"STRONG",{});var Ntt=s(_de);Y5o=r(Ntt,"xlm"),Ntt.forEach(t),K5o=r(Uye," \u2014 "),wj=n(Uye,"A",{href:!0});var jtt=s(wj);Z5o=r(jtt,"XLMWithLMHeadModel"),jtt.forEach(t),e3o=r(Uye," (XLM model)"),Uye.forEach(t),o3o=i(W),v2=n(W,"LI",{});var Jye=s(v2);ude=n(Jye,"STRONG",{});var Dtt=s(ude);r3o=r(Dtt,"xlm-prophetnet"),Dtt.forEach(t),t3o=r(Jye," \u2014 "),Aj=n(Jye,"A",{href:!0});var Gtt=s(Aj);a3o=r(Gtt,"XLMProphetNetForCausalLM"),Gtt.forEach(t),n3o=r(Jye," (XLMProphetNet model)"),Jye.forEach(t),s3o=i(W),F2=n(W,"LI",{});var Yye=s(F2);bde=n(Yye,"STRONG",{});var Ott=s(bde);l3o=r(Ott,"xlm-roberta"),Ott.forEach(t),i3o=r(Yye," \u2014 "),yj=n(Yye,"A",{href:!0});var Vtt=s(yj);d3o=r(Vtt,"XLMRobertaForCausalLM"),Vtt.forEach(t),c3o=r(Yye," (XLM-RoBERTa model)"),Yye.forEach(t),f3o=i(W),T2=n(W,"LI",{});var Kye=s(T2);vde=n(Kye,"STRONG",{});var Xtt=s(vde);m3o=r(Xtt,"xlm-roberta-xl"),Xtt.forEach(t),g3o=r(Kye," \u2014 "),Lj=n(Kye,"A",{href:!0});var ztt=s(Lj);h3o=r(ztt,"XLMRobertaXLForCausalLM"),ztt.forEach(t),p3o=r(Kye," (XLM-RoBERTa-XL model)"),Kye.forEach(t),_3o=i(W),M2=n(W,"LI",{});var Zye=s(M2);Fde=n(Zye,"STRONG",{});var Wtt=s(Fde);u3o=r(Wtt,"xlnet"),Wtt.forEach(t),b3o=r(Zye," \u2014 "),xj=n(Zye,"A",{href:!0});var Qtt=s(xj);v3o=r(Qtt,"XLNetLMHeadModel"),Qtt.forEach(t),F3o=r(Zye," (XLNet model)"),Zye.forEach(t),W.forEach(t),T3o=i(ta),E2=n(ta,"P",{});var eLe=s(E2);M3o=r(eLe,"The model is set in evaluation mode by default using "),Tde=n(eLe,"CODE",{});var Htt=s(Tde);E3o=r(Htt,"model.eval()"),Htt.forEach(t),C3o=r(eLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mde=n(eLe,"CODE",{});var Utt=s(Mde);w3o=r(Utt,"model.train()"),Utt.forEach(t),eLe.forEach(t),A3o=i(ta),T(C2.$$.fragment,ta),ta.forEach(t),Os.forEach(t),cqe=i(f),Ri=n(f,"H2",{class:!0});var hje=s(Ri);w2=n(hje,"A",{id:!0,class:!0,href:!0});var Jtt=s(w2);Ede=n(Jtt,"SPAN",{});var Ytt=s(Ede);T(Z6.$$.fragment,Ytt),Ytt.forEach(t),Jtt.forEach(t),y3o=i(hje),Cde=n(hje,"SPAN",{});var Ktt=s(Cde);L3o=r(Ktt,"AutoModelForMaskedLM"),Ktt.forEach(t),hje.forEach(t),fqe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(ey.$$.fragment,Vs),x3o=i(Vs),Bi=n(Vs,"P",{});var VK=s(Bi);$3o=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$j=n(VK,"A",{href:!0});var Ztt=s($j);k3o=r(Ztt,"from_pretrained()"),Ztt.forEach(t),S3o=r(VK," class method or the "),kj=n(VK,"A",{href:!0});var eat=s(kj);R3o=r(eat,"from_config()"),eat.forEach(t),B3o=r(VK,` class
method.`),VK.forEach(t),P3o=i(Vs),oy=n(Vs,"P",{});var pje=s(oy);I3o=r(pje,"This class cannot be instantiated directly using "),wde=n(pje,"CODE",{});var oat=s(wde);q3o=r(oat,"__init__()"),oat.forEach(t),N3o=r(pje," (throws an error)."),pje.forEach(t),j3o=i(Vs),st=n(Vs,"DIV",{class:!0});var Mw=s(st);T(ry.$$.fragment,Mw),D3o=i(Mw),Ade=n(Mw,"P",{});var rat=s(Ade);G3o=r(rat,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rat.forEach(t),O3o=i(Mw),Pi=n(Mw,"P",{});var XK=s(Pi);V3o=r(XK,`Note:
Loading a model from its configuration file does `),yde=n(XK,"STRONG",{});var tat=s(yde);X3o=r(tat,"not"),tat.forEach(t),z3o=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sj=n(XK,"A",{href:!0});var aat=s(Sj);W3o=r(aat,"from_pretrained()"),aat.forEach(t),Q3o=r(XK," to load the model weights."),XK.forEach(t),H3o=i(Mw),T(A2.$$.fragment,Mw),Mw.forEach(t),U3o=i(Vs),Ze=n(Vs,"DIV",{class:!0});var aa=s(Ze);T(ty.$$.fragment,aa),J3o=i(aa),Lde=n(aa,"P",{});var nat=s(Lde);Y3o=r(nat,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nat.forEach(t),K3o=i(aa),ka=n(aa,"P",{});var Ew=s(ka);Z3o=r(Ew,"The model class to instantiate is selected based on the "),xde=n(Ew,"CODE",{});var sat=s(xde);ewo=r(sat,"model_type"),sat.forEach(t),owo=r(Ew,` property of the config object (either
passed as an argument or loaded from `),$de=n(Ew,"CODE",{});var lat=s($de);rwo=r(lat,"pretrained_model_name_or_path"),lat.forEach(t),two=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kde=n(Ew,"CODE",{});var iat=s(kde);awo=r(iat,"pretrained_model_name_or_path"),iat.forEach(t),nwo=r(Ew,":"),Ew.forEach(t),swo=i(aa),Q=n(aa,"UL",{});var H=s(Q);y2=n(H,"LI",{});var oLe=s(y2);Sde=n(oLe,"STRONG",{});var dat=s(Sde);lwo=r(dat,"albert"),dat.forEach(t),iwo=r(oLe," \u2014 "),Rj=n(oLe,"A",{href:!0});var cat=s(Rj);dwo=r(cat,"AlbertForMaskedLM"),cat.forEach(t),cwo=r(oLe," (ALBERT model)"),oLe.forEach(t),fwo=i(H),L2=n(H,"LI",{});var rLe=s(L2);Rde=n(rLe,"STRONG",{});var fat=s(Rde);mwo=r(fat,"bart"),fat.forEach(t),gwo=r(rLe," \u2014 "),Bj=n(rLe,"A",{href:!0});var mat=s(Bj);hwo=r(mat,"BartForConditionalGeneration"),mat.forEach(t),pwo=r(rLe," (BART model)"),rLe.forEach(t),_wo=i(H),x2=n(H,"LI",{});var tLe=s(x2);Bde=n(tLe,"STRONG",{});var gat=s(Bde);uwo=r(gat,"bert"),gat.forEach(t),bwo=r(tLe," \u2014 "),Pj=n(tLe,"A",{href:!0});var hat=s(Pj);vwo=r(hat,"BertForMaskedLM"),hat.forEach(t),Fwo=r(tLe," (BERT model)"),tLe.forEach(t),Two=i(H),$2=n(H,"LI",{});var aLe=s($2);Pde=n(aLe,"STRONG",{});var pat=s(Pde);Mwo=r(pat,"big_bird"),pat.forEach(t),Ewo=r(aLe," \u2014 "),Ij=n(aLe,"A",{href:!0});var _at=s(Ij);Cwo=r(_at,"BigBirdForMaskedLM"),_at.forEach(t),wwo=r(aLe," (BigBird model)"),aLe.forEach(t),Awo=i(H),k2=n(H,"LI",{});var nLe=s(k2);Ide=n(nLe,"STRONG",{});var uat=s(Ide);ywo=r(uat,"camembert"),uat.forEach(t),Lwo=r(nLe," \u2014 "),qj=n(nLe,"A",{href:!0});var bat=s(qj);xwo=r(bat,"CamembertForMaskedLM"),bat.forEach(t),$wo=r(nLe," (CamemBERT model)"),nLe.forEach(t),kwo=i(H),S2=n(H,"LI",{});var sLe=s(S2);qde=n(sLe,"STRONG",{});var vat=s(qde);Swo=r(vat,"convbert"),vat.forEach(t),Rwo=r(sLe," \u2014 "),Nj=n(sLe,"A",{href:!0});var Fat=s(Nj);Bwo=r(Fat,"ConvBertForMaskedLM"),Fat.forEach(t),Pwo=r(sLe," (ConvBERT model)"),sLe.forEach(t),Iwo=i(H),R2=n(H,"LI",{});var lLe=s(R2);Nde=n(lLe,"STRONG",{});var Tat=s(Nde);qwo=r(Tat,"data2vec-text"),Tat.forEach(t),Nwo=r(lLe," \u2014 "),jj=n(lLe,"A",{href:!0});var Mat=s(jj);jwo=r(Mat,"Data2VecTextForMaskedLM"),Mat.forEach(t),Dwo=r(lLe," (Data2VecText model)"),lLe.forEach(t),Gwo=i(H),B2=n(H,"LI",{});var iLe=s(B2);jde=n(iLe,"STRONG",{});var Eat=s(jde);Owo=r(Eat,"deberta"),Eat.forEach(t),Vwo=r(iLe," \u2014 "),Dj=n(iLe,"A",{href:!0});var Cat=s(Dj);Xwo=r(Cat,"DebertaForMaskedLM"),Cat.forEach(t),zwo=r(iLe," (DeBERTa model)"),iLe.forEach(t),Wwo=i(H),P2=n(H,"LI",{});var dLe=s(P2);Dde=n(dLe,"STRONG",{});var wat=s(Dde);Qwo=r(wat,"deberta-v2"),wat.forEach(t),Hwo=r(dLe," \u2014 "),Gj=n(dLe,"A",{href:!0});var Aat=s(Gj);Uwo=r(Aat,"DebertaV2ForMaskedLM"),Aat.forEach(t),Jwo=r(dLe," (DeBERTa-v2 model)"),dLe.forEach(t),Ywo=i(H),I2=n(H,"LI",{});var cLe=s(I2);Gde=n(cLe,"STRONG",{});var yat=s(Gde);Kwo=r(yat,"distilbert"),yat.forEach(t),Zwo=r(cLe," \u2014 "),Oj=n(cLe,"A",{href:!0});var Lat=s(Oj);eAo=r(Lat,"DistilBertForMaskedLM"),Lat.forEach(t),oAo=r(cLe," (DistilBERT model)"),cLe.forEach(t),rAo=i(H),q2=n(H,"LI",{});var fLe=s(q2);Ode=n(fLe,"STRONG",{});var xat=s(Ode);tAo=r(xat,"electra"),xat.forEach(t),aAo=r(fLe," \u2014 "),Vj=n(fLe,"A",{href:!0});var $at=s(Vj);nAo=r($at,"ElectraForMaskedLM"),$at.forEach(t),sAo=r(fLe," (ELECTRA model)"),fLe.forEach(t),lAo=i(H),N2=n(H,"LI",{});var mLe=s(N2);Vde=n(mLe,"STRONG",{});var kat=s(Vde);iAo=r(kat,"flaubert"),kat.forEach(t),dAo=r(mLe," \u2014 "),Xj=n(mLe,"A",{href:!0});var Sat=s(Xj);cAo=r(Sat,"FlaubertWithLMHeadModel"),Sat.forEach(t),fAo=r(mLe," (FlauBERT model)"),mLe.forEach(t),mAo=i(H),j2=n(H,"LI",{});var gLe=s(j2);Xde=n(gLe,"STRONG",{});var Rat=s(Xde);gAo=r(Rat,"fnet"),Rat.forEach(t),hAo=r(gLe," \u2014 "),zj=n(gLe,"A",{href:!0});var Bat=s(zj);pAo=r(Bat,"FNetForMaskedLM"),Bat.forEach(t),_Ao=r(gLe," (FNet model)"),gLe.forEach(t),uAo=i(H),D2=n(H,"LI",{});var hLe=s(D2);zde=n(hLe,"STRONG",{});var Pat=s(zde);bAo=r(Pat,"funnel"),Pat.forEach(t),vAo=r(hLe," \u2014 "),Wj=n(hLe,"A",{href:!0});var Iat=s(Wj);FAo=r(Iat,"FunnelForMaskedLM"),Iat.forEach(t),TAo=r(hLe," (Funnel Transformer model)"),hLe.forEach(t),MAo=i(H),G2=n(H,"LI",{});var pLe=s(G2);Wde=n(pLe,"STRONG",{});var qat=s(Wde);EAo=r(qat,"ibert"),qat.forEach(t),CAo=r(pLe," \u2014 "),Qj=n(pLe,"A",{href:!0});var Nat=s(Qj);wAo=r(Nat,"IBertForMaskedLM"),Nat.forEach(t),AAo=r(pLe," (I-BERT model)"),pLe.forEach(t),yAo=i(H),O2=n(H,"LI",{});var _Le=s(O2);Qde=n(_Le,"STRONG",{});var jat=s(Qde);LAo=r(jat,"layoutlm"),jat.forEach(t),xAo=r(_Le," \u2014 "),Hj=n(_Le,"A",{href:!0});var Dat=s(Hj);$Ao=r(Dat,"LayoutLMForMaskedLM"),Dat.forEach(t),kAo=r(_Le," (LayoutLM model)"),_Le.forEach(t),SAo=i(H),V2=n(H,"LI",{});var uLe=s(V2);Hde=n(uLe,"STRONG",{});var Gat=s(Hde);RAo=r(Gat,"longformer"),Gat.forEach(t),BAo=r(uLe," \u2014 "),Uj=n(uLe,"A",{href:!0});var Oat=s(Uj);PAo=r(Oat,"LongformerForMaskedLM"),Oat.forEach(t),IAo=r(uLe," (Longformer model)"),uLe.forEach(t),qAo=i(H),X2=n(H,"LI",{});var bLe=s(X2);Ude=n(bLe,"STRONG",{});var Vat=s(Ude);NAo=r(Vat,"mbart"),Vat.forEach(t),jAo=r(bLe," \u2014 "),Jj=n(bLe,"A",{href:!0});var Xat=s(Jj);DAo=r(Xat,"MBartForConditionalGeneration"),Xat.forEach(t),GAo=r(bLe," (mBART model)"),bLe.forEach(t),OAo=i(H),z2=n(H,"LI",{});var vLe=s(z2);Jde=n(vLe,"STRONG",{});var zat=s(Jde);VAo=r(zat,"megatron-bert"),zat.forEach(t),XAo=r(vLe," \u2014 "),Yj=n(vLe,"A",{href:!0});var Wat=s(Yj);zAo=r(Wat,"MegatronBertForMaskedLM"),Wat.forEach(t),WAo=r(vLe," (MegatronBert model)"),vLe.forEach(t),QAo=i(H),W2=n(H,"LI",{});var FLe=s(W2);Yde=n(FLe,"STRONG",{});var Qat=s(Yde);HAo=r(Qat,"mobilebert"),Qat.forEach(t),UAo=r(FLe," \u2014 "),Kj=n(FLe,"A",{href:!0});var Hat=s(Kj);JAo=r(Hat,"MobileBertForMaskedLM"),Hat.forEach(t),YAo=r(FLe," (MobileBERT model)"),FLe.forEach(t),KAo=i(H),Q2=n(H,"LI",{});var TLe=s(Q2);Kde=n(TLe,"STRONG",{});var Uat=s(Kde);ZAo=r(Uat,"mpnet"),Uat.forEach(t),e6o=r(TLe," \u2014 "),Zj=n(TLe,"A",{href:!0});var Jat=s(Zj);o6o=r(Jat,"MPNetForMaskedLM"),Jat.forEach(t),r6o=r(TLe," (MPNet model)"),TLe.forEach(t),t6o=i(H),H2=n(H,"LI",{});var MLe=s(H2);Zde=n(MLe,"STRONG",{});var Yat=s(Zde);a6o=r(Yat,"nystromformer"),Yat.forEach(t),n6o=r(MLe," \u2014 "),eD=n(MLe,"A",{href:!0});var Kat=s(eD);s6o=r(Kat,"NystromformerForMaskedLM"),Kat.forEach(t),l6o=r(MLe," (Nystromformer model)"),MLe.forEach(t),i6o=i(H),U2=n(H,"LI",{});var ELe=s(U2);ece=n(ELe,"STRONG",{});var Zat=s(ece);d6o=r(Zat,"perceiver"),Zat.forEach(t),c6o=r(ELe," \u2014 "),oD=n(ELe,"A",{href:!0});var ent=s(oD);f6o=r(ent,"PerceiverForMaskedLM"),ent.forEach(t),m6o=r(ELe," (Perceiver model)"),ELe.forEach(t),g6o=i(H),J2=n(H,"LI",{});var CLe=s(J2);oce=n(CLe,"STRONG",{});var ont=s(oce);h6o=r(ont,"qdqbert"),ont.forEach(t),p6o=r(CLe," \u2014 "),rD=n(CLe,"A",{href:!0});var rnt=s(rD);_6o=r(rnt,"QDQBertForMaskedLM"),rnt.forEach(t),u6o=r(CLe," (QDQBert model)"),CLe.forEach(t),b6o=i(H),Y2=n(H,"LI",{});var wLe=s(Y2);rce=n(wLe,"STRONG",{});var tnt=s(rce);v6o=r(tnt,"reformer"),tnt.forEach(t),F6o=r(wLe," \u2014 "),tD=n(wLe,"A",{href:!0});var ant=s(tD);T6o=r(ant,"ReformerForMaskedLM"),ant.forEach(t),M6o=r(wLe," (Reformer model)"),wLe.forEach(t),E6o=i(H),K2=n(H,"LI",{});var ALe=s(K2);tce=n(ALe,"STRONG",{});var nnt=s(tce);C6o=r(nnt,"rembert"),nnt.forEach(t),w6o=r(ALe," \u2014 "),aD=n(ALe,"A",{href:!0});var snt=s(aD);A6o=r(snt,"RemBertForMaskedLM"),snt.forEach(t),y6o=r(ALe," (RemBERT model)"),ALe.forEach(t),L6o=i(H),Z2=n(H,"LI",{});var yLe=s(Z2);ace=n(yLe,"STRONG",{});var lnt=s(ace);x6o=r(lnt,"roberta"),lnt.forEach(t),$6o=r(yLe," \u2014 "),nD=n(yLe,"A",{href:!0});var int=s(nD);k6o=r(int,"RobertaForMaskedLM"),int.forEach(t),S6o=r(yLe," (RoBERTa model)"),yLe.forEach(t),R6o=i(H),e1=n(H,"LI",{});var LLe=s(e1);nce=n(LLe,"STRONG",{});var dnt=s(nce);B6o=r(dnt,"roformer"),dnt.forEach(t),P6o=r(LLe," \u2014 "),sD=n(LLe,"A",{href:!0});var cnt=s(sD);I6o=r(cnt,"RoFormerForMaskedLM"),cnt.forEach(t),q6o=r(LLe," (RoFormer model)"),LLe.forEach(t),N6o=i(H),o1=n(H,"LI",{});var xLe=s(o1);sce=n(xLe,"STRONG",{});var fnt=s(sce);j6o=r(fnt,"squeezebert"),fnt.forEach(t),D6o=r(xLe," \u2014 "),lD=n(xLe,"A",{href:!0});var mnt=s(lD);G6o=r(mnt,"SqueezeBertForMaskedLM"),mnt.forEach(t),O6o=r(xLe," (SqueezeBERT model)"),xLe.forEach(t),V6o=i(H),r1=n(H,"LI",{});var $Le=s(r1);lce=n($Le,"STRONG",{});var gnt=s(lce);X6o=r(gnt,"tapas"),gnt.forEach(t),z6o=r($Le," \u2014 "),iD=n($Le,"A",{href:!0});var hnt=s(iD);W6o=r(hnt,"TapasForMaskedLM"),hnt.forEach(t),Q6o=r($Le," (TAPAS model)"),$Le.forEach(t),H6o=i(H),t1=n(H,"LI",{});var kLe=s(t1);ice=n(kLe,"STRONG",{});var pnt=s(ice);U6o=r(pnt,"wav2vec2"),pnt.forEach(t),J6o=r(kLe," \u2014 "),dce=n(kLe,"CODE",{});var _nt=s(dce);Y6o=r(_nt,"Wav2Vec2ForMaskedLM"),_nt.forEach(t),K6o=r(kLe," (Wav2Vec2 model)"),kLe.forEach(t),Z6o=i(H),a1=n(H,"LI",{});var SLe=s(a1);cce=n(SLe,"STRONG",{});var unt=s(cce);eyo=r(unt,"xlm"),unt.forEach(t),oyo=r(SLe," \u2014 "),dD=n(SLe,"A",{href:!0});var bnt=s(dD);ryo=r(bnt,"XLMWithLMHeadModel"),bnt.forEach(t),tyo=r(SLe," (XLM model)"),SLe.forEach(t),ayo=i(H),n1=n(H,"LI",{});var RLe=s(n1);fce=n(RLe,"STRONG",{});var vnt=s(fce);nyo=r(vnt,"xlm-roberta"),vnt.forEach(t),syo=r(RLe," \u2014 "),cD=n(RLe,"A",{href:!0});var Fnt=s(cD);lyo=r(Fnt,"XLMRobertaForMaskedLM"),Fnt.forEach(t),iyo=r(RLe," (XLM-RoBERTa model)"),RLe.forEach(t),dyo=i(H),s1=n(H,"LI",{});var BLe=s(s1);mce=n(BLe,"STRONG",{});var Tnt=s(mce);cyo=r(Tnt,"xlm-roberta-xl"),Tnt.forEach(t),fyo=r(BLe," \u2014 "),fD=n(BLe,"A",{href:!0});var Mnt=s(fD);myo=r(Mnt,"XLMRobertaXLForMaskedLM"),Mnt.forEach(t),gyo=r(BLe," (XLM-RoBERTa-XL model)"),BLe.forEach(t),hyo=i(H),l1=n(H,"LI",{});var PLe=s(l1);gce=n(PLe,"STRONG",{});var Ent=s(gce);pyo=r(Ent,"yoso"),Ent.forEach(t),_yo=r(PLe," \u2014 "),mD=n(PLe,"A",{href:!0});var Cnt=s(mD);uyo=r(Cnt,"YosoForMaskedLM"),Cnt.forEach(t),byo=r(PLe," (YOSO model)"),PLe.forEach(t),H.forEach(t),vyo=i(aa),i1=n(aa,"P",{});var ILe=s(i1);Fyo=r(ILe,"The model is set in evaluation mode by default using "),hce=n(ILe,"CODE",{});var wnt=s(hce);Tyo=r(wnt,"model.eval()"),wnt.forEach(t),Myo=r(ILe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pce=n(ILe,"CODE",{});var Ant=s(pce);Eyo=r(Ant,"model.train()"),Ant.forEach(t),ILe.forEach(t),Cyo=i(aa),T(d1.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),mqe=i(f),Ii=n(f,"H2",{class:!0});var _je=s(Ii);c1=n(_je,"A",{id:!0,class:!0,href:!0});var ynt=s(c1);_ce=n(ynt,"SPAN",{});var Lnt=s(_ce);T(ay.$$.fragment,Lnt),Lnt.forEach(t),ynt.forEach(t),wyo=i(_je),uce=n(_je,"SPAN",{});var xnt=s(uce);Ayo=r(xnt,"AutoModelForSeq2SeqLM"),xnt.forEach(t),_je.forEach(t),gqe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(ny.$$.fragment,Xs),yyo=i(Xs),qi=n(Xs,"P",{});var zK=s(qi);Lyo=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gD=n(zK,"A",{href:!0});var $nt=s(gD);xyo=r($nt,"from_pretrained()"),$nt.forEach(t),$yo=r(zK," class method or the "),hD=n(zK,"A",{href:!0});var knt=s(hD);kyo=r(knt,"from_config()"),knt.forEach(t),Syo=r(zK,` class
method.`),zK.forEach(t),Ryo=i(Xs),sy=n(Xs,"P",{});var uje=s(sy);Byo=r(uje,"This class cannot be instantiated directly using "),bce=n(uje,"CODE",{});var Snt=s(bce);Pyo=r(Snt,"__init__()"),Snt.forEach(t),Iyo=r(uje," (throws an error)."),uje.forEach(t),qyo=i(Xs),lt=n(Xs,"DIV",{class:!0});var Cw=s(lt);T(ly.$$.fragment,Cw),Nyo=i(Cw),vce=n(Cw,"P",{});var Rnt=s(vce);jyo=r(Rnt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Rnt.forEach(t),Dyo=i(Cw),Ni=n(Cw,"P",{});var WK=s(Ni);Gyo=r(WK,`Note:
Loading a model from its configuration file does `),Fce=n(WK,"STRONG",{});var Bnt=s(Fce);Oyo=r(Bnt,"not"),Bnt.forEach(t),Vyo=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),pD=n(WK,"A",{href:!0});var Pnt=s(pD);Xyo=r(Pnt,"from_pretrained()"),Pnt.forEach(t),zyo=r(WK," to load the model weights."),WK.forEach(t),Wyo=i(Cw),T(f1.$$.fragment,Cw),Cw.forEach(t),Qyo=i(Xs),eo=n(Xs,"DIV",{class:!0});var na=s(eo);T(iy.$$.fragment,na),Hyo=i(na),Tce=n(na,"P",{});var Int=s(Tce);Uyo=r(Int,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Int.forEach(t),Jyo=i(na),Sa=n(na,"P",{});var ww=s(Sa);Yyo=r(ww,"The model class to instantiate is selected based on the "),Mce=n(ww,"CODE",{});var qnt=s(Mce);Kyo=r(qnt,"model_type"),qnt.forEach(t),Zyo=r(ww,` property of the config object (either
passed as an argument or loaded from `),Ece=n(ww,"CODE",{});var Nnt=s(Ece);eLo=r(Nnt,"pretrained_model_name_or_path"),Nnt.forEach(t),oLo=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cce=n(ww,"CODE",{});var jnt=s(Cce);rLo=r(jnt,"pretrained_model_name_or_path"),jnt.forEach(t),tLo=r(ww,":"),ww.forEach(t),aLo=i(na),_e=n(na,"UL",{});var ve=s(_e);m1=n(ve,"LI",{});var qLe=s(m1);wce=n(qLe,"STRONG",{});var Dnt=s(wce);nLo=r(Dnt,"bart"),Dnt.forEach(t),sLo=r(qLe," \u2014 "),_D=n(qLe,"A",{href:!0});var Gnt=s(_D);lLo=r(Gnt,"BartForConditionalGeneration"),Gnt.forEach(t),iLo=r(qLe," (BART model)"),qLe.forEach(t),dLo=i(ve),g1=n(ve,"LI",{});var NLe=s(g1);Ace=n(NLe,"STRONG",{});var Ont=s(Ace);cLo=r(Ont,"bigbird_pegasus"),Ont.forEach(t),fLo=r(NLe," \u2014 "),uD=n(NLe,"A",{href:!0});var Vnt=s(uD);mLo=r(Vnt,"BigBirdPegasusForConditionalGeneration"),Vnt.forEach(t),gLo=r(NLe," (BigBirdPegasus model)"),NLe.forEach(t),hLo=i(ve),h1=n(ve,"LI",{});var jLe=s(h1);yce=n(jLe,"STRONG",{});var Xnt=s(yce);pLo=r(Xnt,"blenderbot"),Xnt.forEach(t),_Lo=r(jLe," \u2014 "),bD=n(jLe,"A",{href:!0});var znt=s(bD);uLo=r(znt,"BlenderbotForConditionalGeneration"),znt.forEach(t),bLo=r(jLe," (Blenderbot model)"),jLe.forEach(t),vLo=i(ve),p1=n(ve,"LI",{});var DLe=s(p1);Lce=n(DLe,"STRONG",{});var Wnt=s(Lce);FLo=r(Wnt,"blenderbot-small"),Wnt.forEach(t),TLo=r(DLe," \u2014 "),vD=n(DLe,"A",{href:!0});var Qnt=s(vD);MLo=r(Qnt,"BlenderbotSmallForConditionalGeneration"),Qnt.forEach(t),ELo=r(DLe," (BlenderbotSmall model)"),DLe.forEach(t),CLo=i(ve),_1=n(ve,"LI",{});var GLe=s(_1);xce=n(GLe,"STRONG",{});var Hnt=s(xce);wLo=r(Hnt,"encoder-decoder"),Hnt.forEach(t),ALo=r(GLe," \u2014 "),FD=n(GLe,"A",{href:!0});var Unt=s(FD);yLo=r(Unt,"EncoderDecoderModel"),Unt.forEach(t),LLo=r(GLe," (Encoder decoder model)"),GLe.forEach(t),xLo=i(ve),u1=n(ve,"LI",{});var OLe=s(u1);$ce=n(OLe,"STRONG",{});var Jnt=s($ce);$Lo=r(Jnt,"fsmt"),Jnt.forEach(t),kLo=r(OLe," \u2014 "),TD=n(OLe,"A",{href:!0});var Ynt=s(TD);SLo=r(Ynt,"FSMTForConditionalGeneration"),Ynt.forEach(t),RLo=r(OLe," (FairSeq Machine-Translation model)"),OLe.forEach(t),BLo=i(ve),b1=n(ve,"LI",{});var VLe=s(b1);kce=n(VLe,"STRONG",{});var Knt=s(kce);PLo=r(Knt,"led"),Knt.forEach(t),ILo=r(VLe," \u2014 "),MD=n(VLe,"A",{href:!0});var Znt=s(MD);qLo=r(Znt,"LEDForConditionalGeneration"),Znt.forEach(t),NLo=r(VLe," (LED model)"),VLe.forEach(t),jLo=i(ve),v1=n(ve,"LI",{});var XLe=s(v1);Sce=n(XLe,"STRONG",{});var est=s(Sce);DLo=r(est,"m2m_100"),est.forEach(t),GLo=r(XLe," \u2014 "),ED=n(XLe,"A",{href:!0});var ost=s(ED);OLo=r(ost,"M2M100ForConditionalGeneration"),ost.forEach(t),VLo=r(XLe," (M2M100 model)"),XLe.forEach(t),XLo=i(ve),F1=n(ve,"LI",{});var zLe=s(F1);Rce=n(zLe,"STRONG",{});var rst=s(Rce);zLo=r(rst,"marian"),rst.forEach(t),WLo=r(zLe," \u2014 "),CD=n(zLe,"A",{href:!0});var tst=s(CD);QLo=r(tst,"MarianMTModel"),tst.forEach(t),HLo=r(zLe," (Marian model)"),zLe.forEach(t),ULo=i(ve),T1=n(ve,"LI",{});var WLe=s(T1);Bce=n(WLe,"STRONG",{});var ast=s(Bce);JLo=r(ast,"mbart"),ast.forEach(t),YLo=r(WLe," \u2014 "),wD=n(WLe,"A",{href:!0});var nst=s(wD);KLo=r(nst,"MBartForConditionalGeneration"),nst.forEach(t),ZLo=r(WLe," (mBART model)"),WLe.forEach(t),e8o=i(ve),M1=n(ve,"LI",{});var QLe=s(M1);Pce=n(QLe,"STRONG",{});var sst=s(Pce);o8o=r(sst,"mt5"),sst.forEach(t),r8o=r(QLe," \u2014 "),AD=n(QLe,"A",{href:!0});var lst=s(AD);t8o=r(lst,"MT5ForConditionalGeneration"),lst.forEach(t),a8o=r(QLe," (mT5 model)"),QLe.forEach(t),n8o=i(ve),E1=n(ve,"LI",{});var HLe=s(E1);Ice=n(HLe,"STRONG",{});var ist=s(Ice);s8o=r(ist,"pegasus"),ist.forEach(t),l8o=r(HLe," \u2014 "),yD=n(HLe,"A",{href:!0});var dst=s(yD);i8o=r(dst,"PegasusForConditionalGeneration"),dst.forEach(t),d8o=r(HLe," (Pegasus model)"),HLe.forEach(t),c8o=i(ve),C1=n(ve,"LI",{});var ULe=s(C1);qce=n(ULe,"STRONG",{});var cst=s(qce);f8o=r(cst,"plbart"),cst.forEach(t),m8o=r(ULe," \u2014 "),LD=n(ULe,"A",{href:!0});var fst=s(LD);g8o=r(fst,"PLBartForConditionalGeneration"),fst.forEach(t),h8o=r(ULe," (PLBart model)"),ULe.forEach(t),p8o=i(ve),w1=n(ve,"LI",{});var JLe=s(w1);Nce=n(JLe,"STRONG",{});var mst=s(Nce);_8o=r(mst,"prophetnet"),mst.forEach(t),u8o=r(JLe," \u2014 "),xD=n(JLe,"A",{href:!0});var gst=s(xD);b8o=r(gst,"ProphetNetForConditionalGeneration"),gst.forEach(t),v8o=r(JLe," (ProphetNet model)"),JLe.forEach(t),F8o=i(ve),A1=n(ve,"LI",{});var YLe=s(A1);jce=n(YLe,"STRONG",{});var hst=s(jce);T8o=r(hst,"t5"),hst.forEach(t),M8o=r(YLe," \u2014 "),$D=n(YLe,"A",{href:!0});var pst=s($D);E8o=r(pst,"T5ForConditionalGeneration"),pst.forEach(t),C8o=r(YLe," (T5 model)"),YLe.forEach(t),w8o=i(ve),y1=n(ve,"LI",{});var KLe=s(y1);Dce=n(KLe,"STRONG",{});var _st=s(Dce);A8o=r(_st,"xlm-prophetnet"),_st.forEach(t),y8o=r(KLe," \u2014 "),kD=n(KLe,"A",{href:!0});var ust=s(kD);L8o=r(ust,"XLMProphetNetForConditionalGeneration"),ust.forEach(t),x8o=r(KLe," (XLMProphetNet model)"),KLe.forEach(t),ve.forEach(t),$8o=i(na),L1=n(na,"P",{});var ZLe=s(L1);k8o=r(ZLe,"The model is set in evaluation mode by default using "),Gce=n(ZLe,"CODE",{});var bst=s(Gce);S8o=r(bst,"model.eval()"),bst.forEach(t),R8o=r(ZLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oce=n(ZLe,"CODE",{});var vst=s(Oce);B8o=r(vst,"model.train()"),vst.forEach(t),ZLe.forEach(t),P8o=i(na),T(x1.$$.fragment,na),na.forEach(t),Xs.forEach(t),hqe=i(f),ji=n(f,"H2",{class:!0});var bje=s(ji);$1=n(bje,"A",{id:!0,class:!0,href:!0});var Fst=s($1);Vce=n(Fst,"SPAN",{});var Tst=s(Vce);T(dy.$$.fragment,Tst),Tst.forEach(t),Fst.forEach(t),I8o=i(bje),Xce=n(bje,"SPAN",{});var Mst=s(Xce);q8o=r(Mst,"AutoModelForSequenceClassification"),Mst.forEach(t),bje.forEach(t),pqe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(cy.$$.fragment,zs),N8o=i(zs),Di=n(zs,"P",{});var QK=s(Di);j8o=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),SD=n(QK,"A",{href:!0});var Est=s(SD);D8o=r(Est,"from_pretrained()"),Est.forEach(t),G8o=r(QK," class method or the "),RD=n(QK,"A",{href:!0});var Cst=s(RD);O8o=r(Cst,"from_config()"),Cst.forEach(t),V8o=r(QK,` class
method.`),QK.forEach(t),X8o=i(zs),fy=n(zs,"P",{});var vje=s(fy);z8o=r(vje,"This class cannot be instantiated directly using "),zce=n(vje,"CODE",{});var wst=s(zce);W8o=r(wst,"__init__()"),wst.forEach(t),Q8o=r(vje," (throws an error)."),vje.forEach(t),H8o=i(zs),it=n(zs,"DIV",{class:!0});var Aw=s(it);T(my.$$.fragment,Aw),U8o=i(Aw),Wce=n(Aw,"P",{});var Ast=s(Wce);J8o=r(Ast,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ast.forEach(t),Y8o=i(Aw),Gi=n(Aw,"P",{});var HK=s(Gi);K8o=r(HK,`Note:
Loading a model from its configuration file does `),Qce=n(HK,"STRONG",{});var yst=s(Qce);Z8o=r(yst,"not"),yst.forEach(t),e9o=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),BD=n(HK,"A",{href:!0});var Lst=s(BD);o9o=r(Lst,"from_pretrained()"),Lst.forEach(t),r9o=r(HK," to load the model weights."),HK.forEach(t),t9o=i(Aw),T(k1.$$.fragment,Aw),Aw.forEach(t),a9o=i(zs),oo=n(zs,"DIV",{class:!0});var sa=s(oo);T(gy.$$.fragment,sa),n9o=i(sa),Hce=n(sa,"P",{});var xst=s(Hce);s9o=r(xst,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),xst.forEach(t),l9o=i(sa),Ra=n(sa,"P",{});var yw=s(Ra);i9o=r(yw,"The model class to instantiate is selected based on the "),Uce=n(yw,"CODE",{});var $st=s(Uce);d9o=r($st,"model_type"),$st.forEach(t),c9o=r(yw,` property of the config object (either
passed as an argument or loaded from `),Jce=n(yw,"CODE",{});var kst=s(Jce);f9o=r(kst,"pretrained_model_name_or_path"),kst.forEach(t),m9o=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=n(yw,"CODE",{});var Sst=s(Yce);g9o=r(Sst,"pretrained_model_name_or_path"),Sst.forEach(t),h9o=r(yw,":"),yw.forEach(t),p9o=i(sa),q=n(sa,"UL",{});var j=s(q);S1=n(j,"LI",{});var e8e=s(S1);Kce=n(e8e,"STRONG",{});var Rst=s(Kce);_9o=r(Rst,"albert"),Rst.forEach(t),u9o=r(e8e," \u2014 "),PD=n(e8e,"A",{href:!0});var Bst=s(PD);b9o=r(Bst,"AlbertForSequenceClassification"),Bst.forEach(t),v9o=r(e8e," (ALBERT model)"),e8e.forEach(t),F9o=i(j),R1=n(j,"LI",{});var o8e=s(R1);Zce=n(o8e,"STRONG",{});var Pst=s(Zce);T9o=r(Pst,"bart"),Pst.forEach(t),M9o=r(o8e," \u2014 "),ID=n(o8e,"A",{href:!0});var Ist=s(ID);E9o=r(Ist,"BartForSequenceClassification"),Ist.forEach(t),C9o=r(o8e," (BART model)"),o8e.forEach(t),w9o=i(j),B1=n(j,"LI",{});var r8e=s(B1);efe=n(r8e,"STRONG",{});var qst=s(efe);A9o=r(qst,"bert"),qst.forEach(t),y9o=r(r8e," \u2014 "),qD=n(r8e,"A",{href:!0});var Nst=s(qD);L9o=r(Nst,"BertForSequenceClassification"),Nst.forEach(t),x9o=r(r8e," (BERT model)"),r8e.forEach(t),$9o=i(j),P1=n(j,"LI",{});var t8e=s(P1);ofe=n(t8e,"STRONG",{});var jst=s(ofe);k9o=r(jst,"big_bird"),jst.forEach(t),S9o=r(t8e," \u2014 "),ND=n(t8e,"A",{href:!0});var Dst=s(ND);R9o=r(Dst,"BigBirdForSequenceClassification"),Dst.forEach(t),B9o=r(t8e," (BigBird model)"),t8e.forEach(t),P9o=i(j),I1=n(j,"LI",{});var a8e=s(I1);rfe=n(a8e,"STRONG",{});var Gst=s(rfe);I9o=r(Gst,"bigbird_pegasus"),Gst.forEach(t),q9o=r(a8e," \u2014 "),jD=n(a8e,"A",{href:!0});var Ost=s(jD);N9o=r(Ost,"BigBirdPegasusForSequenceClassification"),Ost.forEach(t),j9o=r(a8e," (BigBirdPegasus model)"),a8e.forEach(t),D9o=i(j),q1=n(j,"LI",{});var n8e=s(q1);tfe=n(n8e,"STRONG",{});var Vst=s(tfe);G9o=r(Vst,"camembert"),Vst.forEach(t),O9o=r(n8e," \u2014 "),DD=n(n8e,"A",{href:!0});var Xst=s(DD);V9o=r(Xst,"CamembertForSequenceClassification"),Xst.forEach(t),X9o=r(n8e," (CamemBERT model)"),n8e.forEach(t),z9o=i(j),N1=n(j,"LI",{});var s8e=s(N1);afe=n(s8e,"STRONG",{});var zst=s(afe);W9o=r(zst,"canine"),zst.forEach(t),Q9o=r(s8e," \u2014 "),GD=n(s8e,"A",{href:!0});var Wst=s(GD);H9o=r(Wst,"CanineForSequenceClassification"),Wst.forEach(t),U9o=r(s8e," (Canine model)"),s8e.forEach(t),J9o=i(j),j1=n(j,"LI",{});var l8e=s(j1);nfe=n(l8e,"STRONG",{});var Qst=s(nfe);Y9o=r(Qst,"convbert"),Qst.forEach(t),K9o=r(l8e," \u2014 "),OD=n(l8e,"A",{href:!0});var Hst=s(OD);Z9o=r(Hst,"ConvBertForSequenceClassification"),Hst.forEach(t),exo=r(l8e," (ConvBERT model)"),l8e.forEach(t),oxo=i(j),D1=n(j,"LI",{});var i8e=s(D1);sfe=n(i8e,"STRONG",{});var Ust=s(sfe);rxo=r(Ust,"ctrl"),Ust.forEach(t),txo=r(i8e," \u2014 "),VD=n(i8e,"A",{href:!0});var Jst=s(VD);axo=r(Jst,"CTRLForSequenceClassification"),Jst.forEach(t),nxo=r(i8e," (CTRL model)"),i8e.forEach(t),sxo=i(j),G1=n(j,"LI",{});var d8e=s(G1);lfe=n(d8e,"STRONG",{});var Yst=s(lfe);lxo=r(Yst,"data2vec-text"),Yst.forEach(t),ixo=r(d8e," \u2014 "),XD=n(d8e,"A",{href:!0});var Kst=s(XD);dxo=r(Kst,"Data2VecTextForSequenceClassification"),Kst.forEach(t),cxo=r(d8e," (Data2VecText model)"),d8e.forEach(t),fxo=i(j),O1=n(j,"LI",{});var c8e=s(O1);ife=n(c8e,"STRONG",{});var Zst=s(ife);mxo=r(Zst,"deberta"),Zst.forEach(t),gxo=r(c8e," \u2014 "),zD=n(c8e,"A",{href:!0});var elt=s(zD);hxo=r(elt,"DebertaForSequenceClassification"),elt.forEach(t),pxo=r(c8e," (DeBERTa model)"),c8e.forEach(t),_xo=i(j),V1=n(j,"LI",{});var f8e=s(V1);dfe=n(f8e,"STRONG",{});var olt=s(dfe);uxo=r(olt,"deberta-v2"),olt.forEach(t),bxo=r(f8e," \u2014 "),WD=n(f8e,"A",{href:!0});var rlt=s(WD);vxo=r(rlt,"DebertaV2ForSequenceClassification"),rlt.forEach(t),Fxo=r(f8e," (DeBERTa-v2 model)"),f8e.forEach(t),Txo=i(j),X1=n(j,"LI",{});var m8e=s(X1);cfe=n(m8e,"STRONG",{});var tlt=s(cfe);Mxo=r(tlt,"distilbert"),tlt.forEach(t),Exo=r(m8e," \u2014 "),QD=n(m8e,"A",{href:!0});var alt=s(QD);Cxo=r(alt,"DistilBertForSequenceClassification"),alt.forEach(t),wxo=r(m8e," (DistilBERT model)"),m8e.forEach(t),Axo=i(j),z1=n(j,"LI",{});var g8e=s(z1);ffe=n(g8e,"STRONG",{});var nlt=s(ffe);yxo=r(nlt,"electra"),nlt.forEach(t),Lxo=r(g8e," \u2014 "),HD=n(g8e,"A",{href:!0});var slt=s(HD);xxo=r(slt,"ElectraForSequenceClassification"),slt.forEach(t),$xo=r(g8e," (ELECTRA model)"),g8e.forEach(t),kxo=i(j),W1=n(j,"LI",{});var h8e=s(W1);mfe=n(h8e,"STRONG",{});var llt=s(mfe);Sxo=r(llt,"flaubert"),llt.forEach(t),Rxo=r(h8e," \u2014 "),UD=n(h8e,"A",{href:!0});var ilt=s(UD);Bxo=r(ilt,"FlaubertForSequenceClassification"),ilt.forEach(t),Pxo=r(h8e," (FlauBERT model)"),h8e.forEach(t),Ixo=i(j),Q1=n(j,"LI",{});var p8e=s(Q1);gfe=n(p8e,"STRONG",{});var dlt=s(gfe);qxo=r(dlt,"fnet"),dlt.forEach(t),Nxo=r(p8e," \u2014 "),JD=n(p8e,"A",{href:!0});var clt=s(JD);jxo=r(clt,"FNetForSequenceClassification"),clt.forEach(t),Dxo=r(p8e," (FNet model)"),p8e.forEach(t),Gxo=i(j),H1=n(j,"LI",{});var _8e=s(H1);hfe=n(_8e,"STRONG",{});var flt=s(hfe);Oxo=r(flt,"funnel"),flt.forEach(t),Vxo=r(_8e," \u2014 "),YD=n(_8e,"A",{href:!0});var mlt=s(YD);Xxo=r(mlt,"FunnelForSequenceClassification"),mlt.forEach(t),zxo=r(_8e," (Funnel Transformer model)"),_8e.forEach(t),Wxo=i(j),U1=n(j,"LI",{});var u8e=s(U1);pfe=n(u8e,"STRONG",{});var glt=s(pfe);Qxo=r(glt,"gpt2"),glt.forEach(t),Hxo=r(u8e," \u2014 "),KD=n(u8e,"A",{href:!0});var hlt=s(KD);Uxo=r(hlt,"GPT2ForSequenceClassification"),hlt.forEach(t),Jxo=r(u8e," (OpenAI GPT-2 model)"),u8e.forEach(t),Yxo=i(j),J1=n(j,"LI",{});var b8e=s(J1);_fe=n(b8e,"STRONG",{});var plt=s(_fe);Kxo=r(plt,"gpt_neo"),plt.forEach(t),Zxo=r(b8e," \u2014 "),ZD=n(b8e,"A",{href:!0});var _lt=s(ZD);e$o=r(_lt,"GPTNeoForSequenceClassification"),_lt.forEach(t),o$o=r(b8e," (GPT Neo model)"),b8e.forEach(t),r$o=i(j),Y1=n(j,"LI",{});var v8e=s(Y1);ufe=n(v8e,"STRONG",{});var ult=s(ufe);t$o=r(ult,"gptj"),ult.forEach(t),a$o=r(v8e," \u2014 "),eG=n(v8e,"A",{href:!0});var blt=s(eG);n$o=r(blt,"GPTJForSequenceClassification"),blt.forEach(t),s$o=r(v8e," (GPT-J model)"),v8e.forEach(t),l$o=i(j),K1=n(j,"LI",{});var F8e=s(K1);bfe=n(F8e,"STRONG",{});var vlt=s(bfe);i$o=r(vlt,"ibert"),vlt.forEach(t),d$o=r(F8e," \u2014 "),oG=n(F8e,"A",{href:!0});var Flt=s(oG);c$o=r(Flt,"IBertForSequenceClassification"),Flt.forEach(t),f$o=r(F8e," (I-BERT model)"),F8e.forEach(t),m$o=i(j),Z1=n(j,"LI",{});var T8e=s(Z1);vfe=n(T8e,"STRONG",{});var Tlt=s(vfe);g$o=r(Tlt,"layoutlm"),Tlt.forEach(t),h$o=r(T8e," \u2014 "),rG=n(T8e,"A",{href:!0});var Mlt=s(rG);p$o=r(Mlt,"LayoutLMForSequenceClassification"),Mlt.forEach(t),_$o=r(T8e," (LayoutLM model)"),T8e.forEach(t),u$o=i(j),eb=n(j,"LI",{});var M8e=s(eb);Ffe=n(M8e,"STRONG",{});var Elt=s(Ffe);b$o=r(Elt,"layoutlmv2"),Elt.forEach(t),v$o=r(M8e," \u2014 "),tG=n(M8e,"A",{href:!0});var Clt=s(tG);F$o=r(Clt,"LayoutLMv2ForSequenceClassification"),Clt.forEach(t),T$o=r(M8e," (LayoutLMv2 model)"),M8e.forEach(t),M$o=i(j),ob=n(j,"LI",{});var E8e=s(ob);Tfe=n(E8e,"STRONG",{});var wlt=s(Tfe);E$o=r(wlt,"led"),wlt.forEach(t),C$o=r(E8e," \u2014 "),aG=n(E8e,"A",{href:!0});var Alt=s(aG);w$o=r(Alt,"LEDForSequenceClassification"),Alt.forEach(t),A$o=r(E8e," (LED model)"),E8e.forEach(t),y$o=i(j),rb=n(j,"LI",{});var C8e=s(rb);Mfe=n(C8e,"STRONG",{});var ylt=s(Mfe);L$o=r(ylt,"longformer"),ylt.forEach(t),x$o=r(C8e," \u2014 "),nG=n(C8e,"A",{href:!0});var Llt=s(nG);$$o=r(Llt,"LongformerForSequenceClassification"),Llt.forEach(t),k$o=r(C8e," (Longformer model)"),C8e.forEach(t),S$o=i(j),tb=n(j,"LI",{});var w8e=s(tb);Efe=n(w8e,"STRONG",{});var xlt=s(Efe);R$o=r(xlt,"mbart"),xlt.forEach(t),B$o=r(w8e," \u2014 "),sG=n(w8e,"A",{href:!0});var $lt=s(sG);P$o=r($lt,"MBartForSequenceClassification"),$lt.forEach(t),I$o=r(w8e," (mBART model)"),w8e.forEach(t),q$o=i(j),ab=n(j,"LI",{});var A8e=s(ab);Cfe=n(A8e,"STRONG",{});var klt=s(Cfe);N$o=r(klt,"megatron-bert"),klt.forEach(t),j$o=r(A8e," \u2014 "),lG=n(A8e,"A",{href:!0});var Slt=s(lG);D$o=r(Slt,"MegatronBertForSequenceClassification"),Slt.forEach(t),G$o=r(A8e," (MegatronBert model)"),A8e.forEach(t),O$o=i(j),nb=n(j,"LI",{});var y8e=s(nb);wfe=n(y8e,"STRONG",{});var Rlt=s(wfe);V$o=r(Rlt,"mobilebert"),Rlt.forEach(t),X$o=r(y8e," \u2014 "),iG=n(y8e,"A",{href:!0});var Blt=s(iG);z$o=r(Blt,"MobileBertForSequenceClassification"),Blt.forEach(t),W$o=r(y8e," (MobileBERT model)"),y8e.forEach(t),Q$o=i(j),sb=n(j,"LI",{});var L8e=s(sb);Afe=n(L8e,"STRONG",{});var Plt=s(Afe);H$o=r(Plt,"mpnet"),Plt.forEach(t),U$o=r(L8e," \u2014 "),dG=n(L8e,"A",{href:!0});var Ilt=s(dG);J$o=r(Ilt,"MPNetForSequenceClassification"),Ilt.forEach(t),Y$o=r(L8e," (MPNet model)"),L8e.forEach(t),K$o=i(j),lb=n(j,"LI",{});var x8e=s(lb);yfe=n(x8e,"STRONG",{});var qlt=s(yfe);Z$o=r(qlt,"nystromformer"),qlt.forEach(t),eko=r(x8e," \u2014 "),cG=n(x8e,"A",{href:!0});var Nlt=s(cG);oko=r(Nlt,"NystromformerForSequenceClassification"),Nlt.forEach(t),rko=r(x8e," (Nystromformer model)"),x8e.forEach(t),tko=i(j),ib=n(j,"LI",{});var $8e=s(ib);Lfe=n($8e,"STRONG",{});var jlt=s(Lfe);ako=r(jlt,"openai-gpt"),jlt.forEach(t),nko=r($8e," \u2014 "),fG=n($8e,"A",{href:!0});var Dlt=s(fG);sko=r(Dlt,"OpenAIGPTForSequenceClassification"),Dlt.forEach(t),lko=r($8e," (OpenAI GPT model)"),$8e.forEach(t),iko=i(j),db=n(j,"LI",{});var k8e=s(db);xfe=n(k8e,"STRONG",{});var Glt=s(xfe);dko=r(Glt,"perceiver"),Glt.forEach(t),cko=r(k8e," \u2014 "),mG=n(k8e,"A",{href:!0});var Olt=s(mG);fko=r(Olt,"PerceiverForSequenceClassification"),Olt.forEach(t),mko=r(k8e," (Perceiver model)"),k8e.forEach(t),gko=i(j),cb=n(j,"LI",{});var S8e=s(cb);$fe=n(S8e,"STRONG",{});var Vlt=s($fe);hko=r(Vlt,"plbart"),Vlt.forEach(t),pko=r(S8e," \u2014 "),gG=n(S8e,"A",{href:!0});var Xlt=s(gG);_ko=r(Xlt,"PLBartForSequenceClassification"),Xlt.forEach(t),uko=r(S8e," (PLBart model)"),S8e.forEach(t),bko=i(j),fb=n(j,"LI",{});var R8e=s(fb);kfe=n(R8e,"STRONG",{});var zlt=s(kfe);vko=r(zlt,"qdqbert"),zlt.forEach(t),Fko=r(R8e," \u2014 "),hG=n(R8e,"A",{href:!0});var Wlt=s(hG);Tko=r(Wlt,"QDQBertForSequenceClassification"),Wlt.forEach(t),Mko=r(R8e," (QDQBert model)"),R8e.forEach(t),Eko=i(j),mb=n(j,"LI",{});var B8e=s(mb);Sfe=n(B8e,"STRONG",{});var Qlt=s(Sfe);Cko=r(Qlt,"reformer"),Qlt.forEach(t),wko=r(B8e," \u2014 "),pG=n(B8e,"A",{href:!0});var Hlt=s(pG);Ako=r(Hlt,"ReformerForSequenceClassification"),Hlt.forEach(t),yko=r(B8e," (Reformer model)"),B8e.forEach(t),Lko=i(j),gb=n(j,"LI",{});var P8e=s(gb);Rfe=n(P8e,"STRONG",{});var Ult=s(Rfe);xko=r(Ult,"rembert"),Ult.forEach(t),$ko=r(P8e," \u2014 "),_G=n(P8e,"A",{href:!0});var Jlt=s(_G);kko=r(Jlt,"RemBertForSequenceClassification"),Jlt.forEach(t),Sko=r(P8e," (RemBERT model)"),P8e.forEach(t),Rko=i(j),hb=n(j,"LI",{});var I8e=s(hb);Bfe=n(I8e,"STRONG",{});var Ylt=s(Bfe);Bko=r(Ylt,"roberta"),Ylt.forEach(t),Pko=r(I8e," \u2014 "),uG=n(I8e,"A",{href:!0});var Klt=s(uG);Iko=r(Klt,"RobertaForSequenceClassification"),Klt.forEach(t),qko=r(I8e," (RoBERTa model)"),I8e.forEach(t),Nko=i(j),pb=n(j,"LI",{});var q8e=s(pb);Pfe=n(q8e,"STRONG",{});var Zlt=s(Pfe);jko=r(Zlt,"roformer"),Zlt.forEach(t),Dko=r(q8e," \u2014 "),bG=n(q8e,"A",{href:!0});var eit=s(bG);Gko=r(eit,"RoFormerForSequenceClassification"),eit.forEach(t),Oko=r(q8e," (RoFormer model)"),q8e.forEach(t),Vko=i(j),_b=n(j,"LI",{});var N8e=s(_b);Ife=n(N8e,"STRONG",{});var oit=s(Ife);Xko=r(oit,"squeezebert"),oit.forEach(t),zko=r(N8e," \u2014 "),vG=n(N8e,"A",{href:!0});var rit=s(vG);Wko=r(rit,"SqueezeBertForSequenceClassification"),rit.forEach(t),Qko=r(N8e," (SqueezeBERT model)"),N8e.forEach(t),Hko=i(j),ub=n(j,"LI",{});var j8e=s(ub);qfe=n(j8e,"STRONG",{});var tit=s(qfe);Uko=r(tit,"tapas"),tit.forEach(t),Jko=r(j8e," \u2014 "),FG=n(j8e,"A",{href:!0});var ait=s(FG);Yko=r(ait,"TapasForSequenceClassification"),ait.forEach(t),Kko=r(j8e," (TAPAS model)"),j8e.forEach(t),Zko=i(j),bb=n(j,"LI",{});var D8e=s(bb);Nfe=n(D8e,"STRONG",{});var nit=s(Nfe);eSo=r(nit,"transfo-xl"),nit.forEach(t),oSo=r(D8e," \u2014 "),TG=n(D8e,"A",{href:!0});var sit=s(TG);rSo=r(sit,"TransfoXLForSequenceClassification"),sit.forEach(t),tSo=r(D8e," (Transformer-XL model)"),D8e.forEach(t),aSo=i(j),vb=n(j,"LI",{});var G8e=s(vb);jfe=n(G8e,"STRONG",{});var lit=s(jfe);nSo=r(lit,"xlm"),lit.forEach(t),sSo=r(G8e," \u2014 "),MG=n(G8e,"A",{href:!0});var iit=s(MG);lSo=r(iit,"XLMForSequenceClassification"),iit.forEach(t),iSo=r(G8e," (XLM model)"),G8e.forEach(t),dSo=i(j),Fb=n(j,"LI",{});var O8e=s(Fb);Dfe=n(O8e,"STRONG",{});var dit=s(Dfe);cSo=r(dit,"xlm-roberta"),dit.forEach(t),fSo=r(O8e," \u2014 "),EG=n(O8e,"A",{href:!0});var cit=s(EG);mSo=r(cit,"XLMRobertaForSequenceClassification"),cit.forEach(t),gSo=r(O8e," (XLM-RoBERTa model)"),O8e.forEach(t),hSo=i(j),Tb=n(j,"LI",{});var V8e=s(Tb);Gfe=n(V8e,"STRONG",{});var fit=s(Gfe);pSo=r(fit,"xlm-roberta-xl"),fit.forEach(t),_So=r(V8e," \u2014 "),CG=n(V8e,"A",{href:!0});var mit=s(CG);uSo=r(mit,"XLMRobertaXLForSequenceClassification"),mit.forEach(t),bSo=r(V8e," (XLM-RoBERTa-XL model)"),V8e.forEach(t),vSo=i(j),Mb=n(j,"LI",{});var X8e=s(Mb);Ofe=n(X8e,"STRONG",{});var git=s(Ofe);FSo=r(git,"xlnet"),git.forEach(t),TSo=r(X8e," \u2014 "),wG=n(X8e,"A",{href:!0});var hit=s(wG);MSo=r(hit,"XLNetForSequenceClassification"),hit.forEach(t),ESo=r(X8e," (XLNet model)"),X8e.forEach(t),CSo=i(j),Eb=n(j,"LI",{});var z8e=s(Eb);Vfe=n(z8e,"STRONG",{});var pit=s(Vfe);wSo=r(pit,"yoso"),pit.forEach(t),ASo=r(z8e," \u2014 "),AG=n(z8e,"A",{href:!0});var _it=s(AG);ySo=r(_it,"YosoForSequenceClassification"),_it.forEach(t),LSo=r(z8e," (YOSO model)"),z8e.forEach(t),j.forEach(t),xSo=i(sa),Cb=n(sa,"P",{});var W8e=s(Cb);$So=r(W8e,"The model is set in evaluation mode by default using "),Xfe=n(W8e,"CODE",{});var uit=s(Xfe);kSo=r(uit,"model.eval()"),uit.forEach(t),SSo=r(W8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zfe=n(W8e,"CODE",{});var bit=s(zfe);RSo=r(bit,"model.train()"),bit.forEach(t),W8e.forEach(t),BSo=i(sa),T(wb.$$.fragment,sa),sa.forEach(t),zs.forEach(t),_qe=i(f),Oi=n(f,"H2",{class:!0});var Fje=s(Oi);Ab=n(Fje,"A",{id:!0,class:!0,href:!0});var vit=s(Ab);Wfe=n(vit,"SPAN",{});var Fit=s(Wfe);T(hy.$$.fragment,Fit),Fit.forEach(t),vit.forEach(t),PSo=i(Fje),Qfe=n(Fje,"SPAN",{});var Tit=s(Qfe);ISo=r(Tit,"AutoModelForMultipleChoice"),Tit.forEach(t),Fje.forEach(t),uqe=i(f),Bo=n(f,"DIV",{class:!0});var Ws=s(Bo);T(py.$$.fragment,Ws),qSo=i(Ws),Vi=n(Ws,"P",{});var UK=s(Vi);NSo=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yG=n(UK,"A",{href:!0});var Mit=s(yG);jSo=r(Mit,"from_pretrained()"),Mit.forEach(t),DSo=r(UK," class method or the "),LG=n(UK,"A",{href:!0});var Eit=s(LG);GSo=r(Eit,"from_config()"),Eit.forEach(t),OSo=r(UK,` class
method.`),UK.forEach(t),VSo=i(Ws),_y=n(Ws,"P",{});var Tje=s(_y);XSo=r(Tje,"This class cannot be instantiated directly using "),Hfe=n(Tje,"CODE",{});var Cit=s(Hfe);zSo=r(Cit,"__init__()"),Cit.forEach(t),WSo=r(Tje," (throws an error)."),Tje.forEach(t),QSo=i(Ws),dt=n(Ws,"DIV",{class:!0});var Lw=s(dt);T(uy.$$.fragment,Lw),HSo=i(Lw),Ufe=n(Lw,"P",{});var wit=s(Ufe);USo=r(wit,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),wit.forEach(t),JSo=i(Lw),Xi=n(Lw,"P",{});var JK=s(Xi);YSo=r(JK,`Note:
Loading a model from its configuration file does `),Jfe=n(JK,"STRONG",{});var Ait=s(Jfe);KSo=r(Ait,"not"),Ait.forEach(t),ZSo=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=n(JK,"A",{href:!0});var yit=s(xG);eRo=r(yit,"from_pretrained()"),yit.forEach(t),oRo=r(JK," to load the model weights."),JK.forEach(t),rRo=i(Lw),T(yb.$$.fragment,Lw),Lw.forEach(t),tRo=i(Ws),ro=n(Ws,"DIV",{class:!0});var la=s(ro);T(by.$$.fragment,la),aRo=i(la),Yfe=n(la,"P",{});var Lit=s(Yfe);nRo=r(Lit,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Lit.forEach(t),sRo=i(la),Ba=n(la,"P",{});var xw=s(Ba);lRo=r(xw,"The model class to instantiate is selected based on the "),Kfe=n(xw,"CODE",{});var xit=s(Kfe);iRo=r(xit,"model_type"),xit.forEach(t),dRo=r(xw,` property of the config object (either
passed as an argument or loaded from `),Zfe=n(xw,"CODE",{});var $it=s(Zfe);cRo=r($it,"pretrained_model_name_or_path"),$it.forEach(t),fRo=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eme=n(xw,"CODE",{});var kit=s(eme);mRo=r(kit,"pretrained_model_name_or_path"),kit.forEach(t),gRo=r(xw,":"),xw.forEach(t),hRo=i(la),Y=n(la,"UL",{});var K=s(Y);Lb=n(K,"LI",{});var Q8e=s(Lb);ome=n(Q8e,"STRONG",{});var Sit=s(ome);pRo=r(Sit,"albert"),Sit.forEach(t),_Ro=r(Q8e," \u2014 "),$G=n(Q8e,"A",{href:!0});var Rit=s($G);uRo=r(Rit,"AlbertForMultipleChoice"),Rit.forEach(t),bRo=r(Q8e," (ALBERT model)"),Q8e.forEach(t),vRo=i(K),xb=n(K,"LI",{});var H8e=s(xb);rme=n(H8e,"STRONG",{});var Bit=s(rme);FRo=r(Bit,"bert"),Bit.forEach(t),TRo=r(H8e," \u2014 "),kG=n(H8e,"A",{href:!0});var Pit=s(kG);MRo=r(Pit,"BertForMultipleChoice"),Pit.forEach(t),ERo=r(H8e," (BERT model)"),H8e.forEach(t),CRo=i(K),$b=n(K,"LI",{});var U8e=s($b);tme=n(U8e,"STRONG",{});var Iit=s(tme);wRo=r(Iit,"big_bird"),Iit.forEach(t),ARo=r(U8e," \u2014 "),SG=n(U8e,"A",{href:!0});var qit=s(SG);yRo=r(qit,"BigBirdForMultipleChoice"),qit.forEach(t),LRo=r(U8e," (BigBird model)"),U8e.forEach(t),xRo=i(K),kb=n(K,"LI",{});var J8e=s(kb);ame=n(J8e,"STRONG",{});var Nit=s(ame);$Ro=r(Nit,"camembert"),Nit.forEach(t),kRo=r(J8e," \u2014 "),RG=n(J8e,"A",{href:!0});var jit=s(RG);SRo=r(jit,"CamembertForMultipleChoice"),jit.forEach(t),RRo=r(J8e," (CamemBERT model)"),J8e.forEach(t),BRo=i(K),Sb=n(K,"LI",{});var Y8e=s(Sb);nme=n(Y8e,"STRONG",{});var Dit=s(nme);PRo=r(Dit,"canine"),Dit.forEach(t),IRo=r(Y8e," \u2014 "),BG=n(Y8e,"A",{href:!0});var Git=s(BG);qRo=r(Git,"CanineForMultipleChoice"),Git.forEach(t),NRo=r(Y8e," (Canine model)"),Y8e.forEach(t),jRo=i(K),Rb=n(K,"LI",{});var K8e=s(Rb);sme=n(K8e,"STRONG",{});var Oit=s(sme);DRo=r(Oit,"convbert"),Oit.forEach(t),GRo=r(K8e," \u2014 "),PG=n(K8e,"A",{href:!0});var Vit=s(PG);ORo=r(Vit,"ConvBertForMultipleChoice"),Vit.forEach(t),VRo=r(K8e," (ConvBERT model)"),K8e.forEach(t),XRo=i(K),Bb=n(K,"LI",{});var Z8e=s(Bb);lme=n(Z8e,"STRONG",{});var Xit=s(lme);zRo=r(Xit,"data2vec-text"),Xit.forEach(t),WRo=r(Z8e," \u2014 "),IG=n(Z8e,"A",{href:!0});var zit=s(IG);QRo=r(zit,"Data2VecTextForMultipleChoice"),zit.forEach(t),HRo=r(Z8e," (Data2VecText model)"),Z8e.forEach(t),URo=i(K),Pb=n(K,"LI",{});var e9e=s(Pb);ime=n(e9e,"STRONG",{});var Wit=s(ime);JRo=r(Wit,"deberta-v2"),Wit.forEach(t),YRo=r(e9e," \u2014 "),qG=n(e9e,"A",{href:!0});var Qit=s(qG);KRo=r(Qit,"DebertaV2ForMultipleChoice"),Qit.forEach(t),ZRo=r(e9e," (DeBERTa-v2 model)"),e9e.forEach(t),eBo=i(K),Ib=n(K,"LI",{});var o9e=s(Ib);dme=n(o9e,"STRONG",{});var Hit=s(dme);oBo=r(Hit,"distilbert"),Hit.forEach(t),rBo=r(o9e," \u2014 "),NG=n(o9e,"A",{href:!0});var Uit=s(NG);tBo=r(Uit,"DistilBertForMultipleChoice"),Uit.forEach(t),aBo=r(o9e," (DistilBERT model)"),o9e.forEach(t),nBo=i(K),qb=n(K,"LI",{});var r9e=s(qb);cme=n(r9e,"STRONG",{});var Jit=s(cme);sBo=r(Jit,"electra"),Jit.forEach(t),lBo=r(r9e," \u2014 "),jG=n(r9e,"A",{href:!0});var Yit=s(jG);iBo=r(Yit,"ElectraForMultipleChoice"),Yit.forEach(t),dBo=r(r9e," (ELECTRA model)"),r9e.forEach(t),cBo=i(K),Nb=n(K,"LI",{});var t9e=s(Nb);fme=n(t9e,"STRONG",{});var Kit=s(fme);fBo=r(Kit,"flaubert"),Kit.forEach(t),mBo=r(t9e," \u2014 "),DG=n(t9e,"A",{href:!0});var Zit=s(DG);gBo=r(Zit,"FlaubertForMultipleChoice"),Zit.forEach(t),hBo=r(t9e," (FlauBERT model)"),t9e.forEach(t),pBo=i(K),jb=n(K,"LI",{});var a9e=s(jb);mme=n(a9e,"STRONG",{});var edt=s(mme);_Bo=r(edt,"fnet"),edt.forEach(t),uBo=r(a9e," \u2014 "),GG=n(a9e,"A",{href:!0});var odt=s(GG);bBo=r(odt,"FNetForMultipleChoice"),odt.forEach(t),vBo=r(a9e," (FNet model)"),a9e.forEach(t),FBo=i(K),Db=n(K,"LI",{});var n9e=s(Db);gme=n(n9e,"STRONG",{});var rdt=s(gme);TBo=r(rdt,"funnel"),rdt.forEach(t),MBo=r(n9e," \u2014 "),OG=n(n9e,"A",{href:!0});var tdt=s(OG);EBo=r(tdt,"FunnelForMultipleChoice"),tdt.forEach(t),CBo=r(n9e," (Funnel Transformer model)"),n9e.forEach(t),wBo=i(K),Gb=n(K,"LI",{});var s9e=s(Gb);hme=n(s9e,"STRONG",{});var adt=s(hme);ABo=r(adt,"ibert"),adt.forEach(t),yBo=r(s9e," \u2014 "),VG=n(s9e,"A",{href:!0});var ndt=s(VG);LBo=r(ndt,"IBertForMultipleChoice"),ndt.forEach(t),xBo=r(s9e," (I-BERT model)"),s9e.forEach(t),$Bo=i(K),Ob=n(K,"LI",{});var l9e=s(Ob);pme=n(l9e,"STRONG",{});var sdt=s(pme);kBo=r(sdt,"longformer"),sdt.forEach(t),SBo=r(l9e," \u2014 "),XG=n(l9e,"A",{href:!0});var ldt=s(XG);RBo=r(ldt,"LongformerForMultipleChoice"),ldt.forEach(t),BBo=r(l9e," (Longformer model)"),l9e.forEach(t),PBo=i(K),Vb=n(K,"LI",{});var i9e=s(Vb);_me=n(i9e,"STRONG",{});var idt=s(_me);IBo=r(idt,"megatron-bert"),idt.forEach(t),qBo=r(i9e," \u2014 "),zG=n(i9e,"A",{href:!0});var ddt=s(zG);NBo=r(ddt,"MegatronBertForMultipleChoice"),ddt.forEach(t),jBo=r(i9e," (MegatronBert model)"),i9e.forEach(t),DBo=i(K),Xb=n(K,"LI",{});var d9e=s(Xb);ume=n(d9e,"STRONG",{});var cdt=s(ume);GBo=r(cdt,"mobilebert"),cdt.forEach(t),OBo=r(d9e," \u2014 "),WG=n(d9e,"A",{href:!0});var fdt=s(WG);VBo=r(fdt,"MobileBertForMultipleChoice"),fdt.forEach(t),XBo=r(d9e," (MobileBERT model)"),d9e.forEach(t),zBo=i(K),zb=n(K,"LI",{});var c9e=s(zb);bme=n(c9e,"STRONG",{});var mdt=s(bme);WBo=r(mdt,"mpnet"),mdt.forEach(t),QBo=r(c9e," \u2014 "),QG=n(c9e,"A",{href:!0});var gdt=s(QG);HBo=r(gdt,"MPNetForMultipleChoice"),gdt.forEach(t),UBo=r(c9e," (MPNet model)"),c9e.forEach(t),JBo=i(K),Wb=n(K,"LI",{});var f9e=s(Wb);vme=n(f9e,"STRONG",{});var hdt=s(vme);YBo=r(hdt,"nystromformer"),hdt.forEach(t),KBo=r(f9e," \u2014 "),HG=n(f9e,"A",{href:!0});var pdt=s(HG);ZBo=r(pdt,"NystromformerForMultipleChoice"),pdt.forEach(t),ePo=r(f9e," (Nystromformer model)"),f9e.forEach(t),oPo=i(K),Qb=n(K,"LI",{});var m9e=s(Qb);Fme=n(m9e,"STRONG",{});var _dt=s(Fme);rPo=r(_dt,"qdqbert"),_dt.forEach(t),tPo=r(m9e," \u2014 "),UG=n(m9e,"A",{href:!0});var udt=s(UG);aPo=r(udt,"QDQBertForMultipleChoice"),udt.forEach(t),nPo=r(m9e," (QDQBert model)"),m9e.forEach(t),sPo=i(K),Hb=n(K,"LI",{});var g9e=s(Hb);Tme=n(g9e,"STRONG",{});var bdt=s(Tme);lPo=r(bdt,"rembert"),bdt.forEach(t),iPo=r(g9e," \u2014 "),JG=n(g9e,"A",{href:!0});var vdt=s(JG);dPo=r(vdt,"RemBertForMultipleChoice"),vdt.forEach(t),cPo=r(g9e," (RemBERT model)"),g9e.forEach(t),fPo=i(K),Ub=n(K,"LI",{});var h9e=s(Ub);Mme=n(h9e,"STRONG",{});var Fdt=s(Mme);mPo=r(Fdt,"roberta"),Fdt.forEach(t),gPo=r(h9e," \u2014 "),YG=n(h9e,"A",{href:!0});var Tdt=s(YG);hPo=r(Tdt,"RobertaForMultipleChoice"),Tdt.forEach(t),pPo=r(h9e," (RoBERTa model)"),h9e.forEach(t),_Po=i(K),Jb=n(K,"LI",{});var p9e=s(Jb);Eme=n(p9e,"STRONG",{});var Mdt=s(Eme);uPo=r(Mdt,"roformer"),Mdt.forEach(t),bPo=r(p9e," \u2014 "),KG=n(p9e,"A",{href:!0});var Edt=s(KG);vPo=r(Edt,"RoFormerForMultipleChoice"),Edt.forEach(t),FPo=r(p9e," (RoFormer model)"),p9e.forEach(t),TPo=i(K),Yb=n(K,"LI",{});var _9e=s(Yb);Cme=n(_9e,"STRONG",{});var Cdt=s(Cme);MPo=r(Cdt,"squeezebert"),Cdt.forEach(t),EPo=r(_9e," \u2014 "),ZG=n(_9e,"A",{href:!0});var wdt=s(ZG);CPo=r(wdt,"SqueezeBertForMultipleChoice"),wdt.forEach(t),wPo=r(_9e," (SqueezeBERT model)"),_9e.forEach(t),APo=i(K),Kb=n(K,"LI",{});var u9e=s(Kb);wme=n(u9e,"STRONG",{});var Adt=s(wme);yPo=r(Adt,"xlm"),Adt.forEach(t),LPo=r(u9e," \u2014 "),eO=n(u9e,"A",{href:!0});var ydt=s(eO);xPo=r(ydt,"XLMForMultipleChoice"),ydt.forEach(t),$Po=r(u9e," (XLM model)"),u9e.forEach(t),kPo=i(K),Zb=n(K,"LI",{});var b9e=s(Zb);Ame=n(b9e,"STRONG",{});var Ldt=s(Ame);SPo=r(Ldt,"xlm-roberta"),Ldt.forEach(t),RPo=r(b9e," \u2014 "),oO=n(b9e,"A",{href:!0});var xdt=s(oO);BPo=r(xdt,"XLMRobertaForMultipleChoice"),xdt.forEach(t),PPo=r(b9e," (XLM-RoBERTa model)"),b9e.forEach(t),IPo=i(K),ev=n(K,"LI",{});var v9e=s(ev);yme=n(v9e,"STRONG",{});var $dt=s(yme);qPo=r($dt,"xlm-roberta-xl"),$dt.forEach(t),NPo=r(v9e," \u2014 "),rO=n(v9e,"A",{href:!0});var kdt=s(rO);jPo=r(kdt,"XLMRobertaXLForMultipleChoice"),kdt.forEach(t),DPo=r(v9e," (XLM-RoBERTa-XL model)"),v9e.forEach(t),GPo=i(K),ov=n(K,"LI",{});var F9e=s(ov);Lme=n(F9e,"STRONG",{});var Sdt=s(Lme);OPo=r(Sdt,"xlnet"),Sdt.forEach(t),VPo=r(F9e," \u2014 "),tO=n(F9e,"A",{href:!0});var Rdt=s(tO);XPo=r(Rdt,"XLNetForMultipleChoice"),Rdt.forEach(t),zPo=r(F9e," (XLNet model)"),F9e.forEach(t),WPo=i(K),rv=n(K,"LI",{});var T9e=s(rv);xme=n(T9e,"STRONG",{});var Bdt=s(xme);QPo=r(Bdt,"yoso"),Bdt.forEach(t),HPo=r(T9e," \u2014 "),aO=n(T9e,"A",{href:!0});var Pdt=s(aO);UPo=r(Pdt,"YosoForMultipleChoice"),Pdt.forEach(t),JPo=r(T9e," (YOSO model)"),T9e.forEach(t),K.forEach(t),YPo=i(la),tv=n(la,"P",{});var M9e=s(tv);KPo=r(M9e,"The model is set in evaluation mode by default using "),$me=n(M9e,"CODE",{});var Idt=s($me);ZPo=r(Idt,"model.eval()"),Idt.forEach(t),eIo=r(M9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=n(M9e,"CODE",{});var qdt=s(kme);oIo=r(qdt,"model.train()"),qdt.forEach(t),M9e.forEach(t),rIo=i(la),T(av.$$.fragment,la),la.forEach(t),Ws.forEach(t),bqe=i(f),zi=n(f,"H2",{class:!0});var Mje=s(zi);nv=n(Mje,"A",{id:!0,class:!0,href:!0});var Ndt=s(nv);Sme=n(Ndt,"SPAN",{});var jdt=s(Sme);T(vy.$$.fragment,jdt),jdt.forEach(t),Ndt.forEach(t),tIo=i(Mje),Rme=n(Mje,"SPAN",{});var Ddt=s(Rme);aIo=r(Ddt,"AutoModelForNextSentencePrediction"),Ddt.forEach(t),Mje.forEach(t),vqe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(Fy.$$.fragment,Qs),nIo=i(Qs),Wi=n(Qs,"P",{});var YK=s(Wi);sIo=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),nO=n(YK,"A",{href:!0});var Gdt=s(nO);lIo=r(Gdt,"from_pretrained()"),Gdt.forEach(t),iIo=r(YK," class method or the "),sO=n(YK,"A",{href:!0});var Odt=s(sO);dIo=r(Odt,"from_config()"),Odt.forEach(t),cIo=r(YK,` class
method.`),YK.forEach(t),fIo=i(Qs),Ty=n(Qs,"P",{});var Eje=s(Ty);mIo=r(Eje,"This class cannot be instantiated directly using "),Bme=n(Eje,"CODE",{});var Vdt=s(Bme);gIo=r(Vdt,"__init__()"),Vdt.forEach(t),hIo=r(Eje," (throws an error)."),Eje.forEach(t),pIo=i(Qs),ct=n(Qs,"DIV",{class:!0});var $w=s(ct);T(My.$$.fragment,$w),_Io=i($w),Pme=n($w,"P",{});var Xdt=s(Pme);uIo=r(Xdt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Xdt.forEach(t),bIo=i($w),Qi=n($w,"P",{});var KK=s(Qi);vIo=r(KK,`Note:
Loading a model from its configuration file does `),Ime=n(KK,"STRONG",{});var zdt=s(Ime);FIo=r(zdt,"not"),zdt.forEach(t),TIo=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=n(KK,"A",{href:!0});var Wdt=s(lO);MIo=r(Wdt,"from_pretrained()"),Wdt.forEach(t),EIo=r(KK," to load the model weights."),KK.forEach(t),CIo=i($w),T(sv.$$.fragment,$w),$w.forEach(t),wIo=i(Qs),to=n(Qs,"DIV",{class:!0});var ia=s(to);T(Ey.$$.fragment,ia),AIo=i(ia),qme=n(ia,"P",{});var Qdt=s(qme);yIo=r(Qdt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Qdt.forEach(t),LIo=i(ia),Pa=n(ia,"P",{});var kw=s(Pa);xIo=r(kw,"The model class to instantiate is selected based on the "),Nme=n(kw,"CODE",{});var Hdt=s(Nme);$Io=r(Hdt,"model_type"),Hdt.forEach(t),kIo=r(kw,` property of the config object (either
passed as an argument or loaded from `),jme=n(kw,"CODE",{});var Udt=s(jme);SIo=r(Udt,"pretrained_model_name_or_path"),Udt.forEach(t),RIo=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dme=n(kw,"CODE",{});var Jdt=s(Dme);BIo=r(Jdt,"pretrained_model_name_or_path"),Jdt.forEach(t),PIo=r(kw,":"),kw.forEach(t),IIo=i(ia),Yr=n(ia,"UL",{});var Hs=s(Yr);lv=n(Hs,"LI",{});var E9e=s(lv);Gme=n(E9e,"STRONG",{});var Ydt=s(Gme);qIo=r(Ydt,"bert"),Ydt.forEach(t),NIo=r(E9e," \u2014 "),iO=n(E9e,"A",{href:!0});var Kdt=s(iO);jIo=r(Kdt,"BertForNextSentencePrediction"),Kdt.forEach(t),DIo=r(E9e," (BERT model)"),E9e.forEach(t),GIo=i(Hs),iv=n(Hs,"LI",{});var C9e=s(iv);Ome=n(C9e,"STRONG",{});var Zdt=s(Ome);OIo=r(Zdt,"fnet"),Zdt.forEach(t),VIo=r(C9e," \u2014 "),dO=n(C9e,"A",{href:!0});var ect=s(dO);XIo=r(ect,"FNetForNextSentencePrediction"),ect.forEach(t),zIo=r(C9e," (FNet model)"),C9e.forEach(t),WIo=i(Hs),dv=n(Hs,"LI",{});var w9e=s(dv);Vme=n(w9e,"STRONG",{});var oct=s(Vme);QIo=r(oct,"megatron-bert"),oct.forEach(t),HIo=r(w9e," \u2014 "),cO=n(w9e,"A",{href:!0});var rct=s(cO);UIo=r(rct,"MegatronBertForNextSentencePrediction"),rct.forEach(t),JIo=r(w9e," (MegatronBert model)"),w9e.forEach(t),YIo=i(Hs),cv=n(Hs,"LI",{});var A9e=s(cv);Xme=n(A9e,"STRONG",{});var tct=s(Xme);KIo=r(tct,"mobilebert"),tct.forEach(t),ZIo=r(A9e," \u2014 "),fO=n(A9e,"A",{href:!0});var act=s(fO);eqo=r(act,"MobileBertForNextSentencePrediction"),act.forEach(t),oqo=r(A9e," (MobileBERT model)"),A9e.forEach(t),rqo=i(Hs),fv=n(Hs,"LI",{});var y9e=s(fv);zme=n(y9e,"STRONG",{});var nct=s(zme);tqo=r(nct,"qdqbert"),nct.forEach(t),aqo=r(y9e," \u2014 "),mO=n(y9e,"A",{href:!0});var sct=s(mO);nqo=r(sct,"QDQBertForNextSentencePrediction"),sct.forEach(t),sqo=r(y9e," (QDQBert model)"),y9e.forEach(t),Hs.forEach(t),lqo=i(ia),mv=n(ia,"P",{});var L9e=s(mv);iqo=r(L9e,"The model is set in evaluation mode by default using "),Wme=n(L9e,"CODE",{});var lct=s(Wme);dqo=r(lct,"model.eval()"),lct.forEach(t),cqo=r(L9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qme=n(L9e,"CODE",{});var ict=s(Qme);fqo=r(ict,"model.train()"),ict.forEach(t),L9e.forEach(t),mqo=i(ia),T(gv.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),Fqe=i(f),Hi=n(f,"H2",{class:!0});var Cje=s(Hi);hv=n(Cje,"A",{id:!0,class:!0,href:!0});var dct=s(hv);Hme=n(dct,"SPAN",{});var cct=s(Hme);T(Cy.$$.fragment,cct),cct.forEach(t),dct.forEach(t),gqo=i(Cje),Ume=n(Cje,"SPAN",{});var fct=s(Ume);hqo=r(fct,"AutoModelForTokenClassification"),fct.forEach(t),Cje.forEach(t),Tqe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(wy.$$.fragment,Us),pqo=i(Us),Ui=n(Us,"P",{});var ZK=s(Ui);_qo=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gO=n(ZK,"A",{href:!0});var mct=s(gO);uqo=r(mct,"from_pretrained()"),mct.forEach(t),bqo=r(ZK," class method or the "),hO=n(ZK,"A",{href:!0});var gct=s(hO);vqo=r(gct,"from_config()"),gct.forEach(t),Fqo=r(ZK,` class
method.`),ZK.forEach(t),Tqo=i(Us),Ay=n(Us,"P",{});var wje=s(Ay);Mqo=r(wje,"This class cannot be instantiated directly using "),Jme=n(wje,"CODE",{});var hct=s(Jme);Eqo=r(hct,"__init__()"),hct.forEach(t),Cqo=r(wje," (throws an error)."),wje.forEach(t),wqo=i(Us),ft=n(Us,"DIV",{class:!0});var Sw=s(ft);T(yy.$$.fragment,Sw),Aqo=i(Sw),Yme=n(Sw,"P",{});var pct=s(Yme);yqo=r(pct,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pct.forEach(t),Lqo=i(Sw),Ji=n(Sw,"P",{});var eZ=s(Ji);xqo=r(eZ,`Note:
Loading a model from its configuration file does `),Kme=n(eZ,"STRONG",{});var _ct=s(Kme);$qo=r(_ct,"not"),_ct.forEach(t),kqo=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pO=n(eZ,"A",{href:!0});var uct=s(pO);Sqo=r(uct,"from_pretrained()"),uct.forEach(t),Rqo=r(eZ," to load the model weights."),eZ.forEach(t),Bqo=i(Sw),T(pv.$$.fragment,Sw),Sw.forEach(t),Pqo=i(Us),ao=n(Us,"DIV",{class:!0});var da=s(ao);T(Ly.$$.fragment,da),Iqo=i(da),Zme=n(da,"P",{});var bct=s(Zme);qqo=r(bct,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bct.forEach(t),Nqo=i(da),Ia=n(da,"P",{});var Rw=s(Ia);jqo=r(Rw,"The model class to instantiate is selected based on the "),ege=n(Rw,"CODE",{});var vct=s(ege);Dqo=r(vct,"model_type"),vct.forEach(t),Gqo=r(Rw,` property of the config object (either
passed as an argument or loaded from `),oge=n(Rw,"CODE",{});var Fct=s(oge);Oqo=r(Fct,"pretrained_model_name_or_path"),Fct.forEach(t),Vqo=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rge=n(Rw,"CODE",{});var Tct=s(rge);Xqo=r(Tct,"pretrained_model_name_or_path"),Tct.forEach(t),zqo=r(Rw,":"),Rw.forEach(t),Wqo=i(da),U=n(da,"UL",{});var J=s(U);_v=n(J,"LI",{});var x9e=s(_v);tge=n(x9e,"STRONG",{});var Mct=s(tge);Qqo=r(Mct,"albert"),Mct.forEach(t),Hqo=r(x9e," \u2014 "),_O=n(x9e,"A",{href:!0});var Ect=s(_O);Uqo=r(Ect,"AlbertForTokenClassification"),Ect.forEach(t),Jqo=r(x9e," (ALBERT model)"),x9e.forEach(t),Yqo=i(J),uv=n(J,"LI",{});var $9e=s(uv);age=n($9e,"STRONG",{});var Cct=s(age);Kqo=r(Cct,"bert"),Cct.forEach(t),Zqo=r($9e," \u2014 "),uO=n($9e,"A",{href:!0});var wct=s(uO);eNo=r(wct,"BertForTokenClassification"),wct.forEach(t),oNo=r($9e," (BERT model)"),$9e.forEach(t),rNo=i(J),bv=n(J,"LI",{});var k9e=s(bv);nge=n(k9e,"STRONG",{});var Act=s(nge);tNo=r(Act,"big_bird"),Act.forEach(t),aNo=r(k9e," \u2014 "),bO=n(k9e,"A",{href:!0});var yct=s(bO);nNo=r(yct,"BigBirdForTokenClassification"),yct.forEach(t),sNo=r(k9e," (BigBird model)"),k9e.forEach(t),lNo=i(J),vv=n(J,"LI",{});var S9e=s(vv);sge=n(S9e,"STRONG",{});var Lct=s(sge);iNo=r(Lct,"camembert"),Lct.forEach(t),dNo=r(S9e," \u2014 "),vO=n(S9e,"A",{href:!0});var xct=s(vO);cNo=r(xct,"CamembertForTokenClassification"),xct.forEach(t),fNo=r(S9e," (CamemBERT model)"),S9e.forEach(t),mNo=i(J),Fv=n(J,"LI",{});var R9e=s(Fv);lge=n(R9e,"STRONG",{});var $ct=s(lge);gNo=r($ct,"canine"),$ct.forEach(t),hNo=r(R9e," \u2014 "),FO=n(R9e,"A",{href:!0});var kct=s(FO);pNo=r(kct,"CanineForTokenClassification"),kct.forEach(t),_No=r(R9e," (Canine model)"),R9e.forEach(t),uNo=i(J),Tv=n(J,"LI",{});var B9e=s(Tv);ige=n(B9e,"STRONG",{});var Sct=s(ige);bNo=r(Sct,"convbert"),Sct.forEach(t),vNo=r(B9e," \u2014 "),TO=n(B9e,"A",{href:!0});var Rct=s(TO);FNo=r(Rct,"ConvBertForTokenClassification"),Rct.forEach(t),TNo=r(B9e," (ConvBERT model)"),B9e.forEach(t),MNo=i(J),Mv=n(J,"LI",{});var P9e=s(Mv);dge=n(P9e,"STRONG",{});var Bct=s(dge);ENo=r(Bct,"data2vec-text"),Bct.forEach(t),CNo=r(P9e," \u2014 "),MO=n(P9e,"A",{href:!0});var Pct=s(MO);wNo=r(Pct,"Data2VecTextForTokenClassification"),Pct.forEach(t),ANo=r(P9e," (Data2VecText model)"),P9e.forEach(t),yNo=i(J),Ev=n(J,"LI",{});var I9e=s(Ev);cge=n(I9e,"STRONG",{});var Ict=s(cge);LNo=r(Ict,"deberta"),Ict.forEach(t),xNo=r(I9e," \u2014 "),EO=n(I9e,"A",{href:!0});var qct=s(EO);$No=r(qct,"DebertaForTokenClassification"),qct.forEach(t),kNo=r(I9e," (DeBERTa model)"),I9e.forEach(t),SNo=i(J),Cv=n(J,"LI",{});var q9e=s(Cv);fge=n(q9e,"STRONG",{});var Nct=s(fge);RNo=r(Nct,"deberta-v2"),Nct.forEach(t),BNo=r(q9e," \u2014 "),CO=n(q9e,"A",{href:!0});var jct=s(CO);PNo=r(jct,"DebertaV2ForTokenClassification"),jct.forEach(t),INo=r(q9e," (DeBERTa-v2 model)"),q9e.forEach(t),qNo=i(J),wv=n(J,"LI",{});var N9e=s(wv);mge=n(N9e,"STRONG",{});var Dct=s(mge);NNo=r(Dct,"distilbert"),Dct.forEach(t),jNo=r(N9e," \u2014 "),wO=n(N9e,"A",{href:!0});var Gct=s(wO);DNo=r(Gct,"DistilBertForTokenClassification"),Gct.forEach(t),GNo=r(N9e," (DistilBERT model)"),N9e.forEach(t),ONo=i(J),Av=n(J,"LI",{});var j9e=s(Av);gge=n(j9e,"STRONG",{});var Oct=s(gge);VNo=r(Oct,"electra"),Oct.forEach(t),XNo=r(j9e," \u2014 "),AO=n(j9e,"A",{href:!0});var Vct=s(AO);zNo=r(Vct,"ElectraForTokenClassification"),Vct.forEach(t),WNo=r(j9e," (ELECTRA model)"),j9e.forEach(t),QNo=i(J),yv=n(J,"LI",{});var D9e=s(yv);hge=n(D9e,"STRONG",{});var Xct=s(hge);HNo=r(Xct,"flaubert"),Xct.forEach(t),UNo=r(D9e," \u2014 "),yO=n(D9e,"A",{href:!0});var zct=s(yO);JNo=r(zct,"FlaubertForTokenClassification"),zct.forEach(t),YNo=r(D9e," (FlauBERT model)"),D9e.forEach(t),KNo=i(J),Lv=n(J,"LI",{});var G9e=s(Lv);pge=n(G9e,"STRONG",{});var Wct=s(pge);ZNo=r(Wct,"fnet"),Wct.forEach(t),ejo=r(G9e," \u2014 "),LO=n(G9e,"A",{href:!0});var Qct=s(LO);ojo=r(Qct,"FNetForTokenClassification"),Qct.forEach(t),rjo=r(G9e," (FNet model)"),G9e.forEach(t),tjo=i(J),xv=n(J,"LI",{});var O9e=s(xv);_ge=n(O9e,"STRONG",{});var Hct=s(_ge);ajo=r(Hct,"funnel"),Hct.forEach(t),njo=r(O9e," \u2014 "),xO=n(O9e,"A",{href:!0});var Uct=s(xO);sjo=r(Uct,"FunnelForTokenClassification"),Uct.forEach(t),ljo=r(O9e," (Funnel Transformer model)"),O9e.forEach(t),ijo=i(J),$v=n(J,"LI",{});var V9e=s($v);uge=n(V9e,"STRONG",{});var Jct=s(uge);djo=r(Jct,"gpt2"),Jct.forEach(t),cjo=r(V9e," \u2014 "),$O=n(V9e,"A",{href:!0});var Yct=s($O);fjo=r(Yct,"GPT2ForTokenClassification"),Yct.forEach(t),mjo=r(V9e," (OpenAI GPT-2 model)"),V9e.forEach(t),gjo=i(J),kv=n(J,"LI",{});var X9e=s(kv);bge=n(X9e,"STRONG",{});var Kct=s(bge);hjo=r(Kct,"ibert"),Kct.forEach(t),pjo=r(X9e," \u2014 "),kO=n(X9e,"A",{href:!0});var Zct=s(kO);_jo=r(Zct,"IBertForTokenClassification"),Zct.forEach(t),ujo=r(X9e," (I-BERT model)"),X9e.forEach(t),bjo=i(J),Sv=n(J,"LI",{});var z9e=s(Sv);vge=n(z9e,"STRONG",{});var eft=s(vge);vjo=r(eft,"layoutlm"),eft.forEach(t),Fjo=r(z9e," \u2014 "),SO=n(z9e,"A",{href:!0});var oft=s(SO);Tjo=r(oft,"LayoutLMForTokenClassification"),oft.forEach(t),Mjo=r(z9e," (LayoutLM model)"),z9e.forEach(t),Ejo=i(J),Rv=n(J,"LI",{});var W9e=s(Rv);Fge=n(W9e,"STRONG",{});var rft=s(Fge);Cjo=r(rft,"layoutlmv2"),rft.forEach(t),wjo=r(W9e," \u2014 "),RO=n(W9e,"A",{href:!0});var tft=s(RO);Ajo=r(tft,"LayoutLMv2ForTokenClassification"),tft.forEach(t),yjo=r(W9e," (LayoutLMv2 model)"),W9e.forEach(t),Ljo=i(J),Bv=n(J,"LI",{});var Q9e=s(Bv);Tge=n(Q9e,"STRONG",{});var aft=s(Tge);xjo=r(aft,"longformer"),aft.forEach(t),$jo=r(Q9e," \u2014 "),BO=n(Q9e,"A",{href:!0});var nft=s(BO);kjo=r(nft,"LongformerForTokenClassification"),nft.forEach(t),Sjo=r(Q9e," (Longformer model)"),Q9e.forEach(t),Rjo=i(J),Pv=n(J,"LI",{});var H9e=s(Pv);Mge=n(H9e,"STRONG",{});var sft=s(Mge);Bjo=r(sft,"megatron-bert"),sft.forEach(t),Pjo=r(H9e," \u2014 "),PO=n(H9e,"A",{href:!0});var lft=s(PO);Ijo=r(lft,"MegatronBertForTokenClassification"),lft.forEach(t),qjo=r(H9e," (MegatronBert model)"),H9e.forEach(t),Njo=i(J),Iv=n(J,"LI",{});var U9e=s(Iv);Ege=n(U9e,"STRONG",{});var ift=s(Ege);jjo=r(ift,"mobilebert"),ift.forEach(t),Djo=r(U9e," \u2014 "),IO=n(U9e,"A",{href:!0});var dft=s(IO);Gjo=r(dft,"MobileBertForTokenClassification"),dft.forEach(t),Ojo=r(U9e," (MobileBERT model)"),U9e.forEach(t),Vjo=i(J),qv=n(J,"LI",{});var J9e=s(qv);Cge=n(J9e,"STRONG",{});var cft=s(Cge);Xjo=r(cft,"mpnet"),cft.forEach(t),zjo=r(J9e," \u2014 "),qO=n(J9e,"A",{href:!0});var fft=s(qO);Wjo=r(fft,"MPNetForTokenClassification"),fft.forEach(t),Qjo=r(J9e," (MPNet model)"),J9e.forEach(t),Hjo=i(J),Nv=n(J,"LI",{});var Y9e=s(Nv);wge=n(Y9e,"STRONG",{});var mft=s(wge);Ujo=r(mft,"nystromformer"),mft.forEach(t),Jjo=r(Y9e," \u2014 "),NO=n(Y9e,"A",{href:!0});var gft=s(NO);Yjo=r(gft,"NystromformerForTokenClassification"),gft.forEach(t),Kjo=r(Y9e," (Nystromformer model)"),Y9e.forEach(t),Zjo=i(J),jv=n(J,"LI",{});var K9e=s(jv);Age=n(K9e,"STRONG",{});var hft=s(Age);eDo=r(hft,"qdqbert"),hft.forEach(t),oDo=r(K9e," \u2014 "),jO=n(K9e,"A",{href:!0});var pft=s(jO);rDo=r(pft,"QDQBertForTokenClassification"),pft.forEach(t),tDo=r(K9e," (QDQBert model)"),K9e.forEach(t),aDo=i(J),Dv=n(J,"LI",{});var Z9e=s(Dv);yge=n(Z9e,"STRONG",{});var _ft=s(yge);nDo=r(_ft,"rembert"),_ft.forEach(t),sDo=r(Z9e," \u2014 "),DO=n(Z9e,"A",{href:!0});var uft=s(DO);lDo=r(uft,"RemBertForTokenClassification"),uft.forEach(t),iDo=r(Z9e," (RemBERT model)"),Z9e.forEach(t),dDo=i(J),Gv=n(J,"LI",{});var exe=s(Gv);Lge=n(exe,"STRONG",{});var bft=s(Lge);cDo=r(bft,"roberta"),bft.forEach(t),fDo=r(exe," \u2014 "),GO=n(exe,"A",{href:!0});var vft=s(GO);mDo=r(vft,"RobertaForTokenClassification"),vft.forEach(t),gDo=r(exe," (RoBERTa model)"),exe.forEach(t),hDo=i(J),Ov=n(J,"LI",{});var oxe=s(Ov);xge=n(oxe,"STRONG",{});var Fft=s(xge);pDo=r(Fft,"roformer"),Fft.forEach(t),_Do=r(oxe," \u2014 "),OO=n(oxe,"A",{href:!0});var Tft=s(OO);uDo=r(Tft,"RoFormerForTokenClassification"),Tft.forEach(t),bDo=r(oxe," (RoFormer model)"),oxe.forEach(t),vDo=i(J),Vv=n(J,"LI",{});var rxe=s(Vv);$ge=n(rxe,"STRONG",{});var Mft=s($ge);FDo=r(Mft,"squeezebert"),Mft.forEach(t),TDo=r(rxe," \u2014 "),VO=n(rxe,"A",{href:!0});var Eft=s(VO);MDo=r(Eft,"SqueezeBertForTokenClassification"),Eft.forEach(t),EDo=r(rxe," (SqueezeBERT model)"),rxe.forEach(t),CDo=i(J),Xv=n(J,"LI",{});var txe=s(Xv);kge=n(txe,"STRONG",{});var Cft=s(kge);wDo=r(Cft,"xlm"),Cft.forEach(t),ADo=r(txe," \u2014 "),XO=n(txe,"A",{href:!0});var wft=s(XO);yDo=r(wft,"XLMForTokenClassification"),wft.forEach(t),LDo=r(txe," (XLM model)"),txe.forEach(t),xDo=i(J),zv=n(J,"LI",{});var axe=s(zv);Sge=n(axe,"STRONG",{});var Aft=s(Sge);$Do=r(Aft,"xlm-roberta"),Aft.forEach(t),kDo=r(axe," \u2014 "),zO=n(axe,"A",{href:!0});var yft=s(zO);SDo=r(yft,"XLMRobertaForTokenClassification"),yft.forEach(t),RDo=r(axe," (XLM-RoBERTa model)"),axe.forEach(t),BDo=i(J),Wv=n(J,"LI",{});var nxe=s(Wv);Rge=n(nxe,"STRONG",{});var Lft=s(Rge);PDo=r(Lft,"xlm-roberta-xl"),Lft.forEach(t),IDo=r(nxe," \u2014 "),WO=n(nxe,"A",{href:!0});var xft=s(WO);qDo=r(xft,"XLMRobertaXLForTokenClassification"),xft.forEach(t),NDo=r(nxe," (XLM-RoBERTa-XL model)"),nxe.forEach(t),jDo=i(J),Qv=n(J,"LI",{});var sxe=s(Qv);Bge=n(sxe,"STRONG",{});var $ft=s(Bge);DDo=r($ft,"xlnet"),$ft.forEach(t),GDo=r(sxe," \u2014 "),QO=n(sxe,"A",{href:!0});var kft=s(QO);ODo=r(kft,"XLNetForTokenClassification"),kft.forEach(t),VDo=r(sxe," (XLNet model)"),sxe.forEach(t),XDo=i(J),Hv=n(J,"LI",{});var lxe=s(Hv);Pge=n(lxe,"STRONG",{});var Sft=s(Pge);zDo=r(Sft,"yoso"),Sft.forEach(t),WDo=r(lxe," \u2014 "),HO=n(lxe,"A",{href:!0});var Rft=s(HO);QDo=r(Rft,"YosoForTokenClassification"),Rft.forEach(t),HDo=r(lxe," (YOSO model)"),lxe.forEach(t),J.forEach(t),UDo=i(da),Uv=n(da,"P",{});var ixe=s(Uv);JDo=r(ixe,"The model is set in evaluation mode by default using "),Ige=n(ixe,"CODE",{});var Bft=s(Ige);YDo=r(Bft,"model.eval()"),Bft.forEach(t),KDo=r(ixe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=n(ixe,"CODE",{});var Pft=s(qge);ZDo=r(Pft,"model.train()"),Pft.forEach(t),ixe.forEach(t),eGo=i(da),T(Jv.$$.fragment,da),da.forEach(t),Us.forEach(t),Mqe=i(f),Yi=n(f,"H2",{class:!0});var Aje=s(Yi);Yv=n(Aje,"A",{id:!0,class:!0,href:!0});var Ift=s(Yv);Nge=n(Ift,"SPAN",{});var qft=s(Nge);T(xy.$$.fragment,qft),qft.forEach(t),Ift.forEach(t),oGo=i(Aje),jge=n(Aje,"SPAN",{});var Nft=s(jge);rGo=r(Nft,"AutoModelForQuestionAnswering"),Nft.forEach(t),Aje.forEach(t),Eqe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T($y.$$.fragment,Js),tGo=i(Js),Ki=n(Js,"P",{});var oZ=s(Ki);aGo=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),UO=n(oZ,"A",{href:!0});var jft=s(UO);nGo=r(jft,"from_pretrained()"),jft.forEach(t),sGo=r(oZ," class method or the "),JO=n(oZ,"A",{href:!0});var Dft=s(JO);lGo=r(Dft,"from_config()"),Dft.forEach(t),iGo=r(oZ,` class
method.`),oZ.forEach(t),dGo=i(Js),ky=n(Js,"P",{});var yje=s(ky);cGo=r(yje,"This class cannot be instantiated directly using "),Dge=n(yje,"CODE",{});var Gft=s(Dge);fGo=r(Gft,"__init__()"),Gft.forEach(t),mGo=r(yje," (throws an error)."),yje.forEach(t),gGo=i(Js),mt=n(Js,"DIV",{class:!0});var Bw=s(mt);T(Sy.$$.fragment,Bw),hGo=i(Bw),Gge=n(Bw,"P",{});var Oft=s(Gge);pGo=r(Oft,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Oft.forEach(t),_Go=i(Bw),Zi=n(Bw,"P",{});var rZ=s(Zi);uGo=r(rZ,`Note:
Loading a model from its configuration file does `),Oge=n(rZ,"STRONG",{});var Vft=s(Oge);bGo=r(Vft,"not"),Vft.forEach(t),vGo=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YO=n(rZ,"A",{href:!0});var Xft=s(YO);FGo=r(Xft,"from_pretrained()"),Xft.forEach(t),TGo=r(rZ," to load the model weights."),rZ.forEach(t),MGo=i(Bw),T(Kv.$$.fragment,Bw),Bw.forEach(t),EGo=i(Js),no=n(Js,"DIV",{class:!0});var ca=s(no);T(Ry.$$.fragment,ca),CGo=i(ca),Vge=n(ca,"P",{});var zft=s(Vge);wGo=r(zft,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zft.forEach(t),AGo=i(ca),qa=n(ca,"P",{});var Pw=s(qa);yGo=r(Pw,"The model class to instantiate is selected based on the "),Xge=n(Pw,"CODE",{});var Wft=s(Xge);LGo=r(Wft,"model_type"),Wft.forEach(t),xGo=r(Pw,` property of the config object (either
passed as an argument or loaded from `),zge=n(Pw,"CODE",{});var Qft=s(zge);$Go=r(Qft,"pretrained_model_name_or_path"),Qft.forEach(t),kGo=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wge=n(Pw,"CODE",{});var Hft=s(Wge);SGo=r(Hft,"pretrained_model_name_or_path"),Hft.forEach(t),RGo=r(Pw,":"),Pw.forEach(t),BGo=i(ca),V=n(ca,"UL",{});var X=s(V);Zv=n(X,"LI",{});var dxe=s(Zv);Qge=n(dxe,"STRONG",{});var Uft=s(Qge);PGo=r(Uft,"albert"),Uft.forEach(t),IGo=r(dxe," \u2014 "),KO=n(dxe,"A",{href:!0});var Jft=s(KO);qGo=r(Jft,"AlbertForQuestionAnswering"),Jft.forEach(t),NGo=r(dxe," (ALBERT model)"),dxe.forEach(t),jGo=i(X),eF=n(X,"LI",{});var cxe=s(eF);Hge=n(cxe,"STRONG",{});var Yft=s(Hge);DGo=r(Yft,"bart"),Yft.forEach(t),GGo=r(cxe," \u2014 "),ZO=n(cxe,"A",{href:!0});var Kft=s(ZO);OGo=r(Kft,"BartForQuestionAnswering"),Kft.forEach(t),VGo=r(cxe," (BART model)"),cxe.forEach(t),XGo=i(X),oF=n(X,"LI",{});var fxe=s(oF);Uge=n(fxe,"STRONG",{});var Zft=s(Uge);zGo=r(Zft,"bert"),Zft.forEach(t),WGo=r(fxe," \u2014 "),eV=n(fxe,"A",{href:!0});var emt=s(eV);QGo=r(emt,"BertForQuestionAnswering"),emt.forEach(t),HGo=r(fxe," (BERT model)"),fxe.forEach(t),UGo=i(X),rF=n(X,"LI",{});var mxe=s(rF);Jge=n(mxe,"STRONG",{});var omt=s(Jge);JGo=r(omt,"big_bird"),omt.forEach(t),YGo=r(mxe," \u2014 "),oV=n(mxe,"A",{href:!0});var rmt=s(oV);KGo=r(rmt,"BigBirdForQuestionAnswering"),rmt.forEach(t),ZGo=r(mxe," (BigBird model)"),mxe.forEach(t),eOo=i(X),tF=n(X,"LI",{});var gxe=s(tF);Yge=n(gxe,"STRONG",{});var tmt=s(Yge);oOo=r(tmt,"bigbird_pegasus"),tmt.forEach(t),rOo=r(gxe," \u2014 "),rV=n(gxe,"A",{href:!0});var amt=s(rV);tOo=r(amt,"BigBirdPegasusForQuestionAnswering"),amt.forEach(t),aOo=r(gxe," (BigBirdPegasus model)"),gxe.forEach(t),nOo=i(X),aF=n(X,"LI",{});var hxe=s(aF);Kge=n(hxe,"STRONG",{});var nmt=s(Kge);sOo=r(nmt,"camembert"),nmt.forEach(t),lOo=r(hxe," \u2014 "),tV=n(hxe,"A",{href:!0});var smt=s(tV);iOo=r(smt,"CamembertForQuestionAnswering"),smt.forEach(t),dOo=r(hxe," (CamemBERT model)"),hxe.forEach(t),cOo=i(X),nF=n(X,"LI",{});var pxe=s(nF);Zge=n(pxe,"STRONG",{});var lmt=s(Zge);fOo=r(lmt,"canine"),lmt.forEach(t),mOo=r(pxe," \u2014 "),aV=n(pxe,"A",{href:!0});var imt=s(aV);gOo=r(imt,"CanineForQuestionAnswering"),imt.forEach(t),hOo=r(pxe," (Canine model)"),pxe.forEach(t),pOo=i(X),sF=n(X,"LI",{});var _xe=s(sF);ehe=n(_xe,"STRONG",{});var dmt=s(ehe);_Oo=r(dmt,"convbert"),dmt.forEach(t),uOo=r(_xe," \u2014 "),nV=n(_xe,"A",{href:!0});var cmt=s(nV);bOo=r(cmt,"ConvBertForQuestionAnswering"),cmt.forEach(t),vOo=r(_xe," (ConvBERT model)"),_xe.forEach(t),FOo=i(X),lF=n(X,"LI",{});var uxe=s(lF);ohe=n(uxe,"STRONG",{});var fmt=s(ohe);TOo=r(fmt,"data2vec-text"),fmt.forEach(t),MOo=r(uxe," \u2014 "),sV=n(uxe,"A",{href:!0});var mmt=s(sV);EOo=r(mmt,"Data2VecTextForQuestionAnswering"),mmt.forEach(t),COo=r(uxe," (Data2VecText model)"),uxe.forEach(t),wOo=i(X),iF=n(X,"LI",{});var bxe=s(iF);rhe=n(bxe,"STRONG",{});var gmt=s(rhe);AOo=r(gmt,"deberta"),gmt.forEach(t),yOo=r(bxe," \u2014 "),lV=n(bxe,"A",{href:!0});var hmt=s(lV);LOo=r(hmt,"DebertaForQuestionAnswering"),hmt.forEach(t),xOo=r(bxe," (DeBERTa model)"),bxe.forEach(t),$Oo=i(X),dF=n(X,"LI",{});var vxe=s(dF);the=n(vxe,"STRONG",{});var pmt=s(the);kOo=r(pmt,"deberta-v2"),pmt.forEach(t),SOo=r(vxe," \u2014 "),iV=n(vxe,"A",{href:!0});var _mt=s(iV);ROo=r(_mt,"DebertaV2ForQuestionAnswering"),_mt.forEach(t),BOo=r(vxe," (DeBERTa-v2 model)"),vxe.forEach(t),POo=i(X),cF=n(X,"LI",{});var Fxe=s(cF);ahe=n(Fxe,"STRONG",{});var umt=s(ahe);IOo=r(umt,"distilbert"),umt.forEach(t),qOo=r(Fxe," \u2014 "),dV=n(Fxe,"A",{href:!0});var bmt=s(dV);NOo=r(bmt,"DistilBertForQuestionAnswering"),bmt.forEach(t),jOo=r(Fxe," (DistilBERT model)"),Fxe.forEach(t),DOo=i(X),fF=n(X,"LI",{});var Txe=s(fF);nhe=n(Txe,"STRONG",{});var vmt=s(nhe);GOo=r(vmt,"electra"),vmt.forEach(t),OOo=r(Txe," \u2014 "),cV=n(Txe,"A",{href:!0});var Fmt=s(cV);VOo=r(Fmt,"ElectraForQuestionAnswering"),Fmt.forEach(t),XOo=r(Txe," (ELECTRA model)"),Txe.forEach(t),zOo=i(X),mF=n(X,"LI",{});var Mxe=s(mF);she=n(Mxe,"STRONG",{});var Tmt=s(she);WOo=r(Tmt,"flaubert"),Tmt.forEach(t),QOo=r(Mxe," \u2014 "),fV=n(Mxe,"A",{href:!0});var Mmt=s(fV);HOo=r(Mmt,"FlaubertForQuestionAnsweringSimple"),Mmt.forEach(t),UOo=r(Mxe," (FlauBERT model)"),Mxe.forEach(t),JOo=i(X),gF=n(X,"LI",{});var Exe=s(gF);lhe=n(Exe,"STRONG",{});var Emt=s(lhe);YOo=r(Emt,"fnet"),Emt.forEach(t),KOo=r(Exe," \u2014 "),mV=n(Exe,"A",{href:!0});var Cmt=s(mV);ZOo=r(Cmt,"FNetForQuestionAnswering"),Cmt.forEach(t),eVo=r(Exe," (FNet model)"),Exe.forEach(t),oVo=i(X),hF=n(X,"LI",{});var Cxe=s(hF);ihe=n(Cxe,"STRONG",{});var wmt=s(ihe);rVo=r(wmt,"funnel"),wmt.forEach(t),tVo=r(Cxe," \u2014 "),gV=n(Cxe,"A",{href:!0});var Amt=s(gV);aVo=r(Amt,"FunnelForQuestionAnswering"),Amt.forEach(t),nVo=r(Cxe," (Funnel Transformer model)"),Cxe.forEach(t),sVo=i(X),pF=n(X,"LI",{});var wxe=s(pF);dhe=n(wxe,"STRONG",{});var ymt=s(dhe);lVo=r(ymt,"gptj"),ymt.forEach(t),iVo=r(wxe," \u2014 "),hV=n(wxe,"A",{href:!0});var Lmt=s(hV);dVo=r(Lmt,"GPTJForQuestionAnswering"),Lmt.forEach(t),cVo=r(wxe," (GPT-J model)"),wxe.forEach(t),fVo=i(X),_F=n(X,"LI",{});var Axe=s(_F);che=n(Axe,"STRONG",{});var xmt=s(che);mVo=r(xmt,"ibert"),xmt.forEach(t),gVo=r(Axe," \u2014 "),pV=n(Axe,"A",{href:!0});var $mt=s(pV);hVo=r($mt,"IBertForQuestionAnswering"),$mt.forEach(t),pVo=r(Axe," (I-BERT model)"),Axe.forEach(t),_Vo=i(X),uF=n(X,"LI",{});var yxe=s(uF);fhe=n(yxe,"STRONG",{});var kmt=s(fhe);uVo=r(kmt,"layoutlmv2"),kmt.forEach(t),bVo=r(yxe," \u2014 "),_V=n(yxe,"A",{href:!0});var Smt=s(_V);vVo=r(Smt,"LayoutLMv2ForQuestionAnswering"),Smt.forEach(t),FVo=r(yxe," (LayoutLMv2 model)"),yxe.forEach(t),TVo=i(X),bF=n(X,"LI",{});var Lxe=s(bF);mhe=n(Lxe,"STRONG",{});var Rmt=s(mhe);MVo=r(Rmt,"led"),Rmt.forEach(t),EVo=r(Lxe," \u2014 "),uV=n(Lxe,"A",{href:!0});var Bmt=s(uV);CVo=r(Bmt,"LEDForQuestionAnswering"),Bmt.forEach(t),wVo=r(Lxe," (LED model)"),Lxe.forEach(t),AVo=i(X),vF=n(X,"LI",{});var xxe=s(vF);ghe=n(xxe,"STRONG",{});var Pmt=s(ghe);yVo=r(Pmt,"longformer"),Pmt.forEach(t),LVo=r(xxe," \u2014 "),bV=n(xxe,"A",{href:!0});var Imt=s(bV);xVo=r(Imt,"LongformerForQuestionAnswering"),Imt.forEach(t),$Vo=r(xxe," (Longformer model)"),xxe.forEach(t),kVo=i(X),FF=n(X,"LI",{});var $xe=s(FF);hhe=n($xe,"STRONG",{});var qmt=s(hhe);SVo=r(qmt,"lxmert"),qmt.forEach(t),RVo=r($xe," \u2014 "),vV=n($xe,"A",{href:!0});var Nmt=s(vV);BVo=r(Nmt,"LxmertForQuestionAnswering"),Nmt.forEach(t),PVo=r($xe," (LXMERT model)"),$xe.forEach(t),IVo=i(X),TF=n(X,"LI",{});var kxe=s(TF);phe=n(kxe,"STRONG",{});var jmt=s(phe);qVo=r(jmt,"mbart"),jmt.forEach(t),NVo=r(kxe," \u2014 "),FV=n(kxe,"A",{href:!0});var Dmt=s(FV);jVo=r(Dmt,"MBartForQuestionAnswering"),Dmt.forEach(t),DVo=r(kxe," (mBART model)"),kxe.forEach(t),GVo=i(X),MF=n(X,"LI",{});var Sxe=s(MF);_he=n(Sxe,"STRONG",{});var Gmt=s(_he);OVo=r(Gmt,"megatron-bert"),Gmt.forEach(t),VVo=r(Sxe," \u2014 "),TV=n(Sxe,"A",{href:!0});var Omt=s(TV);XVo=r(Omt,"MegatronBertForQuestionAnswering"),Omt.forEach(t),zVo=r(Sxe," (MegatronBert model)"),Sxe.forEach(t),WVo=i(X),EF=n(X,"LI",{});var Rxe=s(EF);uhe=n(Rxe,"STRONG",{});var Vmt=s(uhe);QVo=r(Vmt,"mobilebert"),Vmt.forEach(t),HVo=r(Rxe," \u2014 "),MV=n(Rxe,"A",{href:!0});var Xmt=s(MV);UVo=r(Xmt,"MobileBertForQuestionAnswering"),Xmt.forEach(t),JVo=r(Rxe," (MobileBERT model)"),Rxe.forEach(t),YVo=i(X),CF=n(X,"LI",{});var Bxe=s(CF);bhe=n(Bxe,"STRONG",{});var zmt=s(bhe);KVo=r(zmt,"mpnet"),zmt.forEach(t),ZVo=r(Bxe," \u2014 "),EV=n(Bxe,"A",{href:!0});var Wmt=s(EV);eXo=r(Wmt,"MPNetForQuestionAnswering"),Wmt.forEach(t),oXo=r(Bxe," (MPNet model)"),Bxe.forEach(t),rXo=i(X),wF=n(X,"LI",{});var Pxe=s(wF);vhe=n(Pxe,"STRONG",{});var Qmt=s(vhe);tXo=r(Qmt,"nystromformer"),Qmt.forEach(t),aXo=r(Pxe," \u2014 "),CV=n(Pxe,"A",{href:!0});var Hmt=s(CV);nXo=r(Hmt,"NystromformerForQuestionAnswering"),Hmt.forEach(t),sXo=r(Pxe," (Nystromformer model)"),Pxe.forEach(t),lXo=i(X),AF=n(X,"LI",{});var Ixe=s(AF);Fhe=n(Ixe,"STRONG",{});var Umt=s(Fhe);iXo=r(Umt,"qdqbert"),Umt.forEach(t),dXo=r(Ixe," \u2014 "),wV=n(Ixe,"A",{href:!0});var Jmt=s(wV);cXo=r(Jmt,"QDQBertForQuestionAnswering"),Jmt.forEach(t),fXo=r(Ixe," (QDQBert model)"),Ixe.forEach(t),mXo=i(X),yF=n(X,"LI",{});var qxe=s(yF);The=n(qxe,"STRONG",{});var Ymt=s(The);gXo=r(Ymt,"reformer"),Ymt.forEach(t),hXo=r(qxe," \u2014 "),AV=n(qxe,"A",{href:!0});var Kmt=s(AV);pXo=r(Kmt,"ReformerForQuestionAnswering"),Kmt.forEach(t),_Xo=r(qxe," (Reformer model)"),qxe.forEach(t),uXo=i(X),LF=n(X,"LI",{});var Nxe=s(LF);Mhe=n(Nxe,"STRONG",{});var Zmt=s(Mhe);bXo=r(Zmt,"rembert"),Zmt.forEach(t),vXo=r(Nxe," \u2014 "),yV=n(Nxe,"A",{href:!0});var egt=s(yV);FXo=r(egt,"RemBertForQuestionAnswering"),egt.forEach(t),TXo=r(Nxe," (RemBERT model)"),Nxe.forEach(t),MXo=i(X),xF=n(X,"LI",{});var jxe=s(xF);Ehe=n(jxe,"STRONG",{});var ogt=s(Ehe);EXo=r(ogt,"roberta"),ogt.forEach(t),CXo=r(jxe," \u2014 "),LV=n(jxe,"A",{href:!0});var rgt=s(LV);wXo=r(rgt,"RobertaForQuestionAnswering"),rgt.forEach(t),AXo=r(jxe," (RoBERTa model)"),jxe.forEach(t),yXo=i(X),$F=n(X,"LI",{});var Dxe=s($F);Che=n(Dxe,"STRONG",{});var tgt=s(Che);LXo=r(tgt,"roformer"),tgt.forEach(t),xXo=r(Dxe," \u2014 "),xV=n(Dxe,"A",{href:!0});var agt=s(xV);$Xo=r(agt,"RoFormerForQuestionAnswering"),agt.forEach(t),kXo=r(Dxe," (RoFormer model)"),Dxe.forEach(t),SXo=i(X),kF=n(X,"LI",{});var Gxe=s(kF);whe=n(Gxe,"STRONG",{});var ngt=s(whe);RXo=r(ngt,"splinter"),ngt.forEach(t),BXo=r(Gxe," \u2014 "),$V=n(Gxe,"A",{href:!0});var sgt=s($V);PXo=r(sgt,"SplinterForQuestionAnswering"),sgt.forEach(t),IXo=r(Gxe," (Splinter model)"),Gxe.forEach(t),qXo=i(X),SF=n(X,"LI",{});var Oxe=s(SF);Ahe=n(Oxe,"STRONG",{});var lgt=s(Ahe);NXo=r(lgt,"squeezebert"),lgt.forEach(t),jXo=r(Oxe," \u2014 "),kV=n(Oxe,"A",{href:!0});var igt=s(kV);DXo=r(igt,"SqueezeBertForQuestionAnswering"),igt.forEach(t),GXo=r(Oxe," (SqueezeBERT model)"),Oxe.forEach(t),OXo=i(X),RF=n(X,"LI",{});var Vxe=s(RF);yhe=n(Vxe,"STRONG",{});var dgt=s(yhe);VXo=r(dgt,"xlm"),dgt.forEach(t),XXo=r(Vxe," \u2014 "),SV=n(Vxe,"A",{href:!0});var cgt=s(SV);zXo=r(cgt,"XLMForQuestionAnsweringSimple"),cgt.forEach(t),WXo=r(Vxe," (XLM model)"),Vxe.forEach(t),QXo=i(X),BF=n(X,"LI",{});var Xxe=s(BF);Lhe=n(Xxe,"STRONG",{});var fgt=s(Lhe);HXo=r(fgt,"xlm-roberta"),fgt.forEach(t),UXo=r(Xxe," \u2014 "),RV=n(Xxe,"A",{href:!0});var mgt=s(RV);JXo=r(mgt,"XLMRobertaForQuestionAnswering"),mgt.forEach(t),YXo=r(Xxe," (XLM-RoBERTa model)"),Xxe.forEach(t),KXo=i(X),PF=n(X,"LI",{});var zxe=s(PF);xhe=n(zxe,"STRONG",{});var ggt=s(xhe);ZXo=r(ggt,"xlm-roberta-xl"),ggt.forEach(t),ezo=r(zxe," \u2014 "),BV=n(zxe,"A",{href:!0});var hgt=s(BV);ozo=r(hgt,"XLMRobertaXLForQuestionAnswering"),hgt.forEach(t),rzo=r(zxe," (XLM-RoBERTa-XL model)"),zxe.forEach(t),tzo=i(X),IF=n(X,"LI",{});var Wxe=s(IF);$he=n(Wxe,"STRONG",{});var pgt=s($he);azo=r(pgt,"xlnet"),pgt.forEach(t),nzo=r(Wxe," \u2014 "),PV=n(Wxe,"A",{href:!0});var _gt=s(PV);szo=r(_gt,"XLNetForQuestionAnsweringSimple"),_gt.forEach(t),lzo=r(Wxe," (XLNet model)"),Wxe.forEach(t),izo=i(X),qF=n(X,"LI",{});var Qxe=s(qF);khe=n(Qxe,"STRONG",{});var ugt=s(khe);dzo=r(ugt,"yoso"),ugt.forEach(t),czo=r(Qxe," \u2014 "),IV=n(Qxe,"A",{href:!0});var bgt=s(IV);fzo=r(bgt,"YosoForQuestionAnswering"),bgt.forEach(t),mzo=r(Qxe," (YOSO model)"),Qxe.forEach(t),X.forEach(t),gzo=i(ca),NF=n(ca,"P",{});var Hxe=s(NF);hzo=r(Hxe,"The model is set in evaluation mode by default using "),She=n(Hxe,"CODE",{});var vgt=s(She);pzo=r(vgt,"model.eval()"),vgt.forEach(t),_zo=r(Hxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=n(Hxe,"CODE",{});var Fgt=s(Rhe);uzo=r(Fgt,"model.train()"),Fgt.forEach(t),Hxe.forEach(t),bzo=i(ca),T(jF.$$.fragment,ca),ca.forEach(t),Js.forEach(t),Cqe=i(f),ed=n(f,"H2",{class:!0});var Lje=s(ed);DF=n(Lje,"A",{id:!0,class:!0,href:!0});var Tgt=s(DF);Bhe=n(Tgt,"SPAN",{});var Mgt=s(Bhe);T(By.$$.fragment,Mgt),Mgt.forEach(t),Tgt.forEach(t),vzo=i(Lje),Phe=n(Lje,"SPAN",{});var Egt=s(Phe);Fzo=r(Egt,"AutoModelForTableQuestionAnswering"),Egt.forEach(t),Lje.forEach(t),wqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(Py.$$.fragment,Ys),Tzo=i(Ys),od=n(Ys,"P",{});var tZ=s(od);Mzo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),qV=n(tZ,"A",{href:!0});var Cgt=s(qV);Ezo=r(Cgt,"from_pretrained()"),Cgt.forEach(t),Czo=r(tZ," class method or the "),NV=n(tZ,"A",{href:!0});var wgt=s(NV);wzo=r(wgt,"from_config()"),wgt.forEach(t),Azo=r(tZ,` class
method.`),tZ.forEach(t),yzo=i(Ys),Iy=n(Ys,"P",{});var xje=s(Iy);Lzo=r(xje,"This class cannot be instantiated directly using "),Ihe=n(xje,"CODE",{});var Agt=s(Ihe);xzo=r(Agt,"__init__()"),Agt.forEach(t),$zo=r(xje," (throws an error)."),xje.forEach(t),kzo=i(Ys),gt=n(Ys,"DIV",{class:!0});var Iw=s(gt);T(qy.$$.fragment,Iw),Szo=i(Iw),qhe=n(Iw,"P",{});var ygt=s(qhe);Rzo=r(ygt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ygt.forEach(t),Bzo=i(Iw),rd=n(Iw,"P",{});var aZ=s(rd);Pzo=r(aZ,`Note:
Loading a model from its configuration file does `),Nhe=n(aZ,"STRONG",{});var Lgt=s(Nhe);Izo=r(Lgt,"not"),Lgt.forEach(t),qzo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=n(aZ,"A",{href:!0});var xgt=s(jV);Nzo=r(xgt,"from_pretrained()"),xgt.forEach(t),jzo=r(aZ," to load the model weights."),aZ.forEach(t),Dzo=i(Iw),T(GF.$$.fragment,Iw),Iw.forEach(t),Gzo=i(Ys),so=n(Ys,"DIV",{class:!0});var fa=s(so);T(Ny.$$.fragment,fa),Ozo=i(fa),jhe=n(fa,"P",{});var $gt=s(jhe);Vzo=r($gt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$gt.forEach(t),Xzo=i(fa),Na=n(fa,"P",{});var qw=s(Na);zzo=r(qw,"The model class to instantiate is selected based on the "),Dhe=n(qw,"CODE",{});var kgt=s(Dhe);Wzo=r(kgt,"model_type"),kgt.forEach(t),Qzo=r(qw,` property of the config object (either
passed as an argument or loaded from `),Ghe=n(qw,"CODE",{});var Sgt=s(Ghe);Hzo=r(Sgt,"pretrained_model_name_or_path"),Sgt.forEach(t),Uzo=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=n(qw,"CODE",{});var Rgt=s(Ohe);Jzo=r(Rgt,"pretrained_model_name_or_path"),Rgt.forEach(t),Yzo=r(qw,":"),qw.forEach(t),Kzo=i(fa),Vhe=n(fa,"UL",{});var Bgt=s(Vhe);OF=n(Bgt,"LI",{});var Uxe=s(OF);Xhe=n(Uxe,"STRONG",{});var Pgt=s(Xhe);Zzo=r(Pgt,"tapas"),Pgt.forEach(t),eWo=r(Uxe," \u2014 "),DV=n(Uxe,"A",{href:!0});var Igt=s(DV);oWo=r(Igt,"TapasForQuestionAnswering"),Igt.forEach(t),rWo=r(Uxe," (TAPAS model)"),Uxe.forEach(t),Bgt.forEach(t),tWo=i(fa),VF=n(fa,"P",{});var Jxe=s(VF);aWo=r(Jxe,"The model is set in evaluation mode by default using "),zhe=n(Jxe,"CODE",{});var qgt=s(zhe);nWo=r(qgt,"model.eval()"),qgt.forEach(t),sWo=r(Jxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=n(Jxe,"CODE",{});var Ngt=s(Whe);lWo=r(Ngt,"model.train()"),Ngt.forEach(t),Jxe.forEach(t),iWo=i(fa),T(XF.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),Aqe=i(f),td=n(f,"H2",{class:!0});var $je=s(td);zF=n($je,"A",{id:!0,class:!0,href:!0});var jgt=s(zF);Qhe=n(jgt,"SPAN",{});var Dgt=s(Qhe);T(jy.$$.fragment,Dgt),Dgt.forEach(t),jgt.forEach(t),dWo=i($je),Hhe=n($je,"SPAN",{});var Ggt=s(Hhe);cWo=r(Ggt,"AutoModelForImageClassification"),Ggt.forEach(t),$je.forEach(t),yqe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(Dy.$$.fragment,Ks),fWo=i(Ks),ad=n(Ks,"P",{});var nZ=s(ad);mWo=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),GV=n(nZ,"A",{href:!0});var Ogt=s(GV);gWo=r(Ogt,"from_pretrained()"),Ogt.forEach(t),hWo=r(nZ," class method or the "),OV=n(nZ,"A",{href:!0});var Vgt=s(OV);pWo=r(Vgt,"from_config()"),Vgt.forEach(t),_Wo=r(nZ,` class
method.`),nZ.forEach(t),uWo=i(Ks),Gy=n(Ks,"P",{});var kje=s(Gy);bWo=r(kje,"This class cannot be instantiated directly using "),Uhe=n(kje,"CODE",{});var Xgt=s(Uhe);vWo=r(Xgt,"__init__()"),Xgt.forEach(t),FWo=r(kje," (throws an error)."),kje.forEach(t),TWo=i(Ks),ht=n(Ks,"DIV",{class:!0});var Nw=s(ht);T(Oy.$$.fragment,Nw),MWo=i(Nw),Jhe=n(Nw,"P",{});var zgt=s(Jhe);EWo=r(zgt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zgt.forEach(t),CWo=i(Nw),nd=n(Nw,"P",{});var sZ=s(nd);wWo=r(sZ,`Note:
Loading a model from its configuration file does `),Yhe=n(sZ,"STRONG",{});var Wgt=s(Yhe);AWo=r(Wgt,"not"),Wgt.forEach(t),yWo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=n(sZ,"A",{href:!0});var Qgt=s(VV);LWo=r(Qgt,"from_pretrained()"),Qgt.forEach(t),xWo=r(sZ," to load the model weights."),sZ.forEach(t),$Wo=i(Nw),T(WF.$$.fragment,Nw),Nw.forEach(t),kWo=i(Ks),lo=n(Ks,"DIV",{class:!0});var ma=s(lo);T(Vy.$$.fragment,ma),SWo=i(ma),Khe=n(ma,"P",{});var Hgt=s(Khe);RWo=r(Hgt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Hgt.forEach(t),BWo=i(ma),ja=n(ma,"P",{});var jw=s(ja);PWo=r(jw,"The model class to instantiate is selected based on the "),Zhe=n(jw,"CODE",{});var Ugt=s(Zhe);IWo=r(Ugt,"model_type"),Ugt.forEach(t),qWo=r(jw,` property of the config object (either
passed as an argument or loaded from `),epe=n(jw,"CODE",{});var Jgt=s(epe);NWo=r(Jgt,"pretrained_model_name_or_path"),Jgt.forEach(t),jWo=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=n(jw,"CODE",{});var Ygt=s(ope);DWo=r(Ygt,"pretrained_model_name_or_path"),Ygt.forEach(t),GWo=r(jw,":"),jw.forEach(t),OWo=i(ma),Fe=n(ma,"UL",{});var Ee=s(Fe);QF=n(Ee,"LI",{});var Yxe=s(QF);rpe=n(Yxe,"STRONG",{});var Kgt=s(rpe);VWo=r(Kgt,"beit"),Kgt.forEach(t),XWo=r(Yxe," \u2014 "),XV=n(Yxe,"A",{href:!0});var Zgt=s(XV);zWo=r(Zgt,"BeitForImageClassification"),Zgt.forEach(t),WWo=r(Yxe," (BEiT model)"),Yxe.forEach(t),QWo=i(Ee),HF=n(Ee,"LI",{});var Kxe=s(HF);tpe=n(Kxe,"STRONG",{});var eht=s(tpe);HWo=r(eht,"convnext"),eht.forEach(t),UWo=r(Kxe," \u2014 "),zV=n(Kxe,"A",{href:!0});var oht=s(zV);JWo=r(oht,"ConvNextForImageClassification"),oht.forEach(t),YWo=r(Kxe," (ConvNext model)"),Kxe.forEach(t),KWo=i(Ee),UF=n(Ee,"LI",{});var Zxe=s(UF);ape=n(Zxe,"STRONG",{});var rht=s(ape);ZWo=r(rht,"data2vec-vision"),rht.forEach(t),eQo=r(Zxe," \u2014 "),WV=n(Zxe,"A",{href:!0});var tht=s(WV);oQo=r(tht,"Data2VecVisionForImageClassification"),tht.forEach(t),rQo=r(Zxe," (Data2VecVision model)"),Zxe.forEach(t),tQo=i(Ee),Bs=n(Ee,"LI",{});var y$=s(Bs);npe=n(y$,"STRONG",{});var aht=s(npe);aQo=r(aht,"deit"),aht.forEach(t),nQo=r(y$," \u2014 "),QV=n(y$,"A",{href:!0});var nht=s(QV);sQo=r(nht,"DeiTForImageClassification"),nht.forEach(t),lQo=r(y$," or "),HV=n(y$,"A",{href:!0});var sht=s(HV);iQo=r(sht,"DeiTForImageClassificationWithTeacher"),sht.forEach(t),dQo=r(y$," (DeiT model)"),y$.forEach(t),cQo=i(Ee),JF=n(Ee,"LI",{});var e$e=s(JF);spe=n(e$e,"STRONG",{});var lht=s(spe);fQo=r(lht,"imagegpt"),lht.forEach(t),mQo=r(e$e," \u2014 "),UV=n(e$e,"A",{href:!0});var iht=s(UV);gQo=r(iht,"ImageGPTForImageClassification"),iht.forEach(t),hQo=r(e$e," (ImageGPT model)"),e$e.forEach(t),pQo=i(Ee),pt=n(Ee,"LI",{});var gf=s(pt);lpe=n(gf,"STRONG",{});var dht=s(lpe);_Qo=r(dht,"perceiver"),dht.forEach(t),uQo=r(gf," \u2014 "),JV=n(gf,"A",{href:!0});var cht=s(JV);bQo=r(cht,"PerceiverForImageClassificationLearned"),cht.forEach(t),vQo=r(gf," or "),YV=n(gf,"A",{href:!0});var fht=s(YV);FQo=r(fht,"PerceiverForImageClassificationFourier"),fht.forEach(t),TQo=r(gf," or "),KV=n(gf,"A",{href:!0});var mht=s(KV);MQo=r(mht,"PerceiverForImageClassificationConvProcessing"),mht.forEach(t),EQo=r(gf," (Perceiver model)"),gf.forEach(t),CQo=i(Ee),YF=n(Ee,"LI",{});var o$e=s(YF);ipe=n(o$e,"STRONG",{});var ght=s(ipe);wQo=r(ght,"poolformer"),ght.forEach(t),AQo=r(o$e," \u2014 "),ZV=n(o$e,"A",{href:!0});var hht=s(ZV);yQo=r(hht,"PoolFormerForImageClassification"),hht.forEach(t),LQo=r(o$e," (PoolFormer model)"),o$e.forEach(t),xQo=i(Ee),KF=n(Ee,"LI",{});var r$e=s(KF);dpe=n(r$e,"STRONG",{});var pht=s(dpe);$Qo=r(pht,"regnet"),pht.forEach(t),kQo=r(r$e," \u2014 "),eX=n(r$e,"A",{href:!0});var _ht=s(eX);SQo=r(_ht,"RegNetForImageClassification"),_ht.forEach(t),RQo=r(r$e," (RegNet model)"),r$e.forEach(t),BQo=i(Ee),ZF=n(Ee,"LI",{});var t$e=s(ZF);cpe=n(t$e,"STRONG",{});var uht=s(cpe);PQo=r(uht,"resnet"),uht.forEach(t),IQo=r(t$e," \u2014 "),oX=n(t$e,"A",{href:!0});var bht=s(oX);qQo=r(bht,"ResNetForImageClassification"),bht.forEach(t),NQo=r(t$e," (ResNet model)"),t$e.forEach(t),jQo=i(Ee),e0=n(Ee,"LI",{});var a$e=s(e0);fpe=n(a$e,"STRONG",{});var vht=s(fpe);DQo=r(vht,"segformer"),vht.forEach(t),GQo=r(a$e," \u2014 "),rX=n(a$e,"A",{href:!0});var Fht=s(rX);OQo=r(Fht,"SegformerForImageClassification"),Fht.forEach(t),VQo=r(a$e," (SegFormer model)"),a$e.forEach(t),XQo=i(Ee),o0=n(Ee,"LI",{});var n$e=s(o0);mpe=n(n$e,"STRONG",{});var Tht=s(mpe);zQo=r(Tht,"swin"),Tht.forEach(t),WQo=r(n$e," \u2014 "),tX=n(n$e,"A",{href:!0});var Mht=s(tX);QQo=r(Mht,"SwinForImageClassification"),Mht.forEach(t),HQo=r(n$e," (Swin model)"),n$e.forEach(t),UQo=i(Ee),r0=n(Ee,"LI",{});var s$e=s(r0);gpe=n(s$e,"STRONG",{});var Eht=s(gpe);JQo=r(Eht,"van"),Eht.forEach(t),YQo=r(s$e," \u2014 "),aX=n(s$e,"A",{href:!0});var Cht=s(aX);KQo=r(Cht,"VanForImageClassification"),Cht.forEach(t),ZQo=r(s$e," (VAN model)"),s$e.forEach(t),eHo=i(Ee),t0=n(Ee,"LI",{});var l$e=s(t0);hpe=n(l$e,"STRONG",{});var wht=s(hpe);oHo=r(wht,"vit"),wht.forEach(t),rHo=r(l$e," \u2014 "),nX=n(l$e,"A",{href:!0});var Aht=s(nX);tHo=r(Aht,"ViTForImageClassification"),Aht.forEach(t),aHo=r(l$e," (ViT model)"),l$e.forEach(t),Ee.forEach(t),nHo=i(ma),a0=n(ma,"P",{});var i$e=s(a0);sHo=r(i$e,"The model is set in evaluation mode by default using "),ppe=n(i$e,"CODE",{});var yht=s(ppe);lHo=r(yht,"model.eval()"),yht.forEach(t),iHo=r(i$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=n(i$e,"CODE",{});var Lht=s(_pe);dHo=r(Lht,"model.train()"),Lht.forEach(t),i$e.forEach(t),cHo=i(ma),T(n0.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),Lqe=i(f),sd=n(f,"H2",{class:!0});var Sje=s(sd);s0=n(Sje,"A",{id:!0,class:!0,href:!0});var xht=s(s0);upe=n(xht,"SPAN",{});var $ht=s(upe);T(Xy.$$.fragment,$ht),$ht.forEach(t),xht.forEach(t),fHo=i(Sje),bpe=n(Sje,"SPAN",{});var kht=s(bpe);mHo=r(kht,"AutoModelForVision2Seq"),kht.forEach(t),Sje.forEach(t),xqe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(zy.$$.fragment,Zs),gHo=i(Zs),ld=n(Zs,"P",{});var lZ=s(ld);hHo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sX=n(lZ,"A",{href:!0});var Sht=s(sX);pHo=r(Sht,"from_pretrained()"),Sht.forEach(t),_Ho=r(lZ," class method or the "),lX=n(lZ,"A",{href:!0});var Rht=s(lX);uHo=r(Rht,"from_config()"),Rht.forEach(t),bHo=r(lZ,` class
method.`),lZ.forEach(t),vHo=i(Zs),Wy=n(Zs,"P",{});var Rje=s(Wy);FHo=r(Rje,"This class cannot be instantiated directly using "),vpe=n(Rje,"CODE",{});var Bht=s(vpe);THo=r(Bht,"__init__()"),Bht.forEach(t),MHo=r(Rje," (throws an error)."),Rje.forEach(t),EHo=i(Zs),_t=n(Zs,"DIV",{class:!0});var Dw=s(_t);T(Qy.$$.fragment,Dw),CHo=i(Dw),Fpe=n(Dw,"P",{});var Pht=s(Fpe);wHo=r(Pht,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Pht.forEach(t),AHo=i(Dw),id=n(Dw,"P",{});var iZ=s(id);yHo=r(iZ,`Note:
Loading a model from its configuration file does `),Tpe=n(iZ,"STRONG",{});var Iht=s(Tpe);LHo=r(Iht,"not"),Iht.forEach(t),xHo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=n(iZ,"A",{href:!0});var qht=s(iX);$Ho=r(qht,"from_pretrained()"),qht.forEach(t),kHo=r(iZ," to load the model weights."),iZ.forEach(t),SHo=i(Dw),T(l0.$$.fragment,Dw),Dw.forEach(t),RHo=i(Zs),io=n(Zs,"DIV",{class:!0});var ga=s(io);T(Hy.$$.fragment,ga),BHo=i(ga),Mpe=n(ga,"P",{});var Nht=s(Mpe);PHo=r(Nht,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Nht.forEach(t),IHo=i(ga),Da=n(ga,"P",{});var Gw=s(Da);qHo=r(Gw,"The model class to instantiate is selected based on the "),Epe=n(Gw,"CODE",{});var jht=s(Epe);NHo=r(jht,"model_type"),jht.forEach(t),jHo=r(Gw,` property of the config object (either
passed as an argument or loaded from `),Cpe=n(Gw,"CODE",{});var Dht=s(Cpe);DHo=r(Dht,"pretrained_model_name_or_path"),Dht.forEach(t),GHo=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=n(Gw,"CODE",{});var Ght=s(wpe);OHo=r(Ght,"pretrained_model_name_or_path"),Ght.forEach(t),VHo=r(Gw,":"),Gw.forEach(t),XHo=i(ga),Ape=n(ga,"UL",{});var Oht=s(Ape);i0=n(Oht,"LI",{});var d$e=s(i0);ype=n(d$e,"STRONG",{});var Vht=s(ype);zHo=r(Vht,"vision-encoder-decoder"),Vht.forEach(t),WHo=r(d$e," \u2014 "),dX=n(d$e,"A",{href:!0});var Xht=s(dX);QHo=r(Xht,"VisionEncoderDecoderModel"),Xht.forEach(t),HHo=r(d$e," (Vision Encoder decoder model)"),d$e.forEach(t),Oht.forEach(t),UHo=i(ga),d0=n(ga,"P",{});var c$e=s(d0);JHo=r(c$e,"The model is set in evaluation mode by default using "),Lpe=n(c$e,"CODE",{});var zht=s(Lpe);YHo=r(zht,"model.eval()"),zht.forEach(t),KHo=r(c$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=n(c$e,"CODE",{});var Wht=s(xpe);ZHo=r(Wht,"model.train()"),Wht.forEach(t),c$e.forEach(t),eUo=i(ga),T(c0.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),$qe=i(f),dd=n(f,"H2",{class:!0});var Bje=s(dd);f0=n(Bje,"A",{id:!0,class:!0,href:!0});var Qht=s(f0);$pe=n(Qht,"SPAN",{});var Hht=s($pe);T(Uy.$$.fragment,Hht),Hht.forEach(t),Qht.forEach(t),oUo=i(Bje),kpe=n(Bje,"SPAN",{});var Uht=s(kpe);rUo=r(Uht,"AutoModelForAudioClassification"),Uht.forEach(t),Bje.forEach(t),kqe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(Jy.$$.fragment,el),tUo=i(el),cd=n(el,"P",{});var dZ=s(cd);aUo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),cX=n(dZ,"A",{href:!0});var Jht=s(cX);nUo=r(Jht,"from_pretrained()"),Jht.forEach(t),sUo=r(dZ," class method or the "),fX=n(dZ,"A",{href:!0});var Yht=s(fX);lUo=r(Yht,"from_config()"),Yht.forEach(t),iUo=r(dZ,` class
method.`),dZ.forEach(t),dUo=i(el),Yy=n(el,"P",{});var Pje=s(Yy);cUo=r(Pje,"This class cannot be instantiated directly using "),Spe=n(Pje,"CODE",{});var Kht=s(Spe);fUo=r(Kht,"__init__()"),Kht.forEach(t),mUo=r(Pje," (throws an error)."),Pje.forEach(t),gUo=i(el),ut=n(el,"DIV",{class:!0});var Ow=s(ut);T(Ky.$$.fragment,Ow),hUo=i(Ow),Rpe=n(Ow,"P",{});var Zht=s(Rpe);pUo=r(Zht,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Zht.forEach(t),_Uo=i(Ow),fd=n(Ow,"P",{});var cZ=s(fd);uUo=r(cZ,`Note:
Loading a model from its configuration file does `),Bpe=n(cZ,"STRONG",{});var ept=s(Bpe);bUo=r(ept,"not"),ept.forEach(t),vUo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=n(cZ,"A",{href:!0});var opt=s(mX);FUo=r(opt,"from_pretrained()"),opt.forEach(t),TUo=r(cZ," to load the model weights."),cZ.forEach(t),MUo=i(Ow),T(m0.$$.fragment,Ow),Ow.forEach(t),EUo=i(el),co=n(el,"DIV",{class:!0});var ha=s(co);T(Zy.$$.fragment,ha),CUo=i(ha),Ppe=n(ha,"P",{});var rpt=s(Ppe);wUo=r(rpt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),rpt.forEach(t),AUo=i(ha),Ga=n(ha,"P",{});var Vw=s(Ga);yUo=r(Vw,"The model class to instantiate is selected based on the "),Ipe=n(Vw,"CODE",{});var tpt=s(Ipe);LUo=r(tpt,"model_type"),tpt.forEach(t),xUo=r(Vw,` property of the config object (either
passed as an argument or loaded from `),qpe=n(Vw,"CODE",{});var apt=s(qpe);$Uo=r(apt,"pretrained_model_name_or_path"),apt.forEach(t),kUo=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=n(Vw,"CODE",{});var npt=s(Npe);SUo=r(npt,"pretrained_model_name_or_path"),npt.forEach(t),RUo=r(Vw,":"),Vw.forEach(t),BUo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);g0=n(Oe,"LI",{});var f$e=s(g0);jpe=n(f$e,"STRONG",{});var spt=s(jpe);PUo=r(spt,"data2vec-audio"),spt.forEach(t),IUo=r(f$e," \u2014 "),gX=n(f$e,"A",{href:!0});var lpt=s(gX);qUo=r(lpt,"Data2VecAudioForSequenceClassification"),lpt.forEach(t),NUo=r(f$e," (Data2VecAudio model)"),f$e.forEach(t),jUo=i(Oe),h0=n(Oe,"LI",{});var m$e=s(h0);Dpe=n(m$e,"STRONG",{});var ipt=s(Dpe);DUo=r(ipt,"hubert"),ipt.forEach(t),GUo=r(m$e," \u2014 "),hX=n(m$e,"A",{href:!0});var dpt=s(hX);OUo=r(dpt,"HubertForSequenceClassification"),dpt.forEach(t),VUo=r(m$e," (Hubert model)"),m$e.forEach(t),XUo=i(Oe),p0=n(Oe,"LI",{});var g$e=s(p0);Gpe=n(g$e,"STRONG",{});var cpt=s(Gpe);zUo=r(cpt,"sew"),cpt.forEach(t),WUo=r(g$e," \u2014 "),pX=n(g$e,"A",{href:!0});var fpt=s(pX);QUo=r(fpt,"SEWForSequenceClassification"),fpt.forEach(t),HUo=r(g$e," (SEW model)"),g$e.forEach(t),UUo=i(Oe),_0=n(Oe,"LI",{});var h$e=s(_0);Ope=n(h$e,"STRONG",{});var mpt=s(Ope);JUo=r(mpt,"sew-d"),mpt.forEach(t),YUo=r(h$e," \u2014 "),_X=n(h$e,"A",{href:!0});var gpt=s(_X);KUo=r(gpt,"SEWDForSequenceClassification"),gpt.forEach(t),ZUo=r(h$e," (SEW-D model)"),h$e.forEach(t),eJo=i(Oe),u0=n(Oe,"LI",{});var p$e=s(u0);Vpe=n(p$e,"STRONG",{});var hpt=s(Vpe);oJo=r(hpt,"unispeech"),hpt.forEach(t),rJo=r(p$e," \u2014 "),uX=n(p$e,"A",{href:!0});var ppt=s(uX);tJo=r(ppt,"UniSpeechForSequenceClassification"),ppt.forEach(t),aJo=r(p$e," (UniSpeech model)"),p$e.forEach(t),nJo=i(Oe),b0=n(Oe,"LI",{});var _$e=s(b0);Xpe=n(_$e,"STRONG",{});var _pt=s(Xpe);sJo=r(_pt,"unispeech-sat"),_pt.forEach(t),lJo=r(_$e," \u2014 "),bX=n(_$e,"A",{href:!0});var upt=s(bX);iJo=r(upt,"UniSpeechSatForSequenceClassification"),upt.forEach(t),dJo=r(_$e," (UniSpeechSat model)"),_$e.forEach(t),cJo=i(Oe),v0=n(Oe,"LI",{});var u$e=s(v0);zpe=n(u$e,"STRONG",{});var bpt=s(zpe);fJo=r(bpt,"wav2vec2"),bpt.forEach(t),mJo=r(u$e," \u2014 "),vX=n(u$e,"A",{href:!0});var vpt=s(vX);gJo=r(vpt,"Wav2Vec2ForSequenceClassification"),vpt.forEach(t),hJo=r(u$e," (Wav2Vec2 model)"),u$e.forEach(t),pJo=i(Oe),F0=n(Oe,"LI",{});var b$e=s(F0);Wpe=n(b$e,"STRONG",{});var Fpt=s(Wpe);_Jo=r(Fpt,"wav2vec2-conformer"),Fpt.forEach(t),uJo=r(b$e," \u2014 "),FX=n(b$e,"A",{href:!0});var Tpt=s(FX);bJo=r(Tpt,"Wav2Vec2ConformerForSequenceClassification"),Tpt.forEach(t),vJo=r(b$e," (Wav2Vec2-Conformer model)"),b$e.forEach(t),FJo=i(Oe),T0=n(Oe,"LI",{});var v$e=s(T0);Qpe=n(v$e,"STRONG",{});var Mpt=s(Qpe);TJo=r(Mpt,"wavlm"),Mpt.forEach(t),MJo=r(v$e," \u2014 "),TX=n(v$e,"A",{href:!0});var Ept=s(TX);EJo=r(Ept,"WavLMForSequenceClassification"),Ept.forEach(t),CJo=r(v$e," (WavLM model)"),v$e.forEach(t),Oe.forEach(t),wJo=i(ha),M0=n(ha,"P",{});var F$e=s(M0);AJo=r(F$e,"The model is set in evaluation mode by default using "),Hpe=n(F$e,"CODE",{});var Cpt=s(Hpe);yJo=r(Cpt,"model.eval()"),Cpt.forEach(t),LJo=r(F$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Upe=n(F$e,"CODE",{});var wpt=s(Upe);xJo=r(wpt,"model.train()"),wpt.forEach(t),F$e.forEach(t),$Jo=i(ha),T(E0.$$.fragment,ha),ha.forEach(t),el.forEach(t),Sqe=i(f),md=n(f,"H2",{class:!0});var Ije=s(md);C0=n(Ije,"A",{id:!0,class:!0,href:!0});var Apt=s(C0);Jpe=n(Apt,"SPAN",{});var ypt=s(Jpe);T(eL.$$.fragment,ypt),ypt.forEach(t),Apt.forEach(t),kJo=i(Ije),Ype=n(Ije,"SPAN",{});var Lpt=s(Ype);SJo=r(Lpt,"AutoModelForAudioFrameClassification"),Lpt.forEach(t),Ije.forEach(t),Rqe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(oL.$$.fragment,ol),RJo=i(ol),gd=n(ol,"P",{});var fZ=s(gd);BJo=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),MX=n(fZ,"A",{href:!0});var xpt=s(MX);PJo=r(xpt,"from_pretrained()"),xpt.forEach(t),IJo=r(fZ," class method or the "),EX=n(fZ,"A",{href:!0});var $pt=s(EX);qJo=r($pt,"from_config()"),$pt.forEach(t),NJo=r(fZ,` class
method.`),fZ.forEach(t),jJo=i(ol),rL=n(ol,"P",{});var qje=s(rL);DJo=r(qje,"This class cannot be instantiated directly using "),Kpe=n(qje,"CODE",{});var kpt=s(Kpe);GJo=r(kpt,"__init__()"),kpt.forEach(t),OJo=r(qje," (throws an error)."),qje.forEach(t),VJo=i(ol),bt=n(ol,"DIV",{class:!0});var Xw=s(bt);T(tL.$$.fragment,Xw),XJo=i(Xw),Zpe=n(Xw,"P",{});var Spt=s(Zpe);zJo=r(Spt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Spt.forEach(t),WJo=i(Xw),hd=n(Xw,"P",{});var mZ=s(hd);QJo=r(mZ,`Note:
Loading a model from its configuration file does `),e_e=n(mZ,"STRONG",{});var Rpt=s(e_e);HJo=r(Rpt,"not"),Rpt.forEach(t),UJo=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=n(mZ,"A",{href:!0});var Bpt=s(CX);JJo=r(Bpt,"from_pretrained()"),Bpt.forEach(t),YJo=r(mZ," to load the model weights."),mZ.forEach(t),KJo=i(Xw),T(w0.$$.fragment,Xw),Xw.forEach(t),ZJo=i(ol),fo=n(ol,"DIV",{class:!0});var pa=s(fo);T(aL.$$.fragment,pa),eYo=i(pa),o_e=n(pa,"P",{});var Ppt=s(o_e);oYo=r(Ppt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Ppt.forEach(t),rYo=i(pa),Oa=n(pa,"P",{});var zw=s(Oa);tYo=r(zw,"The model class to instantiate is selected based on the "),r_e=n(zw,"CODE",{});var Ipt=s(r_e);aYo=r(Ipt,"model_type"),Ipt.forEach(t),nYo=r(zw,` property of the config object (either
passed as an argument or loaded from `),t_e=n(zw,"CODE",{});var qpt=s(t_e);sYo=r(qpt,"pretrained_model_name_or_path"),qpt.forEach(t),lYo=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=n(zw,"CODE",{});var Npt=s(a_e);iYo=r(Npt,"pretrained_model_name_or_path"),Npt.forEach(t),dYo=r(zw,":"),zw.forEach(t),cYo=i(pa),Kr=n(pa,"UL",{});var rl=s(Kr);A0=n(rl,"LI",{});var T$e=s(A0);n_e=n(T$e,"STRONG",{});var jpt=s(n_e);fYo=r(jpt,"data2vec-audio"),jpt.forEach(t),mYo=r(T$e," \u2014 "),wX=n(T$e,"A",{href:!0});var Dpt=s(wX);gYo=r(Dpt,"Data2VecAudioForAudioFrameClassification"),Dpt.forEach(t),hYo=r(T$e," (Data2VecAudio model)"),T$e.forEach(t),pYo=i(rl),y0=n(rl,"LI",{});var M$e=s(y0);s_e=n(M$e,"STRONG",{});var Gpt=s(s_e);_Yo=r(Gpt,"unispeech-sat"),Gpt.forEach(t),uYo=r(M$e," \u2014 "),AX=n(M$e,"A",{href:!0});var Opt=s(AX);bYo=r(Opt,"UniSpeechSatForAudioFrameClassification"),Opt.forEach(t),vYo=r(M$e," (UniSpeechSat model)"),M$e.forEach(t),FYo=i(rl),L0=n(rl,"LI",{});var E$e=s(L0);l_e=n(E$e,"STRONG",{});var Vpt=s(l_e);TYo=r(Vpt,"wav2vec2"),Vpt.forEach(t),MYo=r(E$e," \u2014 "),yX=n(E$e,"A",{href:!0});var Xpt=s(yX);EYo=r(Xpt,"Wav2Vec2ForAudioFrameClassification"),Xpt.forEach(t),CYo=r(E$e," (Wav2Vec2 model)"),E$e.forEach(t),wYo=i(rl),x0=n(rl,"LI",{});var C$e=s(x0);i_e=n(C$e,"STRONG",{});var zpt=s(i_e);AYo=r(zpt,"wav2vec2-conformer"),zpt.forEach(t),yYo=r(C$e," \u2014 "),LX=n(C$e,"A",{href:!0});var Wpt=s(LX);LYo=r(Wpt,"Wav2Vec2ConformerForAudioFrameClassification"),Wpt.forEach(t),xYo=r(C$e," (Wav2Vec2-Conformer model)"),C$e.forEach(t),$Yo=i(rl),$0=n(rl,"LI",{});var w$e=s($0);d_e=n(w$e,"STRONG",{});var Qpt=s(d_e);kYo=r(Qpt,"wavlm"),Qpt.forEach(t),SYo=r(w$e," \u2014 "),xX=n(w$e,"A",{href:!0});var Hpt=s(xX);RYo=r(Hpt,"WavLMForAudioFrameClassification"),Hpt.forEach(t),BYo=r(w$e," (WavLM model)"),w$e.forEach(t),rl.forEach(t),PYo=i(pa),k0=n(pa,"P",{});var A$e=s(k0);IYo=r(A$e,"The model is set in evaluation mode by default using "),c_e=n(A$e,"CODE",{});var Upt=s(c_e);qYo=r(Upt,"model.eval()"),Upt.forEach(t),NYo=r(A$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f_e=n(A$e,"CODE",{});var Jpt=s(f_e);jYo=r(Jpt,"model.train()"),Jpt.forEach(t),A$e.forEach(t),DYo=i(pa),T(S0.$$.fragment,pa),pa.forEach(t),ol.forEach(t),Bqe=i(f),pd=n(f,"H2",{class:!0});var Nje=s(pd);R0=n(Nje,"A",{id:!0,class:!0,href:!0});var Ypt=s(R0);m_e=n(Ypt,"SPAN",{});var Kpt=s(m_e);T(nL.$$.fragment,Kpt),Kpt.forEach(t),Ypt.forEach(t),GYo=i(Nje),g_e=n(Nje,"SPAN",{});var Zpt=s(g_e);OYo=r(Zpt,"AutoModelForCTC"),Zpt.forEach(t),Nje.forEach(t),Pqe=i(f),Vo=n(f,"DIV",{class:!0});var tl=s(Vo);T(sL.$$.fragment,tl),VYo=i(tl),_d=n(tl,"P",{});var gZ=s(_d);XYo=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),$X=n(gZ,"A",{href:!0});var e_t=s($X);zYo=r(e_t,"from_pretrained()"),e_t.forEach(t),WYo=r(gZ," class method or the "),kX=n(gZ,"A",{href:!0});var o_t=s(kX);QYo=r(o_t,"from_config()"),o_t.forEach(t),HYo=r(gZ,` class
method.`),gZ.forEach(t),UYo=i(tl),lL=n(tl,"P",{});var jje=s(lL);JYo=r(jje,"This class cannot be instantiated directly using "),h_e=n(jje,"CODE",{});var r_t=s(h_e);YYo=r(r_t,"__init__()"),r_t.forEach(t),KYo=r(jje," (throws an error)."),jje.forEach(t),ZYo=i(tl),vt=n(tl,"DIV",{class:!0});var Ww=s(vt);T(iL.$$.fragment,Ww),eKo=i(Ww),p_e=n(Ww,"P",{});var t_t=s(p_e);oKo=r(t_t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),t_t.forEach(t),rKo=i(Ww),ud=n(Ww,"P",{});var hZ=s(ud);tKo=r(hZ,`Note:
Loading a model from its configuration file does `),__e=n(hZ,"STRONG",{});var a_t=s(__e);aKo=r(a_t,"not"),a_t.forEach(t),nKo=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=n(hZ,"A",{href:!0});var n_t=s(SX);sKo=r(n_t,"from_pretrained()"),n_t.forEach(t),lKo=r(hZ," to load the model weights."),hZ.forEach(t),iKo=i(Ww),T(B0.$$.fragment,Ww),Ww.forEach(t),dKo=i(tl),mo=n(tl,"DIV",{class:!0});var _a=s(mo);T(dL.$$.fragment,_a),cKo=i(_a),u_e=n(_a,"P",{});var s_t=s(u_e);fKo=r(s_t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),s_t.forEach(t),mKo=i(_a),Va=n(_a,"P",{});var Qw=s(Va);gKo=r(Qw,"The model class to instantiate is selected based on the "),b_e=n(Qw,"CODE",{});var l_t=s(b_e);hKo=r(l_t,"model_type"),l_t.forEach(t),pKo=r(Qw,` property of the config object (either
passed as an argument or loaded from `),v_e=n(Qw,"CODE",{});var i_t=s(v_e);_Ko=r(i_t,"pretrained_model_name_or_path"),i_t.forEach(t),uKo=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=n(Qw,"CODE",{});var d_t=s(F_e);bKo=r(d_t,"pretrained_model_name_or_path"),d_t.forEach(t),vKo=r(Qw,":"),Qw.forEach(t),FKo=i(_a),Se=n(_a,"UL",{});var Ve=s(Se);P0=n(Ve,"LI",{});var y$e=s(P0);T_e=n(y$e,"STRONG",{});var c_t=s(T_e);TKo=r(c_t,"data2vec-audio"),c_t.forEach(t),MKo=r(y$e," \u2014 "),RX=n(y$e,"A",{href:!0});var f_t=s(RX);EKo=r(f_t,"Data2VecAudioForCTC"),f_t.forEach(t),CKo=r(y$e," (Data2VecAudio model)"),y$e.forEach(t),wKo=i(Ve),I0=n(Ve,"LI",{});var L$e=s(I0);M_e=n(L$e,"STRONG",{});var m_t=s(M_e);AKo=r(m_t,"hubert"),m_t.forEach(t),yKo=r(L$e," \u2014 "),BX=n(L$e,"A",{href:!0});var g_t=s(BX);LKo=r(g_t,"HubertForCTC"),g_t.forEach(t),xKo=r(L$e," (Hubert model)"),L$e.forEach(t),$Ko=i(Ve),q0=n(Ve,"LI",{});var x$e=s(q0);E_e=n(x$e,"STRONG",{});var h_t=s(E_e);kKo=r(h_t,"sew"),h_t.forEach(t),SKo=r(x$e," \u2014 "),PX=n(x$e,"A",{href:!0});var p_t=s(PX);RKo=r(p_t,"SEWForCTC"),p_t.forEach(t),BKo=r(x$e," (SEW model)"),x$e.forEach(t),PKo=i(Ve),N0=n(Ve,"LI",{});var $$e=s(N0);C_e=n($$e,"STRONG",{});var __t=s(C_e);IKo=r(__t,"sew-d"),__t.forEach(t),qKo=r($$e," \u2014 "),IX=n($$e,"A",{href:!0});var u_t=s(IX);NKo=r(u_t,"SEWDForCTC"),u_t.forEach(t),jKo=r($$e," (SEW-D model)"),$$e.forEach(t),DKo=i(Ve),j0=n(Ve,"LI",{});var k$e=s(j0);w_e=n(k$e,"STRONG",{});var b_t=s(w_e);GKo=r(b_t,"unispeech"),b_t.forEach(t),OKo=r(k$e," \u2014 "),qX=n(k$e,"A",{href:!0});var v_t=s(qX);VKo=r(v_t,"UniSpeechForCTC"),v_t.forEach(t),XKo=r(k$e," (UniSpeech model)"),k$e.forEach(t),zKo=i(Ve),D0=n(Ve,"LI",{});var S$e=s(D0);A_e=n(S$e,"STRONG",{});var F_t=s(A_e);WKo=r(F_t,"unispeech-sat"),F_t.forEach(t),QKo=r(S$e," \u2014 "),NX=n(S$e,"A",{href:!0});var T_t=s(NX);HKo=r(T_t,"UniSpeechSatForCTC"),T_t.forEach(t),UKo=r(S$e," (UniSpeechSat model)"),S$e.forEach(t),JKo=i(Ve),G0=n(Ve,"LI",{});var R$e=s(G0);y_e=n(R$e,"STRONG",{});var M_t=s(y_e);YKo=r(M_t,"wav2vec2"),M_t.forEach(t),KKo=r(R$e," \u2014 "),jX=n(R$e,"A",{href:!0});var E_t=s(jX);ZKo=r(E_t,"Wav2Vec2ForCTC"),E_t.forEach(t),eZo=r(R$e," (Wav2Vec2 model)"),R$e.forEach(t),oZo=i(Ve),O0=n(Ve,"LI",{});var B$e=s(O0);L_e=n(B$e,"STRONG",{});var C_t=s(L_e);rZo=r(C_t,"wav2vec2-conformer"),C_t.forEach(t),tZo=r(B$e," \u2014 "),DX=n(B$e,"A",{href:!0});var w_t=s(DX);aZo=r(w_t,"Wav2Vec2ConformerForCTC"),w_t.forEach(t),nZo=r(B$e," (Wav2Vec2-Conformer model)"),B$e.forEach(t),sZo=i(Ve),V0=n(Ve,"LI",{});var P$e=s(V0);x_e=n(P$e,"STRONG",{});var A_t=s(x_e);lZo=r(A_t,"wavlm"),A_t.forEach(t),iZo=r(P$e," \u2014 "),GX=n(P$e,"A",{href:!0});var y_t=s(GX);dZo=r(y_t,"WavLMForCTC"),y_t.forEach(t),cZo=r(P$e," (WavLM model)"),P$e.forEach(t),Ve.forEach(t),fZo=i(_a),X0=n(_a,"P",{});var I$e=s(X0);mZo=r(I$e,"The model is set in evaluation mode by default using "),$_e=n(I$e,"CODE",{});var L_t=s($_e);gZo=r(L_t,"model.eval()"),L_t.forEach(t),hZo=r(I$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k_e=n(I$e,"CODE",{});var x_t=s(k_e);pZo=r(x_t,"model.train()"),x_t.forEach(t),I$e.forEach(t),_Zo=i(_a),T(z0.$$.fragment,_a),_a.forEach(t),tl.forEach(t),Iqe=i(f),bd=n(f,"H2",{class:!0});var Dje=s(bd);W0=n(Dje,"A",{id:!0,class:!0,href:!0});var $_t=s(W0);S_e=n($_t,"SPAN",{});var k_t=s(S_e);T(cL.$$.fragment,k_t),k_t.forEach(t),$_t.forEach(t),uZo=i(Dje),R_e=n(Dje,"SPAN",{});var S_t=s(R_e);bZo=r(S_t,"AutoModelForSpeechSeq2Seq"),S_t.forEach(t),Dje.forEach(t),qqe=i(f),Xo=n(f,"DIV",{class:!0});var al=s(Xo);T(fL.$$.fragment,al),vZo=i(al),vd=n(al,"P",{});var pZ=s(vd);FZo=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),OX=n(pZ,"A",{href:!0});var R_t=s(OX);TZo=r(R_t,"from_pretrained()"),R_t.forEach(t),MZo=r(pZ," class method or the "),VX=n(pZ,"A",{href:!0});var B_t=s(VX);EZo=r(B_t,"from_config()"),B_t.forEach(t),CZo=r(pZ,` class
method.`),pZ.forEach(t),wZo=i(al),mL=n(al,"P",{});var Gje=s(mL);AZo=r(Gje,"This class cannot be instantiated directly using "),B_e=n(Gje,"CODE",{});var P_t=s(B_e);yZo=r(P_t,"__init__()"),P_t.forEach(t),LZo=r(Gje," (throws an error)."),Gje.forEach(t),xZo=i(al),Ft=n(al,"DIV",{class:!0});var Hw=s(Ft);T(gL.$$.fragment,Hw),$Zo=i(Hw),P_e=n(Hw,"P",{});var I_t=s(P_e);kZo=r(I_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),I_t.forEach(t),SZo=i(Hw),Fd=n(Hw,"P",{});var _Z=s(Fd);RZo=r(_Z,`Note:
Loading a model from its configuration file does `),I_e=n(_Z,"STRONG",{});var q_t=s(I_e);BZo=r(q_t,"not"),q_t.forEach(t),PZo=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(_Z,"A",{href:!0});var N_t=s(XX);IZo=r(N_t,"from_pretrained()"),N_t.forEach(t),qZo=r(_Z," to load the model weights."),_Z.forEach(t),NZo=i(Hw),T(Q0.$$.fragment,Hw),Hw.forEach(t),jZo=i(al),go=n(al,"DIV",{class:!0});var ua=s(go);T(hL.$$.fragment,ua),DZo=i(ua),q_e=n(ua,"P",{});var j_t=s(q_e);GZo=r(j_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),j_t.forEach(t),OZo=i(ua),Xa=n(ua,"P",{});var Uw=s(Xa);VZo=r(Uw,"The model class to instantiate is selected based on the "),N_e=n(Uw,"CODE",{});var D_t=s(N_e);XZo=r(D_t,"model_type"),D_t.forEach(t),zZo=r(Uw,` property of the config object (either
passed as an argument or loaded from `),j_e=n(Uw,"CODE",{});var G_t=s(j_e);WZo=r(G_t,"pretrained_model_name_or_path"),G_t.forEach(t),QZo=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D_e=n(Uw,"CODE",{});var O_t=s(D_e);HZo=r(O_t,"pretrained_model_name_or_path"),O_t.forEach(t),UZo=r(Uw,":"),Uw.forEach(t),JZo=i(ua),pL=n(ua,"UL",{});var Oje=s(pL);H0=n(Oje,"LI",{});var q$e=s(H0);G_e=n(q$e,"STRONG",{});var V_t=s(G_e);YZo=r(V_t,"speech-encoder-decoder"),V_t.forEach(t),KZo=r(q$e," \u2014 "),zX=n(q$e,"A",{href:!0});var X_t=s(zX);ZZo=r(X_t,"SpeechEncoderDecoderModel"),X_t.forEach(t),eer=r(q$e," (Speech Encoder decoder model)"),q$e.forEach(t),oer=i(Oje),U0=n(Oje,"LI",{});var N$e=s(U0);O_e=n(N$e,"STRONG",{});var z_t=s(O_e);rer=r(z_t,"speech_to_text"),z_t.forEach(t),ter=r(N$e," \u2014 "),WX=n(N$e,"A",{href:!0});var W_t=s(WX);aer=r(W_t,"Speech2TextForConditionalGeneration"),W_t.forEach(t),ner=r(N$e," (Speech2Text model)"),N$e.forEach(t),Oje.forEach(t),ser=i(ua),J0=n(ua,"P",{});var j$e=s(J0);ler=r(j$e,"The model is set in evaluation mode by default using "),V_e=n(j$e,"CODE",{});var Q_t=s(V_e);ier=r(Q_t,"model.eval()"),Q_t.forEach(t),der=r(j$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X_e=n(j$e,"CODE",{});var H_t=s(X_e);cer=r(H_t,"model.train()"),H_t.forEach(t),j$e.forEach(t),fer=i(ua),T(Y0.$$.fragment,ua),ua.forEach(t),al.forEach(t),Nqe=i(f),Td=n(f,"H2",{class:!0});var Vje=s(Td);K0=n(Vje,"A",{id:!0,class:!0,href:!0});var U_t=s(K0);z_e=n(U_t,"SPAN",{});var J_t=s(z_e);T(_L.$$.fragment,J_t),J_t.forEach(t),U_t.forEach(t),mer=i(Vje),W_e=n(Vje,"SPAN",{});var Y_t=s(W_e);ger=r(Y_t,"AutoModelForAudioXVector"),Y_t.forEach(t),Vje.forEach(t),jqe=i(f),zo=n(f,"DIV",{class:!0});var nl=s(zo);T(uL.$$.fragment,nl),her=i(nl),Md=n(nl,"P",{});var uZ=s(Md);per=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),QX=n(uZ,"A",{href:!0});var K_t=s(QX);_er=r(K_t,"from_pretrained()"),K_t.forEach(t),uer=r(uZ," class method or the "),HX=n(uZ,"A",{href:!0});var Z_t=s(HX);ber=r(Z_t,"from_config()"),Z_t.forEach(t),ver=r(uZ,` class
method.`),uZ.forEach(t),Fer=i(nl),bL=n(nl,"P",{});var Xje=s(bL);Ter=r(Xje,"This class cannot be instantiated directly using "),Q_e=n(Xje,"CODE",{});var eut=s(Q_e);Mer=r(eut,"__init__()"),eut.forEach(t),Eer=r(Xje," (throws an error)."),Xje.forEach(t),Cer=i(nl),Tt=n(nl,"DIV",{class:!0});var Jw=s(Tt);T(vL.$$.fragment,Jw),wer=i(Jw),H_e=n(Jw,"P",{});var out=s(H_e);Aer=r(out,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),out.forEach(t),yer=i(Jw),Ed=n(Jw,"P",{});var bZ=s(Ed);Ler=r(bZ,`Note:
Loading a model from its configuration file does `),U_e=n(bZ,"STRONG",{});var rut=s(U_e);xer=r(rut,"not"),rut.forEach(t),$er=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(bZ,"A",{href:!0});var tut=s(UX);ker=r(tut,"from_pretrained()"),tut.forEach(t),Ser=r(bZ," to load the model weights."),bZ.forEach(t),Rer=i(Jw),T(Z0.$$.fragment,Jw),Jw.forEach(t),Ber=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(FL.$$.fragment,ba),Per=i(ba),J_e=n(ba,"P",{});var aut=s(J_e);Ier=r(aut,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),aut.forEach(t),qer=i(ba),za=n(ba,"P",{});var Yw=s(za);Ner=r(Yw,"The model class to instantiate is selected based on the "),Y_e=n(Yw,"CODE",{});var nut=s(Y_e);jer=r(nut,"model_type"),nut.forEach(t),Der=r(Yw,` property of the config object (either
passed as an argument or loaded from `),K_e=n(Yw,"CODE",{});var sut=s(K_e);Ger=r(sut,"pretrained_model_name_or_path"),sut.forEach(t),Oer=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=n(Yw,"CODE",{});var lut=s(Z_e);Ver=r(lut,"pretrained_model_name_or_path"),lut.forEach(t),Xer=r(Yw,":"),Yw.forEach(t),zer=i(ba),Zr=n(ba,"UL",{});var sl=s(Zr);eT=n(sl,"LI",{});var D$e=s(eT);eue=n(D$e,"STRONG",{});var iut=s(eue);Wer=r(iut,"data2vec-audio"),iut.forEach(t),Qer=r(D$e," \u2014 "),JX=n(D$e,"A",{href:!0});var dut=s(JX);Her=r(dut,"Data2VecAudioForXVector"),dut.forEach(t),Uer=r(D$e," (Data2VecAudio model)"),D$e.forEach(t),Jer=i(sl),oT=n(sl,"LI",{});var G$e=s(oT);oue=n(G$e,"STRONG",{});var cut=s(oue);Yer=r(cut,"unispeech-sat"),cut.forEach(t),Ker=r(G$e," \u2014 "),YX=n(G$e,"A",{href:!0});var fut=s(YX);Zer=r(fut,"UniSpeechSatForXVector"),fut.forEach(t),eor=r(G$e," (UniSpeechSat model)"),G$e.forEach(t),oor=i(sl),rT=n(sl,"LI",{});var O$e=s(rT);rue=n(O$e,"STRONG",{});var mut=s(rue);ror=r(mut,"wav2vec2"),mut.forEach(t),tor=r(O$e," \u2014 "),KX=n(O$e,"A",{href:!0});var gut=s(KX);aor=r(gut,"Wav2Vec2ForXVector"),gut.forEach(t),nor=r(O$e," (Wav2Vec2 model)"),O$e.forEach(t),sor=i(sl),tT=n(sl,"LI",{});var V$e=s(tT);tue=n(V$e,"STRONG",{});var hut=s(tue);lor=r(hut,"wav2vec2-conformer"),hut.forEach(t),ior=r(V$e," \u2014 "),ZX=n(V$e,"A",{href:!0});var put=s(ZX);dor=r(put,"Wav2Vec2ConformerForXVector"),put.forEach(t),cor=r(V$e," (Wav2Vec2-Conformer model)"),V$e.forEach(t),mor=i(sl),aT=n(sl,"LI",{});var X$e=s(aT);aue=n(X$e,"STRONG",{});var _ut=s(aue);gor=r(_ut,"wavlm"),_ut.forEach(t),hor=r(X$e," \u2014 "),ez=n(X$e,"A",{href:!0});var uut=s(ez);por=r(uut,"WavLMForXVector"),uut.forEach(t),_or=r(X$e," (WavLM model)"),X$e.forEach(t),sl.forEach(t),uor=i(ba),nT=n(ba,"P",{});var z$e=s(nT);bor=r(z$e,"The model is set in evaluation mode by default using "),nue=n(z$e,"CODE",{});var but=s(nue);vor=r(but,"model.eval()"),but.forEach(t),For=r(z$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sue=n(z$e,"CODE",{});var vut=s(sue);Tor=r(vut,"model.train()"),vut.forEach(t),z$e.forEach(t),Mor=i(ba),T(sT.$$.fragment,ba),ba.forEach(t),nl.forEach(t),Dqe=i(f),Cd=n(f,"H2",{class:!0});var zje=s(Cd);lT=n(zje,"A",{id:!0,class:!0,href:!0});var Fut=s(lT);lue=n(Fut,"SPAN",{});var Tut=s(lue);T(TL.$$.fragment,Tut),Tut.forEach(t),Fut.forEach(t),Eor=i(zje),iue=n(zje,"SPAN",{});var Mut=s(iue);Cor=r(Mut,"AutoModelForMaskedImageModeling"),Mut.forEach(t),zje.forEach(t),Gqe=i(f),Wo=n(f,"DIV",{class:!0});var ll=s(Wo);T(ML.$$.fragment,ll),wor=i(ll),wd=n(ll,"P",{});var vZ=s(wd);Aor=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),oz=n(vZ,"A",{href:!0});var Eut=s(oz);yor=r(Eut,"from_pretrained()"),Eut.forEach(t),Lor=r(vZ," class method or the "),rz=n(vZ,"A",{href:!0});var Cut=s(rz);xor=r(Cut,"from_config()"),Cut.forEach(t),$or=r(vZ,` class
method.`),vZ.forEach(t),kor=i(ll),EL=n(ll,"P",{});var Wje=s(EL);Sor=r(Wje,"This class cannot be instantiated directly using "),due=n(Wje,"CODE",{});var wut=s(due);Ror=r(wut,"__init__()"),wut.forEach(t),Bor=r(Wje," (throws an error)."),Wje.forEach(t),Por=i(ll),Mt=n(ll,"DIV",{class:!0});var Kw=s(Mt);T(CL.$$.fragment,Kw),Ior=i(Kw),cue=n(Kw,"P",{});var Aut=s(cue);qor=r(Aut,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Aut.forEach(t),Nor=i(Kw),Ad=n(Kw,"P",{});var FZ=s(Ad);jor=r(FZ,`Note:
Loading a model from its configuration file does `),fue=n(FZ,"STRONG",{});var yut=s(fue);Dor=r(yut,"not"),yut.forEach(t),Gor=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tz=n(FZ,"A",{href:!0});var Lut=s(tz);Oor=r(Lut,"from_pretrained()"),Lut.forEach(t),Vor=r(FZ," to load the model weights."),FZ.forEach(t),Xor=i(Kw),T(iT.$$.fragment,Kw),Kw.forEach(t),zor=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(wL.$$.fragment,va),Wor=i(va),mue=n(va,"P",{});var xut=s(mue);Qor=r(xut,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),xut.forEach(t),Hor=i(va),Wa=n(va,"P",{});var Zw=s(Wa);Uor=r(Zw,"The model class to instantiate is selected based on the "),gue=n(Zw,"CODE",{});var $ut=s(gue);Jor=r($ut,"model_type"),$ut.forEach(t),Yor=r(Zw,` property of the config object (either
passed as an argument or loaded from `),hue=n(Zw,"CODE",{});var kut=s(hue);Kor=r(kut,"pretrained_model_name_or_path"),kut.forEach(t),Zor=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=n(Zw,"CODE",{});var Sut=s(pue);err=r(Sut,"pretrained_model_name_or_path"),Sut.forEach(t),orr=r(Zw,":"),Zw.forEach(t),rrr=i(va),yd=n(va,"UL",{});var TZ=s(yd);dT=n(TZ,"LI",{});var W$e=s(dT);_ue=n(W$e,"STRONG",{});var Rut=s(_ue);trr=r(Rut,"deit"),Rut.forEach(t),arr=r(W$e," \u2014 "),az=n(W$e,"A",{href:!0});var But=s(az);nrr=r(But,"DeiTForMaskedImageModeling"),But.forEach(t),srr=r(W$e," (DeiT model)"),W$e.forEach(t),lrr=i(TZ),cT=n(TZ,"LI",{});var Q$e=s(cT);uue=n(Q$e,"STRONG",{});var Put=s(uue);irr=r(Put,"swin"),Put.forEach(t),drr=r(Q$e," \u2014 "),nz=n(Q$e,"A",{href:!0});var Iut=s(nz);crr=r(Iut,"SwinForMaskedImageModeling"),Iut.forEach(t),frr=r(Q$e," (Swin model)"),Q$e.forEach(t),mrr=i(TZ),fT=n(TZ,"LI",{});var H$e=s(fT);bue=n(H$e,"STRONG",{});var qut=s(bue);grr=r(qut,"vit"),qut.forEach(t),hrr=r(H$e," \u2014 "),sz=n(H$e,"A",{href:!0});var Nut=s(sz);prr=r(Nut,"ViTForMaskedImageModeling"),Nut.forEach(t),_rr=r(H$e," (ViT model)"),H$e.forEach(t),TZ.forEach(t),urr=i(va),mT=n(va,"P",{});var U$e=s(mT);brr=r(U$e,"The model is set in evaluation mode by default using "),vue=n(U$e,"CODE",{});var jut=s(vue);vrr=r(jut,"model.eval()"),jut.forEach(t),Frr=r(U$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=n(U$e,"CODE",{});var Dut=s(Fue);Trr=r(Dut,"model.train()"),Dut.forEach(t),U$e.forEach(t),Mrr=i(va),T(gT.$$.fragment,va),va.forEach(t),ll.forEach(t),Oqe=i(f),Ld=n(f,"H2",{class:!0});var Qje=s(Ld);hT=n(Qje,"A",{id:!0,class:!0,href:!0});var Gut=s(hT);Tue=n(Gut,"SPAN",{});var Out=s(Tue);T(AL.$$.fragment,Out),Out.forEach(t),Gut.forEach(t),Err=i(Qje),Mue=n(Qje,"SPAN",{});var Vut=s(Mue);Crr=r(Vut,"AutoModelForObjectDetection"),Vut.forEach(t),Qje.forEach(t),Vqe=i(f),Qo=n(f,"DIV",{class:!0});var il=s(Qo);T(yL.$$.fragment,il),wrr=i(il),xd=n(il,"P",{});var MZ=s(xd);Arr=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),lz=n(MZ,"A",{href:!0});var Xut=s(lz);yrr=r(Xut,"from_pretrained()"),Xut.forEach(t),Lrr=r(MZ," class method or the "),iz=n(MZ,"A",{href:!0});var zut=s(iz);xrr=r(zut,"from_config()"),zut.forEach(t),$rr=r(MZ,` class
method.`),MZ.forEach(t),krr=i(il),LL=n(il,"P",{});var Hje=s(LL);Srr=r(Hje,"This class cannot be instantiated directly using "),Eue=n(Hje,"CODE",{});var Wut=s(Eue);Rrr=r(Wut,"__init__()"),Wut.forEach(t),Brr=r(Hje," (throws an error)."),Hje.forEach(t),Prr=i(il),Et=n(il,"DIV",{class:!0});var eA=s(Et);T(xL.$$.fragment,eA),Irr=i(eA),Cue=n(eA,"P",{});var Qut=s(Cue);qrr=r(Qut,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Qut.forEach(t),Nrr=i(eA),$d=n(eA,"P",{});var EZ=s($d);jrr=r(EZ,`Note:
Loading a model from its configuration file does `),wue=n(EZ,"STRONG",{});var Hut=s(wue);Drr=r(Hut,"not"),Hut.forEach(t),Grr=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dz=n(EZ,"A",{href:!0});var Uut=s(dz);Orr=r(Uut,"from_pretrained()"),Uut.forEach(t),Vrr=r(EZ," to load the model weights."),EZ.forEach(t),Xrr=i(eA),T(pT.$$.fragment,eA),eA.forEach(t),zrr=i(il),_o=n(il,"DIV",{class:!0});var Fa=s(_o);T($L.$$.fragment,Fa),Wrr=i(Fa),Aue=n(Fa,"P",{});var Jut=s(Aue);Qrr=r(Jut,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Jut.forEach(t),Hrr=i(Fa),Qa=n(Fa,"P",{});var oA=s(Qa);Urr=r(oA,"The model class to instantiate is selected based on the "),yue=n(oA,"CODE",{});var Yut=s(yue);Jrr=r(Yut,"model_type"),Yut.forEach(t),Yrr=r(oA,` property of the config object (either
passed as an argument or loaded from `),Lue=n(oA,"CODE",{});var Kut=s(Lue);Krr=r(Kut,"pretrained_model_name_or_path"),Kut.forEach(t),Zrr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=n(oA,"CODE",{});var Zut=s(xue);etr=r(Zut,"pretrained_model_name_or_path"),Zut.forEach(t),otr=r(oA,":"),oA.forEach(t),rtr=i(Fa),kL=n(Fa,"UL",{});var Uje=s(kL);_T=n(Uje,"LI",{});var J$e=s(_T);$ue=n(J$e,"STRONG",{});var e2t=s($ue);ttr=r(e2t,"detr"),e2t.forEach(t),atr=r(J$e," \u2014 "),cz=n(J$e,"A",{href:!0});var o2t=s(cz);ntr=r(o2t,"DetrForObjectDetection"),o2t.forEach(t),str=r(J$e," (DETR model)"),J$e.forEach(t),ltr=i(Uje),uT=n(Uje,"LI",{});var Y$e=s(uT);kue=n(Y$e,"STRONG",{});var r2t=s(kue);itr=r(r2t,"yolos"),r2t.forEach(t),dtr=r(Y$e," \u2014 "),fz=n(Y$e,"A",{href:!0});var t2t=s(fz);ctr=r(t2t,"YolosForObjectDetection"),t2t.forEach(t),ftr=r(Y$e," (YOLOS model)"),Y$e.forEach(t),Uje.forEach(t),mtr=i(Fa),bT=n(Fa,"P",{});var K$e=s(bT);gtr=r(K$e,"The model is set in evaluation mode by default using "),Sue=n(K$e,"CODE",{});var a2t=s(Sue);htr=r(a2t,"model.eval()"),a2t.forEach(t),ptr=r(K$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=n(K$e,"CODE",{});var n2t=s(Rue);_tr=r(n2t,"model.train()"),n2t.forEach(t),K$e.forEach(t),utr=i(Fa),T(vT.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),Xqe=i(f),kd=n(f,"H2",{class:!0});var Jje=s(kd);FT=n(Jje,"A",{id:!0,class:!0,href:!0});var s2t=s(FT);Bue=n(s2t,"SPAN",{});var l2t=s(Bue);T(SL.$$.fragment,l2t),l2t.forEach(t),s2t.forEach(t),btr=i(Jje),Pue=n(Jje,"SPAN",{});var i2t=s(Pue);vtr=r(i2t,"AutoModelForImageSegmentation"),i2t.forEach(t),Jje.forEach(t),zqe=i(f),Ho=n(f,"DIV",{class:!0});var dl=s(Ho);T(RL.$$.fragment,dl),Ftr=i(dl),Sd=n(dl,"P",{});var CZ=s(Sd);Ttr=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),mz=n(CZ,"A",{href:!0});var d2t=s(mz);Mtr=r(d2t,"from_pretrained()"),d2t.forEach(t),Etr=r(CZ," class method or the "),gz=n(CZ,"A",{href:!0});var c2t=s(gz);Ctr=r(c2t,"from_config()"),c2t.forEach(t),wtr=r(CZ,` class
method.`),CZ.forEach(t),Atr=i(dl),BL=n(dl,"P",{});var Yje=s(BL);ytr=r(Yje,"This class cannot be instantiated directly using "),Iue=n(Yje,"CODE",{});var f2t=s(Iue);Ltr=r(f2t,"__init__()"),f2t.forEach(t),xtr=r(Yje," (throws an error)."),Yje.forEach(t),$tr=i(dl),Ct=n(dl,"DIV",{class:!0});var rA=s(Ct);T(PL.$$.fragment,rA),ktr=i(rA),que=n(rA,"P",{});var m2t=s(que);Str=r(m2t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),m2t.forEach(t),Rtr=i(rA),Rd=n(rA,"P",{});var wZ=s(Rd);Btr=r(wZ,`Note:
Loading a model from its configuration file does `),Nue=n(wZ,"STRONG",{});var g2t=s(Nue);Ptr=r(g2t,"not"),g2t.forEach(t),Itr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=n(wZ,"A",{href:!0});var h2t=s(hz);qtr=r(h2t,"from_pretrained()"),h2t.forEach(t),Ntr=r(wZ," to load the model weights."),wZ.forEach(t),jtr=i(rA),T(TT.$$.fragment,rA),rA.forEach(t),Dtr=i(dl),uo=n(dl,"DIV",{class:!0});var Ta=s(uo);T(IL.$$.fragment,Ta),Gtr=i(Ta),jue=n(Ta,"P",{});var p2t=s(jue);Otr=r(p2t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),p2t.forEach(t),Vtr=i(Ta),Ha=n(Ta,"P",{});var tA=s(Ha);Xtr=r(tA,"The model class to instantiate is selected based on the "),Due=n(tA,"CODE",{});var _2t=s(Due);ztr=r(_2t,"model_type"),_2t.forEach(t),Wtr=r(tA,` property of the config object (either
passed as an argument or loaded from `),Gue=n(tA,"CODE",{});var u2t=s(Gue);Qtr=r(u2t,"pretrained_model_name_or_path"),u2t.forEach(t),Htr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=n(tA,"CODE",{});var b2t=s(Oue);Utr=r(b2t,"pretrained_model_name_or_path"),b2t.forEach(t),Jtr=r(tA,":"),tA.forEach(t),Ytr=i(Ta),Vue=n(Ta,"UL",{});var v2t=s(Vue);MT=n(v2t,"LI",{});var Z$e=s(MT);Xue=n(Z$e,"STRONG",{});var F2t=s(Xue);Ktr=r(F2t,"detr"),F2t.forEach(t),Ztr=r(Z$e," \u2014 "),pz=n(Z$e,"A",{href:!0});var T2t=s(pz);ear=r(T2t,"DetrForSegmentation"),T2t.forEach(t),oar=r(Z$e," (DETR model)"),Z$e.forEach(t),v2t.forEach(t),rar=i(Ta),ET=n(Ta,"P",{});var eke=s(ET);tar=r(eke,"The model is set in evaluation mode by default using "),zue=n(eke,"CODE",{});var M2t=s(zue);aar=r(M2t,"model.eval()"),M2t.forEach(t),nar=r(eke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=n(eke,"CODE",{});var E2t=s(Wue);sar=r(E2t,"model.train()"),E2t.forEach(t),eke.forEach(t),lar=i(Ta),T(CT.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),Wqe=i(f),Bd=n(f,"H2",{class:!0});var Kje=s(Bd);wT=n(Kje,"A",{id:!0,class:!0,href:!0});var C2t=s(wT);Que=n(C2t,"SPAN",{});var w2t=s(Que);T(qL.$$.fragment,w2t),w2t.forEach(t),C2t.forEach(t),iar=i(Kje),Hue=n(Kje,"SPAN",{});var A2t=s(Hue);dar=r(A2t,"AutoModelForSemanticSegmentation"),A2t.forEach(t),Kje.forEach(t),Qqe=i(f),Uo=n(f,"DIV",{class:!0});var cl=s(Uo);T(NL.$$.fragment,cl),car=i(cl),Pd=n(cl,"P",{});var AZ=s(Pd);far=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),_z=n(AZ,"A",{href:!0});var y2t=s(_z);mar=r(y2t,"from_pretrained()"),y2t.forEach(t),gar=r(AZ," class method or the "),uz=n(AZ,"A",{href:!0});var L2t=s(uz);har=r(L2t,"from_config()"),L2t.forEach(t),par=r(AZ,` class
method.`),AZ.forEach(t),_ar=i(cl),jL=n(cl,"P",{});var Zje=s(jL);uar=r(Zje,"This class cannot be instantiated directly using "),Uue=n(Zje,"CODE",{});var x2t=s(Uue);bar=r(x2t,"__init__()"),x2t.forEach(t),Far=r(Zje," (throws an error)."),Zje.forEach(t),Tar=i(cl),wt=n(cl,"DIV",{class:!0});var aA=s(wt);T(DL.$$.fragment,aA),Mar=i(aA),Jue=n(aA,"P",{});var $2t=s(Jue);Ear=r($2t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),$2t.forEach(t),Car=i(aA),Id=n(aA,"P",{});var yZ=s(Id);war=r(yZ,`Note:
Loading a model from its configuration file does `),Yue=n(yZ,"STRONG",{});var k2t=s(Yue);Aar=r(k2t,"not"),k2t.forEach(t),yar=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=n(yZ,"A",{href:!0});var S2t=s(bz);Lar=r(S2t,"from_pretrained()"),S2t.forEach(t),xar=r(yZ," to load the model weights."),yZ.forEach(t),$ar=i(aA),T(AT.$$.fragment,aA),aA.forEach(t),kar=i(cl),bo=n(cl,"DIV",{class:!0});var Ma=s(bo);T(GL.$$.fragment,Ma),Sar=i(Ma),Kue=n(Ma,"P",{});var R2t=s(Kue);Rar=r(R2t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),R2t.forEach(t),Bar=i(Ma),Ua=n(Ma,"P",{});var nA=s(Ua);Par=r(nA,"The model class to instantiate is selected based on the "),Zue=n(nA,"CODE",{});var B2t=s(Zue);Iar=r(B2t,"model_type"),B2t.forEach(t),qar=r(nA,` property of the config object (either
passed as an argument or loaded from `),e2e=n(nA,"CODE",{});var P2t=s(e2e);Nar=r(P2t,"pretrained_model_name_or_path"),P2t.forEach(t),jar=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=n(nA,"CODE",{});var I2t=s(o2e);Dar=r(I2t,"pretrained_model_name_or_path"),I2t.forEach(t),Gar=r(nA,":"),nA.forEach(t),Oar=i(Ma),Ja=n(Ma,"UL",{});var sA=s(Ja);yT=n(sA,"LI",{});var oke=s(yT);r2e=n(oke,"STRONG",{});var q2t=s(r2e);Var=r(q2t,"beit"),q2t.forEach(t),Xar=r(oke," \u2014 "),vz=n(oke,"A",{href:!0});var N2t=s(vz);zar=r(N2t,"BeitForSemanticSegmentation"),N2t.forEach(t),War=r(oke," (BEiT model)"),oke.forEach(t),Qar=i(sA),LT=n(sA,"LI",{});var rke=s(LT);t2e=n(rke,"STRONG",{});var j2t=s(t2e);Har=r(j2t,"data2vec-vision"),j2t.forEach(t),Uar=r(rke," \u2014 "),Fz=n(rke,"A",{href:!0});var D2t=s(Fz);Jar=r(D2t,"Data2VecVisionForSemanticSegmentation"),D2t.forEach(t),Yar=r(rke," (Data2VecVision model)"),rke.forEach(t),Kar=i(sA),xT=n(sA,"LI",{});var tke=s(xT);a2e=n(tke,"STRONG",{});var G2t=s(a2e);Zar=r(G2t,"dpt"),G2t.forEach(t),enr=r(tke," \u2014 "),Tz=n(tke,"A",{href:!0});var O2t=s(Tz);onr=r(O2t,"DPTForSemanticSegmentation"),O2t.forEach(t),rnr=r(tke," (DPT model)"),tke.forEach(t),tnr=i(sA),$T=n(sA,"LI",{});var ake=s($T);n2e=n(ake,"STRONG",{});var V2t=s(n2e);anr=r(V2t,"segformer"),V2t.forEach(t),nnr=r(ake," \u2014 "),Mz=n(ake,"A",{href:!0});var X2t=s(Mz);snr=r(X2t,"SegformerForSemanticSegmentation"),X2t.forEach(t),lnr=r(ake," (SegFormer model)"),ake.forEach(t),sA.forEach(t),inr=i(Ma),kT=n(Ma,"P",{});var nke=s(kT);dnr=r(nke,"The model is set in evaluation mode by default using "),s2e=n(nke,"CODE",{});var z2t=s(s2e);cnr=r(z2t,"model.eval()"),z2t.forEach(t),fnr=r(nke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l2e=n(nke,"CODE",{});var W2t=s(l2e);mnr=r(W2t,"model.train()"),W2t.forEach(t),nke.forEach(t),gnr=i(Ma),T(ST.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),Hqe=i(f),qd=n(f,"H2",{class:!0});var eDe=s(qd);RT=n(eDe,"A",{id:!0,class:!0,href:!0});var Q2t=s(RT);i2e=n(Q2t,"SPAN",{});var H2t=s(i2e);T(OL.$$.fragment,H2t),H2t.forEach(t),Q2t.forEach(t),hnr=i(eDe),d2e=n(eDe,"SPAN",{});var U2t=s(d2e);pnr=r(U2t,"AutoModelForInstanceSegmentation"),U2t.forEach(t),eDe.forEach(t),Uqe=i(f),Jo=n(f,"DIV",{class:!0});var fl=s(Jo);T(VL.$$.fragment,fl),_nr=i(fl),Nd=n(fl,"P",{});var LZ=s(Nd);unr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Ez=n(LZ,"A",{href:!0});var J2t=s(Ez);bnr=r(J2t,"from_pretrained()"),J2t.forEach(t),vnr=r(LZ," class method or the "),Cz=n(LZ,"A",{href:!0});var Y2t=s(Cz);Fnr=r(Y2t,"from_config()"),Y2t.forEach(t),Tnr=r(LZ,` class
method.`),LZ.forEach(t),Mnr=i(fl),XL=n(fl,"P",{});var oDe=s(XL);Enr=r(oDe,"This class cannot be instantiated directly using "),c2e=n(oDe,"CODE",{});var K2t=s(c2e);Cnr=r(K2t,"__init__()"),K2t.forEach(t),wnr=r(oDe," (throws an error)."),oDe.forEach(t),Anr=i(fl),At=n(fl,"DIV",{class:!0});var lA=s(At);T(zL.$$.fragment,lA),ynr=i(lA),f2e=n(lA,"P",{});var Z2t=s(f2e);Lnr=r(Z2t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Z2t.forEach(t),xnr=i(lA),jd=n(lA,"P",{});var xZ=s(jd);$nr=r(xZ,`Note:
Loading a model from its configuration file does `),m2e=n(xZ,"STRONG",{});var e1t=s(m2e);knr=r(e1t,"not"),e1t.forEach(t),Snr=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=n(xZ,"A",{href:!0});var o1t=s(wz);Rnr=r(o1t,"from_pretrained()"),o1t.forEach(t),Bnr=r(xZ," to load the model weights."),xZ.forEach(t),Pnr=i(lA),T(BT.$$.fragment,lA),lA.forEach(t),Inr=i(fl),vo=n(fl,"DIV",{class:!0});var Ea=s(vo);T(WL.$$.fragment,Ea),qnr=i(Ea),g2e=n(Ea,"P",{});var r1t=s(g2e);Nnr=r(r1t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),r1t.forEach(t),jnr=i(Ea),Ya=n(Ea,"P",{});var iA=s(Ya);Dnr=r(iA,"The model class to instantiate is selected based on the "),h2e=n(iA,"CODE",{});var t1t=s(h2e);Gnr=r(t1t,"model_type"),t1t.forEach(t),Onr=r(iA,` property of the config object (either
passed as an argument or loaded from `),p2e=n(iA,"CODE",{});var a1t=s(p2e);Vnr=r(a1t,"pretrained_model_name_or_path"),a1t.forEach(t),Xnr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=n(iA,"CODE",{});var n1t=s(_2e);znr=r(n1t,"pretrained_model_name_or_path"),n1t.forEach(t),Wnr=r(iA,":"),iA.forEach(t),Qnr=i(Ea),u2e=n(Ea,"UL",{});var s1t=s(u2e);PT=n(s1t,"LI",{});var ske=s(PT);b2e=n(ske,"STRONG",{});var l1t=s(b2e);Hnr=r(l1t,"maskformer"),l1t.forEach(t),Unr=r(ske," \u2014 "),Az=n(ske,"A",{href:!0});var i1t=s(Az);Jnr=r(i1t,"MaskFormerForInstanceSegmentation"),i1t.forEach(t),Ynr=r(ske," (MaskFormer model)"),ske.forEach(t),s1t.forEach(t),Knr=i(Ea),IT=n(Ea,"P",{});var lke=s(IT);Znr=r(lke,"The model is set in evaluation mode by default using "),v2e=n(lke,"CODE",{});var d1t=s(v2e);esr=r(d1t,"model.eval()"),d1t.forEach(t),osr=r(lke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F2e=n(lke,"CODE",{});var c1t=s(F2e);rsr=r(c1t,"model.train()"),c1t.forEach(t),lke.forEach(t),tsr=i(Ea),T(qT.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),Jqe=i(f),Dd=n(f,"H2",{class:!0});var rDe=s(Dd);NT=n(rDe,"A",{id:!0,class:!0,href:!0});var f1t=s(NT);T2e=n(f1t,"SPAN",{});var m1t=s(T2e);T(QL.$$.fragment,m1t),m1t.forEach(t),f1t.forEach(t),asr=i(rDe),M2e=n(rDe,"SPAN",{});var g1t=s(M2e);nsr=r(g1t,"TFAutoModel"),g1t.forEach(t),rDe.forEach(t),Yqe=i(f),Yo=n(f,"DIV",{class:!0});var ml=s(Yo);T(HL.$$.fragment,ml),ssr=i(ml),Gd=n(ml,"P",{});var $Z=s(Gd);lsr=r($Z,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yz=n($Z,"A",{href:!0});var h1t=s(yz);isr=r(h1t,"from_pretrained()"),h1t.forEach(t),dsr=r($Z," class method or the "),Lz=n($Z,"A",{href:!0});var p1t=s(Lz);csr=r(p1t,"from_config()"),p1t.forEach(t),fsr=r($Z,` class
method.`),$Z.forEach(t),msr=i(ml),UL=n(ml,"P",{});var tDe=s(UL);gsr=r(tDe,"This class cannot be instantiated directly using "),E2e=n(tDe,"CODE",{});var _1t=s(E2e);hsr=r(_1t,"__init__()"),_1t.forEach(t),psr=r(tDe," (throws an error)."),tDe.forEach(t),_sr=i(ml),yt=n(ml,"DIV",{class:!0});var dA=s(yt);T(JL.$$.fragment,dA),usr=i(dA),C2e=n(dA,"P",{});var u1t=s(C2e);bsr=r(u1t,"Instantiates one of the base model classes of the library from a configuration."),u1t.forEach(t),vsr=i(dA),Od=n(dA,"P",{});var kZ=s(Od);Fsr=r(kZ,`Note:
Loading a model from its configuration file does `),w2e=n(kZ,"STRONG",{});var b1t=s(w2e);Tsr=r(b1t,"not"),b1t.forEach(t),Msr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=n(kZ,"A",{href:!0});var v1t=s(xz);Esr=r(v1t,"from_pretrained()"),v1t.forEach(t),Csr=r(kZ," to load the model weights."),kZ.forEach(t),wsr=i(dA),T(jT.$$.fragment,dA),dA.forEach(t),Asr=i(ml),wr=n(ml,"DIV",{class:!0});var gl=s(wr);T(YL.$$.fragment,gl),ysr=i(gl),A2e=n(gl,"P",{});var F1t=s(A2e);Lsr=r(F1t,"Instantiate one of the base model classes of the library from a pretrained model."),F1t.forEach(t),xsr=i(gl),Ka=n(gl,"P",{});var cA=s(Ka);$sr=r(cA,"The model class to instantiate is selected based on the "),y2e=n(cA,"CODE",{});var T1t=s(y2e);ksr=r(T1t,"model_type"),T1t.forEach(t),Ssr=r(cA,` property of the config object (either
passed as an argument or loaded from `),L2e=n(cA,"CODE",{});var M1t=s(L2e);Rsr=r(M1t,"pretrained_model_name_or_path"),M1t.forEach(t),Bsr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=n(cA,"CODE",{});var E1t=s(x2e);Psr=r(E1t,"pretrained_model_name_or_path"),E1t.forEach(t),Isr=r(cA,":"),cA.forEach(t),qsr=i(gl),N=n(gl,"UL",{});var D=s(N);DT=n(D,"LI",{});var ike=s(DT);$2e=n(ike,"STRONG",{});var C1t=s($2e);Nsr=r(C1t,"albert"),C1t.forEach(t),jsr=r(ike," \u2014 "),$z=n(ike,"A",{href:!0});var w1t=s($z);Dsr=r(w1t,"TFAlbertModel"),w1t.forEach(t),Gsr=r(ike," (ALBERT model)"),ike.forEach(t),Osr=i(D),GT=n(D,"LI",{});var dke=s(GT);k2e=n(dke,"STRONG",{});var A1t=s(k2e);Vsr=r(A1t,"bart"),A1t.forEach(t),Xsr=r(dke," \u2014 "),kz=n(dke,"A",{href:!0});var y1t=s(kz);zsr=r(y1t,"TFBartModel"),y1t.forEach(t),Wsr=r(dke," (BART model)"),dke.forEach(t),Qsr=i(D),OT=n(D,"LI",{});var cke=s(OT);S2e=n(cke,"STRONG",{});var L1t=s(S2e);Hsr=r(L1t,"bert"),L1t.forEach(t),Usr=r(cke," \u2014 "),Sz=n(cke,"A",{href:!0});var x1t=s(Sz);Jsr=r(x1t,"TFBertModel"),x1t.forEach(t),Ysr=r(cke," (BERT model)"),cke.forEach(t),Ksr=i(D),VT=n(D,"LI",{});var fke=s(VT);R2e=n(fke,"STRONG",{});var $1t=s(R2e);Zsr=r($1t,"blenderbot"),$1t.forEach(t),elr=r(fke," \u2014 "),Rz=n(fke,"A",{href:!0});var k1t=s(Rz);olr=r(k1t,"TFBlenderbotModel"),k1t.forEach(t),rlr=r(fke," (Blenderbot model)"),fke.forEach(t),tlr=i(D),XT=n(D,"LI",{});var mke=s(XT);B2e=n(mke,"STRONG",{});var S1t=s(B2e);alr=r(S1t,"blenderbot-small"),S1t.forEach(t),nlr=r(mke," \u2014 "),Bz=n(mke,"A",{href:!0});var R1t=s(Bz);slr=r(R1t,"TFBlenderbotSmallModel"),R1t.forEach(t),llr=r(mke," (BlenderbotSmall model)"),mke.forEach(t),ilr=i(D),zT=n(D,"LI",{});var gke=s(zT);P2e=n(gke,"STRONG",{});var B1t=s(P2e);dlr=r(B1t,"camembert"),B1t.forEach(t),clr=r(gke," \u2014 "),Pz=n(gke,"A",{href:!0});var P1t=s(Pz);flr=r(P1t,"TFCamembertModel"),P1t.forEach(t),mlr=r(gke," (CamemBERT model)"),gke.forEach(t),glr=i(D),WT=n(D,"LI",{});var hke=s(WT);I2e=n(hke,"STRONG",{});var I1t=s(I2e);hlr=r(I1t,"clip"),I1t.forEach(t),plr=r(hke," \u2014 "),Iz=n(hke,"A",{href:!0});var q1t=s(Iz);_lr=r(q1t,"TFCLIPModel"),q1t.forEach(t),ulr=r(hke," (CLIP model)"),hke.forEach(t),blr=i(D),QT=n(D,"LI",{});var pke=s(QT);q2e=n(pke,"STRONG",{});var N1t=s(q2e);vlr=r(N1t,"convbert"),N1t.forEach(t),Flr=r(pke," \u2014 "),qz=n(pke,"A",{href:!0});var j1t=s(qz);Tlr=r(j1t,"TFConvBertModel"),j1t.forEach(t),Mlr=r(pke," (ConvBERT model)"),pke.forEach(t),Elr=i(D),HT=n(D,"LI",{});var _ke=s(HT);N2e=n(_ke,"STRONG",{});var D1t=s(N2e);Clr=r(D1t,"convnext"),D1t.forEach(t),wlr=r(_ke," \u2014 "),Nz=n(_ke,"A",{href:!0});var G1t=s(Nz);Alr=r(G1t,"TFConvNextModel"),G1t.forEach(t),ylr=r(_ke," (ConvNext model)"),_ke.forEach(t),Llr=i(D),UT=n(D,"LI",{});var uke=s(UT);j2e=n(uke,"STRONG",{});var O1t=s(j2e);xlr=r(O1t,"ctrl"),O1t.forEach(t),$lr=r(uke," \u2014 "),jz=n(uke,"A",{href:!0});var V1t=s(jz);klr=r(V1t,"TFCTRLModel"),V1t.forEach(t),Slr=r(uke," (CTRL model)"),uke.forEach(t),Rlr=i(D),JT=n(D,"LI",{});var bke=s(JT);D2e=n(bke,"STRONG",{});var X1t=s(D2e);Blr=r(X1t,"data2vec-vision"),X1t.forEach(t),Plr=r(bke," \u2014 "),Dz=n(bke,"A",{href:!0});var z1t=s(Dz);Ilr=r(z1t,"TFData2VecVisionModel"),z1t.forEach(t),qlr=r(bke," (Data2VecVision model)"),bke.forEach(t),Nlr=i(D),YT=n(D,"LI",{});var vke=s(YT);G2e=n(vke,"STRONG",{});var W1t=s(G2e);jlr=r(W1t,"deberta"),W1t.forEach(t),Dlr=r(vke," \u2014 "),Gz=n(vke,"A",{href:!0});var Q1t=s(Gz);Glr=r(Q1t,"TFDebertaModel"),Q1t.forEach(t),Olr=r(vke," (DeBERTa model)"),vke.forEach(t),Vlr=i(D),KT=n(D,"LI",{});var Fke=s(KT);O2e=n(Fke,"STRONG",{});var H1t=s(O2e);Xlr=r(H1t,"deberta-v2"),H1t.forEach(t),zlr=r(Fke," \u2014 "),Oz=n(Fke,"A",{href:!0});var U1t=s(Oz);Wlr=r(U1t,"TFDebertaV2Model"),U1t.forEach(t),Qlr=r(Fke," (DeBERTa-v2 model)"),Fke.forEach(t),Hlr=i(D),ZT=n(D,"LI",{});var Tke=s(ZT);V2e=n(Tke,"STRONG",{});var J1t=s(V2e);Ulr=r(J1t,"distilbert"),J1t.forEach(t),Jlr=r(Tke," \u2014 "),Vz=n(Tke,"A",{href:!0});var Y1t=s(Vz);Ylr=r(Y1t,"TFDistilBertModel"),Y1t.forEach(t),Klr=r(Tke," (DistilBERT model)"),Tke.forEach(t),Zlr=i(D),e7=n(D,"LI",{});var Mke=s(e7);X2e=n(Mke,"STRONG",{});var K1t=s(X2e);eir=r(K1t,"dpr"),K1t.forEach(t),oir=r(Mke," \u2014 "),Xz=n(Mke,"A",{href:!0});var Z1t=s(Xz);rir=r(Z1t,"TFDPRQuestionEncoder"),Z1t.forEach(t),tir=r(Mke," (DPR model)"),Mke.forEach(t),air=i(D),o7=n(D,"LI",{});var Eke=s(o7);z2e=n(Eke,"STRONG",{});var ebt=s(z2e);nir=r(ebt,"electra"),ebt.forEach(t),sir=r(Eke," \u2014 "),zz=n(Eke,"A",{href:!0});var obt=s(zz);lir=r(obt,"TFElectraModel"),obt.forEach(t),iir=r(Eke," (ELECTRA model)"),Eke.forEach(t),dir=i(D),r7=n(D,"LI",{});var Cke=s(r7);W2e=n(Cke,"STRONG",{});var rbt=s(W2e);cir=r(rbt,"flaubert"),rbt.forEach(t),fir=r(Cke," \u2014 "),Wz=n(Cke,"A",{href:!0});var tbt=s(Wz);mir=r(tbt,"TFFlaubertModel"),tbt.forEach(t),gir=r(Cke," (FlauBERT model)"),Cke.forEach(t),hir=i(D),Ps=n(D,"LI",{});var L$=s(Ps);Q2e=n(L$,"STRONG",{});var abt=s(Q2e);pir=r(abt,"funnel"),abt.forEach(t),_ir=r(L$," \u2014 "),Qz=n(L$,"A",{href:!0});var nbt=s(Qz);uir=r(nbt,"TFFunnelModel"),nbt.forEach(t),bir=r(L$," or "),Hz=n(L$,"A",{href:!0});var sbt=s(Hz);vir=r(sbt,"TFFunnelBaseModel"),sbt.forEach(t),Fir=r(L$," (Funnel Transformer model)"),L$.forEach(t),Tir=i(D),t7=n(D,"LI",{});var wke=s(t7);H2e=n(wke,"STRONG",{});var lbt=s(H2e);Mir=r(lbt,"gpt2"),lbt.forEach(t),Eir=r(wke," \u2014 "),Uz=n(wke,"A",{href:!0});var ibt=s(Uz);Cir=r(ibt,"TFGPT2Model"),ibt.forEach(t),wir=r(wke," (OpenAI GPT-2 model)"),wke.forEach(t),Air=i(D),a7=n(D,"LI",{});var Ake=s(a7);U2e=n(Ake,"STRONG",{});var dbt=s(U2e);yir=r(dbt,"gptj"),dbt.forEach(t),Lir=r(Ake," \u2014 "),Jz=n(Ake,"A",{href:!0});var cbt=s(Jz);xir=r(cbt,"TFGPTJModel"),cbt.forEach(t),$ir=r(Ake," (GPT-J model)"),Ake.forEach(t),kir=i(D),n7=n(D,"LI",{});var yke=s(n7);J2e=n(yke,"STRONG",{});var fbt=s(J2e);Sir=r(fbt,"hubert"),fbt.forEach(t),Rir=r(yke," \u2014 "),Yz=n(yke,"A",{href:!0});var mbt=s(Yz);Bir=r(mbt,"TFHubertModel"),mbt.forEach(t),Pir=r(yke," (Hubert model)"),yke.forEach(t),Iir=i(D),s7=n(D,"LI",{});var Lke=s(s7);Y2e=n(Lke,"STRONG",{});var gbt=s(Y2e);qir=r(gbt,"layoutlm"),gbt.forEach(t),Nir=r(Lke," \u2014 "),Kz=n(Lke,"A",{href:!0});var hbt=s(Kz);jir=r(hbt,"TFLayoutLMModel"),hbt.forEach(t),Dir=r(Lke," (LayoutLM model)"),Lke.forEach(t),Gir=i(D),l7=n(D,"LI",{});var xke=s(l7);K2e=n(xke,"STRONG",{});var pbt=s(K2e);Oir=r(pbt,"led"),pbt.forEach(t),Vir=r(xke," \u2014 "),Zz=n(xke,"A",{href:!0});var _bt=s(Zz);Xir=r(_bt,"TFLEDModel"),_bt.forEach(t),zir=r(xke," (LED model)"),xke.forEach(t),Wir=i(D),i7=n(D,"LI",{});var $ke=s(i7);Z2e=n($ke,"STRONG",{});var ubt=s(Z2e);Qir=r(ubt,"longformer"),ubt.forEach(t),Hir=r($ke," \u2014 "),eW=n($ke,"A",{href:!0});var bbt=s(eW);Uir=r(bbt,"TFLongformerModel"),bbt.forEach(t),Jir=r($ke," (Longformer model)"),$ke.forEach(t),Yir=i(D),d7=n(D,"LI",{});var kke=s(d7);e1e=n(kke,"STRONG",{});var vbt=s(e1e);Kir=r(vbt,"lxmert"),vbt.forEach(t),Zir=r(kke," \u2014 "),oW=n(kke,"A",{href:!0});var Fbt=s(oW);edr=r(Fbt,"TFLxmertModel"),Fbt.forEach(t),odr=r(kke," (LXMERT model)"),kke.forEach(t),rdr=i(D),c7=n(D,"LI",{});var Ske=s(c7);o1e=n(Ske,"STRONG",{});var Tbt=s(o1e);tdr=r(Tbt,"marian"),Tbt.forEach(t),adr=r(Ske," \u2014 "),rW=n(Ske,"A",{href:!0});var Mbt=s(rW);ndr=r(Mbt,"TFMarianModel"),Mbt.forEach(t),sdr=r(Ske," (Marian model)"),Ske.forEach(t),ldr=i(D),f7=n(D,"LI",{});var Rke=s(f7);r1e=n(Rke,"STRONG",{});var Ebt=s(r1e);idr=r(Ebt,"mbart"),Ebt.forEach(t),ddr=r(Rke," \u2014 "),tW=n(Rke,"A",{href:!0});var Cbt=s(tW);cdr=r(Cbt,"TFMBartModel"),Cbt.forEach(t),fdr=r(Rke," (mBART model)"),Rke.forEach(t),mdr=i(D),m7=n(D,"LI",{});var Bke=s(m7);t1e=n(Bke,"STRONG",{});var wbt=s(t1e);gdr=r(wbt,"mobilebert"),wbt.forEach(t),hdr=r(Bke," \u2014 "),aW=n(Bke,"A",{href:!0});var Abt=s(aW);pdr=r(Abt,"TFMobileBertModel"),Abt.forEach(t),_dr=r(Bke," (MobileBERT model)"),Bke.forEach(t),udr=i(D),g7=n(D,"LI",{});var Pke=s(g7);a1e=n(Pke,"STRONG",{});var ybt=s(a1e);bdr=r(ybt,"mpnet"),ybt.forEach(t),vdr=r(Pke," \u2014 "),nW=n(Pke,"A",{href:!0});var Lbt=s(nW);Fdr=r(Lbt,"TFMPNetModel"),Lbt.forEach(t),Tdr=r(Pke," (MPNet model)"),Pke.forEach(t),Mdr=i(D),h7=n(D,"LI",{});var Ike=s(h7);n1e=n(Ike,"STRONG",{});var xbt=s(n1e);Edr=r(xbt,"mt5"),xbt.forEach(t),Cdr=r(Ike," \u2014 "),sW=n(Ike,"A",{href:!0});var $bt=s(sW);wdr=r($bt,"TFMT5Model"),$bt.forEach(t),Adr=r(Ike," (mT5 model)"),Ike.forEach(t),ydr=i(D),p7=n(D,"LI",{});var qke=s(p7);s1e=n(qke,"STRONG",{});var kbt=s(s1e);Ldr=r(kbt,"openai-gpt"),kbt.forEach(t),xdr=r(qke," \u2014 "),lW=n(qke,"A",{href:!0});var Sbt=s(lW);$dr=r(Sbt,"TFOpenAIGPTModel"),Sbt.forEach(t),kdr=r(qke," (OpenAI GPT model)"),qke.forEach(t),Sdr=i(D),_7=n(D,"LI",{});var Nke=s(_7);l1e=n(Nke,"STRONG",{});var Rbt=s(l1e);Rdr=r(Rbt,"pegasus"),Rbt.forEach(t),Bdr=r(Nke," \u2014 "),iW=n(Nke,"A",{href:!0});var Bbt=s(iW);Pdr=r(Bbt,"TFPegasusModel"),Bbt.forEach(t),Idr=r(Nke," (Pegasus model)"),Nke.forEach(t),qdr=i(D),u7=n(D,"LI",{});var jke=s(u7);i1e=n(jke,"STRONG",{});var Pbt=s(i1e);Ndr=r(Pbt,"rembert"),Pbt.forEach(t),jdr=r(jke," \u2014 "),dW=n(jke,"A",{href:!0});var Ibt=s(dW);Ddr=r(Ibt,"TFRemBertModel"),Ibt.forEach(t),Gdr=r(jke," (RemBERT model)"),jke.forEach(t),Odr=i(D),b7=n(D,"LI",{});var Dke=s(b7);d1e=n(Dke,"STRONG",{});var qbt=s(d1e);Vdr=r(qbt,"roberta"),qbt.forEach(t),Xdr=r(Dke," \u2014 "),cW=n(Dke,"A",{href:!0});var Nbt=s(cW);zdr=r(Nbt,"TFRobertaModel"),Nbt.forEach(t),Wdr=r(Dke," (RoBERTa model)"),Dke.forEach(t),Qdr=i(D),v7=n(D,"LI",{});var Gke=s(v7);c1e=n(Gke,"STRONG",{});var jbt=s(c1e);Hdr=r(jbt,"roformer"),jbt.forEach(t),Udr=r(Gke," \u2014 "),fW=n(Gke,"A",{href:!0});var Dbt=s(fW);Jdr=r(Dbt,"TFRoFormerModel"),Dbt.forEach(t),Ydr=r(Gke," (RoFormer model)"),Gke.forEach(t),Kdr=i(D),F7=n(D,"LI",{});var Oke=s(F7);f1e=n(Oke,"STRONG",{});var Gbt=s(f1e);Zdr=r(Gbt,"speech_to_text"),Gbt.forEach(t),ecr=r(Oke," \u2014 "),mW=n(Oke,"A",{href:!0});var Obt=s(mW);ocr=r(Obt,"TFSpeech2TextModel"),Obt.forEach(t),rcr=r(Oke," (Speech2Text model)"),Oke.forEach(t),tcr=i(D),T7=n(D,"LI",{});var Vke=s(T7);m1e=n(Vke,"STRONG",{});var Vbt=s(m1e);acr=r(Vbt,"swin"),Vbt.forEach(t),ncr=r(Vke," \u2014 "),gW=n(Vke,"A",{href:!0});var Xbt=s(gW);scr=r(Xbt,"TFSwinModel"),Xbt.forEach(t),lcr=r(Vke," (Swin model)"),Vke.forEach(t),icr=i(D),M7=n(D,"LI",{});var Xke=s(M7);g1e=n(Xke,"STRONG",{});var zbt=s(g1e);dcr=r(zbt,"t5"),zbt.forEach(t),ccr=r(Xke," \u2014 "),hW=n(Xke,"A",{href:!0});var Wbt=s(hW);fcr=r(Wbt,"TFT5Model"),Wbt.forEach(t),mcr=r(Xke," (T5 model)"),Xke.forEach(t),gcr=i(D),E7=n(D,"LI",{});var zke=s(E7);h1e=n(zke,"STRONG",{});var Qbt=s(h1e);hcr=r(Qbt,"tapas"),Qbt.forEach(t),pcr=r(zke," \u2014 "),pW=n(zke,"A",{href:!0});var Hbt=s(pW);_cr=r(Hbt,"TFTapasModel"),Hbt.forEach(t),ucr=r(zke," (TAPAS model)"),zke.forEach(t),bcr=i(D),C7=n(D,"LI",{});var Wke=s(C7);p1e=n(Wke,"STRONG",{});var Ubt=s(p1e);vcr=r(Ubt,"transfo-xl"),Ubt.forEach(t),Fcr=r(Wke," \u2014 "),_W=n(Wke,"A",{href:!0});var Jbt=s(_W);Tcr=r(Jbt,"TFTransfoXLModel"),Jbt.forEach(t),Mcr=r(Wke," (Transformer-XL model)"),Wke.forEach(t),Ecr=i(D),w7=n(D,"LI",{});var Qke=s(w7);_1e=n(Qke,"STRONG",{});var Ybt=s(_1e);Ccr=r(Ybt,"vit"),Ybt.forEach(t),wcr=r(Qke," \u2014 "),uW=n(Qke,"A",{href:!0});var Kbt=s(uW);Acr=r(Kbt,"TFViTModel"),Kbt.forEach(t),ycr=r(Qke," (ViT model)"),Qke.forEach(t),Lcr=i(D),A7=n(D,"LI",{});var Hke=s(A7);u1e=n(Hke,"STRONG",{});var Zbt=s(u1e);xcr=r(Zbt,"vit_mae"),Zbt.forEach(t),$cr=r(Hke," \u2014 "),bW=n(Hke,"A",{href:!0});var evt=s(bW);kcr=r(evt,"TFViTMAEModel"),evt.forEach(t),Scr=r(Hke," (ViTMAE model)"),Hke.forEach(t),Rcr=i(D),y7=n(D,"LI",{});var Uke=s(y7);b1e=n(Uke,"STRONG",{});var ovt=s(b1e);Bcr=r(ovt,"wav2vec2"),ovt.forEach(t),Pcr=r(Uke," \u2014 "),vW=n(Uke,"A",{href:!0});var rvt=s(vW);Icr=r(rvt,"TFWav2Vec2Model"),rvt.forEach(t),qcr=r(Uke," (Wav2Vec2 model)"),Uke.forEach(t),Ncr=i(D),L7=n(D,"LI",{});var Jke=s(L7);v1e=n(Jke,"STRONG",{});var tvt=s(v1e);jcr=r(tvt,"xlm"),tvt.forEach(t),Dcr=r(Jke," \u2014 "),FW=n(Jke,"A",{href:!0});var avt=s(FW);Gcr=r(avt,"TFXLMModel"),avt.forEach(t),Ocr=r(Jke," (XLM model)"),Jke.forEach(t),Vcr=i(D),x7=n(D,"LI",{});var Yke=s(x7);F1e=n(Yke,"STRONG",{});var nvt=s(F1e);Xcr=r(nvt,"xlm-roberta"),nvt.forEach(t),zcr=r(Yke," \u2014 "),TW=n(Yke,"A",{href:!0});var svt=s(TW);Wcr=r(svt,"TFXLMRobertaModel"),svt.forEach(t),Qcr=r(Yke," (XLM-RoBERTa model)"),Yke.forEach(t),Hcr=i(D),$7=n(D,"LI",{});var Kke=s($7);T1e=n(Kke,"STRONG",{});var lvt=s(T1e);Ucr=r(lvt,"xlnet"),lvt.forEach(t),Jcr=r(Kke," \u2014 "),MW=n(Kke,"A",{href:!0});var ivt=s(MW);Ycr=r(ivt,"TFXLNetModel"),ivt.forEach(t),Kcr=r(Kke," (XLNet model)"),Kke.forEach(t),D.forEach(t),Zcr=i(gl),T(k7.$$.fragment,gl),gl.forEach(t),ml.forEach(t),Kqe=i(f),Vd=n(f,"H2",{class:!0});var aDe=s(Vd);S7=n(aDe,"A",{id:!0,class:!0,href:!0});var dvt=s(S7);M1e=n(dvt,"SPAN",{});var cvt=s(M1e);T(KL.$$.fragment,cvt),cvt.forEach(t),dvt.forEach(t),efr=i(aDe),E1e=n(aDe,"SPAN",{});var fvt=s(E1e);ofr=r(fvt,"TFAutoModelForPreTraining"),fvt.forEach(t),aDe.forEach(t),Zqe=i(f),Ko=n(f,"DIV",{class:!0});var hl=s(Ko);T(ZL.$$.fragment,hl),rfr=i(hl),Xd=n(hl,"P",{});var SZ=s(Xd);tfr=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),EW=n(SZ,"A",{href:!0});var mvt=s(EW);afr=r(mvt,"from_pretrained()"),mvt.forEach(t),nfr=r(SZ," class method or the "),CW=n(SZ,"A",{href:!0});var gvt=s(CW);sfr=r(gvt,"from_config()"),gvt.forEach(t),lfr=r(SZ,` class
method.`),SZ.forEach(t),ifr=i(hl),e8=n(hl,"P",{});var nDe=s(e8);dfr=r(nDe,"This class cannot be instantiated directly using "),C1e=n(nDe,"CODE",{});var hvt=s(C1e);cfr=r(hvt,"__init__()"),hvt.forEach(t),ffr=r(nDe," (throws an error)."),nDe.forEach(t),mfr=i(hl),Lt=n(hl,"DIV",{class:!0});var fA=s(Lt);T(o8.$$.fragment,fA),gfr=i(fA),w1e=n(fA,"P",{});var pvt=s(w1e);hfr=r(pvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pvt.forEach(t),pfr=i(fA),zd=n(fA,"P",{});var RZ=s(zd);_fr=r(RZ,`Note:
Loading a model from its configuration file does `),A1e=n(RZ,"STRONG",{});var _vt=s(A1e);ufr=r(_vt,"not"),_vt.forEach(t),bfr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=n(RZ,"A",{href:!0});var uvt=s(wW);vfr=r(uvt,"from_pretrained()"),uvt.forEach(t),Ffr=r(RZ," to load the model weights."),RZ.forEach(t),Tfr=i(fA),T(R7.$$.fragment,fA),fA.forEach(t),Mfr=i(hl),Ar=n(hl,"DIV",{class:!0});var pl=s(Ar);T(r8.$$.fragment,pl),Efr=i(pl),y1e=n(pl,"P",{});var bvt=s(y1e);Cfr=r(bvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),bvt.forEach(t),wfr=i(pl),Za=n(pl,"P",{});var mA=s(Za);Afr=r(mA,"The model class to instantiate is selected based on the "),L1e=n(mA,"CODE",{});var vvt=s(L1e);yfr=r(vvt,"model_type"),vvt.forEach(t),Lfr=r(mA,` property of the config object (either
passed as an argument or loaded from `),x1e=n(mA,"CODE",{});var Fvt=s(x1e);xfr=r(Fvt,"pretrained_model_name_or_path"),Fvt.forEach(t),$fr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=n(mA,"CODE",{});var Tvt=s($1e);kfr=r(Tvt,"pretrained_model_name_or_path"),Tvt.forEach(t),Sfr=r(mA,":"),mA.forEach(t),Rfr=i(pl),se=n(pl,"UL",{});var le=s(se);B7=n(le,"LI",{});var Zke=s(B7);k1e=n(Zke,"STRONG",{});var Mvt=s(k1e);Bfr=r(Mvt,"albert"),Mvt.forEach(t),Pfr=r(Zke," \u2014 "),AW=n(Zke,"A",{href:!0});var Evt=s(AW);Ifr=r(Evt,"TFAlbertForPreTraining"),Evt.forEach(t),qfr=r(Zke," (ALBERT model)"),Zke.forEach(t),Nfr=i(le),P7=n(le,"LI",{});var eSe=s(P7);S1e=n(eSe,"STRONG",{});var Cvt=s(S1e);jfr=r(Cvt,"bart"),Cvt.forEach(t),Dfr=r(eSe," \u2014 "),yW=n(eSe,"A",{href:!0});var wvt=s(yW);Gfr=r(wvt,"TFBartForConditionalGeneration"),wvt.forEach(t),Ofr=r(eSe," (BART model)"),eSe.forEach(t),Vfr=i(le),I7=n(le,"LI",{});var oSe=s(I7);R1e=n(oSe,"STRONG",{});var Avt=s(R1e);Xfr=r(Avt,"bert"),Avt.forEach(t),zfr=r(oSe," \u2014 "),LW=n(oSe,"A",{href:!0});var yvt=s(LW);Wfr=r(yvt,"TFBertForPreTraining"),yvt.forEach(t),Qfr=r(oSe," (BERT model)"),oSe.forEach(t),Hfr=i(le),q7=n(le,"LI",{});var rSe=s(q7);B1e=n(rSe,"STRONG",{});var Lvt=s(B1e);Ufr=r(Lvt,"camembert"),Lvt.forEach(t),Jfr=r(rSe," \u2014 "),xW=n(rSe,"A",{href:!0});var xvt=s(xW);Yfr=r(xvt,"TFCamembertForMaskedLM"),xvt.forEach(t),Kfr=r(rSe," (CamemBERT model)"),rSe.forEach(t),Zfr=i(le),N7=n(le,"LI",{});var tSe=s(N7);P1e=n(tSe,"STRONG",{});var $vt=s(P1e);emr=r($vt,"ctrl"),$vt.forEach(t),omr=r(tSe," \u2014 "),$W=n(tSe,"A",{href:!0});var kvt=s($W);rmr=r(kvt,"TFCTRLLMHeadModel"),kvt.forEach(t),tmr=r(tSe," (CTRL model)"),tSe.forEach(t),amr=i(le),j7=n(le,"LI",{});var aSe=s(j7);I1e=n(aSe,"STRONG",{});var Svt=s(I1e);nmr=r(Svt,"distilbert"),Svt.forEach(t),smr=r(aSe," \u2014 "),kW=n(aSe,"A",{href:!0});var Rvt=s(kW);lmr=r(Rvt,"TFDistilBertForMaskedLM"),Rvt.forEach(t),imr=r(aSe," (DistilBERT model)"),aSe.forEach(t),dmr=i(le),D7=n(le,"LI",{});var nSe=s(D7);q1e=n(nSe,"STRONG",{});var Bvt=s(q1e);cmr=r(Bvt,"electra"),Bvt.forEach(t),fmr=r(nSe," \u2014 "),SW=n(nSe,"A",{href:!0});var Pvt=s(SW);mmr=r(Pvt,"TFElectraForPreTraining"),Pvt.forEach(t),gmr=r(nSe," (ELECTRA model)"),nSe.forEach(t),hmr=i(le),G7=n(le,"LI",{});var sSe=s(G7);N1e=n(sSe,"STRONG",{});var Ivt=s(N1e);pmr=r(Ivt,"flaubert"),Ivt.forEach(t),_mr=r(sSe," \u2014 "),RW=n(sSe,"A",{href:!0});var qvt=s(RW);umr=r(qvt,"TFFlaubertWithLMHeadModel"),qvt.forEach(t),bmr=r(sSe," (FlauBERT model)"),sSe.forEach(t),vmr=i(le),O7=n(le,"LI",{});var lSe=s(O7);j1e=n(lSe,"STRONG",{});var Nvt=s(j1e);Fmr=r(Nvt,"funnel"),Nvt.forEach(t),Tmr=r(lSe," \u2014 "),BW=n(lSe,"A",{href:!0});var jvt=s(BW);Mmr=r(jvt,"TFFunnelForPreTraining"),jvt.forEach(t),Emr=r(lSe," (Funnel Transformer model)"),lSe.forEach(t),Cmr=i(le),V7=n(le,"LI",{});var iSe=s(V7);D1e=n(iSe,"STRONG",{});var Dvt=s(D1e);wmr=r(Dvt,"gpt2"),Dvt.forEach(t),Amr=r(iSe," \u2014 "),PW=n(iSe,"A",{href:!0});var Gvt=s(PW);ymr=r(Gvt,"TFGPT2LMHeadModel"),Gvt.forEach(t),Lmr=r(iSe," (OpenAI GPT-2 model)"),iSe.forEach(t),xmr=i(le),X7=n(le,"LI",{});var dSe=s(X7);G1e=n(dSe,"STRONG",{});var Ovt=s(G1e);$mr=r(Ovt,"layoutlm"),Ovt.forEach(t),kmr=r(dSe," \u2014 "),IW=n(dSe,"A",{href:!0});var Vvt=s(IW);Smr=r(Vvt,"TFLayoutLMForMaskedLM"),Vvt.forEach(t),Rmr=r(dSe," (LayoutLM model)"),dSe.forEach(t),Bmr=i(le),z7=n(le,"LI",{});var cSe=s(z7);O1e=n(cSe,"STRONG",{});var Xvt=s(O1e);Pmr=r(Xvt,"lxmert"),Xvt.forEach(t),Imr=r(cSe," \u2014 "),qW=n(cSe,"A",{href:!0});var zvt=s(qW);qmr=r(zvt,"TFLxmertForPreTraining"),zvt.forEach(t),Nmr=r(cSe," (LXMERT model)"),cSe.forEach(t),jmr=i(le),W7=n(le,"LI",{});var fSe=s(W7);V1e=n(fSe,"STRONG",{});var Wvt=s(V1e);Dmr=r(Wvt,"mobilebert"),Wvt.forEach(t),Gmr=r(fSe," \u2014 "),NW=n(fSe,"A",{href:!0});var Qvt=s(NW);Omr=r(Qvt,"TFMobileBertForPreTraining"),Qvt.forEach(t),Vmr=r(fSe," (MobileBERT model)"),fSe.forEach(t),Xmr=i(le),Q7=n(le,"LI",{});var mSe=s(Q7);X1e=n(mSe,"STRONG",{});var Hvt=s(X1e);zmr=r(Hvt,"mpnet"),Hvt.forEach(t),Wmr=r(mSe," \u2014 "),jW=n(mSe,"A",{href:!0});var Uvt=s(jW);Qmr=r(Uvt,"TFMPNetForMaskedLM"),Uvt.forEach(t),Hmr=r(mSe," (MPNet model)"),mSe.forEach(t),Umr=i(le),H7=n(le,"LI",{});var gSe=s(H7);z1e=n(gSe,"STRONG",{});var Jvt=s(z1e);Jmr=r(Jvt,"openai-gpt"),Jvt.forEach(t),Ymr=r(gSe," \u2014 "),DW=n(gSe,"A",{href:!0});var Yvt=s(DW);Kmr=r(Yvt,"TFOpenAIGPTLMHeadModel"),Yvt.forEach(t),Zmr=r(gSe," (OpenAI GPT model)"),gSe.forEach(t),egr=i(le),U7=n(le,"LI",{});var hSe=s(U7);W1e=n(hSe,"STRONG",{});var Kvt=s(W1e);ogr=r(Kvt,"roberta"),Kvt.forEach(t),rgr=r(hSe," \u2014 "),GW=n(hSe,"A",{href:!0});var Zvt=s(GW);tgr=r(Zvt,"TFRobertaForMaskedLM"),Zvt.forEach(t),agr=r(hSe," (RoBERTa model)"),hSe.forEach(t),ngr=i(le),J7=n(le,"LI",{});var pSe=s(J7);Q1e=n(pSe,"STRONG",{});var eFt=s(Q1e);sgr=r(eFt,"t5"),eFt.forEach(t),lgr=r(pSe," \u2014 "),OW=n(pSe,"A",{href:!0});var oFt=s(OW);igr=r(oFt,"TFT5ForConditionalGeneration"),oFt.forEach(t),dgr=r(pSe," (T5 model)"),pSe.forEach(t),cgr=i(le),Y7=n(le,"LI",{});var _Se=s(Y7);H1e=n(_Se,"STRONG",{});var rFt=s(H1e);fgr=r(rFt,"tapas"),rFt.forEach(t),mgr=r(_Se," \u2014 "),VW=n(_Se,"A",{href:!0});var tFt=s(VW);ggr=r(tFt,"TFTapasForMaskedLM"),tFt.forEach(t),hgr=r(_Se," (TAPAS model)"),_Se.forEach(t),pgr=i(le),K7=n(le,"LI",{});var uSe=s(K7);U1e=n(uSe,"STRONG",{});var aFt=s(U1e);_gr=r(aFt,"transfo-xl"),aFt.forEach(t),ugr=r(uSe," \u2014 "),XW=n(uSe,"A",{href:!0});var nFt=s(XW);bgr=r(nFt,"TFTransfoXLLMHeadModel"),nFt.forEach(t),vgr=r(uSe," (Transformer-XL model)"),uSe.forEach(t),Fgr=i(le),Z7=n(le,"LI",{});var bSe=s(Z7);J1e=n(bSe,"STRONG",{});var sFt=s(J1e);Tgr=r(sFt,"vit_mae"),sFt.forEach(t),Mgr=r(bSe," \u2014 "),zW=n(bSe,"A",{href:!0});var lFt=s(zW);Egr=r(lFt,"TFViTMAEForPreTraining"),lFt.forEach(t),Cgr=r(bSe," (ViTMAE model)"),bSe.forEach(t),wgr=i(le),eM=n(le,"LI",{});var vSe=s(eM);Y1e=n(vSe,"STRONG",{});var iFt=s(Y1e);Agr=r(iFt,"xlm"),iFt.forEach(t),ygr=r(vSe," \u2014 "),WW=n(vSe,"A",{href:!0});var dFt=s(WW);Lgr=r(dFt,"TFXLMWithLMHeadModel"),dFt.forEach(t),xgr=r(vSe," (XLM model)"),vSe.forEach(t),$gr=i(le),oM=n(le,"LI",{});var FSe=s(oM);K1e=n(FSe,"STRONG",{});var cFt=s(K1e);kgr=r(cFt,"xlm-roberta"),cFt.forEach(t),Sgr=r(FSe," \u2014 "),QW=n(FSe,"A",{href:!0});var fFt=s(QW);Rgr=r(fFt,"TFXLMRobertaForMaskedLM"),fFt.forEach(t),Bgr=r(FSe," (XLM-RoBERTa model)"),FSe.forEach(t),Pgr=i(le),rM=n(le,"LI",{});var TSe=s(rM);Z1e=n(TSe,"STRONG",{});var mFt=s(Z1e);Igr=r(mFt,"xlnet"),mFt.forEach(t),qgr=r(TSe," \u2014 "),HW=n(TSe,"A",{href:!0});var gFt=s(HW);Ngr=r(gFt,"TFXLNetLMHeadModel"),gFt.forEach(t),jgr=r(TSe," (XLNet model)"),TSe.forEach(t),le.forEach(t),Dgr=i(pl),T(tM.$$.fragment,pl),pl.forEach(t),hl.forEach(t),eNe=i(f),Wd=n(f,"H2",{class:!0});var sDe=s(Wd);aM=n(sDe,"A",{id:!0,class:!0,href:!0});var hFt=s(aM);ebe=n(hFt,"SPAN",{});var pFt=s(ebe);T(t8.$$.fragment,pFt),pFt.forEach(t),hFt.forEach(t),Ggr=i(sDe),obe=n(sDe,"SPAN",{});var _Ft=s(obe);Ogr=r(_Ft,"TFAutoModelForCausalLM"),_Ft.forEach(t),sDe.forEach(t),oNe=i(f),Zo=n(f,"DIV",{class:!0});var _l=s(Zo);T(a8.$$.fragment,_l),Vgr=i(_l),Qd=n(_l,"P",{});var BZ=s(Qd);Xgr=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),UW=n(BZ,"A",{href:!0});var uFt=s(UW);zgr=r(uFt,"from_pretrained()"),uFt.forEach(t),Wgr=r(BZ," class method or the "),JW=n(BZ,"A",{href:!0});var bFt=s(JW);Qgr=r(bFt,"from_config()"),bFt.forEach(t),Hgr=r(BZ,` class
method.`),BZ.forEach(t),Ugr=i(_l),n8=n(_l,"P",{});var lDe=s(n8);Jgr=r(lDe,"This class cannot be instantiated directly using "),rbe=n(lDe,"CODE",{});var vFt=s(rbe);Ygr=r(vFt,"__init__()"),vFt.forEach(t),Kgr=r(lDe," (throws an error)."),lDe.forEach(t),Zgr=i(_l),xt=n(_l,"DIV",{class:!0});var gA=s(xt);T(s8.$$.fragment,gA),ehr=i(gA),tbe=n(gA,"P",{});var FFt=s(tbe);ohr=r(FFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FFt.forEach(t),rhr=i(gA),Hd=n(gA,"P",{});var PZ=s(Hd);thr=r(PZ,`Note:
Loading a model from its configuration file does `),abe=n(PZ,"STRONG",{});var TFt=s(abe);ahr=r(TFt,"not"),TFt.forEach(t),nhr=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=n(PZ,"A",{href:!0});var MFt=s(YW);shr=r(MFt,"from_pretrained()"),MFt.forEach(t),lhr=r(PZ," to load the model weights."),PZ.forEach(t),ihr=i(gA),T(nM.$$.fragment,gA),gA.forEach(t),dhr=i(_l),yr=n(_l,"DIV",{class:!0});var ul=s(yr);T(l8.$$.fragment,ul),chr=i(ul),nbe=n(ul,"P",{});var EFt=s(nbe);fhr=r(EFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),EFt.forEach(t),mhr=i(ul),en=n(ul,"P",{});var hA=s(en);ghr=r(hA,"The model class to instantiate is selected based on the "),sbe=n(hA,"CODE",{});var CFt=s(sbe);hhr=r(CFt,"model_type"),CFt.forEach(t),phr=r(hA,` property of the config object (either
passed as an argument or loaded from `),lbe=n(hA,"CODE",{});var wFt=s(lbe);_hr=r(wFt,"pretrained_model_name_or_path"),wFt.forEach(t),uhr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=n(hA,"CODE",{});var AFt=s(ibe);bhr=r(AFt,"pretrained_model_name_or_path"),AFt.forEach(t),vhr=r(hA,":"),hA.forEach(t),Fhr=i(ul),Te=n(ul,"UL",{});var Ce=s(Te);sM=n(Ce,"LI",{});var MSe=s(sM);dbe=n(MSe,"STRONG",{});var yFt=s(dbe);Thr=r(yFt,"bert"),yFt.forEach(t),Mhr=r(MSe," \u2014 "),KW=n(MSe,"A",{href:!0});var LFt=s(KW);Ehr=r(LFt,"TFBertLMHeadModel"),LFt.forEach(t),Chr=r(MSe," (BERT model)"),MSe.forEach(t),whr=i(Ce),lM=n(Ce,"LI",{});var ESe=s(lM);cbe=n(ESe,"STRONG",{});var xFt=s(cbe);Ahr=r(xFt,"camembert"),xFt.forEach(t),yhr=r(ESe," \u2014 "),ZW=n(ESe,"A",{href:!0});var $Ft=s(ZW);Lhr=r($Ft,"TFCamembertForCausalLM"),$Ft.forEach(t),xhr=r(ESe," (CamemBERT model)"),ESe.forEach(t),$hr=i(Ce),iM=n(Ce,"LI",{});var CSe=s(iM);fbe=n(CSe,"STRONG",{});var kFt=s(fbe);khr=r(kFt,"ctrl"),kFt.forEach(t),Shr=r(CSe," \u2014 "),eQ=n(CSe,"A",{href:!0});var SFt=s(eQ);Rhr=r(SFt,"TFCTRLLMHeadModel"),SFt.forEach(t),Bhr=r(CSe," (CTRL model)"),CSe.forEach(t),Phr=i(Ce),dM=n(Ce,"LI",{});var wSe=s(dM);mbe=n(wSe,"STRONG",{});var RFt=s(mbe);Ihr=r(RFt,"gpt2"),RFt.forEach(t),qhr=r(wSe," \u2014 "),oQ=n(wSe,"A",{href:!0});var BFt=s(oQ);Nhr=r(BFt,"TFGPT2LMHeadModel"),BFt.forEach(t),jhr=r(wSe," (OpenAI GPT-2 model)"),wSe.forEach(t),Dhr=i(Ce),cM=n(Ce,"LI",{});var ASe=s(cM);gbe=n(ASe,"STRONG",{});var PFt=s(gbe);Ghr=r(PFt,"gptj"),PFt.forEach(t),Ohr=r(ASe," \u2014 "),rQ=n(ASe,"A",{href:!0});var IFt=s(rQ);Vhr=r(IFt,"TFGPTJForCausalLM"),IFt.forEach(t),Xhr=r(ASe," (GPT-J model)"),ASe.forEach(t),zhr=i(Ce),fM=n(Ce,"LI",{});var ySe=s(fM);hbe=n(ySe,"STRONG",{});var qFt=s(hbe);Whr=r(qFt,"openai-gpt"),qFt.forEach(t),Qhr=r(ySe," \u2014 "),tQ=n(ySe,"A",{href:!0});var NFt=s(tQ);Hhr=r(NFt,"TFOpenAIGPTLMHeadModel"),NFt.forEach(t),Uhr=r(ySe," (OpenAI GPT model)"),ySe.forEach(t),Jhr=i(Ce),mM=n(Ce,"LI",{});var LSe=s(mM);pbe=n(LSe,"STRONG",{});var jFt=s(pbe);Yhr=r(jFt,"rembert"),jFt.forEach(t),Khr=r(LSe," \u2014 "),aQ=n(LSe,"A",{href:!0});var DFt=s(aQ);Zhr=r(DFt,"TFRemBertForCausalLM"),DFt.forEach(t),epr=r(LSe," (RemBERT model)"),LSe.forEach(t),opr=i(Ce),gM=n(Ce,"LI",{});var xSe=s(gM);_be=n(xSe,"STRONG",{});var GFt=s(_be);rpr=r(GFt,"roberta"),GFt.forEach(t),tpr=r(xSe," \u2014 "),nQ=n(xSe,"A",{href:!0});var OFt=s(nQ);apr=r(OFt,"TFRobertaForCausalLM"),OFt.forEach(t),npr=r(xSe," (RoBERTa model)"),xSe.forEach(t),spr=i(Ce),hM=n(Ce,"LI",{});var $Se=s(hM);ube=n($Se,"STRONG",{});var VFt=s(ube);lpr=r(VFt,"roformer"),VFt.forEach(t),ipr=r($Se," \u2014 "),sQ=n($Se,"A",{href:!0});var XFt=s(sQ);dpr=r(XFt,"TFRoFormerForCausalLM"),XFt.forEach(t),cpr=r($Se," (RoFormer model)"),$Se.forEach(t),fpr=i(Ce),pM=n(Ce,"LI",{});var kSe=s(pM);bbe=n(kSe,"STRONG",{});var zFt=s(bbe);mpr=r(zFt,"transfo-xl"),zFt.forEach(t),gpr=r(kSe," \u2014 "),lQ=n(kSe,"A",{href:!0});var WFt=s(lQ);hpr=r(WFt,"TFTransfoXLLMHeadModel"),WFt.forEach(t),ppr=r(kSe," (Transformer-XL model)"),kSe.forEach(t),_pr=i(Ce),_M=n(Ce,"LI",{});var SSe=s(_M);vbe=n(SSe,"STRONG",{});var QFt=s(vbe);upr=r(QFt,"xlm"),QFt.forEach(t),bpr=r(SSe," \u2014 "),iQ=n(SSe,"A",{href:!0});var HFt=s(iQ);vpr=r(HFt,"TFXLMWithLMHeadModel"),HFt.forEach(t),Fpr=r(SSe," (XLM model)"),SSe.forEach(t),Tpr=i(Ce),uM=n(Ce,"LI",{});var RSe=s(uM);Fbe=n(RSe,"STRONG",{});var UFt=s(Fbe);Mpr=r(UFt,"xlnet"),UFt.forEach(t),Epr=r(RSe," \u2014 "),dQ=n(RSe,"A",{href:!0});var JFt=s(dQ);Cpr=r(JFt,"TFXLNetLMHeadModel"),JFt.forEach(t),wpr=r(RSe," (XLNet model)"),RSe.forEach(t),Ce.forEach(t),Apr=i(ul),T(bM.$$.fragment,ul),ul.forEach(t),_l.forEach(t),rNe=i(f),Ud=n(f,"H2",{class:!0});var iDe=s(Ud);vM=n(iDe,"A",{id:!0,class:!0,href:!0});var YFt=s(vM);Tbe=n(YFt,"SPAN",{});var KFt=s(Tbe);T(i8.$$.fragment,KFt),KFt.forEach(t),YFt.forEach(t),ypr=i(iDe),Mbe=n(iDe,"SPAN",{});var ZFt=s(Mbe);Lpr=r(ZFt,"TFAutoModelForImageClassification"),ZFt.forEach(t),iDe.forEach(t),tNe=i(f),er=n(f,"DIV",{class:!0});var bl=s(er);T(d8.$$.fragment,bl),xpr=i(bl),Jd=n(bl,"P",{});var IZ=s(Jd);$pr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cQ=n(IZ,"A",{href:!0});var e0t=s(cQ);kpr=r(e0t,"from_pretrained()"),e0t.forEach(t),Spr=r(IZ," class method or the "),fQ=n(IZ,"A",{href:!0});var o0t=s(fQ);Rpr=r(o0t,"from_config()"),o0t.forEach(t),Bpr=r(IZ,` class
method.`),IZ.forEach(t),Ppr=i(bl),c8=n(bl,"P",{});var dDe=s(c8);Ipr=r(dDe,"This class cannot be instantiated directly using "),Ebe=n(dDe,"CODE",{});var r0t=s(Ebe);qpr=r(r0t,"__init__()"),r0t.forEach(t),Npr=r(dDe," (throws an error)."),dDe.forEach(t),jpr=i(bl),$t=n(bl,"DIV",{class:!0});var pA=s($t);T(f8.$$.fragment,pA),Dpr=i(pA),Cbe=n(pA,"P",{});var t0t=s(Cbe);Gpr=r(t0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),t0t.forEach(t),Opr=i(pA),Yd=n(pA,"P",{});var qZ=s(Yd);Vpr=r(qZ,`Note:
Loading a model from its configuration file does `),wbe=n(qZ,"STRONG",{});var a0t=s(wbe);Xpr=r(a0t,"not"),a0t.forEach(t),zpr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mQ=n(qZ,"A",{href:!0});var n0t=s(mQ);Wpr=r(n0t,"from_pretrained()"),n0t.forEach(t),Qpr=r(qZ," to load the model weights."),qZ.forEach(t),Hpr=i(pA),T(FM.$$.fragment,pA),pA.forEach(t),Upr=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(m8.$$.fragment,vl),Jpr=i(vl),Abe=n(vl,"P",{});var s0t=s(Abe);Ypr=r(s0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),s0t.forEach(t),Kpr=i(vl),on=n(vl,"P",{});var _A=s(on);Zpr=r(_A,"The model class to instantiate is selected based on the "),ybe=n(_A,"CODE",{});var l0t=s(ybe);e_r=r(l0t,"model_type"),l0t.forEach(t),o_r=r(_A,` property of the config object (either
passed as an argument or loaded from `),Lbe=n(_A,"CODE",{});var i0t=s(Lbe);r_r=r(i0t,"pretrained_model_name_or_path"),i0t.forEach(t),t_r=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=n(_A,"CODE",{});var d0t=s(xbe);a_r=r(d0t,"pretrained_model_name_or_path"),d0t.forEach(t),n_r=r(_A,":"),_A.forEach(t),s_r=i(vl),rn=n(vl,"UL",{});var uA=s(rn);TM=n(uA,"LI",{});var BSe=s(TM);$be=n(BSe,"STRONG",{});var c0t=s($be);l_r=r(c0t,"convnext"),c0t.forEach(t),i_r=r(BSe," \u2014 "),gQ=n(BSe,"A",{href:!0});var f0t=s(gQ);d_r=r(f0t,"TFConvNextForImageClassification"),f0t.forEach(t),c_r=r(BSe," (ConvNext model)"),BSe.forEach(t),f_r=i(uA),MM=n(uA,"LI",{});var PSe=s(MM);kbe=n(PSe,"STRONG",{});var m0t=s(kbe);m_r=r(m0t,"data2vec-vision"),m0t.forEach(t),g_r=r(PSe," \u2014 "),hQ=n(PSe,"A",{href:!0});var g0t=s(hQ);h_r=r(g0t,"TFData2VecVisionForImageClassification"),g0t.forEach(t),p_r=r(PSe," (Data2VecVision model)"),PSe.forEach(t),__r=i(uA),EM=n(uA,"LI",{});var ISe=s(EM);Sbe=n(ISe,"STRONG",{});var h0t=s(Sbe);u_r=r(h0t,"swin"),h0t.forEach(t),b_r=r(ISe," \u2014 "),pQ=n(ISe,"A",{href:!0});var p0t=s(pQ);v_r=r(p0t,"TFSwinForImageClassification"),p0t.forEach(t),F_r=r(ISe," (Swin model)"),ISe.forEach(t),T_r=i(uA),CM=n(uA,"LI",{});var qSe=s(CM);Rbe=n(qSe,"STRONG",{});var _0t=s(Rbe);M_r=r(_0t,"vit"),_0t.forEach(t),E_r=r(qSe," \u2014 "),_Q=n(qSe,"A",{href:!0});var u0t=s(_Q);C_r=r(u0t,"TFViTForImageClassification"),u0t.forEach(t),w_r=r(qSe," (ViT model)"),qSe.forEach(t),uA.forEach(t),A_r=i(vl),T(wM.$$.fragment,vl),vl.forEach(t),bl.forEach(t),aNe=i(f),Kd=n(f,"H2",{class:!0});var cDe=s(Kd);AM=n(cDe,"A",{id:!0,class:!0,href:!0});var b0t=s(AM);Bbe=n(b0t,"SPAN",{});var v0t=s(Bbe);T(g8.$$.fragment,v0t),v0t.forEach(t),b0t.forEach(t),y_r=i(cDe),Pbe=n(cDe,"SPAN",{});var F0t=s(Pbe);L_r=r(F0t,"TFAutoModelForMaskedLM"),F0t.forEach(t),cDe.forEach(t),nNe=i(f),or=n(f,"DIV",{class:!0});var Fl=s(or);T(h8.$$.fragment,Fl),x_r=i(Fl),Zd=n(Fl,"P",{});var NZ=s(Zd);$_r=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uQ=n(NZ,"A",{href:!0});var T0t=s(uQ);k_r=r(T0t,"from_pretrained()"),T0t.forEach(t),S_r=r(NZ," class method or the "),bQ=n(NZ,"A",{href:!0});var M0t=s(bQ);R_r=r(M0t,"from_config()"),M0t.forEach(t),B_r=r(NZ,` class
method.`),NZ.forEach(t),P_r=i(Fl),p8=n(Fl,"P",{});var fDe=s(p8);I_r=r(fDe,"This class cannot be instantiated directly using "),Ibe=n(fDe,"CODE",{});var E0t=s(Ibe);q_r=r(E0t,"__init__()"),E0t.forEach(t),N_r=r(fDe," (throws an error)."),fDe.forEach(t),j_r=i(Fl),kt=n(Fl,"DIV",{class:!0});var bA=s(kt);T(_8.$$.fragment,bA),D_r=i(bA),qbe=n(bA,"P",{});var C0t=s(qbe);G_r=r(C0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),C0t.forEach(t),O_r=i(bA),ec=n(bA,"P",{});var jZ=s(ec);V_r=r(jZ,`Note:
Loading a model from its configuration file does `),Nbe=n(jZ,"STRONG",{});var w0t=s(Nbe);X_r=r(w0t,"not"),w0t.forEach(t),z_r=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=n(jZ,"A",{href:!0});var A0t=s(vQ);W_r=r(A0t,"from_pretrained()"),A0t.forEach(t),Q_r=r(jZ," to load the model weights."),jZ.forEach(t),H_r=i(bA),T(yM.$$.fragment,bA),bA.forEach(t),U_r=i(Fl),xr=n(Fl,"DIV",{class:!0});var Tl=s(xr);T(u8.$$.fragment,Tl),J_r=i(Tl),jbe=n(Tl,"P",{});var y0t=s(jbe);Y_r=r(y0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),y0t.forEach(t),K_r=i(Tl),tn=n(Tl,"P",{});var vA=s(tn);Z_r=r(vA,"The model class to instantiate is selected based on the "),Dbe=n(vA,"CODE",{});var L0t=s(Dbe);eur=r(L0t,"model_type"),L0t.forEach(t),our=r(vA,` property of the config object (either
passed as an argument or loaded from `),Gbe=n(vA,"CODE",{});var x0t=s(Gbe);rur=r(x0t,"pretrained_model_name_or_path"),x0t.forEach(t),tur=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=n(vA,"CODE",{});var $0t=s(Obe);aur=r($0t,"pretrained_model_name_or_path"),$0t.forEach(t),nur=r(vA,":"),vA.forEach(t),sur=i(Tl),ie=n(Tl,"UL",{});var fe=s(ie);LM=n(fe,"LI",{});var NSe=s(LM);Vbe=n(NSe,"STRONG",{});var k0t=s(Vbe);lur=r(k0t,"albert"),k0t.forEach(t),iur=r(NSe," \u2014 "),FQ=n(NSe,"A",{href:!0});var S0t=s(FQ);dur=r(S0t,"TFAlbertForMaskedLM"),S0t.forEach(t),cur=r(NSe," (ALBERT model)"),NSe.forEach(t),fur=i(fe),xM=n(fe,"LI",{});var jSe=s(xM);Xbe=n(jSe,"STRONG",{});var R0t=s(Xbe);mur=r(R0t,"bert"),R0t.forEach(t),gur=r(jSe," \u2014 "),TQ=n(jSe,"A",{href:!0});var B0t=s(TQ);hur=r(B0t,"TFBertForMaskedLM"),B0t.forEach(t),pur=r(jSe," (BERT model)"),jSe.forEach(t),_ur=i(fe),$M=n(fe,"LI",{});var DSe=s($M);zbe=n(DSe,"STRONG",{});var P0t=s(zbe);uur=r(P0t,"camembert"),P0t.forEach(t),bur=r(DSe," \u2014 "),MQ=n(DSe,"A",{href:!0});var I0t=s(MQ);vur=r(I0t,"TFCamembertForMaskedLM"),I0t.forEach(t),Fur=r(DSe," (CamemBERT model)"),DSe.forEach(t),Tur=i(fe),kM=n(fe,"LI",{});var GSe=s(kM);Wbe=n(GSe,"STRONG",{});var q0t=s(Wbe);Mur=r(q0t,"convbert"),q0t.forEach(t),Eur=r(GSe," \u2014 "),EQ=n(GSe,"A",{href:!0});var N0t=s(EQ);Cur=r(N0t,"TFConvBertForMaskedLM"),N0t.forEach(t),wur=r(GSe," (ConvBERT model)"),GSe.forEach(t),Aur=i(fe),SM=n(fe,"LI",{});var OSe=s(SM);Qbe=n(OSe,"STRONG",{});var j0t=s(Qbe);yur=r(j0t,"deberta"),j0t.forEach(t),Lur=r(OSe," \u2014 "),CQ=n(OSe,"A",{href:!0});var D0t=s(CQ);xur=r(D0t,"TFDebertaForMaskedLM"),D0t.forEach(t),$ur=r(OSe," (DeBERTa model)"),OSe.forEach(t),kur=i(fe),RM=n(fe,"LI",{});var VSe=s(RM);Hbe=n(VSe,"STRONG",{});var G0t=s(Hbe);Sur=r(G0t,"deberta-v2"),G0t.forEach(t),Rur=r(VSe," \u2014 "),wQ=n(VSe,"A",{href:!0});var O0t=s(wQ);Bur=r(O0t,"TFDebertaV2ForMaskedLM"),O0t.forEach(t),Pur=r(VSe," (DeBERTa-v2 model)"),VSe.forEach(t),Iur=i(fe),BM=n(fe,"LI",{});var XSe=s(BM);Ube=n(XSe,"STRONG",{});var V0t=s(Ube);qur=r(V0t,"distilbert"),V0t.forEach(t),Nur=r(XSe," \u2014 "),AQ=n(XSe,"A",{href:!0});var X0t=s(AQ);jur=r(X0t,"TFDistilBertForMaskedLM"),X0t.forEach(t),Dur=r(XSe," (DistilBERT model)"),XSe.forEach(t),Gur=i(fe),PM=n(fe,"LI",{});var zSe=s(PM);Jbe=n(zSe,"STRONG",{});var z0t=s(Jbe);Our=r(z0t,"electra"),z0t.forEach(t),Vur=r(zSe," \u2014 "),yQ=n(zSe,"A",{href:!0});var W0t=s(yQ);Xur=r(W0t,"TFElectraForMaskedLM"),W0t.forEach(t),zur=r(zSe," (ELECTRA model)"),zSe.forEach(t),Wur=i(fe),IM=n(fe,"LI",{});var WSe=s(IM);Ybe=n(WSe,"STRONG",{});var Q0t=s(Ybe);Qur=r(Q0t,"flaubert"),Q0t.forEach(t),Hur=r(WSe," \u2014 "),LQ=n(WSe,"A",{href:!0});var H0t=s(LQ);Uur=r(H0t,"TFFlaubertWithLMHeadModel"),H0t.forEach(t),Jur=r(WSe," (FlauBERT model)"),WSe.forEach(t),Yur=i(fe),qM=n(fe,"LI",{});var QSe=s(qM);Kbe=n(QSe,"STRONG",{});var U0t=s(Kbe);Kur=r(U0t,"funnel"),U0t.forEach(t),Zur=r(QSe," \u2014 "),xQ=n(QSe,"A",{href:!0});var J0t=s(xQ);e2r=r(J0t,"TFFunnelForMaskedLM"),J0t.forEach(t),o2r=r(QSe," (Funnel Transformer model)"),QSe.forEach(t),r2r=i(fe),NM=n(fe,"LI",{});var HSe=s(NM);Zbe=n(HSe,"STRONG",{});var Y0t=s(Zbe);t2r=r(Y0t,"layoutlm"),Y0t.forEach(t),a2r=r(HSe," \u2014 "),$Q=n(HSe,"A",{href:!0});var K0t=s($Q);n2r=r(K0t,"TFLayoutLMForMaskedLM"),K0t.forEach(t),s2r=r(HSe," (LayoutLM model)"),HSe.forEach(t),l2r=i(fe),jM=n(fe,"LI",{});var USe=s(jM);eve=n(USe,"STRONG",{});var Z0t=s(eve);i2r=r(Z0t,"longformer"),Z0t.forEach(t),d2r=r(USe," \u2014 "),kQ=n(USe,"A",{href:!0});var eTt=s(kQ);c2r=r(eTt,"TFLongformerForMaskedLM"),eTt.forEach(t),f2r=r(USe," (Longformer model)"),USe.forEach(t),m2r=i(fe),DM=n(fe,"LI",{});var JSe=s(DM);ove=n(JSe,"STRONG",{});var oTt=s(ove);g2r=r(oTt,"mobilebert"),oTt.forEach(t),h2r=r(JSe," \u2014 "),SQ=n(JSe,"A",{href:!0});var rTt=s(SQ);p2r=r(rTt,"TFMobileBertForMaskedLM"),rTt.forEach(t),_2r=r(JSe," (MobileBERT model)"),JSe.forEach(t),u2r=i(fe),GM=n(fe,"LI",{});var YSe=s(GM);rve=n(YSe,"STRONG",{});var tTt=s(rve);b2r=r(tTt,"mpnet"),tTt.forEach(t),v2r=r(YSe," \u2014 "),RQ=n(YSe,"A",{href:!0});var aTt=s(RQ);F2r=r(aTt,"TFMPNetForMaskedLM"),aTt.forEach(t),T2r=r(YSe," (MPNet model)"),YSe.forEach(t),M2r=i(fe),OM=n(fe,"LI",{});var KSe=s(OM);tve=n(KSe,"STRONG",{});var nTt=s(tve);E2r=r(nTt,"rembert"),nTt.forEach(t),C2r=r(KSe," \u2014 "),BQ=n(KSe,"A",{href:!0});var sTt=s(BQ);w2r=r(sTt,"TFRemBertForMaskedLM"),sTt.forEach(t),A2r=r(KSe," (RemBERT model)"),KSe.forEach(t),y2r=i(fe),VM=n(fe,"LI",{});var ZSe=s(VM);ave=n(ZSe,"STRONG",{});var lTt=s(ave);L2r=r(lTt,"roberta"),lTt.forEach(t),x2r=r(ZSe," \u2014 "),PQ=n(ZSe,"A",{href:!0});var iTt=s(PQ);$2r=r(iTt,"TFRobertaForMaskedLM"),iTt.forEach(t),k2r=r(ZSe," (RoBERTa model)"),ZSe.forEach(t),S2r=i(fe),XM=n(fe,"LI",{});var eRe=s(XM);nve=n(eRe,"STRONG",{});var dTt=s(nve);R2r=r(dTt,"roformer"),dTt.forEach(t),B2r=r(eRe," \u2014 "),IQ=n(eRe,"A",{href:!0});var cTt=s(IQ);P2r=r(cTt,"TFRoFormerForMaskedLM"),cTt.forEach(t),I2r=r(eRe," (RoFormer model)"),eRe.forEach(t),q2r=i(fe),zM=n(fe,"LI",{});var oRe=s(zM);sve=n(oRe,"STRONG",{});var fTt=s(sve);N2r=r(fTt,"tapas"),fTt.forEach(t),j2r=r(oRe," \u2014 "),qQ=n(oRe,"A",{href:!0});var mTt=s(qQ);D2r=r(mTt,"TFTapasForMaskedLM"),mTt.forEach(t),G2r=r(oRe," (TAPAS model)"),oRe.forEach(t),O2r=i(fe),WM=n(fe,"LI",{});var rRe=s(WM);lve=n(rRe,"STRONG",{});var gTt=s(lve);V2r=r(gTt,"xlm"),gTt.forEach(t),X2r=r(rRe," \u2014 "),NQ=n(rRe,"A",{href:!0});var hTt=s(NQ);z2r=r(hTt,"TFXLMWithLMHeadModel"),hTt.forEach(t),W2r=r(rRe," (XLM model)"),rRe.forEach(t),Q2r=i(fe),QM=n(fe,"LI",{});var tRe=s(QM);ive=n(tRe,"STRONG",{});var pTt=s(ive);H2r=r(pTt,"xlm-roberta"),pTt.forEach(t),U2r=r(tRe," \u2014 "),jQ=n(tRe,"A",{href:!0});var _Tt=s(jQ);J2r=r(_Tt,"TFXLMRobertaForMaskedLM"),_Tt.forEach(t),Y2r=r(tRe," (XLM-RoBERTa model)"),tRe.forEach(t),fe.forEach(t),K2r=i(Tl),T(HM.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),sNe=i(f),oc=n(f,"H2",{class:!0});var mDe=s(oc);UM=n(mDe,"A",{id:!0,class:!0,href:!0});var uTt=s(UM);dve=n(uTt,"SPAN",{});var bTt=s(dve);T(b8.$$.fragment,bTt),bTt.forEach(t),uTt.forEach(t),Z2r=i(mDe),cve=n(mDe,"SPAN",{});var vTt=s(cve);e1r=r(vTt,"TFAutoModelForSeq2SeqLM"),vTt.forEach(t),mDe.forEach(t),lNe=i(f),rr=n(f,"DIV",{class:!0});var Ml=s(rr);T(v8.$$.fragment,Ml),o1r=i(Ml),rc=n(Ml,"P",{});var DZ=s(rc);r1r=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),DQ=n(DZ,"A",{href:!0});var FTt=s(DQ);t1r=r(FTt,"from_pretrained()"),FTt.forEach(t),a1r=r(DZ," class method or the "),GQ=n(DZ,"A",{href:!0});var TTt=s(GQ);n1r=r(TTt,"from_config()"),TTt.forEach(t),s1r=r(DZ,` class
method.`),DZ.forEach(t),l1r=i(Ml),F8=n(Ml,"P",{});var gDe=s(F8);i1r=r(gDe,"This class cannot be instantiated directly using "),fve=n(gDe,"CODE",{});var MTt=s(fve);d1r=r(MTt,"__init__()"),MTt.forEach(t),c1r=r(gDe," (throws an error)."),gDe.forEach(t),f1r=i(Ml),St=n(Ml,"DIV",{class:!0});var FA=s(St);T(T8.$$.fragment,FA),m1r=i(FA),mve=n(FA,"P",{});var ETt=s(mve);g1r=r(ETt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ETt.forEach(t),h1r=i(FA),tc=n(FA,"P",{});var GZ=s(tc);p1r=r(GZ,`Note:
Loading a model from its configuration file does `),gve=n(GZ,"STRONG",{});var CTt=s(gve);_1r=r(CTt,"not"),CTt.forEach(t),u1r=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=n(GZ,"A",{href:!0});var wTt=s(OQ);b1r=r(wTt,"from_pretrained()"),wTt.forEach(t),v1r=r(GZ," to load the model weights."),GZ.forEach(t),F1r=i(FA),T(JM.$$.fragment,FA),FA.forEach(t),T1r=i(Ml),$r=n(Ml,"DIV",{class:!0});var El=s($r);T(M8.$$.fragment,El),M1r=i(El),hve=n(El,"P",{});var ATt=s(hve);E1r=r(ATt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ATt.forEach(t),C1r=i(El),an=n(El,"P",{});var TA=s(an);w1r=r(TA,"The model class to instantiate is selected based on the "),pve=n(TA,"CODE",{});var yTt=s(pve);A1r=r(yTt,"model_type"),yTt.forEach(t),y1r=r(TA,` property of the config object (either
passed as an argument or loaded from `),_ve=n(TA,"CODE",{});var LTt=s(_ve);L1r=r(LTt,"pretrained_model_name_or_path"),LTt.forEach(t),x1r=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=n(TA,"CODE",{});var xTt=s(uve);$1r=r(xTt,"pretrained_model_name_or_path"),xTt.forEach(t),k1r=r(TA,":"),TA.forEach(t),S1r=i(El),ye=n(El,"UL",{});var Pe=s(ye);YM=n(Pe,"LI",{});var aRe=s(YM);bve=n(aRe,"STRONG",{});var $Tt=s(bve);R1r=r($Tt,"bart"),$Tt.forEach(t),B1r=r(aRe," \u2014 "),VQ=n(aRe,"A",{href:!0});var kTt=s(VQ);P1r=r(kTt,"TFBartForConditionalGeneration"),kTt.forEach(t),I1r=r(aRe," (BART model)"),aRe.forEach(t),q1r=i(Pe),KM=n(Pe,"LI",{});var nRe=s(KM);vve=n(nRe,"STRONG",{});var STt=s(vve);N1r=r(STt,"blenderbot"),STt.forEach(t),j1r=r(nRe," \u2014 "),XQ=n(nRe,"A",{href:!0});var RTt=s(XQ);D1r=r(RTt,"TFBlenderbotForConditionalGeneration"),RTt.forEach(t),G1r=r(nRe," (Blenderbot model)"),nRe.forEach(t),O1r=i(Pe),ZM=n(Pe,"LI",{});var sRe=s(ZM);Fve=n(sRe,"STRONG",{});var BTt=s(Fve);V1r=r(BTt,"blenderbot-small"),BTt.forEach(t),X1r=r(sRe," \u2014 "),zQ=n(sRe,"A",{href:!0});var PTt=s(zQ);z1r=r(PTt,"TFBlenderbotSmallForConditionalGeneration"),PTt.forEach(t),W1r=r(sRe," (BlenderbotSmall model)"),sRe.forEach(t),Q1r=i(Pe),e4=n(Pe,"LI",{});var lRe=s(e4);Tve=n(lRe,"STRONG",{});var ITt=s(Tve);H1r=r(ITt,"encoder-decoder"),ITt.forEach(t),U1r=r(lRe," \u2014 "),WQ=n(lRe,"A",{href:!0});var qTt=s(WQ);J1r=r(qTt,"TFEncoderDecoderModel"),qTt.forEach(t),Y1r=r(lRe," (Encoder decoder model)"),lRe.forEach(t),K1r=i(Pe),o4=n(Pe,"LI",{});var iRe=s(o4);Mve=n(iRe,"STRONG",{});var NTt=s(Mve);Z1r=r(NTt,"led"),NTt.forEach(t),ebr=r(iRe," \u2014 "),QQ=n(iRe,"A",{href:!0});var jTt=s(QQ);obr=r(jTt,"TFLEDForConditionalGeneration"),jTt.forEach(t),rbr=r(iRe," (LED model)"),iRe.forEach(t),tbr=i(Pe),r4=n(Pe,"LI",{});var dRe=s(r4);Eve=n(dRe,"STRONG",{});var DTt=s(Eve);abr=r(DTt,"marian"),DTt.forEach(t),nbr=r(dRe," \u2014 "),HQ=n(dRe,"A",{href:!0});var GTt=s(HQ);sbr=r(GTt,"TFMarianMTModel"),GTt.forEach(t),lbr=r(dRe," (Marian model)"),dRe.forEach(t),ibr=i(Pe),t4=n(Pe,"LI",{});var cRe=s(t4);Cve=n(cRe,"STRONG",{});var OTt=s(Cve);dbr=r(OTt,"mbart"),OTt.forEach(t),cbr=r(cRe," \u2014 "),UQ=n(cRe,"A",{href:!0});var VTt=s(UQ);fbr=r(VTt,"TFMBartForConditionalGeneration"),VTt.forEach(t),mbr=r(cRe," (mBART model)"),cRe.forEach(t),gbr=i(Pe),a4=n(Pe,"LI",{});var fRe=s(a4);wve=n(fRe,"STRONG",{});var XTt=s(wve);hbr=r(XTt,"mt5"),XTt.forEach(t),pbr=r(fRe," \u2014 "),JQ=n(fRe,"A",{href:!0});var zTt=s(JQ);_br=r(zTt,"TFMT5ForConditionalGeneration"),zTt.forEach(t),ubr=r(fRe," (mT5 model)"),fRe.forEach(t),bbr=i(Pe),n4=n(Pe,"LI",{});var mRe=s(n4);Ave=n(mRe,"STRONG",{});var WTt=s(Ave);vbr=r(WTt,"pegasus"),WTt.forEach(t),Fbr=r(mRe," \u2014 "),YQ=n(mRe,"A",{href:!0});var QTt=s(YQ);Tbr=r(QTt,"TFPegasusForConditionalGeneration"),QTt.forEach(t),Mbr=r(mRe," (Pegasus model)"),mRe.forEach(t),Ebr=i(Pe),s4=n(Pe,"LI",{});var gRe=s(s4);yve=n(gRe,"STRONG",{});var HTt=s(yve);Cbr=r(HTt,"t5"),HTt.forEach(t),wbr=r(gRe," \u2014 "),KQ=n(gRe,"A",{href:!0});var UTt=s(KQ);Abr=r(UTt,"TFT5ForConditionalGeneration"),UTt.forEach(t),ybr=r(gRe," (T5 model)"),gRe.forEach(t),Pe.forEach(t),Lbr=i(El),T(l4.$$.fragment,El),El.forEach(t),Ml.forEach(t),iNe=i(f),ac=n(f,"H2",{class:!0});var hDe=s(ac);i4=n(hDe,"A",{id:!0,class:!0,href:!0});var JTt=s(i4);Lve=n(JTt,"SPAN",{});var YTt=s(Lve);T(E8.$$.fragment,YTt),YTt.forEach(t),JTt.forEach(t),xbr=i(hDe),xve=n(hDe,"SPAN",{});var KTt=s(xve);$br=r(KTt,"TFAutoModelForSequenceClassification"),KTt.forEach(t),hDe.forEach(t),dNe=i(f),tr=n(f,"DIV",{class:!0});var Cl=s(tr);T(C8.$$.fragment,Cl),kbr=i(Cl),nc=n(Cl,"P",{});var OZ=s(nc);Sbr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZQ=n(OZ,"A",{href:!0});var ZTt=s(ZQ);Rbr=r(ZTt,"from_pretrained()"),ZTt.forEach(t),Bbr=r(OZ," class method or the "),eH=n(OZ,"A",{href:!0});var e7t=s(eH);Pbr=r(e7t,"from_config()"),e7t.forEach(t),Ibr=r(OZ,` class
method.`),OZ.forEach(t),qbr=i(Cl),w8=n(Cl,"P",{});var pDe=s(w8);Nbr=r(pDe,"This class cannot be instantiated directly using "),$ve=n(pDe,"CODE",{});var o7t=s($ve);jbr=r(o7t,"__init__()"),o7t.forEach(t),Dbr=r(pDe," (throws an error)."),pDe.forEach(t),Gbr=i(Cl),Rt=n(Cl,"DIV",{class:!0});var MA=s(Rt);T(A8.$$.fragment,MA),Obr=i(MA),kve=n(MA,"P",{});var r7t=s(kve);Vbr=r(r7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),r7t.forEach(t),Xbr=i(MA),sc=n(MA,"P",{});var VZ=s(sc);zbr=r(VZ,`Note:
Loading a model from its configuration file does `),Sve=n(VZ,"STRONG",{});var t7t=s(Sve);Wbr=r(t7t,"not"),t7t.forEach(t),Qbr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=n(VZ,"A",{href:!0});var a7t=s(oH);Hbr=r(a7t,"from_pretrained()"),a7t.forEach(t),Ubr=r(VZ," to load the model weights."),VZ.forEach(t),Jbr=i(MA),T(d4.$$.fragment,MA),MA.forEach(t),Ybr=i(Cl),kr=n(Cl,"DIV",{class:!0});var wl=s(kr);T(y8.$$.fragment,wl),Kbr=i(wl),Rve=n(wl,"P",{});var n7t=s(Rve);Zbr=r(n7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),n7t.forEach(t),evr=i(wl),nn=n(wl,"P",{});var EA=s(nn);ovr=r(EA,"The model class to instantiate is selected based on the "),Bve=n(EA,"CODE",{});var s7t=s(Bve);rvr=r(s7t,"model_type"),s7t.forEach(t),tvr=r(EA,` property of the config object (either
passed as an argument or loaded from `),Pve=n(EA,"CODE",{});var l7t=s(Pve);avr=r(l7t,"pretrained_model_name_or_path"),l7t.forEach(t),nvr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=n(EA,"CODE",{});var i7t=s(Ive);svr=r(i7t,"pretrained_model_name_or_path"),i7t.forEach(t),lvr=r(EA,":"),EA.forEach(t),ivr=i(wl),ee=n(wl,"UL",{});var ae=s(ee);c4=n(ae,"LI",{});var hRe=s(c4);qve=n(hRe,"STRONG",{});var d7t=s(qve);dvr=r(d7t,"albert"),d7t.forEach(t),cvr=r(hRe," \u2014 "),rH=n(hRe,"A",{href:!0});var c7t=s(rH);fvr=r(c7t,"TFAlbertForSequenceClassification"),c7t.forEach(t),mvr=r(hRe," (ALBERT model)"),hRe.forEach(t),gvr=i(ae),f4=n(ae,"LI",{});var pRe=s(f4);Nve=n(pRe,"STRONG",{});var f7t=s(Nve);hvr=r(f7t,"bert"),f7t.forEach(t),pvr=r(pRe," \u2014 "),tH=n(pRe,"A",{href:!0});var m7t=s(tH);_vr=r(m7t,"TFBertForSequenceClassification"),m7t.forEach(t),uvr=r(pRe," (BERT model)"),pRe.forEach(t),bvr=i(ae),m4=n(ae,"LI",{});var _Re=s(m4);jve=n(_Re,"STRONG",{});var g7t=s(jve);vvr=r(g7t,"camembert"),g7t.forEach(t),Fvr=r(_Re," \u2014 "),aH=n(_Re,"A",{href:!0});var h7t=s(aH);Tvr=r(h7t,"TFCamembertForSequenceClassification"),h7t.forEach(t),Mvr=r(_Re," (CamemBERT model)"),_Re.forEach(t),Evr=i(ae),g4=n(ae,"LI",{});var uRe=s(g4);Dve=n(uRe,"STRONG",{});var p7t=s(Dve);Cvr=r(p7t,"convbert"),p7t.forEach(t),wvr=r(uRe," \u2014 "),nH=n(uRe,"A",{href:!0});var _7t=s(nH);Avr=r(_7t,"TFConvBertForSequenceClassification"),_7t.forEach(t),yvr=r(uRe," (ConvBERT model)"),uRe.forEach(t),Lvr=i(ae),h4=n(ae,"LI",{});var bRe=s(h4);Gve=n(bRe,"STRONG",{});var u7t=s(Gve);xvr=r(u7t,"ctrl"),u7t.forEach(t),$vr=r(bRe," \u2014 "),sH=n(bRe,"A",{href:!0});var b7t=s(sH);kvr=r(b7t,"TFCTRLForSequenceClassification"),b7t.forEach(t),Svr=r(bRe," (CTRL model)"),bRe.forEach(t),Rvr=i(ae),p4=n(ae,"LI",{});var vRe=s(p4);Ove=n(vRe,"STRONG",{});var v7t=s(Ove);Bvr=r(v7t,"deberta"),v7t.forEach(t),Pvr=r(vRe," \u2014 "),lH=n(vRe,"A",{href:!0});var F7t=s(lH);Ivr=r(F7t,"TFDebertaForSequenceClassification"),F7t.forEach(t),qvr=r(vRe," (DeBERTa model)"),vRe.forEach(t),Nvr=i(ae),_4=n(ae,"LI",{});var FRe=s(_4);Vve=n(FRe,"STRONG",{});var T7t=s(Vve);jvr=r(T7t,"deberta-v2"),T7t.forEach(t),Dvr=r(FRe," \u2014 "),iH=n(FRe,"A",{href:!0});var M7t=s(iH);Gvr=r(M7t,"TFDebertaV2ForSequenceClassification"),M7t.forEach(t),Ovr=r(FRe," (DeBERTa-v2 model)"),FRe.forEach(t),Vvr=i(ae),u4=n(ae,"LI",{});var TRe=s(u4);Xve=n(TRe,"STRONG",{});var E7t=s(Xve);Xvr=r(E7t,"distilbert"),E7t.forEach(t),zvr=r(TRe," \u2014 "),dH=n(TRe,"A",{href:!0});var C7t=s(dH);Wvr=r(C7t,"TFDistilBertForSequenceClassification"),C7t.forEach(t),Qvr=r(TRe," (DistilBERT model)"),TRe.forEach(t),Hvr=i(ae),b4=n(ae,"LI",{});var MRe=s(b4);zve=n(MRe,"STRONG",{});var w7t=s(zve);Uvr=r(w7t,"electra"),w7t.forEach(t),Jvr=r(MRe," \u2014 "),cH=n(MRe,"A",{href:!0});var A7t=s(cH);Yvr=r(A7t,"TFElectraForSequenceClassification"),A7t.forEach(t),Kvr=r(MRe," (ELECTRA model)"),MRe.forEach(t),Zvr=i(ae),v4=n(ae,"LI",{});var ERe=s(v4);Wve=n(ERe,"STRONG",{});var y7t=s(Wve);eFr=r(y7t,"flaubert"),y7t.forEach(t),oFr=r(ERe," \u2014 "),fH=n(ERe,"A",{href:!0});var L7t=s(fH);rFr=r(L7t,"TFFlaubertForSequenceClassification"),L7t.forEach(t),tFr=r(ERe," (FlauBERT model)"),ERe.forEach(t),aFr=i(ae),F4=n(ae,"LI",{});var CRe=s(F4);Qve=n(CRe,"STRONG",{});var x7t=s(Qve);nFr=r(x7t,"funnel"),x7t.forEach(t),sFr=r(CRe," \u2014 "),mH=n(CRe,"A",{href:!0});var $7t=s(mH);lFr=r($7t,"TFFunnelForSequenceClassification"),$7t.forEach(t),iFr=r(CRe," (Funnel Transformer model)"),CRe.forEach(t),dFr=i(ae),T4=n(ae,"LI",{});var wRe=s(T4);Hve=n(wRe,"STRONG",{});var k7t=s(Hve);cFr=r(k7t,"gpt2"),k7t.forEach(t),fFr=r(wRe," \u2014 "),gH=n(wRe,"A",{href:!0});var S7t=s(gH);mFr=r(S7t,"TFGPT2ForSequenceClassification"),S7t.forEach(t),gFr=r(wRe," (OpenAI GPT-2 model)"),wRe.forEach(t),hFr=i(ae),M4=n(ae,"LI",{});var ARe=s(M4);Uve=n(ARe,"STRONG",{});var R7t=s(Uve);pFr=r(R7t,"gptj"),R7t.forEach(t),_Fr=r(ARe," \u2014 "),hH=n(ARe,"A",{href:!0});var B7t=s(hH);uFr=r(B7t,"TFGPTJForSequenceClassification"),B7t.forEach(t),bFr=r(ARe," (GPT-J model)"),ARe.forEach(t),vFr=i(ae),E4=n(ae,"LI",{});var yRe=s(E4);Jve=n(yRe,"STRONG",{});var P7t=s(Jve);FFr=r(P7t,"layoutlm"),P7t.forEach(t),TFr=r(yRe," \u2014 "),pH=n(yRe,"A",{href:!0});var I7t=s(pH);MFr=r(I7t,"TFLayoutLMForSequenceClassification"),I7t.forEach(t),EFr=r(yRe," (LayoutLM model)"),yRe.forEach(t),CFr=i(ae),C4=n(ae,"LI",{});var LRe=s(C4);Yve=n(LRe,"STRONG",{});var q7t=s(Yve);wFr=r(q7t,"longformer"),q7t.forEach(t),AFr=r(LRe," \u2014 "),_H=n(LRe,"A",{href:!0});var N7t=s(_H);yFr=r(N7t,"TFLongformerForSequenceClassification"),N7t.forEach(t),LFr=r(LRe," (Longformer model)"),LRe.forEach(t),xFr=i(ae),w4=n(ae,"LI",{});var xRe=s(w4);Kve=n(xRe,"STRONG",{});var j7t=s(Kve);$Fr=r(j7t,"mobilebert"),j7t.forEach(t),kFr=r(xRe," \u2014 "),uH=n(xRe,"A",{href:!0});var D7t=s(uH);SFr=r(D7t,"TFMobileBertForSequenceClassification"),D7t.forEach(t),RFr=r(xRe," (MobileBERT model)"),xRe.forEach(t),BFr=i(ae),A4=n(ae,"LI",{});var $Re=s(A4);Zve=n($Re,"STRONG",{});var G7t=s(Zve);PFr=r(G7t,"mpnet"),G7t.forEach(t),IFr=r($Re," \u2014 "),bH=n($Re,"A",{href:!0});var O7t=s(bH);qFr=r(O7t,"TFMPNetForSequenceClassification"),O7t.forEach(t),NFr=r($Re," (MPNet model)"),$Re.forEach(t),jFr=i(ae),y4=n(ae,"LI",{});var kRe=s(y4);eFe=n(kRe,"STRONG",{});var V7t=s(eFe);DFr=r(V7t,"openai-gpt"),V7t.forEach(t),GFr=r(kRe," \u2014 "),vH=n(kRe,"A",{href:!0});var X7t=s(vH);OFr=r(X7t,"TFOpenAIGPTForSequenceClassification"),X7t.forEach(t),VFr=r(kRe," (OpenAI GPT model)"),kRe.forEach(t),XFr=i(ae),L4=n(ae,"LI",{});var SRe=s(L4);oFe=n(SRe,"STRONG",{});var z7t=s(oFe);zFr=r(z7t,"rembert"),z7t.forEach(t),WFr=r(SRe," \u2014 "),FH=n(SRe,"A",{href:!0});var W7t=s(FH);QFr=r(W7t,"TFRemBertForSequenceClassification"),W7t.forEach(t),HFr=r(SRe," (RemBERT model)"),SRe.forEach(t),UFr=i(ae),x4=n(ae,"LI",{});var RRe=s(x4);rFe=n(RRe,"STRONG",{});var Q7t=s(rFe);JFr=r(Q7t,"roberta"),Q7t.forEach(t),YFr=r(RRe," \u2014 "),TH=n(RRe,"A",{href:!0});var H7t=s(TH);KFr=r(H7t,"TFRobertaForSequenceClassification"),H7t.forEach(t),ZFr=r(RRe," (RoBERTa model)"),RRe.forEach(t),e0r=i(ae),$4=n(ae,"LI",{});var BRe=s($4);tFe=n(BRe,"STRONG",{});var U7t=s(tFe);o0r=r(U7t,"roformer"),U7t.forEach(t),r0r=r(BRe," \u2014 "),MH=n(BRe,"A",{href:!0});var J7t=s(MH);t0r=r(J7t,"TFRoFormerForSequenceClassification"),J7t.forEach(t),a0r=r(BRe," (RoFormer model)"),BRe.forEach(t),n0r=i(ae),k4=n(ae,"LI",{});var PRe=s(k4);aFe=n(PRe,"STRONG",{});var Y7t=s(aFe);s0r=r(Y7t,"tapas"),Y7t.forEach(t),l0r=r(PRe," \u2014 "),EH=n(PRe,"A",{href:!0});var K7t=s(EH);i0r=r(K7t,"TFTapasForSequenceClassification"),K7t.forEach(t),d0r=r(PRe," (TAPAS model)"),PRe.forEach(t),c0r=i(ae),S4=n(ae,"LI",{});var IRe=s(S4);nFe=n(IRe,"STRONG",{});var Z7t=s(nFe);f0r=r(Z7t,"transfo-xl"),Z7t.forEach(t),m0r=r(IRe," \u2014 "),CH=n(IRe,"A",{href:!0});var eMt=s(CH);g0r=r(eMt,"TFTransfoXLForSequenceClassification"),eMt.forEach(t),h0r=r(IRe," (Transformer-XL model)"),IRe.forEach(t),p0r=i(ae),R4=n(ae,"LI",{});var qRe=s(R4);sFe=n(qRe,"STRONG",{});var oMt=s(sFe);_0r=r(oMt,"xlm"),oMt.forEach(t),u0r=r(qRe," \u2014 "),wH=n(qRe,"A",{href:!0});var rMt=s(wH);b0r=r(rMt,"TFXLMForSequenceClassification"),rMt.forEach(t),v0r=r(qRe," (XLM model)"),qRe.forEach(t),F0r=i(ae),B4=n(ae,"LI",{});var NRe=s(B4);lFe=n(NRe,"STRONG",{});var tMt=s(lFe);T0r=r(tMt,"xlm-roberta"),tMt.forEach(t),M0r=r(NRe," \u2014 "),AH=n(NRe,"A",{href:!0});var aMt=s(AH);E0r=r(aMt,"TFXLMRobertaForSequenceClassification"),aMt.forEach(t),C0r=r(NRe," (XLM-RoBERTa model)"),NRe.forEach(t),w0r=i(ae),P4=n(ae,"LI",{});var jRe=s(P4);iFe=n(jRe,"STRONG",{});var nMt=s(iFe);A0r=r(nMt,"xlnet"),nMt.forEach(t),y0r=r(jRe," \u2014 "),yH=n(jRe,"A",{href:!0});var sMt=s(yH);L0r=r(sMt,"TFXLNetForSequenceClassification"),sMt.forEach(t),x0r=r(jRe," (XLNet model)"),jRe.forEach(t),ae.forEach(t),$0r=i(wl),T(I4.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),cNe=i(f),lc=n(f,"H2",{class:!0});var _De=s(lc);q4=n(_De,"A",{id:!0,class:!0,href:!0});var lMt=s(q4);dFe=n(lMt,"SPAN",{});var iMt=s(dFe);T(L8.$$.fragment,iMt),iMt.forEach(t),lMt.forEach(t),k0r=i(_De),cFe=n(_De,"SPAN",{});var dMt=s(cFe);S0r=r(dMt,"TFAutoModelForMultipleChoice"),dMt.forEach(t),_De.forEach(t),fNe=i(f),ar=n(f,"DIV",{class:!0});var Al=s(ar);T(x8.$$.fragment,Al),R0r=i(Al),ic=n(Al,"P",{});var XZ=s(ic);B0r=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LH=n(XZ,"A",{href:!0});var cMt=s(LH);P0r=r(cMt,"from_pretrained()"),cMt.forEach(t),I0r=r(XZ," class method or the "),xH=n(XZ,"A",{href:!0});var fMt=s(xH);q0r=r(fMt,"from_config()"),fMt.forEach(t),N0r=r(XZ,` class
method.`),XZ.forEach(t),j0r=i(Al),$8=n(Al,"P",{});var uDe=s($8);D0r=r(uDe,"This class cannot be instantiated directly using "),fFe=n(uDe,"CODE",{});var mMt=s(fFe);G0r=r(mMt,"__init__()"),mMt.forEach(t),O0r=r(uDe," (throws an error)."),uDe.forEach(t),V0r=i(Al),Bt=n(Al,"DIV",{class:!0});var CA=s(Bt);T(k8.$$.fragment,CA),X0r=i(CA),mFe=n(CA,"P",{});var gMt=s(mFe);z0r=r(gMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gMt.forEach(t),W0r=i(CA),dc=n(CA,"P",{});var zZ=s(dc);Q0r=r(zZ,`Note:
Loading a model from its configuration file does `),gFe=n(zZ,"STRONG",{});var hMt=s(gFe);H0r=r(hMt,"not"),hMt.forEach(t),U0r=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(zZ,"A",{href:!0});var pMt=s($H);J0r=r(pMt,"from_pretrained()"),pMt.forEach(t),Y0r=r(zZ," to load the model weights."),zZ.forEach(t),K0r=i(CA),T(N4.$$.fragment,CA),CA.forEach(t),Z0r=i(Al),Sr=n(Al,"DIV",{class:!0});var yl=s(Sr);T(S8.$$.fragment,yl),eTr=i(yl),hFe=n(yl,"P",{});var _Mt=s(hFe);oTr=r(_Mt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_Mt.forEach(t),rTr=i(yl),sn=n(yl,"P",{});var wA=s(sn);tTr=r(wA,"The model class to instantiate is selected based on the "),pFe=n(wA,"CODE",{});var uMt=s(pFe);aTr=r(uMt,"model_type"),uMt.forEach(t),nTr=r(wA,` property of the config object (either
passed as an argument or loaded from `),_Fe=n(wA,"CODE",{});var bMt=s(_Fe);sTr=r(bMt,"pretrained_model_name_or_path"),bMt.forEach(t),lTr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=n(wA,"CODE",{});var vMt=s(uFe);iTr=r(vMt,"pretrained_model_name_or_path"),vMt.forEach(t),dTr=r(wA,":"),wA.forEach(t),cTr=i(yl),he=n(yl,"UL",{});var ue=s(he);j4=n(ue,"LI",{});var DRe=s(j4);bFe=n(DRe,"STRONG",{});var FMt=s(bFe);fTr=r(FMt,"albert"),FMt.forEach(t),mTr=r(DRe," \u2014 "),kH=n(DRe,"A",{href:!0});var TMt=s(kH);gTr=r(TMt,"TFAlbertForMultipleChoice"),TMt.forEach(t),hTr=r(DRe," (ALBERT model)"),DRe.forEach(t),pTr=i(ue),D4=n(ue,"LI",{});var GRe=s(D4);vFe=n(GRe,"STRONG",{});var MMt=s(vFe);_Tr=r(MMt,"bert"),MMt.forEach(t),uTr=r(GRe," \u2014 "),SH=n(GRe,"A",{href:!0});var EMt=s(SH);bTr=r(EMt,"TFBertForMultipleChoice"),EMt.forEach(t),vTr=r(GRe," (BERT model)"),GRe.forEach(t),FTr=i(ue),G4=n(ue,"LI",{});var ORe=s(G4);FFe=n(ORe,"STRONG",{});var CMt=s(FFe);TTr=r(CMt,"camembert"),CMt.forEach(t),MTr=r(ORe," \u2014 "),RH=n(ORe,"A",{href:!0});var wMt=s(RH);ETr=r(wMt,"TFCamembertForMultipleChoice"),wMt.forEach(t),CTr=r(ORe," (CamemBERT model)"),ORe.forEach(t),wTr=i(ue),O4=n(ue,"LI",{});var VRe=s(O4);TFe=n(VRe,"STRONG",{});var AMt=s(TFe);ATr=r(AMt,"convbert"),AMt.forEach(t),yTr=r(VRe," \u2014 "),BH=n(VRe,"A",{href:!0});var yMt=s(BH);LTr=r(yMt,"TFConvBertForMultipleChoice"),yMt.forEach(t),xTr=r(VRe," (ConvBERT model)"),VRe.forEach(t),$Tr=i(ue),V4=n(ue,"LI",{});var XRe=s(V4);MFe=n(XRe,"STRONG",{});var LMt=s(MFe);kTr=r(LMt,"distilbert"),LMt.forEach(t),STr=r(XRe," \u2014 "),PH=n(XRe,"A",{href:!0});var xMt=s(PH);RTr=r(xMt,"TFDistilBertForMultipleChoice"),xMt.forEach(t),BTr=r(XRe," (DistilBERT model)"),XRe.forEach(t),PTr=i(ue),X4=n(ue,"LI",{});var zRe=s(X4);EFe=n(zRe,"STRONG",{});var $Mt=s(EFe);ITr=r($Mt,"electra"),$Mt.forEach(t),qTr=r(zRe," \u2014 "),IH=n(zRe,"A",{href:!0});var kMt=s(IH);NTr=r(kMt,"TFElectraForMultipleChoice"),kMt.forEach(t),jTr=r(zRe," (ELECTRA model)"),zRe.forEach(t),DTr=i(ue),z4=n(ue,"LI",{});var WRe=s(z4);CFe=n(WRe,"STRONG",{});var SMt=s(CFe);GTr=r(SMt,"flaubert"),SMt.forEach(t),OTr=r(WRe," \u2014 "),qH=n(WRe,"A",{href:!0});var RMt=s(qH);VTr=r(RMt,"TFFlaubertForMultipleChoice"),RMt.forEach(t),XTr=r(WRe," (FlauBERT model)"),WRe.forEach(t),zTr=i(ue),W4=n(ue,"LI",{});var QRe=s(W4);wFe=n(QRe,"STRONG",{});var BMt=s(wFe);WTr=r(BMt,"funnel"),BMt.forEach(t),QTr=r(QRe," \u2014 "),NH=n(QRe,"A",{href:!0});var PMt=s(NH);HTr=r(PMt,"TFFunnelForMultipleChoice"),PMt.forEach(t),UTr=r(QRe," (Funnel Transformer model)"),QRe.forEach(t),JTr=i(ue),Q4=n(ue,"LI",{});var HRe=s(Q4);AFe=n(HRe,"STRONG",{});var IMt=s(AFe);YTr=r(IMt,"longformer"),IMt.forEach(t),KTr=r(HRe," \u2014 "),jH=n(HRe,"A",{href:!0});var qMt=s(jH);ZTr=r(qMt,"TFLongformerForMultipleChoice"),qMt.forEach(t),e7r=r(HRe," (Longformer model)"),HRe.forEach(t),o7r=i(ue),H4=n(ue,"LI",{});var URe=s(H4);yFe=n(URe,"STRONG",{});var NMt=s(yFe);r7r=r(NMt,"mobilebert"),NMt.forEach(t),t7r=r(URe," \u2014 "),DH=n(URe,"A",{href:!0});var jMt=s(DH);a7r=r(jMt,"TFMobileBertForMultipleChoice"),jMt.forEach(t),n7r=r(URe," (MobileBERT model)"),URe.forEach(t),s7r=i(ue),U4=n(ue,"LI",{});var JRe=s(U4);LFe=n(JRe,"STRONG",{});var DMt=s(LFe);l7r=r(DMt,"mpnet"),DMt.forEach(t),i7r=r(JRe," \u2014 "),GH=n(JRe,"A",{href:!0});var GMt=s(GH);d7r=r(GMt,"TFMPNetForMultipleChoice"),GMt.forEach(t),c7r=r(JRe," (MPNet model)"),JRe.forEach(t),f7r=i(ue),J4=n(ue,"LI",{});var YRe=s(J4);xFe=n(YRe,"STRONG",{});var OMt=s(xFe);m7r=r(OMt,"rembert"),OMt.forEach(t),g7r=r(YRe," \u2014 "),OH=n(YRe,"A",{href:!0});var VMt=s(OH);h7r=r(VMt,"TFRemBertForMultipleChoice"),VMt.forEach(t),p7r=r(YRe," (RemBERT model)"),YRe.forEach(t),_7r=i(ue),Y4=n(ue,"LI",{});var KRe=s(Y4);$Fe=n(KRe,"STRONG",{});var XMt=s($Fe);u7r=r(XMt,"roberta"),XMt.forEach(t),b7r=r(KRe," \u2014 "),VH=n(KRe,"A",{href:!0});var zMt=s(VH);v7r=r(zMt,"TFRobertaForMultipleChoice"),zMt.forEach(t),F7r=r(KRe," (RoBERTa model)"),KRe.forEach(t),T7r=i(ue),K4=n(ue,"LI",{});var ZRe=s(K4);kFe=n(ZRe,"STRONG",{});var WMt=s(kFe);M7r=r(WMt,"roformer"),WMt.forEach(t),E7r=r(ZRe," \u2014 "),XH=n(ZRe,"A",{href:!0});var QMt=s(XH);C7r=r(QMt,"TFRoFormerForMultipleChoice"),QMt.forEach(t),w7r=r(ZRe," (RoFormer model)"),ZRe.forEach(t),A7r=i(ue),Z4=n(ue,"LI",{});var eBe=s(Z4);SFe=n(eBe,"STRONG",{});var HMt=s(SFe);y7r=r(HMt,"xlm"),HMt.forEach(t),L7r=r(eBe," \u2014 "),zH=n(eBe,"A",{href:!0});var UMt=s(zH);x7r=r(UMt,"TFXLMForMultipleChoice"),UMt.forEach(t),$7r=r(eBe," (XLM model)"),eBe.forEach(t),k7r=i(ue),eE=n(ue,"LI",{});var oBe=s(eE);RFe=n(oBe,"STRONG",{});var JMt=s(RFe);S7r=r(JMt,"xlm-roberta"),JMt.forEach(t),R7r=r(oBe," \u2014 "),WH=n(oBe,"A",{href:!0});var YMt=s(WH);B7r=r(YMt,"TFXLMRobertaForMultipleChoice"),YMt.forEach(t),P7r=r(oBe," (XLM-RoBERTa model)"),oBe.forEach(t),I7r=i(ue),oE=n(ue,"LI",{});var rBe=s(oE);BFe=n(rBe,"STRONG",{});var KMt=s(BFe);q7r=r(KMt,"xlnet"),KMt.forEach(t),N7r=r(rBe," \u2014 "),QH=n(rBe,"A",{href:!0});var ZMt=s(QH);j7r=r(ZMt,"TFXLNetForMultipleChoice"),ZMt.forEach(t),D7r=r(rBe," (XLNet model)"),rBe.forEach(t),ue.forEach(t),G7r=i(yl),T(rE.$$.fragment,yl),yl.forEach(t),Al.forEach(t),mNe=i(f),cc=n(f,"H2",{class:!0});var bDe=s(cc);tE=n(bDe,"A",{id:!0,class:!0,href:!0});var e4t=s(tE);PFe=n(e4t,"SPAN",{});var o4t=s(PFe);T(R8.$$.fragment,o4t),o4t.forEach(t),e4t.forEach(t),O7r=i(bDe),IFe=n(bDe,"SPAN",{});var r4t=s(IFe);V7r=r(r4t,"TFAutoModelForNextSentencePrediction"),r4t.forEach(t),bDe.forEach(t),gNe=i(f),nr=n(f,"DIV",{class:!0});var Ll=s(nr);T(B8.$$.fragment,Ll),X7r=i(Ll),fc=n(Ll,"P",{});var WZ=s(fc);z7r=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HH=n(WZ,"A",{href:!0});var t4t=s(HH);W7r=r(t4t,"from_pretrained()"),t4t.forEach(t),Q7r=r(WZ," class method or the "),UH=n(WZ,"A",{href:!0});var a4t=s(UH);H7r=r(a4t,"from_config()"),a4t.forEach(t),U7r=r(WZ,` class
method.`),WZ.forEach(t),J7r=i(Ll),P8=n(Ll,"P",{});var vDe=s(P8);Y7r=r(vDe,"This class cannot be instantiated directly using "),qFe=n(vDe,"CODE",{});var n4t=s(qFe);K7r=r(n4t,"__init__()"),n4t.forEach(t),Z7r=r(vDe," (throws an error)."),vDe.forEach(t),eMr=i(Ll),Pt=n(Ll,"DIV",{class:!0});var AA=s(Pt);T(I8.$$.fragment,AA),oMr=i(AA),NFe=n(AA,"P",{});var s4t=s(NFe);rMr=r(s4t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),s4t.forEach(t),tMr=i(AA),mc=n(AA,"P",{});var QZ=s(mc);aMr=r(QZ,`Note:
Loading a model from its configuration file does `),jFe=n(QZ,"STRONG",{});var l4t=s(jFe);nMr=r(l4t,"not"),l4t.forEach(t),sMr=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=n(QZ,"A",{href:!0});var i4t=s(JH);lMr=r(i4t,"from_pretrained()"),i4t.forEach(t),iMr=r(QZ," to load the model weights."),QZ.forEach(t),dMr=i(AA),T(aE.$$.fragment,AA),AA.forEach(t),cMr=i(Ll),Rr=n(Ll,"DIV",{class:!0});var xl=s(Rr);T(q8.$$.fragment,xl),fMr=i(xl),DFe=n(xl,"P",{});var d4t=s(DFe);mMr=r(d4t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),d4t.forEach(t),gMr=i(xl),ln=n(xl,"P",{});var yA=s(ln);hMr=r(yA,"The model class to instantiate is selected based on the "),GFe=n(yA,"CODE",{});var c4t=s(GFe);pMr=r(c4t,"model_type"),c4t.forEach(t),_Mr=r(yA,` property of the config object (either
passed as an argument or loaded from `),OFe=n(yA,"CODE",{});var f4t=s(OFe);uMr=r(f4t,"pretrained_model_name_or_path"),f4t.forEach(t),bMr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=n(yA,"CODE",{});var m4t=s(VFe);vMr=r(m4t,"pretrained_model_name_or_path"),m4t.forEach(t),FMr=r(yA,":"),yA.forEach(t),TMr=i(xl),N8=n(xl,"UL",{});var FDe=s(N8);nE=n(FDe,"LI",{});var tBe=s(nE);XFe=n(tBe,"STRONG",{});var g4t=s(XFe);MMr=r(g4t,"bert"),g4t.forEach(t),EMr=r(tBe," \u2014 "),YH=n(tBe,"A",{href:!0});var h4t=s(YH);CMr=r(h4t,"TFBertForNextSentencePrediction"),h4t.forEach(t),wMr=r(tBe," (BERT model)"),tBe.forEach(t),AMr=i(FDe),sE=n(FDe,"LI",{});var aBe=s(sE);zFe=n(aBe,"STRONG",{});var p4t=s(zFe);yMr=r(p4t,"mobilebert"),p4t.forEach(t),LMr=r(aBe," \u2014 "),KH=n(aBe,"A",{href:!0});var _4t=s(KH);xMr=r(_4t,"TFMobileBertForNextSentencePrediction"),_4t.forEach(t),$Mr=r(aBe," (MobileBERT model)"),aBe.forEach(t),FDe.forEach(t),kMr=i(xl),T(lE.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),hNe=i(f),gc=n(f,"H2",{class:!0});var TDe=s(gc);iE=n(TDe,"A",{id:!0,class:!0,href:!0});var u4t=s(iE);WFe=n(u4t,"SPAN",{});var b4t=s(WFe);T(j8.$$.fragment,b4t),b4t.forEach(t),u4t.forEach(t),SMr=i(TDe),QFe=n(TDe,"SPAN",{});var v4t=s(QFe);RMr=r(v4t,"TFAutoModelForTableQuestionAnswering"),v4t.forEach(t),TDe.forEach(t),pNe=i(f),sr=n(f,"DIV",{class:!0});var $l=s(sr);T(D8.$$.fragment,$l),BMr=i($l),hc=n($l,"P",{});var HZ=s(hc);PMr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ZH=n(HZ,"A",{href:!0});var F4t=s(ZH);IMr=r(F4t,"from_pretrained()"),F4t.forEach(t),qMr=r(HZ," class method or the "),eU=n(HZ,"A",{href:!0});var T4t=s(eU);NMr=r(T4t,"from_config()"),T4t.forEach(t),jMr=r(HZ,` class
method.`),HZ.forEach(t),DMr=i($l),G8=n($l,"P",{});var MDe=s(G8);GMr=r(MDe,"This class cannot be instantiated directly using "),HFe=n(MDe,"CODE",{});var M4t=s(HFe);OMr=r(M4t,"__init__()"),M4t.forEach(t),VMr=r(MDe," (throws an error)."),MDe.forEach(t),XMr=i($l),It=n($l,"DIV",{class:!0});var LA=s(It);T(O8.$$.fragment,LA),zMr=i(LA),UFe=n(LA,"P",{});var E4t=s(UFe);WMr=r(E4t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),E4t.forEach(t),QMr=i(LA),pc=n(LA,"P",{});var UZ=s(pc);HMr=r(UZ,`Note:
Loading a model from its configuration file does `),JFe=n(UZ,"STRONG",{});var C4t=s(JFe);UMr=r(C4t,"not"),C4t.forEach(t),JMr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(UZ,"A",{href:!0});var w4t=s(oU);YMr=r(w4t,"from_pretrained()"),w4t.forEach(t),KMr=r(UZ," to load the model weights."),UZ.forEach(t),ZMr=i(LA),T(dE.$$.fragment,LA),LA.forEach(t),e4r=i($l),Br=n($l,"DIV",{class:!0});var kl=s(Br);T(V8.$$.fragment,kl),o4r=i(kl),YFe=n(kl,"P",{});var A4t=s(YFe);r4r=r(A4t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),A4t.forEach(t),t4r=i(kl),dn=n(kl,"P",{});var xA=s(dn);a4r=r(xA,"The model class to instantiate is selected based on the "),KFe=n(xA,"CODE",{});var y4t=s(KFe);n4r=r(y4t,"model_type"),y4t.forEach(t),s4r=r(xA,` property of the config object (either
passed as an argument or loaded from `),ZFe=n(xA,"CODE",{});var L4t=s(ZFe);l4r=r(L4t,"pretrained_model_name_or_path"),L4t.forEach(t),i4r=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e0e=n(xA,"CODE",{});var x4t=s(e0e);d4r=r(x4t,"pretrained_model_name_or_path"),x4t.forEach(t),c4r=r(xA,":"),xA.forEach(t),f4r=i(kl),o0e=n(kl,"UL",{});var $4t=s(o0e);cE=n($4t,"LI",{});var nBe=s(cE);r0e=n(nBe,"STRONG",{});var k4t=s(r0e);m4r=r(k4t,"tapas"),k4t.forEach(t),g4r=r(nBe," \u2014 "),rU=n(nBe,"A",{href:!0});var S4t=s(rU);h4r=r(S4t,"TFTapasForQuestionAnswering"),S4t.forEach(t),p4r=r(nBe," (TAPAS model)"),nBe.forEach(t),$4t.forEach(t),_4r=i(kl),T(fE.$$.fragment,kl),kl.forEach(t),$l.forEach(t),_Ne=i(f),_c=n(f,"H2",{class:!0});var EDe=s(_c);mE=n(EDe,"A",{id:!0,class:!0,href:!0});var R4t=s(mE);t0e=n(R4t,"SPAN",{});var B4t=s(t0e);T(X8.$$.fragment,B4t),B4t.forEach(t),R4t.forEach(t),u4r=i(EDe),a0e=n(EDe,"SPAN",{});var P4t=s(a0e);b4r=r(P4t,"TFAutoModelForTokenClassification"),P4t.forEach(t),EDe.forEach(t),uNe=i(f),lr=n(f,"DIV",{class:!0});var Sl=s(lr);T(z8.$$.fragment,Sl),v4r=i(Sl),uc=n(Sl,"P",{});var JZ=s(uc);F4r=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tU=n(JZ,"A",{href:!0});var I4t=s(tU);T4r=r(I4t,"from_pretrained()"),I4t.forEach(t),M4r=r(JZ," class method or the "),aU=n(JZ,"A",{href:!0});var q4t=s(aU);E4r=r(q4t,"from_config()"),q4t.forEach(t),C4r=r(JZ,` class
method.`),JZ.forEach(t),w4r=i(Sl),W8=n(Sl,"P",{});var CDe=s(W8);A4r=r(CDe,"This class cannot be instantiated directly using "),n0e=n(CDe,"CODE",{});var N4t=s(n0e);y4r=r(N4t,"__init__()"),N4t.forEach(t),L4r=r(CDe," (throws an error)."),CDe.forEach(t),x4r=i(Sl),qt=n(Sl,"DIV",{class:!0});var $A=s(qt);T(Q8.$$.fragment,$A),$4r=i($A),s0e=n($A,"P",{});var j4t=s(s0e);k4r=r(j4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),j4t.forEach(t),S4r=i($A),bc=n($A,"P",{});var YZ=s(bc);R4r=r(YZ,`Note:
Loading a model from its configuration file does `),l0e=n(YZ,"STRONG",{});var D4t=s(l0e);B4r=r(D4t,"not"),D4t.forEach(t),P4r=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(YZ,"A",{href:!0});var G4t=s(nU);I4r=r(G4t,"from_pretrained()"),G4t.forEach(t),q4r=r(YZ," to load the model weights."),YZ.forEach(t),N4r=i($A),T(gE.$$.fragment,$A),$A.forEach(t),j4r=i(Sl),Pr=n(Sl,"DIV",{class:!0});var Rl=s(Pr);T(H8.$$.fragment,Rl),D4r=i(Rl),i0e=n(Rl,"P",{});var O4t=s(i0e);G4r=r(O4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),O4t.forEach(t),O4r=i(Rl),cn=n(Rl,"P",{});var kA=s(cn);V4r=r(kA,"The model class to instantiate is selected based on the "),d0e=n(kA,"CODE",{});var V4t=s(d0e);X4r=r(V4t,"model_type"),V4t.forEach(t),z4r=r(kA,` property of the config object (either
passed as an argument or loaded from `),c0e=n(kA,"CODE",{});var X4t=s(c0e);W4r=r(X4t,"pretrained_model_name_or_path"),X4t.forEach(t),Q4r=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f0e=n(kA,"CODE",{});var z4t=s(f0e);H4r=r(z4t,"pretrained_model_name_or_path"),z4t.forEach(t),U4r=r(kA,":"),kA.forEach(t),J4r=i(Rl),de=n(Rl,"UL",{});var me=s(de);hE=n(me,"LI",{});var sBe=s(hE);m0e=n(sBe,"STRONG",{});var W4t=s(m0e);Y4r=r(W4t,"albert"),W4t.forEach(t),K4r=r(sBe," \u2014 "),sU=n(sBe,"A",{href:!0});var Q4t=s(sU);Z4r=r(Q4t,"TFAlbertForTokenClassification"),Q4t.forEach(t),eEr=r(sBe," (ALBERT model)"),sBe.forEach(t),oEr=i(me),pE=n(me,"LI",{});var lBe=s(pE);g0e=n(lBe,"STRONG",{});var H4t=s(g0e);rEr=r(H4t,"bert"),H4t.forEach(t),tEr=r(lBe," \u2014 "),lU=n(lBe,"A",{href:!0});var U4t=s(lU);aEr=r(U4t,"TFBertForTokenClassification"),U4t.forEach(t),nEr=r(lBe," (BERT model)"),lBe.forEach(t),sEr=i(me),_E=n(me,"LI",{});var iBe=s(_E);h0e=n(iBe,"STRONG",{});var J4t=s(h0e);lEr=r(J4t,"camembert"),J4t.forEach(t),iEr=r(iBe," \u2014 "),iU=n(iBe,"A",{href:!0});var Y4t=s(iU);dEr=r(Y4t,"TFCamembertForTokenClassification"),Y4t.forEach(t),cEr=r(iBe," (CamemBERT model)"),iBe.forEach(t),fEr=i(me),uE=n(me,"LI",{});var dBe=s(uE);p0e=n(dBe,"STRONG",{});var K4t=s(p0e);mEr=r(K4t,"convbert"),K4t.forEach(t),gEr=r(dBe," \u2014 "),dU=n(dBe,"A",{href:!0});var Z4t=s(dU);hEr=r(Z4t,"TFConvBertForTokenClassification"),Z4t.forEach(t),pEr=r(dBe," (ConvBERT model)"),dBe.forEach(t),_Er=i(me),bE=n(me,"LI",{});var cBe=s(bE);_0e=n(cBe,"STRONG",{});var eEt=s(_0e);uEr=r(eEt,"deberta"),eEt.forEach(t),bEr=r(cBe," \u2014 "),cU=n(cBe,"A",{href:!0});var oEt=s(cU);vEr=r(oEt,"TFDebertaForTokenClassification"),oEt.forEach(t),FEr=r(cBe," (DeBERTa model)"),cBe.forEach(t),TEr=i(me),vE=n(me,"LI",{});var fBe=s(vE);u0e=n(fBe,"STRONG",{});var rEt=s(u0e);MEr=r(rEt,"deberta-v2"),rEt.forEach(t),EEr=r(fBe," \u2014 "),fU=n(fBe,"A",{href:!0});var tEt=s(fU);CEr=r(tEt,"TFDebertaV2ForTokenClassification"),tEt.forEach(t),wEr=r(fBe," (DeBERTa-v2 model)"),fBe.forEach(t),AEr=i(me),FE=n(me,"LI",{});var mBe=s(FE);b0e=n(mBe,"STRONG",{});var aEt=s(b0e);yEr=r(aEt,"distilbert"),aEt.forEach(t),LEr=r(mBe," \u2014 "),mU=n(mBe,"A",{href:!0});var nEt=s(mU);xEr=r(nEt,"TFDistilBertForTokenClassification"),nEt.forEach(t),$Er=r(mBe," (DistilBERT model)"),mBe.forEach(t),kEr=i(me),TE=n(me,"LI",{});var gBe=s(TE);v0e=n(gBe,"STRONG",{});var sEt=s(v0e);SEr=r(sEt,"electra"),sEt.forEach(t),REr=r(gBe," \u2014 "),gU=n(gBe,"A",{href:!0});var lEt=s(gU);BEr=r(lEt,"TFElectraForTokenClassification"),lEt.forEach(t),PEr=r(gBe," (ELECTRA model)"),gBe.forEach(t),IEr=i(me),ME=n(me,"LI",{});var hBe=s(ME);F0e=n(hBe,"STRONG",{});var iEt=s(F0e);qEr=r(iEt,"flaubert"),iEt.forEach(t),NEr=r(hBe," \u2014 "),hU=n(hBe,"A",{href:!0});var dEt=s(hU);jEr=r(dEt,"TFFlaubertForTokenClassification"),dEt.forEach(t),DEr=r(hBe," (FlauBERT model)"),hBe.forEach(t),GEr=i(me),EE=n(me,"LI",{});var pBe=s(EE);T0e=n(pBe,"STRONG",{});var cEt=s(T0e);OEr=r(cEt,"funnel"),cEt.forEach(t),VEr=r(pBe," \u2014 "),pU=n(pBe,"A",{href:!0});var fEt=s(pU);XEr=r(fEt,"TFFunnelForTokenClassification"),fEt.forEach(t),zEr=r(pBe," (Funnel Transformer model)"),pBe.forEach(t),WEr=i(me),CE=n(me,"LI",{});var _Be=s(CE);M0e=n(_Be,"STRONG",{});var mEt=s(M0e);QEr=r(mEt,"layoutlm"),mEt.forEach(t),HEr=r(_Be," \u2014 "),_U=n(_Be,"A",{href:!0});var gEt=s(_U);UEr=r(gEt,"TFLayoutLMForTokenClassification"),gEt.forEach(t),JEr=r(_Be," (LayoutLM model)"),_Be.forEach(t),YEr=i(me),wE=n(me,"LI",{});var uBe=s(wE);E0e=n(uBe,"STRONG",{});var hEt=s(E0e);KEr=r(hEt,"longformer"),hEt.forEach(t),ZEr=r(uBe," \u2014 "),uU=n(uBe,"A",{href:!0});var pEt=s(uU);eCr=r(pEt,"TFLongformerForTokenClassification"),pEt.forEach(t),oCr=r(uBe," (Longformer model)"),uBe.forEach(t),rCr=i(me),AE=n(me,"LI",{});var bBe=s(AE);C0e=n(bBe,"STRONG",{});var _Et=s(C0e);tCr=r(_Et,"mobilebert"),_Et.forEach(t),aCr=r(bBe," \u2014 "),bU=n(bBe,"A",{href:!0});var uEt=s(bU);nCr=r(uEt,"TFMobileBertForTokenClassification"),uEt.forEach(t),sCr=r(bBe," (MobileBERT model)"),bBe.forEach(t),lCr=i(me),yE=n(me,"LI",{});var vBe=s(yE);w0e=n(vBe,"STRONG",{});var bEt=s(w0e);iCr=r(bEt,"mpnet"),bEt.forEach(t),dCr=r(vBe," \u2014 "),vU=n(vBe,"A",{href:!0});var vEt=s(vU);cCr=r(vEt,"TFMPNetForTokenClassification"),vEt.forEach(t),fCr=r(vBe," (MPNet model)"),vBe.forEach(t),mCr=i(me),LE=n(me,"LI",{});var FBe=s(LE);A0e=n(FBe,"STRONG",{});var FEt=s(A0e);gCr=r(FEt,"rembert"),FEt.forEach(t),hCr=r(FBe," \u2014 "),FU=n(FBe,"A",{href:!0});var TEt=s(FU);pCr=r(TEt,"TFRemBertForTokenClassification"),TEt.forEach(t),_Cr=r(FBe," (RemBERT model)"),FBe.forEach(t),uCr=i(me),xE=n(me,"LI",{});var TBe=s(xE);y0e=n(TBe,"STRONG",{});var MEt=s(y0e);bCr=r(MEt,"roberta"),MEt.forEach(t),vCr=r(TBe," \u2014 "),TU=n(TBe,"A",{href:!0});var EEt=s(TU);FCr=r(EEt,"TFRobertaForTokenClassification"),EEt.forEach(t),TCr=r(TBe," (RoBERTa model)"),TBe.forEach(t),MCr=i(me),$E=n(me,"LI",{});var MBe=s($E);L0e=n(MBe,"STRONG",{});var CEt=s(L0e);ECr=r(CEt,"roformer"),CEt.forEach(t),CCr=r(MBe," \u2014 "),MU=n(MBe,"A",{href:!0});var wEt=s(MU);wCr=r(wEt,"TFRoFormerForTokenClassification"),wEt.forEach(t),ACr=r(MBe," (RoFormer model)"),MBe.forEach(t),yCr=i(me),kE=n(me,"LI",{});var EBe=s(kE);x0e=n(EBe,"STRONG",{});var AEt=s(x0e);LCr=r(AEt,"xlm"),AEt.forEach(t),xCr=r(EBe," \u2014 "),EU=n(EBe,"A",{href:!0});var yEt=s(EU);$Cr=r(yEt,"TFXLMForTokenClassification"),yEt.forEach(t),kCr=r(EBe," (XLM model)"),EBe.forEach(t),SCr=i(me),SE=n(me,"LI",{});var CBe=s(SE);$0e=n(CBe,"STRONG",{});var LEt=s($0e);RCr=r(LEt,"xlm-roberta"),LEt.forEach(t),BCr=r(CBe," \u2014 "),CU=n(CBe,"A",{href:!0});var xEt=s(CU);PCr=r(xEt,"TFXLMRobertaForTokenClassification"),xEt.forEach(t),ICr=r(CBe," (XLM-RoBERTa model)"),CBe.forEach(t),qCr=i(me),RE=n(me,"LI",{});var wBe=s(RE);k0e=n(wBe,"STRONG",{});var $Et=s(k0e);NCr=r($Et,"xlnet"),$Et.forEach(t),jCr=r(wBe," \u2014 "),wU=n(wBe,"A",{href:!0});var kEt=s(wU);DCr=r(kEt,"TFXLNetForTokenClassification"),kEt.forEach(t),GCr=r(wBe," (XLNet model)"),wBe.forEach(t),me.forEach(t),OCr=i(Rl),T(BE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),bNe=i(f),vc=n(f,"H2",{class:!0});var wDe=s(vc);PE=n(wDe,"A",{id:!0,class:!0,href:!0});var SEt=s(PE);S0e=n(SEt,"SPAN",{});var REt=s(S0e);T(U8.$$.fragment,REt),REt.forEach(t),SEt.forEach(t),VCr=i(wDe),R0e=n(wDe,"SPAN",{});var BEt=s(R0e);XCr=r(BEt,"TFAutoModelForQuestionAnswering"),BEt.forEach(t),wDe.forEach(t),vNe=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(J8.$$.fragment,Bl),zCr=i(Bl),Fc=n(Bl,"P",{});var KZ=s(Fc);WCr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AU=n(KZ,"A",{href:!0});var PEt=s(AU);QCr=r(PEt,"from_pretrained()"),PEt.forEach(t),HCr=r(KZ," class method or the "),yU=n(KZ,"A",{href:!0});var IEt=s(yU);UCr=r(IEt,"from_config()"),IEt.forEach(t),JCr=r(KZ,` class
method.`),KZ.forEach(t),YCr=i(Bl),Y8=n(Bl,"P",{});var ADe=s(Y8);KCr=r(ADe,"This class cannot be instantiated directly using "),B0e=n(ADe,"CODE",{});var qEt=s(B0e);ZCr=r(qEt,"__init__()"),qEt.forEach(t),e5r=r(ADe," (throws an error)."),ADe.forEach(t),o5r=i(Bl),Nt=n(Bl,"DIV",{class:!0});var SA=s(Nt);T(K8.$$.fragment,SA),r5r=i(SA),P0e=n(SA,"P",{});var NEt=s(P0e);t5r=r(NEt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),NEt.forEach(t),a5r=i(SA),Tc=n(SA,"P",{});var ZZ=s(Tc);n5r=r(ZZ,`Note:
Loading a model from its configuration file does `),I0e=n(ZZ,"STRONG",{});var jEt=s(I0e);s5r=r(jEt,"not"),jEt.forEach(t),l5r=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=n(ZZ,"A",{href:!0});var DEt=s(LU);i5r=r(DEt,"from_pretrained()"),DEt.forEach(t),d5r=r(ZZ," to load the model weights."),ZZ.forEach(t),c5r=i(SA),T(IE.$$.fragment,SA),SA.forEach(t),f5r=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Pl=s(Ir);T(Z8.$$.fragment,Pl),m5r=i(Pl),q0e=n(Pl,"P",{});var GEt=s(q0e);g5r=r(GEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),GEt.forEach(t),h5r=i(Pl),fn=n(Pl,"P",{});var RA=s(fn);p5r=r(RA,"The model class to instantiate is selected based on the "),N0e=n(RA,"CODE",{});var OEt=s(N0e);_5r=r(OEt,"model_type"),OEt.forEach(t),u5r=r(RA,` property of the config object (either
passed as an argument or loaded from `),j0e=n(RA,"CODE",{});var VEt=s(j0e);b5r=r(VEt,"pretrained_model_name_or_path"),VEt.forEach(t),v5r=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D0e=n(RA,"CODE",{});var XEt=s(D0e);F5r=r(XEt,"pretrained_model_name_or_path"),XEt.forEach(t),T5r=r(RA,":"),RA.forEach(t),M5r=i(Pl),ce=n(Pl,"UL",{});var ge=s(ce);qE=n(ge,"LI",{});var ABe=s(qE);G0e=n(ABe,"STRONG",{});var zEt=s(G0e);E5r=r(zEt,"albert"),zEt.forEach(t),C5r=r(ABe," \u2014 "),xU=n(ABe,"A",{href:!0});var WEt=s(xU);w5r=r(WEt,"TFAlbertForQuestionAnswering"),WEt.forEach(t),A5r=r(ABe," (ALBERT model)"),ABe.forEach(t),y5r=i(ge),NE=n(ge,"LI",{});var yBe=s(NE);O0e=n(yBe,"STRONG",{});var QEt=s(O0e);L5r=r(QEt,"bert"),QEt.forEach(t),x5r=r(yBe," \u2014 "),$U=n(yBe,"A",{href:!0});var HEt=s($U);$5r=r(HEt,"TFBertForQuestionAnswering"),HEt.forEach(t),k5r=r(yBe," (BERT model)"),yBe.forEach(t),S5r=i(ge),jE=n(ge,"LI",{});var LBe=s(jE);V0e=n(LBe,"STRONG",{});var UEt=s(V0e);R5r=r(UEt,"camembert"),UEt.forEach(t),B5r=r(LBe," \u2014 "),kU=n(LBe,"A",{href:!0});var JEt=s(kU);P5r=r(JEt,"TFCamembertForQuestionAnswering"),JEt.forEach(t),I5r=r(LBe," (CamemBERT model)"),LBe.forEach(t),q5r=i(ge),DE=n(ge,"LI",{});var xBe=s(DE);X0e=n(xBe,"STRONG",{});var YEt=s(X0e);N5r=r(YEt,"convbert"),YEt.forEach(t),j5r=r(xBe," \u2014 "),SU=n(xBe,"A",{href:!0});var KEt=s(SU);D5r=r(KEt,"TFConvBertForQuestionAnswering"),KEt.forEach(t),G5r=r(xBe," (ConvBERT model)"),xBe.forEach(t),O5r=i(ge),GE=n(ge,"LI",{});var $Be=s(GE);z0e=n($Be,"STRONG",{});var ZEt=s(z0e);V5r=r(ZEt,"deberta"),ZEt.forEach(t),X5r=r($Be," \u2014 "),RU=n($Be,"A",{href:!0});var eCt=s(RU);z5r=r(eCt,"TFDebertaForQuestionAnswering"),eCt.forEach(t),W5r=r($Be," (DeBERTa model)"),$Be.forEach(t),Q5r=i(ge),OE=n(ge,"LI",{});var kBe=s(OE);W0e=n(kBe,"STRONG",{});var oCt=s(W0e);H5r=r(oCt,"deberta-v2"),oCt.forEach(t),U5r=r(kBe," \u2014 "),BU=n(kBe,"A",{href:!0});var rCt=s(BU);J5r=r(rCt,"TFDebertaV2ForQuestionAnswering"),rCt.forEach(t),Y5r=r(kBe," (DeBERTa-v2 model)"),kBe.forEach(t),K5r=i(ge),VE=n(ge,"LI",{});var SBe=s(VE);Q0e=n(SBe,"STRONG",{});var tCt=s(Q0e);Z5r=r(tCt,"distilbert"),tCt.forEach(t),e3r=r(SBe," \u2014 "),PU=n(SBe,"A",{href:!0});var aCt=s(PU);o3r=r(aCt,"TFDistilBertForQuestionAnswering"),aCt.forEach(t),r3r=r(SBe," (DistilBERT model)"),SBe.forEach(t),t3r=i(ge),XE=n(ge,"LI",{});var RBe=s(XE);H0e=n(RBe,"STRONG",{});var nCt=s(H0e);a3r=r(nCt,"electra"),nCt.forEach(t),n3r=r(RBe," \u2014 "),IU=n(RBe,"A",{href:!0});var sCt=s(IU);s3r=r(sCt,"TFElectraForQuestionAnswering"),sCt.forEach(t),l3r=r(RBe," (ELECTRA model)"),RBe.forEach(t),i3r=i(ge),zE=n(ge,"LI",{});var BBe=s(zE);U0e=n(BBe,"STRONG",{});var lCt=s(U0e);d3r=r(lCt,"flaubert"),lCt.forEach(t),c3r=r(BBe," \u2014 "),qU=n(BBe,"A",{href:!0});var iCt=s(qU);f3r=r(iCt,"TFFlaubertForQuestionAnsweringSimple"),iCt.forEach(t),m3r=r(BBe," (FlauBERT model)"),BBe.forEach(t),g3r=i(ge),WE=n(ge,"LI",{});var PBe=s(WE);J0e=n(PBe,"STRONG",{});var dCt=s(J0e);h3r=r(dCt,"funnel"),dCt.forEach(t),p3r=r(PBe," \u2014 "),NU=n(PBe,"A",{href:!0});var cCt=s(NU);_3r=r(cCt,"TFFunnelForQuestionAnswering"),cCt.forEach(t),u3r=r(PBe," (Funnel Transformer model)"),PBe.forEach(t),b3r=i(ge),QE=n(ge,"LI",{});var IBe=s(QE);Y0e=n(IBe,"STRONG",{});var fCt=s(Y0e);v3r=r(fCt,"gptj"),fCt.forEach(t),F3r=r(IBe," \u2014 "),jU=n(IBe,"A",{href:!0});var mCt=s(jU);T3r=r(mCt,"TFGPTJForQuestionAnswering"),mCt.forEach(t),M3r=r(IBe," (GPT-J model)"),IBe.forEach(t),E3r=i(ge),HE=n(ge,"LI",{});var qBe=s(HE);K0e=n(qBe,"STRONG",{});var gCt=s(K0e);C3r=r(gCt,"longformer"),gCt.forEach(t),w3r=r(qBe," \u2014 "),DU=n(qBe,"A",{href:!0});var hCt=s(DU);A3r=r(hCt,"TFLongformerForQuestionAnswering"),hCt.forEach(t),y3r=r(qBe," (Longformer model)"),qBe.forEach(t),L3r=i(ge),UE=n(ge,"LI",{});var NBe=s(UE);Z0e=n(NBe,"STRONG",{});var pCt=s(Z0e);x3r=r(pCt,"mobilebert"),pCt.forEach(t),$3r=r(NBe," \u2014 "),GU=n(NBe,"A",{href:!0});var _Ct=s(GU);k3r=r(_Ct,"TFMobileBertForQuestionAnswering"),_Ct.forEach(t),S3r=r(NBe," (MobileBERT model)"),NBe.forEach(t),R3r=i(ge),JE=n(ge,"LI",{});var jBe=s(JE);eTe=n(jBe,"STRONG",{});var uCt=s(eTe);B3r=r(uCt,"mpnet"),uCt.forEach(t),P3r=r(jBe," \u2014 "),OU=n(jBe,"A",{href:!0});var bCt=s(OU);I3r=r(bCt,"TFMPNetForQuestionAnswering"),bCt.forEach(t),q3r=r(jBe," (MPNet model)"),jBe.forEach(t),N3r=i(ge),YE=n(ge,"LI",{});var DBe=s(YE);oTe=n(DBe,"STRONG",{});var vCt=s(oTe);j3r=r(vCt,"rembert"),vCt.forEach(t),D3r=r(DBe," \u2014 "),VU=n(DBe,"A",{href:!0});var FCt=s(VU);G3r=r(FCt,"TFRemBertForQuestionAnswering"),FCt.forEach(t),O3r=r(DBe," (RemBERT model)"),DBe.forEach(t),V3r=i(ge),KE=n(ge,"LI",{});var GBe=s(KE);rTe=n(GBe,"STRONG",{});var TCt=s(rTe);X3r=r(TCt,"roberta"),TCt.forEach(t),z3r=r(GBe," \u2014 "),XU=n(GBe,"A",{href:!0});var MCt=s(XU);W3r=r(MCt,"TFRobertaForQuestionAnswering"),MCt.forEach(t),Q3r=r(GBe," (RoBERTa model)"),GBe.forEach(t),H3r=i(ge),ZE=n(ge,"LI",{});var OBe=s(ZE);tTe=n(OBe,"STRONG",{});var ECt=s(tTe);U3r=r(ECt,"roformer"),ECt.forEach(t),J3r=r(OBe," \u2014 "),zU=n(OBe,"A",{href:!0});var CCt=s(zU);Y3r=r(CCt,"TFRoFormerForQuestionAnswering"),CCt.forEach(t),K3r=r(OBe," (RoFormer model)"),OBe.forEach(t),Z3r=i(ge),eC=n(ge,"LI",{});var VBe=s(eC);aTe=n(VBe,"STRONG",{});var wCt=s(aTe);ewr=r(wCt,"xlm"),wCt.forEach(t),owr=r(VBe," \u2014 "),WU=n(VBe,"A",{href:!0});var ACt=s(WU);rwr=r(ACt,"TFXLMForQuestionAnsweringSimple"),ACt.forEach(t),twr=r(VBe," (XLM model)"),VBe.forEach(t),awr=i(ge),oC=n(ge,"LI",{});var XBe=s(oC);nTe=n(XBe,"STRONG",{});var yCt=s(nTe);nwr=r(yCt,"xlm-roberta"),yCt.forEach(t),swr=r(XBe," \u2014 "),QU=n(XBe,"A",{href:!0});var LCt=s(QU);lwr=r(LCt,"TFXLMRobertaForQuestionAnswering"),LCt.forEach(t),iwr=r(XBe," (XLM-RoBERTa model)"),XBe.forEach(t),dwr=i(ge),rC=n(ge,"LI",{});var zBe=s(rC);sTe=n(zBe,"STRONG",{});var xCt=s(sTe);cwr=r(xCt,"xlnet"),xCt.forEach(t),fwr=r(zBe," \u2014 "),HU=n(zBe,"A",{href:!0});var $Ct=s(HU);mwr=r($Ct,"TFXLNetForQuestionAnsweringSimple"),$Ct.forEach(t),gwr=r(zBe," (XLNet model)"),zBe.forEach(t),ge.forEach(t),hwr=i(Pl),T(tC.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),FNe=i(f),Mc=n(f,"H2",{class:!0});var yDe=s(Mc);aC=n(yDe,"A",{id:!0,class:!0,href:!0});var kCt=s(aC);lTe=n(kCt,"SPAN",{});var SCt=s(lTe);T(e9.$$.fragment,SCt),SCt.forEach(t),kCt.forEach(t),pwr=i(yDe),iTe=n(yDe,"SPAN",{});var RCt=s(iTe);_wr=r(RCt,"TFAutoModelForVision2Seq"),RCt.forEach(t),yDe.forEach(t),TNe=i(f),dr=n(f,"DIV",{class:!0});var Il=s(dr);T(o9.$$.fragment,Il),uwr=i(Il),Ec=n(Il,"P",{});var eee=s(Ec);bwr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),UU=n(eee,"A",{href:!0});var BCt=s(UU);vwr=r(BCt,"from_pretrained()"),BCt.forEach(t),Fwr=r(eee," class method or the "),JU=n(eee,"A",{href:!0});var PCt=s(JU);Twr=r(PCt,"from_config()"),PCt.forEach(t),Mwr=r(eee,` class
method.`),eee.forEach(t),Ewr=i(Il),r9=n(Il,"P",{});var LDe=s(r9);Cwr=r(LDe,"This class cannot be instantiated directly using "),dTe=n(LDe,"CODE",{});var ICt=s(dTe);wwr=r(ICt,"__init__()"),ICt.forEach(t),Awr=r(LDe," (throws an error)."),LDe.forEach(t),ywr=i(Il),jt=n(Il,"DIV",{class:!0});var BA=s(jt);T(t9.$$.fragment,BA),Lwr=i(BA),cTe=n(BA,"P",{});var qCt=s(cTe);xwr=r(qCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qCt.forEach(t),$wr=i(BA),Cc=n(BA,"P",{});var oee=s(Cc);kwr=r(oee,`Note:
Loading a model from its configuration file does `),fTe=n(oee,"STRONG",{});var NCt=s(fTe);Swr=r(NCt,"not"),NCt.forEach(t),Rwr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(oee,"A",{href:!0});var jCt=s(YU);Bwr=r(jCt,"from_pretrained()"),jCt.forEach(t),Pwr=r(oee," to load the model weights."),oee.forEach(t),Iwr=i(BA),T(nC.$$.fragment,BA),BA.forEach(t),qwr=i(Il),qr=n(Il,"DIV",{class:!0});var ql=s(qr);T(a9.$$.fragment,ql),Nwr=i(ql),mTe=n(ql,"P",{});var DCt=s(mTe);jwr=r(DCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),DCt.forEach(t),Dwr=i(ql),mn=n(ql,"P",{});var PA=s(mn);Gwr=r(PA,"The model class to instantiate is selected based on the "),gTe=n(PA,"CODE",{});var GCt=s(gTe);Owr=r(GCt,"model_type"),GCt.forEach(t),Vwr=r(PA,` property of the config object (either
passed as an argument or loaded from `),hTe=n(PA,"CODE",{});var OCt=s(hTe);Xwr=r(OCt,"pretrained_model_name_or_path"),OCt.forEach(t),zwr=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pTe=n(PA,"CODE",{});var VCt=s(pTe);Wwr=r(VCt,"pretrained_model_name_or_path"),VCt.forEach(t),Qwr=r(PA,":"),PA.forEach(t),Hwr=i(ql),_Te=n(ql,"UL",{});var XCt=s(_Te);sC=n(XCt,"LI",{});var WBe=s(sC);uTe=n(WBe,"STRONG",{});var zCt=s(uTe);Uwr=r(zCt,"vision-encoder-decoder"),zCt.forEach(t),Jwr=r(WBe," \u2014 "),KU=n(WBe,"A",{href:!0});var WCt=s(KU);Ywr=r(WCt,"TFVisionEncoderDecoderModel"),WCt.forEach(t),Kwr=r(WBe," (Vision Encoder decoder model)"),WBe.forEach(t),XCt.forEach(t),Zwr=i(ql),T(lC.$$.fragment,ql),ql.forEach(t),Il.forEach(t),MNe=i(f),wc=n(f,"H2",{class:!0});var xDe=s(wc);iC=n(xDe,"A",{id:!0,class:!0,href:!0});var QCt=s(iC);bTe=n(QCt,"SPAN",{});var HCt=s(bTe);T(n9.$$.fragment,HCt),HCt.forEach(t),QCt.forEach(t),eAr=i(xDe),vTe=n(xDe,"SPAN",{});var UCt=s(vTe);oAr=r(UCt,"TFAutoModelForSpeechSeq2Seq"),UCt.forEach(t),xDe.forEach(t),ENe=i(f),cr=n(f,"DIV",{class:!0});var Nl=s(cr);T(s9.$$.fragment,Nl),rAr=i(Nl),Ac=n(Nl,"P",{});var ree=s(Ac);tAr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZU=n(ree,"A",{href:!0});var JCt=s(ZU);aAr=r(JCt,"from_pretrained()"),JCt.forEach(t),nAr=r(ree," class method or the "),eJ=n(ree,"A",{href:!0});var YCt=s(eJ);sAr=r(YCt,"from_config()"),YCt.forEach(t),lAr=r(ree,` class
method.`),ree.forEach(t),iAr=i(Nl),l9=n(Nl,"P",{});var $De=s(l9);dAr=r($De,"This class cannot be instantiated directly using "),FTe=n($De,"CODE",{});var KCt=s(FTe);cAr=r(KCt,"__init__()"),KCt.forEach(t),fAr=r($De," (throws an error)."),$De.forEach(t),mAr=i(Nl),Dt=n(Nl,"DIV",{class:!0});var IA=s(Dt);T(i9.$$.fragment,IA),gAr=i(IA),TTe=n(IA,"P",{});var ZCt=s(TTe);hAr=r(ZCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ZCt.forEach(t),pAr=i(IA),yc=n(IA,"P",{});var tee=s(yc);_Ar=r(tee,`Note:
Loading a model from its configuration file does `),MTe=n(tee,"STRONG",{});var e5t=s(MTe);uAr=r(e5t,"not"),e5t.forEach(t),bAr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=n(tee,"A",{href:!0});var o5t=s(oJ);vAr=r(o5t,"from_pretrained()"),o5t.forEach(t),FAr=r(tee," to load the model weights."),tee.forEach(t),TAr=i(IA),T(dC.$$.fragment,IA),IA.forEach(t),MAr=i(Nl),Nr=n(Nl,"DIV",{class:!0});var jl=s(Nr);T(d9.$$.fragment,jl),EAr=i(jl),ETe=n(jl,"P",{});var r5t=s(ETe);CAr=r(r5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),r5t.forEach(t),wAr=i(jl),gn=n(jl,"P",{});var qA=s(gn);AAr=r(qA,"The model class to instantiate is selected based on the "),CTe=n(qA,"CODE",{});var t5t=s(CTe);yAr=r(t5t,"model_type"),t5t.forEach(t),LAr=r(qA,` property of the config object (either
passed as an argument or loaded from `),wTe=n(qA,"CODE",{});var a5t=s(wTe);xAr=r(a5t,"pretrained_model_name_or_path"),a5t.forEach(t),$Ar=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ATe=n(qA,"CODE",{});var n5t=s(ATe);kAr=r(n5t,"pretrained_model_name_or_path"),n5t.forEach(t),SAr=r(qA,":"),qA.forEach(t),RAr=i(jl),yTe=n(jl,"UL",{});var s5t=s(yTe);cC=n(s5t,"LI",{});var QBe=s(cC);LTe=n(QBe,"STRONG",{});var l5t=s(LTe);BAr=r(l5t,"speech_to_text"),l5t.forEach(t),PAr=r(QBe," \u2014 "),rJ=n(QBe,"A",{href:!0});var i5t=s(rJ);IAr=r(i5t,"TFSpeech2TextForConditionalGeneration"),i5t.forEach(t),qAr=r(QBe," (Speech2Text model)"),QBe.forEach(t),s5t.forEach(t),NAr=i(jl),T(fC.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),CNe=i(f),Lc=n(f,"H2",{class:!0});var kDe=s(Lc);mC=n(kDe,"A",{id:!0,class:!0,href:!0});var d5t=s(mC);xTe=n(d5t,"SPAN",{});var c5t=s(xTe);T(c9.$$.fragment,c5t),c5t.forEach(t),d5t.forEach(t),jAr=i(kDe),$Te=n(kDe,"SPAN",{});var f5t=s($Te);DAr=r(f5t,"FlaxAutoModel"),f5t.forEach(t),kDe.forEach(t),wNe=i(f),fr=n(f,"DIV",{class:!0});var Dl=s(fr);T(f9.$$.fragment,Dl),GAr=i(Dl),xc=n(Dl,"P",{});var aee=s(xc);OAr=r(aee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tJ=n(aee,"A",{href:!0});var m5t=s(tJ);VAr=r(m5t,"from_pretrained()"),m5t.forEach(t),XAr=r(aee," class method or the "),aJ=n(aee,"A",{href:!0});var g5t=s(aJ);zAr=r(g5t,"from_config()"),g5t.forEach(t),WAr=r(aee,` class
method.`),aee.forEach(t),QAr=i(Dl),m9=n(Dl,"P",{});var SDe=s(m9);HAr=r(SDe,"This class cannot be instantiated directly using "),kTe=n(SDe,"CODE",{});var h5t=s(kTe);UAr=r(h5t,"__init__()"),h5t.forEach(t),JAr=r(SDe," (throws an error)."),SDe.forEach(t),YAr=i(Dl),Gt=n(Dl,"DIV",{class:!0});var NA=s(Gt);T(g9.$$.fragment,NA),KAr=i(NA),STe=n(NA,"P",{});var p5t=s(STe);ZAr=r(p5t,"Instantiates one of the base model classes of the library from a configuration."),p5t.forEach(t),e6r=i(NA),$c=n(NA,"P",{});var nee=s($c);o6r=r(nee,`Note:
Loading a model from its configuration file does `),RTe=n(nee,"STRONG",{});var _5t=s(RTe);r6r=r(_5t,"not"),_5t.forEach(t),t6r=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(nee,"A",{href:!0});var u5t=s(nJ);a6r=r(u5t,"from_pretrained()"),u5t.forEach(t),n6r=r(nee," to load the model weights."),nee.forEach(t),s6r=i(NA),T(gC.$$.fragment,NA),NA.forEach(t),l6r=i(Dl),jr=n(Dl,"DIV",{class:!0});var Gl=s(jr);T(h9.$$.fragment,Gl),i6r=i(Gl),BTe=n(Gl,"P",{});var b5t=s(BTe);d6r=r(b5t,"Instantiate one of the base model classes of the library from a pretrained model."),b5t.forEach(t),c6r=i(Gl),hn=n(Gl,"P",{});var jA=s(hn);f6r=r(jA,"The model class to instantiate is selected based on the "),PTe=n(jA,"CODE",{});var v5t=s(PTe);m6r=r(v5t,"model_type"),v5t.forEach(t),g6r=r(jA,` property of the config object (either
passed as an argument or loaded from `),ITe=n(jA,"CODE",{});var F5t=s(ITe);h6r=r(F5t,"pretrained_model_name_or_path"),F5t.forEach(t),p6r=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=n(jA,"CODE",{});var T5t=s(qTe);_6r=r(T5t,"pretrained_model_name_or_path"),T5t.forEach(t),u6r=r(jA,":"),jA.forEach(t),b6r=i(Gl),re=n(Gl,"UL",{});var ne=s(re);hC=n(ne,"LI",{});var HBe=s(hC);NTe=n(HBe,"STRONG",{});var M5t=s(NTe);v6r=r(M5t,"albert"),M5t.forEach(t),F6r=r(HBe," \u2014 "),sJ=n(HBe,"A",{href:!0});var E5t=s(sJ);T6r=r(E5t,"FlaxAlbertModel"),E5t.forEach(t),M6r=r(HBe," (ALBERT model)"),HBe.forEach(t),E6r=i(ne),pC=n(ne,"LI",{});var UBe=s(pC);jTe=n(UBe,"STRONG",{});var C5t=s(jTe);C6r=r(C5t,"bart"),C5t.forEach(t),w6r=r(UBe," \u2014 "),lJ=n(UBe,"A",{href:!0});var w5t=s(lJ);A6r=r(w5t,"FlaxBartModel"),w5t.forEach(t),y6r=r(UBe," (BART model)"),UBe.forEach(t),L6r=i(ne),_C=n(ne,"LI",{});var JBe=s(_C);DTe=n(JBe,"STRONG",{});var A5t=s(DTe);x6r=r(A5t,"beit"),A5t.forEach(t),$6r=r(JBe," \u2014 "),iJ=n(JBe,"A",{href:!0});var y5t=s(iJ);k6r=r(y5t,"FlaxBeitModel"),y5t.forEach(t),S6r=r(JBe," (BEiT model)"),JBe.forEach(t),R6r=i(ne),uC=n(ne,"LI",{});var YBe=s(uC);GTe=n(YBe,"STRONG",{});var L5t=s(GTe);B6r=r(L5t,"bert"),L5t.forEach(t),P6r=r(YBe," \u2014 "),dJ=n(YBe,"A",{href:!0});var x5t=s(dJ);I6r=r(x5t,"FlaxBertModel"),x5t.forEach(t),q6r=r(YBe," (BERT model)"),YBe.forEach(t),N6r=i(ne),bC=n(ne,"LI",{});var KBe=s(bC);OTe=n(KBe,"STRONG",{});var $5t=s(OTe);j6r=r($5t,"big_bird"),$5t.forEach(t),D6r=r(KBe," \u2014 "),cJ=n(KBe,"A",{href:!0});var k5t=s(cJ);G6r=r(k5t,"FlaxBigBirdModel"),k5t.forEach(t),O6r=r(KBe," (BigBird model)"),KBe.forEach(t),V6r=i(ne),vC=n(ne,"LI",{});var ZBe=s(vC);VTe=n(ZBe,"STRONG",{});var S5t=s(VTe);X6r=r(S5t,"blenderbot"),S5t.forEach(t),z6r=r(ZBe," \u2014 "),fJ=n(ZBe,"A",{href:!0});var R5t=s(fJ);W6r=r(R5t,"FlaxBlenderbotModel"),R5t.forEach(t),Q6r=r(ZBe," (Blenderbot model)"),ZBe.forEach(t),H6r=i(ne),FC=n(ne,"LI",{});var ePe=s(FC);XTe=n(ePe,"STRONG",{});var B5t=s(XTe);U6r=r(B5t,"blenderbot-small"),B5t.forEach(t),J6r=r(ePe," \u2014 "),mJ=n(ePe,"A",{href:!0});var P5t=s(mJ);Y6r=r(P5t,"FlaxBlenderbotSmallModel"),P5t.forEach(t),K6r=r(ePe," (BlenderbotSmall model)"),ePe.forEach(t),Z6r=i(ne),TC=n(ne,"LI",{});var oPe=s(TC);zTe=n(oPe,"STRONG",{});var I5t=s(zTe);eyr=r(I5t,"clip"),I5t.forEach(t),oyr=r(oPe," \u2014 "),gJ=n(oPe,"A",{href:!0});var q5t=s(gJ);ryr=r(q5t,"FlaxCLIPModel"),q5t.forEach(t),tyr=r(oPe," (CLIP model)"),oPe.forEach(t),ayr=i(ne),MC=n(ne,"LI",{});var rPe=s(MC);WTe=n(rPe,"STRONG",{});var N5t=s(WTe);nyr=r(N5t,"distilbert"),N5t.forEach(t),syr=r(rPe," \u2014 "),hJ=n(rPe,"A",{href:!0});var j5t=s(hJ);lyr=r(j5t,"FlaxDistilBertModel"),j5t.forEach(t),iyr=r(rPe," (DistilBERT model)"),rPe.forEach(t),dyr=i(ne),EC=n(ne,"LI",{});var tPe=s(EC);QTe=n(tPe,"STRONG",{});var D5t=s(QTe);cyr=r(D5t,"electra"),D5t.forEach(t),fyr=r(tPe," \u2014 "),pJ=n(tPe,"A",{href:!0});var G5t=s(pJ);myr=r(G5t,"FlaxElectraModel"),G5t.forEach(t),gyr=r(tPe," (ELECTRA model)"),tPe.forEach(t),hyr=i(ne),CC=n(ne,"LI",{});var aPe=s(CC);HTe=n(aPe,"STRONG",{});var O5t=s(HTe);pyr=r(O5t,"gpt2"),O5t.forEach(t),_yr=r(aPe," \u2014 "),_J=n(aPe,"A",{href:!0});var V5t=s(_J);uyr=r(V5t,"FlaxGPT2Model"),V5t.forEach(t),byr=r(aPe," (OpenAI GPT-2 model)"),aPe.forEach(t),vyr=i(ne),wC=n(ne,"LI",{});var nPe=s(wC);UTe=n(nPe,"STRONG",{});var X5t=s(UTe);Fyr=r(X5t,"gpt_neo"),X5t.forEach(t),Tyr=r(nPe," \u2014 "),uJ=n(nPe,"A",{href:!0});var z5t=s(uJ);Myr=r(z5t,"FlaxGPTNeoModel"),z5t.forEach(t),Eyr=r(nPe," (GPT Neo model)"),nPe.forEach(t),Cyr=i(ne),AC=n(ne,"LI",{});var sPe=s(AC);JTe=n(sPe,"STRONG",{});var W5t=s(JTe);wyr=r(W5t,"gptj"),W5t.forEach(t),Ayr=r(sPe," \u2014 "),bJ=n(sPe,"A",{href:!0});var Q5t=s(bJ);yyr=r(Q5t,"FlaxGPTJModel"),Q5t.forEach(t),Lyr=r(sPe," (GPT-J model)"),sPe.forEach(t),xyr=i(ne),yC=n(ne,"LI",{});var lPe=s(yC);YTe=n(lPe,"STRONG",{});var H5t=s(YTe);$yr=r(H5t,"marian"),H5t.forEach(t),kyr=r(lPe," \u2014 "),vJ=n(lPe,"A",{href:!0});var U5t=s(vJ);Syr=r(U5t,"FlaxMarianModel"),U5t.forEach(t),Ryr=r(lPe," (Marian model)"),lPe.forEach(t),Byr=i(ne),LC=n(ne,"LI",{});var iPe=s(LC);KTe=n(iPe,"STRONG",{});var J5t=s(KTe);Pyr=r(J5t,"mbart"),J5t.forEach(t),Iyr=r(iPe," \u2014 "),FJ=n(iPe,"A",{href:!0});var Y5t=s(FJ);qyr=r(Y5t,"FlaxMBartModel"),Y5t.forEach(t),Nyr=r(iPe," (mBART model)"),iPe.forEach(t),jyr=i(ne),xC=n(ne,"LI",{});var dPe=s(xC);ZTe=n(dPe,"STRONG",{});var K5t=s(ZTe);Dyr=r(K5t,"mt5"),K5t.forEach(t),Gyr=r(dPe," \u2014 "),TJ=n(dPe,"A",{href:!0});var Z5t=s(TJ);Oyr=r(Z5t,"FlaxMT5Model"),Z5t.forEach(t),Vyr=r(dPe," (mT5 model)"),dPe.forEach(t),Xyr=i(ne),$C=n(ne,"LI",{});var cPe=s($C);e7e=n(cPe,"STRONG",{});var e3t=s(e7e);zyr=r(e3t,"pegasus"),e3t.forEach(t),Wyr=r(cPe," \u2014 "),MJ=n(cPe,"A",{href:!0});var o3t=s(MJ);Qyr=r(o3t,"FlaxPegasusModel"),o3t.forEach(t),Hyr=r(cPe," (Pegasus model)"),cPe.forEach(t),Uyr=i(ne),kC=n(ne,"LI",{});var fPe=s(kC);o7e=n(fPe,"STRONG",{});var r3t=s(o7e);Jyr=r(r3t,"roberta"),r3t.forEach(t),Yyr=r(fPe," \u2014 "),EJ=n(fPe,"A",{href:!0});var t3t=s(EJ);Kyr=r(t3t,"FlaxRobertaModel"),t3t.forEach(t),Zyr=r(fPe," (RoBERTa model)"),fPe.forEach(t),eLr=i(ne),SC=n(ne,"LI",{});var mPe=s(SC);r7e=n(mPe,"STRONG",{});var a3t=s(r7e);oLr=r(a3t,"roformer"),a3t.forEach(t),rLr=r(mPe," \u2014 "),CJ=n(mPe,"A",{href:!0});var n3t=s(CJ);tLr=r(n3t,"FlaxRoFormerModel"),n3t.forEach(t),aLr=r(mPe," (RoFormer model)"),mPe.forEach(t),nLr=i(ne),RC=n(ne,"LI",{});var gPe=s(RC);t7e=n(gPe,"STRONG",{});var s3t=s(t7e);sLr=r(s3t,"t5"),s3t.forEach(t),lLr=r(gPe," \u2014 "),wJ=n(gPe,"A",{href:!0});var l3t=s(wJ);iLr=r(l3t,"FlaxT5Model"),l3t.forEach(t),dLr=r(gPe," (T5 model)"),gPe.forEach(t),cLr=i(ne),BC=n(ne,"LI",{});var hPe=s(BC);a7e=n(hPe,"STRONG",{});var i3t=s(a7e);fLr=r(i3t,"vision-text-dual-encoder"),i3t.forEach(t),mLr=r(hPe," \u2014 "),AJ=n(hPe,"A",{href:!0});var d3t=s(AJ);gLr=r(d3t,"FlaxVisionTextDualEncoderModel"),d3t.forEach(t),hLr=r(hPe," (VisionTextDualEncoder model)"),hPe.forEach(t),pLr=i(ne),PC=n(ne,"LI",{});var pPe=s(PC);n7e=n(pPe,"STRONG",{});var c3t=s(n7e);_Lr=r(c3t,"vit"),c3t.forEach(t),uLr=r(pPe," \u2014 "),yJ=n(pPe,"A",{href:!0});var f3t=s(yJ);bLr=r(f3t,"FlaxViTModel"),f3t.forEach(t),vLr=r(pPe," (ViT model)"),pPe.forEach(t),FLr=i(ne),IC=n(ne,"LI",{});var _Pe=s(IC);s7e=n(_Pe,"STRONG",{});var m3t=s(s7e);TLr=r(m3t,"wav2vec2"),m3t.forEach(t),MLr=r(_Pe," \u2014 "),LJ=n(_Pe,"A",{href:!0});var g3t=s(LJ);ELr=r(g3t,"FlaxWav2Vec2Model"),g3t.forEach(t),CLr=r(_Pe," (Wav2Vec2 model)"),_Pe.forEach(t),wLr=i(ne),qC=n(ne,"LI",{});var uPe=s(qC);l7e=n(uPe,"STRONG",{});var h3t=s(l7e);ALr=r(h3t,"xglm"),h3t.forEach(t),yLr=r(uPe," \u2014 "),xJ=n(uPe,"A",{href:!0});var p3t=s(xJ);LLr=r(p3t,"FlaxXGLMModel"),p3t.forEach(t),xLr=r(uPe," (XGLM model)"),uPe.forEach(t),$Lr=i(ne),NC=n(ne,"LI",{});var bPe=s(NC);i7e=n(bPe,"STRONG",{});var _3t=s(i7e);kLr=r(_3t,"xlm-roberta"),_3t.forEach(t),SLr=r(bPe," \u2014 "),$J=n(bPe,"A",{href:!0});var u3t=s($J);RLr=r(u3t,"FlaxXLMRobertaModel"),u3t.forEach(t),BLr=r(bPe," (XLM-RoBERTa model)"),bPe.forEach(t),ne.forEach(t),PLr=i(Gl),T(jC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),ANe=i(f),kc=n(f,"H2",{class:!0});var RDe=s(kc);DC=n(RDe,"A",{id:!0,class:!0,href:!0});var b3t=s(DC);d7e=n(b3t,"SPAN",{});var v3t=s(d7e);T(p9.$$.fragment,v3t),v3t.forEach(t),b3t.forEach(t),ILr=i(RDe),c7e=n(RDe,"SPAN",{});var F3t=s(c7e);qLr=r(F3t,"FlaxAutoModelForCausalLM"),F3t.forEach(t),RDe.forEach(t),yNe=i(f),mr=n(f,"DIV",{class:!0});var Ol=s(mr);T(_9.$$.fragment,Ol),NLr=i(Ol),Sc=n(Ol,"P",{});var see=s(Sc);jLr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),kJ=n(see,"A",{href:!0});var T3t=s(kJ);DLr=r(T3t,"from_pretrained()"),T3t.forEach(t),GLr=r(see," class method or the "),SJ=n(see,"A",{href:!0});var M3t=s(SJ);OLr=r(M3t,"from_config()"),M3t.forEach(t),VLr=r(see,` class
method.`),see.forEach(t),XLr=i(Ol),u9=n(Ol,"P",{});var BDe=s(u9);zLr=r(BDe,"This class cannot be instantiated directly using "),f7e=n(BDe,"CODE",{});var E3t=s(f7e);WLr=r(E3t,"__init__()"),E3t.forEach(t),QLr=r(BDe," (throws an error)."),BDe.forEach(t),HLr=i(Ol),Ot=n(Ol,"DIV",{class:!0});var DA=s(Ot);T(b9.$$.fragment,DA),ULr=i(DA),m7e=n(DA,"P",{});var C3t=s(m7e);JLr=r(C3t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),C3t.forEach(t),YLr=i(DA),Rc=n(DA,"P",{});var lee=s(Rc);KLr=r(lee,`Note:
Loading a model from its configuration file does `),g7e=n(lee,"STRONG",{});var w3t=s(g7e);ZLr=r(w3t,"not"),w3t.forEach(t),e8r=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=n(lee,"A",{href:!0});var A3t=s(RJ);o8r=r(A3t,"from_pretrained()"),A3t.forEach(t),r8r=r(lee," to load the model weights."),lee.forEach(t),t8r=i(DA),T(GC.$$.fragment,DA),DA.forEach(t),a8r=i(Ol),Dr=n(Ol,"DIV",{class:!0});var Vl=s(Dr);T(v9.$$.fragment,Vl),n8r=i(Vl),h7e=n(Vl,"P",{});var y3t=s(h7e);s8r=r(y3t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),y3t.forEach(t),l8r=i(Vl),pn=n(Vl,"P",{});var GA=s(pn);i8r=r(GA,"The model class to instantiate is selected based on the "),p7e=n(GA,"CODE",{});var L3t=s(p7e);d8r=r(L3t,"model_type"),L3t.forEach(t),c8r=r(GA,` property of the config object (either
passed as an argument or loaded from `),_7e=n(GA,"CODE",{});var x3t=s(_7e);f8r=r(x3t,"pretrained_model_name_or_path"),x3t.forEach(t),m8r=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u7e=n(GA,"CODE",{});var $3t=s(u7e);g8r=r($3t,"pretrained_model_name_or_path"),$3t.forEach(t),h8r=r(GA,":"),GA.forEach(t),p8r=i(Vl),Re=n(Vl,"UL",{});var Xe=s(Re);OC=n(Xe,"LI",{});var vPe=s(OC);b7e=n(vPe,"STRONG",{});var k3t=s(b7e);_8r=r(k3t,"bart"),k3t.forEach(t),u8r=r(vPe," \u2014 "),BJ=n(vPe,"A",{href:!0});var S3t=s(BJ);b8r=r(S3t,"FlaxBartForCausalLM"),S3t.forEach(t),v8r=r(vPe," (BART model)"),vPe.forEach(t),F8r=i(Xe),VC=n(Xe,"LI",{});var FPe=s(VC);v7e=n(FPe,"STRONG",{});var R3t=s(v7e);T8r=r(R3t,"bert"),R3t.forEach(t),M8r=r(FPe," \u2014 "),PJ=n(FPe,"A",{href:!0});var B3t=s(PJ);E8r=r(B3t,"FlaxBertForCausalLM"),B3t.forEach(t),C8r=r(FPe," (BERT model)"),FPe.forEach(t),w8r=i(Xe),XC=n(Xe,"LI",{});var TPe=s(XC);F7e=n(TPe,"STRONG",{});var P3t=s(F7e);A8r=r(P3t,"big_bird"),P3t.forEach(t),y8r=r(TPe," \u2014 "),IJ=n(TPe,"A",{href:!0});var I3t=s(IJ);L8r=r(I3t,"FlaxBigBirdForCausalLM"),I3t.forEach(t),x8r=r(TPe," (BigBird model)"),TPe.forEach(t),$8r=i(Xe),zC=n(Xe,"LI",{});var MPe=s(zC);T7e=n(MPe,"STRONG",{});var q3t=s(T7e);k8r=r(q3t,"electra"),q3t.forEach(t),S8r=r(MPe," \u2014 "),qJ=n(MPe,"A",{href:!0});var N3t=s(qJ);R8r=r(N3t,"FlaxElectraForCausalLM"),N3t.forEach(t),B8r=r(MPe," (ELECTRA model)"),MPe.forEach(t),P8r=i(Xe),WC=n(Xe,"LI",{});var EPe=s(WC);M7e=n(EPe,"STRONG",{});var j3t=s(M7e);I8r=r(j3t,"gpt2"),j3t.forEach(t),q8r=r(EPe," \u2014 "),NJ=n(EPe,"A",{href:!0});var D3t=s(NJ);N8r=r(D3t,"FlaxGPT2LMHeadModel"),D3t.forEach(t),j8r=r(EPe," (OpenAI GPT-2 model)"),EPe.forEach(t),D8r=i(Xe),QC=n(Xe,"LI",{});var CPe=s(QC);E7e=n(CPe,"STRONG",{});var G3t=s(E7e);G8r=r(G3t,"gpt_neo"),G3t.forEach(t),O8r=r(CPe," \u2014 "),jJ=n(CPe,"A",{href:!0});var O3t=s(jJ);V8r=r(O3t,"FlaxGPTNeoForCausalLM"),O3t.forEach(t),X8r=r(CPe," (GPT Neo model)"),CPe.forEach(t),z8r=i(Xe),HC=n(Xe,"LI",{});var wPe=s(HC);C7e=n(wPe,"STRONG",{});var V3t=s(C7e);W8r=r(V3t,"gptj"),V3t.forEach(t),Q8r=r(wPe," \u2014 "),DJ=n(wPe,"A",{href:!0});var X3t=s(DJ);H8r=r(X3t,"FlaxGPTJForCausalLM"),X3t.forEach(t),U8r=r(wPe," (GPT-J model)"),wPe.forEach(t),J8r=i(Xe),UC=n(Xe,"LI",{});var APe=s(UC);w7e=n(APe,"STRONG",{});var z3t=s(w7e);Y8r=r(z3t,"roberta"),z3t.forEach(t),K8r=r(APe," \u2014 "),GJ=n(APe,"A",{href:!0});var W3t=s(GJ);Z8r=r(W3t,"FlaxRobertaForCausalLM"),W3t.forEach(t),e9r=r(APe," (RoBERTa model)"),APe.forEach(t),o9r=i(Xe),JC=n(Xe,"LI",{});var yPe=s(JC);A7e=n(yPe,"STRONG",{});var Q3t=s(A7e);r9r=r(Q3t,"xglm"),Q3t.forEach(t),t9r=r(yPe," \u2014 "),OJ=n(yPe,"A",{href:!0});var H3t=s(OJ);a9r=r(H3t,"FlaxXGLMForCausalLM"),H3t.forEach(t),n9r=r(yPe," (XGLM model)"),yPe.forEach(t),Xe.forEach(t),s9r=i(Vl),T(YC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),LNe=i(f),Bc=n(f,"H2",{class:!0});var PDe=s(Bc);KC=n(PDe,"A",{id:!0,class:!0,href:!0});var U3t=s(KC);y7e=n(U3t,"SPAN",{});var J3t=s(y7e);T(F9.$$.fragment,J3t),J3t.forEach(t),U3t.forEach(t),l9r=i(PDe),L7e=n(PDe,"SPAN",{});var Y3t=s(L7e);i9r=r(Y3t,"FlaxAutoModelForPreTraining"),Y3t.forEach(t),PDe.forEach(t),xNe=i(f),gr=n(f,"DIV",{class:!0});var Xl=s(gr);T(T9.$$.fragment,Xl),d9r=i(Xl),Pc=n(Xl,"P",{});var iee=s(Pc);c9r=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),VJ=n(iee,"A",{href:!0});var K3t=s(VJ);f9r=r(K3t,"from_pretrained()"),K3t.forEach(t),m9r=r(iee," class method or the "),XJ=n(iee,"A",{href:!0});var Z3t=s(XJ);g9r=r(Z3t,"from_config()"),Z3t.forEach(t),h9r=r(iee,` class
method.`),iee.forEach(t),p9r=i(Xl),M9=n(Xl,"P",{});var IDe=s(M9);_9r=r(IDe,"This class cannot be instantiated directly using "),x7e=n(IDe,"CODE",{});var ewt=s(x7e);u9r=r(ewt,"__init__()"),ewt.forEach(t),b9r=r(IDe," (throws an error)."),IDe.forEach(t),v9r=i(Xl),Vt=n(Xl,"DIV",{class:!0});var OA=s(Vt);T(E9.$$.fragment,OA),F9r=i(OA),$7e=n(OA,"P",{});var owt=s($7e);T9r=r(owt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),owt.forEach(t),M9r=i(OA),Ic=n(OA,"P",{});var dee=s(Ic);E9r=r(dee,`Note:
Loading a model from its configuration file does `),k7e=n(dee,"STRONG",{});var rwt=s(k7e);C9r=r(rwt,"not"),rwt.forEach(t),w9r=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(dee,"A",{href:!0});var twt=s(zJ);A9r=r(twt,"from_pretrained()"),twt.forEach(t),y9r=r(dee," to load the model weights."),dee.forEach(t),L9r=i(OA),T(ZC.$$.fragment,OA),OA.forEach(t),x9r=i(Xl),Gr=n(Xl,"DIV",{class:!0});var zl=s(Gr);T(C9.$$.fragment,zl),$9r=i(zl),S7e=n(zl,"P",{});var awt=s(S7e);k9r=r(awt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),awt.forEach(t),S9r=i(zl),_n=n(zl,"P",{});var VA=s(_n);R9r=r(VA,"The model class to instantiate is selected based on the "),R7e=n(VA,"CODE",{});var nwt=s(R7e);B9r=r(nwt,"model_type"),nwt.forEach(t),P9r=r(VA,` property of the config object (either
passed as an argument or loaded from `),B7e=n(VA,"CODE",{});var swt=s(B7e);I9r=r(swt,"pretrained_model_name_or_path"),swt.forEach(t),q9r=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P7e=n(VA,"CODE",{});var lwt=s(P7e);N9r=r(lwt,"pretrained_model_name_or_path"),lwt.forEach(t),j9r=r(VA,":"),VA.forEach(t),D9r=i(zl),Me=n(zl,"UL",{});var we=s(Me);e5=n(we,"LI",{});var LPe=s(e5);I7e=n(LPe,"STRONG",{});var iwt=s(I7e);G9r=r(iwt,"albert"),iwt.forEach(t),O9r=r(LPe," \u2014 "),WJ=n(LPe,"A",{href:!0});var dwt=s(WJ);V9r=r(dwt,"FlaxAlbertForPreTraining"),dwt.forEach(t),X9r=r(LPe," (ALBERT model)"),LPe.forEach(t),z9r=i(we),o5=n(we,"LI",{});var xPe=s(o5);q7e=n(xPe,"STRONG",{});var cwt=s(q7e);W9r=r(cwt,"bart"),cwt.forEach(t),Q9r=r(xPe," \u2014 "),QJ=n(xPe,"A",{href:!0});var fwt=s(QJ);H9r=r(fwt,"FlaxBartForConditionalGeneration"),fwt.forEach(t),U9r=r(xPe," (BART model)"),xPe.forEach(t),J9r=i(we),r5=n(we,"LI",{});var $Pe=s(r5);N7e=n($Pe,"STRONG",{});var mwt=s(N7e);Y9r=r(mwt,"bert"),mwt.forEach(t),K9r=r($Pe," \u2014 "),HJ=n($Pe,"A",{href:!0});var gwt=s(HJ);Z9r=r(gwt,"FlaxBertForPreTraining"),gwt.forEach(t),exr=r($Pe," (BERT model)"),$Pe.forEach(t),oxr=i(we),t5=n(we,"LI",{});var kPe=s(t5);j7e=n(kPe,"STRONG",{});var hwt=s(j7e);rxr=r(hwt,"big_bird"),hwt.forEach(t),txr=r(kPe," \u2014 "),UJ=n(kPe,"A",{href:!0});var pwt=s(UJ);axr=r(pwt,"FlaxBigBirdForPreTraining"),pwt.forEach(t),nxr=r(kPe," (BigBird model)"),kPe.forEach(t),sxr=i(we),a5=n(we,"LI",{});var SPe=s(a5);D7e=n(SPe,"STRONG",{});var _wt=s(D7e);lxr=r(_wt,"electra"),_wt.forEach(t),ixr=r(SPe," \u2014 "),JJ=n(SPe,"A",{href:!0});var uwt=s(JJ);dxr=r(uwt,"FlaxElectraForPreTraining"),uwt.forEach(t),cxr=r(SPe," (ELECTRA model)"),SPe.forEach(t),fxr=i(we),n5=n(we,"LI",{});var RPe=s(n5);G7e=n(RPe,"STRONG",{});var bwt=s(G7e);mxr=r(bwt,"mbart"),bwt.forEach(t),gxr=r(RPe," \u2014 "),YJ=n(RPe,"A",{href:!0});var vwt=s(YJ);hxr=r(vwt,"FlaxMBartForConditionalGeneration"),vwt.forEach(t),pxr=r(RPe," (mBART model)"),RPe.forEach(t),_xr=i(we),s5=n(we,"LI",{});var BPe=s(s5);O7e=n(BPe,"STRONG",{});var Fwt=s(O7e);uxr=r(Fwt,"mt5"),Fwt.forEach(t),bxr=r(BPe," \u2014 "),KJ=n(BPe,"A",{href:!0});var Twt=s(KJ);vxr=r(Twt,"FlaxMT5ForConditionalGeneration"),Twt.forEach(t),Fxr=r(BPe," (mT5 model)"),BPe.forEach(t),Txr=i(we),l5=n(we,"LI",{});var PPe=s(l5);V7e=n(PPe,"STRONG",{});var Mwt=s(V7e);Mxr=r(Mwt,"roberta"),Mwt.forEach(t),Exr=r(PPe," \u2014 "),ZJ=n(PPe,"A",{href:!0});var Ewt=s(ZJ);Cxr=r(Ewt,"FlaxRobertaForMaskedLM"),Ewt.forEach(t),wxr=r(PPe," (RoBERTa model)"),PPe.forEach(t),Axr=i(we),i5=n(we,"LI",{});var IPe=s(i5);X7e=n(IPe,"STRONG",{});var Cwt=s(X7e);yxr=r(Cwt,"roformer"),Cwt.forEach(t),Lxr=r(IPe," \u2014 "),eY=n(IPe,"A",{href:!0});var wwt=s(eY);xxr=r(wwt,"FlaxRoFormerForMaskedLM"),wwt.forEach(t),$xr=r(IPe," (RoFormer model)"),IPe.forEach(t),kxr=i(we),d5=n(we,"LI",{});var qPe=s(d5);z7e=n(qPe,"STRONG",{});var Awt=s(z7e);Sxr=r(Awt,"t5"),Awt.forEach(t),Rxr=r(qPe," \u2014 "),oY=n(qPe,"A",{href:!0});var ywt=s(oY);Bxr=r(ywt,"FlaxT5ForConditionalGeneration"),ywt.forEach(t),Pxr=r(qPe," (T5 model)"),qPe.forEach(t),Ixr=i(we),c5=n(we,"LI",{});var NPe=s(c5);W7e=n(NPe,"STRONG",{});var Lwt=s(W7e);qxr=r(Lwt,"wav2vec2"),Lwt.forEach(t),Nxr=r(NPe," \u2014 "),rY=n(NPe,"A",{href:!0});var xwt=s(rY);jxr=r(xwt,"FlaxWav2Vec2ForPreTraining"),xwt.forEach(t),Dxr=r(NPe," (Wav2Vec2 model)"),NPe.forEach(t),Gxr=i(we),f5=n(we,"LI",{});var jPe=s(f5);Q7e=n(jPe,"STRONG",{});var $wt=s(Q7e);Oxr=r($wt,"xlm-roberta"),$wt.forEach(t),Vxr=r(jPe," \u2014 "),tY=n(jPe,"A",{href:!0});var kwt=s(tY);Xxr=r(kwt,"FlaxXLMRobertaForMaskedLM"),kwt.forEach(t),zxr=r(jPe," (XLM-RoBERTa model)"),jPe.forEach(t),we.forEach(t),Wxr=i(zl),T(m5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),$Ne=i(f),qc=n(f,"H2",{class:!0});var qDe=s(qc);g5=n(qDe,"A",{id:!0,class:!0,href:!0});var Swt=s(g5);H7e=n(Swt,"SPAN",{});var Rwt=s(H7e);T(w9.$$.fragment,Rwt),Rwt.forEach(t),Swt.forEach(t),Qxr=i(qDe),U7e=n(qDe,"SPAN",{});var Bwt=s(U7e);Hxr=r(Bwt,"FlaxAutoModelForMaskedLM"),Bwt.forEach(t),qDe.forEach(t),kNe=i(f),hr=n(f,"DIV",{class:!0});var Wl=s(hr);T(A9.$$.fragment,Wl),Uxr=i(Wl),Nc=n(Wl,"P",{});var cee=s(Nc);Jxr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aY=n(cee,"A",{href:!0});var Pwt=s(aY);Yxr=r(Pwt,"from_pretrained()"),Pwt.forEach(t),Kxr=r(cee," class method or the "),nY=n(cee,"A",{href:!0});var Iwt=s(nY);Zxr=r(Iwt,"from_config()"),Iwt.forEach(t),e$r=r(cee,` class
method.`),cee.forEach(t),o$r=i(Wl),y9=n(Wl,"P",{});var NDe=s(y9);r$r=r(NDe,"This class cannot be instantiated directly using "),J7e=n(NDe,"CODE",{});var qwt=s(J7e);t$r=r(qwt,"__init__()"),qwt.forEach(t),a$r=r(NDe," (throws an error)."),NDe.forEach(t),n$r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var XA=s(Xt);T(L9.$$.fragment,XA),s$r=i(XA),Y7e=n(XA,"P",{});var Nwt=s(Y7e);l$r=r(Nwt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Nwt.forEach(t),i$r=i(XA),jc=n(XA,"P",{});var fee=s(jc);d$r=r(fee,`Note:
Loading a model from its configuration file does `),K7e=n(fee,"STRONG",{});var jwt=s(K7e);c$r=r(jwt,"not"),jwt.forEach(t),f$r=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=n(fee,"A",{href:!0});var Dwt=s(sY);m$r=r(Dwt,"from_pretrained()"),Dwt.forEach(t),g$r=r(fee," to load the model weights."),fee.forEach(t),h$r=i(XA),T(h5.$$.fragment,XA),XA.forEach(t),p$r=i(Wl),Or=n(Wl,"DIV",{class:!0});var Ql=s(Or);T(x9.$$.fragment,Ql),_$r=i(Ql),Z7e=n(Ql,"P",{});var Gwt=s(Z7e);u$r=r(Gwt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Gwt.forEach(t),b$r=i(Ql),un=n(Ql,"P",{});var zA=s(un);v$r=r(zA,"The model class to instantiate is selected based on the "),eMe=n(zA,"CODE",{});var Owt=s(eMe);F$r=r(Owt,"model_type"),Owt.forEach(t),T$r=r(zA,` property of the config object (either
passed as an argument or loaded from `),oMe=n(zA,"CODE",{});var Vwt=s(oMe);M$r=r(Vwt,"pretrained_model_name_or_path"),Vwt.forEach(t),E$r=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rMe=n(zA,"CODE",{});var Xwt=s(rMe);C$r=r(Xwt,"pretrained_model_name_or_path"),Xwt.forEach(t),w$r=r(zA,":"),zA.forEach(t),A$r=i(Ql),Le=n(Ql,"UL",{});var Ie=s(Le);p5=n(Ie,"LI",{});var DPe=s(p5);tMe=n(DPe,"STRONG",{});var zwt=s(tMe);y$r=r(zwt,"albert"),zwt.forEach(t),L$r=r(DPe," \u2014 "),lY=n(DPe,"A",{href:!0});var Wwt=s(lY);x$r=r(Wwt,"FlaxAlbertForMaskedLM"),Wwt.forEach(t),$$r=r(DPe," (ALBERT model)"),DPe.forEach(t),k$r=i(Ie),_5=n(Ie,"LI",{});var GPe=s(_5);aMe=n(GPe,"STRONG",{});var Qwt=s(aMe);S$r=r(Qwt,"bart"),Qwt.forEach(t),R$r=r(GPe," \u2014 "),iY=n(GPe,"A",{href:!0});var Hwt=s(iY);B$r=r(Hwt,"FlaxBartForConditionalGeneration"),Hwt.forEach(t),P$r=r(GPe," (BART model)"),GPe.forEach(t),I$r=i(Ie),u5=n(Ie,"LI",{});var OPe=s(u5);nMe=n(OPe,"STRONG",{});var Uwt=s(nMe);q$r=r(Uwt,"bert"),Uwt.forEach(t),N$r=r(OPe," \u2014 "),dY=n(OPe,"A",{href:!0});var Jwt=s(dY);j$r=r(Jwt,"FlaxBertForMaskedLM"),Jwt.forEach(t),D$r=r(OPe," (BERT model)"),OPe.forEach(t),G$r=i(Ie),b5=n(Ie,"LI",{});var VPe=s(b5);sMe=n(VPe,"STRONG",{});var Ywt=s(sMe);O$r=r(Ywt,"big_bird"),Ywt.forEach(t),V$r=r(VPe," \u2014 "),cY=n(VPe,"A",{href:!0});var Kwt=s(cY);X$r=r(Kwt,"FlaxBigBirdForMaskedLM"),Kwt.forEach(t),z$r=r(VPe," (BigBird model)"),VPe.forEach(t),W$r=i(Ie),v5=n(Ie,"LI",{});var XPe=s(v5);lMe=n(XPe,"STRONG",{});var Zwt=s(lMe);Q$r=r(Zwt,"distilbert"),Zwt.forEach(t),H$r=r(XPe," \u2014 "),fY=n(XPe,"A",{href:!0});var eAt=s(fY);U$r=r(eAt,"FlaxDistilBertForMaskedLM"),eAt.forEach(t),J$r=r(XPe," (DistilBERT model)"),XPe.forEach(t),Y$r=i(Ie),F5=n(Ie,"LI",{});var zPe=s(F5);iMe=n(zPe,"STRONG",{});var oAt=s(iMe);K$r=r(oAt,"electra"),oAt.forEach(t),Z$r=r(zPe," \u2014 "),mY=n(zPe,"A",{href:!0});var rAt=s(mY);ekr=r(rAt,"FlaxElectraForMaskedLM"),rAt.forEach(t),okr=r(zPe," (ELECTRA model)"),zPe.forEach(t),rkr=i(Ie),T5=n(Ie,"LI",{});var WPe=s(T5);dMe=n(WPe,"STRONG",{});var tAt=s(dMe);tkr=r(tAt,"mbart"),tAt.forEach(t),akr=r(WPe," \u2014 "),gY=n(WPe,"A",{href:!0});var aAt=s(gY);nkr=r(aAt,"FlaxMBartForConditionalGeneration"),aAt.forEach(t),skr=r(WPe," (mBART model)"),WPe.forEach(t),lkr=i(Ie),M5=n(Ie,"LI",{});var QPe=s(M5);cMe=n(QPe,"STRONG",{});var nAt=s(cMe);ikr=r(nAt,"roberta"),nAt.forEach(t),dkr=r(QPe," \u2014 "),hY=n(QPe,"A",{href:!0});var sAt=s(hY);ckr=r(sAt,"FlaxRobertaForMaskedLM"),sAt.forEach(t),fkr=r(QPe," (RoBERTa model)"),QPe.forEach(t),mkr=i(Ie),E5=n(Ie,"LI",{});var HPe=s(E5);fMe=n(HPe,"STRONG",{});var lAt=s(fMe);gkr=r(lAt,"roformer"),lAt.forEach(t),hkr=r(HPe," \u2014 "),pY=n(HPe,"A",{href:!0});var iAt=s(pY);pkr=r(iAt,"FlaxRoFormerForMaskedLM"),iAt.forEach(t),_kr=r(HPe," (RoFormer model)"),HPe.forEach(t),ukr=i(Ie),C5=n(Ie,"LI",{});var UPe=s(C5);mMe=n(UPe,"STRONG",{});var dAt=s(mMe);bkr=r(dAt,"xlm-roberta"),dAt.forEach(t),vkr=r(UPe," \u2014 "),_Y=n(UPe,"A",{href:!0});var cAt=s(_Y);Fkr=r(cAt,"FlaxXLMRobertaForMaskedLM"),cAt.forEach(t),Tkr=r(UPe," (XLM-RoBERTa model)"),UPe.forEach(t),Ie.forEach(t),Mkr=i(Ql),T(w5.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),SNe=i(f),Dc=n(f,"H2",{class:!0});var jDe=s(Dc);A5=n(jDe,"A",{id:!0,class:!0,href:!0});var fAt=s(A5);gMe=n(fAt,"SPAN",{});var mAt=s(gMe);T($9.$$.fragment,mAt),mAt.forEach(t),fAt.forEach(t),Ekr=i(jDe),hMe=n(jDe,"SPAN",{});var gAt=s(hMe);Ckr=r(gAt,"FlaxAutoModelForSeq2SeqLM"),gAt.forEach(t),jDe.forEach(t),RNe=i(f),pr=n(f,"DIV",{class:!0});var Hl=s(pr);T(k9.$$.fragment,Hl),wkr=i(Hl),Gc=n(Hl,"P",{});var mee=s(Gc);Akr=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uY=n(mee,"A",{href:!0});var hAt=s(uY);ykr=r(hAt,"from_pretrained()"),hAt.forEach(t),Lkr=r(mee," class method or the "),bY=n(mee,"A",{href:!0});var pAt=s(bY);xkr=r(pAt,"from_config()"),pAt.forEach(t),$kr=r(mee,` class
method.`),mee.forEach(t),kkr=i(Hl),S9=n(Hl,"P",{});var DDe=s(S9);Skr=r(DDe,"This class cannot be instantiated directly using "),pMe=n(DDe,"CODE",{});var _At=s(pMe);Rkr=r(_At,"__init__()"),_At.forEach(t),Bkr=r(DDe," (throws an error)."),DDe.forEach(t),Pkr=i(Hl),zt=n(Hl,"DIV",{class:!0});var WA=s(zt);T(R9.$$.fragment,WA),Ikr=i(WA),_Me=n(WA,"P",{});var uAt=s(_Me);qkr=r(uAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uAt.forEach(t),Nkr=i(WA),Oc=n(WA,"P",{});var gee=s(Oc);jkr=r(gee,`Note:
Loading a model from its configuration file does `),uMe=n(gee,"STRONG",{});var bAt=s(uMe);Dkr=r(bAt,"not"),bAt.forEach(t),Gkr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=n(gee,"A",{href:!0});var vAt=s(vY);Okr=r(vAt,"from_pretrained()"),vAt.forEach(t),Vkr=r(gee," to load the model weights."),gee.forEach(t),Xkr=i(WA),T(y5.$$.fragment,WA),WA.forEach(t),zkr=i(Hl),Vr=n(Hl,"DIV",{class:!0});var Ul=s(Vr);T(B9.$$.fragment,Ul),Wkr=i(Ul),bMe=n(Ul,"P",{});var FAt=s(bMe);Qkr=r(FAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),FAt.forEach(t),Hkr=i(Ul),bn=n(Ul,"P",{});var QA=s(bn);Ukr=r(QA,"The model class to instantiate is selected based on the "),vMe=n(QA,"CODE",{});var TAt=s(vMe);Jkr=r(TAt,"model_type"),TAt.forEach(t),Ykr=r(QA,` property of the config object (either
passed as an argument or loaded from `),FMe=n(QA,"CODE",{});var MAt=s(FMe);Kkr=r(MAt,"pretrained_model_name_or_path"),MAt.forEach(t),Zkr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TMe=n(QA,"CODE",{});var EAt=s(TMe);eSr=r(EAt,"pretrained_model_name_or_path"),EAt.forEach(t),oSr=r(QA,":"),QA.forEach(t),rSr=i(Ul),Be=n(Ul,"UL",{});var ze=s(Be);L5=n(ze,"LI",{});var JPe=s(L5);MMe=n(JPe,"STRONG",{});var CAt=s(MMe);tSr=r(CAt,"bart"),CAt.forEach(t),aSr=r(JPe," \u2014 "),FY=n(JPe,"A",{href:!0});var wAt=s(FY);nSr=r(wAt,"FlaxBartForConditionalGeneration"),wAt.forEach(t),sSr=r(JPe," (BART model)"),JPe.forEach(t),lSr=i(ze),x5=n(ze,"LI",{});var YPe=s(x5);EMe=n(YPe,"STRONG",{});var AAt=s(EMe);iSr=r(AAt,"blenderbot"),AAt.forEach(t),dSr=r(YPe," \u2014 "),TY=n(YPe,"A",{href:!0});var yAt=s(TY);cSr=r(yAt,"FlaxBlenderbotForConditionalGeneration"),yAt.forEach(t),fSr=r(YPe," (Blenderbot model)"),YPe.forEach(t),mSr=i(ze),$5=n(ze,"LI",{});var KPe=s($5);CMe=n(KPe,"STRONG",{});var LAt=s(CMe);gSr=r(LAt,"blenderbot-small"),LAt.forEach(t),hSr=r(KPe," \u2014 "),MY=n(KPe,"A",{href:!0});var xAt=s(MY);pSr=r(xAt,"FlaxBlenderbotSmallForConditionalGeneration"),xAt.forEach(t),_Sr=r(KPe," (BlenderbotSmall model)"),KPe.forEach(t),uSr=i(ze),k5=n(ze,"LI",{});var ZPe=s(k5);wMe=n(ZPe,"STRONG",{});var $At=s(wMe);bSr=r($At,"encoder-decoder"),$At.forEach(t),vSr=r(ZPe," \u2014 "),EY=n(ZPe,"A",{href:!0});var kAt=s(EY);FSr=r(kAt,"FlaxEncoderDecoderModel"),kAt.forEach(t),TSr=r(ZPe," (Encoder decoder model)"),ZPe.forEach(t),MSr=i(ze),S5=n(ze,"LI",{});var eIe=s(S5);AMe=n(eIe,"STRONG",{});var SAt=s(AMe);ESr=r(SAt,"marian"),SAt.forEach(t),CSr=r(eIe," \u2014 "),CY=n(eIe,"A",{href:!0});var RAt=s(CY);wSr=r(RAt,"FlaxMarianMTModel"),RAt.forEach(t),ASr=r(eIe," (Marian model)"),eIe.forEach(t),ySr=i(ze),R5=n(ze,"LI",{});var oIe=s(R5);yMe=n(oIe,"STRONG",{});var BAt=s(yMe);LSr=r(BAt,"mbart"),BAt.forEach(t),xSr=r(oIe," \u2014 "),wY=n(oIe,"A",{href:!0});var PAt=s(wY);$Sr=r(PAt,"FlaxMBartForConditionalGeneration"),PAt.forEach(t),kSr=r(oIe," (mBART model)"),oIe.forEach(t),SSr=i(ze),B5=n(ze,"LI",{});var rIe=s(B5);LMe=n(rIe,"STRONG",{});var IAt=s(LMe);RSr=r(IAt,"mt5"),IAt.forEach(t),BSr=r(rIe," \u2014 "),AY=n(rIe,"A",{href:!0});var qAt=s(AY);PSr=r(qAt,"FlaxMT5ForConditionalGeneration"),qAt.forEach(t),ISr=r(rIe," (mT5 model)"),rIe.forEach(t),qSr=i(ze),P5=n(ze,"LI",{});var tIe=s(P5);xMe=n(tIe,"STRONG",{});var NAt=s(xMe);NSr=r(NAt,"pegasus"),NAt.forEach(t),jSr=r(tIe," \u2014 "),yY=n(tIe,"A",{href:!0});var jAt=s(yY);DSr=r(jAt,"FlaxPegasusForConditionalGeneration"),jAt.forEach(t),GSr=r(tIe," (Pegasus model)"),tIe.forEach(t),OSr=i(ze),I5=n(ze,"LI",{});var aIe=s(I5);$Me=n(aIe,"STRONG",{});var DAt=s($Me);VSr=r(DAt,"t5"),DAt.forEach(t),XSr=r(aIe," \u2014 "),LY=n(aIe,"A",{href:!0});var GAt=s(LY);zSr=r(GAt,"FlaxT5ForConditionalGeneration"),GAt.forEach(t),WSr=r(aIe," (T5 model)"),aIe.forEach(t),ze.forEach(t),QSr=i(Ul),T(q5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),BNe=i(f),Vc=n(f,"H2",{class:!0});var GDe=s(Vc);N5=n(GDe,"A",{id:!0,class:!0,href:!0});var OAt=s(N5);kMe=n(OAt,"SPAN",{});var VAt=s(kMe);T(P9.$$.fragment,VAt),VAt.forEach(t),OAt.forEach(t),HSr=i(GDe),SMe=n(GDe,"SPAN",{});var XAt=s(SMe);USr=r(XAt,"FlaxAutoModelForSequenceClassification"),XAt.forEach(t),GDe.forEach(t),PNe=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(I9.$$.fragment,Jl),JSr=i(Jl),Xc=n(Jl,"P",{});var hee=s(Xc);YSr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xY=n(hee,"A",{href:!0});var zAt=s(xY);KSr=r(zAt,"from_pretrained()"),zAt.forEach(t),ZSr=r(hee," class method or the "),$Y=n(hee,"A",{href:!0});var WAt=s($Y);eRr=r(WAt,"from_config()"),WAt.forEach(t),oRr=r(hee,` class
method.`),hee.forEach(t),rRr=i(Jl),q9=n(Jl,"P",{});var ODe=s(q9);tRr=r(ODe,"This class cannot be instantiated directly using "),RMe=n(ODe,"CODE",{});var QAt=s(RMe);aRr=r(QAt,"__init__()"),QAt.forEach(t),nRr=r(ODe," (throws an error)."),ODe.forEach(t),sRr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var HA=s(Wt);T(N9.$$.fragment,HA),lRr=i(HA),BMe=n(HA,"P",{});var HAt=s(BMe);iRr=r(HAt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),HAt.forEach(t),dRr=i(HA),zc=n(HA,"P",{});var pee=s(zc);cRr=r(pee,`Note:
Loading a model from its configuration file does `),PMe=n(pee,"STRONG",{});var UAt=s(PMe);fRr=r(UAt,"not"),UAt.forEach(t),mRr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=n(pee,"A",{href:!0});var JAt=s(kY);gRr=r(JAt,"from_pretrained()"),JAt.forEach(t),hRr=r(pee," to load the model weights."),pee.forEach(t),pRr=i(HA),T(j5.$$.fragment,HA),HA.forEach(t),_Rr=i(Jl),Xr=n(Jl,"DIV",{class:!0});var Yl=s(Xr);T(j9.$$.fragment,Yl),uRr=i(Yl),IMe=n(Yl,"P",{});var YAt=s(IMe);bRr=r(YAt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),YAt.forEach(t),vRr=i(Yl),vn=n(Yl,"P",{});var UA=s(vn);FRr=r(UA,"The model class to instantiate is selected based on the "),qMe=n(UA,"CODE",{});var KAt=s(qMe);TRr=r(KAt,"model_type"),KAt.forEach(t),MRr=r(UA,` property of the config object (either
passed as an argument or loaded from `),NMe=n(UA,"CODE",{});var ZAt=s(NMe);ERr=r(ZAt,"pretrained_model_name_or_path"),ZAt.forEach(t),CRr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jMe=n(UA,"CODE",{});var e6t=s(jMe);wRr=r(e6t,"pretrained_model_name_or_path"),e6t.forEach(t),ARr=r(UA,":"),UA.forEach(t),yRr=i(Yl),xe=n(Yl,"UL",{});var qe=s(xe);D5=n(qe,"LI",{});var nIe=s(D5);DMe=n(nIe,"STRONG",{});var o6t=s(DMe);LRr=r(o6t,"albert"),o6t.forEach(t),xRr=r(nIe," \u2014 "),SY=n(nIe,"A",{href:!0});var r6t=s(SY);$Rr=r(r6t,"FlaxAlbertForSequenceClassification"),r6t.forEach(t),kRr=r(nIe," (ALBERT model)"),nIe.forEach(t),SRr=i(qe),G5=n(qe,"LI",{});var sIe=s(G5);GMe=n(sIe,"STRONG",{});var t6t=s(GMe);RRr=r(t6t,"bart"),t6t.forEach(t),BRr=r(sIe," \u2014 "),RY=n(sIe,"A",{href:!0});var a6t=s(RY);PRr=r(a6t,"FlaxBartForSequenceClassification"),a6t.forEach(t),IRr=r(sIe," (BART model)"),sIe.forEach(t),qRr=i(qe),O5=n(qe,"LI",{});var lIe=s(O5);OMe=n(lIe,"STRONG",{});var n6t=s(OMe);NRr=r(n6t,"bert"),n6t.forEach(t),jRr=r(lIe," \u2014 "),BY=n(lIe,"A",{href:!0});var s6t=s(BY);DRr=r(s6t,"FlaxBertForSequenceClassification"),s6t.forEach(t),GRr=r(lIe," (BERT model)"),lIe.forEach(t),ORr=i(qe),V5=n(qe,"LI",{});var iIe=s(V5);VMe=n(iIe,"STRONG",{});var l6t=s(VMe);VRr=r(l6t,"big_bird"),l6t.forEach(t),XRr=r(iIe," \u2014 "),PY=n(iIe,"A",{href:!0});var i6t=s(PY);zRr=r(i6t,"FlaxBigBirdForSequenceClassification"),i6t.forEach(t),WRr=r(iIe," (BigBird model)"),iIe.forEach(t),QRr=i(qe),X5=n(qe,"LI",{});var dIe=s(X5);XMe=n(dIe,"STRONG",{});var d6t=s(XMe);HRr=r(d6t,"distilbert"),d6t.forEach(t),URr=r(dIe," \u2014 "),IY=n(dIe,"A",{href:!0});var c6t=s(IY);JRr=r(c6t,"FlaxDistilBertForSequenceClassification"),c6t.forEach(t),YRr=r(dIe," (DistilBERT model)"),dIe.forEach(t),KRr=i(qe),z5=n(qe,"LI",{});var cIe=s(z5);zMe=n(cIe,"STRONG",{});var f6t=s(zMe);ZRr=r(f6t,"electra"),f6t.forEach(t),eBr=r(cIe," \u2014 "),qY=n(cIe,"A",{href:!0});var m6t=s(qY);oBr=r(m6t,"FlaxElectraForSequenceClassification"),m6t.forEach(t),rBr=r(cIe," (ELECTRA model)"),cIe.forEach(t),tBr=i(qe),W5=n(qe,"LI",{});var fIe=s(W5);WMe=n(fIe,"STRONG",{});var g6t=s(WMe);aBr=r(g6t,"mbart"),g6t.forEach(t),nBr=r(fIe," \u2014 "),NY=n(fIe,"A",{href:!0});var h6t=s(NY);sBr=r(h6t,"FlaxMBartForSequenceClassification"),h6t.forEach(t),lBr=r(fIe," (mBART model)"),fIe.forEach(t),iBr=i(qe),Q5=n(qe,"LI",{});var mIe=s(Q5);QMe=n(mIe,"STRONG",{});var p6t=s(QMe);dBr=r(p6t,"roberta"),p6t.forEach(t),cBr=r(mIe," \u2014 "),jY=n(mIe,"A",{href:!0});var _6t=s(jY);fBr=r(_6t,"FlaxRobertaForSequenceClassification"),_6t.forEach(t),mBr=r(mIe," (RoBERTa model)"),mIe.forEach(t),gBr=i(qe),H5=n(qe,"LI",{});var gIe=s(H5);HMe=n(gIe,"STRONG",{});var u6t=s(HMe);hBr=r(u6t,"roformer"),u6t.forEach(t),pBr=r(gIe," \u2014 "),DY=n(gIe,"A",{href:!0});var b6t=s(DY);_Br=r(b6t,"FlaxRoFormerForSequenceClassification"),b6t.forEach(t),uBr=r(gIe," (RoFormer model)"),gIe.forEach(t),bBr=i(qe),U5=n(qe,"LI",{});var hIe=s(U5);UMe=n(hIe,"STRONG",{});var v6t=s(UMe);vBr=r(v6t,"xlm-roberta"),v6t.forEach(t),FBr=r(hIe," \u2014 "),GY=n(hIe,"A",{href:!0});var F6t=s(GY);TBr=r(F6t,"FlaxXLMRobertaForSequenceClassification"),F6t.forEach(t),MBr=r(hIe," (XLM-RoBERTa model)"),hIe.forEach(t),qe.forEach(t),EBr=i(Yl),T(J5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),INe=i(f),Wc=n(f,"H2",{class:!0});var VDe=s(Wc);Y5=n(VDe,"A",{id:!0,class:!0,href:!0});var T6t=s(Y5);JMe=n(T6t,"SPAN",{});var M6t=s(JMe);T(D9.$$.fragment,M6t),M6t.forEach(t),T6t.forEach(t),CBr=i(VDe),YMe=n(VDe,"SPAN",{});var E6t=s(YMe);wBr=r(E6t,"FlaxAutoModelForQuestionAnswering"),E6t.forEach(t),VDe.forEach(t),qNe=i(f),ur=n(f,"DIV",{class:!0});var Kl=s(ur);T(G9.$$.fragment,Kl),ABr=i(Kl),Qc=n(Kl,"P",{});var _ee=s(Qc);yBr=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),OY=n(_ee,"A",{href:!0});var C6t=s(OY);LBr=r(C6t,"from_pretrained()"),C6t.forEach(t),xBr=r(_ee," class method or the "),VY=n(_ee,"A",{href:!0});var w6t=s(VY);$Br=r(w6t,"from_config()"),w6t.forEach(t),kBr=r(_ee,` class
method.`),_ee.forEach(t),SBr=i(Kl),O9=n(Kl,"P",{});var XDe=s(O9);RBr=r(XDe,"This class cannot be instantiated directly using "),KMe=n(XDe,"CODE",{});var A6t=s(KMe);BBr=r(A6t,"__init__()"),A6t.forEach(t),PBr=r(XDe," (throws an error)."),XDe.forEach(t),IBr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var JA=s(Qt);T(V9.$$.fragment,JA),qBr=i(JA),ZMe=n(JA,"P",{});var y6t=s(ZMe);NBr=r(y6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),y6t.forEach(t),jBr=i(JA),Hc=n(JA,"P",{});var uee=s(Hc);DBr=r(uee,`Note:
Loading a model from its configuration file does `),e4e=n(uee,"STRONG",{});var L6t=s(e4e);GBr=r(L6t,"not"),L6t.forEach(t),OBr=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=n(uee,"A",{href:!0});var x6t=s(XY);VBr=r(x6t,"from_pretrained()"),x6t.forEach(t),XBr=r(uee," to load the model weights."),uee.forEach(t),zBr=i(JA),T(K5.$$.fragment,JA),JA.forEach(t),WBr=i(Kl),zr=n(Kl,"DIV",{class:!0});var Zl=s(zr);T(X9.$$.fragment,Zl),QBr=i(Zl),o4e=n(Zl,"P",{});var $6t=s(o4e);HBr=r($6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$6t.forEach(t),UBr=i(Zl),Fn=n(Zl,"P",{});var YA=s(Fn);JBr=r(YA,"The model class to instantiate is selected based on the "),r4e=n(YA,"CODE",{});var k6t=s(r4e);YBr=r(k6t,"model_type"),k6t.forEach(t),KBr=r(YA,` property of the config object (either
passed as an argument or loaded from `),t4e=n(YA,"CODE",{});var S6t=s(t4e);ZBr=r(S6t,"pretrained_model_name_or_path"),S6t.forEach(t),ePr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=n(YA,"CODE",{});var R6t=s(a4e);oPr=r(R6t,"pretrained_model_name_or_path"),R6t.forEach(t),rPr=r(YA,":"),YA.forEach(t),tPr=i(Zl),$e=n(Zl,"UL",{});var Ne=s($e);Z5=n(Ne,"LI",{});var pIe=s(Z5);n4e=n(pIe,"STRONG",{});var B6t=s(n4e);aPr=r(B6t,"albert"),B6t.forEach(t),nPr=r(pIe," \u2014 "),zY=n(pIe,"A",{href:!0});var P6t=s(zY);sPr=r(P6t,"FlaxAlbertForQuestionAnswering"),P6t.forEach(t),lPr=r(pIe," (ALBERT model)"),pIe.forEach(t),iPr=i(Ne),e3=n(Ne,"LI",{});var _Ie=s(e3);s4e=n(_Ie,"STRONG",{});var I6t=s(s4e);dPr=r(I6t,"bart"),I6t.forEach(t),cPr=r(_Ie," \u2014 "),WY=n(_Ie,"A",{href:!0});var q6t=s(WY);fPr=r(q6t,"FlaxBartForQuestionAnswering"),q6t.forEach(t),mPr=r(_Ie," (BART model)"),_Ie.forEach(t),gPr=i(Ne),o3=n(Ne,"LI",{});var uIe=s(o3);l4e=n(uIe,"STRONG",{});var N6t=s(l4e);hPr=r(N6t,"bert"),N6t.forEach(t),pPr=r(uIe," \u2014 "),QY=n(uIe,"A",{href:!0});var j6t=s(QY);_Pr=r(j6t,"FlaxBertForQuestionAnswering"),j6t.forEach(t),uPr=r(uIe," (BERT model)"),uIe.forEach(t),bPr=i(Ne),r3=n(Ne,"LI",{});var bIe=s(r3);i4e=n(bIe,"STRONG",{});var D6t=s(i4e);vPr=r(D6t,"big_bird"),D6t.forEach(t),FPr=r(bIe," \u2014 "),HY=n(bIe,"A",{href:!0});var G6t=s(HY);TPr=r(G6t,"FlaxBigBirdForQuestionAnswering"),G6t.forEach(t),MPr=r(bIe," (BigBird model)"),bIe.forEach(t),EPr=i(Ne),t3=n(Ne,"LI",{});var vIe=s(t3);d4e=n(vIe,"STRONG",{});var O6t=s(d4e);CPr=r(O6t,"distilbert"),O6t.forEach(t),wPr=r(vIe," \u2014 "),UY=n(vIe,"A",{href:!0});var V6t=s(UY);APr=r(V6t,"FlaxDistilBertForQuestionAnswering"),V6t.forEach(t),yPr=r(vIe," (DistilBERT model)"),vIe.forEach(t),LPr=i(Ne),a3=n(Ne,"LI",{});var FIe=s(a3);c4e=n(FIe,"STRONG",{});var X6t=s(c4e);xPr=r(X6t,"electra"),X6t.forEach(t),$Pr=r(FIe," \u2014 "),JY=n(FIe,"A",{href:!0});var z6t=s(JY);kPr=r(z6t,"FlaxElectraForQuestionAnswering"),z6t.forEach(t),SPr=r(FIe," (ELECTRA model)"),FIe.forEach(t),RPr=i(Ne),n3=n(Ne,"LI",{});var TIe=s(n3);f4e=n(TIe,"STRONG",{});var W6t=s(f4e);BPr=r(W6t,"mbart"),W6t.forEach(t),PPr=r(TIe," \u2014 "),YY=n(TIe,"A",{href:!0});var Q6t=s(YY);IPr=r(Q6t,"FlaxMBartForQuestionAnswering"),Q6t.forEach(t),qPr=r(TIe," (mBART model)"),TIe.forEach(t),NPr=i(Ne),s3=n(Ne,"LI",{});var MIe=s(s3);m4e=n(MIe,"STRONG",{});var H6t=s(m4e);jPr=r(H6t,"roberta"),H6t.forEach(t),DPr=r(MIe," \u2014 "),KY=n(MIe,"A",{href:!0});var U6t=s(KY);GPr=r(U6t,"FlaxRobertaForQuestionAnswering"),U6t.forEach(t),OPr=r(MIe," (RoBERTa model)"),MIe.forEach(t),VPr=i(Ne),l3=n(Ne,"LI",{});var EIe=s(l3);g4e=n(EIe,"STRONG",{});var J6t=s(g4e);XPr=r(J6t,"roformer"),J6t.forEach(t),zPr=r(EIe," \u2014 "),ZY=n(EIe,"A",{href:!0});var Y6t=s(ZY);WPr=r(Y6t,"FlaxRoFormerForQuestionAnswering"),Y6t.forEach(t),QPr=r(EIe," (RoFormer model)"),EIe.forEach(t),HPr=i(Ne),i3=n(Ne,"LI",{});var CIe=s(i3);h4e=n(CIe,"STRONG",{});var K6t=s(h4e);UPr=r(K6t,"xlm-roberta"),K6t.forEach(t),JPr=r(CIe," \u2014 "),eK=n(CIe,"A",{href:!0});var Z6t=s(eK);YPr=r(Z6t,"FlaxXLMRobertaForQuestionAnswering"),Z6t.forEach(t),KPr=r(CIe," (XLM-RoBERTa model)"),CIe.forEach(t),Ne.forEach(t),ZPr=i(Zl),T(d3.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),NNe=i(f),Uc=n(f,"H2",{class:!0});var zDe=s(Uc);c3=n(zDe,"A",{id:!0,class:!0,href:!0});var eyt=s(c3);p4e=n(eyt,"SPAN",{});var oyt=s(p4e);T(z9.$$.fragment,oyt),oyt.forEach(t),eyt.forEach(t),eIr=i(zDe),_4e=n(zDe,"SPAN",{});var ryt=s(_4e);oIr=r(ryt,"FlaxAutoModelForTokenClassification"),ryt.forEach(t),zDe.forEach(t),jNe=i(f),br=n(f,"DIV",{class:!0});var ei=s(br);T(W9.$$.fragment,ei),rIr=i(ei),Jc=n(ei,"P",{});var bee=s(Jc);tIr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),oK=n(bee,"A",{href:!0});var tyt=s(oK);aIr=r(tyt,"from_pretrained()"),tyt.forEach(t),nIr=r(bee," class method or the "),rK=n(bee,"A",{href:!0});var ayt=s(rK);sIr=r(ayt,"from_config()"),ayt.forEach(t),lIr=r(bee,` class
method.`),bee.forEach(t),iIr=i(ei),Q9=n(ei,"P",{});var WDe=s(Q9);dIr=r(WDe,"This class cannot be instantiated directly using "),u4e=n(WDe,"CODE",{});var nyt=s(u4e);cIr=r(nyt,"__init__()"),nyt.forEach(t),fIr=r(WDe," (throws an error)."),WDe.forEach(t),mIr=i(ei),Ht=n(ei,"DIV",{class:!0});var KA=s(Ht);T(H9.$$.fragment,KA),gIr=i(KA),b4e=n(KA,"P",{});var syt=s(b4e);hIr=r(syt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),syt.forEach(t),pIr=i(KA),Yc=n(KA,"P",{});var vee=s(Yc);_Ir=r(vee,`Note:
Loading a model from its configuration file does `),v4e=n(vee,"STRONG",{});var lyt=s(v4e);uIr=r(lyt,"not"),lyt.forEach(t),bIr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tK=n(vee,"A",{href:!0});var iyt=s(tK);vIr=r(iyt,"from_pretrained()"),iyt.forEach(t),FIr=r(vee," to load the model weights."),vee.forEach(t),TIr=i(KA),T(f3.$$.fragment,KA),KA.forEach(t),MIr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(U9.$$.fragment,oi),EIr=i(oi),F4e=n(oi,"P",{});var dyt=s(F4e);CIr=r(dyt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),dyt.forEach(t),wIr=i(oi),Tn=n(oi,"P",{});var ZA=s(Tn);AIr=r(ZA,"The model class to instantiate is selected based on the "),T4e=n(ZA,"CODE",{});var cyt=s(T4e);yIr=r(cyt,"model_type"),cyt.forEach(t),LIr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),M4e=n(ZA,"CODE",{});var fyt=s(M4e);xIr=r(fyt,"pretrained_model_name_or_path"),fyt.forEach(t),$Ir=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=n(ZA,"CODE",{});var myt=s(E4e);kIr=r(myt,"pretrained_model_name_or_path"),myt.forEach(t),SIr=r(ZA,":"),ZA.forEach(t),RIr=i(oi),De=n(oi,"UL",{});var Fo=s(De);m3=n(Fo,"LI",{});var wIe=s(m3);C4e=n(wIe,"STRONG",{});var gyt=s(C4e);BIr=r(gyt,"albert"),gyt.forEach(t),PIr=r(wIe," \u2014 "),aK=n(wIe,"A",{href:!0});var hyt=s(aK);IIr=r(hyt,"FlaxAlbertForTokenClassification"),hyt.forEach(t),qIr=r(wIe," (ALBERT model)"),wIe.forEach(t),NIr=i(Fo),g3=n(Fo,"LI",{});var AIe=s(g3);w4e=n(AIe,"STRONG",{});var pyt=s(w4e);jIr=r(pyt,"bert"),pyt.forEach(t),DIr=r(AIe," \u2014 "),nK=n(AIe,"A",{href:!0});var _yt=s(nK);GIr=r(_yt,"FlaxBertForTokenClassification"),_yt.forEach(t),OIr=r(AIe," (BERT model)"),AIe.forEach(t),VIr=i(Fo),h3=n(Fo,"LI",{});var yIe=s(h3);A4e=n(yIe,"STRONG",{});var uyt=s(A4e);XIr=r(uyt,"big_bird"),uyt.forEach(t),zIr=r(yIe," \u2014 "),sK=n(yIe,"A",{href:!0});var byt=s(sK);WIr=r(byt,"FlaxBigBirdForTokenClassification"),byt.forEach(t),QIr=r(yIe," (BigBird model)"),yIe.forEach(t),HIr=i(Fo),p3=n(Fo,"LI",{});var LIe=s(p3);y4e=n(LIe,"STRONG",{});var vyt=s(y4e);UIr=r(vyt,"distilbert"),vyt.forEach(t),JIr=r(LIe," \u2014 "),lK=n(LIe,"A",{href:!0});var Fyt=s(lK);YIr=r(Fyt,"FlaxDistilBertForTokenClassification"),Fyt.forEach(t),KIr=r(LIe," (DistilBERT model)"),LIe.forEach(t),ZIr=i(Fo),_3=n(Fo,"LI",{});var xIe=s(_3);L4e=n(xIe,"STRONG",{});var Tyt=s(L4e);eqr=r(Tyt,"electra"),Tyt.forEach(t),oqr=r(xIe," \u2014 "),iK=n(xIe,"A",{href:!0});var Myt=s(iK);rqr=r(Myt,"FlaxElectraForTokenClassification"),Myt.forEach(t),tqr=r(xIe," (ELECTRA model)"),xIe.forEach(t),aqr=i(Fo),u3=n(Fo,"LI",{});var $Ie=s(u3);x4e=n($Ie,"STRONG",{});var Eyt=s(x4e);nqr=r(Eyt,"roberta"),Eyt.forEach(t),sqr=r($Ie," \u2014 "),dK=n($Ie,"A",{href:!0});var Cyt=s(dK);lqr=r(Cyt,"FlaxRobertaForTokenClassification"),Cyt.forEach(t),iqr=r($Ie," (RoBERTa model)"),$Ie.forEach(t),dqr=i(Fo),b3=n(Fo,"LI",{});var kIe=s(b3);$4e=n(kIe,"STRONG",{});var wyt=s($4e);cqr=r(wyt,"roformer"),wyt.forEach(t),fqr=r(kIe," \u2014 "),cK=n(kIe,"A",{href:!0});var Ayt=s(cK);mqr=r(Ayt,"FlaxRoFormerForTokenClassification"),Ayt.forEach(t),gqr=r(kIe," (RoFormer model)"),kIe.forEach(t),hqr=i(Fo),v3=n(Fo,"LI",{});var SIe=s(v3);k4e=n(SIe,"STRONG",{});var yyt=s(k4e);pqr=r(yyt,"xlm-roberta"),yyt.forEach(t),_qr=r(SIe," \u2014 "),fK=n(SIe,"A",{href:!0});var Lyt=s(fK);uqr=r(Lyt,"FlaxXLMRobertaForTokenClassification"),Lyt.forEach(t),bqr=r(SIe," (XLM-RoBERTa model)"),SIe.forEach(t),Fo.forEach(t),vqr=i(oi),T(F3.$$.fragment,oi),oi.forEach(t),ei.forEach(t),DNe=i(f),Kc=n(f,"H2",{class:!0});var QDe=s(Kc);T3=n(QDe,"A",{id:!0,class:!0,href:!0});var xyt=s(T3);S4e=n(xyt,"SPAN",{});var $yt=s(S4e);T(J9.$$.fragment,$yt),$yt.forEach(t),xyt.forEach(t),Fqr=i(QDe),R4e=n(QDe,"SPAN",{});var kyt=s(R4e);Tqr=r(kyt,"FlaxAutoModelForMultipleChoice"),kyt.forEach(t),QDe.forEach(t),GNe=i(f),vr=n(f,"DIV",{class:!0});var ri=s(vr);T(Y9.$$.fragment,ri),Mqr=i(ri),Zc=n(ri,"P",{});var Fee=s(Zc);Eqr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mK=n(Fee,"A",{href:!0});var Syt=s(mK);Cqr=r(Syt,"from_pretrained()"),Syt.forEach(t),wqr=r(Fee," class method or the "),gK=n(Fee,"A",{href:!0});var Ryt=s(gK);Aqr=r(Ryt,"from_config()"),Ryt.forEach(t),yqr=r(Fee,` class
method.`),Fee.forEach(t),Lqr=i(ri),K9=n(ri,"P",{});var HDe=s(K9);xqr=r(HDe,"This class cannot be instantiated directly using "),B4e=n(HDe,"CODE",{});var Byt=s(B4e);$qr=r(Byt,"__init__()"),Byt.forEach(t),kqr=r(HDe," (throws an error)."),HDe.forEach(t),Sqr=i(ri),Ut=n(ri,"DIV",{class:!0});var e6=s(Ut);T(Z9.$$.fragment,e6),Rqr=i(e6),P4e=n(e6,"P",{});var Pyt=s(P4e);Bqr=r(Pyt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Pyt.forEach(t),Pqr=i(e6),ef=n(e6,"P",{});var Tee=s(ef);Iqr=r(Tee,`Note:
Loading a model from its configuration file does `),I4e=n(Tee,"STRONG",{});var Iyt=s(I4e);qqr=r(Iyt,"not"),Iyt.forEach(t),Nqr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=n(Tee,"A",{href:!0});var qyt=s(hK);jqr=r(qyt,"from_pretrained()"),qyt.forEach(t),Dqr=r(Tee," to load the model weights."),Tee.forEach(t),Gqr=i(e6),T(M3.$$.fragment,e6),e6.forEach(t),Oqr=i(ri),Qr=n(ri,"DIV",{class:!0});var ti=s(Qr);T(ex.$$.fragment,ti),Vqr=i(ti),q4e=n(ti,"P",{});var Nyt=s(q4e);Xqr=r(Nyt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Nyt.forEach(t),zqr=i(ti),Mn=n(ti,"P",{});var o6=s(Mn);Wqr=r(o6,"The model class to instantiate is selected based on the "),N4e=n(o6,"CODE",{});var jyt=s(N4e);Qqr=r(jyt,"model_type"),jyt.forEach(t),Hqr=r(o6,` property of the config object (either
passed as an argument or loaded from `),j4e=n(o6,"CODE",{});var Dyt=s(j4e);Uqr=r(Dyt,"pretrained_model_name_or_path"),Dyt.forEach(t),Jqr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D4e=n(o6,"CODE",{});var Gyt=s(D4e);Yqr=r(Gyt,"pretrained_model_name_or_path"),Gyt.forEach(t),Kqr=r(o6,":"),o6.forEach(t),Zqr=i(ti),Ge=n(ti,"UL",{});var To=s(Ge);E3=n(To,"LI",{});var RIe=s(E3);G4e=n(RIe,"STRONG",{});var Oyt=s(G4e);eNr=r(Oyt,"albert"),Oyt.forEach(t),oNr=r(RIe," \u2014 "),pK=n(RIe,"A",{href:!0});var Vyt=s(pK);rNr=r(Vyt,"FlaxAlbertForMultipleChoice"),Vyt.forEach(t),tNr=r(RIe," (ALBERT model)"),RIe.forEach(t),aNr=i(To),C3=n(To,"LI",{});var BIe=s(C3);O4e=n(BIe,"STRONG",{});var Xyt=s(O4e);nNr=r(Xyt,"bert"),Xyt.forEach(t),sNr=r(BIe," \u2014 "),_K=n(BIe,"A",{href:!0});var zyt=s(_K);lNr=r(zyt,"FlaxBertForMultipleChoice"),zyt.forEach(t),iNr=r(BIe," (BERT model)"),BIe.forEach(t),dNr=i(To),w3=n(To,"LI",{});var PIe=s(w3);V4e=n(PIe,"STRONG",{});var Wyt=s(V4e);cNr=r(Wyt,"big_bird"),Wyt.forEach(t),fNr=r(PIe," \u2014 "),uK=n(PIe,"A",{href:!0});var Qyt=s(uK);mNr=r(Qyt,"FlaxBigBirdForMultipleChoice"),Qyt.forEach(t),gNr=r(PIe," (BigBird model)"),PIe.forEach(t),hNr=i(To),A3=n(To,"LI",{});var IIe=s(A3);X4e=n(IIe,"STRONG",{});var Hyt=s(X4e);pNr=r(Hyt,"distilbert"),Hyt.forEach(t),_Nr=r(IIe," \u2014 "),bK=n(IIe,"A",{href:!0});var Uyt=s(bK);uNr=r(Uyt,"FlaxDistilBertForMultipleChoice"),Uyt.forEach(t),bNr=r(IIe," (DistilBERT model)"),IIe.forEach(t),vNr=i(To),y3=n(To,"LI",{});var qIe=s(y3);z4e=n(qIe,"STRONG",{});var Jyt=s(z4e);FNr=r(Jyt,"electra"),Jyt.forEach(t),TNr=r(qIe," \u2014 "),vK=n(qIe,"A",{href:!0});var Yyt=s(vK);MNr=r(Yyt,"FlaxElectraForMultipleChoice"),Yyt.forEach(t),ENr=r(qIe," (ELECTRA model)"),qIe.forEach(t),CNr=i(To),L3=n(To,"LI",{});var NIe=s(L3);W4e=n(NIe,"STRONG",{});var Kyt=s(W4e);wNr=r(Kyt,"roberta"),Kyt.forEach(t),ANr=r(NIe," \u2014 "),FK=n(NIe,"A",{href:!0});var Zyt=s(FK);yNr=r(Zyt,"FlaxRobertaForMultipleChoice"),Zyt.forEach(t),LNr=r(NIe," (RoBERTa model)"),NIe.forEach(t),xNr=i(To),x3=n(To,"LI",{});var jIe=s(x3);Q4e=n(jIe,"STRONG",{});var eLt=s(Q4e);$Nr=r(eLt,"roformer"),eLt.forEach(t),kNr=r(jIe," \u2014 "),TK=n(jIe,"A",{href:!0});var oLt=s(TK);SNr=r(oLt,"FlaxRoFormerForMultipleChoice"),oLt.forEach(t),RNr=r(jIe," (RoFormer model)"),jIe.forEach(t),BNr=i(To),$3=n(To,"LI",{});var DIe=s($3);H4e=n(DIe,"STRONG",{});var rLt=s(H4e);PNr=r(rLt,"xlm-roberta"),rLt.forEach(t),INr=r(DIe," \u2014 "),MK=n(DIe,"A",{href:!0});var tLt=s(MK);qNr=r(tLt,"FlaxXLMRobertaForMultipleChoice"),tLt.forEach(t),NNr=r(DIe," (XLM-RoBERTa model)"),DIe.forEach(t),To.forEach(t),jNr=i(ti),T(k3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),ONe=i(f),of=n(f,"H2",{class:!0});var UDe=s(of);S3=n(UDe,"A",{id:!0,class:!0,href:!0});var aLt=s(S3);U4e=n(aLt,"SPAN",{});var nLt=s(U4e);T(ox.$$.fragment,nLt),nLt.forEach(t),aLt.forEach(t),DNr=i(UDe),J4e=n(UDe,"SPAN",{});var sLt=s(J4e);GNr=r(sLt,"FlaxAutoModelForNextSentencePrediction"),sLt.forEach(t),UDe.forEach(t),VNe=i(f),Fr=n(f,"DIV",{class:!0});var ai=s(Fr);T(rx.$$.fragment,ai),ONr=i(ai),rf=n(ai,"P",{});var Mee=s(rf);VNr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),EK=n(Mee,"A",{href:!0});var lLt=s(EK);XNr=r(lLt,"from_pretrained()"),lLt.forEach(t),zNr=r(Mee," class method or the "),CK=n(Mee,"A",{href:!0});var iLt=s(CK);WNr=r(iLt,"from_config()"),iLt.forEach(t),QNr=r(Mee,` class
method.`),Mee.forEach(t),HNr=i(ai),tx=n(ai,"P",{});var JDe=s(tx);UNr=r(JDe,"This class cannot be instantiated directly using "),Y4e=n(JDe,"CODE",{});var dLt=s(Y4e);JNr=r(dLt,"__init__()"),dLt.forEach(t),YNr=r(JDe," (throws an error)."),JDe.forEach(t),KNr=i(ai),Jt=n(ai,"DIV",{class:!0});var r6=s(Jt);T(ax.$$.fragment,r6),ZNr=i(r6),K4e=n(r6,"P",{});var cLt=s(K4e);ejr=r(cLt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cLt.forEach(t),ojr=i(r6),tf=n(r6,"P",{});var Eee=s(tf);rjr=r(Eee,`Note:
Loading a model from its configuration file does `),Z4e=n(Eee,"STRONG",{});var fLt=s(Z4e);tjr=r(fLt,"not"),fLt.forEach(t),ajr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=n(Eee,"A",{href:!0});var mLt=s(wK);njr=r(mLt,"from_pretrained()"),mLt.forEach(t),sjr=r(Eee," to load the model weights."),Eee.forEach(t),ljr=i(r6),T(R3.$$.fragment,r6),r6.forEach(t),ijr=i(ai),Hr=n(ai,"DIV",{class:!0});var ni=s(Hr);T(nx.$$.fragment,ni),djr=i(ni),eEe=n(ni,"P",{});var gLt=s(eEe);cjr=r(gLt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gLt.forEach(t),fjr=i(ni),En=n(ni,"P",{});var t6=s(En);mjr=r(t6,"The model class to instantiate is selected based on the "),oEe=n(t6,"CODE",{});var hLt=s(oEe);gjr=r(hLt,"model_type"),hLt.forEach(t),hjr=r(t6,` property of the config object (either
passed as an argument or loaded from `),rEe=n(t6,"CODE",{});var pLt=s(rEe);pjr=r(pLt,"pretrained_model_name_or_path"),pLt.forEach(t),_jr=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tEe=n(t6,"CODE",{});var _Lt=s(tEe);ujr=r(_Lt,"pretrained_model_name_or_path"),_Lt.forEach(t),bjr=r(t6,":"),t6.forEach(t),vjr=i(ni),aEe=n(ni,"UL",{});var uLt=s(aEe);B3=n(uLt,"LI",{});var GIe=s(B3);nEe=n(GIe,"STRONG",{});var bLt=s(nEe);Fjr=r(bLt,"bert"),bLt.forEach(t),Tjr=r(GIe," \u2014 "),AK=n(GIe,"A",{href:!0});var vLt=s(AK);Mjr=r(vLt,"FlaxBertForNextSentencePrediction"),vLt.forEach(t),Ejr=r(GIe," (BERT model)"),GIe.forEach(t),uLt.forEach(t),Cjr=i(ni),T(P3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),XNe=i(f),af=n(f,"H2",{class:!0});var YDe=s(af);I3=n(YDe,"A",{id:!0,class:!0,href:!0});var FLt=s(I3);sEe=n(FLt,"SPAN",{});var TLt=s(sEe);T(sx.$$.fragment,TLt),TLt.forEach(t),FLt.forEach(t),wjr=i(YDe),lEe=n(YDe,"SPAN",{});var MLt=s(lEe);Ajr=r(MLt,"FlaxAutoModelForImageClassification"),MLt.forEach(t),YDe.forEach(t),zNe=i(f),Tr=n(f,"DIV",{class:!0});var si=s(Tr);T(lx.$$.fragment,si),yjr=i(si),nf=n(si,"P",{});var Cee=s(nf);Ljr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),yK=n(Cee,"A",{href:!0});var ELt=s(yK);xjr=r(ELt,"from_pretrained()"),ELt.forEach(t),$jr=r(Cee," class method or the "),LK=n(Cee,"A",{href:!0});var CLt=s(LK);kjr=r(CLt,"from_config()"),CLt.forEach(t),Sjr=r(Cee,` class
method.`),Cee.forEach(t),Rjr=i(si),ix=n(si,"P",{});var KDe=s(ix);Bjr=r(KDe,"This class cannot be instantiated directly using "),iEe=n(KDe,"CODE",{});var wLt=s(iEe);Pjr=r(wLt,"__init__()"),wLt.forEach(t),Ijr=r(KDe," (throws an error)."),KDe.forEach(t),qjr=i(si),Yt=n(si,"DIV",{class:!0});var a6=s(Yt);T(dx.$$.fragment,a6),Njr=i(a6),dEe=n(a6,"P",{});var ALt=s(dEe);jjr=r(ALt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ALt.forEach(t),Djr=i(a6),sf=n(a6,"P",{});var wee=s(sf);Gjr=r(wee,`Note:
Loading a model from its configuration file does `),cEe=n(wee,"STRONG",{});var yLt=s(cEe);Ojr=r(yLt,"not"),yLt.forEach(t),Vjr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=n(wee,"A",{href:!0});var LLt=s(xK);Xjr=r(LLt,"from_pretrained()"),LLt.forEach(t),zjr=r(wee," to load the model weights."),wee.forEach(t),Wjr=i(a6),T(q3.$$.fragment,a6),a6.forEach(t),Qjr=i(si),Ur=n(si,"DIV",{class:!0});var li=s(Ur);T(cx.$$.fragment,li),Hjr=i(li),fEe=n(li,"P",{});var xLt=s(fEe);Ujr=r(xLt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xLt.forEach(t),Jjr=i(li),Cn=n(li,"P",{});var n6=s(Cn);Yjr=r(n6,"The model class to instantiate is selected based on the "),mEe=n(n6,"CODE",{});var $Lt=s(mEe);Kjr=r($Lt,"model_type"),$Lt.forEach(t),Zjr=r(n6,` property of the config object (either
passed as an argument or loaded from `),gEe=n(n6,"CODE",{});var kLt=s(gEe);eDr=r(kLt,"pretrained_model_name_or_path"),kLt.forEach(t),oDr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hEe=n(n6,"CODE",{});var SLt=s(hEe);rDr=r(SLt,"pretrained_model_name_or_path"),SLt.forEach(t),tDr=r(n6,":"),n6.forEach(t),aDr=i(li),fx=n(li,"UL",{});var ZDe=s(fx);N3=n(ZDe,"LI",{});var OIe=s(N3);pEe=n(OIe,"STRONG",{});var RLt=s(pEe);nDr=r(RLt,"beit"),RLt.forEach(t),sDr=r(OIe," \u2014 "),$K=n(OIe,"A",{href:!0});var BLt=s($K);lDr=r(BLt,"FlaxBeitForImageClassification"),BLt.forEach(t),iDr=r(OIe," (BEiT model)"),OIe.forEach(t),dDr=i(ZDe),j3=n(ZDe,"LI",{});var VIe=s(j3);_Ee=n(VIe,"STRONG",{});var PLt=s(_Ee);cDr=r(PLt,"vit"),PLt.forEach(t),fDr=r(VIe," \u2014 "),kK=n(VIe,"A",{href:!0});var ILt=s(kK);mDr=r(ILt,"FlaxViTForImageClassification"),ILt.forEach(t),gDr=r(VIe," (ViT model)"),VIe.forEach(t),ZDe.forEach(t),hDr=i(li),T(D3.$$.fragment,li),li.forEach(t),si.forEach(t),WNe=i(f),lf=n(f,"H2",{class:!0});var eGe=s(lf);G3=n(eGe,"A",{id:!0,class:!0,href:!0});var qLt=s(G3);uEe=n(qLt,"SPAN",{});var NLt=s(uEe);T(mx.$$.fragment,NLt),NLt.forEach(t),qLt.forEach(t),pDr=i(eGe),bEe=n(eGe,"SPAN",{});var jLt=s(bEe);_Dr=r(jLt,"FlaxAutoModelForVision2Seq"),jLt.forEach(t),eGe.forEach(t),QNe=i(f),Mr=n(f,"DIV",{class:!0});var ii=s(Mr);T(gx.$$.fragment,ii),uDr=i(ii),df=n(ii,"P",{});var Aee=s(df);bDr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SK=n(Aee,"A",{href:!0});var DLt=s(SK);vDr=r(DLt,"from_pretrained()"),DLt.forEach(t),FDr=r(Aee," class method or the "),RK=n(Aee,"A",{href:!0});var GLt=s(RK);TDr=r(GLt,"from_config()"),GLt.forEach(t),MDr=r(Aee,` class
method.`),Aee.forEach(t),EDr=i(ii),hx=n(ii,"P",{});var oGe=s(hx);CDr=r(oGe,"This class cannot be instantiated directly using "),vEe=n(oGe,"CODE",{});var OLt=s(vEe);wDr=r(OLt,"__init__()"),OLt.forEach(t),ADr=r(oGe," (throws an error)."),oGe.forEach(t),yDr=i(ii),Kt=n(ii,"DIV",{class:!0});var s6=s(Kt);T(px.$$.fragment,s6),LDr=i(s6),FEe=n(s6,"P",{});var VLt=s(FEe);xDr=r(VLt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),VLt.forEach(t),$Dr=i(s6),cf=n(s6,"P",{});var yee=s(cf);kDr=r(yee,`Note:
Loading a model from its configuration file does `),TEe=n(yee,"STRONG",{});var XLt=s(TEe);SDr=r(XLt,"not"),XLt.forEach(t),RDr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=n(yee,"A",{href:!0});var zLt=s(BK);BDr=r(zLt,"from_pretrained()"),zLt.forEach(t),PDr=r(yee," to load the model weights."),yee.forEach(t),IDr=i(s6),T(O3.$$.fragment,s6),s6.forEach(t),qDr=i(ii),Jr=n(ii,"DIV",{class:!0});var di=s(Jr);T(_x.$$.fragment,di),NDr=i(di),MEe=n(di,"P",{});var WLt=s(MEe);jDr=r(WLt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),WLt.forEach(t),DDr=i(di),wn=n(di,"P",{});var l6=s(wn);GDr=r(l6,"The model class to instantiate is selected based on the "),EEe=n(l6,"CODE",{});var QLt=s(EEe);ODr=r(QLt,"model_type"),QLt.forEach(t),VDr=r(l6,` property of the config object (either
passed as an argument or loaded from `),CEe=n(l6,"CODE",{});var HLt=s(CEe);XDr=r(HLt,"pretrained_model_name_or_path"),HLt.forEach(t),zDr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wEe=n(l6,"CODE",{});var ULt=s(wEe);WDr=r(ULt,"pretrained_model_name_or_path"),ULt.forEach(t),QDr=r(l6,":"),l6.forEach(t),HDr=i(di),AEe=n(di,"UL",{});var JLt=s(AEe);V3=n(JLt,"LI",{});var XIe=s(V3);yEe=n(XIe,"STRONG",{});var YLt=s(yEe);UDr=r(YLt,"vision-encoder-decoder"),YLt.forEach(t),JDr=r(XIe," \u2014 "),PK=n(XIe,"A",{href:!0});var KLt=s(PK);YDr=r(KLt,"FlaxVisionEncoderDecoderModel"),KLt.forEach(t),KDr=r(XIe," (Vision Encoder decoder model)"),XIe.forEach(t),JLt.forEach(t),ZDr=i(di),T(X3.$$.fragment,di),di.forEach(t),ii.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(rxt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertModel"),c(bf,"id","extending-the-auto-classes"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#extending-the-auto-classes"),c(ui,"class","relative group"),c(Ff,"id","transformers.AutoConfig"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#transformers.AutoConfig"),c(bi,"class","relative group"),c(P$,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(I$,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertConfig"),c(q$,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartConfig"),c(N$,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitConfig"),c(j$,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertConfig"),c(D$,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(G$,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdConfig"),c(O$,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(V$,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(X$,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(z$,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomConfig"),c(W$,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertConfig"),c(Q$,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineConfig"),c(H$,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPConfig"),c(U$,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertConfig"),c(J$,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextConfig"),c(Y$,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLConfig"),c(K$,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Z$,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(ek,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(ok,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaConfig"),c(rk,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(tk,"href","/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(ak,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTConfig"),c(nk,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrConfig"),c(sk,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertConfig"),c(lk,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRConfig"),c(ik,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTConfig"),c(dk,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraConfig"),c(ck,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(fk,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertConfig"),c(mk,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaConfig"),c(gk,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetConfig"),c(hk,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTConfig"),c(pk,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelConfig"),c(_k,"href","/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNConfig"),c(uk,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Config"),c(bk,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(vk,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJConfig"),c(Fk,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertConfig"),c(Tk,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertConfig"),c(Mk,"href","/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Ek,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Ck,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(wk,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDConfig"),c(Ak,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerConfig"),c(yk,"href","/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeConfig"),c(Lk,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertConfig"),c(xk,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Config"),c($k,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianConfig"),c(kk,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Sk,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartConfig"),c(Rk,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Bk,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Pk,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetConfig"),c(Ik,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Config"),c(qk,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Nk,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(jk,"href","/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTConfig"),c(Dk,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusConfig"),c(Gk,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Ok,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartConfig"),c(Vk,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Xk,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(zk,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Wk,"href","/docs/transformers/pr_17202/en/model_doc/rag#transformers.RagConfig"),c(Qk,"href","/docs/transformers/pr_17202/en/model_doc/realm#transformers.RealmConfig"),c(Hk,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerConfig"),c(Uk,"href","/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetConfig"),c(Jk,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertConfig"),c(Yk,"href","/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetConfig"),c(Kk,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertConfig"),c(Zk,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaConfig"),c(eS,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerConfig"),c(oS,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerConfig"),c(rS,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWConfig"),c(tS,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDConfig"),c(aS,"href","/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(nS,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(sS,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(lS,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterConfig"),c(iS,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(dS,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinConfig"),c(cS,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Config"),c(fS,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasConfig"),c(mS,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(gS,"href","/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRConfig"),c(hS,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(pS,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(_S,"href","/docs/transformers/pr_17202/en/model_doc/van#transformers.VanConfig"),c(uS,"href","/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltConfig"),c(bS,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(vS,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(FS,"href","/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(TS,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTConfig"),c(MS,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(ES,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(CS,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(wS,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMConfig"),c(AS,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMConfig"),c(yS,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMConfig"),c(LS,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(xS,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c($S,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(kS,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetConfig"),c(SS,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosConfig"),c(RS,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tg,"id","transformers.AutoTokenizer"),c(Tg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tg,"href","#transformers.AutoTokenizer"),c(Fi,"class","relative group"),c(BS,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(PS,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizer"),c(IS,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(qS,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartTokenizer"),c(NS,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartTokenizerFast"),c(jS,"href","/docs/transformers/pr_17202/en/model_doc/barthez#transformers.BarthezTokenizer"),c(DS,"href","/docs/transformers/pr_17202/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(GS,"href","/docs/transformers/pr_17202/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(OS,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(VS,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(XS,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(zS,"href","/docs/transformers/pr_17202/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(WS,"href","/docs/transformers/pr_17202/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(QS,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(HS,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(US,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(JS,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(YS,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(KS,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(ZS,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(eR,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(oR,"href","/docs/transformers/pr_17202/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(rR,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertTokenizer"),c(tR,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(aR,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineTokenizer"),c(nR,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPTokenizer"),c(sR,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(lR,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(iR,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(dR,"href","/docs/transformers/pr_17202/en/model_doc/cpm#transformers.CpmTokenizer"),c(cR,"href","/docs/transformers/pr_17202/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(fR,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(mR,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c(gR,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(hR,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaTokenizer"),c(pR,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(_R,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(uR,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(bR,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(vR,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(FR,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(TR,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(MR,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraTokenizer"),c(ER,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(CR,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(wR,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetTokenizer"),c(AR,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(yR,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(LR,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelTokenizer"),c(xR,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c($R,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(kR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(SR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(RR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(BR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(PR,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(IR,"href","/docs/transformers/pr_17202/en/model_doc/herbert#transformers.HerbertTokenizer"),c(qR,"href","/docs/transformers/pr_17202/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(NR,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(jR,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DR,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GR,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(OR,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(VR,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(XR,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(zR,"href","/docs/transformers/pr_17202/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(WR,"href","/docs/transformers/pr_17202/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(QR,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDTokenizer"),c(HR,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDTokenizerFast"),c(UR,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerTokenizer"),c(JR,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(YR,"href","/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeTokenizer"),c(KR,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(ZR,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(eB,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(oB,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianTokenizer"),c(rB,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartTokenizer"),c(tB,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(aB,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(nB,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(sB,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(lB,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(iB,"href","/docs/transformers/pr_17202/en/model_doc/mluke#transformers.MLukeTokenizer"),c(dB,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(cB,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(fB,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(mB,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(gB,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.T5Tokenizer"),c(hB,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.T5TokenizerFast"),c(pB,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizer"),c(_B,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(uB,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(bB,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(vB,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(FB,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(TB,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(MB,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(EB,"href","/docs/transformers/pr_17202/en/model_doc/phobert#transformers.PhobertTokenizer"),c(CB,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartTokenizer"),c(wB,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(AB,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(yB,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(LB,"href","/docs/transformers/pr_17202/en/model_doc/rag#transformers.RagTokenizer"),c(xB,"href","/docs/transformers/pr_17202/en/model_doc/realm#transformers.RealmTokenizer"),c($B,"href","/docs/transformers/pr_17202/en/model_doc/realm#transformers.RealmTokenizerFast"),c(kB,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerTokenizer"),c(SB,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(RB,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertTokenizer"),c(BB,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(PB,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(IB,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(qB,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c(NB,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(jB,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(DB,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(GB,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(OB,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(VB,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterTokenizer"),c(XB,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(zB,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(WB,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(QB,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.T5Tokenizer"),c(HB,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.T5TokenizerFast"),c(UB,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasTokenizer"),c(JB,"href","/docs/transformers/pr_17202/en/model_doc/tapex#transformers.TapexTokenizer"),c(YB,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(KB,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizer"),c(ZB,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertTokenizerFast"),c(eP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(oP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(rP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(tP,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMTokenizer"),c(aP,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(nP,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMTokenizer"),c(sP,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(lP,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(iP,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(dP,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizer"),c(cP,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(fP,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(mP,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(gP,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizer"),c(hP,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rh,"id","transformers.AutoFeatureExtractor"),c(rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rh,"href","#transformers.AutoFeatureExtractor"),c(Ti,"class","relative group"),c(pP,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(_P,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(uP,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(bP,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(FP,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(TP,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(MP,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(EP,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(CP,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(wP,"href","/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(AP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(yP,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(LP,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(xP,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c($P,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(kP,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(SP,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(RP,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(BP,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(PP,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(IP,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(qP,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(NP,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(jP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(DP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(GP,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sh,"id","transformers.AutoProcessor"),c(Sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sh,"href","#transformers.AutoProcessor"),c(Mi,"class","relative group"),c(OP,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(VP,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPProcessor"),c(XP,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(zP,"href","/docs/transformers/pr_17202/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(WP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(HP,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(UP,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(JP,"href","/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRProcessor"),c(YP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KP,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ZP,"href","/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltProcessor"),c(eI,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(oI,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rI,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tI,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kh,"id","transformers.AutoModel"),c(Kh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kh,"href","#transformers.AutoModel"),c(Ci,"class","relative group"),c(aI,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nI,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sI,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lI,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertModel"),c(iI,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartModel"),c(dI,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitModel"),c(cI,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertModel"),c(fI,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(mI,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdModel"),c(gI,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(hI,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(pI,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(_I,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomModel"),c(uI,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertModel"),c(bI,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineModel"),c(vI,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.CLIPModel"),c(FI,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertModel"),c(TI,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextModel"),c(MI,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLModel"),c(EI,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(CI,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(wI,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(AI,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaModel"),c(yI,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(LI,"href","/docs/transformers/pr_17202/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(xI,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTModel"),c($I,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrModel"),c(kI,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertModel"),c(SI,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(RI,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTModel"),c(BI,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraModel"),c(PI,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertModel"),c(II,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaModel"),c(qI,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetModel"),c(NI,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTModel"),c(jI,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelModel"),c(DI,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelBaseModel"),c(GI,"href","/docs/transformers/pr_17202/en/model_doc/glpn#transformers.GLPNModel"),c(OI,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2Model"),c(VI,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(XI,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJModel"),c(zI,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertModel"),c(WI,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertModel"),c(QI,"href","/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(HI,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(UI,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(JI,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDModel"),c(YI,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerModel"),c(KI,"href","/docs/transformers/pr_17202/en/model_doc/luke#transformers.LukeModel"),c(ZI,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertModel"),c(eq,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100Model"),c(oq,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianModel"),c(rq,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerModel"),c(tq,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartModel"),c(aq,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(nq,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertModel"),c(sq,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetModel"),c(lq,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5Model"),c(iq,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerModel"),c(dq,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(cq,"href","/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTModel"),c(fq,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusModel"),c(mq,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverModel"),c(gq,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartModel"),c(hq,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerModel"),c(pq,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(_q,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertModel"),c(uq,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModel"),c(bq,"href","/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetModel"),c(vq,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertModel"),c(Fq,"href","/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetModel"),c(Tq,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel"),c(Mq,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaModel"),c(Eq,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerModel"),c(Cq,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerModel"),c(wq,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWModel"),c(Aq,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDModel"),c(yq,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Lq,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterModel"),c(xq,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c($q,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinModel"),c(kq,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5Model"),c(Sq,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasModel"),c(Rq,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Bq,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Pq,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Iq,"href","/docs/transformers/pr_17202/en/model_doc/van#transformers.VanModel"),c(qq,"href","/docs/transformers/pr_17202/en/model_doc/vilt#transformers.ViltModel"),c(Nq,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(jq,"href","/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Dq,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTModel"),c(Gq,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Oq,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Vq,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Xq,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMModel"),c(zq,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMModel"),c(Wq,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMModel"),c(Qq,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Hq,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Uq,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Jq,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetModel"),c(Yq,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosModel"),c(Kq,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W_,"id","transformers.AutoModelForPreTraining"),c(W_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W_,"href","#transformers.AutoModelForPreTraining"),c(yi,"class","relative group"),c(Zq,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eN,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oN,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rN,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForPreTraining"),c(tN,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(aN,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForPreTraining"),c(nN,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(sN,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomForCausalLM"),c(lN,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(iN,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(dN,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(cN,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(fN,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(mN,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(gN,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForPreTraining"),c(hN,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(pN,"href","/docs/transformers/pr_17202/en/model_doc/flava#transformers.FlavaForPreTraining"),c(_N,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForPreTraining"),c(uN,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(bN,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(vN,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(FN,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(TN,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(MN,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(EN,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(CN,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(wN,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(AN,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(yN,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(LN,"href","/docs/transformers/pr_17202/en/model_doc/retribert#transformers.RetriBertModel"),c(xN,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c($N,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(kN,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(SN,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(RN,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(BN,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(PN,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(IN,"href","/docs/transformers/pr_17202/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(qN,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(NN,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(jN,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(DN,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(GN,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(ON,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(VN,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nu,"id","transformers.AutoModelForCausalLM"),c(Nu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nu,"href","#transformers.AutoModelForCausalLM"),c($i,"class","relative group"),c(XN,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zN,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WN,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QN,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForCausalLM"),c(HN,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertLMHeadModel"),c(UN,"href","/docs/transformers/pr_17202/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(JN,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(YN,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(KN,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(ZN,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(ej,"href","/docs/transformers/pr_17202/en/model_doc/bloom#transformers.BloomForCausalLM"),c(oj,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(rj,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(tj,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(aj,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForCausalLM"),c(nj,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(sj,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(lj,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(ij,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianForCausalLM"),c(dj,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForCausalLM"),c(cj,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(fj,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(mj,"href","/docs/transformers/pr_17202/en/model_doc/opt#transformers.OPTForCausalLM"),c(gj,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(hj,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(pj,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(_j,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(uj,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(bj,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(vj,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Fj,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Tj,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Mj,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Ej,"href","/docs/transformers/pr_17202/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Cj,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(wj,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Aj,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(yj,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Lj,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(xj,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w2,"id","transformers.AutoModelForMaskedLM"),c(w2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w2,"href","#transformers.AutoModelForMaskedLM"),c(Ri,"class","relative group"),c($j,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kj,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sj,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rj,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Bj,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Pj,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(qj,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Nj,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(jj,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Dj,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Gj,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Vj,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Xj,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(zj,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Wj,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Qj,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Hj,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Uj,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Jj,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Yj,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(eD,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(oD,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(rD,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(tD,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(aD,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(nD,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(sD,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(lD,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(iD,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(dD,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(cD,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(fD,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(mD,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c1,"id","transformers.AutoModelForSeq2SeqLM"),c(c1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ii,"class","relative group"),c(gD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_D,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(uD,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(bD,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(vD,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(FD,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(TD,"href","/docs/transformers/pr_17202/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(MD,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(ED,"href","/docs/transformers/pr_17202/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(CD,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.MarianMTModel"),c(wD,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(AD,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(yD,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(LD,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(xD,"href","/docs/transformers/pr_17202/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c($D,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(kD,"href","/docs/transformers/pr_17202/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($1,"id","transformers.AutoModelForSequenceClassification"),c($1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($1,"href","#transformers.AutoModelForSequenceClassification"),c(ji,"class","relative group"),c(SD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BD,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PD,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17202/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ab,"id","transformers.AutoModelForMultipleChoice"),c(Ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ab,"href","#transformers.AutoModelForMultipleChoice"),c(Oi,"class","relative group"),c(yG,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LG,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xG,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($G,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(kG,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForMultipleChoice"),c(SG,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(RG,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(BG,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(PG,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(IG,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(qG,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(NG,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(jG,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(DG,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(GG,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(OG,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(VG,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(XG,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(zG,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(WG,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(QG,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(HG,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(UG,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(JG,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(YG,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(KG,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(eO,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(oO,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(rO,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(tO,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(aO,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nv,"id","transformers.AutoModelForNextSentencePrediction"),c(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nv,"href","#transformers.AutoModelForNextSentencePrediction"),c(zi,"class","relative group"),c(nO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iO,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(dO,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(cO,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(fO,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(mO,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hv,"id","transformers.AutoModelForTokenClassification"),c(hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hv,"href","#transformers.AutoModelForTokenClassification"),c(Hi,"class","relative group"),c(gO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_O,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(uO,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForTokenClassification"),c(bO,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(vO,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(FO,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForTokenClassification"),c(TO,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(MO,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(EO,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(CO,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(wO,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(AO,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(yO,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(LO,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(xO,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c($O,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(kO,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(SO,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(RO,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(BO,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(PO,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(IO,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(qO,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(NO,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(jO,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(DO,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(GO,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(OO,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(VO,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(XO,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(zO,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(WO,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(QO,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(HO,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yv,"id","transformers.AutoModelForQuestionAnswering"),c(Yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yv,"href","#transformers.AutoModelForQuestionAnswering"),c(Yi,"class","relative group"),c(UO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YO,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KO,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17202/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17202/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(mV,"href","/docs/transformers/pr_17202/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_17202/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17202/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17202/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17202/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_17202/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_17202/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c($V,"href","/docs/transformers/pr_17202/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17202/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(RV,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(IV,"href","/docs/transformers/pr_17202/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.AutoModelForTableQuestionAnswering"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ed,"class","relative group"),c(qV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DV,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zF,"id","transformers.AutoModelForImageClassification"),c(zF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zF,"href","#transformers.AutoModelForImageClassification"),c(td,"class","relative group"),c(GV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VV,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XV,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForImageClassification"),c(zV,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(WV,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(QV,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassification"),c(HV,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(UV,"href","/docs/transformers/pr_17202/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(JV,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(YV,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(KV,"href","/docs/transformers/pr_17202/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(ZV,"href","/docs/transformers/pr_17202/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(eX,"href","/docs/transformers/pr_17202/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(oX,"href","/docs/transformers/pr_17202/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(rX,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(tX,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForImageClassification"),c(aX,"href","/docs/transformers/pr_17202/en/model_doc/van#transformers.VanForImageClassification"),c(nX,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s0,"id","transformers.AutoModelForVision2Seq"),c(s0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s0,"href","#transformers.AutoModelForVision2Seq"),c(sd,"class","relative group"),c(sX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dX,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f0,"id","transformers.AutoModelForAudioClassification"),c(f0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f0,"href","#transformers.AutoModelForAudioClassification"),c(dd,"class","relative group"),c(cX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gX,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(_X,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(uX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(bX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(vX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(FX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(TX,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C0,"id","transformers.AutoModelForAudioFrameClassification"),c(C0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C0,"href","#transformers.AutoModelForAudioFrameClassification"),c(md,"class","relative group"),c(MX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wX,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(AX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(yX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(LX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(xX,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R0,"id","transformers.AutoModelForCTC"),c(R0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R0,"href","#transformers.AutoModelForCTC"),c(pd,"class","relative group"),c($X,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RX,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(BX,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.HubertForCTC"),c(PX,"href","/docs/transformers/pr_17202/en/model_doc/sew#transformers.SEWForCTC"),c(IX,"href","/docs/transformers/pr_17202/en/model_doc/sew-d#transformers.SEWDForCTC"),c(qX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(NX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(jX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(DX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(GX,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W0,"id","transformers.AutoModelForSpeechSeq2Seq"),c(W0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W0,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(bd,"class","relative group"),c(OX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zX,"href","/docs/transformers/pr_17202/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(WX,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K0,"id","transformers.AutoModelForAudioXVector"),c(K0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K0,"href","#transformers.AutoModelForAudioXVector"),c(Td,"class","relative group"),c(QX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(YX,"href","/docs/transformers/pr_17202/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(KX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(ZX,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(ez,"href","/docs/transformers/pr_17202/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lT,"id","transformers.AutoModelForMaskedImageModeling"),c(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Cd,"class","relative group"),c(oz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(az,"href","/docs/transformers/pr_17202/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(nz,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(sz,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hT,"id","transformers.AutoModelForObjectDetection"),c(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hT,"href","#transformers.AutoModelForObjectDetection"),c(Ld,"class","relative group"),c(lz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cz,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForObjectDetection"),c(fz,"href","/docs/transformers/pr_17202/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FT,"id","transformers.AutoModelForImageSegmentation"),c(FT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FT,"href","#transformers.AutoModelForImageSegmentation"),c(kd,"class","relative group"),c(mz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pz,"href","/docs/transformers/pr_17202/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wT,"id","transformers.AutoModelForSemanticSegmentation"),c(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(_z,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vz,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Fz,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(Tz,"href","/docs/transformers/pr_17202/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Mz,"href","/docs/transformers/pr_17202/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RT,"id","transformers.AutoModelForInstanceSegmentation"),c(RT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RT,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(Ez,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Az,"href","/docs/transformers/pr_17202/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.TFAutoModel"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.TFAutoModel"),c(Dd,"class","relative group"),c(yz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xz,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($z,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertModel"),c(kz,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartModel"),c(Sz,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertModel"),c(Rz,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Bz,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Pz,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertModel"),c(Iz,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.TFCLIPModel"),c(qz,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertModel"),c(Nz,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextModel"),c(jz,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Dz,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(Gz,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaModel"),c(Oz,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Vz,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Xz,"href","/docs/transformers/pr_17202/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(zz,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraModel"),c(Wz,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Qz,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelModel"),c(Hz,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Uz,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Jz,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJModel"),c(Yz,"href","/docs/transformers/pr_17202/en/model_doc/hubert#transformers.TFHubertModel"),c(Kz,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Zz,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDModel"),c(eW,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerModel"),c(oW,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertModel"),c(rW,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianModel"),c(tW,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartModel"),c(aW,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(nW,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetModel"),c(sW,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5Model"),c(lW,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(iW,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusModel"),c(dW,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertModel"),c(cW,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaModel"),c(fW,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerModel"),c(mW,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(gW,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.TFSwinModel"),c(hW,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5Model"),c(pW,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasModel"),c(_W,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(uW,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTModel"),c(bW,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(vW,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(FW,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMModel"),c(TW,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(MW,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S7,"id","transformers.TFAutoModelForPreTraining"),c(S7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S7,"href","#transformers.TFAutoModelForPreTraining"),c(Vd,"class","relative group"),c(EW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AW,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(yW,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(LW,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForPreTraining"),c(xW,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c($W,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(kW,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(SW,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(RW,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(BW,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(PW,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(IW,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(qW,"href","/docs/transformers/pr_17202/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(NW,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(jW,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(DW,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(GW,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(OW,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(VW,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(XW,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(zW,"href","/docs/transformers/pr_17202/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(WW,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(QW,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(HW,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aM,"id","transformers.TFAutoModelForCausalLM"),c(aM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aM,"href","#transformers.TFAutoModelForCausalLM"),c(Wd,"class","relative group"),c(UW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YW,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KW,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(ZW,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(eQ,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(oQ,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(rQ,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(tQ,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(aQ,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(nQ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(sQ,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(lQ,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(iQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(dQ,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vM,"id","transformers.TFAutoModelForImageClassification"),c(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vM,"href","#transformers.TFAutoModelForImageClassification"),c(Ud,"class","relative group"),c(cQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gQ,"href","/docs/transformers/pr_17202/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(hQ,"href","/docs/transformers/pr_17202/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(pQ,"href","/docs/transformers/pr_17202/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(_Q,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AM,"id","transformers.TFAutoModelForMaskedLM"),c(AM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AM,"href","#transformers.TFAutoModelForMaskedLM"),c(Kd,"class","relative group"),c(uQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FQ,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(TQ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(MQ,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(EQ,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(CQ,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(AQ,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(yQ,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(xQ,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c($Q,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(kQ,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(RQ,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(PQ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(IQ,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(qQ,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(jQ,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(oc,"class","relative group"),c(DQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VQ,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(XQ,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(zQ,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(WQ,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(QQ,"href","/docs/transformers/pr_17202/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(HQ,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.TFMarianMTModel"),c(UQ,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(JQ,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(YQ,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(KQ,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i4,"id","transformers.TFAutoModelForSequenceClassification"),c(i4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i4,"href","#transformers.TFAutoModelForSequenceClassification"),c(ac,"class","relative group"),c(ZQ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rH,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(tH,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(aH,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(nH,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(sH,"href","/docs/transformers/pr_17202/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(lH,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(iH,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(dH,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(cH,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(fH,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(mH,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(gH,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(hH,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(pH,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(_H,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(uH,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(bH,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(vH,"href","/docs/transformers/pr_17202/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(FH,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(TH,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(MH,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(EH,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(CH,"href","/docs/transformers/pr_17202/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(wH,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(AH,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(yH,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q4,"id","transformers.TFAutoModelForMultipleChoice"),c(q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q4,"href","#transformers.TFAutoModelForMultipleChoice"),c(lc,"class","relative group"),c(LH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($H,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kH,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(SH,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(RH,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(BH,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(PH,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(IH,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(qH,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(NH,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(jH,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(DH,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(GH,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(OH,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(VH,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(XH,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(zH,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(WH,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(QH,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(cc,"class","relative group"),c(HH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YH,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(KH,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(iE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(gc,"class","relative group"),c(ZH,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rU,"href","/docs/transformers/pr_17202/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mE,"id","transformers.TFAutoModelForTokenClassification"),c(mE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mE,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(tU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sU,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(lU,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(iU,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(dU,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(cU,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(fU,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(mU,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(gU,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(hU,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(pU,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(_U,"href","/docs/transformers/pr_17202/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(uU,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(bU,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(vU,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(FU,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(TU,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(MU,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(EU,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(CU,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(wU,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PE,"id","transformers.TFAutoModelForQuestionAnswering"),c(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(vc,"class","relative group"),c(AU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xU,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c($U,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(kU,"href","/docs/transformers/pr_17202/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(SU,"href","/docs/transformers/pr_17202/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(RU,"href","/docs/transformers/pr_17202/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(BU,"href","/docs/transformers/pr_17202/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(PU,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_17202/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(NU,"href","/docs/transformers/pr_17202/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(jU,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_17202/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_17202/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(OU,"href","/docs/transformers/pr_17202/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_17202/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_17202/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(QU,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_17202/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aC,"id","transformers.TFAutoModelForVision2Seq"),c(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aC,"href","#transformers.TFAutoModelForVision2Seq"),c(Mc,"class","relative group"),c(UU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KU,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(iC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(wc,"class","relative group"),c(ZU,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rJ,"href","/docs/transformers/pr_17202/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mC,"id","transformers.FlaxAutoModel"),c(mC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mC,"href","#transformers.FlaxAutoModel"),c(Lc,"class","relative group"),c(tJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sJ,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertModel"),c(lJ,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartModel"),c(iJ,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitModel"),c(dJ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertModel"),c(cJ,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(fJ,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(mJ,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(gJ,"href","/docs/transformers/pr_17202/en/model_doc/clip#transformers.FlaxCLIPModel"),c(hJ,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(pJ,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraModel"),c(_J,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(uJ,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(bJ,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(vJ,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianModel"),c(FJ,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartModel"),c(TJ,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5Model"),c(MJ,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(EJ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(CJ,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(wJ,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5Model"),c(AJ,"href","/docs/transformers/pr_17202/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(yJ,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTModel"),c(LJ,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(xJ,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMModel"),c($J,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DC,"id","transformers.FlaxAutoModelForCausalLM"),c(DC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DC,"href","#transformers.FlaxAutoModelForCausalLM"),c(kc,"class","relative group"),c(kJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BJ,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(PJ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(IJ,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(qJ,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(NJ,"href","/docs/transformers/pr_17202/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(jJ,"href","/docs/transformers/pr_17202/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(DJ,"href","/docs/transformers/pr_17202/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(GJ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(OJ,"href","/docs/transformers/pr_17202/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KC,"id","transformers.FlaxAutoModelForPreTraining"),c(KC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(VJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WJ,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(QJ,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(HJ,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(UJ,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(JJ,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(YJ,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(KJ,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(ZJ,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(eY,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(oY,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(rY,"href","/docs/transformers/pr_17202/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(tY,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g5,"id","transformers.FlaxAutoModelForMaskedLM"),c(g5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(aY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lY,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(iY,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(dY,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(cY,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(fY,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(mY,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(gY,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(hY,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(pY,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(_Y,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Dc,"class","relative group"),c(uY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FY,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(TY,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(MY,"href","/docs/transformers/pr_17202/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(EY,"href","/docs/transformers/pr_17202/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(CY,"href","/docs/transformers/pr_17202/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(wY,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(AY,"href","/docs/transformers/pr_17202/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(yY,"href","/docs/transformers/pr_17202/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(LY,"href","/docs/transformers/pr_17202/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(N5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Vc,"class","relative group"),c(xY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Y,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SY,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(RY,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(BY,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(PY,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(IY,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(qY,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(NY,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(jY,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(DY,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(GY,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Wc,"class","relative group"),c(OY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XY,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zY,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(WY,"href","/docs/transformers/pr_17202/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(QY,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(HY,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(UY,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(JY,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(YY,"href","/docs/transformers/pr_17202/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(KY,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(ZY,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(eK,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c3,"id","transformers.FlaxAutoModelForTokenClassification"),c(c3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Uc,"class","relative group"),c(oK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aK,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(nK,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(sK,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(lK,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(iK,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(dK,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(cK,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(fK,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(T3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Kc,"class","relative group"),c(mK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pK,"href","/docs/transformers/pr_17202/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(_K,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(uK,"href","/docs/transformers/pr_17202/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(bK,"href","/docs/transformers/pr_17202/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(vK,"href","/docs/transformers/pr_17202/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(FK,"href","/docs/transformers/pr_17202/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(TK,"href","/docs/transformers/pr_17202/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(MK,"href","/docs/transformers/pr_17202/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(S3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(of,"class","relative group"),c(EK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AK,"href","/docs/transformers/pr_17202/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I3,"id","transformers.FlaxAutoModelForImageClassification"),c(I3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I3,"href","#transformers.FlaxAutoModelForImageClassification"),c(af,"class","relative group"),c(yK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($K,"href","/docs/transformers/pr_17202/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(kK,"href","/docs/transformers/pr_17202/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G3,"id","transformers.FlaxAutoModelForVision2Seq"),c(G3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(lf,"class","relative group"),c(SK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BK,"href","/docs/transformers/pr_17202/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PK,"href","/docs/transformers/pr_17202/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,ci),b(f,hf,u),b(f,rt,u),e(rt,fi),e(rt,mi),e(mi,i6),e(rt,pf),b(f,je,u),b(f,We,u),e(We,gi),e(We,yn),e(yn,d6),e(We,Ln),e(We,xn),e(xn,c6),e(We,hi),e(We,$n),e($n,f6),e(We,pi),b(f,_f,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,x$),e(Ae,_i),e(_i,$$),e(Ae,k$),b(f,Eo,u),b(f,wa,u),e(wa,S$),e(wa,uf),e(uf,R$),e(wa,rGe),b(f,zIe,u),b(f,ui,u),e(ui,bf),e(bf,Lee),M(m6,Lee,null),e(ui,tGe),e(ui,xee),e(xee,aGe),b(f,WIe,u),b(f,kn,u),e(kn,nGe),e(kn,$ee),e($ee,sGe),e(kn,lGe),e(kn,kee),e(kee,iGe),e(kn,dGe),b(f,QIe,u),M(g6,f,u),b(f,HIe,u),b(f,B$,u),e(B$,cGe),b(f,UIe,u),M(vf,f,u),b(f,JIe,u),b(f,bi,u),e(bi,Ff),e(Ff,See),M(h6,See,null),e(bi,fGe),e(bi,Ree),e(Ree,mGe),b(f,YIe,u),b(f,Co,u),M(p6,Co,null),e(Co,gGe),e(Co,_6),e(_6,hGe),e(_6,P$),e(P$,pGe),e(_6,_Ge),e(Co,uGe),e(Co,u6),e(u6,bGe),e(u6,Bee),e(Bee,vGe),e(u6,FGe),e(Co,TGe),e(Co,Er),M(b6,Er,null),e(Er,MGe),e(Er,Pee),e(Pee,EGe),e(Er,CGe),e(Er,vi),e(vi,wGe),e(vi,Iee),e(Iee,AGe),e(vi,yGe),e(vi,qee),e(qee,LGe),e(vi,xGe),e(Er,$Ge),e(Er,A),e(A,Tf),e(Tf,Nee),e(Nee,kGe),e(Tf,SGe),e(Tf,I$),e(I$,RGe),e(Tf,BGe),e(A,PGe),e(A,Mf),e(Mf,jee),e(jee,IGe),e(Mf,qGe),e(Mf,q$),e(q$,NGe),e(Mf,jGe),e(A,DGe),e(A,Ef),e(Ef,Dee),e(Dee,GGe),e(Ef,OGe),e(Ef,N$),e(N$,VGe),e(Ef,XGe),e(A,zGe),e(A,Cf),e(Cf,Gee),e(Gee,WGe),e(Cf,QGe),e(Cf,j$),e(j$,HGe),e(Cf,UGe),e(A,JGe),e(A,wf),e(wf,Oee),e(Oee,YGe),e(wf,KGe),e(wf,D$),e(D$,ZGe),e(wf,eOe),e(A,oOe),e(A,Af),e(Af,Vee),e(Vee,rOe),e(Af,tOe),e(Af,G$),e(G$,aOe),e(Af,nOe),e(A,sOe),e(A,yf),e(yf,Xee),e(Xee,lOe),e(yf,iOe),e(yf,O$),e(O$,dOe),e(yf,cOe),e(A,fOe),e(A,Lf),e(Lf,zee),e(zee,mOe),e(Lf,gOe),e(Lf,V$),e(V$,hOe),e(Lf,pOe),e(A,_Oe),e(A,xf),e(xf,Wee),e(Wee,uOe),e(xf,bOe),e(xf,X$),e(X$,vOe),e(xf,FOe),e(A,TOe),e(A,$f),e($f,Qee),e(Qee,MOe),e($f,EOe),e($f,z$),e(z$,COe),e($f,wOe),e(A,AOe),e(A,kf),e(kf,Hee),e(Hee,yOe),e(kf,LOe),e(kf,W$),e(W$,xOe),e(kf,$Oe),e(A,kOe),e(A,Sf),e(Sf,Uee),e(Uee,SOe),e(Sf,ROe),e(Sf,Q$),e(Q$,BOe),e(Sf,POe),e(A,IOe),e(A,Rf),e(Rf,Jee),e(Jee,qOe),e(Rf,NOe),e(Rf,H$),e(H$,jOe),e(Rf,DOe),e(A,GOe),e(A,Bf),e(Bf,Yee),e(Yee,OOe),e(Bf,VOe),e(Bf,U$),e(U$,XOe),e(Bf,zOe),e(A,WOe),e(A,Pf),e(Pf,Kee),e(Kee,QOe),e(Pf,HOe),e(Pf,J$),e(J$,UOe),e(Pf,JOe),e(A,YOe),e(A,If),e(If,Zee),e(Zee,KOe),e(If,ZOe),e(If,Y$),e(Y$,eVe),e(If,oVe),e(A,rVe),e(A,qf),e(qf,eoe),e(eoe,tVe),e(qf,aVe),e(qf,K$),e(K$,nVe),e(qf,sVe),e(A,lVe),e(A,Nf),e(Nf,ooe),e(ooe,iVe),e(Nf,dVe),e(Nf,Z$),e(Z$,cVe),e(Nf,fVe),e(A,mVe),e(A,jf),e(jf,roe),e(roe,gVe),e(jf,hVe),e(jf,ek),e(ek,pVe),e(jf,_Ve),e(A,uVe),e(A,Df),e(Df,toe),e(toe,bVe),e(Df,vVe),e(Df,ok),e(ok,FVe),e(Df,TVe),e(A,MVe),e(A,Gf),e(Gf,aoe),e(aoe,EVe),e(Gf,CVe),e(Gf,rk),e(rk,wVe),e(Gf,AVe),e(A,yVe),e(A,Of),e(Of,noe),e(noe,LVe),e(Of,xVe),e(Of,tk),e(tk,$Ve),e(Of,kVe),e(A,SVe),e(A,Vf),e(Vf,soe),e(soe,RVe),e(Vf,BVe),e(Vf,ak),e(ak,PVe),e(Vf,IVe),e(A,qVe),e(A,Xf),e(Xf,loe),e(loe,NVe),e(Xf,jVe),e(Xf,nk),e(nk,DVe),e(Xf,GVe),e(A,OVe),e(A,zf),e(zf,ioe),e(ioe,VVe),e(zf,XVe),e(zf,sk),e(sk,zVe),e(zf,WVe),e(A,QVe),e(A,Wf),e(Wf,doe),e(doe,HVe),e(Wf,UVe),e(Wf,lk),e(lk,JVe),e(Wf,YVe),e(A,KVe),e(A,Qf),e(Qf,coe),e(coe,ZVe),e(Qf,eXe),e(Qf,ik),e(ik,oXe),e(Qf,rXe),e(A,tXe),e(A,Hf),e(Hf,foe),e(foe,aXe),e(Hf,nXe),e(Hf,dk),e(dk,sXe),e(Hf,lXe),e(A,iXe),e(A,Uf),e(Uf,moe),e(moe,dXe),e(Uf,cXe),e(Uf,ck),e(ck,fXe),e(Uf,mXe),e(A,gXe),e(A,Jf),e(Jf,goe),e(goe,hXe),e(Jf,pXe),e(Jf,fk),e(fk,_Xe),e(Jf,uXe),e(A,bXe),e(A,Yf),e(Yf,hoe),e(hoe,vXe),e(Yf,FXe),e(Yf,mk),e(mk,TXe),e(Yf,MXe),e(A,EXe),e(A,Kf),e(Kf,poe),e(poe,CXe),e(Kf,wXe),e(Kf,gk),e(gk,AXe),e(Kf,yXe),e(A,LXe),e(A,Zf),e(Zf,_oe),e(_oe,xXe),e(Zf,$Xe),e(Zf,hk),e(hk,kXe),e(Zf,SXe),e(A,RXe),e(A,em),e(em,uoe),e(uoe,BXe),e(em,PXe),e(em,pk),e(pk,IXe),e(em,qXe),e(A,NXe),e(A,om),e(om,boe),e(boe,jXe),e(om,DXe),e(om,_k),e(_k,GXe),e(om,OXe),e(A,VXe),e(A,rm),e(rm,voe),e(voe,XXe),e(rm,zXe),e(rm,uk),e(uk,WXe),e(rm,QXe),e(A,HXe),e(A,tm),e(tm,Foe),e(Foe,UXe),e(tm,JXe),e(tm,bk),e(bk,YXe),e(tm,KXe),e(A,ZXe),e(A,am),e(am,Toe),e(Toe,eze),e(am,oze),e(am,vk),e(vk,rze),e(am,tze),e(A,aze),e(A,nm),e(nm,Moe),e(Moe,nze),e(nm,sze),e(nm,Fk),e(Fk,lze),e(nm,ize),e(A,dze),e(A,sm),e(sm,Eoe),e(Eoe,cze),e(sm,fze),e(sm,Tk),e(Tk,mze),e(sm,gze),e(A,hze),e(A,lm),e(lm,Coe),e(Coe,pze),e(lm,_ze),e(lm,Mk),e(Mk,uze),e(lm,bze),e(A,vze),e(A,im),e(im,woe),e(woe,Fze),e(im,Tze),e(im,Ek),e(Ek,Mze),e(im,Eze),e(A,Cze),e(A,dm),e(dm,Aoe),e(Aoe,wze),e(dm,Aze),e(dm,Ck),e(Ck,yze),e(dm,Lze),e(A,xze),e(A,cm),e(cm,yoe),e(yoe,$ze),e(cm,kze),e(cm,wk),e(wk,Sze),e(cm,Rze),e(A,Bze),e(A,fm),e(fm,Loe),e(Loe,Pze),e(fm,Ize),e(fm,Ak),e(Ak,qze),e(fm,Nze),e(A,jze),e(A,mm),e(mm,xoe),e(xoe,Dze),e(mm,Gze),e(mm,yk),e(yk,Oze),e(mm,Vze),e(A,Xze),e(A,gm),e(gm,$oe),e($oe,zze),e(gm,Wze),e(gm,Lk),e(Lk,Qze),e(gm,Hze),e(A,Uze),e(A,hm),e(hm,koe),e(koe,Jze),e(hm,Yze),e(hm,xk),e(xk,Kze),e(hm,Zze),e(A,eWe),e(A,pm),e(pm,Soe),e(Soe,oWe),e(pm,rWe),e(pm,$k),e($k,tWe),e(pm,aWe),e(A,nWe),e(A,_m),e(_m,Roe),e(Roe,sWe),e(_m,lWe),e(_m,kk),e(kk,iWe),e(_m,dWe),e(A,cWe),e(A,um),e(um,Boe),e(Boe,fWe),e(um,mWe),e(um,Sk),e(Sk,gWe),e(um,hWe),e(A,pWe),e(A,bm),e(bm,Poe),e(Poe,_We),e(bm,uWe),e(bm,Rk),e(Rk,bWe),e(bm,vWe),e(A,FWe),e(A,vm),e(vm,Ioe),e(Ioe,TWe),e(vm,MWe),e(vm,Bk),e(Bk,EWe),e(vm,CWe),e(A,wWe),e(A,Fm),e(Fm,qoe),e(qoe,AWe),e(Fm,yWe),e(Fm,Pk),e(Pk,LWe),e(Fm,xWe),e(A,$We),e(A,Tm),e(Tm,Noe),e(Noe,kWe),e(Tm,SWe),e(Tm,Ik),e(Ik,RWe),e(Tm,BWe),e(A,PWe),e(A,Mm),e(Mm,joe),e(joe,IWe),e(Mm,qWe),e(Mm,qk),e(qk,NWe),e(Mm,jWe),e(A,DWe),e(A,Em),e(Em,Doe),e(Doe,GWe),e(Em,OWe),e(Em,Nk),e(Nk,VWe),e(Em,XWe),e(A,zWe),e(A,Cm),e(Cm,Goe),e(Goe,WWe),e(Cm,QWe),e(Cm,jk),e(jk,HWe),e(Cm,UWe),e(A,JWe),e(A,wm),e(wm,Ooe),e(Ooe,YWe),e(wm,KWe),e(wm,Dk),e(Dk,ZWe),e(wm,eQe),e(A,oQe),e(A,Am),e(Am,Voe),e(Voe,rQe),e(Am,tQe),e(Am,Gk),e(Gk,aQe),e(Am,nQe),e(A,sQe),e(A,ym),e(ym,Xoe),e(Xoe,lQe),e(ym,iQe),e(ym,Ok),e(Ok,dQe),e(ym,cQe),e(A,fQe),e(A,Lm),e(Lm,zoe),e(zoe,mQe),e(Lm,gQe),e(Lm,Vk),e(Vk,hQe),e(Lm,pQe),e(A,_Qe),e(A,xm),e(xm,Woe),e(Woe,uQe),e(xm,bQe),e(xm,Xk),e(Xk,vQe),e(xm,FQe),e(A,TQe),e(A,$m),e($m,Qoe),e(Qoe,MQe),e($m,EQe),e($m,zk),e(zk,CQe),e($m,wQe),e(A,AQe),e(A,km),e(km,Hoe),e(Hoe,yQe),e(km,LQe),e(km,Wk),e(Wk,xQe),e(km,$Qe),e(A,kQe),e(A,Sm),e(Sm,Uoe),e(Uoe,SQe),e(Sm,RQe),e(Sm,Qk),e(Qk,BQe),e(Sm,PQe),e(A,IQe),e(A,Rm),e(Rm,Joe),e(Joe,qQe),e(Rm,NQe),e(Rm,Hk),e(Hk,jQe),e(Rm,DQe),e(A,GQe),e(A,Bm),e(Bm,Yoe),e(Yoe,OQe),e(Bm,VQe),e(Bm,Uk),e(Uk,XQe),e(Bm,zQe),e(A,WQe),e(A,Pm),e(Pm,Koe),e(Koe,QQe),e(Pm,HQe),e(Pm,Jk),e(Jk,UQe),e(Pm,JQe),e(A,YQe),e(A,Im),e(Im,Zoe),e(Zoe,KQe),e(Im,ZQe),e(Im,Yk),e(Yk,eHe),e(Im,oHe),e(A,rHe),e(A,qm),e(qm,ere),e(ere,tHe),e(qm,aHe),e(qm,Kk),e(Kk,nHe),e(qm,sHe),e(A,lHe),e(A,Nm),e(Nm,ore),e(ore,iHe),e(Nm,dHe),e(Nm,Zk),e(Zk,cHe),e(Nm,fHe),e(A,mHe),e(A,jm),e(jm,rre),e(rre,gHe),e(jm,hHe),e(jm,eS),e(eS,pHe),e(jm,_He),e(A,uHe),e(A,Dm),e(Dm,tre),e(tre,bHe),e(Dm,vHe),e(Dm,oS),e(oS,FHe),e(Dm,THe),e(A,MHe),e(A,Gm),e(Gm,are),e(are,EHe),e(Gm,CHe),e(Gm,rS),e(rS,wHe),e(Gm,AHe),e(A,yHe),e(A,Om),e(Om,nre),e(nre,LHe),e(Om,xHe),e(Om,tS),e(tS,$He),e(Om,kHe),e(A,SHe),e(A,Vm),e(Vm,sre),e(sre,RHe),e(Vm,BHe),e(Vm,aS),e(aS,PHe),e(Vm,IHe),e(A,qHe),e(A,Xm),e(Xm,lre),e(lre,NHe),e(Xm,jHe),e(Xm,nS),e(nS,DHe),e(Xm,GHe),e(A,OHe),e(A,zm),e(zm,ire),e(ire,VHe),e(zm,XHe),e(zm,sS),e(sS,zHe),e(zm,WHe),e(A,QHe),e(A,Wm),e(Wm,dre),e(dre,HHe),e(Wm,UHe),e(Wm,lS),e(lS,JHe),e(Wm,YHe),e(A,KHe),e(A,Qm),e(Qm,cre),e(cre,ZHe),e(Qm,eUe),e(Qm,iS),e(iS,oUe),e(Qm,rUe),e(A,tUe),e(A,Hm),e(Hm,fre),e(fre,aUe),e(Hm,nUe),e(Hm,dS),e(dS,sUe),e(Hm,lUe),e(A,iUe),e(A,Um),e(Um,mre),e(mre,dUe),e(Um,cUe),e(Um,cS),e(cS,fUe),e(Um,mUe),e(A,gUe),e(A,Jm),e(Jm,gre),e(gre,hUe),e(Jm,pUe),e(Jm,fS),e(fS,_Ue),e(Jm,uUe),e(A,bUe),e(A,Ym),e(Ym,hre),e(hre,vUe),e(Ym,FUe),e(Ym,mS),e(mS,TUe),e(Ym,MUe),e(A,EUe),e(A,Km),e(Km,pre),e(pre,CUe),e(Km,wUe),e(Km,gS),e(gS,AUe),e(Km,yUe),e(A,LUe),e(A,Zm),e(Zm,_re),e(_re,xUe),e(Zm,$Ue),e(Zm,hS),e(hS,kUe),e(Zm,SUe),e(A,RUe),e(A,eg),e(eg,ure),e(ure,BUe),e(eg,PUe),e(eg,pS),e(pS,IUe),e(eg,qUe),e(A,NUe),e(A,og),e(og,bre),e(bre,jUe),e(og,DUe),e(og,_S),e(_S,GUe),e(og,OUe),e(A,VUe),e(A,rg),e(rg,vre),e(vre,XUe),e(rg,zUe),e(rg,uS),e(uS,WUe),e(rg,QUe),e(A,HUe),e(A,tg),e(tg,Fre),e(Fre,UUe),e(tg,JUe),e(tg,bS),e(bS,YUe),e(tg,KUe),e(A,ZUe),e(A,ag),e(ag,Tre),e(Tre,eJe),e(ag,oJe),e(ag,vS),e(vS,rJe),e(ag,tJe),e(A,aJe),e(A,ng),e(ng,Mre),e(Mre,nJe),e(ng,sJe),e(ng,FS),e(FS,lJe),e(ng,iJe),e(A,dJe),e(A,sg),e(sg,Ere),e(Ere,cJe),e(sg,fJe),e(sg,TS),e(TS,mJe),e(sg,gJe),e(A,hJe),e(A,lg),e(lg,Cre),e(Cre,pJe),e(lg,_Je),e(lg,MS),e(MS,uJe),e(lg,bJe),e(A,vJe),e(A,ig),e(ig,wre),e(wre,FJe),e(ig,TJe),e(ig,ES),e(ES,MJe),e(ig,EJe),e(A,CJe),e(A,dg),e(dg,Are),e(Are,wJe),e(dg,AJe),e(dg,CS),e(CS,yJe),e(dg,LJe),e(A,xJe),e(A,cg),e(cg,yre),e(yre,$Je),e(cg,kJe),e(cg,wS),e(wS,SJe),e(cg,RJe),e(A,BJe),e(A,fg),e(fg,Lre),e(Lre,PJe),e(fg,IJe),e(fg,AS),e(AS,qJe),e(fg,NJe),e(A,jJe),e(A,mg),e(mg,xre),e(xre,DJe),e(mg,GJe),e(mg,yS),e(yS,OJe),e(mg,VJe),e(A,XJe),e(A,gg),e(gg,$re),e($re,zJe),e(gg,WJe),e(gg,LS),e(LS,QJe),e(gg,HJe),e(A,UJe),e(A,hg),e(hg,kre),e(kre,JJe),e(hg,YJe),e(hg,xS),e(xS,KJe),e(hg,ZJe),e(A,eYe),e(A,pg),e(pg,Sre),e(Sre,oYe),e(pg,rYe),e(pg,$S),e($S,tYe),e(pg,aYe),e(A,nYe),e(A,_g),e(_g,Rre),e(Rre,sYe),e(_g,lYe),e(_g,kS),e(kS,iYe),e(_g,dYe),e(A,cYe),e(A,ug),e(ug,Bre),e(Bre,fYe),e(ug,mYe),e(ug,SS),e(SS,gYe),e(ug,hYe),e(A,pYe),e(A,bg),e(bg,Pre),e(Pre,_Ye),e(bg,uYe),e(bg,RS),e(RS,bYe),e(bg,vYe),e(Er,FYe),M(vg,Er,null),e(Co,TYe),e(Co,Fg),M(v6,Fg,null),e(Fg,MYe),e(Fg,Ire),e(Ire,EYe),b(f,KIe,u),b(f,Fi,u),e(Fi,Tg),e(Tg,qre),M(F6,qre,null),e(Fi,CYe),e(Fi,Nre),e(Nre,wYe),b(f,ZIe,u),b(f,wo,u),M(T6,wo,null),e(wo,AYe),e(wo,M6),e(M6,yYe),e(M6,BS),e(BS,LYe),e(M6,xYe),e(wo,$Ye),e(wo,E6),e(E6,kYe),e(E6,jre),e(jre,SYe),e(E6,RYe),e(wo,BYe),e(wo,Cr),M(C6,Cr,null),e(Cr,PYe),e(Cr,Dre),e(Dre,IYe),e(Cr,qYe),e(Cr,Aa),e(Aa,NYe),e(Aa,Gre),e(Gre,jYe),e(Aa,DYe),e(Aa,Ore),e(Ore,GYe),e(Aa,OYe),e(Aa,Vre),e(Vre,VYe),e(Aa,XYe),e(Cr,zYe),e(Cr,k),e(k,Sn),e(Sn,Xre),e(Xre,WYe),e(Sn,QYe),e(Sn,PS),e(PS,HYe),e(Sn,UYe),e(Sn,IS),e(IS,JYe),e(Sn,YYe),e(k,KYe),e(k,Rn),e(Rn,zre),e(zre,ZYe),e(Rn,eKe),e(Rn,qS),e(qS,oKe),e(Rn,rKe),e(Rn,NS),e(NS,tKe),e(Rn,aKe),e(k,nKe),e(k,Bn),e(Bn,Wre),e(Wre,sKe),e(Bn,lKe),e(Bn,jS),e(jS,iKe),e(Bn,dKe),e(Bn,DS),e(DS,cKe),e(Bn,fKe),e(k,mKe),e(k,Mg),e(Mg,Qre),e(Qre,gKe),e(Mg,hKe),e(Mg,GS),e(GS,pKe),e(Mg,_Ke),e(k,uKe),e(k,Pn),e(Pn,Hre),e(Hre,bKe),e(Pn,vKe),e(Pn,OS),e(OS,FKe),e(Pn,TKe),e(Pn,VS),e(VS,MKe),e(Pn,EKe),e(k,CKe),e(k,Eg),e(Eg,Ure),e(Ure,wKe),e(Eg,AKe),e(Eg,XS),e(XS,yKe),e(Eg,LKe),e(k,xKe),e(k,Cg),e(Cg,Jre),e(Jre,$Ke),e(Cg,kKe),e(Cg,zS),e(zS,SKe),e(Cg,RKe),e(k,BKe),e(k,wg),e(wg,Yre),e(Yre,PKe),e(wg,IKe),e(wg,WS),e(WS,qKe),e(wg,NKe),e(k,jKe),e(k,In),e(In,Kre),e(Kre,DKe),e(In,GKe),e(In,QS),e(QS,OKe),e(In,VKe),e(In,HS),e(HS,XKe),e(In,zKe),e(k,WKe),e(k,qn),e(qn,Zre),e(Zre,QKe),e(qn,HKe),e(qn,US),e(US,UKe),e(qn,JKe),e(qn,JS),e(JS,YKe),e(qn,KKe),e(k,ZKe),e(k,Nn),e(Nn,ete),e(ete,eZe),e(Nn,oZe),e(Nn,YS),e(YS,rZe),e(Nn,tZe),e(Nn,KS),e(KS,aZe),e(Nn,nZe),e(k,sZe),e(k,Ag),e(Ag,ote),e(ote,lZe),e(Ag,iZe),e(Ag,ZS),e(ZS,dZe),e(Ag,cZe),e(k,fZe),e(k,yg),e(yg,rte),e(rte,mZe),e(yg,gZe),e(yg,eR),e(eR,hZe),e(yg,pZe),e(k,_Ze),e(k,Lg),e(Lg,tte),e(tte,uZe),e(Lg,bZe),e(Lg,oR),e(oR,vZe),e(Lg,FZe),e(k,TZe),e(k,jn),e(jn,ate),e(ate,MZe),e(jn,EZe),e(jn,rR),e(rR,CZe),e(jn,wZe),e(jn,tR),e(tR,AZe),e(jn,yZe),e(k,LZe),e(k,xg),e(xg,nte),e(nte,xZe),e(xg,$Ze),e(xg,aR),e(aR,kZe),e(xg,SZe),e(k,RZe),e(k,Dn),e(Dn,ste),e(ste,BZe),e(Dn,PZe),e(Dn,nR),e(nR,IZe),e(Dn,qZe),e(Dn,sR),e(sR,NZe),e(Dn,jZe),e(k,DZe),e(k,Gn),e(Gn,lte),e(lte,GZe),e(Gn,OZe),e(Gn,lR),e(lR,VZe),e(Gn,XZe),e(Gn,iR),e(iR,zZe),e(Gn,WZe),e(k,QZe),e(k,On),e(On,ite),e(ite,HZe),e(On,UZe),e(On,dR),e(dR,JZe),e(On,YZe),e(On,cR),e(cR,KZe),e(On,ZZe),e(k,eeo),e(k,$g),e($g,dte),e(dte,oeo),e($g,reo),e($g,fR),e(fR,teo),e($g,aeo),e(k,neo),e(k,Vn),e(Vn,cte),e(cte,seo),e(Vn,leo),e(Vn,mR),e(mR,ieo),e(Vn,deo),e(Vn,gR),e(gR,ceo),e(Vn,feo),e(k,meo),e(k,Xn),e(Xn,fte),e(fte,geo),e(Xn,heo),e(Xn,hR),e(hR,peo),e(Xn,_eo),e(Xn,pR),e(pR,ueo),e(Xn,beo),e(k,veo),e(k,zn),e(zn,mte),e(mte,Feo),e(zn,Teo),e(zn,_R),e(_R,Meo),e(zn,Eeo),e(zn,uR),e(uR,Ceo),e(zn,weo),e(k,Aeo),e(k,Wn),e(Wn,gte),e(gte,yeo),e(Wn,Leo),e(Wn,bR),e(bR,xeo),e(Wn,$eo),e(Wn,vR),e(vR,keo),e(Wn,Seo),e(k,Reo),e(k,Qn),e(Qn,hte),e(hte,Beo),e(Qn,Peo),e(Qn,FR),e(FR,Ieo),e(Qn,qeo),e(Qn,TR),e(TR,Neo),e(Qn,jeo),e(k,Deo),e(k,Hn),e(Hn,pte),e(pte,Geo),e(Hn,Oeo),e(Hn,MR),e(MR,Veo),e(Hn,Xeo),e(Hn,ER),e(ER,zeo),e(Hn,Weo),e(k,Qeo),e(k,kg),e(kg,_te),e(_te,Heo),e(kg,Ueo),e(kg,CR),e(CR,Jeo),e(kg,Yeo),e(k,Keo),e(k,Un),e(Un,ute),e(ute,Zeo),e(Un,eoo),e(Un,wR),e(wR,ooo),e(Un,roo),e(Un,AR),e(AR,too),e(Un,aoo),e(k,noo),e(k,Sg),e(Sg,bte),e(bte,soo),e(Sg,loo),e(Sg,yR),e(yR,ioo),e(Sg,doo),e(k,coo),e(k,Jn),e(Jn,vte),e(vte,foo),e(Jn,moo),e(Jn,LR),e(LR,goo),e(Jn,hoo),e(Jn,xR),e(xR,poo),e(Jn,_oo),e(k,uoo),e(k,Yn),e(Yn,Fte),e(Fte,boo),e(Yn,voo),e(Yn,$R),e($R,Foo),e(Yn,Too),e(Yn,kR),e(kR,Moo),e(Yn,Eoo),e(k,Coo),e(k,Kn),e(Kn,Tte),e(Tte,woo),e(Kn,Aoo),e(Kn,SR),e(SR,yoo),e(Kn,Loo),e(Kn,RR),e(RR,xoo),e(Kn,$oo),e(k,koo),e(k,Zn),e(Zn,Mte),e(Mte,Soo),e(Zn,Roo),e(Zn,BR),e(BR,Boo),e(Zn,Poo),e(Zn,PR),e(PR,Ioo),e(Zn,qoo),e(k,Noo),e(k,es),e(es,Ete),e(Ete,joo),e(es,Doo),e(es,IR),e(IR,Goo),e(es,Ooo),e(es,qR),e(qR,Voo),e(es,Xoo),e(k,zoo),e(k,Rg),e(Rg,Cte),e(Cte,Woo),e(Rg,Qoo),e(Rg,NR),e(NR,Hoo),e(Rg,Uoo),e(k,Joo),e(k,os),e(os,wte),e(wte,Yoo),e(os,Koo),e(os,jR),e(jR,Zoo),e(os,ero),e(os,DR),e(DR,oro),e(os,rro),e(k,tro),e(k,rs),e(rs,Ate),e(Ate,aro),e(rs,nro),e(rs,GR),e(GR,sro),e(rs,lro),e(rs,OR),e(OR,iro),e(rs,dro),e(k,cro),e(k,ts),e(ts,yte),e(yte,fro),e(ts,mro),e(ts,VR),e(VR,gro),e(ts,hro),e(ts,XR),e(XR,pro),e(ts,_ro),e(k,uro),e(k,as),e(as,Lte),e(Lte,bro),e(as,vro),e(as,zR),e(zR,Fro),e(as,Tro),e(as,WR),e(WR,Mro),e(as,Ero),e(k,Cro),e(k,ns),e(ns,xte),e(xte,wro),e(ns,Aro),e(ns,QR),e(QR,yro),e(ns,Lro),e(ns,HR),e(HR,xro),e(ns,$ro),e(k,kro),e(k,ss),e(ss,$te),e($te,Sro),e(ss,Rro),e(ss,UR),e(UR,Bro),e(ss,Pro),e(ss,JR),e(JR,Iro),e(ss,qro),e(k,Nro),e(k,Bg),e(Bg,kte),e(kte,jro),e(Bg,Dro),e(Bg,YR),e(YR,Gro),e(Bg,Oro),e(k,Vro),e(k,ls),e(ls,Ste),e(Ste,Xro),e(ls,zro),e(ls,KR),e(KR,Wro),e(ls,Qro),e(ls,ZR),e(ZR,Hro),e(ls,Uro),e(k,Jro),e(k,Pg),e(Pg,Rte),e(Rte,Yro),e(Pg,Kro),e(Pg,eB),e(eB,Zro),e(Pg,eto),e(k,oto),e(k,Ig),e(Ig,Bte),e(Bte,rto),e(Ig,tto),e(Ig,oB),e(oB,ato),e(Ig,nto),e(k,sto),e(k,is),e(is,Pte),e(Pte,lto),e(is,ito),e(is,rB),e(rB,dto),e(is,cto),e(is,tB),e(tB,fto),e(is,mto),e(k,gto),e(k,ds),e(ds,Ite),e(Ite,hto),e(ds,pto),e(ds,aB),e(aB,_to),e(ds,uto),e(ds,nB),e(nB,bto),e(ds,vto),e(k,Fto),e(k,cs),e(cs,qte),e(qte,Tto),e(cs,Mto),e(cs,sB),e(sB,Eto),e(cs,Cto),e(cs,lB),e(lB,wto),e(cs,Ato),e(k,yto),e(k,qg),e(qg,Nte),e(Nte,Lto),e(qg,xto),e(qg,iB),e(iB,$to),e(qg,kto),e(k,Sto),e(k,fs),e(fs,jte),e(jte,Rto),e(fs,Bto),e(fs,dB),e(dB,Pto),e(fs,Ito),e(fs,cB),e(cB,qto),e(fs,Nto),e(k,jto),e(k,ms),e(ms,Dte),e(Dte,Dto),e(ms,Gto),e(ms,fB),e(fB,Oto),e(ms,Vto),e(ms,mB),e(mB,Xto),e(ms,zto),e(k,Wto),e(k,gs),e(gs,Gte),e(Gte,Qto),e(gs,Hto),e(gs,gB),e(gB,Uto),e(gs,Jto),e(gs,hB),e(hB,Yto),e(gs,Kto),e(k,Zto),e(k,hs),e(hs,Ote),e(Ote,eao),e(hs,oao),e(hs,pB),e(pB,rao),e(hs,tao),e(hs,_B),e(_B,aao),e(hs,nao),e(k,sao),e(k,ps),e(ps,Vte),e(Vte,lao),e(ps,iao),e(ps,uB),e(uB,dao),e(ps,cao),e(ps,bB),e(bB,fao),e(ps,mao),e(k,gao),e(k,Ng),e(Ng,Xte),e(Xte,hao),e(Ng,pao),e(Ng,vB),e(vB,_ao),e(Ng,uao),e(k,bao),e(k,_s),e(_s,zte),e(zte,vao),e(_s,Fao),e(_s,FB),e(FB,Tao),e(_s,Mao),e(_s,TB),e(TB,Eao),e(_s,Cao),e(k,wao),e(k,jg),e(jg,Wte),e(Wte,Aao),e(jg,yao),e(jg,MB),e(MB,Lao),e(jg,xao),e(k,$ao),e(k,Dg),e(Dg,Qte),e(Qte,kao),e(Dg,Sao),e(Dg,EB),e(EB,Rao),e(Dg,Bao),e(k,Pao),e(k,Gg),e(Gg,Hte),e(Hte,Iao),e(Gg,qao),e(Gg,CB),e(CB,Nao),e(Gg,jao),e(k,Dao),e(k,Og),e(Og,Ute),e(Ute,Gao),e(Og,Oao),e(Og,wB),e(wB,Vao),e(Og,Xao),e(k,zao),e(k,us),e(us,Jte),e(Jte,Wao),e(us,Qao),e(us,AB),e(AB,Hao),e(us,Uao),e(us,yB),e(yB,Jao),e(us,Yao),e(k,Kao),e(k,Vg),e(Vg,Yte),e(Yte,Zao),e(Vg,eno),e(Vg,LB),e(LB,ono),e(Vg,rno),e(k,tno),e(k,bs),e(bs,Kte),e(Kte,ano),e(bs,nno),e(bs,xB),e(xB,sno),e(bs,lno),e(bs,$B),e($B,ino),e(bs,dno),e(k,cno),e(k,vs),e(vs,Zte),e(Zte,fno),e(vs,mno),e(vs,kB),e(kB,gno),e(vs,hno),e(vs,SB),e(SB,pno),e(vs,_no),e(k,uno),e(k,Fs),e(Fs,eae),e(eae,bno),e(Fs,vno),e(Fs,RB),e(RB,Fno),e(Fs,Tno),e(Fs,BB),e(BB,Mno),e(Fs,Eno),e(k,Cno),e(k,Ts),e(Ts,oae),e(oae,wno),e(Ts,Ano),e(Ts,PB),e(PB,yno),e(Ts,Lno),e(Ts,IB),e(IB,xno),e(Ts,$no),e(k,kno),e(k,Ms),e(Ms,rae),e(rae,Sno),e(Ms,Rno),e(Ms,qB),e(qB,Bno),e(Ms,Pno),e(Ms,NB),e(NB,Ino),e(Ms,qno),e(k,Nno),e(k,Es),e(Es,tae),e(tae,jno),e(Es,Dno),e(Es,jB),e(jB,Gno),e(Es,Ono),e(Es,DB),e(DB,Vno),e(Es,Xno),e(k,zno),e(k,Xg),e(Xg,aae),e(aae,Wno),e(Xg,Qno),e(Xg,GB),e(GB,Hno),e(Xg,Uno),e(k,Jno),e(k,zg),e(zg,nae),e(nae,Yno),e(zg,Kno),e(zg,OB),e(OB,Zno),e(zg,eso),e(k,oso),e(k,Cs),e(Cs,sae),e(sae,rso),e(Cs,tso),e(Cs,VB),e(VB,aso),e(Cs,nso),e(Cs,XB),e(XB,sso),e(Cs,lso),e(k,iso),e(k,ws),e(ws,lae),e(lae,dso),e(ws,cso),e(ws,zB),e(zB,fso),e(ws,mso),e(ws,WB),e(WB,gso),e(ws,hso),e(k,pso),e(k,As),e(As,iae),e(iae,_so),e(As,uso),e(As,QB),e(QB,bso),e(As,vso),e(As,HB),e(HB,Fso),e(As,Tso),e(k,Mso),e(k,Wg),e(Wg,dae),e(dae,Eso),e(Wg,Cso),e(Wg,UB),e(UB,wso),e(Wg,Aso),e(k,yso),e(k,Qg),e(Qg,cae),e(cae,Lso),e(Qg,xso),e(Qg,JB),e(JB,$so),e(Qg,kso),e(k,Sso),e(k,Hg),e(Hg,fae),e(fae,Rso),e(Hg,Bso),e(Hg,YB),e(YB,Pso),e(Hg,Iso),e(k,qso),e(k,ys),e(ys,mae),e(mae,Nso),e(ys,jso),e(ys,KB),e(KB,Dso),e(ys,Gso),e(ys,ZB),e(ZB,Oso),e(ys,Vso),e(k,Xso),e(k,Ug),e(Ug,gae),e(gae,zso),e(Ug,Wso),e(Ug,eP),e(eP,Qso),e(Ug,Hso),e(k,Uso),e(k,Jg),e(Jg,hae),e(hae,Jso),e(Jg,Yso),e(Jg,oP),e(oP,Kso),e(Jg,Zso),e(k,elo),e(k,Yg),e(Yg,pae),e(pae,olo),e(Yg,rlo),e(Yg,rP),e(rP,tlo),e(Yg,alo),e(k,nlo),e(k,Ls),e(Ls,_ae),e(_ae,slo),e(Ls,llo),e(Ls,tP),e(tP,ilo),e(Ls,dlo),e(Ls,aP),e(aP,clo),e(Ls,flo),e(k,mlo),e(k,Kg),e(Kg,uae),e(uae,glo),e(Kg,hlo),e(Kg,nP),e(nP,plo),e(Kg,_lo),e(k,ulo),e(k,Zg),e(Zg,bae),e(bae,blo),e(Zg,vlo),e(Zg,sP),e(sP,Flo),e(Zg,Tlo),e(k,Mlo),e(k,xs),e(xs,vae),e(vae,Elo),e(xs,Clo),e(xs,lP),e(lP,wlo),e(xs,Alo),e(xs,iP),e(iP,ylo),e(xs,Llo),e(k,xlo),e(k,$s),e($s,Fae),e(Fae,$lo),e($s,klo),e($s,dP),e(dP,Slo),e($s,Rlo),e($s,cP),e(cP,Blo),e($s,Plo),e(k,Ilo),e(k,ks),e(ks,Tae),e(Tae,qlo),e(ks,Nlo),e(ks,fP),e(fP,jlo),e(ks,Dlo),e(ks,mP),e(mP,Glo),e(ks,Olo),e(k,Vlo),e(k,Ss),e(Ss,Mae),e(Mae,Xlo),e(Ss,zlo),e(Ss,gP),e(gP,Wlo),e(Ss,Qlo),e(Ss,hP),e(hP,Hlo),e(Ss,Ulo),e(Cr,Jlo),M(eh,Cr,null),e(wo,Ylo),e(wo,oh),M(w6,oh,null),e(oh,Klo),e(oh,Eae),e(Eae,Zlo),b(f,eqe,u),b(f,Ti,u),e(Ti,rh),e(rh,Cae),M(A6,Cae,null),e(Ti,eio),e(Ti,wae),e(wae,oio),b(f,oqe,u),b(f,Ao,u),M(y6,Ao,null),e(Ao,rio),e(Ao,L6),e(L6,tio),e(L6,pP),e(pP,aio),e(L6,nio),e(Ao,sio),e(Ao,x6),e(x6,lio),e(x6,Aae),e(Aae,iio),e(x6,dio),e(Ao,cio),e(Ao,He),M($6,He,null),e(He,fio),e(He,yae),e(yae,mio),e(He,gio),e(He,ya),e(ya,hio),e(ya,Lae),e(Lae,pio),e(ya,_io),e(ya,xae),e(xae,uio),e(ya,bio),e(ya,$ae),e($ae,vio),e(ya,Fio),e(He,Tio),e(He,Z),e(Z,th),e(th,kae),e(kae,Mio),e(th,Eio),e(th,_P),e(_P,Cio),e(th,wio),e(Z,Aio),e(Z,ah),e(ah,Sae),e(Sae,yio),e(ah,Lio),e(ah,uP),e(uP,xio),e(ah,$io),e(Z,kio),e(Z,nh),e(nh,Rae),e(Rae,Sio),e(nh,Rio),e(nh,bP),e(bP,Bio),e(nh,Pio),e(Z,Iio),e(Z,sh),e(sh,Bae),e(Bae,qio),e(sh,Nio),e(sh,vP),e(vP,jio),e(sh,Dio),e(Z,Gio),e(Z,lh),e(lh,Pae),e(Pae,Oio),e(lh,Vio),e(lh,FP),e(FP,Xio),e(lh,zio),e(Z,Wio),e(Z,ih),e(ih,Iae),e(Iae,Qio),e(ih,Hio),e(ih,TP),e(TP,Uio),e(ih,Jio),e(Z,Yio),e(Z,dh),e(dh,qae),e(qae,Kio),e(dh,Zio),e(dh,MP),e(MP,edo),e(dh,odo),e(Z,rdo),e(Z,ch),e(ch,Nae),e(Nae,tdo),e(ch,ado),e(ch,EP),e(EP,ndo),e(ch,sdo),e(Z,ldo),e(Z,fh),e(fh,jae),e(jae,ido),e(fh,ddo),e(fh,CP),e(CP,cdo),e(fh,fdo),e(Z,mdo),e(Z,mh),e(mh,Dae),e(Dae,gdo),e(mh,hdo),e(mh,wP),e(wP,pdo),e(mh,_do),e(Z,udo),e(Z,gh),e(gh,Gae),e(Gae,bdo),e(gh,vdo),e(gh,AP),e(AP,Fdo),e(gh,Tdo),e(Z,Mdo),e(Z,hh),e(hh,Oae),e(Oae,Edo),e(hh,Cdo),e(hh,yP),e(yP,wdo),e(hh,Ado),e(Z,ydo),e(Z,ph),e(ph,Vae),e(Vae,Ldo),e(ph,xdo),e(ph,LP),e(LP,$do),e(ph,kdo),e(Z,Sdo),e(Z,_h),e(_h,Xae),e(Xae,Rdo),e(_h,Bdo),e(_h,xP),e(xP,Pdo),e(_h,Ido),e(Z,qdo),e(Z,uh),e(uh,zae),e(zae,Ndo),e(uh,jdo),e(uh,$P),e($P,Ddo),e(uh,Gdo),e(Z,Odo),e(Z,bh),e(bh,Wae),e(Wae,Vdo),e(bh,Xdo),e(bh,kP),e(kP,zdo),e(bh,Wdo),e(Z,Qdo),e(Z,vh),e(vh,Qae),e(Qae,Hdo),e(vh,Udo),e(vh,SP),e(SP,Jdo),e(vh,Ydo),e(Z,Kdo),e(Z,Fh),e(Fh,Hae),e(Hae,Zdo),e(Fh,eco),e(Fh,RP),e(RP,oco),e(Fh,rco),e(Z,tco),e(Z,Th),e(Th,Uae),e(Uae,aco),e(Th,nco),e(Th,BP),e(BP,sco),e(Th,lco),e(Z,ico),e(Z,Mh),e(Mh,Jae),e(Jae,dco),e(Mh,cco),e(Mh,PP),e(PP,fco),e(Mh,mco),e(Z,gco),e(Z,Eh),e(Eh,Yae),e(Yae,hco),e(Eh,pco),e(Eh,IP),e(IP,_co),e(Eh,uco),e(Z,bco),e(Z,Ch),e(Ch,Kae),e(Kae,vco),e(Ch,Fco),e(Ch,qP),e(qP,Tco),e(Ch,Mco),e(Z,Eco),e(Z,wh),e(wh,Zae),e(Zae,Cco),e(wh,wco),e(wh,NP),e(NP,Aco),e(wh,yco),e(Z,Lco),e(Z,Ah),e(Ah,ene),e(ene,xco),e(Ah,$co),e(Ah,jP),e(jP,kco),e(Ah,Sco),e(Z,Rco),e(Z,yh),e(yh,one),e(one,Bco),e(yh,Pco),e(yh,DP),e(DP,Ico),e(yh,qco),e(Z,Nco),e(Z,Lh),e(Lh,rne),e(rne,jco),e(Lh,Dco),e(Lh,GP),e(GP,Gco),e(Lh,Oco),e(He,Vco),M(xh,He,null),e(He,Xco),M($h,He,null),e(Ao,zco),e(Ao,kh),M(k6,kh,null),e(kh,Wco),e(kh,tne),e(tne,Qco),b(f,rqe,u),b(f,Mi,u),e(Mi,Sh),e(Sh,ane),M(S6,ane,null),e(Mi,Hco),e(Mi,nne),e(nne,Uco),b(f,tqe,u),b(f,yo,u),M(R6,yo,null),e(yo,Jco),e(yo,B6),e(B6,Yco),e(B6,OP),e(OP,Kco),e(B6,Zco),e(yo,efo),e(yo,P6),e(P6,ofo),e(P6,sne),e(sne,rfo),e(P6,tfo),e(yo,afo),e(yo,Ue),M(I6,Ue,null),e(Ue,nfo),e(Ue,lne),e(lne,sfo),e(Ue,lfo),e(Ue,Ei),e(Ei,ifo),e(Ei,ine),e(ine,dfo),e(Ei,cfo),e(Ei,dne),e(dne,ffo),e(Ei,mfo),e(Ue,gfo),e(Ue,pe),e(pe,Rh),e(Rh,cne),e(cne,hfo),e(Rh,pfo),e(Rh,VP),e(VP,_fo),e(Rh,ufo),e(pe,bfo),e(pe,Bh),e(Bh,fne),e(fne,vfo),e(Bh,Ffo),e(Bh,mne),e(mne,Tfo),e(Bh,Mfo),e(pe,Efo),e(pe,Ph),e(Ph,gne),e(gne,Cfo),e(Ph,wfo),e(Ph,XP),e(XP,Afo),e(Ph,yfo),e(pe,Lfo),e(pe,Ih),e(Ih,hne),e(hne,xfo),e(Ih,$fo),e(Ih,zP),e(zP,kfo),e(Ih,Sfo),e(pe,Rfo),e(pe,qh),e(qh,pne),e(pne,Bfo),e(qh,Pfo),e(qh,WP),e(WP,Ifo),e(qh,qfo),e(pe,Nfo),e(pe,Nh),e(Nh,_ne),e(_ne,jfo),e(Nh,Dfo),e(Nh,QP),e(QP,Gfo),e(Nh,Ofo),e(pe,Vfo),e(pe,jh),e(jh,une),e(une,Xfo),e(jh,zfo),e(jh,HP),e(HP,Wfo),e(jh,Qfo),e(pe,Hfo),e(pe,Dh),e(Dh,bne),e(bne,Ufo),e(Dh,Jfo),e(Dh,UP),e(UP,Yfo),e(Dh,Kfo),e(pe,Zfo),e(pe,Gh),e(Gh,vne),e(vne,emo),e(Gh,omo),e(Gh,JP),e(JP,rmo),e(Gh,tmo),e(pe,amo),e(pe,Oh),e(Oh,Fne),e(Fne,nmo),e(Oh,smo),e(Oh,YP),e(YP,lmo),e(Oh,imo),e(pe,dmo),e(pe,Vh),e(Vh,Tne),e(Tne,cmo),e(Vh,fmo),e(Vh,KP),e(KP,mmo),e(Vh,gmo),e(pe,hmo),e(pe,Xh),e(Xh,Mne),e(Mne,pmo),e(Xh,_mo),e(Xh,ZP),e(ZP,umo),e(Xh,bmo),e(pe,vmo),e(pe,zh),e(zh,Ene),e(Ene,Fmo),e(zh,Tmo),e(zh,eI),e(eI,Mmo),e(zh,Emo),e(pe,Cmo),e(pe,Wh),e(Wh,Cne),e(Cne,wmo),e(Wh,Amo),e(Wh,oI),e(oI,ymo),e(Wh,Lmo),e(pe,xmo),e(pe,Qh),e(Qh,wne),e(wne,$mo),e(Qh,kmo),e(Qh,rI),e(rI,Smo),e(Qh,Rmo),e(pe,Bmo),e(pe,Hh),e(Hh,Ane),e(Ane,Pmo),e(Hh,Imo),e(Hh,tI),e(tI,qmo),e(Hh,Nmo),e(Ue,jmo),M(Uh,Ue,null),e(Ue,Dmo),M(Jh,Ue,null),e(yo,Gmo),e(yo,Yh),M(q6,Yh,null),e(Yh,Omo),e(Yh,yne),e(yne,Vmo),b(f,aqe,u),b(f,Ci,u),e(Ci,Kh),e(Kh,Lne),M(N6,Lne,null),e(Ci,Xmo),e(Ci,xne),e(xne,zmo),b(f,nqe,u),b(f,Lo,u),M(j6,Lo,null),e(Lo,Wmo),e(Lo,wi),e(wi,Qmo),e(wi,aI),e(aI,Hmo),e(wi,Umo),e(wi,nI),e(nI,Jmo),e(wi,Ymo),e(Lo,Kmo),e(Lo,D6),e(D6,Zmo),e(D6,$ne),e($ne,ego),e(D6,ogo),e(Lo,rgo),e(Lo,tt),M(G6,tt,null),e(tt,tgo),e(tt,kne),e(kne,ago),e(tt,ngo),e(tt,Ai),e(Ai,sgo),e(Ai,Sne),e(Sne,lgo),e(Ai,igo),e(Ai,sI),e(sI,dgo),e(Ai,cgo),e(tt,fgo),M(Zh,tt,null),e(Lo,mgo),e(Lo,Je),M(O6,Je,null),e(Je,ggo),e(Je,Rne),e(Rne,hgo),e(Je,pgo),e(Je,La),e(La,_go),e(La,Bne),e(Bne,ugo),e(La,bgo),e(La,Pne),e(Pne,vgo),e(La,Fgo),e(La,Ine),e(Ine,Tgo),e(La,Mgo),e(Je,Ego),e(Je,x),e(x,ep),e(ep,qne),e(qne,Cgo),e(ep,wgo),e(ep,lI),e(lI,Ago),e(ep,ygo),e(x,Lgo),e(x,op),e(op,Nne),e(Nne,xgo),e(op,$go),e(op,iI),e(iI,kgo),e(op,Sgo),e(x,Rgo),e(x,rp),e(rp,jne),e(jne,Bgo),e(rp,Pgo),e(rp,dI),e(dI,Igo),e(rp,qgo),e(x,Ngo),e(x,tp),e(tp,Dne),e(Dne,jgo),e(tp,Dgo),e(tp,cI),e(cI,Ggo),e(tp,Ogo),e(x,Vgo),e(x,ap),e(ap,Gne),e(Gne,Xgo),e(ap,zgo),e(ap,fI),e(fI,Wgo),e(ap,Qgo),e(x,Hgo),e(x,np),e(np,One),e(One,Ugo),e(np,Jgo),e(np,mI),e(mI,Ygo),e(np,Kgo),e(x,Zgo),e(x,sp),e(sp,Vne),e(Vne,eho),e(sp,oho),e(sp,gI),e(gI,rho),e(sp,tho),e(x,aho),e(x,lp),e(lp,Xne),e(Xne,nho),e(lp,sho),e(lp,hI),e(hI,lho),e(lp,iho),e(x,dho),e(x,ip),e(ip,zne),e(zne,cho),e(ip,fho),e(ip,pI),e(pI,mho),e(ip,gho),e(x,hho),e(x,dp),e(dp,Wne),e(Wne,pho),e(dp,_ho),e(dp,_I),e(_I,uho),e(dp,bho),e(x,vho),e(x,cp),e(cp,Qne),e(Qne,Fho),e(cp,Tho),e(cp,uI),e(uI,Mho),e(cp,Eho),e(x,Cho),e(x,fp),e(fp,Hne),e(Hne,who),e(fp,Aho),e(fp,bI),e(bI,yho),e(fp,Lho),e(x,xho),e(x,mp),e(mp,Une),e(Une,$ho),e(mp,kho),e(mp,vI),e(vI,Sho),e(mp,Rho),e(x,Bho),e(x,gp),e(gp,Jne),e(Jne,Pho),e(gp,Iho),e(gp,FI),e(FI,qho),e(gp,Nho),e(x,jho),e(x,hp),e(hp,Yne),e(Yne,Dho),e(hp,Gho),e(hp,TI),e(TI,Oho),e(hp,Vho),e(x,Xho),e(x,pp),e(pp,Kne),e(Kne,zho),e(pp,Who),e(pp,MI),e(MI,Qho),e(pp,Hho),e(x,Uho),e(x,_p),e(_p,Zne),e(Zne,Jho),e(_p,Yho),e(_p,EI),e(EI,Kho),e(_p,Zho),e(x,epo),e(x,up),e(up,ese),e(ese,opo),e(up,rpo),e(up,CI),e(CI,tpo),e(up,apo),e(x,npo),e(x,bp),e(bp,ose),e(ose,spo),e(bp,lpo),e(bp,wI),e(wI,ipo),e(bp,dpo),e(x,cpo),e(x,vp),e(vp,rse),e(rse,fpo),e(vp,mpo),e(vp,AI),e(AI,gpo),e(vp,hpo),e(x,ppo),e(x,Fp),e(Fp,tse),e(tse,_po),e(Fp,upo),e(Fp,yI),e(yI,bpo),e(Fp,vpo),e(x,Fpo),e(x,Tp),e(Tp,ase),e(ase,Tpo),e(Tp,Mpo),e(Tp,LI),e(LI,Epo),e(Tp,Cpo),e(x,wpo),e(x,Mp),e(Mp,nse),e(nse,Apo),e(Mp,ypo),e(Mp,xI),e(xI,Lpo),e(Mp,xpo),e(x,$po),e(x,Ep),e(Ep,sse),e(sse,kpo),e(Ep,Spo),e(Ep,$I),e($I,Rpo),e(Ep,Bpo),e(x,Ppo),e(x,Cp),e(Cp,lse),e(lse,Ipo),e(Cp,qpo),e(Cp,kI),e(kI,Npo),e(Cp,jpo),e(x,Dpo),e(x,wp),e(wp,ise),e(ise,Gpo),e(wp,Opo),e(wp,SI),e(SI,Vpo),e(wp,Xpo),e(x,zpo),e(x,Ap),e(Ap,dse),e(dse,Wpo),e(Ap,Qpo),e(Ap,RI),e(RI,Hpo),e(Ap,Upo),e(x,Jpo),e(x,yp),e(yp,cse),e(cse,Ypo),e(yp,Kpo),e(yp,BI),e(BI,Zpo),e(yp,e_o),e(x,o_o),e(x,Lp),e(Lp,fse),e(fse,r_o),e(Lp,t_o),e(Lp,PI),e(PI,a_o),e(Lp,n_o),e(x,s_o),e(x,xp),e(xp,mse),e(mse,l_o),e(xp,i_o),e(xp,II),e(II,d_o),e(xp,c_o),e(x,f_o),e(x,$p),e($p,gse),e(gse,m_o),e($p,g_o),e($p,qI),e(qI,h_o),e($p,p_o),e(x,__o),e(x,kp),e(kp,hse),e(hse,u_o),e(kp,b_o),e(kp,NI),e(NI,v_o),e(kp,F_o),e(x,T_o),e(x,Rs),e(Rs,pse),e(pse,M_o),e(Rs,E_o),e(Rs,jI),e(jI,C_o),e(Rs,w_o),e(Rs,DI),e(DI,A_o),e(Rs,y_o),e(x,L_o),e(x,Sp),e(Sp,_se),e(_se,x_o),e(Sp,$_o),e(Sp,GI),e(GI,k_o),e(Sp,S_o),e(x,R_o),e(x,Rp),e(Rp,use),e(use,B_o),e(Rp,P_o),e(Rp,OI),e(OI,I_o),e(Rp,q_o),e(x,N_o),e(x,Bp),e(Bp,bse),e(bse,j_o),e(Bp,D_o),e(Bp,VI),e(VI,G_o),e(Bp,O_o),e(x,V_o),e(x,Pp),e(Pp,vse),e(vse,X_o),e(Pp,z_o),e(Pp,XI),e(XI,W_o),e(Pp,Q_o),e(x,H_o),e(x,Ip),e(Ip,Fse),e(Fse,U_o),e(Ip,J_o),e(Ip,zI),e(zI,Y_o),e(Ip,K_o),e(x,Z_o),e(x,qp),e(qp,Tse),e(Tse,euo),e(qp,ouo),e(qp,WI),e(WI,ruo),e(qp,tuo),e(x,auo),e(x,Np),e(Np,Mse),e(Mse,nuo),e(Np,suo),e(Np,QI),e(QI,luo),e(Np,iuo),e(x,duo),e(x,jp),e(jp,Ese),e(Ese,cuo),e(jp,fuo),e(jp,HI),e(HI,muo),e(jp,guo),e(x,huo),e(x,Dp),e(Dp,Cse),e(Cse,puo),e(Dp,_uo),e(Dp,UI),e(UI,uuo),e(Dp,buo),e(x,vuo),e(x,Gp),e(Gp,wse),e(wse,Fuo),e(Gp,Tuo),e(Gp,JI),e(JI,Muo),e(Gp,Euo),e(x,Cuo),e(x,Op),e(Op,Ase),e(Ase,wuo),e(Op,Auo),e(Op,YI),e(YI,yuo),e(Op,Luo),e(x,xuo),e(x,Vp),e(Vp,yse),e(yse,$uo),e(Vp,kuo),e(Vp,KI),e(KI,Suo),e(Vp,Ruo),e(x,Buo),e(x,Xp),e(Xp,Lse),e(Lse,Puo),e(Xp,Iuo),e(Xp,ZI),e(ZI,quo),e(Xp,Nuo),e(x,juo),e(x,zp),e(zp,xse),e(xse,Duo),e(zp,Guo),e(zp,eq),e(eq,Ouo),e(zp,Vuo),e(x,Xuo),e(x,Wp),e(Wp,$se),e($se,zuo),e(Wp,Wuo),e(Wp,oq),e(oq,Quo),e(Wp,Huo),e(x,Uuo),e(x,Qp),e(Qp,kse),e(kse,Juo),e(Qp,Yuo),e(Qp,rq),e(rq,Kuo),e(Qp,Zuo),e(x,e2o),e(x,Hp),e(Hp,Sse),e(Sse,o2o),e(Hp,r2o),e(Hp,tq),e(tq,t2o),e(Hp,a2o),e(x,n2o),e(x,Up),e(Up,Rse),e(Rse,s2o),e(Up,l2o),e(Up,aq),e(aq,i2o),e(Up,d2o),e(x,c2o),e(x,Jp),e(Jp,Bse),e(Bse,f2o),e(Jp,m2o),e(Jp,nq),e(nq,g2o),e(Jp,h2o),e(x,p2o),e(x,Yp),e(Yp,Pse),e(Pse,_2o),e(Yp,u2o),e(Yp,sq),e(sq,b2o),e(Yp,v2o),e(x,F2o),e(x,Kp),e(Kp,Ise),e(Ise,T2o),e(Kp,M2o),e(Kp,lq),e(lq,E2o),e(Kp,C2o),e(x,w2o),e(x,Zp),e(Zp,qse),e(qse,A2o),e(Zp,y2o),e(Zp,iq),e(iq,L2o),e(Zp,x2o),e(x,$2o),e(x,e_),e(e_,Nse),e(Nse,k2o),e(e_,S2o),e(e_,dq),e(dq,R2o),e(e_,B2o),e(x,P2o),e(x,o_),e(o_,jse),e(jse,I2o),e(o_,q2o),e(o_,cq),e(cq,N2o),e(o_,j2o),e(x,D2o),e(x,r_),e(r_,Dse),e(Dse,G2o),e(r_,O2o),e(r_,fq),e(fq,V2o),e(r_,X2o),e(x,z2o),e(x,t_),e(t_,Gse),e(Gse,W2o),e(t_,Q2o),e(t_,mq),e(mq,H2o),e(t_,U2o),e(x,J2o),e(x,a_),e(a_,Ose),e(Ose,Y2o),e(a_,K2o),e(a_,gq),e(gq,Z2o),e(a_,e1o),e(x,o1o),e(x,n_),e(n_,Vse),e(Vse,r1o),e(n_,t1o),e(n_,hq),e(hq,a1o),e(n_,n1o),e(x,s1o),e(x,s_),e(s_,Xse),e(Xse,l1o),e(s_,i1o),e(s_,pq),e(pq,d1o),e(s_,c1o),e(x,f1o),e(x,l_),e(l_,zse),e(zse,m1o),e(l_,g1o),e(l_,_q),e(_q,h1o),e(l_,p1o),e(x,_1o),e(x,i_),e(i_,Wse),e(Wse,u1o),e(i_,b1o),e(i_,uq),e(uq,v1o),e(i_,F1o),e(x,T1o),e(x,d_),e(d_,Qse),e(Qse,M1o),e(d_,E1o),e(d_,bq),e(bq,C1o),e(d_,w1o),e(x,A1o),e(x,c_),e(c_,Hse),e(Hse,y1o),e(c_,L1o),e(c_,vq),e(vq,x1o),e(c_,$1o),e(x,k1o),e(x,f_),e(f_,Use),e(Use,S1o),e(f_,R1o),e(f_,Fq),e(Fq,B1o),e(f_,P1o),e(x,I1o),e(x,m_),e(m_,Jse),e(Jse,q1o),e(m_,N1o),e(m_,Tq),e(Tq,j1o),e(m_,D1o),e(x,G1o),e(x,g_),e(g_,Yse),e(Yse,O1o),e(g_,V1o),e(g_,Mq),e(Mq,X1o),e(g_,z1o),e(x,W1o),e(x,h_),e(h_,Kse),e(Kse,Q1o),e(h_,H1o),e(h_,Eq),e(Eq,U1o),e(h_,J1o),e(x,Y1o),e(x,p_),e(p_,Zse),e(Zse,K1o),e(p_,Z1o),e(p_,Cq),e(Cq,ebo),e(p_,obo),e(x,rbo),e(x,__),e(__,ele),e(ele,tbo),e(__,abo),e(__,wq),e(wq,nbo),e(__,sbo),e(x,lbo),e(x,u_),e(u_,ole),e(ole,ibo),e(u_,dbo),e(u_,Aq),e(Aq,cbo),e(u_,fbo),e(x,mbo),e(x,b_),e(b_,rle),e(rle,gbo),e(b_,hbo),e(b_,yq),e(yq,pbo),e(b_,_bo),e(x,ubo),e(x,v_),e(v_,tle),e(tle,bbo),e(v_,vbo),e(v_,Lq),e(Lq,Fbo),e(v_,Tbo),e(x,Mbo),e(x,F_),e(F_,ale),e(ale,Ebo),e(F_,Cbo),e(F_,xq),e(xq,wbo),e(F_,Abo),e(x,ybo),e(x,T_),e(T_,nle),e(nle,Lbo),e(T_,xbo),e(T_,$q),e($q,$bo),e(T_,kbo),e(x,Sbo),e(x,M_),e(M_,sle),e(sle,Rbo),e(M_,Bbo),e(M_,kq),e(kq,Pbo),e(M_,Ibo),e(x,qbo),e(x,E_),e(E_,lle),e(lle,Nbo),e(E_,jbo),e(E_,Sq),e(Sq,Dbo),e(E_,Gbo),e(x,Obo),e(x,C_),e(C_,ile),e(ile,Vbo),e(C_,Xbo),e(C_,Rq),e(Rq,zbo),e(C_,Wbo),e(x,Qbo),e(x,w_),e(w_,dle),e(dle,Hbo),e(w_,Ubo),e(w_,Bq),e(Bq,Jbo),e(w_,Ybo),e(x,Kbo),e(x,A_),e(A_,cle),e(cle,Zbo),e(A_,evo),e(A_,Pq),e(Pq,ovo),e(A_,rvo),e(x,tvo),e(x,y_),e(y_,fle),e(fle,avo),e(y_,nvo),e(y_,Iq),e(Iq,svo),e(y_,lvo),e(x,ivo),e(x,L_),e(L_,mle),e(mle,dvo),e(L_,cvo),e(L_,qq),e(qq,fvo),e(L_,mvo),e(x,gvo),e(x,x_),e(x_,gle),e(gle,hvo),e(x_,pvo),e(x_,Nq),e(Nq,_vo),e(x_,uvo),e(x,bvo),e(x,$_),e($_,hle),e(hle,vvo),e($_,Fvo),e($_,jq),e(jq,Tvo),e($_,Mvo),e(x,Evo),e(x,k_),e(k_,ple),e(ple,Cvo),e(k_,wvo),e(k_,Dq),e(Dq,Avo),e(k_,yvo),e(x,Lvo),e(x,S_),e(S_,_le),e(_le,xvo),e(S_,$vo),e(S_,Gq),e(Gq,kvo),e(S_,Svo),e(x,Rvo),e(x,R_),e(R_,ule),e(ule,Bvo),e(R_,Pvo),e(R_,Oq),e(Oq,Ivo),e(R_,qvo),e(x,Nvo),e(x,B_),e(B_,ble),e(ble,jvo),e(B_,Dvo),e(B_,Vq),e(Vq,Gvo),e(B_,Ovo),e(x,Vvo),e(x,P_),e(P_,vle),e(vle,Xvo),e(P_,zvo),e(P_,Xq),e(Xq,Wvo),e(P_,Qvo),e(x,Hvo),e(x,I_),e(I_,Fle),e(Fle,Uvo),e(I_,Jvo),e(I_,zq),e(zq,Yvo),e(I_,Kvo),e(x,Zvo),e(x,q_),e(q_,Tle),e(Tle,eFo),e(q_,oFo),e(q_,Wq),e(Wq,rFo),e(q_,tFo),e(x,aFo),e(x,N_),e(N_,Mle),e(Mle,nFo),e(N_,sFo),e(N_,Qq),e(Qq,lFo),e(N_,iFo),e(x,dFo),e(x,j_),e(j_,Ele),e(Ele,cFo),e(j_,fFo),e(j_,Hq),e(Hq,mFo),e(j_,gFo),e(x,hFo),e(x,D_),e(D_,Cle),e(Cle,pFo),e(D_,_Fo),e(D_,Uq),e(Uq,uFo),e(D_,bFo),e(x,vFo),e(x,G_),e(G_,wle),e(wle,FFo),e(G_,TFo),e(G_,Jq),e(Jq,MFo),e(G_,EFo),e(x,CFo),e(x,O_),e(O_,Ale),e(Ale,wFo),e(O_,AFo),e(O_,Yq),e(Yq,yFo),e(O_,LFo),e(x,xFo),e(x,V_),e(V_,yle),e(yle,$Fo),e(V_,kFo),e(V_,Kq),e(Kq,SFo),e(V_,RFo),e(Je,BFo),e(Je,X_),e(X_,PFo),e(X_,Lle),e(Lle,IFo),e(X_,qFo),e(X_,xle),e(xle,NFo),e(Je,jFo),M(z_,Je,null),b(f,sqe,u),b(f,yi,u),e(yi,W_),e(W_,$le),M(V6,$le,null),e(yi,DFo),e(yi,kle),e(kle,GFo),b(f,lqe,u),b(f,xo,u),M(X6,xo,null),e(xo,OFo),e(xo,Li),e(Li,VFo),e(Li,Zq),e(Zq,XFo),e(Li,zFo),e(Li,eN),e(eN,WFo),e(Li,QFo),e(xo,HFo),e(xo,z6),e(z6,UFo),e(z6,Sle),e(Sle,JFo),e(z6,YFo),e(xo,KFo),e(xo,at),M(W6,at,null),e(at,ZFo),e(at,Rle),e(Rle,e0o),e(at,o0o),e(at,xi),e(xi,r0o),e(xi,Ble),e(Ble,t0o),e(xi,a0o),e(xi,oN),e(oN,n0o),e(xi,s0o),e(at,l0o),M(Q_,at,null),e(xo,i0o),e(xo,Ye),M(Q6,Ye,null),e(Ye,d0o),e(Ye,Ple),e(Ple,c0o),e(Ye,f0o),e(Ye,xa),e(xa,m0o),e(xa,Ile),e(Ile,g0o),e(xa,h0o),e(xa,qle),e(qle,p0o),e(xa,_0o),e(xa,Nle),e(Nle,u0o),e(xa,b0o),e(Ye,v0o),e(Ye,G),e(G,H_),e(H_,jle),e(jle,F0o),e(H_,T0o),e(H_,rN),e(rN,M0o),e(H_,E0o),e(G,C0o),e(G,U_),e(U_,Dle),e(Dle,w0o),e(U_,A0o),e(U_,tN),e(tN,y0o),e(U_,L0o),e(G,x0o),e(G,J_),e(J_,Gle),e(Gle,$0o),e(J_,k0o),e(J_,aN),e(aN,S0o),e(J_,R0o),e(G,B0o),e(G,Y_),e(Y_,Ole),e(Ole,P0o),e(Y_,I0o),e(Y_,nN),e(nN,q0o),e(Y_,N0o),e(G,j0o),e(G,K_),e(K_,Vle),e(Vle,D0o),e(K_,G0o),e(K_,sN),e(sN,O0o),e(K_,V0o),e(G,X0o),e(G,Z_),e(Z_,Xle),e(Xle,z0o),e(Z_,W0o),e(Z_,lN),e(lN,Q0o),e(Z_,H0o),e(G,U0o),e(G,eu),e(eu,zle),e(zle,J0o),e(eu,Y0o),e(eu,iN),e(iN,K0o),e(eu,Z0o),e(G,eTo),e(G,ou),e(ou,Wle),e(Wle,oTo),e(ou,rTo),e(ou,dN),e(dN,tTo),e(ou,aTo),e(G,nTo),e(G,ru),e(ru,Qle),e(Qle,sTo),e(ru,lTo),e(ru,cN),e(cN,iTo),e(ru,dTo),e(G,cTo),e(G,tu),e(tu,Hle),e(Hle,fTo),e(tu,mTo),e(tu,fN),e(fN,gTo),e(tu,hTo),e(G,pTo),e(G,au),e(au,Ule),e(Ule,_To),e(au,uTo),e(au,mN),e(mN,bTo),e(au,vTo),e(G,FTo),e(G,nu),e(nu,Jle),e(Jle,TTo),e(nu,MTo),e(nu,gN),e(gN,ETo),e(nu,CTo),e(G,wTo),e(G,su),e(su,Yle),e(Yle,ATo),e(su,yTo),e(su,hN),e(hN,LTo),e(su,xTo),e(G,$To),e(G,lu),e(lu,Kle),e(Kle,kTo),e(lu,STo),e(lu,pN),e(pN,RTo),e(lu,BTo),e(G,PTo),e(G,iu),e(iu,Zle),e(Zle,ITo),e(iu,qTo),e(iu,_N),e(_N,NTo),e(iu,jTo),e(G,DTo),e(G,du),e(du,eie),e(eie,GTo),e(du,OTo),e(du,uN),e(uN,VTo),e(du,XTo),e(G,zTo),e(G,cu),e(cu,oie),e(oie,WTo),e(cu,QTo),e(cu,bN),e(bN,HTo),e(cu,UTo),e(G,JTo),e(G,fu),e(fu,rie),e(rie,YTo),e(fu,KTo),e(fu,vN),e(vN,ZTo),e(fu,e7o),e(G,o7o),e(G,mu),e(mu,tie),e(tie,r7o),e(mu,t7o),e(mu,FN),e(FN,a7o),e(mu,n7o),e(G,s7o),e(G,gu),e(gu,aie),e(aie,l7o),e(gu,i7o),e(gu,TN),e(TN,d7o),e(gu,c7o),e(G,f7o),e(G,hu),e(hu,nie),e(nie,m7o),e(hu,g7o),e(hu,MN),e(MN,h7o),e(hu,p7o),e(G,_7o),e(G,pu),e(pu,sie),e(sie,u7o),e(pu,b7o),e(pu,EN),e(EN,v7o),e(pu,F7o),e(G,T7o),e(G,_u),e(_u,lie),e(lie,M7o),e(_u,E7o),e(_u,CN),e(CN,C7o),e(_u,w7o),e(G,A7o),e(G,uu),e(uu,iie),e(iie,y7o),e(uu,L7o),e(uu,wN),e(wN,x7o),e(uu,$7o),e(G,k7o),e(G,bu),e(bu,die),e(die,S7o),e(bu,R7o),e(bu,AN),e(AN,B7o),e(bu,P7o),e(G,I7o),e(G,vu),e(vu,cie),e(cie,q7o),e(vu,N7o),e(vu,yN),e(yN,j7o),e(vu,D7o),e(G,G7o),e(G,Fu),e(Fu,fie),e(fie,O7o),e(Fu,V7o),e(Fu,LN),e(LN,X7o),e(Fu,z7o),e(G,W7o),e(G,Tu),e(Tu,mie),e(mie,Q7o),e(Tu,H7o),e(Tu,xN),e(xN,U7o),e(Tu,J7o),e(G,Y7o),e(G,Mu),e(Mu,gie),e(gie,K7o),e(Mu,Z7o),e(Mu,$N),e($N,eMo),e(Mu,oMo),e(G,rMo),e(G,Eu),e(Eu,hie),e(hie,tMo),e(Eu,aMo),e(Eu,kN),e(kN,nMo),e(Eu,sMo),e(G,lMo),e(G,Cu),e(Cu,pie),e(pie,iMo),e(Cu,dMo),e(Cu,SN),e(SN,cMo),e(Cu,fMo),e(G,mMo),e(G,wu),e(wu,_ie),e(_ie,gMo),e(wu,hMo),e(wu,RN),e(RN,pMo),e(wu,_Mo),e(G,uMo),e(G,Au),e(Au,uie),e(uie,bMo),e(Au,vMo),e(Au,BN),e(BN,FMo),e(Au,TMo),e(G,MMo),e(G,yu),e(yu,bie),e(bie,EMo),e(yu,CMo),e(yu,PN),e(PN,wMo),e(yu,AMo),e(G,yMo),e(G,Lu),e(Lu,vie),e(vie,LMo),e(Lu,xMo),e(Lu,IN),e(IN,$Mo),e(Lu,kMo),e(G,SMo),e(G,xu),e(xu,Fie),e(Fie,RMo),e(xu,BMo),e(xu,qN),e(qN,PMo),e(xu,IMo),e(G,qMo),e(G,$u),e($u,Tie),e(Tie,NMo),e($u,jMo),e($u,NN),e(NN,DMo),e($u,GMo),e(G,OMo),e(G,ku),e(ku,Mie),e(Mie,VMo),e(ku,XMo),e(ku,jN),e(jN,zMo),e(ku,WMo),e(G,QMo),e(G,Su),e(Su,Eie),e(Eie,HMo),e(Su,UMo),e(Su,DN),e(DN,JMo),e(Su,YMo),e(G,KMo),e(G,Ru),e(Ru,Cie),e(Cie,ZMo),e(Ru,e4o),e(Ru,GN),e(GN,o4o),e(Ru,r4o),e(G,t4o),e(G,Bu),e(Bu,wie),e(wie,a4o),e(Bu,n4o),e(Bu,ON),e(ON,s4o),e(Bu,l4o),e(G,i4o),e(G,Pu),e(Pu,Aie),e(Aie,d4o),e(Pu,c4o),e(Pu,VN),e(VN,f4o),e(Pu,m4o),e(Ye,g4o),e(Ye,Iu),e(Iu,h4o),e(Iu,yie),e(yie,p4o),e(Iu,_4o),e(Iu,Lie),e(Lie,u4o),e(Ye,b4o),M(qu,Ye,null),b(f,iqe,u),b(f,$i,u),e($i,Nu),e(Nu,xie),M(H6,xie,null),e($i,v4o),e($i,$ie),e($ie,F4o),b(f,dqe,u),b(f,$o,u),M(U6,$o,null),e($o,T4o),e($o,ki),e(ki,M4o),e(ki,XN),e(XN,E4o),e(ki,C4o),e(ki,zN),e(zN,w4o),e(ki,A4o),e($o,y4o),e($o,J6),e(J6,L4o),e(J6,kie),e(kie,x4o),e(J6,$4o),e($o,k4o),e($o,nt),M(Y6,nt,null),e(nt,S4o),e(nt,Sie),e(Sie,R4o),e(nt,B4o),e(nt,Si),e(Si,P4o),e(Si,Rie),e(Rie,I4o),e(Si,q4o),e(Si,WN),e(WN,N4o),e(Si,j4o),e(nt,D4o),M(ju,nt,null),e($o,G4o),e($o,Ke),M(K6,Ke,null),e(Ke,O4o),e(Ke,Bie),e(Bie,V4o),e(Ke,X4o),e(Ke,$a),e($a,z4o),e($a,Pie),e(Pie,W4o),e($a,Q4o),e($a,Iie),e(Iie,H4o),e($a,U4o),e($a,qie),e(qie,J4o),e($a,Y4o),e(Ke,K4o),e(Ke,z),e(z,Du),e(Du,Nie),e(Nie,Z4o),e(Du,eEo),e(Du,QN),e(QN,oEo),e(Du,rEo),e(z,tEo),e(z,Gu),e(Gu,jie),e(jie,aEo),e(Gu,nEo),e(Gu,HN),e(HN,sEo),e(Gu,lEo),e(z,iEo),e(z,Ou),e(Ou,Die),e(Die,dEo),e(Ou,cEo),e(Ou,UN),e(UN,fEo),e(Ou,mEo),e(z,gEo),e(z,Vu),e(Vu,Gie),e(Gie,hEo),e(Vu,pEo),e(Vu,JN),e(JN,_Eo),e(Vu,uEo),e(z,bEo),e(z,Xu),e(Xu,Oie),e(Oie,vEo),e(Xu,FEo),e(Xu,YN),e(YN,TEo),e(Xu,MEo),e(z,EEo),e(z,zu),e(zu,Vie),e(Vie,CEo),e(zu,wEo),e(zu,KN),e(KN,AEo),e(zu,yEo),e(z,LEo),e(z,Wu),e(Wu,Xie),e(Xie,xEo),e(Wu,$Eo),e(Wu,ZN),e(ZN,kEo),e(Wu,SEo),e(z,REo),e(z,Qu),e(Qu,zie),e(zie,BEo),e(Qu,PEo),e(Qu,ej),e(ej,IEo),e(Qu,qEo),e(z,NEo),e(z,Hu),e(Hu,Wie),e(Wie,jEo),e(Hu,DEo),e(Hu,oj),e(oj,GEo),e(Hu,OEo),e(z,VEo),e(z,Uu),e(Uu,Qie),e(Qie,XEo),e(Uu,zEo),e(Uu,rj),e(rj,WEo),e(Uu,QEo),e(z,HEo),e(z,Ju),e(Ju,Hie),e(Hie,UEo),e(Ju,JEo),e(Ju,tj),e(tj,YEo),e(Ju,KEo),e(z,ZEo),e(z,Yu),e(Yu,Uie),e(Uie,eCo),e(Yu,oCo),e(Yu,aj),e(aj,rCo),e(Yu,tCo),e(z,aCo),e(z,Ku),e(Ku,Jie),e(Jie,nCo),e(Ku,sCo),e(Ku,nj),e(nj,lCo),e(Ku,iCo),e(z,dCo),e(z,Zu),e(Zu,Yie),e(Yie,cCo),e(Zu,fCo),e(Zu,sj),e(sj,mCo),e(Zu,gCo),e(z,hCo),e(z,e2),e(e2,Kie),e(Kie,pCo),e(e2,_Co),e(e2,lj),e(lj,uCo),e(e2,bCo),e(z,vCo),e(z,o2),e(o2,Zie),e(Zie,FCo),e(o2,TCo),e(o2,ij),e(ij,MCo),e(o2,ECo),e(z,CCo),e(z,r2),e(r2,ede),e(ede,wCo),e(r2,ACo),e(r2,dj),e(dj,yCo),e(r2,LCo),e(z,xCo),e(z,t2),e(t2,ode),e(ode,$Co),e(t2,kCo),e(t2,cj),e(cj,SCo),e(t2,RCo),e(z,BCo),e(z,a2),e(a2,rde),e(rde,PCo),e(a2,ICo),e(a2,fj),e(fj,qCo),e(a2,NCo),e(z,jCo),e(z,n2),e(n2,tde),e(tde,DCo),e(n2,GCo),e(n2,mj),e(mj,OCo),e(n2,VCo),e(z,XCo),e(z,s2),e(s2,ade),e(ade,zCo),e(s2,WCo),e(s2,gj),e(gj,QCo),e(s2,HCo),e(z,UCo),e(z,l2),e(l2,nde),e(nde,JCo),e(l2,YCo),e(l2,hj),e(hj,KCo),e(l2,ZCo),e(z,e5o),e(z,i2),e(i2,sde),e(sde,o5o),e(i2,r5o),e(i2,pj),e(pj,t5o),e(i2,a5o),e(z,n5o),e(z,d2),e(d2,lde),e(lde,s5o),e(d2,l5o),e(d2,_j),e(_j,i5o),e(d2,d5o),e(z,c5o),e(z,c2),e(c2,ide),e(ide,f5o),e(c2,m5o),e(c2,uj),e(uj,g5o),e(c2,h5o),e(z,p5o),e(z,f2),e(f2,dde),e(dde,_5o),e(f2,u5o),e(f2,bj),e(bj,b5o),e(f2,v5o),e(z,F5o),e(z,m2),e(m2,cde),e(cde,T5o),e(m2,M5o),e(m2,vj),e(vj,E5o),e(m2,C5o),e(z,w5o),e(z,g2),e(g2,fde),e(fde,A5o),e(g2,y5o),e(g2,Fj),e(Fj,L5o),e(g2,x5o),e(z,$5o),e(z,h2),e(h2,mde),e(mde,k5o),e(h2,S5o),e(h2,Tj),e(Tj,R5o),e(h2,B5o),e(z,P5o),e(z,p2),e(p2,gde),e(gde,I5o),e(p2,q5o),e(p2,Mj),e(Mj,N5o),e(p2,j5o),e(z,D5o),e(z,_2),e(_2,hde),e(hde,G5o),e(_2,O5o),e(_2,Ej),e(Ej,V5o),e(_2,X5o),e(z,z5o),e(z,u2),e(u2,pde),e(pde,W5o),e(u2,Q5o),e(u2,Cj),e(Cj,H5o),e(u2,U5o),e(z,J5o),e(z,b2),e(b2,_de),e(_de,Y5o),e(b2,K5o),e(b2,wj),e(wj,Z5o),e(b2,e3o),e(z,o3o),e(z,v2),e(v2,ude),e(ude,r3o),e(v2,t3o),e(v2,Aj),e(Aj,a3o),e(v2,n3o),e(z,s3o),e(z,F2),e(F2,bde),e(bde,l3o),e(F2,i3o),e(F2,yj),e(yj,d3o),e(F2,c3o),e(z,f3o),e(z,T2),e(T2,vde),e(vde,m3o),e(T2,g3o),e(T2,Lj),e(Lj,h3o),e(T2,p3o),e(z,_3o),e(z,M2),e(M2,Fde),e(Fde,u3o),e(M2,b3o),e(M2,xj),e(xj,v3o),e(M2,F3o),e(Ke,T3o),e(Ke,E2),e(E2,M3o),e(E2,Tde),e(Tde,E3o),e(E2,C3o),e(E2,Mde),e(Mde,w3o),e(Ke,A3o),M(C2,Ke,null),b(f,cqe,u),b(f,Ri,u),e(Ri,w2),e(w2,Ede),M(Z6,Ede,null),e(Ri,y3o),e(Ri,Cde),e(Cde,L3o),b(f,fqe,u),b(f,ko,u),M(ey,ko,null),e(ko,x3o),e(ko,Bi),e(Bi,$3o),e(Bi,$j),e($j,k3o),e(Bi,S3o),e(Bi,kj),e(kj,R3o),e(Bi,B3o),e(ko,P3o),e(ko,oy),e(oy,I3o),e(oy,wde),e(wde,q3o),e(oy,N3o),e(ko,j3o),e(ko,st),M(ry,st,null),e(st,D3o),e(st,Ade),e(Ade,G3o),e(st,O3o),e(st,Pi),e(Pi,V3o),e(Pi,yde),e(yde,X3o),e(Pi,z3o),e(Pi,Sj),e(Sj,W3o),e(Pi,Q3o),e(st,H3o),M(A2,st,null),e(ko,U3o),e(ko,Ze),M(ty,Ze,null),e(Ze,J3o),e(Ze,Lde),e(Lde,Y3o),e(Ze,K3o),e(Ze,ka),e(ka,Z3o),e(ka,xde),e(xde,ewo),e(ka,owo),e(ka,$de),e($de,rwo),e(ka,two),e(ka,kde),e(kde,awo),e(ka,nwo),e(Ze,swo),e(Ze,Q),e(Q,y2),e(y2,Sde),e(Sde,lwo),e(y2,iwo),e(y2,Rj),e(Rj,dwo),e(y2,cwo),e(Q,fwo),e(Q,L2),e(L2,Rde),e(Rde,mwo),e(L2,gwo),e(L2,Bj),e(Bj,hwo),e(L2,pwo),e(Q,_wo),e(Q,x2),e(x2,Bde),e(Bde,uwo),e(x2,bwo),e(x2,Pj),e(Pj,vwo),e(x2,Fwo),e(Q,Two),e(Q,$2),e($2,Pde),e(Pde,Mwo),e($2,Ewo),e($2,Ij),e(Ij,Cwo),e($2,wwo),e(Q,Awo),e(Q,k2),e(k2,Ide),e(Ide,ywo),e(k2,Lwo),e(k2,qj),e(qj,xwo),e(k2,$wo),e(Q,kwo),e(Q,S2),e(S2,qde),e(qde,Swo),e(S2,Rwo),e(S2,Nj),e(Nj,Bwo),e(S2,Pwo),e(Q,Iwo),e(Q,R2),e(R2,Nde),e(Nde,qwo),e(R2,Nwo),e(R2,jj),e(jj,jwo),e(R2,Dwo),e(Q,Gwo),e(Q,B2),e(B2,jde),e(jde,Owo),e(B2,Vwo),e(B2,Dj),e(Dj,Xwo),e(B2,zwo),e(Q,Wwo),e(Q,P2),e(P2,Dde),e(Dde,Qwo),e(P2,Hwo),e(P2,Gj),e(Gj,Uwo),e(P2,Jwo),e(Q,Ywo),e(Q,I2),e(I2,Gde),e(Gde,Kwo),e(I2,Zwo),e(I2,Oj),e(Oj,eAo),e(I2,oAo),e(Q,rAo),e(Q,q2),e(q2,Ode),e(Ode,tAo),e(q2,aAo),e(q2,Vj),e(Vj,nAo),e(q2,sAo),e(Q,lAo),e(Q,N2),e(N2,Vde),e(Vde,iAo),e(N2,dAo),e(N2,Xj),e(Xj,cAo),e(N2,fAo),e(Q,mAo),e(Q,j2),e(j2,Xde),e(Xde,gAo),e(j2,hAo),e(j2,zj),e(zj,pAo),e(j2,_Ao),e(Q,uAo),e(Q,D2),e(D2,zde),e(zde,bAo),e(D2,vAo),e(D2,Wj),e(Wj,FAo),e(D2,TAo),e(Q,MAo),e(Q,G2),e(G2,Wde),e(Wde,EAo),e(G2,CAo),e(G2,Qj),e(Qj,wAo),e(G2,AAo),e(Q,yAo),e(Q,O2),e(O2,Qde),e(Qde,LAo),e(O2,xAo),e(O2,Hj),e(Hj,$Ao),e(O2,kAo),e(Q,SAo),e(Q,V2),e(V2,Hde),e(Hde,RAo),e(V2,BAo),e(V2,Uj),e(Uj,PAo),e(V2,IAo),e(Q,qAo),e(Q,X2),e(X2,Ude),e(Ude,NAo),e(X2,jAo),e(X2,Jj),e(Jj,DAo),e(X2,GAo),e(Q,OAo),e(Q,z2),e(z2,Jde),e(Jde,VAo),e(z2,XAo),e(z2,Yj),e(Yj,zAo),e(z2,WAo),e(Q,QAo),e(Q,W2),e(W2,Yde),e(Yde,HAo),e(W2,UAo),e(W2,Kj),e(Kj,JAo),e(W2,YAo),e(Q,KAo),e(Q,Q2),e(Q2,Kde),e(Kde,ZAo),e(Q2,e6o),e(Q2,Zj),e(Zj,o6o),e(Q2,r6o),e(Q,t6o),e(Q,H2),e(H2,Zde),e(Zde,a6o),e(H2,n6o),e(H2,eD),e(eD,s6o),e(H2,l6o),e(Q,i6o),e(Q,U2),e(U2,ece),e(ece,d6o),e(U2,c6o),e(U2,oD),e(oD,f6o),e(U2,m6o),e(Q,g6o),e(Q,J2),e(J2,oce),e(oce,h6o),e(J2,p6o),e(J2,rD),e(rD,_6o),e(J2,u6o),e(Q,b6o),e(Q,Y2),e(Y2,rce),e(rce,v6o),e(Y2,F6o),e(Y2,tD),e(tD,T6o),e(Y2,M6o),e(Q,E6o),e(Q,K2),e(K2,tce),e(tce,C6o),e(K2,w6o),e(K2,aD),e(aD,A6o),e(K2,y6o),e(Q,L6o),e(Q,Z2),e(Z2,ace),e(ace,x6o),e(Z2,$6o),e(Z2,nD),e(nD,k6o),e(Z2,S6o),e(Q,R6o),e(Q,e1),e(e1,nce),e(nce,B6o),e(e1,P6o),e(e1,sD),e(sD,I6o),e(e1,q6o),e(Q,N6o),e(Q,o1),e(o1,sce),e(sce,j6o),e(o1,D6o),e(o1,lD),e(lD,G6o),e(o1,O6o),e(Q,V6o),e(Q,r1),e(r1,lce),e(lce,X6o),e(r1,z6o),e(r1,iD),e(iD,W6o),e(r1,Q6o),e(Q,H6o),e(Q,t1),e(t1,ice),e(ice,U6o),e(t1,J6o),e(t1,dce),e(dce,Y6o),e(t1,K6o),e(Q,Z6o),e(Q,a1),e(a1,cce),e(cce,eyo),e(a1,oyo),e(a1,dD),e(dD,ryo),e(a1,tyo),e(Q,ayo),e(Q,n1),e(n1,fce),e(fce,nyo),e(n1,syo),e(n1,cD),e(cD,lyo),e(n1,iyo),e(Q,dyo),e(Q,s1),e(s1,mce),e(mce,cyo),e(s1,fyo),e(s1,fD),e(fD,myo),e(s1,gyo),e(Q,hyo),e(Q,l1),e(l1,gce),e(gce,pyo),e(l1,_yo),e(l1,mD),e(mD,uyo),e(l1,byo),e(Ze,vyo),e(Ze,i1),e(i1,Fyo),e(i1,hce),e(hce,Tyo),e(i1,Myo),e(i1,pce),e(pce,Eyo),e(Ze,Cyo),M(d1,Ze,null),b(f,mqe,u),b(f,Ii,u),e(Ii,c1),e(c1,_ce),M(ay,_ce,null),e(Ii,wyo),e(Ii,uce),e(uce,Ayo),b(f,gqe,u),b(f,So,u),M(ny,So,null),e(So,yyo),e(So,qi),e(qi,Lyo),e(qi,gD),e(gD,xyo),e(qi,$yo),e(qi,hD),e(hD,kyo),e(qi,Syo),e(So,Ryo),e(So,sy),e(sy,Byo),e(sy,bce),e(bce,Pyo),e(sy,Iyo),e(So,qyo),e(So,lt),M(ly,lt,null),e(lt,Nyo),e(lt,vce),e(vce,jyo),e(lt,Dyo),e(lt,Ni),e(Ni,Gyo),e(Ni,Fce),e(Fce,Oyo),e(Ni,Vyo),e(Ni,pD),e(pD,Xyo),e(Ni,zyo),e(lt,Wyo),M(f1,lt,null),e(So,Qyo),e(So,eo),M(iy,eo,null),e(eo,Hyo),e(eo,Tce),e(Tce,Uyo),e(eo,Jyo),e(eo,Sa),e(Sa,Yyo),e(Sa,Mce),e(Mce,Kyo),e(Sa,Zyo),e(Sa,Ece),e(Ece,eLo),e(Sa,oLo),e(Sa,Cce),e(Cce,rLo),e(Sa,tLo),e(eo,aLo),e(eo,_e),e(_e,m1),e(m1,wce),e(wce,nLo),e(m1,sLo),e(m1,_D),e(_D,lLo),e(m1,iLo),e(_e,dLo),e(_e,g1),e(g1,Ace),e(Ace,cLo),e(g1,fLo),e(g1,uD),e(uD,mLo),e(g1,gLo),e(_e,hLo),e(_e,h1),e(h1,yce),e(yce,pLo),e(h1,_Lo),e(h1,bD),e(bD,uLo),e(h1,bLo),e(_e,vLo),e(_e,p1),e(p1,Lce),e(Lce,FLo),e(p1,TLo),e(p1,vD),e(vD,MLo),e(p1,ELo),e(_e,CLo),e(_e,_1),e(_1,xce),e(xce,wLo),e(_1,ALo),e(_1,FD),e(FD,yLo),e(_1,LLo),e(_e,xLo),e(_e,u1),e(u1,$ce),e($ce,$Lo),e(u1,kLo),e(u1,TD),e(TD,SLo),e(u1,RLo),e(_e,BLo),e(_e,b1),e(b1,kce),e(kce,PLo),e(b1,ILo),e(b1,MD),e(MD,qLo),e(b1,NLo),e(_e,jLo),e(_e,v1),e(v1,Sce),e(Sce,DLo),e(v1,GLo),e(v1,ED),e(ED,OLo),e(v1,VLo),e(_e,XLo),e(_e,F1),e(F1,Rce),e(Rce,zLo),e(F1,WLo),e(F1,CD),e(CD,QLo),e(F1,HLo),e(_e,ULo),e(_e,T1),e(T1,Bce),e(Bce,JLo),e(T1,YLo),e(T1,wD),e(wD,KLo),e(T1,ZLo),e(_e,e8o),e(_e,M1),e(M1,Pce),e(Pce,o8o),e(M1,r8o),e(M1,AD),e(AD,t8o),e(M1,a8o),e(_e,n8o),e(_e,E1),e(E1,Ice),e(Ice,s8o),e(E1,l8o),e(E1,yD),e(yD,i8o),e(E1,d8o),e(_e,c8o),e(_e,C1),e(C1,qce),e(qce,f8o),e(C1,m8o),e(C1,LD),e(LD,g8o),e(C1,h8o),e(_e,p8o),e(_e,w1),e(w1,Nce),e(Nce,_8o),e(w1,u8o),e(w1,xD),e(xD,b8o),e(w1,v8o),e(_e,F8o),e(_e,A1),e(A1,jce),e(jce,T8o),e(A1,M8o),e(A1,$D),e($D,E8o),e(A1,C8o),e(_e,w8o),e(_e,y1),e(y1,Dce),e(Dce,A8o),e(y1,y8o),e(y1,kD),e(kD,L8o),e(y1,x8o),e(eo,$8o),e(eo,L1),e(L1,k8o),e(L1,Gce),e(Gce,S8o),e(L1,R8o),e(L1,Oce),e(Oce,B8o),e(eo,P8o),M(x1,eo,null),b(f,hqe,u),b(f,ji,u),e(ji,$1),e($1,Vce),M(dy,Vce,null),e(ji,I8o),e(ji,Xce),e(Xce,q8o),b(f,pqe,u),b(f,Ro,u),M(cy,Ro,null),e(Ro,N8o),e(Ro,Di),e(Di,j8o),e(Di,SD),e(SD,D8o),e(Di,G8o),e(Di,RD),e(RD,O8o),e(Di,V8o),e(Ro,X8o),e(Ro,fy),e(fy,z8o),e(fy,zce),e(zce,W8o),e(fy,Q8o),e(Ro,H8o),e(Ro,it),M(my,it,null),e(it,U8o),e(it,Wce),e(Wce,J8o),e(it,Y8o),e(it,Gi),e(Gi,K8o),e(Gi,Qce),e(Qce,Z8o),e(Gi,e9o),e(Gi,BD),e(BD,o9o),e(Gi,r9o),e(it,t9o),M(k1,it,null),e(Ro,a9o),e(Ro,oo),M(gy,oo,null),e(oo,n9o),e(oo,Hce),e(Hce,s9o),e(oo,l9o),e(oo,Ra),e(Ra,i9o),e(Ra,Uce),e(Uce,d9o),e(Ra,c9o),e(Ra,Jce),e(Jce,f9o),e(Ra,m9o),e(Ra,Yce),e(Yce,g9o),e(Ra,h9o),e(oo,p9o),e(oo,q),e(q,S1),e(S1,Kce),e(Kce,_9o),e(S1,u9o),e(S1,PD),e(PD,b9o),e(S1,v9o),e(q,F9o),e(q,R1),e(R1,Zce),e(Zce,T9o),e(R1,M9o),e(R1,ID),e(ID,E9o),e(R1,C9o),e(q,w9o),e(q,B1),e(B1,efe),e(efe,A9o),e(B1,y9o),e(B1,qD),e(qD,L9o),e(B1,x9o),e(q,$9o),e(q,P1),e(P1,ofe),e(ofe,k9o),e(P1,S9o),e(P1,ND),e(ND,R9o),e(P1,B9o),e(q,P9o),e(q,I1),e(I1,rfe),e(rfe,I9o),e(I1,q9o),e(I1,jD),e(jD,N9o),e(I1,j9o),e(q,D9o),e(q,q1),e(q1,tfe),e(tfe,G9o),e(q1,O9o),e(q1,DD),e(DD,V9o),e(q1,X9o),e(q,z9o),e(q,N1),e(N1,afe),e(afe,W9o),e(N1,Q9o),e(N1,GD),e(GD,H9o),e(N1,U9o),e(q,J9o),e(q,j1),e(j1,nfe),e(nfe,Y9o),e(j1,K9o),e(j1,OD),e(OD,Z9o),e(j1,exo),e(q,oxo),e(q,D1),e(D1,sfe),e(sfe,rxo),e(D1,txo),e(D1,VD),e(VD,axo),e(D1,nxo),e(q,sxo),e(q,G1),e(G1,lfe),e(lfe,lxo),e(G1,ixo),e(G1,XD),e(XD,dxo),e(G1,cxo),e(q,fxo),e(q,O1),e(O1,ife),e(ife,mxo),e(O1,gxo),e(O1,zD),e(zD,hxo),e(O1,pxo),e(q,_xo),e(q,V1),e(V1,dfe),e(dfe,uxo),e(V1,bxo),e(V1,WD),e(WD,vxo),e(V1,Fxo),e(q,Txo),e(q,X1),e(X1,cfe),e(cfe,Mxo),e(X1,Exo),e(X1,QD),e(QD,Cxo),e(X1,wxo),e(q,Axo),e(q,z1),e(z1,ffe),e(ffe,yxo),e(z1,Lxo),e(z1,HD),e(HD,xxo),e(z1,$xo),e(q,kxo),e(q,W1),e(W1,mfe),e(mfe,Sxo),e(W1,Rxo),e(W1,UD),e(UD,Bxo),e(W1,Pxo),e(q,Ixo),e(q,Q1),e(Q1,gfe),e(gfe,qxo),e(Q1,Nxo),e(Q1,JD),e(JD,jxo),e(Q1,Dxo),e(q,Gxo),e(q,H1),e(H1,hfe),e(hfe,Oxo),e(H1,Vxo),e(H1,YD),e(YD,Xxo),e(H1,zxo),e(q,Wxo),e(q,U1),e(U1,pfe),e(pfe,Qxo),e(U1,Hxo),e(U1,KD),e(KD,Uxo),e(U1,Jxo),e(q,Yxo),e(q,J1),e(J1,_fe),e(_fe,Kxo),e(J1,Zxo),e(J1,ZD),e(ZD,e$o),e(J1,o$o),e(q,r$o),e(q,Y1),e(Y1,ufe),e(ufe,t$o),e(Y1,a$o),e(Y1,eG),e(eG,n$o),e(Y1,s$o),e(q,l$o),e(q,K1),e(K1,bfe),e(bfe,i$o),e(K1,d$o),e(K1,oG),e(oG,c$o),e(K1,f$o),e(q,m$o),e(q,Z1),e(Z1,vfe),e(vfe,g$o),e(Z1,h$o),e(Z1,rG),e(rG,p$o),e(Z1,_$o),e(q,u$o),e(q,eb),e(eb,Ffe),e(Ffe,b$o),e(eb,v$o),e(eb,tG),e(tG,F$o),e(eb,T$o),e(q,M$o),e(q,ob),e(ob,Tfe),e(Tfe,E$o),e(ob,C$o),e(ob,aG),e(aG,w$o),e(ob,A$o),e(q,y$o),e(q,rb),e(rb,Mfe),e(Mfe,L$o),e(rb,x$o),e(rb,nG),e(nG,$$o),e(rb,k$o),e(q,S$o),e(q,tb),e(tb,Efe),e(Efe,R$o),e(tb,B$o),e(tb,sG),e(sG,P$o),e(tb,I$o),e(q,q$o),e(q,ab),e(ab,Cfe),e(Cfe,N$o),e(ab,j$o),e(ab,lG),e(lG,D$o),e(ab,G$o),e(q,O$o),e(q,nb),e(nb,wfe),e(wfe,V$o),e(nb,X$o),e(nb,iG),e(iG,z$o),e(nb,W$o),e(q,Q$o),e(q,sb),e(sb,Afe),e(Afe,H$o),e(sb,U$o),e(sb,dG),e(dG,J$o),e(sb,Y$o),e(q,K$o),e(q,lb),e(lb,yfe),e(yfe,Z$o),e(lb,eko),e(lb,cG),e(cG,oko),e(lb,rko),e(q,tko),e(q,ib),e(ib,Lfe),e(Lfe,ako),e(ib,nko),e(ib,fG),e(fG,sko),e(ib,lko),e(q,iko),e(q,db),e(db,xfe),e(xfe,dko),e(db,cko),e(db,mG),e(mG,fko),e(db,mko),e(q,gko),e(q,cb),e(cb,$fe),e($fe,hko),e(cb,pko),e(cb,gG),e(gG,_ko),e(cb,uko),e(q,bko),e(q,fb),e(fb,kfe),e(kfe,vko),e(fb,Fko),e(fb,hG),e(hG,Tko),e(fb,Mko),e(q,Eko),e(q,mb),e(mb,Sfe),e(Sfe,Cko),e(mb,wko),e(mb,pG),e(pG,Ako),e(mb,yko),e(q,Lko),e(q,gb),e(gb,Rfe),e(Rfe,xko),e(gb,$ko),e(gb,_G),e(_G,kko),e(gb,Sko),e(q,Rko),e(q,hb),e(hb,Bfe),e(Bfe,Bko),e(hb,Pko),e(hb,uG),e(uG,Iko),e(hb,qko),e(q,Nko),e(q,pb),e(pb,Pfe),e(Pfe,jko),e(pb,Dko),e(pb,bG),e(bG,Gko),e(pb,Oko),e(q,Vko),e(q,_b),e(_b,Ife),e(Ife,Xko),e(_b,zko),e(_b,vG),e(vG,Wko),e(_b,Qko),e(q,Hko),e(q,ub),e(ub,qfe),e(qfe,Uko),e(ub,Jko),e(ub,FG),e(FG,Yko),e(ub,Kko),e(q,Zko),e(q,bb),e(bb,Nfe),e(Nfe,eSo),e(bb,oSo),e(bb,TG),e(TG,rSo),e(bb,tSo),e(q,aSo),e(q,vb),e(vb,jfe),e(jfe,nSo),e(vb,sSo),e(vb,MG),e(MG,lSo),e(vb,iSo),e(q,dSo),e(q,Fb),e(Fb,Dfe),e(Dfe,cSo),e(Fb,fSo),e(Fb,EG),e(EG,mSo),e(Fb,gSo),e(q,hSo),e(q,Tb),e(Tb,Gfe),e(Gfe,pSo),e(Tb,_So),e(Tb,CG),e(CG,uSo),e(Tb,bSo),e(q,vSo),e(q,Mb),e(Mb,Ofe),e(Ofe,FSo),e(Mb,TSo),e(Mb,wG),e(wG,MSo),e(Mb,ESo),e(q,CSo),e(q,Eb),e(Eb,Vfe),e(Vfe,wSo),e(Eb,ASo),e(Eb,AG),e(AG,ySo),e(Eb,LSo),e(oo,xSo),e(oo,Cb),e(Cb,$So),e(Cb,Xfe),e(Xfe,kSo),e(Cb,SSo),e(Cb,zfe),e(zfe,RSo),e(oo,BSo),M(wb,oo,null),b(f,_qe,u),b(f,Oi,u),e(Oi,Ab),e(Ab,Wfe),M(hy,Wfe,null),e(Oi,PSo),e(Oi,Qfe),e(Qfe,ISo),b(f,uqe,u),b(f,Bo,u),M(py,Bo,null),e(Bo,qSo),e(Bo,Vi),e(Vi,NSo),e(Vi,yG),e(yG,jSo),e(Vi,DSo),e(Vi,LG),e(LG,GSo),e(Vi,OSo),e(Bo,VSo),e(Bo,_y),e(_y,XSo),e(_y,Hfe),e(Hfe,zSo),e(_y,WSo),e(Bo,QSo),e(Bo,dt),M(uy,dt,null),e(dt,HSo),e(dt,Ufe),e(Ufe,USo),e(dt,JSo),e(dt,Xi),e(Xi,YSo),e(Xi,Jfe),e(Jfe,KSo),e(Xi,ZSo),e(Xi,xG),e(xG,eRo),e(Xi,oRo),e(dt,rRo),M(yb,dt,null),e(Bo,tRo),e(Bo,ro),M(by,ro,null),e(ro,aRo),e(ro,Yfe),e(Yfe,nRo),e(ro,sRo),e(ro,Ba),e(Ba,lRo),e(Ba,Kfe),e(Kfe,iRo),e(Ba,dRo),e(Ba,Zfe),e(Zfe,cRo),e(Ba,fRo),e(Ba,eme),e(eme,mRo),e(Ba,gRo),e(ro,hRo),e(ro,Y),e(Y,Lb),e(Lb,ome),e(ome,pRo),e(Lb,_Ro),e(Lb,$G),e($G,uRo),e(Lb,bRo),e(Y,vRo),e(Y,xb),e(xb,rme),e(rme,FRo),e(xb,TRo),e(xb,kG),e(kG,MRo),e(xb,ERo),e(Y,CRo),e(Y,$b),e($b,tme),e(tme,wRo),e($b,ARo),e($b,SG),e(SG,yRo),e($b,LRo),e(Y,xRo),e(Y,kb),e(kb,ame),e(ame,$Ro),e(kb,kRo),e(kb,RG),e(RG,SRo),e(kb,RRo),e(Y,BRo),e(Y,Sb),e(Sb,nme),e(nme,PRo),e(Sb,IRo),e(Sb,BG),e(BG,qRo),e(Sb,NRo),e(Y,jRo),e(Y,Rb),e(Rb,sme),e(sme,DRo),e(Rb,GRo),e(Rb,PG),e(PG,ORo),e(Rb,VRo),e(Y,XRo),e(Y,Bb),e(Bb,lme),e(lme,zRo),e(Bb,WRo),e(Bb,IG),e(IG,QRo),e(Bb,HRo),e(Y,URo),e(Y,Pb),e(Pb,ime),e(ime,JRo),e(Pb,YRo),e(Pb,qG),e(qG,KRo),e(Pb,ZRo),e(Y,eBo),e(Y,Ib),e(Ib,dme),e(dme,oBo),e(Ib,rBo),e(Ib,NG),e(NG,tBo),e(Ib,aBo),e(Y,nBo),e(Y,qb),e(qb,cme),e(cme,sBo),e(qb,lBo),e(qb,jG),e(jG,iBo),e(qb,dBo),e(Y,cBo),e(Y,Nb),e(Nb,fme),e(fme,fBo),e(Nb,mBo),e(Nb,DG),e(DG,gBo),e(Nb,hBo),e(Y,pBo),e(Y,jb),e(jb,mme),e(mme,_Bo),e(jb,uBo),e(jb,GG),e(GG,bBo),e(jb,vBo),e(Y,FBo),e(Y,Db),e(Db,gme),e(gme,TBo),e(Db,MBo),e(Db,OG),e(OG,EBo),e(Db,CBo),e(Y,wBo),e(Y,Gb),e(Gb,hme),e(hme,ABo),e(Gb,yBo),e(Gb,VG),e(VG,LBo),e(Gb,xBo),e(Y,$Bo),e(Y,Ob),e(Ob,pme),e(pme,kBo),e(Ob,SBo),e(Ob,XG),e(XG,RBo),e(Ob,BBo),e(Y,PBo),e(Y,Vb),e(Vb,_me),e(_me,IBo),e(Vb,qBo),e(Vb,zG),e(zG,NBo),e(Vb,jBo),e(Y,DBo),e(Y,Xb),e(Xb,ume),e(ume,GBo),e(Xb,OBo),e(Xb,WG),e(WG,VBo),e(Xb,XBo),e(Y,zBo),e(Y,zb),e(zb,bme),e(bme,WBo),e(zb,QBo),e(zb,QG),e(QG,HBo),e(zb,UBo),e(Y,JBo),e(Y,Wb),e(Wb,vme),e(vme,YBo),e(Wb,KBo),e(Wb,HG),e(HG,ZBo),e(Wb,ePo),e(Y,oPo),e(Y,Qb),e(Qb,Fme),e(Fme,rPo),e(Qb,tPo),e(Qb,UG),e(UG,aPo),e(Qb,nPo),e(Y,sPo),e(Y,Hb),e(Hb,Tme),e(Tme,lPo),e(Hb,iPo),e(Hb,JG),e(JG,dPo),e(Hb,cPo),e(Y,fPo),e(Y,Ub),e(Ub,Mme),e(Mme,mPo),e(Ub,gPo),e(Ub,YG),e(YG,hPo),e(Ub,pPo),e(Y,_Po),e(Y,Jb),e(Jb,Eme),e(Eme,uPo),e(Jb,bPo),e(Jb,KG),e(KG,vPo),e(Jb,FPo),e(Y,TPo),e(Y,Yb),e(Yb,Cme),e(Cme,MPo),e(Yb,EPo),e(Yb,ZG),e(ZG,CPo),e(Yb,wPo),e(Y,APo),e(Y,Kb),e(Kb,wme),e(wme,yPo),e(Kb,LPo),e(Kb,eO),e(eO,xPo),e(Kb,$Po),e(Y,kPo),e(Y,Zb),e(Zb,Ame),e(Ame,SPo),e(Zb,RPo),e(Zb,oO),e(oO,BPo),e(Zb,PPo),e(Y,IPo),e(Y,ev),e(ev,yme),e(yme,qPo),e(ev,NPo),e(ev,rO),e(rO,jPo),e(ev,DPo),e(Y,GPo),e(Y,ov),e(ov,Lme),e(Lme,OPo),e(ov,VPo),e(ov,tO),e(tO,XPo),e(ov,zPo),e(Y,WPo),e(Y,rv),e(rv,xme),e(xme,QPo),e(rv,HPo),e(rv,aO),e(aO,UPo),e(rv,JPo),e(ro,YPo),e(ro,tv),e(tv,KPo),e(tv,$me),e($me,ZPo),e(tv,eIo),e(tv,kme),e(kme,oIo),e(ro,rIo),M(av,ro,null),b(f,bqe,u),b(f,zi,u),e(zi,nv),e(nv,Sme),M(vy,Sme,null),e(zi,tIo),e(zi,Rme),e(Rme,aIo),b(f,vqe,u),b(f,Po,u),M(Fy,Po,null),e(Po,nIo),e(Po,Wi),e(Wi,sIo),e(Wi,nO),e(nO,lIo),e(Wi,iIo),e(Wi,sO),e(sO,dIo),e(Wi,cIo),e(Po,fIo),e(Po,Ty),e(Ty,mIo),e(Ty,Bme),e(Bme,gIo),e(Ty,hIo),e(Po,pIo),e(Po,ct),M(My,ct,null),e(ct,_Io),e(ct,Pme),e(Pme,uIo),e(ct,bIo),e(ct,Qi),e(Qi,vIo),e(Qi,Ime),e(Ime,FIo),e(Qi,TIo),e(Qi,lO),e(lO,MIo),e(Qi,EIo),e(ct,CIo),M(sv,ct,null),e(Po,wIo),e(Po,to),M(Ey,to,null),e(to,AIo),e(to,qme),e(qme,yIo),e(to,LIo),e(to,Pa),e(Pa,xIo),e(Pa,Nme),e(Nme,$Io),e(Pa,kIo),e(Pa,jme),e(jme,SIo),e(Pa,RIo),e(Pa,Dme),e(Dme,BIo),e(Pa,PIo),e(to,IIo),e(to,Yr),e(Yr,lv),e(lv,Gme),e(Gme,qIo),e(lv,NIo),e(lv,iO),e(iO,jIo),e(lv,DIo),e(Yr,GIo),e(Yr,iv),e(iv,Ome),e(Ome,OIo),e(iv,VIo),e(iv,dO),e(dO,XIo),e(iv,zIo),e(Yr,WIo),e(Yr,dv),e(dv,Vme),e(Vme,QIo),e(dv,HIo),e(dv,cO),e(cO,UIo),e(dv,JIo),e(Yr,YIo),e(Yr,cv),e(cv,Xme),e(Xme,KIo),e(cv,ZIo),e(cv,fO),e(fO,eqo),e(cv,oqo),e(Yr,rqo),e(Yr,fv),e(fv,zme),e(zme,tqo),e(fv,aqo),e(fv,mO),e(mO,nqo),e(fv,sqo),e(to,lqo),e(to,mv),e(mv,iqo),e(mv,Wme),e(Wme,dqo),e(mv,cqo),e(mv,Qme),e(Qme,fqo),e(to,mqo),M(gv,to,null),b(f,Fqe,u),b(f,Hi,u),e(Hi,hv),e(hv,Hme),M(Cy,Hme,null),e(Hi,gqo),e(Hi,Ume),e(Ume,hqo),b(f,Tqe,u),b(f,Io,u),M(wy,Io,null),e(Io,pqo),e(Io,Ui),e(Ui,_qo),e(Ui,gO),e(gO,uqo),e(Ui,bqo),e(Ui,hO),e(hO,vqo),e(Ui,Fqo),e(Io,Tqo),e(Io,Ay),e(Ay,Mqo),e(Ay,Jme),e(Jme,Eqo),e(Ay,Cqo),e(Io,wqo),e(Io,ft),M(yy,ft,null),e(ft,Aqo),e(ft,Yme),e(Yme,yqo),e(ft,Lqo),e(ft,Ji),e(Ji,xqo),e(Ji,Kme),e(Kme,$qo),e(Ji,kqo),e(Ji,pO),e(pO,Sqo),e(Ji,Rqo),e(ft,Bqo),M(pv,ft,null),e(Io,Pqo),e(Io,ao),M(Ly,ao,null),e(ao,Iqo),e(ao,Zme),e(Zme,qqo),e(ao,Nqo),e(ao,Ia),e(Ia,jqo),e(Ia,ege),e(ege,Dqo),e(Ia,Gqo),e(Ia,oge),e(oge,Oqo),e(Ia,Vqo),e(Ia,rge),e(rge,Xqo),e(Ia,zqo),e(ao,Wqo),e(ao,U),e(U,_v),e(_v,tge),e(tge,Qqo),e(_v,Hqo),e(_v,_O),e(_O,Uqo),e(_v,Jqo),e(U,Yqo),e(U,uv),e(uv,age),e(age,Kqo),e(uv,Zqo),e(uv,uO),e(uO,eNo),e(uv,oNo),e(U,rNo),e(U,bv),e(bv,nge),e(nge,tNo),e(bv,aNo),e(bv,bO),e(bO,nNo),e(bv,sNo),e(U,lNo),e(U,vv),e(vv,sge),e(sge,iNo),e(vv,dNo),e(vv,vO),e(vO,cNo),e(vv,fNo),e(U,mNo),e(U,Fv),e(Fv,lge),e(lge,gNo),e(Fv,hNo),e(Fv,FO),e(FO,pNo),e(Fv,_No),e(U,uNo),e(U,Tv),e(Tv,ige),e(ige,bNo),e(Tv,vNo),e(Tv,TO),e(TO,FNo),e(Tv,TNo),e(U,MNo),e(U,Mv),e(Mv,dge),e(dge,ENo),e(Mv,CNo),e(Mv,MO),e(MO,wNo),e(Mv,ANo),e(U,yNo),e(U,Ev),e(Ev,cge),e(cge,LNo),e(Ev,xNo),e(Ev,EO),e(EO,$No),e(Ev,kNo),e(U,SNo),e(U,Cv),e(Cv,fge),e(fge,RNo),e(Cv,BNo),e(Cv,CO),e(CO,PNo),e(Cv,INo),e(U,qNo),e(U,wv),e(wv,mge),e(mge,NNo),e(wv,jNo),e(wv,wO),e(wO,DNo),e(wv,GNo),e(U,ONo),e(U,Av),e(Av,gge),e(gge,VNo),e(Av,XNo),e(Av,AO),e(AO,zNo),e(Av,WNo),e(U,QNo),e(U,yv),e(yv,hge),e(hge,HNo),e(yv,UNo),e(yv,yO),e(yO,JNo),e(yv,YNo),e(U,KNo),e(U,Lv),e(Lv,pge),e(pge,ZNo),e(Lv,ejo),e(Lv,LO),e(LO,ojo),e(Lv,rjo),e(U,tjo),e(U,xv),e(xv,_ge),e(_ge,ajo),e(xv,njo),e(xv,xO),e(xO,sjo),e(xv,ljo),e(U,ijo),e(U,$v),e($v,uge),e(uge,djo),e($v,cjo),e($v,$O),e($O,fjo),e($v,mjo),e(U,gjo),e(U,kv),e(kv,bge),e(bge,hjo),e(kv,pjo),e(kv,kO),e(kO,_jo),e(kv,ujo),e(U,bjo),e(U,Sv),e(Sv,vge),e(vge,vjo),e(Sv,Fjo),e(Sv,SO),e(SO,Tjo),e(Sv,Mjo),e(U,Ejo),e(U,Rv),e(Rv,Fge),e(Fge,Cjo),e(Rv,wjo),e(Rv,RO),e(RO,Ajo),e(Rv,yjo),e(U,Ljo),e(U,Bv),e(Bv,Tge),e(Tge,xjo),e(Bv,$jo),e(Bv,BO),e(BO,kjo),e(Bv,Sjo),e(U,Rjo),e(U,Pv),e(Pv,Mge),e(Mge,Bjo),e(Pv,Pjo),e(Pv,PO),e(PO,Ijo),e(Pv,qjo),e(U,Njo),e(U,Iv),e(Iv,Ege),e(Ege,jjo),e(Iv,Djo),e(Iv,IO),e(IO,Gjo),e(Iv,Ojo),e(U,Vjo),e(U,qv),e(qv,Cge),e(Cge,Xjo),e(qv,zjo),e(qv,qO),e(qO,Wjo),e(qv,Qjo),e(U,Hjo),e(U,Nv),e(Nv,wge),e(wge,Ujo),e(Nv,Jjo),e(Nv,NO),e(NO,Yjo),e(Nv,Kjo),e(U,Zjo),e(U,jv),e(jv,Age),e(Age,eDo),e(jv,oDo),e(jv,jO),e(jO,rDo),e(jv,tDo),e(U,aDo),e(U,Dv),e(Dv,yge),e(yge,nDo),e(Dv,sDo),e(Dv,DO),e(DO,lDo),e(Dv,iDo),e(U,dDo),e(U,Gv),e(Gv,Lge),e(Lge,cDo),e(Gv,fDo),e(Gv,GO),e(GO,mDo),e(Gv,gDo),e(U,hDo),e(U,Ov),e(Ov,xge),e(xge,pDo),e(Ov,_Do),e(Ov,OO),e(OO,uDo),e(Ov,bDo),e(U,vDo),e(U,Vv),e(Vv,$ge),e($ge,FDo),e(Vv,TDo),e(Vv,VO),e(VO,MDo),e(Vv,EDo),e(U,CDo),e(U,Xv),e(Xv,kge),e(kge,wDo),e(Xv,ADo),e(Xv,XO),e(XO,yDo),e(Xv,LDo),e(U,xDo),e(U,zv),e(zv,Sge),e(Sge,$Do),e(zv,kDo),e(zv,zO),e(zO,SDo),e(zv,RDo),e(U,BDo),e(U,Wv),e(Wv,Rge),e(Rge,PDo),e(Wv,IDo),e(Wv,WO),e(WO,qDo),e(Wv,NDo),e(U,jDo),e(U,Qv),e(Qv,Bge),e(Bge,DDo),e(Qv,GDo),e(Qv,QO),e(QO,ODo),e(Qv,VDo),e(U,XDo),e(U,Hv),e(Hv,Pge),e(Pge,zDo),e(Hv,WDo),e(Hv,HO),e(HO,QDo),e(Hv,HDo),e(ao,UDo),e(ao,Uv),e(Uv,JDo),e(Uv,Ige),e(Ige,YDo),e(Uv,KDo),e(Uv,qge),e(qge,ZDo),e(ao,eGo),M(Jv,ao,null),b(f,Mqe,u),b(f,Yi,u),e(Yi,Yv),e(Yv,Nge),M(xy,Nge,null),e(Yi,oGo),e(Yi,jge),e(jge,rGo),b(f,Eqe,u),b(f,qo,u),M($y,qo,null),e(qo,tGo),e(qo,Ki),e(Ki,aGo),e(Ki,UO),e(UO,nGo),e(Ki,sGo),e(Ki,JO),e(JO,lGo),e(Ki,iGo),e(qo,dGo),e(qo,ky),e(ky,cGo),e(ky,Dge),e(Dge,fGo),e(ky,mGo),e(qo,gGo),e(qo,mt),M(Sy,mt,null),e(mt,hGo),e(mt,Gge),e(Gge,pGo),e(mt,_Go),e(mt,Zi),e(Zi,uGo),e(Zi,Oge),e(Oge,bGo),e(Zi,vGo),e(Zi,YO),e(YO,FGo),e(Zi,TGo),e(mt,MGo),M(Kv,mt,null),e(qo,EGo),e(qo,no),M(Ry,no,null),e(no,CGo),e(no,Vge),e(Vge,wGo),e(no,AGo),e(no,qa),e(qa,yGo),e(qa,Xge),e(Xge,LGo),e(qa,xGo),e(qa,zge),e(zge,$Go),e(qa,kGo),e(qa,Wge),e(Wge,SGo),e(qa,RGo),e(no,BGo),e(no,V),e(V,Zv),e(Zv,Qge),e(Qge,PGo),e(Zv,IGo),e(Zv,KO),e(KO,qGo),e(Zv,NGo),e(V,jGo),e(V,eF),e(eF,Hge),e(Hge,DGo),e(eF,GGo),e(eF,ZO),e(ZO,OGo),e(eF,VGo),e(V,XGo),e(V,oF),e(oF,Uge),e(Uge,zGo),e(oF,WGo),e(oF,eV),e(eV,QGo),e(oF,HGo),e(V,UGo),e(V,rF),e(rF,Jge),e(Jge,JGo),e(rF,YGo),e(rF,oV),e(oV,KGo),e(rF,ZGo),e(V,eOo),e(V,tF),e(tF,Yge),e(Yge,oOo),e(tF,rOo),e(tF,rV),e(rV,tOo),e(tF,aOo),e(V,nOo),e(V,aF),e(aF,Kge),e(Kge,sOo),e(aF,lOo),e(aF,tV),e(tV,iOo),e(aF,dOo),e(V,cOo),e(V,nF),e(nF,Zge),e(Zge,fOo),e(nF,mOo),e(nF,aV),e(aV,gOo),e(nF,hOo),e(V,pOo),e(V,sF),e(sF,ehe),e(ehe,_Oo),e(sF,uOo),e(sF,nV),e(nV,bOo),e(sF,vOo),e(V,FOo),e(V,lF),e(lF,ohe),e(ohe,TOo),e(lF,MOo),e(lF,sV),e(sV,EOo),e(lF,COo),e(V,wOo),e(V,iF),e(iF,rhe),e(rhe,AOo),e(iF,yOo),e(iF,lV),e(lV,LOo),e(iF,xOo),e(V,$Oo),e(V,dF),e(dF,the),e(the,kOo),e(dF,SOo),e(dF,iV),e(iV,ROo),e(dF,BOo),e(V,POo),e(V,cF),e(cF,ahe),e(ahe,IOo),e(cF,qOo),e(cF,dV),e(dV,NOo),e(cF,jOo),e(V,DOo),e(V,fF),e(fF,nhe),e(nhe,GOo),e(fF,OOo),e(fF,cV),e(cV,VOo),e(fF,XOo),e(V,zOo),e(V,mF),e(mF,she),e(she,WOo),e(mF,QOo),e(mF,fV),e(fV,HOo),e(mF,UOo),e(V,JOo),e(V,gF),e(gF,lhe),e(lhe,YOo),e(gF,KOo),e(gF,mV),e(mV,ZOo),e(gF,eVo),e(V,oVo),e(V,hF),e(hF,ihe),e(ihe,rVo),e(hF,tVo),e(hF,gV),e(gV,aVo),e(hF,nVo),e(V,sVo),e(V,pF),e(pF,dhe),e(dhe,lVo),e(pF,iVo),e(pF,hV),e(hV,dVo),e(pF,cVo),e(V,fVo),e(V,_F),e(_F,che),e(che,mVo),e(_F,gVo),e(_F,pV),e(pV,hVo),e(_F,pVo),e(V,_Vo),e(V,uF),e(uF,fhe),e(fhe,uVo),e(uF,bVo),e(uF,_V),e(_V,vVo),e(uF,FVo),e(V,TVo),e(V,bF),e(bF,mhe),e(mhe,MVo),e(bF,EVo),e(bF,uV),e(uV,CVo),e(bF,wVo),e(V,AVo),e(V,vF),e(vF,ghe),e(ghe,yVo),e(vF,LVo),e(vF,bV),e(bV,xVo),e(vF,$Vo),e(V,kVo),e(V,FF),e(FF,hhe),e(hhe,SVo),e(FF,RVo),e(FF,vV),e(vV,BVo),e(FF,PVo),e(V,IVo),e(V,TF),e(TF,phe),e(phe,qVo),e(TF,NVo),e(TF,FV),e(FV,jVo),e(TF,DVo),e(V,GVo),e(V,MF),e(MF,_he),e(_he,OVo),e(MF,VVo),e(MF,TV),e(TV,XVo),e(MF,zVo),e(V,WVo),e(V,EF),e(EF,uhe),e(uhe,QVo),e(EF,HVo),e(EF,MV),e(MV,UVo),e(EF,JVo),e(V,YVo),e(V,CF),e(CF,bhe),e(bhe,KVo),e(CF,ZVo),e(CF,EV),e(EV,eXo),e(CF,oXo),e(V,rXo),e(V,wF),e(wF,vhe),e(vhe,tXo),e(wF,aXo),e(wF,CV),e(CV,nXo),e(wF,sXo),e(V,lXo),e(V,AF),e(AF,Fhe),e(Fhe,iXo),e(AF,dXo),e(AF,wV),e(wV,cXo),e(AF,fXo),e(V,mXo),e(V,yF),e(yF,The),e(The,gXo),e(yF,hXo),e(yF,AV),e(AV,pXo),e(yF,_Xo),e(V,uXo),e(V,LF),e(LF,Mhe),e(Mhe,bXo),e(LF,vXo),e(LF,yV),e(yV,FXo),e(LF,TXo),e(V,MXo),e(V,xF),e(xF,Ehe),e(Ehe,EXo),e(xF,CXo),e(xF,LV),e(LV,wXo),e(xF,AXo),e(V,yXo),e(V,$F),e($F,Che),e(Che,LXo),e($F,xXo),e($F,xV),e(xV,$Xo),e($F,kXo),e(V,SXo),e(V,kF),e(kF,whe),e(whe,RXo),e(kF,BXo),e(kF,$V),e($V,PXo),e(kF,IXo),e(V,qXo),e(V,SF),e(SF,Ahe),e(Ahe,NXo),e(SF,jXo),e(SF,kV),e(kV,DXo),e(SF,GXo),e(V,OXo),e(V,RF),e(RF,yhe),e(yhe,VXo),e(RF,XXo),e(RF,SV),e(SV,zXo),e(RF,WXo),e(V,QXo),e(V,BF),e(BF,Lhe),e(Lhe,HXo),e(BF,UXo),e(BF,RV),e(RV,JXo),e(BF,YXo),e(V,KXo),e(V,PF),e(PF,xhe),e(xhe,ZXo),e(PF,ezo),e(PF,BV),e(BV,ozo),e(PF,rzo),e(V,tzo),e(V,IF),e(IF,$he),e($he,azo),e(IF,nzo),e(IF,PV),e(PV,szo),e(IF,lzo),e(V,izo),e(V,qF),e(qF,khe),e(khe,dzo),e(qF,czo),e(qF,IV),e(IV,fzo),e(qF,mzo),e(no,gzo),e(no,NF),e(NF,hzo),e(NF,She),e(She,pzo),e(NF,_zo),e(NF,Rhe),e(Rhe,uzo),e(no,bzo),M(jF,no,null),b(f,Cqe,u),b(f,ed,u),e(ed,DF),e(DF,Bhe),M(By,Bhe,null),e(ed,vzo),e(ed,Phe),e(Phe,Fzo),b(f,wqe,u),b(f,No,u),M(Py,No,null),e(No,Tzo),e(No,od),e(od,Mzo),e(od,qV),e(qV,Ezo),e(od,Czo),e(od,NV),e(NV,wzo),e(od,Azo),e(No,yzo),e(No,Iy),e(Iy,Lzo),e(Iy,Ihe),e(Ihe,xzo),e(Iy,$zo),e(No,kzo),e(No,gt),M(qy,gt,null),e(gt,Szo),e(gt,qhe),e(qhe,Rzo),e(gt,Bzo),e(gt,rd),e(rd,Pzo),e(rd,Nhe),e(Nhe,Izo),e(rd,qzo),e(rd,jV),e(jV,Nzo),e(rd,jzo),e(gt,Dzo),M(GF,gt,null),e(No,Gzo),e(No,so),M(Ny,so,null),e(so,Ozo),e(so,jhe),e(jhe,Vzo),e(so,Xzo),e(so,Na),e(Na,zzo),e(Na,Dhe),e(Dhe,Wzo),e(Na,Qzo),e(Na,Ghe),e(Ghe,Hzo),e(Na,Uzo),e(Na,Ohe),e(Ohe,Jzo),e(Na,Yzo),e(so,Kzo),e(so,Vhe),e(Vhe,OF),e(OF,Xhe),e(Xhe,Zzo),e(OF,eWo),e(OF,DV),e(DV,oWo),e(OF,rWo),e(so,tWo),e(so,VF),e(VF,aWo),e(VF,zhe),e(zhe,nWo),e(VF,sWo),e(VF,Whe),e(Whe,lWo),e(so,iWo),M(XF,so,null),b(f,Aqe,u),b(f,td,u),e(td,zF),e(zF,Qhe),M(jy,Qhe,null),e(td,dWo),e(td,Hhe),e(Hhe,cWo),b(f,yqe,u),b(f,jo,u),M(Dy,jo,null),e(jo,fWo),e(jo,ad),e(ad,mWo),e(ad,GV),e(GV,gWo),e(ad,hWo),e(ad,OV),e(OV,pWo),e(ad,_Wo),e(jo,uWo),e(jo,Gy),e(Gy,bWo),e(Gy,Uhe),e(Uhe,vWo),e(Gy,FWo),e(jo,TWo),e(jo,ht),M(Oy,ht,null),e(ht,MWo),e(ht,Jhe),e(Jhe,EWo),e(ht,CWo),e(ht,nd),e(nd,wWo),e(nd,Yhe),e(Yhe,AWo),e(nd,yWo),e(nd,VV),e(VV,LWo),e(nd,xWo),e(ht,$Wo),M(WF,ht,null),e(jo,kWo),e(jo,lo),M(Vy,lo,null),e(lo,SWo),e(lo,Khe),e(Khe,RWo),e(lo,BWo),e(lo,ja),e(ja,PWo),e(ja,Zhe),e(Zhe,IWo),e(ja,qWo),e(ja,epe),e(epe,NWo),e(ja,jWo),e(ja,ope),e(ope,DWo),e(ja,GWo),e(lo,OWo),e(lo,Fe),e(Fe,QF),e(QF,rpe),e(rpe,VWo),e(QF,XWo),e(QF,XV),e(XV,zWo),e(QF,WWo),e(Fe,QWo),e(Fe,HF),e(HF,tpe),e(tpe,HWo),e(HF,UWo),e(HF,zV),e(zV,JWo),e(HF,YWo),e(Fe,KWo),e(Fe,UF),e(UF,ape),e(ape,ZWo),e(UF,eQo),e(UF,WV),e(WV,oQo),e(UF,rQo),e(Fe,tQo),e(Fe,Bs),e(Bs,npe),e(npe,aQo),e(Bs,nQo),e(Bs,QV),e(QV,sQo),e(Bs,lQo),e(Bs,HV),e(HV,iQo),e(Bs,dQo),e(Fe,cQo),e(Fe,JF),e(JF,spe),e(spe,fQo),e(JF,mQo),e(JF,UV),e(UV,gQo),e(JF,hQo),e(Fe,pQo),e(Fe,pt),e(pt,lpe),e(lpe,_Qo),e(pt,uQo),e(pt,JV),e(JV,bQo),e(pt,vQo),e(pt,YV),e(YV,FQo),e(pt,TQo),e(pt,KV),e(KV,MQo),e(pt,EQo),e(Fe,CQo),e(Fe,YF),e(YF,ipe),e(ipe,wQo),e(YF,AQo),e(YF,ZV),e(ZV,yQo),e(YF,LQo),e(Fe,xQo),e(Fe,KF),e(KF,dpe),e(dpe,$Qo),e(KF,kQo),e(KF,eX),e(eX,SQo),e(KF,RQo),e(Fe,BQo),e(Fe,ZF),e(ZF,cpe),e(cpe,PQo),e(ZF,IQo),e(ZF,oX),e(oX,qQo),e(ZF,NQo),e(Fe,jQo),e(Fe,e0),e(e0,fpe),e(fpe,DQo),e(e0,GQo),e(e0,rX),e(rX,OQo),e(e0,VQo),e(Fe,XQo),e(Fe,o0),e(o0,mpe),e(mpe,zQo),e(o0,WQo),e(o0,tX),e(tX,QQo),e(o0,HQo),e(Fe,UQo),e(Fe,r0),e(r0,gpe),e(gpe,JQo),e(r0,YQo),e(r0,aX),e(aX,KQo),e(r0,ZQo),e(Fe,eHo),e(Fe,t0),e(t0,hpe),e(hpe,oHo),e(t0,rHo),e(t0,nX),e(nX,tHo),e(t0,aHo),e(lo,nHo),e(lo,a0),e(a0,sHo),e(a0,ppe),e(ppe,lHo),e(a0,iHo),e(a0,_pe),e(_pe,dHo),e(lo,cHo),M(n0,lo,null),b(f,Lqe,u),b(f,sd,u),e(sd,s0),e(s0,upe),M(Xy,upe,null),e(sd,fHo),e(sd,bpe),e(bpe,mHo),b(f,xqe,u),b(f,Do,u),M(zy,Do,null),e(Do,gHo),e(Do,ld),e(ld,hHo),e(ld,sX),e(sX,pHo),e(ld,_Ho),e(ld,lX),e(lX,uHo),e(ld,bHo),e(Do,vHo),e(Do,Wy),e(Wy,FHo),e(Wy,vpe),e(vpe,THo),e(Wy,MHo),e(Do,EHo),e(Do,_t),M(Qy,_t,null),e(_t,CHo),e(_t,Fpe),e(Fpe,wHo),e(_t,AHo),e(_t,id),e(id,yHo),e(id,Tpe),e(Tpe,LHo),e(id,xHo),e(id,iX),e(iX,$Ho),e(id,kHo),e(_t,SHo),M(l0,_t,null),e(Do,RHo),e(Do,io),M(Hy,io,null),e(io,BHo),e(io,Mpe),e(Mpe,PHo),e(io,IHo),e(io,Da),e(Da,qHo),e(Da,Epe),e(Epe,NHo),e(Da,jHo),e(Da,Cpe),e(Cpe,DHo),e(Da,GHo),e(Da,wpe),e(wpe,OHo),e(Da,VHo),e(io,XHo),e(io,Ape),e(Ape,i0),e(i0,ype),e(ype,zHo),e(i0,WHo),e(i0,dX),e(dX,QHo),e(i0,HHo),e(io,UHo),e(io,d0),e(d0,JHo),e(d0,Lpe),e(Lpe,YHo),e(d0,KHo),e(d0,xpe),e(xpe,ZHo),e(io,eUo),M(c0,io,null),b(f,$qe,u),b(f,dd,u),e(dd,f0),e(f0,$pe),M(Uy,$pe,null),e(dd,oUo),e(dd,kpe),e(kpe,rUo),b(f,kqe,u),b(f,Go,u),M(Jy,Go,null),e(Go,tUo),e(Go,cd),e(cd,aUo),e(cd,cX),e(cX,nUo),e(cd,sUo),e(cd,fX),e(fX,lUo),e(cd,iUo),e(Go,dUo),e(Go,Yy),e(Yy,cUo),e(Yy,Spe),e(Spe,fUo),e(Yy,mUo),e(Go,gUo),e(Go,ut),M(Ky,ut,null),e(ut,hUo),e(ut,Rpe),e(Rpe,pUo),e(ut,_Uo),e(ut,fd),e(fd,uUo),e(fd,Bpe),e(Bpe,bUo),e(fd,vUo),e(fd,mX),e(mX,FUo),e(fd,TUo),e(ut,MUo),M(m0,ut,null),e(Go,EUo),e(Go,co),M(Zy,co,null),e(co,CUo),e(co,Ppe),e(Ppe,wUo),e(co,AUo),e(co,Ga),e(Ga,yUo),e(Ga,Ipe),e(Ipe,LUo),e(Ga,xUo),e(Ga,qpe),e(qpe,$Uo),e(Ga,kUo),e(Ga,Npe),e(Npe,SUo),e(Ga,RUo),e(co,BUo),e(co,ke),e(ke,g0),e(g0,jpe),e(jpe,PUo),e(g0,IUo),e(g0,gX),e(gX,qUo),e(g0,NUo),e(ke,jUo),e(ke,h0),e(h0,Dpe),e(Dpe,DUo),e(h0,GUo),e(h0,hX),e(hX,OUo),e(h0,VUo),e(ke,XUo),e(ke,p0),e(p0,Gpe),e(Gpe,zUo),e(p0,WUo),e(p0,pX),e(pX,QUo),e(p0,HUo),e(ke,UUo),e(ke,_0),e(_0,Ope),e(Ope,JUo),e(_0,YUo),e(_0,_X),e(_X,KUo),e(_0,ZUo),e(ke,eJo),e(ke,u0),e(u0,Vpe),e(Vpe,oJo),e(u0,rJo),e(u0,uX),e(uX,tJo),e(u0,aJo),e(ke,nJo),e(ke,b0),e(b0,Xpe),e(Xpe,sJo),e(b0,lJo),e(b0,bX),e(bX,iJo),e(b0,dJo),e(ke,cJo),e(ke,v0),e(v0,zpe),e(zpe,fJo),e(v0,mJo),e(v0,vX),e(vX,gJo),e(v0,hJo),e(ke,pJo),e(ke,F0),e(F0,Wpe),e(Wpe,_Jo),e(F0,uJo),e(F0,FX),e(FX,bJo),e(F0,vJo),e(ke,FJo),e(ke,T0),e(T0,Qpe),e(Qpe,TJo),e(T0,MJo),e(T0,TX),e(TX,EJo),e(T0,CJo),e(co,wJo),e(co,M0),e(M0,AJo),e(M0,Hpe),e(Hpe,yJo),e(M0,LJo),e(M0,Upe),e(Upe,xJo),e(co,$Jo),M(E0,co,null),b(f,Sqe,u),b(f,md,u),e(md,C0),e(C0,Jpe),M(eL,Jpe,null),e(md,kJo),e(md,Ype),e(Ype,SJo),b(f,Rqe,u),b(f,Oo,u),M(oL,Oo,null),e(Oo,RJo),e(Oo,gd),e(gd,BJo),e(gd,MX),e(MX,PJo),e(gd,IJo),e(gd,EX),e(EX,qJo),e(gd,NJo),e(Oo,jJo),e(Oo,rL),e(rL,DJo),e(rL,Kpe),e(Kpe,GJo),e(rL,OJo),e(Oo,VJo),e(Oo,bt),M(tL,bt,null),e(bt,XJo),e(bt,Zpe),e(Zpe,zJo),e(bt,WJo),e(bt,hd),e(hd,QJo),e(hd,e_e),e(e_e,HJo),e(hd,UJo),e(hd,CX),e(CX,JJo),e(hd,YJo),e(bt,KJo),M(w0,bt,null),e(Oo,ZJo),e(Oo,fo),M(aL,fo,null),e(fo,eYo),e(fo,o_e),e(o_e,oYo),e(fo,rYo),e(fo,Oa),e(Oa,tYo),e(Oa,r_e),e(r_e,aYo),e(Oa,nYo),e(Oa,t_e),e(t_e,sYo),e(Oa,lYo),e(Oa,a_e),e(a_e,iYo),e(Oa,dYo),e(fo,cYo),e(fo,Kr),e(Kr,A0),e(A0,n_e),e(n_e,fYo),e(A0,mYo),e(A0,wX),e(wX,gYo),e(A0,hYo),e(Kr,pYo),e(Kr,y0),e(y0,s_e),e(s_e,_Yo),e(y0,uYo),e(y0,AX),e(AX,bYo),e(y0,vYo),e(Kr,FYo),e(Kr,L0),e(L0,l_e),e(l_e,TYo),e(L0,MYo),e(L0,yX),e(yX,EYo),e(L0,CYo),e(Kr,wYo),e(Kr,x0),e(x0,i_e),e(i_e,AYo),e(x0,yYo),e(x0,LX),e(LX,LYo),e(x0,xYo),e(Kr,$Yo),e(Kr,$0),e($0,d_e),e(d_e,kYo),e($0,SYo),e($0,xX),e(xX,RYo),e($0,BYo),e(fo,PYo),e(fo,k0),e(k0,IYo),e(k0,c_e),e(c_e,qYo),e(k0,NYo),e(k0,f_e),e(f_e,jYo),e(fo,DYo),M(S0,fo,null),b(f,Bqe,u),b(f,pd,u),e(pd,R0),e(R0,m_e),M(nL,m_e,null),e(pd,GYo),e(pd,g_e),e(g_e,OYo),b(f,Pqe,u),b(f,Vo,u),M(sL,Vo,null),e(Vo,VYo),e(Vo,_d),e(_d,XYo),e(_d,$X),e($X,zYo),e(_d,WYo),e(_d,kX),e(kX,QYo),e(_d,HYo),e(Vo,UYo),e(Vo,lL),e(lL,JYo),e(lL,h_e),e(h_e,YYo),e(lL,KYo),e(Vo,ZYo),e(Vo,vt),M(iL,vt,null),e(vt,eKo),e(vt,p_e),e(p_e,oKo),e(vt,rKo),e(vt,ud),e(ud,tKo),e(ud,__e),e(__e,aKo),e(ud,nKo),e(ud,SX),e(SX,sKo),e(ud,lKo),e(vt,iKo),M(B0,vt,null),e(Vo,dKo),e(Vo,mo),M(dL,mo,null),e(mo,cKo),e(mo,u_e),e(u_e,fKo),e(mo,mKo),e(mo,Va),e(Va,gKo),e(Va,b_e),e(b_e,hKo),e(Va,pKo),e(Va,v_e),e(v_e,_Ko),e(Va,uKo),e(Va,F_e),e(F_e,bKo),e(Va,vKo),e(mo,FKo),e(mo,Se),e(Se,P0),e(P0,T_e),e(T_e,TKo),e(P0,MKo),e(P0,RX),e(RX,EKo),e(P0,CKo),e(Se,wKo),e(Se,I0),e(I0,M_e),e(M_e,AKo),e(I0,yKo),e(I0,BX),e(BX,LKo),e(I0,xKo),e(Se,$Ko),e(Se,q0),e(q0,E_e),e(E_e,kKo),e(q0,SKo),e(q0,PX),e(PX,RKo),e(q0,BKo),e(Se,PKo),e(Se,N0),e(N0,C_e),e(C_e,IKo),e(N0,qKo),e(N0,IX),e(IX,NKo),e(N0,jKo),e(Se,DKo),e(Se,j0),e(j0,w_e),e(w_e,GKo),e(j0,OKo),e(j0,qX),e(qX,VKo),e(j0,XKo),e(Se,zKo),e(Se,D0),e(D0,A_e),e(A_e,WKo),e(D0,QKo),e(D0,NX),e(NX,HKo),e(D0,UKo),e(Se,JKo),e(Se,G0),e(G0,y_e),e(y_e,YKo),e(G0,KKo),e(G0,jX),e(jX,ZKo),e(G0,eZo),e(Se,oZo),e(Se,O0),e(O0,L_e),e(L_e,rZo),e(O0,tZo),e(O0,DX),e(DX,aZo),e(O0,nZo),e(Se,sZo),e(Se,V0),e(V0,x_e),e(x_e,lZo),e(V0,iZo),e(V0,GX),e(GX,dZo),e(V0,cZo),e(mo,fZo),e(mo,X0),e(X0,mZo),e(X0,$_e),e($_e,gZo),e(X0,hZo),e(X0,k_e),e(k_e,pZo),e(mo,_Zo),M(z0,mo,null),b(f,Iqe,u),b(f,bd,u),e(bd,W0),e(W0,S_e),M(cL,S_e,null),e(bd,uZo),e(bd,R_e),e(R_e,bZo),b(f,qqe,u),b(f,Xo,u),M(fL,Xo,null),e(Xo,vZo),e(Xo,vd),e(vd,FZo),e(vd,OX),e(OX,TZo),e(vd,MZo),e(vd,VX),e(VX,EZo),e(vd,CZo),e(Xo,wZo),e(Xo,mL),e(mL,AZo),e(mL,B_e),e(B_e,yZo),e(mL,LZo),e(Xo,xZo),e(Xo,Ft),M(gL,Ft,null),e(Ft,$Zo),e(Ft,P_e),e(P_e,kZo),e(Ft,SZo),e(Ft,Fd),e(Fd,RZo),e(Fd,I_e),e(I_e,BZo),e(Fd,PZo),e(Fd,XX),e(XX,IZo),e(Fd,qZo),e(Ft,NZo),M(Q0,Ft,null),e(Xo,jZo),e(Xo,go),M(hL,go,null),e(go,DZo),e(go,q_e),e(q_e,GZo),e(go,OZo),e(go,Xa),e(Xa,VZo),e(Xa,N_e),e(N_e,XZo),e(Xa,zZo),e(Xa,j_e),e(j_e,WZo),e(Xa,QZo),e(Xa,D_e),e(D_e,HZo),e(Xa,UZo),e(go,JZo),e(go,pL),e(pL,H0),e(H0,G_e),e(G_e,YZo),e(H0,KZo),e(H0,zX),e(zX,ZZo),e(H0,eer),e(pL,oer),e(pL,U0),e(U0,O_e),e(O_e,rer),e(U0,ter),e(U0,WX),e(WX,aer),e(U0,ner),e(go,ser),e(go,J0),e(J0,ler),e(J0,V_e),e(V_e,ier),e(J0,der),e(J0,X_e),e(X_e,cer),e(go,fer),M(Y0,go,null),b(f,Nqe,u),b(f,Td,u),e(Td,K0),e(K0,z_e),M(_L,z_e,null),e(Td,mer),e(Td,W_e),e(W_e,ger),b(f,jqe,u),b(f,zo,u),M(uL,zo,null),e(zo,her),e(zo,Md),e(Md,per),e(Md,QX),e(QX,_er),e(Md,uer),e(Md,HX),e(HX,ber),e(Md,ver),e(zo,Fer),e(zo,bL),e(bL,Ter),e(bL,Q_e),e(Q_e,Mer),e(bL,Eer),e(zo,Cer),e(zo,Tt),M(vL,Tt,null),e(Tt,wer),e(Tt,H_e),e(H_e,Aer),e(Tt,yer),e(Tt,Ed),e(Ed,Ler),e(Ed,U_e),e(U_e,xer),e(Ed,$er),e(Ed,UX),e(UX,ker),e(Ed,Ser),e(Tt,Rer),M(Z0,Tt,null),e(zo,Ber),e(zo,ho),M(FL,ho,null),e(ho,Per),e(ho,J_e),e(J_e,Ier),e(ho,qer),e(ho,za),e(za,Ner),e(za,Y_e),e(Y_e,jer),e(za,Der),e(za,K_e),e(K_e,Ger),e(za,Oer),e(za,Z_e),e(Z_e,Ver),e(za,Xer),e(ho,zer),e(ho,Zr),e(Zr,eT),e(eT,eue),e(eue,Wer),e(eT,Qer),e(eT,JX),e(JX,Her),e(eT,Uer),e(Zr,Jer),e(Zr,oT),e(oT,oue),e(oue,Yer),e(oT,Ker),e(oT,YX),e(YX,Zer),e(oT,eor),e(Zr,oor),e(Zr,rT),e(rT,rue),e(rue,ror),e(rT,tor),e(rT,KX),e(KX,aor),e(rT,nor),e(Zr,sor),e(Zr,tT),e(tT,tue),e(tue,lor),e(tT,ior),e(tT,ZX),e(ZX,dor),e(tT,cor),e(Zr,mor),e(Zr,aT),e(aT,aue),e(aue,gor),e(aT,hor),e(aT,ez),e(ez,por),e(aT,_or),e(ho,uor),e(ho,nT),e(nT,bor),e(nT,nue),e(nue,vor),e(nT,For),e(nT,sue),e(sue,Tor),e(ho,Mor),M(sT,ho,null),b(f,Dqe,u),b(f,Cd,u),e(Cd,lT),e(lT,lue),M(TL,lue,null),e(Cd,Eor),e(Cd,iue),e(iue,Cor),b(f,Gqe,u),b(f,Wo,u),M(ML,Wo,null),e(Wo,wor),e(Wo,wd),e(wd,Aor),e(wd,oz),e(oz,yor),e(wd,Lor),e(wd,rz),e(rz,xor),e(wd,$or),e(Wo,kor),e(Wo,EL),e(EL,Sor),e(EL,due),e(due,Ror),e(EL,Bor),e(Wo,Por),e(Wo,Mt),M(CL,Mt,null),e(Mt,Ior),e(Mt,cue),e(cue,qor),e(Mt,Nor),e(Mt,Ad),e(Ad,jor),e(Ad,fue),e(fue,Dor),e(Ad,Gor),e(Ad,tz),e(tz,Oor),e(Ad,Vor),e(Mt,Xor),M(iT,Mt,null),e(Wo,zor),e(Wo,po),M(wL,po,null),e(po,Wor),e(po,mue),e(mue,Qor),e(po,Hor),e(po,Wa),e(Wa,Uor),e(Wa,gue),e(gue,Jor),e(Wa,Yor),e(Wa,hue),e(hue,Kor),e(Wa,Zor),e(Wa,pue),e(pue,err),e(Wa,orr),e(po,rrr),e(po,yd),e(yd,dT),e(dT,_ue),e(_ue,trr),e(dT,arr),e(dT,az),e(az,nrr),e(dT,srr),e(yd,lrr),e(yd,cT),e(cT,uue),e(uue,irr),e(cT,drr),e(cT,nz),e(nz,crr),e(cT,frr),e(yd,mrr),e(yd,fT),e(fT,bue),e(bue,grr),e(fT,hrr),e(fT,sz),e(sz,prr),e(fT,_rr),e(po,urr),e(po,mT),e(mT,brr),e(mT,vue),e(vue,vrr),e(mT,Frr),e(mT,Fue),e(Fue,Trr),e(po,Mrr),M(gT,po,null),b(f,Oqe,u),b(f,Ld,u),e(Ld,hT),e(hT,Tue),M(AL,Tue,null),e(Ld,Err),e(Ld,Mue),e(Mue,Crr),b(f,Vqe,u),b(f,Qo,u),M(yL,Qo,null),e(Qo,wrr),e(Qo,xd),e(xd,Arr),e(xd,lz),e(lz,yrr),e(xd,Lrr),e(xd,iz),e(iz,xrr),e(xd,$rr),e(Qo,krr),e(Qo,LL),e(LL,Srr),e(LL,Eue),e(Eue,Rrr),e(LL,Brr),e(Qo,Prr),e(Qo,Et),M(xL,Et,null),e(Et,Irr),e(Et,Cue),e(Cue,qrr),e(Et,Nrr),e(Et,$d),e($d,jrr),e($d,wue),e(wue,Drr),e($d,Grr),e($d,dz),e(dz,Orr),e($d,Vrr),e(Et,Xrr),M(pT,Et,null),e(Qo,zrr),e(Qo,_o),M($L,_o,null),e(_o,Wrr),e(_o,Aue),e(Aue,Qrr),e(_o,Hrr),e(_o,Qa),e(Qa,Urr),e(Qa,yue),e(yue,Jrr),e(Qa,Yrr),e(Qa,Lue),e(Lue,Krr),e(Qa,Zrr),e(Qa,xue),e(xue,etr),e(Qa,otr),e(_o,rtr),e(_o,kL),e(kL,_T),e(_T,$ue),e($ue,ttr),e(_T,atr),e(_T,cz),e(cz,ntr),e(_T,str),e(kL,ltr),e(kL,uT),e(uT,kue),e(kue,itr),e(uT,dtr),e(uT,fz),e(fz,ctr),e(uT,ftr),e(_o,mtr),e(_o,bT),e(bT,gtr),e(bT,Sue),e(Sue,htr),e(bT,ptr),e(bT,Rue),e(Rue,_tr),e(_o,utr),M(vT,_o,null),b(f,Xqe,u),b(f,kd,u),e(kd,FT),e(FT,Bue),M(SL,Bue,null),e(kd,btr),e(kd,Pue),e(Pue,vtr),b(f,zqe,u),b(f,Ho,u),M(RL,Ho,null),e(Ho,Ftr),e(Ho,Sd),e(Sd,Ttr),e(Sd,mz),e(mz,Mtr),e(Sd,Etr),e(Sd,gz),e(gz,Ctr),e(Sd,wtr),e(Ho,Atr),e(Ho,BL),e(BL,ytr),e(BL,Iue),e(Iue,Ltr),e(BL,xtr),e(Ho,$tr),e(Ho,Ct),M(PL,Ct,null),e(Ct,ktr),e(Ct,que),e(que,Str),e(Ct,Rtr),e(Ct,Rd),e(Rd,Btr),e(Rd,Nue),e(Nue,Ptr),e(Rd,Itr),e(Rd,hz),e(hz,qtr),e(Rd,Ntr),e(Ct,jtr),M(TT,Ct,null),e(Ho,Dtr),e(Ho,uo),M(IL,uo,null),e(uo,Gtr),e(uo,jue),e(jue,Otr),e(uo,Vtr),e(uo,Ha),e(Ha,Xtr),e(Ha,Due),e(Due,ztr),e(Ha,Wtr),e(Ha,Gue),e(Gue,Qtr),e(Ha,Htr),e(Ha,Oue),e(Oue,Utr),e(Ha,Jtr),e(uo,Ytr),e(uo,Vue),e(Vue,MT),e(MT,Xue),e(Xue,Ktr),e(MT,Ztr),e(MT,pz),e(pz,ear),e(MT,oar),e(uo,rar),e(uo,ET),e(ET,tar),e(ET,zue),e(zue,aar),e(ET,nar),e(ET,Wue),e(Wue,sar),e(uo,lar),M(CT,uo,null),b(f,Wqe,u),b(f,Bd,u),e(Bd,wT),e(wT,Que),M(qL,Que,null),e(Bd,iar),e(Bd,Hue),e(Hue,dar),b(f,Qqe,u),b(f,Uo,u),M(NL,Uo,null),e(Uo,car),e(Uo,Pd),e(Pd,far),e(Pd,_z),e(_z,mar),e(Pd,gar),e(Pd,uz),e(uz,har),e(Pd,par),e(Uo,_ar),e(Uo,jL),e(jL,uar),e(jL,Uue),e(Uue,bar),e(jL,Far),e(Uo,Tar),e(Uo,wt),M(DL,wt,null),e(wt,Mar),e(wt,Jue),e(Jue,Ear),e(wt,Car),e(wt,Id),e(Id,war),e(Id,Yue),e(Yue,Aar),e(Id,yar),e(Id,bz),e(bz,Lar),e(Id,xar),e(wt,$ar),M(AT,wt,null),e(Uo,kar),e(Uo,bo),M(GL,bo,null),e(bo,Sar),e(bo,Kue),e(Kue,Rar),e(bo,Bar),e(bo,Ua),e(Ua,Par),e(Ua,Zue),e(Zue,Iar),e(Ua,qar),e(Ua,e2e),e(e2e,Nar),e(Ua,jar),e(Ua,o2e),e(o2e,Dar),e(Ua,Gar),e(bo,Oar),e(bo,Ja),e(Ja,yT),e(yT,r2e),e(r2e,Var),e(yT,Xar),e(yT,vz),e(vz,zar),e(yT,War),e(Ja,Qar),e(Ja,LT),e(LT,t2e),e(t2e,Har),e(LT,Uar),e(LT,Fz),e(Fz,Jar),e(LT,Yar),e(Ja,Kar),e(Ja,xT),e(xT,a2e),e(a2e,Zar),e(xT,enr),e(xT,Tz),e(Tz,onr),e(xT,rnr),e(Ja,tnr),e(Ja,$T),e($T,n2e),e(n2e,anr),e($T,nnr),e($T,Mz),e(Mz,snr),e($T,lnr),e(bo,inr),e(bo,kT),e(kT,dnr),e(kT,s2e),e(s2e,cnr),e(kT,fnr),e(kT,l2e),e(l2e,mnr),e(bo,gnr),M(ST,bo,null),b(f,Hqe,u),b(f,qd,u),e(qd,RT),e(RT,i2e),M(OL,i2e,null),e(qd,hnr),e(qd,d2e),e(d2e,pnr),b(f,Uqe,u),b(f,Jo,u),M(VL,Jo,null),e(Jo,_nr),e(Jo,Nd),e(Nd,unr),e(Nd,Ez),e(Ez,bnr),e(Nd,vnr),e(Nd,Cz),e(Cz,Fnr),e(Nd,Tnr),e(Jo,Mnr),e(Jo,XL),e(XL,Enr),e(XL,c2e),e(c2e,Cnr),e(XL,wnr),e(Jo,Anr),e(Jo,At),M(zL,At,null),e(At,ynr),e(At,f2e),e(f2e,Lnr),e(At,xnr),e(At,jd),e(jd,$nr),e(jd,m2e),e(m2e,knr),e(jd,Snr),e(jd,wz),e(wz,Rnr),e(jd,Bnr),e(At,Pnr),M(BT,At,null),e(Jo,Inr),e(Jo,vo),M(WL,vo,null),e(vo,qnr),e(vo,g2e),e(g2e,Nnr),e(vo,jnr),e(vo,Ya),e(Ya,Dnr),e(Ya,h2e),e(h2e,Gnr),e(Ya,Onr),e(Ya,p2e),e(p2e,Vnr),e(Ya,Xnr),e(Ya,_2e),e(_2e,znr),e(Ya,Wnr),e(vo,Qnr),e(vo,u2e),e(u2e,PT),e(PT,b2e),e(b2e,Hnr),e(PT,Unr),e(PT,Az),e(Az,Jnr),e(PT,Ynr),e(vo,Knr),e(vo,IT),e(IT,Znr),e(IT,v2e),e(v2e,esr),e(IT,osr),e(IT,F2e),e(F2e,rsr),e(vo,tsr),M(qT,vo,null),b(f,Jqe,u),b(f,Dd,u),e(Dd,NT),e(NT,T2e),M(QL,T2e,null),e(Dd,asr),e(Dd,M2e),e(M2e,nsr),b(f,Yqe,u),b(f,Yo,u),M(HL,Yo,null),e(Yo,ssr),e(Yo,Gd),e(Gd,lsr),e(Gd,yz),e(yz,isr),e(Gd,dsr),e(Gd,Lz),e(Lz,csr),e(Gd,fsr),e(Yo,msr),e(Yo,UL),e(UL,gsr),e(UL,E2e),e(E2e,hsr),e(UL,psr),e(Yo,_sr),e(Yo,yt),M(JL,yt,null),e(yt,usr),e(yt,C2e),e(C2e,bsr),e(yt,vsr),e(yt,Od),e(Od,Fsr),e(Od,w2e),e(w2e,Tsr),e(Od,Msr),e(Od,xz),e(xz,Esr),e(Od,Csr),e(yt,wsr),M(jT,yt,null),e(Yo,Asr),e(Yo,wr),M(YL,wr,null),e(wr,ysr),e(wr,A2e),e(A2e,Lsr),e(wr,xsr),e(wr,Ka),e(Ka,$sr),e(Ka,y2e),e(y2e,ksr),e(Ka,Ssr),e(Ka,L2e),e(L2e,Rsr),e(Ka,Bsr),e(Ka,x2e),e(x2e,Psr),e(Ka,Isr),e(wr,qsr),e(wr,N),e(N,DT),e(DT,$2e),e($2e,Nsr),e(DT,jsr),e(DT,$z),e($z,Dsr),e(DT,Gsr),e(N,Osr),e(N,GT),e(GT,k2e),e(k2e,Vsr),e(GT,Xsr),e(GT,kz),e(kz,zsr),e(GT,Wsr),e(N,Qsr),e(N,OT),e(OT,S2e),e(S2e,Hsr),e(OT,Usr),e(OT,Sz),e(Sz,Jsr),e(OT,Ysr),e(N,Ksr),e(N,VT),e(VT,R2e),e(R2e,Zsr),e(VT,elr),e(VT,Rz),e(Rz,olr),e(VT,rlr),e(N,tlr),e(N,XT),e(XT,B2e),e(B2e,alr),e(XT,nlr),e(XT,Bz),e(Bz,slr),e(XT,llr),e(N,ilr),e(N,zT),e(zT,P2e),e(P2e,dlr),e(zT,clr),e(zT,Pz),e(Pz,flr),e(zT,mlr),e(N,glr),e(N,WT),e(WT,I2e),e(I2e,hlr),e(WT,plr),e(WT,Iz),e(Iz,_lr),e(WT,ulr),e(N,blr),e(N,QT),e(QT,q2e),e(q2e,vlr),e(QT,Flr),e(QT,qz),e(qz,Tlr),e(QT,Mlr),e(N,Elr),e(N,HT),e(HT,N2e),e(N2e,Clr),e(HT,wlr),e(HT,Nz),e(Nz,Alr),e(HT,ylr),e(N,Llr),e(N,UT),e(UT,j2e),e(j2e,xlr),e(UT,$lr),e(UT,jz),e(jz,klr),e(UT,Slr),e(N,Rlr),e(N,JT),e(JT,D2e),e(D2e,Blr),e(JT,Plr),e(JT,Dz),e(Dz,Ilr),e(JT,qlr),e(N,Nlr),e(N,YT),e(YT,G2e),e(G2e,jlr),e(YT,Dlr),e(YT,Gz),e(Gz,Glr),e(YT,Olr),e(N,Vlr),e(N,KT),e(KT,O2e),e(O2e,Xlr),e(KT,zlr),e(KT,Oz),e(Oz,Wlr),e(KT,Qlr),e(N,Hlr),e(N,ZT),e(ZT,V2e),e(V2e,Ulr),e(ZT,Jlr),e(ZT,Vz),e(Vz,Ylr),e(ZT,Klr),e(N,Zlr),e(N,e7),e(e7,X2e),e(X2e,eir),e(e7,oir),e(e7,Xz),e(Xz,rir),e(e7,tir),e(N,air),e(N,o7),e(o7,z2e),e(z2e,nir),e(o7,sir),e(o7,zz),e(zz,lir),e(o7,iir),e(N,dir),e(N,r7),e(r7,W2e),e(W2e,cir),e(r7,fir),e(r7,Wz),e(Wz,mir),e(r7,gir),e(N,hir),e(N,Ps),e(Ps,Q2e),e(Q2e,pir),e(Ps,_ir),e(Ps,Qz),e(Qz,uir),e(Ps,bir),e(Ps,Hz),e(Hz,vir),e(Ps,Fir),e(N,Tir),e(N,t7),e(t7,H2e),e(H2e,Mir),e(t7,Eir),e(t7,Uz),e(Uz,Cir),e(t7,wir),e(N,Air),e(N,a7),e(a7,U2e),e(U2e,yir),e(a7,Lir),e(a7,Jz),e(Jz,xir),e(a7,$ir),e(N,kir),e(N,n7),e(n7,J2e),e(J2e,Sir),e(n7,Rir),e(n7,Yz),e(Yz,Bir),e(n7,Pir),e(N,Iir),e(N,s7),e(s7,Y2e),e(Y2e,qir),e(s7,Nir),e(s7,Kz),e(Kz,jir),e(s7,Dir),e(N,Gir),e(N,l7),e(l7,K2e),e(K2e,Oir),e(l7,Vir),e(l7,Zz),e(Zz,Xir),e(l7,zir),e(N,Wir),e(N,i7),e(i7,Z2e),e(Z2e,Qir),e(i7,Hir),e(i7,eW),e(eW,Uir),e(i7,Jir),e(N,Yir),e(N,d7),e(d7,e1e),e(e1e,Kir),e(d7,Zir),e(d7,oW),e(oW,edr),e(d7,odr),e(N,rdr),e(N,c7),e(c7,o1e),e(o1e,tdr),e(c7,adr),e(c7,rW),e(rW,ndr),e(c7,sdr),e(N,ldr),e(N,f7),e(f7,r1e),e(r1e,idr),e(f7,ddr),e(f7,tW),e(tW,cdr),e(f7,fdr),e(N,mdr),e(N,m7),e(m7,t1e),e(t1e,gdr),e(m7,hdr),e(m7,aW),e(aW,pdr),e(m7,_dr),e(N,udr),e(N,g7),e(g7,a1e),e(a1e,bdr),e(g7,vdr),e(g7,nW),e(nW,Fdr),e(g7,Tdr),e(N,Mdr),e(N,h7),e(h7,n1e),e(n1e,Edr),e(h7,Cdr),e(h7,sW),e(sW,wdr),e(h7,Adr),e(N,ydr),e(N,p7),e(p7,s1e),e(s1e,Ldr),e(p7,xdr),e(p7,lW),e(lW,$dr),e(p7,kdr),e(N,Sdr),e(N,_7),e(_7,l1e),e(l1e,Rdr),e(_7,Bdr),e(_7,iW),e(iW,Pdr),e(_7,Idr),e(N,qdr),e(N,u7),e(u7,i1e),e(i1e,Ndr),e(u7,jdr),e(u7,dW),e(dW,Ddr),e(u7,Gdr),e(N,Odr),e(N,b7),e(b7,d1e),e(d1e,Vdr),e(b7,Xdr),e(b7,cW),e(cW,zdr),e(b7,Wdr),e(N,Qdr),e(N,v7),e(v7,c1e),e(c1e,Hdr),e(v7,Udr),e(v7,fW),e(fW,Jdr),e(v7,Ydr),e(N,Kdr),e(N,F7),e(F7,f1e),e(f1e,Zdr),e(F7,ecr),e(F7,mW),e(mW,ocr),e(F7,rcr),e(N,tcr),e(N,T7),e(T7,m1e),e(m1e,acr),e(T7,ncr),e(T7,gW),e(gW,scr),e(T7,lcr),e(N,icr),e(N,M7),e(M7,g1e),e(g1e,dcr),e(M7,ccr),e(M7,hW),e(hW,fcr),e(M7,mcr),e(N,gcr),e(N,E7),e(E7,h1e),e(h1e,hcr),e(E7,pcr),e(E7,pW),e(pW,_cr),e(E7,ucr),e(N,bcr),e(N,C7),e(C7,p1e),e(p1e,vcr),e(C7,Fcr),e(C7,_W),e(_W,Tcr),e(C7,Mcr),e(N,Ecr),e(N,w7),e(w7,_1e),e(_1e,Ccr),e(w7,wcr),e(w7,uW),e(uW,Acr),e(w7,ycr),e(N,Lcr),e(N,A7),e(A7,u1e),e(u1e,xcr),e(A7,$cr),e(A7,bW),e(bW,kcr),e(A7,Scr),e(N,Rcr),e(N,y7),e(y7,b1e),e(b1e,Bcr),e(y7,Pcr),e(y7,vW),e(vW,Icr),e(y7,qcr),e(N,Ncr),e(N,L7),e(L7,v1e),e(v1e,jcr),e(L7,Dcr),e(L7,FW),e(FW,Gcr),e(L7,Ocr),e(N,Vcr),e(N,x7),e(x7,F1e),e(F1e,Xcr),e(x7,zcr),e(x7,TW),e(TW,Wcr),e(x7,Qcr),e(N,Hcr),e(N,$7),e($7,T1e),e(T1e,Ucr),e($7,Jcr),e($7,MW),e(MW,Ycr),e($7,Kcr),e(wr,Zcr),M(k7,wr,null),b(f,Kqe,u),b(f,Vd,u),e(Vd,S7),e(S7,M1e),M(KL,M1e,null),e(Vd,efr),e(Vd,E1e),e(E1e,ofr),b(f,Zqe,u),b(f,Ko,u),M(ZL,Ko,null),e(Ko,rfr),e(Ko,Xd),e(Xd,tfr),e(Xd,EW),e(EW,afr),e(Xd,nfr),e(Xd,CW),e(CW,sfr),e(Xd,lfr),e(Ko,ifr),e(Ko,e8),e(e8,dfr),e(e8,C1e),e(C1e,cfr),e(e8,ffr),e(Ko,mfr),e(Ko,Lt),M(o8,Lt,null),e(Lt,gfr),e(Lt,w1e),e(w1e,hfr),e(Lt,pfr),e(Lt,zd),e(zd,_fr),e(zd,A1e),e(A1e,ufr),e(zd,bfr),e(zd,wW),e(wW,vfr),e(zd,Ffr),e(Lt,Tfr),M(R7,Lt,null),e(Ko,Mfr),e(Ko,Ar),M(r8,Ar,null),e(Ar,Efr),e(Ar,y1e),e(y1e,Cfr),e(Ar,wfr),e(Ar,Za),e(Za,Afr),e(Za,L1e),e(L1e,yfr),e(Za,Lfr),e(Za,x1e),e(x1e,xfr),e(Za,$fr),e(Za,$1e),e($1e,kfr),e(Za,Sfr),e(Ar,Rfr),e(Ar,se),e(se,B7),e(B7,k1e),e(k1e,Bfr),e(B7,Pfr),e(B7,AW),e(AW,Ifr),e(B7,qfr),e(se,Nfr),e(se,P7),e(P7,S1e),e(S1e,jfr),e(P7,Dfr),e(P7,yW),e(yW,Gfr),e(P7,Ofr),e(se,Vfr),e(se,I7),e(I7,R1e),e(R1e,Xfr),e(I7,zfr),e(I7,LW),e(LW,Wfr),e(I7,Qfr),e(se,Hfr),e(se,q7),e(q7,B1e),e(B1e,Ufr),e(q7,Jfr),e(q7,xW),e(xW,Yfr),e(q7,Kfr),e(se,Zfr),e(se,N7),e(N7,P1e),e(P1e,emr),e(N7,omr),e(N7,$W),e($W,rmr),e(N7,tmr),e(se,amr),e(se,j7),e(j7,I1e),e(I1e,nmr),e(j7,smr),e(j7,kW),e(kW,lmr),e(j7,imr),e(se,dmr),e(se,D7),e(D7,q1e),e(q1e,cmr),e(D7,fmr),e(D7,SW),e(SW,mmr),e(D7,gmr),e(se,hmr),e(se,G7),e(G7,N1e),e(N1e,pmr),e(G7,_mr),e(G7,RW),e(RW,umr),e(G7,bmr),e(se,vmr),e(se,O7),e(O7,j1e),e(j1e,Fmr),e(O7,Tmr),e(O7,BW),e(BW,Mmr),e(O7,Emr),e(se,Cmr),e(se,V7),e(V7,D1e),e(D1e,wmr),e(V7,Amr),e(V7,PW),e(PW,ymr),e(V7,Lmr),e(se,xmr),e(se,X7),e(X7,G1e),e(G1e,$mr),e(X7,kmr),e(X7,IW),e(IW,Smr),e(X7,Rmr),e(se,Bmr),e(se,z7),e(z7,O1e),e(O1e,Pmr),e(z7,Imr),e(z7,qW),e(qW,qmr),e(z7,Nmr),e(se,jmr),e(se,W7),e(W7,V1e),e(V1e,Dmr),e(W7,Gmr),e(W7,NW),e(NW,Omr),e(W7,Vmr),e(se,Xmr),e(se,Q7),e(Q7,X1e),e(X1e,zmr),e(Q7,Wmr),e(Q7,jW),e(jW,Qmr),e(Q7,Hmr),e(se,Umr),e(se,H7),e(H7,z1e),e(z1e,Jmr),e(H7,Ymr),e(H7,DW),e(DW,Kmr),e(H7,Zmr),e(se,egr),e(se,U7),e(U7,W1e),e(W1e,ogr),e(U7,rgr),e(U7,GW),e(GW,tgr),e(U7,agr),e(se,ngr),e(se,J7),e(J7,Q1e),e(Q1e,sgr),e(J7,lgr),e(J7,OW),e(OW,igr),e(J7,dgr),e(se,cgr),e(se,Y7),e(Y7,H1e),e(H1e,fgr),e(Y7,mgr),e(Y7,VW),e(VW,ggr),e(Y7,hgr),e(se,pgr),e(se,K7),e(K7,U1e),e(U1e,_gr),e(K7,ugr),e(K7,XW),e(XW,bgr),e(K7,vgr),e(se,Fgr),e(se,Z7),e(Z7,J1e),e(J1e,Tgr),e(Z7,Mgr),e(Z7,zW),e(zW,Egr),e(Z7,Cgr),e(se,wgr),e(se,eM),e(eM,Y1e),e(Y1e,Agr),e(eM,ygr),e(eM,WW),e(WW,Lgr),e(eM,xgr),e(se,$gr),e(se,oM),e(oM,K1e),e(K1e,kgr),e(oM,Sgr),e(oM,QW),e(QW,Rgr),e(oM,Bgr),e(se,Pgr),e(se,rM),e(rM,Z1e),e(Z1e,Igr),e(rM,qgr),e(rM,HW),e(HW,Ngr),e(rM,jgr),e(Ar,Dgr),M(tM,Ar,null),b(f,eNe,u),b(f,Wd,u),e(Wd,aM),e(aM,ebe),M(t8,ebe,null),e(Wd,Ggr),e(Wd,obe),e(obe,Ogr),b(f,oNe,u),b(f,Zo,u),M(a8,Zo,null),e(Zo,Vgr),e(Zo,Qd),e(Qd,Xgr),e(Qd,UW),e(UW,zgr),e(Qd,Wgr),e(Qd,JW),e(JW,Qgr),e(Qd,Hgr),e(Zo,Ugr),e(Zo,n8),e(n8,Jgr),e(n8,rbe),e(rbe,Ygr),e(n8,Kgr),e(Zo,Zgr),e(Zo,xt),M(s8,xt,null),e(xt,ehr),e(xt,tbe),e(tbe,ohr),e(xt,rhr),e(xt,Hd),e(Hd,thr),e(Hd,abe),e(abe,ahr),e(Hd,nhr),e(Hd,YW),e(YW,shr),e(Hd,lhr),e(xt,ihr),M(nM,xt,null),e(Zo,dhr),e(Zo,yr),M(l8,yr,null),e(yr,chr),e(yr,nbe),e(nbe,fhr),e(yr,mhr),e(yr,en),e(en,ghr),e(en,sbe),e(sbe,hhr),e(en,phr),e(en,lbe),e(lbe,_hr),e(en,uhr),e(en,ibe),e(ibe,bhr),e(en,vhr),e(yr,Fhr),e(yr,Te),e(Te,sM),e(sM,dbe),e(dbe,Thr),e(sM,Mhr),e(sM,KW),e(KW,Ehr),e(sM,Chr),e(Te,whr),e(Te,lM),e(lM,cbe),e(cbe,Ahr),e(lM,yhr),e(lM,ZW),e(ZW,Lhr),e(lM,xhr),e(Te,$hr),e(Te,iM),e(iM,fbe),e(fbe,khr),e(iM,Shr),e(iM,eQ),e(eQ,Rhr),e(iM,Bhr),e(Te,Phr),e(Te,dM),e(dM,mbe),e(mbe,Ihr),e(dM,qhr),e(dM,oQ),e(oQ,Nhr),e(dM,jhr),e(Te,Dhr),e(Te,cM),e(cM,gbe),e(gbe,Ghr),e(cM,Ohr),e(cM,rQ),e(rQ,Vhr),e(cM,Xhr),e(Te,zhr),e(Te,fM),e(fM,hbe),e(hbe,Whr),e(fM,Qhr),e(fM,tQ),e(tQ,Hhr),e(fM,Uhr),e(Te,Jhr),e(Te,mM),e(mM,pbe),e(pbe,Yhr),e(mM,Khr),e(mM,aQ),e(aQ,Zhr),e(mM,epr),e(Te,opr),e(Te,gM),e(gM,_be),e(_be,rpr),e(gM,tpr),e(gM,nQ),e(nQ,apr),e(gM,npr),e(Te,spr),e(Te,hM),e(hM,ube),e(ube,lpr),e(hM,ipr),e(hM,sQ),e(sQ,dpr),e(hM,cpr),e(Te,fpr),e(Te,pM),e(pM,bbe),e(bbe,mpr),e(pM,gpr),e(pM,lQ),e(lQ,hpr),e(pM,ppr),e(Te,_pr),e(Te,_M),e(_M,vbe),e(vbe,upr),e(_M,bpr),e(_M,iQ),e(iQ,vpr),e(_M,Fpr),e(Te,Tpr),e(Te,uM),e(uM,Fbe),e(Fbe,Mpr),e(uM,Epr),e(uM,dQ),e(dQ,Cpr),e(uM,wpr),e(yr,Apr),M(bM,yr,null),b(f,rNe,u),b(f,Ud,u),e(Ud,vM),e(vM,Tbe),M(i8,Tbe,null),e(Ud,ypr),e(Ud,Mbe),e(Mbe,Lpr),b(f,tNe,u),b(f,er,u),M(d8,er,null),e(er,xpr),e(er,Jd),e(Jd,$pr),e(Jd,cQ),e(cQ,kpr),e(Jd,Spr),e(Jd,fQ),e(fQ,Rpr),e(Jd,Bpr),e(er,Ppr),e(er,c8),e(c8,Ipr),e(c8,Ebe),e(Ebe,qpr),e(c8,Npr),e(er,jpr),e(er,$t),M(f8,$t,null),e($t,Dpr),e($t,Cbe),e(Cbe,Gpr),e($t,Opr),e($t,Yd),e(Yd,Vpr),e(Yd,wbe),e(wbe,Xpr),e(Yd,zpr),e(Yd,mQ),e(mQ,Wpr),e(Yd,Qpr),e($t,Hpr),M(FM,$t,null),e(er,Upr),e(er,Lr),M(m8,Lr,null),e(Lr,Jpr),e(Lr,Abe),e(Abe,Ypr),e(Lr,Kpr),e(Lr,on),e(on,Zpr),e(on,ybe),e(ybe,e_r),e(on,o_r),e(on,Lbe),e(Lbe,r_r),e(on,t_r),e(on,xbe),e(xbe,a_r),e(on,n_r),e(Lr,s_r),e(Lr,rn),e(rn,TM),e(TM,$be),e($be,l_r),e(TM,i_r),e(TM,gQ),e(gQ,d_r),e(TM,c_r),e(rn,f_r),e(rn,MM),e(MM,kbe),e(kbe,m_r),e(MM,g_r),e(MM,hQ),e(hQ,h_r),e(MM,p_r),e(rn,__r),e(rn,EM),e(EM,Sbe),e(Sbe,u_r),e(EM,b_r),e(EM,pQ),e(pQ,v_r),e(EM,F_r),e(rn,T_r),e(rn,CM),e(CM,Rbe),e(Rbe,M_r),e(CM,E_r),e(CM,_Q),e(_Q,C_r),e(CM,w_r),e(Lr,A_r),M(wM,Lr,null),b(f,aNe,u),b(f,Kd,u),e(Kd,AM),e(AM,Bbe),M(g8,Bbe,null),e(Kd,y_r),e(Kd,Pbe),e(Pbe,L_r),b(f,nNe,u),b(f,or,u),M(h8,or,null),e(or,x_r),e(or,Zd),e(Zd,$_r),e(Zd,uQ),e(uQ,k_r),e(Zd,S_r),e(Zd,bQ),e(bQ,R_r),e(Zd,B_r),e(or,P_r),e(or,p8),e(p8,I_r),e(p8,Ibe),e(Ibe,q_r),e(p8,N_r),e(or,j_r),e(or,kt),M(_8,kt,null),e(kt,D_r),e(kt,qbe),e(qbe,G_r),e(kt,O_r),e(kt,ec),e(ec,V_r),e(ec,Nbe),e(Nbe,X_r),e(ec,z_r),e(ec,vQ),e(vQ,W_r),e(ec,Q_r),e(kt,H_r),M(yM,kt,null),e(or,U_r),e(or,xr),M(u8,xr,null),e(xr,J_r),e(xr,jbe),e(jbe,Y_r),e(xr,K_r),e(xr,tn),e(tn,Z_r),e(tn,Dbe),e(Dbe,eur),e(tn,our),e(tn,Gbe),e(Gbe,rur),e(tn,tur),e(tn,Obe),e(Obe,aur),e(tn,nur),e(xr,sur),e(xr,ie),e(ie,LM),e(LM,Vbe),e(Vbe,lur),e(LM,iur),e(LM,FQ),e(FQ,dur),e(LM,cur),e(ie,fur),e(ie,xM),e(xM,Xbe),e(Xbe,mur),e(xM,gur),e(xM,TQ),e(TQ,hur),e(xM,pur),e(ie,_ur),e(ie,$M),e($M,zbe),e(zbe,uur),e($M,bur),e($M,MQ),e(MQ,vur),e($M,Fur),e(ie,Tur),e(ie,kM),e(kM,Wbe),e(Wbe,Mur),e(kM,Eur),e(kM,EQ),e(EQ,Cur),e(kM,wur),e(ie,Aur),e(ie,SM),e(SM,Qbe),e(Qbe,yur),e(SM,Lur),e(SM,CQ),e(CQ,xur),e(SM,$ur),e(ie,kur),e(ie,RM),e(RM,Hbe),e(Hbe,Sur),e(RM,Rur),e(RM,wQ),e(wQ,Bur),e(RM,Pur),e(ie,Iur),e(ie,BM),e(BM,Ube),e(Ube,qur),e(BM,Nur),e(BM,AQ),e(AQ,jur),e(BM,Dur),e(ie,Gur),e(ie,PM),e(PM,Jbe),e(Jbe,Our),e(PM,Vur),e(PM,yQ),e(yQ,Xur),e(PM,zur),e(ie,Wur),e(ie,IM),e(IM,Ybe),e(Ybe,Qur),e(IM,Hur),e(IM,LQ),e(LQ,Uur),e(IM,Jur),e(ie,Yur),e(ie,qM),e(qM,Kbe),e(Kbe,Kur),e(qM,Zur),e(qM,xQ),e(xQ,e2r),e(qM,o2r),e(ie,r2r),e(ie,NM),e(NM,Zbe),e(Zbe,t2r),e(NM,a2r),e(NM,$Q),e($Q,n2r),e(NM,s2r),e(ie,l2r),e(ie,jM),e(jM,eve),e(eve,i2r),e(jM,d2r),e(jM,kQ),e(kQ,c2r),e(jM,f2r),e(ie,m2r),e(ie,DM),e(DM,ove),e(ove,g2r),e(DM,h2r),e(DM,SQ),e(SQ,p2r),e(DM,_2r),e(ie,u2r),e(ie,GM),e(GM,rve),e(rve,b2r),e(GM,v2r),e(GM,RQ),e(RQ,F2r),e(GM,T2r),e(ie,M2r),e(ie,OM),e(OM,tve),e(tve,E2r),e(OM,C2r),e(OM,BQ),e(BQ,w2r),e(OM,A2r),e(ie,y2r),e(ie,VM),e(VM,ave),e(ave,L2r),e(VM,x2r),e(VM,PQ),e(PQ,$2r),e(VM,k2r),e(ie,S2r),e(ie,XM),e(XM,nve),e(nve,R2r),e(XM,B2r),e(XM,IQ),e(IQ,P2r),e(XM,I2r),e(ie,q2r),e(ie,zM),e(zM,sve),e(sve,N2r),e(zM,j2r),e(zM,qQ),e(qQ,D2r),e(zM,G2r),e(ie,O2r),e(ie,WM),e(WM,lve),e(lve,V2r),e(WM,X2r),e(WM,NQ),e(NQ,z2r),e(WM,W2r),e(ie,Q2r),e(ie,QM),e(QM,ive),e(ive,H2r),e(QM,U2r),e(QM,jQ),e(jQ,J2r),e(QM,Y2r),e(xr,K2r),M(HM,xr,null),b(f,sNe,u),b(f,oc,u),e(oc,UM),e(UM,dve),M(b8,dve,null),e(oc,Z2r),e(oc,cve),e(cve,e1r),b(f,lNe,u),b(f,rr,u),M(v8,rr,null),e(rr,o1r),e(rr,rc),e(rc,r1r),e(rc,DQ),e(DQ,t1r),e(rc,a1r),e(rc,GQ),e(GQ,n1r),e(rc,s1r),e(rr,l1r),e(rr,F8),e(F8,i1r),e(F8,fve),e(fve,d1r),e(F8,c1r),e(rr,f1r),e(rr,St),M(T8,St,null),e(St,m1r),e(St,mve),e(mve,g1r),e(St,h1r),e(St,tc),e(tc,p1r),e(tc,gve),e(gve,_1r),e(tc,u1r),e(tc,OQ),e(OQ,b1r),e(tc,v1r),e(St,F1r),M(JM,St,null),e(rr,T1r),e(rr,$r),M(M8,$r,null),e($r,M1r),e($r,hve),e(hve,E1r),e($r,C1r),e($r,an),e(an,w1r),e(an,pve),e(pve,A1r),e(an,y1r),e(an,_ve),e(_ve,L1r),e(an,x1r),e(an,uve),e(uve,$1r),e(an,k1r),e($r,S1r),e($r,ye),e(ye,YM),e(YM,bve),e(bve,R1r),e(YM,B1r),e(YM,VQ),e(VQ,P1r),e(YM,I1r),e(ye,q1r),e(ye,KM),e(KM,vve),e(vve,N1r),e(KM,j1r),e(KM,XQ),e(XQ,D1r),e(KM,G1r),e(ye,O1r),e(ye,ZM),e(ZM,Fve),e(Fve,V1r),e(ZM,X1r),e(ZM,zQ),e(zQ,z1r),e(ZM,W1r),e(ye,Q1r),e(ye,e4),e(e4,Tve),e(Tve,H1r),e(e4,U1r),e(e4,WQ),e(WQ,J1r),e(e4,Y1r),e(ye,K1r),e(ye,o4),e(o4,Mve),e(Mve,Z1r),e(o4,ebr),e(o4,QQ),e(QQ,obr),e(o4,rbr),e(ye,tbr),e(ye,r4),e(r4,Eve),e(Eve,abr),e(r4,nbr),e(r4,HQ),e(HQ,sbr),e(r4,lbr),e(ye,ibr),e(ye,t4),e(t4,Cve),e(Cve,dbr),e(t4,cbr),e(t4,UQ),e(UQ,fbr),e(t4,mbr),e(ye,gbr),e(ye,a4),e(a4,wve),e(wve,hbr),e(a4,pbr),e(a4,JQ),e(JQ,_br),e(a4,ubr),e(ye,bbr),e(ye,n4),e(n4,Ave),e(Ave,vbr),e(n4,Fbr),e(n4,YQ),e(YQ,Tbr),e(n4,Mbr),e(ye,Ebr),e(ye,s4),e(s4,yve),e(yve,Cbr),e(s4,wbr),e(s4,KQ),e(KQ,Abr),e(s4,ybr),e($r,Lbr),M(l4,$r,null),b(f,iNe,u),b(f,ac,u),e(ac,i4),e(i4,Lve),M(E8,Lve,null),e(ac,xbr),e(ac,xve),e(xve,$br),b(f,dNe,u),b(f,tr,u),M(C8,tr,null),e(tr,kbr),e(tr,nc),e(nc,Sbr),e(nc,ZQ),e(ZQ,Rbr),e(nc,Bbr),e(nc,eH),e(eH,Pbr),e(nc,Ibr),e(tr,qbr),e(tr,w8),e(w8,Nbr),e(w8,$ve),e($ve,jbr),e(w8,Dbr),e(tr,Gbr),e(tr,Rt),M(A8,Rt,null),e(Rt,Obr),e(Rt,kve),e(kve,Vbr),e(Rt,Xbr),e(Rt,sc),e(sc,zbr),e(sc,Sve),e(Sve,Wbr),e(sc,Qbr),e(sc,oH),e(oH,Hbr),e(sc,Ubr),e(Rt,Jbr),M(d4,Rt,null),e(tr,Ybr),e(tr,kr),M(y8,kr,null),e(kr,Kbr),e(kr,Rve),e(Rve,Zbr),e(kr,evr),e(kr,nn),e(nn,ovr),e(nn,Bve),e(Bve,rvr),e(nn,tvr),e(nn,Pve),e(Pve,avr),e(nn,nvr),e(nn,Ive),e(Ive,svr),e(nn,lvr),e(kr,ivr),e(kr,ee),e(ee,c4),e(c4,qve),e(qve,dvr),e(c4,cvr),e(c4,rH),e(rH,fvr),e(c4,mvr),e(ee,gvr),e(ee,f4),e(f4,Nve),e(Nve,hvr),e(f4,pvr),e(f4,tH),e(tH,_vr),e(f4,uvr),e(ee,bvr),e(ee,m4),e(m4,jve),e(jve,vvr),e(m4,Fvr),e(m4,aH),e(aH,Tvr),e(m4,Mvr),e(ee,Evr),e(ee,g4),e(g4,Dve),e(Dve,Cvr),e(g4,wvr),e(g4,nH),e(nH,Avr),e(g4,yvr),e(ee,Lvr),e(ee,h4),e(h4,Gve),e(Gve,xvr),e(h4,$vr),e(h4,sH),e(sH,kvr),e(h4,Svr),e(ee,Rvr),e(ee,p4),e(p4,Ove),e(Ove,Bvr),e(p4,Pvr),e(p4,lH),e(lH,Ivr),e(p4,qvr),e(ee,Nvr),e(ee,_4),e(_4,Vve),e(Vve,jvr),e(_4,Dvr),e(_4,iH),e(iH,Gvr),e(_4,Ovr),e(ee,Vvr),e(ee,u4),e(u4,Xve),e(Xve,Xvr),e(u4,zvr),e(u4,dH),e(dH,Wvr),e(u4,Qvr),e(ee,Hvr),e(ee,b4),e(b4,zve),e(zve,Uvr),e(b4,Jvr),e(b4,cH),e(cH,Yvr),e(b4,Kvr),e(ee,Zvr),e(ee,v4),e(v4,Wve),e(Wve,eFr),e(v4,oFr),e(v4,fH),e(fH,rFr),e(v4,tFr),e(ee,aFr),e(ee,F4),e(F4,Qve),e(Qve,nFr),e(F4,sFr),e(F4,mH),e(mH,lFr),e(F4,iFr),e(ee,dFr),e(ee,T4),e(T4,Hve),e(Hve,cFr),e(T4,fFr),e(T4,gH),e(gH,mFr),e(T4,gFr),e(ee,hFr),e(ee,M4),e(M4,Uve),e(Uve,pFr),e(M4,_Fr),e(M4,hH),e(hH,uFr),e(M4,bFr),e(ee,vFr),e(ee,E4),e(E4,Jve),e(Jve,FFr),e(E4,TFr),e(E4,pH),e(pH,MFr),e(E4,EFr),e(ee,CFr),e(ee,C4),e(C4,Yve),e(Yve,wFr),e(C4,AFr),e(C4,_H),e(_H,yFr),e(C4,LFr),e(ee,xFr),e(ee,w4),e(w4,Kve),e(Kve,$Fr),e(w4,kFr),e(w4,uH),e(uH,SFr),e(w4,RFr),e(ee,BFr),e(ee,A4),e(A4,Zve),e(Zve,PFr),e(A4,IFr),e(A4,bH),e(bH,qFr),e(A4,NFr),e(ee,jFr),e(ee,y4),e(y4,eFe),e(eFe,DFr),e(y4,GFr),e(y4,vH),e(vH,OFr),e(y4,VFr),e(ee,XFr),e(ee,L4),e(L4,oFe),e(oFe,zFr),e(L4,WFr),e(L4,FH),e(FH,QFr),e(L4,HFr),e(ee,UFr),e(ee,x4),e(x4,rFe),e(rFe,JFr),e(x4,YFr),e(x4,TH),e(TH,KFr),e(x4,ZFr),e(ee,e0r),e(ee,$4),e($4,tFe),e(tFe,o0r),e($4,r0r),e($4,MH),e(MH,t0r),e($4,a0r),e(ee,n0r),e(ee,k4),e(k4,aFe),e(aFe,s0r),e(k4,l0r),e(k4,EH),e(EH,i0r),e(k4,d0r),e(ee,c0r),e(ee,S4),e(S4,nFe),e(nFe,f0r),e(S4,m0r),e(S4,CH),e(CH,g0r),e(S4,h0r),e(ee,p0r),e(ee,R4),e(R4,sFe),e(sFe,_0r),e(R4,u0r),e(R4,wH),e(wH,b0r),e(R4,v0r),e(ee,F0r),e(ee,B4),e(B4,lFe),e(lFe,T0r),e(B4,M0r),e(B4,AH),e(AH,E0r),e(B4,C0r),e(ee,w0r),e(ee,P4),e(P4,iFe),e(iFe,A0r),e(P4,y0r),e(P4,yH),e(yH,L0r),e(P4,x0r),e(kr,$0r),M(I4,kr,null),b(f,cNe,u),b(f,lc,u),e(lc,q4),e(q4,dFe),M(L8,dFe,null),e(lc,k0r),e(lc,cFe),e(cFe,S0r),b(f,fNe,u),b(f,ar,u),M(x8,ar,null),e(ar,R0r),e(ar,ic),e(ic,B0r),e(ic,LH),e(LH,P0r),e(ic,I0r),e(ic,xH),e(xH,q0r),e(ic,N0r),e(ar,j0r),e(ar,$8),e($8,D0r),e($8,fFe),e(fFe,G0r),e($8,O0r),e(ar,V0r),e(ar,Bt),M(k8,Bt,null),e(Bt,X0r),e(Bt,mFe),e(mFe,z0r),e(Bt,W0r),e(Bt,dc),e(dc,Q0r),e(dc,gFe),e(gFe,H0r),e(dc,U0r),e(dc,$H),e($H,J0r),e(dc,Y0r),e(Bt,K0r),M(N4,Bt,null),e(ar,Z0r),e(ar,Sr),M(S8,Sr,null),e(Sr,eTr),e(Sr,hFe),e(hFe,oTr),e(Sr,rTr),e(Sr,sn),e(sn,tTr),e(sn,pFe),e(pFe,aTr),e(sn,nTr),e(sn,_Fe),e(_Fe,sTr),e(sn,lTr),e(sn,uFe),e(uFe,iTr),e(sn,dTr),e(Sr,cTr),e(Sr,he),e(he,j4),e(j4,bFe),e(bFe,fTr),e(j4,mTr),e(j4,kH),e(kH,gTr),e(j4,hTr),e(he,pTr),e(he,D4),e(D4,vFe),e(vFe,_Tr),e(D4,uTr),e(D4,SH),e(SH,bTr),e(D4,vTr),e(he,FTr),e(he,G4),e(G4,FFe),e(FFe,TTr),e(G4,MTr),e(G4,RH),e(RH,ETr),e(G4,CTr),e(he,wTr),e(he,O4),e(O4,TFe),e(TFe,ATr),e(O4,yTr),e(O4,BH),e(BH,LTr),e(O4,xTr),e(he,$Tr),e(he,V4),e(V4,MFe),e(MFe,kTr),e(V4,STr),e(V4,PH),e(PH,RTr),e(V4,BTr),e(he,PTr),e(he,X4),e(X4,EFe),e(EFe,ITr),e(X4,qTr),e(X4,IH),e(IH,NTr),e(X4,jTr),e(he,DTr),e(he,z4),e(z4,CFe),e(CFe,GTr),e(z4,OTr),e(z4,qH),e(qH,VTr),e(z4,XTr),e(he,zTr),e(he,W4),e(W4,wFe),e(wFe,WTr),e(W4,QTr),e(W4,NH),e(NH,HTr),e(W4,UTr),e(he,JTr),e(he,Q4),e(Q4,AFe),e(AFe,YTr),e(Q4,KTr),e(Q4,jH),e(jH,ZTr),e(Q4,e7r),e(he,o7r),e(he,H4),e(H4,yFe),e(yFe,r7r),e(H4,t7r),e(H4,DH),e(DH,a7r),e(H4,n7r),e(he,s7r),e(he,U4),e(U4,LFe),e(LFe,l7r),e(U4,i7r),e(U4,GH),e(GH,d7r),e(U4,c7r),e(he,f7r),e(he,J4),e(J4,xFe),e(xFe,m7r),e(J4,g7r),e(J4,OH),e(OH,h7r),e(J4,p7r),e(he,_7r),e(he,Y4),e(Y4,$Fe),e($Fe,u7r),e(Y4,b7r),e(Y4,VH),e(VH,v7r),e(Y4,F7r),e(he,T7r),e(he,K4),e(K4,kFe),e(kFe,M7r),e(K4,E7r),e(K4,XH),e(XH,C7r),e(K4,w7r),e(he,A7r),e(he,Z4),e(Z4,SFe),e(SFe,y7r),e(Z4,L7r),e(Z4,zH),e(zH,x7r),e(Z4,$7r),e(he,k7r),e(he,eE),e(eE,RFe),e(RFe,S7r),e(eE,R7r),e(eE,WH),e(WH,B7r),e(eE,P7r),e(he,I7r),e(he,oE),e(oE,BFe),e(BFe,q7r),e(oE,N7r),e(oE,QH),e(QH,j7r),e(oE,D7r),e(Sr,G7r),M(rE,Sr,null),b(f,mNe,u),b(f,cc,u),e(cc,tE),e(tE,PFe),M(R8,PFe,null),e(cc,O7r),e(cc,IFe),e(IFe,V7r),b(f,gNe,u),b(f,nr,u),M(B8,nr,null),e(nr,X7r),e(nr,fc),e(fc,z7r),e(fc,HH),e(HH,W7r),e(fc,Q7r),e(fc,UH),e(UH,H7r),e(fc,U7r),e(nr,J7r),e(nr,P8),e(P8,Y7r),e(P8,qFe),e(qFe,K7r),e(P8,Z7r),e(nr,eMr),e(nr,Pt),M(I8,Pt,null),e(Pt,oMr),e(Pt,NFe),e(NFe,rMr),e(Pt,tMr),e(Pt,mc),e(mc,aMr),e(mc,jFe),e(jFe,nMr),e(mc,sMr),e(mc,JH),e(JH,lMr),e(mc,iMr),e(Pt,dMr),M(aE,Pt,null),e(nr,cMr),e(nr,Rr),M(q8,Rr,null),e(Rr,fMr),e(Rr,DFe),e(DFe,mMr),e(Rr,gMr),e(Rr,ln),e(ln,hMr),e(ln,GFe),e(GFe,pMr),e(ln,_Mr),e(ln,OFe),e(OFe,uMr),e(ln,bMr),e(ln,VFe),e(VFe,vMr),e(ln,FMr),e(Rr,TMr),e(Rr,N8),e(N8,nE),e(nE,XFe),e(XFe,MMr),e(nE,EMr),e(nE,YH),e(YH,CMr),e(nE,wMr),e(N8,AMr),e(N8,sE),e(sE,zFe),e(zFe,yMr),e(sE,LMr),e(sE,KH),e(KH,xMr),e(sE,$Mr),e(Rr,kMr),M(lE,Rr,null),b(f,hNe,u),b(f,gc,u),e(gc,iE),e(iE,WFe),M(j8,WFe,null),e(gc,SMr),e(gc,QFe),e(QFe,RMr),b(f,pNe,u),b(f,sr,u),M(D8,sr,null),e(sr,BMr),e(sr,hc),e(hc,PMr),e(hc,ZH),e(ZH,IMr),e(hc,qMr),e(hc,eU),e(eU,NMr),e(hc,jMr),e(sr,DMr),e(sr,G8),e(G8,GMr),e(G8,HFe),e(HFe,OMr),e(G8,VMr),e(sr,XMr),e(sr,It),M(O8,It,null),e(It,zMr),e(It,UFe),e(UFe,WMr),e(It,QMr),e(It,pc),e(pc,HMr),e(pc,JFe),e(JFe,UMr),e(pc,JMr),e(pc,oU),e(oU,YMr),e(pc,KMr),e(It,ZMr),M(dE,It,null),e(sr,e4r),e(sr,Br),M(V8,Br,null),e(Br,o4r),e(Br,YFe),e(YFe,r4r),e(Br,t4r),e(Br,dn),e(dn,a4r),e(dn,KFe),e(KFe,n4r),e(dn,s4r),e(dn,ZFe),e(ZFe,l4r),e(dn,i4r),e(dn,e0e),e(e0e,d4r),e(dn,c4r),e(Br,f4r),e(Br,o0e),e(o0e,cE),e(cE,r0e),e(r0e,m4r),e(cE,g4r),e(cE,rU),e(rU,h4r),e(cE,p4r),e(Br,_4r),M(fE,Br,null),b(f,_Ne,u),b(f,_c,u),e(_c,mE),e(mE,t0e),M(X8,t0e,null),e(_c,u4r),e(_c,a0e),e(a0e,b4r),b(f,uNe,u),b(f,lr,u),M(z8,lr,null),e(lr,v4r),e(lr,uc),e(uc,F4r),e(uc,tU),e(tU,T4r),e(uc,M4r),e(uc,aU),e(aU,E4r),e(uc,C4r),e(lr,w4r),e(lr,W8),e(W8,A4r),e(W8,n0e),e(n0e,y4r),e(W8,L4r),e(lr,x4r),e(lr,qt),M(Q8,qt,null),e(qt,$4r),e(qt,s0e),e(s0e,k4r),e(qt,S4r),e(qt,bc),e(bc,R4r),e(bc,l0e),e(l0e,B4r),e(bc,P4r),e(bc,nU),e(nU,I4r),e(bc,q4r),e(qt,N4r),M(gE,qt,null),e(lr,j4r),e(lr,Pr),M(H8,Pr,null),e(Pr,D4r),e(Pr,i0e),e(i0e,G4r),e(Pr,O4r),e(Pr,cn),e(cn,V4r),e(cn,d0e),e(d0e,X4r),e(cn,z4r),e(cn,c0e),e(c0e,W4r),e(cn,Q4r),e(cn,f0e),e(f0e,H4r),e(cn,U4r),e(Pr,J4r),e(Pr,de),e(de,hE),e(hE,m0e),e(m0e,Y4r),e(hE,K4r),e(hE,sU),e(sU,Z4r),e(hE,eEr),e(de,oEr),e(de,pE),e(pE,g0e),e(g0e,rEr),e(pE,tEr),e(pE,lU),e(lU,aEr),e(pE,nEr),e(de,sEr),e(de,_E),e(_E,h0e),e(h0e,lEr),e(_E,iEr),e(_E,iU),e(iU,dEr),e(_E,cEr),e(de,fEr),e(de,uE),e(uE,p0e),e(p0e,mEr),e(uE,gEr),e(uE,dU),e(dU,hEr),e(uE,pEr),e(de,_Er),e(de,bE),e(bE,_0e),e(_0e,uEr),e(bE,bEr),e(bE,cU),e(cU,vEr),e(bE,FEr),e(de,TEr),e(de,vE),e(vE,u0e),e(u0e,MEr),e(vE,EEr),e(vE,fU),e(fU,CEr),e(vE,wEr),e(de,AEr),e(de,FE),e(FE,b0e),e(b0e,yEr),e(FE,LEr),e(FE,mU),e(mU,xEr),e(FE,$Er),e(de,kEr),e(de,TE),e(TE,v0e),e(v0e,SEr),e(TE,REr),e(TE,gU),e(gU,BEr),e(TE,PEr),e(de,IEr),e(de,ME),e(ME,F0e),e(F0e,qEr),e(ME,NEr),e(ME,hU),e(hU,jEr),e(ME,DEr),e(de,GEr),e(de,EE),e(EE,T0e),e(T0e,OEr),e(EE,VEr),e(EE,pU),e(pU,XEr),e(EE,zEr),e(de,WEr),e(de,CE),e(CE,M0e),e(M0e,QEr),e(CE,HEr),e(CE,_U),e(_U,UEr),e(CE,JEr),e(de,YEr),e(de,wE),e(wE,E0e),e(E0e,KEr),e(wE,ZEr),e(wE,uU),e(uU,eCr),e(wE,oCr),e(de,rCr),e(de,AE),e(AE,C0e),e(C0e,tCr),e(AE,aCr),e(AE,bU),e(bU,nCr),e(AE,sCr),e(de,lCr),e(de,yE),e(yE,w0e),e(w0e,iCr),e(yE,dCr),e(yE,vU),e(vU,cCr),e(yE,fCr),e(de,mCr),e(de,LE),e(LE,A0e),e(A0e,gCr),e(LE,hCr),e(LE,FU),e(FU,pCr),e(LE,_Cr),e(de,uCr),e(de,xE),e(xE,y0e),e(y0e,bCr),e(xE,vCr),e(xE,TU),e(TU,FCr),e(xE,TCr),e(de,MCr),e(de,$E),e($E,L0e),e(L0e,ECr),e($E,CCr),e($E,MU),e(MU,wCr),e($E,ACr),e(de,yCr),e(de,kE),e(kE,x0e),e(x0e,LCr),e(kE,xCr),e(kE,EU),e(EU,$Cr),e(kE,kCr),e(de,SCr),e(de,SE),e(SE,$0e),e($0e,RCr),e(SE,BCr),e(SE,CU),e(CU,PCr),e(SE,ICr),e(de,qCr),e(de,RE),e(RE,k0e),e(k0e,NCr),e(RE,jCr),e(RE,wU),e(wU,DCr),e(RE,GCr),e(Pr,OCr),M(BE,Pr,null),b(f,bNe,u),b(f,vc,u),e(vc,PE),e(PE,S0e),M(U8,S0e,null),e(vc,VCr),e(vc,R0e),e(R0e,XCr),b(f,vNe,u),b(f,ir,u),M(J8,ir,null),e(ir,zCr),e(ir,Fc),e(Fc,WCr),e(Fc,AU),e(AU,QCr),e(Fc,HCr),e(Fc,yU),e(yU,UCr),e(Fc,JCr),e(ir,YCr),e(ir,Y8),e(Y8,KCr),e(Y8,B0e),e(B0e,ZCr),e(Y8,e5r),e(ir,o5r),e(ir,Nt),M(K8,Nt,null),e(Nt,r5r),e(Nt,P0e),e(P0e,t5r),e(Nt,a5r),e(Nt,Tc),e(Tc,n5r),e(Tc,I0e),e(I0e,s5r),e(Tc,l5r),e(Tc,LU),e(LU,i5r),e(Tc,d5r),e(Nt,c5r),M(IE,Nt,null),e(ir,f5r),e(ir,Ir),M(Z8,Ir,null),e(Ir,m5r),e(Ir,q0e),e(q0e,g5r),e(Ir,h5r),e(Ir,fn),e(fn,p5r),e(fn,N0e),e(N0e,_5r),e(fn,u5r),e(fn,j0e),e(j0e,b5r),e(fn,v5r),e(fn,D0e),e(D0e,F5r),e(fn,T5r),e(Ir,M5r),e(Ir,ce),e(ce,qE),e(qE,G0e),e(G0e,E5r),e(qE,C5r),e(qE,xU),e(xU,w5r),e(qE,A5r),e(ce,y5r),e(ce,NE),e(NE,O0e),e(O0e,L5r),e(NE,x5r),e(NE,$U),e($U,$5r),e(NE,k5r),e(ce,S5r),e(ce,jE),e(jE,V0e),e(V0e,R5r),e(jE,B5r),e(jE,kU),e(kU,P5r),e(jE,I5r),e(ce,q5r),e(ce,DE),e(DE,X0e),e(X0e,N5r),e(DE,j5r),e(DE,SU),e(SU,D5r),e(DE,G5r),e(ce,O5r),e(ce,GE),e(GE,z0e),e(z0e,V5r),e(GE,X5r),e(GE,RU),e(RU,z5r),e(GE,W5r),e(ce,Q5r),e(ce,OE),e(OE,W0e),e(W0e,H5r),e(OE,U5r),e(OE,BU),e(BU,J5r),e(OE,Y5r),e(ce,K5r),e(ce,VE),e(VE,Q0e),e(Q0e,Z5r),e(VE,e3r),e(VE,PU),e(PU,o3r),e(VE,r3r),e(ce,t3r),e(ce,XE),e(XE,H0e),e(H0e,a3r),e(XE,n3r),e(XE,IU),e(IU,s3r),e(XE,l3r),e(ce,i3r),e(ce,zE),e(zE,U0e),e(U0e,d3r),e(zE,c3r),e(zE,qU),e(qU,f3r),e(zE,m3r),e(ce,g3r),e(ce,WE),e(WE,J0e),e(J0e,h3r),e(WE,p3r),e(WE,NU),e(NU,_3r),e(WE,u3r),e(ce,b3r),e(ce,QE),e(QE,Y0e),e(Y0e,v3r),e(QE,F3r),e(QE,jU),e(jU,T3r),e(QE,M3r),e(ce,E3r),e(ce,HE),e(HE,K0e),e(K0e,C3r),e(HE,w3r),e(HE,DU),e(DU,A3r),e(HE,y3r),e(ce,L3r),e(ce,UE),e(UE,Z0e),e(Z0e,x3r),e(UE,$3r),e(UE,GU),e(GU,k3r),e(UE,S3r),e(ce,R3r),e(ce,JE),e(JE,eTe),e(eTe,B3r),e(JE,P3r),e(JE,OU),e(OU,I3r),e(JE,q3r),e(ce,N3r),e(ce,YE),e(YE,oTe),e(oTe,j3r),e(YE,D3r),e(YE,VU),e(VU,G3r),e(YE,O3r),e(ce,V3r),e(ce,KE),e(KE,rTe),e(rTe,X3r),e(KE,z3r),e(KE,XU),e(XU,W3r),e(KE,Q3r),e(ce,H3r),e(ce,ZE),e(ZE,tTe),e(tTe,U3r),e(ZE,J3r),e(ZE,zU),e(zU,Y3r),e(ZE,K3r),e(ce,Z3r),e(ce,eC),e(eC,aTe),e(aTe,ewr),e(eC,owr),e(eC,WU),e(WU,rwr),e(eC,twr),e(ce,awr),e(ce,oC),e(oC,nTe),e(nTe,nwr),e(oC,swr),e(oC,QU),e(QU,lwr),e(oC,iwr),e(ce,dwr),e(ce,rC),e(rC,sTe),e(sTe,cwr),e(rC,fwr),e(rC,HU),e(HU,mwr),e(rC,gwr),e(Ir,hwr),M(tC,Ir,null),b(f,FNe,u),b(f,Mc,u),e(Mc,aC),e(aC,lTe),M(e9,lTe,null),e(Mc,pwr),e(Mc,iTe),e(iTe,_wr),b(f,TNe,u),b(f,dr,u),M(o9,dr,null),e(dr,uwr),e(dr,Ec),e(Ec,bwr),e(Ec,UU),e(UU,vwr),e(Ec,Fwr),e(Ec,JU),e(JU,Twr),e(Ec,Mwr),e(dr,Ewr),e(dr,r9),e(r9,Cwr),e(r9,dTe),e(dTe,wwr),e(r9,Awr),e(dr,ywr),e(dr,jt),M(t9,jt,null),e(jt,Lwr),e(jt,cTe),e(cTe,xwr),e(jt,$wr),e(jt,Cc),e(Cc,kwr),e(Cc,fTe),e(fTe,Swr),e(Cc,Rwr),e(Cc,YU),e(YU,Bwr),e(Cc,Pwr),e(jt,Iwr),M(nC,jt,null),e(dr,qwr),e(dr,qr),M(a9,qr,null),e(qr,Nwr),e(qr,mTe),e(mTe,jwr),e(qr,Dwr),e(qr,mn),e(mn,Gwr),e(mn,gTe),e(gTe,Owr),e(mn,Vwr),e(mn,hTe),e(hTe,Xwr),e(mn,zwr),e(mn,pTe),e(pTe,Wwr),e(mn,Qwr),e(qr,Hwr),e(qr,_Te),e(_Te,sC),e(sC,uTe),e(uTe,Uwr),e(sC,Jwr),e(sC,KU),e(KU,Ywr),e(sC,Kwr),e(qr,Zwr),M(lC,qr,null),b(f,MNe,u),b(f,wc,u),e(wc,iC),e(iC,bTe),M(n9,bTe,null),e(wc,eAr),e(wc,vTe),e(vTe,oAr),b(f,ENe,u),b(f,cr,u),M(s9,cr,null),e(cr,rAr),e(cr,Ac),e(Ac,tAr),e(Ac,ZU),e(ZU,aAr),e(Ac,nAr),e(Ac,eJ),e(eJ,sAr),e(Ac,lAr),e(cr,iAr),e(cr,l9),e(l9,dAr),e(l9,FTe),e(FTe,cAr),e(l9,fAr),e(cr,mAr),e(cr,Dt),M(i9,Dt,null),e(Dt,gAr),e(Dt,TTe),e(TTe,hAr),e(Dt,pAr),e(Dt,yc),e(yc,_Ar),e(yc,MTe),e(MTe,uAr),e(yc,bAr),e(yc,oJ),e(oJ,vAr),e(yc,FAr),e(Dt,TAr),M(dC,Dt,null),e(cr,MAr),e(cr,Nr),M(d9,Nr,null),e(Nr,EAr),e(Nr,ETe),e(ETe,CAr),e(Nr,wAr),e(Nr,gn),e(gn,AAr),e(gn,CTe),e(CTe,yAr),e(gn,LAr),e(gn,wTe),e(wTe,xAr),e(gn,$Ar),e(gn,ATe),e(ATe,kAr),e(gn,SAr),e(Nr,RAr),e(Nr,yTe),e(yTe,cC),e(cC,LTe),e(LTe,BAr),e(cC,PAr),e(cC,rJ),e(rJ,IAr),e(cC,qAr),e(Nr,NAr),M(fC,Nr,null),b(f,CNe,u),b(f,Lc,u),e(Lc,mC),e(mC,xTe),M(c9,xTe,null),e(Lc,jAr),e(Lc,$Te),e($Te,DAr),b(f,wNe,u),b(f,fr,u),M(f9,fr,null),e(fr,GAr),e(fr,xc),e(xc,OAr),e(xc,tJ),e(tJ,VAr),e(xc,XAr),e(xc,aJ),e(aJ,zAr),e(xc,WAr),e(fr,QAr),e(fr,m9),e(m9,HAr),e(m9,kTe),e(kTe,UAr),e(m9,JAr),e(fr,YAr),e(fr,Gt),M(g9,Gt,null),e(Gt,KAr),e(Gt,STe),e(STe,ZAr),e(Gt,e6r),e(Gt,$c),e($c,o6r),e($c,RTe),e(RTe,r6r),e($c,t6r),e($c,nJ),e(nJ,a6r),e($c,n6r),e(Gt,s6r),M(gC,Gt,null),e(fr,l6r),e(fr,jr),M(h9,jr,null),e(jr,i6r),e(jr,BTe),e(BTe,d6r),e(jr,c6r),e(jr,hn),e(hn,f6r),e(hn,PTe),e(PTe,m6r),e(hn,g6r),e(hn,ITe),e(ITe,h6r),e(hn,p6r),e(hn,qTe),e(qTe,_6r),e(hn,u6r),e(jr,b6r),e(jr,re),e(re,hC),e(hC,NTe),e(NTe,v6r),e(hC,F6r),e(hC,sJ),e(sJ,T6r),e(hC,M6r),e(re,E6r),e(re,pC),e(pC,jTe),e(jTe,C6r),e(pC,w6r),e(pC,lJ),e(lJ,A6r),e(pC,y6r),e(re,L6r),e(re,_C),e(_C,DTe),e(DTe,x6r),e(_C,$6r),e(_C,iJ),e(iJ,k6r),e(_C,S6r),e(re,R6r),e(re,uC),e(uC,GTe),e(GTe,B6r),e(uC,P6r),e(uC,dJ),e(dJ,I6r),e(uC,q6r),e(re,N6r),e(re,bC),e(bC,OTe),e(OTe,j6r),e(bC,D6r),e(bC,cJ),e(cJ,G6r),e(bC,O6r),e(re,V6r),e(re,vC),e(vC,VTe),e(VTe,X6r),e(vC,z6r),e(vC,fJ),e(fJ,W6r),e(vC,Q6r),e(re,H6r),e(re,FC),e(FC,XTe),e(XTe,U6r),e(FC,J6r),e(FC,mJ),e(mJ,Y6r),e(FC,K6r),e(re,Z6r),e(re,TC),e(TC,zTe),e(zTe,eyr),e(TC,oyr),e(TC,gJ),e(gJ,ryr),e(TC,tyr),e(re,ayr),e(re,MC),e(MC,WTe),e(WTe,nyr),e(MC,syr),e(MC,hJ),e(hJ,lyr),e(MC,iyr),e(re,dyr),e(re,EC),e(EC,QTe),e(QTe,cyr),e(EC,fyr),e(EC,pJ),e(pJ,myr),e(EC,gyr),e(re,hyr),e(re,CC),e(CC,HTe),e(HTe,pyr),e(CC,_yr),e(CC,_J),e(_J,uyr),e(CC,byr),e(re,vyr),e(re,wC),e(wC,UTe),e(UTe,Fyr),e(wC,Tyr),e(wC,uJ),e(uJ,Myr),e(wC,Eyr),e(re,Cyr),e(re,AC),e(AC,JTe),e(JTe,wyr),e(AC,Ayr),e(AC,bJ),e(bJ,yyr),e(AC,Lyr),e(re,xyr),e(re,yC),e(yC,YTe),e(YTe,$yr),e(yC,kyr),e(yC,vJ),e(vJ,Syr),e(yC,Ryr),e(re,Byr),e(re,LC),e(LC,KTe),e(KTe,Pyr),e(LC,Iyr),e(LC,FJ),e(FJ,qyr),e(LC,Nyr),e(re,jyr),e(re,xC),e(xC,ZTe),e(ZTe,Dyr),e(xC,Gyr),e(xC,TJ),e(TJ,Oyr),e(xC,Vyr),e(re,Xyr),e(re,$C),e($C,e7e),e(e7e,zyr),e($C,Wyr),e($C,MJ),e(MJ,Qyr),e($C,Hyr),e(re,Uyr),e(re,kC),e(kC,o7e),e(o7e,Jyr),e(kC,Yyr),e(kC,EJ),e(EJ,Kyr),e(kC,Zyr),e(re,eLr),e(re,SC),e(SC,r7e),e(r7e,oLr),e(SC,rLr),e(SC,CJ),e(CJ,tLr),e(SC,aLr),e(re,nLr),e(re,RC),e(RC,t7e),e(t7e,sLr),e(RC,lLr),e(RC,wJ),e(wJ,iLr),e(RC,dLr),e(re,cLr),e(re,BC),e(BC,a7e),e(a7e,fLr),e(BC,mLr),e(BC,AJ),e(AJ,gLr),e(BC,hLr),e(re,pLr),e(re,PC),e(PC,n7e),e(n7e,_Lr),e(PC,uLr),e(PC,yJ),e(yJ,bLr),e(PC,vLr),e(re,FLr),e(re,IC),e(IC,s7e),e(s7e,TLr),e(IC,MLr),e(IC,LJ),e(LJ,ELr),e(IC,CLr),e(re,wLr),e(re,qC),e(qC,l7e),e(l7e,ALr),e(qC,yLr),e(qC,xJ),e(xJ,LLr),e(qC,xLr),e(re,$Lr),e(re,NC),e(NC,i7e),e(i7e,kLr),e(NC,SLr),e(NC,$J),e($J,RLr),e(NC,BLr),e(jr,PLr),M(jC,jr,null),b(f,ANe,u),b(f,kc,u),e(kc,DC),e(DC,d7e),M(p9,d7e,null),e(kc,ILr),e(kc,c7e),e(c7e,qLr),b(f,yNe,u),b(f,mr,u),M(_9,mr,null),e(mr,NLr),e(mr,Sc),e(Sc,jLr),e(Sc,kJ),e(kJ,DLr),e(Sc,GLr),e(Sc,SJ),e(SJ,OLr),e(Sc,VLr),e(mr,XLr),e(mr,u9),e(u9,zLr),e(u9,f7e),e(f7e,WLr),e(u9,QLr),e(mr,HLr),e(mr,Ot),M(b9,Ot,null),e(Ot,ULr),e(Ot,m7e),e(m7e,JLr),e(Ot,YLr),e(Ot,Rc),e(Rc,KLr),e(Rc,g7e),e(g7e,ZLr),e(Rc,e8r),e(Rc,RJ),e(RJ,o8r),e(Rc,r8r),e(Ot,t8r),M(GC,Ot,null),e(mr,a8r),e(mr,Dr),M(v9,Dr,null),e(Dr,n8r),e(Dr,h7e),e(h7e,s8r),e(Dr,l8r),e(Dr,pn),e(pn,i8r),e(pn,p7e),e(p7e,d8r),e(pn,c8r),e(pn,_7e),e(_7e,f8r),e(pn,m8r),e(pn,u7e),e(u7e,g8r),e(pn,h8r),e(Dr,p8r),e(Dr,Re),e(Re,OC),e(OC,b7e),e(b7e,_8r),e(OC,u8r),e(OC,BJ),e(BJ,b8r),e(OC,v8r),e(Re,F8r),e(Re,VC),e(VC,v7e),e(v7e,T8r),e(VC,M8r),e(VC,PJ),e(PJ,E8r),e(VC,C8r),e(Re,w8r),e(Re,XC),e(XC,F7e),e(F7e,A8r),e(XC,y8r),e(XC,IJ),e(IJ,L8r),e(XC,x8r),e(Re,$8r),e(Re,zC),e(zC,T7e),e(T7e,k8r),e(zC,S8r),e(zC,qJ),e(qJ,R8r),e(zC,B8r),e(Re,P8r),e(Re,WC),e(WC,M7e),e(M7e,I8r),e(WC,q8r),e(WC,NJ),e(NJ,N8r),e(WC,j8r),e(Re,D8r),e(Re,QC),e(QC,E7e),e(E7e,G8r),e(QC,O8r),e(QC,jJ),e(jJ,V8r),e(QC,X8r),e(Re,z8r),e(Re,HC),e(HC,C7e),e(C7e,W8r),e(HC,Q8r),e(HC,DJ),e(DJ,H8r),e(HC,U8r),e(Re,J8r),e(Re,UC),e(UC,w7e),e(w7e,Y8r),e(UC,K8r),e(UC,GJ),e(GJ,Z8r),e(UC,e9r),e(Re,o9r),e(Re,JC),e(JC,A7e),e(A7e,r9r),e(JC,t9r),e(JC,OJ),e(OJ,a9r),e(JC,n9r),e(Dr,s9r),M(YC,Dr,null),b(f,LNe,u),b(f,Bc,u),e(Bc,KC),e(KC,y7e),M(F9,y7e,null),e(Bc,l9r),e(Bc,L7e),e(L7e,i9r),b(f,xNe,u),b(f,gr,u),M(T9,gr,null),e(gr,d9r),e(gr,Pc),e(Pc,c9r),e(Pc,VJ),e(VJ,f9r),e(Pc,m9r),e(Pc,XJ),e(XJ,g9r),e(Pc,h9r),e(gr,p9r),e(gr,M9),e(M9,_9r),e(M9,x7e),e(x7e,u9r),e(M9,b9r),e(gr,v9r),e(gr,Vt),M(E9,Vt,null),e(Vt,F9r),e(Vt,$7e),e($7e,T9r),e(Vt,M9r),e(Vt,Ic),e(Ic,E9r),e(Ic,k7e),e(k7e,C9r),e(Ic,w9r),e(Ic,zJ),e(zJ,A9r),e(Ic,y9r),e(Vt,L9r),M(ZC,Vt,null),e(gr,x9r),e(gr,Gr),M(C9,Gr,null),e(Gr,$9r),e(Gr,S7e),e(S7e,k9r),e(Gr,S9r),e(Gr,_n),e(_n,R9r),e(_n,R7e),e(R7e,B9r),e(_n,P9r),e(_n,B7e),e(B7e,I9r),e(_n,q9r),e(_n,P7e),e(P7e,N9r),e(_n,j9r),e(Gr,D9r),e(Gr,Me),e(Me,e5),e(e5,I7e),e(I7e,G9r),e(e5,O9r),e(e5,WJ),e(WJ,V9r),e(e5,X9r),e(Me,z9r),e(Me,o5),e(o5,q7e),e(q7e,W9r),e(o5,Q9r),e(o5,QJ),e(QJ,H9r),e(o5,U9r),e(Me,J9r),e(Me,r5),e(r5,N7e),e(N7e,Y9r),e(r5,K9r),e(r5,HJ),e(HJ,Z9r),e(r5,exr),e(Me,oxr),e(Me,t5),e(t5,j7e),e(j7e,rxr),e(t5,txr),e(t5,UJ),e(UJ,axr),e(t5,nxr),e(Me,sxr),e(Me,a5),e(a5,D7e),e(D7e,lxr),e(a5,ixr),e(a5,JJ),e(JJ,dxr),e(a5,cxr),e(Me,fxr),e(Me,n5),e(n5,G7e),e(G7e,mxr),e(n5,gxr),e(n5,YJ),e(YJ,hxr),e(n5,pxr),e(Me,_xr),e(Me,s5),e(s5,O7e),e(O7e,uxr),e(s5,bxr),e(s5,KJ),e(KJ,vxr),e(s5,Fxr),e(Me,Txr),e(Me,l5),e(l5,V7e),e(V7e,Mxr),e(l5,Exr),e(l5,ZJ),e(ZJ,Cxr),e(l5,wxr),e(Me,Axr),e(Me,i5),e(i5,X7e),e(X7e,yxr),e(i5,Lxr),e(i5,eY),e(eY,xxr),e(i5,$xr),e(Me,kxr),e(Me,d5),e(d5,z7e),e(z7e,Sxr),e(d5,Rxr),e(d5,oY),e(oY,Bxr),e(d5,Pxr),e(Me,Ixr),e(Me,c5),e(c5,W7e),e(W7e,qxr),e(c5,Nxr),e(c5,rY),e(rY,jxr),e(c5,Dxr),e(Me,Gxr),e(Me,f5),e(f5,Q7e),e(Q7e,Oxr),e(f5,Vxr),e(f5,tY),e(tY,Xxr),e(f5,zxr),e(Gr,Wxr),M(m5,Gr,null),b(f,$Ne,u),b(f,qc,u),e(qc,g5),e(g5,H7e),M(w9,H7e,null),e(qc,Qxr),e(qc,U7e),e(U7e,Hxr),b(f,kNe,u),b(f,hr,u),M(A9,hr,null),e(hr,Uxr),e(hr,Nc),e(Nc,Jxr),e(Nc,aY),e(aY,Yxr),e(Nc,Kxr),e(Nc,nY),e(nY,Zxr),e(Nc,e$r),e(hr,o$r),e(hr,y9),e(y9,r$r),e(y9,J7e),e(J7e,t$r),e(y9,a$r),e(hr,n$r),e(hr,Xt),M(L9,Xt,null),e(Xt,s$r),e(Xt,Y7e),e(Y7e,l$r),e(Xt,i$r),e(Xt,jc),e(jc,d$r),e(jc,K7e),e(K7e,c$r),e(jc,f$r),e(jc,sY),e(sY,m$r),e(jc,g$r),e(Xt,h$r),M(h5,Xt,null),e(hr,p$r),e(hr,Or),M(x9,Or,null),e(Or,_$r),e(Or,Z7e),e(Z7e,u$r),e(Or,b$r),e(Or,un),e(un,v$r),e(un,eMe),e(eMe,F$r),e(un,T$r),e(un,oMe),e(oMe,M$r),e(un,E$r),e(un,rMe),e(rMe,C$r),e(un,w$r),e(Or,A$r),e(Or,Le),e(Le,p5),e(p5,tMe),e(tMe,y$r),e(p5,L$r),e(p5,lY),e(lY,x$r),e(p5,$$r),e(Le,k$r),e(Le,_5),e(_5,aMe),e(aMe,S$r),e(_5,R$r),e(_5,iY),e(iY,B$r),e(_5,P$r),e(Le,I$r),e(Le,u5),e(u5,nMe),e(nMe,q$r),e(u5,N$r),e(u5,dY),e(dY,j$r),e(u5,D$r),e(Le,G$r),e(Le,b5),e(b5,sMe),e(sMe,O$r),e(b5,V$r),e(b5,cY),e(cY,X$r),e(b5,z$r),e(Le,W$r),e(Le,v5),e(v5,lMe),e(lMe,Q$r),e(v5,H$r),e(v5,fY),e(fY,U$r),e(v5,J$r),e(Le,Y$r),e(Le,F5),e(F5,iMe),e(iMe,K$r),e(F5,Z$r),e(F5,mY),e(mY,ekr),e(F5,okr),e(Le,rkr),e(Le,T5),e(T5,dMe),e(dMe,tkr),e(T5,akr),e(T5,gY),e(gY,nkr),e(T5,skr),e(Le,lkr),e(Le,M5),e(M5,cMe),e(cMe,ikr),e(M5,dkr),e(M5,hY),e(hY,ckr),e(M5,fkr),e(Le,mkr),e(Le,E5),e(E5,fMe),e(fMe,gkr),e(E5,hkr),e(E5,pY),e(pY,pkr),e(E5,_kr),e(Le,ukr),e(Le,C5),e(C5,mMe),e(mMe,bkr),e(C5,vkr),e(C5,_Y),e(_Y,Fkr),e(C5,Tkr),e(Or,Mkr),M(w5,Or,null),b(f,SNe,u),b(f,Dc,u),e(Dc,A5),e(A5,gMe),M($9,gMe,null),e(Dc,Ekr),e(Dc,hMe),e(hMe,Ckr),b(f,RNe,u),b(f,pr,u),M(k9,pr,null),e(pr,wkr),e(pr,Gc),e(Gc,Akr),e(Gc,uY),e(uY,ykr),e(Gc,Lkr),e(Gc,bY),e(bY,xkr),e(Gc,$kr),e(pr,kkr),e(pr,S9),e(S9,Skr),e(S9,pMe),e(pMe,Rkr),e(S9,Bkr),e(pr,Pkr),e(pr,zt),M(R9,zt,null),e(zt,Ikr),e(zt,_Me),e(_Me,qkr),e(zt,Nkr),e(zt,Oc),e(Oc,jkr),e(Oc,uMe),e(uMe,Dkr),e(Oc,Gkr),e(Oc,vY),e(vY,Okr),e(Oc,Vkr),e(zt,Xkr),M(y5,zt,null),e(pr,zkr),e(pr,Vr),M(B9,Vr,null),e(Vr,Wkr),e(Vr,bMe),e(bMe,Qkr),e(Vr,Hkr),e(Vr,bn),e(bn,Ukr),e(bn,vMe),e(vMe,Jkr),e(bn,Ykr),e(bn,FMe),e(FMe,Kkr),e(bn,Zkr),e(bn,TMe),e(TMe,eSr),e(bn,oSr),e(Vr,rSr),e(Vr,Be),e(Be,L5),e(L5,MMe),e(MMe,tSr),e(L5,aSr),e(L5,FY),e(FY,nSr),e(L5,sSr),e(Be,lSr),e(Be,x5),e(x5,EMe),e(EMe,iSr),e(x5,dSr),e(x5,TY),e(TY,cSr),e(x5,fSr),e(Be,mSr),e(Be,$5),e($5,CMe),e(CMe,gSr),e($5,hSr),e($5,MY),e(MY,pSr),e($5,_Sr),e(Be,uSr),e(Be,k5),e(k5,wMe),e(wMe,bSr),e(k5,vSr),e(k5,EY),e(EY,FSr),e(k5,TSr),e(Be,MSr),e(Be,S5),e(S5,AMe),e(AMe,ESr),e(S5,CSr),e(S5,CY),e(CY,wSr),e(S5,ASr),e(Be,ySr),e(Be,R5),e(R5,yMe),e(yMe,LSr),e(R5,xSr),e(R5,wY),e(wY,$Sr),e(R5,kSr),e(Be,SSr),e(Be,B5),e(B5,LMe),e(LMe,RSr),e(B5,BSr),e(B5,AY),e(AY,PSr),e(B5,ISr),e(Be,qSr),e(Be,P5),e(P5,xMe),e(xMe,NSr),e(P5,jSr),e(P5,yY),e(yY,DSr),e(P5,GSr),e(Be,OSr),e(Be,I5),e(I5,$Me),e($Me,VSr),e(I5,XSr),e(I5,LY),e(LY,zSr),e(I5,WSr),e(Vr,QSr),M(q5,Vr,null),b(f,BNe,u),b(f,Vc,u),e(Vc,N5),e(N5,kMe),M(P9,kMe,null),e(Vc,HSr),e(Vc,SMe),e(SMe,USr),b(f,PNe,u),b(f,_r,u),M(I9,_r,null),e(_r,JSr),e(_r,Xc),e(Xc,YSr),e(Xc,xY),e(xY,KSr),e(Xc,ZSr),e(Xc,$Y),e($Y,eRr),e(Xc,oRr),e(_r,rRr),e(_r,q9),e(q9,tRr),e(q9,RMe),e(RMe,aRr),e(q9,nRr),e(_r,sRr),e(_r,Wt),M(N9,Wt,null),e(Wt,lRr),e(Wt,BMe),e(BMe,iRr),e(Wt,dRr),e(Wt,zc),e(zc,cRr),e(zc,PMe),e(PMe,fRr),e(zc,mRr),e(zc,kY),e(kY,gRr),e(zc,hRr),e(Wt,pRr),M(j5,Wt,null),e(_r,_Rr),e(_r,Xr),M(j9,Xr,null),e(Xr,uRr),e(Xr,IMe),e(IMe,bRr),e(Xr,vRr),e(Xr,vn),e(vn,FRr),e(vn,qMe),e(qMe,TRr),e(vn,MRr),e(vn,NMe),e(NMe,ERr),e(vn,CRr),e(vn,jMe),e(jMe,wRr),e(vn,ARr),e(Xr,yRr),e(Xr,xe),e(xe,D5),e(D5,DMe),e(DMe,LRr),e(D5,xRr),e(D5,SY),e(SY,$Rr),e(D5,kRr),e(xe,SRr),e(xe,G5),e(G5,GMe),e(GMe,RRr),e(G5,BRr),e(G5,RY),e(RY,PRr),e(G5,IRr),e(xe,qRr),e(xe,O5),e(O5,OMe),e(OMe,NRr),e(O5,jRr),e(O5,BY),e(BY,DRr),e(O5,GRr),e(xe,ORr),e(xe,V5),e(V5,VMe),e(VMe,VRr),e(V5,XRr),e(V5,PY),e(PY,zRr),e(V5,WRr),e(xe,QRr),e(xe,X5),e(X5,XMe),e(XMe,HRr),e(X5,URr),e(X5,IY),e(IY,JRr),e(X5,YRr),e(xe,KRr),e(xe,z5),e(z5,zMe),e(zMe,ZRr),e(z5,eBr),e(z5,qY),e(qY,oBr),e(z5,rBr),e(xe,tBr),e(xe,W5),e(W5,WMe),e(WMe,aBr),e(W5,nBr),e(W5,NY),e(NY,sBr),e(W5,lBr),e(xe,iBr),e(xe,Q5),e(Q5,QMe),e(QMe,dBr),e(Q5,cBr),e(Q5,jY),e(jY,fBr),e(Q5,mBr),e(xe,gBr),e(xe,H5),e(H5,HMe),e(HMe,hBr),e(H5,pBr),e(H5,DY),e(DY,_Br),e(H5,uBr),e(xe,bBr),e(xe,U5),e(U5,UMe),e(UMe,vBr),e(U5,FBr),e(U5,GY),e(GY,TBr),e(U5,MBr),e(Xr,EBr),M(J5,Xr,null),b(f,INe,u),b(f,Wc,u),e(Wc,Y5),e(Y5,JMe),M(D9,JMe,null),e(Wc,CBr),e(Wc,YMe),e(YMe,wBr),b(f,qNe,u),b(f,ur,u),M(G9,ur,null),e(ur,ABr),e(ur,Qc),e(Qc,yBr),e(Qc,OY),e(OY,LBr),e(Qc,xBr),e(Qc,VY),e(VY,$Br),e(Qc,kBr),e(ur,SBr),e(ur,O9),e(O9,RBr),e(O9,KMe),e(KMe,BBr),e(O9,PBr),e(ur,IBr),e(ur,Qt),M(V9,Qt,null),e(Qt,qBr),e(Qt,ZMe),e(ZMe,NBr),e(Qt,jBr),e(Qt,Hc),e(Hc,DBr),e(Hc,e4e),e(e4e,GBr),e(Hc,OBr),e(Hc,XY),e(XY,VBr),e(Hc,XBr),e(Qt,zBr),M(K5,Qt,null),e(ur,WBr),e(ur,zr),M(X9,zr,null),e(zr,QBr),e(zr,o4e),e(o4e,HBr),e(zr,UBr),e(zr,Fn),e(Fn,JBr),e(Fn,r4e),e(r4e,YBr),e(Fn,KBr),e(Fn,t4e),e(t4e,ZBr),e(Fn,ePr),e(Fn,a4e),e(a4e,oPr),e(Fn,rPr),e(zr,tPr),e(zr,$e),e($e,Z5),e(Z5,n4e),e(n4e,aPr),e(Z5,nPr),e(Z5,zY),e(zY,sPr),e(Z5,lPr),e($e,iPr),e($e,e3),e(e3,s4e),e(s4e,dPr),e(e3,cPr),e(e3,WY),e(WY,fPr),e(e3,mPr),e($e,gPr),e($e,o3),e(o3,l4e),e(l4e,hPr),e(o3,pPr),e(o3,QY),e(QY,_Pr),e(o3,uPr),e($e,bPr),e($e,r3),e(r3,i4e),e(i4e,vPr),e(r3,FPr),e(r3,HY),e(HY,TPr),e(r3,MPr),e($e,EPr),e($e,t3),e(t3,d4e),e(d4e,CPr),e(t3,wPr),e(t3,UY),e(UY,APr),e(t3,yPr),e($e,LPr),e($e,a3),e(a3,c4e),e(c4e,xPr),e(a3,$Pr),e(a3,JY),e(JY,kPr),e(a3,SPr),e($e,RPr),e($e,n3),e(n3,f4e),e(f4e,BPr),e(n3,PPr),e(n3,YY),e(YY,IPr),e(n3,qPr),e($e,NPr),e($e,s3),e(s3,m4e),e(m4e,jPr),e(s3,DPr),e(s3,KY),e(KY,GPr),e(s3,OPr),e($e,VPr),e($e,l3),e(l3,g4e),e(g4e,XPr),e(l3,zPr),e(l3,ZY),e(ZY,WPr),e(l3,QPr),e($e,HPr),e($e,i3),e(i3,h4e),e(h4e,UPr),e(i3,JPr),e(i3,eK),e(eK,YPr),e(i3,KPr),e(zr,ZPr),M(d3,zr,null),b(f,NNe,u),b(f,Uc,u),e(Uc,c3),e(c3,p4e),M(z9,p4e,null),e(Uc,eIr),e(Uc,_4e),e(_4e,oIr),b(f,jNe,u),b(f,br,u),M(W9,br,null),e(br,rIr),e(br,Jc),e(Jc,tIr),e(Jc,oK),e(oK,aIr),e(Jc,nIr),e(Jc,rK),e(rK,sIr),e(Jc,lIr),e(br,iIr),e(br,Q9),e(Q9,dIr),e(Q9,u4e),e(u4e,cIr),e(Q9,fIr),e(br,mIr),e(br,Ht),M(H9,Ht,null),e(Ht,gIr),e(Ht,b4e),e(b4e,hIr),e(Ht,pIr),e(Ht,Yc),e(Yc,_Ir),e(Yc,v4e),e(v4e,uIr),e(Yc,bIr),e(Yc,tK),e(tK,vIr),e(Yc,FIr),e(Ht,TIr),M(f3,Ht,null),e(br,MIr),e(br,Wr),M(U9,Wr,null),e(Wr,EIr),e(Wr,F4e),e(F4e,CIr),e(Wr,wIr),e(Wr,Tn),e(Tn,AIr),e(Tn,T4e),e(T4e,yIr),e(Tn,LIr),e(Tn,M4e),e(M4e,xIr),e(Tn,$Ir),e(Tn,E4e),e(E4e,kIr),e(Tn,SIr),e(Wr,RIr),e(Wr,De),e(De,m3),e(m3,C4e),e(C4e,BIr),e(m3,PIr),e(m3,aK),e(aK,IIr),e(m3,qIr),e(De,NIr),e(De,g3),e(g3,w4e),e(w4e,jIr),e(g3,DIr),e(g3,nK),e(nK,GIr),e(g3,OIr),e(De,VIr),e(De,h3),e(h3,A4e),e(A4e,XIr),e(h3,zIr),e(h3,sK),e(sK,WIr),e(h3,QIr),e(De,HIr),e(De,p3),e(p3,y4e),e(y4e,UIr),e(p3,JIr),e(p3,lK),e(lK,YIr),e(p3,KIr),e(De,ZIr),e(De,_3),e(_3,L4e),e(L4e,eqr),e(_3,oqr),e(_3,iK),e(iK,rqr),e(_3,tqr),e(De,aqr),e(De,u3),e(u3,x4e),e(x4e,nqr),e(u3,sqr),e(u3,dK),e(dK,lqr),e(u3,iqr),e(De,dqr),e(De,b3),e(b3,$4e),e($4e,cqr),e(b3,fqr),e(b3,cK),e(cK,mqr),e(b3,gqr),e(De,hqr),e(De,v3),e(v3,k4e),e(k4e,pqr),e(v3,_qr),e(v3,fK),e(fK,uqr),e(v3,bqr),e(Wr,vqr),M(F3,Wr,null),b(f,DNe,u),b(f,Kc,u),e(Kc,T3),e(T3,S4e),M(J9,S4e,null),e(Kc,Fqr),e(Kc,R4e),e(R4e,Tqr),b(f,GNe,u),b(f,vr,u),M(Y9,vr,null),e(vr,Mqr),e(vr,Zc),e(Zc,Eqr),e(Zc,mK),e(mK,Cqr),e(Zc,wqr),e(Zc,gK),e(gK,Aqr),e(Zc,yqr),e(vr,Lqr),e(vr,K9),e(K9,xqr),e(K9,B4e),e(B4e,$qr),e(K9,kqr),e(vr,Sqr),e(vr,Ut),M(Z9,Ut,null),e(Ut,Rqr),e(Ut,P4e),e(P4e,Bqr),e(Ut,Pqr),e(Ut,ef),e(ef,Iqr),e(ef,I4e),e(I4e,qqr),e(ef,Nqr),e(ef,hK),e(hK,jqr),e(ef,Dqr),e(Ut,Gqr),M(M3,Ut,null),e(vr,Oqr),e(vr,Qr),M(ex,Qr,null),e(Qr,Vqr),e(Qr,q4e),e(q4e,Xqr),e(Qr,zqr),e(Qr,Mn),e(Mn,Wqr),e(Mn,N4e),e(N4e,Qqr),e(Mn,Hqr),e(Mn,j4e),e(j4e,Uqr),e(Mn,Jqr),e(Mn,D4e),e(D4e,Yqr),e(Mn,Kqr),e(Qr,Zqr),e(Qr,Ge),e(Ge,E3),e(E3,G4e),e(G4e,eNr),e(E3,oNr),e(E3,pK),e(pK,rNr),e(E3,tNr),e(Ge,aNr),e(Ge,C3),e(C3,O4e),e(O4e,nNr),e(C3,sNr),e(C3,_K),e(_K,lNr),e(C3,iNr),e(Ge,dNr),e(Ge,w3),e(w3,V4e),e(V4e,cNr),e(w3,fNr),e(w3,uK),e(uK,mNr),e(w3,gNr),e(Ge,hNr),e(Ge,A3),e(A3,X4e),e(X4e,pNr),e(A3,_Nr),e(A3,bK),e(bK,uNr),e(A3,bNr),e(Ge,vNr),e(Ge,y3),e(y3,z4e),e(z4e,FNr),e(y3,TNr),e(y3,vK),e(vK,MNr),e(y3,ENr),e(Ge,CNr),e(Ge,L3),e(L3,W4e),e(W4e,wNr),e(L3,ANr),e(L3,FK),e(FK,yNr),e(L3,LNr),e(Ge,xNr),e(Ge,x3),e(x3,Q4e),e(Q4e,$Nr),e(x3,kNr),e(x3,TK),e(TK,SNr),e(x3,RNr),e(Ge,BNr),e(Ge,$3),e($3,H4e),e(H4e,PNr),e($3,INr),e($3,MK),e(MK,qNr),e($3,NNr),e(Qr,jNr),M(k3,Qr,null),b(f,ONe,u),b(f,of,u),e(of,S3),e(S3,U4e),M(ox,U4e,null),e(of,DNr),e(of,J4e),e(J4e,GNr),b(f,VNe,u),b(f,Fr,u),M(rx,Fr,null),e(Fr,ONr),e(Fr,rf),e(rf,VNr),e(rf,EK),e(EK,XNr),e(rf,zNr),e(rf,CK),e(CK,WNr),e(rf,QNr),e(Fr,HNr),e(Fr,tx),e(tx,UNr),e(tx,Y4e),e(Y4e,JNr),e(tx,YNr),e(Fr,KNr),e(Fr,Jt),M(ax,Jt,null),e(Jt,ZNr),e(Jt,K4e),e(K4e,ejr),e(Jt,ojr),e(Jt,tf),e(tf,rjr),e(tf,Z4e),e(Z4e,tjr),e(tf,ajr),e(tf,wK),e(wK,njr),e(tf,sjr),e(Jt,ljr),M(R3,Jt,null),e(Fr,ijr),e(Fr,Hr),M(nx,Hr,null),e(Hr,djr),e(Hr,eEe),e(eEe,cjr),e(Hr,fjr),e(Hr,En),e(En,mjr),e(En,oEe),e(oEe,gjr),e(En,hjr),e(En,rEe),e(rEe,pjr),e(En,_jr),e(En,tEe),e(tEe,ujr),e(En,bjr),e(Hr,vjr),e(Hr,aEe),e(aEe,B3),e(B3,nEe),e(nEe,Fjr),e(B3,Tjr),e(B3,AK),e(AK,Mjr),e(B3,Ejr),e(Hr,Cjr),M(P3,Hr,null),b(f,XNe,u),b(f,af,u),e(af,I3),e(I3,sEe),M(sx,sEe,null),e(af,wjr),e(af,lEe),e(lEe,Ajr),b(f,zNe,u),b(f,Tr,u),M(lx,Tr,null),e(Tr,yjr),e(Tr,nf),e(nf,Ljr),e(nf,yK),e(yK,xjr),e(nf,$jr),e(nf,LK),e(LK,kjr),e(nf,Sjr),e(Tr,Rjr),e(Tr,ix),e(ix,Bjr),e(ix,iEe),e(iEe,Pjr),e(ix,Ijr),e(Tr,qjr),e(Tr,Yt),M(dx,Yt,null),e(Yt,Njr),e(Yt,dEe),e(dEe,jjr),e(Yt,Djr),e(Yt,sf),e(sf,Gjr),e(sf,cEe),e(cEe,Ojr),e(sf,Vjr),e(sf,xK),e(xK,Xjr),e(sf,zjr),e(Yt,Wjr),M(q3,Yt,null),e(Tr,Qjr),e(Tr,Ur),M(cx,Ur,null),e(Ur,Hjr),e(Ur,fEe),e(fEe,Ujr),e(Ur,Jjr),e(Ur,Cn),e(Cn,Yjr),e(Cn,mEe),e(mEe,Kjr),e(Cn,Zjr),e(Cn,gEe),e(gEe,eDr),e(Cn,oDr),e(Cn,hEe),e(hEe,rDr),e(Cn,tDr),e(Ur,aDr),e(Ur,fx),e(fx,N3),e(N3,pEe),e(pEe,nDr),e(N3,sDr),e(N3,$K),e($K,lDr),e(N3,iDr),e(fx,dDr),e(fx,j3),e(j3,_Ee),e(_Ee,cDr),e(j3,fDr),e(j3,kK),e(kK,mDr),e(j3,gDr),e(Ur,hDr),M(D3,Ur,null),b(f,WNe,u),b(f,lf,u),e(lf,G3),e(G3,uEe),M(mx,uEe,null),e(lf,pDr),e(lf,bEe),e(bEe,_Dr),b(f,QNe,u),b(f,Mr,u),M(gx,Mr,null),e(Mr,uDr),e(Mr,df),e(df,bDr),e(df,SK),e(SK,vDr),e(df,FDr),e(df,RK),e(RK,TDr),e(df,MDr),e(Mr,EDr),e(Mr,hx),e(hx,CDr),e(hx,vEe),e(vEe,wDr),e(hx,ADr),e(Mr,yDr),e(Mr,Kt),M(px,Kt,null),e(Kt,LDr),e(Kt,FEe),e(FEe,xDr),e(Kt,$Dr),e(Kt,cf),e(cf,kDr),e(cf,TEe),e(TEe,SDr),e(cf,RDr),e(cf,BK),e(BK,BDr),e(cf,PDr),e(Kt,IDr),M(O3,Kt,null),e(Mr,qDr),e(Mr,Jr),M(_x,Jr,null),e(Jr,NDr),e(Jr,MEe),e(MEe,jDr),e(Jr,DDr),e(Jr,wn),e(wn,GDr),e(wn,EEe),e(EEe,ODr),e(wn,VDr),e(wn,CEe),e(CEe,XDr),e(wn,zDr),e(wn,wEe),e(wEe,WDr),e(wn,QDr),e(Jr,HDr),e(Jr,AEe),e(AEe,V3),e(V3,yEe),e(yEe,UDr),e(V3,JDr),e(V3,PK),e(PK,YDr),e(V3,KDr),e(Jr,ZDr),M(X3,Jr,null),HNe=!0},p(f,[u]){const ux={};u&2&&(ux.$$scope={dirty:u,ctx:f}),vf.$set(ux);const LEe={};u&2&&(LEe.$$scope={dirty:u,ctx:f}),vg.$set(LEe);const xEe={};u&2&&(xEe.$$scope={dirty:u,ctx:f}),eh.$set(xEe);const $Ee={};u&2&&($Ee.$$scope={dirty:u,ctx:f}),xh.$set($Ee);const bx={};u&2&&(bx.$$scope={dirty:u,ctx:f}),$h.$set(bx);const kEe={};u&2&&(kEe.$$scope={dirty:u,ctx:f}),Uh.$set(kEe);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),Jh.$set(An);const SEe={};u&2&&(SEe.$$scope={dirty:u,ctx:f}),Zh.$set(SEe);const REe={};u&2&&(REe.$$scope={dirty:u,ctx:f}),z_.$set(REe);const BEe={};u&2&&(BEe.$$scope={dirty:u,ctx:f}),Q_.$set(BEe);const vx={};u&2&&(vx.$$scope={dirty:u,ctx:f}),qu.$set(vx);const PEe={};u&2&&(PEe.$$scope={dirty:u,ctx:f}),ju.$set(PEe);const Fx={};u&2&&(Fx.$$scope={dirty:u,ctx:f}),C2.$set(Fx);const IEe={};u&2&&(IEe.$$scope={dirty:u,ctx:f}),A2.$set(IEe);const Tx={};u&2&&(Tx.$$scope={dirty:u,ctx:f}),d1.$set(Tx);const qEe={};u&2&&(qEe.$$scope={dirty:u,ctx:f}),f1.$set(qEe);const NEe={};u&2&&(NEe.$$scope={dirty:u,ctx:f}),x1.$set(NEe);const jEe={};u&2&&(jEe.$$scope={dirty:u,ctx:f}),k1.$set(jEe);const ff={};u&2&&(ff.$$scope={dirty:u,ctx:f}),wb.$set(ff);const DEe={};u&2&&(DEe.$$scope={dirty:u,ctx:f}),yb.$set(DEe);const GEe={};u&2&&(GEe.$$scope={dirty:u,ctx:f}),av.$set(GEe);const OEe={};u&2&&(OEe.$$scope={dirty:u,ctx:f}),sv.$set(OEe);const Mx={};u&2&&(Mx.$$scope={dirty:u,ctx:f}),gv.$set(Mx);const VEe={};u&2&&(VEe.$$scope={dirty:u,ctx:f}),pv.$set(VEe);const XEe={};u&2&&(XEe.$$scope={dirty:u,ctx:f}),Jv.$set(XEe);const zEe={};u&2&&(zEe.$$scope={dirty:u,ctx:f}),Kv.$set(zEe);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),jF.$set(et);const Ex={};u&2&&(Ex.$$scope={dirty:u,ctx:f}),GF.$set(Ex);const WEe={};u&2&&(WEe.$$scope={dirty:u,ctx:f}),XF.$set(WEe);const Cx={};u&2&&(Cx.$$scope={dirty:u,ctx:f}),WF.$set(Cx);const QEe={};u&2&&(QEe.$$scope={dirty:u,ctx:f}),n0.$set(QEe);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),l0.$set(ot);const HEe={};u&2&&(HEe.$$scope={dirty:u,ctx:f}),c0.$set(HEe);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),m0.$set(mf);const UEe={};u&2&&(UEe.$$scope={dirty:u,ctx:f}),E0.$set(UEe);const JEe={};u&2&&(JEe.$$scope={dirty:u,ctx:f}),w0.$set(JEe);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),S0.$set(y);const z3={};u&2&&(z3.$$scope={dirty:u,ctx:f}),B0.$set(z3);const YEe={};u&2&&(YEe.$$scope={dirty:u,ctx:f}),z0.$set(YEe);const KEe={};u&2&&(KEe.$$scope={dirty:u,ctx:f}),Q0.$set(KEe);const W3={};u&2&&(W3.$$scope={dirty:u,ctx:f}),Y0.$set(W3);const ZEe={};u&2&&(ZEe.$$scope={dirty:u,ctx:f}),Z0.$set(ZEe);const eCe={};u&2&&(eCe.$$scope={dirty:u,ctx:f}),sT.$set(eCe);const Q3={};u&2&&(Q3.$$scope={dirty:u,ctx:f}),iT.$set(Q3);const oCe={};u&2&&(oCe.$$scope={dirty:u,ctx:f}),gT.$set(oCe);const rCe={};u&2&&(rCe.$$scope={dirty:u,ctx:f}),pT.$set(rCe);const H3={};u&2&&(H3.$$scope={dirty:u,ctx:f}),vT.$set(H3);const tCe={};u&2&&(tCe.$$scope={dirty:u,ctx:f}),TT.$set(tCe);const aCe={};u&2&&(aCe.$$scope={dirty:u,ctx:f}),CT.$set(aCe);const U3={};u&2&&(U3.$$scope={dirty:u,ctx:f}),AT.$set(U3);const nCe={};u&2&&(nCe.$$scope={dirty:u,ctx:f}),ST.$set(nCe);const sCe={};u&2&&(sCe.$$scope={dirty:u,ctx:f}),BT.$set(sCe);const J3={};u&2&&(J3.$$scope={dirty:u,ctx:f}),qT.$set(J3);const lCe={};u&2&&(lCe.$$scope={dirty:u,ctx:f}),jT.$set(lCe);const iCe={};u&2&&(iCe.$$scope={dirty:u,ctx:f}),k7.$set(iCe);const Y3={};u&2&&(Y3.$$scope={dirty:u,ctx:f}),R7.$set(Y3);const dCe={};u&2&&(dCe.$$scope={dirty:u,ctx:f}),tM.$set(dCe);const cCe={};u&2&&(cCe.$$scope={dirty:u,ctx:f}),nM.$set(cCe);const K3={};u&2&&(K3.$$scope={dirty:u,ctx:f}),bM.$set(K3);const fCe={};u&2&&(fCe.$$scope={dirty:u,ctx:f}),FM.$set(fCe);const mCe={};u&2&&(mCe.$$scope={dirty:u,ctx:f}),wM.$set(mCe);const Z3={};u&2&&(Z3.$$scope={dirty:u,ctx:f}),yM.$set(Z3);const gCe={};u&2&&(gCe.$$scope={dirty:u,ctx:f}),HM.$set(gCe);const hCe={};u&2&&(hCe.$$scope={dirty:u,ctx:f}),JM.$set(hCe);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),l4.$set(ew);const pCe={};u&2&&(pCe.$$scope={dirty:u,ctx:f}),d4.$set(pCe);const _Ce={};u&2&&(_Ce.$$scope={dirty:u,ctx:f}),I4.$set(_Ce);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),N4.$set(ow);const uCe={};u&2&&(uCe.$$scope={dirty:u,ctx:f}),rE.$set(uCe);const bCe={};u&2&&(bCe.$$scope={dirty:u,ctx:f}),aE.$set(bCe);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),lE.$set(rw);const vCe={};u&2&&(vCe.$$scope={dirty:u,ctx:f}),dE.$set(vCe);const FCe={};u&2&&(FCe.$$scope={dirty:u,ctx:f}),fE.$set(FCe);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),gE.$set(tw);const TCe={};u&2&&(TCe.$$scope={dirty:u,ctx:f}),BE.$set(TCe);const MCe={};u&2&&(MCe.$$scope={dirty:u,ctx:f}),IE.$set(MCe);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),tC.$set(aw);const ECe={};u&2&&(ECe.$$scope={dirty:u,ctx:f}),nC.$set(ECe);const CCe={};u&2&&(CCe.$$scope={dirty:u,ctx:f}),lC.$set(CCe);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),dC.$set(nw);const wCe={};u&2&&(wCe.$$scope={dirty:u,ctx:f}),fC.$set(wCe);const ACe={};u&2&&(ACe.$$scope={dirty:u,ctx:f}),gC.$set(ACe);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),jC.$set(sw);const yCe={};u&2&&(yCe.$$scope={dirty:u,ctx:f}),GC.$set(yCe);const LCe={};u&2&&(LCe.$$scope={dirty:u,ctx:f}),YC.$set(LCe);const lw={};u&2&&(lw.$$scope={dirty:u,ctx:f}),ZC.$set(lw);const xCe={};u&2&&(xCe.$$scope={dirty:u,ctx:f}),m5.$set(xCe);const $Ce={};u&2&&($Ce.$$scope={dirty:u,ctx:f}),h5.$set($Ce);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),w5.$set(iw);const kCe={};u&2&&(kCe.$$scope={dirty:u,ctx:f}),y5.$set(kCe);const SCe={};u&2&&(SCe.$$scope={dirty:u,ctx:f}),q5.$set(SCe);const dw={};u&2&&(dw.$$scope={dirty:u,ctx:f}),j5.$set(dw);const RCe={};u&2&&(RCe.$$scope={dirty:u,ctx:f}),J5.$set(RCe);const BCe={};u&2&&(BCe.$$scope={dirty:u,ctx:f}),K5.$set(BCe);const cw={};u&2&&(cw.$$scope={dirty:u,ctx:f}),d3.$set(cw);const PCe={};u&2&&(PCe.$$scope={dirty:u,ctx:f}),f3.$set(PCe);const ICe={};u&2&&(ICe.$$scope={dirty:u,ctx:f}),F3.$set(ICe);const fw={};u&2&&(fw.$$scope={dirty:u,ctx:f}),M3.$set(fw);const qCe={};u&2&&(qCe.$$scope={dirty:u,ctx:f}),k3.$set(qCe);const NCe={};u&2&&(NCe.$$scope={dirty:u,ctx:f}),R3.$set(NCe);const mw={};u&2&&(mw.$$scope={dirty:u,ctx:f}),P3.$set(mw);const jCe={};u&2&&(jCe.$$scope={dirty:u,ctx:f}),q3.$set(jCe);const DCe={};u&2&&(DCe.$$scope={dirty:u,ctx:f}),D3.$set(DCe);const gw={};u&2&&(gw.$$scope={dirty:u,ctx:f}),O3.$set(gw);const GCe={};u&2&&(GCe.$$scope={dirty:u,ctx:f}),X3.$set(GCe)},i(f){HNe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(m6.$$.fragment,f),E(g6.$$.fragment,f),E(vf.$$.fragment,f),E(h6.$$.fragment,f),E(p6.$$.fragment,f),E(b6.$$.fragment,f),E(vg.$$.fragment,f),E(v6.$$.fragment,f),E(F6.$$.fragment,f),E(T6.$$.fragment,f),E(C6.$$.fragment,f),E(eh.$$.fragment,f),E(w6.$$.fragment,f),E(A6.$$.fragment,f),E(y6.$$.fragment,f),E($6.$$.fragment,f),E(xh.$$.fragment,f),E($h.$$.fragment,f),E(k6.$$.fragment,f),E(S6.$$.fragment,f),E(R6.$$.fragment,f),E(I6.$$.fragment,f),E(Uh.$$.fragment,f),E(Jh.$$.fragment,f),E(q6.$$.fragment,f),E(N6.$$.fragment,f),E(j6.$$.fragment,f),E(G6.$$.fragment,f),E(Zh.$$.fragment,f),E(O6.$$.fragment,f),E(z_.$$.fragment,f),E(V6.$$.fragment,f),E(X6.$$.fragment,f),E(W6.$$.fragment,f),E(Q_.$$.fragment,f),E(Q6.$$.fragment,f),E(qu.$$.fragment,f),E(H6.$$.fragment,f),E(U6.$$.fragment,f),E(Y6.$$.fragment,f),E(ju.$$.fragment,f),E(K6.$$.fragment,f),E(C2.$$.fragment,f),E(Z6.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(A2.$$.fragment,f),E(ty.$$.fragment,f),E(d1.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(f1.$$.fragment,f),E(iy.$$.fragment,f),E(x1.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(k1.$$.fragment,f),E(gy.$$.fragment,f),E(wb.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(yb.$$.fragment,f),E(by.$$.fragment,f),E(av.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(sv.$$.fragment,f),E(Ey.$$.fragment,f),E(gv.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(pv.$$.fragment,f),E(Ly.$$.fragment,f),E(Jv.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(Kv.$$.fragment,f),E(Ry.$$.fragment,f),E(jF.$$.fragment,f),E(By.$$.fragment,f),E(Py.$$.fragment,f),E(qy.$$.fragment,f),E(GF.$$.fragment,f),E(Ny.$$.fragment,f),E(XF.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(WF.$$.fragment,f),E(Vy.$$.fragment,f),E(n0.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(l0.$$.fragment,f),E(Hy.$$.fragment,f),E(c0.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(m0.$$.fragment,f),E(Zy.$$.fragment,f),E(E0.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(w0.$$.fragment,f),E(aL.$$.fragment,f),E(S0.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(B0.$$.fragment,f),E(dL.$$.fragment,f),E(z0.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(Q0.$$.fragment,f),E(hL.$$.fragment,f),E(Y0.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(vL.$$.fragment,f),E(Z0.$$.fragment,f),E(FL.$$.fragment,f),E(sT.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(iT.$$.fragment,f),E(wL.$$.fragment,f),E(gT.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(pT.$$.fragment,f),E($L.$$.fragment,f),E(vT.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(TT.$$.fragment,f),E(IL.$$.fragment,f),E(CT.$$.fragment,f),E(qL.$$.fragment,f),E(NL.$$.fragment,f),E(DL.$$.fragment,f),E(AT.$$.fragment,f),E(GL.$$.fragment,f),E(ST.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(BT.$$.fragment,f),E(WL.$$.fragment,f),E(qT.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(jT.$$.fragment,f),E(YL.$$.fragment,f),E(k7.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(R7.$$.fragment,f),E(r8.$$.fragment,f),E(tM.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(nM.$$.fragment,f),E(l8.$$.fragment,f),E(bM.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(FM.$$.fragment,f),E(m8.$$.fragment,f),E(wM.$$.fragment,f),E(g8.$$.fragment,f),E(h8.$$.fragment,f),E(_8.$$.fragment,f),E(yM.$$.fragment,f),E(u8.$$.fragment,f),E(HM.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(JM.$$.fragment,f),E(M8.$$.fragment,f),E(l4.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(d4.$$.fragment,f),E(y8.$$.fragment,f),E(I4.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(N4.$$.fragment,f),E(S8.$$.fragment,f),E(rE.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(aE.$$.fragment,f),E(q8.$$.fragment,f),E(lE.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(dE.$$.fragment,f),E(V8.$$.fragment,f),E(fE.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(gE.$$.fragment,f),E(H8.$$.fragment,f),E(BE.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(IE.$$.fragment,f),E(Z8.$$.fragment,f),E(tC.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E(nC.$$.fragment,f),E(a9.$$.fragment,f),E(lC.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(dC.$$.fragment,f),E(d9.$$.fragment,f),E(fC.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(gC.$$.fragment,f),E(h9.$$.fragment,f),E(jC.$$.fragment,f),E(p9.$$.fragment,f),E(_9.$$.fragment,f),E(b9.$$.fragment,f),E(GC.$$.fragment,f),E(v9.$$.fragment,f),E(YC.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(ZC.$$.fragment,f),E(C9.$$.fragment,f),E(m5.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(L9.$$.fragment,f),E(h5.$$.fragment,f),E(x9.$$.fragment,f),E(w5.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(y5.$$.fragment,f),E(B9.$$.fragment,f),E(q5.$$.fragment,f),E(P9.$$.fragment,f),E(I9.$$.fragment,f),E(N9.$$.fragment,f),E(j5.$$.fragment,f),E(j9.$$.fragment,f),E(J5.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(K5.$$.fragment,f),E(X9.$$.fragment,f),E(d3.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(H9.$$.fragment,f),E(f3.$$.fragment,f),E(U9.$$.fragment,f),E(F3.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(M3.$$.fragment,f),E(ex.$$.fragment,f),E(k3.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(R3.$$.fragment,f),E(nx.$$.fragment,f),E(P3.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(q3.$$.fragment,f),E(cx.$$.fragment,f),E(D3.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(O3.$$.fragment,f),E(_x.$$.fragment,f),E(X3.$$.fragment,f),HNe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(m6.$$.fragment,f),C(g6.$$.fragment,f),C(vf.$$.fragment,f),C(h6.$$.fragment,f),C(p6.$$.fragment,f),C(b6.$$.fragment,f),C(vg.$$.fragment,f),C(v6.$$.fragment,f),C(F6.$$.fragment,f),C(T6.$$.fragment,f),C(C6.$$.fragment,f),C(eh.$$.fragment,f),C(w6.$$.fragment,f),C(A6.$$.fragment,f),C(y6.$$.fragment,f),C($6.$$.fragment,f),C(xh.$$.fragment,f),C($h.$$.fragment,f),C(k6.$$.fragment,f),C(S6.$$.fragment,f),C(R6.$$.fragment,f),C(I6.$$.fragment,f),C(Uh.$$.fragment,f),C(Jh.$$.fragment,f),C(q6.$$.fragment,f),C(N6.$$.fragment,f),C(j6.$$.fragment,f),C(G6.$$.fragment,f),C(Zh.$$.fragment,f),C(O6.$$.fragment,f),C(z_.$$.fragment,f),C(V6.$$.fragment,f),C(X6.$$.fragment,f),C(W6.$$.fragment,f),C(Q_.$$.fragment,f),C(Q6.$$.fragment,f),C(qu.$$.fragment,f),C(H6.$$.fragment,f),C(U6.$$.fragment,f),C(Y6.$$.fragment,f),C(ju.$$.fragment,f),C(K6.$$.fragment,f),C(C2.$$.fragment,f),C(Z6.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(A2.$$.fragment,f),C(ty.$$.fragment,f),C(d1.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(f1.$$.fragment,f),C(iy.$$.fragment,f),C(x1.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(k1.$$.fragment,f),C(gy.$$.fragment,f),C(wb.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(yb.$$.fragment,f),C(by.$$.fragment,f),C(av.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(sv.$$.fragment,f),C(Ey.$$.fragment,f),C(gv.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(pv.$$.fragment,f),C(Ly.$$.fragment,f),C(Jv.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(Kv.$$.fragment,f),C(Ry.$$.fragment,f),C(jF.$$.fragment,f),C(By.$$.fragment,f),C(Py.$$.fragment,f),C(qy.$$.fragment,f),C(GF.$$.fragment,f),C(Ny.$$.fragment,f),C(XF.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(WF.$$.fragment,f),C(Vy.$$.fragment,f),C(n0.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(l0.$$.fragment,f),C(Hy.$$.fragment,f),C(c0.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(m0.$$.fragment,f),C(Zy.$$.fragment,f),C(E0.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(w0.$$.fragment,f),C(aL.$$.fragment,f),C(S0.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(B0.$$.fragment,f),C(dL.$$.fragment,f),C(z0.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(Q0.$$.fragment,f),C(hL.$$.fragment,f),C(Y0.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(vL.$$.fragment,f),C(Z0.$$.fragment,f),C(FL.$$.fragment,f),C(sT.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(iT.$$.fragment,f),C(wL.$$.fragment,f),C(gT.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(pT.$$.fragment,f),C($L.$$.fragment,f),C(vT.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(TT.$$.fragment,f),C(IL.$$.fragment,f),C(CT.$$.fragment,f),C(qL.$$.fragment,f),C(NL.$$.fragment,f),C(DL.$$.fragment,f),C(AT.$$.fragment,f),C(GL.$$.fragment,f),C(ST.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(BT.$$.fragment,f),C(WL.$$.fragment,f),C(qT.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(jT.$$.fragment,f),C(YL.$$.fragment,f),C(k7.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(R7.$$.fragment,f),C(r8.$$.fragment,f),C(tM.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(nM.$$.fragment,f),C(l8.$$.fragment,f),C(bM.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(FM.$$.fragment,f),C(m8.$$.fragment,f),C(wM.$$.fragment,f),C(g8.$$.fragment,f),C(h8.$$.fragment,f),C(_8.$$.fragment,f),C(yM.$$.fragment,f),C(u8.$$.fragment,f),C(HM.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(JM.$$.fragment,f),C(M8.$$.fragment,f),C(l4.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(d4.$$.fragment,f),C(y8.$$.fragment,f),C(I4.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(N4.$$.fragment,f),C(S8.$$.fragment,f),C(rE.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(aE.$$.fragment,f),C(q8.$$.fragment,f),C(lE.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(dE.$$.fragment,f),C(V8.$$.fragment,f),C(fE.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(gE.$$.fragment,f),C(H8.$$.fragment,f),C(BE.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(IE.$$.fragment,f),C(Z8.$$.fragment,f),C(tC.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C(nC.$$.fragment,f),C(a9.$$.fragment,f),C(lC.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(dC.$$.fragment,f),C(d9.$$.fragment,f),C(fC.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(gC.$$.fragment,f),C(h9.$$.fragment,f),C(jC.$$.fragment,f),C(p9.$$.fragment,f),C(_9.$$.fragment,f),C(b9.$$.fragment,f),C(GC.$$.fragment,f),C(v9.$$.fragment,f),C(YC.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(ZC.$$.fragment,f),C(C9.$$.fragment,f),C(m5.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(L9.$$.fragment,f),C(h5.$$.fragment,f),C(x9.$$.fragment,f),C(w5.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(y5.$$.fragment,f),C(B9.$$.fragment,f),C(q5.$$.fragment,f),C(P9.$$.fragment,f),C(I9.$$.fragment,f),C(N9.$$.fragment,f),C(j5.$$.fragment,f),C(j9.$$.fragment,f),C(J5.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(K5.$$.fragment,f),C(X9.$$.fragment,f),C(d3.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(H9.$$.fragment,f),C(f3.$$.fragment,f),C(U9.$$.fragment,f),C(F3.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(M3.$$.fragment,f),C(ex.$$.fragment,f),C(k3.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(R3.$$.fragment,f),C(nx.$$.fragment,f),C(P3.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(q3.$$.fragment,f),C(cx.$$.fragment,f),C(D3.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(O3.$$.fragment,f),C(_x.$$.fragment,f),C(X3.$$.fragment,f),HNe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(hf),f&&t(rt),f&&t(je),f&&t(We),f&&t(_f),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(zIe),f&&t(ui),w(m6),f&&t(WIe),f&&t(kn),f&&t(QIe),w(g6,f),f&&t(HIe),f&&t(B$),f&&t(UIe),w(vf,f),f&&t(JIe),f&&t(bi),w(h6),f&&t(YIe),f&&t(Co),w(p6),w(b6),w(vg),w(v6),f&&t(KIe),f&&t(Fi),w(F6),f&&t(ZIe),f&&t(wo),w(T6),w(C6),w(eh),w(w6),f&&t(eqe),f&&t(Ti),w(A6),f&&t(oqe),f&&t(Ao),w(y6),w($6),w(xh),w($h),w(k6),f&&t(rqe),f&&t(Mi),w(S6),f&&t(tqe),f&&t(yo),w(R6),w(I6),w(Uh),w(Jh),w(q6),f&&t(aqe),f&&t(Ci),w(N6),f&&t(nqe),f&&t(Lo),w(j6),w(G6),w(Zh),w(O6),w(z_),f&&t(sqe),f&&t(yi),w(V6),f&&t(lqe),f&&t(xo),w(X6),w(W6),w(Q_),w(Q6),w(qu),f&&t(iqe),f&&t($i),w(H6),f&&t(dqe),f&&t($o),w(U6),w(Y6),w(ju),w(K6),w(C2),f&&t(cqe),f&&t(Ri),w(Z6),f&&t(fqe),f&&t(ko),w(ey),w(ry),w(A2),w(ty),w(d1),f&&t(mqe),f&&t(Ii),w(ay),f&&t(gqe),f&&t(So),w(ny),w(ly),w(f1),w(iy),w(x1),f&&t(hqe),f&&t(ji),w(dy),f&&t(pqe),f&&t(Ro),w(cy),w(my),w(k1),w(gy),w(wb),f&&t(_qe),f&&t(Oi),w(hy),f&&t(uqe),f&&t(Bo),w(py),w(uy),w(yb),w(by),w(av),f&&t(bqe),f&&t(zi),w(vy),f&&t(vqe),f&&t(Po),w(Fy),w(My),w(sv),w(Ey),w(gv),f&&t(Fqe),f&&t(Hi),w(Cy),f&&t(Tqe),f&&t(Io),w(wy),w(yy),w(pv),w(Ly),w(Jv),f&&t(Mqe),f&&t(Yi),w(xy),f&&t(Eqe),f&&t(qo),w($y),w(Sy),w(Kv),w(Ry),w(jF),f&&t(Cqe),f&&t(ed),w(By),f&&t(wqe),f&&t(No),w(Py),w(qy),w(GF),w(Ny),w(XF),f&&t(Aqe),f&&t(td),w(jy),f&&t(yqe),f&&t(jo),w(Dy),w(Oy),w(WF),w(Vy),w(n0),f&&t(Lqe),f&&t(sd),w(Xy),f&&t(xqe),f&&t(Do),w(zy),w(Qy),w(l0),w(Hy),w(c0),f&&t($qe),f&&t(dd),w(Uy),f&&t(kqe),f&&t(Go),w(Jy),w(Ky),w(m0),w(Zy),w(E0),f&&t(Sqe),f&&t(md),w(eL),f&&t(Rqe),f&&t(Oo),w(oL),w(tL),w(w0),w(aL),w(S0),f&&t(Bqe),f&&t(pd),w(nL),f&&t(Pqe),f&&t(Vo),w(sL),w(iL),w(B0),w(dL),w(z0),f&&t(Iqe),f&&t(bd),w(cL),f&&t(qqe),f&&t(Xo),w(fL),w(gL),w(Q0),w(hL),w(Y0),f&&t(Nqe),f&&t(Td),w(_L),f&&t(jqe),f&&t(zo),w(uL),w(vL),w(Z0),w(FL),w(sT),f&&t(Dqe),f&&t(Cd),w(TL),f&&t(Gqe),f&&t(Wo),w(ML),w(CL),w(iT),w(wL),w(gT),f&&t(Oqe),f&&t(Ld),w(AL),f&&t(Vqe),f&&t(Qo),w(yL),w(xL),w(pT),w($L),w(vT),f&&t(Xqe),f&&t(kd),w(SL),f&&t(zqe),f&&t(Ho),w(RL),w(PL),w(TT),w(IL),w(CT),f&&t(Wqe),f&&t(Bd),w(qL),f&&t(Qqe),f&&t(Uo),w(NL),w(DL),w(AT),w(GL),w(ST),f&&t(Hqe),f&&t(qd),w(OL),f&&t(Uqe),f&&t(Jo),w(VL),w(zL),w(BT),w(WL),w(qT),f&&t(Jqe),f&&t(Dd),w(QL),f&&t(Yqe),f&&t(Yo),w(HL),w(JL),w(jT),w(YL),w(k7),f&&t(Kqe),f&&t(Vd),w(KL),f&&t(Zqe),f&&t(Ko),w(ZL),w(o8),w(R7),w(r8),w(tM),f&&t(eNe),f&&t(Wd),w(t8),f&&t(oNe),f&&t(Zo),w(a8),w(s8),w(nM),w(l8),w(bM),f&&t(rNe),f&&t(Ud),w(i8),f&&t(tNe),f&&t(er),w(d8),w(f8),w(FM),w(m8),w(wM),f&&t(aNe),f&&t(Kd),w(g8),f&&t(nNe),f&&t(or),w(h8),w(_8),w(yM),w(u8),w(HM),f&&t(sNe),f&&t(oc),w(b8),f&&t(lNe),f&&t(rr),w(v8),w(T8),w(JM),w(M8),w(l4),f&&t(iNe),f&&t(ac),w(E8),f&&t(dNe),f&&t(tr),w(C8),w(A8),w(d4),w(y8),w(I4),f&&t(cNe),f&&t(lc),w(L8),f&&t(fNe),f&&t(ar),w(x8),w(k8),w(N4),w(S8),w(rE),f&&t(mNe),f&&t(cc),w(R8),f&&t(gNe),f&&t(nr),w(B8),w(I8),w(aE),w(q8),w(lE),f&&t(hNe),f&&t(gc),w(j8),f&&t(pNe),f&&t(sr),w(D8),w(O8),w(dE),w(V8),w(fE),f&&t(_Ne),f&&t(_c),w(X8),f&&t(uNe),f&&t(lr),w(z8),w(Q8),w(gE),w(H8),w(BE),f&&t(bNe),f&&t(vc),w(U8),f&&t(vNe),f&&t(ir),w(J8),w(K8),w(IE),w(Z8),w(tC),f&&t(FNe),f&&t(Mc),w(e9),f&&t(TNe),f&&t(dr),w(o9),w(t9),w(nC),w(a9),w(lC),f&&t(MNe),f&&t(wc),w(n9),f&&t(ENe),f&&t(cr),w(s9),w(i9),w(dC),w(d9),w(fC),f&&t(CNe),f&&t(Lc),w(c9),f&&t(wNe),f&&t(fr),w(f9),w(g9),w(gC),w(h9),w(jC),f&&t(ANe),f&&t(kc),w(p9),f&&t(yNe),f&&t(mr),w(_9),w(b9),w(GC),w(v9),w(YC),f&&t(LNe),f&&t(Bc),w(F9),f&&t(xNe),f&&t(gr),w(T9),w(E9),w(ZC),w(C9),w(m5),f&&t($Ne),f&&t(qc),w(w9),f&&t(kNe),f&&t(hr),w(A9),w(L9),w(h5),w(x9),w(w5),f&&t(SNe),f&&t(Dc),w($9),f&&t(RNe),f&&t(pr),w(k9),w(R9),w(y5),w(B9),w(q5),f&&t(BNe),f&&t(Vc),w(P9),f&&t(PNe),f&&t(_r),w(I9),w(N9),w(j5),w(j9),w(J5),f&&t(INe),f&&t(Wc),w(D9),f&&t(qNe),f&&t(ur),w(G9),w(V9),w(K5),w(X9),w(d3),f&&t(NNe),f&&t(Uc),w(z9),f&&t(jNe),f&&t(br),w(W9),w(H9),w(f3),w(U9),w(F3),f&&t(DNe),f&&t(Kc),w(J9),f&&t(GNe),f&&t(vr),w(Y9),w(Z9),w(M3),w(ex),w(k3),f&&t(ONe),f&&t(of),w(ox),f&&t(VNe),f&&t(Fr),w(rx),w(ax),w(R3),w(nx),w(P3),f&&t(XNe),f&&t(af),w(sx),f&&t(zNe),f&&t(Tr),w(lx),w(dx),w(q3),w(cx),w(D3),f&&t(WNe),f&&t(lf),w(mx),f&&t(QNe),f&&t(Mr),w(gx),w(px),w(O3),w(_x),w(X3)}}}const rxt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function txt(L){return t8t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class cxt extends ZLt{constructor(g){super();e8t(this,g,txt,oxt,o8t,{})}}export{cxt as default,rxt as metadata};
